
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009608  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  080097e8  080097e8  000197e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bd8  08009bd8  00020444  2**0
                  CONTENTS
  4 .ARM          00000000  08009bd8  08009bd8  00020444  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009bd8  08009bd8  00020444  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bd8  08009bd8  00019bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009bdc  08009bdc  00019bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000444  20000000  08009be0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f8  20000444  0800a024  00020444  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000093c  0800a024  0002093c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020444  2**0
                  CONTENTS, READONLY
 12 .debug_info   000227af  00000000  00000000  00020474  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004684  00000000  00000000  00042c23  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b20  00000000  00000000  000472a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000018e8  00000000  00000000  00048dc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002eb71  00000000  00000000  0004a6b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001a5eb  00000000  00000000  00079221  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012381c  00000000  00000000  0009380c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b7028  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000079e0  00000000  00000000  001b70a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000444 	.word	0x20000444
 80001fc:	00000000 	.word	0x00000000
 8000200:	080097d0 	.word	0x080097d0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000448 	.word	0x20000448
 800021c:	080097d0 	.word	0x080097d0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <DM_DigitCount>:
 *
 *
 *
 */
int DM_DigitCount(int num)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
	if(num < 10)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	2b09      	cmp	r3, #9
 80002cc:	dc01      	bgt.n	80002d2 <DM_DigitCount+0x12>
		return 1;
 80002ce:	2301      	movs	r3, #1
 80002d0:	e018      	b.n	8000304 <DM_DigitCount+0x44>
	if(num < 100)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	2b63      	cmp	r3, #99	; 0x63
 80002d6:	dc01      	bgt.n	80002dc <DM_DigitCount+0x1c>
		return 2;
 80002d8:	2302      	movs	r3, #2
 80002da:	e013      	b.n	8000304 <DM_DigitCount+0x44>
	if(num < 1000)
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80002e2:	da01      	bge.n	80002e8 <DM_DigitCount+0x28>
		return 3;
 80002e4:	2303      	movs	r3, #3
 80002e6:	e00d      	b.n	8000304 <DM_DigitCount+0x44>
	if(num < 10000)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	f242 720f 	movw	r2, #9999	; 0x270f
 80002ee:	4293      	cmp	r3, r2
 80002f0:	dc01      	bgt.n	80002f6 <DM_DigitCount+0x36>
		return 4;
 80002f2:	2304      	movs	r3, #4
 80002f4:	e006      	b.n	8000304 <DM_DigitCount+0x44>
	if(num < 100000)
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	4a05      	ldr	r2, [pc, #20]	; (8000310 <DM_DigitCount+0x50>)
 80002fa:	4293      	cmp	r3, r2
 80002fc:	dc01      	bgt.n	8000302 <DM_DigitCount+0x42>
		return 5;
 80002fe:	2305      	movs	r3, #5
 8000300:	e000      	b.n	8000304 <DM_DigitCount+0x44>
	else
		return 0;
 8000302:	2300      	movs	r3, #0
}
 8000304:	4618      	mov	r0, r3
 8000306:	370c      	adds	r7, #12
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr
 8000310:	0001869f 	.word	0x0001869f

08000314 <DM_RefreshBackgroundLayout>:
 * Call this only once during init.
 *
 *
 */
void DM_RefreshBackgroundLayout()
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af04      	add	r7, sp, #16
	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[0],
 800031a:	4b1d      	ldr	r3, [pc, #116]	; (8000390 <DM_RefreshBackgroundLayout+0x7c>)
 800031c:	8818      	ldrh	r0, [r3, #0]
 800031e:	2300      	movs	r3, #0
 8000320:	9302      	str	r3, [sp, #8]
 8000322:	2302      	movs	r3, #2
 8000324:	9301      	str	r3, [sp, #4]
 8000326:	f240 33ef 	movw	r3, #1007	; 0x3ef
 800032a:	9300      	str	r3, [sp, #0]
 800032c:	2332      	movs	r3, #50	; 0x32
 800032e:	2250      	movs	r2, #80	; 0x50
 8000330:	21c8      	movs	r1, #200	; 0xc8
 8000332:	f007 fa63 	bl	80077fc <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKCYAN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[1],
 8000336:	4b16      	ldr	r3, [pc, #88]	; (8000390 <DM_RefreshBackgroundLayout+0x7c>)
 8000338:	8858      	ldrh	r0, [r3, #2]
 800033a:	2300      	movs	r3, #0
 800033c:	9302      	str	r3, [sp, #8]
 800033e:	2302      	movs	r3, #2
 8000340:	9301      	str	r3, [sp, #4]
 8000342:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000346:	9300      	str	r3, [sp, #0]
 8000348:	2332      	movs	r3, #50	; 0x32
 800034a:	2250      	movs	r2, #80	; 0x50
 800034c:	21c8      	movs	r1, #200	; 0xc8
 800034e:	f007 fa55 	bl	80077fc <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKGREEN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[2],
 8000352:	4b0f      	ldr	r3, [pc, #60]	; (8000390 <DM_RefreshBackgroundLayout+0x7c>)
 8000354:	8898      	ldrh	r0, [r3, #4]
 8000356:	2300      	movs	r3, #0
 8000358:	9302      	str	r3, [sp, #8]
 800035a:	2302      	movs	r3, #2
 800035c:	9301      	str	r3, [sp, #4]
 800035e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000362:	9300      	str	r3, [sp, #0]
 8000364:	2332      	movs	r3, #50	; 0x32
 8000366:	2250      	movs	r2, #80	; 0x50
 8000368:	21c8      	movs	r1, #200	; 0xc8
 800036a:	f007 fa47 	bl	80077fc <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													YELLOW,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[3],
 800036e:	4b08      	ldr	r3, [pc, #32]	; (8000390 <DM_RefreshBackgroundLayout+0x7c>)
 8000370:	88d8      	ldrh	r0, [r3, #6]
 8000372:	2300      	movs	r3, #0
 8000374:	9302      	str	r3, [sp, #8]
 8000376:	2302      	movs	r3, #2
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800037e:	9300      	str	r3, [sp, #0]
 8000380:	2332      	movs	r3, #50	; 0x32
 8000382:	2250      	movs	r2, #80	; 0x50
 8000384:	21c8      	movs	r1, #200	; 0xc8
 8000386:	f007 fa39 	bl	80077fc <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_WIDTH,
													BTN_HEIGHT,
													RED,
													BORDER_SIZE,
													BLACK);
}
 800038a:	bf00      	nop
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	20000000 	.word	0x20000000

08000394 <DM_Init>:
 *
 *
 *
 */
void DM_Init()
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af02      	add	r7, sp, #8
	  ILI9341_Init();
 800039a:	f007 fcf7 	bl	8007d8c <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 800039e:	2003      	movs	r0, #3
 80003a0:	f007 fc96 	bl	8007cd0 <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 80003a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80003a8:	f007 fea6 	bl	80080f8 <ILI9341_Fill_Screen>
	  ILI9341_Draw_Text("Initialising", 10, 10, BLACK, 1, WHITE);
 80003ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80003b0:	9301      	str	r3, [sp, #4]
 80003b2:	2301      	movs	r3, #1
 80003b4:	9300      	str	r3, [sp, #0]
 80003b6:	2300      	movs	r3, #0
 80003b8:	220a      	movs	r2, #10
 80003ba:	210a      	movs	r1, #10
 80003bc:	4805      	ldr	r0, [pc, #20]	; (80003d4 <DM_Init+0x40>)
 80003be:	f007 fb87 	bl	8007ad0 <ILI9341_Draw_Text>
	  DM_RefreshBackgroundLayout();
 80003c2:	f7ff ffa7 	bl	8000314 <DM_RefreshBackgroundLayout>
	  printf("Init Completed\n");
 80003c6:	4804      	ldr	r0, [pc, #16]	; (80003d8 <DM_Init+0x44>)
 80003c8:	f008 f956 	bl	8008678 <puts>
}
 80003cc:	bf00      	nop
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	080097e8 	.word	0x080097e8
 80003d8:	080097f8 	.word	0x080097f8

080003dc <DM_AddDigitPadding>:
 *				1 if buflen is invalid size
 *				2 unknown error
 *
 */
int DM_AddDigitPadding(uint16_t num, char *buffer, uint16_t buflen)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b084      	sub	sp, #16
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	4603      	mov	r3, r0
 80003e4:	6039      	str	r1, [r7, #0]
 80003e6:	80fb      	strh	r3, [r7, #6]
 80003e8:	4613      	mov	r3, r2
 80003ea:	80bb      	strh	r3, [r7, #4]
	if((buflen < 1) || (buflen > 6))
 80003ec:	88bb      	ldrh	r3, [r7, #4]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d002      	beq.n	80003f8 <DM_AddDigitPadding+0x1c>
 80003f2:	88bb      	ldrh	r3, [r7, #4]
 80003f4:	2b06      	cmp	r3, #6
 80003f6:	d901      	bls.n	80003fc <DM_AddDigitPadding+0x20>
		return 1;
 80003f8:	2301      	movs	r3, #1
 80003fa:	e048      	b.n	800048e <DM_AddDigitPadding+0xb2>

	//char* tmpbuf = malloc(sizeof(buffer) * buflen);

	uint16_t tmpcnt = num;
 80003fc:	88fb      	ldrh	r3, [r7, #6]
 80003fe:	81fb      	strh	r3, [r7, #14]
	switch(DM_DigitCount(tmpcnt))
 8000400:	89fb      	ldrh	r3, [r7, #14]
 8000402:	4618      	mov	r0, r3
 8000404:	f7ff ff5c 	bl	80002c0 <DM_DigitCount>
 8000408:	4603      	mov	r3, r0
 800040a:	2b05      	cmp	r3, #5
 800040c:	d83e      	bhi.n	800048c <DM_AddDigitPadding+0xb0>
 800040e:	a201      	add	r2, pc, #4	; (adr r2, 8000414 <DM_AddDigitPadding+0x38>)
 8000410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000414:	0800042d 	.word	0x0800042d
 8000418:	0800043d 	.word	0x0800043d
 800041c:	0800044d 	.word	0x0800044d
 8000420:	0800045d 	.word	0x0800045d
 8000424:	0800046d 	.word	0x0800046d
 8000428:	0800047d 	.word	0x0800047d
	{

		case 0:
			snprintf(buffer,buflen, "     ");
 800042c:	88bb      	ldrh	r3, [r7, #4]
 800042e:	4a1a      	ldr	r2, [pc, #104]	; (8000498 <DM_AddDigitPadding+0xbc>)
 8000430:	4619      	mov	r1, r3
 8000432:	6838      	ldr	r0, [r7, #0]
 8000434:	f008 f928 	bl	8008688 <sniprintf>
			return 0;
 8000438:	2300      	movs	r3, #0
 800043a:	e028      	b.n	800048e <DM_AddDigitPadding+0xb2>
		case 1:
			snprintf(buffer, buflen, "%u    ", tmpcnt);
 800043c:	88b9      	ldrh	r1, [r7, #4]
 800043e:	89fb      	ldrh	r3, [r7, #14]
 8000440:	4a16      	ldr	r2, [pc, #88]	; (800049c <DM_AddDigitPadding+0xc0>)
 8000442:	6838      	ldr	r0, [r7, #0]
 8000444:	f008 f920 	bl	8008688 <sniprintf>
			return 0;
 8000448:	2300      	movs	r3, #0
 800044a:	e020      	b.n	800048e <DM_AddDigitPadding+0xb2>
		case 2:
			snprintf(buffer, buflen, "%u   ", tmpcnt);
 800044c:	88b9      	ldrh	r1, [r7, #4]
 800044e:	89fb      	ldrh	r3, [r7, #14]
 8000450:	4a13      	ldr	r2, [pc, #76]	; (80004a0 <DM_AddDigitPadding+0xc4>)
 8000452:	6838      	ldr	r0, [r7, #0]
 8000454:	f008 f918 	bl	8008688 <sniprintf>
			return 0;
 8000458:	2300      	movs	r3, #0
 800045a:	e018      	b.n	800048e <DM_AddDigitPadding+0xb2>
		case 3:
			snprintf(buffer, buflen, "%u  ", tmpcnt);
 800045c:	88b9      	ldrh	r1, [r7, #4]
 800045e:	89fb      	ldrh	r3, [r7, #14]
 8000460:	4a10      	ldr	r2, [pc, #64]	; (80004a4 <DM_AddDigitPadding+0xc8>)
 8000462:	6838      	ldr	r0, [r7, #0]
 8000464:	f008 f910 	bl	8008688 <sniprintf>
			return 0;
 8000468:	2300      	movs	r3, #0
 800046a:	e010      	b.n	800048e <DM_AddDigitPadding+0xb2>
		case 4:
			snprintf(buffer, buflen, "%u ", tmpcnt);
 800046c:	88b9      	ldrh	r1, [r7, #4]
 800046e:	89fb      	ldrh	r3, [r7, #14]
 8000470:	4a0d      	ldr	r2, [pc, #52]	; (80004a8 <DM_AddDigitPadding+0xcc>)
 8000472:	6838      	ldr	r0, [r7, #0]
 8000474:	f008 f908 	bl	8008688 <sniprintf>
			return 0;
 8000478:	2300      	movs	r3, #0
 800047a:	e008      	b.n	800048e <DM_AddDigitPadding+0xb2>
		case 5:
			snprintf(buffer, buflen, "%u", tmpcnt);
 800047c:	88b9      	ldrh	r1, [r7, #4]
 800047e:	89fb      	ldrh	r3, [r7, #14]
 8000480:	4a0a      	ldr	r2, [pc, #40]	; (80004ac <DM_AddDigitPadding+0xd0>)
 8000482:	6838      	ldr	r0, [r7, #0]
 8000484:	f008 f900 	bl	8008688 <sniprintf>
			return 0;
 8000488:	2300      	movs	r3, #0
 800048a:	e000      	b.n	800048e <DM_AddDigitPadding+0xb2>

	}

	return 2;
 800048c:	2302      	movs	r3, #2


}
 800048e:	4618      	mov	r0, r3
 8000490:	3710      	adds	r7, #16
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	08009840 	.word	0x08009840
 800049c:	08009848 	.word	0x08009848
 80004a0:	08009850 	.word	0x08009850
 80004a4:	08009858 	.word	0x08009858
 80004a8:	08009860 	.word	0x08009860
 80004ac:	08009864 	.word	0x08009864

080004b0 <DM_UpdateDisplay>:
 *
 *
 */

void DM_UpdateDisplay()
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b084      	sub	sp, #16
 80004b4:	af02      	add	r7, sp, #8
													BORDER_SIZE,
													BLACK);
													*/


	char tmp[6] = "";
 80004b6:	2300      	movs	r3, #0
 80004b8:	603b      	str	r3, [r7, #0]
 80004ba:	2300      	movs	r3, #0
 80004bc:	80bb      	strh	r3, [r7, #4]
	if(DM_AddDigitPadding(TIM5->CNT, tmp, sizeof(tmp)) == 0)
 80004be:	4b1e      	ldr	r3, [pc, #120]	; (8000538 <DM_UpdateDisplay+0x88>)
 80004c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004c2:	b29b      	uxth	r3, r3
 80004c4:	4639      	mov	r1, r7
 80004c6:	2206      	movs	r2, #6
 80004c8:	4618      	mov	r0, r3
 80004ca:	f7ff ff87 	bl	80003dc <DM_AddDigitPadding>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d10a      	bne.n	80004ea <DM_UpdateDisplay+0x3a>
	{
		//ILI9341_Draw_Text(tmp, STRINGREG[0].x, STRINGREG[0].y, BLACK, STRINGREG[0].size, DARKCYAN);
		ILI9341_Draw_Text(tmp, 10, 210, BLACK, 2, DARKCYAN);
 80004d4:	4638      	mov	r0, r7
 80004d6:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80004da:	9301      	str	r3, [sp, #4]
 80004dc:	2302      	movs	r3, #2
 80004de:	9300      	str	r3, [sp, #0]
 80004e0:	2300      	movs	r3, #0
 80004e2:	22d2      	movs	r2, #210	; 0xd2
 80004e4:	210a      	movs	r1, #10
 80004e6:	f007 faf3 	bl	8007ad0 <ILI9341_Draw_Text>
	}

	ILI9341_Draw_Text("TWO", 100, 210, BLACK, 2, DARKGREEN);
 80004ea:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80004ee:	9301      	str	r3, [sp, #4]
 80004f0:	2302      	movs	r3, #2
 80004f2:	9300      	str	r3, [sp, #0]
 80004f4:	2300      	movs	r3, #0
 80004f6:	22d2      	movs	r2, #210	; 0xd2
 80004f8:	2164      	movs	r1, #100	; 0x64
 80004fa:	4810      	ldr	r0, [pc, #64]	; (800053c <DM_UpdateDisplay+0x8c>)
 80004fc:	f007 fae8 	bl	8007ad0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("THREE", 175, 210, BLACK, 2, YELLOW);
 8000500:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000504:	9301      	str	r3, [sp, #4]
 8000506:	2302      	movs	r3, #2
 8000508:	9300      	str	r3, [sp, #0]
 800050a:	2300      	movs	r3, #0
 800050c:	22d2      	movs	r2, #210	; 0xd2
 800050e:	21af      	movs	r1, #175	; 0xaf
 8000510:	480b      	ldr	r0, [pc, #44]	; (8000540 <DM_UpdateDisplay+0x90>)
 8000512:	f007 fadd 	bl	8007ad0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FOUR", 260, 210, BLACK, 2, RED);
 8000516:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800051a:	9301      	str	r3, [sp, #4]
 800051c:	2302      	movs	r3, #2
 800051e:	9300      	str	r3, [sp, #0]
 8000520:	2300      	movs	r3, #0
 8000522:	22d2      	movs	r2, #210	; 0xd2
 8000524:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000528:	4806      	ldr	r0, [pc, #24]	; (8000544 <DM_UpdateDisplay+0x94>)
 800052a:	f007 fad1 	bl	8007ad0 <ILI9341_Draw_Text>

}
 800052e:	bf00      	nop
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40000c00 	.word	0x40000c00
 800053c:	0800980c 	.word	0x0800980c
 8000540:	08009810 	.word	0x08009810
 8000544:	08009818 	.word	0x08009818

08000548 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b08c      	sub	sp, #48	; 0x30
 800054c:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 800054e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	2220      	movs	r2, #32
 800055e:	2100      	movs	r1, #0
 8000560:	4618      	mov	r0, r3
 8000562:	f008 f80d 	bl	8008580 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000566:	4b32      	ldr	r3, [pc, #200]	; (8000630 <MX_ADC1_Init+0xe8>)
 8000568:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800056c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800056e:	4b30      	ldr	r3, [pc, #192]	; (8000630 <MX_ADC1_Init+0xe8>)
 8000570:	2200      	movs	r2, #0
 8000572:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000574:	4b2e      	ldr	r3, [pc, #184]	; (8000630 <MX_ADC1_Init+0xe8>)
 8000576:	2200      	movs	r2, #0
 8000578:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800057a:	4b2d      	ldr	r3, [pc, #180]	; (8000630 <MX_ADC1_Init+0xe8>)
 800057c:	2200      	movs	r2, #0
 800057e:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000580:	4b2b      	ldr	r3, [pc, #172]	; (8000630 <MX_ADC1_Init+0xe8>)
 8000582:	2200      	movs	r2, #0
 8000584:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000586:	4b2a      	ldr	r3, [pc, #168]	; (8000630 <MX_ADC1_Init+0xe8>)
 8000588:	2200      	movs	r2, #0
 800058a:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800058c:	4b28      	ldr	r3, [pc, #160]	; (8000630 <MX_ADC1_Init+0xe8>)
 800058e:	2204      	movs	r2, #4
 8000590:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000592:	4b27      	ldr	r3, [pc, #156]	; (8000630 <MX_ADC1_Init+0xe8>)
 8000594:	2200      	movs	r2, #0
 8000596:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000598:	4b25      	ldr	r3, [pc, #148]	; (8000630 <MX_ADC1_Init+0xe8>)
 800059a:	2201      	movs	r2, #1
 800059c:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800059e:	4b24      	ldr	r3, [pc, #144]	; (8000630 <MX_ADC1_Init+0xe8>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005a4:	4b22      	ldr	r3, [pc, #136]	; (8000630 <MX_ADC1_Init+0xe8>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005ac:	4b20      	ldr	r3, [pc, #128]	; (8000630 <MX_ADC1_Init+0xe8>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005b2:	4b1f      	ldr	r3, [pc, #124]	; (8000630 <MX_ADC1_Init+0xe8>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005b8:	4b1d      	ldr	r3, [pc, #116]	; (8000630 <MX_ADC1_Init+0xe8>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80005c0:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <MX_ADC1_Init+0xe8>)
 80005c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005c6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80005c8:	4b19      	ldr	r3, [pc, #100]	; (8000630 <MX_ADC1_Init+0xe8>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d0:	4817      	ldr	r0, [pc, #92]	; (8000630 <MX_ADC1_Init+0xe8>)
 80005d2:	f002 f83d 	bl	8002650 <HAL_ADC_Init>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80005dc:	f000 ff38 	bl	8001450 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005e0:	2300      	movs	r3, #0
 80005e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005e8:	4619      	mov	r1, r3
 80005ea:	4811      	ldr	r0, [pc, #68]	; (8000630 <MX_ADC1_Init+0xe8>)
 80005ec:	f002 fdc6 	bl	800317c <HAL_ADCEx_MultiModeConfigChannel>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80005f6:	f000 ff2b 	bl	8001450 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80005fa:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <MX_ADC1_Init+0xec>)
 80005fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005fe:	2306      	movs	r3, #6
 8000600:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000602:	2300      	movs	r3, #0
 8000604:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000606:	237f      	movs	r3, #127	; 0x7f
 8000608:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800060a:	2304      	movs	r3, #4
 800060c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	4619      	mov	r1, r3
 8000616:	4806      	ldr	r0, [pc, #24]	; (8000630 <MX_ADC1_Init+0xe8>)
 8000618:	f002 f9da 	bl	80029d0 <HAL_ADC_ConfigChannel>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000622:	f000 ff15 	bl	8001450 <Error_Handler>
  }

}
 8000626:	bf00      	nop
 8000628:	3730      	adds	r7, #48	; 0x30
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	20000484 	.word	0x20000484
 8000634:	0c900008 	.word	0x0c900008

08000638 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08a      	sub	sp, #40	; 0x28
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000640:	f107 0314 	add.w	r3, r7, #20
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000658:	d14f      	bne.n	80006fa <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800065a:	4b2a      	ldr	r3, [pc, #168]	; (8000704 <HAL_ADC_MspInit+0xcc>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065e:	4a29      	ldr	r2, [pc, #164]	; (8000704 <HAL_ADC_MspInit+0xcc>)
 8000660:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000664:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000666:	4b27      	ldr	r3, [pc, #156]	; (8000704 <HAL_ADC_MspInit+0xcc>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800066e:	613b      	str	r3, [r7, #16]
 8000670:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000672:	4b24      	ldr	r3, [pc, #144]	; (8000704 <HAL_ADC_MspInit+0xcc>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000676:	4a23      	ldr	r2, [pc, #140]	; (8000704 <HAL_ADC_MspInit+0xcc>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800067e:	4b21      	ldr	r3, [pc, #132]	; (8000704 <HAL_ADC_MspInit+0xcc>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800068a:	2304      	movs	r3, #4
 800068c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800068e:	2303      	movs	r3, #3
 8000690:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4619      	mov	r1, r3
 800069c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a0:	f004 f888 	bl	80047b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80006a4:	4b18      	ldr	r3, [pc, #96]	; (8000708 <HAL_ADC_MspInit+0xd0>)
 80006a6:	4a19      	ldr	r2, [pc, #100]	; (800070c <HAL_ADC_MspInit+0xd4>)
 80006a8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80006aa:	4b17      	ldr	r3, [pc, #92]	; (8000708 <HAL_ADC_MspInit+0xd0>)
 80006ac:	2205      	movs	r2, #5
 80006ae:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006b0:	4b15      	ldr	r3, [pc, #84]	; (8000708 <HAL_ADC_MspInit+0xd0>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006b6:	4b14      	ldr	r3, [pc, #80]	; (8000708 <HAL_ADC_MspInit+0xd0>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <HAL_ADC_MspInit+0xd0>)
 80006be:	2280      	movs	r2, #128	; 0x80
 80006c0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <HAL_ADC_MspInit+0xd0>)
 80006c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006c8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80006ca:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <HAL_ADC_MspInit+0xd0>)
 80006cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006d0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006d2:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <HAL_ADC_MspInit+0xd0>)
 80006d4:	2220      	movs	r2, #32
 80006d6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006d8:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <HAL_ADC_MspInit+0xd0>)
 80006da:	2200      	movs	r2, #0
 80006dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006de:	480a      	ldr	r0, [pc, #40]	; (8000708 <HAL_ADC_MspInit+0xd0>)
 80006e0:	f003 fdf6 	bl	80042d0 <HAL_DMA_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 80006ea:	f000 feb1 	bl	8001450 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4a05      	ldr	r2, [pc, #20]	; (8000708 <HAL_ADC_MspInit+0xd0>)
 80006f2:	655a      	str	r2, [r3, #84]	; 0x54
 80006f4:	4a04      	ldr	r2, [pc, #16]	; (8000708 <HAL_ADC_MspInit+0xd0>)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006fa:	bf00      	nop
 80006fc:	3728      	adds	r7, #40	; 0x28
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40021000 	.word	0x40021000
 8000708:	200004f0 	.word	0x200004f0
 800070c:	40020008 	.word	0x40020008

08000710 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_COMP1_Init+0x44>)
 8000716:	4a10      	ldr	r2, [pc, #64]	; (8000758 <MX_COMP1_Init+0x48>)
 8000718:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_COMP1_Init+0x44>)
 800071c:	2200      	movs	r2, #0
 800071e:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_COMP1_Init+0x44>)
 8000722:	4a0e      	ldr	r2, [pc, #56]	; (800075c <MX_COMP1_Init+0x4c>)
 8000724:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <MX_COMP1_Init+0x44>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800072c:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_COMP1_Init+0x44>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <MX_COMP1_Init+0x44>)
 8000734:	2200      	movs	r2, #0
 8000736:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_COMP1_Init+0x44>)
 800073a:	2200      	movs	r2, #0
 800073c:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800073e:	4805      	ldr	r0, [pc, #20]	; (8000754 <MX_COMP1_Init+0x44>)
 8000740:	f002 ff70 	bl	8003624 <HAL_COMP_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 800074a:	f000 fe81 	bl	8001450 <Error_Handler>
  }

}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000550 	.word	0x20000550
 8000758:	40010200 	.word	0x40010200
 800075c:	00800030 	.word	0x00800030

08000760 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b088      	sub	sp, #32
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a0f      	ldr	r2, [pc, #60]	; (80007bc <HAL_COMP_MspInit+0x5c>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d118      	bne.n	80007b4 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <HAL_COMP_MspInit+0x60>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	4a0e      	ldr	r2, [pc, #56]	; (80007c0 <HAL_COMP_MspInit+0x60>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <HAL_COMP_MspInit+0x60>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800079a:	2302      	movs	r3, #2
 800079c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800079e:	2303      	movs	r3, #3
 80007a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a6:	f107 030c 	add.w	r3, r7, #12
 80007aa:	4619      	mov	r1, r3
 80007ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b0:	f004 f800 	bl	80047b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 80007b4:	bf00      	nop
 80007b6:	3720      	adds	r7, #32
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40010200 	.word	0x40010200
 80007c0:	40021000 	.word	0x40021000

080007c4 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08c      	sub	sp, #48	; 0x30
 80007c8:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80007ca:	463b      	mov	r3, r7
 80007cc:	2230      	movs	r2, #48	; 0x30
 80007ce:	2100      	movs	r1, #0
 80007d0:	4618      	mov	r0, r3
 80007d2:	f007 fed5 	bl	8008580 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 80007d6:	4b1e      	ldr	r3, [pc, #120]	; (8000850 <MX_DAC1_Init+0x8c>)
 80007d8:	4a1e      	ldr	r2, [pc, #120]	; (8000854 <MX_DAC1_Init+0x90>)
 80007da:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80007dc:	481c      	ldr	r0, [pc, #112]	; (8000850 <MX_DAC1_Init+0x8c>)
 80007de:	f003 f9c4 	bl	8003b6a <HAL_DAC_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80007e8:	f000 fe32 	bl	8001450 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80007ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007f0:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80007f2:	2300      	movs	r3, #0
 80007f4:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80007f6:	2300      	movs	r3, #0
 80007f8:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80007fe:	2306      	movs	r3, #6
 8000800:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800080a:	2301      	movs	r3, #1
 800080c:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000812:	463b      	mov	r3, r7
 8000814:	2200      	movs	r2, #0
 8000816:	4619      	mov	r1, r3
 8000818:	480d      	ldr	r0, [pc, #52]	; (8000850 <MX_DAC1_Init+0x8c>)
 800081a:	f003 fb23 	bl	8003e64 <HAL_DAC_ConfigChannel>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 8000824:	f000 fe14 	bl	8001450 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000828:	2300      	movs	r3, #0
 800082a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800082c:	2301      	movs	r3, #1
 800082e:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000830:	463b      	mov	r3, r7
 8000832:	2210      	movs	r2, #16
 8000834:	4619      	mov	r1, r3
 8000836:	4806      	ldr	r0, [pc, #24]	; (8000850 <MX_DAC1_Init+0x8c>)
 8000838:	f003 fb14 	bl	8003e64 <HAL_DAC_ConfigChannel>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 8000842:	f000 fe05 	bl	8001450 <Error_Handler>
  }

}
 8000846:	bf00      	nop
 8000848:	3730      	adds	r7, #48	; 0x30
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000588 	.word	0x20000588
 8000854:	50000800 	.word	0x50000800

08000858 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08c      	sub	sp, #48	; 0x30
 800085c:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800085e:	463b      	mov	r3, r7
 8000860:	2230      	movs	r2, #48	; 0x30
 8000862:	2100      	movs	r1, #0
 8000864:	4618      	mov	r0, r3
 8000866:	f007 fe8b 	bl	8008580 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 800086a:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <MX_DAC2_Init+0x6c>)
 800086c:	4a16      	ldr	r2, [pc, #88]	; (80008c8 <MX_DAC2_Init+0x70>)
 800086e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8000870:	4814      	ldr	r0, [pc, #80]	; (80008c4 <MX_DAC2_Init+0x6c>)
 8000872:	f003 f97a 	bl	8003b6a <HAL_DAC_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 800087c:	f000 fde8 	bl	8001450 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8000880:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000884:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000886:	2300      	movs	r3, #0
 8000888:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800088a:	2300      	movs	r3, #0
 800088c:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800088e:	2300      	movs	r3, #0
 8000890:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8000892:	2306      	movs	r3, #6
 8000894:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000896:	2300      	movs	r3, #0
 8000898:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800089e:	2301      	movs	r3, #1
 80008a0:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80008a6:	463b      	mov	r3, r7
 80008a8:	2200      	movs	r2, #0
 80008aa:	4619      	mov	r1, r3
 80008ac:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_DAC2_Init+0x6c>)
 80008ae:	f003 fad9 	bl	8003e64 <HAL_DAC_ConfigChannel>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 80008b8:	f000 fdca 	bl	8001450 <Error_Handler>
  }

}
 80008bc:	bf00      	nop
 80008be:	3730      	adds	r7, #48	; 0x30
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000574 	.word	0x20000574
 80008c8:	50000c00 	.word	0x50000c00

080008cc <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08c      	sub	sp, #48	; 0x30
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a56      	ldr	r2, [pc, #344]	; (8000a44 <HAL_DAC_MspInit+0x178>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d150      	bne.n	8000990 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80008ee:	4b56      	ldr	r3, [pc, #344]	; (8000a48 <HAL_DAC_MspInit+0x17c>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	4a55      	ldr	r2, [pc, #340]	; (8000a48 <HAL_DAC_MspInit+0x17c>)
 80008f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fa:	4b53      	ldr	r3, [pc, #332]	; (8000a48 <HAL_DAC_MspInit+0x17c>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000902:	61bb      	str	r3, [r7, #24]
 8000904:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	4b50      	ldr	r3, [pc, #320]	; (8000a48 <HAL_DAC_MspInit+0x17c>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090a:	4a4f      	ldr	r2, [pc, #316]	; (8000a48 <HAL_DAC_MspInit+0x17c>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000912:	4b4d      	ldr	r3, [pc, #308]	; (8000a48 <HAL_DAC_MspInit+0x17c>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	617b      	str	r3, [r7, #20]
 800091c:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800091e:	2330      	movs	r3, #48	; 0x30
 8000920:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000922:	2303      	movs	r3, #3
 8000924:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000934:	f003 ff3e 	bl	80047b4 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8000938:	4b44      	ldr	r3, [pc, #272]	; (8000a4c <HAL_DAC_MspInit+0x180>)
 800093a:	4a45      	ldr	r2, [pc, #276]	; (8000a50 <HAL_DAC_MspInit+0x184>)
 800093c:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 800093e:	4b43      	ldr	r3, [pc, #268]	; (8000a4c <HAL_DAC_MspInit+0x180>)
 8000940:	2206      	movs	r2, #6
 8000942:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000944:	4b41      	ldr	r3, [pc, #260]	; (8000a4c <HAL_DAC_MspInit+0x180>)
 8000946:	2210      	movs	r2, #16
 8000948:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800094a:	4b40      	ldr	r3, [pc, #256]	; (8000a4c <HAL_DAC_MspInit+0x180>)
 800094c:	2200      	movs	r2, #0
 800094e:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000950:	4b3e      	ldr	r3, [pc, #248]	; (8000a4c <HAL_DAC_MspInit+0x180>)
 8000952:	2280      	movs	r2, #128	; 0x80
 8000954:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000956:	4b3d      	ldr	r3, [pc, #244]	; (8000a4c <HAL_DAC_MspInit+0x180>)
 8000958:	f44f 7200 	mov.w	r2, #512	; 0x200
 800095c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800095e:	4b3b      	ldr	r3, [pc, #236]	; (8000a4c <HAL_DAC_MspInit+0x180>)
 8000960:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000964:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000966:	4b39      	ldr	r3, [pc, #228]	; (8000a4c <HAL_DAC_MspInit+0x180>)
 8000968:	2220      	movs	r2, #32
 800096a:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800096c:	4b37      	ldr	r3, [pc, #220]	; (8000a4c <HAL_DAC_MspInit+0x180>)
 800096e:	2200      	movs	r2, #0
 8000970:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000972:	4836      	ldr	r0, [pc, #216]	; (8000a4c <HAL_DAC_MspInit+0x180>)
 8000974:	f003 fcac 	bl	80042d0 <HAL_DMA_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800097e:	f000 fd67 	bl	8001450 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a31      	ldr	r2, [pc, #196]	; (8000a4c <HAL_DAC_MspInit+0x180>)
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	4a30      	ldr	r2, [pc, #192]	; (8000a4c <HAL_DAC_MspInit+0x180>)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 800098e:	e054      	b.n	8000a3a <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a2f      	ldr	r2, [pc, #188]	; (8000a54 <HAL_DAC_MspInit+0x188>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d14f      	bne.n	8000a3a <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 800099a:	4b2b      	ldr	r3, [pc, #172]	; (8000a48 <HAL_DAC_MspInit+0x17c>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099e:	4a2a      	ldr	r2, [pc, #168]	; (8000a48 <HAL_DAC_MspInit+0x17c>)
 80009a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a6:	4b28      	ldr	r3, [pc, #160]	; (8000a48 <HAL_DAC_MspInit+0x17c>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	4b25      	ldr	r3, [pc, #148]	; (8000a48 <HAL_DAC_MspInit+0x17c>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	4a24      	ldr	r2, [pc, #144]	; (8000a48 <HAL_DAC_MspInit+0x17c>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009be:	4b22      	ldr	r3, [pc, #136]	; (8000a48 <HAL_DAC_MspInit+0x17c>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009ca:	2340      	movs	r3, #64	; 0x40
 80009cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ce:	2303      	movs	r3, #3
 80009d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e0:	f003 fee8 	bl	80047b4 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 80009e4:	4b1c      	ldr	r3, [pc, #112]	; (8000a58 <HAL_DAC_MspInit+0x18c>)
 80009e6:	4a1d      	ldr	r2, [pc, #116]	; (8000a5c <HAL_DAC_MspInit+0x190>)
 80009e8:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 80009ea:	4b1b      	ldr	r3, [pc, #108]	; (8000a58 <HAL_DAC_MspInit+0x18c>)
 80009ec:	2229      	movs	r2, #41	; 0x29
 80009ee:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009f0:	4b19      	ldr	r3, [pc, #100]	; (8000a58 <HAL_DAC_MspInit+0x18c>)
 80009f2:	2210      	movs	r2, #16
 80009f4:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80009f6:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <HAL_DAC_MspInit+0x18c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80009fc:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <HAL_DAC_MspInit+0x18c>)
 80009fe:	2280      	movs	r2, #128	; 0x80
 8000a00:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a02:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <HAL_DAC_MspInit+0x18c>)
 8000a04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a08:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a0a:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <HAL_DAC_MspInit+0x18c>)
 8000a0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a10:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8000a12:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <HAL_DAC_MspInit+0x18c>)
 8000a14:	2220      	movs	r2, #32
 8000a16:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000a18:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <HAL_DAC_MspInit+0x18c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8000a1e:	480e      	ldr	r0, [pc, #56]	; (8000a58 <HAL_DAC_MspInit+0x18c>)
 8000a20:	f003 fc56 	bl	80042d0 <HAL_DMA_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <HAL_DAC_MspInit+0x162>
      Error_Handler();
 8000a2a:	f000 fd11 	bl	8001450 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a09      	ldr	r2, [pc, #36]	; (8000a58 <HAL_DAC_MspInit+0x18c>)
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	4a08      	ldr	r2, [pc, #32]	; (8000a58 <HAL_DAC_MspInit+0x18c>)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000a3a:	bf00      	nop
 8000a3c:	3730      	adds	r7, #48	; 0x30
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	50000800 	.word	0x50000800
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	2000059c 	.word	0x2000059c
 8000a50:	4002001c 	.word	0x4002001c
 8000a54:	50000c00 	.word	0x50000c00
 8000a58:	200005fc 	.word	0x200005fc
 8000a5c:	40020030 	.word	0x40020030

08000a60 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000a66:	4b1e      	ldr	r3, [pc, #120]	; (8000ae0 <MX_DMA_Init+0x80>)
 8000a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a6a:	4a1d      	ldr	r2, [pc, #116]	; (8000ae0 <MX_DMA_Init+0x80>)
 8000a6c:	f043 0304 	orr.w	r3, r3, #4
 8000a70:	6493      	str	r3, [r2, #72]	; 0x48
 8000a72:	4b1b      	ldr	r3, [pc, #108]	; (8000ae0 <MX_DMA_Init+0x80>)
 8000a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a76:	f003 0304 	and.w	r3, r3, #4
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a7e:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <MX_DMA_Init+0x80>)
 8000a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a82:	4a17      	ldr	r2, [pc, #92]	; (8000ae0 <MX_DMA_Init+0x80>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	6493      	str	r3, [r2, #72]	; 0x48
 8000a8a:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <MX_DMA_Init+0x80>)
 8000a8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2101      	movs	r1, #1
 8000a9a:	200b      	movs	r0, #11
 8000a9c:	f003 f831 	bl	8003b02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000aa0:	200b      	movs	r0, #11
 8000aa2:	f003 f848 	bl	8003b36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	200c      	movs	r0, #12
 8000aac:	f003 f829 	bl	8003b02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000ab0:	200c      	movs	r0, #12
 8000ab2:	f003 f840 	bl	8003b36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2100      	movs	r1, #0
 8000aba:	200d      	movs	r0, #13
 8000abc:	f003 f821 	bl	8003b02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000ac0:	200d      	movs	r0, #13
 8000ac2:	f003 f838 	bl	8003b36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2100      	movs	r1, #0
 8000aca:	200e      	movs	r0, #14
 8000acc:	f003 f819 	bl	8003b02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000ad0:	200e      	movs	r0, #14
 8000ad2:	f003 f830 	bl	8003b36 <HAL_NVIC_EnableIRQ>

}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40021000 	.word	0x40021000

08000ae4 <update_dc_bias_sweep>:
uint16_t dcbias = 0;
int dcbias_dir = 1;
int dcinverted = 0;

void update_dc_bias_sweep()
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
	  // up=1, down=0
	  (dcbias_dir) ? (dcbias++) : (dcbias--);
 8000ae8:	4b20      	ldr	r3, [pc, #128]	; (8000b6c <update_dc_bias_sweep+0x88>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d006      	beq.n	8000afe <update_dc_bias_sweep+0x1a>
 8000af0:	4b1f      	ldr	r3, [pc, #124]	; (8000b70 <update_dc_bias_sweep+0x8c>)
 8000af2:	881b      	ldrh	r3, [r3, #0]
 8000af4:	3301      	adds	r3, #1
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	4b1d      	ldr	r3, [pc, #116]	; (8000b70 <update_dc_bias_sweep+0x8c>)
 8000afa:	801a      	strh	r2, [r3, #0]
 8000afc:	e005      	b.n	8000b0a <update_dc_bias_sweep+0x26>
 8000afe:	4b1c      	ldr	r3, [pc, #112]	; (8000b70 <update_dc_bias_sweep+0x8c>)
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	3b01      	subs	r3, #1
 8000b04:	b29a      	uxth	r2, r3
 8000b06:	4b1a      	ldr	r3, [pc, #104]	; (8000b70 <update_dc_bias_sweep+0x8c>)
 8000b08:	801a      	strh	r2, [r3, #0]

	  // invert the bias signal at zero crossing
	  if(dcbias < 1) {
 8000b0a:	4b19      	ldr	r3, [pc, #100]	; (8000b70 <update_dc_bias_sweep+0x8c>)
 8000b0c:	881b      	ldrh	r3, [r3, #0]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d10a      	bne.n	8000b28 <update_dc_bias_sweep+0x44>
		(dcinverted) ? (dcinverted=0) : (dcinverted=1);
 8000b12:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <update_dc_bias_sweep+0x90>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d003      	beq.n	8000b22 <update_dc_bias_sweep+0x3e>
 8000b1a:	4b16      	ldr	r3, [pc, #88]	; (8000b74 <update_dc_bias_sweep+0x90>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	e002      	b.n	8000b28 <update_dc_bias_sweep+0x44>
 8000b22:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <update_dc_bias_sweep+0x90>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	601a      	str	r2, [r3, #0]
	  }

	  // change direction if dac limits are reached
	  if(dcbias < 1) 	{ dcbias_dir = 1; }
 8000b28:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <update_dc_bias_sweep+0x8c>)
 8000b2a:	881b      	ldrh	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d102      	bne.n	8000b36 <update_dc_bias_sweep+0x52>
 8000b30:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <update_dc_bias_sweep+0x88>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	601a      	str	r2, [r3, #0]
	  if(dcbias > 4095) { dcbias_dir = 0; }
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <update_dc_bias_sweep+0x8c>)
 8000b38:	881b      	ldrh	r3, [r3, #0]
 8000b3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b3e:	d302      	bcc.n	8000b46 <update_dc_bias_sweep+0x62>
 8000b40:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <update_dc_bias_sweep+0x88>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]


	  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, dcinverted);
 8000b46:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <update_dc_bias_sweep+0x90>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	2108      	movs	r1, #8
 8000b50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b54:	f003 ffc8 	bl	8004ae8 <HAL_GPIO_WritePin>
	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, dcbias);
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <update_dc_bias_sweep+0x8c>)
 8000b5a:	881b      	ldrh	r3, [r3, #0]
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2110      	movs	r1, #16
 8000b60:	4805      	ldr	r0, [pc, #20]	; (8000b78 <update_dc_bias_sweep+0x94>)
 8000b62:	f003 f939 	bl	8003dd8 <HAL_DAC_SetValue>
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000008 	.word	0x20000008
 8000b70:	20000460 	.word	0x20000460
 8000b74:	20000464 	.word	0x20000464
 8000b78:	20000588 	.word	0x20000588

08000b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b80:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <__NVIC_GetPriorityGrouping+0x18>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	0a1b      	lsrs	r3, r3, #8
 8000b86:	f003 0307 	and.w	r3, r3, #7
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	db0b      	blt.n	8000bc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	f003 021f 	and.w	r2, r3, #31
 8000bb0:	4907      	ldr	r1, [pc, #28]	; (8000bd0 <__NVIC_EnableIRQ+0x38>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	095b      	lsrs	r3, r3, #5
 8000bb8:	2001      	movs	r0, #1
 8000bba:	fa00 f202 	lsl.w	r2, r0, r2
 8000bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	e000e100 	.word	0xe000e100

08000bd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	6039      	str	r1, [r7, #0]
 8000bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	db0a      	blt.n	8000bfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	b2da      	uxtb	r2, r3
 8000bec:	490c      	ldr	r1, [pc, #48]	; (8000c20 <__NVIC_SetPriority+0x4c>)
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	0112      	lsls	r2, r2, #4
 8000bf4:	b2d2      	uxtb	r2, r2
 8000bf6:	440b      	add	r3, r1
 8000bf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bfc:	e00a      	b.n	8000c14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	4908      	ldr	r1, [pc, #32]	; (8000c24 <__NVIC_SetPriority+0x50>)
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	f003 030f 	and.w	r3, r3, #15
 8000c0a:	3b04      	subs	r3, #4
 8000c0c:	0112      	lsls	r2, r2, #4
 8000c0e:	b2d2      	uxtb	r2, r2
 8000c10:	440b      	add	r3, r1
 8000c12:	761a      	strb	r2, [r3, #24]
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	e000e100 	.word	0xe000e100
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b089      	sub	sp, #36	; 0x24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	f003 0307 	and.w	r3, r3, #7
 8000c3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	f1c3 0307 	rsb	r3, r3, #7
 8000c42:	2b04      	cmp	r3, #4
 8000c44:	bf28      	it	cs
 8000c46:	2304      	movcs	r3, #4
 8000c48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	3304      	adds	r3, #4
 8000c4e:	2b06      	cmp	r3, #6
 8000c50:	d902      	bls.n	8000c58 <NVIC_EncodePriority+0x30>
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	3b03      	subs	r3, #3
 8000c56:	e000      	b.n	8000c5a <NVIC_EncodePriority+0x32>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	43da      	mvns	r2, r3
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	401a      	ands	r2, r3
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7a:	43d9      	mvns	r1, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c80:	4313      	orrs	r3, r2
         );
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3724      	adds	r7, #36	; 0x24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
	...

08000c90 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 8000c9a:	4a14      	ldr	r2, [pc, #80]	; (8000cec <LL_SYSCFG_SetEXTISource+0x5c>)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	f003 0303 	and.w	r3, r3, #3
 8000ca2:	3302      	adds	r3, #2
 8000ca4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	0c1b      	lsrs	r3, r3, #16
 8000cac:	43db      	mvns	r3, r3
 8000cae:	ea02 0103 	and.w	r1, r2, r3
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	0c1b      	lsrs	r3, r3, #16
 8000cb6:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	fa93 f3a3 	rbit	r3, r3
 8000cbe:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	fab3 f383 	clz	r3, r3
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	f003 031f 	and.w	r3, r3, #31
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	409a      	lsls	r2, r3
 8000cd0:	4806      	ldr	r0, [pc, #24]	; (8000cec <LL_SYSCFG_SetEXTISource+0x5c>)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	f003 0303 	and.w	r3, r3, #3
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	3302      	adds	r3, #2
 8000cdc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000ce0:	bf00      	nop
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	40010000 	.word	0x40010000

08000cf0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b089      	sub	sp, #36	; 0x24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	fa93 f3a3 	rbit	r3, r3
 8000d0a:	613b      	str	r3, [r7, #16]
  return result;
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	fab3 f383 	clz	r3, r3
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	2103      	movs	r1, #3
 8000d18:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	401a      	ands	r2, r3
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	fa93 f3a3 	rbit	r3, r3
 8000d2a:	61bb      	str	r3, [r7, #24]
  return result;
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	fab3 f383 	clz	r3, r3
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	6879      	ldr	r1, [r7, #4]
 8000d38:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3c:	431a      	orrs	r2, r3
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	601a      	str	r2, [r3, #0]
}
 8000d42:	bf00      	nop
 8000d44:	3724      	adds	r7, #36	; 0x24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	b089      	sub	sp, #36	; 0x24
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	60f8      	str	r0, [r7, #12]
 8000d56:	60b9      	str	r1, [r7, #8]
 8000d58:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	68da      	ldr	r2, [r3, #12]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	fa93 f3a3 	rbit	r3, r3
 8000d68:	613b      	str	r3, [r7, #16]
  return result;
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	fab3 f383 	clz	r3, r3
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	2103      	movs	r1, #3
 8000d76:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	401a      	ands	r2, r3
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	fa93 f3a3 	rbit	r3, r3
 8000d88:	61bb      	str	r3, [r7, #24]
  return result;
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	fab3 f383 	clz	r3, r3
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	6879      	ldr	r1, [r7, #4]
 8000d96:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9a:	431a      	orrs	r2, r3
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	60da      	str	r2, [r3, #12]
}
 8000da0:	bf00      	nop
 8000da2:	3724      	adds	r7, #36	; 0x24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	683a      	ldr	r2, [r7, #0]
 8000dba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dbc:	bf00      	nop
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000dd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000dd4:	4907      	ldr	r1, [pc, #28]	; (8000df4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000dde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4013      	ands	r3, r2
 8000de4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000de6:	68fb      	ldr	r3, [r7, #12]
}
 8000de8:	bf00      	nop
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	40021000 	.word	0x40021000

08000df8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08a      	sub	sp, #40	; 0x28
 8000dfc:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000dfe:	f107 031c 	add.w	r3, r7, #28
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
 8000e18:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000e1a:	2004      	movs	r0, #4
 8000e1c:	f7ff ffd4 	bl	8000dc8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8000e20:	2020      	movs	r0, #32
 8000e22:	f7ff ffd1 	bl	8000dc8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000e26:	2001      	movs	r0, #1
 8000e28:	f7ff ffce 	bl	8000dc8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000e2c:	2002      	movs	r0, #2
 8000e2e:	f7ff ffcb 	bl	8000dc8 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 8000e32:	2108      	movs	r1, #8
 8000e34:	48d3      	ldr	r0, [pc, #844]	; (8001184 <MX_GPIO_Init+0x38c>)
 8000e36:	f7ff ffb9 	bl	8000dac <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 8000e3a:	2108      	movs	r1, #8
 8000e3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e40:	f7ff ffb4 	bl	8000dac <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 8000e44:	2110      	movs	r1, #16
 8000e46:	48cf      	ldr	r0, [pc, #828]	; (8001184 <MX_GPIO_Init+0x38c>)
 8000e48:	f7ff ffb0 	bl	8000dac <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 8000e4c:	2120      	movs	r1, #32
 8000e4e:	48cd      	ldr	r0, [pc, #820]	; (8001184 <MX_GPIO_Init+0x38c>)
 8000e50:	f7ff ffac 	bl	8000dac <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 8000e54:	2101      	movs	r1, #1
 8000e56:	48cc      	ldr	r0, [pc, #816]	; (8001188 <MX_GPIO_Init+0x390>)
 8000e58:	f7ff ffa8 	bl	8000dac <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 8000e5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e60:	48c8      	ldr	r0, [pc, #800]	; (8001184 <MX_GPIO_Init+0x38c>)
 8000e62:	f7ff ffa3 	bl	8000dac <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 8000e66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e6a:	48c6      	ldr	r0, [pc, #792]	; (8001184 <MX_GPIO_Init+0x38c>)
 8000e6c:	f7ff ff9e 	bl	8000dac <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 8000e70:	2140      	movs	r1, #64	; 0x40
 8000e72:	48c5      	ldr	r0, [pc, #788]	; (8001188 <MX_GPIO_Init+0x390>)
 8000e74:	f7ff ff9a 	bl	8000dac <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 8000e78:	2180      	movs	r1, #128	; 0x80
 8000e7a:	48c3      	ldr	r0, [pc, #780]	; (8001188 <MX_GPIO_Init+0x390>)
 8000e7c:	f7ff ff96 	bl	8000dac <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 8000e80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e84:	48c0      	ldr	r0, [pc, #768]	; (8001188 <MX_GPIO_Init+0x390>)
 8000e86:	f7ff ff91 	bl	8000dac <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 8000e8a:	49c0      	ldr	r1, [pc, #768]	; (800118c <MX_GPIO_Init+0x394>)
 8000e8c:	2002      	movs	r0, #2
 8000e8e:	f7ff feff 	bl	8000c90 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 8000e92:	49bf      	ldr	r1, [pc, #764]	; (8001190 <MX_GPIO_Init+0x398>)
 8000e94:	2002      	movs	r0, #2
 8000e96:	f7ff fefb 	bl	8000c90 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 8000e9a:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8000e9e:	2005      	movs	r0, #5
 8000ea0:	f7ff fef6 	bl	8000c90 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 8000ea4:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8000ea8:	2005      	movs	r0, #5
 8000eaa:	f7ff fef1 	bl	8000c90 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 8000eae:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8000eb2:	2002      	movs	r0, #2
 8000eb4:	f7ff feec 	bl	8000c90 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8000eb8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ebc:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000ed0:	f107 031c 	add.w	r3, r7, #28
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f006 fa2f 	bl	8007338 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8000eda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ede:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000eec:	2302      	movs	r3, #2
 8000eee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000ef2:	f107 031c 	add.w	r3, r7, #28
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f006 fa1e 	bl	8007338 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8000efc:	2301      	movs	r3, #1
 8000efe:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000f00:	2301      	movs	r3, #1
 8000f02:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000f06:	2300      	movs	r3, #0
 8000f08:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000f12:	f107 031c 	add.w	r3, r7, #28
 8000f16:	4618      	mov	r0, r3
 8000f18:	f006 fa0e 	bl	8007338 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000f20:	2301      	movs	r3, #1
 8000f22:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000f26:	2300      	movs	r3, #0
 8000f28:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000f32:	f107 031c 	add.w	r3, r7, #28
 8000f36:	4618      	mov	r0, r3
 8000f38:	f006 f9fe 	bl	8007338 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8000f3c:	2304      	movs	r3, #4
 8000f3e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000f40:	2301      	movs	r3, #1
 8000f42:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000f46:	2300      	movs	r3, #0
 8000f48:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000f52:	f107 031c 	add.w	r3, r7, #28
 8000f56:	4618      	mov	r0, r3
 8000f58:	f006 f9ee 	bl	8007338 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f62:	4888      	ldr	r0, [pc, #544]	; (8001184 <MX_GPIO_Init+0x38c>)
 8000f64:	f7ff fef3 	bl	8000d4e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f6e:	4885      	ldr	r0, [pc, #532]	; (8001184 <MX_GPIO_Init+0x38c>)
 8000f70:	f7ff feed 	bl	8000d4e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 8000f74:	2201      	movs	r2, #1
 8000f76:	2101      	movs	r1, #1
 8000f78:	4886      	ldr	r0, [pc, #536]	; (8001194 <MX_GPIO_Init+0x39c>)
 8000f7a:	f7ff fee8 	bl	8000d4e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 8000f7e:	2201      	movs	r2, #1
 8000f80:	2102      	movs	r1, #2
 8000f82:	4884      	ldr	r0, [pc, #528]	; (8001194 <MX_GPIO_Init+0x39c>)
 8000f84:	f7ff fee3 	bl	8000d4e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	2104      	movs	r1, #4
 8000f8c:	487d      	ldr	r0, [pc, #500]	; (8001184 <MX_GPIO_Init+0x38c>)
 8000f8e:	f7ff fede 	bl	8000d4e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 8000f92:	2200      	movs	r2, #0
 8000f94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f98:	487a      	ldr	r0, [pc, #488]	; (8001184 <MX_GPIO_Init+0x38c>)
 8000f9a:	f7ff fea9 	bl	8000cf0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fa4:	4877      	ldr	r0, [pc, #476]	; (8001184 <MX_GPIO_Init+0x38c>)
 8000fa6:	f7ff fea3 	bl	8000cf0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2101      	movs	r1, #1
 8000fae:	4879      	ldr	r0, [pc, #484]	; (8001194 <MX_GPIO_Init+0x39c>)
 8000fb0:	f7ff fe9e 	bl	8000cf0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2102      	movs	r1, #2
 8000fb8:	4876      	ldr	r0, [pc, #472]	; (8001194 <MX_GPIO_Init+0x39c>)
 8000fba:	f7ff fe99 	bl	8000cf0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2104      	movs	r1, #4
 8000fc2:	4870      	ldr	r0, [pc, #448]	; (8001184 <MX_GPIO_Init+0x38c>)
 8000fc4:	f7ff fe94 	bl	8000cf0 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 8000fc8:	2308      	movs	r3, #8
 8000fca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4868      	ldr	r0, [pc, #416]	; (8001184 <MX_GPIO_Init+0x38c>)
 8000fe2:	f006 fb9c 	bl	800771e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 8000fe6:	2308      	movs	r3, #8
 8000fe8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000fea:	2301      	movs	r3, #1
 8000fec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001002:	f006 fb8c 	bl	800771e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 8001006:	2310      	movs	r3, #16
 8001008:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800100a:	2301      	movs	r3, #1
 800100c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	4619      	mov	r1, r3
 800101e:	4859      	ldr	r0, [pc, #356]	; (8001184 <MX_GPIO_Init+0x38c>)
 8001020:	f006 fb7d 	bl	800771e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 8001024:	2320      	movs	r3, #32
 8001026:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001028:	2301      	movs	r3, #1
 800102a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	4619      	mov	r1, r3
 800103c:	4851      	ldr	r0, [pc, #324]	; (8001184 <MX_GPIO_Init+0x38c>)
 800103e:	f006 fb6e 	bl	800771e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 8001042:	2301      	movs	r3, #1
 8001044:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001046:	2301      	movs	r3, #1
 8001048:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 8001056:	1d3b      	adds	r3, r7, #4
 8001058:	4619      	mov	r1, r3
 800105a:	484b      	ldr	r0, [pc, #300]	; (8001188 <MX_GPIO_Init+0x390>)
 800105c:	f006 fb5f 	bl	800771e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 8001060:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001064:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001066:	2301      	movs	r3, #1
 8001068:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 8001076:	1d3b      	adds	r3, r7, #4
 8001078:	4619      	mov	r1, r3
 800107a:	4842      	ldr	r0, [pc, #264]	; (8001184 <MX_GPIO_Init+0x38c>)
 800107c:	f006 fb4f 	bl	800771e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 8001080:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001084:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001086:	2301      	movs	r3, #1
 8001088:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	4619      	mov	r1, r3
 800109a:	483a      	ldr	r0, [pc, #232]	; (8001184 <MX_GPIO_Init+0x38c>)
 800109c:	f006 fb3f 	bl	800771e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 80010a0:	2340      	movs	r3, #64	; 0x40
 80010a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80010a4:	2301      	movs	r3, #1
 80010a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80010a8:	2303      	movs	r3, #3
 80010aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	4619      	mov	r1, r3
 80010b8:	4833      	ldr	r0, [pc, #204]	; (8001188 <MX_GPIO_Init+0x390>)
 80010ba:	f006 fb30 	bl	800771e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 80010be:	2380      	movs	r3, #128	; 0x80
 80010c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80010c2:	2301      	movs	r3, #1
 80010c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80010c6:	2303      	movs	r3, #3
 80010c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	4619      	mov	r1, r3
 80010d6:	482c      	ldr	r0, [pc, #176]	; (8001188 <MX_GPIO_Init+0x390>)
 80010d8:	f006 fb21 	bl	800771e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 80010dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80010e2:	2301      	movs	r3, #1
 80010e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80010e6:	2303      	movs	r3, #3
 80010e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	4619      	mov	r1, r3
 80010f6:	4824      	ldr	r0, [pc, #144]	; (8001188 <MX_GPIO_Init+0x390>)
 80010f8:	f006 fb11 	bl	800771e <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80010fc:	f7ff fd3e 	bl	8000b7c <__NVIC_GetPriorityGrouping>
 8001100:	4603      	mov	r3, r0
 8001102:	2200      	movs	r2, #0
 8001104:	2100      	movs	r1, #0
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fd8e 	bl	8000c28 <NVIC_EncodePriority>
 800110c:	4603      	mov	r3, r0
 800110e:	4619      	mov	r1, r3
 8001110:	2006      	movs	r0, #6
 8001112:	f7ff fd5f 	bl	8000bd4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8001116:	2006      	movs	r0, #6
 8001118:	f7ff fd3e 	bl	8000b98 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800111c:	f7ff fd2e 	bl	8000b7c <__NVIC_GetPriorityGrouping>
 8001120:	4603      	mov	r3, r0
 8001122:	2200      	movs	r2, #0
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff fd7e 	bl	8000c28 <NVIC_EncodePriority>
 800112c:	4603      	mov	r3, r0
 800112e:	4619      	mov	r1, r3
 8001130:	2007      	movs	r0, #7
 8001132:	f7ff fd4f 	bl	8000bd4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 8001136:	2007      	movs	r0, #7
 8001138:	f7ff fd2e 	bl	8000b98 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800113c:	f7ff fd1e 	bl	8000b7c <__NVIC_GetPriorityGrouping>
 8001140:	4603      	mov	r3, r0
 8001142:	2200      	movs	r2, #0
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff fd6e 	bl	8000c28 <NVIC_EncodePriority>
 800114c:	4603      	mov	r3, r0
 800114e:	4619      	mov	r1, r3
 8001150:	2008      	movs	r0, #8
 8001152:	f7ff fd3f 	bl	8000bd4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 8001156:	2008      	movs	r0, #8
 8001158:	f7ff fd1e 	bl	8000b98 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800115c:	f7ff fd0e 	bl	8000b7c <__NVIC_GetPriorityGrouping>
 8001160:	4603      	mov	r3, r0
 8001162:	2200      	movs	r2, #0
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff fd5e 	bl	8000c28 <NVIC_EncodePriority>
 800116c:	4603      	mov	r3, r0
 800116e:	4619      	mov	r1, r3
 8001170:	2028      	movs	r0, #40	; 0x28
 8001172:	f7ff fd2f 	bl	8000bd4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001176:	2028      	movs	r0, #40	; 0x28
 8001178:	f7ff fd0e 	bl	8000b98 <__NVIC_EnableIRQ>

}
 800117c:	bf00      	nop
 800117e:	3728      	adds	r7, #40	; 0x28
 8001180:	46bd      	mov	sp, r7
 8001182:	e009      	b.n	8001198 <MX_GPIO_Init+0x3a0>
 8001184:	48000800 	.word	0x48000800
 8001188:	48000400 	.word	0x48000400
 800118c:	0f000003 	.word	0x0f000003
 8001190:	f0000003 	.word	0xf0000003
 8001194:	48001400 	.word	0x48001400
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop

0800119c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80011a4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80011a8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d013      	beq.n	80011dc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80011b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80011b8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80011bc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d00b      	beq.n	80011dc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80011c4:	e000      	b.n	80011c8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80011c6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80011c8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d0f9      	beq.n	80011c6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80011d2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	b2d2      	uxtb	r2, r2
 80011da:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80011dc:	687b      	ldr	r3, [r7, #4]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b086      	sub	sp, #24
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	60f8      	str	r0, [r7, #12]
 80011f2:	60b9      	str	r1, [r7, #8]
 80011f4:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
 80011fe:	e009      	b.n	8001214 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	1c5a      	adds	r2, r3, #1
 8001204:	60ba      	str	r2, [r7, #8]
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ffc7 	bl	800119c <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	3301      	adds	r3, #1
 8001212:	617b      	str	r3, [r7, #20]
 8001214:	697a      	ldr	r2, [r7, #20]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	429a      	cmp	r2, r3
 800121a:	dbf1      	blt.n	8001200 <_write+0x16>
  return len;
 800121c:	687b      	ldr	r3, [r7, #4]
}
 800121e:	4618      	mov	r0, r3
 8001220:	3718      	adds	r7, #24
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800122e:	f000 ffba 	bl	80021a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001232:	f000 f89f 	bl	8001374 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001236:	f7ff fddf 	bl	8000df8 <MX_GPIO_Init>
  MX_DMA_Init();
 800123a:	f7ff fc11 	bl	8000a60 <MX_DMA_Init>
  MX_DAC1_Init();
 800123e:	f7ff fac1 	bl	80007c4 <MX_DAC1_Init>
  MX_DAC2_Init();
 8001242:	f7ff fb09 	bl	8000858 <MX_DAC2_Init>
  MX_ADC1_Init();
 8001246:	f7ff f97f 	bl	8000548 <MX_ADC1_Init>
  MX_COMP1_Init();
 800124a:	f7ff fa61 	bl	8000710 <MX_COMP1_Init>
  MX_TIM2_Init();
 800124e:	f000 fca1 	bl	8001b94 <MX_TIM2_Init>
  MX_TIM17_Init();
 8001252:	f000 fe39 	bl	8001ec8 <MX_TIM17_Init>
  MX_SPI3_Init();
 8001256:	f000 f939 	bl	80014cc <MX_SPI3_Init>
  MX_RNG_Init();
 800125a:	f000 f929 	bl	80014b0 <MX_RNG_Init>
  MX_TIM1_Init();
 800125e:	f000 fc29 	bl	8001ab4 <MX_TIM1_Init>
  MX_TIM8_Init();
 8001262:	f000 fd51 	bl	8001d08 <MX_TIM8_Init>
  MX_TIM16_Init();
 8001266:	f000 fe09 	bl	8001e7c <MX_TIM16_Init>
  MX_TIM15_Init();
 800126a:	f000 fdb5 	bl	8001dd8 <MX_TIM15_Init>
  MX_TIM5_Init();
 800126e:	f000 fcfb 	bl	8001c68 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  // main signal function output (external)
  HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8001272:	2300      	movs	r3, #0
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	2378      	movs	r3, #120	; 0x78
 8001278:	4a31      	ldr	r2, [pc, #196]	; (8001340 <main+0x118>)
 800127a:	2100      	movs	r1, #0
 800127c:	4831      	ldr	r0, [pc, #196]	; (8001344 <main+0x11c>)
 800127e:	f002 fce9 	bl	8003c54 <HAL_DAC_Start_DMA>
  //TIM8->ARR = sin1_max_arr;

  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 8001282:	2110      	movs	r1, #16
 8001284:	482f      	ldr	r0, [pc, #188]	; (8001344 <main+0x11c>)
 8001286:	f002 fc92 	bl	8003bae <HAL_DAC_Start>
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, square_data_table, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, unitimpulse_data_table, UNITIMPULSE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_data_table, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_rev_data_table, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
  HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, triangle_data_table, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 800128a:	2300      	movs	r3, #0
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	2378      	movs	r3, #120	; 0x78
 8001290:	4a2d      	ldr	r2, [pc, #180]	; (8001348 <main+0x120>)
 8001292:	2100      	movs	r1, #0
 8001294:	482d      	ldr	r0, [pc, #180]	; (800134c <main+0x124>)
 8001296:	f002 fcdd 	bl	8003c54 <HAL_DAC_Start_DMA>

  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);
#ifndef DISABLE_ALL_TIMERS
  // single clock to run all DAC channels. TODO add independent clocks
  HAL_TIM_Base_Start(&htim8);
 800129a:	482d      	ldr	r0, [pc, #180]	; (8001350 <main+0x128>)
 800129c:	f004 ffa0 	bl	80061e0 <HAL_TIM_Base_Start>
#endif //DISABLE_ALL_TIMERS

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 80012a0:	2201      	movs	r2, #1
 80012a2:	2108      	movs	r1, #8
 80012a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a8:	f003 fc1e 	bl	8004ae8 <HAL_GPIO_WritePin>

  // PGA gain
  HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80012ac:	2201      	movs	r2, #1
 80012ae:	2101      	movs	r1, #1
 80012b0:	4828      	ldr	r0, [pc, #160]	; (8001354 <main+0x12c>)
 80012b2:	f003 fc19 	bl	8004ae8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80012b6:	2201      	movs	r2, #1
 80012b8:	2120      	movs	r1, #32
 80012ba:	4827      	ldr	r0, [pc, #156]	; (8001358 <main+0x130>)
 80012bc:	f003 fc14 	bl	8004ae8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80012c0:	2201      	movs	r2, #1
 80012c2:	2110      	movs	r1, #16
 80012c4:	4824      	ldr	r0, [pc, #144]	; (8001358 <main+0x130>)
 80012c6:	f003 fc0f 	bl	8004ae8 <HAL_GPIO_WritePin>

#ifndef DISABLE_ALL_TIMERS
  // start test routine (update_dc_bias_sweep())
  HAL_TIM_Base_Start_IT(&htim17);
 80012ca:	4824      	ldr	r0, [pc, #144]	; (800135c <main+0x134>)
 80012cc:	f004 ffb6 	bl	800623c <HAL_TIM_Base_Start_IT>
#endif	//DISABLE_ALL_TIMERS


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 80012d0:	2200      	movs	r2, #0
 80012d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012d6:	4820      	ldr	r0, [pc, #128]	; (8001358 <main+0x130>)
 80012d8:	f003 fc06 	bl	8004ae8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 80012dc:	2200      	movs	r2, #0
 80012de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012e2:	481d      	ldr	r0, [pc, #116]	; (8001358 <main+0x130>)
 80012e4:	f003 fc00 	bl	8004ae8 <HAL_GPIO_WritePin>

#ifdef TIM_TRIGGER_MODE
  // input capture on in TIM2 slave-mode TF1FP1

  // set HW switch to direct ext. trigger input to TIM pin
  HAL_GPIO_WritePin(TRIGMODE_GPIO_Port, TRIGMODE_Pin, GPIO_PIN_SET);
 80012e8:	2201      	movs	r2, #1
 80012ea:	2108      	movs	r1, #8
 80012ec:	481a      	ldr	r0, [pc, #104]	; (8001358 <main+0x130>)
 80012ee:	f003 fbfb 	bl	8004ae8 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);	// TS5A3357 Pin6
  //HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); // TS5A3357 Pin5

  // clear slave mode select reg
  TIM2->SMCR &= ~(TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2);
 80012f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012fc:	f023 0307 	bic.w	r3, r3, #7
 8001300:	6093      	str	r3, [r2, #8]

  // slave mode
  //TIM2->SMCR |= TIM_SMCR_SMS_2;						// SLAVE MODE: RESET
  TIM2->SMCR |= TIM_SMCR_SMS_0 | TIM_SMCR_SMS_2;	// SLAVE MODE: GATED
 8001302:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800130c:	f043 0305 	orr.w	r3, r3, #5
 8001310:	6093      	str	r3, [r2, #8]
  //TIM2->SMCR |= TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;	// SLAVE MODE: TRIGGER

#ifndef DISABLE_ALL_TIMERS
  HAL_TIM_Base_Start_IT(&htim2);
 8001312:	4813      	ldr	r0, [pc, #76]	; (8001360 <main+0x138>)
 8001314:	f004 ff92 	bl	800623c <HAL_TIM_Base_Start_IT>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);
 8001318:	4812      	ldr	r0, [pc, #72]	; (8001364 <main+0x13c>)
 800131a:	f004 ff61 	bl	80061e0 <HAL_TIM_Base_Start>

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 800131e:	4b12      	ldr	r3, [pc, #72]	; (8001368 <main+0x140>)
 8001320:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001324:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 8001326:	4b10      	ldr	r3, [pc, #64]	; (8001368 <main+0x140>)
 8001328:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800132c:	62da      	str	r2, [r3, #44]	; 0x2c



  // TFT lib enable
  DM_Init();
 800132e:	f7ff f831 	bl	8000394 <DM_Init>
  //DM_RegisterStrings();

  HAL_TIM_Base_Start_IT(&htim15);
 8001332:	480e      	ldr	r0, [pc, #56]	; (800136c <main+0x144>)
 8001334:	f004 ff82 	bl	800623c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim5);
 8001338:	480d      	ldr	r0, [pc, #52]	; (8001370 <main+0x148>)
 800133a:	f004 ff51 	bl	80061e0 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800133e:	e7fe      	b.n	800133e <main+0x116>
 8001340:	2000000c 	.word	0x2000000c
 8001344:	20000588 	.word	0x20000588
 8001348:	200001ec 	.word	0x200001ec
 800134c:	20000574 	.word	0x20000574
 8001350:	20000720 	.word	0x20000720
 8001354:	48000400 	.word	0x48000400
 8001358:	48000800 	.word	0x48000800
 800135c:	200007b8 	.word	0x200007b8
 8001360:	2000089c 	.word	0x2000089c
 8001364:	20000850 	.word	0x20000850
 8001368:	40001000 	.word	0x40001000
 800136c:	2000076c 	.word	0x2000076c
 8001370:	20000804 	.word	0x20000804

08001374 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b0a8      	sub	sp, #160	; 0xa0
 8001378:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800137a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800137e:	2238      	movs	r2, #56	; 0x38
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f007 f8fc 	bl	8008580 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001388:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001398:	463b      	mov	r3, r7
 800139a:	2254      	movs	r2, #84	; 0x54
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f007 f8ee 	bl	8008580 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80013a4:	2000      	movs	r0, #0
 80013a6:	f003 fbb7 	bl	8004b18 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80013aa:	2322      	movs	r3, #34	; 0x22
 80013ac:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013b2:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013b4:	2340      	movs	r3, #64	; 0x40
 80013b6:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80013b8:	2301      	movs	r3, #1
 80013ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013be:	2302      	movs	r3, #2
 80013c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013c4:	2302      	movs	r3, #2
 80013c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80013ca:	2302      	movs	r3, #2
 80013cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 80013d0:	232a      	movs	r3, #42	; 0x2a
 80013d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013d6:	2302      	movs	r3, #2
 80013d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80013dc:	2304      	movs	r3, #4
 80013de:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013e2:	2302      	movs	r3, #2
 80013e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013e8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80013ec:	4618      	mov	r0, r3
 80013ee:	f003 fc37 	bl	8004c60 <HAL_RCC_OscConfig>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <SystemClock_Config+0x88>
  {
    Error_Handler();
 80013f8:	f000 f82a 	bl	8001450 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013fc:	230f      	movs	r3, #15
 80013fe:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001400:	2303      	movs	r3, #3
 8001402:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001404:	2300      	movs	r3, #0
 8001406:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001408:	2300      	movs	r3, #0
 800140a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800140c:	2300      	movs	r3, #0
 800140e:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8001410:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001414:	2108      	movs	r1, #8
 8001416:	4618      	mov	r0, r3
 8001418:	f003 ff3a 	bl	8005290 <HAL_RCC_ClockConfig>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001422:	f000 f815 	bl	8001450 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 8001426:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800142a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 800142c:	2300      	movs	r3, #0
 800142e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001430:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001434:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001436:	463b      	mov	r3, r7
 8001438:	4618      	mov	r0, r3
 800143a:	f004 f919 	bl	8005670 <HAL_RCCEx_PeriphCLKConfig>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001444:	f000 f804 	bl	8001450 <Error_Handler>
  }
}
 8001448:	bf00      	nop
 800144a:	37a0      	adds	r7, #160	; 0xa0
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 800145e:	b480      	push	{r7}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f043 0204 	orr.w	r2, r3, #4
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	601a      	str	r2, [r3, #0]
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
	...

08001480 <LL_AHB2_GRP1_EnableClock>:
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001488:	4b08      	ldr	r3, [pc, #32]	; (80014ac <LL_AHB2_GRP1_EnableClock+0x2c>)
 800148a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800148c:	4907      	ldr	r1, [pc, #28]	; (80014ac <LL_AHB2_GRP1_EnableClock+0x2c>)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4313      	orrs	r3, r2
 8001492:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001494:	4b05      	ldr	r3, [pc, #20]	; (80014ac <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001496:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4013      	ands	r3, r2
 800149c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800149e:	68fb      	ldr	r3, [r7, #12]
}
 80014a0:	bf00      	nop
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	40021000 	.word	0x40021000

080014b0 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 80014b4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80014b8:	f7ff ffe2 	bl	8001480 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 80014bc:	4802      	ldr	r0, [pc, #8]	; (80014c8 <MX_RNG_Init+0x18>)
 80014be:	f7ff ffce 	bl	800145e <LL_RNG_Enable>

}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	50060800 	.word	0x50060800

080014cc <MX_SPI3_Init>:
SPI_HandleTypeDef hspi3;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 80014d0:	4b1b      	ldr	r3, [pc, #108]	; (8001540 <MX_SPI3_Init+0x74>)
 80014d2:	4a1c      	ldr	r2, [pc, #112]	; (8001544 <MX_SPI3_Init+0x78>)
 80014d4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80014d6:	4b1a      	ldr	r3, [pc, #104]	; (8001540 <MX_SPI3_Init+0x74>)
 80014d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014dc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80014de:	4b18      	ldr	r3, [pc, #96]	; (8001540 <MX_SPI3_Init+0x74>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80014e4:	4b16      	ldr	r3, [pc, #88]	; (8001540 <MX_SPI3_Init+0x74>)
 80014e6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80014ea:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014ec:	4b14      	ldr	r3, [pc, #80]	; (8001540 <MX_SPI3_Init+0x74>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014f2:	4b13      	ldr	r3, [pc, #76]	; (8001540 <MX_SPI3_Init+0x74>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80014f8:	4b11      	ldr	r3, [pc, #68]	; (8001540 <MX_SPI3_Init+0x74>)
 80014fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014fe:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001500:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <MX_SPI3_Init+0x74>)
 8001502:	2210      	movs	r2, #16
 8001504:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <MX_SPI3_Init+0x74>)
 8001508:	2200      	movs	r2, #0
 800150a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <MX_SPI3_Init+0x74>)
 800150e:	2200      	movs	r2, #0
 8001510:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <MX_SPI3_Init+0x74>)
 8001514:	2200      	movs	r2, #0
 8001516:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <MX_SPI3_Init+0x74>)
 800151a:	2207      	movs	r2, #7
 800151c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800151e:	4b08      	ldr	r3, [pc, #32]	; (8001540 <MX_SPI3_Init+0x74>)
 8001520:	2200      	movs	r2, #0
 8001522:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <MX_SPI3_Init+0x74>)
 8001526:	2208      	movs	r2, #8
 8001528:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800152a:	4805      	ldr	r0, [pc, #20]	; (8001540 <MX_SPI3_Init+0x74>)
 800152c:	f004 faec 	bl	8005b08 <HAL_SPI_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001536:	f7ff ff8b 	bl	8001450 <Error_Handler>
  }

}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	2000065c 	.word	0x2000065c
 8001544:	40003c00 	.word	0x40003c00

08001548 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08a      	sub	sp, #40	; 0x28
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a2c      	ldr	r2, [pc, #176]	; (8001618 <HAL_SPI_MspInit+0xd0>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d151      	bne.n	800160e <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800156a:	4b2c      	ldr	r3, [pc, #176]	; (800161c <HAL_SPI_MspInit+0xd4>)
 800156c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156e:	4a2b      	ldr	r2, [pc, #172]	; (800161c <HAL_SPI_MspInit+0xd4>)
 8001570:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001574:	6593      	str	r3, [r2, #88]	; 0x58
 8001576:	4b29      	ldr	r3, [pc, #164]	; (800161c <HAL_SPI_MspInit+0xd4>)
 8001578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800157e:	613b      	str	r3, [r7, #16]
 8001580:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001582:	4b26      	ldr	r3, [pc, #152]	; (800161c <HAL_SPI_MspInit+0xd4>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001586:	4a25      	ldr	r2, [pc, #148]	; (800161c <HAL_SPI_MspInit+0xd4>)
 8001588:	f043 0304 	orr.w	r3, r3, #4
 800158c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800158e:	4b23      	ldr	r3, [pc, #140]	; (800161c <HAL_SPI_MspInit+0xd4>)
 8001590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001592:	f003 0304 	and.w	r3, r3, #4
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800159a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800159e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a0:	2302      	movs	r3, #2
 80015a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a8:	2300      	movs	r3, #0
 80015aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015ac:	2306      	movs	r3, #6
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	4619      	mov	r1, r3
 80015b6:	481a      	ldr	r0, [pc, #104]	; (8001620 <HAL_SPI_MspInit+0xd8>)
 80015b8:	f003 f8fc 	bl	80047b4 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Channel4;
 80015bc:	4b19      	ldr	r3, [pc, #100]	; (8001624 <HAL_SPI_MspInit+0xdc>)
 80015be:	4a1a      	ldr	r2, [pc, #104]	; (8001628 <HAL_SPI_MspInit+0xe0>)
 80015c0:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 80015c2:	4b18      	ldr	r3, [pc, #96]	; (8001624 <HAL_SPI_MspInit+0xdc>)
 80015c4:	220f      	movs	r2, #15
 80015c6:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015c8:	4b16      	ldr	r3, [pc, #88]	; (8001624 <HAL_SPI_MspInit+0xdc>)
 80015ca:	2210      	movs	r2, #16
 80015cc:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015ce:	4b15      	ldr	r3, [pc, #84]	; (8001624 <HAL_SPI_MspInit+0xdc>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015d4:	4b13      	ldr	r3, [pc, #76]	; (8001624 <HAL_SPI_MspInit+0xdc>)
 80015d6:	2280      	movs	r2, #128	; 0x80
 80015d8:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015da:	4b12      	ldr	r3, [pc, #72]	; (8001624 <HAL_SPI_MspInit+0xdc>)
 80015dc:	2200      	movs	r2, #0
 80015de:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015e0:	4b10      	ldr	r3, [pc, #64]	; (8001624 <HAL_SPI_MspInit+0xdc>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 80015e6:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <HAL_SPI_MspInit+0xdc>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015ec:	4b0d      	ldr	r3, [pc, #52]	; (8001624 <HAL_SPI_MspInit+0xdc>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80015f2:	480c      	ldr	r0, [pc, #48]	; (8001624 <HAL_SPI_MspInit+0xdc>)
 80015f4:	f002 fe6c 	bl	80042d0 <HAL_DMA_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 80015fe:	f7ff ff27 	bl	8001450 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a07      	ldr	r2, [pc, #28]	; (8001624 <HAL_SPI_MspInit+0xdc>)
 8001606:	655a      	str	r2, [r3, #84]	; 0x54
 8001608:	4a06      	ldr	r2, [pc, #24]	; (8001624 <HAL_SPI_MspInit+0xdc>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800160e:	bf00      	nop
 8001610:	3728      	adds	r7, #40	; 0x28
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40003c00 	.word	0x40003c00
 800161c:	40021000 	.word	0x40021000
 8001620:	48000800 	.word	0x48000800
 8001624:	200006c0 	.word	0x200006c0
 8001628:	40020044 	.word	0x40020044

0800162c <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001630:	4b05      	ldr	r3, [pc, #20]	; (8001648 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	4a04      	ldr	r2, [pc, #16]	; (8001648 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8001636:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800163a:	6093      	str	r3, [r2, #8]
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	40007000 	.word	0x40007000

0800164c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001652:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <HAL_MspInit+0x44>)
 8001654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001656:	4a0e      	ldr	r2, [pc, #56]	; (8001690 <HAL_MspInit+0x44>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6613      	str	r3, [r2, #96]	; 0x60
 800165e:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <HAL_MspInit+0x44>)
 8001660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	607b      	str	r3, [r7, #4]
 8001668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800166a:	4b09      	ldr	r3, [pc, #36]	; (8001690 <HAL_MspInit+0x44>)
 800166c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166e:	4a08      	ldr	r2, [pc, #32]	; (8001690 <HAL_MspInit+0x44>)
 8001670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001674:	6593      	str	r3, [r2, #88]	; 0x58
 8001676:	4b06      	ldr	r3, [pc, #24]	; (8001690 <HAL_MspInit+0x44>)
 8001678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167e:	603b      	str	r3, [r7, #0]
 8001680:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8001682:	f7ff ffd3 	bl	800162c <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40021000 	.word	0x40021000

08001694 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800169c:	4b07      	ldr	r3, [pc, #28]	; (80016bc <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800169e:	695a      	ldr	r2, [r3, #20]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4013      	ands	r3, r2
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d101      	bne.n	80016ae <LL_EXTI_IsActiveFlag_0_31+0x1a>
 80016aa:	2301      	movs	r3, #1
 80016ac:	e000      	b.n	80016b0 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	40010400 	.word	0x40010400

080016c0 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80016c8:	4a04      	ldr	r2, [pc, #16]	; (80016dc <LL_EXTI_ClearFlag_0_31+0x1c>)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6153      	str	r3, [r2, #20]
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	40010400 	.word	0x40010400

080016e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016f2:	e7fe      	b.n	80016f2 <HardFault_Handler+0x4>

080016f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <MemManage_Handler+0x4>

080016fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016fe:	e7fe      	b.n	80016fe <BusFault_Handler+0x4>

08001700 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001704:	e7fe      	b.n	8001704 <UsageFault_Handler+0x4>

08001706 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001734:	f000 fd8a 	bl	800224c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}

0800173c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

//	if(HAL_GPIO_ReadPin(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin))
//	{
		snprintf(control_pressed, sizeof(control_pressed), "BTN3");
 8001740:	4b09      	ldr	r3, [pc, #36]	; (8001768 <EXTI0_IRQHandler+0x2c>)
 8001742:	4a0a      	ldr	r2, [pc, #40]	; (800176c <EXTI0_IRQHandler+0x30>)
 8001744:	6810      	ldr	r0, [r2, #0]
 8001746:	6018      	str	r0, [r3, #0]
 8001748:	7912      	ldrb	r2, [r2, #4]
 800174a:	711a      	strb	r2, [r3, #4]
 		printf("BTN3_EXTI0_Pin\n");
 800174c:	4808      	ldr	r0, [pc, #32]	; (8001770 <EXTI0_IRQHandler+0x34>)
 800174e:	f006 ff93 	bl	8008678 <puts>
//	}

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8001752:	2001      	movs	r0, #1
 8001754:	f7ff ff9e 	bl	8001694 <LL_EXTI_IsActiveFlag_0_31>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d002      	beq.n	8001764 <EXTI0_IRQHandler+0x28>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 800175e:	2001      	movs	r0, #1
 8001760:	f7ff ffae 	bl	80016c0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20000478 	.word	0x20000478
 800176c:	0800986c 	.word	0x0800986c
 8001770:	08009874 	.word	0x08009874

08001774 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

//	if(HAL_GPIO_ReadPin(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin))
//	{
		snprintf(control_pressed, sizeof(control_pressed), "BTN4");
 8001778:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <EXTI1_IRQHandler+0x2c>)
 800177a:	4a0a      	ldr	r2, [pc, #40]	; (80017a4 <EXTI1_IRQHandler+0x30>)
 800177c:	6810      	ldr	r0, [r2, #0]
 800177e:	6018      	str	r0, [r3, #0]
 8001780:	7912      	ldrb	r2, [r2, #4]
 8001782:	711a      	strb	r2, [r3, #4]
		printf("BTN4_EXTI1_Pin\n");
 8001784:	4808      	ldr	r0, [pc, #32]	; (80017a8 <EXTI1_IRQHandler+0x34>)
 8001786:	f006 ff77 	bl	8008678 <puts>
//	}

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 800178a:	2002      	movs	r0, #2
 800178c:	f7ff ff82 	bl	8001694 <LL_EXTI_IsActiveFlag_0_31>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d002      	beq.n	800179c <EXTI1_IRQHandler+0x28>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 8001796:	2002      	movs	r0, #2
 8001798:	f7ff ff92 	bl	80016c0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800179c:	bf00      	nop
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20000478 	.word	0x20000478
 80017a4:	08009884 	.word	0x08009884
 80017a8:	0800988c 	.word	0x0800988c

080017ac <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */


		snprintf(control_pressed, sizeof(control_pressed), "ENC_BTN");
 80017b0:	4a09      	ldr	r2, [pc, #36]	; (80017d8 <EXTI2_IRQHandler+0x2c>)
 80017b2:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <EXTI2_IRQHandler+0x30>)
 80017b4:	cb03      	ldmia	r3!, {r0, r1}
 80017b6:	6010      	str	r0, [r2, #0]
 80017b8:	6051      	str	r1, [r2, #4]
		printf("ENC_EXTI2_Pin\n");
 80017ba:	4809      	ldr	r0, [pc, #36]	; (80017e0 <EXTI2_IRQHandler+0x34>)
 80017bc:	f006 ff5c 	bl	8008678 <puts>


  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 80017c0:	2004      	movs	r0, #4
 80017c2:	f7ff ff67 	bl	8001694 <LL_EXTI_IsActiveFlag_0_31>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d002      	beq.n	80017d2 <EXTI2_IRQHandler+0x26>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 80017cc:	2004      	movs	r0, #4
 80017ce:	f7ff ff77 	bl	80016c0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000478 	.word	0x20000478
 80017dc:	0800989c 	.word	0x0800989c
 80017e0:	080098a4 	.word	0x080098a4

080017e4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	//printf("Test\n");
	//printf("%lu\n", trigger_input[0]);
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80017e8:	4802      	ldr	r0, [pc, #8]	; (80017f4 <DMA1_Channel1_IRQHandler+0x10>)
 80017ea:	f002 fe94 	bl	8004516 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	200004f0 	.word	0x200004f0

080017f8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80017fc:	4802      	ldr	r0, [pc, #8]	; (8001808 <DMA1_Channel2_IRQHandler+0x10>)
 80017fe:	f002 fe8a 	bl	8004516 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	2000059c 	.word	0x2000059c

0800180c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8001810:	4802      	ldr	r0, [pc, #8]	; (800181c <DMA1_Channel3_IRQHandler+0x10>)
 8001812:	f002 fe80 	bl	8004516 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	200005fc 	.word	0x200005fc

08001820 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001824:	4802      	ldr	r0, [pc, #8]	; (8001830 <DMA1_Channel4_IRQHandler+0x10>)
 8001826:	f002 fe76 	bl	8004516 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	200006c0 	.word	0x200006c0

08001834 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	DM_UpdateDisplay();
 8001838:	f7fe fe3a 	bl	80004b0 <DM_UpdateDisplay>
  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800183c:	4803      	ldr	r0, [pc, #12]	; (800184c <TIM1_BRK_TIM15_IRQHandler+0x18>)
 800183e:	f004 fdd9 	bl	80063f4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8001842:	4803      	ldr	r0, [pc, #12]	; (8001850 <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 8001844:	f004 fdd6 	bl	80063f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000850 	.word	0x20000850
 8001850:	2000076c 	.word	0x2000076c

08001854 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	snprintf(control_pressed, sizeof(control_pressed), " ");
 8001858:	4a05      	ldr	r2, [pc, #20]	; (8001870 <TIM1_UP_TIM16_IRQHandler+0x1c>)
 800185a:	4b06      	ldr	r3, [pc, #24]	; (8001874 <TIM1_UP_TIM16_IRQHandler+0x20>)
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	8013      	strh	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001860:	4805      	ldr	r0, [pc, #20]	; (8001878 <TIM1_UP_TIM16_IRQHandler+0x24>)
 8001862:	f004 fdc7 	bl	80063f4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8001866:	4805      	ldr	r0, [pc, #20]	; (800187c <TIM1_UP_TIM16_IRQHandler+0x28>)
 8001868:	f004 fdc4 	bl	80063f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000478 	.word	0x20000478
 8001874:	080098b4 	.word	0x080098b4
 8001878:	20000850 	.word	0x20000850
 800187c:	200008e8 	.word	0x200008e8

08001880 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	update_dc_bias_sweep();
 8001884:	f7ff f92e 	bl	8000ae4 <update_dc_bias_sweep>
	if((TIM1->CNT < last_enc_value) || (TIM1->CNT > last_enc_value))
 8001888:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 800188a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188c:	4a11      	ldr	r2, [pc, #68]	; (80018d4 <TIM1_TRG_COM_TIM17_IRQHandler+0x54>)
 800188e:	8812      	ldrh	r2, [r2, #0]
 8001890:	4293      	cmp	r3, r2
 8001892:	d305      	bcc.n	80018a0 <TIM1_TRG_COM_TIM17_IRQHandler+0x20>
 8001894:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 8001896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001898:	4a0e      	ldr	r2, [pc, #56]	; (80018d4 <TIM1_TRG_COM_TIM17_IRQHandler+0x54>)
 800189a:	8812      	ldrh	r2, [r2, #0]
 800189c:	4293      	cmp	r3, r2
 800189e:	d90a      	bls.n	80018b6 <TIM1_TRG_COM_TIM17_IRQHandler+0x36>
	{
		printf("%lu\n",TIM1->CNT);
 80018a0:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 80018a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a4:	4619      	mov	r1, r3
 80018a6:	480c      	ldr	r0, [pc, #48]	; (80018d8 <TIM1_TRG_COM_TIM17_IRQHandler+0x58>)
 80018a8:	f006 fe72 	bl	8008590 <iprintf>
		new_enc_value = TIM1->CNT;
 80018ac:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 80018ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <TIM1_TRG_COM_TIM17_IRQHandler+0x5c>)
 80018b4:	801a      	strh	r2, [r3, #0]
	}


	last_enc_value = TIM1->CNT;
 80018b6:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 80018b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	4b05      	ldr	r3, [pc, #20]	; (80018d4 <TIM1_TRG_COM_TIM17_IRQHandler+0x54>)
 80018be:	801a      	strh	r2, [r3, #0]


  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018c0:	4807      	ldr	r0, [pc, #28]	; (80018e0 <TIM1_TRG_COM_TIM17_IRQHandler+0x60>)
 80018c2:	f004 fd97 	bl	80063f4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 80018c6:	4807      	ldr	r0, [pc, #28]	; (80018e4 <TIM1_TRG_COM_TIM17_IRQHandler+0x64>)
 80018c8:	f004 fd94 	bl	80063f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80018cc:	bf00      	nop
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40012c00 	.word	0x40012c00
 80018d4:	20000468 	.word	0x20000468
 80018d8:	080098b8 	.word	0x080098b8
 80018dc:	2000046a 	.word	0x2000046a
 80018e0:	20000850 	.word	0x20000850
 80018e4:	200007b8 	.word	0x200007b8

080018e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018ec:	4802      	ldr	r0, [pc, #8]	; (80018f8 <TIM2_IRQHandler+0x10>)
 80018ee:	f004 fd81 	bl	80063f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	2000089c 	.word	0x2000089c

080018fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	if(HAL_GPIO_ReadPin(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin))
 8001900:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001904:	481b      	ldr	r0, [pc, #108]	; (8001974 <EXTI15_10_IRQHandler+0x78>)
 8001906:	f003 f8d7 	bl	8004ab8 <HAL_GPIO_ReadPin>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d008      	beq.n	8001922 <EXTI15_10_IRQHandler+0x26>
	{
		snprintf(control_pressed, sizeof(control_pressed), "BTN1");
 8001910:	4b19      	ldr	r3, [pc, #100]	; (8001978 <EXTI15_10_IRQHandler+0x7c>)
 8001912:	4a1a      	ldr	r2, [pc, #104]	; (800197c <EXTI15_10_IRQHandler+0x80>)
 8001914:	6810      	ldr	r0, [r2, #0]
 8001916:	6018      	str	r0, [r3, #0]
 8001918:	7912      	ldrb	r2, [r2, #4]
 800191a:	711a      	strb	r2, [r3, #4]
		printf("BTN1_EXTI14_Pin\n");
 800191c:	4818      	ldr	r0, [pc, #96]	; (8001980 <EXTI15_10_IRQHandler+0x84>)
 800191e:	f006 feab 	bl	8008678 <puts>
	}
	if(HAL_GPIO_ReadPin(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin))
 8001922:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001926:	4813      	ldr	r0, [pc, #76]	; (8001974 <EXTI15_10_IRQHandler+0x78>)
 8001928:	f003 f8c6 	bl	8004ab8 <HAL_GPIO_ReadPin>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d008      	beq.n	8001944 <EXTI15_10_IRQHandler+0x48>
	{
		snprintf(control_pressed, sizeof(control_pressed), "BTN2");
 8001932:	4b11      	ldr	r3, [pc, #68]	; (8001978 <EXTI15_10_IRQHandler+0x7c>)
 8001934:	4a13      	ldr	r2, [pc, #76]	; (8001984 <EXTI15_10_IRQHandler+0x88>)
 8001936:	6810      	ldr	r0, [r2, #0]
 8001938:	6018      	str	r0, [r3, #0]
 800193a:	7912      	ldrb	r2, [r2, #4]
 800193c:	711a      	strb	r2, [r3, #4]
		printf("BTN2_EXTI15_Pin\n");
 800193e:	4812      	ldr	r0, [pc, #72]	; (8001988 <EXTI15_10_IRQHandler+0x8c>)
 8001940:	f006 fe9a 	bl	8008678 <puts>
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8001944:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001948:	f7ff fea4 	bl	8001694 <LL_EXTI_IsActiveFlag_0_31>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <EXTI15_10_IRQHandler+0x5e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8001952:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001956:	f7ff feb3 	bl	80016c0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 800195a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800195e:	f7ff fe99 	bl	8001694 <LL_EXTI_IsActiveFlag_0_31>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <EXTI15_10_IRQHandler+0x74>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8001968:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800196c:	f7ff fea8 	bl	80016c0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}
 8001974:	48000800 	.word	0x48000800
 8001978:	20000478 	.word	0x20000478
 800197c:	080098c0 	.word	0x080098c0
 8001980:	080098c8 	.word	0x080098c8
 8001984:	080098d8 	.word	0x080098d8
 8001988:	080098e0 	.word	0x080098e0

0800198c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
 800199c:	e00a      	b.n	80019b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800199e:	f3af 8000 	nop.w
 80019a2:	4601      	mov	r1, r0
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	1c5a      	adds	r2, r3, #1
 80019a8:	60ba      	str	r2, [r7, #8]
 80019aa:	b2ca      	uxtb	r2, r1
 80019ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	3301      	adds	r3, #1
 80019b2:	617b      	str	r3, [r7, #20]
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	dbf0      	blt.n	800199e <_read+0x12>
	}

return len;
 80019bc:	687b      	ldr	r3, [r7, #4]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
	return -1;
 80019ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
 80019e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019ee:	605a      	str	r2, [r3, #4]
	return 0;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <_isatty>:

int _isatty(int file)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b083      	sub	sp, #12
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
	return 1;
 8001a06:	2301      	movs	r3, #1
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
	return 0;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3714      	adds	r7, #20
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
	...

08001a30 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001a38:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <_sbrk+0x50>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d102      	bne.n	8001a46 <_sbrk+0x16>
		heap_end = &end;
 8001a40:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <_sbrk+0x50>)
 8001a42:	4a10      	ldr	r2, [pc, #64]	; (8001a84 <_sbrk+0x54>)
 8001a44:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <_sbrk+0x50>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <_sbrk+0x50>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4413      	add	r3, r2
 8001a54:	466a      	mov	r2, sp
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d907      	bls.n	8001a6a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001a5a:	f006 fd67 	bl	800852c <__errno>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	230c      	movs	r3, #12
 8001a62:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001a64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a68:	e006      	b.n	8001a78 <_sbrk+0x48>
	}

	heap_end += incr;
 8001a6a:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <_sbrk+0x50>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4413      	add	r3, r2
 8001a72:	4a03      	ldr	r2, [pc, #12]	; (8001a80 <_sbrk+0x50>)
 8001a74:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001a76:	68fb      	ldr	r3, [r7, #12]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	2000046c 	.word	0x2000046c
 8001a84:	20000940 	.word	0x20000940

08001a88 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a8c:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <SystemInit+0x28>)
 8001a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a92:	4a07      	ldr	r2, [pc, #28]	; (8001ab0 <SystemInit+0x28>)
 8001a94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a9c:	4b04      	ldr	r3, [pc, #16]	; (8001ab0 <SystemInit+0x28>)
 8001a9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001aa2:	609a      	str	r2, [r3, #8]
#endif
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b09a      	sub	sp, #104	; 0x68
 8001ab8:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001aba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001abe:	2224      	movs	r2, #36	; 0x24
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f006 fd5c 	bl	8008580 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ad4:	1d3b      	adds	r3, r7, #4
 8001ad6:	2234      	movs	r2, #52	; 0x34
 8001ad8:	2100      	movs	r1, #0
 8001ada:	4618      	mov	r0, r3
 8001adc:	f006 fd50 	bl	8008580 <memset>

  htim1.Instance = TIM1;
 8001ae0:	4b2a      	ldr	r3, [pc, #168]	; (8001b8c <MX_TIM1_Init+0xd8>)
 8001ae2:	4a2b      	ldr	r2, [pc, #172]	; (8001b90 <MX_TIM1_Init+0xdc>)
 8001ae4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001ae6:	4b29      	ldr	r3, [pc, #164]	; (8001b8c <MX_TIM1_Init+0xd8>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8001aec:	4b27      	ldr	r3, [pc, #156]	; (8001b8c <MX_TIM1_Init+0xd8>)
 8001aee:	2240      	movs	r2, #64	; 0x40
 8001af0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 8001af2:	4b26      	ldr	r3, [pc, #152]	; (8001b8c <MX_TIM1_Init+0xd8>)
 8001af4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001af8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001afa:	4b24      	ldr	r3, [pc, #144]	; (8001b8c <MX_TIM1_Init+0xd8>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b00:	4b22      	ldr	r3, [pc, #136]	; (8001b8c <MX_TIM1_Init+0xd8>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b06:	4b21      	ldr	r3, [pc, #132]	; (8001b8c <MX_TIM1_Init+0xd8>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b10:	2300      	movs	r3, #0
 8001b12:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b14:	2301      	movs	r3, #1
 8001b16:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b20:	2300      	movs	r3, #0
 8001b22:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b24:	2301      	movs	r3, #1
 8001b26:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001b30:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b34:	4619      	mov	r1, r3
 8001b36:	4815      	ldr	r0, [pc, #84]	; (8001b8c <MX_TIM1_Init+0xd8>)
 8001b38:	f004 fbb6 	bl	80062a8 <HAL_TIM_Encoder_Init>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001b42:	f7ff fc85 	bl	8001450 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b46:	2300      	movs	r3, #0
 8001b48:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b52:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b56:	4619      	mov	r1, r3
 8001b58:	480c      	ldr	r0, [pc, #48]	; (8001b8c <MX_TIM1_Init+0xd8>)
 8001b5a:	f005 f92f 	bl	8006dbc <HAL_TIMEx_MasterConfigSynchronization>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8001b64:	f7ff fc74 	bl	8001450 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b70:	1d3b      	adds	r3, r7, #4
 8001b72:	4619      	mov	r1, r3
 8001b74:	4805      	ldr	r0, [pc, #20]	; (8001b8c <MX_TIM1_Init+0xd8>)
 8001b76:	f005 f9b7 	bl	8006ee8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8001b80:	f7ff fc66 	bl	8001450 <Error_Handler>
  }

}
 8001b84:	bf00      	nop
 8001b86:	3768      	adds	r7, #104	; 0x68
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20000850 	.word	0x20000850
 8001b90:	40012c00 	.word	0x40012c00

08001b94 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08c      	sub	sp, #48	; 0x30
 8001b98:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b9a:	f107 0320 	add.w	r3, r7, #32
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	605a      	str	r2, [r3, #4]
 8001ba4:	609a      	str	r2, [r3, #8]
 8001ba6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001ba8:	f107 030c 	add.w	r3, r7, #12
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb8:	463b      	mov	r3, r7
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
 8001bc0:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8001bc2:	4b28      	ldr	r3, [pc, #160]	; (8001c64 <MX_TIM2_Init+0xd0>)
 8001bc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bc8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2047;
 8001bca:	4b26      	ldr	r3, [pc, #152]	; (8001c64 <MX_TIM2_Init+0xd0>)
 8001bcc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001bd0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd2:	4b24      	ldr	r3, [pc, #144]	; (8001c64 <MX_TIM2_Init+0xd0>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024;
 8001bd8:	4b22      	ldr	r3, [pc, #136]	; (8001c64 <MX_TIM2_Init+0xd0>)
 8001bda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bde:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001be0:	4b20      	ldr	r3, [pc, #128]	; (8001c64 <MX_TIM2_Init+0xd0>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001be6:	4b1f      	ldr	r3, [pc, #124]	; (8001c64 <MX_TIM2_Init+0xd0>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001bec:	481d      	ldr	r0, [pc, #116]	; (8001c64 <MX_TIM2_Init+0xd0>)
 8001bee:	f004 faa0 	bl	8006132 <HAL_TIM_Base_Init>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001bf8:	f7ff fc2a 	bl	8001450 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c00:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c02:	f107 0320 	add.w	r3, r7, #32
 8001c06:	4619      	mov	r1, r3
 8001c08:	4816      	ldr	r0, [pc, #88]	; (8001c64 <MX_TIM2_Init+0xd0>)
 8001c0a:	f004 fd73 	bl	80066f4 <HAL_TIM_ConfigClockSource>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001c14:	f7ff fc1c 	bl	8001450 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8001c18:	2305      	movs	r3, #5
 8001c1a:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001c1c:	2350      	movs	r3, #80	; 0x50
 8001c1e:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001c28:	f107 030c 	add.w	r3, r7, #12
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	480d      	ldr	r0, [pc, #52]	; (8001c64 <MX_TIM2_Init+0xd0>)
 8001c30:	f004 fe50 	bl	80068d4 <HAL_TIM_SlaveConfigSynchro>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8001c3a:	f7ff fc09 	bl	8001450 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c42:	2300      	movs	r3, #0
 8001c44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c46:	463b      	mov	r3, r7
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4806      	ldr	r0, [pc, #24]	; (8001c64 <MX_TIM2_Init+0xd0>)
 8001c4c:	f005 f8b6 	bl	8006dbc <HAL_TIMEx_MasterConfigSynchronization>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8001c56:	f7ff fbfb 	bl	8001450 <Error_Handler>
  }

}
 8001c5a:	bf00      	nop
 8001c5c:	3730      	adds	r7, #48	; 0x30
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	2000089c 	.word	0x2000089c

08001c68 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c6e:	f107 0310 	add.w	r3, r7, #16
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	609a      	str	r2, [r3, #8]
 8001c7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c7c:	1d3b      	adds	r3, r7, #4
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	605a      	str	r2, [r3, #4]
 8001c84:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 8001c86:	4b1e      	ldr	r3, [pc, #120]	; (8001d00 <MX_TIM5_Init+0x98>)
 8001c88:	4a1e      	ldr	r2, [pc, #120]	; (8001d04 <MX_TIM5_Init+0x9c>)
 8001c8a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 65535;
 8001c8c:	4b1c      	ldr	r3, [pc, #112]	; (8001d00 <MX_TIM5_Init+0x98>)
 8001c8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c92:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c94:	4b1a      	ldr	r3, [pc, #104]	; (8001d00 <MX_TIM5_Init+0x98>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001c9a:	4b19      	ldr	r3, [pc, #100]	; (8001d00 <MX_TIM5_Init+0x98>)
 8001c9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ca0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001ca2:	4b17      	ldr	r3, [pc, #92]	; (8001d00 <MX_TIM5_Init+0x98>)
 8001ca4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ca8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001caa:	4b15      	ldr	r3, [pc, #84]	; (8001d00 <MX_TIM5_Init+0x98>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001cb0:	4813      	ldr	r0, [pc, #76]	; (8001d00 <MX_TIM5_Init+0x98>)
 8001cb2:	f004 fa3e 	bl	8006132 <HAL_TIM_Base_Init>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001cbc:	f7ff fbc8 	bl	8001450 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cc4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001cc6:	f107 0310 	add.w	r3, r7, #16
 8001cca:	4619      	mov	r1, r3
 8001ccc:	480c      	ldr	r0, [pc, #48]	; (8001d00 <MX_TIM5_Init+0x98>)
 8001cce:	f004 fd11 	bl	80066f4 <HAL_TIM_ConfigClockSource>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8001cd8:	f7ff fbba 	bl	8001450 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001ce4:	1d3b      	adds	r3, r7, #4
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4805      	ldr	r0, [pc, #20]	; (8001d00 <MX_TIM5_Init+0x98>)
 8001cea:	f005 f867 	bl	8006dbc <HAL_TIMEx_MasterConfigSynchronization>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8001cf4:	f7ff fbac 	bl	8001450 <Error_Handler>
  }

}
 8001cf8:	bf00      	nop
 8001cfa:	3720      	adds	r7, #32
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	20000804 	.word	0x20000804
 8001d04:	40000c00 	.word	0x40000c00

08001d08 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b094      	sub	sp, #80	; 0x50
 8001d0c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d0e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	605a      	str	r2, [r3, #4]
 8001d18:	609a      	str	r2, [r3, #8]
 8001d1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d1c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d28:	463b      	mov	r3, r7
 8001d2a:	2234      	movs	r2, #52	; 0x34
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f006 fc26 	bl	8008580 <memset>

  htim8.Instance = TIM8;
 8001d34:	4b26      	ldr	r3, [pc, #152]	; (8001dd0 <MX_TIM8_Init+0xc8>)
 8001d36:	4a27      	ldr	r2, [pc, #156]	; (8001dd4 <MX_TIM8_Init+0xcc>)
 8001d38:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001d3a:	4b25      	ldr	r3, [pc, #148]	; (8001dd0 <MX_TIM8_Init+0xc8>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d40:	4b23      	ldr	r3, [pc, #140]	; (8001dd0 <MX_TIM8_Init+0xc8>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 8001d46:	4b22      	ldr	r3, [pc, #136]	; (8001dd0 <MX_TIM8_Init+0xc8>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d4c:	4b20      	ldr	r3, [pc, #128]	; (8001dd0 <MX_TIM8_Init+0xc8>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001d52:	4b1f      	ldr	r3, [pc, #124]	; (8001dd0 <MX_TIM8_Init+0xc8>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d58:	4b1d      	ldr	r3, [pc, #116]	; (8001dd0 <MX_TIM8_Init+0xc8>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001d5e:	481c      	ldr	r0, [pc, #112]	; (8001dd0 <MX_TIM8_Init+0xc8>)
 8001d60:	f004 f9e7 	bl	8006132 <HAL_TIM_Base_Init>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8001d6a:	f7ff fb71 	bl	8001450 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d72:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001d74:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4815      	ldr	r0, [pc, #84]	; (8001dd0 <MX_TIM8_Init+0xc8>)
 8001d7c:	f004 fcba 	bl	80066f4 <HAL_TIM_ConfigClockSource>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001d86:	f7ff fb63 	bl	8001450 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001d8a:	2320      	movs	r3, #32
 8001d8c:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d92:	2300      	movs	r3, #0
 8001d94:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001d96:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	480c      	ldr	r0, [pc, #48]	; (8001dd0 <MX_TIM8_Init+0xc8>)
 8001d9e:	f005 f80d 	bl	8006dbc <HAL_TIMEx_MasterConfigSynchronization>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001da8:	f7ff fb52 	bl	8001450 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001dac:	2300      	movs	r3, #0
 8001dae:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001db0:	2300      	movs	r3, #0
 8001db2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001db4:	463b      	mov	r3, r7
 8001db6:	4619      	mov	r1, r3
 8001db8:	4805      	ldr	r0, [pc, #20]	; (8001dd0 <MX_TIM8_Init+0xc8>)
 8001dba:	f005 f895 	bl	8006ee8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8001dc4:	f7ff fb44 	bl	8001450 <Error_Handler>
  }

}
 8001dc8:	bf00      	nop
 8001dca:	3750      	adds	r7, #80	; 0x50
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20000720 	.word	0x20000720
 8001dd4:	40013400 	.word	0x40013400

08001dd8 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b088      	sub	sp, #32
 8001ddc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dde:	f107 0310 	add.w	r3, r7, #16
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	605a      	str	r2, [r3, #4]
 8001de8:	609a      	str	r2, [r3, #8]
 8001dea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dec:	1d3b      	adds	r3, r7, #4
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	605a      	str	r2, [r3, #4]
 8001df4:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 8001df6:	4b1f      	ldr	r3, [pc, #124]	; (8001e74 <MX_TIM15_Init+0x9c>)
 8001df8:	4a1f      	ldr	r2, [pc, #124]	; (8001e78 <MX_TIM15_Init+0xa0>)
 8001dfa:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 8001dfc:	4b1d      	ldr	r3, [pc, #116]	; (8001e74 <MX_TIM15_Init+0x9c>)
 8001dfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e02:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e04:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <MX_TIM15_Init+0x9c>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 8001e0a:	4b1a      	ldr	r3, [pc, #104]	; (8001e74 <MX_TIM15_Init+0x9c>)
 8001e0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e10:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e12:	4b18      	ldr	r3, [pc, #96]	; (8001e74 <MX_TIM15_Init+0x9c>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001e18:	4b16      	ldr	r3, [pc, #88]	; (8001e74 <MX_TIM15_Init+0x9c>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e1e:	4b15      	ldr	r3, [pc, #84]	; (8001e74 <MX_TIM15_Init+0x9c>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001e24:	4813      	ldr	r0, [pc, #76]	; (8001e74 <MX_TIM15_Init+0x9c>)
 8001e26:	f004 f984 	bl	8006132 <HAL_TIM_Base_Init>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8001e30:	f7ff fb0e 	bl	8001450 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e38:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001e3a:	f107 0310 	add.w	r3, r7, #16
 8001e3e:	4619      	mov	r1, r3
 8001e40:	480c      	ldr	r0, [pc, #48]	; (8001e74 <MX_TIM15_Init+0x9c>)
 8001e42:	f004 fc57 	bl	80066f4 <HAL_TIM_ConfigClockSource>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8001e4c:	f7ff fb00 	bl	8001450 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e50:	2300      	movs	r3, #0
 8001e52:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001e58:	1d3b      	adds	r3, r7, #4
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4805      	ldr	r0, [pc, #20]	; (8001e74 <MX_TIM15_Init+0x9c>)
 8001e5e:	f004 ffad 	bl	8006dbc <HAL_TIMEx_MasterConfigSynchronization>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8001e68:	f7ff faf2 	bl	8001450 <Error_Handler>
  }

}
 8001e6c:	bf00      	nop
 8001e6e:	3720      	adds	r7, #32
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	2000076c 	.word	0x2000076c
 8001e78:	40014000 	.word	0x40014000

08001e7c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8001e80:	4b0f      	ldr	r3, [pc, #60]	; (8001ec0 <MX_TIM16_Init+0x44>)
 8001e82:	4a10      	ldr	r2, [pc, #64]	; (8001ec4 <MX_TIM16_Init+0x48>)
 8001e84:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001e86:	4b0e      	ldr	r3, [pc, #56]	; (8001ec0 <MX_TIM16_Init+0x44>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ec0 <MX_TIM16_Init+0x44>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 8191;
 8001e92:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <MX_TIM16_Init+0x44>)
 8001e94:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8001e98:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e9a:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <MX_TIM16_Init+0x44>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001ea0:	4b07      	ldr	r3, [pc, #28]	; (8001ec0 <MX_TIM16_Init+0x44>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ea6:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <MX_TIM16_Init+0x44>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001eac:	4804      	ldr	r0, [pc, #16]	; (8001ec0 <MX_TIM16_Init+0x44>)
 8001eae:	f004 f940 	bl	8006132 <HAL_TIM_Base_Init>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001eb8:	f7ff faca 	bl	8001450 <Error_Handler>
  }

}
 8001ebc:	bf00      	nop
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	200008e8 	.word	0x200008e8
 8001ec4:	40014400 	.word	0x40014400

08001ec8 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8001ecc:	4b0f      	ldr	r3, [pc, #60]	; (8001f0c <MX_TIM17_Init+0x44>)
 8001ece:	4a10      	ldr	r2, [pc, #64]	; (8001f10 <MX_TIM17_Init+0x48>)
 8001ed0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1023;
 8001ed2:	4b0e      	ldr	r3, [pc, #56]	; (8001f0c <MX_TIM17_Init+0x44>)
 8001ed4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001ed8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eda:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <MX_TIM17_Init+0x44>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 64;
 8001ee0:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <MX_TIM17_Init+0x44>)
 8001ee2:	2240      	movs	r2, #64	; 0x40
 8001ee4:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ee6:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <MX_TIM17_Init+0x44>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001eec:	4b07      	ldr	r3, [pc, #28]	; (8001f0c <MX_TIM17_Init+0x44>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ef2:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <MX_TIM17_Init+0x44>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001ef8:	4804      	ldr	r0, [pc, #16]	; (8001f0c <MX_TIM17_Init+0x44>)
 8001efa:	f004 f91a 	bl	8006132 <HAL_TIM_Base_Init>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8001f04:	f7ff faa4 	bl	8001450 <Error_Handler>
  }

}
 8001f08:	bf00      	nop
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	200007b8 	.word	0x200007b8
 8001f10:	40014800 	.word	0x40014800

08001f14 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08a      	sub	sp, #40	; 0x28
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1c:	f107 0314 	add.w	r3, r7, #20
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a23      	ldr	r2, [pc, #140]	; (8001fc0 <HAL_TIM_Encoder_MspInit+0xac>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d13f      	bne.n	8001fb6 <HAL_TIM_Encoder_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f36:	4b23      	ldr	r3, [pc, #140]	; (8001fc4 <HAL_TIM_Encoder_MspInit+0xb0>)
 8001f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f3a:	4a22      	ldr	r2, [pc, #136]	; (8001fc4 <HAL_TIM_Encoder_MspInit+0xb0>)
 8001f3c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f40:	6613      	str	r3, [r2, #96]	; 0x60
 8001f42:	4b20      	ldr	r3, [pc, #128]	; (8001fc4 <HAL_TIM_Encoder_MspInit+0xb0>)
 8001f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f4e:	4b1d      	ldr	r3, [pc, #116]	; (8001fc4 <HAL_TIM_Encoder_MspInit+0xb0>)
 8001f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f52:	4a1c      	ldr	r2, [pc, #112]	; (8001fc4 <HAL_TIM_Encoder_MspInit+0xb0>)
 8001f54:	f043 0304 	orr.w	r3, r3, #4
 8001f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f5a:	4b1a      	ldr	r3, [pc, #104]	; (8001fc4 <HAL_TIM_Encoder_MspInit+0xb0>)
 8001f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5e:	f003 0304 	and.w	r3, r3, #4
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f66:	2303      	movs	r3, #3
 8001f68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f72:	2300      	movs	r3, #0
 8001f74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001f76:	2302      	movs	r3, #2
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f7a:	f107 0314 	add.w	r3, r7, #20
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4811      	ldr	r0, [pc, #68]	; (8001fc8 <HAL_TIM_Encoder_MspInit+0xb4>)
 8001f82:	f002 fc17 	bl	80047b4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 1, 0);
 8001f86:	2200      	movs	r2, #0
 8001f88:	2101      	movs	r1, #1
 8001f8a:	2018      	movs	r0, #24
 8001f8c:	f001 fdb9 	bl	8003b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001f90:	2018      	movs	r0, #24
 8001f92:	f001 fdd0 	bl	8003b36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8001f96:	2200      	movs	r2, #0
 8001f98:	2101      	movs	r1, #1
 8001f9a:	2019      	movs	r0, #25
 8001f9c:	f001 fdb1 	bl	8003b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001fa0:	2019      	movs	r0, #25
 8001fa2:	f001 fdc8 	bl	8003b36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	2100      	movs	r1, #0
 8001faa:	201a      	movs	r0, #26
 8001fac:	f001 fda9 	bl	8003b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001fb0:	201a      	movs	r0, #26
 8001fb2:	f001 fdc0 	bl	8003b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001fb6:	bf00      	nop
 8001fb8:	3728      	adds	r7, #40	; 0x28
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40012c00 	.word	0x40012c00
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	48000800 	.word	0x48000800

08001fcc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08e      	sub	sp, #56	; 0x38
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fec:	d131      	bne.n	8002052 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fee:	4b53      	ldr	r3, [pc, #332]	; (800213c <HAL_TIM_Base_MspInit+0x170>)
 8001ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff2:	4a52      	ldr	r2, [pc, #328]	; (800213c <HAL_TIM_Base_MspInit+0x170>)
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	6593      	str	r3, [r2, #88]	; 0x58
 8001ffa:	4b50      	ldr	r3, [pc, #320]	; (800213c <HAL_TIM_Base_MspInit+0x170>)
 8001ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	623b      	str	r3, [r7, #32]
 8002004:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002006:	4b4d      	ldr	r3, [pc, #308]	; (800213c <HAL_TIM_Base_MspInit+0x170>)
 8002008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200a:	4a4c      	ldr	r2, [pc, #304]	; (800213c <HAL_TIM_Base_MspInit+0x170>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002012:	4b4a      	ldr	r3, [pc, #296]	; (800213c <HAL_TIM_Base_MspInit+0x170>)
 8002014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	61fb      	str	r3, [r7, #28]
 800201c:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800201e:	2301      	movs	r3, #1
 8002020:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002022:	2302      	movs	r3, #2
 8002024:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	2300      	movs	r3, #0
 8002028:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202a:	2300      	movs	r3, #0
 800202c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800202e:	2301      	movs	r3, #1
 8002030:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002036:	4619      	mov	r1, r3
 8002038:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800203c:	f002 fbba 	bl	80047b4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002040:	2200      	movs	r2, #0
 8002042:	2101      	movs	r1, #1
 8002044:	201c      	movs	r0, #28
 8002046:	f001 fd5c 	bl	8003b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800204a:	201c      	movs	r0, #28
 800204c:	f001 fd73 	bl	8003b36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8002050:	e070      	b.n	8002134 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM5)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a3a      	ldr	r2, [pc, #232]	; (8002140 <HAL_TIM_Base_MspInit+0x174>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d10c      	bne.n	8002076 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800205c:	4b37      	ldr	r3, [pc, #220]	; (800213c <HAL_TIM_Base_MspInit+0x170>)
 800205e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002060:	4a36      	ldr	r2, [pc, #216]	; (800213c <HAL_TIM_Base_MspInit+0x170>)
 8002062:	f043 0308 	orr.w	r3, r3, #8
 8002066:	6593      	str	r3, [r2, #88]	; 0x58
 8002068:	4b34      	ldr	r3, [pc, #208]	; (800213c <HAL_TIM_Base_MspInit+0x170>)
 800206a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206c:	f003 0308 	and.w	r3, r3, #8
 8002070:	61bb      	str	r3, [r7, #24]
 8002072:	69bb      	ldr	r3, [r7, #24]
}
 8002074:	e05e      	b.n	8002134 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM8)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a32      	ldr	r2, [pc, #200]	; (8002144 <HAL_TIM_Base_MspInit+0x178>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d10c      	bne.n	800209a <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002080:	4b2e      	ldr	r3, [pc, #184]	; (800213c <HAL_TIM_Base_MspInit+0x170>)
 8002082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002084:	4a2d      	ldr	r2, [pc, #180]	; (800213c <HAL_TIM_Base_MspInit+0x170>)
 8002086:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800208a:	6613      	str	r3, [r2, #96]	; 0x60
 800208c:	4b2b      	ldr	r3, [pc, #172]	; (800213c <HAL_TIM_Base_MspInit+0x170>)
 800208e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002090:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002094:	617b      	str	r3, [r7, #20]
 8002096:	697b      	ldr	r3, [r7, #20]
}
 8002098:	e04c      	b.n	8002134 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM15)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a2a      	ldr	r2, [pc, #168]	; (8002148 <HAL_TIM_Base_MspInit+0x17c>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d114      	bne.n	80020ce <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80020a4:	4b25      	ldr	r3, [pc, #148]	; (800213c <HAL_TIM_Base_MspInit+0x170>)
 80020a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020a8:	4a24      	ldr	r2, [pc, #144]	; (800213c <HAL_TIM_Base_MspInit+0x170>)
 80020aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ae:	6613      	str	r3, [r2, #96]	; 0x60
 80020b0:	4b22      	ldr	r3, [pc, #136]	; (800213c <HAL_TIM_Base_MspInit+0x170>)
 80020b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b8:	613b      	str	r3, [r7, #16]
 80020ba:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 1, 0);
 80020bc:	2200      	movs	r2, #0
 80020be:	2101      	movs	r1, #1
 80020c0:	2018      	movs	r0, #24
 80020c2:	f001 fd1e 	bl	8003b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80020c6:	2018      	movs	r0, #24
 80020c8:	f001 fd35 	bl	8003b36 <HAL_NVIC_EnableIRQ>
}
 80020cc:	e032      	b.n	8002134 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM16)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a1e      	ldr	r2, [pc, #120]	; (800214c <HAL_TIM_Base_MspInit+0x180>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d114      	bne.n	8002102 <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80020d8:	4b18      	ldr	r3, [pc, #96]	; (800213c <HAL_TIM_Base_MspInit+0x170>)
 80020da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020dc:	4a17      	ldr	r2, [pc, #92]	; (800213c <HAL_TIM_Base_MspInit+0x170>)
 80020de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020e2:	6613      	str	r3, [r2, #96]	; 0x60
 80020e4:	4b15      	ldr	r3, [pc, #84]	; (800213c <HAL_TIM_Base_MspInit+0x170>)
 80020e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 80020f0:	2200      	movs	r2, #0
 80020f2:	2101      	movs	r1, #1
 80020f4:	2019      	movs	r0, #25
 80020f6:	f001 fd04 	bl	8003b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80020fa:	2019      	movs	r0, #25
 80020fc:	f001 fd1b 	bl	8003b36 <HAL_NVIC_EnableIRQ>
}
 8002100:	e018      	b.n	8002134 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM17)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a12      	ldr	r2, [pc, #72]	; (8002150 <HAL_TIM_Base_MspInit+0x184>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d113      	bne.n	8002134 <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800210c:	4b0b      	ldr	r3, [pc, #44]	; (800213c <HAL_TIM_Base_MspInit+0x170>)
 800210e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002110:	4a0a      	ldr	r2, [pc, #40]	; (800213c <HAL_TIM_Base_MspInit+0x170>)
 8002112:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002116:	6613      	str	r3, [r2, #96]	; 0x60
 8002118:	4b08      	ldr	r3, [pc, #32]	; (800213c <HAL_TIM_Base_MspInit+0x170>)
 800211a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800211c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8002124:	2200      	movs	r2, #0
 8002126:	2100      	movs	r1, #0
 8002128:	201a      	movs	r0, #26
 800212a:	f001 fcea 	bl	8003b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800212e:	201a      	movs	r0, #26
 8002130:	f001 fd01 	bl	8003b36 <HAL_NVIC_EnableIRQ>
}
 8002134:	bf00      	nop
 8002136:	3738      	adds	r7, #56	; 0x38
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40021000 	.word	0x40021000
 8002140:	40000c00 	.word	0x40000c00
 8002144:	40013400 	.word	0x40013400
 8002148:	40014000 	.word	0x40014000
 800214c:	40014400 	.word	0x40014400
 8002150:	40014800 	.word	0x40014800

08002154 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002154:	480d      	ldr	r0, [pc, #52]	; (800218c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002156:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002158:	480d      	ldr	r0, [pc, #52]	; (8002190 <LoopForever+0x6>)
  ldr r1, =_edata
 800215a:	490e      	ldr	r1, [pc, #56]	; (8002194 <LoopForever+0xa>)
  ldr r2, =_sidata
 800215c:	4a0e      	ldr	r2, [pc, #56]	; (8002198 <LoopForever+0xe>)
  movs r3, #0
 800215e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002160:	e002      	b.n	8002168 <LoopCopyDataInit>

08002162 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002162:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002164:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002166:	3304      	adds	r3, #4

08002168 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002168:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800216a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800216c:	d3f9      	bcc.n	8002162 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800216e:	4a0b      	ldr	r2, [pc, #44]	; (800219c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002170:	4c0b      	ldr	r4, [pc, #44]	; (80021a0 <LoopForever+0x16>)
  movs r3, #0
 8002172:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002174:	e001      	b.n	800217a <LoopFillZerobss>

08002176 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002176:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002178:	3204      	adds	r2, #4

0800217a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800217a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800217c:	d3fb      	bcc.n	8002176 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800217e:	f7ff fc83 	bl	8001a88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002182:	f006 f9d9 	bl	8008538 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002186:	f7ff f84f 	bl	8001228 <main>

0800218a <LoopForever>:

LoopForever:
    b LoopForever
 800218a:	e7fe      	b.n	800218a <LoopForever>
  ldr   r0, =_estack
 800218c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002190:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002194:	20000444 	.word	0x20000444
  ldr r2, =_sidata
 8002198:	08009be0 	.word	0x08009be0
  ldr r2, =_sbss
 800219c:	20000444 	.word	0x20000444
  ldr r4, =_ebss
 80021a0:	2000093c 	.word	0x2000093c

080021a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021a4:	e7fe      	b.n	80021a4 <ADC1_2_IRQHandler>

080021a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b082      	sub	sp, #8
 80021aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021ac:	2300      	movs	r3, #0
 80021ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021b0:	2003      	movs	r0, #3
 80021b2:	f001 fc9b 	bl	8003aec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021b6:	2000      	movs	r0, #0
 80021b8:	f000 f80e 	bl	80021d8 <HAL_InitTick>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d002      	beq.n	80021c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	71fb      	strb	r3, [r7, #7]
 80021c6:	e001      	b.n	80021cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021c8:	f7ff fa40 	bl	800164c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021cc:	79fb      	ldrb	r3, [r7, #7]

}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
	...

080021d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80021e0:	2300      	movs	r3, #0
 80021e2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80021e4:	4b16      	ldr	r3, [pc, #88]	; (8002240 <HAL_InitTick+0x68>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d022      	beq.n	8002232 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80021ec:	4b15      	ldr	r3, [pc, #84]	; (8002244 <HAL_InitTick+0x6c>)
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	4b13      	ldr	r3, [pc, #76]	; (8002240 <HAL_InitTick+0x68>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80021f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80021fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002200:	4618      	mov	r0, r3
 8002202:	f001 fca6 	bl	8003b52 <HAL_SYSTICK_Config>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d10f      	bne.n	800222c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b0f      	cmp	r3, #15
 8002210:	d809      	bhi.n	8002226 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002212:	2200      	movs	r2, #0
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800221a:	f001 fc72 	bl	8003b02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800221e:	4a0a      	ldr	r2, [pc, #40]	; (8002248 <HAL_InitTick+0x70>)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6013      	str	r3, [r2, #0]
 8002224:	e007      	b.n	8002236 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	73fb      	strb	r3, [r7, #15]
 800222a:	e004      	b.n	8002236 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	73fb      	strb	r3, [r7, #15]
 8002230:	e001      	b.n	8002236 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002236:	7bfb      	ldrb	r3, [r7, #15]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	200003d4 	.word	0x200003d4
 8002244:	200003cc 	.word	0x200003cc
 8002248:	200003d0 	.word	0x200003d0

0800224c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002250:	4b05      	ldr	r3, [pc, #20]	; (8002268 <HAL_IncTick+0x1c>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	4b05      	ldr	r3, [pc, #20]	; (800226c <HAL_IncTick+0x20>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4413      	add	r3, r2
 800225a:	4a03      	ldr	r2, [pc, #12]	; (8002268 <HAL_IncTick+0x1c>)
 800225c:	6013      	str	r3, [r2, #0]
}
 800225e:	bf00      	nop
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	20000934 	.word	0x20000934
 800226c:	200003d4 	.word	0x200003d4

08002270 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  return uwTick;
 8002274:	4b03      	ldr	r3, [pc, #12]	; (8002284 <HAL_GetTick+0x14>)
 8002276:	681b      	ldr	r3, [r3, #0]
}
 8002278:	4618      	mov	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	20000934 	.word	0x20000934

08002288 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002290:	f7ff ffee 	bl	8002270 <HAL_GetTick>
 8002294:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022a0:	d004      	beq.n	80022ac <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80022a2:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <HAL_Delay+0x40>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	4413      	add	r3, r2
 80022aa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022ac:	bf00      	nop
 80022ae:	f7ff ffdf 	bl	8002270 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d8f7      	bhi.n	80022ae <HAL_Delay+0x26>
  {
  }
}
 80022be:	bf00      	nop
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	200003d4 	.word	0x200003d4

080022cc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	431a      	orrs	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	609a      	str	r2, [r3, #8]
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
 80022fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	431a      	orrs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	609a      	str	r2, [r3, #8]
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002328:	4618      	mov	r0, r3
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002334:	b490      	push	{r4, r7}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
 8002340:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	3360      	adds	r3, #96	; 0x60
 8002346:	461a      	mov	r2, r3
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002350:	6822      	ldr	r2, [r4, #0]
 8002352:	4b08      	ldr	r3, [pc, #32]	; (8002374 <LL_ADC_SetOffset+0x40>)
 8002354:	4013      	ands	r3, r2
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	430a      	orrs	r2, r1
 8002360:	4313      	orrs	r3, r2
 8002362:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002366:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002368:	bf00      	nop
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bc90      	pop	{r4, r7}
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	03fff000 	.word	0x03fff000

08002378 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002378:	b490      	push	{r4, r7}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	3360      	adds	r3, #96	; 0x60
 8002386:	461a      	mov	r2, r3
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002390:	6823      	ldr	r3, [r4, #0]
 8002392:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bc90      	pop	{r4, r7}
 800239e:	4770      	bx	lr

080023a0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80023a0:	b490      	push	{r4, r7}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	3360      	adds	r3, #96	; 0x60
 80023b0:	461a      	mov	r2, r3
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4413      	add	r3, r2
 80023b8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80023ba:	6823      	ldr	r3, [r4, #0]
 80023bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80023c6:	bf00      	nop
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc90      	pop	{r4, r7}
 80023ce:	4770      	bx	lr

080023d0 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80023d0:	b490      	push	{r4, r7}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	3360      	adds	r3, #96	; 0x60
 80023e0:	461a      	mov	r2, r3
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4413      	add	r3, r2
 80023e8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80023ea:	6823      	ldr	r3, [r4, #0]
 80023ec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80023f6:	bf00      	nop
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bc90      	pop	{r4, r7}
 80023fe:	4770      	bx	lr

08002400 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002400:	b490      	push	{r4, r7}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	3360      	adds	r3, #96	; 0x60
 8002410:	461a      	mov	r2, r3
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800241a:	6823      	ldr	r3, [r4, #0]
 800241c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4313      	orrs	r3, r2
 8002424:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002426:	bf00      	nop
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bc90      	pop	{r4, r7}
 800242e:	4770      	bx	lr

08002430 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	431a      	orrs	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	615a      	str	r2, [r3, #20]
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002456:	b490      	push	{r4, r7}
 8002458:	b084      	sub	sp, #16
 800245a:	af00      	add	r7, sp, #0
 800245c:	60f8      	str	r0, [r7, #12]
 800245e:	60b9      	str	r1, [r7, #8]
 8002460:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	3330      	adds	r3, #48	; 0x30
 8002466:	461a      	mov	r2, r3
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	0a1b      	lsrs	r3, r3, #8
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	f003 030c 	and.w	r3, r3, #12
 8002472:	4413      	add	r3, r2
 8002474:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002476:	6822      	ldr	r2, [r4, #0]
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	f003 031f 	and.w	r3, r3, #31
 800247e:	211f      	movs	r1, #31
 8002480:	fa01 f303 	lsl.w	r3, r1, r3
 8002484:	43db      	mvns	r3, r3
 8002486:	401a      	ands	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	0e9b      	lsrs	r3, r3, #26
 800248c:	f003 011f 	and.w	r1, r3, #31
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	f003 031f 	and.w	r3, r3, #31
 8002496:	fa01 f303 	lsl.w	r3, r1, r3
 800249a:	4313      	orrs	r3, r2
 800249c:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800249e:	bf00      	nop
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc90      	pop	{r4, r7}
 80024a6:	4770      	bx	lr

080024a8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80024a8:	b490      	push	{r4, r7}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	3314      	adds	r3, #20
 80024b8:	461a      	mov	r2, r3
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	0e5b      	lsrs	r3, r3, #25
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	4413      	add	r3, r2
 80024c6:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80024c8:	6822      	ldr	r2, [r4, #0]
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	0d1b      	lsrs	r3, r3, #20
 80024ce:	f003 031f 	and.w	r3, r3, #31
 80024d2:	2107      	movs	r1, #7
 80024d4:	fa01 f303 	lsl.w	r3, r1, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	401a      	ands	r2, r3
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	0d1b      	lsrs	r3, r3, #20
 80024e0:	f003 031f 	and.w	r3, r3, #31
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ea:	4313      	orrs	r3, r2
 80024ec:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80024ee:	bf00      	nop
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc90      	pop	{r4, r7}
 80024f6:	4770      	bx	lr

080024f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002510:	43db      	mvns	r3, r3
 8002512:	401a      	ands	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f003 0318 	and.w	r3, r3, #24
 800251a:	4908      	ldr	r1, [pc, #32]	; (800253c <LL_ADC_SetChannelSingleDiff+0x44>)
 800251c:	40d9      	lsrs	r1, r3
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	400b      	ands	r3, r1
 8002522:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002526:	431a      	orrs	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800252e:	bf00      	nop
 8002530:	3714      	adds	r7, #20
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	0007ffff 	.word	0x0007ffff

08002540 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002550:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6093      	str	r3, [r2, #8]
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002574:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002578:	d101      	bne.n	800257e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800257a:	2301      	movs	r3, #1
 800257c:	e000      	b.n	8002580 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800259c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025c8:	d101      	bne.n	80025ce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80025ca:	2301      	movs	r3, #1
 80025cc:	e000      	b.n	80025d0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d101      	bne.n	80025f4 <LL_ADC_IsEnabled+0x18>
 80025f0:	2301      	movs	r3, #1
 80025f2:	e000      	b.n	80025f6 <LL_ADC_IsEnabled+0x1a>
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 0304 	and.w	r3, r3, #4
 8002612:	2b04      	cmp	r3, #4
 8002614:	d101      	bne.n	800261a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002616:	2301      	movs	r3, #1
 8002618:	e000      	b.n	800261c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f003 0308 	and.w	r3, r3, #8
 8002638:	2b08      	cmp	r3, #8
 800263a:	d101      	bne.n	8002640 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800263c:	2301      	movs	r3, #1
 800263e:	e000      	b.n	8002642 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
	...

08002650 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002650:	b590      	push	{r4, r7, lr}
 8002652:	b089      	sub	sp, #36	; 0x24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002658:	2300      	movs	r3, #0
 800265a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800265c:	2300      	movs	r3, #0
 800265e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e1ad      	b.n	80029c6 <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002674:	2b00      	cmp	r3, #0
 8002676:	d109      	bne.n	800268c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f7fd ffdd 	bl	8000638 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff ff67 	bl	8002564 <LL_ADC_IsDeepPowerDownEnabled>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d004      	beq.n	80026a6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff ff4d 	bl	8002540 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff ff82 	bl	80025b4 <LL_ADC_IsInternalRegulatorEnabled>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d113      	bne.n	80026de <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff ff66 	bl	800258c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80026c0:	4b9e      	ldr	r3, [pc, #632]	; (800293c <HAL_ADC_Init+0x2ec>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	099b      	lsrs	r3, r3, #6
 80026c6:	4a9e      	ldr	r2, [pc, #632]	; (8002940 <HAL_ADC_Init+0x2f0>)
 80026c8:	fba2 2303 	umull	r2, r3, r2, r3
 80026cc:	099b      	lsrs	r3, r3, #6
 80026ce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80026d0:	e002      	b.n	80026d8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	3b01      	subs	r3, #1
 80026d6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f9      	bne.n	80026d2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff ff66 	bl	80025b4 <LL_ADC_IsInternalRegulatorEnabled>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10d      	bne.n	800270a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f2:	f043 0210 	orr.w	r2, r3, #16
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026fe:	f043 0201 	orr.w	r2, r3, #1
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff ff77 	bl	8002602 <LL_ADC_REG_IsConversionOngoing>
 8002714:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271a:	f003 0310 	and.w	r3, r3, #16
 800271e:	2b00      	cmp	r3, #0
 8002720:	f040 8148 	bne.w	80029b4 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	2b00      	cmp	r3, #0
 8002728:	f040 8144 	bne.w	80029b4 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002730:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002734:	f043 0202 	orr.w	r2, r3, #2
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff ff4b 	bl	80025dc <LL_ADC_IsEnabled>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d141      	bne.n	80027d0 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002754:	d004      	beq.n	8002760 <HAL_ADC_Init+0x110>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a7a      	ldr	r2, [pc, #488]	; (8002944 <HAL_ADC_Init+0x2f4>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d10f      	bne.n	8002780 <HAL_ADC_Init+0x130>
 8002760:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002764:	f7ff ff3a 	bl	80025dc <LL_ADC_IsEnabled>
 8002768:	4604      	mov	r4, r0
 800276a:	4876      	ldr	r0, [pc, #472]	; (8002944 <HAL_ADC_Init+0x2f4>)
 800276c:	f7ff ff36 	bl	80025dc <LL_ADC_IsEnabled>
 8002770:	4603      	mov	r3, r0
 8002772:	4323      	orrs	r3, r4
 8002774:	2b00      	cmp	r3, #0
 8002776:	bf0c      	ite	eq
 8002778:	2301      	moveq	r3, #1
 800277a:	2300      	movne	r3, #0
 800277c:	b2db      	uxtb	r3, r3
 800277e:	e012      	b.n	80027a6 <HAL_ADC_Init+0x156>
 8002780:	4871      	ldr	r0, [pc, #452]	; (8002948 <HAL_ADC_Init+0x2f8>)
 8002782:	f7ff ff2b 	bl	80025dc <LL_ADC_IsEnabled>
 8002786:	4604      	mov	r4, r0
 8002788:	4870      	ldr	r0, [pc, #448]	; (800294c <HAL_ADC_Init+0x2fc>)
 800278a:	f7ff ff27 	bl	80025dc <LL_ADC_IsEnabled>
 800278e:	4603      	mov	r3, r0
 8002790:	431c      	orrs	r4, r3
 8002792:	486f      	ldr	r0, [pc, #444]	; (8002950 <HAL_ADC_Init+0x300>)
 8002794:	f7ff ff22 	bl	80025dc <LL_ADC_IsEnabled>
 8002798:	4603      	mov	r3, r0
 800279a:	4323      	orrs	r3, r4
 800279c:	2b00      	cmp	r3, #0
 800279e:	bf0c      	ite	eq
 80027a0:	2301      	moveq	r3, #1
 80027a2:	2300      	movne	r3, #0
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d012      	beq.n	80027d0 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027b2:	d004      	beq.n	80027be <HAL_ADC_Init+0x16e>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a62      	ldr	r2, [pc, #392]	; (8002944 <HAL_ADC_Init+0x2f4>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d101      	bne.n	80027c2 <HAL_ADC_Init+0x172>
 80027be:	4a65      	ldr	r2, [pc, #404]	; (8002954 <HAL_ADC_Init+0x304>)
 80027c0:	e000      	b.n	80027c4 <HAL_ADC_Init+0x174>
 80027c2:	4a65      	ldr	r2, [pc, #404]	; (8002958 <HAL_ADC_Init+0x308>)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	4619      	mov	r1, r3
 80027ca:	4610      	mov	r0, r2
 80027cc:	f7ff fd7e 	bl	80022cc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	7f5b      	ldrb	r3, [r3, #29]
 80027d4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027da:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80027e0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80027e6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027ee:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027f0:	4313      	orrs	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d106      	bne.n	800280c <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002802:	3b01      	subs	r3, #1
 8002804:	045b      	lsls	r3, r3, #17
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4313      	orrs	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002810:	2b00      	cmp	r3, #0
 8002812:	d009      	beq.n	8002828 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002818:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002820:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4313      	orrs	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	4b4b      	ldr	r3, [pc, #300]	; (800295c <HAL_ADC_Init+0x30c>)
 8002830:	4013      	ands	r3, r2
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6812      	ldr	r2, [r2, #0]
 8002836:	69b9      	ldr	r1, [r7, #24]
 8002838:	430b      	orrs	r3, r1
 800283a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	430a      	orrs	r2, r1
 8002850:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff fed3 	bl	8002602 <LL_ADC_REG_IsConversionOngoing>
 800285c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff fee0 	bl	8002628 <LL_ADC_INJ_IsConversionOngoing>
 8002868:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d17f      	bne.n	8002970 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d17c      	bne.n	8002970 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800287a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002882:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002884:	4313      	orrs	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002892:	f023 0302 	bic.w	r3, r3, #2
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	6812      	ldr	r2, [r2, #0]
 800289a:	69b9      	ldr	r1, [r7, #24]
 800289c:	430b      	orrs	r3, r1
 800289e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d017      	beq.n	80028d8 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	691a      	ldr	r2, [r3, #16]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80028b6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80028c0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80028c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6911      	ldr	r1, [r2, #16]
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	6812      	ldr	r2, [r2, #0]
 80028d0:	430b      	orrs	r3, r1
 80028d2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80028d6:	e013      	b.n	8002900 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	691a      	ldr	r2, [r3, #16]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80028e6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6812      	ldr	r2, [r2, #0]
 80028f4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80028f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028fc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002906:	2b01      	cmp	r3, #1
 8002908:	d12a      	bne.n	8002960 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002914:	f023 0304 	bic.w	r3, r3, #4
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002920:	4311      	orrs	r1, r2
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002926:	4311      	orrs	r1, r2
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800292c:	430a      	orrs	r2, r1
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f042 0201 	orr.w	r2, r2, #1
 8002938:	611a      	str	r2, [r3, #16]
 800293a:	e019      	b.n	8002970 <HAL_ADC_Init+0x320>
 800293c:	200003cc 	.word	0x200003cc
 8002940:	053e2d63 	.word	0x053e2d63
 8002944:	50000100 	.word	0x50000100
 8002948:	50000400 	.word	0x50000400
 800294c:	50000500 	.word	0x50000500
 8002950:	50000600 	.word	0x50000600
 8002954:	50000300 	.word	0x50000300
 8002958:	50000700 	.word	0x50000700
 800295c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	691a      	ldr	r2, [r3, #16]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0201 	bic.w	r2, r2, #1
 800296e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	695b      	ldr	r3, [r3, #20]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d10c      	bne.n	8002992 <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	f023 010f 	bic.w	r1, r3, #15
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	1e5a      	subs	r2, r3, #1
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	430a      	orrs	r2, r1
 800298e:	631a      	str	r2, [r3, #48]	; 0x30
 8002990:	e007      	b.n	80029a2 <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 020f 	bic.w	r2, r2, #15
 80029a0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a6:	f023 0303 	bic.w	r3, r3, #3
 80029aa:	f043 0201 	orr.w	r2, r3, #1
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	65da      	str	r2, [r3, #92]	; 0x5c
 80029b2:	e007      	b.n	80029c4 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b8:	f043 0210 	orr.w	r2, r3, #16
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80029c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3724      	adds	r7, #36	; 0x24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd90      	pop	{r4, r7, pc}
 80029ce:	bf00      	nop

080029d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b0a6      	sub	sp, #152	; 0x98
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029da:	2300      	movs	r3, #0
 80029dc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80029e0:	2300      	movs	r3, #0
 80029e2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d101      	bne.n	80029f2 <HAL_ADC_ConfigChannel+0x22>
 80029ee:	2302      	movs	r3, #2
 80029f0:	e38e      	b.n	8003110 <HAL_ADC_ConfigChannel+0x740>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff fdff 	bl	8002602 <LL_ADC_REG_IsConversionOngoing>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f040 836f 	bne.w	80030ea <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6818      	ldr	r0, [r3, #0]
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	6859      	ldr	r1, [r3, #4]
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	461a      	mov	r2, r3
 8002a1a:	f7ff fd1c 	bl	8002456 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff fded 	bl	8002602 <LL_ADC_REG_IsConversionOngoing>
 8002a28:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff fdf9 	bl	8002628 <LL_ADC_INJ_IsConversionOngoing>
 8002a36:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f040 817b 	bne.w	8002d3a <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f040 8176 	bne.w	8002d3a <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a56:	d10f      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6818      	ldr	r0, [r3, #0]
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2200      	movs	r2, #0
 8002a62:	4619      	mov	r1, r3
 8002a64:	f7ff fd20 	bl	80024a8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff fcdd 	bl	8002430 <LL_ADC_SetSamplingTimeCommonConfig>
 8002a76:	e00e      	b.n	8002a96 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6818      	ldr	r0, [r3, #0]
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	6819      	ldr	r1, [r3, #0]
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	461a      	mov	r2, r3
 8002a86:	f7ff fd0f 	bl	80024a8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2100      	movs	r1, #0
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff fccd 	bl	8002430 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	695a      	ldr	r2, [r3, #20]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	08db      	lsrs	r3, r3, #3
 8002aa2:	f003 0303 	and.w	r3, r3, #3
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	2b04      	cmp	r3, #4
 8002ab6:	d022      	beq.n	8002afe <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6818      	ldr	r0, [r3, #0]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	6919      	ldr	r1, [r3, #16]
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ac8:	f7ff fc34 	bl	8002334 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6818      	ldr	r0, [r3, #0]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	6919      	ldr	r1, [r3, #16]
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	f7ff fc79 	bl	80023d0 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6818      	ldr	r0, [r3, #0]
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	6919      	ldr	r1, [r3, #16]
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	7f1b      	ldrb	r3, [r3, #28]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d102      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x124>
 8002aee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002af2:	e000      	b.n	8002af6 <HAL_ADC_ConfigChannel+0x126>
 8002af4:	2300      	movs	r3, #0
 8002af6:	461a      	mov	r2, r3
 8002af8:	f7ff fc82 	bl	8002400 <LL_ADC_SetOffsetSaturation>
 8002afc:	e11d      	b.n	8002d3a <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2100      	movs	r1, #0
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff fc37 	bl	8002378 <LL_ADC_GetOffsetChannel>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10a      	bne.n	8002b2a <HAL_ADC_ConfigChannel+0x15a>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2100      	movs	r1, #0
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff fc2c 	bl	8002378 <LL_ADC_GetOffsetChannel>
 8002b20:	4603      	mov	r3, r0
 8002b22:	0e9b      	lsrs	r3, r3, #26
 8002b24:	f003 021f 	and.w	r2, r3, #31
 8002b28:	e012      	b.n	8002b50 <HAL_ADC_ConfigChannel+0x180>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2100      	movs	r1, #0
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff fc21 	bl	8002378 <LL_ADC_GetOffsetChannel>
 8002b36:	4603      	mov	r3, r0
 8002b38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b40:	fa93 f3a3 	rbit	r3, r3
 8002b44:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002b46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b48:	fab3 f383 	clz	r3, r3
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	461a      	mov	r2, r3
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d105      	bne.n	8002b68 <HAL_ADC_ConfigChannel+0x198>
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	0e9b      	lsrs	r3, r3, #26
 8002b62:	f003 031f 	and.w	r3, r3, #31
 8002b66:	e00a      	b.n	8002b7e <HAL_ADC_ConfigChannel+0x1ae>
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b70:	fa93 f3a3 	rbit	r3, r3
 8002b74:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8002b76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b78:	fab3 f383 	clz	r3, r3
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d106      	bne.n	8002b90 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2200      	movs	r2, #0
 8002b88:	2100      	movs	r1, #0
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff fc08 	bl	80023a0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2101      	movs	r1, #1
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff fbee 	bl	8002378 <LL_ADC_GetOffsetChannel>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10a      	bne.n	8002bbc <HAL_ADC_ConfigChannel+0x1ec>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2101      	movs	r1, #1
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff fbe3 	bl	8002378 <LL_ADC_GetOffsetChannel>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	0e9b      	lsrs	r3, r3, #26
 8002bb6:	f003 021f 	and.w	r2, r3, #31
 8002bba:	e010      	b.n	8002bde <HAL_ADC_ConfigChannel+0x20e>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff fbd8 	bl	8002378 <LL_ADC_GetOffsetChannel>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bce:	fa93 f3a3 	rbit	r3, r3
 8002bd2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002bd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bd6:	fab3 f383 	clz	r3, r3
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	461a      	mov	r2, r3
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d105      	bne.n	8002bf6 <HAL_ADC_ConfigChannel+0x226>
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	0e9b      	lsrs	r3, r3, #26
 8002bf0:	f003 031f 	and.w	r3, r3, #31
 8002bf4:	e00a      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x23c>
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bfe:	fa93 f3a3 	rbit	r3, r3
 8002c02:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002c04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c06:	fab3 f383 	clz	r3, r3
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d106      	bne.n	8002c1e <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2200      	movs	r2, #0
 8002c16:	2101      	movs	r1, #1
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff fbc1 	bl	80023a0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2102      	movs	r1, #2
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff fba7 	bl	8002378 <LL_ADC_GetOffsetChannel>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d10a      	bne.n	8002c4a <HAL_ADC_ConfigChannel+0x27a>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2102      	movs	r1, #2
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff fb9c 	bl	8002378 <LL_ADC_GetOffsetChannel>
 8002c40:	4603      	mov	r3, r0
 8002c42:	0e9b      	lsrs	r3, r3, #26
 8002c44:	f003 021f 	and.w	r2, r3, #31
 8002c48:	e010      	b.n	8002c6c <HAL_ADC_ConfigChannel+0x29c>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2102      	movs	r1, #2
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff fb91 	bl	8002378 <LL_ADC_GetOffsetChannel>
 8002c56:	4603      	mov	r3, r0
 8002c58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c5c:	fa93 f3a3 	rbit	r3, r3
 8002c60:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8002c62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c64:	fab3 f383 	clz	r3, r3
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d105      	bne.n	8002c84 <HAL_ADC_ConfigChannel+0x2b4>
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	0e9b      	lsrs	r3, r3, #26
 8002c7e:	f003 031f 	and.w	r3, r3, #31
 8002c82:	e00a      	b.n	8002c9a <HAL_ADC_ConfigChannel+0x2ca>
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c8c:	fa93 f3a3 	rbit	r3, r3
 8002c90:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002c92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c94:	fab3 f383 	clz	r3, r3
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d106      	bne.n	8002cac <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	2102      	movs	r1, #2
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff fb7a 	bl	80023a0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2103      	movs	r1, #3
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff fb60 	bl	8002378 <LL_ADC_GetOffsetChannel>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10a      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x308>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2103      	movs	r1, #3
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff fb55 	bl	8002378 <LL_ADC_GetOffsetChannel>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	0e9b      	lsrs	r3, r3, #26
 8002cd2:	f003 021f 	and.w	r2, r3, #31
 8002cd6:	e010      	b.n	8002cfa <HAL_ADC_ConfigChannel+0x32a>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2103      	movs	r1, #3
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff fb4a 	bl	8002378 <LL_ADC_GetOffsetChannel>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cea:	fa93 f3a3 	rbit	r3, r3
 8002cee:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002cf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cf2:	fab3 f383 	clz	r3, r3
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d105      	bne.n	8002d12 <HAL_ADC_ConfigChannel+0x342>
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	0e9b      	lsrs	r3, r3, #26
 8002d0c:	f003 031f 	and.w	r3, r3, #31
 8002d10:	e00a      	b.n	8002d28 <HAL_ADC_ConfigChannel+0x358>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d1a:	fa93 f3a3 	rbit	r3, r3
 8002d1e:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8002d20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d22:	fab3 f383 	clz	r3, r3
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d106      	bne.n	8002d3a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2200      	movs	r2, #0
 8002d32:	2103      	movs	r1, #3
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff fb33 	bl	80023a0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7ff fc4c 	bl	80025dc <LL_ADC_IsEnabled>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f040 810c 	bne.w	8002f64 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6818      	ldr	r0, [r3, #0]
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	6819      	ldr	r1, [r3, #0]
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	461a      	mov	r2, r3
 8002d5a:	f7ff fbcd 	bl	80024f8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	4aaf      	ldr	r2, [pc, #700]	; (8003020 <HAL_ADC_ConfigChannel+0x650>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	f040 80fd 	bne.w	8002f64 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10b      	bne.n	8002d92 <HAL_ADC_ConfigChannel+0x3c2>
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	0e9b      	lsrs	r3, r3, #26
 8002d80:	3301      	adds	r3, #1
 8002d82:	f003 031f 	and.w	r3, r3, #31
 8002d86:	2b09      	cmp	r3, #9
 8002d88:	bf94      	ite	ls
 8002d8a:	2301      	movls	r3, #1
 8002d8c:	2300      	movhi	r3, #0
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	e012      	b.n	8002db8 <HAL_ADC_ConfigChannel+0x3e8>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d9a:	fa93 f3a3 	rbit	r3, r3
 8002d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002da2:	fab3 f383 	clz	r3, r3
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	3301      	adds	r3, #1
 8002daa:	f003 031f 	and.w	r3, r3, #31
 8002dae:	2b09      	cmp	r3, #9
 8002db0:	bf94      	ite	ls
 8002db2:	2301      	movls	r3, #1
 8002db4:	2300      	movhi	r3, #0
 8002db6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d064      	beq.n	8002e86 <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d107      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x408>
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	0e9b      	lsrs	r3, r3, #26
 8002dce:	3301      	adds	r3, #1
 8002dd0:	069b      	lsls	r3, r3, #26
 8002dd2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dd6:	e00e      	b.n	8002df6 <HAL_ADC_ConfigChannel+0x426>
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de0:	fa93 f3a3 	rbit	r3, r3
 8002de4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002de8:	fab3 f383 	clz	r3, r3
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	3301      	adds	r3, #1
 8002df0:	069b      	lsls	r3, r3, #26
 8002df2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d109      	bne.n	8002e16 <HAL_ADC_ConfigChannel+0x446>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	0e9b      	lsrs	r3, r3, #26
 8002e08:	3301      	adds	r3, #1
 8002e0a:	f003 031f 	and.w	r3, r3, #31
 8002e0e:	2101      	movs	r1, #1
 8002e10:	fa01 f303 	lsl.w	r3, r1, r3
 8002e14:	e010      	b.n	8002e38 <HAL_ADC_ConfigChannel+0x468>
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1e:	fa93 f3a3 	rbit	r3, r3
 8002e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e26:	fab3 f383 	clz	r3, r3
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	f003 031f 	and.w	r3, r3, #31
 8002e32:	2101      	movs	r1, #1
 8002e34:	fa01 f303 	lsl.w	r3, r1, r3
 8002e38:	ea42 0103 	orr.w	r1, r2, r3
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10a      	bne.n	8002e5e <HAL_ADC_ConfigChannel+0x48e>
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	0e9b      	lsrs	r3, r3, #26
 8002e4e:	3301      	adds	r3, #1
 8002e50:	f003 021f 	and.w	r2, r3, #31
 8002e54:	4613      	mov	r3, r2
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	4413      	add	r3, r2
 8002e5a:	051b      	lsls	r3, r3, #20
 8002e5c:	e011      	b.n	8002e82 <HAL_ADC_ConfigChannel+0x4b2>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e66:	fa93 f3a3 	rbit	r3, r3
 8002e6a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6e:	fab3 f383 	clz	r3, r3
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	3301      	adds	r3, #1
 8002e76:	f003 021f 	and.w	r2, r3, #31
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	4413      	add	r3, r2
 8002e80:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e82:	430b      	orrs	r3, r1
 8002e84:	e069      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d107      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x4d2>
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	0e9b      	lsrs	r3, r3, #26
 8002e98:	3301      	adds	r3, #1
 8002e9a:	069b      	lsls	r3, r3, #26
 8002e9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ea0:	e00e      	b.n	8002ec0 <HAL_ADC_ConfigChannel+0x4f0>
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
 8002eaa:	fa93 f3a3 	rbit	r3, r3
 8002eae:	61fb      	str	r3, [r7, #28]
  return result;
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	fab3 f383 	clz	r3, r3
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	3301      	adds	r3, #1
 8002eba:	069b      	lsls	r3, r3, #26
 8002ebc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d109      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x510>
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	0e9b      	lsrs	r3, r3, #26
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	f003 031f 	and.w	r3, r3, #31
 8002ed8:	2101      	movs	r1, #1
 8002eda:	fa01 f303 	lsl.w	r3, r1, r3
 8002ede:	e010      	b.n	8002f02 <HAL_ADC_ConfigChannel+0x532>
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	fa93 f3a3 	rbit	r3, r3
 8002eec:	617b      	str	r3, [r7, #20]
  return result;
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	fab3 f383 	clz	r3, r3
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	f003 031f 	and.w	r3, r3, #31
 8002efc:	2101      	movs	r1, #1
 8002efe:	fa01 f303 	lsl.w	r3, r1, r3
 8002f02:	ea42 0103 	orr.w	r1, r2, r3
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10d      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0x55e>
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	0e9b      	lsrs	r3, r3, #26
 8002f18:	3301      	adds	r3, #1
 8002f1a:	f003 021f 	and.w	r2, r3, #31
 8002f1e:	4613      	mov	r3, r2
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	4413      	add	r3, r2
 8002f24:	3b1e      	subs	r3, #30
 8002f26:	051b      	lsls	r3, r3, #20
 8002f28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f2c:	e014      	b.n	8002f58 <HAL_ADC_ConfigChannel+0x588>
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	fa93 f3a3 	rbit	r3, r3
 8002f3a:	60fb      	str	r3, [r7, #12]
  return result;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	fab3 f383 	clz	r3, r3
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	3301      	adds	r3, #1
 8002f46:	f003 021f 	and.w	r2, r3, #31
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	4413      	add	r3, r2
 8002f50:	3b1e      	subs	r3, #30
 8002f52:	051b      	lsls	r3, r3, #20
 8002f54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f58:	430b      	orrs	r3, r1
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	6892      	ldr	r2, [r2, #8]
 8002f5e:	4619      	mov	r1, r3
 8002f60:	f7ff faa2 	bl	80024a8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	4b2e      	ldr	r3, [pc, #184]	; (8003024 <HAL_ADC_ConfigChannel+0x654>)
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f000 80c9 	beq.w	8003104 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f7a:	d004      	beq.n	8002f86 <HAL_ADC_ConfigChannel+0x5b6>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a29      	ldr	r2, [pc, #164]	; (8003028 <HAL_ADC_ConfigChannel+0x658>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d101      	bne.n	8002f8a <HAL_ADC_ConfigChannel+0x5ba>
 8002f86:	4b29      	ldr	r3, [pc, #164]	; (800302c <HAL_ADC_ConfigChannel+0x65c>)
 8002f88:	e000      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x5bc>
 8002f8a:	4b29      	ldr	r3, [pc, #164]	; (8003030 <HAL_ADC_ConfigChannel+0x660>)
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff f9c3 	bl	8002318 <LL_ADC_GetCommonPathInternalCh>
 8002f92:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a26      	ldr	r2, [pc, #152]	; (8003034 <HAL_ADC_ConfigChannel+0x664>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d004      	beq.n	8002faa <HAL_ADC_ConfigChannel+0x5da>
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a24      	ldr	r2, [pc, #144]	; (8003038 <HAL_ADC_ConfigChannel+0x668>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d14e      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002faa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d148      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fbe:	d005      	beq.n	8002fcc <HAL_ADC_ConfigChannel+0x5fc>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a1d      	ldr	r2, [pc, #116]	; (800303c <HAL_ADC_ConfigChannel+0x66c>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	f040 8099 	bne.w	80030fe <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fd4:	d004      	beq.n	8002fe0 <HAL_ADC_ConfigChannel+0x610>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a13      	ldr	r2, [pc, #76]	; (8003028 <HAL_ADC_ConfigChannel+0x658>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d101      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0x614>
 8002fe0:	4a12      	ldr	r2, [pc, #72]	; (800302c <HAL_ADC_ConfigChannel+0x65c>)
 8002fe2:	e000      	b.n	8002fe6 <HAL_ADC_ConfigChannel+0x616>
 8002fe4:	4a12      	ldr	r2, [pc, #72]	; (8003030 <HAL_ADC_ConfigChannel+0x660>)
 8002fe6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fee:	4619      	mov	r1, r3
 8002ff0:	4610      	mov	r0, r2
 8002ff2:	f7ff f97e 	bl	80022f2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002ff6:	4b12      	ldr	r3, [pc, #72]	; (8003040 <HAL_ADC_ConfigChannel+0x670>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	099b      	lsrs	r3, r3, #6
 8002ffc:	4a11      	ldr	r2, [pc, #68]	; (8003044 <HAL_ADC_ConfigChannel+0x674>)
 8002ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8003002:	099a      	lsrs	r2, r3, #6
 8003004:	4613      	mov	r3, r2
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	4413      	add	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800300e:	e002      	b.n	8003016 <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	3b01      	subs	r3, #1
 8003014:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1f9      	bne.n	8003010 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800301c:	e06f      	b.n	80030fe <HAL_ADC_ConfigChannel+0x72e>
 800301e:	bf00      	nop
 8003020:	407f0000 	.word	0x407f0000
 8003024:	80080000 	.word	0x80080000
 8003028:	50000100 	.word	0x50000100
 800302c:	50000300 	.word	0x50000300
 8003030:	50000700 	.word	0x50000700
 8003034:	c3210000 	.word	0xc3210000
 8003038:	90c00010 	.word	0x90c00010
 800303c:	50000600 	.word	0x50000600
 8003040:	200003cc 	.word	0x200003cc
 8003044:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a32      	ldr	r2, [pc, #200]	; (8003118 <HAL_ADC_ConfigChannel+0x748>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d125      	bne.n	800309e <HAL_ADC_ConfigChannel+0x6ce>
 8003052:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003056:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d11f      	bne.n	800309e <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a2e      	ldr	r2, [pc, #184]	; (800311c <HAL_ADC_ConfigChannel+0x74c>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d104      	bne.n	8003072 <HAL_ADC_ConfigChannel+0x6a2>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a2c      	ldr	r2, [pc, #176]	; (8003120 <HAL_ADC_ConfigChannel+0x750>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d047      	beq.n	8003102 <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800307a:	d004      	beq.n	8003086 <HAL_ADC_ConfigChannel+0x6b6>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a26      	ldr	r2, [pc, #152]	; (800311c <HAL_ADC_ConfigChannel+0x74c>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d101      	bne.n	800308a <HAL_ADC_ConfigChannel+0x6ba>
 8003086:	4a27      	ldr	r2, [pc, #156]	; (8003124 <HAL_ADC_ConfigChannel+0x754>)
 8003088:	e000      	b.n	800308c <HAL_ADC_ConfigChannel+0x6bc>
 800308a:	4a27      	ldr	r2, [pc, #156]	; (8003128 <HAL_ADC_ConfigChannel+0x758>)
 800308c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003090:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003094:	4619      	mov	r1, r3
 8003096:	4610      	mov	r0, r2
 8003098:	f7ff f92b 	bl	80022f2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800309c:	e031      	b.n	8003102 <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a22      	ldr	r2, [pc, #136]	; (800312c <HAL_ADC_ConfigChannel+0x75c>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d12d      	bne.n	8003104 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80030a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d127      	bne.n	8003104 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a18      	ldr	r2, [pc, #96]	; (800311c <HAL_ADC_ConfigChannel+0x74c>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d022      	beq.n	8003104 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030c6:	d004      	beq.n	80030d2 <HAL_ADC_ConfigChannel+0x702>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a13      	ldr	r2, [pc, #76]	; (800311c <HAL_ADC_ConfigChannel+0x74c>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d101      	bne.n	80030d6 <HAL_ADC_ConfigChannel+0x706>
 80030d2:	4a14      	ldr	r2, [pc, #80]	; (8003124 <HAL_ADC_ConfigChannel+0x754>)
 80030d4:	e000      	b.n	80030d8 <HAL_ADC_ConfigChannel+0x708>
 80030d6:	4a14      	ldr	r2, [pc, #80]	; (8003128 <HAL_ADC_ConfigChannel+0x758>)
 80030d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030e0:	4619      	mov	r1, r3
 80030e2:	4610      	mov	r0, r2
 80030e4:	f7ff f905 	bl	80022f2 <LL_ADC_SetCommonPathInternalCh>
 80030e8:	e00c      	b.n	8003104 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ee:	f043 0220 	orr.w	r2, r3, #32
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80030fc:	e002      	b.n	8003104 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030fe:	bf00      	nop
 8003100:	e000      	b.n	8003104 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003102:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800310c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8003110:	4618      	mov	r0, r3
 8003112:	3798      	adds	r7, #152	; 0x98
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	c7520000 	.word	0xc7520000
 800311c:	50000100 	.word	0x50000100
 8003120:	50000500 	.word	0x50000500
 8003124:	50000300 	.word	0x50000300
 8003128:	50000700 	.word	0x50000700
 800312c:	cb840000 	.word	0xcb840000

08003130 <LL_ADC_IsEnabled>:
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b01      	cmp	r3, #1
 8003142:	d101      	bne.n	8003148 <LL_ADC_IsEnabled+0x18>
 8003144:	2301      	movs	r3, #1
 8003146:	e000      	b.n	800314a <LL_ADC_IsEnabled+0x1a>
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <LL_ADC_REG_IsConversionOngoing>:
{
 8003156:	b480      	push	{r7}
 8003158:	b083      	sub	sp, #12
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 0304 	and.w	r3, r3, #4
 8003166:	2b04      	cmp	r3, #4
 8003168:	d101      	bne.n	800316e <LL_ADC_REG_IsConversionOngoing+0x18>
 800316a:	2301      	movs	r3, #1
 800316c:	e000      	b.n	8003170 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800317c:	b590      	push	{r4, r7, lr}
 800317e:	b0a1      	sub	sp, #132	; 0x84
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003186:	2300      	movs	r3, #0
 8003188:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003192:	2b01      	cmp	r3, #1
 8003194:	d101      	bne.n	800319a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003196:	2302      	movs	r3, #2
 8003198:	e0e3      	b.n	8003362 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031aa:	d102      	bne.n	80031b2 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80031ac:	4b6f      	ldr	r3, [pc, #444]	; (800336c <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80031ae:	60bb      	str	r3, [r7, #8]
 80031b0:	e009      	b.n	80031c6 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a6e      	ldr	r2, [pc, #440]	; (8003370 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d102      	bne.n	80031c2 <HAL_ADCEx_MultiModeConfigChannel+0x46>
 80031bc:	4b6d      	ldr	r3, [pc, #436]	; (8003374 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80031be:	60bb      	str	r3, [r7, #8]
 80031c0:	e001      	b.n	80031c6 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80031c2:	2300      	movs	r3, #0
 80031c4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10b      	bne.n	80031e4 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d0:	f043 0220 	orr.w	r2, r3, #32
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e0be      	b.n	8003362 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff ffb5 	bl	8003156 <LL_ADC_REG_IsConversionOngoing>
 80031ec:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff ffaf 	bl	8003156 <LL_ADC_REG_IsConversionOngoing>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f040 80a0 	bne.w	8003340 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003200:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003202:	2b00      	cmp	r3, #0
 8003204:	f040 809c 	bne.w	8003340 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003210:	d004      	beq.n	800321c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a55      	ldr	r2, [pc, #340]	; (800336c <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d101      	bne.n	8003220 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 800321c:	4b56      	ldr	r3, [pc, #344]	; (8003378 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800321e:	e000      	b.n	8003222 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8003220:	4b56      	ldr	r3, [pc, #344]	; (800337c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003222:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d04b      	beq.n	80032c4 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800322c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	6859      	ldr	r1, [r3, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800323e:	035b      	lsls	r3, r3, #13
 8003240:	430b      	orrs	r3, r1
 8003242:	431a      	orrs	r2, r3
 8003244:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003246:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003250:	d004      	beq.n	800325c <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a45      	ldr	r2, [pc, #276]	; (800336c <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d10f      	bne.n	800327c <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800325c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003260:	f7ff ff66 	bl	8003130 <LL_ADC_IsEnabled>
 8003264:	4604      	mov	r4, r0
 8003266:	4841      	ldr	r0, [pc, #260]	; (800336c <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003268:	f7ff ff62 	bl	8003130 <LL_ADC_IsEnabled>
 800326c:	4603      	mov	r3, r0
 800326e:	4323      	orrs	r3, r4
 8003270:	2b00      	cmp	r3, #0
 8003272:	bf0c      	ite	eq
 8003274:	2301      	moveq	r3, #1
 8003276:	2300      	movne	r3, #0
 8003278:	b2db      	uxtb	r3, r3
 800327a:	e012      	b.n	80032a2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 800327c:	483c      	ldr	r0, [pc, #240]	; (8003370 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800327e:	f7ff ff57 	bl	8003130 <LL_ADC_IsEnabled>
 8003282:	4604      	mov	r4, r0
 8003284:	483b      	ldr	r0, [pc, #236]	; (8003374 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003286:	f7ff ff53 	bl	8003130 <LL_ADC_IsEnabled>
 800328a:	4603      	mov	r3, r0
 800328c:	431c      	orrs	r4, r3
 800328e:	483c      	ldr	r0, [pc, #240]	; (8003380 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003290:	f7ff ff4e 	bl	8003130 <LL_ADC_IsEnabled>
 8003294:	4603      	mov	r3, r0
 8003296:	4323      	orrs	r3, r4
 8003298:	2b00      	cmp	r3, #0
 800329a:	bf0c      	ite	eq
 800329c:	2301      	moveq	r3, #1
 800329e:	2300      	movne	r3, #0
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d056      	beq.n	8003354 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80032a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80032ae:	f023 030f 	bic.w	r3, r3, #15
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	6811      	ldr	r1, [r2, #0]
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	6892      	ldr	r2, [r2, #8]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	431a      	orrs	r2, r3
 80032be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032c0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032c2:	e047      	b.n	8003354 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80032c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032ce:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032d8:	d004      	beq.n	80032e4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a23      	ldr	r2, [pc, #140]	; (800336c <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d10f      	bne.n	8003304 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80032e4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80032e8:	f7ff ff22 	bl	8003130 <LL_ADC_IsEnabled>
 80032ec:	4604      	mov	r4, r0
 80032ee:	481f      	ldr	r0, [pc, #124]	; (800336c <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80032f0:	f7ff ff1e 	bl	8003130 <LL_ADC_IsEnabled>
 80032f4:	4603      	mov	r3, r0
 80032f6:	4323      	orrs	r3, r4
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	bf0c      	ite	eq
 80032fc:	2301      	moveq	r3, #1
 80032fe:	2300      	movne	r3, #0
 8003300:	b2db      	uxtb	r3, r3
 8003302:	e012      	b.n	800332a <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8003304:	481a      	ldr	r0, [pc, #104]	; (8003370 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8003306:	f7ff ff13 	bl	8003130 <LL_ADC_IsEnabled>
 800330a:	4604      	mov	r4, r0
 800330c:	4819      	ldr	r0, [pc, #100]	; (8003374 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800330e:	f7ff ff0f 	bl	8003130 <LL_ADC_IsEnabled>
 8003312:	4603      	mov	r3, r0
 8003314:	431c      	orrs	r4, r3
 8003316:	481a      	ldr	r0, [pc, #104]	; (8003380 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003318:	f7ff ff0a 	bl	8003130 <LL_ADC_IsEnabled>
 800331c:	4603      	mov	r3, r0
 800331e:	4323      	orrs	r3, r4
 8003320:	2b00      	cmp	r3, #0
 8003322:	bf0c      	ite	eq
 8003324:	2301      	moveq	r3, #1
 8003326:	2300      	movne	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d012      	beq.n	8003354 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800332e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003336:	f023 030f 	bic.w	r3, r3, #15
 800333a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800333c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800333e:	e009      	b.n	8003354 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003344:	f043 0220 	orr.w	r2, r3, #32
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003352:	e000      	b.n	8003356 <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003354:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800335e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003362:	4618      	mov	r0, r3
 8003364:	3784      	adds	r7, #132	; 0x84
 8003366:	46bd      	mov	sp, r7
 8003368:	bd90      	pop	{r4, r7, pc}
 800336a:	bf00      	nop
 800336c:	50000100 	.word	0x50000100
 8003370:	50000400 	.word	0x50000400
 8003374:	50000500 	.word	0x50000500
 8003378:	50000300 	.word	0x50000300
 800337c:	50000700 	.word	0x50000700
 8003380:	50000600 	.word	0x50000600

08003384 <LL_EXTI_EnableIT_0_31>:
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800338c:	4b05      	ldr	r3, [pc, #20]	; (80033a4 <LL_EXTI_EnableIT_0_31+0x20>)
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	4904      	ldr	r1, [pc, #16]	; (80033a4 <LL_EXTI_EnableIT_0_31+0x20>)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4313      	orrs	r3, r2
 8003396:	600b      	str	r3, [r1, #0]
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	40010400 	.word	0x40010400

080033a8 <LL_EXTI_EnableIT_32_63>:
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80033b0:	4b05      	ldr	r3, [pc, #20]	; (80033c8 <LL_EXTI_EnableIT_32_63+0x20>)
 80033b2:	6a1a      	ldr	r2, [r3, #32]
 80033b4:	4904      	ldr	r1, [pc, #16]	; (80033c8 <LL_EXTI_EnableIT_32_63+0x20>)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	620b      	str	r3, [r1, #32]
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	40010400 	.word	0x40010400

080033cc <LL_EXTI_DisableIT_0_31>:
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80033d4:	4b06      	ldr	r3, [pc, #24]	; (80033f0 <LL_EXTI_DisableIT_0_31+0x24>)
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	43db      	mvns	r3, r3
 80033dc:	4904      	ldr	r1, [pc, #16]	; (80033f0 <LL_EXTI_DisableIT_0_31+0x24>)
 80033de:	4013      	ands	r3, r2
 80033e0:	600b      	str	r3, [r1, #0]
}
 80033e2:	bf00      	nop
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	40010400 	.word	0x40010400

080033f4 <LL_EXTI_DisableIT_32_63>:
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80033fc:	4b06      	ldr	r3, [pc, #24]	; (8003418 <LL_EXTI_DisableIT_32_63+0x24>)
 80033fe:	6a1a      	ldr	r2, [r3, #32]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	43db      	mvns	r3, r3
 8003404:	4904      	ldr	r1, [pc, #16]	; (8003418 <LL_EXTI_DisableIT_32_63+0x24>)
 8003406:	4013      	ands	r3, r2
 8003408:	620b      	str	r3, [r1, #32]
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	40010400 	.word	0x40010400

0800341c <LL_EXTI_EnableEvent_0_31>:
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8003424:	4b05      	ldr	r3, [pc, #20]	; (800343c <LL_EXTI_EnableEvent_0_31+0x20>)
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	4904      	ldr	r1, [pc, #16]	; (800343c <LL_EXTI_EnableEvent_0_31+0x20>)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4313      	orrs	r3, r2
 800342e:	604b      	str	r3, [r1, #4]
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	40010400 	.word	0x40010400

08003440 <LL_EXTI_EnableEvent_32_63>:
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8003448:	4b05      	ldr	r3, [pc, #20]	; (8003460 <LL_EXTI_EnableEvent_32_63+0x20>)
 800344a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800344c:	4904      	ldr	r1, [pc, #16]	; (8003460 <LL_EXTI_EnableEvent_32_63+0x20>)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4313      	orrs	r3, r2
 8003452:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	40010400 	.word	0x40010400

08003464 <LL_EXTI_DisableEvent_0_31>:
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800346c:	4b06      	ldr	r3, [pc, #24]	; (8003488 <LL_EXTI_DisableEvent_0_31+0x24>)
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	43db      	mvns	r3, r3
 8003474:	4904      	ldr	r1, [pc, #16]	; (8003488 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003476:	4013      	ands	r3, r2
 8003478:	604b      	str	r3, [r1, #4]
}
 800347a:	bf00      	nop
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	40010400 	.word	0x40010400

0800348c <LL_EXTI_DisableEvent_32_63>:
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8003494:	4b06      	ldr	r3, [pc, #24]	; (80034b0 <LL_EXTI_DisableEvent_32_63+0x24>)
 8003496:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	43db      	mvns	r3, r3
 800349c:	4904      	ldr	r1, [pc, #16]	; (80034b0 <LL_EXTI_DisableEvent_32_63+0x24>)
 800349e:	4013      	ands	r3, r2
 80034a0:	624b      	str	r3, [r1, #36]	; 0x24
}
 80034a2:	bf00      	nop
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	40010400 	.word	0x40010400

080034b4 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80034bc:	4b05      	ldr	r3, [pc, #20]	; (80034d4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	4904      	ldr	r1, [pc, #16]	; (80034d4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	608b      	str	r3, [r1, #8]
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	40010400 	.word	0x40010400

080034d8 <LL_EXTI_EnableRisingTrig_32_63>:
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80034e0:	4b05      	ldr	r3, [pc, #20]	; (80034f8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80034e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034e4:	4904      	ldr	r1, [pc, #16]	; (80034f8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	628b      	str	r3, [r1, #40]	; 0x28
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr
 80034f8:	40010400 	.word	0x40010400

080034fc <LL_EXTI_DisableRisingTrig_0_31>:
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8003504:	4b06      	ldr	r3, [pc, #24]	; (8003520 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	43db      	mvns	r3, r3
 800350c:	4904      	ldr	r1, [pc, #16]	; (8003520 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800350e:	4013      	ands	r3, r2
 8003510:	608b      	str	r3, [r1, #8]
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	40010400 	.word	0x40010400

08003524 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800352c:	4b06      	ldr	r3, [pc, #24]	; (8003548 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800352e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	43db      	mvns	r3, r3
 8003534:	4904      	ldr	r1, [pc, #16]	; (8003548 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8003536:	4013      	ands	r3, r2
 8003538:	628b      	str	r3, [r1, #40]	; 0x28
}
 800353a:	bf00      	nop
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	40010400 	.word	0x40010400

0800354c <LL_EXTI_EnableFallingTrig_0_31>:
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8003554:	4b05      	ldr	r3, [pc, #20]	; (800356c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003556:	68da      	ldr	r2, [r3, #12]
 8003558:	4904      	ldr	r1, [pc, #16]	; (800356c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4313      	orrs	r3, r2
 800355e:	60cb      	str	r3, [r1, #12]
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	40010400 	.word	0x40010400

08003570 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8003578:	4b05      	ldr	r3, [pc, #20]	; (8003590 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800357a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800357c:	4904      	ldr	r1, [pc, #16]	; (8003590 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4313      	orrs	r3, r2
 8003582:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr
 8003590:	40010400 	.word	0x40010400

08003594 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800359c:	4b06      	ldr	r3, [pc, #24]	; (80035b8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800359e:	68da      	ldr	r2, [r3, #12]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	43db      	mvns	r3, r3
 80035a4:	4904      	ldr	r1, [pc, #16]	; (80035b8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80035a6:	4013      	ands	r3, r2
 80035a8:	60cb      	str	r3, [r1, #12]
}
 80035aa:	bf00      	nop
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	40010400 	.word	0x40010400

080035bc <LL_EXTI_DisableFallingTrig_32_63>:
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80035c4:	4b06      	ldr	r3, [pc, #24]	; (80035e0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80035c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	43db      	mvns	r3, r3
 80035cc:	4904      	ldr	r1, [pc, #16]	; (80035e0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80035ce:	4013      	ands	r3, r2
 80035d0:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80035d2:	bf00      	nop
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	40010400 	.word	0x40010400

080035e4 <LL_EXTI_ClearFlag_0_31>:
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80035ec:	4a04      	ldr	r2, [pc, #16]	; (8003600 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6153      	str	r3, [r2, #20]
}
 80035f2:	bf00      	nop
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	40010400 	.word	0x40010400

08003604 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 800360c:	4a04      	ldr	r2, [pc, #16]	; (8003620 <LL_EXTI_ClearFlag_32_63+0x1c>)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6353      	str	r3, [r2, #52]	; 0x34
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	40010400 	.word	0x40010400

08003624 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b088      	sub	sp, #32
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800362c:	2300      	movs	r3, #0
 800362e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8003630:	2300      	movs	r3, #0
 8003632:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d102      	bne.n	8003640 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	77fb      	strb	r3, [r7, #31]
 800363e:	e180      	b.n	8003942 <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800364a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800364e:	d102      	bne.n	8003656 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	77fb      	strb	r3, [r7, #31]
 8003654:	e175      	b.n	8003942 <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	7f5b      	ldrb	r3, [r3, #29]
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d108      	bne.n	8003672 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f7fd f877 	bl	8000760 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800367c:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8003698:	4313      	orrs	r3, r2
 800369a:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	4b98      	ldr	r3, [pc, #608]	; (8003904 <HAL_COMP_Init+0x2e0>)
 80036a4:	4013      	ands	r3, r2
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	6812      	ldr	r2, [r2, #0]
 80036aa:	6979      	ldr	r1, [r7, #20]
 80036ac:	430b      	orrs	r3, r1
 80036ae:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d015      	beq.n	80036ea <HAL_COMP_Init+0xc6>
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d112      	bne.n	80036ea <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80036c4:	4b90      	ldr	r3, [pc, #576]	; (8003908 <HAL_COMP_Init+0x2e4>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	099b      	lsrs	r3, r3, #6
 80036ca:	4a90      	ldr	r2, [pc, #576]	; (800390c <HAL_COMP_Init+0x2e8>)
 80036cc:	fba2 2303 	umull	r2, r3, r2, r3
 80036d0:	099a      	lsrs	r2, r3, #6
 80036d2:	4613      	mov	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80036dc:	e002      	b.n	80036e4 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	3b01      	subs	r3, #1
 80036e2:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f9      	bne.n	80036de <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a88      	ldr	r2, [pc, #544]	; (8003910 <HAL_COMP_Init+0x2ec>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d028      	beq.n	8003746 <HAL_COMP_Init+0x122>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a86      	ldr	r2, [pc, #536]	; (8003914 <HAL_COMP_Init+0x2f0>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d020      	beq.n	8003740 <HAL_COMP_Init+0x11c>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a85      	ldr	r2, [pc, #532]	; (8003918 <HAL_COMP_Init+0x2f4>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d018      	beq.n	800373a <HAL_COMP_Init+0x116>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a83      	ldr	r2, [pc, #524]	; (800391c <HAL_COMP_Init+0x2f8>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d010      	beq.n	8003734 <HAL_COMP_Init+0x110>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a82      	ldr	r2, [pc, #520]	; (8003920 <HAL_COMP_Init+0x2fc>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d008      	beq.n	800372e <HAL_COMP_Init+0x10a>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a80      	ldr	r2, [pc, #512]	; (8003924 <HAL_COMP_Init+0x300>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d101      	bne.n	800372a <HAL_COMP_Init+0x106>
 8003726:	2301      	movs	r3, #1
 8003728:	e00f      	b.n	800374a <HAL_COMP_Init+0x126>
 800372a:	2302      	movs	r3, #2
 800372c:	e00d      	b.n	800374a <HAL_COMP_Init+0x126>
 800372e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003732:	e00a      	b.n	800374a <HAL_COMP_Init+0x126>
 8003734:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003738:	e007      	b.n	800374a <HAL_COMP_Init+0x126>
 800373a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800373e:	e004      	b.n	800374a <HAL_COMP_Init+0x126>
 8003740:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003744:	e001      	b.n	800374a <HAL_COMP_Init+0x126>
 8003746:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800374a:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	f003 0303 	and.w	r3, r3, #3
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 80b6 	beq.w	80038c6 <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	f003 0310 	and.w	r3, r3, #16
 8003762:	2b00      	cmp	r3, #0
 8003764:	d011      	beq.n	800378a <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a6e      	ldr	r2, [pc, #440]	; (8003924 <HAL_COMP_Init+0x300>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d004      	beq.n	800377a <HAL_COMP_Init+0x156>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a6c      	ldr	r2, [pc, #432]	; (8003928 <HAL_COMP_Init+0x304>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d103      	bne.n	8003782 <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 800377a:	6938      	ldr	r0, [r7, #16]
 800377c:	f7ff feac 	bl	80034d8 <LL_EXTI_EnableRisingTrig_32_63>
 8003780:	e014      	b.n	80037ac <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8003782:	6938      	ldr	r0, [r7, #16]
 8003784:	f7ff fe96 	bl	80034b4 <LL_EXTI_EnableRisingTrig_0_31>
 8003788:	e010      	b.n	80037ac <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a65      	ldr	r2, [pc, #404]	; (8003924 <HAL_COMP_Init+0x300>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d004      	beq.n	800379e <HAL_COMP_Init+0x17a>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a63      	ldr	r2, [pc, #396]	; (8003928 <HAL_COMP_Init+0x304>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d103      	bne.n	80037a6 <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 800379e:	6938      	ldr	r0, [r7, #16]
 80037a0:	f7ff fec0 	bl	8003524 <LL_EXTI_DisableRisingTrig_32_63>
 80037a4:	e002      	b.n	80037ac <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80037a6:	6938      	ldr	r0, [r7, #16]
 80037a8:	f7ff fea8 	bl	80034fc <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	f003 0320 	and.w	r3, r3, #32
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d011      	beq.n	80037dc <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a59      	ldr	r2, [pc, #356]	; (8003924 <HAL_COMP_Init+0x300>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d004      	beq.n	80037cc <HAL_COMP_Init+0x1a8>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a58      	ldr	r2, [pc, #352]	; (8003928 <HAL_COMP_Init+0x304>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d103      	bne.n	80037d4 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 80037cc:	6938      	ldr	r0, [r7, #16]
 80037ce:	f7ff fecf 	bl	8003570 <LL_EXTI_EnableFallingTrig_32_63>
 80037d2:	e014      	b.n	80037fe <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80037d4:	6938      	ldr	r0, [r7, #16]
 80037d6:	f7ff feb9 	bl	800354c <LL_EXTI_EnableFallingTrig_0_31>
 80037da:	e010      	b.n	80037fe <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a50      	ldr	r2, [pc, #320]	; (8003924 <HAL_COMP_Init+0x300>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d004      	beq.n	80037f0 <HAL_COMP_Init+0x1cc>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a4f      	ldr	r2, [pc, #316]	; (8003928 <HAL_COMP_Init+0x304>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d103      	bne.n	80037f8 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 80037f0:	6938      	ldr	r0, [r7, #16]
 80037f2:	f7ff fee3 	bl	80035bc <LL_EXTI_DisableFallingTrig_32_63>
 80037f6:	e002      	b.n	80037fe <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80037f8:	6938      	ldr	r0, [r7, #16]
 80037fa:	f7ff fecb 	bl	8003594 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a48      	ldr	r2, [pc, #288]	; (8003924 <HAL_COMP_Init+0x300>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d004      	beq.n	8003812 <HAL_COMP_Init+0x1ee>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a46      	ldr	r2, [pc, #280]	; (8003928 <HAL_COMP_Init+0x304>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d103      	bne.n	800381a <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8003812:	6938      	ldr	r0, [r7, #16]
 8003814:	f7ff fef6 	bl	8003604 <LL_EXTI_ClearFlag_32_63>
 8003818:	e002      	b.n	8003820 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 800381a:	6938      	ldr	r0, [r7, #16]
 800381c:	f7ff fee2 	bl	80035e4 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d011      	beq.n	8003850 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a3c      	ldr	r2, [pc, #240]	; (8003924 <HAL_COMP_Init+0x300>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d004      	beq.n	8003840 <HAL_COMP_Init+0x21c>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a3b      	ldr	r2, [pc, #236]	; (8003928 <HAL_COMP_Init+0x304>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d103      	bne.n	8003848 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8003840:	6938      	ldr	r0, [r7, #16]
 8003842:	f7ff fdfd 	bl	8003440 <LL_EXTI_EnableEvent_32_63>
 8003846:	e014      	b.n	8003872 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8003848:	6938      	ldr	r0, [r7, #16]
 800384a:	f7ff fde7 	bl	800341c <LL_EXTI_EnableEvent_0_31>
 800384e:	e010      	b.n	8003872 <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a33      	ldr	r2, [pc, #204]	; (8003924 <HAL_COMP_Init+0x300>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d004      	beq.n	8003864 <HAL_COMP_Init+0x240>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a32      	ldr	r2, [pc, #200]	; (8003928 <HAL_COMP_Init+0x304>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d103      	bne.n	800386c <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8003864:	6938      	ldr	r0, [r7, #16]
 8003866:	f7ff fe11 	bl	800348c <LL_EXTI_DisableEvent_32_63>
 800386a:	e002      	b.n	8003872 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 800386c:	6938      	ldr	r0, [r7, #16]
 800386e:	f7ff fdf9 	bl	8003464 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b00      	cmp	r3, #0
 800387c:	d011      	beq.n	80038a2 <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a28      	ldr	r2, [pc, #160]	; (8003924 <HAL_COMP_Init+0x300>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d004      	beq.n	8003892 <HAL_COMP_Init+0x26e>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a26      	ldr	r2, [pc, #152]	; (8003928 <HAL_COMP_Init+0x304>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d103      	bne.n	800389a <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8003892:	6938      	ldr	r0, [r7, #16]
 8003894:	f7ff fd88 	bl	80033a8 <LL_EXTI_EnableIT_32_63>
 8003898:	e04b      	b.n	8003932 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 800389a:	6938      	ldr	r0, [r7, #16]
 800389c:	f7ff fd72 	bl	8003384 <LL_EXTI_EnableIT_0_31>
 80038a0:	e047      	b.n	8003932 <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a1f      	ldr	r2, [pc, #124]	; (8003924 <HAL_COMP_Init+0x300>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d004      	beq.n	80038b6 <HAL_COMP_Init+0x292>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a1d      	ldr	r2, [pc, #116]	; (8003928 <HAL_COMP_Init+0x304>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d103      	bne.n	80038be <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 80038b6:	6938      	ldr	r0, [r7, #16]
 80038b8:	f7ff fd9c 	bl	80033f4 <LL_EXTI_DisableIT_32_63>
 80038bc:	e039      	b.n	8003932 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 80038be:	6938      	ldr	r0, [r7, #16]
 80038c0:	f7ff fd84 	bl	80033cc <LL_EXTI_DisableIT_0_31>
 80038c4:	e035      	b.n	8003932 <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a16      	ldr	r2, [pc, #88]	; (8003924 <HAL_COMP_Init+0x300>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d004      	beq.n	80038da <HAL_COMP_Init+0x2b6>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a14      	ldr	r2, [pc, #80]	; (8003928 <HAL_COMP_Init+0x304>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d103      	bne.n	80038e2 <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 80038da:	6938      	ldr	r0, [r7, #16]
 80038dc:	f7ff fdd6 	bl	800348c <LL_EXTI_DisableEvent_32_63>
 80038e0:	e002      	b.n	80038e8 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80038e2:	6938      	ldr	r0, [r7, #16]
 80038e4:	f7ff fdbe 	bl	8003464 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a0d      	ldr	r2, [pc, #52]	; (8003924 <HAL_COMP_Init+0x300>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d004      	beq.n	80038fc <HAL_COMP_Init+0x2d8>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a0c      	ldr	r2, [pc, #48]	; (8003928 <HAL_COMP_Init+0x304>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d117      	bne.n	800392c <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 80038fc:	6938      	ldr	r0, [r7, #16]
 80038fe:	f7ff fd79 	bl	80033f4 <LL_EXTI_DisableIT_32_63>
 8003902:	e016      	b.n	8003932 <HAL_COMP_Init+0x30e>
 8003904:	ff007e0f 	.word	0xff007e0f
 8003908:	200003cc 	.word	0x200003cc
 800390c:	053e2d63 	.word	0x053e2d63
 8003910:	40010200 	.word	0x40010200
 8003914:	40010204 	.word	0x40010204
 8003918:	40010208 	.word	0x40010208
 800391c:	4001020c 	.word	0x4001020c
 8003920:	40010210 	.word	0x40010210
 8003924:	40010214 	.word	0x40010214
 8003928:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 800392c:	6938      	ldr	r0, [r7, #16]
 800392e:	f7ff fd4d 	bl	80033cc <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	7f5b      	ldrb	r3, [r3, #29]
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b00      	cmp	r3, #0
 800393a:	d102      	bne.n	8003942 <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8003942:	7ffb      	ldrb	r3, [r7, #31]
}
 8003944:	4618      	mov	r0, r3
 8003946:	3720      	adds	r7, #32
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <__NVIC_SetPriorityGrouping>:
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f003 0307 	and.w	r3, r3, #7
 800395a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800395c:	4b0c      	ldr	r3, [pc, #48]	; (8003990 <__NVIC_SetPriorityGrouping+0x44>)
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003968:	4013      	ands	r3, r2
 800396a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003974:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800397c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800397e:	4a04      	ldr	r2, [pc, #16]	; (8003990 <__NVIC_SetPriorityGrouping+0x44>)
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	60d3      	str	r3, [r2, #12]
}
 8003984:	bf00      	nop
 8003986:	3714      	adds	r7, #20
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr
 8003990:	e000ed00 	.word	0xe000ed00

08003994 <__NVIC_GetPriorityGrouping>:
{
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003998:	4b04      	ldr	r3, [pc, #16]	; (80039ac <__NVIC_GetPriorityGrouping+0x18>)
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	0a1b      	lsrs	r3, r3, #8
 800399e:	f003 0307 	and.w	r3, r3, #7
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr
 80039ac:	e000ed00 	.word	0xe000ed00

080039b0 <__NVIC_EnableIRQ>:
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	4603      	mov	r3, r0
 80039b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	db0b      	blt.n	80039da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039c2:	79fb      	ldrb	r3, [r7, #7]
 80039c4:	f003 021f 	and.w	r2, r3, #31
 80039c8:	4907      	ldr	r1, [pc, #28]	; (80039e8 <__NVIC_EnableIRQ+0x38>)
 80039ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ce:	095b      	lsrs	r3, r3, #5
 80039d0:	2001      	movs	r0, #1
 80039d2:	fa00 f202 	lsl.w	r2, r0, r2
 80039d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80039da:	bf00      	nop
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	e000e100 	.word	0xe000e100

080039ec <__NVIC_SetPriority>:
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	4603      	mov	r3, r0
 80039f4:	6039      	str	r1, [r7, #0]
 80039f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	db0a      	blt.n	8003a16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	b2da      	uxtb	r2, r3
 8003a04:	490c      	ldr	r1, [pc, #48]	; (8003a38 <__NVIC_SetPriority+0x4c>)
 8003a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a0a:	0112      	lsls	r2, r2, #4
 8003a0c:	b2d2      	uxtb	r2, r2
 8003a0e:	440b      	add	r3, r1
 8003a10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003a14:	e00a      	b.n	8003a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	b2da      	uxtb	r2, r3
 8003a1a:	4908      	ldr	r1, [pc, #32]	; (8003a3c <__NVIC_SetPriority+0x50>)
 8003a1c:	79fb      	ldrb	r3, [r7, #7]
 8003a1e:	f003 030f 	and.w	r3, r3, #15
 8003a22:	3b04      	subs	r3, #4
 8003a24:	0112      	lsls	r2, r2, #4
 8003a26:	b2d2      	uxtb	r2, r2
 8003a28:	440b      	add	r3, r1
 8003a2a:	761a      	strb	r2, [r3, #24]
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr
 8003a38:	e000e100 	.word	0xe000e100
 8003a3c:	e000ed00 	.word	0xe000ed00

08003a40 <NVIC_EncodePriority>:
{
 8003a40:	b480      	push	{r7}
 8003a42:	b089      	sub	sp, #36	; 0x24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	f1c3 0307 	rsb	r3, r3, #7
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	bf28      	it	cs
 8003a5e:	2304      	movcs	r3, #4
 8003a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	3304      	adds	r3, #4
 8003a66:	2b06      	cmp	r3, #6
 8003a68:	d902      	bls.n	8003a70 <NVIC_EncodePriority+0x30>
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	3b03      	subs	r3, #3
 8003a6e:	e000      	b.n	8003a72 <NVIC_EncodePriority+0x32>
 8003a70:	2300      	movs	r3, #0
 8003a72:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7e:	43da      	mvns	r2, r3
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	401a      	ands	r2, r3
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a92:	43d9      	mvns	r1, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a98:	4313      	orrs	r3, r2
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3724      	adds	r7, #36	; 0x24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
	...

08003aa8 <SysTick_Config>:
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ab8:	d301      	bcc.n	8003abe <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003aba:	2301      	movs	r3, #1
 8003abc:	e00f      	b.n	8003ade <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003abe:	4a0a      	ldr	r2, [pc, #40]	; (8003ae8 <SysTick_Config+0x40>)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ac6:	210f      	movs	r1, #15
 8003ac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003acc:	f7ff ff8e 	bl	80039ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ad0:	4b05      	ldr	r3, [pc, #20]	; (8003ae8 <SysTick_Config+0x40>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ad6:	4b04      	ldr	r3, [pc, #16]	; (8003ae8 <SysTick_Config+0x40>)
 8003ad8:	2207      	movs	r2, #7
 8003ada:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	e000e010 	.word	0xe000e010

08003aec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f7ff ff29 	bl	800394c <__NVIC_SetPriorityGrouping>
}
 8003afa:	bf00      	nop
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b086      	sub	sp, #24
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	4603      	mov	r3, r0
 8003b0a:	60b9      	str	r1, [r7, #8]
 8003b0c:	607a      	str	r2, [r7, #4]
 8003b0e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b10:	f7ff ff40 	bl	8003994 <__NVIC_GetPriorityGrouping>
 8003b14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	68b9      	ldr	r1, [r7, #8]
 8003b1a:	6978      	ldr	r0, [r7, #20]
 8003b1c:	f7ff ff90 	bl	8003a40 <NVIC_EncodePriority>
 8003b20:	4602      	mov	r2, r0
 8003b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b26:	4611      	mov	r1, r2
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff ff5f 	bl	80039ec <__NVIC_SetPriority>
}
 8003b2e:	bf00      	nop
 8003b30:	3718      	adds	r7, #24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b082      	sub	sp, #8
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7ff ff33 	bl	80039b0 <__NVIC_EnableIRQ>
}
 8003b4a:	bf00      	nop
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b082      	sub	sp, #8
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7ff ffa4 	bl	8003aa8 <SysTick_Config>
 8003b60:	4603      	mov	r3, r0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b082      	sub	sp, #8
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e014      	b.n	8003ba6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	791b      	ldrb	r3, [r3, #4]
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d105      	bne.n	8003b92 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f7fc fe9d 	bl	80008cc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2202      	movs	r2, #2
 8003b96:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b082      	sub	sp, #8
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
 8003bb6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	795b      	ldrb	r3, [r3, #5]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d101      	bne.n	8003bc4 <HAL_DAC_Start+0x16>
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	e043      	b.n	8003c4c <HAL_DAC_Start+0x9e>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2202      	movs	r2, #2
 8003bce:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6819      	ldr	r1, [r3, #0]
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	f003 0310 	and.w	r3, r3, #16
 8003bdc:	2201      	movs	r2, #1
 8003bde:	409a      	lsls	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8003be8:	2001      	movs	r0, #1
 8003bea:	f7fe fb4d 	bl	8002288 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d10f      	bne.n	8003c14 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d11d      	bne.n	8003c3e <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f042 0201 	orr.w	r2, r2, #1
 8003c10:	605a      	str	r2, [r3, #4]
 8003c12:	e014      	b.n	8003c3e <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	f003 0310 	and.w	r3, r3, #16
 8003c24:	2102      	movs	r1, #2
 8003c26:	fa01 f303 	lsl.w	r3, r1, r3
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d107      	bne.n	8003c3e <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f042 0202 	orr.w	r2, r2, #2
 8003c3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3708      	adds	r7, #8
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b086      	sub	sp, #24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
 8003c60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8003c62:	2300      	movs	r3, #0
 8003c64:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	795b      	ldrb	r3, [r3, #5]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d101      	bne.n	8003c72 <HAL_DAC_Start_DMA+0x1e>
 8003c6e:	2302      	movs	r3, #2
 8003c70:	e0a1      	b.n	8003db6 <HAL_DAC_Start_DMA+0x162>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2201      	movs	r2, #1
 8003c76:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d12a      	bne.n	8003cda <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	4a4d      	ldr	r2, [pc, #308]	; (8003dc0 <HAL_DAC_Start_DMA+0x16c>)
 8003c8a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	4a4c      	ldr	r2, [pc, #304]	; (8003dc4 <HAL_DAC_Start_DMA+0x170>)
 8003c92:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	4a4b      	ldr	r2, [pc, #300]	; (8003dc8 <HAL_DAC_Start_DMA+0x174>)
 8003c9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003caa:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003cac:	6a3b      	ldr	r3, [r7, #32]
 8003cae:	2b04      	cmp	r3, #4
 8003cb0:	d009      	beq.n	8003cc6 <HAL_DAC_Start_DMA+0x72>
 8003cb2:	2b08      	cmp	r3, #8
 8003cb4:	d00c      	beq.n	8003cd0 <HAL_DAC_Start_DMA+0x7c>
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d000      	beq.n	8003cbc <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003cba:	e039      	b.n	8003d30 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	3308      	adds	r3, #8
 8003cc2:	613b      	str	r3, [r7, #16]
        break;
 8003cc4:	e034      	b.n	8003d30 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	330c      	adds	r3, #12
 8003ccc:	613b      	str	r3, [r7, #16]
        break;
 8003cce:	e02f      	b.n	8003d30 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	3310      	adds	r3, #16
 8003cd6:	613b      	str	r3, [r7, #16]
        break;
 8003cd8:	e02a      	b.n	8003d30 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	4a3b      	ldr	r2, [pc, #236]	; (8003dcc <HAL_DAC_Start_DMA+0x178>)
 8003ce0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	4a3a      	ldr	r2, [pc, #232]	; (8003dd0 <HAL_DAC_Start_DMA+0x17c>)
 8003ce8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	4a39      	ldr	r2, [pc, #228]	; (8003dd4 <HAL_DAC_Start_DMA+0x180>)
 8003cf0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003d00:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003d02:	6a3b      	ldr	r3, [r7, #32]
 8003d04:	2b04      	cmp	r3, #4
 8003d06:	d009      	beq.n	8003d1c <HAL_DAC_Start_DMA+0xc8>
 8003d08:	2b08      	cmp	r3, #8
 8003d0a:	d00c      	beq.n	8003d26 <HAL_DAC_Start_DMA+0xd2>
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d000      	beq.n	8003d12 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003d10:	e00e      	b.n	8003d30 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	3314      	adds	r3, #20
 8003d18:	613b      	str	r3, [r7, #16]
        break;
 8003d1a:	e009      	b.n	8003d30 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	3318      	adds	r3, #24
 8003d22:	613b      	str	r3, [r7, #16]
        break;
 8003d24:	e004      	b.n	8003d30 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	331c      	adds	r3, #28
 8003d2c:	613b      	str	r3, [r7, #16]
        break;
 8003d2e:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d111      	bne.n	8003d5a <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d44:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6898      	ldr	r0, [r3, #8]
 8003d4a:	6879      	ldr	r1, [r7, #4]
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	f000 fb66 	bl	8004420 <HAL_DMA_Start_IT>
 8003d54:	4603      	mov	r3, r0
 8003d56:	75fb      	strb	r3, [r7, #23]
 8003d58:	e010      	b.n	8003d7c <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003d68:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	68d8      	ldr	r0, [r3, #12]
 8003d6e:	6879      	ldr	r1, [r7, #4]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	f000 fb54 	bl	8004420 <HAL_DMA_Start_IT>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003d82:	7dfb      	ldrb	r3, [r7, #23]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10f      	bne.n	8003da8 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6819      	ldr	r1, [r3, #0]
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	f003 0310 	and.w	r3, r3, #16
 8003d94:	2201      	movs	r2, #1
 8003d96:	409a      	lsls	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8003da0:	2001      	movs	r0, #1
 8003da2:	f7fe fa71 	bl	8002288 <HAL_Delay>
 8003da6:	e005      	b.n	8003db4 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	f043 0204 	orr.w	r2, r3, #4
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003db4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3718      	adds	r7, #24
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	080041bd 	.word	0x080041bd
 8003dc4:	080041df 	.word	0x080041df
 8003dc8:	080041fb 	.word	0x080041fb
 8003dcc:	08004265 	.word	0x08004265
 8003dd0:	08004287 	.word	0x08004287
 8003dd4:	080042a3 	.word	0x080042a3

08003dd8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b087      	sub	sp, #28
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
 8003de4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8003de6:	2300      	movs	r3, #0
 8003de8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d105      	bne.n	8003e08 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4413      	add	r3, r2
 8003e02:	3308      	adds	r3, #8
 8003e04:	617b      	str	r3, [r7, #20]
 8003e06:	e004      	b.n	8003e12 <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	3314      	adds	r3, #20
 8003e10:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	461a      	mov	r2, r3
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	371c      	adds	r7, #28
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b08a      	sub	sp, #40	; 0x28
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003e70:	2300      	movs	r3, #0
 8003e72:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	795b      	ldrb	r3, [r3, #5]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d101      	bne.n	8003e80 <HAL_DAC_ConfigChannel+0x1c>
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	e194      	b.n	80041aa <HAL_DAC_ConfigChannel+0x346>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2201      	movs	r2, #1
 8003e84:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2202      	movs	r2, #2
 8003e8a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	2b04      	cmp	r3, #4
 8003e92:	d174      	bne.n	8003f7e <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d137      	bne.n	8003f0a <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8003e9a:	f7fe f9e9 	bl	8002270 <HAL_GetTick>
 8003e9e:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003ea0:	e011      	b.n	8003ec6 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003ea2:	f7fe f9e5 	bl	8002270 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d90a      	bls.n	8003ec6 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	f043 0208 	orr.w	r2, r3, #8
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2203      	movs	r2, #3
 8003ec0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e171      	b.n	80041aa <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ecc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d1e6      	bne.n	8003ea2 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8003ed4:	2001      	movs	r0, #1
 8003ed6:	f7fe f9d7 	bl	8002288 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ee2:	641a      	str	r2, [r3, #64]	; 0x40
 8003ee4:	e01e      	b.n	8003f24 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003ee6:	f7fe f9c3 	bl	8002270 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d90a      	bls.n	8003f0a <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	f043 0208 	orr.w	r2, r3, #8
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2203      	movs	r2, #3
 8003f04:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e14f      	b.n	80041aa <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	dbe8      	blt.n	8003ee6 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8003f14:	2001      	movs	r0, #1
 8003f16:	f7fe f9b7 	bl	8002288 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f22:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f003 0310 	and.w	r3, r3, #16
 8003f30:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003f34:	fa01 f303 	lsl.w	r3, r1, r3
 8003f38:	43db      	mvns	r3, r3
 8003f3a:	ea02 0103 	and.w	r1, r2, r3
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f003 0310 	and.w	r3, r3, #16
 8003f48:	409a      	lsls	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f003 0310 	and.w	r3, r3, #16
 8003f5e:	21ff      	movs	r1, #255	; 0xff
 8003f60:	fa01 f303 	lsl.w	r3, r1, r3
 8003f64:	43db      	mvns	r3, r3
 8003f66:	ea02 0103 	and.w	r1, r2, r3
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f003 0310 	and.w	r3, r3, #16
 8003f74:	409a      	lsls	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d11d      	bne.n	8003fc2 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f003 0310 	and.w	r3, r3, #16
 8003f94:	221f      	movs	r2, #31
 8003f96:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9a:	43db      	mvns	r3, r3
 8003f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f003 0310 	and.w	r3, r3, #16
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fc0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f003 0310 	and.w	r3, r3, #16
 8003fd0:	2207      	movs	r2, #7
 8003fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd6:	43db      	mvns	r3, r3
 8003fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fda:	4013      	ands	r3, r2
 8003fdc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d002      	beq.n	8003ff0 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 8003fea:	2300      	movs	r3, #0
 8003fec:	623b      	str	r3, [r7, #32]
 8003fee:	e011      	b.n	8004014 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d002      	beq.n	8004002 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	623b      	str	r3, [r7, #32]
 8004000:	e008      	b.n	8004014 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d102      	bne.n	8004010 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800400a:	2301      	movs	r3, #1
 800400c:	623b      	str	r3, [r7, #32]
 800400e:	e001      	b.n	8004014 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004010:	2300      	movs	r3, #0
 8004012:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	689a      	ldr	r2, [r3, #8]
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	695b      	ldr	r3, [r3, #20]
 800401c:	4313      	orrs	r3, r2
 800401e:	6a3a      	ldr	r2, [r7, #32]
 8004020:	4313      	orrs	r3, r2
 8004022:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f003 0310 	and.w	r3, r3, #16
 800402a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800402e:	fa02 f303 	lsl.w	r3, r2, r3
 8004032:	43db      	mvns	r3, r3
 8004034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004036:	4013      	ands	r3, r2
 8004038:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	791b      	ldrb	r3, [r3, #4]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d102      	bne.n	8004048 <HAL_DAC_ConfigChannel+0x1e4>
 8004042:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004046:	e000      	b.n	800404a <HAL_DAC_ConfigChannel+0x1e6>
 8004048:	2300      	movs	r3, #0
 800404a:	69ba      	ldr	r2, [r7, #24]
 800404c:	4313      	orrs	r3, r2
 800404e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f003 0310 	and.w	r3, r3, #16
 8004056:	f44f 7200 	mov.w	r2, #512	; 0x200
 800405a:	fa02 f303 	lsl.w	r3, r2, r3
 800405e:	43db      	mvns	r3, r3
 8004060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004062:	4013      	ands	r3, r2
 8004064:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	795b      	ldrb	r3, [r3, #5]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d102      	bne.n	8004074 <HAL_DAC_ConfigChannel+0x210>
 800406e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004072:	e000      	b.n	8004076 <HAL_DAC_ConfigChannel+0x212>
 8004074:	2300      	movs	r3, #0
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	4313      	orrs	r3, r2
 800407a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004082:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2b02      	cmp	r3, #2
 800408a:	d114      	bne.n	80040b6 <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800408c:	f001 fa9e 	bl	80055cc <HAL_RCC_GetHCLKFreq>
 8004090:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	4a47      	ldr	r2, [pc, #284]	; (80041b4 <HAL_DAC_ConfigChannel+0x350>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d904      	bls.n	80040a4 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040a0:	627b      	str	r3, [r7, #36]	; 0x24
 80040a2:	e00d      	b.n	80040c0 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	4a44      	ldr	r2, [pc, #272]	; (80041b8 <HAL_DAC_ConfigChannel+0x354>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d909      	bls.n	80040c0 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040b2:	627b      	str	r3, [r7, #36]	; 0x24
 80040b4:	e004      	b.n	80040c0 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040bc:	4313      	orrs	r3, r2
 80040be:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f003 0310 	and.w	r3, r3, #16
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ce:	4313      	orrs	r3, r2
 80040d0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6819      	ldr	r1, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f003 0310 	and.w	r3, r3, #16
 80040e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80040ea:	fa02 f303 	lsl.w	r3, r2, r3
 80040ee:	43da      	mvns	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	400a      	ands	r2, r1
 80040f6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f003 0310 	and.w	r3, r3, #16
 8004106:	f640 72fe 	movw	r2, #4094	; 0xffe
 800410a:	fa02 f303 	lsl.w	r3, r2, r3
 800410e:	43db      	mvns	r3, r3
 8004110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004112:	4013      	ands	r3, r2
 8004114:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f003 0310 	and.w	r3, r3, #16
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800412a:	4313      	orrs	r3, r2
 800412c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004134:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6819      	ldr	r1, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f003 0310 	and.w	r3, r3, #16
 8004142:	22c0      	movs	r2, #192	; 0xc0
 8004144:	fa02 f303 	lsl.w	r3, r2, r3
 8004148:	43da      	mvns	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	400a      	ands	r2, r1
 8004150:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	089b      	lsrs	r3, r3, #2
 8004158:	f003 030f 	and.w	r3, r3, #15
 800415c:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	089b      	lsrs	r3, r3, #2
 8004164:	021b      	lsls	r3, r3, #8
 8004166:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800416a:	69ba      	ldr	r2, [r7, #24]
 800416c:	4313      	orrs	r3, r2
 800416e:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f003 0310 	and.w	r3, r3, #16
 800417c:	f640 710f 	movw	r1, #3855	; 0xf0f
 8004180:	fa01 f303 	lsl.w	r3, r1, r3
 8004184:	43db      	mvns	r3, r3
 8004186:	ea02 0103 	and.w	r1, r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f003 0310 	and.w	r3, r3, #16
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	409a      	lsls	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	430a      	orrs	r2, r1
 800419a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2201      	movs	r2, #1
 80041a0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3728      	adds	r7, #40	; 0x28
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	09896800 	.word	0x09896800
 80041b8:	04c4b400 	.word	0x04c4b400

080041bc <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f7ff fe2c 	bl	8003e28 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2201      	movs	r2, #1
 80041d4:	711a      	strb	r2, [r3, #4]
}
 80041d6:	bf00      	nop
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b084      	sub	sp, #16
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ea:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f7ff fe25 	bl	8003e3c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80041f2:	bf00      	nop
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b084      	sub	sp, #16
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004206:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	f043 0204 	orr.w	r2, r3, #4
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f7ff fe1b 	bl	8003e50 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2201      	movs	r2, #1
 800421e:	711a      	strb	r2, [r3, #4]
}
 8004220:	bf00      	nop
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004270:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f7ff ffd8 	bl	8004228 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2201      	movs	r2, #1
 800427c:	711a      	strb	r2, [r3, #4]
}
 800427e:	bf00      	nop
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b084      	sub	sp, #16
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004292:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f7ff ffd1 	bl	800423c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800429a:	bf00      	nop
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b084      	sub	sp, #16
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ae:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	f043 0204 	orr.w	r2, r3, #4
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f7ff ffc7 	bl	8004250 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2201      	movs	r2, #1
 80042c6:	711a      	strb	r2, [r3, #4]
}
 80042c8:	bf00      	nop
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e08d      	b.n	80043fe <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	461a      	mov	r2, r3
 80042e8:	4b47      	ldr	r3, [pc, #284]	; (8004408 <HAL_DMA_Init+0x138>)
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d80f      	bhi.n	800430e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	461a      	mov	r2, r3
 80042f4:	4b45      	ldr	r3, [pc, #276]	; (800440c <HAL_DMA_Init+0x13c>)
 80042f6:	4413      	add	r3, r2
 80042f8:	4a45      	ldr	r2, [pc, #276]	; (8004410 <HAL_DMA_Init+0x140>)
 80042fa:	fba2 2303 	umull	r2, r3, r2, r3
 80042fe:	091b      	lsrs	r3, r3, #4
 8004300:	009a      	lsls	r2, r3, #2
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a42      	ldr	r2, [pc, #264]	; (8004414 <HAL_DMA_Init+0x144>)
 800430a:	641a      	str	r2, [r3, #64]	; 0x40
 800430c:	e00e      	b.n	800432c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	461a      	mov	r2, r3
 8004314:	4b40      	ldr	r3, [pc, #256]	; (8004418 <HAL_DMA_Init+0x148>)
 8004316:	4413      	add	r3, r2
 8004318:	4a3d      	ldr	r2, [pc, #244]	; (8004410 <HAL_DMA_Init+0x140>)
 800431a:	fba2 2303 	umull	r2, r3, r2, r3
 800431e:	091b      	lsrs	r3, r3, #4
 8004320:	009a      	lsls	r2, r3, #2
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a3c      	ldr	r2, [pc, #240]	; (800441c <HAL_DMA_Init+0x14c>)
 800432a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2202      	movs	r2, #2
 8004330:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004346:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004350:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800435c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004368:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	4313      	orrs	r3, r2
 8004374:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f9b6 	bl	80046f0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800438c:	d102      	bne.n	8004394 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800439c:	b2d2      	uxtb	r2, r2
 800439e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80043a8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d010      	beq.n	80043d4 <HAL_DMA_Init+0x104>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	2b04      	cmp	r3, #4
 80043b8:	d80c      	bhi.n	80043d4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 f9d6 	bl	800476c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c4:	2200      	movs	r2, #0
 80043c6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80043d0:	605a      	str	r2, [r3, #4]
 80043d2:	e008      	b.n	80043e6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	40020407 	.word	0x40020407
 800440c:	bffdfff8 	.word	0xbffdfff8
 8004410:	cccccccd 	.word	0xcccccccd
 8004414:	40020000 	.word	0x40020000
 8004418:	bffdfbf8 	.word	0xbffdfbf8
 800441c:	40020400 	.word	0x40020400

08004420 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
 800442c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800442e:	2300      	movs	r3, #0
 8004430:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004438:	2b01      	cmp	r3, #1
 800443a:	d101      	bne.n	8004440 <HAL_DMA_Start_IT+0x20>
 800443c:	2302      	movs	r3, #2
 800443e:	e066      	b.n	800450e <HAL_DMA_Start_IT+0xee>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b01      	cmp	r3, #1
 8004452:	d155      	bne.n	8004500 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2202      	movs	r2, #2
 8004458:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 0201 	bic.w	r2, r2, #1
 8004470:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	68b9      	ldr	r1, [r7, #8]
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f000 f8fb 	bl	8004674 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004482:	2b00      	cmp	r3, #0
 8004484:	d008      	beq.n	8004498 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f042 020e 	orr.w	r2, r2, #14
 8004494:	601a      	str	r2, [r3, #0]
 8004496:	e00f      	b.n	80044b8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 0204 	bic.w	r2, r2, #4
 80044a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f042 020a 	orr.w	r2, r2, #10
 80044b6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d007      	beq.n	80044d6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044d4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d007      	beq.n	80044ee <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044ec:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f042 0201 	orr.w	r2, r2, #1
 80044fc:	601a      	str	r2, [r3, #0]
 80044fe:	e005      	b.n	800450c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004508:	2302      	movs	r3, #2
 800450a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800450c:	7dfb      	ldrb	r3, [r7, #23]
}
 800450e:	4618      	mov	r0, r3
 8004510:	3718      	adds	r7, #24
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b084      	sub	sp, #16
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004532:	f003 031f 	and.w	r3, r3, #31
 8004536:	2204      	movs	r2, #4
 8004538:	409a      	lsls	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	4013      	ands	r3, r2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d026      	beq.n	8004590 <HAL_DMA_IRQHandler+0x7a>
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	f003 0304 	and.w	r3, r3, #4
 8004548:	2b00      	cmp	r3, #0
 800454a:	d021      	beq.n	8004590 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0320 	and.w	r3, r3, #32
 8004556:	2b00      	cmp	r3, #0
 8004558:	d107      	bne.n	800456a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f022 0204 	bic.w	r2, r2, #4
 8004568:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456e:	f003 021f 	and.w	r2, r3, #31
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	2104      	movs	r1, #4
 8004578:	fa01 f202 	lsl.w	r2, r1, r2
 800457c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004582:	2b00      	cmp	r3, #0
 8004584:	d071      	beq.n	800466a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800458e:	e06c      	b.n	800466a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004594:	f003 031f 	and.w	r3, r3, #31
 8004598:	2202      	movs	r2, #2
 800459a:	409a      	lsls	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4013      	ands	r3, r2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d02e      	beq.n	8004602 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d029      	beq.n	8004602 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0320 	and.w	r3, r3, #32
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10b      	bne.n	80045d4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 020a 	bic.w	r2, r2, #10
 80045ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d8:	f003 021f 	and.w	r2, r3, #31
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e0:	2102      	movs	r1, #2
 80045e2:	fa01 f202 	lsl.w	r2, r1, r2
 80045e6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d038      	beq.n	800466a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004600:	e033      	b.n	800466a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004606:	f003 031f 	and.w	r3, r3, #31
 800460a:	2208      	movs	r2, #8
 800460c:	409a      	lsls	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	4013      	ands	r3, r2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d02a      	beq.n	800466c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	f003 0308 	and.w	r3, r3, #8
 800461c:	2b00      	cmp	r3, #0
 800461e:	d025      	beq.n	800466c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 020e 	bic.w	r2, r2, #14
 800462e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004634:	f003 021f 	and.w	r2, r3, #31
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463c:	2101      	movs	r1, #1
 800463e:	fa01 f202 	lsl.w	r2, r1, r2
 8004642:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800465e:	2b00      	cmp	r3, #0
 8004660:	d004      	beq.n	800466c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800466a:	bf00      	nop
 800466c:	bf00      	nop
}
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
 8004680:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800468a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004690:	2b00      	cmp	r3, #0
 8004692:	d004      	beq.n	800469e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800469c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a2:	f003 021f 	and.w	r2, r3, #31
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046aa:	2101      	movs	r1, #1
 80046ac:	fa01 f202 	lsl.w	r2, r1, r2
 80046b0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	2b10      	cmp	r3, #16
 80046c0:	d108      	bne.n	80046d4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68ba      	ldr	r2, [r7, #8]
 80046d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80046d2:	e007      	b.n	80046e4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	60da      	str	r2, [r3, #12]
}
 80046e4:	bf00      	nop
 80046e6:	3714      	adds	r7, #20
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b087      	sub	sp, #28
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	461a      	mov	r2, r3
 80046fe:	4b16      	ldr	r3, [pc, #88]	; (8004758 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004700:	429a      	cmp	r2, r3
 8004702:	d802      	bhi.n	800470a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004704:	4b15      	ldr	r3, [pc, #84]	; (800475c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004706:	617b      	str	r3, [r7, #20]
 8004708:	e001      	b.n	800470e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800470a:	4b15      	ldr	r3, [pc, #84]	; (8004760 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800470c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	b2db      	uxtb	r3, r3
 8004718:	3b08      	subs	r3, #8
 800471a:	4a12      	ldr	r2, [pc, #72]	; (8004764 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800471c:	fba2 2303 	umull	r2, r3, r2, r3
 8004720:	091b      	lsrs	r3, r3, #4
 8004722:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004728:	089b      	lsrs	r3, r3, #2
 800472a:	009a      	lsls	r2, r3, #2
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	4413      	add	r3, r2
 8004730:	461a      	mov	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a0b      	ldr	r2, [pc, #44]	; (8004768 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800473a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f003 031f 	and.w	r3, r3, #31
 8004742:	2201      	movs	r2, #1
 8004744:	409a      	lsls	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	651a      	str	r2, [r3, #80]	; 0x50
}
 800474a:	bf00      	nop
 800474c:	371c      	adds	r7, #28
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	40020407 	.word	0x40020407
 800475c:	40020800 	.word	0x40020800
 8004760:	40020820 	.word	0x40020820
 8004764:	cccccccd 	.word	0xcccccccd
 8004768:	40020880 	.word	0x40020880

0800476c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	b2db      	uxtb	r3, r3
 800477a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	4b0b      	ldr	r3, [pc, #44]	; (80047ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004780:	4413      	add	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	461a      	mov	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a08      	ldr	r2, [pc, #32]	; (80047b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800478e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	3b01      	subs	r3, #1
 8004794:	f003 031f 	and.w	r3, r3, #31
 8004798:	2201      	movs	r2, #1
 800479a:	409a      	lsls	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80047a0:	bf00      	nop
 80047a2:	3714      	adds	r7, #20
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	1000823f 	.word	0x1000823f
 80047b0:	40020940 	.word	0x40020940

080047b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b087      	sub	sp, #28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80047be:	2300      	movs	r3, #0
 80047c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80047c2:	e15a      	b.n	8004a7a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	2101      	movs	r1, #1
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	fa01 f303 	lsl.w	r3, r1, r3
 80047d0:	4013      	ands	r3, r2
 80047d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f000 814c 	beq.w	8004a74 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d00b      	beq.n	80047fc <HAL_GPIO_Init+0x48>
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d007      	beq.n	80047fc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80047f0:	2b11      	cmp	r3, #17
 80047f2:	d003      	beq.n	80047fc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	2b12      	cmp	r3, #18
 80047fa:	d130      	bne.n	800485e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	005b      	lsls	r3, r3, #1
 8004806:	2203      	movs	r2, #3
 8004808:	fa02 f303 	lsl.w	r3, r2, r3
 800480c:	43db      	mvns	r3, r3
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	4013      	ands	r3, r2
 8004812:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	68da      	ldr	r2, [r3, #12]
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	005b      	lsls	r3, r3, #1
 800481c:	fa02 f303 	lsl.w	r3, r2, r3
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	4313      	orrs	r3, r2
 8004824:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004832:	2201      	movs	r2, #1
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	fa02 f303 	lsl.w	r3, r2, r3
 800483a:	43db      	mvns	r3, r3
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	4013      	ands	r3, r2
 8004840:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	091b      	lsrs	r3, r3, #4
 8004848:	f003 0201 	and.w	r2, r3, #1
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	fa02 f303 	lsl.w	r3, r2, r3
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	4313      	orrs	r3, r2
 8004856:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	005b      	lsls	r3, r3, #1
 8004868:	2203      	movs	r2, #3
 800486a:	fa02 f303 	lsl.w	r3, r2, r3
 800486e:	43db      	mvns	r3, r3
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	4013      	ands	r3, r2
 8004874:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	689a      	ldr	r2, [r3, #8]
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	005b      	lsls	r3, r3, #1
 800487e:	fa02 f303 	lsl.w	r3, r2, r3
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	4313      	orrs	r3, r2
 8004886:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	2b02      	cmp	r3, #2
 8004894:	d003      	beq.n	800489e <HAL_GPIO_Init+0xea>
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	2b12      	cmp	r3, #18
 800489c:	d123      	bne.n	80048e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	08da      	lsrs	r2, r3, #3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	3208      	adds	r2, #8
 80048a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	f003 0307 	and.w	r3, r3, #7
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	220f      	movs	r2, #15
 80048b6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ba:	43db      	mvns	r3, r3
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	4013      	ands	r3, r2
 80048c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	691a      	ldr	r2, [r3, #16]
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f003 0307 	and.w	r3, r3, #7
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	fa02 f303 	lsl.w	r3, r2, r3
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	08da      	lsrs	r2, r3, #3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	3208      	adds	r2, #8
 80048e0:	6939      	ldr	r1, [r7, #16]
 80048e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	005b      	lsls	r3, r3, #1
 80048f0:	2203      	movs	r2, #3
 80048f2:	fa02 f303 	lsl.w	r3, r2, r3
 80048f6:	43db      	mvns	r3, r3
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	4013      	ands	r3, r2
 80048fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f003 0203 	and.w	r2, r3, #3
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	005b      	lsls	r3, r3, #1
 800490a:	fa02 f303 	lsl.w	r3, r2, r3
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	4313      	orrs	r3, r2
 8004912:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004922:	2b00      	cmp	r3, #0
 8004924:	f000 80a6 	beq.w	8004a74 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004928:	4b5b      	ldr	r3, [pc, #364]	; (8004a98 <HAL_GPIO_Init+0x2e4>)
 800492a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800492c:	4a5a      	ldr	r2, [pc, #360]	; (8004a98 <HAL_GPIO_Init+0x2e4>)
 800492e:	f043 0301 	orr.w	r3, r3, #1
 8004932:	6613      	str	r3, [r2, #96]	; 0x60
 8004934:	4b58      	ldr	r3, [pc, #352]	; (8004a98 <HAL_GPIO_Init+0x2e4>)
 8004936:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	60bb      	str	r3, [r7, #8]
 800493e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004940:	4a56      	ldr	r2, [pc, #344]	; (8004a9c <HAL_GPIO_Init+0x2e8>)
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	089b      	lsrs	r3, r3, #2
 8004946:	3302      	adds	r3, #2
 8004948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800494c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	f003 0303 	and.w	r3, r3, #3
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	220f      	movs	r2, #15
 8004958:	fa02 f303 	lsl.w	r3, r2, r3
 800495c:	43db      	mvns	r3, r3
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	4013      	ands	r3, r2
 8004962:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800496a:	d01f      	beq.n	80049ac <HAL_GPIO_Init+0x1f8>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a4c      	ldr	r2, [pc, #304]	; (8004aa0 <HAL_GPIO_Init+0x2ec>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d019      	beq.n	80049a8 <HAL_GPIO_Init+0x1f4>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a4b      	ldr	r2, [pc, #300]	; (8004aa4 <HAL_GPIO_Init+0x2f0>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d013      	beq.n	80049a4 <HAL_GPIO_Init+0x1f0>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a4a      	ldr	r2, [pc, #296]	; (8004aa8 <HAL_GPIO_Init+0x2f4>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d00d      	beq.n	80049a0 <HAL_GPIO_Init+0x1ec>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a49      	ldr	r2, [pc, #292]	; (8004aac <HAL_GPIO_Init+0x2f8>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d007      	beq.n	800499c <HAL_GPIO_Init+0x1e8>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a48      	ldr	r2, [pc, #288]	; (8004ab0 <HAL_GPIO_Init+0x2fc>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d101      	bne.n	8004998 <HAL_GPIO_Init+0x1e4>
 8004994:	2305      	movs	r3, #5
 8004996:	e00a      	b.n	80049ae <HAL_GPIO_Init+0x1fa>
 8004998:	2306      	movs	r3, #6
 800499a:	e008      	b.n	80049ae <HAL_GPIO_Init+0x1fa>
 800499c:	2304      	movs	r3, #4
 800499e:	e006      	b.n	80049ae <HAL_GPIO_Init+0x1fa>
 80049a0:	2303      	movs	r3, #3
 80049a2:	e004      	b.n	80049ae <HAL_GPIO_Init+0x1fa>
 80049a4:	2302      	movs	r3, #2
 80049a6:	e002      	b.n	80049ae <HAL_GPIO_Init+0x1fa>
 80049a8:	2301      	movs	r3, #1
 80049aa:	e000      	b.n	80049ae <HAL_GPIO_Init+0x1fa>
 80049ac:	2300      	movs	r3, #0
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	f002 0203 	and.w	r2, r2, #3
 80049b4:	0092      	lsls	r2, r2, #2
 80049b6:	4093      	lsls	r3, r2
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049be:	4937      	ldr	r1, [pc, #220]	; (8004a9c <HAL_GPIO_Init+0x2e8>)
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	089b      	lsrs	r3, r3, #2
 80049c4:	3302      	adds	r3, #2
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80049cc:	4b39      	ldr	r3, [pc, #228]	; (8004ab4 <HAL_GPIO_Init+0x300>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	43db      	mvns	r3, r3
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	4013      	ands	r3, r2
 80049da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d003      	beq.n	80049f0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80049f0:	4a30      	ldr	r2, [pc, #192]	; (8004ab4 <HAL_GPIO_Init+0x300>)
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80049f6:	4b2f      	ldr	r3, [pc, #188]	; (8004ab4 <HAL_GPIO_Init+0x300>)
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	43db      	mvns	r3, r3
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	4013      	ands	r3, r2
 8004a04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004a1a:	4a26      	ldr	r2, [pc, #152]	; (8004ab4 <HAL_GPIO_Init+0x300>)
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a20:	4b24      	ldr	r3, [pc, #144]	; (8004ab4 <HAL_GPIO_Init+0x300>)
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	43db      	mvns	r3, r3
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d003      	beq.n	8004a44 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a44:	4a1b      	ldr	r2, [pc, #108]	; (8004ab4 <HAL_GPIO_Init+0x300>)
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004a4a:	4b1a      	ldr	r3, [pc, #104]	; (8004ab4 <HAL_GPIO_Init+0x300>)
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	43db      	mvns	r3, r3
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	4013      	ands	r3, r2
 8004a58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a6e:	4a11      	ldr	r2, [pc, #68]	; (8004ab4 <HAL_GPIO_Init+0x300>)
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	3301      	adds	r3, #1
 8004a78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	fa22 f303 	lsr.w	r3, r2, r3
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f47f ae9d 	bne.w	80047c4 <HAL_GPIO_Init+0x10>
  }
}
 8004a8a:	bf00      	nop
 8004a8c:	371c      	adds	r7, #28
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	40021000 	.word	0x40021000
 8004a9c:	40010000 	.word	0x40010000
 8004aa0:	48000400 	.word	0x48000400
 8004aa4:	48000800 	.word	0x48000800
 8004aa8:	48000c00 	.word	0x48000c00
 8004aac:	48001000 	.word	0x48001000
 8004ab0:	48001400 	.word	0x48001400
 8004ab4:	40010400 	.word	0x40010400

08004ab8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	691a      	ldr	r2, [r3, #16]
 8004ac8:	887b      	ldrh	r3, [r7, #2]
 8004aca:	4013      	ands	r3, r2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d002      	beq.n	8004ad6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	73fb      	strb	r3, [r7, #15]
 8004ad4:	e001      	b.n	8004ada <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3714      	adds	r7, #20
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	460b      	mov	r3, r1
 8004af2:	807b      	strh	r3, [r7, #2]
 8004af4:	4613      	mov	r3, r2
 8004af6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004af8:	787b      	ldrb	r3, [r7, #1]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d003      	beq.n	8004b06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004afe:	887a      	ldrh	r2, [r7, #2]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b04:	e002      	b.n	8004b0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b06:	887a      	ldrh	r2, [r7, #2]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d141      	bne.n	8004baa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b26:	4b4b      	ldr	r3, [pc, #300]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b32:	d131      	bne.n	8004b98 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b34:	4b47      	ldr	r3, [pc, #284]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b3a:	4a46      	ldr	r2, [pc, #280]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b44:	4b43      	ldr	r3, [pc, #268]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b4c:	4a41      	ldr	r2, [pc, #260]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b52:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b54:	4b40      	ldr	r3, [pc, #256]	; (8004c58 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2232      	movs	r2, #50	; 0x32
 8004b5a:	fb02 f303 	mul.w	r3, r2, r3
 8004b5e:	4a3f      	ldr	r2, [pc, #252]	; (8004c5c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004b60:	fba2 2303 	umull	r2, r3, r2, r3
 8004b64:	0c9b      	lsrs	r3, r3, #18
 8004b66:	3301      	adds	r3, #1
 8004b68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b6a:	e002      	b.n	8004b72 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b72:	4b38      	ldr	r3, [pc, #224]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b7e:	d102      	bne.n	8004b86 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1f2      	bne.n	8004b6c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b86:	4b33      	ldr	r3, [pc, #204]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b92:	d158      	bne.n	8004c46 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e057      	b.n	8004c48 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b98:	4b2e      	ldr	r3, [pc, #184]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b9e:	4a2d      	ldr	r2, [pc, #180]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ba0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ba4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004ba8:	e04d      	b.n	8004c46 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bb0:	d141      	bne.n	8004c36 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004bb2:	4b28      	ldr	r3, [pc, #160]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bbe:	d131      	bne.n	8004c24 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bc0:	4b24      	ldr	r3, [pc, #144]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bc6:	4a23      	ldr	r2, [pc, #140]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bcc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bd0:	4b20      	ldr	r3, [pc, #128]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004bd8:	4a1e      	ldr	r2, [pc, #120]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004bde:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004be0:	4b1d      	ldr	r3, [pc, #116]	; (8004c58 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2232      	movs	r2, #50	; 0x32
 8004be6:	fb02 f303 	mul.w	r3, r2, r3
 8004bea:	4a1c      	ldr	r2, [pc, #112]	; (8004c5c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004bec:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf0:	0c9b      	lsrs	r3, r3, #18
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bf6:	e002      	b.n	8004bfe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bfe:	4b15      	ldr	r3, [pc, #84]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c0a:	d102      	bne.n	8004c12 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1f2      	bne.n	8004bf8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c12:	4b10      	ldr	r3, [pc, #64]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c1e:	d112      	bne.n	8004c46 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e011      	b.n	8004c48 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c24:	4b0b      	ldr	r3, [pc, #44]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c2a:	4a0a      	ldr	r2, [pc, #40]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004c34:	e007      	b.n	8004c46 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004c36:	4b07      	ldr	r3, [pc, #28]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004c3e:	4a05      	ldr	r2, [pc, #20]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c44:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3714      	adds	r7, #20
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr
 8004c54:	40007000 	.word	0x40007000
 8004c58:	200003cc 	.word	0x200003cc
 8004c5c:	431bde83 	.word	0x431bde83

08004c60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b088      	sub	sp, #32
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d101      	bne.n	8004c72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e308      	b.n	8005284 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d075      	beq.n	8004d6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c7e:	4ba3      	ldr	r3, [pc, #652]	; (8004f0c <HAL_RCC_OscConfig+0x2ac>)
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f003 030c 	and.w	r3, r3, #12
 8004c86:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c88:	4ba0      	ldr	r3, [pc, #640]	; (8004f0c <HAL_RCC_OscConfig+0x2ac>)
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	f003 0303 	and.w	r3, r3, #3
 8004c90:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	2b0c      	cmp	r3, #12
 8004c96:	d102      	bne.n	8004c9e <HAL_RCC_OscConfig+0x3e>
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	2b03      	cmp	r3, #3
 8004c9c:	d002      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x44>
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	2b08      	cmp	r3, #8
 8004ca2:	d10b      	bne.n	8004cbc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ca4:	4b99      	ldr	r3, [pc, #612]	; (8004f0c <HAL_RCC_OscConfig+0x2ac>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d05b      	beq.n	8004d68 <HAL_RCC_OscConfig+0x108>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d157      	bne.n	8004d68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e2e3      	b.n	8005284 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cc4:	d106      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x74>
 8004cc6:	4b91      	ldr	r3, [pc, #580]	; (8004f0c <HAL_RCC_OscConfig+0x2ac>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a90      	ldr	r2, [pc, #576]	; (8004f0c <HAL_RCC_OscConfig+0x2ac>)
 8004ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cd0:	6013      	str	r3, [r2, #0]
 8004cd2:	e01d      	b.n	8004d10 <HAL_RCC_OscConfig+0xb0>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cdc:	d10c      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x98>
 8004cde:	4b8b      	ldr	r3, [pc, #556]	; (8004f0c <HAL_RCC_OscConfig+0x2ac>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a8a      	ldr	r2, [pc, #552]	; (8004f0c <HAL_RCC_OscConfig+0x2ac>)
 8004ce4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ce8:	6013      	str	r3, [r2, #0]
 8004cea:	4b88      	ldr	r3, [pc, #544]	; (8004f0c <HAL_RCC_OscConfig+0x2ac>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a87      	ldr	r2, [pc, #540]	; (8004f0c <HAL_RCC_OscConfig+0x2ac>)
 8004cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cf4:	6013      	str	r3, [r2, #0]
 8004cf6:	e00b      	b.n	8004d10 <HAL_RCC_OscConfig+0xb0>
 8004cf8:	4b84      	ldr	r3, [pc, #528]	; (8004f0c <HAL_RCC_OscConfig+0x2ac>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a83      	ldr	r2, [pc, #524]	; (8004f0c <HAL_RCC_OscConfig+0x2ac>)
 8004cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d02:	6013      	str	r3, [r2, #0]
 8004d04:	4b81      	ldr	r3, [pc, #516]	; (8004f0c <HAL_RCC_OscConfig+0x2ac>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a80      	ldr	r2, [pc, #512]	; (8004f0c <HAL_RCC_OscConfig+0x2ac>)
 8004d0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d013      	beq.n	8004d40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d18:	f7fd faaa 	bl	8002270 <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d1e:	e008      	b.n	8004d32 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d20:	f7fd faa6 	bl	8002270 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b64      	cmp	r3, #100	; 0x64
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e2a8      	b.n	8005284 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d32:	4b76      	ldr	r3, [pc, #472]	; (8004f0c <HAL_RCC_OscConfig+0x2ac>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d0f0      	beq.n	8004d20 <HAL_RCC_OscConfig+0xc0>
 8004d3e:	e014      	b.n	8004d6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d40:	f7fd fa96 	bl	8002270 <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d48:	f7fd fa92 	bl	8002270 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b64      	cmp	r3, #100	; 0x64
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e294      	b.n	8005284 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d5a:	4b6c      	ldr	r3, [pc, #432]	; (8004f0c <HAL_RCC_OscConfig+0x2ac>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1f0      	bne.n	8004d48 <HAL_RCC_OscConfig+0xe8>
 8004d66:	e000      	b.n	8004d6a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d075      	beq.n	8004e62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d76:	4b65      	ldr	r3, [pc, #404]	; (8004f0c <HAL_RCC_OscConfig+0x2ac>)
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f003 030c 	and.w	r3, r3, #12
 8004d7e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d80:	4b62      	ldr	r3, [pc, #392]	; (8004f0c <HAL_RCC_OscConfig+0x2ac>)
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	f003 0303 	and.w	r3, r3, #3
 8004d88:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	2b0c      	cmp	r3, #12
 8004d8e:	d102      	bne.n	8004d96 <HAL_RCC_OscConfig+0x136>
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d002      	beq.n	8004d9c <HAL_RCC_OscConfig+0x13c>
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	2b04      	cmp	r3, #4
 8004d9a:	d11f      	bne.n	8004ddc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d9c:	4b5b      	ldr	r3, [pc, #364]	; (8004f0c <HAL_RCC_OscConfig+0x2ac>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d005      	beq.n	8004db4 <HAL_RCC_OscConfig+0x154>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d101      	bne.n	8004db4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e267      	b.n	8005284 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004db4:	4b55      	ldr	r3, [pc, #340]	; (8004f0c <HAL_RCC_OscConfig+0x2ac>)
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	061b      	lsls	r3, r3, #24
 8004dc2:	4952      	ldr	r1, [pc, #328]	; (8004f0c <HAL_RCC_OscConfig+0x2ac>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004dc8:	4b51      	ldr	r3, [pc, #324]	; (8004f10 <HAL_RCC_OscConfig+0x2b0>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7fd fa03 	bl	80021d8 <HAL_InitTick>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d043      	beq.n	8004e60 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e253      	b.n	8005284 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d023      	beq.n	8004e2c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004de4:	4b49      	ldr	r3, [pc, #292]	; (8004f0c <HAL_RCC_OscConfig+0x2ac>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a48      	ldr	r2, [pc, #288]	; (8004f0c <HAL_RCC_OscConfig+0x2ac>)
 8004dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df0:	f7fd fa3e 	bl	8002270 <HAL_GetTick>
 8004df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004df6:	e008      	b.n	8004e0a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004df8:	f7fd fa3a 	bl	8002270 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e23c      	b.n	8005284 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e0a:	4b40      	ldr	r3, [pc, #256]	; (8004f0c <HAL_RCC_OscConfig+0x2ac>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d0f0      	beq.n	8004df8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e16:	4b3d      	ldr	r3, [pc, #244]	; (8004f0c <HAL_RCC_OscConfig+0x2ac>)
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	061b      	lsls	r3, r3, #24
 8004e24:	4939      	ldr	r1, [pc, #228]	; (8004f0c <HAL_RCC_OscConfig+0x2ac>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	604b      	str	r3, [r1, #4]
 8004e2a:	e01a      	b.n	8004e62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e2c:	4b37      	ldr	r3, [pc, #220]	; (8004f0c <HAL_RCC_OscConfig+0x2ac>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a36      	ldr	r2, [pc, #216]	; (8004f0c <HAL_RCC_OscConfig+0x2ac>)
 8004e32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e38:	f7fd fa1a 	bl	8002270 <HAL_GetTick>
 8004e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e3e:	e008      	b.n	8004e52 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e40:	f7fd fa16 	bl	8002270 <HAL_GetTick>
 8004e44:	4602      	mov	r2, r0
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d901      	bls.n	8004e52 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e218      	b.n	8005284 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e52:	4b2e      	ldr	r3, [pc, #184]	; (8004f0c <HAL_RCC_OscConfig+0x2ac>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1f0      	bne.n	8004e40 <HAL_RCC_OscConfig+0x1e0>
 8004e5e:	e000      	b.n	8004e62 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e60:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0308 	and.w	r3, r3, #8
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d03c      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d01c      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e76:	4b25      	ldr	r3, [pc, #148]	; (8004f0c <HAL_RCC_OscConfig+0x2ac>)
 8004e78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e7c:	4a23      	ldr	r2, [pc, #140]	; (8004f0c <HAL_RCC_OscConfig+0x2ac>)
 8004e7e:	f043 0301 	orr.w	r3, r3, #1
 8004e82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e86:	f7fd f9f3 	bl	8002270 <HAL_GetTick>
 8004e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e8c:	e008      	b.n	8004ea0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e8e:	f7fd f9ef 	bl	8002270 <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d901      	bls.n	8004ea0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e1f1      	b.n	8005284 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ea0:	4b1a      	ldr	r3, [pc, #104]	; (8004f0c <HAL_RCC_OscConfig+0x2ac>)
 8004ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d0ef      	beq.n	8004e8e <HAL_RCC_OscConfig+0x22e>
 8004eae:	e01b      	b.n	8004ee8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004eb0:	4b16      	ldr	r3, [pc, #88]	; (8004f0c <HAL_RCC_OscConfig+0x2ac>)
 8004eb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004eb6:	4a15      	ldr	r2, [pc, #84]	; (8004f0c <HAL_RCC_OscConfig+0x2ac>)
 8004eb8:	f023 0301 	bic.w	r3, r3, #1
 8004ebc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec0:	f7fd f9d6 	bl	8002270 <HAL_GetTick>
 8004ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ec6:	e008      	b.n	8004eda <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ec8:	f7fd f9d2 	bl	8002270 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e1d4      	b.n	8005284 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004eda:	4b0c      	ldr	r3, [pc, #48]	; (8004f0c <HAL_RCC_OscConfig+0x2ac>)
 8004edc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ee0:	f003 0302 	and.w	r3, r3, #2
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1ef      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0304 	and.w	r3, r3, #4
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f000 80ab 	beq.w	800504c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004efa:	4b04      	ldr	r3, [pc, #16]	; (8004f0c <HAL_RCC_OscConfig+0x2ac>)
 8004efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d106      	bne.n	8004f14 <HAL_RCC_OscConfig+0x2b4>
 8004f06:	2301      	movs	r3, #1
 8004f08:	e005      	b.n	8004f16 <HAL_RCC_OscConfig+0x2b6>
 8004f0a:	bf00      	nop
 8004f0c:	40021000 	.word	0x40021000
 8004f10:	200003d0 	.word	0x200003d0
 8004f14:	2300      	movs	r3, #0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00d      	beq.n	8004f36 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f1a:	4baf      	ldr	r3, [pc, #700]	; (80051d8 <HAL_RCC_OscConfig+0x578>)
 8004f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f1e:	4aae      	ldr	r2, [pc, #696]	; (80051d8 <HAL_RCC_OscConfig+0x578>)
 8004f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f24:	6593      	str	r3, [r2, #88]	; 0x58
 8004f26:	4bac      	ldr	r3, [pc, #688]	; (80051d8 <HAL_RCC_OscConfig+0x578>)
 8004f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f2e:	60fb      	str	r3, [r7, #12]
 8004f30:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004f32:	2301      	movs	r3, #1
 8004f34:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f36:	4ba9      	ldr	r3, [pc, #676]	; (80051dc <HAL_RCC_OscConfig+0x57c>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d118      	bne.n	8004f74 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f42:	4ba6      	ldr	r3, [pc, #664]	; (80051dc <HAL_RCC_OscConfig+0x57c>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4aa5      	ldr	r2, [pc, #660]	; (80051dc <HAL_RCC_OscConfig+0x57c>)
 8004f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f4e:	f7fd f98f 	bl	8002270 <HAL_GetTick>
 8004f52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f54:	e008      	b.n	8004f68 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f56:	f7fd f98b 	bl	8002270 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d901      	bls.n	8004f68 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e18d      	b.n	8005284 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f68:	4b9c      	ldr	r3, [pc, #624]	; (80051dc <HAL_RCC_OscConfig+0x57c>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d0f0      	beq.n	8004f56 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d108      	bne.n	8004f8e <HAL_RCC_OscConfig+0x32e>
 8004f7c:	4b96      	ldr	r3, [pc, #600]	; (80051d8 <HAL_RCC_OscConfig+0x578>)
 8004f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f82:	4a95      	ldr	r2, [pc, #596]	; (80051d8 <HAL_RCC_OscConfig+0x578>)
 8004f84:	f043 0301 	orr.w	r3, r3, #1
 8004f88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f8c:	e024      	b.n	8004fd8 <HAL_RCC_OscConfig+0x378>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	2b05      	cmp	r3, #5
 8004f94:	d110      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x358>
 8004f96:	4b90      	ldr	r3, [pc, #576]	; (80051d8 <HAL_RCC_OscConfig+0x578>)
 8004f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f9c:	4a8e      	ldr	r2, [pc, #568]	; (80051d8 <HAL_RCC_OscConfig+0x578>)
 8004f9e:	f043 0304 	orr.w	r3, r3, #4
 8004fa2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fa6:	4b8c      	ldr	r3, [pc, #560]	; (80051d8 <HAL_RCC_OscConfig+0x578>)
 8004fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fac:	4a8a      	ldr	r2, [pc, #552]	; (80051d8 <HAL_RCC_OscConfig+0x578>)
 8004fae:	f043 0301 	orr.w	r3, r3, #1
 8004fb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fb6:	e00f      	b.n	8004fd8 <HAL_RCC_OscConfig+0x378>
 8004fb8:	4b87      	ldr	r3, [pc, #540]	; (80051d8 <HAL_RCC_OscConfig+0x578>)
 8004fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fbe:	4a86      	ldr	r2, [pc, #536]	; (80051d8 <HAL_RCC_OscConfig+0x578>)
 8004fc0:	f023 0301 	bic.w	r3, r3, #1
 8004fc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fc8:	4b83      	ldr	r3, [pc, #524]	; (80051d8 <HAL_RCC_OscConfig+0x578>)
 8004fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fce:	4a82      	ldr	r2, [pc, #520]	; (80051d8 <HAL_RCC_OscConfig+0x578>)
 8004fd0:	f023 0304 	bic.w	r3, r3, #4
 8004fd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d016      	beq.n	800500e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fe0:	f7fd f946 	bl	8002270 <HAL_GetTick>
 8004fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fe6:	e00a      	b.n	8004ffe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fe8:	f7fd f942 	bl	8002270 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e142      	b.n	8005284 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ffe:	4b76      	ldr	r3, [pc, #472]	; (80051d8 <HAL_RCC_OscConfig+0x578>)
 8005000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	2b00      	cmp	r3, #0
 800500a:	d0ed      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x388>
 800500c:	e015      	b.n	800503a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800500e:	f7fd f92f 	bl	8002270 <HAL_GetTick>
 8005012:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005014:	e00a      	b.n	800502c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005016:	f7fd f92b 	bl	8002270 <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	f241 3288 	movw	r2, #5000	; 0x1388
 8005024:	4293      	cmp	r3, r2
 8005026:	d901      	bls.n	800502c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e12b      	b.n	8005284 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800502c:	4b6a      	ldr	r3, [pc, #424]	; (80051d8 <HAL_RCC_OscConfig+0x578>)
 800502e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005032:	f003 0302 	and.w	r3, r3, #2
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1ed      	bne.n	8005016 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800503a:	7ffb      	ldrb	r3, [r7, #31]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d105      	bne.n	800504c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005040:	4b65      	ldr	r3, [pc, #404]	; (80051d8 <HAL_RCC_OscConfig+0x578>)
 8005042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005044:	4a64      	ldr	r2, [pc, #400]	; (80051d8 <HAL_RCC_OscConfig+0x578>)
 8005046:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800504a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0320 	and.w	r3, r3, #32
 8005054:	2b00      	cmp	r3, #0
 8005056:	d03c      	beq.n	80050d2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	699b      	ldr	r3, [r3, #24]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d01c      	beq.n	800509a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005060:	4b5d      	ldr	r3, [pc, #372]	; (80051d8 <HAL_RCC_OscConfig+0x578>)
 8005062:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005066:	4a5c      	ldr	r2, [pc, #368]	; (80051d8 <HAL_RCC_OscConfig+0x578>)
 8005068:	f043 0301 	orr.w	r3, r3, #1
 800506c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005070:	f7fd f8fe 	bl	8002270 <HAL_GetTick>
 8005074:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005076:	e008      	b.n	800508a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005078:	f7fd f8fa 	bl	8002270 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	2b02      	cmp	r3, #2
 8005084:	d901      	bls.n	800508a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e0fc      	b.n	8005284 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800508a:	4b53      	ldr	r3, [pc, #332]	; (80051d8 <HAL_RCC_OscConfig+0x578>)
 800508c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005090:	f003 0302 	and.w	r3, r3, #2
 8005094:	2b00      	cmp	r3, #0
 8005096:	d0ef      	beq.n	8005078 <HAL_RCC_OscConfig+0x418>
 8005098:	e01b      	b.n	80050d2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800509a:	4b4f      	ldr	r3, [pc, #316]	; (80051d8 <HAL_RCC_OscConfig+0x578>)
 800509c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050a0:	4a4d      	ldr	r2, [pc, #308]	; (80051d8 <HAL_RCC_OscConfig+0x578>)
 80050a2:	f023 0301 	bic.w	r3, r3, #1
 80050a6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050aa:	f7fd f8e1 	bl	8002270 <HAL_GetTick>
 80050ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80050b0:	e008      	b.n	80050c4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050b2:	f7fd f8dd 	bl	8002270 <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d901      	bls.n	80050c4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e0df      	b.n	8005284 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80050c4:	4b44      	ldr	r3, [pc, #272]	; (80051d8 <HAL_RCC_OscConfig+0x578>)
 80050c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050ca:	f003 0302 	and.w	r3, r3, #2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1ef      	bne.n	80050b2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	69db      	ldr	r3, [r3, #28]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	f000 80d3 	beq.w	8005282 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050dc:	4b3e      	ldr	r3, [pc, #248]	; (80051d8 <HAL_RCC_OscConfig+0x578>)
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f003 030c 	and.w	r3, r3, #12
 80050e4:	2b0c      	cmp	r3, #12
 80050e6:	f000 808d 	beq.w	8005204 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d15a      	bne.n	80051a8 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050f2:	4b39      	ldr	r3, [pc, #228]	; (80051d8 <HAL_RCC_OscConfig+0x578>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a38      	ldr	r2, [pc, #224]	; (80051d8 <HAL_RCC_OscConfig+0x578>)
 80050f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fe:	f7fd f8b7 	bl	8002270 <HAL_GetTick>
 8005102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005104:	e008      	b.n	8005118 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005106:	f7fd f8b3 	bl	8002270 <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	2b02      	cmp	r3, #2
 8005112:	d901      	bls.n	8005118 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e0b5      	b.n	8005284 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005118:	4b2f      	ldr	r3, [pc, #188]	; (80051d8 <HAL_RCC_OscConfig+0x578>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1f0      	bne.n	8005106 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005124:	4b2c      	ldr	r3, [pc, #176]	; (80051d8 <HAL_RCC_OscConfig+0x578>)
 8005126:	68da      	ldr	r2, [r3, #12]
 8005128:	4b2d      	ldr	r3, [pc, #180]	; (80051e0 <HAL_RCC_OscConfig+0x580>)
 800512a:	4013      	ands	r3, r2
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	6a11      	ldr	r1, [r2, #32]
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005134:	3a01      	subs	r2, #1
 8005136:	0112      	lsls	r2, r2, #4
 8005138:	4311      	orrs	r1, r2
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800513e:	0212      	lsls	r2, r2, #8
 8005140:	4311      	orrs	r1, r2
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005146:	0852      	lsrs	r2, r2, #1
 8005148:	3a01      	subs	r2, #1
 800514a:	0552      	lsls	r2, r2, #21
 800514c:	4311      	orrs	r1, r2
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005152:	0852      	lsrs	r2, r2, #1
 8005154:	3a01      	subs	r2, #1
 8005156:	0652      	lsls	r2, r2, #25
 8005158:	4311      	orrs	r1, r2
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800515e:	06d2      	lsls	r2, r2, #27
 8005160:	430a      	orrs	r2, r1
 8005162:	491d      	ldr	r1, [pc, #116]	; (80051d8 <HAL_RCC_OscConfig+0x578>)
 8005164:	4313      	orrs	r3, r2
 8005166:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005168:	4b1b      	ldr	r3, [pc, #108]	; (80051d8 <HAL_RCC_OscConfig+0x578>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a1a      	ldr	r2, [pc, #104]	; (80051d8 <HAL_RCC_OscConfig+0x578>)
 800516e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005172:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005174:	4b18      	ldr	r3, [pc, #96]	; (80051d8 <HAL_RCC_OscConfig+0x578>)
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	4a17      	ldr	r2, [pc, #92]	; (80051d8 <HAL_RCC_OscConfig+0x578>)
 800517a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800517e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005180:	f7fd f876 	bl	8002270 <HAL_GetTick>
 8005184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005186:	e008      	b.n	800519a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005188:	f7fd f872 	bl	8002270 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b02      	cmp	r3, #2
 8005194:	d901      	bls.n	800519a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e074      	b.n	8005284 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800519a:	4b0f      	ldr	r3, [pc, #60]	; (80051d8 <HAL_RCC_OscConfig+0x578>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d0f0      	beq.n	8005188 <HAL_RCC_OscConfig+0x528>
 80051a6:	e06c      	b.n	8005282 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051a8:	4b0b      	ldr	r3, [pc, #44]	; (80051d8 <HAL_RCC_OscConfig+0x578>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a0a      	ldr	r2, [pc, #40]	; (80051d8 <HAL_RCC_OscConfig+0x578>)
 80051ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051b2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80051b4:	4b08      	ldr	r3, [pc, #32]	; (80051d8 <HAL_RCC_OscConfig+0x578>)
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	4a07      	ldr	r2, [pc, #28]	; (80051d8 <HAL_RCC_OscConfig+0x578>)
 80051ba:	f023 0303 	bic.w	r3, r3, #3
 80051be:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80051c0:	4b05      	ldr	r3, [pc, #20]	; (80051d8 <HAL_RCC_OscConfig+0x578>)
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	4a04      	ldr	r2, [pc, #16]	; (80051d8 <HAL_RCC_OscConfig+0x578>)
 80051c6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80051ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051ce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d0:	f7fd f84e 	bl	8002270 <HAL_GetTick>
 80051d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051d6:	e00e      	b.n	80051f6 <HAL_RCC_OscConfig+0x596>
 80051d8:	40021000 	.word	0x40021000
 80051dc:	40007000 	.word	0x40007000
 80051e0:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051e4:	f7fd f844 	bl	8002270 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e046      	b.n	8005284 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051f6:	4b25      	ldr	r3, [pc, #148]	; (800528c <HAL_RCC_OscConfig+0x62c>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1f0      	bne.n	80051e4 <HAL_RCC_OscConfig+0x584>
 8005202:	e03e      	b.n	8005282 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	69db      	ldr	r3, [r3, #28]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d101      	bne.n	8005210 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e039      	b.n	8005284 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005210:	4b1e      	ldr	r3, [pc, #120]	; (800528c <HAL_RCC_OscConfig+0x62c>)
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	f003 0203 	and.w	r2, r3, #3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a1b      	ldr	r3, [r3, #32]
 8005220:	429a      	cmp	r2, r3
 8005222:	d12c      	bne.n	800527e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522e:	3b01      	subs	r3, #1
 8005230:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005232:	429a      	cmp	r2, r3
 8005234:	d123      	bne.n	800527e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005240:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005242:	429a      	cmp	r2, r3
 8005244:	d11b      	bne.n	800527e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005250:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005252:	429a      	cmp	r2, r3
 8005254:	d113      	bne.n	800527e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005260:	085b      	lsrs	r3, r3, #1
 8005262:	3b01      	subs	r3, #1
 8005264:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005266:	429a      	cmp	r2, r3
 8005268:	d109      	bne.n	800527e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005274:	085b      	lsrs	r3, r3, #1
 8005276:	3b01      	subs	r3, #1
 8005278:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800527a:	429a      	cmp	r2, r3
 800527c:	d001      	beq.n	8005282 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e000      	b.n	8005284 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3720      	adds	r7, #32
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	40021000 	.word	0x40021000

08005290 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b086      	sub	sp, #24
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800529a:	2300      	movs	r3, #0
 800529c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d101      	bne.n	80052a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e11e      	b.n	80054e6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052a8:	4b91      	ldr	r3, [pc, #580]	; (80054f0 <HAL_RCC_ClockConfig+0x260>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 030f 	and.w	r3, r3, #15
 80052b0:	683a      	ldr	r2, [r7, #0]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d910      	bls.n	80052d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052b6:	4b8e      	ldr	r3, [pc, #568]	; (80054f0 <HAL_RCC_ClockConfig+0x260>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f023 020f 	bic.w	r2, r3, #15
 80052be:	498c      	ldr	r1, [pc, #560]	; (80054f0 <HAL_RCC_ClockConfig+0x260>)
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052c6:	4b8a      	ldr	r3, [pc, #552]	; (80054f0 <HAL_RCC_ClockConfig+0x260>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 030f 	and.w	r3, r3, #15
 80052ce:	683a      	ldr	r2, [r7, #0]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d001      	beq.n	80052d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e106      	b.n	80054e6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0301 	and.w	r3, r3, #1
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d073      	beq.n	80053cc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	2b03      	cmp	r3, #3
 80052ea:	d129      	bne.n	8005340 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052ec:	4b81      	ldr	r3, [pc, #516]	; (80054f4 <HAL_RCC_ClockConfig+0x264>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d101      	bne.n	80052fc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e0f4      	b.n	80054e6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80052fc:	f000 f972 	bl	80055e4 <RCC_GetSysClockFreqFromPLLSource>
 8005300:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	4a7c      	ldr	r2, [pc, #496]	; (80054f8 <HAL_RCC_ClockConfig+0x268>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d93f      	bls.n	800538a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800530a:	4b7a      	ldr	r3, [pc, #488]	; (80054f4 <HAL_RCC_ClockConfig+0x264>)
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d009      	beq.n	800532a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800531e:	2b00      	cmp	r3, #0
 8005320:	d033      	beq.n	800538a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005326:	2b00      	cmp	r3, #0
 8005328:	d12f      	bne.n	800538a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800532a:	4b72      	ldr	r3, [pc, #456]	; (80054f4 <HAL_RCC_ClockConfig+0x264>)
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005332:	4a70      	ldr	r2, [pc, #448]	; (80054f4 <HAL_RCC_ClockConfig+0x264>)
 8005334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005338:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800533a:	2380      	movs	r3, #128	; 0x80
 800533c:	617b      	str	r3, [r7, #20]
 800533e:	e024      	b.n	800538a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	2b02      	cmp	r3, #2
 8005346:	d107      	bne.n	8005358 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005348:	4b6a      	ldr	r3, [pc, #424]	; (80054f4 <HAL_RCC_ClockConfig+0x264>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d109      	bne.n	8005368 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e0c6      	b.n	80054e6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005358:	4b66      	ldr	r3, [pc, #408]	; (80054f4 <HAL_RCC_ClockConfig+0x264>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005360:	2b00      	cmp	r3, #0
 8005362:	d101      	bne.n	8005368 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e0be      	b.n	80054e6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005368:	f000 f8ce 	bl	8005508 <HAL_RCC_GetSysClockFreq>
 800536c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	4a61      	ldr	r2, [pc, #388]	; (80054f8 <HAL_RCC_ClockConfig+0x268>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d909      	bls.n	800538a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005376:	4b5f      	ldr	r3, [pc, #380]	; (80054f4 <HAL_RCC_ClockConfig+0x264>)
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800537e:	4a5d      	ldr	r2, [pc, #372]	; (80054f4 <HAL_RCC_ClockConfig+0x264>)
 8005380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005384:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005386:	2380      	movs	r3, #128	; 0x80
 8005388:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800538a:	4b5a      	ldr	r3, [pc, #360]	; (80054f4 <HAL_RCC_ClockConfig+0x264>)
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f023 0203 	bic.w	r2, r3, #3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	4957      	ldr	r1, [pc, #348]	; (80054f4 <HAL_RCC_ClockConfig+0x264>)
 8005398:	4313      	orrs	r3, r2
 800539a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800539c:	f7fc ff68 	bl	8002270 <HAL_GetTick>
 80053a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053a2:	e00a      	b.n	80053ba <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053a4:	f7fc ff64 	bl	8002270 <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d901      	bls.n	80053ba <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e095      	b.n	80054e6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ba:	4b4e      	ldr	r3, [pc, #312]	; (80054f4 <HAL_RCC_ClockConfig+0x264>)
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f003 020c 	and.w	r2, r3, #12
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d1eb      	bne.n	80053a4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0302 	and.w	r3, r3, #2
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d023      	beq.n	8005420 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0304 	and.w	r3, r3, #4
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d005      	beq.n	80053f0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053e4:	4b43      	ldr	r3, [pc, #268]	; (80054f4 <HAL_RCC_ClockConfig+0x264>)
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	4a42      	ldr	r2, [pc, #264]	; (80054f4 <HAL_RCC_ClockConfig+0x264>)
 80053ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80053ee:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0308 	and.w	r3, r3, #8
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d007      	beq.n	800540c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80053fc:	4b3d      	ldr	r3, [pc, #244]	; (80054f4 <HAL_RCC_ClockConfig+0x264>)
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005404:	4a3b      	ldr	r2, [pc, #236]	; (80054f4 <HAL_RCC_ClockConfig+0x264>)
 8005406:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800540a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800540c:	4b39      	ldr	r3, [pc, #228]	; (80054f4 <HAL_RCC_ClockConfig+0x264>)
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	4936      	ldr	r1, [pc, #216]	; (80054f4 <HAL_RCC_ClockConfig+0x264>)
 800541a:	4313      	orrs	r3, r2
 800541c:	608b      	str	r3, [r1, #8]
 800541e:	e008      	b.n	8005432 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	2b80      	cmp	r3, #128	; 0x80
 8005424:	d105      	bne.n	8005432 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005426:	4b33      	ldr	r3, [pc, #204]	; (80054f4 <HAL_RCC_ClockConfig+0x264>)
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	4a32      	ldr	r2, [pc, #200]	; (80054f4 <HAL_RCC_ClockConfig+0x264>)
 800542c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005430:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005432:	4b2f      	ldr	r3, [pc, #188]	; (80054f0 <HAL_RCC_ClockConfig+0x260>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 030f 	and.w	r3, r3, #15
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	429a      	cmp	r2, r3
 800543e:	d21d      	bcs.n	800547c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005440:	4b2b      	ldr	r3, [pc, #172]	; (80054f0 <HAL_RCC_ClockConfig+0x260>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f023 020f 	bic.w	r2, r3, #15
 8005448:	4929      	ldr	r1, [pc, #164]	; (80054f0 <HAL_RCC_ClockConfig+0x260>)
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	4313      	orrs	r3, r2
 800544e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005450:	f7fc ff0e 	bl	8002270 <HAL_GetTick>
 8005454:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005456:	e00a      	b.n	800546e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005458:	f7fc ff0a 	bl	8002270 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	f241 3288 	movw	r2, #5000	; 0x1388
 8005466:	4293      	cmp	r3, r2
 8005468:	d901      	bls.n	800546e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e03b      	b.n	80054e6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800546e:	4b20      	ldr	r3, [pc, #128]	; (80054f0 <HAL_RCC_ClockConfig+0x260>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 030f 	and.w	r3, r3, #15
 8005476:	683a      	ldr	r2, [r7, #0]
 8005478:	429a      	cmp	r2, r3
 800547a:	d1ed      	bne.n	8005458 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0304 	and.w	r3, r3, #4
 8005484:	2b00      	cmp	r3, #0
 8005486:	d008      	beq.n	800549a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005488:	4b1a      	ldr	r3, [pc, #104]	; (80054f4 <HAL_RCC_ClockConfig+0x264>)
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	4917      	ldr	r1, [pc, #92]	; (80054f4 <HAL_RCC_ClockConfig+0x264>)
 8005496:	4313      	orrs	r3, r2
 8005498:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0308 	and.w	r3, r3, #8
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d009      	beq.n	80054ba <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054a6:	4b13      	ldr	r3, [pc, #76]	; (80054f4 <HAL_RCC_ClockConfig+0x264>)
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	00db      	lsls	r3, r3, #3
 80054b4:	490f      	ldr	r1, [pc, #60]	; (80054f4 <HAL_RCC_ClockConfig+0x264>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80054ba:	f000 f825 	bl	8005508 <HAL_RCC_GetSysClockFreq>
 80054be:	4601      	mov	r1, r0
 80054c0:	4b0c      	ldr	r3, [pc, #48]	; (80054f4 <HAL_RCC_ClockConfig+0x264>)
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	091b      	lsrs	r3, r3, #4
 80054c6:	f003 030f 	and.w	r3, r3, #15
 80054ca:	4a0c      	ldr	r2, [pc, #48]	; (80054fc <HAL_RCC_ClockConfig+0x26c>)
 80054cc:	5cd3      	ldrb	r3, [r2, r3]
 80054ce:	f003 031f 	and.w	r3, r3, #31
 80054d2:	fa21 f303 	lsr.w	r3, r1, r3
 80054d6:	4a0a      	ldr	r2, [pc, #40]	; (8005500 <HAL_RCC_ClockConfig+0x270>)
 80054d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80054da:	4b0a      	ldr	r3, [pc, #40]	; (8005504 <HAL_RCC_ClockConfig+0x274>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4618      	mov	r0, r3
 80054e0:	f7fc fe7a 	bl	80021d8 <HAL_InitTick>
 80054e4:	4603      	mov	r3, r0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3718      	adds	r7, #24
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	40022000 	.word	0x40022000
 80054f4:	40021000 	.word	0x40021000
 80054f8:	04c4b400 	.word	0x04c4b400
 80054fc:	080098f0 	.word	0x080098f0
 8005500:	200003cc 	.word	0x200003cc
 8005504:	200003d0 	.word	0x200003d0

08005508 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005508:	b480      	push	{r7}
 800550a:	b087      	sub	sp, #28
 800550c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800550e:	4b2c      	ldr	r3, [pc, #176]	; (80055c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f003 030c 	and.w	r3, r3, #12
 8005516:	2b04      	cmp	r3, #4
 8005518:	d102      	bne.n	8005520 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800551a:	4b2a      	ldr	r3, [pc, #168]	; (80055c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800551c:	613b      	str	r3, [r7, #16]
 800551e:	e047      	b.n	80055b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005520:	4b27      	ldr	r3, [pc, #156]	; (80055c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f003 030c 	and.w	r3, r3, #12
 8005528:	2b08      	cmp	r3, #8
 800552a:	d102      	bne.n	8005532 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800552c:	4b26      	ldr	r3, [pc, #152]	; (80055c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800552e:	613b      	str	r3, [r7, #16]
 8005530:	e03e      	b.n	80055b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005532:	4b23      	ldr	r3, [pc, #140]	; (80055c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f003 030c 	and.w	r3, r3, #12
 800553a:	2b0c      	cmp	r3, #12
 800553c:	d136      	bne.n	80055ac <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800553e:	4b20      	ldr	r3, [pc, #128]	; (80055c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	f003 0303 	and.w	r3, r3, #3
 8005546:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005548:	4b1d      	ldr	r3, [pc, #116]	; (80055c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	091b      	lsrs	r3, r3, #4
 800554e:	f003 030f 	and.w	r3, r3, #15
 8005552:	3301      	adds	r3, #1
 8005554:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2b03      	cmp	r3, #3
 800555a:	d10c      	bne.n	8005576 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800555c:	4a1a      	ldr	r2, [pc, #104]	; (80055c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	fbb2 f3f3 	udiv	r3, r2, r3
 8005564:	4a16      	ldr	r2, [pc, #88]	; (80055c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005566:	68d2      	ldr	r2, [r2, #12]
 8005568:	0a12      	lsrs	r2, r2, #8
 800556a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800556e:	fb02 f303 	mul.w	r3, r2, r3
 8005572:	617b      	str	r3, [r7, #20]
      break;
 8005574:	e00c      	b.n	8005590 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005576:	4a13      	ldr	r2, [pc, #76]	; (80055c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	fbb2 f3f3 	udiv	r3, r2, r3
 800557e:	4a10      	ldr	r2, [pc, #64]	; (80055c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005580:	68d2      	ldr	r2, [r2, #12]
 8005582:	0a12      	lsrs	r2, r2, #8
 8005584:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005588:	fb02 f303 	mul.w	r3, r2, r3
 800558c:	617b      	str	r3, [r7, #20]
      break;
 800558e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005590:	4b0b      	ldr	r3, [pc, #44]	; (80055c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	0e5b      	lsrs	r3, r3, #25
 8005596:	f003 0303 	and.w	r3, r3, #3
 800559a:	3301      	adds	r3, #1
 800559c:	005b      	lsls	r3, r3, #1
 800559e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80055a0:	697a      	ldr	r2, [r7, #20]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a8:	613b      	str	r3, [r7, #16]
 80055aa:	e001      	b.n	80055b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80055ac:	2300      	movs	r3, #0
 80055ae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80055b0:	693b      	ldr	r3, [r7, #16]
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	371c      	adds	r7, #28
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	40021000 	.word	0x40021000
 80055c4:	00f42400 	.word	0x00f42400
 80055c8:	007a1200 	.word	0x007a1200

080055cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055cc:	b480      	push	{r7}
 80055ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055d0:	4b03      	ldr	r3, [pc, #12]	; (80055e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80055d2:	681b      	ldr	r3, [r3, #0]
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	200003cc 	.word	0x200003cc

080055e4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b087      	sub	sp, #28
 80055e8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80055ea:	4b1e      	ldr	r3, [pc, #120]	; (8005664 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	f003 0303 	and.w	r3, r3, #3
 80055f2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055f4:	4b1b      	ldr	r3, [pc, #108]	; (8005664 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	091b      	lsrs	r3, r3, #4
 80055fa:	f003 030f 	and.w	r3, r3, #15
 80055fe:	3301      	adds	r3, #1
 8005600:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	2b03      	cmp	r3, #3
 8005606:	d10c      	bne.n	8005622 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005608:	4a17      	ldr	r2, [pc, #92]	; (8005668 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005610:	4a14      	ldr	r2, [pc, #80]	; (8005664 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005612:	68d2      	ldr	r2, [r2, #12]
 8005614:	0a12      	lsrs	r2, r2, #8
 8005616:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800561a:	fb02 f303 	mul.w	r3, r2, r3
 800561e:	617b      	str	r3, [r7, #20]
    break;
 8005620:	e00c      	b.n	800563c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005622:	4a12      	ldr	r2, [pc, #72]	; (800566c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	fbb2 f3f3 	udiv	r3, r2, r3
 800562a:	4a0e      	ldr	r2, [pc, #56]	; (8005664 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800562c:	68d2      	ldr	r2, [r2, #12]
 800562e:	0a12      	lsrs	r2, r2, #8
 8005630:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005634:	fb02 f303 	mul.w	r3, r2, r3
 8005638:	617b      	str	r3, [r7, #20]
    break;
 800563a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800563c:	4b09      	ldr	r3, [pc, #36]	; (8005664 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	0e5b      	lsrs	r3, r3, #25
 8005642:	f003 0303 	and.w	r3, r3, #3
 8005646:	3301      	adds	r3, #1
 8005648:	005b      	lsls	r3, r3, #1
 800564a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	fbb2 f3f3 	udiv	r3, r2, r3
 8005654:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005656:	687b      	ldr	r3, [r7, #4]
}
 8005658:	4618      	mov	r0, r3
 800565a:	371c      	adds	r7, #28
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr
 8005664:	40021000 	.word	0x40021000
 8005668:	007a1200 	.word	0x007a1200
 800566c:	00f42400 	.word	0x00f42400

08005670 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b086      	sub	sp, #24
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005678:	2300      	movs	r3, #0
 800567a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800567c:	2300      	movs	r3, #0
 800567e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005688:	2b00      	cmp	r3, #0
 800568a:	f000 8098 	beq.w	80057be <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800568e:	2300      	movs	r3, #0
 8005690:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005692:	4b43      	ldr	r3, [pc, #268]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d10d      	bne.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800569e:	4b40      	ldr	r3, [pc, #256]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056a2:	4a3f      	ldr	r2, [pc, #252]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056a8:	6593      	str	r3, [r2, #88]	; 0x58
 80056aa:	4b3d      	ldr	r3, [pc, #244]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056b2:	60bb      	str	r3, [r7, #8]
 80056b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056b6:	2301      	movs	r3, #1
 80056b8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056ba:	4b3a      	ldr	r3, [pc, #232]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a39      	ldr	r2, [pc, #228]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80056c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056c6:	f7fc fdd3 	bl	8002270 <HAL_GetTick>
 80056ca:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056cc:	e009      	b.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056ce:	f7fc fdcf 	bl	8002270 <HAL_GetTick>
 80056d2:	4602      	mov	r2, r0
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d902      	bls.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	74fb      	strb	r3, [r7, #19]
        break;
 80056e0:	e005      	b.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056e2:	4b30      	ldr	r3, [pc, #192]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d0ef      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80056ee:	7cfb      	ldrb	r3, [r7, #19]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d159      	bne.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80056f4:	4b2a      	ldr	r3, [pc, #168]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80056f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056fe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d01e      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	429a      	cmp	r2, r3
 800570e:	d019      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005710:	4b23      	ldr	r3, [pc, #140]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005716:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800571a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800571c:	4b20      	ldr	r3, [pc, #128]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800571e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005722:	4a1f      	ldr	r2, [pc, #124]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005728:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800572c:	4b1c      	ldr	r3, [pc, #112]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800572e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005732:	4a1b      	ldr	r2, [pc, #108]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005734:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005738:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800573c:	4a18      	ldr	r2, [pc, #96]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	f003 0301 	and.w	r3, r3, #1
 800574a:	2b00      	cmp	r3, #0
 800574c:	d016      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800574e:	f7fc fd8f 	bl	8002270 <HAL_GetTick>
 8005752:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005754:	e00b      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005756:	f7fc fd8b 	bl	8002270 <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	f241 3288 	movw	r2, #5000	; 0x1388
 8005764:	4293      	cmp	r3, r2
 8005766:	d902      	bls.n	800576e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	74fb      	strb	r3, [r7, #19]
            break;
 800576c:	e006      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800576e:	4b0c      	ldr	r3, [pc, #48]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005774:	f003 0302 	and.w	r3, r3, #2
 8005778:	2b00      	cmp	r3, #0
 800577a:	d0ec      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800577c:	7cfb      	ldrb	r3, [r7, #19]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d10b      	bne.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005782:	4b07      	ldr	r3, [pc, #28]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005788:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005790:	4903      	ldr	r1, [pc, #12]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005792:	4313      	orrs	r3, r2
 8005794:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005798:	e008      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800579a:	7cfb      	ldrb	r3, [r7, #19]
 800579c:	74bb      	strb	r3, [r7, #18]
 800579e:	e005      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80057a0:	40021000 	.word	0x40021000
 80057a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a8:	7cfb      	ldrb	r3, [r7, #19]
 80057aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057ac:	7c7b      	ldrb	r3, [r7, #17]
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d105      	bne.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057b2:	4baf      	ldr	r3, [pc, #700]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057b6:	4aae      	ldr	r2, [pc, #696]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0301 	and.w	r3, r3, #1
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00a      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057ca:	4ba9      	ldr	r3, [pc, #676]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d0:	f023 0203 	bic.w	r2, r3, #3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	49a5      	ldr	r1, [pc, #660]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0302 	and.w	r3, r3, #2
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00a      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80057ec:	4ba0      	ldr	r3, [pc, #640]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f2:	f023 020c 	bic.w	r2, r3, #12
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	499d      	ldr	r1, [pc, #628]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0304 	and.w	r3, r3, #4
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00a      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800580e:	4b98      	ldr	r3, [pc, #608]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005814:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	4994      	ldr	r1, [pc, #592]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800581e:	4313      	orrs	r3, r2
 8005820:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0308 	and.w	r3, r3, #8
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00a      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005830:	4b8f      	ldr	r3, [pc, #572]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005836:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	498c      	ldr	r1, [pc, #560]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005840:	4313      	orrs	r3, r2
 8005842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0310 	and.w	r3, r3, #16
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00a      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005852:	4b87      	ldr	r3, [pc, #540]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005858:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	695b      	ldr	r3, [r3, #20]
 8005860:	4983      	ldr	r1, [pc, #524]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005862:	4313      	orrs	r3, r2
 8005864:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0320 	and.w	r3, r3, #32
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00a      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005874:	4b7e      	ldr	r3, [pc, #504]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800587a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	497b      	ldr	r1, [pc, #492]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005884:	4313      	orrs	r3, r2
 8005886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00a      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005896:	4b76      	ldr	r3, [pc, #472]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800589c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	69db      	ldr	r3, [r3, #28]
 80058a4:	4972      	ldr	r1, [pc, #456]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00a      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80058b8:	4b6d      	ldr	r3, [pc, #436]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80058ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058be:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	496a      	ldr	r1, [pc, #424]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00a      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80058da:	4b65      	ldr	r3, [pc, #404]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80058dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e8:	4961      	ldr	r1, [pc, #388]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00a      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80058fc:	4b5c      	ldr	r3, [pc, #368]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80058fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005902:	f023 0203 	bic.w	r2, r3, #3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590a:	4959      	ldr	r1, [pc, #356]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800590c:	4313      	orrs	r3, r2
 800590e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00a      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800591e:	4b54      	ldr	r3, [pc, #336]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005924:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592c:	4950      	ldr	r1, [pc, #320]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800592e:	4313      	orrs	r3, r2
 8005930:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800593c:	2b00      	cmp	r3, #0
 800593e:	d015      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005940:	4b4b      	ldr	r3, [pc, #300]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005946:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594e:	4948      	ldr	r1, [pc, #288]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005950:	4313      	orrs	r3, r2
 8005952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800595e:	d105      	bne.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005960:	4b43      	ldr	r3, [pc, #268]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	4a42      	ldr	r2, [pc, #264]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005966:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800596a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005974:	2b00      	cmp	r3, #0
 8005976:	d015      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005978:	4b3d      	ldr	r3, [pc, #244]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800597a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800597e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005986:	493a      	ldr	r1, [pc, #232]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005988:	4313      	orrs	r3, r2
 800598a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005992:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005996:	d105      	bne.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005998:	4b35      	ldr	r3, [pc, #212]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	4a34      	ldr	r2, [pc, #208]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800599e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059a2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d015      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80059b0:	4b2f      	ldr	r3, [pc, #188]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80059b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059be:	492c      	ldr	r1, [pc, #176]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80059ce:	d105      	bne.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059d0:	4b27      	ldr	r3, [pc, #156]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	4a26      	ldr	r2, [pc, #152]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80059d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059da:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d015      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059e8:	4b21      	ldr	r3, [pc, #132]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80059ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059f6:	491e      	ldr	r1, [pc, #120]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80059f8:	4313      	orrs	r3, r2
 80059fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a06:	d105      	bne.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a08:	4b19      	ldr	r3, [pc, #100]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	4a18      	ldr	r2, [pc, #96]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005a0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a12:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d015      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a20:	4b13      	ldr	r3, [pc, #76]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2e:	4910      	ldr	r1, [pc, #64]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005a30:	4313      	orrs	r3, r2
 8005a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a3e:	d105      	bne.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a40:	4b0b      	ldr	r3, [pc, #44]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	4a0a      	ldr	r2, [pc, #40]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005a46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a4a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d018      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005a58:	4b05      	ldr	r3, [pc, #20]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a5e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a66:	4902      	ldr	r1, [pc, #8]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005a6e:	e001      	b.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005a70:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a7c:	d105      	bne.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005a7e:	4b21      	ldr	r3, [pc, #132]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	4a20      	ldr	r2, [pc, #128]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a88:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d015      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005a96:	4b1b      	ldr	r3, [pc, #108]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a9c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005aa4:	4917      	ldr	r1, [pc, #92]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ab4:	d105      	bne.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005ab6:	4b13      	ldr	r3, [pc, #76]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	4a12      	ldr	r2, [pc, #72]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ac0:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d015      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005ace:	4b0d      	ldr	r3, [pc, #52]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005ad0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ad4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005adc:	4909      	ldr	r1, [pc, #36]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ae8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005aec:	d105      	bne.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005aee:	4b05      	ldr	r3, [pc, #20]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	4a04      	ldr	r2, [pc, #16]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005af4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005af8:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005afa:	7cbb      	ldrb	r3, [r7, #18]
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3718      	adds	r7, #24
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	40021000 	.word	0x40021000

08005b08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d101      	bne.n	8005b1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e084      	b.n	8005c24 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d106      	bne.n	8005b3a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f7fb fd07 	bl	8001548 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2202      	movs	r2, #2
 8005b3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b50:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b5a:	d902      	bls.n	8005b62 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	60fb      	str	r3, [r7, #12]
 8005b60:	e002      	b.n	8005b68 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005b62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b66:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005b70:	d007      	beq.n	8005b82 <HAL_SPI_Init+0x7a>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b7a:	d002      	beq.n	8005b82 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10b      	bne.n	8005ba2 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b92:	d903      	bls.n	8005b9c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2202      	movs	r2, #2
 8005b98:	631a      	str	r2, [r3, #48]	; 0x30
 8005b9a:	e002      	b.n	8005ba2 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	431a      	orrs	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	431a      	orrs	r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	695b      	ldr	r3, [r3, #20]
 8005bb6:	431a      	orrs	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bc0:	431a      	orrs	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	431a      	orrs	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a1b      	ldr	r3, [r3, #32]
 8005bcc:	ea42 0103 	orr.w	r1, r2, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	430a      	orrs	r2, r1
 8005bda:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	0c1b      	lsrs	r3, r3, #16
 8005be2:	f003 0204 	and.w	r2, r3, #4
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bea:	431a      	orrs	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bf0:	431a      	orrs	r2, r3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	ea42 0103 	orr.w	r1, r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	430a      	orrs	r2, r1
 8005c02:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	69da      	ldr	r2, [r3, #28]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c12:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3710      	adds	r7, #16
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b088      	sub	sp, #32
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	603b      	str	r3, [r7, #0]
 8005c38:	4613      	mov	r3, r2
 8005c3a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d101      	bne.n	8005c4e <HAL_SPI_Transmit+0x22>
 8005c4a:	2302      	movs	r3, #2
 8005c4c:	e150      	b.n	8005ef0 <HAL_SPI_Transmit+0x2c4>
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2201      	movs	r2, #1
 8005c52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c56:	f7fc fb0b 	bl	8002270 <HAL_GetTick>
 8005c5a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005c5c:	88fb      	ldrh	r3, [r7, #6]
 8005c5e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d002      	beq.n	8005c72 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c70:	e135      	b.n	8005ede <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d002      	beq.n	8005c7e <HAL_SPI_Transmit+0x52>
 8005c78:	88fb      	ldrh	r3, [r7, #6]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d102      	bne.n	8005c84 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c82:	e12c      	b.n	8005ede <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2203      	movs	r2, #3
 8005c88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	68ba      	ldr	r2, [r7, #8]
 8005c96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	88fa      	ldrh	r2, [r7, #6]
 8005c9c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	88fa      	ldrh	r2, [r7, #6]
 8005ca2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cce:	d107      	bne.n	8005ce0 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cde:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cea:	2b40      	cmp	r3, #64	; 0x40
 8005cec:	d007      	beq.n	8005cfe <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cfc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d06:	d94b      	bls.n	8005da0 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d002      	beq.n	8005d16 <HAL_SPI_Transmit+0xea>
 8005d10:	8afb      	ldrh	r3, [r7, #22]
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d13e      	bne.n	8005d94 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1a:	881a      	ldrh	r2, [r3, #0]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d26:	1c9a      	adds	r2, r3, #2
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	3b01      	subs	r3, #1
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005d3a:	e02b      	b.n	8005d94 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	f003 0302 	and.w	r3, r3, #2
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d112      	bne.n	8005d70 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4e:	881a      	ldrh	r2, [r3, #0]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5a:	1c9a      	adds	r2, r3, #2
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	3b01      	subs	r3, #1
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d6e:	e011      	b.n	8005d94 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d70:	f7fc fa7e 	bl	8002270 <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	683a      	ldr	r2, [r7, #0]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d803      	bhi.n	8005d88 <HAL_SPI_Transmit+0x15c>
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d86:	d102      	bne.n	8005d8e <HAL_SPI_Transmit+0x162>
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d102      	bne.n	8005d94 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005d92:	e0a4      	b.n	8005ede <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1ce      	bne.n	8005d3c <HAL_SPI_Transmit+0x110>
 8005d9e:	e07c      	b.n	8005e9a <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d002      	beq.n	8005dae <HAL_SPI_Transmit+0x182>
 8005da8:	8afb      	ldrh	r3, [r7, #22]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d170      	bne.n	8005e90 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d912      	bls.n	8005dde <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dbc:	881a      	ldrh	r2, [r3, #0]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc8:	1c9a      	adds	r2, r3, #2
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	3b02      	subs	r3, #2
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ddc:	e058      	b.n	8005e90 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	330c      	adds	r3, #12
 8005de8:	7812      	ldrb	r2, [r2, #0]
 8005dea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df0:	1c5a      	adds	r2, r3, #1
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	b29a      	uxth	r2, r3
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005e04:	e044      	b.n	8005e90 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f003 0302 	and.w	r3, r3, #2
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	d12b      	bne.n	8005e6c <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d912      	bls.n	8005e44 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e22:	881a      	ldrh	r2, [r3, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2e:	1c9a      	adds	r2, r3, #2
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	3b02      	subs	r3, #2
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e42:	e025      	b.n	8005e90 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	330c      	adds	r3, #12
 8005e4e:	7812      	ldrb	r2, [r2, #0]
 8005e50:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e56:	1c5a      	adds	r2, r3, #1
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	3b01      	subs	r3, #1
 8005e64:	b29a      	uxth	r2, r3
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e6a:	e011      	b.n	8005e90 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e6c:	f7fc fa00 	bl	8002270 <HAL_GetTick>
 8005e70:	4602      	mov	r2, r0
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	683a      	ldr	r2, [r7, #0]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d803      	bhi.n	8005e84 <HAL_SPI_Transmit+0x258>
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e82:	d102      	bne.n	8005e8a <HAL_SPI_Transmit+0x25e>
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d102      	bne.n	8005e90 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005e8e:	e026      	b.n	8005ede <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1b5      	bne.n	8005e06 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e9a:	69ba      	ldr	r2, [r7, #24]
 8005e9c:	6839      	ldr	r1, [r7, #0]
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f000 f901 	bl	80060a6 <SPI_EndRxTxTransaction>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d002      	beq.n	8005eb0 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2220      	movs	r2, #32
 8005eae:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d10a      	bne.n	8005ece <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005eb8:	2300      	movs	r3, #0
 8005eba:	613b      	str	r3, [r7, #16]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	613b      	str	r3, [r7, #16]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	613b      	str	r3, [r7, #16]
 8005ecc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d002      	beq.n	8005edc <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	77fb      	strb	r3, [r7, #31]
 8005eda:	e000      	b.n	8005ede <HAL_SPI_Transmit+0x2b2>
  }

error:
 8005edc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005eee:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3720      	adds	r7, #32
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	603b      	str	r3, [r7, #0]
 8005f04:	4613      	mov	r3, r2
 8005f06:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f08:	e04c      	b.n	8005fa4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f10:	d048      	beq.n	8005fa4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005f12:	f7fc f9ad 	bl	8002270 <HAL_GetTick>
 8005f16:	4602      	mov	r2, r0
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	683a      	ldr	r2, [r7, #0]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d902      	bls.n	8005f28 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d13d      	bne.n	8005fa4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	685a      	ldr	r2, [r3, #4]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005f36:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f40:	d111      	bne.n	8005f66 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f4a:	d004      	beq.n	8005f56 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f54:	d107      	bne.n	8005f66 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f64:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f6e:	d10f      	bne.n	8005f90 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f7e:	601a      	str	r2, [r3, #0]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f8e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005fa0:	2303      	movs	r3, #3
 8005fa2:	e00f      	b.n	8005fc4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	689a      	ldr	r2, [r3, #8]
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	4013      	ands	r3, r2
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	bf0c      	ite	eq
 8005fb4:	2301      	moveq	r3, #1
 8005fb6:	2300      	movne	r3, #0
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	461a      	mov	r2, r3
 8005fbc:	79fb      	ldrb	r3, [r7, #7]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d1a3      	bne.n	8005f0a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	607a      	str	r2, [r7, #4]
 8005fd8:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8005fda:	e057      	b.n	800608c <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005fe2:	d106      	bne.n	8005ff2 <SPI_WaitFifoStateUntilTimeout+0x26>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d103      	bne.n	8005ff2 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	330c      	adds	r3, #12
 8005ff0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ff8:	d048      	beq.n	800608c <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005ffa:	f7fc f939 	bl	8002270 <HAL_GetTick>
 8005ffe:	4602      	mov	r2, r0
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	683a      	ldr	r2, [r7, #0]
 8006006:	429a      	cmp	r2, r3
 8006008:	d902      	bls.n	8006010 <SPI_WaitFifoStateUntilTimeout+0x44>
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d13d      	bne.n	800608c <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	685a      	ldr	r2, [r3, #4]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800601e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006028:	d111      	bne.n	800604e <SPI_WaitFifoStateUntilTimeout+0x82>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006032:	d004      	beq.n	800603e <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800603c:	d107      	bne.n	800604e <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800604c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006052:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006056:	d10f      	bne.n	8006078 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006066:	601a      	str	r2, [r3, #0]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006076:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006088:	2303      	movs	r3, #3
 800608a:	e008      	b.n	800609e <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	689a      	ldr	r2, [r3, #8]
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	4013      	ands	r3, r2
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	429a      	cmp	r2, r3
 800609a:	d19f      	bne.n	8005fdc <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3710      	adds	r7, #16
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}

080060a6 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b086      	sub	sp, #24
 80060aa:	af02      	add	r7, sp, #8
 80060ac:	60f8      	str	r0, [r7, #12]
 80060ae:	60b9      	str	r1, [r7, #8]
 80060b0:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	9300      	str	r3, [sp, #0]
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	f7ff ff84 	bl	8005fcc <SPI_WaitFifoStateUntilTimeout>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d007      	beq.n	80060da <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060ce:	f043 0220 	orr.w	r2, r3, #32
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e027      	b.n	800612a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	9300      	str	r3, [sp, #0]
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	2200      	movs	r2, #0
 80060e2:	2180      	movs	r1, #128	; 0x80
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f7ff ff07 	bl	8005ef8 <SPI_WaitFlagStateUntilTimeout>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d007      	beq.n	8006100 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060f4:	f043 0220 	orr.w	r2, r3, #32
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80060fc:	2303      	movs	r3, #3
 80060fe:	e014      	b.n	800612a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	9300      	str	r3, [sp, #0]
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	2200      	movs	r2, #0
 8006108:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800610c:	68f8      	ldr	r0, [r7, #12]
 800610e:	f7ff ff5d 	bl	8005fcc <SPI_WaitFifoStateUntilTimeout>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d007      	beq.n	8006128 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800611c:	f043 0220 	orr.w	r2, r3, #32
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006124:	2303      	movs	r3, #3
 8006126:	e000      	b.n	800612a <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b082      	sub	sp, #8
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d101      	bne.n	8006144 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e049      	b.n	80061d8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800614a:	b2db      	uxtb	r3, r3
 800614c:	2b00      	cmp	r3, #0
 800614e:	d106      	bne.n	800615e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f7fb ff37 	bl	8001fcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2202      	movs	r2, #2
 8006162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	3304      	adds	r3, #4
 800616e:	4619      	mov	r1, r3
 8006170:	4610      	mov	r0, r2
 8006172:	f000 fc23 	bl	80069bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2201      	movs	r2, #1
 8006192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2201      	movs	r2, #1
 800619a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2201      	movs	r2, #1
 80061ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2201      	movs	r2, #1
 80061c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2201      	movs	r2, #1
 80061d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3708      	adds	r7, #8
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d001      	beq.n	80061f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e019      	b.n	800622c <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2202      	movs	r2, #2
 80061fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	689a      	ldr	r2, [r3, #8]
 8006206:	4b0c      	ldr	r3, [pc, #48]	; (8006238 <HAL_TIM_Base_Start+0x58>)
 8006208:	4013      	ands	r3, r2
 800620a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2b06      	cmp	r3, #6
 8006210:	d00b      	beq.n	800622a <HAL_TIM_Base_Start+0x4a>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006218:	d007      	beq.n	800622a <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f042 0201 	orr.w	r2, r2, #1
 8006228:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	3714      	adds	r7, #20
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr
 8006238:	00010007 	.word	0x00010007

0800623c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800623c:	b480      	push	{r7}
 800623e:	b085      	sub	sp, #20
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800624a:	b2db      	uxtb	r3, r3
 800624c:	2b01      	cmp	r3, #1
 800624e:	d001      	beq.n	8006254 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e021      	b.n	8006298 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2202      	movs	r2, #2
 8006258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68da      	ldr	r2, [r3, #12]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f042 0201 	orr.w	r2, r2, #1
 800626a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	689a      	ldr	r2, [r3, #8]
 8006272:	4b0c      	ldr	r3, [pc, #48]	; (80062a4 <HAL_TIM_Base_Start_IT+0x68>)
 8006274:	4013      	ands	r3, r2
 8006276:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2b06      	cmp	r3, #6
 800627c:	d00b      	beq.n	8006296 <HAL_TIM_Base_Start_IT+0x5a>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006284:	d007      	beq.n	8006296 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f042 0201 	orr.w	r2, r2, #1
 8006294:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3714      	adds	r7, #20
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr
 80062a4:	00010007 	.word	0x00010007

080062a8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d101      	bne.n	80062bc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e097      	b.n	80063ec <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d106      	bne.n	80062d6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f7fb fe1f 	bl	8001f14 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2202      	movs	r2, #2
 80062da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	6812      	ldr	r2, [r2, #0]
 80062e8:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80062ec:	f023 0307 	bic.w	r3, r3, #7
 80062f0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	3304      	adds	r3, #4
 80062fa:	4619      	mov	r1, r3
 80062fc:	4610      	mov	r0, r2
 80062fe:	f000 fb5d 	bl	80069bc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	699b      	ldr	r3, [r3, #24]
 8006310:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	4313      	orrs	r3, r2
 8006322:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800632a:	f023 0303 	bic.w	r3, r3, #3
 800632e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	689a      	ldr	r2, [r3, #8]
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	699b      	ldr	r3, [r3, #24]
 8006338:	021b      	lsls	r3, r3, #8
 800633a:	4313      	orrs	r3, r2
 800633c:	693a      	ldr	r2, [r7, #16]
 800633e:	4313      	orrs	r3, r2
 8006340:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006348:	f023 030c 	bic.w	r3, r3, #12
 800634c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006354:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006358:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	68da      	ldr	r2, [r3, #12]
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	69db      	ldr	r3, [r3, #28]
 8006362:	021b      	lsls	r3, r3, #8
 8006364:	4313      	orrs	r3, r2
 8006366:	693a      	ldr	r2, [r7, #16]
 8006368:	4313      	orrs	r3, r2
 800636a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	011a      	lsls	r2, r3, #4
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	6a1b      	ldr	r3, [r3, #32]
 8006376:	031b      	lsls	r3, r3, #12
 8006378:	4313      	orrs	r3, r2
 800637a:	693a      	ldr	r2, [r7, #16]
 800637c:	4313      	orrs	r3, r2
 800637e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006386:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800638e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	685a      	ldr	r2, [r3, #4]
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	695b      	ldr	r3, [r3, #20]
 8006398:	011b      	lsls	r3, r3, #4
 800639a:	4313      	orrs	r3, r2
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	4313      	orrs	r3, r2
 80063a0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	697a      	ldr	r2, [r7, #20]
 80063a8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	693a      	ldr	r2, [r7, #16]
 80063b0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2201      	movs	r2, #1
 80063d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2201      	movs	r2, #1
 80063de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3718      	adds	r7, #24
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	f003 0302 	and.w	r3, r3, #2
 8006406:	2b02      	cmp	r3, #2
 8006408:	d122      	bne.n	8006450 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	f003 0302 	and.w	r3, r3, #2
 8006414:	2b02      	cmp	r3, #2
 8006416:	d11b      	bne.n	8006450 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f06f 0202 	mvn.w	r2, #2
 8006420:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2201      	movs	r2, #1
 8006426:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	f003 0303 	and.w	r3, r3, #3
 8006432:	2b00      	cmp	r3, #0
 8006434:	d003      	beq.n	800643e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 faa2 	bl	8006980 <HAL_TIM_IC_CaptureCallback>
 800643c:	e005      	b.n	800644a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 fa94 	bl	800696c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 faa5 	bl	8006994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	f003 0304 	and.w	r3, r3, #4
 800645a:	2b04      	cmp	r3, #4
 800645c:	d122      	bne.n	80064a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	f003 0304 	and.w	r3, r3, #4
 8006468:	2b04      	cmp	r3, #4
 800646a:	d11b      	bne.n	80064a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f06f 0204 	mvn.w	r2, #4
 8006474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2202      	movs	r2, #2
 800647a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	699b      	ldr	r3, [r3, #24]
 8006482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006486:	2b00      	cmp	r3, #0
 8006488:	d003      	beq.n	8006492 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 fa78 	bl	8006980 <HAL_TIM_IC_CaptureCallback>
 8006490:	e005      	b.n	800649e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 fa6a 	bl	800696c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 fa7b 	bl	8006994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	f003 0308 	and.w	r3, r3, #8
 80064ae:	2b08      	cmp	r3, #8
 80064b0:	d122      	bne.n	80064f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	f003 0308 	and.w	r3, r3, #8
 80064bc:	2b08      	cmp	r3, #8
 80064be:	d11b      	bne.n	80064f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f06f 0208 	mvn.w	r2, #8
 80064c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2204      	movs	r2, #4
 80064ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	69db      	ldr	r3, [r3, #28]
 80064d6:	f003 0303 	and.w	r3, r3, #3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d003      	beq.n	80064e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 fa4e 	bl	8006980 <HAL_TIM_IC_CaptureCallback>
 80064e4:	e005      	b.n	80064f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 fa40 	bl	800696c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 fa51 	bl	8006994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	f003 0310 	and.w	r3, r3, #16
 8006502:	2b10      	cmp	r3, #16
 8006504:	d122      	bne.n	800654c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	f003 0310 	and.w	r3, r3, #16
 8006510:	2b10      	cmp	r3, #16
 8006512:	d11b      	bne.n	800654c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f06f 0210 	mvn.w	r2, #16
 800651c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2208      	movs	r2, #8
 8006522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	69db      	ldr	r3, [r3, #28]
 800652a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800652e:	2b00      	cmp	r3, #0
 8006530:	d003      	beq.n	800653a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 fa24 	bl	8006980 <HAL_TIM_IC_CaptureCallback>
 8006538:	e005      	b.n	8006546 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 fa16 	bl	800696c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 fa27 	bl	8006994 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	f003 0301 	and.w	r3, r3, #1
 8006556:	2b01      	cmp	r3, #1
 8006558:	d10e      	bne.n	8006578 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	f003 0301 	and.w	r3, r3, #1
 8006564:	2b01      	cmp	r3, #1
 8006566:	d107      	bne.n	8006578 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f06f 0201 	mvn.w	r2, #1
 8006570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 f9f0 	bl	8006958 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006582:	2b80      	cmp	r3, #128	; 0x80
 8006584:	d10e      	bne.n	80065a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006590:	2b80      	cmp	r3, #128	; 0x80
 8006592:	d107      	bne.n	80065a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800659c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 fd5e 	bl	8007060 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065b2:	d10e      	bne.n	80065d2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065be:	2b80      	cmp	r3, #128	; 0x80
 80065c0:	d107      	bne.n	80065d2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80065ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 fd51 	bl	8007074 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065dc:	2b40      	cmp	r3, #64	; 0x40
 80065de:	d10e      	bne.n	80065fe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ea:	2b40      	cmp	r3, #64	; 0x40
 80065ec:	d107      	bne.n	80065fe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80065f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 f9d5 	bl	80069a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	691b      	ldr	r3, [r3, #16]
 8006604:	f003 0320 	and.w	r3, r3, #32
 8006608:	2b20      	cmp	r3, #32
 800660a:	d10e      	bne.n	800662a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	f003 0320 	and.w	r3, r3, #32
 8006616:	2b20      	cmp	r3, #32
 8006618:	d107      	bne.n	800662a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f06f 0220 	mvn.w	r2, #32
 8006622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 fd11 	bl	800704c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006634:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006638:	d10f      	bne.n	800665a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006644:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006648:	d107      	bne.n	800665a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 fd17 	bl	8007088 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006664:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006668:	d10f      	bne.n	800668a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006674:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006678:	d107      	bne.n	800668a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 fd09 	bl	800709c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006694:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006698:	d10f      	bne.n	80066ba <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066a8:	d107      	bne.n	80066ba <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80066b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 fcfb 	bl	80070b0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80066c8:	d10f      	bne.n	80066ea <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80066d8:	d107      	bne.n	80066ea <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80066e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 fced 	bl	80070c4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066ea:	bf00      	nop
 80066ec:	3708      	adds	r7, #8
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
	...

080066f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006704:	2b01      	cmp	r3, #1
 8006706:	d101      	bne.n	800670c <HAL_TIM_ConfigClockSource+0x18>
 8006708:	2302      	movs	r3, #2
 800670a:	e0d2      	b.n	80068b2 <HAL_TIM_ConfigClockSource+0x1be>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2202      	movs	r2, #2
 8006718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800672a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800672e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006736:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006748:	f000 80a9 	beq.w	800689e <HAL_TIM_ConfigClockSource+0x1aa>
 800674c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006750:	d81a      	bhi.n	8006788 <HAL_TIM_ConfigClockSource+0x94>
 8006752:	2b30      	cmp	r3, #48	; 0x30
 8006754:	f000 809a 	beq.w	800688c <HAL_TIM_ConfigClockSource+0x198>
 8006758:	2b30      	cmp	r3, #48	; 0x30
 800675a:	d809      	bhi.n	8006770 <HAL_TIM_ConfigClockSource+0x7c>
 800675c:	2b10      	cmp	r3, #16
 800675e:	f000 8095 	beq.w	800688c <HAL_TIM_ConfigClockSource+0x198>
 8006762:	2b20      	cmp	r3, #32
 8006764:	f000 8092 	beq.w	800688c <HAL_TIM_ConfigClockSource+0x198>
 8006768:	2b00      	cmp	r3, #0
 800676a:	f000 808f 	beq.w	800688c <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800676e:	e097      	b.n	80068a0 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8006770:	2b50      	cmp	r3, #80	; 0x50
 8006772:	d05b      	beq.n	800682c <HAL_TIM_ConfigClockSource+0x138>
 8006774:	2b50      	cmp	r3, #80	; 0x50
 8006776:	d802      	bhi.n	800677e <HAL_TIM_ConfigClockSource+0x8a>
 8006778:	2b40      	cmp	r3, #64	; 0x40
 800677a:	d077      	beq.n	800686c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800677c:	e090      	b.n	80068a0 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800677e:	2b60      	cmp	r3, #96	; 0x60
 8006780:	d064      	beq.n	800684c <HAL_TIM_ConfigClockSource+0x158>
 8006782:	2b70      	cmp	r3, #112	; 0x70
 8006784:	d028      	beq.n	80067d8 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 8006786:	e08b      	b.n	80068a0 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8006788:	4a4c      	ldr	r2, [pc, #304]	; (80068bc <HAL_TIM_ConfigClockSource+0x1c8>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d07e      	beq.n	800688c <HAL_TIM_ConfigClockSource+0x198>
 800678e:	4a4b      	ldr	r2, [pc, #300]	; (80068bc <HAL_TIM_ConfigClockSource+0x1c8>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d810      	bhi.n	80067b6 <HAL_TIM_ConfigClockSource+0xc2>
 8006794:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006798:	d078      	beq.n	800688c <HAL_TIM_ConfigClockSource+0x198>
 800679a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800679e:	d803      	bhi.n	80067a8 <HAL_TIM_ConfigClockSource+0xb4>
 80067a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067a4:	d02f      	beq.n	8006806 <HAL_TIM_ConfigClockSource+0x112>
      break;
 80067a6:	e07b      	b.n	80068a0 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80067a8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80067ac:	d06e      	beq.n	800688c <HAL_TIM_ConfigClockSource+0x198>
 80067ae:	4a44      	ldr	r2, [pc, #272]	; (80068c0 <HAL_TIM_ConfigClockSource+0x1cc>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d06b      	beq.n	800688c <HAL_TIM_ConfigClockSource+0x198>
      break;
 80067b4:	e074      	b.n	80068a0 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80067b6:	4a43      	ldr	r2, [pc, #268]	; (80068c4 <HAL_TIM_ConfigClockSource+0x1d0>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d067      	beq.n	800688c <HAL_TIM_ConfigClockSource+0x198>
 80067bc:	4a41      	ldr	r2, [pc, #260]	; (80068c4 <HAL_TIM_ConfigClockSource+0x1d0>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d803      	bhi.n	80067ca <HAL_TIM_ConfigClockSource+0xd6>
 80067c2:	4a41      	ldr	r2, [pc, #260]	; (80068c8 <HAL_TIM_ConfigClockSource+0x1d4>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d061      	beq.n	800688c <HAL_TIM_ConfigClockSource+0x198>
      break;
 80067c8:	e06a      	b.n	80068a0 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80067ca:	4a40      	ldr	r2, [pc, #256]	; (80068cc <HAL_TIM_ConfigClockSource+0x1d8>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d05d      	beq.n	800688c <HAL_TIM_ConfigClockSource+0x198>
 80067d0:	4a3f      	ldr	r2, [pc, #252]	; (80068d0 <HAL_TIM_ConfigClockSource+0x1dc>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d05a      	beq.n	800688c <HAL_TIM_ConfigClockSource+0x198>
      break;
 80067d6:	e063      	b.n	80068a0 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6818      	ldr	r0, [r3, #0]
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	6899      	ldr	r1, [r3, #8]
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	685a      	ldr	r2, [r3, #4]
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	f000 fac8 	bl	8006d7c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80067fa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	609a      	str	r2, [r3, #8]
      break;
 8006804:	e04c      	b.n	80068a0 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6818      	ldr	r0, [r3, #0]
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	6899      	ldr	r1, [r3, #8]
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	685a      	ldr	r2, [r3, #4]
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	f000 fab1 	bl	8006d7c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	689a      	ldr	r2, [r3, #8]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006828:	609a      	str	r2, [r3, #8]
      break;
 800682a:	e039      	b.n	80068a0 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6818      	ldr	r0, [r3, #0]
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	6859      	ldr	r1, [r3, #4]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	461a      	mov	r2, r3
 800683a:	f000 fa23 	bl	8006c84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	2150      	movs	r1, #80	; 0x50
 8006844:	4618      	mov	r0, r3
 8006846:	f000 fa7c 	bl	8006d42 <TIM_ITRx_SetConfig>
      break;
 800684a:	e029      	b.n	80068a0 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6818      	ldr	r0, [r3, #0]
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	6859      	ldr	r1, [r3, #4]
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	461a      	mov	r2, r3
 800685a:	f000 fa42 	bl	8006ce2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2160      	movs	r1, #96	; 0x60
 8006864:	4618      	mov	r0, r3
 8006866:	f000 fa6c 	bl	8006d42 <TIM_ITRx_SetConfig>
      break;
 800686a:	e019      	b.n	80068a0 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6818      	ldr	r0, [r3, #0]
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	6859      	ldr	r1, [r3, #4]
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	461a      	mov	r2, r3
 800687a:	f000 fa03 	bl	8006c84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	2140      	movs	r1, #64	; 0x40
 8006884:	4618      	mov	r0, r3
 8006886:	f000 fa5c 	bl	8006d42 <TIM_ITRx_SetConfig>
      break;
 800688a:	e009      	b.n	80068a0 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4619      	mov	r1, r3
 8006896:	4610      	mov	r0, r2
 8006898:	f000 fa53 	bl	8006d42 <TIM_ITRx_SetConfig>
      break;
 800689c:	e000      	b.n	80068a0 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800689e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3710      	adds	r7, #16
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	00100030 	.word	0x00100030
 80068c0:	00100020 	.word	0x00100020
 80068c4:	00100050 	.word	0x00100050
 80068c8:	00100040 	.word	0x00100040
 80068cc:	00100060 	.word	0x00100060
 80068d0:	00100070 	.word	0x00100070

080068d4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d101      	bne.n	80068ec <HAL_TIM_SlaveConfigSynchro+0x18>
 80068e8:	2302      	movs	r3, #2
 80068ea:	e031      	b.n	8006950 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2202      	movs	r2, #2
 80068f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80068fc:	6839      	ldr	r1, [r7, #0]
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 f904 	bl	8006b0c <TIM_SlaveTimer_SetConfig>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d009      	beq.n	800691e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2201      	movs	r2, #1
 800690e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e018      	b.n	8006950 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	68da      	ldr	r2, [r3, #12]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800692c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	68da      	ldr	r2, [r3, #12]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800693c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2201      	movs	r2, #1
 8006942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3708      	adds	r7, #8
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006974:	bf00      	nop
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006988:	bf00      	nop
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800699c:	bf00      	nop
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069b0:	bf00      	nop
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80069bc:	b480      	push	{r7}
 80069be:	b085      	sub	sp, #20
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a46      	ldr	r2, [pc, #280]	; (8006ae8 <TIM_Base_SetConfig+0x12c>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d017      	beq.n	8006a04 <TIM_Base_SetConfig+0x48>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069da:	d013      	beq.n	8006a04 <TIM_Base_SetConfig+0x48>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a43      	ldr	r2, [pc, #268]	; (8006aec <TIM_Base_SetConfig+0x130>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d00f      	beq.n	8006a04 <TIM_Base_SetConfig+0x48>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a42      	ldr	r2, [pc, #264]	; (8006af0 <TIM_Base_SetConfig+0x134>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d00b      	beq.n	8006a04 <TIM_Base_SetConfig+0x48>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a41      	ldr	r2, [pc, #260]	; (8006af4 <TIM_Base_SetConfig+0x138>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d007      	beq.n	8006a04 <TIM_Base_SetConfig+0x48>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a40      	ldr	r2, [pc, #256]	; (8006af8 <TIM_Base_SetConfig+0x13c>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d003      	beq.n	8006a04 <TIM_Base_SetConfig+0x48>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a3f      	ldr	r2, [pc, #252]	; (8006afc <TIM_Base_SetConfig+0x140>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d108      	bne.n	8006a16 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a33      	ldr	r2, [pc, #204]	; (8006ae8 <TIM_Base_SetConfig+0x12c>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d023      	beq.n	8006a66 <TIM_Base_SetConfig+0xaa>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a24:	d01f      	beq.n	8006a66 <TIM_Base_SetConfig+0xaa>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a30      	ldr	r2, [pc, #192]	; (8006aec <TIM_Base_SetConfig+0x130>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d01b      	beq.n	8006a66 <TIM_Base_SetConfig+0xaa>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a2f      	ldr	r2, [pc, #188]	; (8006af0 <TIM_Base_SetConfig+0x134>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d017      	beq.n	8006a66 <TIM_Base_SetConfig+0xaa>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a2e      	ldr	r2, [pc, #184]	; (8006af4 <TIM_Base_SetConfig+0x138>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d013      	beq.n	8006a66 <TIM_Base_SetConfig+0xaa>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a2d      	ldr	r2, [pc, #180]	; (8006af8 <TIM_Base_SetConfig+0x13c>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d00f      	beq.n	8006a66 <TIM_Base_SetConfig+0xaa>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a2d      	ldr	r2, [pc, #180]	; (8006b00 <TIM_Base_SetConfig+0x144>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d00b      	beq.n	8006a66 <TIM_Base_SetConfig+0xaa>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a2c      	ldr	r2, [pc, #176]	; (8006b04 <TIM_Base_SetConfig+0x148>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d007      	beq.n	8006a66 <TIM_Base_SetConfig+0xaa>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a2b      	ldr	r2, [pc, #172]	; (8006b08 <TIM_Base_SetConfig+0x14c>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d003      	beq.n	8006a66 <TIM_Base_SetConfig+0xaa>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a26      	ldr	r2, [pc, #152]	; (8006afc <TIM_Base_SetConfig+0x140>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d108      	bne.n	8006a78 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	695b      	ldr	r3, [r3, #20]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	689a      	ldr	r2, [r3, #8]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a12      	ldr	r2, [pc, #72]	; (8006ae8 <TIM_Base_SetConfig+0x12c>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d013      	beq.n	8006acc <TIM_Base_SetConfig+0x110>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a14      	ldr	r2, [pc, #80]	; (8006af8 <TIM_Base_SetConfig+0x13c>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d00f      	beq.n	8006acc <TIM_Base_SetConfig+0x110>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a14      	ldr	r2, [pc, #80]	; (8006b00 <TIM_Base_SetConfig+0x144>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d00b      	beq.n	8006acc <TIM_Base_SetConfig+0x110>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4a13      	ldr	r2, [pc, #76]	; (8006b04 <TIM_Base_SetConfig+0x148>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d007      	beq.n	8006acc <TIM_Base_SetConfig+0x110>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a12      	ldr	r2, [pc, #72]	; (8006b08 <TIM_Base_SetConfig+0x14c>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d003      	beq.n	8006acc <TIM_Base_SetConfig+0x110>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a0d      	ldr	r2, [pc, #52]	; (8006afc <TIM_Base_SetConfig+0x140>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d103      	bne.n	8006ad4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	691a      	ldr	r2, [r3, #16]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	615a      	str	r2, [r3, #20]
}
 8006ada:	bf00      	nop
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	40012c00 	.word	0x40012c00
 8006aec:	40000400 	.word	0x40000400
 8006af0:	40000800 	.word	0x40000800
 8006af4:	40000c00 	.word	0x40000c00
 8006af8:	40013400 	.word	0x40013400
 8006afc:	40015000 	.word	0x40015000
 8006b00:	40014000 	.word	0x40014000
 8006b04:	40014400 	.word	0x40014400
 8006b08:	40014800 	.word	0x40014800

08006b0c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b086      	sub	sp, #24
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b28:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	697a      	ldr	r2, [r7, #20]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b3a:	f023 0307 	bic.w	r3, r3, #7
 8006b3e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	697a      	ldr	r2, [r7, #20]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	697a      	ldr	r2, [r7, #20]
 8006b50:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	2b70      	cmp	r3, #112	; 0x70
 8006b58:	d034      	beq.n	8006bc4 <TIM_SlaveTimer_SetConfig+0xb8>
 8006b5a:	2b70      	cmp	r3, #112	; 0x70
 8006b5c:	d811      	bhi.n	8006b82 <TIM_SlaveTimer_SetConfig+0x76>
 8006b5e:	2b30      	cmp	r3, #48	; 0x30
 8006b60:	d07d      	beq.n	8006c5e <TIM_SlaveTimer_SetConfig+0x152>
 8006b62:	2b30      	cmp	r3, #48	; 0x30
 8006b64:	d806      	bhi.n	8006b74 <TIM_SlaveTimer_SetConfig+0x68>
 8006b66:	2b10      	cmp	r3, #16
 8006b68:	d079      	beq.n	8006c5e <TIM_SlaveTimer_SetConfig+0x152>
 8006b6a:	2b20      	cmp	r3, #32
 8006b6c:	d077      	beq.n	8006c5e <TIM_SlaveTimer_SetConfig+0x152>
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d075      	beq.n	8006c5e <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 8006b72:	e075      	b.n	8006c60 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8006b74:	2b50      	cmp	r3, #80	; 0x50
 8006b76:	d05e      	beq.n	8006c36 <TIM_SlaveTimer_SetConfig+0x12a>
 8006b78:	2b60      	cmp	r3, #96	; 0x60
 8006b7a:	d066      	beq.n	8006c4a <TIM_SlaveTimer_SetConfig+0x13e>
 8006b7c:	2b40      	cmp	r3, #64	; 0x40
 8006b7e:	d02c      	beq.n	8006bda <TIM_SlaveTimer_SetConfig+0xce>
      break;
 8006b80:	e06e      	b.n	8006c60 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8006b82:	4a3a      	ldr	r2, [pc, #232]	; (8006c6c <TIM_SlaveTimer_SetConfig+0x160>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d06a      	beq.n	8006c5e <TIM_SlaveTimer_SetConfig+0x152>
 8006b88:	4a38      	ldr	r2, [pc, #224]	; (8006c6c <TIM_SlaveTimer_SetConfig+0x160>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d809      	bhi.n	8006ba2 <TIM_SlaveTimer_SetConfig+0x96>
 8006b8e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006b92:	d064      	beq.n	8006c5e <TIM_SlaveTimer_SetConfig+0x152>
 8006b94:	4a36      	ldr	r2, [pc, #216]	; (8006c70 <TIM_SlaveTimer_SetConfig+0x164>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d061      	beq.n	8006c5e <TIM_SlaveTimer_SetConfig+0x152>
 8006b9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b9e:	d05e      	beq.n	8006c5e <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8006ba0:	e05e      	b.n	8006c60 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8006ba2:	4a34      	ldr	r2, [pc, #208]	; (8006c74 <TIM_SlaveTimer_SetConfig+0x168>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d05a      	beq.n	8006c5e <TIM_SlaveTimer_SetConfig+0x152>
 8006ba8:	4a32      	ldr	r2, [pc, #200]	; (8006c74 <TIM_SlaveTimer_SetConfig+0x168>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d803      	bhi.n	8006bb6 <TIM_SlaveTimer_SetConfig+0xaa>
 8006bae:	4a32      	ldr	r2, [pc, #200]	; (8006c78 <TIM_SlaveTimer_SetConfig+0x16c>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d054      	beq.n	8006c5e <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8006bb4:	e054      	b.n	8006c60 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8006bb6:	4a31      	ldr	r2, [pc, #196]	; (8006c7c <TIM_SlaveTimer_SetConfig+0x170>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d050      	beq.n	8006c5e <TIM_SlaveTimer_SetConfig+0x152>
 8006bbc:	4a30      	ldr	r2, [pc, #192]	; (8006c80 <TIM_SlaveTimer_SetConfig+0x174>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d04d      	beq.n	8006c5e <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8006bc2:	e04d      	b.n	8006c60 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6818      	ldr	r0, [r3, #0]
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	68d9      	ldr	r1, [r3, #12]
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	689a      	ldr	r2, [r3, #8]
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	f000 f8d2 	bl	8006d7c <TIM_ETR_SetConfig>
      break;
 8006bd8:	e042      	b.n	8006c60 <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2b05      	cmp	r3, #5
 8006be0:	d004      	beq.n	8006bec <TIM_SlaveTimer_SetConfig+0xe0>
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8006bea:	d101      	bne.n	8006bf0 <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e038      	b.n	8006c62 <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	6a1a      	ldr	r2, [r3, #32]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f022 0201 	bic.w	r2, r2, #1
 8006c06:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c16:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	011b      	lsls	r3, r3, #4
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	693a      	ldr	r2, [r7, #16]
 8006c32:	621a      	str	r2, [r3, #32]
      break;
 8006c34:	e014      	b.n	8006c60 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6818      	ldr	r0, [r3, #0]
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	6899      	ldr	r1, [r3, #8]
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	461a      	mov	r2, r3
 8006c44:	f000 f81e 	bl	8006c84 <TIM_TI1_ConfigInputStage>
      break;
 8006c48:	e00a      	b.n	8006c60 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6818      	ldr	r0, [r3, #0]
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	6899      	ldr	r1, [r3, #8]
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	461a      	mov	r2, r3
 8006c58:	f000 f843 	bl	8006ce2 <TIM_TI2_ConfigInputStage>
      break;
 8006c5c:	e000      	b.n	8006c60 <TIM_SlaveTimer_SetConfig+0x154>
      break;
 8006c5e:	bf00      	nop
  }
  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3718      	adds	r7, #24
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	00100030 	.word	0x00100030
 8006c70:	00100020 	.word	0x00100020
 8006c74:	00100050 	.word	0x00100050
 8006c78:	00100040 	.word	0x00100040
 8006c7c:	00100060 	.word	0x00100060
 8006c80:	00100070 	.word	0x00100070

08006c84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b087      	sub	sp, #28
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6a1b      	ldr	r3, [r3, #32]
 8006c94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6a1b      	ldr	r3, [r3, #32]
 8006c9a:	f023 0201 	bic.w	r2, r3, #1
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	699b      	ldr	r3, [r3, #24]
 8006ca6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	011b      	lsls	r3, r3, #4
 8006cb4:	693a      	ldr	r2, [r7, #16]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	f023 030a 	bic.w	r3, r3, #10
 8006cc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006cc2:	697a      	ldr	r2, [r7, #20]
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	693a      	ldr	r2, [r7, #16]
 8006cce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	697a      	ldr	r2, [r7, #20]
 8006cd4:	621a      	str	r2, [r3, #32]
}
 8006cd6:	bf00      	nop
 8006cd8:	371c      	adds	r7, #28
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr

08006ce2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ce2:	b480      	push	{r7}
 8006ce4:	b087      	sub	sp, #28
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	60f8      	str	r0, [r7, #12]
 8006cea:	60b9      	str	r1, [r7, #8]
 8006cec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6a1b      	ldr	r3, [r3, #32]
 8006cf2:	f023 0210 	bic.w	r2, r3, #16
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	699b      	ldr	r3, [r3, #24]
 8006cfe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6a1b      	ldr	r3, [r3, #32]
 8006d04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	031b      	lsls	r3, r3, #12
 8006d12:	697a      	ldr	r2, [r7, #20]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d1e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	011b      	lsls	r3, r3, #4
 8006d24:	693a      	ldr	r2, [r7, #16]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	697a      	ldr	r2, [r7, #20]
 8006d2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	693a      	ldr	r2, [r7, #16]
 8006d34:	621a      	str	r2, [r3, #32]
}
 8006d36:	bf00      	nop
 8006d38:	371c      	adds	r7, #28
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr

08006d42 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d42:	b480      	push	{r7}
 8006d44:	b085      	sub	sp, #20
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
 8006d4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006d58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d5e:	683a      	ldr	r2, [r7, #0]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	f043 0307 	orr.w	r3, r3, #7
 8006d68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	609a      	str	r2, [r3, #8]
}
 8006d70:	bf00      	nop
 8006d72:	3714      	adds	r7, #20
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b087      	sub	sp, #28
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]
 8006d88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	021a      	lsls	r2, r3, #8
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	431a      	orrs	r2, r3
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	697a      	ldr	r2, [r7, #20]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	697a      	ldr	r2, [r7, #20]
 8006dae:	609a      	str	r2, [r3, #8]
}
 8006db0:	bf00      	nop
 8006db2:	371c      	adds	r7, #28
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d101      	bne.n	8006dd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006dd0:	2302      	movs	r3, #2
 8006dd2:	e074      	b.n	8006ebe <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2202      	movs	r2, #2
 8006de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a34      	ldr	r2, [pc, #208]	; (8006ecc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d009      	beq.n	8006e12 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a33      	ldr	r2, [pc, #204]	; (8006ed0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d004      	beq.n	8006e12 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a31      	ldr	r2, [pc, #196]	; (8006ed4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d108      	bne.n	8006e24 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006e18:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	68fa      	ldr	r2, [r7, #12]
 8006e20:	4313      	orrs	r3, r2
 8006e22:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	68fa      	ldr	r2, [r7, #12]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	68fa      	ldr	r2, [r7, #12]
 8006e40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a21      	ldr	r2, [pc, #132]	; (8006ecc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d022      	beq.n	8006e92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e54:	d01d      	beq.n	8006e92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a1f      	ldr	r2, [pc, #124]	; (8006ed8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d018      	beq.n	8006e92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a1d      	ldr	r2, [pc, #116]	; (8006edc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d013      	beq.n	8006e92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a1c      	ldr	r2, [pc, #112]	; (8006ee0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d00e      	beq.n	8006e92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a15      	ldr	r2, [pc, #84]	; (8006ed0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d009      	beq.n	8006e92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a18      	ldr	r2, [pc, #96]	; (8006ee4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d004      	beq.n	8006e92 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a11      	ldr	r2, [pc, #68]	; (8006ed4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d10c      	bne.n	8006eac <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	68ba      	ldr	r2, [r7, #8]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	68ba      	ldr	r2, [r7, #8]
 8006eaa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3714      	adds	r7, #20
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop
 8006ecc:	40012c00 	.word	0x40012c00
 8006ed0:	40013400 	.word	0x40013400
 8006ed4:	40015000 	.word	0x40015000
 8006ed8:	40000400 	.word	0x40000400
 8006edc:	40000800 	.word	0x40000800
 8006ee0:	40000c00 	.word	0x40000c00
 8006ee4:	40014000 	.word	0x40014000

08006ee8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b085      	sub	sp, #20
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d101      	bne.n	8006f04 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006f00:	2302      	movs	r3, #2
 8006f02:	e096      	b.n	8007032 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	695b      	ldr	r3, [r3, #20]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	699b      	ldr	r3, [r3, #24]
 8006f78:	041b      	lsls	r3, r3, #16
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a2f      	ldr	r2, [pc, #188]	; (8007040 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d009      	beq.n	8006f9c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a2d      	ldr	r2, [pc, #180]	; (8007044 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d004      	beq.n	8006f9c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a2c      	ldr	r2, [pc, #176]	; (8007048 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d106      	bne.n	8006faa <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	69db      	ldr	r3, [r3, #28]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a24      	ldr	r2, [pc, #144]	; (8007040 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d009      	beq.n	8006fc8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a22      	ldr	r2, [pc, #136]	; (8007044 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d004      	beq.n	8006fc8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a21      	ldr	r2, [pc, #132]	; (8007048 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d12b      	bne.n	8007020 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd2:	051b      	lsls	r3, r3, #20
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	6a1b      	ldr	r3, [r3, #32]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a11      	ldr	r2, [pc, #68]	; (8007040 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d009      	beq.n	8007012 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a10      	ldr	r2, [pc, #64]	; (8007044 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d004      	beq.n	8007012 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a0e      	ldr	r2, [pc, #56]	; (8007048 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d106      	bne.n	8007020 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701c:	4313      	orrs	r3, r2
 800701e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007030:	2300      	movs	r3, #0
}
 8007032:	4618      	mov	r0, r3
 8007034:	3714      	adds	r7, #20
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	40012c00 	.word	0x40012c00
 8007044:	40013400 	.word	0x40013400
 8007048:	40015000 	.word	0x40015000

0800704c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007054:	bf00      	nop
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007068:	bf00      	nop
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800707c:	bf00      	nop
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007090:	bf00      	nop
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80070a4:	bf00      	nop
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80070b8:	bf00      	nop
 80070ba:	370c      	adds	r7, #12
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80070cc:	bf00      	nop
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <LL_EXTI_EnableIT_0_31>:
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80070e0:	4b05      	ldr	r3, [pc, #20]	; (80070f8 <LL_EXTI_EnableIT_0_31+0x20>)
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	4904      	ldr	r1, [pc, #16]	; (80070f8 <LL_EXTI_EnableIT_0_31+0x20>)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	600b      	str	r3, [r1, #0]
}
 80070ec:	bf00      	nop
 80070ee:	370c      	adds	r7, #12
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr
 80070f8:	40010400 	.word	0x40010400

080070fc <LL_EXTI_EnableIT_32_63>:
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8007104:	4b05      	ldr	r3, [pc, #20]	; (800711c <LL_EXTI_EnableIT_32_63+0x20>)
 8007106:	6a1a      	ldr	r2, [r3, #32]
 8007108:	4904      	ldr	r1, [pc, #16]	; (800711c <LL_EXTI_EnableIT_32_63+0x20>)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4313      	orrs	r3, r2
 800710e:	620b      	str	r3, [r1, #32]
}
 8007110:	bf00      	nop
 8007112:	370c      	adds	r7, #12
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr
 800711c:	40010400 	.word	0x40010400

08007120 <LL_EXTI_DisableIT_0_31>:
{
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8007128:	4b06      	ldr	r3, [pc, #24]	; (8007144 <LL_EXTI_DisableIT_0_31+0x24>)
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	43db      	mvns	r3, r3
 8007130:	4904      	ldr	r1, [pc, #16]	; (8007144 <LL_EXTI_DisableIT_0_31+0x24>)
 8007132:	4013      	ands	r3, r2
 8007134:	600b      	str	r3, [r1, #0]
}
 8007136:	bf00      	nop
 8007138:	370c      	adds	r7, #12
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	40010400 	.word	0x40010400

08007148 <LL_EXTI_DisableIT_32_63>:
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8007150:	4b06      	ldr	r3, [pc, #24]	; (800716c <LL_EXTI_DisableIT_32_63+0x24>)
 8007152:	6a1a      	ldr	r2, [r3, #32]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	43db      	mvns	r3, r3
 8007158:	4904      	ldr	r1, [pc, #16]	; (800716c <LL_EXTI_DisableIT_32_63+0x24>)
 800715a:	4013      	ands	r3, r2
 800715c:	620b      	str	r3, [r1, #32]
}
 800715e:	bf00      	nop
 8007160:	370c      	adds	r7, #12
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	40010400 	.word	0x40010400

08007170 <LL_EXTI_EnableEvent_0_31>:
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8007178:	4b05      	ldr	r3, [pc, #20]	; (8007190 <LL_EXTI_EnableEvent_0_31+0x20>)
 800717a:	685a      	ldr	r2, [r3, #4]
 800717c:	4904      	ldr	r1, [pc, #16]	; (8007190 <LL_EXTI_EnableEvent_0_31+0x20>)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4313      	orrs	r3, r2
 8007182:	604b      	str	r3, [r1, #4]
}
 8007184:	bf00      	nop
 8007186:	370c      	adds	r7, #12
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr
 8007190:	40010400 	.word	0x40010400

08007194 <LL_EXTI_EnableEvent_32_63>:
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800719c:	4b05      	ldr	r3, [pc, #20]	; (80071b4 <LL_EXTI_EnableEvent_32_63+0x20>)
 800719e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071a0:	4904      	ldr	r1, [pc, #16]	; (80071b4 <LL_EXTI_EnableEvent_32_63+0x20>)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	624b      	str	r3, [r1, #36]	; 0x24
}
 80071a8:	bf00      	nop
 80071aa:	370c      	adds	r7, #12
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr
 80071b4:	40010400 	.word	0x40010400

080071b8 <LL_EXTI_DisableEvent_0_31>:
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80071c0:	4b06      	ldr	r3, [pc, #24]	; (80071dc <LL_EXTI_DisableEvent_0_31+0x24>)
 80071c2:	685a      	ldr	r2, [r3, #4]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	43db      	mvns	r3, r3
 80071c8:	4904      	ldr	r1, [pc, #16]	; (80071dc <LL_EXTI_DisableEvent_0_31+0x24>)
 80071ca:	4013      	ands	r3, r2
 80071cc:	604b      	str	r3, [r1, #4]
}
 80071ce:	bf00      	nop
 80071d0:	370c      	adds	r7, #12
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr
 80071da:	bf00      	nop
 80071dc:	40010400 	.word	0x40010400

080071e0 <LL_EXTI_DisableEvent_32_63>:
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80071e8:	4b06      	ldr	r3, [pc, #24]	; (8007204 <LL_EXTI_DisableEvent_32_63+0x24>)
 80071ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	43db      	mvns	r3, r3
 80071f0:	4904      	ldr	r1, [pc, #16]	; (8007204 <LL_EXTI_DisableEvent_32_63+0x24>)
 80071f2:	4013      	ands	r3, r2
 80071f4:	624b      	str	r3, [r1, #36]	; 0x24
}
 80071f6:	bf00      	nop
 80071f8:	370c      	adds	r7, #12
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop
 8007204:	40010400 	.word	0x40010400

08007208 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8007210:	4b05      	ldr	r3, [pc, #20]	; (8007228 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007212:	689a      	ldr	r2, [r3, #8]
 8007214:	4904      	ldr	r1, [pc, #16]	; (8007228 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4313      	orrs	r3, r2
 800721a:	608b      	str	r3, [r1, #8]
}
 800721c:	bf00      	nop
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr
 8007228:	40010400 	.word	0x40010400

0800722c <LL_EXTI_EnableRisingTrig_32_63>:
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8007234:	4b05      	ldr	r3, [pc, #20]	; (800724c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8007236:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007238:	4904      	ldr	r1, [pc, #16]	; (800724c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4313      	orrs	r3, r2
 800723e:	628b      	str	r3, [r1, #40]	; 0x28
}
 8007240:	bf00      	nop
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr
 800724c:	40010400 	.word	0x40010400

08007250 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8007258:	4b06      	ldr	r3, [pc, #24]	; (8007274 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800725a:	689a      	ldr	r2, [r3, #8]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	43db      	mvns	r3, r3
 8007260:	4904      	ldr	r1, [pc, #16]	; (8007274 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007262:	4013      	ands	r3, r2
 8007264:	608b      	str	r3, [r1, #8]
}
 8007266:	bf00      	nop
 8007268:	370c      	adds	r7, #12
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	40010400 	.word	0x40010400

08007278 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8007280:	4b06      	ldr	r3, [pc, #24]	; (800729c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8007282:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	43db      	mvns	r3, r3
 8007288:	4904      	ldr	r1, [pc, #16]	; (800729c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800728a:	4013      	ands	r3, r2
 800728c:	628b      	str	r3, [r1, #40]	; 0x28
}
 800728e:	bf00      	nop
 8007290:	370c      	adds	r7, #12
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr
 800729a:	bf00      	nop
 800729c:	40010400 	.word	0x40010400

080072a0 <LL_EXTI_EnableFallingTrig_0_31>:
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80072a8:	4b05      	ldr	r3, [pc, #20]	; (80072c0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80072aa:	68da      	ldr	r2, [r3, #12]
 80072ac:	4904      	ldr	r1, [pc, #16]	; (80072c0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	60cb      	str	r3, [r1, #12]
}
 80072b4:	bf00      	nop
 80072b6:	370c      	adds	r7, #12
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr
 80072c0:	40010400 	.word	0x40010400

080072c4 <LL_EXTI_EnableFallingTrig_32_63>:
{
 80072c4:	b480      	push	{r7}
 80072c6:	b083      	sub	sp, #12
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80072cc:	4b05      	ldr	r3, [pc, #20]	; (80072e4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80072ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072d0:	4904      	ldr	r1, [pc, #16]	; (80072e4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80072d8:	bf00      	nop
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr
 80072e4:	40010400 	.word	0x40010400

080072e8 <LL_EXTI_DisableFallingTrig_0_31>:
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80072f0:	4b06      	ldr	r3, [pc, #24]	; (800730c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80072f2:	68da      	ldr	r2, [r3, #12]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	43db      	mvns	r3, r3
 80072f8:	4904      	ldr	r1, [pc, #16]	; (800730c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80072fa:	4013      	ands	r3, r2
 80072fc:	60cb      	str	r3, [r1, #12]
}
 80072fe:	bf00      	nop
 8007300:	370c      	adds	r7, #12
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr
 800730a:	bf00      	nop
 800730c:	40010400 	.word	0x40010400

08007310 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8007318:	4b06      	ldr	r3, [pc, #24]	; (8007334 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800731a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	43db      	mvns	r3, r3
 8007320:	4904      	ldr	r1, [pc, #16]	; (8007334 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8007322:	4013      	ands	r3, r2
 8007324:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8007326:	bf00      	nop
 8007328:	370c      	adds	r7, #12
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop
 8007334:	40010400 	.word	0x40010400

08007338 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8007340:	2300      	movs	r3, #0
 8007342:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	7a1b      	ldrb	r3, [r3, #8]
 8007348:	2b00      	cmp	r3, #0
 800734a:	f000 80c8 	beq.w	80074de <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d05d      	beq.n	8007412 <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	7a5b      	ldrb	r3, [r3, #9]
 800735a:	2b01      	cmp	r3, #1
 800735c:	d00e      	beq.n	800737c <LL_EXTI_Init+0x44>
 800735e:	2b02      	cmp	r3, #2
 8007360:	d017      	beq.n	8007392 <LL_EXTI_Init+0x5a>
 8007362:	2b00      	cmp	r3, #0
 8007364:	d120      	bne.n	80073a8 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4618      	mov	r0, r3
 800736c:	f7ff ff24 	bl	80071b8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4618      	mov	r0, r3
 8007376:	f7ff feaf 	bl	80070d8 <LL_EXTI_EnableIT_0_31>
          break;
 800737a:	e018      	b.n	80073ae <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4618      	mov	r0, r3
 8007382:	f7ff fecd 	bl	8007120 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4618      	mov	r0, r3
 800738c:	f7ff fef0 	bl	8007170 <LL_EXTI_EnableEvent_0_31>
          break;
 8007390:	e00d      	b.n	80073ae <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4618      	mov	r0, r3
 8007398:	f7ff fe9e 	bl	80070d8 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4618      	mov	r0, r3
 80073a2:	f7ff fee5 	bl	8007170 <LL_EXTI_EnableEvent_0_31>
          break;
 80073a6:	e002      	b.n	80073ae <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 80073a8:	2301      	movs	r3, #1
 80073aa:	60fb      	str	r3, [r7, #12]
          break;
 80073ac:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	7a9b      	ldrb	r3, [r3, #10]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d02d      	beq.n	8007412 <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	7a9b      	ldrb	r3, [r3, #10]
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	d00e      	beq.n	80073dc <LL_EXTI_Init+0xa4>
 80073be:	2b03      	cmp	r3, #3
 80073c0:	d017      	beq.n	80073f2 <LL_EXTI_Init+0xba>
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d120      	bne.n	8007408 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7ff ff8c 	bl	80072e8 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4618      	mov	r0, r3
 80073d6:	f7ff ff17 	bl	8007208 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80073da:	e01b      	b.n	8007414 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4618      	mov	r0, r3
 80073e2:	f7ff ff35 	bl	8007250 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7ff ff58 	bl	80072a0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80073f0:	e010      	b.n	8007414 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4618      	mov	r0, r3
 80073f8:	f7ff ff06 	bl	8007208 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4618      	mov	r0, r3
 8007402:	f7ff ff4d 	bl	80072a0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8007406:	e005      	b.n	8007414 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f043 0302 	orr.w	r3, r3, #2
 800740e:	60fb      	str	r3, [r7, #12]
            break;
 8007410:	e000      	b.n	8007414 <LL_EXTI_Init+0xdc>
        }
      }
 8007412:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d075      	beq.n	8007508 <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	7a5b      	ldrb	r3, [r3, #9]
 8007420:	2b01      	cmp	r3, #1
 8007422:	d00e      	beq.n	8007442 <LL_EXTI_Init+0x10a>
 8007424:	2b02      	cmp	r3, #2
 8007426:	d017      	beq.n	8007458 <LL_EXTI_Init+0x120>
 8007428:	2b00      	cmp	r3, #0
 800742a:	d120      	bne.n	800746e <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	4618      	mov	r0, r3
 8007432:	f7ff fed5 	bl	80071e0 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	4618      	mov	r0, r3
 800743c:	f7ff fe5e 	bl	80070fc <LL_EXTI_EnableIT_32_63>
          break;
 8007440:	e01a      	b.n	8007478 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	4618      	mov	r0, r3
 8007448:	f7ff fe7e 	bl	8007148 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	4618      	mov	r0, r3
 8007452:	f7ff fe9f 	bl	8007194 <LL_EXTI_EnableEvent_32_63>
          break;
 8007456:	e00f      	b.n	8007478 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	4618      	mov	r0, r3
 800745e:	f7ff fe4d 	bl	80070fc <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	4618      	mov	r0, r3
 8007468:	f7ff fe94 	bl	8007194 <LL_EXTI_EnableEvent_32_63>
          break;
 800746c:	e004      	b.n	8007478 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f043 0304 	orr.w	r3, r3, #4
 8007474:	60fb      	str	r3, [r7, #12]
          break;
 8007476:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	7a9b      	ldrb	r3, [r3, #10]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d043      	beq.n	8007508 <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	7a9b      	ldrb	r3, [r3, #10]
 8007484:	2b02      	cmp	r3, #2
 8007486:	d00e      	beq.n	80074a6 <LL_EXTI_Init+0x16e>
 8007488:	2b03      	cmp	r3, #3
 800748a:	d017      	beq.n	80074bc <LL_EXTI_Init+0x184>
 800748c:	2b01      	cmp	r3, #1
 800748e:	d120      	bne.n	80074d2 <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	4618      	mov	r0, r3
 8007496:	f7ff ff3b 	bl	8007310 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	4618      	mov	r0, r3
 80074a0:	f7ff fec4 	bl	800722c <LL_EXTI_EnableRisingTrig_32_63>
            break;
 80074a4:	e031      	b.n	800750a <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7ff fee4 	bl	8007278 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7ff ff05 	bl	80072c4 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80074ba:	e026      	b.n	800750a <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	4618      	mov	r0, r3
 80074c2:	f7ff feb3 	bl	800722c <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7ff fefa 	bl	80072c4 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80074d0:	e01b      	b.n	800750a <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f043 0305 	orr.w	r3, r3, #5
 80074d8:	60fb      	str	r3, [r7, #12]
            break;
 80074da:	bf00      	nop
 80074dc:	e015      	b.n	800750a <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4618      	mov	r0, r3
 80074e4:	f7ff fe1c 	bl	8007120 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4618      	mov	r0, r3
 80074ee:	f7ff fe63 	bl	80071b8 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	4618      	mov	r0, r3
 80074f8:	f7ff fe26 	bl	8007148 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	4618      	mov	r0, r3
 8007502:	f7ff fe6d 	bl	80071e0 <LL_EXTI_DisableEvent_32_63>
 8007506:	e000      	b.n	800750a <LL_EXTI_Init+0x1d2>
      }
 8007508:	bf00      	nop
  }

  return status;
 800750a:	68fb      	ldr	r3, [r7, #12]
}
 800750c:	4618      	mov	r0, r3
 800750e:	3710      	adds	r7, #16
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <LL_GPIO_SetPinMode>:
{
 8007514:	b480      	push	{r7}
 8007516:	b089      	sub	sp, #36	; 0x24
 8007518:	af00      	add	r7, sp, #0
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	fa93 f3a3 	rbit	r3, r3
 800752e:	613b      	str	r3, [r7, #16]
  return result;
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	fab3 f383 	clz	r3, r3
 8007536:	b2db      	uxtb	r3, r3
 8007538:	005b      	lsls	r3, r3, #1
 800753a:	2103      	movs	r1, #3
 800753c:	fa01 f303 	lsl.w	r3, r1, r3
 8007540:	43db      	mvns	r3, r3
 8007542:	401a      	ands	r2, r3
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	fa93 f3a3 	rbit	r3, r3
 800754e:	61bb      	str	r3, [r7, #24]
  return result;
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	fab3 f383 	clz	r3, r3
 8007556:	b2db      	uxtb	r3, r3
 8007558:	005b      	lsls	r3, r3, #1
 800755a:	6879      	ldr	r1, [r7, #4]
 800755c:	fa01 f303 	lsl.w	r3, r1, r3
 8007560:	431a      	orrs	r2, r3
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	601a      	str	r2, [r3, #0]
}
 8007566:	bf00      	nop
 8007568:	3724      	adds	r7, #36	; 0x24
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr

08007572 <LL_GPIO_SetPinOutputType>:
{
 8007572:	b480      	push	{r7}
 8007574:	b085      	sub	sp, #20
 8007576:	af00      	add	r7, sp, #0
 8007578:	60f8      	str	r0, [r7, #12]
 800757a:	60b9      	str	r1, [r7, #8]
 800757c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	685a      	ldr	r2, [r3, #4]
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	43db      	mvns	r3, r3
 8007586:	401a      	ands	r2, r3
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	6879      	ldr	r1, [r7, #4]
 800758c:	fb01 f303 	mul.w	r3, r1, r3
 8007590:	431a      	orrs	r2, r3
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	605a      	str	r2, [r3, #4]
}
 8007596:	bf00      	nop
 8007598:	3714      	adds	r7, #20
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr

080075a2 <LL_GPIO_SetPinSpeed>:
{
 80075a2:	b480      	push	{r7}
 80075a4:	b089      	sub	sp, #36	; 0x24
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	60f8      	str	r0, [r7, #12]
 80075aa:	60b9      	str	r1, [r7, #8]
 80075ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	689a      	ldr	r2, [r3, #8]
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	fa93 f3a3 	rbit	r3, r3
 80075bc:	613b      	str	r3, [r7, #16]
  return result;
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	fab3 f383 	clz	r3, r3
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	005b      	lsls	r3, r3, #1
 80075c8:	2103      	movs	r1, #3
 80075ca:	fa01 f303 	lsl.w	r3, r1, r3
 80075ce:	43db      	mvns	r3, r3
 80075d0:	401a      	ands	r2, r3
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	fa93 f3a3 	rbit	r3, r3
 80075dc:	61bb      	str	r3, [r7, #24]
  return result;
 80075de:	69bb      	ldr	r3, [r7, #24]
 80075e0:	fab3 f383 	clz	r3, r3
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	005b      	lsls	r3, r3, #1
 80075e8:	6879      	ldr	r1, [r7, #4]
 80075ea:	fa01 f303 	lsl.w	r3, r1, r3
 80075ee:	431a      	orrs	r2, r3
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	609a      	str	r2, [r3, #8]
}
 80075f4:	bf00      	nop
 80075f6:	3724      	adds	r7, #36	; 0x24
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <LL_GPIO_SetPinPull>:
{
 8007600:	b480      	push	{r7}
 8007602:	b089      	sub	sp, #36	; 0x24
 8007604:	af00      	add	r7, sp, #0
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	60b9      	str	r1, [r7, #8]
 800760a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	68da      	ldr	r2, [r3, #12]
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	fa93 f3a3 	rbit	r3, r3
 800761a:	613b      	str	r3, [r7, #16]
  return result;
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	fab3 f383 	clz	r3, r3
 8007622:	b2db      	uxtb	r3, r3
 8007624:	005b      	lsls	r3, r3, #1
 8007626:	2103      	movs	r1, #3
 8007628:	fa01 f303 	lsl.w	r3, r1, r3
 800762c:	43db      	mvns	r3, r3
 800762e:	401a      	ands	r2, r3
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	fa93 f3a3 	rbit	r3, r3
 800763a:	61bb      	str	r3, [r7, #24]
  return result;
 800763c:	69bb      	ldr	r3, [r7, #24]
 800763e:	fab3 f383 	clz	r3, r3
 8007642:	b2db      	uxtb	r3, r3
 8007644:	005b      	lsls	r3, r3, #1
 8007646:	6879      	ldr	r1, [r7, #4]
 8007648:	fa01 f303 	lsl.w	r3, r1, r3
 800764c:	431a      	orrs	r2, r3
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	60da      	str	r2, [r3, #12]
}
 8007652:	bf00      	nop
 8007654:	3724      	adds	r7, #36	; 0x24
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr

0800765e <LL_GPIO_SetAFPin_0_7>:
{
 800765e:	b480      	push	{r7}
 8007660:	b089      	sub	sp, #36	; 0x24
 8007662:	af00      	add	r7, sp, #0
 8007664:	60f8      	str	r0, [r7, #12]
 8007666:	60b9      	str	r1, [r7, #8]
 8007668:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	6a1a      	ldr	r2, [r3, #32]
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	fa93 f3a3 	rbit	r3, r3
 8007678:	613b      	str	r3, [r7, #16]
  return result;
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	fab3 f383 	clz	r3, r3
 8007680:	b2db      	uxtb	r3, r3
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	210f      	movs	r1, #15
 8007686:	fa01 f303 	lsl.w	r3, r1, r3
 800768a:	43db      	mvns	r3, r3
 800768c:	401a      	ands	r2, r3
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	fa93 f3a3 	rbit	r3, r3
 8007698:	61bb      	str	r3, [r7, #24]
  return result;
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	fab3 f383 	clz	r3, r3
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	6879      	ldr	r1, [r7, #4]
 80076a6:	fa01 f303 	lsl.w	r3, r1, r3
 80076aa:	431a      	orrs	r2, r3
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	621a      	str	r2, [r3, #32]
}
 80076b0:	bf00      	nop
 80076b2:	3724      	adds	r7, #36	; 0x24
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <LL_GPIO_SetAFPin_8_15>:
{
 80076bc:	b480      	push	{r7}
 80076be:	b089      	sub	sp, #36	; 0x24
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	0a1b      	lsrs	r3, r3, #8
 80076d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	fa93 f3a3 	rbit	r3, r3
 80076d8:	613b      	str	r3, [r7, #16]
  return result;
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	fab3 f383 	clz	r3, r3
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	210f      	movs	r1, #15
 80076e6:	fa01 f303 	lsl.w	r3, r1, r3
 80076ea:	43db      	mvns	r3, r3
 80076ec:	401a      	ands	r2, r3
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	0a1b      	lsrs	r3, r3, #8
 80076f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	fa93 f3a3 	rbit	r3, r3
 80076fa:	61bb      	str	r3, [r7, #24]
  return result;
 80076fc:	69bb      	ldr	r3, [r7, #24]
 80076fe:	fab3 f383 	clz	r3, r3
 8007702:	b2db      	uxtb	r3, r3
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	6879      	ldr	r1, [r7, #4]
 8007708:	fa01 f303 	lsl.w	r3, r1, r3
 800770c:	431a      	orrs	r2, r3
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	625a      	str	r2, [r3, #36]	; 0x24
}
 8007712:	bf00      	nop
 8007714:	3724      	adds	r7, #36	; 0x24
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr

0800771e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800771e:	b580      	push	{r7, lr}
 8007720:	b086      	sub	sp, #24
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
 8007726:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	fa93 f3a3 	rbit	r3, r3
 8007734:	60bb      	str	r3, [r7, #8]
  return result;
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	fab3 f383 	clz	r3, r3
 800773c:	b2db      	uxtb	r3, r3
 800773e:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007740:	e040      	b.n	80077c4 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	2101      	movs	r1, #1
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	fa01 f303 	lsl.w	r3, r1, r3
 800774e:	4013      	ands	r3, r2
 8007750:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d032      	beq.n	80077be <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	461a      	mov	r2, r3
 800775e:	6939      	ldr	r1, [r7, #16]
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f7ff fed7 	bl	8007514 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	2b01      	cmp	r3, #1
 800776c:	d003      	beq.n	8007776 <LL_GPIO_Init+0x58>
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	2b02      	cmp	r3, #2
 8007774:	d106      	bne.n	8007784 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	461a      	mov	r2, r3
 800777c:	6939      	ldr	r1, [r7, #16]
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f7ff ff0f 	bl	80075a2 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	461a      	mov	r2, r3
 800778a:	6939      	ldr	r1, [r7, #16]
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f7ff ff37 	bl	8007600 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	2b02      	cmp	r3, #2
 8007798:	d111      	bne.n	80077be <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	2bff      	cmp	r3, #255	; 0xff
 800779e:	d807      	bhi.n	80077b0 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	695b      	ldr	r3, [r3, #20]
 80077a4:	461a      	mov	r2, r3
 80077a6:	6939      	ldr	r1, [r7, #16]
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f7ff ff58 	bl	800765e <LL_GPIO_SetAFPin_0_7>
 80077ae:	e006      	b.n	80077be <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	695b      	ldr	r3, [r3, #20]
 80077b4:	461a      	mov	r2, r3
 80077b6:	6939      	ldr	r1, [r7, #16]
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f7ff ff7f 	bl	80076bc <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	3301      	adds	r3, #1
 80077c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	fa22 f303 	lsr.w	r3, r2, r3
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d1b7      	bne.n	8007742 <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d003      	beq.n	80077e2 <LL_GPIO_Init+0xc4>
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	2b02      	cmp	r3, #2
 80077e0:	d107      	bne.n	80077f2 <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	6819      	ldr	r1, [r3, #0]
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	461a      	mov	r2, r3
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f7ff fec0 	bl	8007572 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80077f2:	2300      	movs	r3, #0
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3718      	adds	r7, #24
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 */

void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint8_t border_colour)
{
 80077fc:	b590      	push	{r4, r7, lr}
 80077fe:	b087      	sub	sp, #28
 8007800:	af02      	add	r7, sp, #8
 8007802:	4604      	mov	r4, r0
 8007804:	4608      	mov	r0, r1
 8007806:	4611      	mov	r1, r2
 8007808:	461a      	mov	r2, r3
 800780a:	4623      	mov	r3, r4
 800780c:	80fb      	strh	r3, [r7, #6]
 800780e:	4603      	mov	r3, r0
 8007810:	80bb      	strh	r3, [r7, #4]
 8007812:	460b      	mov	r3, r1
 8007814:	807b      	strh	r3, [r7, #2]
 8007816:	4613      	mov	r3, r2
 8007818:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 800781a:	2300      	movs	r3, #0
 800781c:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 800781e:	7bfa      	ldrb	r2, [r7, #15]
 8007820:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007824:	429a      	cmp	r2, r3
 8007826:	d93a      	bls.n	800789e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa2>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 8007828:	88ba      	ldrh	r2, [r7, #4]
 800782a:	7bfb      	ldrb	r3, [r7, #15]
 800782c:	441a      	add	r2, r3
 800782e:	88b9      	ldrh	r1, [r7, #4]
 8007830:	883b      	ldrh	r3, [r7, #0]
 8007832:	4419      	add	r1, r3
 8007834:	7bfb      	ldrb	r3, [r7, #15]
 8007836:	1acb      	subs	r3, r1, r3
 8007838:	429a      	cmp	r2, r3
 800783a:	f000 8090 	beq.w	800795e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
 800783e:	88fa      	ldrh	r2, [r7, #6]
 8007840:	7bfb      	ldrb	r3, [r7, #15]
 8007842:	441a      	add	r2, r3
 8007844:	88f9      	ldrh	r1, [r7, #6]
 8007846:	887b      	ldrh	r3, [r7, #2]
 8007848:	4419      	add	r1, r3
 800784a:	7bfb      	ldrb	r3, [r7, #15]
 800784c:	1acb      	subs	r3, r1, r3
 800784e:	429a      	cmp	r2, r3
 8007850:	f000 8085 	beq.w	800795e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 8007854:	7bfb      	ldrb	r3, [r7, #15]
 8007856:	b29a      	uxth	r2, r3
 8007858:	88fb      	ldrh	r3, [r7, #6]
 800785a:	4413      	add	r3, r2
 800785c:	b298      	uxth	r0, r3
 800785e:	7bfb      	ldrb	r3, [r7, #15]
 8007860:	b29a      	uxth	r2, r3
 8007862:	88bb      	ldrh	r3, [r7, #4]
 8007864:	4413      	add	r3, r2
 8007866:	b299      	uxth	r1, r3
 8007868:	7bfb      	ldrb	r3, [r7, #15]
 800786a:	b29b      	uxth	r3, r3
 800786c:	005b      	lsls	r3, r3, #1
 800786e:	b29b      	uxth	r3, r3
 8007870:	887a      	ldrh	r2, [r7, #2]
 8007872:	1ad3      	subs	r3, r2, r3
 8007874:	b29b      	uxth	r3, r3
 8007876:	3301      	adds	r3, #1
 8007878:	b29c      	uxth	r4, r3
 800787a:	7bfb      	ldrb	r3, [r7, #15]
 800787c:	b29b      	uxth	r3, r3
 800787e:	005b      	lsls	r3, r3, #1
 8007880:	b29b      	uxth	r3, r3
 8007882:	883a      	ldrh	r2, [r7, #0]
 8007884:	1ad3      	subs	r3, r2, r3
 8007886:	b29b      	uxth	r3, r3
 8007888:	3301      	adds	r3, #1
 800788a:	b29a      	uxth	r2, r3
 800788c:	2304      	movs	r3, #4
 800788e:	9301      	str	r3, [sp, #4]
 8007890:	8c3b      	ldrh	r3, [r7, #32]
 8007892:	9300      	str	r3, [sp, #0]
 8007894:	4613      	mov	r3, r2
 8007896:	4622      	mov	r2, r4
 8007898:	f000 fd32 	bl	8008300 <ILI9341_Draw_Rectangle>
				goto finish;
 800789c:	e060      	b.n	8007960 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x164>
			}
		}

		// Horizontal lines
		ILI9341_Draw_Horizontal_Line(	x + b,
 800789e:	7bfb      	ldrb	r3, [r7, #15]
 80078a0:	b29a      	uxth	r2, r3
 80078a2:	88fb      	ldrh	r3, [r7, #6]
 80078a4:	4413      	add	r3, r2
 80078a6:	b298      	uxth	r0, r3
 80078a8:	7bfb      	ldrb	r3, [r7, #15]
 80078aa:	b29a      	uxth	r2, r3
 80078ac:	88bb      	ldrh	r3, [r7, #4]
 80078ae:	4413      	add	r3, r2
 80078b0:	b299      	uxth	r1, r3
 80078b2:	7bfb      	ldrb	r3, [r7, #15]
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	005b      	lsls	r3, r3, #1
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	887a      	ldrh	r2, [r7, #2]
 80078bc:	1ad3      	subs	r3, r2, r3
 80078be:	b29a      	uxth	r2, r3
 80078c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	f000 fda1 	bl	800840c <ILI9341_Draw_Horizontal_Line>
										y + b,
										w - (2*b),
										border_colour);

		ILI9341_Draw_Horizontal_Line(	x + b,
 80078ca:	7bfb      	ldrb	r3, [r7, #15]
 80078cc:	b29a      	uxth	r2, r3
 80078ce:	88fb      	ldrh	r3, [r7, #6]
 80078d0:	4413      	add	r3, r2
 80078d2:	b298      	uxth	r0, r3
										(y + h) - b,
 80078d4:	88ba      	ldrh	r2, [r7, #4]
 80078d6:	883b      	ldrh	r3, [r7, #0]
 80078d8:	4413      	add	r3, r2
 80078da:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 80078dc:	7bfb      	ldrb	r3, [r7, #15]
 80078de:	b29b      	uxth	r3, r3
 80078e0:	1ad3      	subs	r3, r2, r3
 80078e2:	b299      	uxth	r1, r3
 80078e4:	7bfb      	ldrb	r3, [r7, #15]
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	887a      	ldrh	r2, [r7, #2]
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	f000 fd8a 	bl	800840c <ILI9341_Draw_Horizontal_Line>
										w - (b),
										border_colour);


		// Vertical lines
		ILI9341_Draw_Vertical_Line(		x + b,
 80078f8:	7bfb      	ldrb	r3, [r7, #15]
 80078fa:	b29a      	uxth	r2, r3
 80078fc:	88fb      	ldrh	r3, [r7, #6]
 80078fe:	4413      	add	r3, r2
 8007900:	b298      	uxth	r0, r3
 8007902:	7bfb      	ldrb	r3, [r7, #15]
 8007904:	b29a      	uxth	r2, r3
 8007906:	88bb      	ldrh	r3, [r7, #4]
 8007908:	4413      	add	r3, r2
 800790a:	b299      	uxth	r1, r3
 800790c:	7bfb      	ldrb	r3, [r7, #15]
 800790e:	b29b      	uxth	r3, r3
 8007910:	005b      	lsls	r3, r3, #1
 8007912:	b29b      	uxth	r3, r3
 8007914:	883a      	ldrh	r2, [r7, #0]
 8007916:	1ad3      	subs	r3, r2, r3
 8007918:	b29a      	uxth	r2, r3
 800791a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800791e:	b29b      	uxth	r3, r3
 8007920:	f000 fdbc 	bl	800849c <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);

		ILI9341_Draw_Vertical_Line(		(x + w) - b,
 8007924:	88fa      	ldrh	r2, [r7, #6]
 8007926:	887b      	ldrh	r3, [r7, #2]
 8007928:	4413      	add	r3, r2
 800792a:	b29a      	uxth	r2, r3
 800792c:	7bfb      	ldrb	r3, [r7, #15]
 800792e:	b29b      	uxth	r3, r3
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	b298      	uxth	r0, r3
 8007934:	7bfb      	ldrb	r3, [r7, #15]
 8007936:	b29a      	uxth	r2, r3
 8007938:	88bb      	ldrh	r3, [r7, #4]
 800793a:	4413      	add	r3, r2
 800793c:	b299      	uxth	r1, r3
 800793e:	7bfb      	ldrb	r3, [r7, #15]
 8007940:	b29b      	uxth	r3, r3
 8007942:	005b      	lsls	r3, r3, #1
 8007944:	b29b      	uxth	r3, r3
 8007946:	883a      	ldrh	r2, [r7, #0]
 8007948:	1ad3      	subs	r3, r2, r3
 800794a:	b29a      	uxth	r2, r3
 800794c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007950:	b29b      	uxth	r3, r3
 8007952:	f000 fda3 	bl	800849c <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 8007956:	7bfb      	ldrb	r3, [r7, #15]
 8007958:	3301      	adds	r3, #1
 800795a:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 800795c:	e75f      	b.n	800781e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 800795e:	bf00      	nop
	// done
	return;
 8007960:	bf00      	nop
}
 8007962:	3714      	adds	r7, #20
 8007964:	46bd      	mov	sp, r7
 8007966:	bd90      	pop	{r4, r7, pc}

08007968 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8007968:	b590      	push	{r4, r7, lr}
 800796a:	b089      	sub	sp, #36	; 0x24
 800796c:	af02      	add	r7, sp, #8
 800796e:	4604      	mov	r4, r0
 8007970:	4608      	mov	r0, r1
 8007972:	4611      	mov	r1, r2
 8007974:	461a      	mov	r2, r3
 8007976:	4623      	mov	r3, r4
 8007978:	71fb      	strb	r3, [r7, #7]
 800797a:	4603      	mov	r3, r0
 800797c:	80bb      	strh	r3, [r7, #4]
 800797e:	460b      	mov	r3, r1
 8007980:	807b      	strh	r3, [r7, #2]
 8007982:	4613      	mov	r3, r2
 8007984:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 8007986:	79fb      	ldrb	r3, [r7, #7]
 8007988:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 800798a:	7dfb      	ldrb	r3, [r7, #23]
 800798c:	2b1f      	cmp	r3, #31
 800798e:	d802      	bhi.n	8007996 <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 8007990:	2300      	movs	r3, #0
 8007992:	71fb      	strb	r3, [r7, #7]
 8007994:	e002      	b.n	800799c <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 8007996:	7dfb      	ldrb	r3, [r7, #23]
 8007998:	3b20      	subs	r3, #32
 800799a:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800799c:	2300      	movs	r3, #0
 800799e:	753b      	strb	r3, [r7, #20]
 80079a0:	e012      	b.n	80079c8 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 80079a2:	7dfa      	ldrb	r2, [r7, #23]
 80079a4:	7d38      	ldrb	r0, [r7, #20]
 80079a6:	7d39      	ldrb	r1, [r7, #20]
 80079a8:	4c48      	ldr	r4, [pc, #288]	; (8007acc <ILI9341_Draw_Char+0x164>)
 80079aa:	4613      	mov	r3, r2
 80079ac:	005b      	lsls	r3, r3, #1
 80079ae:	4413      	add	r3, r2
 80079b0:	005b      	lsls	r3, r3, #1
 80079b2:	4423      	add	r3, r4
 80079b4:	4403      	add	r3, r0
 80079b6:	781a      	ldrb	r2, [r3, #0]
 80079b8:	f107 0318 	add.w	r3, r7, #24
 80079bc:	440b      	add	r3, r1
 80079be:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80079c2:	7d3b      	ldrb	r3, [r7, #20]
 80079c4:	3301      	adds	r3, #1
 80079c6:	753b      	strb	r3, [r7, #20]
 80079c8:	7d3b      	ldrb	r3, [r7, #20]
 80079ca:	2b05      	cmp	r3, #5
 80079cc:	d9e9      	bls.n	80079a2 <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 80079ce:	2300      	movs	r3, #0
 80079d0:	757b      	strb	r3, [r7, #21]
 80079d2:	e074      	b.n	8007abe <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 80079d4:	2300      	movs	r3, #0
 80079d6:	75bb      	strb	r3, [r7, #22]
 80079d8:	e06b      	b.n	8007ab2 <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 80079da:	7d7b      	ldrb	r3, [r7, #21]
 80079dc:	f107 0218 	add.w	r2, r7, #24
 80079e0:	4413      	add	r3, r2
 80079e2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80079e6:	461a      	mov	r2, r3
 80079e8:	7dbb      	ldrb	r3, [r7, #22]
 80079ea:	fa42 f303 	asr.w	r3, r2, r3
 80079ee:	f003 0301 	and.w	r3, r3, #1
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d02d      	beq.n	8007a52 <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 80079f6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d10e      	bne.n	8007a1a <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 80079fc:	7d7b      	ldrb	r3, [r7, #21]
 80079fe:	b29a      	uxth	r2, r3
 8007a00:	88bb      	ldrh	r3, [r7, #4]
 8007a02:	4413      	add	r3, r2
 8007a04:	b298      	uxth	r0, r3
 8007a06:	7dbb      	ldrb	r3, [r7, #22]
 8007a08:	b29a      	uxth	r2, r3
 8007a0a:	887b      	ldrh	r3, [r7, #2]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	883a      	ldrh	r2, [r7, #0]
 8007a12:	4619      	mov	r1, r3
 8007a14:	f000 fb9a 	bl	800814c <ILI9341_Draw_Pixel>
 8007a18:	e048      	b.n	8007aac <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 8007a1a:	7d7b      	ldrb	r3, [r7, #21]
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007a20:	fb12 f303 	smulbb	r3, r2, r3
 8007a24:	b29a      	uxth	r2, r3
 8007a26:	88bb      	ldrh	r3, [r7, #4]
 8007a28:	4413      	add	r3, r2
 8007a2a:	b298      	uxth	r0, r3
 8007a2c:	7dbb      	ldrb	r3, [r7, #22]
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007a32:	fb12 f303 	smulbb	r3, r2, r3
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	887b      	ldrh	r3, [r7, #2]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	b299      	uxth	r1, r3
 8007a3e:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8007a40:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007a42:	2301      	movs	r3, #1
 8007a44:	9301      	str	r3, [sp, #4]
 8007a46:	883b      	ldrh	r3, [r7, #0]
 8007a48:	9300      	str	r3, [sp, #0]
 8007a4a:	4623      	mov	r3, r4
 8007a4c:	f000 fc58 	bl	8008300 <ILI9341_Draw_Rectangle>
 8007a50:	e02c      	b.n	8007aac <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 8007a52:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d10e      	bne.n	8007a76 <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 8007a58:	7d7b      	ldrb	r3, [r7, #21]
 8007a5a:	b29a      	uxth	r2, r3
 8007a5c:	88bb      	ldrh	r3, [r7, #4]
 8007a5e:	4413      	add	r3, r2
 8007a60:	b298      	uxth	r0, r3
 8007a62:	7dbb      	ldrb	r3, [r7, #22]
 8007a64:	b29a      	uxth	r2, r3
 8007a66:	887b      	ldrh	r3, [r7, #2]
 8007a68:	4413      	add	r3, r2
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8007a6e:	4619      	mov	r1, r3
 8007a70:	f000 fb6c 	bl	800814c <ILI9341_Draw_Pixel>
 8007a74:	e01a      	b.n	8007aac <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 8007a76:	7d7b      	ldrb	r3, [r7, #21]
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007a7c:	fb12 f303 	smulbb	r3, r2, r3
 8007a80:	b29a      	uxth	r2, r3
 8007a82:	88bb      	ldrh	r3, [r7, #4]
 8007a84:	4413      	add	r3, r2
 8007a86:	b298      	uxth	r0, r3
 8007a88:	7dbb      	ldrb	r3, [r7, #22]
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007a8e:	fb12 f303 	smulbb	r3, r2, r3
 8007a92:	b29a      	uxth	r2, r3
 8007a94:	887b      	ldrh	r3, [r7, #2]
 8007a96:	4413      	add	r3, r2
 8007a98:	b299      	uxth	r1, r3
 8007a9a:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8007a9c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	9301      	str	r3, [sp, #4]
 8007aa2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007aa4:	9300      	str	r3, [sp, #0]
 8007aa6:	4623      	mov	r3, r4
 8007aa8:	f000 fc2a 	bl	8008300 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 8007aac:	7dbb      	ldrb	r3, [r7, #22]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	75bb      	strb	r3, [r7, #22]
 8007ab2:	7dbb      	ldrb	r3, [r7, #22]
 8007ab4:	2b07      	cmp	r3, #7
 8007ab6:	d990      	bls.n	80079da <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 8007ab8:	7d7b      	ldrb	r3, [r7, #21]
 8007aba:	3301      	adds	r3, #1
 8007abc:	757b      	strb	r3, [r7, #21]
 8007abe:	7d7b      	ldrb	r3, [r7, #21]
 8007ac0:	2b05      	cmp	r3, #5
 8007ac2:	d987      	bls.n	80079d4 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 8007ac4:	bf00      	nop
 8007ac6:	371c      	adds	r7, #28
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd90      	pop	{r4, r7, pc}
 8007acc:	08009900 	.word	0x08009900

08007ad0 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8007ad0:	b590      	push	{r4, r7, lr}
 8007ad2:	b087      	sub	sp, #28
 8007ad4:	af02      	add	r7, sp, #8
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	4608      	mov	r0, r1
 8007ada:	4611      	mov	r1, r2
 8007adc:	461a      	mov	r2, r3
 8007ade:	4603      	mov	r3, r0
 8007ae0:	817b      	strh	r3, [r7, #10]
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	813b      	strh	r3, [r7, #8]
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	80fb      	strh	r3, [r7, #6]
    /*if(size & 1)
    {
    	size = ((size >> 1) * 2);
    }*/

    while (*Text) {
 8007aea:	e016      	b.n	8007b1a <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	1c5a      	adds	r2, r3, #1
 8007af0:	60fa      	str	r2, [r7, #12]
 8007af2:	7818      	ldrb	r0, [r3, #0]
 8007af4:	88fc      	ldrh	r4, [r7, #6]
 8007af6:	893a      	ldrh	r2, [r7, #8]
 8007af8:	8979      	ldrh	r1, [r7, #10]
 8007afa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007afc:	9301      	str	r3, [sp, #4]
 8007afe:	8c3b      	ldrh	r3, [r7, #32]
 8007b00:	9300      	str	r3, [sp, #0]
 8007b02:	4623      	mov	r3, r4
 8007b04:	f7ff ff30 	bl	8007968 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 8007b08:	8c3b      	ldrh	r3, [r7, #32]
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	0052      	lsls	r2, r2, #1
 8007b0e:	4413      	add	r3, r2
 8007b10:	005b      	lsls	r3, r3, #1
 8007b12:	b29a      	uxth	r2, r3
 8007b14:	897b      	ldrh	r3, [r7, #10]
 8007b16:	4413      	add	r3, r2
 8007b18:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d1e4      	bne.n	8007aec <ILI9341_Draw_Text+0x1c>
    }


}
 8007b22:	bf00      	nop
 8007b24:	3714      	adds	r7, #20
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd90      	pop	{r4, r7, pc}
	...

08007b2c <ILI9341_SPI_Init>:



/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	af00      	add	r7, sp, #0

	//GPIO INIT
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007b30:	4b05      	ldr	r3, [pc, #20]	; (8007b48 <ILI9341_SPI_Init+0x1c>)
 8007b32:	695b      	ldr	r3, [r3, #20]
 8007b34:	4a04      	ldr	r2, [pc, #16]	; (8007b48 <ILI9341_SPI_Init+0x1c>)
 8007b36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b3a:	6153      	str	r3, [r2, #20]
}
 8007b3c:	bf00      	nop
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr
 8007b46:	bf00      	nop
 8007b48:	48000400 	.word	0x48000400

08007b4c <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	4603      	mov	r3, r0
 8007b54:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef res;

		if( ((res = HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1)) != HAL_OK) )
 8007b56:	1df9      	adds	r1, r7, #7
 8007b58:	2301      	movs	r3, #1
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	4804      	ldr	r0, [pc, #16]	; (8007b70 <ILI9341_SPI_Send+0x24>)
 8007b5e:	f7fe f865 	bl	8005c2c <HAL_SPI_Transmit>
 8007b62:	4603      	mov	r3, r0
 8007b64:	73fb      	strb	r3, [r7, #15]
		{
			//printf("HAL_SPI_Transmit Error #%u, ", res);
		}


}
 8007b66:	bf00      	nop
 8007b68:	3710      	adds	r7, #16
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
 8007b6e:	bf00      	nop
 8007b70:	2000065c 	.word	0x2000065c

08007b74 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007b7e:	4b0d      	ldr	r3, [pc, #52]	; (8007bb4 <ILI9341_Write_Command+0x40>)
 8007b80:	695b      	ldr	r3, [r3, #20]
 8007b82:	4a0c      	ldr	r2, [pc, #48]	; (8007bb4 <ILI9341_Write_Command+0x40>)
 8007b84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b88:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8007b8a:	4b0a      	ldr	r3, [pc, #40]	; (8007bb4 <ILI9341_Write_Command+0x40>)
 8007b8c:	695b      	ldr	r3, [r3, #20]
 8007b8e:	4a09      	ldr	r2, [pc, #36]	; (8007bb4 <ILI9341_Write_Command+0x40>)
 8007b90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b94:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(Command);
 8007b96:	79fb      	ldrb	r3, [r7, #7]
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7ff ffd7 	bl	8007b4c <ILI9341_SPI_Send>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8007b9e:	4b05      	ldr	r3, [pc, #20]	; (8007bb4 <ILI9341_Write_Command+0x40>)
 8007ba0:	695b      	ldr	r3, [r3, #20]
 8007ba2:	4a04      	ldr	r2, [pc, #16]	; (8007bb4 <ILI9341_Write_Command+0x40>)
 8007ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ba8:	6153      	str	r3, [r2, #20]
}
 8007baa:	bf00      	nop
 8007bac:	3708      	adds	r7, #8
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	48000400 	.word	0x48000400

08007bb8 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8007bc2:	4b0d      	ldr	r3, [pc, #52]	; (8007bf8 <ILI9341_Write_Data+0x40>)
 8007bc4:	695b      	ldr	r3, [r3, #20]
 8007bc6:	4a0c      	ldr	r2, [pc, #48]	; (8007bf8 <ILI9341_Write_Data+0x40>)
 8007bc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bcc:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007bce:	4b0a      	ldr	r3, [pc, #40]	; (8007bf8 <ILI9341_Write_Data+0x40>)
 8007bd0:	695b      	ldr	r3, [r3, #20]
 8007bd2:	4a09      	ldr	r2, [pc, #36]	; (8007bf8 <ILI9341_Write_Data+0x40>)
 8007bd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bd8:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(Data);
 8007bda:	79fb      	ldrb	r3, [r7, #7]
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f7ff ffb5 	bl	8007b4c <ILI9341_SPI_Send>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007be2:	4b05      	ldr	r3, [pc, #20]	; (8007bf8 <ILI9341_Write_Data+0x40>)
 8007be4:	695b      	ldr	r3, [r3, #20]
 8007be6:	4a04      	ldr	r2, [pc, #16]	; (8007bf8 <ILI9341_Write_Data+0x40>)
 8007be8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bec:	6153      	str	r3, [r2, #20]
}
 8007bee:	bf00      	nop
 8007bf0:	3708      	adds	r7, #8
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	48000400 	.word	0x48000400

08007bfc <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8007bfc:	b590      	push	{r4, r7, lr}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	4604      	mov	r4, r0
 8007c04:	4608      	mov	r0, r1
 8007c06:	4611      	mov	r1, r2
 8007c08:	461a      	mov	r2, r3
 8007c0a:	4623      	mov	r3, r4
 8007c0c:	80fb      	strh	r3, [r7, #6]
 8007c0e:	4603      	mov	r3, r0
 8007c10:	80bb      	strh	r3, [r7, #4]
 8007c12:	460b      	mov	r3, r1
 8007c14:	807b      	strh	r3, [r7, #2]
 8007c16:	4613      	mov	r3, r2
 8007c18:	803b      	strh	r3, [r7, #0]
	ILI9341_Write_Command(0x2A);
 8007c1a:	202a      	movs	r0, #42	; 0x2a
 8007c1c:	f7ff ffaa 	bl	8007b74 <ILI9341_Write_Command>
	ILI9341_Write_Data(X1>>8);
 8007c20:	88fb      	ldrh	r3, [r7, #6]
 8007c22:	0a1b      	lsrs	r3, r3, #8
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f7ff ffc5 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(X1);
 8007c2e:	88fb      	ldrh	r3, [r7, #6]
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7ff ffc0 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(X2>>8);
 8007c38:	887b      	ldrh	r3, [r7, #2]
 8007c3a:	0a1b      	lsrs	r3, r3, #8
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7ff ffb9 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(X2);
 8007c46:	887b      	ldrh	r3, [r7, #2]
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f7ff ffb4 	bl	8007bb8 <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2B);
 8007c50:	202b      	movs	r0, #43	; 0x2b
 8007c52:	f7ff ff8f 	bl	8007b74 <ILI9341_Write_Command>
	ILI9341_Write_Data(Y1>>8);
 8007c56:	88bb      	ldrh	r3, [r7, #4]
 8007c58:	0a1b      	lsrs	r3, r3, #8
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f7ff ffaa 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y1);
 8007c64:	88bb      	ldrh	r3, [r7, #4]
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f7ff ffa5 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2>>8);
 8007c6e:	883b      	ldrh	r3, [r7, #0]
 8007c70:	0a1b      	lsrs	r3, r3, #8
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7ff ff9e 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2);
 8007c7c:	883b      	ldrh	r3, [r7, #0]
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7ff ff99 	bl	8007bb8 <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2C);
 8007c86:	202c      	movs	r0, #44	; 0x2c
 8007c88:	f7ff ff74 	bl	8007b74 <ILI9341_Write_Command>
}
 8007c8c:	bf00      	nop
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd90      	pop	{r4, r7, pc}

08007c94 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 8007c98:	4b0c      	ldr	r3, [pc, #48]	; (8007ccc <ILI9341_Reset+0x38>)
 8007c9a:	695b      	ldr	r3, [r3, #20]
 8007c9c:	4a0b      	ldr	r2, [pc, #44]	; (8007ccc <ILI9341_Reset+0x38>)
 8007c9e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ca2:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 8007ca4:	20c8      	movs	r0, #200	; 0xc8
 8007ca6:	f7fa faef 	bl	8002288 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007caa:	4b08      	ldr	r3, [pc, #32]	; (8007ccc <ILI9341_Reset+0x38>)
 8007cac:	695b      	ldr	r3, [r3, #20]
 8007cae:	4a07      	ldr	r2, [pc, #28]	; (8007ccc <ILI9341_Reset+0x38>)
 8007cb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cb4:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 8007cb6:	20c8      	movs	r0, #200	; 0xc8
 8007cb8:	f7fa fae6 	bl	8002288 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8007cbc:	4b03      	ldr	r3, [pc, #12]	; (8007ccc <ILI9341_Reset+0x38>)
 8007cbe:	695b      	ldr	r3, [r3, #20]
 8007cc0:	4a02      	ldr	r2, [pc, #8]	; (8007ccc <ILI9341_Reset+0x38>)
 8007cc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007cc6:	6153      	str	r3, [r2, #20]
}
 8007cc8:	bf00      	nop
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	48000400 	.word	0x48000400

08007cd0 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	71fb      	strb	r3, [r7, #7]
	
	uint8_t screen_rotation = Rotation;
 8007cda:	79fb      	ldrb	r3, [r7, #7]
 8007cdc:	73fb      	strb	r3, [r7, #15]
	
	ILI9341_Write_Command(0x36);
 8007cde:	2036      	movs	r0, #54	; 0x36
 8007ce0:	f7ff ff48 	bl	8007b74 <ILI9341_Write_Command>
	//HAL_Delay(1);

	switch(screen_rotation)
 8007ce4:	7bfb      	ldrb	r3, [r7, #15]
 8007ce6:	2b03      	cmp	r3, #3
 8007ce8:	d836      	bhi.n	8007d58 <ILI9341_Set_Rotation+0x88>
 8007cea:	a201      	add	r2, pc, #4	; (adr r2, 8007cf0 <ILI9341_Set_Rotation+0x20>)
 8007cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf0:	08007d01 	.word	0x08007d01
 8007cf4:	08007d17 	.word	0x08007d17
 8007cf8:	08007d2d 	.word	0x08007d2d
 8007cfc:	08007d43 	.word	0x08007d43
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8007d00:	2048      	movs	r0, #72	; 0x48
 8007d02:	f7ff ff59 	bl	8007bb8 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8007d06:	4b17      	ldr	r3, [pc, #92]	; (8007d64 <ILI9341_Set_Rotation+0x94>)
 8007d08:	22f0      	movs	r2, #240	; 0xf0
 8007d0a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8007d0c:	4b16      	ldr	r3, [pc, #88]	; (8007d68 <ILI9341_Set_Rotation+0x98>)
 8007d0e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007d12:	801a      	strh	r2, [r3, #0]
			break;
 8007d14:	e021      	b.n	8007d5a <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8007d16:	2028      	movs	r0, #40	; 0x28
 8007d18:	f7ff ff4e 	bl	8007bb8 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8007d1c:	4b11      	ldr	r3, [pc, #68]	; (8007d64 <ILI9341_Set_Rotation+0x94>)
 8007d1e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007d22:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8007d24:	4b10      	ldr	r3, [pc, #64]	; (8007d68 <ILI9341_Set_Rotation+0x98>)
 8007d26:	22f0      	movs	r2, #240	; 0xf0
 8007d28:	801a      	strh	r2, [r3, #0]
			break;
 8007d2a:	e016      	b.n	8007d5a <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8007d2c:	2088      	movs	r0, #136	; 0x88
 8007d2e:	f7ff ff43 	bl	8007bb8 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8007d32:	4b0c      	ldr	r3, [pc, #48]	; (8007d64 <ILI9341_Set_Rotation+0x94>)
 8007d34:	22f0      	movs	r2, #240	; 0xf0
 8007d36:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8007d38:	4b0b      	ldr	r3, [pc, #44]	; (8007d68 <ILI9341_Set_Rotation+0x98>)
 8007d3a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007d3e:	801a      	strh	r2, [r3, #0]
			break;
 8007d40:	e00b      	b.n	8007d5a <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8007d42:	20e8      	movs	r0, #232	; 0xe8
 8007d44:	f7ff ff38 	bl	8007bb8 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8007d48:	4b06      	ldr	r3, [pc, #24]	; (8007d64 <ILI9341_Set_Rotation+0x94>)
 8007d4a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007d4e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8007d50:	4b05      	ldr	r3, [pc, #20]	; (8007d68 <ILI9341_Set_Rotation+0x98>)
 8007d52:	22f0      	movs	r2, #240	; 0xf0
 8007d54:	801a      	strh	r2, [r3, #0]
			break;
 8007d56:	e000      	b.n	8007d5a <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8007d58:	bf00      	nop
	}
}
 8007d5a:	bf00      	nop
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	200003da 	.word	0x200003da
 8007d68:	200003d8 	.word	0x200003d8

08007d6c <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8007d70:	4b05      	ldr	r3, [pc, #20]	; (8007d88 <ILI9341_Enable+0x1c>)
 8007d72:	695b      	ldr	r3, [r3, #20]
 8007d74:	4a04      	ldr	r2, [pc, #16]	; (8007d88 <ILI9341_Enable+0x1c>)
 8007d76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007d7a:	6153      	str	r3, [r2, #20]
}
 8007d7c:	bf00      	nop
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr
 8007d86:	bf00      	nop
 8007d88:	48000400 	.word	0x48000400

08007d8c <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	af00      	add	r7, sp, #0

	ILI9341_Enable();
 8007d90:	f7ff ffec 	bl	8007d6c <ILI9341_Enable>
	ILI9341_SPI_Init();
 8007d94:	f7ff feca 	bl	8007b2c <ILI9341_SPI_Init>
	ILI9341_Reset();
 8007d98:	f7ff ff7c 	bl	8007c94 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_Write_Command(0x01);
 8007d9c:	2001      	movs	r0, #1
 8007d9e:	f7ff fee9 	bl	8007b74 <ILI9341_Write_Command>
	HAL_Delay(2000);
 8007da2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007da6:	f7fa fa6f 	bl	8002288 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_Write_Command(0xCB);
 8007daa:	20cb      	movs	r0, #203	; 0xcb
 8007dac:	f7ff fee2 	bl	8007b74 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x39);
 8007db0:	2039      	movs	r0, #57	; 0x39
 8007db2:	f7ff ff01 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2C);
 8007db6:	202c      	movs	r0, #44	; 0x2c
 8007db8:	f7ff fefe 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8007dbc:	2000      	movs	r0, #0
 8007dbe:	f7ff fefb 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x34);
 8007dc2:	2034      	movs	r0, #52	; 0x34
 8007dc4:	f7ff fef8 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x02);
 8007dc8:	2002      	movs	r0, #2
 8007dca:	f7ff fef5 	bl	8007bb8 <ILI9341_Write_Data>

	//POWER CONTROL B
	ILI9341_Write_Command(0xCF);
 8007dce:	20cf      	movs	r0, #207	; 0xcf
 8007dd0:	f7ff fed0 	bl	8007b74 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8007dd4:	2000      	movs	r0, #0
 8007dd6:	f7ff feef 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 8007dda:	20c1      	movs	r0, #193	; 0xc1
 8007ddc:	f7ff feec 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x30);
 8007de0:	2030      	movs	r0, #48	; 0x30
 8007de2:	f7ff fee9 	bl	8007bb8 <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL A
	ILI9341_Write_Command(0xE8);
 8007de6:	20e8      	movs	r0, #232	; 0xe8
 8007de8:	f7ff fec4 	bl	8007b74 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x85);
 8007dec:	2085      	movs	r0, #133	; 0x85
 8007dee:	f7ff fee3 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8007df2:	2000      	movs	r0, #0
 8007df4:	f7ff fee0 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x78);
 8007df8:	2078      	movs	r0, #120	; 0x78
 8007dfa:	f7ff fedd 	bl	8007bb8 <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL B
	ILI9341_Write_Command(0xEA);
 8007dfe:	20ea      	movs	r0, #234	; 0xea
 8007e00:	f7ff feb8 	bl	8007b74 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8007e04:	2000      	movs	r0, #0
 8007e06:	f7ff fed7 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8007e0a:	2000      	movs	r0, #0
 8007e0c:	f7ff fed4 	bl	8007bb8 <ILI9341_Write_Data>

	//POWER ON SEQUENCE CONTROL
	ILI9341_Write_Command(0xED);
 8007e10:	20ed      	movs	r0, #237	; 0xed
 8007e12:	f7ff feaf 	bl	8007b74 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x64);
 8007e16:	2064      	movs	r0, #100	; 0x64
 8007e18:	f7ff fece 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8007e1c:	2003      	movs	r0, #3
 8007e1e:	f7ff fecb 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x12);
 8007e22:	2012      	movs	r0, #18
 8007e24:	f7ff fec8 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x81);
 8007e28:	2081      	movs	r0, #129	; 0x81
 8007e2a:	f7ff fec5 	bl	8007bb8 <ILI9341_Write_Data>

	//PUMP RATIO CONTROL
	ILI9341_Write_Command(0xF7);
 8007e2e:	20f7      	movs	r0, #247	; 0xf7
 8007e30:	f7ff fea0 	bl	8007b74 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x20);
 8007e34:	2020      	movs	r0, #32
 8007e36:	f7ff febf 	bl	8007bb8 <ILI9341_Write_Data>

	//POWER CONTROL,VRH[5:0]
	ILI9341_Write_Command(0xC0);
 8007e3a:	20c0      	movs	r0, #192	; 0xc0
 8007e3c:	f7ff fe9a 	bl	8007b74 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x23);
 8007e40:	2023      	movs	r0, #35	; 0x23
 8007e42:	f7ff feb9 	bl	8007bb8 <ILI9341_Write_Data>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_Write_Command(0xC1);
 8007e46:	20c1      	movs	r0, #193	; 0xc1
 8007e48:	f7ff fe94 	bl	8007b74 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x10);
 8007e4c:	2010      	movs	r0, #16
 8007e4e:	f7ff feb3 	bl	8007bb8 <ILI9341_Write_Data>

	//VCM CONTROL
	ILI9341_Write_Command(0xC5);
 8007e52:	20c5      	movs	r0, #197	; 0xc5
 8007e54:	f7ff fe8e 	bl	8007b74 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x3E);
 8007e58:	203e      	movs	r0, #62	; 0x3e
 8007e5a:	f7ff fead 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x28);
 8007e5e:	2028      	movs	r0, #40	; 0x28
 8007e60:	f7ff feaa 	bl	8007bb8 <ILI9341_Write_Data>

	//VCM CONTROL 2
	ILI9341_Write_Command(0xC7);
 8007e64:	20c7      	movs	r0, #199	; 0xc7
 8007e66:	f7ff fe85 	bl	8007b74 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x86);
 8007e6a:	2086      	movs	r0, #134	; 0x86
 8007e6c:	f7ff fea4 	bl	8007bb8 <ILI9341_Write_Data>

	//MEMORY ACCESS CONTROL
	ILI9341_Write_Command(0x36);
 8007e70:	2036      	movs	r0, #54	; 0x36
 8007e72:	f7ff fe7f 	bl	8007b74 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x48);
 8007e76:	2048      	movs	r0, #72	; 0x48
 8007e78:	f7ff fe9e 	bl	8007bb8 <ILI9341_Write_Data>


	//PIXEL FORMAT
	ILI9341_Write_Command(0x3A);
 8007e7c:	203a      	movs	r0, #58	; 0x3a
 8007e7e:	f7ff fe79 	bl	8007b74 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x55);
 8007e82:	2055      	movs	r0, #85	; 0x55
 8007e84:	f7ff fe98 	bl	8007bb8 <ILI9341_Write_Data>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_Write_Command(0xB1);
 8007e88:	20b1      	movs	r0, #177	; 0xb1
 8007e8a:	f7ff fe73 	bl	8007b74 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8007e8e:	2000      	movs	r0, #0
 8007e90:	f7ff fe92 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x18);
 8007e94:	2018      	movs	r0, #24
 8007e96:	f7ff fe8f 	bl	8007bb8 <ILI9341_Write_Data>

	//DISPLAY FUNCTION CONTROL
	ILI9341_Write_Command(0xB6);
 8007e9a:	20b6      	movs	r0, #182	; 0xb6
 8007e9c:	f7ff fe6a 	bl	8007b74 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x08);
 8007ea0:	2008      	movs	r0, #8
 8007ea2:	f7ff fe89 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x82);
 8007ea6:	2082      	movs	r0, #130	; 0x82
 8007ea8:	f7ff fe86 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x27);
 8007eac:	2027      	movs	r0, #39	; 0x27
 8007eae:	f7ff fe83 	bl	8007bb8 <ILI9341_Write_Data>


	//3GAMMA FUNCTION DISABLE
	ILI9341_Write_Command(0xF2);
 8007eb2:	20f2      	movs	r0, #242	; 0xf2
 8007eb4:	f7ff fe5e 	bl	8007b74 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8007eb8:	2000      	movs	r0, #0
 8007eba:	f7ff fe7d 	bl	8007bb8 <ILI9341_Write_Data>

	//GAMMA CURVE SELECTED
	ILI9341_Write_Command(0x26);
 8007ebe:	2026      	movs	r0, #38	; 0x26
 8007ec0:	f7ff fe58 	bl	8007b74 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x01);
 8007ec4:	2001      	movs	r0, #1
 8007ec6:	f7ff fe77 	bl	8007bb8 <ILI9341_Write_Data>

	//POSITIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE0);
 8007eca:	20e0      	movs	r0, #224	; 0xe0
 8007ecc:	f7ff fe52 	bl	8007b74 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x0F);
 8007ed0:	200f      	movs	r0, #15
 8007ed2:	f7ff fe71 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8007ed6:	2031      	movs	r0, #49	; 0x31
 8007ed8:	f7ff fe6e 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2B);
 8007edc:	202b      	movs	r0, #43	; 0x2b
 8007ede:	f7ff fe6b 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 8007ee2:	200c      	movs	r0, #12
 8007ee4:	f7ff fe68 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8007ee8:	200e      	movs	r0, #14
 8007eea:	f7ff fe65 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 8007eee:	2008      	movs	r0, #8
 8007ef0:	f7ff fe62 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x4E);
 8007ef4:	204e      	movs	r0, #78	; 0x4e
 8007ef6:	f7ff fe5f 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xF1);
 8007efa:	20f1      	movs	r0, #241	; 0xf1
 8007efc:	f7ff fe5c 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x37);
 8007f00:	2037      	movs	r0, #55	; 0x37
 8007f02:	f7ff fe59 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 8007f06:	2007      	movs	r0, #7
 8007f08:	f7ff fe56 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x10);
 8007f0c:	2010      	movs	r0, #16
 8007f0e:	f7ff fe53 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8007f12:	2003      	movs	r0, #3
 8007f14:	f7ff fe50 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8007f18:	200e      	movs	r0, #14
 8007f1a:	f7ff fe4d 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x09);
 8007f1e:	2009      	movs	r0, #9
 8007f20:	f7ff fe4a 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8007f24:	2000      	movs	r0, #0
 8007f26:	f7ff fe47 	bl	8007bb8 <ILI9341_Write_Data>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE1);
 8007f2a:	20e1      	movs	r0, #225	; 0xe1
 8007f2c:	f7ff fe22 	bl	8007b74 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8007f30:	2000      	movs	r0, #0
 8007f32:	f7ff fe41 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8007f36:	200e      	movs	r0, #14
 8007f38:	f7ff fe3e 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x14);
 8007f3c:	2014      	movs	r0, #20
 8007f3e:	f7ff fe3b 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8007f42:	2003      	movs	r0, #3
 8007f44:	f7ff fe38 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x11);
 8007f48:	2011      	movs	r0, #17
 8007f4a:	f7ff fe35 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 8007f4e:	2007      	movs	r0, #7
 8007f50:	f7ff fe32 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8007f54:	2031      	movs	r0, #49	; 0x31
 8007f56:	f7ff fe2f 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 8007f5a:	20c1      	movs	r0, #193	; 0xc1
 8007f5c:	f7ff fe2c 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x48);
 8007f60:	2048      	movs	r0, #72	; 0x48
 8007f62:	f7ff fe29 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 8007f66:	2008      	movs	r0, #8
 8007f68:	f7ff fe26 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8007f6c:	200f      	movs	r0, #15
 8007f6e:	f7ff fe23 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 8007f72:	200c      	movs	r0, #12
 8007f74:	f7ff fe20 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8007f78:	2031      	movs	r0, #49	; 0x31
 8007f7a:	f7ff fe1d 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x36);
 8007f7e:	2036      	movs	r0, #54	; 0x36
 8007f80:	f7ff fe1a 	bl	8007bb8 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8007f84:	200f      	movs	r0, #15
 8007f86:	f7ff fe17 	bl	8007bb8 <ILI9341_Write_Data>

	//EXIT SLEEP
	ILI9341_Write_Command(0x11);
 8007f8a:	2011      	movs	r0, #17
 8007f8c:	f7ff fdf2 	bl	8007b74 <ILI9341_Write_Command>
	HAL_Delay(240);
 8007f90:	20f0      	movs	r0, #240	; 0xf0
 8007f92:	f7fa f979 	bl	8002288 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_Write_Command(0x29);
 8007f96:	2029      	movs	r0, #41	; 0x29
 8007f98:	f7ff fdec 	bl	8007b74 <ILI9341_Write_Command>
	
	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8007f9c:	2000      	movs	r0, #0
 8007f9e:	f7ff fe97 	bl	8007cd0 <ILI9341_Set_Rotation>
}
 8007fa2:	bf00      	nop
 8007fa4:	bd80      	pop	{r7, pc}
	...

08007fa8 <ILI9341_Draw_colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_colour_Burst(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 8007fa8:	b5b0      	push	{r4, r5, r7, lr}
 8007faa:	b08e      	sub	sp, #56	; 0x38
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	607b      	str	r3, [r7, #4]
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	81fb      	strh	r3, [r7, #14]
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	81bb      	strh	r3, [r7, #12]
 8007fb8:	4613      	mov	r3, r2
 8007fba:	817b      	strh	r3, [r7, #10]
 8007fbc:	466b      	mov	r3, sp
 8007fbe:	461d      	mov	r5, r3

	// 	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
	// 	each CHUNK is broken down into smaller BLOCKS


	uint32_t buffer_size = 0;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	005b      	lsls	r3, r3, #1
 8007fc8:	4a48      	ldr	r2, [pc, #288]	; (80080ec <ILI9341_Draw_colour_Burst+0x144>)
 8007fca:	8812      	ldrh	r2, [r2, #0]
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d202      	bcs.n	8007fd6 <ILI9341_Draw_colour_Burst+0x2e>
	{
		buffer_size = chunk_size;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fd4:	e002      	b.n	8007fdc <ILI9341_Draw_colour_Burst+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 8007fd6:	4b45      	ldr	r3, [pc, #276]	; (80080ec <ILI9341_Draw_colour_Burst+0x144>)
 8007fd8:	881b      	ldrh	r3, [r3, #0]
 8007fda:	62fb      	str	r3, [r7, #44]	; 0x2c
	}




	unsigned char chifted = 	colour>>8;;
 8007fdc:	897b      	ldrh	r3, [r7, #10]
 8007fde:	0a1b      	lsrs	r3, r3, #8
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	unsigned char burst_buffer[buffer_size];
 8007fe6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007fe8:	4603      	mov	r3, r0
 8007fea:	3b01      	subs	r3, #1
 8007fec:	61fb      	str	r3, [r7, #28]
 8007fee:	4601      	mov	r1, r0
 8007ff0:	f04f 0200 	mov.w	r2, #0
 8007ff4:	f04f 0300 	mov.w	r3, #0
 8007ff8:	f04f 0400 	mov.w	r4, #0
 8007ffc:	00d4      	lsls	r4, r2, #3
 8007ffe:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8008002:	00cb      	lsls	r3, r1, #3
 8008004:	4601      	mov	r1, r0
 8008006:	f04f 0200 	mov.w	r2, #0
 800800a:	f04f 0300 	mov.w	r3, #0
 800800e:	f04f 0400 	mov.w	r4, #0
 8008012:	00d4      	lsls	r4, r2, #3
 8008014:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8008018:	00cb      	lsls	r3, r1, #3
 800801a:	1dc3      	adds	r3, r0, #7
 800801c:	08db      	lsrs	r3, r3, #3
 800801e:	00db      	lsls	r3, r3, #3
 8008020:	ebad 0d03 	sub.w	sp, sp, r3
 8008024:	466b      	mov	r3, sp
 8008026:	3300      	adds	r3, #0
 8008028:	61bb      	str	r3, [r7, #24]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800802a:	2300      	movs	r3, #0
 800802c:	633b      	str	r3, [r7, #48]	; 0x30
 800802e:	e00e      	b.n	800804e <ILI9341_Draw_colour_Burst+0xa6>
	{

			burst_buffer[j] = 	chifted;
 8008030:	69ba      	ldr	r2, [r7, #24]
 8008032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008034:	4413      	add	r3, r2
 8008036:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800803a:	701a      	strb	r2, [r3, #0]

			burst_buffer[j+1] = colour;
 800803c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803e:	3301      	adds	r3, #1
 8008040:	897a      	ldrh	r2, [r7, #10]
 8008042:	b2d1      	uxtb	r1, r2
 8008044:	69ba      	ldr	r2, [r7, #24]
 8008046:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 8008048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800804a:	3302      	adds	r3, #2
 800804c:	633b      	str	r3, [r7, #48]	; 0x30
 800804e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008052:	429a      	cmp	r2, r3
 8008054:	d3ec      	bcc.n	8008030 <ILI9341_Draw_colour_Burst+0x88>


	}
	
	uint32_t Sending_size = chunk_size*2;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	005b      	lsls	r3, r3, #1
 800805a:	617b      	str	r3, [r7, #20]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 800805c:	2301      	movs	r3, #1
 800805e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 8008060:	2300      	movs	r3, #0
 8008062:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d00d      	beq.n	8008086 <ILI9341_Draw_colour_Burst+0xde>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 800806a:	697a      	ldr	r2, [r7, #20]
 800806c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800806e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008072:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008078:	fbb3 f2f2 	udiv	r2, r3, r2
 800807c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800807e:	fb01 f202 	mul.w	r2, r1, r2
 8008082:	1a9b      	subs	r3, r3, r2
 8008084:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8008086:	4b1a      	ldr	r3, [pc, #104]	; (80080f0 <ILI9341_Draw_colour_Burst+0x148>)
 8008088:	695b      	ldr	r3, [r3, #20]
 800808a:	4a19      	ldr	r2, [pc, #100]	; (80080f0 <ILI9341_Draw_colour_Burst+0x148>)
 800808c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008090:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008092:	4b17      	ldr	r3, [pc, #92]	; (80080f0 <ILI9341_Draw_colour_Burst+0x148>)
 8008094:	695b      	ldr	r3, [r3, #20]
 8008096:	4a16      	ldr	r2, [pc, #88]	; (80080f0 <ILI9341_Draw_colour_Burst+0x148>)
 8008098:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800809c:	6153      	str	r3, [r2, #20]

	if(Sending_in_Block != 0)
 800809e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d010      	beq.n	80080c6 <ILI9341_Draw_colour_Burst+0x11e>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80080a4:	2300      	movs	r3, #0
 80080a6:	627b      	str	r3, [r7, #36]	; 0x24
 80080a8:	e009      	b.n	80080be <ILI9341_Draw_colour_Burst+0x116>
		{

			HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, buffer_size, 2);
 80080aa:	69b9      	ldr	r1, [r7, #24]
 80080ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ae:	b29a      	uxth	r2, r3
 80080b0:	2302      	movs	r3, #2
 80080b2:	4810      	ldr	r0, [pc, #64]	; (80080f4 <ILI9341_Draw_colour_Burst+0x14c>)
 80080b4:	f7fd fdba 	bl	8005c2c <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80080b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ba:	3301      	adds	r3, #1
 80080bc:	627b      	str	r3, [r7, #36]	; 0x24
 80080be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d3f1      	bcc.n	80080aa <ILI9341_Draw_colour_Burst+0x102>
		}
	}

	//REMAINDER!
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 2);
 80080c6:	69b9      	ldr	r1, [r7, #24]
 80080c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ca:	b29a      	uxth	r2, r3
 80080cc:	2302      	movs	r3, #2
 80080ce:	4809      	ldr	r0, [pc, #36]	; (80080f4 <ILI9341_Draw_colour_Burst+0x14c>)
 80080d0:	f7fd fdac 	bl	8005c2c <HAL_SPI_Transmit>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80080d4:	4b06      	ldr	r3, [pc, #24]	; (80080f0 <ILI9341_Draw_colour_Burst+0x148>)
 80080d6:	695b      	ldr	r3, [r3, #20]
 80080d8:	4a05      	ldr	r2, [pc, #20]	; (80080f0 <ILI9341_Draw_colour_Burst+0x148>)
 80080da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080de:	6153      	str	r3, [r2, #20]
 80080e0:	46ad      	mov	sp, r5


}
 80080e2:	bf00      	nop
 80080e4:	3738      	adds	r7, #56	; 0x38
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bdb0      	pop	{r4, r5, r7, pc}
 80080ea:	bf00      	nop
 80080ec:	200003dc 	.word	0x200003dc
 80080f0:	48000400 	.word	0x48000400
 80080f4:	2000065c 	.word	0x2000065c

080080f8 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends height*width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t colour)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b084      	sub	sp, #16
 80080fc:	af02      	add	r7, sp, #8
 80080fe:	4603      	mov	r3, r0
 8008100:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);
 8008102:	4b10      	ldr	r3, [pc, #64]	; (8008144 <ILI9341_Fill_Screen+0x4c>)
 8008104:	881b      	ldrh	r3, [r3, #0]
 8008106:	b29a      	uxth	r2, r3
 8008108:	4b0f      	ldr	r3, [pc, #60]	; (8008148 <ILI9341_Fill_Screen+0x50>)
 800810a:	881b      	ldrh	r3, [r3, #0]
 800810c:	b29b      	uxth	r3, r3
 800810e:	2100      	movs	r1, #0
 8008110:	2000      	movs	r0, #0
 8008112:	f7ff fd73 	bl	8007bfc <ILI9341_Set_Address>
	ILI9341_Draw_colour_Burst(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 8008116:	4b0b      	ldr	r3, [pc, #44]	; (8008144 <ILI9341_Fill_Screen+0x4c>)
 8008118:	881b      	ldrh	r3, [r3, #0]
 800811a:	b29b      	uxth	r3, r3
 800811c:	461a      	mov	r2, r3
 800811e:	4b0a      	ldr	r3, [pc, #40]	; (8008148 <ILI9341_Fill_Screen+0x50>)
 8008120:	881b      	ldrh	r3, [r3, #0]
 8008122:	b29b      	uxth	r3, r3
 8008124:	fb03 f302 	mul.w	r3, r3, r2
 8008128:	4619      	mov	r1, r3
 800812a:	88fa      	ldrh	r2, [r7, #6]
 800812c:	2304      	movs	r3, #4
 800812e:	9300      	str	r3, [sp, #0]
 8008130:	460b      	mov	r3, r1
 8008132:	2100      	movs	r1, #0
 8008134:	2000      	movs	r0, #0
 8008136:	f7ff ff37 	bl	8007fa8 <ILI9341_Draw_colour_Burst>
}
 800813a:	bf00      	nop
 800813c:	3708      	adds	r7, #8
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
 8008142:	bf00      	nop
 8008144:	200003da 	.word	0x200003da
 8008148:	200003d8 	.word	0x200003d8

0800814c <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t colour)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b086      	sub	sp, #24
 8008150:	af00      	add	r7, sp, #0
 8008152:	4603      	mov	r3, r0
 8008154:	80fb      	strh	r3, [r7, #6]
 8008156:	460b      	mov	r3, r1
 8008158:	80bb      	strh	r3, [r7, #4]
 800815a:	4613      	mov	r3, r2
 800815c:	807b      	strh	r3, [r7, #2]
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800815e:	4b64      	ldr	r3, [pc, #400]	; (80082f0 <ILI9341_Draw_Pixel+0x1a4>)
 8008160:	881b      	ldrh	r3, [r3, #0]
 8008162:	b29b      	uxth	r3, r3
 8008164:	88fa      	ldrh	r2, [r7, #6]
 8008166:	429a      	cmp	r2, r3
 8008168:	f080 80be 	bcs.w	80082e8 <ILI9341_Draw_Pixel+0x19c>
 800816c:	4b61      	ldr	r3, [pc, #388]	; (80082f4 <ILI9341_Draw_Pixel+0x1a8>)
 800816e:	881b      	ldrh	r3, [r3, #0]
 8008170:	b29b      	uxth	r3, r3
 8008172:	88ba      	ldrh	r2, [r7, #4]
 8008174:	429a      	cmp	r2, r3
 8008176:	f080 80b7 	bcs.w	80082e8 <ILI9341_Draw_Pixel+0x19c>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800817a:	4b5f      	ldr	r3, [pc, #380]	; (80082f8 <ILI9341_Draw_Pixel+0x1ac>)
 800817c:	695b      	ldr	r3, [r3, #20]
 800817e:	4a5e      	ldr	r2, [pc, #376]	; (80082f8 <ILI9341_Draw_Pixel+0x1ac>)
 8008180:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008184:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008186:	4b5c      	ldr	r3, [pc, #368]	; (80082f8 <ILI9341_Draw_Pixel+0x1ac>)
 8008188:	695b      	ldr	r3, [r3, #20]
 800818a:	4a5b      	ldr	r2, [pc, #364]	; (80082f8 <ILI9341_Draw_Pixel+0x1ac>)
 800818c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008190:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(0x2A);
 8008192:	202a      	movs	r0, #42	; 0x2a
 8008194:	f7ff fcda 	bl	8007b4c <ILI9341_SPI_Send>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8008198:	4b57      	ldr	r3, [pc, #348]	; (80082f8 <ILI9341_Draw_Pixel+0x1ac>)
 800819a:	695b      	ldr	r3, [r3, #20]
 800819c:	4a56      	ldr	r2, [pc, #344]	; (80082f8 <ILI9341_Draw_Pixel+0x1ac>)
 800819e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081a2:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80081a4:	4b54      	ldr	r3, [pc, #336]	; (80082f8 <ILI9341_Draw_Pixel+0x1ac>)
 80081a6:	695b      	ldr	r3, [r3, #20]
 80081a8:	4a53      	ldr	r2, [pc, #332]	; (80082f8 <ILI9341_Draw_Pixel+0x1ac>)
 80081aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081ae:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80081b0:	4b51      	ldr	r3, [pc, #324]	; (80082f8 <ILI9341_Draw_Pixel+0x1ac>)
 80081b2:	695b      	ldr	r3, [r3, #20]
 80081b4:	4a50      	ldr	r2, [pc, #320]	; (80082f8 <ILI9341_Draw_Pixel+0x1ac>)
 80081b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081ba:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 80081bc:	88fb      	ldrh	r3, [r7, #6]
 80081be:	0a1b      	lsrs	r3, r3, #8
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	753b      	strb	r3, [r7, #20]
 80081c6:	88fb      	ldrh	r3, [r7, #6]
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	757b      	strb	r3, [r7, #21]
 80081cc:	88fb      	ldrh	r3, [r7, #6]
 80081ce:	3301      	adds	r3, #1
 80081d0:	121b      	asrs	r3, r3, #8
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	75bb      	strb	r3, [r7, #22]
 80081d6:	88fb      	ldrh	r3, [r7, #6]
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	3301      	adds	r3, #1
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 80081e0:	f107 0114 	add.w	r1, r7, #20
 80081e4:	2301      	movs	r3, #1
 80081e6:	2204      	movs	r2, #4
 80081e8:	4844      	ldr	r0, [pc, #272]	; (80082fc <ILI9341_Draw_Pixel+0x1b0>)
 80081ea:	f7fd fd1f 	bl	8005c2c <HAL_SPI_Transmit>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80081ee:	4b42      	ldr	r3, [pc, #264]	; (80082f8 <ILI9341_Draw_Pixel+0x1ac>)
 80081f0:	695b      	ldr	r3, [r3, #20]
 80081f2:	4a41      	ldr	r2, [pc, #260]	; (80082f8 <ILI9341_Draw_Pixel+0x1ac>)
 80081f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081f8:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 80081fa:	4b3f      	ldr	r3, [pc, #252]	; (80082f8 <ILI9341_Draw_Pixel+0x1ac>)
 80081fc:	695b      	ldr	r3, [r3, #20]
 80081fe:	4a3e      	ldr	r2, [pc, #248]	; (80082f8 <ILI9341_Draw_Pixel+0x1ac>)
 8008200:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008204:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008206:	4b3c      	ldr	r3, [pc, #240]	; (80082f8 <ILI9341_Draw_Pixel+0x1ac>)
 8008208:	695b      	ldr	r3, [r3, #20]
 800820a:	4a3b      	ldr	r2, [pc, #236]	; (80082f8 <ILI9341_Draw_Pixel+0x1ac>)
 800820c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008210:	6153      	str	r3, [r2, #20]

	ILI9341_SPI_Send(0x2B);
 8008212:	202b      	movs	r0, #43	; 0x2b
 8008214:	f7ff fc9a 	bl	8007b4c <ILI9341_SPI_Send>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8008218:	4b37      	ldr	r3, [pc, #220]	; (80082f8 <ILI9341_Draw_Pixel+0x1ac>)
 800821a:	695b      	ldr	r3, [r3, #20]
 800821c:	4a36      	ldr	r2, [pc, #216]	; (80082f8 <ILI9341_Draw_Pixel+0x1ac>)
 800821e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008222:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008224:	4b34      	ldr	r3, [pc, #208]	; (80082f8 <ILI9341_Draw_Pixel+0x1ac>)
 8008226:	695b      	ldr	r3, [r3, #20]
 8008228:	4a33      	ldr	r2, [pc, #204]	; (80082f8 <ILI9341_Draw_Pixel+0x1ac>)
 800822a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800822e:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008230:	4b31      	ldr	r3, [pc, #196]	; (80082f8 <ILI9341_Draw_Pixel+0x1ac>)
 8008232:	695b      	ldr	r3, [r3, #20]
 8008234:	4a30      	ldr	r2, [pc, #192]	; (80082f8 <ILI9341_Draw_Pixel+0x1ac>)
 8008236:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800823a:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 800823c:	88bb      	ldrh	r3, [r7, #4]
 800823e:	0a1b      	lsrs	r3, r3, #8
 8008240:	b29b      	uxth	r3, r3
 8008242:	b2db      	uxtb	r3, r3
 8008244:	743b      	strb	r3, [r7, #16]
 8008246:	88bb      	ldrh	r3, [r7, #4]
 8008248:	b2db      	uxtb	r3, r3
 800824a:	747b      	strb	r3, [r7, #17]
 800824c:	88bb      	ldrh	r3, [r7, #4]
 800824e:	3301      	adds	r3, #1
 8008250:	121b      	asrs	r3, r3, #8
 8008252:	b2db      	uxtb	r3, r3
 8008254:	74bb      	strb	r3, [r7, #18]
 8008256:	88bb      	ldrh	r3, [r7, #4]
 8008258:	b2db      	uxtb	r3, r3
 800825a:	3301      	adds	r3, #1
 800825c:	b2db      	uxtb	r3, r3
 800825e:	74fb      	strb	r3, [r7, #19]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8008260:	f107 0110 	add.w	r1, r7, #16
 8008264:	2301      	movs	r3, #1
 8008266:	2204      	movs	r2, #4
 8008268:	4824      	ldr	r0, [pc, #144]	; (80082fc <ILI9341_Draw_Pixel+0x1b0>)
 800826a:	f7fd fcdf 	bl	8005c2c <HAL_SPI_Transmit>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800826e:	4b22      	ldr	r3, [pc, #136]	; (80082f8 <ILI9341_Draw_Pixel+0x1ac>)
 8008270:	695b      	ldr	r3, [r3, #20]
 8008272:	4a21      	ldr	r2, [pc, #132]	; (80082f8 <ILI9341_Draw_Pixel+0x1ac>)
 8008274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008278:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800827a:	4b1f      	ldr	r3, [pc, #124]	; (80082f8 <ILI9341_Draw_Pixel+0x1ac>)
 800827c:	695b      	ldr	r3, [r3, #20]
 800827e:	4a1e      	ldr	r2, [pc, #120]	; (80082f8 <ILI9341_Draw_Pixel+0x1ac>)
 8008280:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008284:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008286:	4b1c      	ldr	r3, [pc, #112]	; (80082f8 <ILI9341_Draw_Pixel+0x1ac>)
 8008288:	695b      	ldr	r3, [r3, #20]
 800828a:	4a1b      	ldr	r2, [pc, #108]	; (80082f8 <ILI9341_Draw_Pixel+0x1ac>)
 800828c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008290:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(0x2C);
 8008292:	202c      	movs	r0, #44	; 0x2c
 8008294:	f7ff fc5a 	bl	8007b4c <ILI9341_SPI_Send>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8008298:	4b17      	ldr	r3, [pc, #92]	; (80082f8 <ILI9341_Draw_Pixel+0x1ac>)
 800829a:	695b      	ldr	r3, [r3, #20]
 800829c:	4a16      	ldr	r2, [pc, #88]	; (80082f8 <ILI9341_Draw_Pixel+0x1ac>)
 800829e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082a2:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80082a4:	4b14      	ldr	r3, [pc, #80]	; (80082f8 <ILI9341_Draw_Pixel+0x1ac>)
 80082a6:	695b      	ldr	r3, [r3, #20]
 80082a8:	4a13      	ldr	r2, [pc, #76]	; (80082f8 <ILI9341_Draw_Pixel+0x1ac>)
 80082aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082ae:	6153      	str	r3, [r2, #20]
	
	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80082b0:	4b11      	ldr	r3, [pc, #68]	; (80082f8 <ILI9341_Draw_Pixel+0x1ac>)
 80082b2:	695b      	ldr	r3, [r3, #20]
 80082b4:	4a10      	ldr	r2, [pc, #64]	; (80082f8 <ILI9341_Draw_Pixel+0x1ac>)
 80082b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082ba:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 80082bc:	887b      	ldrh	r3, [r7, #2]
 80082be:	0a1b      	lsrs	r3, r3, #8
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	733b      	strb	r3, [r7, #12]
 80082c6:	887b      	ldrh	r3, [r7, #2]
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 80082cc:	f107 010c 	add.w	r1, r7, #12
 80082d0:	2301      	movs	r3, #1
 80082d2:	2202      	movs	r2, #2
 80082d4:	4809      	ldr	r0, [pc, #36]	; (80082fc <ILI9341_Draw_Pixel+0x1b0>)
 80082d6:	f7fd fca9 	bl	8005c2c <HAL_SPI_Transmit>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80082da:	4b07      	ldr	r3, [pc, #28]	; (80082f8 <ILI9341_Draw_Pixel+0x1ac>)
 80082dc:	695b      	ldr	r3, [r3, #20]
 80082de:	4a06      	ldr	r2, [pc, #24]	; (80082f8 <ILI9341_Draw_Pixel+0x1ac>)
 80082e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082e4:	6153      	str	r3, [r2, #20]
 80082e6:	e000      	b.n	80082ea <ILI9341_Draw_Pixel+0x19e>
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80082e8:	bf00      	nop

	
}
 80082ea:	3718      	adds	r7, #24
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	200003da 	.word	0x200003da
 80082f4:	200003d8 	.word	0x200003d8
 80082f8:	48000400 	.word	0x48000400
 80082fc:	2000065c 	.word	0x2000065c

08008300 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 8008300:	b590      	push	{r4, r7, lr}
 8008302:	b087      	sub	sp, #28
 8008304:	af02      	add	r7, sp, #8
 8008306:	4604      	mov	r4, r0
 8008308:	4608      	mov	r0, r1
 800830a:	4611      	mov	r1, r2
 800830c:	461a      	mov	r2, r3
 800830e:	4623      	mov	r3, r4
 8008310:	80fb      	strh	r3, [r7, #6]
 8008312:	4603      	mov	r3, r0
 8008314:	80bb      	strh	r3, [r7, #4]
 8008316:	460b      	mov	r3, r1
 8008318:	807b      	strh	r3, [r7, #2]
 800831a:	4613      	mov	r3, r2
 800831c:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800831e:	4b39      	ldr	r3, [pc, #228]	; (8008404 <ILI9341_Draw_Rectangle+0x104>)
 8008320:	881b      	ldrh	r3, [r3, #0]
 8008322:	b29b      	uxth	r3, r3
 8008324:	88fa      	ldrh	r2, [r7, #6]
 8008326:	429a      	cmp	r2, r3
 8008328:	d268      	bcs.n	80083fc <ILI9341_Draw_Rectangle+0xfc>
 800832a:	4b37      	ldr	r3, [pc, #220]	; (8008408 <ILI9341_Draw_Rectangle+0x108>)
 800832c:	881b      	ldrh	r3, [r3, #0]
 800832e:	b29b      	uxth	r3, r3
 8008330:	88ba      	ldrh	r2, [r7, #4]
 8008332:	429a      	cmp	r2, r3
 8008334:	d262      	bcs.n	80083fc <ILI9341_Draw_Rectangle+0xfc>
	if((xpos+width-1)>=LCD_WIDTH)
 8008336:	88fa      	ldrh	r2, [r7, #6]
 8008338:	887b      	ldrh	r3, [r7, #2]
 800833a:	4413      	add	r3, r2
 800833c:	3b01      	subs	r3, #1
 800833e:	4a31      	ldr	r2, [pc, #196]	; (8008404 <ILI9341_Draw_Rectangle+0x104>)
 8008340:	8812      	ldrh	r2, [r2, #0]
 8008342:	b292      	uxth	r2, r2
 8008344:	4293      	cmp	r3, r2
 8008346:	db05      	blt.n	8008354 <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 8008348:	4b2e      	ldr	r3, [pc, #184]	; (8008404 <ILI9341_Draw_Rectangle+0x104>)
 800834a:	881b      	ldrh	r3, [r3, #0]
 800834c:	b29a      	uxth	r2, r3
 800834e:	88fb      	ldrh	r3, [r7, #6]
 8008350:	1ad3      	subs	r3, r2, r3
 8008352:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 8008354:	88ba      	ldrh	r2, [r7, #4]
 8008356:	883b      	ldrh	r3, [r7, #0]
 8008358:	4413      	add	r3, r2
 800835a:	3b01      	subs	r3, #1
 800835c:	4a2a      	ldr	r2, [pc, #168]	; (8008408 <ILI9341_Draw_Rectangle+0x108>)
 800835e:	8812      	ldrh	r2, [r2, #0]
 8008360:	b292      	uxth	r2, r2
 8008362:	4293      	cmp	r3, r2
 8008364:	db05      	blt.n	8008372 <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 8008366:	4b28      	ldr	r3, [pc, #160]	; (8008408 <ILI9341_Draw_Rectangle+0x108>)
 8008368:	881b      	ldrh	r3, [r3, #0]
 800836a:	b29a      	uxth	r2, r3
 800836c:	88bb      	ldrh	r3, [r7, #4]
 800836e:	1ad3      	subs	r3, r2, r3
 8008370:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Address(xpos,
						ypos,
						(xpos + width) - 1,
 8008372:	88fa      	ldrh	r2, [r7, #6]
 8008374:	887b      	ldrh	r3, [r7, #2]
 8008376:	4413      	add	r3, r2
 8008378:	b29b      	uxth	r3, r3
	ILI9341_Set_Address(xpos,
 800837a:	3b01      	subs	r3, #1
 800837c:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 800837e:	88ba      	ldrh	r2, [r7, #4]
 8008380:	883b      	ldrh	r3, [r7, #0]
 8008382:	4413      	add	r3, r2
 8008384:	b29b      	uxth	r3, r3
	ILI9341_Set_Address(xpos,
 8008386:	3b01      	subs	r3, #1
 8008388:	b29b      	uxth	r3, r3
 800838a:	88b9      	ldrh	r1, [r7, #4]
 800838c:	88f8      	ldrh	r0, [r7, #6]
 800838e:	4622      	mov	r2, r4
 8008390:	f7ff fc34 	bl	8007bfc <ILI9341_Set_Address>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep ILI9341_Draw_colour_Burst() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 8008394:	883a      	ldrh	r2, [r7, #0]
 8008396:	887b      	ldrh	r3, [r7, #2]
 8008398:	fb12 f303 	smulbb	r3, r2, r3
 800839c:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 800839e:	2300      	movs	r3, #0
 80083a0:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 80083a2:	89fb      	ldrh	r3, [r7, #14]
 80083a4:	f003 0301 	and.w	r3, r3, #1
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d009      	beq.n	80083c0 <ILI9341_Draw_Rectangle+0xc0>
 80083ac:	89fb      	ldrh	r3, [r7, #14]
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d906      	bls.n	80083c0 <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 80083b2:	2301      	movs	r3, #1
 80083b4:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 80083b6:	89fb      	ldrh	r3, [r7, #14]
 80083b8:	085b      	lsrs	r3, r3, #1
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	005b      	lsls	r3, r3, #1
 80083be:	81fb      	strh	r3, [r7, #14]
	}

	ILI9341_Draw_colour_Burst(	xpos,
 80083c0:	89fc      	ldrh	r4, [r7, #14]
 80083c2:	8c3a      	ldrh	r2, [r7, #32]
 80083c4:	88b9      	ldrh	r1, [r7, #4]
 80083c6:	88f8      	ldrh	r0, [r7, #6]
 80083c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80083cc:	9300      	str	r3, [sp, #0]
 80083ce:	4623      	mov	r3, r4
 80083d0:	f7ff fdea 	bl	8007fa8 <ILI9341_Draw_colour_Burst>
								colour,
								size,
								chunk_type);

	// add the truncated pixel now
	if(truncated)
 80083d4:	7b7b      	ldrb	r3, [r7, #13]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d011      	beq.n	80083fe <ILI9341_Draw_Rectangle+0xfe>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 80083da:	88fa      	ldrh	r2, [r7, #6]
 80083dc:	887b      	ldrh	r3, [r7, #2]
 80083de:	4413      	add	r3, r2
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	3b01      	subs	r3, #1
 80083e4:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 80083e6:	88ba      	ldrh	r2, [r7, #4]
 80083e8:	883b      	ldrh	r3, [r7, #0]
 80083ea:	4413      	add	r3, r2
 80083ec:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 80083ee:	3b01      	subs	r3, #1
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	8c3a      	ldrh	r2, [r7, #32]
 80083f4:	4619      	mov	r1, r3
 80083f6:	f7ff fea9 	bl	800814c <ILI9341_Draw_Pixel>
 80083fa:	e000      	b.n	80083fe <ILI9341_Draw_Rectangle+0xfe>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 80083fc:	bf00      	nop
							colour);
	}
}
 80083fe:	3714      	adds	r7, #20
 8008400:	46bd      	mov	sp, r7
 8008402:	bd90      	pop	{r4, r7, pc}
 8008404:	200003da 	.word	0x200003da
 8008408:	200003d8 	.word	0x200003d8

0800840c <ILI9341_Draw_Horizontal_Line>:
 *
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 800840c:	b590      	push	{r4, r7, lr}
 800840e:	b085      	sub	sp, #20
 8008410:	af02      	add	r7, sp, #8
 8008412:	4604      	mov	r4, r0
 8008414:	4608      	mov	r0, r1
 8008416:	4611      	mov	r1, r2
 8008418:	461a      	mov	r2, r3
 800841a:	4623      	mov	r3, r4
 800841c:	80fb      	strh	r3, [r7, #6]
 800841e:	4603      	mov	r3, r0
 8008420:	80bb      	strh	r3, [r7, #4]
 8008422:	460b      	mov	r3, r1
 8008424:	807b      	strh	r3, [r7, #2]
 8008426:	4613      	mov	r3, r2
 8008428:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800842a:	4b1a      	ldr	r3, [pc, #104]	; (8008494 <ILI9341_Draw_Horizontal_Line+0x88>)
 800842c:	881b      	ldrh	r3, [r3, #0]
 800842e:	b29b      	uxth	r3, r3
 8008430:	88fa      	ldrh	r2, [r7, #6]
 8008432:	429a      	cmp	r2, r3
 8008434:	d229      	bcs.n	800848a <ILI9341_Draw_Horizontal_Line+0x7e>
 8008436:	4b18      	ldr	r3, [pc, #96]	; (8008498 <ILI9341_Draw_Horizontal_Line+0x8c>)
 8008438:	881b      	ldrh	r3, [r3, #0]
 800843a:	b29b      	uxth	r3, r3
 800843c:	88ba      	ldrh	r2, [r7, #4]
 800843e:	429a      	cmp	r2, r3
 8008440:	d223      	bcs.n	800848a <ILI9341_Draw_Horizontal_Line+0x7e>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 8008442:	88fa      	ldrh	r2, [r7, #6]
 8008444:	887b      	ldrh	r3, [r7, #2]
 8008446:	4413      	add	r3, r2
 8008448:	3b01      	subs	r3, #1
 800844a:	4a12      	ldr	r2, [pc, #72]	; (8008494 <ILI9341_Draw_Horizontal_Line+0x88>)
 800844c:	8812      	ldrh	r2, [r2, #0]
 800844e:	b292      	uxth	r2, r2
 8008450:	4293      	cmp	r3, r2
 8008452:	db05      	blt.n	8008460 <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 8008454:	4b0f      	ldr	r3, [pc, #60]	; (8008494 <ILI9341_Draw_Horizontal_Line+0x88>)
 8008456:	881b      	ldrh	r3, [r3, #0]
 8008458:	b29a      	uxth	r2, r3
 800845a:	88fb      	ldrh	r3, [r7, #6]
 800845c:	1ad3      	subs	r3, r2, r3
 800845e:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Address(	xpos,
							ypos,
							(xpos + width) - 1,
 8008460:	88fa      	ldrh	r2, [r7, #6]
 8008462:	887b      	ldrh	r3, [r7, #2]
 8008464:	4413      	add	r3, r2
 8008466:	b29b      	uxth	r3, r3
	ILI9341_Set_Address(	xpos,
 8008468:	3b01      	subs	r3, #1
 800846a:	b29a      	uxth	r2, r3
 800846c:	88bb      	ldrh	r3, [r7, #4]
 800846e:	88b9      	ldrh	r1, [r7, #4]
 8008470:	88f8      	ldrh	r0, [r7, #6]
 8008472:	f7ff fbc3 	bl	8007bfc <ILI9341_Set_Address>
							ypos);

	ILI9341_Draw_colour_Burst(xpos, ypos, colour, width, LINE_CHUNK);
 8008476:	887c      	ldrh	r4, [r7, #2]
 8008478:	883a      	ldrh	r2, [r7, #0]
 800847a:	88b9      	ldrh	r1, [r7, #4]
 800847c:	88f8      	ldrh	r0, [r7, #6]
 800847e:	2303      	movs	r3, #3
 8008480:	9300      	str	r3, [sp, #0]
 8008482:	4623      	mov	r3, r4
 8008484:	f7ff fd90 	bl	8007fa8 <ILI9341_Draw_colour_Burst>
 8008488:	e000      	b.n	800848c <ILI9341_Draw_Horizontal_Line+0x80>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800848a:	bf00      	nop
}
 800848c:	370c      	adds	r7, #12
 800848e:	46bd      	mov	sp, r7
 8008490:	bd90      	pop	{r4, r7, pc}
 8008492:	bf00      	nop
 8008494:	200003da 	.word	0x200003da
 8008498:	200003d8 	.word	0x200003d8

0800849c <ILI9341_Draw_Vertical_Line>:

//DRAW LINE FROM X,Y LOCATION to X,Y+height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 800849c:	b590      	push	{r4, r7, lr}
 800849e:	b085      	sub	sp, #20
 80084a0:	af02      	add	r7, sp, #8
 80084a2:	4604      	mov	r4, r0
 80084a4:	4608      	mov	r0, r1
 80084a6:	4611      	mov	r1, r2
 80084a8:	461a      	mov	r2, r3
 80084aa:	4623      	mov	r3, r4
 80084ac:	80fb      	strh	r3, [r7, #6]
 80084ae:	4603      	mov	r3, r0
 80084b0:	80bb      	strh	r3, [r7, #4]
 80084b2:	460b      	mov	r3, r1
 80084b4:	807b      	strh	r3, [r7, #2]
 80084b6:	4613      	mov	r3, r2
 80084b8:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 80084ba:	4b1a      	ldr	r3, [pc, #104]	; (8008524 <ILI9341_Draw_Vertical_Line+0x88>)
 80084bc:	881b      	ldrh	r3, [r3, #0]
 80084be:	b29b      	uxth	r3, r3
 80084c0:	88fa      	ldrh	r2, [r7, #6]
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d229      	bcs.n	800851a <ILI9341_Draw_Vertical_Line+0x7e>
 80084c6:	4b18      	ldr	r3, [pc, #96]	; (8008528 <ILI9341_Draw_Vertical_Line+0x8c>)
 80084c8:	881b      	ldrh	r3, [r3, #0]
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	88ba      	ldrh	r2, [r7, #4]
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d223      	bcs.n	800851a <ILI9341_Draw_Vertical_Line+0x7e>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 80084d2:	88ba      	ldrh	r2, [r7, #4]
 80084d4:	887b      	ldrh	r3, [r7, #2]
 80084d6:	4413      	add	r3, r2
 80084d8:	3b01      	subs	r3, #1
 80084da:	4a13      	ldr	r2, [pc, #76]	; (8008528 <ILI9341_Draw_Vertical_Line+0x8c>)
 80084dc:	8812      	ldrh	r2, [r2, #0]
 80084de:	b292      	uxth	r2, r2
 80084e0:	4293      	cmp	r3, r2
 80084e2:	db05      	blt.n	80084f0 <ILI9341_Draw_Vertical_Line+0x54>
		{
			height= LCD_HEIGHT - ypos;
 80084e4:	4b10      	ldr	r3, [pc, #64]	; (8008528 <ILI9341_Draw_Vertical_Line+0x8c>)
 80084e6:	881b      	ldrh	r3, [r3, #0]
 80084e8:	b29a      	uxth	r2, r3
 80084ea:	88bb      	ldrh	r3, [r7, #4]
 80084ec:	1ad3      	subs	r3, r2, r3
 80084ee:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Address(xpos, ypos, xpos, (ypos + height) - 1);
 80084f0:	88ba      	ldrh	r2, [r7, #4]
 80084f2:	887b      	ldrh	r3, [r7, #2]
 80084f4:	4413      	add	r3, r2
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	3b01      	subs	r3, #1
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	88fa      	ldrh	r2, [r7, #6]
 80084fe:	88b9      	ldrh	r1, [r7, #4]
 8008500:	88f8      	ldrh	r0, [r7, #6]
 8008502:	f7ff fb7b 	bl	8007bfc <ILI9341_Set_Address>
	ILI9341_Draw_colour_Burst(xpos, ypos, colour, height, LINE_CHUNK);
 8008506:	887c      	ldrh	r4, [r7, #2]
 8008508:	883a      	ldrh	r2, [r7, #0]
 800850a:	88b9      	ldrh	r1, [r7, #4]
 800850c:	88f8      	ldrh	r0, [r7, #6]
 800850e:	2303      	movs	r3, #3
 8008510:	9300      	str	r3, [sp, #0]
 8008512:	4623      	mov	r3, r4
 8008514:	f7ff fd48 	bl	8007fa8 <ILI9341_Draw_colour_Burst>
 8008518:	e000      	b.n	800851c <ILI9341_Draw_Vertical_Line+0x80>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800851a:	bf00      	nop
}
 800851c:	370c      	adds	r7, #12
 800851e:	46bd      	mov	sp, r7
 8008520:	bd90      	pop	{r4, r7, pc}
 8008522:	bf00      	nop
 8008524:	200003da 	.word	0x200003da
 8008528:	200003d8 	.word	0x200003d8

0800852c <__errno>:
 800852c:	4b01      	ldr	r3, [pc, #4]	; (8008534 <__errno+0x8>)
 800852e:	6818      	ldr	r0, [r3, #0]
 8008530:	4770      	bx	lr
 8008532:	bf00      	nop
 8008534:	200003e0 	.word	0x200003e0

08008538 <__libc_init_array>:
 8008538:	b570      	push	{r4, r5, r6, lr}
 800853a:	4e0d      	ldr	r6, [pc, #52]	; (8008570 <__libc_init_array+0x38>)
 800853c:	4c0d      	ldr	r4, [pc, #52]	; (8008574 <__libc_init_array+0x3c>)
 800853e:	1ba4      	subs	r4, r4, r6
 8008540:	10a4      	asrs	r4, r4, #2
 8008542:	2500      	movs	r5, #0
 8008544:	42a5      	cmp	r5, r4
 8008546:	d109      	bne.n	800855c <__libc_init_array+0x24>
 8008548:	4e0b      	ldr	r6, [pc, #44]	; (8008578 <__libc_init_array+0x40>)
 800854a:	4c0c      	ldr	r4, [pc, #48]	; (800857c <__libc_init_array+0x44>)
 800854c:	f001 f940 	bl	80097d0 <_init>
 8008550:	1ba4      	subs	r4, r4, r6
 8008552:	10a4      	asrs	r4, r4, #2
 8008554:	2500      	movs	r5, #0
 8008556:	42a5      	cmp	r5, r4
 8008558:	d105      	bne.n	8008566 <__libc_init_array+0x2e>
 800855a:	bd70      	pop	{r4, r5, r6, pc}
 800855c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008560:	4798      	blx	r3
 8008562:	3501      	adds	r5, #1
 8008564:	e7ee      	b.n	8008544 <__libc_init_array+0xc>
 8008566:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800856a:	4798      	blx	r3
 800856c:	3501      	adds	r5, #1
 800856e:	e7f2      	b.n	8008556 <__libc_init_array+0x1e>
 8008570:	08009bd8 	.word	0x08009bd8
 8008574:	08009bd8 	.word	0x08009bd8
 8008578:	08009bd8 	.word	0x08009bd8
 800857c:	08009bdc 	.word	0x08009bdc

08008580 <memset>:
 8008580:	4402      	add	r2, r0
 8008582:	4603      	mov	r3, r0
 8008584:	4293      	cmp	r3, r2
 8008586:	d100      	bne.n	800858a <memset+0xa>
 8008588:	4770      	bx	lr
 800858a:	f803 1b01 	strb.w	r1, [r3], #1
 800858e:	e7f9      	b.n	8008584 <memset+0x4>

08008590 <iprintf>:
 8008590:	b40f      	push	{r0, r1, r2, r3}
 8008592:	4b0a      	ldr	r3, [pc, #40]	; (80085bc <iprintf+0x2c>)
 8008594:	b513      	push	{r0, r1, r4, lr}
 8008596:	681c      	ldr	r4, [r3, #0]
 8008598:	b124      	cbz	r4, 80085a4 <iprintf+0x14>
 800859a:	69a3      	ldr	r3, [r4, #24]
 800859c:	b913      	cbnz	r3, 80085a4 <iprintf+0x14>
 800859e:	4620      	mov	r0, r4
 80085a0:	f000 fa56 	bl	8008a50 <__sinit>
 80085a4:	ab05      	add	r3, sp, #20
 80085a6:	9a04      	ldr	r2, [sp, #16]
 80085a8:	68a1      	ldr	r1, [r4, #8]
 80085aa:	9301      	str	r3, [sp, #4]
 80085ac:	4620      	mov	r0, r4
 80085ae:	f000 fd61 	bl	8009074 <_vfiprintf_r>
 80085b2:	b002      	add	sp, #8
 80085b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085b8:	b004      	add	sp, #16
 80085ba:	4770      	bx	lr
 80085bc:	200003e0 	.word	0x200003e0

080085c0 <_puts_r>:
 80085c0:	b570      	push	{r4, r5, r6, lr}
 80085c2:	460e      	mov	r6, r1
 80085c4:	4605      	mov	r5, r0
 80085c6:	b118      	cbz	r0, 80085d0 <_puts_r+0x10>
 80085c8:	6983      	ldr	r3, [r0, #24]
 80085ca:	b90b      	cbnz	r3, 80085d0 <_puts_r+0x10>
 80085cc:	f000 fa40 	bl	8008a50 <__sinit>
 80085d0:	69ab      	ldr	r3, [r5, #24]
 80085d2:	68ac      	ldr	r4, [r5, #8]
 80085d4:	b913      	cbnz	r3, 80085dc <_puts_r+0x1c>
 80085d6:	4628      	mov	r0, r5
 80085d8:	f000 fa3a 	bl	8008a50 <__sinit>
 80085dc:	4b23      	ldr	r3, [pc, #140]	; (800866c <_puts_r+0xac>)
 80085de:	429c      	cmp	r4, r3
 80085e0:	d117      	bne.n	8008612 <_puts_r+0x52>
 80085e2:	686c      	ldr	r4, [r5, #4]
 80085e4:	89a3      	ldrh	r3, [r4, #12]
 80085e6:	071b      	lsls	r3, r3, #28
 80085e8:	d51d      	bpl.n	8008626 <_puts_r+0x66>
 80085ea:	6923      	ldr	r3, [r4, #16]
 80085ec:	b1db      	cbz	r3, 8008626 <_puts_r+0x66>
 80085ee:	3e01      	subs	r6, #1
 80085f0:	68a3      	ldr	r3, [r4, #8]
 80085f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80085f6:	3b01      	subs	r3, #1
 80085f8:	60a3      	str	r3, [r4, #8]
 80085fa:	b9e9      	cbnz	r1, 8008638 <_puts_r+0x78>
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	da2e      	bge.n	800865e <_puts_r+0x9e>
 8008600:	4622      	mov	r2, r4
 8008602:	210a      	movs	r1, #10
 8008604:	4628      	mov	r0, r5
 8008606:	f000 f873 	bl	80086f0 <__swbuf_r>
 800860a:	3001      	adds	r0, #1
 800860c:	d011      	beq.n	8008632 <_puts_r+0x72>
 800860e:	200a      	movs	r0, #10
 8008610:	e011      	b.n	8008636 <_puts_r+0x76>
 8008612:	4b17      	ldr	r3, [pc, #92]	; (8008670 <_puts_r+0xb0>)
 8008614:	429c      	cmp	r4, r3
 8008616:	d101      	bne.n	800861c <_puts_r+0x5c>
 8008618:	68ac      	ldr	r4, [r5, #8]
 800861a:	e7e3      	b.n	80085e4 <_puts_r+0x24>
 800861c:	4b15      	ldr	r3, [pc, #84]	; (8008674 <_puts_r+0xb4>)
 800861e:	429c      	cmp	r4, r3
 8008620:	bf08      	it	eq
 8008622:	68ec      	ldreq	r4, [r5, #12]
 8008624:	e7de      	b.n	80085e4 <_puts_r+0x24>
 8008626:	4621      	mov	r1, r4
 8008628:	4628      	mov	r0, r5
 800862a:	f000 f8b3 	bl	8008794 <__swsetup_r>
 800862e:	2800      	cmp	r0, #0
 8008630:	d0dd      	beq.n	80085ee <_puts_r+0x2e>
 8008632:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008636:	bd70      	pop	{r4, r5, r6, pc}
 8008638:	2b00      	cmp	r3, #0
 800863a:	da04      	bge.n	8008646 <_puts_r+0x86>
 800863c:	69a2      	ldr	r2, [r4, #24]
 800863e:	429a      	cmp	r2, r3
 8008640:	dc06      	bgt.n	8008650 <_puts_r+0x90>
 8008642:	290a      	cmp	r1, #10
 8008644:	d004      	beq.n	8008650 <_puts_r+0x90>
 8008646:	6823      	ldr	r3, [r4, #0]
 8008648:	1c5a      	adds	r2, r3, #1
 800864a:	6022      	str	r2, [r4, #0]
 800864c:	7019      	strb	r1, [r3, #0]
 800864e:	e7cf      	b.n	80085f0 <_puts_r+0x30>
 8008650:	4622      	mov	r2, r4
 8008652:	4628      	mov	r0, r5
 8008654:	f000 f84c 	bl	80086f0 <__swbuf_r>
 8008658:	3001      	adds	r0, #1
 800865a:	d1c9      	bne.n	80085f0 <_puts_r+0x30>
 800865c:	e7e9      	b.n	8008632 <_puts_r+0x72>
 800865e:	6823      	ldr	r3, [r4, #0]
 8008660:	200a      	movs	r0, #10
 8008662:	1c5a      	adds	r2, r3, #1
 8008664:	6022      	str	r2, [r4, #0]
 8008666:	7018      	strb	r0, [r3, #0]
 8008668:	e7e5      	b.n	8008636 <_puts_r+0x76>
 800866a:	bf00      	nop
 800866c:	08009b64 	.word	0x08009b64
 8008670:	08009b84 	.word	0x08009b84
 8008674:	08009b44 	.word	0x08009b44

08008678 <puts>:
 8008678:	4b02      	ldr	r3, [pc, #8]	; (8008684 <puts+0xc>)
 800867a:	4601      	mov	r1, r0
 800867c:	6818      	ldr	r0, [r3, #0]
 800867e:	f7ff bf9f 	b.w	80085c0 <_puts_r>
 8008682:	bf00      	nop
 8008684:	200003e0 	.word	0x200003e0

08008688 <sniprintf>:
 8008688:	b40c      	push	{r2, r3}
 800868a:	b530      	push	{r4, r5, lr}
 800868c:	4b17      	ldr	r3, [pc, #92]	; (80086ec <sniprintf+0x64>)
 800868e:	1e0c      	subs	r4, r1, #0
 8008690:	b09d      	sub	sp, #116	; 0x74
 8008692:	681d      	ldr	r5, [r3, #0]
 8008694:	da08      	bge.n	80086a8 <sniprintf+0x20>
 8008696:	238b      	movs	r3, #139	; 0x8b
 8008698:	602b      	str	r3, [r5, #0]
 800869a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800869e:	b01d      	add	sp, #116	; 0x74
 80086a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80086a4:	b002      	add	sp, #8
 80086a6:	4770      	bx	lr
 80086a8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80086ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 80086b0:	bf14      	ite	ne
 80086b2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80086b6:	4623      	moveq	r3, r4
 80086b8:	9304      	str	r3, [sp, #16]
 80086ba:	9307      	str	r3, [sp, #28]
 80086bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80086c0:	9002      	str	r0, [sp, #8]
 80086c2:	9006      	str	r0, [sp, #24]
 80086c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80086c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80086ca:	ab21      	add	r3, sp, #132	; 0x84
 80086cc:	a902      	add	r1, sp, #8
 80086ce:	4628      	mov	r0, r5
 80086d0:	9301      	str	r3, [sp, #4]
 80086d2:	f000 fbad 	bl	8008e30 <_svfiprintf_r>
 80086d6:	1c43      	adds	r3, r0, #1
 80086d8:	bfbc      	itt	lt
 80086da:	238b      	movlt	r3, #139	; 0x8b
 80086dc:	602b      	strlt	r3, [r5, #0]
 80086de:	2c00      	cmp	r4, #0
 80086e0:	d0dd      	beq.n	800869e <sniprintf+0x16>
 80086e2:	9b02      	ldr	r3, [sp, #8]
 80086e4:	2200      	movs	r2, #0
 80086e6:	701a      	strb	r2, [r3, #0]
 80086e8:	e7d9      	b.n	800869e <sniprintf+0x16>
 80086ea:	bf00      	nop
 80086ec:	200003e0 	.word	0x200003e0

080086f0 <__swbuf_r>:
 80086f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086f2:	460e      	mov	r6, r1
 80086f4:	4614      	mov	r4, r2
 80086f6:	4605      	mov	r5, r0
 80086f8:	b118      	cbz	r0, 8008702 <__swbuf_r+0x12>
 80086fa:	6983      	ldr	r3, [r0, #24]
 80086fc:	b90b      	cbnz	r3, 8008702 <__swbuf_r+0x12>
 80086fe:	f000 f9a7 	bl	8008a50 <__sinit>
 8008702:	4b21      	ldr	r3, [pc, #132]	; (8008788 <__swbuf_r+0x98>)
 8008704:	429c      	cmp	r4, r3
 8008706:	d12a      	bne.n	800875e <__swbuf_r+0x6e>
 8008708:	686c      	ldr	r4, [r5, #4]
 800870a:	69a3      	ldr	r3, [r4, #24]
 800870c:	60a3      	str	r3, [r4, #8]
 800870e:	89a3      	ldrh	r3, [r4, #12]
 8008710:	071a      	lsls	r2, r3, #28
 8008712:	d52e      	bpl.n	8008772 <__swbuf_r+0x82>
 8008714:	6923      	ldr	r3, [r4, #16]
 8008716:	b363      	cbz	r3, 8008772 <__swbuf_r+0x82>
 8008718:	6923      	ldr	r3, [r4, #16]
 800871a:	6820      	ldr	r0, [r4, #0]
 800871c:	1ac0      	subs	r0, r0, r3
 800871e:	6963      	ldr	r3, [r4, #20]
 8008720:	b2f6      	uxtb	r6, r6
 8008722:	4283      	cmp	r3, r0
 8008724:	4637      	mov	r7, r6
 8008726:	dc04      	bgt.n	8008732 <__swbuf_r+0x42>
 8008728:	4621      	mov	r1, r4
 800872a:	4628      	mov	r0, r5
 800872c:	f000 f926 	bl	800897c <_fflush_r>
 8008730:	bb28      	cbnz	r0, 800877e <__swbuf_r+0x8e>
 8008732:	68a3      	ldr	r3, [r4, #8]
 8008734:	3b01      	subs	r3, #1
 8008736:	60a3      	str	r3, [r4, #8]
 8008738:	6823      	ldr	r3, [r4, #0]
 800873a:	1c5a      	adds	r2, r3, #1
 800873c:	6022      	str	r2, [r4, #0]
 800873e:	701e      	strb	r6, [r3, #0]
 8008740:	6963      	ldr	r3, [r4, #20]
 8008742:	3001      	adds	r0, #1
 8008744:	4283      	cmp	r3, r0
 8008746:	d004      	beq.n	8008752 <__swbuf_r+0x62>
 8008748:	89a3      	ldrh	r3, [r4, #12]
 800874a:	07db      	lsls	r3, r3, #31
 800874c:	d519      	bpl.n	8008782 <__swbuf_r+0x92>
 800874e:	2e0a      	cmp	r6, #10
 8008750:	d117      	bne.n	8008782 <__swbuf_r+0x92>
 8008752:	4621      	mov	r1, r4
 8008754:	4628      	mov	r0, r5
 8008756:	f000 f911 	bl	800897c <_fflush_r>
 800875a:	b190      	cbz	r0, 8008782 <__swbuf_r+0x92>
 800875c:	e00f      	b.n	800877e <__swbuf_r+0x8e>
 800875e:	4b0b      	ldr	r3, [pc, #44]	; (800878c <__swbuf_r+0x9c>)
 8008760:	429c      	cmp	r4, r3
 8008762:	d101      	bne.n	8008768 <__swbuf_r+0x78>
 8008764:	68ac      	ldr	r4, [r5, #8]
 8008766:	e7d0      	b.n	800870a <__swbuf_r+0x1a>
 8008768:	4b09      	ldr	r3, [pc, #36]	; (8008790 <__swbuf_r+0xa0>)
 800876a:	429c      	cmp	r4, r3
 800876c:	bf08      	it	eq
 800876e:	68ec      	ldreq	r4, [r5, #12]
 8008770:	e7cb      	b.n	800870a <__swbuf_r+0x1a>
 8008772:	4621      	mov	r1, r4
 8008774:	4628      	mov	r0, r5
 8008776:	f000 f80d 	bl	8008794 <__swsetup_r>
 800877a:	2800      	cmp	r0, #0
 800877c:	d0cc      	beq.n	8008718 <__swbuf_r+0x28>
 800877e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008782:	4638      	mov	r0, r7
 8008784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008786:	bf00      	nop
 8008788:	08009b64 	.word	0x08009b64
 800878c:	08009b84 	.word	0x08009b84
 8008790:	08009b44 	.word	0x08009b44

08008794 <__swsetup_r>:
 8008794:	4b32      	ldr	r3, [pc, #200]	; (8008860 <__swsetup_r+0xcc>)
 8008796:	b570      	push	{r4, r5, r6, lr}
 8008798:	681d      	ldr	r5, [r3, #0]
 800879a:	4606      	mov	r6, r0
 800879c:	460c      	mov	r4, r1
 800879e:	b125      	cbz	r5, 80087aa <__swsetup_r+0x16>
 80087a0:	69ab      	ldr	r3, [r5, #24]
 80087a2:	b913      	cbnz	r3, 80087aa <__swsetup_r+0x16>
 80087a4:	4628      	mov	r0, r5
 80087a6:	f000 f953 	bl	8008a50 <__sinit>
 80087aa:	4b2e      	ldr	r3, [pc, #184]	; (8008864 <__swsetup_r+0xd0>)
 80087ac:	429c      	cmp	r4, r3
 80087ae:	d10f      	bne.n	80087d0 <__swsetup_r+0x3c>
 80087b0:	686c      	ldr	r4, [r5, #4]
 80087b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087b6:	b29a      	uxth	r2, r3
 80087b8:	0715      	lsls	r5, r2, #28
 80087ba:	d42c      	bmi.n	8008816 <__swsetup_r+0x82>
 80087bc:	06d0      	lsls	r0, r2, #27
 80087be:	d411      	bmi.n	80087e4 <__swsetup_r+0x50>
 80087c0:	2209      	movs	r2, #9
 80087c2:	6032      	str	r2, [r6, #0]
 80087c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087c8:	81a3      	strh	r3, [r4, #12]
 80087ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087ce:	e03e      	b.n	800884e <__swsetup_r+0xba>
 80087d0:	4b25      	ldr	r3, [pc, #148]	; (8008868 <__swsetup_r+0xd4>)
 80087d2:	429c      	cmp	r4, r3
 80087d4:	d101      	bne.n	80087da <__swsetup_r+0x46>
 80087d6:	68ac      	ldr	r4, [r5, #8]
 80087d8:	e7eb      	b.n	80087b2 <__swsetup_r+0x1e>
 80087da:	4b24      	ldr	r3, [pc, #144]	; (800886c <__swsetup_r+0xd8>)
 80087dc:	429c      	cmp	r4, r3
 80087de:	bf08      	it	eq
 80087e0:	68ec      	ldreq	r4, [r5, #12]
 80087e2:	e7e6      	b.n	80087b2 <__swsetup_r+0x1e>
 80087e4:	0751      	lsls	r1, r2, #29
 80087e6:	d512      	bpl.n	800880e <__swsetup_r+0x7a>
 80087e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087ea:	b141      	cbz	r1, 80087fe <__swsetup_r+0x6a>
 80087ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087f0:	4299      	cmp	r1, r3
 80087f2:	d002      	beq.n	80087fa <__swsetup_r+0x66>
 80087f4:	4630      	mov	r0, r6
 80087f6:	f000 fa19 	bl	8008c2c <_free_r>
 80087fa:	2300      	movs	r3, #0
 80087fc:	6363      	str	r3, [r4, #52]	; 0x34
 80087fe:	89a3      	ldrh	r3, [r4, #12]
 8008800:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008804:	81a3      	strh	r3, [r4, #12]
 8008806:	2300      	movs	r3, #0
 8008808:	6063      	str	r3, [r4, #4]
 800880a:	6923      	ldr	r3, [r4, #16]
 800880c:	6023      	str	r3, [r4, #0]
 800880e:	89a3      	ldrh	r3, [r4, #12]
 8008810:	f043 0308 	orr.w	r3, r3, #8
 8008814:	81a3      	strh	r3, [r4, #12]
 8008816:	6923      	ldr	r3, [r4, #16]
 8008818:	b94b      	cbnz	r3, 800882e <__swsetup_r+0x9a>
 800881a:	89a3      	ldrh	r3, [r4, #12]
 800881c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008824:	d003      	beq.n	800882e <__swsetup_r+0x9a>
 8008826:	4621      	mov	r1, r4
 8008828:	4630      	mov	r0, r6
 800882a:	f000 f9bf 	bl	8008bac <__smakebuf_r>
 800882e:	89a2      	ldrh	r2, [r4, #12]
 8008830:	f012 0301 	ands.w	r3, r2, #1
 8008834:	d00c      	beq.n	8008850 <__swsetup_r+0xbc>
 8008836:	2300      	movs	r3, #0
 8008838:	60a3      	str	r3, [r4, #8]
 800883a:	6963      	ldr	r3, [r4, #20]
 800883c:	425b      	negs	r3, r3
 800883e:	61a3      	str	r3, [r4, #24]
 8008840:	6923      	ldr	r3, [r4, #16]
 8008842:	b953      	cbnz	r3, 800885a <__swsetup_r+0xc6>
 8008844:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008848:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800884c:	d1ba      	bne.n	80087c4 <__swsetup_r+0x30>
 800884e:	bd70      	pop	{r4, r5, r6, pc}
 8008850:	0792      	lsls	r2, r2, #30
 8008852:	bf58      	it	pl
 8008854:	6963      	ldrpl	r3, [r4, #20]
 8008856:	60a3      	str	r3, [r4, #8]
 8008858:	e7f2      	b.n	8008840 <__swsetup_r+0xac>
 800885a:	2000      	movs	r0, #0
 800885c:	e7f7      	b.n	800884e <__swsetup_r+0xba>
 800885e:	bf00      	nop
 8008860:	200003e0 	.word	0x200003e0
 8008864:	08009b64 	.word	0x08009b64
 8008868:	08009b84 	.word	0x08009b84
 800886c:	08009b44 	.word	0x08009b44

08008870 <__sflush_r>:
 8008870:	898a      	ldrh	r2, [r1, #12]
 8008872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008876:	4605      	mov	r5, r0
 8008878:	0710      	lsls	r0, r2, #28
 800887a:	460c      	mov	r4, r1
 800887c:	d458      	bmi.n	8008930 <__sflush_r+0xc0>
 800887e:	684b      	ldr	r3, [r1, #4]
 8008880:	2b00      	cmp	r3, #0
 8008882:	dc05      	bgt.n	8008890 <__sflush_r+0x20>
 8008884:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008886:	2b00      	cmp	r3, #0
 8008888:	dc02      	bgt.n	8008890 <__sflush_r+0x20>
 800888a:	2000      	movs	r0, #0
 800888c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008890:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008892:	2e00      	cmp	r6, #0
 8008894:	d0f9      	beq.n	800888a <__sflush_r+0x1a>
 8008896:	2300      	movs	r3, #0
 8008898:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800889c:	682f      	ldr	r7, [r5, #0]
 800889e:	6a21      	ldr	r1, [r4, #32]
 80088a0:	602b      	str	r3, [r5, #0]
 80088a2:	d032      	beq.n	800890a <__sflush_r+0x9a>
 80088a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80088a6:	89a3      	ldrh	r3, [r4, #12]
 80088a8:	075a      	lsls	r2, r3, #29
 80088aa:	d505      	bpl.n	80088b8 <__sflush_r+0x48>
 80088ac:	6863      	ldr	r3, [r4, #4]
 80088ae:	1ac0      	subs	r0, r0, r3
 80088b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088b2:	b10b      	cbz	r3, 80088b8 <__sflush_r+0x48>
 80088b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80088b6:	1ac0      	subs	r0, r0, r3
 80088b8:	2300      	movs	r3, #0
 80088ba:	4602      	mov	r2, r0
 80088bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088be:	6a21      	ldr	r1, [r4, #32]
 80088c0:	4628      	mov	r0, r5
 80088c2:	47b0      	blx	r6
 80088c4:	1c43      	adds	r3, r0, #1
 80088c6:	89a3      	ldrh	r3, [r4, #12]
 80088c8:	d106      	bne.n	80088d8 <__sflush_r+0x68>
 80088ca:	6829      	ldr	r1, [r5, #0]
 80088cc:	291d      	cmp	r1, #29
 80088ce:	d848      	bhi.n	8008962 <__sflush_r+0xf2>
 80088d0:	4a29      	ldr	r2, [pc, #164]	; (8008978 <__sflush_r+0x108>)
 80088d2:	40ca      	lsrs	r2, r1
 80088d4:	07d6      	lsls	r6, r2, #31
 80088d6:	d544      	bpl.n	8008962 <__sflush_r+0xf2>
 80088d8:	2200      	movs	r2, #0
 80088da:	6062      	str	r2, [r4, #4]
 80088dc:	04d9      	lsls	r1, r3, #19
 80088de:	6922      	ldr	r2, [r4, #16]
 80088e0:	6022      	str	r2, [r4, #0]
 80088e2:	d504      	bpl.n	80088ee <__sflush_r+0x7e>
 80088e4:	1c42      	adds	r2, r0, #1
 80088e6:	d101      	bne.n	80088ec <__sflush_r+0x7c>
 80088e8:	682b      	ldr	r3, [r5, #0]
 80088ea:	b903      	cbnz	r3, 80088ee <__sflush_r+0x7e>
 80088ec:	6560      	str	r0, [r4, #84]	; 0x54
 80088ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088f0:	602f      	str	r7, [r5, #0]
 80088f2:	2900      	cmp	r1, #0
 80088f4:	d0c9      	beq.n	800888a <__sflush_r+0x1a>
 80088f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088fa:	4299      	cmp	r1, r3
 80088fc:	d002      	beq.n	8008904 <__sflush_r+0x94>
 80088fe:	4628      	mov	r0, r5
 8008900:	f000 f994 	bl	8008c2c <_free_r>
 8008904:	2000      	movs	r0, #0
 8008906:	6360      	str	r0, [r4, #52]	; 0x34
 8008908:	e7c0      	b.n	800888c <__sflush_r+0x1c>
 800890a:	2301      	movs	r3, #1
 800890c:	4628      	mov	r0, r5
 800890e:	47b0      	blx	r6
 8008910:	1c41      	adds	r1, r0, #1
 8008912:	d1c8      	bne.n	80088a6 <__sflush_r+0x36>
 8008914:	682b      	ldr	r3, [r5, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d0c5      	beq.n	80088a6 <__sflush_r+0x36>
 800891a:	2b1d      	cmp	r3, #29
 800891c:	d001      	beq.n	8008922 <__sflush_r+0xb2>
 800891e:	2b16      	cmp	r3, #22
 8008920:	d101      	bne.n	8008926 <__sflush_r+0xb6>
 8008922:	602f      	str	r7, [r5, #0]
 8008924:	e7b1      	b.n	800888a <__sflush_r+0x1a>
 8008926:	89a3      	ldrh	r3, [r4, #12]
 8008928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800892c:	81a3      	strh	r3, [r4, #12]
 800892e:	e7ad      	b.n	800888c <__sflush_r+0x1c>
 8008930:	690f      	ldr	r7, [r1, #16]
 8008932:	2f00      	cmp	r7, #0
 8008934:	d0a9      	beq.n	800888a <__sflush_r+0x1a>
 8008936:	0793      	lsls	r3, r2, #30
 8008938:	680e      	ldr	r6, [r1, #0]
 800893a:	bf08      	it	eq
 800893c:	694b      	ldreq	r3, [r1, #20]
 800893e:	600f      	str	r7, [r1, #0]
 8008940:	bf18      	it	ne
 8008942:	2300      	movne	r3, #0
 8008944:	eba6 0807 	sub.w	r8, r6, r7
 8008948:	608b      	str	r3, [r1, #8]
 800894a:	f1b8 0f00 	cmp.w	r8, #0
 800894e:	dd9c      	ble.n	800888a <__sflush_r+0x1a>
 8008950:	4643      	mov	r3, r8
 8008952:	463a      	mov	r2, r7
 8008954:	6a21      	ldr	r1, [r4, #32]
 8008956:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008958:	4628      	mov	r0, r5
 800895a:	47b0      	blx	r6
 800895c:	2800      	cmp	r0, #0
 800895e:	dc06      	bgt.n	800896e <__sflush_r+0xfe>
 8008960:	89a3      	ldrh	r3, [r4, #12]
 8008962:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008966:	81a3      	strh	r3, [r4, #12]
 8008968:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800896c:	e78e      	b.n	800888c <__sflush_r+0x1c>
 800896e:	4407      	add	r7, r0
 8008970:	eba8 0800 	sub.w	r8, r8, r0
 8008974:	e7e9      	b.n	800894a <__sflush_r+0xda>
 8008976:	bf00      	nop
 8008978:	20400001 	.word	0x20400001

0800897c <_fflush_r>:
 800897c:	b538      	push	{r3, r4, r5, lr}
 800897e:	690b      	ldr	r3, [r1, #16]
 8008980:	4605      	mov	r5, r0
 8008982:	460c      	mov	r4, r1
 8008984:	b1db      	cbz	r3, 80089be <_fflush_r+0x42>
 8008986:	b118      	cbz	r0, 8008990 <_fflush_r+0x14>
 8008988:	6983      	ldr	r3, [r0, #24]
 800898a:	b90b      	cbnz	r3, 8008990 <_fflush_r+0x14>
 800898c:	f000 f860 	bl	8008a50 <__sinit>
 8008990:	4b0c      	ldr	r3, [pc, #48]	; (80089c4 <_fflush_r+0x48>)
 8008992:	429c      	cmp	r4, r3
 8008994:	d109      	bne.n	80089aa <_fflush_r+0x2e>
 8008996:	686c      	ldr	r4, [r5, #4]
 8008998:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800899c:	b17b      	cbz	r3, 80089be <_fflush_r+0x42>
 800899e:	4621      	mov	r1, r4
 80089a0:	4628      	mov	r0, r5
 80089a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089a6:	f7ff bf63 	b.w	8008870 <__sflush_r>
 80089aa:	4b07      	ldr	r3, [pc, #28]	; (80089c8 <_fflush_r+0x4c>)
 80089ac:	429c      	cmp	r4, r3
 80089ae:	d101      	bne.n	80089b4 <_fflush_r+0x38>
 80089b0:	68ac      	ldr	r4, [r5, #8]
 80089b2:	e7f1      	b.n	8008998 <_fflush_r+0x1c>
 80089b4:	4b05      	ldr	r3, [pc, #20]	; (80089cc <_fflush_r+0x50>)
 80089b6:	429c      	cmp	r4, r3
 80089b8:	bf08      	it	eq
 80089ba:	68ec      	ldreq	r4, [r5, #12]
 80089bc:	e7ec      	b.n	8008998 <_fflush_r+0x1c>
 80089be:	2000      	movs	r0, #0
 80089c0:	bd38      	pop	{r3, r4, r5, pc}
 80089c2:	bf00      	nop
 80089c4:	08009b64 	.word	0x08009b64
 80089c8:	08009b84 	.word	0x08009b84
 80089cc:	08009b44 	.word	0x08009b44

080089d0 <std>:
 80089d0:	2300      	movs	r3, #0
 80089d2:	b510      	push	{r4, lr}
 80089d4:	4604      	mov	r4, r0
 80089d6:	e9c0 3300 	strd	r3, r3, [r0]
 80089da:	6083      	str	r3, [r0, #8]
 80089dc:	8181      	strh	r1, [r0, #12]
 80089de:	6643      	str	r3, [r0, #100]	; 0x64
 80089e0:	81c2      	strh	r2, [r0, #14]
 80089e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80089e6:	6183      	str	r3, [r0, #24]
 80089e8:	4619      	mov	r1, r3
 80089ea:	2208      	movs	r2, #8
 80089ec:	305c      	adds	r0, #92	; 0x5c
 80089ee:	f7ff fdc7 	bl	8008580 <memset>
 80089f2:	4b05      	ldr	r3, [pc, #20]	; (8008a08 <std+0x38>)
 80089f4:	6263      	str	r3, [r4, #36]	; 0x24
 80089f6:	4b05      	ldr	r3, [pc, #20]	; (8008a0c <std+0x3c>)
 80089f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80089fa:	4b05      	ldr	r3, [pc, #20]	; (8008a10 <std+0x40>)
 80089fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80089fe:	4b05      	ldr	r3, [pc, #20]	; (8008a14 <std+0x44>)
 8008a00:	6224      	str	r4, [r4, #32]
 8008a02:	6323      	str	r3, [r4, #48]	; 0x30
 8008a04:	bd10      	pop	{r4, pc}
 8008a06:	bf00      	nop
 8008a08:	080095d1 	.word	0x080095d1
 8008a0c:	080095f3 	.word	0x080095f3
 8008a10:	0800962b 	.word	0x0800962b
 8008a14:	0800964f 	.word	0x0800964f

08008a18 <_cleanup_r>:
 8008a18:	4901      	ldr	r1, [pc, #4]	; (8008a20 <_cleanup_r+0x8>)
 8008a1a:	f000 b885 	b.w	8008b28 <_fwalk_reent>
 8008a1e:	bf00      	nop
 8008a20:	0800897d 	.word	0x0800897d

08008a24 <__sfmoreglue>:
 8008a24:	b570      	push	{r4, r5, r6, lr}
 8008a26:	1e4a      	subs	r2, r1, #1
 8008a28:	2568      	movs	r5, #104	; 0x68
 8008a2a:	4355      	muls	r5, r2
 8008a2c:	460e      	mov	r6, r1
 8008a2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008a32:	f000 f949 	bl	8008cc8 <_malloc_r>
 8008a36:	4604      	mov	r4, r0
 8008a38:	b140      	cbz	r0, 8008a4c <__sfmoreglue+0x28>
 8008a3a:	2100      	movs	r1, #0
 8008a3c:	e9c0 1600 	strd	r1, r6, [r0]
 8008a40:	300c      	adds	r0, #12
 8008a42:	60a0      	str	r0, [r4, #8]
 8008a44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008a48:	f7ff fd9a 	bl	8008580 <memset>
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	bd70      	pop	{r4, r5, r6, pc}

08008a50 <__sinit>:
 8008a50:	6983      	ldr	r3, [r0, #24]
 8008a52:	b510      	push	{r4, lr}
 8008a54:	4604      	mov	r4, r0
 8008a56:	bb33      	cbnz	r3, 8008aa6 <__sinit+0x56>
 8008a58:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008a5c:	6503      	str	r3, [r0, #80]	; 0x50
 8008a5e:	4b12      	ldr	r3, [pc, #72]	; (8008aa8 <__sinit+0x58>)
 8008a60:	4a12      	ldr	r2, [pc, #72]	; (8008aac <__sinit+0x5c>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	6282      	str	r2, [r0, #40]	; 0x28
 8008a66:	4298      	cmp	r0, r3
 8008a68:	bf04      	itt	eq
 8008a6a:	2301      	moveq	r3, #1
 8008a6c:	6183      	streq	r3, [r0, #24]
 8008a6e:	f000 f81f 	bl	8008ab0 <__sfp>
 8008a72:	6060      	str	r0, [r4, #4]
 8008a74:	4620      	mov	r0, r4
 8008a76:	f000 f81b 	bl	8008ab0 <__sfp>
 8008a7a:	60a0      	str	r0, [r4, #8]
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	f000 f817 	bl	8008ab0 <__sfp>
 8008a82:	2200      	movs	r2, #0
 8008a84:	60e0      	str	r0, [r4, #12]
 8008a86:	2104      	movs	r1, #4
 8008a88:	6860      	ldr	r0, [r4, #4]
 8008a8a:	f7ff ffa1 	bl	80089d0 <std>
 8008a8e:	2201      	movs	r2, #1
 8008a90:	2109      	movs	r1, #9
 8008a92:	68a0      	ldr	r0, [r4, #8]
 8008a94:	f7ff ff9c 	bl	80089d0 <std>
 8008a98:	2202      	movs	r2, #2
 8008a9a:	2112      	movs	r1, #18
 8008a9c:	68e0      	ldr	r0, [r4, #12]
 8008a9e:	f7ff ff97 	bl	80089d0 <std>
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	61a3      	str	r3, [r4, #24]
 8008aa6:	bd10      	pop	{r4, pc}
 8008aa8:	08009b40 	.word	0x08009b40
 8008aac:	08008a19 	.word	0x08008a19

08008ab0 <__sfp>:
 8008ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ab2:	4b1b      	ldr	r3, [pc, #108]	; (8008b20 <__sfp+0x70>)
 8008ab4:	681e      	ldr	r6, [r3, #0]
 8008ab6:	69b3      	ldr	r3, [r6, #24]
 8008ab8:	4607      	mov	r7, r0
 8008aba:	b913      	cbnz	r3, 8008ac2 <__sfp+0x12>
 8008abc:	4630      	mov	r0, r6
 8008abe:	f7ff ffc7 	bl	8008a50 <__sinit>
 8008ac2:	3648      	adds	r6, #72	; 0x48
 8008ac4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008ac8:	3b01      	subs	r3, #1
 8008aca:	d503      	bpl.n	8008ad4 <__sfp+0x24>
 8008acc:	6833      	ldr	r3, [r6, #0]
 8008ace:	b133      	cbz	r3, 8008ade <__sfp+0x2e>
 8008ad0:	6836      	ldr	r6, [r6, #0]
 8008ad2:	e7f7      	b.n	8008ac4 <__sfp+0x14>
 8008ad4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008ad8:	b16d      	cbz	r5, 8008af6 <__sfp+0x46>
 8008ada:	3468      	adds	r4, #104	; 0x68
 8008adc:	e7f4      	b.n	8008ac8 <__sfp+0x18>
 8008ade:	2104      	movs	r1, #4
 8008ae0:	4638      	mov	r0, r7
 8008ae2:	f7ff ff9f 	bl	8008a24 <__sfmoreglue>
 8008ae6:	6030      	str	r0, [r6, #0]
 8008ae8:	2800      	cmp	r0, #0
 8008aea:	d1f1      	bne.n	8008ad0 <__sfp+0x20>
 8008aec:	230c      	movs	r3, #12
 8008aee:	603b      	str	r3, [r7, #0]
 8008af0:	4604      	mov	r4, r0
 8008af2:	4620      	mov	r0, r4
 8008af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008af6:	4b0b      	ldr	r3, [pc, #44]	; (8008b24 <__sfp+0x74>)
 8008af8:	6665      	str	r5, [r4, #100]	; 0x64
 8008afa:	e9c4 5500 	strd	r5, r5, [r4]
 8008afe:	60a5      	str	r5, [r4, #8]
 8008b00:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008b04:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008b08:	2208      	movs	r2, #8
 8008b0a:	4629      	mov	r1, r5
 8008b0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008b10:	f7ff fd36 	bl	8008580 <memset>
 8008b14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008b18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008b1c:	e7e9      	b.n	8008af2 <__sfp+0x42>
 8008b1e:	bf00      	nop
 8008b20:	08009b40 	.word	0x08009b40
 8008b24:	ffff0001 	.word	0xffff0001

08008b28 <_fwalk_reent>:
 8008b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b2c:	4680      	mov	r8, r0
 8008b2e:	4689      	mov	r9, r1
 8008b30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008b34:	2600      	movs	r6, #0
 8008b36:	b914      	cbnz	r4, 8008b3e <_fwalk_reent+0x16>
 8008b38:	4630      	mov	r0, r6
 8008b3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b3e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008b42:	3f01      	subs	r7, #1
 8008b44:	d501      	bpl.n	8008b4a <_fwalk_reent+0x22>
 8008b46:	6824      	ldr	r4, [r4, #0]
 8008b48:	e7f5      	b.n	8008b36 <_fwalk_reent+0xe>
 8008b4a:	89ab      	ldrh	r3, [r5, #12]
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d907      	bls.n	8008b60 <_fwalk_reent+0x38>
 8008b50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b54:	3301      	adds	r3, #1
 8008b56:	d003      	beq.n	8008b60 <_fwalk_reent+0x38>
 8008b58:	4629      	mov	r1, r5
 8008b5a:	4640      	mov	r0, r8
 8008b5c:	47c8      	blx	r9
 8008b5e:	4306      	orrs	r6, r0
 8008b60:	3568      	adds	r5, #104	; 0x68
 8008b62:	e7ee      	b.n	8008b42 <_fwalk_reent+0x1a>

08008b64 <__swhatbuf_r>:
 8008b64:	b570      	push	{r4, r5, r6, lr}
 8008b66:	460e      	mov	r6, r1
 8008b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b6c:	2900      	cmp	r1, #0
 8008b6e:	b096      	sub	sp, #88	; 0x58
 8008b70:	4614      	mov	r4, r2
 8008b72:	461d      	mov	r5, r3
 8008b74:	da07      	bge.n	8008b86 <__swhatbuf_r+0x22>
 8008b76:	2300      	movs	r3, #0
 8008b78:	602b      	str	r3, [r5, #0]
 8008b7a:	89b3      	ldrh	r3, [r6, #12]
 8008b7c:	061a      	lsls	r2, r3, #24
 8008b7e:	d410      	bmi.n	8008ba2 <__swhatbuf_r+0x3e>
 8008b80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b84:	e00e      	b.n	8008ba4 <__swhatbuf_r+0x40>
 8008b86:	466a      	mov	r2, sp
 8008b88:	f000 fd88 	bl	800969c <_fstat_r>
 8008b8c:	2800      	cmp	r0, #0
 8008b8e:	dbf2      	blt.n	8008b76 <__swhatbuf_r+0x12>
 8008b90:	9a01      	ldr	r2, [sp, #4]
 8008b92:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008b96:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008b9a:	425a      	negs	r2, r3
 8008b9c:	415a      	adcs	r2, r3
 8008b9e:	602a      	str	r2, [r5, #0]
 8008ba0:	e7ee      	b.n	8008b80 <__swhatbuf_r+0x1c>
 8008ba2:	2340      	movs	r3, #64	; 0x40
 8008ba4:	2000      	movs	r0, #0
 8008ba6:	6023      	str	r3, [r4, #0]
 8008ba8:	b016      	add	sp, #88	; 0x58
 8008baa:	bd70      	pop	{r4, r5, r6, pc}

08008bac <__smakebuf_r>:
 8008bac:	898b      	ldrh	r3, [r1, #12]
 8008bae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008bb0:	079d      	lsls	r5, r3, #30
 8008bb2:	4606      	mov	r6, r0
 8008bb4:	460c      	mov	r4, r1
 8008bb6:	d507      	bpl.n	8008bc8 <__smakebuf_r+0x1c>
 8008bb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008bbc:	6023      	str	r3, [r4, #0]
 8008bbe:	6123      	str	r3, [r4, #16]
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	6163      	str	r3, [r4, #20]
 8008bc4:	b002      	add	sp, #8
 8008bc6:	bd70      	pop	{r4, r5, r6, pc}
 8008bc8:	ab01      	add	r3, sp, #4
 8008bca:	466a      	mov	r2, sp
 8008bcc:	f7ff ffca 	bl	8008b64 <__swhatbuf_r>
 8008bd0:	9900      	ldr	r1, [sp, #0]
 8008bd2:	4605      	mov	r5, r0
 8008bd4:	4630      	mov	r0, r6
 8008bd6:	f000 f877 	bl	8008cc8 <_malloc_r>
 8008bda:	b948      	cbnz	r0, 8008bf0 <__smakebuf_r+0x44>
 8008bdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008be0:	059a      	lsls	r2, r3, #22
 8008be2:	d4ef      	bmi.n	8008bc4 <__smakebuf_r+0x18>
 8008be4:	f023 0303 	bic.w	r3, r3, #3
 8008be8:	f043 0302 	orr.w	r3, r3, #2
 8008bec:	81a3      	strh	r3, [r4, #12]
 8008bee:	e7e3      	b.n	8008bb8 <__smakebuf_r+0xc>
 8008bf0:	4b0d      	ldr	r3, [pc, #52]	; (8008c28 <__smakebuf_r+0x7c>)
 8008bf2:	62b3      	str	r3, [r6, #40]	; 0x28
 8008bf4:	89a3      	ldrh	r3, [r4, #12]
 8008bf6:	6020      	str	r0, [r4, #0]
 8008bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bfc:	81a3      	strh	r3, [r4, #12]
 8008bfe:	9b00      	ldr	r3, [sp, #0]
 8008c00:	6163      	str	r3, [r4, #20]
 8008c02:	9b01      	ldr	r3, [sp, #4]
 8008c04:	6120      	str	r0, [r4, #16]
 8008c06:	b15b      	cbz	r3, 8008c20 <__smakebuf_r+0x74>
 8008c08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c0c:	4630      	mov	r0, r6
 8008c0e:	f000 fd57 	bl	80096c0 <_isatty_r>
 8008c12:	b128      	cbz	r0, 8008c20 <__smakebuf_r+0x74>
 8008c14:	89a3      	ldrh	r3, [r4, #12]
 8008c16:	f023 0303 	bic.w	r3, r3, #3
 8008c1a:	f043 0301 	orr.w	r3, r3, #1
 8008c1e:	81a3      	strh	r3, [r4, #12]
 8008c20:	89a3      	ldrh	r3, [r4, #12]
 8008c22:	431d      	orrs	r5, r3
 8008c24:	81a5      	strh	r5, [r4, #12]
 8008c26:	e7cd      	b.n	8008bc4 <__smakebuf_r+0x18>
 8008c28:	08008a19 	.word	0x08008a19

08008c2c <_free_r>:
 8008c2c:	b538      	push	{r3, r4, r5, lr}
 8008c2e:	4605      	mov	r5, r0
 8008c30:	2900      	cmp	r1, #0
 8008c32:	d045      	beq.n	8008cc0 <_free_r+0x94>
 8008c34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c38:	1f0c      	subs	r4, r1, #4
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	bfb8      	it	lt
 8008c3e:	18e4      	addlt	r4, r4, r3
 8008c40:	f000 fd84 	bl	800974c <__malloc_lock>
 8008c44:	4a1f      	ldr	r2, [pc, #124]	; (8008cc4 <_free_r+0x98>)
 8008c46:	6813      	ldr	r3, [r2, #0]
 8008c48:	4610      	mov	r0, r2
 8008c4a:	b933      	cbnz	r3, 8008c5a <_free_r+0x2e>
 8008c4c:	6063      	str	r3, [r4, #4]
 8008c4e:	6014      	str	r4, [r2, #0]
 8008c50:	4628      	mov	r0, r5
 8008c52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c56:	f000 bd7a 	b.w	800974e <__malloc_unlock>
 8008c5a:	42a3      	cmp	r3, r4
 8008c5c:	d90c      	bls.n	8008c78 <_free_r+0x4c>
 8008c5e:	6821      	ldr	r1, [r4, #0]
 8008c60:	1862      	adds	r2, r4, r1
 8008c62:	4293      	cmp	r3, r2
 8008c64:	bf04      	itt	eq
 8008c66:	681a      	ldreq	r2, [r3, #0]
 8008c68:	685b      	ldreq	r3, [r3, #4]
 8008c6a:	6063      	str	r3, [r4, #4]
 8008c6c:	bf04      	itt	eq
 8008c6e:	1852      	addeq	r2, r2, r1
 8008c70:	6022      	streq	r2, [r4, #0]
 8008c72:	6004      	str	r4, [r0, #0]
 8008c74:	e7ec      	b.n	8008c50 <_free_r+0x24>
 8008c76:	4613      	mov	r3, r2
 8008c78:	685a      	ldr	r2, [r3, #4]
 8008c7a:	b10a      	cbz	r2, 8008c80 <_free_r+0x54>
 8008c7c:	42a2      	cmp	r2, r4
 8008c7e:	d9fa      	bls.n	8008c76 <_free_r+0x4a>
 8008c80:	6819      	ldr	r1, [r3, #0]
 8008c82:	1858      	adds	r0, r3, r1
 8008c84:	42a0      	cmp	r0, r4
 8008c86:	d10b      	bne.n	8008ca0 <_free_r+0x74>
 8008c88:	6820      	ldr	r0, [r4, #0]
 8008c8a:	4401      	add	r1, r0
 8008c8c:	1858      	adds	r0, r3, r1
 8008c8e:	4282      	cmp	r2, r0
 8008c90:	6019      	str	r1, [r3, #0]
 8008c92:	d1dd      	bne.n	8008c50 <_free_r+0x24>
 8008c94:	6810      	ldr	r0, [r2, #0]
 8008c96:	6852      	ldr	r2, [r2, #4]
 8008c98:	605a      	str	r2, [r3, #4]
 8008c9a:	4401      	add	r1, r0
 8008c9c:	6019      	str	r1, [r3, #0]
 8008c9e:	e7d7      	b.n	8008c50 <_free_r+0x24>
 8008ca0:	d902      	bls.n	8008ca8 <_free_r+0x7c>
 8008ca2:	230c      	movs	r3, #12
 8008ca4:	602b      	str	r3, [r5, #0]
 8008ca6:	e7d3      	b.n	8008c50 <_free_r+0x24>
 8008ca8:	6820      	ldr	r0, [r4, #0]
 8008caa:	1821      	adds	r1, r4, r0
 8008cac:	428a      	cmp	r2, r1
 8008cae:	bf04      	itt	eq
 8008cb0:	6811      	ldreq	r1, [r2, #0]
 8008cb2:	6852      	ldreq	r2, [r2, #4]
 8008cb4:	6062      	str	r2, [r4, #4]
 8008cb6:	bf04      	itt	eq
 8008cb8:	1809      	addeq	r1, r1, r0
 8008cba:	6021      	streq	r1, [r4, #0]
 8008cbc:	605c      	str	r4, [r3, #4]
 8008cbe:	e7c7      	b.n	8008c50 <_free_r+0x24>
 8008cc0:	bd38      	pop	{r3, r4, r5, pc}
 8008cc2:	bf00      	nop
 8008cc4:	20000470 	.word	0x20000470

08008cc8 <_malloc_r>:
 8008cc8:	b570      	push	{r4, r5, r6, lr}
 8008cca:	1ccd      	adds	r5, r1, #3
 8008ccc:	f025 0503 	bic.w	r5, r5, #3
 8008cd0:	3508      	adds	r5, #8
 8008cd2:	2d0c      	cmp	r5, #12
 8008cd4:	bf38      	it	cc
 8008cd6:	250c      	movcc	r5, #12
 8008cd8:	2d00      	cmp	r5, #0
 8008cda:	4606      	mov	r6, r0
 8008cdc:	db01      	blt.n	8008ce2 <_malloc_r+0x1a>
 8008cde:	42a9      	cmp	r1, r5
 8008ce0:	d903      	bls.n	8008cea <_malloc_r+0x22>
 8008ce2:	230c      	movs	r3, #12
 8008ce4:	6033      	str	r3, [r6, #0]
 8008ce6:	2000      	movs	r0, #0
 8008ce8:	bd70      	pop	{r4, r5, r6, pc}
 8008cea:	f000 fd2f 	bl	800974c <__malloc_lock>
 8008cee:	4a21      	ldr	r2, [pc, #132]	; (8008d74 <_malloc_r+0xac>)
 8008cf0:	6814      	ldr	r4, [r2, #0]
 8008cf2:	4621      	mov	r1, r4
 8008cf4:	b991      	cbnz	r1, 8008d1c <_malloc_r+0x54>
 8008cf6:	4c20      	ldr	r4, [pc, #128]	; (8008d78 <_malloc_r+0xb0>)
 8008cf8:	6823      	ldr	r3, [r4, #0]
 8008cfa:	b91b      	cbnz	r3, 8008d04 <_malloc_r+0x3c>
 8008cfc:	4630      	mov	r0, r6
 8008cfe:	f000 fc57 	bl	80095b0 <_sbrk_r>
 8008d02:	6020      	str	r0, [r4, #0]
 8008d04:	4629      	mov	r1, r5
 8008d06:	4630      	mov	r0, r6
 8008d08:	f000 fc52 	bl	80095b0 <_sbrk_r>
 8008d0c:	1c43      	adds	r3, r0, #1
 8008d0e:	d124      	bne.n	8008d5a <_malloc_r+0x92>
 8008d10:	230c      	movs	r3, #12
 8008d12:	6033      	str	r3, [r6, #0]
 8008d14:	4630      	mov	r0, r6
 8008d16:	f000 fd1a 	bl	800974e <__malloc_unlock>
 8008d1a:	e7e4      	b.n	8008ce6 <_malloc_r+0x1e>
 8008d1c:	680b      	ldr	r3, [r1, #0]
 8008d1e:	1b5b      	subs	r3, r3, r5
 8008d20:	d418      	bmi.n	8008d54 <_malloc_r+0x8c>
 8008d22:	2b0b      	cmp	r3, #11
 8008d24:	d90f      	bls.n	8008d46 <_malloc_r+0x7e>
 8008d26:	600b      	str	r3, [r1, #0]
 8008d28:	50cd      	str	r5, [r1, r3]
 8008d2a:	18cc      	adds	r4, r1, r3
 8008d2c:	4630      	mov	r0, r6
 8008d2e:	f000 fd0e 	bl	800974e <__malloc_unlock>
 8008d32:	f104 000b 	add.w	r0, r4, #11
 8008d36:	1d23      	adds	r3, r4, #4
 8008d38:	f020 0007 	bic.w	r0, r0, #7
 8008d3c:	1ac3      	subs	r3, r0, r3
 8008d3e:	d0d3      	beq.n	8008ce8 <_malloc_r+0x20>
 8008d40:	425a      	negs	r2, r3
 8008d42:	50e2      	str	r2, [r4, r3]
 8008d44:	e7d0      	b.n	8008ce8 <_malloc_r+0x20>
 8008d46:	428c      	cmp	r4, r1
 8008d48:	684b      	ldr	r3, [r1, #4]
 8008d4a:	bf16      	itet	ne
 8008d4c:	6063      	strne	r3, [r4, #4]
 8008d4e:	6013      	streq	r3, [r2, #0]
 8008d50:	460c      	movne	r4, r1
 8008d52:	e7eb      	b.n	8008d2c <_malloc_r+0x64>
 8008d54:	460c      	mov	r4, r1
 8008d56:	6849      	ldr	r1, [r1, #4]
 8008d58:	e7cc      	b.n	8008cf4 <_malloc_r+0x2c>
 8008d5a:	1cc4      	adds	r4, r0, #3
 8008d5c:	f024 0403 	bic.w	r4, r4, #3
 8008d60:	42a0      	cmp	r0, r4
 8008d62:	d005      	beq.n	8008d70 <_malloc_r+0xa8>
 8008d64:	1a21      	subs	r1, r4, r0
 8008d66:	4630      	mov	r0, r6
 8008d68:	f000 fc22 	bl	80095b0 <_sbrk_r>
 8008d6c:	3001      	adds	r0, #1
 8008d6e:	d0cf      	beq.n	8008d10 <_malloc_r+0x48>
 8008d70:	6025      	str	r5, [r4, #0]
 8008d72:	e7db      	b.n	8008d2c <_malloc_r+0x64>
 8008d74:	20000470 	.word	0x20000470
 8008d78:	20000474 	.word	0x20000474

08008d7c <__ssputs_r>:
 8008d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d80:	688e      	ldr	r6, [r1, #8]
 8008d82:	429e      	cmp	r6, r3
 8008d84:	4682      	mov	sl, r0
 8008d86:	460c      	mov	r4, r1
 8008d88:	4690      	mov	r8, r2
 8008d8a:	4699      	mov	r9, r3
 8008d8c:	d837      	bhi.n	8008dfe <__ssputs_r+0x82>
 8008d8e:	898a      	ldrh	r2, [r1, #12]
 8008d90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008d94:	d031      	beq.n	8008dfa <__ssputs_r+0x7e>
 8008d96:	6825      	ldr	r5, [r4, #0]
 8008d98:	6909      	ldr	r1, [r1, #16]
 8008d9a:	1a6f      	subs	r7, r5, r1
 8008d9c:	6965      	ldr	r5, [r4, #20]
 8008d9e:	2302      	movs	r3, #2
 8008da0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008da4:	fb95 f5f3 	sdiv	r5, r5, r3
 8008da8:	f109 0301 	add.w	r3, r9, #1
 8008dac:	443b      	add	r3, r7
 8008dae:	429d      	cmp	r5, r3
 8008db0:	bf38      	it	cc
 8008db2:	461d      	movcc	r5, r3
 8008db4:	0553      	lsls	r3, r2, #21
 8008db6:	d530      	bpl.n	8008e1a <__ssputs_r+0x9e>
 8008db8:	4629      	mov	r1, r5
 8008dba:	f7ff ff85 	bl	8008cc8 <_malloc_r>
 8008dbe:	4606      	mov	r6, r0
 8008dc0:	b950      	cbnz	r0, 8008dd8 <__ssputs_r+0x5c>
 8008dc2:	230c      	movs	r3, #12
 8008dc4:	f8ca 3000 	str.w	r3, [sl]
 8008dc8:	89a3      	ldrh	r3, [r4, #12]
 8008dca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dce:	81a3      	strh	r3, [r4, #12]
 8008dd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dd8:	463a      	mov	r2, r7
 8008dda:	6921      	ldr	r1, [r4, #16]
 8008ddc:	f000 fc92 	bl	8009704 <memcpy>
 8008de0:	89a3      	ldrh	r3, [r4, #12]
 8008de2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dea:	81a3      	strh	r3, [r4, #12]
 8008dec:	6126      	str	r6, [r4, #16]
 8008dee:	6165      	str	r5, [r4, #20]
 8008df0:	443e      	add	r6, r7
 8008df2:	1bed      	subs	r5, r5, r7
 8008df4:	6026      	str	r6, [r4, #0]
 8008df6:	60a5      	str	r5, [r4, #8]
 8008df8:	464e      	mov	r6, r9
 8008dfa:	454e      	cmp	r6, r9
 8008dfc:	d900      	bls.n	8008e00 <__ssputs_r+0x84>
 8008dfe:	464e      	mov	r6, r9
 8008e00:	4632      	mov	r2, r6
 8008e02:	4641      	mov	r1, r8
 8008e04:	6820      	ldr	r0, [r4, #0]
 8008e06:	f000 fc88 	bl	800971a <memmove>
 8008e0a:	68a3      	ldr	r3, [r4, #8]
 8008e0c:	1b9b      	subs	r3, r3, r6
 8008e0e:	60a3      	str	r3, [r4, #8]
 8008e10:	6823      	ldr	r3, [r4, #0]
 8008e12:	441e      	add	r6, r3
 8008e14:	6026      	str	r6, [r4, #0]
 8008e16:	2000      	movs	r0, #0
 8008e18:	e7dc      	b.n	8008dd4 <__ssputs_r+0x58>
 8008e1a:	462a      	mov	r2, r5
 8008e1c:	f000 fc98 	bl	8009750 <_realloc_r>
 8008e20:	4606      	mov	r6, r0
 8008e22:	2800      	cmp	r0, #0
 8008e24:	d1e2      	bne.n	8008dec <__ssputs_r+0x70>
 8008e26:	6921      	ldr	r1, [r4, #16]
 8008e28:	4650      	mov	r0, sl
 8008e2a:	f7ff feff 	bl	8008c2c <_free_r>
 8008e2e:	e7c8      	b.n	8008dc2 <__ssputs_r+0x46>

08008e30 <_svfiprintf_r>:
 8008e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e34:	461d      	mov	r5, r3
 8008e36:	898b      	ldrh	r3, [r1, #12]
 8008e38:	061f      	lsls	r7, r3, #24
 8008e3a:	b09d      	sub	sp, #116	; 0x74
 8008e3c:	4680      	mov	r8, r0
 8008e3e:	460c      	mov	r4, r1
 8008e40:	4616      	mov	r6, r2
 8008e42:	d50f      	bpl.n	8008e64 <_svfiprintf_r+0x34>
 8008e44:	690b      	ldr	r3, [r1, #16]
 8008e46:	b96b      	cbnz	r3, 8008e64 <_svfiprintf_r+0x34>
 8008e48:	2140      	movs	r1, #64	; 0x40
 8008e4a:	f7ff ff3d 	bl	8008cc8 <_malloc_r>
 8008e4e:	6020      	str	r0, [r4, #0]
 8008e50:	6120      	str	r0, [r4, #16]
 8008e52:	b928      	cbnz	r0, 8008e60 <_svfiprintf_r+0x30>
 8008e54:	230c      	movs	r3, #12
 8008e56:	f8c8 3000 	str.w	r3, [r8]
 8008e5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e5e:	e0c8      	b.n	8008ff2 <_svfiprintf_r+0x1c2>
 8008e60:	2340      	movs	r3, #64	; 0x40
 8008e62:	6163      	str	r3, [r4, #20]
 8008e64:	2300      	movs	r3, #0
 8008e66:	9309      	str	r3, [sp, #36]	; 0x24
 8008e68:	2320      	movs	r3, #32
 8008e6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e6e:	2330      	movs	r3, #48	; 0x30
 8008e70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e74:	9503      	str	r5, [sp, #12]
 8008e76:	f04f 0b01 	mov.w	fp, #1
 8008e7a:	4637      	mov	r7, r6
 8008e7c:	463d      	mov	r5, r7
 8008e7e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008e82:	b10b      	cbz	r3, 8008e88 <_svfiprintf_r+0x58>
 8008e84:	2b25      	cmp	r3, #37	; 0x25
 8008e86:	d13e      	bne.n	8008f06 <_svfiprintf_r+0xd6>
 8008e88:	ebb7 0a06 	subs.w	sl, r7, r6
 8008e8c:	d00b      	beq.n	8008ea6 <_svfiprintf_r+0x76>
 8008e8e:	4653      	mov	r3, sl
 8008e90:	4632      	mov	r2, r6
 8008e92:	4621      	mov	r1, r4
 8008e94:	4640      	mov	r0, r8
 8008e96:	f7ff ff71 	bl	8008d7c <__ssputs_r>
 8008e9a:	3001      	adds	r0, #1
 8008e9c:	f000 80a4 	beq.w	8008fe8 <_svfiprintf_r+0x1b8>
 8008ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ea2:	4453      	add	r3, sl
 8008ea4:	9309      	str	r3, [sp, #36]	; 0x24
 8008ea6:	783b      	ldrb	r3, [r7, #0]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	f000 809d 	beq.w	8008fe8 <_svfiprintf_r+0x1b8>
 8008eae:	2300      	movs	r3, #0
 8008eb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008eb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008eb8:	9304      	str	r3, [sp, #16]
 8008eba:	9307      	str	r3, [sp, #28]
 8008ebc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ec0:	931a      	str	r3, [sp, #104]	; 0x68
 8008ec2:	462f      	mov	r7, r5
 8008ec4:	2205      	movs	r2, #5
 8008ec6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008eca:	4850      	ldr	r0, [pc, #320]	; (800900c <_svfiprintf_r+0x1dc>)
 8008ecc:	f7f7 f9a8 	bl	8000220 <memchr>
 8008ed0:	9b04      	ldr	r3, [sp, #16]
 8008ed2:	b9d0      	cbnz	r0, 8008f0a <_svfiprintf_r+0xda>
 8008ed4:	06d9      	lsls	r1, r3, #27
 8008ed6:	bf44      	itt	mi
 8008ed8:	2220      	movmi	r2, #32
 8008eda:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008ede:	071a      	lsls	r2, r3, #28
 8008ee0:	bf44      	itt	mi
 8008ee2:	222b      	movmi	r2, #43	; 0x2b
 8008ee4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008ee8:	782a      	ldrb	r2, [r5, #0]
 8008eea:	2a2a      	cmp	r2, #42	; 0x2a
 8008eec:	d015      	beq.n	8008f1a <_svfiprintf_r+0xea>
 8008eee:	9a07      	ldr	r2, [sp, #28]
 8008ef0:	462f      	mov	r7, r5
 8008ef2:	2000      	movs	r0, #0
 8008ef4:	250a      	movs	r5, #10
 8008ef6:	4639      	mov	r1, r7
 8008ef8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008efc:	3b30      	subs	r3, #48	; 0x30
 8008efe:	2b09      	cmp	r3, #9
 8008f00:	d94d      	bls.n	8008f9e <_svfiprintf_r+0x16e>
 8008f02:	b1b8      	cbz	r0, 8008f34 <_svfiprintf_r+0x104>
 8008f04:	e00f      	b.n	8008f26 <_svfiprintf_r+0xf6>
 8008f06:	462f      	mov	r7, r5
 8008f08:	e7b8      	b.n	8008e7c <_svfiprintf_r+0x4c>
 8008f0a:	4a40      	ldr	r2, [pc, #256]	; (800900c <_svfiprintf_r+0x1dc>)
 8008f0c:	1a80      	subs	r0, r0, r2
 8008f0e:	fa0b f000 	lsl.w	r0, fp, r0
 8008f12:	4318      	orrs	r0, r3
 8008f14:	9004      	str	r0, [sp, #16]
 8008f16:	463d      	mov	r5, r7
 8008f18:	e7d3      	b.n	8008ec2 <_svfiprintf_r+0x92>
 8008f1a:	9a03      	ldr	r2, [sp, #12]
 8008f1c:	1d11      	adds	r1, r2, #4
 8008f1e:	6812      	ldr	r2, [r2, #0]
 8008f20:	9103      	str	r1, [sp, #12]
 8008f22:	2a00      	cmp	r2, #0
 8008f24:	db01      	blt.n	8008f2a <_svfiprintf_r+0xfa>
 8008f26:	9207      	str	r2, [sp, #28]
 8008f28:	e004      	b.n	8008f34 <_svfiprintf_r+0x104>
 8008f2a:	4252      	negs	r2, r2
 8008f2c:	f043 0302 	orr.w	r3, r3, #2
 8008f30:	9207      	str	r2, [sp, #28]
 8008f32:	9304      	str	r3, [sp, #16]
 8008f34:	783b      	ldrb	r3, [r7, #0]
 8008f36:	2b2e      	cmp	r3, #46	; 0x2e
 8008f38:	d10c      	bne.n	8008f54 <_svfiprintf_r+0x124>
 8008f3a:	787b      	ldrb	r3, [r7, #1]
 8008f3c:	2b2a      	cmp	r3, #42	; 0x2a
 8008f3e:	d133      	bne.n	8008fa8 <_svfiprintf_r+0x178>
 8008f40:	9b03      	ldr	r3, [sp, #12]
 8008f42:	1d1a      	adds	r2, r3, #4
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	9203      	str	r2, [sp, #12]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	bfb8      	it	lt
 8008f4c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008f50:	3702      	adds	r7, #2
 8008f52:	9305      	str	r3, [sp, #20]
 8008f54:	4d2e      	ldr	r5, [pc, #184]	; (8009010 <_svfiprintf_r+0x1e0>)
 8008f56:	7839      	ldrb	r1, [r7, #0]
 8008f58:	2203      	movs	r2, #3
 8008f5a:	4628      	mov	r0, r5
 8008f5c:	f7f7 f960 	bl	8000220 <memchr>
 8008f60:	b138      	cbz	r0, 8008f72 <_svfiprintf_r+0x142>
 8008f62:	2340      	movs	r3, #64	; 0x40
 8008f64:	1b40      	subs	r0, r0, r5
 8008f66:	fa03 f000 	lsl.w	r0, r3, r0
 8008f6a:	9b04      	ldr	r3, [sp, #16]
 8008f6c:	4303      	orrs	r3, r0
 8008f6e:	3701      	adds	r7, #1
 8008f70:	9304      	str	r3, [sp, #16]
 8008f72:	7839      	ldrb	r1, [r7, #0]
 8008f74:	4827      	ldr	r0, [pc, #156]	; (8009014 <_svfiprintf_r+0x1e4>)
 8008f76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f7a:	2206      	movs	r2, #6
 8008f7c:	1c7e      	adds	r6, r7, #1
 8008f7e:	f7f7 f94f 	bl	8000220 <memchr>
 8008f82:	2800      	cmp	r0, #0
 8008f84:	d038      	beq.n	8008ff8 <_svfiprintf_r+0x1c8>
 8008f86:	4b24      	ldr	r3, [pc, #144]	; (8009018 <_svfiprintf_r+0x1e8>)
 8008f88:	bb13      	cbnz	r3, 8008fd0 <_svfiprintf_r+0x1a0>
 8008f8a:	9b03      	ldr	r3, [sp, #12]
 8008f8c:	3307      	adds	r3, #7
 8008f8e:	f023 0307 	bic.w	r3, r3, #7
 8008f92:	3308      	adds	r3, #8
 8008f94:	9303      	str	r3, [sp, #12]
 8008f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f98:	444b      	add	r3, r9
 8008f9a:	9309      	str	r3, [sp, #36]	; 0x24
 8008f9c:	e76d      	b.n	8008e7a <_svfiprintf_r+0x4a>
 8008f9e:	fb05 3202 	mla	r2, r5, r2, r3
 8008fa2:	2001      	movs	r0, #1
 8008fa4:	460f      	mov	r7, r1
 8008fa6:	e7a6      	b.n	8008ef6 <_svfiprintf_r+0xc6>
 8008fa8:	2300      	movs	r3, #0
 8008faa:	3701      	adds	r7, #1
 8008fac:	9305      	str	r3, [sp, #20]
 8008fae:	4619      	mov	r1, r3
 8008fb0:	250a      	movs	r5, #10
 8008fb2:	4638      	mov	r0, r7
 8008fb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fb8:	3a30      	subs	r2, #48	; 0x30
 8008fba:	2a09      	cmp	r2, #9
 8008fbc:	d903      	bls.n	8008fc6 <_svfiprintf_r+0x196>
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d0c8      	beq.n	8008f54 <_svfiprintf_r+0x124>
 8008fc2:	9105      	str	r1, [sp, #20]
 8008fc4:	e7c6      	b.n	8008f54 <_svfiprintf_r+0x124>
 8008fc6:	fb05 2101 	mla	r1, r5, r1, r2
 8008fca:	2301      	movs	r3, #1
 8008fcc:	4607      	mov	r7, r0
 8008fce:	e7f0      	b.n	8008fb2 <_svfiprintf_r+0x182>
 8008fd0:	ab03      	add	r3, sp, #12
 8008fd2:	9300      	str	r3, [sp, #0]
 8008fd4:	4622      	mov	r2, r4
 8008fd6:	4b11      	ldr	r3, [pc, #68]	; (800901c <_svfiprintf_r+0x1ec>)
 8008fd8:	a904      	add	r1, sp, #16
 8008fda:	4640      	mov	r0, r8
 8008fdc:	f3af 8000 	nop.w
 8008fe0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008fe4:	4681      	mov	r9, r0
 8008fe6:	d1d6      	bne.n	8008f96 <_svfiprintf_r+0x166>
 8008fe8:	89a3      	ldrh	r3, [r4, #12]
 8008fea:	065b      	lsls	r3, r3, #25
 8008fec:	f53f af35 	bmi.w	8008e5a <_svfiprintf_r+0x2a>
 8008ff0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ff2:	b01d      	add	sp, #116	; 0x74
 8008ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ff8:	ab03      	add	r3, sp, #12
 8008ffa:	9300      	str	r3, [sp, #0]
 8008ffc:	4622      	mov	r2, r4
 8008ffe:	4b07      	ldr	r3, [pc, #28]	; (800901c <_svfiprintf_r+0x1ec>)
 8009000:	a904      	add	r1, sp, #16
 8009002:	4640      	mov	r0, r8
 8009004:	f000 f9c2 	bl	800938c <_printf_i>
 8009008:	e7ea      	b.n	8008fe0 <_svfiprintf_r+0x1b0>
 800900a:	bf00      	nop
 800900c:	08009ba4 	.word	0x08009ba4
 8009010:	08009baa 	.word	0x08009baa
 8009014:	08009bae 	.word	0x08009bae
 8009018:	00000000 	.word	0x00000000
 800901c:	08008d7d 	.word	0x08008d7d

08009020 <__sfputc_r>:
 8009020:	6893      	ldr	r3, [r2, #8]
 8009022:	3b01      	subs	r3, #1
 8009024:	2b00      	cmp	r3, #0
 8009026:	b410      	push	{r4}
 8009028:	6093      	str	r3, [r2, #8]
 800902a:	da08      	bge.n	800903e <__sfputc_r+0x1e>
 800902c:	6994      	ldr	r4, [r2, #24]
 800902e:	42a3      	cmp	r3, r4
 8009030:	db01      	blt.n	8009036 <__sfputc_r+0x16>
 8009032:	290a      	cmp	r1, #10
 8009034:	d103      	bne.n	800903e <__sfputc_r+0x1e>
 8009036:	f85d 4b04 	ldr.w	r4, [sp], #4
 800903a:	f7ff bb59 	b.w	80086f0 <__swbuf_r>
 800903e:	6813      	ldr	r3, [r2, #0]
 8009040:	1c58      	adds	r0, r3, #1
 8009042:	6010      	str	r0, [r2, #0]
 8009044:	7019      	strb	r1, [r3, #0]
 8009046:	4608      	mov	r0, r1
 8009048:	f85d 4b04 	ldr.w	r4, [sp], #4
 800904c:	4770      	bx	lr

0800904e <__sfputs_r>:
 800904e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009050:	4606      	mov	r6, r0
 8009052:	460f      	mov	r7, r1
 8009054:	4614      	mov	r4, r2
 8009056:	18d5      	adds	r5, r2, r3
 8009058:	42ac      	cmp	r4, r5
 800905a:	d101      	bne.n	8009060 <__sfputs_r+0x12>
 800905c:	2000      	movs	r0, #0
 800905e:	e007      	b.n	8009070 <__sfputs_r+0x22>
 8009060:	463a      	mov	r2, r7
 8009062:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009066:	4630      	mov	r0, r6
 8009068:	f7ff ffda 	bl	8009020 <__sfputc_r>
 800906c:	1c43      	adds	r3, r0, #1
 800906e:	d1f3      	bne.n	8009058 <__sfputs_r+0xa>
 8009070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009074 <_vfiprintf_r>:
 8009074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009078:	460c      	mov	r4, r1
 800907a:	b09d      	sub	sp, #116	; 0x74
 800907c:	4617      	mov	r7, r2
 800907e:	461d      	mov	r5, r3
 8009080:	4606      	mov	r6, r0
 8009082:	b118      	cbz	r0, 800908c <_vfiprintf_r+0x18>
 8009084:	6983      	ldr	r3, [r0, #24]
 8009086:	b90b      	cbnz	r3, 800908c <_vfiprintf_r+0x18>
 8009088:	f7ff fce2 	bl	8008a50 <__sinit>
 800908c:	4b7c      	ldr	r3, [pc, #496]	; (8009280 <_vfiprintf_r+0x20c>)
 800908e:	429c      	cmp	r4, r3
 8009090:	d158      	bne.n	8009144 <_vfiprintf_r+0xd0>
 8009092:	6874      	ldr	r4, [r6, #4]
 8009094:	89a3      	ldrh	r3, [r4, #12]
 8009096:	0718      	lsls	r0, r3, #28
 8009098:	d55e      	bpl.n	8009158 <_vfiprintf_r+0xe4>
 800909a:	6923      	ldr	r3, [r4, #16]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d05b      	beq.n	8009158 <_vfiprintf_r+0xe4>
 80090a0:	2300      	movs	r3, #0
 80090a2:	9309      	str	r3, [sp, #36]	; 0x24
 80090a4:	2320      	movs	r3, #32
 80090a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090aa:	2330      	movs	r3, #48	; 0x30
 80090ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090b0:	9503      	str	r5, [sp, #12]
 80090b2:	f04f 0b01 	mov.w	fp, #1
 80090b6:	46b8      	mov	r8, r7
 80090b8:	4645      	mov	r5, r8
 80090ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 80090be:	b10b      	cbz	r3, 80090c4 <_vfiprintf_r+0x50>
 80090c0:	2b25      	cmp	r3, #37	; 0x25
 80090c2:	d154      	bne.n	800916e <_vfiprintf_r+0xfa>
 80090c4:	ebb8 0a07 	subs.w	sl, r8, r7
 80090c8:	d00b      	beq.n	80090e2 <_vfiprintf_r+0x6e>
 80090ca:	4653      	mov	r3, sl
 80090cc:	463a      	mov	r2, r7
 80090ce:	4621      	mov	r1, r4
 80090d0:	4630      	mov	r0, r6
 80090d2:	f7ff ffbc 	bl	800904e <__sfputs_r>
 80090d6:	3001      	adds	r0, #1
 80090d8:	f000 80c2 	beq.w	8009260 <_vfiprintf_r+0x1ec>
 80090dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090de:	4453      	add	r3, sl
 80090e0:	9309      	str	r3, [sp, #36]	; 0x24
 80090e2:	f898 3000 	ldrb.w	r3, [r8]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	f000 80ba 	beq.w	8009260 <_vfiprintf_r+0x1ec>
 80090ec:	2300      	movs	r3, #0
 80090ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80090f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090f6:	9304      	str	r3, [sp, #16]
 80090f8:	9307      	str	r3, [sp, #28]
 80090fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090fe:	931a      	str	r3, [sp, #104]	; 0x68
 8009100:	46a8      	mov	r8, r5
 8009102:	2205      	movs	r2, #5
 8009104:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009108:	485e      	ldr	r0, [pc, #376]	; (8009284 <_vfiprintf_r+0x210>)
 800910a:	f7f7 f889 	bl	8000220 <memchr>
 800910e:	9b04      	ldr	r3, [sp, #16]
 8009110:	bb78      	cbnz	r0, 8009172 <_vfiprintf_r+0xfe>
 8009112:	06d9      	lsls	r1, r3, #27
 8009114:	bf44      	itt	mi
 8009116:	2220      	movmi	r2, #32
 8009118:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800911c:	071a      	lsls	r2, r3, #28
 800911e:	bf44      	itt	mi
 8009120:	222b      	movmi	r2, #43	; 0x2b
 8009122:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009126:	782a      	ldrb	r2, [r5, #0]
 8009128:	2a2a      	cmp	r2, #42	; 0x2a
 800912a:	d02a      	beq.n	8009182 <_vfiprintf_r+0x10e>
 800912c:	9a07      	ldr	r2, [sp, #28]
 800912e:	46a8      	mov	r8, r5
 8009130:	2000      	movs	r0, #0
 8009132:	250a      	movs	r5, #10
 8009134:	4641      	mov	r1, r8
 8009136:	f811 3b01 	ldrb.w	r3, [r1], #1
 800913a:	3b30      	subs	r3, #48	; 0x30
 800913c:	2b09      	cmp	r3, #9
 800913e:	d969      	bls.n	8009214 <_vfiprintf_r+0x1a0>
 8009140:	b360      	cbz	r0, 800919c <_vfiprintf_r+0x128>
 8009142:	e024      	b.n	800918e <_vfiprintf_r+0x11a>
 8009144:	4b50      	ldr	r3, [pc, #320]	; (8009288 <_vfiprintf_r+0x214>)
 8009146:	429c      	cmp	r4, r3
 8009148:	d101      	bne.n	800914e <_vfiprintf_r+0xda>
 800914a:	68b4      	ldr	r4, [r6, #8]
 800914c:	e7a2      	b.n	8009094 <_vfiprintf_r+0x20>
 800914e:	4b4f      	ldr	r3, [pc, #316]	; (800928c <_vfiprintf_r+0x218>)
 8009150:	429c      	cmp	r4, r3
 8009152:	bf08      	it	eq
 8009154:	68f4      	ldreq	r4, [r6, #12]
 8009156:	e79d      	b.n	8009094 <_vfiprintf_r+0x20>
 8009158:	4621      	mov	r1, r4
 800915a:	4630      	mov	r0, r6
 800915c:	f7ff fb1a 	bl	8008794 <__swsetup_r>
 8009160:	2800      	cmp	r0, #0
 8009162:	d09d      	beq.n	80090a0 <_vfiprintf_r+0x2c>
 8009164:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009168:	b01d      	add	sp, #116	; 0x74
 800916a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800916e:	46a8      	mov	r8, r5
 8009170:	e7a2      	b.n	80090b8 <_vfiprintf_r+0x44>
 8009172:	4a44      	ldr	r2, [pc, #272]	; (8009284 <_vfiprintf_r+0x210>)
 8009174:	1a80      	subs	r0, r0, r2
 8009176:	fa0b f000 	lsl.w	r0, fp, r0
 800917a:	4318      	orrs	r0, r3
 800917c:	9004      	str	r0, [sp, #16]
 800917e:	4645      	mov	r5, r8
 8009180:	e7be      	b.n	8009100 <_vfiprintf_r+0x8c>
 8009182:	9a03      	ldr	r2, [sp, #12]
 8009184:	1d11      	adds	r1, r2, #4
 8009186:	6812      	ldr	r2, [r2, #0]
 8009188:	9103      	str	r1, [sp, #12]
 800918a:	2a00      	cmp	r2, #0
 800918c:	db01      	blt.n	8009192 <_vfiprintf_r+0x11e>
 800918e:	9207      	str	r2, [sp, #28]
 8009190:	e004      	b.n	800919c <_vfiprintf_r+0x128>
 8009192:	4252      	negs	r2, r2
 8009194:	f043 0302 	orr.w	r3, r3, #2
 8009198:	9207      	str	r2, [sp, #28]
 800919a:	9304      	str	r3, [sp, #16]
 800919c:	f898 3000 	ldrb.w	r3, [r8]
 80091a0:	2b2e      	cmp	r3, #46	; 0x2e
 80091a2:	d10e      	bne.n	80091c2 <_vfiprintf_r+0x14e>
 80091a4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80091a8:	2b2a      	cmp	r3, #42	; 0x2a
 80091aa:	d138      	bne.n	800921e <_vfiprintf_r+0x1aa>
 80091ac:	9b03      	ldr	r3, [sp, #12]
 80091ae:	1d1a      	adds	r2, r3, #4
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	9203      	str	r2, [sp, #12]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	bfb8      	it	lt
 80091b8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80091bc:	f108 0802 	add.w	r8, r8, #2
 80091c0:	9305      	str	r3, [sp, #20]
 80091c2:	4d33      	ldr	r5, [pc, #204]	; (8009290 <_vfiprintf_r+0x21c>)
 80091c4:	f898 1000 	ldrb.w	r1, [r8]
 80091c8:	2203      	movs	r2, #3
 80091ca:	4628      	mov	r0, r5
 80091cc:	f7f7 f828 	bl	8000220 <memchr>
 80091d0:	b140      	cbz	r0, 80091e4 <_vfiprintf_r+0x170>
 80091d2:	2340      	movs	r3, #64	; 0x40
 80091d4:	1b40      	subs	r0, r0, r5
 80091d6:	fa03 f000 	lsl.w	r0, r3, r0
 80091da:	9b04      	ldr	r3, [sp, #16]
 80091dc:	4303      	orrs	r3, r0
 80091de:	f108 0801 	add.w	r8, r8, #1
 80091e2:	9304      	str	r3, [sp, #16]
 80091e4:	f898 1000 	ldrb.w	r1, [r8]
 80091e8:	482a      	ldr	r0, [pc, #168]	; (8009294 <_vfiprintf_r+0x220>)
 80091ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091ee:	2206      	movs	r2, #6
 80091f0:	f108 0701 	add.w	r7, r8, #1
 80091f4:	f7f7 f814 	bl	8000220 <memchr>
 80091f8:	2800      	cmp	r0, #0
 80091fa:	d037      	beq.n	800926c <_vfiprintf_r+0x1f8>
 80091fc:	4b26      	ldr	r3, [pc, #152]	; (8009298 <_vfiprintf_r+0x224>)
 80091fe:	bb1b      	cbnz	r3, 8009248 <_vfiprintf_r+0x1d4>
 8009200:	9b03      	ldr	r3, [sp, #12]
 8009202:	3307      	adds	r3, #7
 8009204:	f023 0307 	bic.w	r3, r3, #7
 8009208:	3308      	adds	r3, #8
 800920a:	9303      	str	r3, [sp, #12]
 800920c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800920e:	444b      	add	r3, r9
 8009210:	9309      	str	r3, [sp, #36]	; 0x24
 8009212:	e750      	b.n	80090b6 <_vfiprintf_r+0x42>
 8009214:	fb05 3202 	mla	r2, r5, r2, r3
 8009218:	2001      	movs	r0, #1
 800921a:	4688      	mov	r8, r1
 800921c:	e78a      	b.n	8009134 <_vfiprintf_r+0xc0>
 800921e:	2300      	movs	r3, #0
 8009220:	f108 0801 	add.w	r8, r8, #1
 8009224:	9305      	str	r3, [sp, #20]
 8009226:	4619      	mov	r1, r3
 8009228:	250a      	movs	r5, #10
 800922a:	4640      	mov	r0, r8
 800922c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009230:	3a30      	subs	r2, #48	; 0x30
 8009232:	2a09      	cmp	r2, #9
 8009234:	d903      	bls.n	800923e <_vfiprintf_r+0x1ca>
 8009236:	2b00      	cmp	r3, #0
 8009238:	d0c3      	beq.n	80091c2 <_vfiprintf_r+0x14e>
 800923a:	9105      	str	r1, [sp, #20]
 800923c:	e7c1      	b.n	80091c2 <_vfiprintf_r+0x14e>
 800923e:	fb05 2101 	mla	r1, r5, r1, r2
 8009242:	2301      	movs	r3, #1
 8009244:	4680      	mov	r8, r0
 8009246:	e7f0      	b.n	800922a <_vfiprintf_r+0x1b6>
 8009248:	ab03      	add	r3, sp, #12
 800924a:	9300      	str	r3, [sp, #0]
 800924c:	4622      	mov	r2, r4
 800924e:	4b13      	ldr	r3, [pc, #76]	; (800929c <_vfiprintf_r+0x228>)
 8009250:	a904      	add	r1, sp, #16
 8009252:	4630      	mov	r0, r6
 8009254:	f3af 8000 	nop.w
 8009258:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800925c:	4681      	mov	r9, r0
 800925e:	d1d5      	bne.n	800920c <_vfiprintf_r+0x198>
 8009260:	89a3      	ldrh	r3, [r4, #12]
 8009262:	065b      	lsls	r3, r3, #25
 8009264:	f53f af7e 	bmi.w	8009164 <_vfiprintf_r+0xf0>
 8009268:	9809      	ldr	r0, [sp, #36]	; 0x24
 800926a:	e77d      	b.n	8009168 <_vfiprintf_r+0xf4>
 800926c:	ab03      	add	r3, sp, #12
 800926e:	9300      	str	r3, [sp, #0]
 8009270:	4622      	mov	r2, r4
 8009272:	4b0a      	ldr	r3, [pc, #40]	; (800929c <_vfiprintf_r+0x228>)
 8009274:	a904      	add	r1, sp, #16
 8009276:	4630      	mov	r0, r6
 8009278:	f000 f888 	bl	800938c <_printf_i>
 800927c:	e7ec      	b.n	8009258 <_vfiprintf_r+0x1e4>
 800927e:	bf00      	nop
 8009280:	08009b64 	.word	0x08009b64
 8009284:	08009ba4 	.word	0x08009ba4
 8009288:	08009b84 	.word	0x08009b84
 800928c:	08009b44 	.word	0x08009b44
 8009290:	08009baa 	.word	0x08009baa
 8009294:	08009bae 	.word	0x08009bae
 8009298:	00000000 	.word	0x00000000
 800929c:	0800904f 	.word	0x0800904f

080092a0 <_printf_common>:
 80092a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092a4:	4691      	mov	r9, r2
 80092a6:	461f      	mov	r7, r3
 80092a8:	688a      	ldr	r2, [r1, #8]
 80092aa:	690b      	ldr	r3, [r1, #16]
 80092ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80092b0:	4293      	cmp	r3, r2
 80092b2:	bfb8      	it	lt
 80092b4:	4613      	movlt	r3, r2
 80092b6:	f8c9 3000 	str.w	r3, [r9]
 80092ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80092be:	4606      	mov	r6, r0
 80092c0:	460c      	mov	r4, r1
 80092c2:	b112      	cbz	r2, 80092ca <_printf_common+0x2a>
 80092c4:	3301      	adds	r3, #1
 80092c6:	f8c9 3000 	str.w	r3, [r9]
 80092ca:	6823      	ldr	r3, [r4, #0]
 80092cc:	0699      	lsls	r1, r3, #26
 80092ce:	bf42      	ittt	mi
 80092d0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80092d4:	3302      	addmi	r3, #2
 80092d6:	f8c9 3000 	strmi.w	r3, [r9]
 80092da:	6825      	ldr	r5, [r4, #0]
 80092dc:	f015 0506 	ands.w	r5, r5, #6
 80092e0:	d107      	bne.n	80092f2 <_printf_common+0x52>
 80092e2:	f104 0a19 	add.w	sl, r4, #25
 80092e6:	68e3      	ldr	r3, [r4, #12]
 80092e8:	f8d9 2000 	ldr.w	r2, [r9]
 80092ec:	1a9b      	subs	r3, r3, r2
 80092ee:	42ab      	cmp	r3, r5
 80092f0:	dc28      	bgt.n	8009344 <_printf_common+0xa4>
 80092f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80092f6:	6822      	ldr	r2, [r4, #0]
 80092f8:	3300      	adds	r3, #0
 80092fa:	bf18      	it	ne
 80092fc:	2301      	movne	r3, #1
 80092fe:	0692      	lsls	r2, r2, #26
 8009300:	d42d      	bmi.n	800935e <_printf_common+0xbe>
 8009302:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009306:	4639      	mov	r1, r7
 8009308:	4630      	mov	r0, r6
 800930a:	47c0      	blx	r8
 800930c:	3001      	adds	r0, #1
 800930e:	d020      	beq.n	8009352 <_printf_common+0xb2>
 8009310:	6823      	ldr	r3, [r4, #0]
 8009312:	68e5      	ldr	r5, [r4, #12]
 8009314:	f8d9 2000 	ldr.w	r2, [r9]
 8009318:	f003 0306 	and.w	r3, r3, #6
 800931c:	2b04      	cmp	r3, #4
 800931e:	bf08      	it	eq
 8009320:	1aad      	subeq	r5, r5, r2
 8009322:	68a3      	ldr	r3, [r4, #8]
 8009324:	6922      	ldr	r2, [r4, #16]
 8009326:	bf0c      	ite	eq
 8009328:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800932c:	2500      	movne	r5, #0
 800932e:	4293      	cmp	r3, r2
 8009330:	bfc4      	itt	gt
 8009332:	1a9b      	subgt	r3, r3, r2
 8009334:	18ed      	addgt	r5, r5, r3
 8009336:	f04f 0900 	mov.w	r9, #0
 800933a:	341a      	adds	r4, #26
 800933c:	454d      	cmp	r5, r9
 800933e:	d11a      	bne.n	8009376 <_printf_common+0xd6>
 8009340:	2000      	movs	r0, #0
 8009342:	e008      	b.n	8009356 <_printf_common+0xb6>
 8009344:	2301      	movs	r3, #1
 8009346:	4652      	mov	r2, sl
 8009348:	4639      	mov	r1, r7
 800934a:	4630      	mov	r0, r6
 800934c:	47c0      	blx	r8
 800934e:	3001      	adds	r0, #1
 8009350:	d103      	bne.n	800935a <_printf_common+0xba>
 8009352:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800935a:	3501      	adds	r5, #1
 800935c:	e7c3      	b.n	80092e6 <_printf_common+0x46>
 800935e:	18e1      	adds	r1, r4, r3
 8009360:	1c5a      	adds	r2, r3, #1
 8009362:	2030      	movs	r0, #48	; 0x30
 8009364:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009368:	4422      	add	r2, r4
 800936a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800936e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009372:	3302      	adds	r3, #2
 8009374:	e7c5      	b.n	8009302 <_printf_common+0x62>
 8009376:	2301      	movs	r3, #1
 8009378:	4622      	mov	r2, r4
 800937a:	4639      	mov	r1, r7
 800937c:	4630      	mov	r0, r6
 800937e:	47c0      	blx	r8
 8009380:	3001      	adds	r0, #1
 8009382:	d0e6      	beq.n	8009352 <_printf_common+0xb2>
 8009384:	f109 0901 	add.w	r9, r9, #1
 8009388:	e7d8      	b.n	800933c <_printf_common+0x9c>
	...

0800938c <_printf_i>:
 800938c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009390:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009394:	460c      	mov	r4, r1
 8009396:	7e09      	ldrb	r1, [r1, #24]
 8009398:	b085      	sub	sp, #20
 800939a:	296e      	cmp	r1, #110	; 0x6e
 800939c:	4617      	mov	r7, r2
 800939e:	4606      	mov	r6, r0
 80093a0:	4698      	mov	r8, r3
 80093a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80093a4:	f000 80b3 	beq.w	800950e <_printf_i+0x182>
 80093a8:	d822      	bhi.n	80093f0 <_printf_i+0x64>
 80093aa:	2963      	cmp	r1, #99	; 0x63
 80093ac:	d036      	beq.n	800941c <_printf_i+0x90>
 80093ae:	d80a      	bhi.n	80093c6 <_printf_i+0x3a>
 80093b0:	2900      	cmp	r1, #0
 80093b2:	f000 80b9 	beq.w	8009528 <_printf_i+0x19c>
 80093b6:	2958      	cmp	r1, #88	; 0x58
 80093b8:	f000 8083 	beq.w	80094c2 <_printf_i+0x136>
 80093bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093c0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80093c4:	e032      	b.n	800942c <_printf_i+0xa0>
 80093c6:	2964      	cmp	r1, #100	; 0x64
 80093c8:	d001      	beq.n	80093ce <_printf_i+0x42>
 80093ca:	2969      	cmp	r1, #105	; 0x69
 80093cc:	d1f6      	bne.n	80093bc <_printf_i+0x30>
 80093ce:	6820      	ldr	r0, [r4, #0]
 80093d0:	6813      	ldr	r3, [r2, #0]
 80093d2:	0605      	lsls	r5, r0, #24
 80093d4:	f103 0104 	add.w	r1, r3, #4
 80093d8:	d52a      	bpl.n	8009430 <_printf_i+0xa4>
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	6011      	str	r1, [r2, #0]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	da03      	bge.n	80093ea <_printf_i+0x5e>
 80093e2:	222d      	movs	r2, #45	; 0x2d
 80093e4:	425b      	negs	r3, r3
 80093e6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80093ea:	486f      	ldr	r0, [pc, #444]	; (80095a8 <_printf_i+0x21c>)
 80093ec:	220a      	movs	r2, #10
 80093ee:	e039      	b.n	8009464 <_printf_i+0xd8>
 80093f0:	2973      	cmp	r1, #115	; 0x73
 80093f2:	f000 809d 	beq.w	8009530 <_printf_i+0x1a4>
 80093f6:	d808      	bhi.n	800940a <_printf_i+0x7e>
 80093f8:	296f      	cmp	r1, #111	; 0x6f
 80093fa:	d020      	beq.n	800943e <_printf_i+0xb2>
 80093fc:	2970      	cmp	r1, #112	; 0x70
 80093fe:	d1dd      	bne.n	80093bc <_printf_i+0x30>
 8009400:	6823      	ldr	r3, [r4, #0]
 8009402:	f043 0320 	orr.w	r3, r3, #32
 8009406:	6023      	str	r3, [r4, #0]
 8009408:	e003      	b.n	8009412 <_printf_i+0x86>
 800940a:	2975      	cmp	r1, #117	; 0x75
 800940c:	d017      	beq.n	800943e <_printf_i+0xb2>
 800940e:	2978      	cmp	r1, #120	; 0x78
 8009410:	d1d4      	bne.n	80093bc <_printf_i+0x30>
 8009412:	2378      	movs	r3, #120	; 0x78
 8009414:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009418:	4864      	ldr	r0, [pc, #400]	; (80095ac <_printf_i+0x220>)
 800941a:	e055      	b.n	80094c8 <_printf_i+0x13c>
 800941c:	6813      	ldr	r3, [r2, #0]
 800941e:	1d19      	adds	r1, r3, #4
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	6011      	str	r1, [r2, #0]
 8009424:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009428:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800942c:	2301      	movs	r3, #1
 800942e:	e08c      	b.n	800954a <_printf_i+0x1be>
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	6011      	str	r1, [r2, #0]
 8009434:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009438:	bf18      	it	ne
 800943a:	b21b      	sxthne	r3, r3
 800943c:	e7cf      	b.n	80093de <_printf_i+0x52>
 800943e:	6813      	ldr	r3, [r2, #0]
 8009440:	6825      	ldr	r5, [r4, #0]
 8009442:	1d18      	adds	r0, r3, #4
 8009444:	6010      	str	r0, [r2, #0]
 8009446:	0628      	lsls	r0, r5, #24
 8009448:	d501      	bpl.n	800944e <_printf_i+0xc2>
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	e002      	b.n	8009454 <_printf_i+0xc8>
 800944e:	0668      	lsls	r0, r5, #25
 8009450:	d5fb      	bpl.n	800944a <_printf_i+0xbe>
 8009452:	881b      	ldrh	r3, [r3, #0]
 8009454:	4854      	ldr	r0, [pc, #336]	; (80095a8 <_printf_i+0x21c>)
 8009456:	296f      	cmp	r1, #111	; 0x6f
 8009458:	bf14      	ite	ne
 800945a:	220a      	movne	r2, #10
 800945c:	2208      	moveq	r2, #8
 800945e:	2100      	movs	r1, #0
 8009460:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009464:	6865      	ldr	r5, [r4, #4]
 8009466:	60a5      	str	r5, [r4, #8]
 8009468:	2d00      	cmp	r5, #0
 800946a:	f2c0 8095 	blt.w	8009598 <_printf_i+0x20c>
 800946e:	6821      	ldr	r1, [r4, #0]
 8009470:	f021 0104 	bic.w	r1, r1, #4
 8009474:	6021      	str	r1, [r4, #0]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d13d      	bne.n	80094f6 <_printf_i+0x16a>
 800947a:	2d00      	cmp	r5, #0
 800947c:	f040 808e 	bne.w	800959c <_printf_i+0x210>
 8009480:	4665      	mov	r5, ip
 8009482:	2a08      	cmp	r2, #8
 8009484:	d10b      	bne.n	800949e <_printf_i+0x112>
 8009486:	6823      	ldr	r3, [r4, #0]
 8009488:	07db      	lsls	r3, r3, #31
 800948a:	d508      	bpl.n	800949e <_printf_i+0x112>
 800948c:	6923      	ldr	r3, [r4, #16]
 800948e:	6862      	ldr	r2, [r4, #4]
 8009490:	429a      	cmp	r2, r3
 8009492:	bfde      	ittt	le
 8009494:	2330      	movle	r3, #48	; 0x30
 8009496:	f805 3c01 	strble.w	r3, [r5, #-1]
 800949a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800949e:	ebac 0305 	sub.w	r3, ip, r5
 80094a2:	6123      	str	r3, [r4, #16]
 80094a4:	f8cd 8000 	str.w	r8, [sp]
 80094a8:	463b      	mov	r3, r7
 80094aa:	aa03      	add	r2, sp, #12
 80094ac:	4621      	mov	r1, r4
 80094ae:	4630      	mov	r0, r6
 80094b0:	f7ff fef6 	bl	80092a0 <_printf_common>
 80094b4:	3001      	adds	r0, #1
 80094b6:	d14d      	bne.n	8009554 <_printf_i+0x1c8>
 80094b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094bc:	b005      	add	sp, #20
 80094be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80094c2:	4839      	ldr	r0, [pc, #228]	; (80095a8 <_printf_i+0x21c>)
 80094c4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80094c8:	6813      	ldr	r3, [r2, #0]
 80094ca:	6821      	ldr	r1, [r4, #0]
 80094cc:	1d1d      	adds	r5, r3, #4
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	6015      	str	r5, [r2, #0]
 80094d2:	060a      	lsls	r2, r1, #24
 80094d4:	d50b      	bpl.n	80094ee <_printf_i+0x162>
 80094d6:	07ca      	lsls	r2, r1, #31
 80094d8:	bf44      	itt	mi
 80094da:	f041 0120 	orrmi.w	r1, r1, #32
 80094de:	6021      	strmi	r1, [r4, #0]
 80094e0:	b91b      	cbnz	r3, 80094ea <_printf_i+0x15e>
 80094e2:	6822      	ldr	r2, [r4, #0]
 80094e4:	f022 0220 	bic.w	r2, r2, #32
 80094e8:	6022      	str	r2, [r4, #0]
 80094ea:	2210      	movs	r2, #16
 80094ec:	e7b7      	b.n	800945e <_printf_i+0xd2>
 80094ee:	064d      	lsls	r5, r1, #25
 80094f0:	bf48      	it	mi
 80094f2:	b29b      	uxthmi	r3, r3
 80094f4:	e7ef      	b.n	80094d6 <_printf_i+0x14a>
 80094f6:	4665      	mov	r5, ip
 80094f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80094fc:	fb02 3311 	mls	r3, r2, r1, r3
 8009500:	5cc3      	ldrb	r3, [r0, r3]
 8009502:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009506:	460b      	mov	r3, r1
 8009508:	2900      	cmp	r1, #0
 800950a:	d1f5      	bne.n	80094f8 <_printf_i+0x16c>
 800950c:	e7b9      	b.n	8009482 <_printf_i+0xf6>
 800950e:	6813      	ldr	r3, [r2, #0]
 8009510:	6825      	ldr	r5, [r4, #0]
 8009512:	6961      	ldr	r1, [r4, #20]
 8009514:	1d18      	adds	r0, r3, #4
 8009516:	6010      	str	r0, [r2, #0]
 8009518:	0628      	lsls	r0, r5, #24
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	d501      	bpl.n	8009522 <_printf_i+0x196>
 800951e:	6019      	str	r1, [r3, #0]
 8009520:	e002      	b.n	8009528 <_printf_i+0x19c>
 8009522:	066a      	lsls	r2, r5, #25
 8009524:	d5fb      	bpl.n	800951e <_printf_i+0x192>
 8009526:	8019      	strh	r1, [r3, #0]
 8009528:	2300      	movs	r3, #0
 800952a:	6123      	str	r3, [r4, #16]
 800952c:	4665      	mov	r5, ip
 800952e:	e7b9      	b.n	80094a4 <_printf_i+0x118>
 8009530:	6813      	ldr	r3, [r2, #0]
 8009532:	1d19      	adds	r1, r3, #4
 8009534:	6011      	str	r1, [r2, #0]
 8009536:	681d      	ldr	r5, [r3, #0]
 8009538:	6862      	ldr	r2, [r4, #4]
 800953a:	2100      	movs	r1, #0
 800953c:	4628      	mov	r0, r5
 800953e:	f7f6 fe6f 	bl	8000220 <memchr>
 8009542:	b108      	cbz	r0, 8009548 <_printf_i+0x1bc>
 8009544:	1b40      	subs	r0, r0, r5
 8009546:	6060      	str	r0, [r4, #4]
 8009548:	6863      	ldr	r3, [r4, #4]
 800954a:	6123      	str	r3, [r4, #16]
 800954c:	2300      	movs	r3, #0
 800954e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009552:	e7a7      	b.n	80094a4 <_printf_i+0x118>
 8009554:	6923      	ldr	r3, [r4, #16]
 8009556:	462a      	mov	r2, r5
 8009558:	4639      	mov	r1, r7
 800955a:	4630      	mov	r0, r6
 800955c:	47c0      	blx	r8
 800955e:	3001      	adds	r0, #1
 8009560:	d0aa      	beq.n	80094b8 <_printf_i+0x12c>
 8009562:	6823      	ldr	r3, [r4, #0]
 8009564:	079b      	lsls	r3, r3, #30
 8009566:	d413      	bmi.n	8009590 <_printf_i+0x204>
 8009568:	68e0      	ldr	r0, [r4, #12]
 800956a:	9b03      	ldr	r3, [sp, #12]
 800956c:	4298      	cmp	r0, r3
 800956e:	bfb8      	it	lt
 8009570:	4618      	movlt	r0, r3
 8009572:	e7a3      	b.n	80094bc <_printf_i+0x130>
 8009574:	2301      	movs	r3, #1
 8009576:	464a      	mov	r2, r9
 8009578:	4639      	mov	r1, r7
 800957a:	4630      	mov	r0, r6
 800957c:	47c0      	blx	r8
 800957e:	3001      	adds	r0, #1
 8009580:	d09a      	beq.n	80094b8 <_printf_i+0x12c>
 8009582:	3501      	adds	r5, #1
 8009584:	68e3      	ldr	r3, [r4, #12]
 8009586:	9a03      	ldr	r2, [sp, #12]
 8009588:	1a9b      	subs	r3, r3, r2
 800958a:	42ab      	cmp	r3, r5
 800958c:	dcf2      	bgt.n	8009574 <_printf_i+0x1e8>
 800958e:	e7eb      	b.n	8009568 <_printf_i+0x1dc>
 8009590:	2500      	movs	r5, #0
 8009592:	f104 0919 	add.w	r9, r4, #25
 8009596:	e7f5      	b.n	8009584 <_printf_i+0x1f8>
 8009598:	2b00      	cmp	r3, #0
 800959a:	d1ac      	bne.n	80094f6 <_printf_i+0x16a>
 800959c:	7803      	ldrb	r3, [r0, #0]
 800959e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80095a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095a6:	e76c      	b.n	8009482 <_printf_i+0xf6>
 80095a8:	08009bb5 	.word	0x08009bb5
 80095ac:	08009bc6 	.word	0x08009bc6

080095b0 <_sbrk_r>:
 80095b0:	b538      	push	{r3, r4, r5, lr}
 80095b2:	4c06      	ldr	r4, [pc, #24]	; (80095cc <_sbrk_r+0x1c>)
 80095b4:	2300      	movs	r3, #0
 80095b6:	4605      	mov	r5, r0
 80095b8:	4608      	mov	r0, r1
 80095ba:	6023      	str	r3, [r4, #0]
 80095bc:	f7f8 fa38 	bl	8001a30 <_sbrk>
 80095c0:	1c43      	adds	r3, r0, #1
 80095c2:	d102      	bne.n	80095ca <_sbrk_r+0x1a>
 80095c4:	6823      	ldr	r3, [r4, #0]
 80095c6:	b103      	cbz	r3, 80095ca <_sbrk_r+0x1a>
 80095c8:	602b      	str	r3, [r5, #0]
 80095ca:	bd38      	pop	{r3, r4, r5, pc}
 80095cc:	20000938 	.word	0x20000938

080095d0 <__sread>:
 80095d0:	b510      	push	{r4, lr}
 80095d2:	460c      	mov	r4, r1
 80095d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095d8:	f000 f8e0 	bl	800979c <_read_r>
 80095dc:	2800      	cmp	r0, #0
 80095de:	bfab      	itete	ge
 80095e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80095e2:	89a3      	ldrhlt	r3, [r4, #12]
 80095e4:	181b      	addge	r3, r3, r0
 80095e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80095ea:	bfac      	ite	ge
 80095ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80095ee:	81a3      	strhlt	r3, [r4, #12]
 80095f0:	bd10      	pop	{r4, pc}

080095f2 <__swrite>:
 80095f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095f6:	461f      	mov	r7, r3
 80095f8:	898b      	ldrh	r3, [r1, #12]
 80095fa:	05db      	lsls	r3, r3, #23
 80095fc:	4605      	mov	r5, r0
 80095fe:	460c      	mov	r4, r1
 8009600:	4616      	mov	r6, r2
 8009602:	d505      	bpl.n	8009610 <__swrite+0x1e>
 8009604:	2302      	movs	r3, #2
 8009606:	2200      	movs	r2, #0
 8009608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800960c:	f000 f868 	bl	80096e0 <_lseek_r>
 8009610:	89a3      	ldrh	r3, [r4, #12]
 8009612:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009616:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800961a:	81a3      	strh	r3, [r4, #12]
 800961c:	4632      	mov	r2, r6
 800961e:	463b      	mov	r3, r7
 8009620:	4628      	mov	r0, r5
 8009622:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009626:	f000 b817 	b.w	8009658 <_write_r>

0800962a <__sseek>:
 800962a:	b510      	push	{r4, lr}
 800962c:	460c      	mov	r4, r1
 800962e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009632:	f000 f855 	bl	80096e0 <_lseek_r>
 8009636:	1c43      	adds	r3, r0, #1
 8009638:	89a3      	ldrh	r3, [r4, #12]
 800963a:	bf15      	itete	ne
 800963c:	6560      	strne	r0, [r4, #84]	; 0x54
 800963e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009642:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009646:	81a3      	strheq	r3, [r4, #12]
 8009648:	bf18      	it	ne
 800964a:	81a3      	strhne	r3, [r4, #12]
 800964c:	bd10      	pop	{r4, pc}

0800964e <__sclose>:
 800964e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009652:	f000 b813 	b.w	800967c <_close_r>
	...

08009658 <_write_r>:
 8009658:	b538      	push	{r3, r4, r5, lr}
 800965a:	4c07      	ldr	r4, [pc, #28]	; (8009678 <_write_r+0x20>)
 800965c:	4605      	mov	r5, r0
 800965e:	4608      	mov	r0, r1
 8009660:	4611      	mov	r1, r2
 8009662:	2200      	movs	r2, #0
 8009664:	6022      	str	r2, [r4, #0]
 8009666:	461a      	mov	r2, r3
 8009668:	f7f7 fdbf 	bl	80011ea <_write>
 800966c:	1c43      	adds	r3, r0, #1
 800966e:	d102      	bne.n	8009676 <_write_r+0x1e>
 8009670:	6823      	ldr	r3, [r4, #0]
 8009672:	b103      	cbz	r3, 8009676 <_write_r+0x1e>
 8009674:	602b      	str	r3, [r5, #0]
 8009676:	bd38      	pop	{r3, r4, r5, pc}
 8009678:	20000938 	.word	0x20000938

0800967c <_close_r>:
 800967c:	b538      	push	{r3, r4, r5, lr}
 800967e:	4c06      	ldr	r4, [pc, #24]	; (8009698 <_close_r+0x1c>)
 8009680:	2300      	movs	r3, #0
 8009682:	4605      	mov	r5, r0
 8009684:	4608      	mov	r0, r1
 8009686:	6023      	str	r3, [r4, #0]
 8009688:	f7f8 f99d 	bl	80019c6 <_close>
 800968c:	1c43      	adds	r3, r0, #1
 800968e:	d102      	bne.n	8009696 <_close_r+0x1a>
 8009690:	6823      	ldr	r3, [r4, #0]
 8009692:	b103      	cbz	r3, 8009696 <_close_r+0x1a>
 8009694:	602b      	str	r3, [r5, #0]
 8009696:	bd38      	pop	{r3, r4, r5, pc}
 8009698:	20000938 	.word	0x20000938

0800969c <_fstat_r>:
 800969c:	b538      	push	{r3, r4, r5, lr}
 800969e:	4c07      	ldr	r4, [pc, #28]	; (80096bc <_fstat_r+0x20>)
 80096a0:	2300      	movs	r3, #0
 80096a2:	4605      	mov	r5, r0
 80096a4:	4608      	mov	r0, r1
 80096a6:	4611      	mov	r1, r2
 80096a8:	6023      	str	r3, [r4, #0]
 80096aa:	f7f8 f998 	bl	80019de <_fstat>
 80096ae:	1c43      	adds	r3, r0, #1
 80096b0:	d102      	bne.n	80096b8 <_fstat_r+0x1c>
 80096b2:	6823      	ldr	r3, [r4, #0]
 80096b4:	b103      	cbz	r3, 80096b8 <_fstat_r+0x1c>
 80096b6:	602b      	str	r3, [r5, #0]
 80096b8:	bd38      	pop	{r3, r4, r5, pc}
 80096ba:	bf00      	nop
 80096bc:	20000938 	.word	0x20000938

080096c0 <_isatty_r>:
 80096c0:	b538      	push	{r3, r4, r5, lr}
 80096c2:	4c06      	ldr	r4, [pc, #24]	; (80096dc <_isatty_r+0x1c>)
 80096c4:	2300      	movs	r3, #0
 80096c6:	4605      	mov	r5, r0
 80096c8:	4608      	mov	r0, r1
 80096ca:	6023      	str	r3, [r4, #0]
 80096cc:	f7f8 f997 	bl	80019fe <_isatty>
 80096d0:	1c43      	adds	r3, r0, #1
 80096d2:	d102      	bne.n	80096da <_isatty_r+0x1a>
 80096d4:	6823      	ldr	r3, [r4, #0]
 80096d6:	b103      	cbz	r3, 80096da <_isatty_r+0x1a>
 80096d8:	602b      	str	r3, [r5, #0]
 80096da:	bd38      	pop	{r3, r4, r5, pc}
 80096dc:	20000938 	.word	0x20000938

080096e0 <_lseek_r>:
 80096e0:	b538      	push	{r3, r4, r5, lr}
 80096e2:	4c07      	ldr	r4, [pc, #28]	; (8009700 <_lseek_r+0x20>)
 80096e4:	4605      	mov	r5, r0
 80096e6:	4608      	mov	r0, r1
 80096e8:	4611      	mov	r1, r2
 80096ea:	2200      	movs	r2, #0
 80096ec:	6022      	str	r2, [r4, #0]
 80096ee:	461a      	mov	r2, r3
 80096f0:	f7f8 f990 	bl	8001a14 <_lseek>
 80096f4:	1c43      	adds	r3, r0, #1
 80096f6:	d102      	bne.n	80096fe <_lseek_r+0x1e>
 80096f8:	6823      	ldr	r3, [r4, #0]
 80096fa:	b103      	cbz	r3, 80096fe <_lseek_r+0x1e>
 80096fc:	602b      	str	r3, [r5, #0]
 80096fe:	bd38      	pop	{r3, r4, r5, pc}
 8009700:	20000938 	.word	0x20000938

08009704 <memcpy>:
 8009704:	b510      	push	{r4, lr}
 8009706:	1e43      	subs	r3, r0, #1
 8009708:	440a      	add	r2, r1
 800970a:	4291      	cmp	r1, r2
 800970c:	d100      	bne.n	8009710 <memcpy+0xc>
 800970e:	bd10      	pop	{r4, pc}
 8009710:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009714:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009718:	e7f7      	b.n	800970a <memcpy+0x6>

0800971a <memmove>:
 800971a:	4288      	cmp	r0, r1
 800971c:	b510      	push	{r4, lr}
 800971e:	eb01 0302 	add.w	r3, r1, r2
 8009722:	d807      	bhi.n	8009734 <memmove+0x1a>
 8009724:	1e42      	subs	r2, r0, #1
 8009726:	4299      	cmp	r1, r3
 8009728:	d00a      	beq.n	8009740 <memmove+0x26>
 800972a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800972e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009732:	e7f8      	b.n	8009726 <memmove+0xc>
 8009734:	4283      	cmp	r3, r0
 8009736:	d9f5      	bls.n	8009724 <memmove+0xa>
 8009738:	1881      	adds	r1, r0, r2
 800973a:	1ad2      	subs	r2, r2, r3
 800973c:	42d3      	cmn	r3, r2
 800973e:	d100      	bne.n	8009742 <memmove+0x28>
 8009740:	bd10      	pop	{r4, pc}
 8009742:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009746:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800974a:	e7f7      	b.n	800973c <memmove+0x22>

0800974c <__malloc_lock>:
 800974c:	4770      	bx	lr

0800974e <__malloc_unlock>:
 800974e:	4770      	bx	lr

08009750 <_realloc_r>:
 8009750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009752:	4607      	mov	r7, r0
 8009754:	4614      	mov	r4, r2
 8009756:	460e      	mov	r6, r1
 8009758:	b921      	cbnz	r1, 8009764 <_realloc_r+0x14>
 800975a:	4611      	mov	r1, r2
 800975c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009760:	f7ff bab2 	b.w	8008cc8 <_malloc_r>
 8009764:	b922      	cbnz	r2, 8009770 <_realloc_r+0x20>
 8009766:	f7ff fa61 	bl	8008c2c <_free_r>
 800976a:	4625      	mov	r5, r4
 800976c:	4628      	mov	r0, r5
 800976e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009770:	f000 f826 	bl	80097c0 <_malloc_usable_size_r>
 8009774:	42a0      	cmp	r0, r4
 8009776:	d20f      	bcs.n	8009798 <_realloc_r+0x48>
 8009778:	4621      	mov	r1, r4
 800977a:	4638      	mov	r0, r7
 800977c:	f7ff faa4 	bl	8008cc8 <_malloc_r>
 8009780:	4605      	mov	r5, r0
 8009782:	2800      	cmp	r0, #0
 8009784:	d0f2      	beq.n	800976c <_realloc_r+0x1c>
 8009786:	4631      	mov	r1, r6
 8009788:	4622      	mov	r2, r4
 800978a:	f7ff ffbb 	bl	8009704 <memcpy>
 800978e:	4631      	mov	r1, r6
 8009790:	4638      	mov	r0, r7
 8009792:	f7ff fa4b 	bl	8008c2c <_free_r>
 8009796:	e7e9      	b.n	800976c <_realloc_r+0x1c>
 8009798:	4635      	mov	r5, r6
 800979a:	e7e7      	b.n	800976c <_realloc_r+0x1c>

0800979c <_read_r>:
 800979c:	b538      	push	{r3, r4, r5, lr}
 800979e:	4c07      	ldr	r4, [pc, #28]	; (80097bc <_read_r+0x20>)
 80097a0:	4605      	mov	r5, r0
 80097a2:	4608      	mov	r0, r1
 80097a4:	4611      	mov	r1, r2
 80097a6:	2200      	movs	r2, #0
 80097a8:	6022      	str	r2, [r4, #0]
 80097aa:	461a      	mov	r2, r3
 80097ac:	f7f8 f8ee 	bl	800198c <_read>
 80097b0:	1c43      	adds	r3, r0, #1
 80097b2:	d102      	bne.n	80097ba <_read_r+0x1e>
 80097b4:	6823      	ldr	r3, [r4, #0]
 80097b6:	b103      	cbz	r3, 80097ba <_read_r+0x1e>
 80097b8:	602b      	str	r3, [r5, #0]
 80097ba:	bd38      	pop	{r3, r4, r5, pc}
 80097bc:	20000938 	.word	0x20000938

080097c0 <_malloc_usable_size_r>:
 80097c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097c4:	1f18      	subs	r0, r3, #4
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	bfbc      	itt	lt
 80097ca:	580b      	ldrlt	r3, [r1, r0]
 80097cc:	18c0      	addlt	r0, r0, r3
 80097ce:	4770      	bx	lr

080097d0 <_init>:
 80097d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097d2:	bf00      	nop
 80097d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097d6:	bc08      	pop	{r3}
 80097d8:	469e      	mov	lr, r3
 80097da:	4770      	bx	lr

080097dc <_fini>:
 80097dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097de:	bf00      	nop
 80097e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097e2:	bc08      	pop	{r3}
 80097e4:	469e      	mov	lr, r3
 80097e6:	4770      	bx	lr
