
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092c8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  080094a8  080094a8  000194a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009820  08009820  00020444  2**0
                  CONTENTS
  4 .ARM          00000000  08009820  08009820  00020444  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009820  08009820  00020444  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009820  08009820  00019820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009824  08009824  00019824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000444  20000000  08009828  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ac  20000444  08009c6c  00020444  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008f0  08009c6c  000208f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020444  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021fbc  00000000  00000000  00020474  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004603  00000000  00000000  00042430  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ae8  00000000  00000000  00046a38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000018b0  00000000  00000000  00048520  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002eb44  00000000  00000000  00049dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001a365  00000000  00000000  00078914  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012365c  00000000  00000000  00092c79  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b62d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007720  00000000  00000000  001b6350  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000444 	.word	0x20000444
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009490 	.word	0x08009490

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000448 	.word	0x20000448
 800021c:	08009490 	.word	0x08009490

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <dm_update_display>:
//uint16_t button_x_positions[1] = { (BUTTON_WIDTH) };

uint8_t size_test = 1;

void dm_update_display()
{
 80002c0:	b590      	push	{r4, r7, lr}
 80002c2:	b085      	sub	sp, #20
 80002c4:	af04      	add	r7, sp, #16

	if(size_test > 21)
 80002c6:	4b36      	ldr	r3, [pc, #216]	; (80003a0 <dm_update_display+0xe0>)
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	2b15      	cmp	r3, #21
 80002cc:	d902      	bls.n	80002d4 <dm_update_display+0x14>
		size_test = 1;
 80002ce:	4b34      	ldr	r3, [pc, #208]	; (80003a0 <dm_update_display+0xe0>)
 80002d0:	2201      	movs	r2, #1
 80002d2:	701a      	strb	r2, [r3, #0]


	ILI9341_Draw_Rectangle(20+(1*size_test), 20+(1*size_test), size_test, size_test, DARKCYAN);
 80002d4:	4b32      	ldr	r3, [pc, #200]	; (80003a0 <dm_update_display+0xe0>)
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	b29b      	uxth	r3, r3
 80002da:	3314      	adds	r3, #20
 80002dc:	b298      	uxth	r0, r3
 80002de:	4b30      	ldr	r3, [pc, #192]	; (80003a0 <dm_update_display+0xe0>)
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	b29b      	uxth	r3, r3
 80002e4:	3314      	adds	r3, #20
 80002e6:	b299      	uxth	r1, r3
 80002e8:	4b2d      	ldr	r3, [pc, #180]	; (80003a0 <dm_update_display+0xe0>)
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	b29a      	uxth	r2, r3
 80002ee:	4b2c      	ldr	r3, [pc, #176]	; (80003a0 <dm_update_display+0xe0>)
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	b29c      	uxth	r4, r3
 80002f4:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80002f8:	9300      	str	r3, [sp, #0]
 80002fa:	4623      	mov	r3, r4
 80002fc:	f008 f844 	bl	8008388 <ILI9341_Draw_Rectangle>

	//ILI9341_Draw_Filled_Circle(50, 50, 50, BLUE);
	ILI9341_Draw_Text("TEST", BUTTON_TEXT_X_POS, 100, BLACK, size_test, DARKCYAN);
 8000300:	4b27      	ldr	r3, [pc, #156]	; (80003a0 <dm_update_display+0xe0>)
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	b29b      	uxth	r3, r3
 8000306:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800030a:	9201      	str	r2, [sp, #4]
 800030c:	9300      	str	r3, [sp, #0]
 800030e:	2300      	movs	r3, #0
 8000310:	2264      	movs	r2, #100	; 0x64
 8000312:	2128      	movs	r1, #40	; 0x28
 8000314:	4823      	ldr	r0, [pc, #140]	; (80003a4 <dm_update_display+0xe4>)
 8000316:	f007 fc2d 	bl	8007b74 <ILI9341_Draw_Text>

	size_test++;
 800031a:	4b21      	ldr	r3, [pc, #132]	; (80003a0 <dm_update_display+0xe0>)
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	3301      	adds	r3, #1
 8000320:	b2da      	uxtb	r2, r3
 8000322:	4b1f      	ldr	r3, [pc, #124]	; (80003a0 <dm_update_display+0xe0>)
 8000324:	701a      	strb	r2, [r3, #0]
	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	button_x_positions[0],
 8000326:	4b20      	ldr	r3, [pc, #128]	; (80003a8 <dm_update_display+0xe8>)
 8000328:	8818      	ldrh	r0, [r3, #0]
 800032a:	2300      	movs	r3, #0
 800032c:	9302      	str	r3, [sp, #8]
 800032e:	2303      	movs	r3, #3
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8000336:	9300      	str	r3, [sp, #0]
 8000338:	2332      	movs	r3, #50	; 0x32
 800033a:	2250      	movs	r2, #80	; 0x50
 800033c:	21be      	movs	r1, #190	; 0xbe
 800033e:	f007 faad 	bl	800789c <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													50,
													DARKCYAN,
													3,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	button_x_positions[1],
 8000342:	4b19      	ldr	r3, [pc, #100]	; (80003a8 <dm_update_display+0xe8>)
 8000344:	8858      	ldrh	r0, [r3, #2]
 8000346:	2300      	movs	r3, #0
 8000348:	9302      	str	r3, [sp, #8]
 800034a:	2303      	movs	r3, #3
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000352:	9300      	str	r3, [sp, #0]
 8000354:	2332      	movs	r3, #50	; 0x32
 8000356:	2250      	movs	r2, #80	; 0x50
 8000358:	21be      	movs	r1, #190	; 0xbe
 800035a:	f007 fa9f 	bl	800789c <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													50,
													DARKGREEN,
													3,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	button_x_positions[2],
 800035e:	4b12      	ldr	r3, [pc, #72]	; (80003a8 <dm_update_display+0xe8>)
 8000360:	8898      	ldrh	r0, [r3, #4]
 8000362:	2300      	movs	r3, #0
 8000364:	9302      	str	r3, [sp, #8]
 8000366:	2303      	movs	r3, #3
 8000368:	9301      	str	r3, [sp, #4]
 800036a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800036e:	9300      	str	r3, [sp, #0]
 8000370:	2332      	movs	r3, #50	; 0x32
 8000372:	2250      	movs	r2, #80	; 0x50
 8000374:	21be      	movs	r1, #190	; 0xbe
 8000376:	f007 fa91 	bl	800789c <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													50,
													YELLOW,
													3,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	button_x_positions[3],
 800037a:	4b0b      	ldr	r3, [pc, #44]	; (80003a8 <dm_update_display+0xe8>)
 800037c:	88d8      	ldrh	r0, [r3, #6]
 800037e:	2300      	movs	r3, #0
 8000380:	9302      	str	r3, [sp, #8]
 8000382:	2303      	movs	r3, #3
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800038a:	9300      	str	r3, [sp, #0]
 800038c:	2332      	movs	r3, #50	; 0x32
 800038e:	2250      	movs	r2, #80	; 0x50
 8000390:	21be      	movs	r1, #190	; 0xbe
 8000392:	f007 fa83 	bl	800789c <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BLACK);



	//dm_test_screen();
}
 8000396:	bf00      	nop
 8000398:	3704      	adds	r7, #4
 800039a:	46bd      	mov	sp, r7
 800039c:	bd90      	pop	{r4, r7, pc}
 800039e:	bf00      	nop
 80003a0:	20000008 	.word	0x20000008
 80003a4:	080094a8 	.word	0x080094a8
 80003a8:	20000000 	.word	0x20000000

080003ac <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b08c      	sub	sp, #48	; 0x30
 80003b0:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80003b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	605a      	str	r2, [r3, #4]
 80003bc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	2220      	movs	r2, #32
 80003c2:	2100      	movs	r1, #0
 80003c4:	4618      	mov	r0, r3
 80003c6:	f008 f913 	bl	80085f0 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80003ca:	4b32      	ldr	r3, [pc, #200]	; (8000494 <MX_ADC1_Init+0xe8>)
 80003cc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80003d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003d2:	4b30      	ldr	r3, [pc, #192]	; (8000494 <MX_ADC1_Init+0xe8>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003d8:	4b2e      	ldr	r3, [pc, #184]	; (8000494 <MX_ADC1_Init+0xe8>)
 80003da:	2200      	movs	r2, #0
 80003dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003de:	4b2d      	ldr	r3, [pc, #180]	; (8000494 <MX_ADC1_Init+0xe8>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80003e4:	4b2b      	ldr	r3, [pc, #172]	; (8000494 <MX_ADC1_Init+0xe8>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003ea:	4b2a      	ldr	r3, [pc, #168]	; (8000494 <MX_ADC1_Init+0xe8>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003f0:	4b28      	ldr	r3, [pc, #160]	; (8000494 <MX_ADC1_Init+0xe8>)
 80003f2:	2204      	movs	r2, #4
 80003f4:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003f6:	4b27      	ldr	r3, [pc, #156]	; (8000494 <MX_ADC1_Init+0xe8>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003fc:	4b25      	ldr	r3, [pc, #148]	; (8000494 <MX_ADC1_Init+0xe8>)
 80003fe:	2201      	movs	r2, #1
 8000400:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000402:	4b24      	ldr	r3, [pc, #144]	; (8000494 <MX_ADC1_Init+0xe8>)
 8000404:	2201      	movs	r2, #1
 8000406:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000408:	4b22      	ldr	r3, [pc, #136]	; (8000494 <MX_ADC1_Init+0xe8>)
 800040a:	2200      	movs	r2, #0
 800040c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000410:	4b20      	ldr	r3, [pc, #128]	; (8000494 <MX_ADC1_Init+0xe8>)
 8000412:	2200      	movs	r2, #0
 8000414:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000416:	4b1f      	ldr	r3, [pc, #124]	; (8000494 <MX_ADC1_Init+0xe8>)
 8000418:	2200      	movs	r2, #0
 800041a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800041c:	4b1d      	ldr	r3, [pc, #116]	; (8000494 <MX_ADC1_Init+0xe8>)
 800041e:	2201      	movs	r2, #1
 8000420:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000424:	4b1b      	ldr	r3, [pc, #108]	; (8000494 <MX_ADC1_Init+0xe8>)
 8000426:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800042a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800042c:	4b19      	ldr	r3, [pc, #100]	; (8000494 <MX_ADC1_Init+0xe8>)
 800042e:	2200      	movs	r2, #0
 8000430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000434:	4817      	ldr	r0, [pc, #92]	; (8000494 <MX_ADC1_Init+0xe8>)
 8000436:	f001 ffcf 	bl	80023d8 <HAL_ADC_Init>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000440:	f000 ff2e 	bl	80012a0 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000444:	2300      	movs	r3, #0
 8000446:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800044c:	4619      	mov	r1, r3
 800044e:	4811      	ldr	r0, [pc, #68]	; (8000494 <MX_ADC1_Init+0xe8>)
 8000450:	f002 fd58 	bl	8002f04 <HAL_ADCEx_MultiModeConfigChannel>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800045a:	f000 ff21 	bl	80012a0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800045e:	4b0e      	ldr	r3, [pc, #56]	; (8000498 <MX_ADC1_Init+0xec>)
 8000460:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000462:	2306      	movs	r3, #6
 8000464:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000466:	2300      	movs	r3, #0
 8000468:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800046a:	237f      	movs	r3, #127	; 0x7f
 800046c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800046e:	2304      	movs	r3, #4
 8000470:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000472:	2300      	movs	r3, #0
 8000474:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000476:	1d3b      	adds	r3, r7, #4
 8000478:	4619      	mov	r1, r3
 800047a:	4806      	ldr	r0, [pc, #24]	; (8000494 <MX_ADC1_Init+0xe8>)
 800047c:	f002 f96c 	bl	8002758 <HAL_ADC_ConfigChannel>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000486:	f000 ff0b 	bl	80012a0 <Error_Handler>
  }

}
 800048a:	bf00      	nop
 800048c:	3730      	adds	r7, #48	; 0x30
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	20000484 	.word	0x20000484
 8000498:	0c900008 	.word	0x0c900008

0800049c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b08a      	sub	sp, #40	; 0x28
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a4:	f107 0314 	add.w	r3, r7, #20
 80004a8:	2200      	movs	r2, #0
 80004aa:	601a      	str	r2, [r3, #0]
 80004ac:	605a      	str	r2, [r3, #4]
 80004ae:	609a      	str	r2, [r3, #8]
 80004b0:	60da      	str	r2, [r3, #12]
 80004b2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80004bc:	d14f      	bne.n	800055e <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80004be:	4b2a      	ldr	r3, [pc, #168]	; (8000568 <HAL_ADC_MspInit+0xcc>)
 80004c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004c2:	4a29      	ldr	r2, [pc, #164]	; (8000568 <HAL_ADC_MspInit+0xcc>)
 80004c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ca:	4b27      	ldr	r3, [pc, #156]	; (8000568 <HAL_ADC_MspInit+0xcc>)
 80004cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004d2:	613b      	str	r3, [r7, #16]
 80004d4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d6:	4b24      	ldr	r3, [pc, #144]	; (8000568 <HAL_ADC_MspInit+0xcc>)
 80004d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004da:	4a23      	ldr	r2, [pc, #140]	; (8000568 <HAL_ADC_MspInit+0xcc>)
 80004dc:	f043 0301 	orr.w	r3, r3, #1
 80004e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004e2:	4b21      	ldr	r3, [pc, #132]	; (8000568 <HAL_ADC_MspInit+0xcc>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e6:	f003 0301 	and.w	r3, r3, #1
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80004ee:	2304      	movs	r3, #4
 80004f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004f2:	2303      	movs	r3, #3
 80004f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f6:	2300      	movs	r3, #0
 80004f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004fa:	f107 0314 	add.w	r3, r7, #20
 80004fe:	4619      	mov	r1, r3
 8000500:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000504:	f004 f81a 	bl	800453c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000508:	4b18      	ldr	r3, [pc, #96]	; (800056c <HAL_ADC_MspInit+0xd0>)
 800050a:	4a19      	ldr	r2, [pc, #100]	; (8000570 <HAL_ADC_MspInit+0xd4>)
 800050c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800050e:	4b17      	ldr	r3, [pc, #92]	; (800056c <HAL_ADC_MspInit+0xd0>)
 8000510:	2205      	movs	r2, #5
 8000512:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000514:	4b15      	ldr	r3, [pc, #84]	; (800056c <HAL_ADC_MspInit+0xd0>)
 8000516:	2200      	movs	r2, #0
 8000518:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800051a:	4b14      	ldr	r3, [pc, #80]	; (800056c <HAL_ADC_MspInit+0xd0>)
 800051c:	2200      	movs	r2, #0
 800051e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000520:	4b12      	ldr	r3, [pc, #72]	; (800056c <HAL_ADC_MspInit+0xd0>)
 8000522:	2280      	movs	r2, #128	; 0x80
 8000524:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000526:	4b11      	ldr	r3, [pc, #68]	; (800056c <HAL_ADC_MspInit+0xd0>)
 8000528:	f44f 7200 	mov.w	r2, #512	; 0x200
 800052c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800052e:	4b0f      	ldr	r3, [pc, #60]	; (800056c <HAL_ADC_MspInit+0xd0>)
 8000530:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000534:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000536:	4b0d      	ldr	r3, [pc, #52]	; (800056c <HAL_ADC_MspInit+0xd0>)
 8000538:	2220      	movs	r2, #32
 800053a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800053c:	4b0b      	ldr	r3, [pc, #44]	; (800056c <HAL_ADC_MspInit+0xd0>)
 800053e:	2200      	movs	r2, #0
 8000540:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000542:	480a      	ldr	r0, [pc, #40]	; (800056c <HAL_ADC_MspInit+0xd0>)
 8000544:	f003 fd88 	bl	8004058 <HAL_DMA_Init>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 800054e:	f000 fea7 	bl	80012a0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4a05      	ldr	r2, [pc, #20]	; (800056c <HAL_ADC_MspInit+0xd0>)
 8000556:	655a      	str	r2, [r3, #84]	; 0x54
 8000558:	4a04      	ldr	r2, [pc, #16]	; (800056c <HAL_ADC_MspInit+0xd0>)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800055e:	bf00      	nop
 8000560:	3728      	adds	r7, #40	; 0x28
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40021000 	.word	0x40021000
 800056c:	200004f0 	.word	0x200004f0
 8000570:	40020008 	.word	0x40020008

08000574 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 8000578:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <MX_COMP1_Init+0x44>)
 800057a:	4a10      	ldr	r2, [pc, #64]	; (80005bc <MX_COMP1_Init+0x48>)
 800057c:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800057e:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <MX_COMP1_Init+0x44>)
 8000580:	2200      	movs	r2, #0
 8000582:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8000584:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <MX_COMP1_Init+0x44>)
 8000586:	4a0e      	ldr	r2, [pc, #56]	; (80005c0 <MX_COMP1_Init+0x4c>)
 8000588:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800058a:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <MX_COMP1_Init+0x44>)
 800058c:	2200      	movs	r2, #0
 800058e:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000590:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <MX_COMP1_Init+0x44>)
 8000592:	2200      	movs	r2, #0
 8000594:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000596:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <MX_COMP1_Init+0x44>)
 8000598:	2200      	movs	r2, #0
 800059a:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <MX_COMP1_Init+0x44>)
 800059e:	2200      	movs	r2, #0
 80005a0:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80005a2:	4805      	ldr	r0, [pc, #20]	; (80005b8 <MX_COMP1_Init+0x44>)
 80005a4:	f002 ff02 	bl	80033ac <HAL_COMP_Init>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 80005ae:	f000 fe77 	bl	80012a0 <Error_Handler>
  }

}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000550 	.word	0x20000550
 80005bc:	40010200 	.word	0x40010200
 80005c0:	00800030 	.word	0x00800030

080005c4 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b088      	sub	sp, #32
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a0f      	ldr	r2, [pc, #60]	; (8000620 <HAL_COMP_MspInit+0x5c>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d118      	bne.n	8000618 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e6:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <HAL_COMP_MspInit+0x60>)
 80005e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ea:	4a0e      	ldr	r2, [pc, #56]	; (8000624 <HAL_COMP_MspInit+0x60>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005f2:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <HAL_COMP_MspInit+0x60>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80005fe:	2302      	movs	r3, #2
 8000600:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000602:	2303      	movs	r3, #3
 8000604:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060a:	f107 030c 	add.w	r3, r7, #12
 800060e:	4619      	mov	r1, r3
 8000610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000614:	f003 ff92 	bl	800453c <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8000618:	bf00      	nop
 800061a:	3720      	adds	r7, #32
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40010200 	.word	0x40010200
 8000624:	40021000 	.word	0x40021000

08000628 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08c      	sub	sp, #48	; 0x30
 800062c:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800062e:	463b      	mov	r3, r7
 8000630:	2230      	movs	r2, #48	; 0x30
 8000632:	2100      	movs	r1, #0
 8000634:	4618      	mov	r0, r3
 8000636:	f007 ffdb 	bl	80085f0 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 800063a:	4b1e      	ldr	r3, [pc, #120]	; (80006b4 <MX_DAC1_Init+0x8c>)
 800063c:	4a1e      	ldr	r2, [pc, #120]	; (80006b8 <MX_DAC1_Init+0x90>)
 800063e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000640:	481c      	ldr	r0, [pc, #112]	; (80006b4 <MX_DAC1_Init+0x8c>)
 8000642:	f003 f956 	bl	80038f2 <HAL_DAC_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800064c:	f000 fe28 	bl	80012a0 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8000650:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000654:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000656:	2300      	movs	r3, #0
 8000658:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800065a:	2300      	movs	r3, #0
 800065c:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800065e:	2300      	movs	r3, #0
 8000660:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8000662:	2306      	movs	r3, #6
 8000664:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000666:	2300      	movs	r3, #0
 8000668:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800066a:	2300      	movs	r3, #0
 800066c:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800066e:	2301      	movs	r3, #1
 8000670:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000672:	2300      	movs	r3, #0
 8000674:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000676:	463b      	mov	r3, r7
 8000678:	2200      	movs	r2, #0
 800067a:	4619      	mov	r1, r3
 800067c:	480d      	ldr	r0, [pc, #52]	; (80006b4 <MX_DAC1_Init+0x8c>)
 800067e:	f003 fab5 	bl	8003bec <HAL_DAC_ConfigChannel>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 8000688:	f000 fe0a 	bl	80012a0 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800068c:	2300      	movs	r3, #0
 800068e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000690:	2301      	movs	r3, #1
 8000692:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000694:	463b      	mov	r3, r7
 8000696:	2210      	movs	r2, #16
 8000698:	4619      	mov	r1, r3
 800069a:	4806      	ldr	r0, [pc, #24]	; (80006b4 <MX_DAC1_Init+0x8c>)
 800069c:	f003 faa6 	bl	8003bec <HAL_DAC_ConfigChannel>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 80006a6:	f000 fdfb 	bl	80012a0 <Error_Handler>
  }

}
 80006aa:	bf00      	nop
 80006ac:	3730      	adds	r7, #48	; 0x30
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000588 	.word	0x20000588
 80006b8:	50000800 	.word	0x50000800

080006bc <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08c      	sub	sp, #48	; 0x30
 80006c0:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80006c2:	463b      	mov	r3, r7
 80006c4:	2230      	movs	r2, #48	; 0x30
 80006c6:	2100      	movs	r1, #0
 80006c8:	4618      	mov	r0, r3
 80006ca:	f007 ff91 	bl	80085f0 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 80006ce:	4b16      	ldr	r3, [pc, #88]	; (8000728 <MX_DAC2_Init+0x6c>)
 80006d0:	4a16      	ldr	r2, [pc, #88]	; (800072c <MX_DAC2_Init+0x70>)
 80006d2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 80006d4:	4814      	ldr	r0, [pc, #80]	; (8000728 <MX_DAC2_Init+0x6c>)
 80006d6:	f003 f90c 	bl	80038f2 <HAL_DAC_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 80006e0:	f000 fdde 	bl	80012a0 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80006e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006e8:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80006ea:	2300      	movs	r3, #0
 80006ec:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80006ee:	2300      	movs	r3, #0
 80006f0:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80006f6:	2306      	movs	r3, #6
 80006f8:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80006fe:	2300      	movs	r3, #0
 8000700:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000702:	2301      	movs	r3, #1
 8000704:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000706:	2300      	movs	r3, #0
 8000708:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800070a:	463b      	mov	r3, r7
 800070c:	2200      	movs	r2, #0
 800070e:	4619      	mov	r1, r3
 8000710:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_DAC2_Init+0x6c>)
 8000712:	f003 fa6b 	bl	8003bec <HAL_DAC_ConfigChannel>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 800071c:	f000 fdc0 	bl	80012a0 <Error_Handler>
  }

}
 8000720:	bf00      	nop
 8000722:	3730      	adds	r7, #48	; 0x30
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000574 	.word	0x20000574
 800072c:	50000c00 	.word	0x50000c00

08000730 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08c      	sub	sp, #48	; 0x30
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000738:	f107 031c 	add.w	r3, r7, #28
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a56      	ldr	r2, [pc, #344]	; (80008a8 <HAL_DAC_MspInit+0x178>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d150      	bne.n	80007f4 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000752:	4b56      	ldr	r3, [pc, #344]	; (80008ac <HAL_DAC_MspInit+0x17c>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	4a55      	ldr	r2, [pc, #340]	; (80008ac <HAL_DAC_MspInit+0x17c>)
 8000758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800075c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075e:	4b53      	ldr	r3, [pc, #332]	; (80008ac <HAL_DAC_MspInit+0x17c>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000766:	61bb      	str	r3, [r7, #24]
 8000768:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	4b50      	ldr	r3, [pc, #320]	; (80008ac <HAL_DAC_MspInit+0x17c>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	4a4f      	ldr	r2, [pc, #316]	; (80008ac <HAL_DAC_MspInit+0x17c>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000776:	4b4d      	ldr	r3, [pc, #308]	; (80008ac <HAL_DAC_MspInit+0x17c>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	617b      	str	r3, [r7, #20]
 8000780:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000782:	2330      	movs	r3, #48	; 0x30
 8000784:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000786:	2303      	movs	r3, #3
 8000788:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078e:	f107 031c 	add.w	r3, r7, #28
 8000792:	4619      	mov	r1, r3
 8000794:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000798:	f003 fed0 	bl	800453c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 800079c:	4b44      	ldr	r3, [pc, #272]	; (80008b0 <HAL_DAC_MspInit+0x180>)
 800079e:	4a45      	ldr	r2, [pc, #276]	; (80008b4 <HAL_DAC_MspInit+0x184>)
 80007a0:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 80007a2:	4b43      	ldr	r3, [pc, #268]	; (80008b0 <HAL_DAC_MspInit+0x180>)
 80007a4:	2206      	movs	r2, #6
 80007a6:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007a8:	4b41      	ldr	r3, [pc, #260]	; (80008b0 <HAL_DAC_MspInit+0x180>)
 80007aa:	2210      	movs	r2, #16
 80007ac:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007ae:	4b40      	ldr	r3, [pc, #256]	; (80008b0 <HAL_DAC_MspInit+0x180>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80007b4:	4b3e      	ldr	r3, [pc, #248]	; (80008b0 <HAL_DAC_MspInit+0x180>)
 80007b6:	2280      	movs	r2, #128	; 0x80
 80007b8:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007ba:	4b3d      	ldr	r3, [pc, #244]	; (80008b0 <HAL_DAC_MspInit+0x180>)
 80007bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c0:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80007c2:	4b3b      	ldr	r3, [pc, #236]	; (80008b0 <HAL_DAC_MspInit+0x180>)
 80007c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007c8:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80007ca:	4b39      	ldr	r3, [pc, #228]	; (80008b0 <HAL_DAC_MspInit+0x180>)
 80007cc:	2220      	movs	r2, #32
 80007ce:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80007d0:	4b37      	ldr	r3, [pc, #220]	; (80008b0 <HAL_DAC_MspInit+0x180>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80007d6:	4836      	ldr	r0, [pc, #216]	; (80008b0 <HAL_DAC_MspInit+0x180>)
 80007d8:	f003 fc3e 	bl	8004058 <HAL_DMA_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80007e2:	f000 fd5d 	bl	80012a0 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4a31      	ldr	r2, [pc, #196]	; (80008b0 <HAL_DAC_MspInit+0x180>)
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	4a30      	ldr	r2, [pc, #192]	; (80008b0 <HAL_DAC_MspInit+0x180>)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 80007f2:	e054      	b.n	800089e <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a2f      	ldr	r2, [pc, #188]	; (80008b8 <HAL_DAC_MspInit+0x188>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d14f      	bne.n	800089e <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 80007fe:	4b2b      	ldr	r3, [pc, #172]	; (80008ac <HAL_DAC_MspInit+0x17c>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000802:	4a2a      	ldr	r2, [pc, #168]	; (80008ac <HAL_DAC_MspInit+0x17c>)
 8000804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080a:	4b28      	ldr	r3, [pc, #160]	; (80008ac <HAL_DAC_MspInit+0x17c>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	4b25      	ldr	r3, [pc, #148]	; (80008ac <HAL_DAC_MspInit+0x17c>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	4a24      	ldr	r2, [pc, #144]	; (80008ac <HAL_DAC_MspInit+0x17c>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000822:	4b22      	ldr	r3, [pc, #136]	; (80008ac <HAL_DAC_MspInit+0x17c>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800082e:	2340      	movs	r3, #64	; 0x40
 8000830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000832:	2303      	movs	r3, #3
 8000834:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	4619      	mov	r1, r3
 8000840:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000844:	f003 fe7a 	bl	800453c <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 8000848:	4b1c      	ldr	r3, [pc, #112]	; (80008bc <HAL_DAC_MspInit+0x18c>)
 800084a:	4a1d      	ldr	r2, [pc, #116]	; (80008c0 <HAL_DAC_MspInit+0x190>)
 800084c:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 800084e:	4b1b      	ldr	r3, [pc, #108]	; (80008bc <HAL_DAC_MspInit+0x18c>)
 8000850:	2229      	movs	r2, #41	; 0x29
 8000852:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000854:	4b19      	ldr	r3, [pc, #100]	; (80008bc <HAL_DAC_MspInit+0x18c>)
 8000856:	2210      	movs	r2, #16
 8000858:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800085a:	4b18      	ldr	r3, [pc, #96]	; (80008bc <HAL_DAC_MspInit+0x18c>)
 800085c:	2200      	movs	r2, #0
 800085e:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000860:	4b16      	ldr	r3, [pc, #88]	; (80008bc <HAL_DAC_MspInit+0x18c>)
 8000862:	2280      	movs	r2, #128	; 0x80
 8000864:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <HAL_DAC_MspInit+0x18c>)
 8000868:	f44f 7200 	mov.w	r2, #512	; 0x200
 800086c:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800086e:	4b13      	ldr	r3, [pc, #76]	; (80008bc <HAL_DAC_MspInit+0x18c>)
 8000870:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000874:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <HAL_DAC_MspInit+0x18c>)
 8000878:	2220      	movs	r2, #32
 800087a:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <HAL_DAC_MspInit+0x18c>)
 800087e:	2200      	movs	r2, #0
 8000880:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8000882:	480e      	ldr	r0, [pc, #56]	; (80008bc <HAL_DAC_MspInit+0x18c>)
 8000884:	f003 fbe8 	bl	8004058 <HAL_DMA_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <HAL_DAC_MspInit+0x162>
      Error_Handler();
 800088e:	f000 fd07 	bl	80012a0 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4a09      	ldr	r2, [pc, #36]	; (80008bc <HAL_DAC_MspInit+0x18c>)
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	4a08      	ldr	r2, [pc, #32]	; (80008bc <HAL_DAC_MspInit+0x18c>)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6293      	str	r3, [r2, #40]	; 0x28
}
 800089e:	bf00      	nop
 80008a0:	3730      	adds	r7, #48	; 0x30
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	50000800 	.word	0x50000800
 80008ac:	40021000 	.word	0x40021000
 80008b0:	2000059c 	.word	0x2000059c
 80008b4:	4002001c 	.word	0x4002001c
 80008b8:	50000c00 	.word	0x50000c00
 80008bc:	200005fc 	.word	0x200005fc
 80008c0:	40020030 	.word	0x40020030

080008c4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80008ca:	4b1e      	ldr	r3, [pc, #120]	; (8000944 <MX_DMA_Init+0x80>)
 80008cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008ce:	4a1d      	ldr	r2, [pc, #116]	; (8000944 <MX_DMA_Init+0x80>)
 80008d0:	f043 0304 	orr.w	r3, r3, #4
 80008d4:	6493      	str	r3, [r2, #72]	; 0x48
 80008d6:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <MX_DMA_Init+0x80>)
 80008d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008da:	f003 0304 	and.w	r3, r3, #4
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <MX_DMA_Init+0x80>)
 80008e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008e6:	4a17      	ldr	r2, [pc, #92]	; (8000944 <MX_DMA_Init+0x80>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6493      	str	r3, [r2, #72]	; 0x48
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <MX_DMA_Init+0x80>)
 80008f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2101      	movs	r1, #1
 80008fe:	200b      	movs	r0, #11
 8000900:	f002 ffc3 	bl	800388a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000904:	200b      	movs	r0, #11
 8000906:	f002 ffda 	bl	80038be <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800090a:	2200      	movs	r2, #0
 800090c:	2100      	movs	r1, #0
 800090e:	200c      	movs	r0, #12
 8000910:	f002 ffbb 	bl	800388a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000914:	200c      	movs	r0, #12
 8000916:	f002 ffd2 	bl	80038be <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	2100      	movs	r1, #0
 800091e:	200d      	movs	r0, #13
 8000920:	f002 ffb3 	bl	800388a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000924:	200d      	movs	r0, #13
 8000926:	f002 ffca 	bl	80038be <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800092a:	2200      	movs	r2, #0
 800092c:	2100      	movs	r1, #0
 800092e:	200e      	movs	r0, #14
 8000930:	f002 ffab 	bl	800388a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000934:	200e      	movs	r0, #14
 8000936:	f002 ffc2 	bl	80038be <HAL_NVIC_EnableIRQ>

}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40021000 	.word	0x40021000

08000948 <update_dc_bias_sweep>:
uint16_t dcbias = 0;
int dcbias_dir = 1;
int dcinverted = 0;

void update_dc_bias_sweep()
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
	  // up=1, down=0
	  (dcbias_dir) ? (dcbias++) : (dcbias--);
 800094c:	4b20      	ldr	r3, [pc, #128]	; (80009d0 <update_dc_bias_sweep+0x88>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d006      	beq.n	8000962 <update_dc_bias_sweep+0x1a>
 8000954:	4b1f      	ldr	r3, [pc, #124]	; (80009d4 <update_dc_bias_sweep+0x8c>)
 8000956:	881b      	ldrh	r3, [r3, #0]
 8000958:	3301      	adds	r3, #1
 800095a:	b29a      	uxth	r2, r3
 800095c:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <update_dc_bias_sweep+0x8c>)
 800095e:	801a      	strh	r2, [r3, #0]
 8000960:	e005      	b.n	800096e <update_dc_bias_sweep+0x26>
 8000962:	4b1c      	ldr	r3, [pc, #112]	; (80009d4 <update_dc_bias_sweep+0x8c>)
 8000964:	881b      	ldrh	r3, [r3, #0]
 8000966:	3b01      	subs	r3, #1
 8000968:	b29a      	uxth	r2, r3
 800096a:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <update_dc_bias_sweep+0x8c>)
 800096c:	801a      	strh	r2, [r3, #0]

	  // invert the bias signal at zero crossing
	  if(dcbias < 1) {
 800096e:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <update_dc_bias_sweep+0x8c>)
 8000970:	881b      	ldrh	r3, [r3, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d10a      	bne.n	800098c <update_dc_bias_sweep+0x44>
		(dcinverted) ? (dcinverted=0) : (dcinverted=1);
 8000976:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <update_dc_bias_sweep+0x90>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d003      	beq.n	8000986 <update_dc_bias_sweep+0x3e>
 800097e:	4b16      	ldr	r3, [pc, #88]	; (80009d8 <update_dc_bias_sweep+0x90>)
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	e002      	b.n	800098c <update_dc_bias_sweep+0x44>
 8000986:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <update_dc_bias_sweep+0x90>)
 8000988:	2201      	movs	r2, #1
 800098a:	601a      	str	r2, [r3, #0]
	  }

	  // change direction if dac limits are reached
	  if(dcbias < 1) 	{ dcbias_dir = 1; }
 800098c:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <update_dc_bias_sweep+0x8c>)
 800098e:	881b      	ldrh	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d102      	bne.n	800099a <update_dc_bias_sweep+0x52>
 8000994:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <update_dc_bias_sweep+0x88>)
 8000996:	2201      	movs	r2, #1
 8000998:	601a      	str	r2, [r3, #0]
	  if(dcbias > 4095) { dcbias_dir = 0; }
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <update_dc_bias_sweep+0x8c>)
 800099c:	881b      	ldrh	r3, [r3, #0]
 800099e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80009a2:	d302      	bcc.n	80009aa <update_dc_bias_sweep+0x62>
 80009a4:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <update_dc_bias_sweep+0x88>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]


	  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, dcinverted);
 80009aa:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <update_dc_bias_sweep+0x90>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	461a      	mov	r2, r3
 80009b2:	2108      	movs	r1, #8
 80009b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b8:	f003 ff5a 	bl	8004870 <HAL_GPIO_WritePin>
	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, dcbias);
 80009bc:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <update_dc_bias_sweep+0x8c>)
 80009be:	881b      	ldrh	r3, [r3, #0]
 80009c0:	2200      	movs	r2, #0
 80009c2:	2110      	movs	r1, #16
 80009c4:	4805      	ldr	r0, [pc, #20]	; (80009dc <update_dc_bias_sweep+0x94>)
 80009c6:	f003 f8cb 	bl	8003b60 <HAL_DAC_SetValue>
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	2000000c 	.word	0x2000000c
 80009d4:	20000460 	.word	0x20000460
 80009d8:	20000464 	.word	0x20000464
 80009dc:	20000588 	.word	0x20000588

080009e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e4:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <__NVIC_GetPriorityGrouping+0x18>)
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	0a1b      	lsrs	r3, r3, #8
 80009ea:	f003 0307 	and.w	r3, r3, #7
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	db0b      	blt.n	8000a26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	f003 021f 	and.w	r2, r3, #31
 8000a14:	4907      	ldr	r1, [pc, #28]	; (8000a34 <__NVIC_EnableIRQ+0x38>)
 8000a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1a:	095b      	lsrs	r3, r3, #5
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000e100 	.word	0xe000e100

08000a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	6039      	str	r1, [r7, #0]
 8000a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	db0a      	blt.n	8000a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	490c      	ldr	r1, [pc, #48]	; (8000a84 <__NVIC_SetPriority+0x4c>)
 8000a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a56:	0112      	lsls	r2, r2, #4
 8000a58:	b2d2      	uxtb	r2, r2
 8000a5a:	440b      	add	r3, r1
 8000a5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a60:	e00a      	b.n	8000a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	4908      	ldr	r1, [pc, #32]	; (8000a88 <__NVIC_SetPriority+0x50>)
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	f003 030f 	and.w	r3, r3, #15
 8000a6e:	3b04      	subs	r3, #4
 8000a70:	0112      	lsls	r2, r2, #4
 8000a72:	b2d2      	uxtb	r2, r2
 8000a74:	440b      	add	r3, r1
 8000a76:	761a      	strb	r2, [r3, #24]
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	e000e100 	.word	0xe000e100
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b089      	sub	sp, #36	; 0x24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	f003 0307 	and.w	r3, r3, #7
 8000a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	f1c3 0307 	rsb	r3, r3, #7
 8000aa6:	2b04      	cmp	r3, #4
 8000aa8:	bf28      	it	cs
 8000aaa:	2304      	movcs	r3, #4
 8000aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	3304      	adds	r3, #4
 8000ab2:	2b06      	cmp	r3, #6
 8000ab4:	d902      	bls.n	8000abc <NVIC_EncodePriority+0x30>
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	3b03      	subs	r3, #3
 8000aba:	e000      	b.n	8000abe <NVIC_EncodePriority+0x32>
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	43da      	mvns	r2, r3
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	401a      	ands	r2, r3
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ad4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	fa01 f303 	lsl.w	r3, r1, r3
 8000ade:	43d9      	mvns	r1, r3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae4:	4313      	orrs	r3, r2
         );
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3724      	adds	r7, #36	; 0x24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
	...

08000af4 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 8000afe:	4a14      	ldr	r2, [pc, #80]	; (8000b50 <LL_SYSCFG_SetEXTISource+0x5c>)
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	f003 0303 	and.w	r3, r3, #3
 8000b06:	3302      	adds	r3, #2
 8000b08:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	0c1b      	lsrs	r3, r3, #16
 8000b10:	43db      	mvns	r3, r3
 8000b12:	ea02 0103 	and.w	r1, r2, r3
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	0c1b      	lsrs	r3, r3, #16
 8000b1a:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	fa93 f3a3 	rbit	r3, r3
 8000b22:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	fab3 f383 	clz	r3, r3
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	f003 031f 	and.w	r3, r3, #31
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	409a      	lsls	r2, r3
 8000b34:	4806      	ldr	r0, [pc, #24]	; (8000b50 <LL_SYSCFG_SetEXTISource+0x5c>)
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	f003 0303 	and.w	r3, r3, #3
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	3302      	adds	r3, #2
 8000b40:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000b44:	bf00      	nop
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	40010000 	.word	0x40010000

08000b54 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b089      	sub	sp, #36	; 0x24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	fa93 f3a3 	rbit	r3, r3
 8000b6e:	613b      	str	r3, [r7, #16]
  return result;
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	fab3 f383 	clz	r3, r3
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	2103      	movs	r1, #3
 8000b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b80:	43db      	mvns	r3, r3
 8000b82:	401a      	ands	r2, r3
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b88:	69fb      	ldr	r3, [r7, #28]
 8000b8a:	fa93 f3a3 	rbit	r3, r3
 8000b8e:	61bb      	str	r3, [r7, #24]
  return result;
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	fab3 f383 	clz	r3, r3
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	6879      	ldr	r1, [r7, #4]
 8000b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba0:	431a      	orrs	r2, r3
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	601a      	str	r2, [r3, #0]
}
 8000ba6:	bf00      	nop
 8000ba8:	3724      	adds	r7, #36	; 0x24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	b089      	sub	sp, #36	; 0x24
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	60f8      	str	r0, [r7, #12]
 8000bba:	60b9      	str	r1, [r7, #8]
 8000bbc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	68da      	ldr	r2, [r3, #12]
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	fa93 f3a3 	rbit	r3, r3
 8000bcc:	613b      	str	r3, [r7, #16]
  return result;
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	fab3 f383 	clz	r3, r3
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	2103      	movs	r1, #3
 8000bda:	fa01 f303 	lsl.w	r3, r1, r3
 8000bde:	43db      	mvns	r3, r3
 8000be0:	401a      	ands	r2, r3
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	fa93 f3a3 	rbit	r3, r3
 8000bec:	61bb      	str	r3, [r7, #24]
  return result;
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	fab3 f383 	clz	r3, r3
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	6879      	ldr	r1, [r7, #4]
 8000bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfe:	431a      	orrs	r2, r3
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	60da      	str	r2, [r3, #12]
}
 8000c04:	bf00      	nop
 8000c06:	3724      	adds	r7, #36	; 0x24
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	683a      	ldr	r2, [r7, #0]
 8000c1e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c34:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000c36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c38:	4907      	ldr	r1, [pc, #28]	; (8000c58 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c40:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000c42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4013      	ands	r3, r2
 8000c48:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
}
 8000c4c:	bf00      	nop
 8000c4e:	3714      	adds	r7, #20
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	40021000 	.word	0x40021000

08000c5c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08a      	sub	sp, #40	; 0x28
 8000c60:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000c62:	f107 031c 	add.w	r3, r7, #28
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
 8000c7c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000c7e:	2004      	movs	r0, #4
 8000c80:	f7ff ffd4 	bl	8000c2c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8000c84:	2020      	movs	r0, #32
 8000c86:	f7ff ffd1 	bl	8000c2c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	f7ff ffce 	bl	8000c2c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000c90:	2002      	movs	r0, #2
 8000c92:	f7ff ffcb 	bl	8000c2c <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 8000c96:	2108      	movs	r1, #8
 8000c98:	48d3      	ldr	r0, [pc, #844]	; (8000fe8 <MX_GPIO_Init+0x38c>)
 8000c9a:	f7ff ffb9 	bl	8000c10 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 8000c9e:	2108      	movs	r1, #8
 8000ca0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca4:	f7ff ffb4 	bl	8000c10 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 8000ca8:	2110      	movs	r1, #16
 8000caa:	48cf      	ldr	r0, [pc, #828]	; (8000fe8 <MX_GPIO_Init+0x38c>)
 8000cac:	f7ff ffb0 	bl	8000c10 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 8000cb0:	2120      	movs	r1, #32
 8000cb2:	48cd      	ldr	r0, [pc, #820]	; (8000fe8 <MX_GPIO_Init+0x38c>)
 8000cb4:	f7ff ffac 	bl	8000c10 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 8000cb8:	2101      	movs	r1, #1
 8000cba:	48cc      	ldr	r0, [pc, #816]	; (8000fec <MX_GPIO_Init+0x390>)
 8000cbc:	f7ff ffa8 	bl	8000c10 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 8000cc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cc4:	48c8      	ldr	r0, [pc, #800]	; (8000fe8 <MX_GPIO_Init+0x38c>)
 8000cc6:	f7ff ffa3 	bl	8000c10 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 8000cca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cce:	48c6      	ldr	r0, [pc, #792]	; (8000fe8 <MX_GPIO_Init+0x38c>)
 8000cd0:	f7ff ff9e 	bl	8000c10 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 8000cd4:	2140      	movs	r1, #64	; 0x40
 8000cd6:	48c5      	ldr	r0, [pc, #788]	; (8000fec <MX_GPIO_Init+0x390>)
 8000cd8:	f7ff ff9a 	bl	8000c10 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 8000cdc:	2180      	movs	r1, #128	; 0x80
 8000cde:	48c3      	ldr	r0, [pc, #780]	; (8000fec <MX_GPIO_Init+0x390>)
 8000ce0:	f7ff ff96 	bl	8000c10 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 8000ce4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ce8:	48c0      	ldr	r0, [pc, #768]	; (8000fec <MX_GPIO_Init+0x390>)
 8000cea:	f7ff ff91 	bl	8000c10 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 8000cee:	49c0      	ldr	r1, [pc, #768]	; (8000ff0 <MX_GPIO_Init+0x394>)
 8000cf0:	2002      	movs	r0, #2
 8000cf2:	f7ff feff 	bl	8000af4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 8000cf6:	49bf      	ldr	r1, [pc, #764]	; (8000ff4 <MX_GPIO_Init+0x398>)
 8000cf8:	2002      	movs	r0, #2
 8000cfa:	f7ff fefb 	bl	8000af4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 8000cfe:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8000d02:	2005      	movs	r0, #5
 8000d04:	f7ff fef6 	bl	8000af4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 8000d08:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8000d0c:	2005      	movs	r0, #5
 8000d0e:	f7ff fef1 	bl	8000af4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 8000d12:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8000d16:	2002      	movs	r0, #2
 8000d18:	f7ff feec 	bl	8000af4 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8000d1c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d20:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000d22:	2301      	movs	r3, #1
 8000d24:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000d34:	f107 031c 	add.w	r3, r7, #28
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f006 fb4d 	bl	80073d8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8000d3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d42:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000d44:	2301      	movs	r3, #1
 8000d46:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000d50:	2302      	movs	r3, #2
 8000d52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000d56:	f107 031c 	add.w	r3, r7, #28
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f006 fb3c 	bl	80073d8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8000d60:	2301      	movs	r3, #1
 8000d62:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000d64:	2301      	movs	r3, #1
 8000d66:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000d70:	2302      	movs	r3, #2
 8000d72:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f006 fb2c 	bl	80073d8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8000d80:	2302      	movs	r3, #2
 8000d82:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000d84:	2301      	movs	r3, #1
 8000d86:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000d90:	2302      	movs	r3, #2
 8000d92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000d96:	f107 031c 	add.w	r3, r7, #28
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f006 fb1c 	bl	80073d8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8000da0:	2304      	movs	r3, #4
 8000da2:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000da4:	2301      	movs	r3, #1
 8000da6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000db0:	2302      	movs	r3, #2
 8000db2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000db6:	f107 031c 	add.w	r3, r7, #28
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f006 fb0c 	bl	80073d8 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dc6:	4888      	ldr	r0, [pc, #544]	; (8000fe8 <MX_GPIO_Init+0x38c>)
 8000dc8:	f7ff fef3 	bl	8000bb2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 8000dcc:	2201      	movs	r2, #1
 8000dce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dd2:	4885      	ldr	r0, [pc, #532]	; (8000fe8 <MX_GPIO_Init+0x38c>)
 8000dd4:	f7ff feed 	bl	8000bb2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 8000dd8:	2201      	movs	r2, #1
 8000dda:	2101      	movs	r1, #1
 8000ddc:	4886      	ldr	r0, [pc, #536]	; (8000ff8 <MX_GPIO_Init+0x39c>)
 8000dde:	f7ff fee8 	bl	8000bb2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 8000de2:	2201      	movs	r2, #1
 8000de4:	2102      	movs	r1, #2
 8000de6:	4884      	ldr	r0, [pc, #528]	; (8000ff8 <MX_GPIO_Init+0x39c>)
 8000de8:	f7ff fee3 	bl	8000bb2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 8000dec:	2201      	movs	r2, #1
 8000dee:	2104      	movs	r1, #4
 8000df0:	487d      	ldr	r0, [pc, #500]	; (8000fe8 <MX_GPIO_Init+0x38c>)
 8000df2:	f7ff fede 	bl	8000bb2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 8000df6:	2200      	movs	r2, #0
 8000df8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dfc:	487a      	ldr	r0, [pc, #488]	; (8000fe8 <MX_GPIO_Init+0x38c>)
 8000dfe:	f7ff fea9 	bl	8000b54 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 8000e02:	2200      	movs	r2, #0
 8000e04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e08:	4877      	ldr	r0, [pc, #476]	; (8000fe8 <MX_GPIO_Init+0x38c>)
 8000e0a:	f7ff fea3 	bl	8000b54 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2101      	movs	r1, #1
 8000e12:	4879      	ldr	r0, [pc, #484]	; (8000ff8 <MX_GPIO_Init+0x39c>)
 8000e14:	f7ff fe9e 	bl	8000b54 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	2102      	movs	r1, #2
 8000e1c:	4876      	ldr	r0, [pc, #472]	; (8000ff8 <MX_GPIO_Init+0x39c>)
 8000e1e:	f7ff fe99 	bl	8000b54 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2104      	movs	r1, #4
 8000e26:	4870      	ldr	r0, [pc, #448]	; (8000fe8 <MX_GPIO_Init+0x38c>)
 8000e28:	f7ff fe94 	bl	8000b54 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 8000e2c:	2308      	movs	r3, #8
 8000e2e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e30:	2301      	movs	r3, #1
 8000e32:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e34:	2300      	movs	r3, #0
 8000e36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	4619      	mov	r1, r3
 8000e44:	4868      	ldr	r0, [pc, #416]	; (8000fe8 <MX_GPIO_Init+0x38c>)
 8000e46:	f006 fcba 	bl	80077be <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 8000e4a:	2308      	movs	r3, #8
 8000e4c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	4619      	mov	r1, r3
 8000e62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e66:	f006 fcaa 	bl	80077be <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 8000e6a:	2310      	movs	r3, #16
 8000e6c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	4619      	mov	r1, r3
 8000e82:	4859      	ldr	r0, [pc, #356]	; (8000fe8 <MX_GPIO_Init+0x38c>)
 8000e84:	f006 fc9b 	bl	80077be <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 8000e88:	2320      	movs	r3, #32
 8000e8a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e90:	2300      	movs	r3, #0
 8000e92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4851      	ldr	r0, [pc, #324]	; (8000fe8 <MX_GPIO_Init+0x38c>)
 8000ea2:	f006 fc8c 	bl	80077be <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	484b      	ldr	r0, [pc, #300]	; (8000fec <MX_GPIO_Init+0x390>)
 8000ec0:	f006 fc7d 	bl	80077be <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 8000ec4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ec8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	4619      	mov	r1, r3
 8000ede:	4842      	ldr	r0, [pc, #264]	; (8000fe8 <MX_GPIO_Init+0x38c>)
 8000ee0:	f006 fc6d 	bl	80077be <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 8000ee4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ee8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000eea:	2301      	movs	r3, #1
 8000eec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	4619      	mov	r1, r3
 8000efe:	483a      	ldr	r0, [pc, #232]	; (8000fe8 <MX_GPIO_Init+0x38c>)
 8000f00:	f006 fc5d 	bl	80077be <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 8000f04:	2340      	movs	r3, #64	; 0x40
 8000f06:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4833      	ldr	r0, [pc, #204]	; (8000fec <MX_GPIO_Init+0x390>)
 8000f1e:	f006 fc4e 	bl	80077be <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 8000f22:	2380      	movs	r3, #128	; 0x80
 8000f24:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f26:	2301      	movs	r3, #1
 8000f28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	4619      	mov	r1, r3
 8000f3a:	482c      	ldr	r0, [pc, #176]	; (8000fec <MX_GPIO_Init+0x390>)
 8000f3c:	f006 fc3f 	bl	80077be <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 8000f40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f44:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f46:	2301      	movs	r3, #1
 8000f48:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4824      	ldr	r0, [pc, #144]	; (8000fec <MX_GPIO_Init+0x390>)
 8000f5c:	f006 fc2f 	bl	80077be <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000f60:	f7ff fd3e 	bl	80009e0 <__NVIC_GetPriorityGrouping>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2200      	movs	r2, #0
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff fd8e 	bl	8000a8c <NVIC_EncodePriority>
 8000f70:	4603      	mov	r3, r0
 8000f72:	4619      	mov	r1, r3
 8000f74:	2006      	movs	r0, #6
 8000f76:	f7ff fd5f 	bl	8000a38 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8000f7a:	2006      	movs	r0, #6
 8000f7c:	f7ff fd3e 	bl	80009fc <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000f80:	f7ff fd2e 	bl	80009e0 <__NVIC_GetPriorityGrouping>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2200      	movs	r2, #0
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff fd7e 	bl	8000a8c <NVIC_EncodePriority>
 8000f90:	4603      	mov	r3, r0
 8000f92:	4619      	mov	r1, r3
 8000f94:	2007      	movs	r0, #7
 8000f96:	f7ff fd4f 	bl	8000a38 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 8000f9a:	2007      	movs	r0, #7
 8000f9c:	f7ff fd2e 	bl	80009fc <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000fa0:	f7ff fd1e 	bl	80009e0 <__NVIC_GetPriorityGrouping>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff fd6e 	bl	8000a8c <NVIC_EncodePriority>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	2008      	movs	r0, #8
 8000fb6:	f7ff fd3f 	bl	8000a38 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 8000fba:	2008      	movs	r0, #8
 8000fbc:	f7ff fd1e 	bl	80009fc <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000fc0:	f7ff fd0e 	bl	80009e0 <__NVIC_GetPriorityGrouping>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fd5e 	bl	8000a8c <NVIC_EncodePriority>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	2028      	movs	r0, #40	; 0x28
 8000fd6:	f7ff fd2f 	bl	8000a38 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fda:	2028      	movs	r0, #40	; 0x28
 8000fdc:	f7ff fd0e 	bl	80009fc <__NVIC_EnableIRQ>

}
 8000fe0:	bf00      	nop
 8000fe2:	3728      	adds	r7, #40	; 0x28
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	e009      	b.n	8000ffc <MX_GPIO_Init+0x3a0>
 8000fe8:	48000800 	.word	0x48000800
 8000fec:	48000400 	.word	0x48000400
 8000ff0:	0f000003 	.word	0x0f000003
 8000ff4:	f0000003 	.word	0xf0000003
 8000ff8:	48001400 	.word	0x48001400
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop

08001000 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001008:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800100c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	2b00      	cmp	r3, #0
 8001016:	d013      	beq.n	8001040 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001018:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800101c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001020:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001024:	2b00      	cmp	r3, #0
 8001026:	d00b      	beq.n	8001040 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001028:	e000      	b.n	800102c <ITM_SendChar+0x2c>
    {
      __NOP();
 800102a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800102c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d0f9      	beq.n	800102a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001036:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001040:	687b      	ldr	r3, [r7, #4]
}
 8001042:	4618      	mov	r0, r3
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b086      	sub	sp, #24
 8001052:	af00      	add	r7, sp, #0
 8001054:	60f8      	str	r0, [r7, #12]
 8001056:	60b9      	str	r1, [r7, #8]
 8001058:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
 8001062:	e009      	b.n	8001078 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	1c5a      	adds	r2, r3, #1
 8001068:	60ba      	str	r2, [r7, #8]
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff ffc7 	bl	8001000 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	3301      	adds	r3, #1
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	697a      	ldr	r2, [r7, #20]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	429a      	cmp	r2, r3
 800107e:	dbf1      	blt.n	8001064 <_write+0x16>
  return len;
 8001080:	687b      	ldr	r3, [r7, #4]
}
 8001082:	4618      	mov	r0, r3
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001092:	f000 ff4c 	bl	8001f2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001096:	f000 f895 	bl	80011c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800109a:	f7ff fddf 	bl	8000c5c <MX_GPIO_Init>
  MX_DMA_Init();
 800109e:	f7ff fc11 	bl	80008c4 <MX_DMA_Init>
  MX_DAC1_Init();
 80010a2:	f7ff fac1 	bl	8000628 <MX_DAC1_Init>
  MX_DAC2_Init();
 80010a6:	f7ff fb09 	bl	80006bc <MX_DAC2_Init>
  MX_ADC1_Init();
 80010aa:	f7ff f97f 	bl	80003ac <MX_ADC1_Init>
  MX_COMP1_Init();
 80010ae:	f7ff fa61 	bl	8000574 <MX_COMP1_Init>
  MX_TIM2_Init();
 80010b2:	f000 fc97 	bl	80019e4 <MX_TIM2_Init>
  MX_TIM17_Init();
 80010b6:	f000 fddf 	bl	8001c78 <MX_TIM17_Init>
  MX_SPI3_Init();
 80010ba:	f000 f92f 	bl	800131c <MX_SPI3_Init>
  MX_RNG_Init();
 80010be:	f000 f91f 	bl	8001300 <MX_RNG_Init>
  MX_TIM1_Init();
 80010c2:	f000 fc1f 	bl	8001904 <MX_TIM1_Init>
  MX_TIM8_Init();
 80010c6:	f000 fcf7 	bl	8001ab8 <MX_TIM8_Init>
  MX_TIM16_Init();
 80010ca:	f000 fdaf 	bl	8001c2c <MX_TIM16_Init>
  MX_TIM15_Init();
 80010ce:	f000 fd5b 	bl	8001b88 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  // main signal function output (external)
  HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80010d2:	2300      	movs	r3, #0
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	2378      	movs	r3, #120	; 0x78
 80010d8:	4a2f      	ldr	r2, [pc, #188]	; (8001198 <main+0x10c>)
 80010da:	2100      	movs	r1, #0
 80010dc:	482f      	ldr	r0, [pc, #188]	; (800119c <main+0x110>)
 80010de:	f002 fc7d 	bl	80039dc <HAL_DAC_Start_DMA>
  //TIM8->ARR = sin1_max_arr;

  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 80010e2:	2110      	movs	r1, #16
 80010e4:	482d      	ldr	r0, [pc, #180]	; (800119c <main+0x110>)
 80010e6:	f002 fc26 	bl	8003936 <HAL_DAC_Start>
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, square_data_table, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, unitimpulse_data_table, UNITIMPULSE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_data_table, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_rev_data_table, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
  HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, triangle_data_table, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 80010ea:	2300      	movs	r3, #0
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	2378      	movs	r3, #120	; 0x78
 80010f0:	4a2b      	ldr	r2, [pc, #172]	; (80011a0 <main+0x114>)
 80010f2:	2100      	movs	r1, #0
 80010f4:	482b      	ldr	r0, [pc, #172]	; (80011a4 <main+0x118>)
 80010f6:	f002 fc71 	bl	80039dc <HAL_DAC_Start_DMA>

  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);
#ifndef DISABLE_ALL_TIMERS
  // single clock to run all DAC channels. TODO add independent clocks
  HAL_TIM_Base_Start(&htim8);
 80010fa:	482b      	ldr	r0, [pc, #172]	; (80011a8 <main+0x11c>)
 80010fc:	f005 f8c0 	bl	8006280 <HAL_TIM_Base_Start>
#endif //DISABLE_ALL_TIMERS

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 8001100:	2201      	movs	r2, #1
 8001102:	2108      	movs	r1, #8
 8001104:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001108:	f003 fbb2 	bl	8004870 <HAL_GPIO_WritePin>

  // PGA gain
  HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 800110c:	2201      	movs	r2, #1
 800110e:	2101      	movs	r1, #1
 8001110:	4826      	ldr	r0, [pc, #152]	; (80011ac <main+0x120>)
 8001112:	f003 fbad 	bl	8004870 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8001116:	2201      	movs	r2, #1
 8001118:	2120      	movs	r1, #32
 800111a:	4825      	ldr	r0, [pc, #148]	; (80011b0 <main+0x124>)
 800111c:	f003 fba8 	bl	8004870 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8001120:	2201      	movs	r2, #1
 8001122:	2110      	movs	r1, #16
 8001124:	4822      	ldr	r0, [pc, #136]	; (80011b0 <main+0x124>)
 8001126:	f003 fba3 	bl	8004870 <HAL_GPIO_WritePin>

#ifndef DISABLE_ALL_TIMERS
  // start test routine (update_dc_bias_sweep())
  HAL_TIM_Base_Start_IT(&htim17);
 800112a:	4822      	ldr	r0, [pc, #136]	; (80011b4 <main+0x128>)
 800112c:	f005 f8d6 	bl	80062dc <HAL_TIM_Base_Start_IT>
#endif	//DISABLE_ALL_TIMERS


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 8001130:	2200      	movs	r2, #0
 8001132:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001136:	481e      	ldr	r0, [pc, #120]	; (80011b0 <main+0x124>)
 8001138:	f003 fb9a 	bl	8004870 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 800113c:	2200      	movs	r2, #0
 800113e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001142:	481b      	ldr	r0, [pc, #108]	; (80011b0 <main+0x124>)
 8001144:	f003 fb94 	bl	8004870 <HAL_GPIO_WritePin>

#ifdef TIM_TRIGGER_MODE
  // input capture on in TIM2 slave-mode TF1FP1

  // set HW switch to direct ext. trigger input to TIM pin
  HAL_GPIO_WritePin(TRIGMODE_GPIO_Port, TRIGMODE_Pin, GPIO_PIN_SET);
 8001148:	2201      	movs	r2, #1
 800114a:	2108      	movs	r1, #8
 800114c:	4818      	ldr	r0, [pc, #96]	; (80011b0 <main+0x124>)
 800114e:	f003 fb8f 	bl	8004870 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);	// TS5A3357 Pin6
  //HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); // TS5A3357 Pin5

  // clear slave mode select reg
  TIM2->SMCR &= ~(TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2);
 8001152:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800115c:	f023 0307 	bic.w	r3, r3, #7
 8001160:	6093      	str	r3, [r2, #8]

  // slave mode
  //TIM2->SMCR |= TIM_SMCR_SMS_2;						// SLAVE MODE: RESET
  TIM2->SMCR |= TIM_SMCR_SMS_0 | TIM_SMCR_SMS_2;	// SLAVE MODE: GATED
 8001162:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800116c:	f043 0305 	orr.w	r3, r3, #5
 8001170:	6093      	str	r3, [r2, #8]
  //TIM2->SMCR |= TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;	// SLAVE MODE: TRIGGER

#ifndef DISABLE_ALL_TIMERS
  HAL_TIM_Base_Start_IT(&htim2);
 8001172:	4811      	ldr	r0, [pc, #68]	; (80011b8 <main+0x12c>)
 8001174:	f005 f8b2 	bl	80062dc <HAL_TIM_Base_Start_IT>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);
 8001178:	4810      	ldr	r0, [pc, #64]	; (80011bc <main+0x130>)
 800117a:	f005 f881 	bl	8006280 <HAL_TIM_Base_Start>
  //HAL_TIM_Base_Start_IT(&htim16);
#endif	//DISABLE_ALL_TIMERS

  // TFT lib enable
  ILI9341_Init();
 800117e:	f006 fe57 	bl	8007e30 <ILI9341_Init>
/*	ILI9341_Fill_Screen(WHITE);

	ILI9341_Draw_Text("Initialising", 10, 10, BLACK, 1, WHITE);
	HAL_Delay(2000);
*/
	ILI9341_Fill_Screen(WHITE);
 8001182:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001186:	f006 ffff 	bl	8008188 <ILI9341_Fill_Screen>
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 800118a:	2003      	movs	r0, #3
 800118c:	f006 fdf2 	bl	8007d74 <ILI9341_Set_Rotation>
	HAL_TIM_Base_Start_IT(&htim15);
 8001190:	480b      	ldr	r0, [pc, #44]	; (80011c0 <main+0x134>)
 8001192:	f005 f8a3 	bl	80062dc <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001196:	e7fe      	b.n	8001196 <main+0x10a>
 8001198:	20000010 	.word	0x20000010
 800119c:	20000588 	.word	0x20000588
 80011a0:	200001f0 	.word	0x200001f0
 80011a4:	20000574 	.word	0x20000574
 80011a8:	20000720 	.word	0x20000720
 80011ac:	48000400 	.word	0x48000400
 80011b0:	48000800 	.word	0x48000800
 80011b4:	200007b8 	.word	0x200007b8
 80011b8:	20000850 	.word	0x20000850
 80011bc:	20000804 	.word	0x20000804
 80011c0:	2000076c 	.word	0x2000076c

080011c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b0a8      	sub	sp, #160	; 0xa0
 80011c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ca:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80011ce:	2238      	movs	r2, #56	; 0x38
 80011d0:	2100      	movs	r1, #0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f007 fa0c 	bl	80085f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011e8:	463b      	mov	r3, r7
 80011ea:	2254      	movs	r2, #84	; 0x54
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f007 f9fe 	bl	80085f0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80011f4:	2000      	movs	r0, #0
 80011f6:	f003 fb53 	bl	80048a0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80011fa:	2322      	movs	r3, #34	; 0x22
 80011fc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001202:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001204:	2340      	movs	r3, #64	; 0x40
 8001206:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001208:	2301      	movs	r3, #1
 800120a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800120e:	2302      	movs	r3, #2
 8001210:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001214:	2302      	movs	r3, #2
 8001216:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800121a:	2302      	movs	r3, #2
 800121c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8001220:	232a      	movs	r3, #42	; 0x2a
 8001222:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001226:	2302      	movs	r3, #2
 8001228:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 800122c:	2304      	movs	r3, #4
 800122e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001232:	2302      	movs	r3, #2
 8001234:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001238:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800123c:	4618      	mov	r0, r3
 800123e:	f003 fbd3 	bl	80049e8 <HAL_RCC_OscConfig>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001248:	f000 f82a 	bl	80012a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800124c:	230f      	movs	r3, #15
 800124e:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001250:	2303      	movs	r3, #3
 8001252:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001254:	2300      	movs	r3, #0
 8001256:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001258:	2300      	movs	r3, #0
 800125a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800125c:	2300      	movs	r3, #0
 800125e:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8001260:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001264:	2108      	movs	r1, #8
 8001266:	4618      	mov	r0, r3
 8001268:	f003 fed6 	bl	8005018 <HAL_RCC_ClockConfig>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001272:	f000 f815 	bl	80012a0 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 8001276:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800127a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 800127c:	2300      	movs	r3, #0
 800127e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001280:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001284:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001286:	463b      	mov	r3, r7
 8001288:	4618      	mov	r0, r3
 800128a:	f004 f8b5 	bl	80053f8 <HAL_RCCEx_PeriphCLKConfig>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001294:	f000 f804 	bl	80012a0 <Error_Handler>
  }
}
 8001298:	bf00      	nop
 800129a:	37a0      	adds	r7, #160	; 0xa0
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b083      	sub	sp, #12
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f043 0204 	orr.w	r2, r3, #4
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	601a      	str	r2, [r3, #0]
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
	...

080012d0 <LL_AHB2_GRP1_EnableClock>:
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80012d8:	4b08      	ldr	r3, [pc, #32]	; (80012fc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80012da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012dc:	4907      	ldr	r1, [pc, #28]	; (80012fc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80012e4:	4b05      	ldr	r3, [pc, #20]	; (80012fc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80012e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4013      	ands	r3, r2
 80012ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012ee:	68fb      	ldr	r3, [r7, #12]
}
 80012f0:	bf00      	nop
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	40021000 	.word	0x40021000

08001300 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 8001304:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001308:	f7ff ffe2 	bl	80012d0 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 800130c:	4802      	ldr	r0, [pc, #8]	; (8001318 <MX_RNG_Init+0x18>)
 800130e:	f7ff ffce 	bl	80012ae <LL_RNG_Enable>

}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	50060800 	.word	0x50060800

0800131c <MX_SPI3_Init>:
SPI_HandleTypeDef hspi3;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8001320:	4b1b      	ldr	r3, [pc, #108]	; (8001390 <MX_SPI3_Init+0x74>)
 8001322:	4a1c      	ldr	r2, [pc, #112]	; (8001394 <MX_SPI3_Init+0x78>)
 8001324:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001326:	4b1a      	ldr	r3, [pc, #104]	; (8001390 <MX_SPI3_Init+0x74>)
 8001328:	f44f 7282 	mov.w	r2, #260	; 0x104
 800132c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800132e:	4b18      	ldr	r3, [pc, #96]	; (8001390 <MX_SPI3_Init+0x74>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001334:	4b16      	ldr	r3, [pc, #88]	; (8001390 <MX_SPI3_Init+0x74>)
 8001336:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800133a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800133c:	4b14      	ldr	r3, [pc, #80]	; (8001390 <MX_SPI3_Init+0x74>)
 800133e:	2200      	movs	r2, #0
 8001340:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001342:	4b13      	ldr	r3, [pc, #76]	; (8001390 <MX_SPI3_Init+0x74>)
 8001344:	2200      	movs	r2, #0
 8001346:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001348:	4b11      	ldr	r3, [pc, #68]	; (8001390 <MX_SPI3_Init+0x74>)
 800134a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800134e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001350:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <MX_SPI3_Init+0x74>)
 8001352:	2210      	movs	r2, #16
 8001354:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001356:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <MX_SPI3_Init+0x74>)
 8001358:	2200      	movs	r2, #0
 800135a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800135c:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <MX_SPI3_Init+0x74>)
 800135e:	2200      	movs	r2, #0
 8001360:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <MX_SPI3_Init+0x74>)
 8001364:	2200      	movs	r2, #0
 8001366:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001368:	4b09      	ldr	r3, [pc, #36]	; (8001390 <MX_SPI3_Init+0x74>)
 800136a:	2207      	movs	r2, #7
 800136c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800136e:	4b08      	ldr	r3, [pc, #32]	; (8001390 <MX_SPI3_Init+0x74>)
 8001370:	2200      	movs	r2, #0
 8001372:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <MX_SPI3_Init+0x74>)
 8001376:	2208      	movs	r2, #8
 8001378:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800137a:	4805      	ldr	r0, [pc, #20]	; (8001390 <MX_SPI3_Init+0x74>)
 800137c:	f004 fa88 	bl	8005890 <HAL_SPI_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001386:	f7ff ff8b 	bl	80012a0 <Error_Handler>
  }

}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	2000065c 	.word	0x2000065c
 8001394:	40003c00 	.word	0x40003c00

08001398 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08a      	sub	sp, #40	; 0x28
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a2c      	ldr	r2, [pc, #176]	; (8001468 <HAL_SPI_MspInit+0xd0>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d151      	bne.n	800145e <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80013ba:	4b2c      	ldr	r3, [pc, #176]	; (800146c <HAL_SPI_MspInit+0xd4>)
 80013bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013be:	4a2b      	ldr	r2, [pc, #172]	; (800146c <HAL_SPI_MspInit+0xd4>)
 80013c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013c4:	6593      	str	r3, [r2, #88]	; 0x58
 80013c6:	4b29      	ldr	r3, [pc, #164]	; (800146c <HAL_SPI_MspInit+0xd4>)
 80013c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013ce:	613b      	str	r3, [r7, #16]
 80013d0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d2:	4b26      	ldr	r3, [pc, #152]	; (800146c <HAL_SPI_MspInit+0xd4>)
 80013d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d6:	4a25      	ldr	r2, [pc, #148]	; (800146c <HAL_SPI_MspInit+0xd4>)
 80013d8:	f043 0304 	orr.w	r3, r3, #4
 80013dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013de:	4b23      	ldr	r3, [pc, #140]	; (800146c <HAL_SPI_MspInit+0xd4>)
 80013e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e2:	f003 0304 	and.w	r3, r3, #4
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80013ea:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80013ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f0:	2302      	movs	r3, #2
 80013f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f8:	2300      	movs	r3, #0
 80013fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013fc:	2306      	movs	r3, #6
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	4619      	mov	r1, r3
 8001406:	481a      	ldr	r0, [pc, #104]	; (8001470 <HAL_SPI_MspInit+0xd8>)
 8001408:	f003 f898 	bl	800453c <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Channel4;
 800140c:	4b19      	ldr	r3, [pc, #100]	; (8001474 <HAL_SPI_MspInit+0xdc>)
 800140e:	4a1a      	ldr	r2, [pc, #104]	; (8001478 <HAL_SPI_MspInit+0xe0>)
 8001410:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8001412:	4b18      	ldr	r3, [pc, #96]	; (8001474 <HAL_SPI_MspInit+0xdc>)
 8001414:	220f      	movs	r2, #15
 8001416:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001418:	4b16      	ldr	r3, [pc, #88]	; (8001474 <HAL_SPI_MspInit+0xdc>)
 800141a:	2210      	movs	r2, #16
 800141c:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800141e:	4b15      	ldr	r3, [pc, #84]	; (8001474 <HAL_SPI_MspInit+0xdc>)
 8001420:	2200      	movs	r2, #0
 8001422:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001424:	4b13      	ldr	r3, [pc, #76]	; (8001474 <HAL_SPI_MspInit+0xdc>)
 8001426:	2280      	movs	r2, #128	; 0x80
 8001428:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800142a:	4b12      	ldr	r3, [pc, #72]	; (8001474 <HAL_SPI_MspInit+0xdc>)
 800142c:	2200      	movs	r2, #0
 800142e:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001430:	4b10      	ldr	r3, [pc, #64]	; (8001474 <HAL_SPI_MspInit+0xdc>)
 8001432:	2200      	movs	r2, #0
 8001434:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8001436:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <HAL_SPI_MspInit+0xdc>)
 8001438:	2200      	movs	r2, #0
 800143a:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800143c:	4b0d      	ldr	r3, [pc, #52]	; (8001474 <HAL_SPI_MspInit+0xdc>)
 800143e:	2200      	movs	r2, #0
 8001440:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001442:	480c      	ldr	r0, [pc, #48]	; (8001474 <HAL_SPI_MspInit+0xdc>)
 8001444:	f002 fe08 	bl	8004058 <HAL_DMA_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 800144e:	f7ff ff27 	bl	80012a0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a07      	ldr	r2, [pc, #28]	; (8001474 <HAL_SPI_MspInit+0xdc>)
 8001456:	655a      	str	r2, [r3, #84]	; 0x54
 8001458:	4a06      	ldr	r2, [pc, #24]	; (8001474 <HAL_SPI_MspInit+0xdc>)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800145e:	bf00      	nop
 8001460:	3728      	adds	r7, #40	; 0x28
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40003c00 	.word	0x40003c00
 800146c:	40021000 	.word	0x40021000
 8001470:	48000800 	.word	0x48000800
 8001474:	200006c0 	.word	0x200006c0
 8001478:	40020044 	.word	0x40020044

0800147c <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001480:	4b05      	ldr	r3, [pc, #20]	; (8001498 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	4a04      	ldr	r2, [pc, #16]	; (8001498 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8001486:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800148a:	6093      	str	r3, [r2, #8]
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	40007000 	.word	0x40007000

0800149c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a2:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <HAL_MspInit+0x44>)
 80014a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014a6:	4a0e      	ldr	r2, [pc, #56]	; (80014e0 <HAL_MspInit+0x44>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6613      	str	r3, [r2, #96]	; 0x60
 80014ae:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <HAL_MspInit+0x44>)
 80014b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	607b      	str	r3, [r7, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ba:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <HAL_MspInit+0x44>)
 80014bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014be:	4a08      	ldr	r2, [pc, #32]	; (80014e0 <HAL_MspInit+0x44>)
 80014c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c4:	6593      	str	r3, [r2, #88]	; 0x58
 80014c6:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <HAL_MspInit+0x44>)
 80014c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ce:	603b      	str	r3, [r7, #0]
 80014d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 80014d2:	f7ff ffd3 	bl	800147c <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40021000 	.word	0x40021000

080014e4 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80014ec:	4b07      	ldr	r3, [pc, #28]	; (800150c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80014ee:	695a      	ldr	r2, [r3, #20]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4013      	ands	r3, r2
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d101      	bne.n	80014fe <LL_EXTI_IsActiveFlag_0_31+0x1a>
 80014fa:	2301      	movs	r3, #1
 80014fc:	e000      	b.n	8001500 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	40010400 	.word	0x40010400

08001510 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8001518:	4a04      	ldr	r2, [pc, #16]	; (800152c <LL_EXTI_ClearFlag_0_31+0x1c>)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6153      	str	r3, [r2, #20]
}
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	40010400 	.word	0x40010400

08001530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001542:	e7fe      	b.n	8001542 <HardFault_Handler+0x4>

08001544 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001548:	e7fe      	b.n	8001548 <MemManage_Handler+0x4>

0800154a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800154e:	e7fe      	b.n	800154e <BusFault_Handler+0x4>

08001550 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001554:	e7fe      	b.n	8001554 <UsageFault_Handler+0x4>

08001556 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001584:	f000 fd26 	bl	8001fd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001588:	bf00      	nop
 800158a:	bd80      	pop	{r7, pc}

0800158c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

//	if(HAL_GPIO_ReadPin(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin))
//	{
		snprintf(control_pressed, sizeof(control_pressed), "BTN3");
 8001590:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <EXTI0_IRQHandler+0x2c>)
 8001592:	4a0a      	ldr	r2, [pc, #40]	; (80015bc <EXTI0_IRQHandler+0x30>)
 8001594:	6810      	ldr	r0, [r2, #0]
 8001596:	6018      	str	r0, [r3, #0]
 8001598:	7912      	ldrb	r2, [r2, #4]
 800159a:	711a      	strb	r2, [r3, #4]
 		printf("BTN3_EXTI0_Pin\n");
 800159c:	4808      	ldr	r0, [pc, #32]	; (80015c0 <EXTI0_IRQHandler+0x34>)
 800159e:	f007 f8a3 	bl	80086e8 <puts>
//	}

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 80015a2:	2001      	movs	r0, #1
 80015a4:	f7ff ff9e 	bl	80014e4 <LL_EXTI_IsActiveFlag_0_31>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d002      	beq.n	80015b4 <EXTI0_IRQHandler+0x28>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 80015ae:	2001      	movs	r0, #1
 80015b0:	f7ff ffae 	bl	8001510 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000478 	.word	0x20000478
 80015bc:	080094b4 	.word	0x080094b4
 80015c0:	080094bc 	.word	0x080094bc

080015c4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

//	if(HAL_GPIO_ReadPin(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin))
//	{
		snprintf(control_pressed, sizeof(control_pressed), "BTN4");
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <EXTI1_IRQHandler+0x2c>)
 80015ca:	4a0a      	ldr	r2, [pc, #40]	; (80015f4 <EXTI1_IRQHandler+0x30>)
 80015cc:	6810      	ldr	r0, [r2, #0]
 80015ce:	6018      	str	r0, [r3, #0]
 80015d0:	7912      	ldrb	r2, [r2, #4]
 80015d2:	711a      	strb	r2, [r3, #4]
		printf("BTN4_EXTI1_Pin\n");
 80015d4:	4808      	ldr	r0, [pc, #32]	; (80015f8 <EXTI1_IRQHandler+0x34>)
 80015d6:	f007 f887 	bl	80086e8 <puts>
//	}

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 80015da:	2002      	movs	r0, #2
 80015dc:	f7ff ff82 	bl	80014e4 <LL_EXTI_IsActiveFlag_0_31>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d002      	beq.n	80015ec <EXTI1_IRQHandler+0x28>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 80015e6:	2002      	movs	r0, #2
 80015e8:	f7ff ff92 	bl	8001510 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000478 	.word	0x20000478
 80015f4:	080094cc 	.word	0x080094cc
 80015f8:	080094d4 	.word	0x080094d4

080015fc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */


		snprintf(control_pressed, sizeof(control_pressed), "ENC_BTN");
 8001600:	4a09      	ldr	r2, [pc, #36]	; (8001628 <EXTI2_IRQHandler+0x2c>)
 8001602:	4b0a      	ldr	r3, [pc, #40]	; (800162c <EXTI2_IRQHandler+0x30>)
 8001604:	cb03      	ldmia	r3!, {r0, r1}
 8001606:	6010      	str	r0, [r2, #0]
 8001608:	6051      	str	r1, [r2, #4]
		printf("ENC_EXTI2_Pin\n");
 800160a:	4809      	ldr	r0, [pc, #36]	; (8001630 <EXTI2_IRQHandler+0x34>)
 800160c:	f007 f86c 	bl	80086e8 <puts>


  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8001610:	2004      	movs	r0, #4
 8001612:	f7ff ff67 	bl	80014e4 <LL_EXTI_IsActiveFlag_0_31>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d002      	beq.n	8001622 <EXTI2_IRQHandler+0x26>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 800161c:	2004      	movs	r0, #4
 800161e:	f7ff ff77 	bl	8001510 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000478 	.word	0x20000478
 800162c:	080094e4 	.word	0x080094e4
 8001630:	080094ec 	.word	0x080094ec

08001634 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	//printf("Test\n");
	//printf("%lu\n", trigger_input[0]);
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001638:	4802      	ldr	r0, [pc, #8]	; (8001644 <DMA1_Channel1_IRQHandler+0x10>)
 800163a:	f002 fe30 	bl	800429e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	200004f0 	.word	0x200004f0

08001648 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800164c:	4802      	ldr	r0, [pc, #8]	; (8001658 <DMA1_Channel2_IRQHandler+0x10>)
 800164e:	f002 fe26 	bl	800429e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	2000059c 	.word	0x2000059c

0800165c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8001660:	4802      	ldr	r0, [pc, #8]	; (800166c <DMA1_Channel3_IRQHandler+0x10>)
 8001662:	f002 fe1c 	bl	800429e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	200005fc 	.word	0x200005fc

08001670 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001674:	4802      	ldr	r0, [pc, #8]	; (8001680 <DMA1_Channel4_IRQHandler+0x10>)
 8001676:	f002 fe12 	bl	800429e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	200006c0 	.word	0x200006c0

08001684 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	dm_update_display();
 8001688:	f7fe fe1a 	bl	80002c0 <dm_update_display>
  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800168c:	4803      	ldr	r0, [pc, #12]	; (800169c <TIM1_BRK_TIM15_IRQHandler+0x18>)
 800168e:	f004 ff01 	bl	8006494 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8001692:	4803      	ldr	r0, [pc, #12]	; (80016a0 <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 8001694:	f004 fefe 	bl	8006494 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000804 	.word	0x20000804
 80016a0:	2000076c 	.word	0x2000076c

080016a4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	snprintf(control_pressed, sizeof(control_pressed), " ");
 80016a8:	4a05      	ldr	r2, [pc, #20]	; (80016c0 <TIM1_UP_TIM16_IRQHandler+0x1c>)
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <TIM1_UP_TIM16_IRQHandler+0x20>)
 80016ac:	881b      	ldrh	r3, [r3, #0]
 80016ae:	8013      	strh	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016b0:	4805      	ldr	r0, [pc, #20]	; (80016c8 <TIM1_UP_TIM16_IRQHandler+0x24>)
 80016b2:	f004 feef 	bl	8006494 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80016b6:	4805      	ldr	r0, [pc, #20]	; (80016cc <TIM1_UP_TIM16_IRQHandler+0x28>)
 80016b8:	f004 feec 	bl	8006494 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000478 	.word	0x20000478
 80016c4:	080094fc 	.word	0x080094fc
 80016c8:	20000804 	.word	0x20000804
 80016cc:	2000089c 	.word	0x2000089c

080016d0 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	update_dc_bias_sweep();
 80016d4:	f7ff f938 	bl	8000948 <update_dc_bias_sweep>
	if((TIM1->CNT < last_enc_value) || (TIM1->CNT > last_enc_value))
 80016d8:	4b11      	ldr	r3, [pc, #68]	; (8001720 <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 80016da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016dc:	4a11      	ldr	r2, [pc, #68]	; (8001724 <TIM1_TRG_COM_TIM17_IRQHandler+0x54>)
 80016de:	8812      	ldrh	r2, [r2, #0]
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d305      	bcc.n	80016f0 <TIM1_TRG_COM_TIM17_IRQHandler+0x20>
 80016e4:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 80016e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e8:	4a0e      	ldr	r2, [pc, #56]	; (8001724 <TIM1_TRG_COM_TIM17_IRQHandler+0x54>)
 80016ea:	8812      	ldrh	r2, [r2, #0]
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d90a      	bls.n	8001706 <TIM1_TRG_COM_TIM17_IRQHandler+0x36>
	{
		printf("%lu\n",TIM1->CNT);
 80016f0:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 80016f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f4:	4619      	mov	r1, r3
 80016f6:	480c      	ldr	r0, [pc, #48]	; (8001728 <TIM1_TRG_COM_TIM17_IRQHandler+0x58>)
 80016f8:	f006 ff82 	bl	8008600 <iprintf>
		new_enc_value = TIM1->CNT;
 80016fc:	4b08      	ldr	r3, [pc, #32]	; (8001720 <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 80016fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001700:	b29a      	uxth	r2, r3
 8001702:	4b0a      	ldr	r3, [pc, #40]	; (800172c <TIM1_TRG_COM_TIM17_IRQHandler+0x5c>)
 8001704:	801a      	strh	r2, [r3, #0]
	}


	last_enc_value = TIM1->CNT;
 8001706:	4b06      	ldr	r3, [pc, #24]	; (8001720 <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 8001708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170a:	b29a      	uxth	r2, r3
 800170c:	4b05      	ldr	r3, [pc, #20]	; (8001724 <TIM1_TRG_COM_TIM17_IRQHandler+0x54>)
 800170e:	801a      	strh	r2, [r3, #0]


  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001710:	4807      	ldr	r0, [pc, #28]	; (8001730 <TIM1_TRG_COM_TIM17_IRQHandler+0x60>)
 8001712:	f004 febf 	bl	8006494 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8001716:	4807      	ldr	r0, [pc, #28]	; (8001734 <TIM1_TRG_COM_TIM17_IRQHandler+0x64>)
 8001718:	f004 febc 	bl	8006494 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800171c:	bf00      	nop
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40012c00 	.word	0x40012c00
 8001724:	20000468 	.word	0x20000468
 8001728:	08009500 	.word	0x08009500
 800172c:	2000046a 	.word	0x2000046a
 8001730:	20000804 	.word	0x20000804
 8001734:	200007b8 	.word	0x200007b8

08001738 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800173c:	4802      	ldr	r0, [pc, #8]	; (8001748 <TIM2_IRQHandler+0x10>)
 800173e:	f004 fea9 	bl	8006494 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000850 	.word	0x20000850

0800174c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	if(HAL_GPIO_ReadPin(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin))
 8001750:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001754:	481b      	ldr	r0, [pc, #108]	; (80017c4 <EXTI15_10_IRQHandler+0x78>)
 8001756:	f003 f873 	bl	8004840 <HAL_GPIO_ReadPin>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d008      	beq.n	8001772 <EXTI15_10_IRQHandler+0x26>
	{
		snprintf(control_pressed, sizeof(control_pressed), "BTN1");
 8001760:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <EXTI15_10_IRQHandler+0x7c>)
 8001762:	4a1a      	ldr	r2, [pc, #104]	; (80017cc <EXTI15_10_IRQHandler+0x80>)
 8001764:	6810      	ldr	r0, [r2, #0]
 8001766:	6018      	str	r0, [r3, #0]
 8001768:	7912      	ldrb	r2, [r2, #4]
 800176a:	711a      	strb	r2, [r3, #4]
		printf("BTN1_EXTI14_Pin\n");
 800176c:	4818      	ldr	r0, [pc, #96]	; (80017d0 <EXTI15_10_IRQHandler+0x84>)
 800176e:	f006 ffbb 	bl	80086e8 <puts>
	}
	if(HAL_GPIO_ReadPin(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin))
 8001772:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001776:	4813      	ldr	r0, [pc, #76]	; (80017c4 <EXTI15_10_IRQHandler+0x78>)
 8001778:	f003 f862 	bl	8004840 <HAL_GPIO_ReadPin>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d008      	beq.n	8001794 <EXTI15_10_IRQHandler+0x48>
	{
		snprintf(control_pressed, sizeof(control_pressed), "BTN2");
 8001782:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <EXTI15_10_IRQHandler+0x7c>)
 8001784:	4a13      	ldr	r2, [pc, #76]	; (80017d4 <EXTI15_10_IRQHandler+0x88>)
 8001786:	6810      	ldr	r0, [r2, #0]
 8001788:	6018      	str	r0, [r3, #0]
 800178a:	7912      	ldrb	r2, [r2, #4]
 800178c:	711a      	strb	r2, [r3, #4]
		printf("BTN2_EXTI15_Pin\n");
 800178e:	4812      	ldr	r0, [pc, #72]	; (80017d8 <EXTI15_10_IRQHandler+0x8c>)
 8001790:	f006 ffaa 	bl	80086e8 <puts>
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8001794:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001798:	f7ff fea4 	bl	80014e4 <LL_EXTI_IsActiveFlag_0_31>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <EXTI15_10_IRQHandler+0x5e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 80017a2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80017a6:	f7ff feb3 	bl	8001510 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 80017aa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80017ae:	f7ff fe99 	bl	80014e4 <LL_EXTI_IsActiveFlag_0_31>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d003      	beq.n	80017c0 <EXTI15_10_IRQHandler+0x74>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 80017b8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80017bc:	f7ff fea8 	bl	8001510 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	48000800 	.word	0x48000800
 80017c8:	20000478 	.word	0x20000478
 80017cc:	08009508 	.word	0x08009508
 80017d0:	08009510 	.word	0x08009510
 80017d4:	08009520 	.word	0x08009520
 80017d8:	08009528 	.word	0x08009528

080017dc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]
 80017ec:	e00a      	b.n	8001804 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017ee:	f3af 8000 	nop.w
 80017f2:	4601      	mov	r1, r0
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	1c5a      	adds	r2, r3, #1
 80017f8:	60ba      	str	r2, [r7, #8]
 80017fa:	b2ca      	uxtb	r2, r1
 80017fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	3301      	adds	r3, #1
 8001802:	617b      	str	r3, [r7, #20]
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	429a      	cmp	r2, r3
 800180a:	dbf0      	blt.n	80017ee <_read+0x12>
	}

return len;
 800180c:	687b      	ldr	r3, [r7, #4]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3718      	adds	r7, #24
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001816:	b480      	push	{r7}
 8001818:	b083      	sub	sp, #12
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
	return -1;
 800181e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001822:	4618      	mov	r0, r3
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
 8001836:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800183e:	605a      	str	r2, [r3, #4]
	return 0;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <_isatty>:

int _isatty(int file)
{
 800184e:	b480      	push	{r7}
 8001850:	b083      	sub	sp, #12
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
	return 1;
 8001856:	2301      	movs	r3, #1
}
 8001858:	4618      	mov	r0, r3
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
	return 0;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
	...

08001880 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001888:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <_sbrk+0x50>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d102      	bne.n	8001896 <_sbrk+0x16>
		heap_end = &end;
 8001890:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <_sbrk+0x50>)
 8001892:	4a10      	ldr	r2, [pc, #64]	; (80018d4 <_sbrk+0x54>)
 8001894:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001896:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <_sbrk+0x50>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800189c:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <_sbrk+0x50>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4413      	add	r3, r2
 80018a4:	466a      	mov	r2, sp
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d907      	bls.n	80018ba <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80018aa:	f006 fe77 	bl	800859c <__errno>
 80018ae:	4602      	mov	r2, r0
 80018b0:	230c      	movs	r3, #12
 80018b2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80018b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018b8:	e006      	b.n	80018c8 <_sbrk+0x48>
	}

	heap_end += incr;
 80018ba:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <_sbrk+0x50>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	4a03      	ldr	r2, [pc, #12]	; (80018d0 <_sbrk+0x50>)
 80018c4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80018c6:	68fb      	ldr	r3, [r7, #12]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	2000046c 	.word	0x2000046c
 80018d4:	200008f0 	.word	0x200008f0

080018d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018dc:	4b08      	ldr	r3, [pc, #32]	; (8001900 <SystemInit+0x28>)
 80018de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018e2:	4a07      	ldr	r2, [pc, #28]	; (8001900 <SystemInit+0x28>)
 80018e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018ec:	4b04      	ldr	r3, [pc, #16]	; (8001900 <SystemInit+0x28>)
 80018ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018f2:	609a      	str	r2, [r3, #8]
#endif
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	e000ed00 	.word	0xe000ed00

08001904 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b09a      	sub	sp, #104	; 0x68
 8001908:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800190a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800190e:	2224      	movs	r2, #36	; 0x24
 8001910:	2100      	movs	r1, #0
 8001912:	4618      	mov	r0, r3
 8001914:	f006 fe6c 	bl	80085f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001918:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001924:	1d3b      	adds	r3, r7, #4
 8001926:	2234      	movs	r2, #52	; 0x34
 8001928:	2100      	movs	r1, #0
 800192a:	4618      	mov	r0, r3
 800192c:	f006 fe60 	bl	80085f0 <memset>

  htim1.Instance = TIM1;
 8001930:	4b2a      	ldr	r3, [pc, #168]	; (80019dc <MX_TIM1_Init+0xd8>)
 8001932:	4a2b      	ldr	r2, [pc, #172]	; (80019e0 <MX_TIM1_Init+0xdc>)
 8001934:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001936:	4b29      	ldr	r3, [pc, #164]	; (80019dc <MX_TIM1_Init+0xd8>)
 8001938:	2200      	movs	r2, #0
 800193a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 800193c:	4b27      	ldr	r3, [pc, #156]	; (80019dc <MX_TIM1_Init+0xd8>)
 800193e:	2240      	movs	r2, #64	; 0x40
 8001940:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 8001942:	4b26      	ldr	r3, [pc, #152]	; (80019dc <MX_TIM1_Init+0xd8>)
 8001944:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001948:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800194a:	4b24      	ldr	r3, [pc, #144]	; (80019dc <MX_TIM1_Init+0xd8>)
 800194c:	2200      	movs	r2, #0
 800194e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001950:	4b22      	ldr	r3, [pc, #136]	; (80019dc <MX_TIM1_Init+0xd8>)
 8001952:	2200      	movs	r2, #0
 8001954:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001956:	4b21      	ldr	r3, [pc, #132]	; (80019dc <MX_TIM1_Init+0xd8>)
 8001958:	2200      	movs	r2, #0
 800195a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800195c:	2303      	movs	r3, #3
 800195e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001960:	2300      	movs	r3, #0
 8001962:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001964:	2301      	movs	r3, #1
 8001966:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001968:	2300      	movs	r3, #0
 800196a:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 800196c:	2300      	movs	r3, #0
 800196e:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001970:	2300      	movs	r3, #0
 8001972:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001974:	2301      	movs	r3, #1
 8001976:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001978:	2300      	movs	r3, #0
 800197a:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 800197c:	2300      	movs	r3, #0
 800197e:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001980:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001984:	4619      	mov	r1, r3
 8001986:	4815      	ldr	r0, [pc, #84]	; (80019dc <MX_TIM1_Init+0xd8>)
 8001988:	f004 fcde 	bl	8006348 <HAL_TIM_Encoder_Init>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001992:	f7ff fc85 	bl	80012a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001996:	2300      	movs	r3, #0
 8001998:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800199a:	2300      	movs	r3, #0
 800199c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800199e:	2300      	movs	r3, #0
 80019a0:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019a6:	4619      	mov	r1, r3
 80019a8:	480c      	ldr	r0, [pc, #48]	; (80019dc <MX_TIM1_Init+0xd8>)
 80019aa:	f005 fa57 	bl	8006e5c <HAL_TIMEx_MasterConfigSynchronization>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80019b4:	f7ff fc74 	bl	80012a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80019b8:	2300      	movs	r3, #0
 80019ba:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80019bc:	2300      	movs	r3, #0
 80019be:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019c0:	1d3b      	adds	r3, r7, #4
 80019c2:	4619      	mov	r1, r3
 80019c4:	4805      	ldr	r0, [pc, #20]	; (80019dc <MX_TIM1_Init+0xd8>)
 80019c6:	f005 fadf 	bl	8006f88 <HAL_TIMEx_ConfigBreakDeadTime>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 80019d0:	f7ff fc66 	bl	80012a0 <Error_Handler>
  }

}
 80019d4:	bf00      	nop
 80019d6:	3768      	adds	r7, #104	; 0x68
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20000804 	.word	0x20000804
 80019e0:	40012c00 	.word	0x40012c00

080019e4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08c      	sub	sp, #48	; 0x30
 80019e8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ea:	f107 0320 	add.w	r3, r7, #32
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	605a      	str	r2, [r3, #4]
 80019f4:	609a      	str	r2, [r3, #8]
 80019f6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80019f8:	f107 030c 	add.w	r3, r7, #12
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a08:	463b      	mov	r3, r7
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	605a      	str	r2, [r3, #4]
 8001a10:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8001a12:	4b28      	ldr	r3, [pc, #160]	; (8001ab4 <MX_TIM2_Init+0xd0>)
 8001a14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a18:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2047;
 8001a1a:	4b26      	ldr	r3, [pc, #152]	; (8001ab4 <MX_TIM2_Init+0xd0>)
 8001a1c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001a20:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a22:	4b24      	ldr	r3, [pc, #144]	; (8001ab4 <MX_TIM2_Init+0xd0>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024;
 8001a28:	4b22      	ldr	r3, [pc, #136]	; (8001ab4 <MX_TIM2_Init+0xd0>)
 8001a2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a2e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a30:	4b20      	ldr	r3, [pc, #128]	; (8001ab4 <MX_TIM2_Init+0xd0>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a36:	4b1f      	ldr	r3, [pc, #124]	; (8001ab4 <MX_TIM2_Init+0xd0>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a3c:	481d      	ldr	r0, [pc, #116]	; (8001ab4 <MX_TIM2_Init+0xd0>)
 8001a3e:	f004 fbc7 	bl	80061d0 <HAL_TIM_Base_Init>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001a48:	f7ff fc2a 	bl	80012a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a50:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a52:	f107 0320 	add.w	r3, r7, #32
 8001a56:	4619      	mov	r1, r3
 8001a58:	4816      	ldr	r0, [pc, #88]	; (8001ab4 <MX_TIM2_Init+0xd0>)
 8001a5a:	f004 fe9b 	bl	8006794 <HAL_TIM_ConfigClockSource>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001a64:	f7ff fc1c 	bl	80012a0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8001a68:	2305      	movs	r3, #5
 8001a6a:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001a6c:	2350      	movs	r3, #80	; 0x50
 8001a6e:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001a78:	f107 030c 	add.w	r3, r7, #12
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	480d      	ldr	r0, [pc, #52]	; (8001ab4 <MX_TIM2_Init+0xd0>)
 8001a80:	f004 ff78 	bl	8006974 <HAL_TIM_SlaveConfigSynchro>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8001a8a:	f7ff fc09 	bl	80012a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a92:	2300      	movs	r3, #0
 8001a94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a96:	463b      	mov	r3, r7
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4806      	ldr	r0, [pc, #24]	; (8001ab4 <MX_TIM2_Init+0xd0>)
 8001a9c:	f005 f9de 	bl	8006e5c <HAL_TIMEx_MasterConfigSynchronization>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8001aa6:	f7ff fbfb 	bl	80012a0 <Error_Handler>
  }

}
 8001aaa:	bf00      	nop
 8001aac:	3730      	adds	r7, #48	; 0x30
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000850 	.word	0x20000850

08001ab8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b094      	sub	sp, #80	; 0x50
 8001abc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001abe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001acc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ad8:	463b      	mov	r3, r7
 8001ada:	2234      	movs	r2, #52	; 0x34
 8001adc:	2100      	movs	r1, #0
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f006 fd86 	bl	80085f0 <memset>

  htim8.Instance = TIM8;
 8001ae4:	4b26      	ldr	r3, [pc, #152]	; (8001b80 <MX_TIM8_Init+0xc8>)
 8001ae6:	4a27      	ldr	r2, [pc, #156]	; (8001b84 <MX_TIM8_Init+0xcc>)
 8001ae8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001aea:	4b25      	ldr	r3, [pc, #148]	; (8001b80 <MX_TIM8_Init+0xc8>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af0:	4b23      	ldr	r3, [pc, #140]	; (8001b80 <MX_TIM8_Init+0xc8>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 8001af6:	4b22      	ldr	r3, [pc, #136]	; (8001b80 <MX_TIM8_Init+0xc8>)
 8001af8:	2201      	movs	r2, #1
 8001afa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001afc:	4b20      	ldr	r3, [pc, #128]	; (8001b80 <MX_TIM8_Init+0xc8>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001b02:	4b1f      	ldr	r3, [pc, #124]	; (8001b80 <MX_TIM8_Init+0xc8>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b08:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <MX_TIM8_Init+0xc8>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001b0e:	481c      	ldr	r0, [pc, #112]	; (8001b80 <MX_TIM8_Init+0xc8>)
 8001b10:	f004 fb5e 	bl	80061d0 <HAL_TIM_Base_Init>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8001b1a:	f7ff fbc1 	bl	80012a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b22:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001b24:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4815      	ldr	r0, [pc, #84]	; (8001b80 <MX_TIM8_Init+0xc8>)
 8001b2c:	f004 fe32 	bl	8006794 <HAL_TIM_ConfigClockSource>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001b36:	f7ff fbb3 	bl	80012a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b3a:	2320      	movs	r3, #32
 8001b3c:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b42:	2300      	movs	r3, #0
 8001b44:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001b46:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	480c      	ldr	r0, [pc, #48]	; (8001b80 <MX_TIM8_Init+0xc8>)
 8001b4e:	f005 f985 	bl	8006e5c <HAL_TIMEx_MasterConfigSynchronization>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001b58:	f7ff fba2 	bl	80012a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001b60:	2300      	movs	r3, #0
 8001b62:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001b64:	463b      	mov	r3, r7
 8001b66:	4619      	mov	r1, r3
 8001b68:	4805      	ldr	r0, [pc, #20]	; (8001b80 <MX_TIM8_Init+0xc8>)
 8001b6a:	f005 fa0d 	bl	8006f88 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8001b74:	f7ff fb94 	bl	80012a0 <Error_Handler>
  }

}
 8001b78:	bf00      	nop
 8001b7a:	3750      	adds	r7, #80	; 0x50
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20000720 	.word	0x20000720
 8001b84:	40013400 	.word	0x40013400

08001b88 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b088      	sub	sp, #32
 8001b8c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b8e:	f107 0310 	add.w	r3, r7, #16
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	609a      	str	r2, [r3, #8]
 8001b9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b9c:	1d3b      	adds	r3, r7, #4
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	605a      	str	r2, [r3, #4]
 8001ba4:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 8001ba6:	4b1f      	ldr	r3, [pc, #124]	; (8001c24 <MX_TIM15_Init+0x9c>)
 8001ba8:	4a1f      	ldr	r2, [pc, #124]	; (8001c28 <MX_TIM15_Init+0xa0>)
 8001baa:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 8001bac:	4b1d      	ldr	r3, [pc, #116]	; (8001c24 <MX_TIM15_Init+0x9c>)
 8001bae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bb2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb4:	4b1b      	ldr	r3, [pc, #108]	; (8001c24 <MX_TIM15_Init+0x9c>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 8001bba:	4b1a      	ldr	r3, [pc, #104]	; (8001c24 <MX_TIM15_Init+0x9c>)
 8001bbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bc0:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc2:	4b18      	ldr	r3, [pc, #96]	; (8001c24 <MX_TIM15_Init+0x9c>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001bc8:	4b16      	ldr	r3, [pc, #88]	; (8001c24 <MX_TIM15_Init+0x9c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bce:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <MX_TIM15_Init+0x9c>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001bd4:	4813      	ldr	r0, [pc, #76]	; (8001c24 <MX_TIM15_Init+0x9c>)
 8001bd6:	f004 fafb 	bl	80061d0 <HAL_TIM_Base_Init>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8001be0:	f7ff fb5e 	bl	80012a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001be4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001be8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001bea:	f107 0310 	add.w	r3, r7, #16
 8001bee:	4619      	mov	r1, r3
 8001bf0:	480c      	ldr	r0, [pc, #48]	; (8001c24 <MX_TIM15_Init+0x9c>)
 8001bf2:	f004 fdcf 	bl	8006794 <HAL_TIM_ConfigClockSource>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8001bfc:	f7ff fb50 	bl	80012a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c00:	2300      	movs	r3, #0
 8001c02:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c04:	2300      	movs	r3, #0
 8001c06:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001c08:	1d3b      	adds	r3, r7, #4
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4805      	ldr	r0, [pc, #20]	; (8001c24 <MX_TIM15_Init+0x9c>)
 8001c0e:	f005 f925 	bl	8006e5c <HAL_TIMEx_MasterConfigSynchronization>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8001c18:	f7ff fb42 	bl	80012a0 <Error_Handler>
  }

}
 8001c1c:	bf00      	nop
 8001c1e:	3720      	adds	r7, #32
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	2000076c 	.word	0x2000076c
 8001c28:	40014000 	.word	0x40014000

08001c2c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8001c30:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <MX_TIM16_Init+0x44>)
 8001c32:	4a10      	ldr	r2, [pc, #64]	; (8001c74 <MX_TIM16_Init+0x48>)
 8001c34:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001c36:	4b0e      	ldr	r3, [pc, #56]	; (8001c70 <MX_TIM16_Init+0x44>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <MX_TIM16_Init+0x44>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 8191;
 8001c42:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <MX_TIM16_Init+0x44>)
 8001c44:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8001c48:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c4a:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <MX_TIM16_Init+0x44>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001c50:	4b07      	ldr	r3, [pc, #28]	; (8001c70 <MX_TIM16_Init+0x44>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c56:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <MX_TIM16_Init+0x44>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001c5c:	4804      	ldr	r0, [pc, #16]	; (8001c70 <MX_TIM16_Init+0x44>)
 8001c5e:	f004 fab7 	bl	80061d0 <HAL_TIM_Base_Init>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001c68:	f7ff fb1a 	bl	80012a0 <Error_Handler>
  }

}
 8001c6c:	bf00      	nop
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	2000089c 	.word	0x2000089c
 8001c74:	40014400 	.word	0x40014400

08001c78 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8001c7c:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <MX_TIM17_Init+0x44>)
 8001c7e:	4a10      	ldr	r2, [pc, #64]	; (8001cc0 <MX_TIM17_Init+0x48>)
 8001c80:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1023;
 8001c82:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <MX_TIM17_Init+0x44>)
 8001c84:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001c88:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c8a:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <MX_TIM17_Init+0x44>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 64;
 8001c90:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <MX_TIM17_Init+0x44>)
 8001c92:	2240      	movs	r2, #64	; 0x40
 8001c94:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c96:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <MX_TIM17_Init+0x44>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001c9c:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <MX_TIM17_Init+0x44>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <MX_TIM17_Init+0x44>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001ca8:	4804      	ldr	r0, [pc, #16]	; (8001cbc <MX_TIM17_Init+0x44>)
 8001caa:	f004 fa91 	bl	80061d0 <HAL_TIM_Base_Init>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8001cb4:	f7ff faf4 	bl	80012a0 <Error_Handler>
  }

}
 8001cb8:	bf00      	nop
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	200007b8 	.word	0x200007b8
 8001cc0:	40014800 	.word	0x40014800

08001cc4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08a      	sub	sp, #40	; 0x28
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a23      	ldr	r2, [pc, #140]	; (8001d70 <HAL_TIM_Encoder_MspInit+0xac>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d13f      	bne.n	8001d66 <HAL_TIM_Encoder_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ce6:	4b23      	ldr	r3, [pc, #140]	; (8001d74 <HAL_TIM_Encoder_MspInit+0xb0>)
 8001ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cea:	4a22      	ldr	r2, [pc, #136]	; (8001d74 <HAL_TIM_Encoder_MspInit+0xb0>)
 8001cec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cf0:	6613      	str	r3, [r2, #96]	; 0x60
 8001cf2:	4b20      	ldr	r3, [pc, #128]	; (8001d74 <HAL_TIM_Encoder_MspInit+0xb0>)
 8001cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cfe:	4b1d      	ldr	r3, [pc, #116]	; (8001d74 <HAL_TIM_Encoder_MspInit+0xb0>)
 8001d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d02:	4a1c      	ldr	r2, [pc, #112]	; (8001d74 <HAL_TIM_Encoder_MspInit+0xb0>)
 8001d04:	f043 0304 	orr.w	r3, r3, #4
 8001d08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d0a:	4b1a      	ldr	r3, [pc, #104]	; (8001d74 <HAL_TIM_Encoder_MspInit+0xb0>)
 8001d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d16:	2303      	movs	r3, #3
 8001d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d22:	2300      	movs	r3, #0
 8001d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001d26:	2302      	movs	r3, #2
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d2a:	f107 0314 	add.w	r3, r7, #20
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4811      	ldr	r0, [pc, #68]	; (8001d78 <HAL_TIM_Encoder_MspInit+0xb4>)
 8001d32:	f002 fc03 	bl	800453c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 1, 0);
 8001d36:	2200      	movs	r2, #0
 8001d38:	2101      	movs	r1, #1
 8001d3a:	2018      	movs	r0, #24
 8001d3c:	f001 fda5 	bl	800388a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001d40:	2018      	movs	r0, #24
 8001d42:	f001 fdbc 	bl	80038be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8001d46:	2200      	movs	r2, #0
 8001d48:	2101      	movs	r1, #1
 8001d4a:	2019      	movs	r0, #25
 8001d4c:	f001 fd9d 	bl	800388a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001d50:	2019      	movs	r0, #25
 8001d52:	f001 fdb4 	bl	80038be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001d56:	2200      	movs	r2, #0
 8001d58:	2100      	movs	r1, #0
 8001d5a:	201a      	movs	r0, #26
 8001d5c:	f001 fd95 	bl	800388a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001d60:	201a      	movs	r0, #26
 8001d62:	f001 fdac 	bl	80038be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001d66:	bf00      	nop
 8001d68:	3728      	adds	r7, #40	; 0x28
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40012c00 	.word	0x40012c00
 8001d74:	40021000 	.word	0x40021000
 8001d78:	48000800 	.word	0x48000800

08001d7c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08e      	sub	sp, #56	; 0x38
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d9c:	d131      	bne.n	8001e02 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d9e:	4b4a      	ldr	r3, [pc, #296]	; (8001ec8 <HAL_TIM_Base_MspInit+0x14c>)
 8001da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da2:	4a49      	ldr	r2, [pc, #292]	; (8001ec8 <HAL_TIM_Base_MspInit+0x14c>)
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	6593      	str	r3, [r2, #88]	; 0x58
 8001daa:	4b47      	ldr	r3, [pc, #284]	; (8001ec8 <HAL_TIM_Base_MspInit+0x14c>)
 8001dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	623b      	str	r3, [r7, #32]
 8001db4:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db6:	4b44      	ldr	r3, [pc, #272]	; (8001ec8 <HAL_TIM_Base_MspInit+0x14c>)
 8001db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dba:	4a43      	ldr	r2, [pc, #268]	; (8001ec8 <HAL_TIM_Base_MspInit+0x14c>)
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dc2:	4b41      	ldr	r3, [pc, #260]	; (8001ec8 <HAL_TIM_Base_MspInit+0x14c>)
 8001dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	61fb      	str	r3, [r7, #28]
 8001dcc:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001dde:	2301      	movs	r3, #1
 8001de0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de6:	4619      	mov	r1, r3
 8001de8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dec:	f002 fba6 	bl	800453c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001df0:	2200      	movs	r2, #0
 8001df2:	2101      	movs	r1, #1
 8001df4:	201c      	movs	r0, #28
 8001df6:	f001 fd48 	bl	800388a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001dfa:	201c      	movs	r0, #28
 8001dfc:	f001 fd5f 	bl	80038be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001e00:	e05e      	b.n	8001ec0 <HAL_TIM_Base_MspInit+0x144>
  else if(tim_baseHandle->Instance==TIM8)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a31      	ldr	r2, [pc, #196]	; (8001ecc <HAL_TIM_Base_MspInit+0x150>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d10c      	bne.n	8001e26 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001e0c:	4b2e      	ldr	r3, [pc, #184]	; (8001ec8 <HAL_TIM_Base_MspInit+0x14c>)
 8001e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e10:	4a2d      	ldr	r2, [pc, #180]	; (8001ec8 <HAL_TIM_Base_MspInit+0x14c>)
 8001e12:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e16:	6613      	str	r3, [r2, #96]	; 0x60
 8001e18:	4b2b      	ldr	r3, [pc, #172]	; (8001ec8 <HAL_TIM_Base_MspInit+0x14c>)
 8001e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e20:	61bb      	str	r3, [r7, #24]
 8001e22:	69bb      	ldr	r3, [r7, #24]
}
 8001e24:	e04c      	b.n	8001ec0 <HAL_TIM_Base_MspInit+0x144>
  else if(tim_baseHandle->Instance==TIM15)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a29      	ldr	r2, [pc, #164]	; (8001ed0 <HAL_TIM_Base_MspInit+0x154>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d114      	bne.n	8001e5a <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001e30:	4b25      	ldr	r3, [pc, #148]	; (8001ec8 <HAL_TIM_Base_MspInit+0x14c>)
 8001e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e34:	4a24      	ldr	r2, [pc, #144]	; (8001ec8 <HAL_TIM_Base_MspInit+0x14c>)
 8001e36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e3a:	6613      	str	r3, [r2, #96]	; 0x60
 8001e3c:	4b22      	ldr	r3, [pc, #136]	; (8001ec8 <HAL_TIM_Base_MspInit+0x14c>)
 8001e3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e44:	617b      	str	r3, [r7, #20]
 8001e46:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 1, 0);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	2018      	movs	r0, #24
 8001e4e:	f001 fd1c 	bl	800388a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001e52:	2018      	movs	r0, #24
 8001e54:	f001 fd33 	bl	80038be <HAL_NVIC_EnableIRQ>
}
 8001e58:	e032      	b.n	8001ec0 <HAL_TIM_Base_MspInit+0x144>
  else if(tim_baseHandle->Instance==TIM16)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a1d      	ldr	r2, [pc, #116]	; (8001ed4 <HAL_TIM_Base_MspInit+0x158>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d114      	bne.n	8001e8e <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001e64:	4b18      	ldr	r3, [pc, #96]	; (8001ec8 <HAL_TIM_Base_MspInit+0x14c>)
 8001e66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e68:	4a17      	ldr	r2, [pc, #92]	; (8001ec8 <HAL_TIM_Base_MspInit+0x14c>)
 8001e6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e6e:	6613      	str	r3, [r2, #96]	; 0x60
 8001e70:	4b15      	ldr	r3, [pc, #84]	; (8001ec8 <HAL_TIM_Base_MspInit+0x14c>)
 8001e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e78:	613b      	str	r3, [r7, #16]
 8001e7a:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	2101      	movs	r1, #1
 8001e80:	2019      	movs	r0, #25
 8001e82:	f001 fd02 	bl	800388a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001e86:	2019      	movs	r0, #25
 8001e88:	f001 fd19 	bl	80038be <HAL_NVIC_EnableIRQ>
}
 8001e8c:	e018      	b.n	8001ec0 <HAL_TIM_Base_MspInit+0x144>
  else if(tim_baseHandle->Instance==TIM17)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a11      	ldr	r2, [pc, #68]	; (8001ed8 <HAL_TIM_Base_MspInit+0x15c>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d113      	bne.n	8001ec0 <HAL_TIM_Base_MspInit+0x144>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001e98:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <HAL_TIM_Base_MspInit+0x14c>)
 8001e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e9c:	4a0a      	ldr	r2, [pc, #40]	; (8001ec8 <HAL_TIM_Base_MspInit+0x14c>)
 8001e9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ea2:	6613      	str	r3, [r2, #96]	; 0x60
 8001ea4:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <HAL_TIM_Base_MspInit+0x14c>)
 8001ea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ea8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	201a      	movs	r0, #26
 8001eb6:	f001 fce8 	bl	800388a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001eba:	201a      	movs	r0, #26
 8001ebc:	f001 fcff 	bl	80038be <HAL_NVIC_EnableIRQ>
}
 8001ec0:	bf00      	nop
 8001ec2:	3738      	adds	r7, #56	; 0x38
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	40013400 	.word	0x40013400
 8001ed0:	40014000 	.word	0x40014000
 8001ed4:	40014400 	.word	0x40014400
 8001ed8:	40014800 	.word	0x40014800

08001edc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001edc:	480d      	ldr	r0, [pc, #52]	; (8001f14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ede:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ee0:	480d      	ldr	r0, [pc, #52]	; (8001f18 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ee2:	490e      	ldr	r1, [pc, #56]	; (8001f1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ee4:	4a0e      	ldr	r2, [pc, #56]	; (8001f20 <LoopForever+0xe>)
  movs r3, #0
 8001ee6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001ee8:	e002      	b.n	8001ef0 <LoopCopyDataInit>

08001eea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eee:	3304      	adds	r3, #4

08001ef0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ef0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ef2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ef4:	d3f9      	bcc.n	8001eea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ef6:	4a0b      	ldr	r2, [pc, #44]	; (8001f24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ef8:	4c0b      	ldr	r4, [pc, #44]	; (8001f28 <LoopForever+0x16>)
  movs r3, #0
 8001efa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001efc:	e001      	b.n	8001f02 <LoopFillZerobss>

08001efe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001efe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f00:	3204      	adds	r2, #4

08001f02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f04:	d3fb      	bcc.n	8001efe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f06:	f7ff fce7 	bl	80018d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f0a:	f006 fb4d 	bl	80085a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f0e:	f7ff f8bd 	bl	800108c <main>

08001f12 <LoopForever>:

LoopForever:
    b LoopForever
 8001f12:	e7fe      	b.n	8001f12 <LoopForever>
  ldr   r0, =_estack
 8001f14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f1c:	20000444 	.word	0x20000444
  ldr r2, =_sidata
 8001f20:	08009828 	.word	0x08009828
  ldr r2, =_sbss
 8001f24:	20000444 	.word	0x20000444
  ldr r4, =_ebss
 8001f28:	200008f0 	.word	0x200008f0

08001f2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f2c:	e7fe      	b.n	8001f2c <ADC1_2_IRQHandler>

08001f2e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f34:	2300      	movs	r3, #0
 8001f36:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f38:	2003      	movs	r0, #3
 8001f3a:	f001 fc9b 	bl	8003874 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f3e:	2000      	movs	r0, #0
 8001f40:	f000 f80e 	bl	8001f60 <HAL_InitTick>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d002      	beq.n	8001f50 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	71fb      	strb	r3, [r7, #7]
 8001f4e:	e001      	b.n	8001f54 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f50:	f7ff faa4 	bl	800149c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f54:	79fb      	ldrb	r3, [r7, #7]

}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
	...

08001f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001f6c:	4b16      	ldr	r3, [pc, #88]	; (8001fc8 <HAL_InitTick+0x68>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d022      	beq.n	8001fba <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001f74:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <HAL_InitTick+0x6c>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4b13      	ldr	r3, [pc, #76]	; (8001fc8 <HAL_InitTick+0x68>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f80:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f001 fca6 	bl	80038da <HAL_SYSTICK_Config>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d10f      	bne.n	8001fb4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b0f      	cmp	r3, #15
 8001f98:	d809      	bhi.n	8001fae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fa2:	f001 fc72 	bl	800388a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fa6:	4a0a      	ldr	r2, [pc, #40]	; (8001fd0 <HAL_InitTick+0x70>)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6013      	str	r3, [r2, #0]
 8001fac:	e007      	b.n	8001fbe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	73fb      	strb	r3, [r7, #15]
 8001fb2:	e004      	b.n	8001fbe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	73fb      	strb	r3, [r7, #15]
 8001fb8:	e001      	b.n	8001fbe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	200003d8 	.word	0x200003d8
 8001fcc:	200003d0 	.word	0x200003d0
 8001fd0:	200003d4 	.word	0x200003d4

08001fd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fd8:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <HAL_IncTick+0x1c>)
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	4b05      	ldr	r3, [pc, #20]	; (8001ff4 <HAL_IncTick+0x20>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	4a03      	ldr	r2, [pc, #12]	; (8001ff0 <HAL_IncTick+0x1c>)
 8001fe4:	6013      	str	r3, [r2, #0]
}
 8001fe6:	bf00      	nop
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	200008e8 	.word	0x200008e8
 8001ff4:	200003d8 	.word	0x200003d8

08001ff8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8001ffc:	4b03      	ldr	r3, [pc, #12]	; (800200c <HAL_GetTick+0x14>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
}
 8002000:	4618      	mov	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	200008e8 	.word	0x200008e8

08002010 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002018:	f7ff ffee 	bl	8001ff8 <HAL_GetTick>
 800201c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002028:	d004      	beq.n	8002034 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800202a:	4b09      	ldr	r3, [pc, #36]	; (8002050 <HAL_Delay+0x40>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	4413      	add	r3, r2
 8002032:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002034:	bf00      	nop
 8002036:	f7ff ffdf 	bl	8001ff8 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	429a      	cmp	r2, r3
 8002044:	d8f7      	bhi.n	8002036 <HAL_Delay+0x26>
  {
  }
}
 8002046:	bf00      	nop
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	200003d8 	.word	0x200003d8

08002054 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	431a      	orrs	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	609a      	str	r2, [r3, #8]
}
 800206e:	bf00      	nop
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
 8002082:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	431a      	orrs	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	609a      	str	r2, [r3, #8]
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80020bc:	b490      	push	{r4, r7}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
 80020c8:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	3360      	adds	r3, #96	; 0x60
 80020ce:	461a      	mov	r2, r3
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4413      	add	r3, r2
 80020d6:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80020d8:	6822      	ldr	r2, [r4, #0]
 80020da:	4b08      	ldr	r3, [pc, #32]	; (80020fc <LL_ADC_SetOffset+0x40>)
 80020dc:	4013      	ands	r3, r2
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	430a      	orrs	r2, r1
 80020e8:	4313      	orrs	r3, r2
 80020ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80020ee:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80020f0:	bf00      	nop
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bc90      	pop	{r4, r7}
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	03fff000 	.word	0x03fff000

08002100 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002100:	b490      	push	{r4, r7}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	3360      	adds	r3, #96	; 0x60
 800210e:	461a      	mov	r2, r3
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002118:	6823      	ldr	r3, [r4, #0]
 800211a:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bc90      	pop	{r4, r7}
 8002126:	4770      	bx	lr

08002128 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002128:	b490      	push	{r4, r7}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	3360      	adds	r3, #96	; 0x60
 8002138:	461a      	mov	r2, r3
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002142:	6823      	ldr	r3, [r4, #0]
 8002144:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4313      	orrs	r3, r2
 800214c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800214e:	bf00      	nop
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bc90      	pop	{r4, r7}
 8002156:	4770      	bx	lr

08002158 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002158:	b490      	push	{r4, r7}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	3360      	adds	r3, #96	; 0x60
 8002168:	461a      	mov	r2, r3
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002172:	6823      	ldr	r3, [r4, #0]
 8002174:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4313      	orrs	r3, r2
 800217c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800217e:	bf00      	nop
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bc90      	pop	{r4, r7}
 8002186:	4770      	bx	lr

08002188 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002188:	b490      	push	{r4, r7}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	3360      	adds	r3, #96	; 0x60
 8002198:	461a      	mov	r2, r3
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80021a2:	6823      	ldr	r3, [r4, #0]
 80021a4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80021ae:	bf00      	nop
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc90      	pop	{r4, r7}
 80021b6:	4770      	bx	lr

080021b8 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	431a      	orrs	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	615a      	str	r2, [r3, #20]
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80021de:	b490      	push	{r4, r7}
 80021e0:	b084      	sub	sp, #16
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	60f8      	str	r0, [r7, #12]
 80021e6:	60b9      	str	r1, [r7, #8]
 80021e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	3330      	adds	r3, #48	; 0x30
 80021ee:	461a      	mov	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	0a1b      	lsrs	r3, r3, #8
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	f003 030c 	and.w	r3, r3, #12
 80021fa:	4413      	add	r3, r2
 80021fc:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80021fe:	6822      	ldr	r2, [r4, #0]
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	f003 031f 	and.w	r3, r3, #31
 8002206:	211f      	movs	r1, #31
 8002208:	fa01 f303 	lsl.w	r3, r1, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	401a      	ands	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	0e9b      	lsrs	r3, r3, #26
 8002214:	f003 011f 	and.w	r1, r3, #31
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	f003 031f 	and.w	r3, r3, #31
 800221e:	fa01 f303 	lsl.w	r3, r1, r3
 8002222:	4313      	orrs	r3, r2
 8002224:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002226:	bf00      	nop
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bc90      	pop	{r4, r7}
 800222e:	4770      	bx	lr

08002230 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002230:	b490      	push	{r4, r7}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	3314      	adds	r3, #20
 8002240:	461a      	mov	r2, r3
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	0e5b      	lsrs	r3, r3, #25
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	f003 0304 	and.w	r3, r3, #4
 800224c:	4413      	add	r3, r2
 800224e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002250:	6822      	ldr	r2, [r4, #0]
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	0d1b      	lsrs	r3, r3, #20
 8002256:	f003 031f 	and.w	r3, r3, #31
 800225a:	2107      	movs	r1, #7
 800225c:	fa01 f303 	lsl.w	r3, r1, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	401a      	ands	r2, r3
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	0d1b      	lsrs	r3, r3, #20
 8002268:	f003 031f 	and.w	r3, r3, #31
 800226c:	6879      	ldr	r1, [r7, #4]
 800226e:	fa01 f303 	lsl.w	r3, r1, r3
 8002272:	4313      	orrs	r3, r2
 8002274:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002276:	bf00      	nop
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bc90      	pop	{r4, r7}
 800227e:	4770      	bx	lr

08002280 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002298:	43db      	mvns	r3, r3
 800229a:	401a      	ands	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f003 0318 	and.w	r3, r3, #24
 80022a2:	4908      	ldr	r1, [pc, #32]	; (80022c4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80022a4:	40d9      	lsrs	r1, r3
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	400b      	ands	r3, r1
 80022aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ae:	431a      	orrs	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80022b6:	bf00      	nop
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	0007ffff 	.word	0x0007ffff

080022c8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80022d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6093      	str	r3, [r2, #8]
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002300:	d101      	bne.n	8002306 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002302:	2301      	movs	r3, #1
 8002304:	e000      	b.n	8002308 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002324:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002328:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002350:	d101      	bne.n	8002356 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002352:	2301      	movs	r3, #1
 8002354:	e000      	b.n	8002358 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	2b01      	cmp	r3, #1
 8002376:	d101      	bne.n	800237c <LL_ADC_IsEnabled+0x18>
 8002378:	2301      	movs	r3, #1
 800237a:	e000      	b.n	800237e <LL_ADC_IsEnabled+0x1a>
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800238a:	b480      	push	{r7}
 800238c:	b083      	sub	sp, #12
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 0304 	and.w	r3, r3, #4
 800239a:	2b04      	cmp	r3, #4
 800239c:	d101      	bne.n	80023a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800239e:	2301      	movs	r3, #1
 80023a0:	e000      	b.n	80023a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 0308 	and.w	r3, r3, #8
 80023c0:	2b08      	cmp	r3, #8
 80023c2:	d101      	bne.n	80023c8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80023c4:	2301      	movs	r3, #1
 80023c6:	e000      	b.n	80023ca <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
	...

080023d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023d8:	b590      	push	{r4, r7, lr}
 80023da:	b089      	sub	sp, #36	; 0x24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023e0:	2300      	movs	r3, #0
 80023e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e1ad      	b.n	800274e <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d109      	bne.n	8002414 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f7fe f84b 	bl	800049c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff ff67 	bl	80022ec <LL_ADC_IsDeepPowerDownEnabled>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d004      	beq.n	800242e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff ff4d 	bl	80022c8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff ff82 	bl	800233c <LL_ADC_IsInternalRegulatorEnabled>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d113      	bne.n	8002466 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff ff66 	bl	8002314 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002448:	4b9e      	ldr	r3, [pc, #632]	; (80026c4 <HAL_ADC_Init+0x2ec>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	099b      	lsrs	r3, r3, #6
 800244e:	4a9e      	ldr	r2, [pc, #632]	; (80026c8 <HAL_ADC_Init+0x2f0>)
 8002450:	fba2 2303 	umull	r2, r3, r2, r3
 8002454:	099b      	lsrs	r3, r3, #6
 8002456:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002458:	e002      	b.n	8002460 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	3b01      	subs	r3, #1
 800245e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f9      	bne.n	800245a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff ff66 	bl	800233c <LL_ADC_IsInternalRegulatorEnabled>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10d      	bne.n	8002492 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247a:	f043 0210 	orr.w	r2, r3, #16
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002486:	f043 0201 	orr.w	r2, r3, #1
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff ff77 	bl	800238a <LL_ADC_REG_IsConversionOngoing>
 800249c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a2:	f003 0310 	and.w	r3, r3, #16
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f040 8148 	bne.w	800273c <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f040 8144 	bne.w	800273c <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80024bc:	f043 0202 	orr.w	r2, r3, #2
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff ff4b 	bl	8002364 <LL_ADC_IsEnabled>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d141      	bne.n	8002558 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024dc:	d004      	beq.n	80024e8 <HAL_ADC_Init+0x110>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a7a      	ldr	r2, [pc, #488]	; (80026cc <HAL_ADC_Init+0x2f4>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d10f      	bne.n	8002508 <HAL_ADC_Init+0x130>
 80024e8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80024ec:	f7ff ff3a 	bl	8002364 <LL_ADC_IsEnabled>
 80024f0:	4604      	mov	r4, r0
 80024f2:	4876      	ldr	r0, [pc, #472]	; (80026cc <HAL_ADC_Init+0x2f4>)
 80024f4:	f7ff ff36 	bl	8002364 <LL_ADC_IsEnabled>
 80024f8:	4603      	mov	r3, r0
 80024fa:	4323      	orrs	r3, r4
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	bf0c      	ite	eq
 8002500:	2301      	moveq	r3, #1
 8002502:	2300      	movne	r3, #0
 8002504:	b2db      	uxtb	r3, r3
 8002506:	e012      	b.n	800252e <HAL_ADC_Init+0x156>
 8002508:	4871      	ldr	r0, [pc, #452]	; (80026d0 <HAL_ADC_Init+0x2f8>)
 800250a:	f7ff ff2b 	bl	8002364 <LL_ADC_IsEnabled>
 800250e:	4604      	mov	r4, r0
 8002510:	4870      	ldr	r0, [pc, #448]	; (80026d4 <HAL_ADC_Init+0x2fc>)
 8002512:	f7ff ff27 	bl	8002364 <LL_ADC_IsEnabled>
 8002516:	4603      	mov	r3, r0
 8002518:	431c      	orrs	r4, r3
 800251a:	486f      	ldr	r0, [pc, #444]	; (80026d8 <HAL_ADC_Init+0x300>)
 800251c:	f7ff ff22 	bl	8002364 <LL_ADC_IsEnabled>
 8002520:	4603      	mov	r3, r0
 8002522:	4323      	orrs	r3, r4
 8002524:	2b00      	cmp	r3, #0
 8002526:	bf0c      	ite	eq
 8002528:	2301      	moveq	r3, #1
 800252a:	2300      	movne	r3, #0
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d012      	beq.n	8002558 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800253a:	d004      	beq.n	8002546 <HAL_ADC_Init+0x16e>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a62      	ldr	r2, [pc, #392]	; (80026cc <HAL_ADC_Init+0x2f4>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d101      	bne.n	800254a <HAL_ADC_Init+0x172>
 8002546:	4a65      	ldr	r2, [pc, #404]	; (80026dc <HAL_ADC_Init+0x304>)
 8002548:	e000      	b.n	800254c <HAL_ADC_Init+0x174>
 800254a:	4a65      	ldr	r2, [pc, #404]	; (80026e0 <HAL_ADC_Init+0x308>)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	4619      	mov	r1, r3
 8002552:	4610      	mov	r0, r2
 8002554:	f7ff fd7e 	bl	8002054 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	7f5b      	ldrb	r3, [r3, #29]
 800255c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002562:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002568:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800256e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002576:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002578:	4313      	orrs	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002582:	2b01      	cmp	r3, #1
 8002584:	d106      	bne.n	8002594 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258a:	3b01      	subs	r3, #1
 800258c:	045b      	lsls	r3, r3, #17
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4313      	orrs	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002598:	2b00      	cmp	r3, #0
 800259a:	d009      	beq.n	80025b0 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68da      	ldr	r2, [r3, #12]
 80025b6:	4b4b      	ldr	r3, [pc, #300]	; (80026e4 <HAL_ADC_Init+0x30c>)
 80025b8:	4013      	ands	r3, r2
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6812      	ldr	r2, [r2, #0]
 80025be:	69b9      	ldr	r1, [r7, #24]
 80025c0:	430b      	orrs	r3, r1
 80025c2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff fed3 	bl	800238a <LL_ADC_REG_IsConversionOngoing>
 80025e4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff fee0 	bl	80023b0 <LL_ADC_INJ_IsConversionOngoing>
 80025f0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d17f      	bne.n	80026f8 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d17c      	bne.n	80026f8 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002602:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800260a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800260c:	4313      	orrs	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800261a:	f023 0302 	bic.w	r3, r3, #2
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6812      	ldr	r2, [r2, #0]
 8002622:	69b9      	ldr	r1, [r7, #24]
 8002624:	430b      	orrs	r3, r1
 8002626:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d017      	beq.n	8002660 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	691a      	ldr	r2, [r3, #16]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800263e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002648:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800264c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6911      	ldr	r1, [r2, #16]
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6812      	ldr	r2, [r2, #0]
 8002658:	430b      	orrs	r3, r1
 800265a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800265e:	e013      	b.n	8002688 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	691a      	ldr	r2, [r3, #16]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800266e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6812      	ldr	r2, [r2, #0]
 800267c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002680:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002684:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800268e:	2b01      	cmp	r3, #1
 8002690:	d12a      	bne.n	80026e8 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800269c:	f023 0304 	bic.w	r3, r3, #4
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80026a8:	4311      	orrs	r1, r2
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80026ae:	4311      	orrs	r1, r2
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80026b4:	430a      	orrs	r2, r1
 80026b6:	431a      	orrs	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f042 0201 	orr.w	r2, r2, #1
 80026c0:	611a      	str	r2, [r3, #16]
 80026c2:	e019      	b.n	80026f8 <HAL_ADC_Init+0x320>
 80026c4:	200003d0 	.word	0x200003d0
 80026c8:	053e2d63 	.word	0x053e2d63
 80026cc:	50000100 	.word	0x50000100
 80026d0:	50000400 	.word	0x50000400
 80026d4:	50000500 	.word	0x50000500
 80026d8:	50000600 	.word	0x50000600
 80026dc:	50000300 	.word	0x50000300
 80026e0:	50000700 	.word	0x50000700
 80026e4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	691a      	ldr	r2, [r3, #16]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0201 	bic.w	r2, r2, #1
 80026f6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d10c      	bne.n	800271a <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	f023 010f 	bic.w	r1, r3, #15
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	1e5a      	subs	r2, r3, #1
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	430a      	orrs	r2, r1
 8002716:	631a      	str	r2, [r3, #48]	; 0x30
 8002718:	e007      	b.n	800272a <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 020f 	bic.w	r2, r2, #15
 8002728:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800272e:	f023 0303 	bic.w	r3, r3, #3
 8002732:	f043 0201 	orr.w	r2, r3, #1
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	65da      	str	r2, [r3, #92]	; 0x5c
 800273a:	e007      	b.n	800274c <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002740:	f043 0210 	orr.w	r2, r3, #16
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800274c:	7ffb      	ldrb	r3, [r7, #31]
}
 800274e:	4618      	mov	r0, r3
 8002750:	3724      	adds	r7, #36	; 0x24
 8002752:	46bd      	mov	sp, r7
 8002754:	bd90      	pop	{r4, r7, pc}
 8002756:	bf00      	nop

08002758 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b0a6      	sub	sp, #152	; 0x98
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002762:	2300      	movs	r3, #0
 8002764:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002768:	2300      	movs	r3, #0
 800276a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002772:	2b01      	cmp	r3, #1
 8002774:	d101      	bne.n	800277a <HAL_ADC_ConfigChannel+0x22>
 8002776:	2302      	movs	r3, #2
 8002778:	e38e      	b.n	8002e98 <HAL_ADC_ConfigChannel+0x740>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff fdff 	bl	800238a <LL_ADC_REG_IsConversionOngoing>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	f040 836f 	bne.w	8002e72 <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6818      	ldr	r0, [r3, #0]
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	6859      	ldr	r1, [r3, #4]
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	461a      	mov	r2, r3
 80027a2:	f7ff fd1c 	bl	80021de <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff fded 	bl	800238a <LL_ADC_REG_IsConversionOngoing>
 80027b0:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff fdf9 	bl	80023b0 <LL_ADC_INJ_IsConversionOngoing>
 80027be:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f040 817b 	bne.w	8002ac2 <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f040 8176 	bne.w	8002ac2 <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027de:	d10f      	bne.n	8002800 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6818      	ldr	r0, [r3, #0]
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2200      	movs	r2, #0
 80027ea:	4619      	mov	r1, r3
 80027ec:	f7ff fd20 	bl	8002230 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff fcdd 	bl	80021b8 <LL_ADC_SetSamplingTimeCommonConfig>
 80027fe:	e00e      	b.n	800281e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6818      	ldr	r0, [r3, #0]
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	6819      	ldr	r1, [r3, #0]
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	461a      	mov	r2, r3
 800280e:	f7ff fd0f 	bl	8002230 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2100      	movs	r1, #0
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff fccd 	bl	80021b8 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	695a      	ldr	r2, [r3, #20]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	08db      	lsrs	r3, r3, #3
 800282a:	f003 0303 	and.w	r3, r3, #3
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	2b04      	cmp	r3, #4
 800283e:	d022      	beq.n	8002886 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6818      	ldr	r0, [r3, #0]
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	6919      	ldr	r1, [r3, #16]
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002850:	f7ff fc34 	bl	80020bc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6818      	ldr	r0, [r3, #0]
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	6919      	ldr	r1, [r3, #16]
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	461a      	mov	r2, r3
 8002862:	f7ff fc79 	bl	8002158 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6818      	ldr	r0, [r3, #0]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	6919      	ldr	r1, [r3, #16]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	7f1b      	ldrb	r3, [r3, #28]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d102      	bne.n	800287c <HAL_ADC_ConfigChannel+0x124>
 8002876:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800287a:	e000      	b.n	800287e <HAL_ADC_ConfigChannel+0x126>
 800287c:	2300      	movs	r3, #0
 800287e:	461a      	mov	r2, r3
 8002880:	f7ff fc82 	bl	8002188 <LL_ADC_SetOffsetSaturation>
 8002884:	e11d      	b.n	8002ac2 <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2100      	movs	r1, #0
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff fc37 	bl	8002100 <LL_ADC_GetOffsetChannel>
 8002892:	4603      	mov	r3, r0
 8002894:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10a      	bne.n	80028b2 <HAL_ADC_ConfigChannel+0x15a>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2100      	movs	r1, #0
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff fc2c 	bl	8002100 <LL_ADC_GetOffsetChannel>
 80028a8:	4603      	mov	r3, r0
 80028aa:	0e9b      	lsrs	r3, r3, #26
 80028ac:	f003 021f 	and.w	r2, r3, #31
 80028b0:	e012      	b.n	80028d8 <HAL_ADC_ConfigChannel+0x180>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2100      	movs	r1, #0
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff fc21 	bl	8002100 <LL_ADC_GetOffsetChannel>
 80028be:	4603      	mov	r3, r0
 80028c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028c8:	fa93 f3a3 	rbit	r3, r3
 80028cc:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80028ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028d0:	fab3 f383 	clz	r3, r3
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	461a      	mov	r2, r3
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d105      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x198>
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	0e9b      	lsrs	r3, r3, #26
 80028ea:	f003 031f 	and.w	r3, r3, #31
 80028ee:	e00a      	b.n	8002906 <HAL_ADC_ConfigChannel+0x1ae>
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028f8:	fa93 f3a3 	rbit	r3, r3
 80028fc:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 80028fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002900:	fab3 f383 	clz	r3, r3
 8002904:	b2db      	uxtb	r3, r3
 8002906:	429a      	cmp	r2, r3
 8002908:	d106      	bne.n	8002918 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2200      	movs	r2, #0
 8002910:	2100      	movs	r1, #0
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff fc08 	bl	8002128 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2101      	movs	r1, #1
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff fbee 	bl	8002100 <LL_ADC_GetOffsetChannel>
 8002924:	4603      	mov	r3, r0
 8002926:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10a      	bne.n	8002944 <HAL_ADC_ConfigChannel+0x1ec>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2101      	movs	r1, #1
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff fbe3 	bl	8002100 <LL_ADC_GetOffsetChannel>
 800293a:	4603      	mov	r3, r0
 800293c:	0e9b      	lsrs	r3, r3, #26
 800293e:	f003 021f 	and.w	r2, r3, #31
 8002942:	e010      	b.n	8002966 <HAL_ADC_ConfigChannel+0x20e>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2101      	movs	r1, #1
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff fbd8 	bl	8002100 <LL_ADC_GetOffsetChannel>
 8002950:	4603      	mov	r3, r0
 8002952:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002954:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002956:	fa93 f3a3 	rbit	r3, r3
 800295a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800295c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800295e:	fab3 f383 	clz	r3, r3
 8002962:	b2db      	uxtb	r3, r3
 8002964:	461a      	mov	r2, r3
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800296e:	2b00      	cmp	r3, #0
 8002970:	d105      	bne.n	800297e <HAL_ADC_ConfigChannel+0x226>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	0e9b      	lsrs	r3, r3, #26
 8002978:	f003 031f 	and.w	r3, r3, #31
 800297c:	e00a      	b.n	8002994 <HAL_ADC_ConfigChannel+0x23c>
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002984:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002986:	fa93 f3a3 	rbit	r3, r3
 800298a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800298c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800298e:	fab3 f383 	clz	r3, r3
 8002992:	b2db      	uxtb	r3, r3
 8002994:	429a      	cmp	r2, r3
 8002996:	d106      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2200      	movs	r2, #0
 800299e:	2101      	movs	r1, #1
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff fbc1 	bl	8002128 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2102      	movs	r1, #2
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff fba7 	bl	8002100 <LL_ADC_GetOffsetChannel>
 80029b2:	4603      	mov	r3, r0
 80029b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10a      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x27a>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2102      	movs	r1, #2
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff fb9c 	bl	8002100 <LL_ADC_GetOffsetChannel>
 80029c8:	4603      	mov	r3, r0
 80029ca:	0e9b      	lsrs	r3, r3, #26
 80029cc:	f003 021f 	and.w	r2, r3, #31
 80029d0:	e010      	b.n	80029f4 <HAL_ADC_ConfigChannel+0x29c>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2102      	movs	r1, #2
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff fb91 	bl	8002100 <LL_ADC_GetOffsetChannel>
 80029de:	4603      	mov	r3, r0
 80029e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029e4:	fa93 f3a3 	rbit	r3, r3
 80029e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 80029ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029ec:	fab3 f383 	clz	r3, r3
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	461a      	mov	r2, r3
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d105      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x2b4>
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	0e9b      	lsrs	r3, r3, #26
 8002a06:	f003 031f 	and.w	r3, r3, #31
 8002a0a:	e00a      	b.n	8002a22 <HAL_ADC_ConfigChannel+0x2ca>
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a14:	fa93 f3a3 	rbit	r3, r3
 8002a18:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002a1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a1c:	fab3 f383 	clz	r3, r3
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d106      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	2102      	movs	r1, #2
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff fb7a 	bl	8002128 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2103      	movs	r1, #3
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff fb60 	bl	8002100 <LL_ADC_GetOffsetChannel>
 8002a40:	4603      	mov	r3, r0
 8002a42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10a      	bne.n	8002a60 <HAL_ADC_ConfigChannel+0x308>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2103      	movs	r1, #3
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff fb55 	bl	8002100 <LL_ADC_GetOffsetChannel>
 8002a56:	4603      	mov	r3, r0
 8002a58:	0e9b      	lsrs	r3, r3, #26
 8002a5a:	f003 021f 	and.w	r2, r3, #31
 8002a5e:	e010      	b.n	8002a82 <HAL_ADC_ConfigChannel+0x32a>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2103      	movs	r1, #3
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff fb4a 	bl	8002100 <LL_ADC_GetOffsetChannel>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a72:	fa93 f3a3 	rbit	r3, r3
 8002a76:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a7a:	fab3 f383 	clz	r3, r3
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	461a      	mov	r2, r3
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d105      	bne.n	8002a9a <HAL_ADC_ConfigChannel+0x342>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	0e9b      	lsrs	r3, r3, #26
 8002a94:	f003 031f 	and.w	r3, r3, #31
 8002a98:	e00a      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x358>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aa2:	fa93 f3a3 	rbit	r3, r3
 8002aa6:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8002aa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aaa:	fab3 f383 	clz	r3, r3
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d106      	bne.n	8002ac2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	2103      	movs	r1, #3
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff fb33 	bl	8002128 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff fc4c 	bl	8002364 <LL_ADC_IsEnabled>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f040 810c 	bne.w	8002cec <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6818      	ldr	r0, [r3, #0]
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	6819      	ldr	r1, [r3, #0]
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	f7ff fbcd 	bl	8002280 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	4aaf      	ldr	r2, [pc, #700]	; (8002da8 <HAL_ADC_ConfigChannel+0x650>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	f040 80fd 	bne.w	8002cec <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10b      	bne.n	8002b1a <HAL_ADC_ConfigChannel+0x3c2>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	0e9b      	lsrs	r3, r3, #26
 8002b08:	3301      	adds	r3, #1
 8002b0a:	f003 031f 	and.w	r3, r3, #31
 8002b0e:	2b09      	cmp	r3, #9
 8002b10:	bf94      	ite	ls
 8002b12:	2301      	movls	r3, #1
 8002b14:	2300      	movhi	r3, #0
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	e012      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x3e8>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b22:	fa93 f3a3 	rbit	r3, r3
 8002b26:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b2a:	fab3 f383 	clz	r3, r3
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	3301      	adds	r3, #1
 8002b32:	f003 031f 	and.w	r3, r3, #31
 8002b36:	2b09      	cmp	r3, #9
 8002b38:	bf94      	ite	ls
 8002b3a:	2301      	movls	r3, #1
 8002b3c:	2300      	movhi	r3, #0
 8002b3e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d064      	beq.n	8002c0e <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d107      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x408>
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	0e9b      	lsrs	r3, r3, #26
 8002b56:	3301      	adds	r3, #1
 8002b58:	069b      	lsls	r3, r3, #26
 8002b5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b5e:	e00e      	b.n	8002b7e <HAL_ADC_ConfigChannel+0x426>
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b68:	fa93 f3a3 	rbit	r3, r3
 8002b6c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b70:	fab3 f383 	clz	r3, r3
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	3301      	adds	r3, #1
 8002b78:	069b      	lsls	r3, r3, #26
 8002b7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d109      	bne.n	8002b9e <HAL_ADC_ConfigChannel+0x446>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	0e9b      	lsrs	r3, r3, #26
 8002b90:	3301      	adds	r3, #1
 8002b92:	f003 031f 	and.w	r3, r3, #31
 8002b96:	2101      	movs	r1, #1
 8002b98:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9c:	e010      	b.n	8002bc0 <HAL_ADC_ConfigChannel+0x468>
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba6:	fa93 f3a3 	rbit	r3, r3
 8002baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bae:	fab3 f383 	clz	r3, r3
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	f003 031f 	and.w	r3, r3, #31
 8002bba:	2101      	movs	r1, #1
 8002bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc0:	ea42 0103 	orr.w	r1, r2, r3
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10a      	bne.n	8002be6 <HAL_ADC_ConfigChannel+0x48e>
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	0e9b      	lsrs	r3, r3, #26
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	f003 021f 	and.w	r2, r3, #31
 8002bdc:	4613      	mov	r3, r2
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	4413      	add	r3, r2
 8002be2:	051b      	lsls	r3, r3, #20
 8002be4:	e011      	b.n	8002c0a <HAL_ADC_ConfigChannel+0x4b2>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bee:	fa93 f3a3 	rbit	r3, r3
 8002bf2:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf6:	fab3 f383 	clz	r3, r3
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	f003 021f 	and.w	r2, r3, #31
 8002c02:	4613      	mov	r3, r2
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	4413      	add	r3, r2
 8002c08:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c0a:	430b      	orrs	r3, r1
 8002c0c:	e069      	b.n	8002ce2 <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d107      	bne.n	8002c2a <HAL_ADC_ConfigChannel+0x4d2>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	0e9b      	lsrs	r3, r3, #26
 8002c20:	3301      	adds	r3, #1
 8002c22:	069b      	lsls	r3, r3, #26
 8002c24:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c28:	e00e      	b.n	8002c48 <HAL_ADC_ConfigChannel+0x4f0>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c30:	6a3b      	ldr	r3, [r7, #32]
 8002c32:	fa93 f3a3 	rbit	r3, r3
 8002c36:	61fb      	str	r3, [r7, #28]
  return result;
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	fab3 f383 	clz	r3, r3
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	3301      	adds	r3, #1
 8002c42:	069b      	lsls	r3, r3, #26
 8002c44:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d109      	bne.n	8002c68 <HAL_ADC_ConfigChannel+0x510>
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	0e9b      	lsrs	r3, r3, #26
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	f003 031f 	and.w	r3, r3, #31
 8002c60:	2101      	movs	r1, #1
 8002c62:	fa01 f303 	lsl.w	r3, r1, r3
 8002c66:	e010      	b.n	8002c8a <HAL_ADC_ConfigChannel+0x532>
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	fa93 f3a3 	rbit	r3, r3
 8002c74:	617b      	str	r3, [r7, #20]
  return result;
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	fab3 f383 	clz	r3, r3
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	3301      	adds	r3, #1
 8002c80:	f003 031f 	and.w	r3, r3, #31
 8002c84:	2101      	movs	r1, #1
 8002c86:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8a:	ea42 0103 	orr.w	r1, r2, r3
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10d      	bne.n	8002cb6 <HAL_ADC_ConfigChannel+0x55e>
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	0e9b      	lsrs	r3, r3, #26
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	f003 021f 	and.w	r2, r3, #31
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	4413      	add	r3, r2
 8002cac:	3b1e      	subs	r3, #30
 8002cae:	051b      	lsls	r3, r3, #20
 8002cb0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cb4:	e014      	b.n	8002ce0 <HAL_ADC_ConfigChannel+0x588>
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	fa93 f3a3 	rbit	r3, r3
 8002cc2:	60fb      	str	r3, [r7, #12]
  return result;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	fab3 f383 	clz	r3, r3
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	3301      	adds	r3, #1
 8002cce:	f003 021f 	and.w	r2, r3, #31
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	4413      	add	r3, r2
 8002cd8:	3b1e      	subs	r3, #30
 8002cda:	051b      	lsls	r3, r3, #20
 8002cdc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ce0:	430b      	orrs	r3, r1
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	6892      	ldr	r2, [r2, #8]
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	f7ff faa2 	bl	8002230 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	4b2e      	ldr	r3, [pc, #184]	; (8002dac <HAL_ADC_ConfigChannel+0x654>)
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 80c9 	beq.w	8002e8c <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d02:	d004      	beq.n	8002d0e <HAL_ADC_ConfigChannel+0x5b6>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a29      	ldr	r2, [pc, #164]	; (8002db0 <HAL_ADC_ConfigChannel+0x658>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d101      	bne.n	8002d12 <HAL_ADC_ConfigChannel+0x5ba>
 8002d0e:	4b29      	ldr	r3, [pc, #164]	; (8002db4 <HAL_ADC_ConfigChannel+0x65c>)
 8002d10:	e000      	b.n	8002d14 <HAL_ADC_ConfigChannel+0x5bc>
 8002d12:	4b29      	ldr	r3, [pc, #164]	; (8002db8 <HAL_ADC_ConfigChannel+0x660>)
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff f9c3 	bl	80020a0 <LL_ADC_GetCommonPathInternalCh>
 8002d1a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a26      	ldr	r2, [pc, #152]	; (8002dbc <HAL_ADC_ConfigChannel+0x664>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d004      	beq.n	8002d32 <HAL_ADC_ConfigChannel+0x5da>
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a24      	ldr	r2, [pc, #144]	; (8002dc0 <HAL_ADC_ConfigChannel+0x668>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d14e      	bne.n	8002dd0 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d148      	bne.n	8002dd0 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d46:	d005      	beq.n	8002d54 <HAL_ADC_ConfigChannel+0x5fc>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a1d      	ldr	r2, [pc, #116]	; (8002dc4 <HAL_ADC_ConfigChannel+0x66c>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	f040 8099 	bne.w	8002e86 <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d5c:	d004      	beq.n	8002d68 <HAL_ADC_ConfigChannel+0x610>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a13      	ldr	r2, [pc, #76]	; (8002db0 <HAL_ADC_ConfigChannel+0x658>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d101      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x614>
 8002d68:	4a12      	ldr	r2, [pc, #72]	; (8002db4 <HAL_ADC_ConfigChannel+0x65c>)
 8002d6a:	e000      	b.n	8002d6e <HAL_ADC_ConfigChannel+0x616>
 8002d6c:	4a12      	ldr	r2, [pc, #72]	; (8002db8 <HAL_ADC_ConfigChannel+0x660>)
 8002d6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d72:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d76:	4619      	mov	r1, r3
 8002d78:	4610      	mov	r0, r2
 8002d7a:	f7ff f97e 	bl	800207a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002d7e:	4b12      	ldr	r3, [pc, #72]	; (8002dc8 <HAL_ADC_ConfigChannel+0x670>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	099b      	lsrs	r3, r3, #6
 8002d84:	4a11      	ldr	r2, [pc, #68]	; (8002dcc <HAL_ADC_ConfigChannel+0x674>)
 8002d86:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8a:	099a      	lsrs	r2, r3, #6
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	4413      	add	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002d96:	e002      	b.n	8002d9e <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1f9      	bne.n	8002d98 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002da4:	e06f      	b.n	8002e86 <HAL_ADC_ConfigChannel+0x72e>
 8002da6:	bf00      	nop
 8002da8:	407f0000 	.word	0x407f0000
 8002dac:	80080000 	.word	0x80080000
 8002db0:	50000100 	.word	0x50000100
 8002db4:	50000300 	.word	0x50000300
 8002db8:	50000700 	.word	0x50000700
 8002dbc:	c3210000 	.word	0xc3210000
 8002dc0:	90c00010 	.word	0x90c00010
 8002dc4:	50000600 	.word	0x50000600
 8002dc8:	200003d0 	.word	0x200003d0
 8002dcc:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a32      	ldr	r2, [pc, #200]	; (8002ea0 <HAL_ADC_ConfigChannel+0x748>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d125      	bne.n	8002e26 <HAL_ADC_ConfigChannel+0x6ce>
 8002dda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d11f      	bne.n	8002e26 <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a2e      	ldr	r2, [pc, #184]	; (8002ea4 <HAL_ADC_ConfigChannel+0x74c>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d104      	bne.n	8002dfa <HAL_ADC_ConfigChannel+0x6a2>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a2c      	ldr	r2, [pc, #176]	; (8002ea8 <HAL_ADC_ConfigChannel+0x750>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d047      	beq.n	8002e8a <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e02:	d004      	beq.n	8002e0e <HAL_ADC_ConfigChannel+0x6b6>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a26      	ldr	r2, [pc, #152]	; (8002ea4 <HAL_ADC_ConfigChannel+0x74c>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d101      	bne.n	8002e12 <HAL_ADC_ConfigChannel+0x6ba>
 8002e0e:	4a27      	ldr	r2, [pc, #156]	; (8002eac <HAL_ADC_ConfigChannel+0x754>)
 8002e10:	e000      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x6bc>
 8002e12:	4a27      	ldr	r2, [pc, #156]	; (8002eb0 <HAL_ADC_ConfigChannel+0x758>)
 8002e14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4610      	mov	r0, r2
 8002e20:	f7ff f92b 	bl	800207a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e24:	e031      	b.n	8002e8a <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a22      	ldr	r2, [pc, #136]	; (8002eb4 <HAL_ADC_ConfigChannel+0x75c>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d12d      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d127      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a18      	ldr	r2, [pc, #96]	; (8002ea4 <HAL_ADC_ConfigChannel+0x74c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d022      	beq.n	8002e8c <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e4e:	d004      	beq.n	8002e5a <HAL_ADC_ConfigChannel+0x702>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a13      	ldr	r2, [pc, #76]	; (8002ea4 <HAL_ADC_ConfigChannel+0x74c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d101      	bne.n	8002e5e <HAL_ADC_ConfigChannel+0x706>
 8002e5a:	4a14      	ldr	r2, [pc, #80]	; (8002eac <HAL_ADC_ConfigChannel+0x754>)
 8002e5c:	e000      	b.n	8002e60 <HAL_ADC_ConfigChannel+0x708>
 8002e5e:	4a14      	ldr	r2, [pc, #80]	; (8002eb0 <HAL_ADC_ConfigChannel+0x758>)
 8002e60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e68:	4619      	mov	r1, r3
 8002e6a:	4610      	mov	r0, r2
 8002e6c:	f7ff f905 	bl	800207a <LL_ADC_SetCommonPathInternalCh>
 8002e70:	e00c      	b.n	8002e8c <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e76:	f043 0220 	orr.w	r2, r3, #32
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8002e84:	e002      	b.n	8002e8c <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e86:	bf00      	nop
 8002e88:	e000      	b.n	8002e8c <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e8a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002e94:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3798      	adds	r7, #152	; 0x98
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	c7520000 	.word	0xc7520000
 8002ea4:	50000100 	.word	0x50000100
 8002ea8:	50000500 	.word	0x50000500
 8002eac:	50000300 	.word	0x50000300
 8002eb0:	50000700 	.word	0x50000700
 8002eb4:	cb840000 	.word	0xcb840000

08002eb8 <LL_ADC_IsEnabled>:
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d101      	bne.n	8002ed0 <LL_ADC_IsEnabled+0x18>
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e000      	b.n	8002ed2 <LL_ADC_IsEnabled+0x1a>
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <LL_ADC_REG_IsConversionOngoing>:
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f003 0304 	and.w	r3, r3, #4
 8002eee:	2b04      	cmp	r3, #4
 8002ef0:	d101      	bne.n	8002ef6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e000      	b.n	8002ef8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002f04:	b590      	push	{r4, r7, lr}
 8002f06:	b0a1      	sub	sp, #132	; 0x84
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d101      	bne.n	8002f22 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002f1e:	2302      	movs	r3, #2
 8002f20:	e0e3      	b.n	80030ea <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f32:	d102      	bne.n	8002f3a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002f34:	4b6f      	ldr	r3, [pc, #444]	; (80030f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002f36:	60bb      	str	r3, [r7, #8]
 8002f38:	e009      	b.n	8002f4e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a6e      	ldr	r2, [pc, #440]	; (80030f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d102      	bne.n	8002f4a <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8002f44:	4b6d      	ldr	r3, [pc, #436]	; (80030fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002f46:	60bb      	str	r3, [r7, #8]
 8002f48:	e001      	b.n	8002f4e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d10b      	bne.n	8002f6c <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f58:	f043 0220 	orr.w	r2, r3, #32
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e0be      	b.n	80030ea <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7ff ffb5 	bl	8002ede <LL_ADC_REG_IsConversionOngoing>
 8002f74:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff ffaf 	bl	8002ede <LL_ADC_REG_IsConversionOngoing>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f040 80a0 	bne.w	80030c8 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002f88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f040 809c 	bne.w	80030c8 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f98:	d004      	beq.n	8002fa4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a55      	ldr	r2, [pc, #340]	; (80030f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d101      	bne.n	8002fa8 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8002fa4:	4b56      	ldr	r3, [pc, #344]	; (8003100 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002fa6:	e000      	b.n	8002faa <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8002fa8:	4b56      	ldr	r3, [pc, #344]	; (8003104 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002faa:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d04b      	beq.n	800304c <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002fb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	6859      	ldr	r1, [r3, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fc6:	035b      	lsls	r3, r3, #13
 8002fc8:	430b      	orrs	r3, r1
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fce:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fd8:	d004      	beq.n	8002fe4 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a45      	ldr	r2, [pc, #276]	; (80030f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d10f      	bne.n	8003004 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8002fe4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002fe8:	f7ff ff66 	bl	8002eb8 <LL_ADC_IsEnabled>
 8002fec:	4604      	mov	r4, r0
 8002fee:	4841      	ldr	r0, [pc, #260]	; (80030f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002ff0:	f7ff ff62 	bl	8002eb8 <LL_ADC_IsEnabled>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	4323      	orrs	r3, r4
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	bf0c      	ite	eq
 8002ffc:	2301      	moveq	r3, #1
 8002ffe:	2300      	movne	r3, #0
 8003000:	b2db      	uxtb	r3, r3
 8003002:	e012      	b.n	800302a <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8003004:	483c      	ldr	r0, [pc, #240]	; (80030f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8003006:	f7ff ff57 	bl	8002eb8 <LL_ADC_IsEnabled>
 800300a:	4604      	mov	r4, r0
 800300c:	483b      	ldr	r0, [pc, #236]	; (80030fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800300e:	f7ff ff53 	bl	8002eb8 <LL_ADC_IsEnabled>
 8003012:	4603      	mov	r3, r0
 8003014:	431c      	orrs	r4, r3
 8003016:	483c      	ldr	r0, [pc, #240]	; (8003108 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003018:	f7ff ff4e 	bl	8002eb8 <LL_ADC_IsEnabled>
 800301c:	4603      	mov	r3, r0
 800301e:	4323      	orrs	r3, r4
 8003020:	2b00      	cmp	r3, #0
 8003022:	bf0c      	ite	eq
 8003024:	2301      	moveq	r3, #1
 8003026:	2300      	movne	r3, #0
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d056      	beq.n	80030dc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800302e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003036:	f023 030f 	bic.w	r3, r3, #15
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	6811      	ldr	r1, [r2, #0]
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	6892      	ldr	r2, [r2, #8]
 8003042:	430a      	orrs	r2, r1
 8003044:	431a      	orrs	r2, r3
 8003046:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003048:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800304a:	e047      	b.n	80030dc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800304c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003054:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003056:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003060:	d004      	beq.n	800306c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a23      	ldr	r2, [pc, #140]	; (80030f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d10f      	bne.n	800308c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800306c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003070:	f7ff ff22 	bl	8002eb8 <LL_ADC_IsEnabled>
 8003074:	4604      	mov	r4, r0
 8003076:	481f      	ldr	r0, [pc, #124]	; (80030f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003078:	f7ff ff1e 	bl	8002eb8 <LL_ADC_IsEnabled>
 800307c:	4603      	mov	r3, r0
 800307e:	4323      	orrs	r3, r4
 8003080:	2b00      	cmp	r3, #0
 8003082:	bf0c      	ite	eq
 8003084:	2301      	moveq	r3, #1
 8003086:	2300      	movne	r3, #0
 8003088:	b2db      	uxtb	r3, r3
 800308a:	e012      	b.n	80030b2 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 800308c:	481a      	ldr	r0, [pc, #104]	; (80030f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800308e:	f7ff ff13 	bl	8002eb8 <LL_ADC_IsEnabled>
 8003092:	4604      	mov	r4, r0
 8003094:	4819      	ldr	r0, [pc, #100]	; (80030fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003096:	f7ff ff0f 	bl	8002eb8 <LL_ADC_IsEnabled>
 800309a:	4603      	mov	r3, r0
 800309c:	431c      	orrs	r4, r3
 800309e:	481a      	ldr	r0, [pc, #104]	; (8003108 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80030a0:	f7ff ff0a 	bl	8002eb8 <LL_ADC_IsEnabled>
 80030a4:	4603      	mov	r3, r0
 80030a6:	4323      	orrs	r3, r4
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	bf0c      	ite	eq
 80030ac:	2301      	moveq	r3, #1
 80030ae:	2300      	movne	r3, #0
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d012      	beq.n	80030dc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80030b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80030be:	f023 030f 	bic.w	r3, r3, #15
 80030c2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80030c4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80030c6:	e009      	b.n	80030dc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030cc:	f043 0220 	orr.w	r2, r3, #32
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80030da:	e000      	b.n	80030de <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80030dc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80030e6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3784      	adds	r7, #132	; 0x84
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd90      	pop	{r4, r7, pc}
 80030f2:	bf00      	nop
 80030f4:	50000100 	.word	0x50000100
 80030f8:	50000400 	.word	0x50000400
 80030fc:	50000500 	.word	0x50000500
 8003100:	50000300 	.word	0x50000300
 8003104:	50000700 	.word	0x50000700
 8003108:	50000600 	.word	0x50000600

0800310c <LL_EXTI_EnableIT_0_31>:
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003114:	4b05      	ldr	r3, [pc, #20]	; (800312c <LL_EXTI_EnableIT_0_31+0x20>)
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	4904      	ldr	r1, [pc, #16]	; (800312c <LL_EXTI_EnableIT_0_31+0x20>)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4313      	orrs	r3, r2
 800311e:	600b      	str	r3, [r1, #0]
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	40010400 	.word	0x40010400

08003130 <LL_EXTI_EnableIT_32_63>:
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003138:	4b05      	ldr	r3, [pc, #20]	; (8003150 <LL_EXTI_EnableIT_32_63+0x20>)
 800313a:	6a1a      	ldr	r2, [r3, #32]
 800313c:	4904      	ldr	r1, [pc, #16]	; (8003150 <LL_EXTI_EnableIT_32_63+0x20>)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4313      	orrs	r3, r2
 8003142:	620b      	str	r3, [r1, #32]
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr
 8003150:	40010400 	.word	0x40010400

08003154 <LL_EXTI_DisableIT_0_31>:
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800315c:	4b06      	ldr	r3, [pc, #24]	; (8003178 <LL_EXTI_DisableIT_0_31+0x24>)
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	43db      	mvns	r3, r3
 8003164:	4904      	ldr	r1, [pc, #16]	; (8003178 <LL_EXTI_DisableIT_0_31+0x24>)
 8003166:	4013      	ands	r3, r2
 8003168:	600b      	str	r3, [r1, #0]
}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	40010400 	.word	0x40010400

0800317c <LL_EXTI_DisableIT_32_63>:
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8003184:	4b06      	ldr	r3, [pc, #24]	; (80031a0 <LL_EXTI_DisableIT_32_63+0x24>)
 8003186:	6a1a      	ldr	r2, [r3, #32]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	43db      	mvns	r3, r3
 800318c:	4904      	ldr	r1, [pc, #16]	; (80031a0 <LL_EXTI_DisableIT_32_63+0x24>)
 800318e:	4013      	ands	r3, r2
 8003190:	620b      	str	r3, [r1, #32]
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	40010400 	.word	0x40010400

080031a4 <LL_EXTI_EnableEvent_0_31>:
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80031ac:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80031ae:	685a      	ldr	r2, [r3, #4]
 80031b0:	4904      	ldr	r1, [pc, #16]	; (80031c4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	604b      	str	r3, [r1, #4]
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	40010400 	.word	0x40010400

080031c8 <LL_EXTI_EnableEvent_32_63>:
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80031d0:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <LL_EXTI_EnableEvent_32_63+0x20>)
 80031d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031d4:	4904      	ldr	r1, [pc, #16]	; (80031e8 <LL_EXTI_EnableEvent_32_63+0x20>)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4313      	orrs	r3, r2
 80031da:	624b      	str	r3, [r1, #36]	; 0x24
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	40010400 	.word	0x40010400

080031ec <LL_EXTI_DisableEvent_0_31>:
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80031f4:	4b06      	ldr	r3, [pc, #24]	; (8003210 <LL_EXTI_DisableEvent_0_31+0x24>)
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	43db      	mvns	r3, r3
 80031fc:	4904      	ldr	r1, [pc, #16]	; (8003210 <LL_EXTI_DisableEvent_0_31+0x24>)
 80031fe:	4013      	ands	r3, r2
 8003200:	604b      	str	r3, [r1, #4]
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	40010400 	.word	0x40010400

08003214 <LL_EXTI_DisableEvent_32_63>:
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800321c:	4b06      	ldr	r3, [pc, #24]	; (8003238 <LL_EXTI_DisableEvent_32_63+0x24>)
 800321e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	43db      	mvns	r3, r3
 8003224:	4904      	ldr	r1, [pc, #16]	; (8003238 <LL_EXTI_DisableEvent_32_63+0x24>)
 8003226:	4013      	ands	r3, r2
 8003228:	624b      	str	r3, [r1, #36]	; 0x24
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	40010400 	.word	0x40010400

0800323c <LL_EXTI_EnableRisingTrig_0_31>:
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8003244:	4b05      	ldr	r3, [pc, #20]	; (800325c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	4904      	ldr	r1, [pc, #16]	; (800325c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4313      	orrs	r3, r2
 800324e:	608b      	str	r3, [r1, #8]
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	40010400 	.word	0x40010400

08003260 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8003268:	4b05      	ldr	r3, [pc, #20]	; (8003280 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800326a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800326c:	4904      	ldr	r1, [pc, #16]	; (8003280 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4313      	orrs	r3, r2
 8003272:	628b      	str	r3, [r1, #40]	; 0x28
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr
 8003280:	40010400 	.word	0x40010400

08003284 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800328c:	4b06      	ldr	r3, [pc, #24]	; (80032a8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	43db      	mvns	r3, r3
 8003294:	4904      	ldr	r1, [pc, #16]	; (80032a8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003296:	4013      	ands	r3, r2
 8003298:	608b      	str	r3, [r1, #8]
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	40010400 	.word	0x40010400

080032ac <LL_EXTI_DisableRisingTrig_32_63>:
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80032b4:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80032b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	43db      	mvns	r3, r3
 80032bc:	4904      	ldr	r1, [pc, #16]	; (80032d0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80032be:	4013      	ands	r3, r2
 80032c0:	628b      	str	r3, [r1, #40]	; 0x28
}
 80032c2:	bf00      	nop
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	40010400 	.word	0x40010400

080032d4 <LL_EXTI_EnableFallingTrig_0_31>:
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80032dc:	4b05      	ldr	r3, [pc, #20]	; (80032f4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80032de:	68da      	ldr	r2, [r3, #12]
 80032e0:	4904      	ldr	r1, [pc, #16]	; (80032f4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	60cb      	str	r3, [r1, #12]
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	40010400 	.word	0x40010400

080032f8 <LL_EXTI_EnableFallingTrig_32_63>:
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8003300:	4b05      	ldr	r3, [pc, #20]	; (8003318 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8003302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003304:	4904      	ldr	r1, [pc, #16]	; (8003318 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4313      	orrs	r3, r2
 800330a:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	40010400 	.word	0x40010400

0800331c <LL_EXTI_DisableFallingTrig_0_31>:
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8003324:	4b06      	ldr	r3, [pc, #24]	; (8003340 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003326:	68da      	ldr	r2, [r3, #12]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	43db      	mvns	r3, r3
 800332c:	4904      	ldr	r1, [pc, #16]	; (8003340 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800332e:	4013      	ands	r3, r2
 8003330:	60cb      	str	r3, [r1, #12]
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	40010400 	.word	0x40010400

08003344 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800334c:	4b06      	ldr	r3, [pc, #24]	; (8003368 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800334e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	43db      	mvns	r3, r3
 8003354:	4904      	ldr	r1, [pc, #16]	; (8003368 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8003356:	4013      	ands	r3, r2
 8003358:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	40010400 	.word	0x40010400

0800336c <LL_EXTI_ClearFlag_0_31>:
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8003374:	4a04      	ldr	r2, [pc, #16]	; (8003388 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6153      	str	r3, [r2, #20]
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	40010400 	.word	0x40010400

0800338c <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8003394:	4a04      	ldr	r2, [pc, #16]	; (80033a8 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6353      	str	r3, [r2, #52]	; 0x34
}
 800339a:	bf00      	nop
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	40010400 	.word	0x40010400

080033ac <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b088      	sub	sp, #32
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80033b4:	2300      	movs	r3, #0
 80033b6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80033b8:	2300      	movs	r3, #0
 80033ba:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d102      	bne.n	80033c8 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	77fb      	strb	r3, [r7, #31]
 80033c6:	e180      	b.n	80036ca <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033d6:	d102      	bne.n	80033de <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	77fb      	strb	r3, [r7, #31]
 80033dc:	e175      	b.n	80036ca <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	7f5b      	ldrb	r3, [r3, #29]
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d108      	bne.n	80033fa <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f7fd f8e5 	bl	80005c4 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003404:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8003420:	4313      	orrs	r3, r2
 8003422:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	4b98      	ldr	r3, [pc, #608]	; (800368c <HAL_COMP_Init+0x2e0>)
 800342c:	4013      	ands	r3, r2
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	6812      	ldr	r2, [r2, #0]
 8003432:	6979      	ldr	r1, [r7, #20]
 8003434:	430b      	orrs	r3, r1
 8003436:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d015      	beq.n	8003472 <HAL_COMP_Init+0xc6>
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d112      	bne.n	8003472 <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800344c:	4b90      	ldr	r3, [pc, #576]	; (8003690 <HAL_COMP_Init+0x2e4>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	099b      	lsrs	r3, r3, #6
 8003452:	4a90      	ldr	r2, [pc, #576]	; (8003694 <HAL_COMP_Init+0x2e8>)
 8003454:	fba2 2303 	umull	r2, r3, r2, r3
 8003458:	099a      	lsrs	r2, r3, #6
 800345a:	4613      	mov	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4413      	add	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003464:	e002      	b.n	800346c <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	3b01      	subs	r3, #1
 800346a:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1f9      	bne.n	8003466 <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a88      	ldr	r2, [pc, #544]	; (8003698 <HAL_COMP_Init+0x2ec>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d028      	beq.n	80034ce <HAL_COMP_Init+0x122>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a86      	ldr	r2, [pc, #536]	; (800369c <HAL_COMP_Init+0x2f0>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d020      	beq.n	80034c8 <HAL_COMP_Init+0x11c>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a85      	ldr	r2, [pc, #532]	; (80036a0 <HAL_COMP_Init+0x2f4>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d018      	beq.n	80034c2 <HAL_COMP_Init+0x116>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a83      	ldr	r2, [pc, #524]	; (80036a4 <HAL_COMP_Init+0x2f8>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d010      	beq.n	80034bc <HAL_COMP_Init+0x110>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a82      	ldr	r2, [pc, #520]	; (80036a8 <HAL_COMP_Init+0x2fc>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d008      	beq.n	80034b6 <HAL_COMP_Init+0x10a>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a80      	ldr	r2, [pc, #512]	; (80036ac <HAL_COMP_Init+0x300>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d101      	bne.n	80034b2 <HAL_COMP_Init+0x106>
 80034ae:	2301      	movs	r3, #1
 80034b0:	e00f      	b.n	80034d2 <HAL_COMP_Init+0x126>
 80034b2:	2302      	movs	r3, #2
 80034b4:	e00d      	b.n	80034d2 <HAL_COMP_Init+0x126>
 80034b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80034ba:	e00a      	b.n	80034d2 <HAL_COMP_Init+0x126>
 80034bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034c0:	e007      	b.n	80034d2 <HAL_COMP_Init+0x126>
 80034c2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80034c6:	e004      	b.n	80034d2 <HAL_COMP_Init+0x126>
 80034c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80034cc:	e001      	b.n	80034d2 <HAL_COMP_Init+0x126>
 80034ce:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80034d2:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	f003 0303 	and.w	r3, r3, #3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 80b6 	beq.w	800364e <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	f003 0310 	and.w	r3, r3, #16
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d011      	beq.n	8003512 <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a6e      	ldr	r2, [pc, #440]	; (80036ac <HAL_COMP_Init+0x300>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d004      	beq.n	8003502 <HAL_COMP_Init+0x156>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a6c      	ldr	r2, [pc, #432]	; (80036b0 <HAL_COMP_Init+0x304>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d103      	bne.n	800350a <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8003502:	6938      	ldr	r0, [r7, #16]
 8003504:	f7ff feac 	bl	8003260 <LL_EXTI_EnableRisingTrig_32_63>
 8003508:	e014      	b.n	8003534 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800350a:	6938      	ldr	r0, [r7, #16]
 800350c:	f7ff fe96 	bl	800323c <LL_EXTI_EnableRisingTrig_0_31>
 8003510:	e010      	b.n	8003534 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a65      	ldr	r2, [pc, #404]	; (80036ac <HAL_COMP_Init+0x300>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d004      	beq.n	8003526 <HAL_COMP_Init+0x17a>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a63      	ldr	r2, [pc, #396]	; (80036b0 <HAL_COMP_Init+0x304>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d103      	bne.n	800352e <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8003526:	6938      	ldr	r0, [r7, #16]
 8003528:	f7ff fec0 	bl	80032ac <LL_EXTI_DisableRisingTrig_32_63>
 800352c:	e002      	b.n	8003534 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800352e:	6938      	ldr	r0, [r7, #16]
 8003530:	f7ff fea8 	bl	8003284 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	f003 0320 	and.w	r3, r3, #32
 800353c:	2b00      	cmp	r3, #0
 800353e:	d011      	beq.n	8003564 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a59      	ldr	r2, [pc, #356]	; (80036ac <HAL_COMP_Init+0x300>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d004      	beq.n	8003554 <HAL_COMP_Init+0x1a8>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a58      	ldr	r2, [pc, #352]	; (80036b0 <HAL_COMP_Init+0x304>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d103      	bne.n	800355c <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8003554:	6938      	ldr	r0, [r7, #16]
 8003556:	f7ff fecf 	bl	80032f8 <LL_EXTI_EnableFallingTrig_32_63>
 800355a:	e014      	b.n	8003586 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800355c:	6938      	ldr	r0, [r7, #16]
 800355e:	f7ff feb9 	bl	80032d4 <LL_EXTI_EnableFallingTrig_0_31>
 8003562:	e010      	b.n	8003586 <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a50      	ldr	r2, [pc, #320]	; (80036ac <HAL_COMP_Init+0x300>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d004      	beq.n	8003578 <HAL_COMP_Init+0x1cc>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a4f      	ldr	r2, [pc, #316]	; (80036b0 <HAL_COMP_Init+0x304>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d103      	bne.n	8003580 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8003578:	6938      	ldr	r0, [r7, #16]
 800357a:	f7ff fee3 	bl	8003344 <LL_EXTI_DisableFallingTrig_32_63>
 800357e:	e002      	b.n	8003586 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8003580:	6938      	ldr	r0, [r7, #16]
 8003582:	f7ff fecb 	bl	800331c <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a48      	ldr	r2, [pc, #288]	; (80036ac <HAL_COMP_Init+0x300>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d004      	beq.n	800359a <HAL_COMP_Init+0x1ee>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a46      	ldr	r2, [pc, #280]	; (80036b0 <HAL_COMP_Init+0x304>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d103      	bne.n	80035a2 <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 800359a:	6938      	ldr	r0, [r7, #16]
 800359c:	f7ff fef6 	bl	800338c <LL_EXTI_ClearFlag_32_63>
 80035a0:	e002      	b.n	80035a8 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 80035a2:	6938      	ldr	r0, [r7, #16]
 80035a4:	f7ff fee2 	bl	800336c <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d011      	beq.n	80035d8 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a3c      	ldr	r2, [pc, #240]	; (80036ac <HAL_COMP_Init+0x300>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d004      	beq.n	80035c8 <HAL_COMP_Init+0x21c>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a3b      	ldr	r2, [pc, #236]	; (80036b0 <HAL_COMP_Init+0x304>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d103      	bne.n	80035d0 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 80035c8:	6938      	ldr	r0, [r7, #16]
 80035ca:	f7ff fdfd 	bl	80031c8 <LL_EXTI_EnableEvent_32_63>
 80035ce:	e014      	b.n	80035fa <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 80035d0:	6938      	ldr	r0, [r7, #16]
 80035d2:	f7ff fde7 	bl	80031a4 <LL_EXTI_EnableEvent_0_31>
 80035d6:	e010      	b.n	80035fa <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a33      	ldr	r2, [pc, #204]	; (80036ac <HAL_COMP_Init+0x300>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d004      	beq.n	80035ec <HAL_COMP_Init+0x240>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a32      	ldr	r2, [pc, #200]	; (80036b0 <HAL_COMP_Init+0x304>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d103      	bne.n	80035f4 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 80035ec:	6938      	ldr	r0, [r7, #16]
 80035ee:	f7ff fe11 	bl	8003214 <LL_EXTI_DisableEvent_32_63>
 80035f2:	e002      	b.n	80035fa <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 80035f4:	6938      	ldr	r0, [r7, #16]
 80035f6:	f7ff fdf9 	bl	80031ec <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d011      	beq.n	800362a <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a28      	ldr	r2, [pc, #160]	; (80036ac <HAL_COMP_Init+0x300>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d004      	beq.n	800361a <HAL_COMP_Init+0x26e>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a26      	ldr	r2, [pc, #152]	; (80036b0 <HAL_COMP_Init+0x304>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d103      	bne.n	8003622 <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 800361a:	6938      	ldr	r0, [r7, #16]
 800361c:	f7ff fd88 	bl	8003130 <LL_EXTI_EnableIT_32_63>
 8003620:	e04b      	b.n	80036ba <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8003622:	6938      	ldr	r0, [r7, #16]
 8003624:	f7ff fd72 	bl	800310c <LL_EXTI_EnableIT_0_31>
 8003628:	e047      	b.n	80036ba <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a1f      	ldr	r2, [pc, #124]	; (80036ac <HAL_COMP_Init+0x300>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d004      	beq.n	800363e <HAL_COMP_Init+0x292>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a1d      	ldr	r2, [pc, #116]	; (80036b0 <HAL_COMP_Init+0x304>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d103      	bne.n	8003646 <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 800363e:	6938      	ldr	r0, [r7, #16]
 8003640:	f7ff fd9c 	bl	800317c <LL_EXTI_DisableIT_32_63>
 8003644:	e039      	b.n	80036ba <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8003646:	6938      	ldr	r0, [r7, #16]
 8003648:	f7ff fd84 	bl	8003154 <LL_EXTI_DisableIT_0_31>
 800364c:	e035      	b.n	80036ba <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a16      	ldr	r2, [pc, #88]	; (80036ac <HAL_COMP_Init+0x300>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d004      	beq.n	8003662 <HAL_COMP_Init+0x2b6>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a14      	ldr	r2, [pc, #80]	; (80036b0 <HAL_COMP_Init+0x304>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d103      	bne.n	800366a <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8003662:	6938      	ldr	r0, [r7, #16]
 8003664:	f7ff fdd6 	bl	8003214 <LL_EXTI_DisableEvent_32_63>
 8003668:	e002      	b.n	8003670 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 800366a:	6938      	ldr	r0, [r7, #16]
 800366c:	f7ff fdbe 	bl	80031ec <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a0d      	ldr	r2, [pc, #52]	; (80036ac <HAL_COMP_Init+0x300>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d004      	beq.n	8003684 <HAL_COMP_Init+0x2d8>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a0c      	ldr	r2, [pc, #48]	; (80036b0 <HAL_COMP_Init+0x304>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d117      	bne.n	80036b4 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8003684:	6938      	ldr	r0, [r7, #16]
 8003686:	f7ff fd79 	bl	800317c <LL_EXTI_DisableIT_32_63>
 800368a:	e016      	b.n	80036ba <HAL_COMP_Init+0x30e>
 800368c:	ff007e0f 	.word	0xff007e0f
 8003690:	200003d0 	.word	0x200003d0
 8003694:	053e2d63 	.word	0x053e2d63
 8003698:	40010200 	.word	0x40010200
 800369c:	40010204 	.word	0x40010204
 80036a0:	40010208 	.word	0x40010208
 80036a4:	4001020c 	.word	0x4001020c
 80036a8:	40010210 	.word	0x40010210
 80036ac:	40010214 	.word	0x40010214
 80036b0:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80036b4:	6938      	ldr	r0, [r7, #16]
 80036b6:	f7ff fd4d 	bl	8003154 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	7f5b      	ldrb	r3, [r3, #29]
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d102      	bne.n	80036ca <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 80036ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3720      	adds	r7, #32
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <__NVIC_SetPriorityGrouping>:
{
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f003 0307 	and.w	r3, r3, #7
 80036e2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036e4:	4b0c      	ldr	r3, [pc, #48]	; (8003718 <__NVIC_SetPriorityGrouping+0x44>)
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036f0:	4013      	ands	r3, r2
 80036f2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003706:	4a04      	ldr	r2, [pc, #16]	; (8003718 <__NVIC_SetPriorityGrouping+0x44>)
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	60d3      	str	r3, [r2, #12]
}
 800370c:	bf00      	nop
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr
 8003718:	e000ed00 	.word	0xe000ed00

0800371c <__NVIC_GetPriorityGrouping>:
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003720:	4b04      	ldr	r3, [pc, #16]	; (8003734 <__NVIC_GetPriorityGrouping+0x18>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	0a1b      	lsrs	r3, r3, #8
 8003726:	f003 0307 	and.w	r3, r3, #7
}
 800372a:	4618      	mov	r0, r3
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	e000ed00 	.word	0xe000ed00

08003738 <__NVIC_EnableIRQ>:
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	4603      	mov	r3, r0
 8003740:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003746:	2b00      	cmp	r3, #0
 8003748:	db0b      	blt.n	8003762 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800374a:	79fb      	ldrb	r3, [r7, #7]
 800374c:	f003 021f 	and.w	r2, r3, #31
 8003750:	4907      	ldr	r1, [pc, #28]	; (8003770 <__NVIC_EnableIRQ+0x38>)
 8003752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003756:	095b      	lsrs	r3, r3, #5
 8003758:	2001      	movs	r0, #1
 800375a:	fa00 f202 	lsl.w	r2, r0, r2
 800375e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	e000e100 	.word	0xe000e100

08003774 <__NVIC_SetPriority>:
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	4603      	mov	r3, r0
 800377c:	6039      	str	r1, [r7, #0]
 800377e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003784:	2b00      	cmp	r3, #0
 8003786:	db0a      	blt.n	800379e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	b2da      	uxtb	r2, r3
 800378c:	490c      	ldr	r1, [pc, #48]	; (80037c0 <__NVIC_SetPriority+0x4c>)
 800378e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003792:	0112      	lsls	r2, r2, #4
 8003794:	b2d2      	uxtb	r2, r2
 8003796:	440b      	add	r3, r1
 8003798:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800379c:	e00a      	b.n	80037b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	b2da      	uxtb	r2, r3
 80037a2:	4908      	ldr	r1, [pc, #32]	; (80037c4 <__NVIC_SetPriority+0x50>)
 80037a4:	79fb      	ldrb	r3, [r7, #7]
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	3b04      	subs	r3, #4
 80037ac:	0112      	lsls	r2, r2, #4
 80037ae:	b2d2      	uxtb	r2, r2
 80037b0:	440b      	add	r3, r1
 80037b2:	761a      	strb	r2, [r3, #24]
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr
 80037c0:	e000e100 	.word	0xe000e100
 80037c4:	e000ed00 	.word	0xe000ed00

080037c8 <NVIC_EncodePriority>:
{
 80037c8:	b480      	push	{r7}
 80037ca:	b089      	sub	sp, #36	; 0x24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f003 0307 	and.w	r3, r3, #7
 80037da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	f1c3 0307 	rsb	r3, r3, #7
 80037e2:	2b04      	cmp	r3, #4
 80037e4:	bf28      	it	cs
 80037e6:	2304      	movcs	r3, #4
 80037e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	3304      	adds	r3, #4
 80037ee:	2b06      	cmp	r3, #6
 80037f0:	d902      	bls.n	80037f8 <NVIC_EncodePriority+0x30>
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	3b03      	subs	r3, #3
 80037f6:	e000      	b.n	80037fa <NVIC_EncodePriority+0x32>
 80037f8:	2300      	movs	r3, #0
 80037fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	fa02 f303 	lsl.w	r3, r2, r3
 8003806:	43da      	mvns	r2, r3
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	401a      	ands	r2, r3
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003810:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	fa01 f303 	lsl.w	r3, r1, r3
 800381a:	43d9      	mvns	r1, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003820:	4313      	orrs	r3, r2
}
 8003822:	4618      	mov	r0, r3
 8003824:	3724      	adds	r7, #36	; 0x24
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
	...

08003830 <SysTick_Config>:
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	3b01      	subs	r3, #1
 800383c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003840:	d301      	bcc.n	8003846 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003842:	2301      	movs	r3, #1
 8003844:	e00f      	b.n	8003866 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003846:	4a0a      	ldr	r2, [pc, #40]	; (8003870 <SysTick_Config+0x40>)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	3b01      	subs	r3, #1
 800384c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800384e:	210f      	movs	r1, #15
 8003850:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003854:	f7ff ff8e 	bl	8003774 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003858:	4b05      	ldr	r3, [pc, #20]	; (8003870 <SysTick_Config+0x40>)
 800385a:	2200      	movs	r2, #0
 800385c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800385e:	4b04      	ldr	r3, [pc, #16]	; (8003870 <SysTick_Config+0x40>)
 8003860:	2207      	movs	r2, #7
 8003862:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	e000e010 	.word	0xe000e010

08003874 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f7ff ff29 	bl	80036d4 <__NVIC_SetPriorityGrouping>
}
 8003882:	bf00      	nop
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b086      	sub	sp, #24
 800388e:	af00      	add	r7, sp, #0
 8003890:	4603      	mov	r3, r0
 8003892:	60b9      	str	r1, [r7, #8]
 8003894:	607a      	str	r2, [r7, #4]
 8003896:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003898:	f7ff ff40 	bl	800371c <__NVIC_GetPriorityGrouping>
 800389c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	68b9      	ldr	r1, [r7, #8]
 80038a2:	6978      	ldr	r0, [r7, #20]
 80038a4:	f7ff ff90 	bl	80037c8 <NVIC_EncodePriority>
 80038a8:	4602      	mov	r2, r0
 80038aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ae:	4611      	mov	r1, r2
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7ff ff5f 	bl	8003774 <__NVIC_SetPriority>
}
 80038b6:	bf00      	nop
 80038b8:	3718      	adds	r7, #24
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b082      	sub	sp, #8
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	4603      	mov	r3, r0
 80038c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7ff ff33 	bl	8003738 <__NVIC_EnableIRQ>
}
 80038d2:	bf00      	nop
 80038d4:	3708      	adds	r7, #8
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b082      	sub	sp, #8
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7ff ffa4 	bl	8003830 <SysTick_Config>
 80038e8:	4603      	mov	r3, r0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b082      	sub	sp, #8
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d101      	bne.n	8003904 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e014      	b.n	800392e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	791b      	ldrb	r3, [r3, #4]
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d105      	bne.n	800391a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f7fc ff0b 	bl	8000730 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2202      	movs	r2, #2
 800391e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b082      	sub	sp, #8
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
 800393e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	795b      	ldrb	r3, [r3, #5]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d101      	bne.n	800394c <HAL_DAC_Start+0x16>
 8003948:	2302      	movs	r3, #2
 800394a:	e043      	b.n	80039d4 <HAL_DAC_Start+0x9e>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2202      	movs	r2, #2
 8003956:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6819      	ldr	r1, [r3, #0]
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	f003 0310 	and.w	r3, r3, #16
 8003964:	2201      	movs	r2, #1
 8003966:	409a      	lsls	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8003970:	2001      	movs	r0, #1
 8003972:	f7fe fb4d 	bl	8002010 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10f      	bne.n	800399c <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8003986:	2b02      	cmp	r3, #2
 8003988:	d11d      	bne.n	80039c6 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f042 0201 	orr.w	r2, r2, #1
 8003998:	605a      	str	r2, [r3, #4]
 800399a:	e014      	b.n	80039c6 <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	f003 0310 	and.w	r3, r3, #16
 80039ac:	2102      	movs	r1, #2
 80039ae:	fa01 f303 	lsl.w	r3, r1, r3
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d107      	bne.n	80039c6 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685a      	ldr	r2, [r3, #4]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f042 0202 	orr.w	r2, r2, #2
 80039c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3708      	adds	r7, #8
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
 80039e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80039ea:	2300      	movs	r3, #0
 80039ec:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	795b      	ldrb	r3, [r3, #5]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d101      	bne.n	80039fa <HAL_DAC_Start_DMA+0x1e>
 80039f6:	2302      	movs	r3, #2
 80039f8:	e0a1      	b.n	8003b3e <HAL_DAC_Start_DMA+0x162>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2201      	movs	r2, #1
 80039fe:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2202      	movs	r2, #2
 8003a04:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d12a      	bne.n	8003a62 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	4a4d      	ldr	r2, [pc, #308]	; (8003b48 <HAL_DAC_Start_DMA+0x16c>)
 8003a12:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	4a4c      	ldr	r2, [pc, #304]	; (8003b4c <HAL_DAC_Start_DMA+0x170>)
 8003a1a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	4a4b      	ldr	r2, [pc, #300]	; (8003b50 <HAL_DAC_Start_DMA+0x174>)
 8003a22:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a32:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003a34:	6a3b      	ldr	r3, [r7, #32]
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	d009      	beq.n	8003a4e <HAL_DAC_Start_DMA+0x72>
 8003a3a:	2b08      	cmp	r3, #8
 8003a3c:	d00c      	beq.n	8003a58 <HAL_DAC_Start_DMA+0x7c>
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d000      	beq.n	8003a44 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003a42:	e039      	b.n	8003ab8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	3308      	adds	r3, #8
 8003a4a:	613b      	str	r3, [r7, #16]
        break;
 8003a4c:	e034      	b.n	8003ab8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	330c      	adds	r3, #12
 8003a54:	613b      	str	r3, [r7, #16]
        break;
 8003a56:	e02f      	b.n	8003ab8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	3310      	adds	r3, #16
 8003a5e:	613b      	str	r3, [r7, #16]
        break;
 8003a60:	e02a      	b.n	8003ab8 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	4a3b      	ldr	r2, [pc, #236]	; (8003b54 <HAL_DAC_Start_DMA+0x178>)
 8003a68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	4a3a      	ldr	r2, [pc, #232]	; (8003b58 <HAL_DAC_Start_DMA+0x17c>)
 8003a70:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	4a39      	ldr	r2, [pc, #228]	; (8003b5c <HAL_DAC_Start_DMA+0x180>)
 8003a78:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003a88:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003a8a:	6a3b      	ldr	r3, [r7, #32]
 8003a8c:	2b04      	cmp	r3, #4
 8003a8e:	d009      	beq.n	8003aa4 <HAL_DAC_Start_DMA+0xc8>
 8003a90:	2b08      	cmp	r3, #8
 8003a92:	d00c      	beq.n	8003aae <HAL_DAC_Start_DMA+0xd2>
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d000      	beq.n	8003a9a <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003a98:	e00e      	b.n	8003ab8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	3314      	adds	r3, #20
 8003aa0:	613b      	str	r3, [r7, #16]
        break;
 8003aa2:	e009      	b.n	8003ab8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	3318      	adds	r3, #24
 8003aaa:	613b      	str	r3, [r7, #16]
        break;
 8003aac:	e004      	b.n	8003ab8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	331c      	adds	r3, #28
 8003ab4:	613b      	str	r3, [r7, #16]
        break;
 8003ab6:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d111      	bne.n	8003ae2 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003acc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6898      	ldr	r0, [r3, #8]
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	f000 fb66 	bl	80041a8 <HAL_DMA_Start_IT>
 8003adc:	4603      	mov	r3, r0
 8003ade:	75fb      	strb	r3, [r7, #23]
 8003ae0:	e010      	b.n	8003b04 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003af0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	68d8      	ldr	r0, [r3, #12]
 8003af6:	6879      	ldr	r1, [r7, #4]
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	f000 fb54 	bl	80041a8 <HAL_DMA_Start_IT>
 8003b00:	4603      	mov	r3, r0
 8003b02:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003b0a:	7dfb      	ldrb	r3, [r7, #23]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10f      	bne.n	8003b30 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6819      	ldr	r1, [r3, #0]
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	f003 0310 	and.w	r3, r3, #16
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	409a      	lsls	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8003b28:	2001      	movs	r0, #1
 8003b2a:	f7fe fa71 	bl	8002010 <HAL_Delay>
 8003b2e:	e005      	b.n	8003b3c <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	f043 0204 	orr.w	r2, r3, #4
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3718      	adds	r7, #24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	08003f45 	.word	0x08003f45
 8003b4c:	08003f67 	.word	0x08003f67
 8003b50:	08003f83 	.word	0x08003f83
 8003b54:	08003fed 	.word	0x08003fed
 8003b58:	0800400f 	.word	0x0800400f
 8003b5c:	0800402b 	.word	0x0800402b

08003b60 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b087      	sub	sp, #28
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
 8003b6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d105      	bne.n	8003b90 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4413      	add	r3, r2
 8003b8a:	3308      	adds	r3, #8
 8003b8c:	617b      	str	r3, [r7, #20]
 8003b8e:	e004      	b.n	8003b9a <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4413      	add	r3, r2
 8003b96:	3314      	adds	r3, #20
 8003b98:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	371c      	adds	r7, #28
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b08a      	sub	sp, #40	; 0x28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	795b      	ldrb	r3, [r3, #5]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d101      	bne.n	8003c08 <HAL_DAC_ConfigChannel+0x1c>
 8003c04:	2302      	movs	r3, #2
 8003c06:	e194      	b.n	8003f32 <HAL_DAC_ConfigChannel+0x346>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2202      	movs	r2, #2
 8003c12:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	2b04      	cmp	r3, #4
 8003c1a:	d174      	bne.n	8003d06 <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d137      	bne.n	8003c92 <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8003c22:	f7fe f9e9 	bl	8001ff8 <HAL_GetTick>
 8003c26:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003c28:	e011      	b.n	8003c4e <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003c2a:	f7fe f9e5 	bl	8001ff8 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d90a      	bls.n	8003c4e <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	f043 0208 	orr.w	r2, r3, #8
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2203      	movs	r2, #3
 8003c48:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e171      	b.n	8003f32 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1e6      	bne.n	8003c2a <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8003c5c:	2001      	movs	r0, #1
 8003c5e:	f7fe f9d7 	bl	8002010 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68ba      	ldr	r2, [r7, #8]
 8003c68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c6a:	641a      	str	r2, [r3, #64]	; 0x40
 8003c6c:	e01e      	b.n	8003cac <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003c6e:	f7fe f9c3 	bl	8001ff8 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d90a      	bls.n	8003c92 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	f043 0208 	orr.w	r2, r3, #8
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2203      	movs	r2, #3
 8003c8c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e14f      	b.n	8003f32 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	dbe8      	blt.n	8003c6e <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8003c9c:	2001      	movs	r0, #1
 8003c9e:	f7fe f9b7 	bl	8002010 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003caa:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f003 0310 	and.w	r3, r3, #16
 8003cb8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc0:	43db      	mvns	r3, r3
 8003cc2:	ea02 0103 	and.w	r1, r2, r3
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f003 0310 	and.w	r3, r3, #16
 8003cd0:	409a      	lsls	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f003 0310 	and.w	r3, r3, #16
 8003ce6:	21ff      	movs	r1, #255	; 0xff
 8003ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cec:	43db      	mvns	r3, r3
 8003cee:	ea02 0103 	and.w	r1, r2, r3
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f003 0310 	and.w	r3, r3, #16
 8003cfc:	409a      	lsls	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d11d      	bne.n	8003d4a <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d14:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f003 0310 	and.w	r3, r3, #16
 8003d1c:	221f      	movs	r2, #31
 8003d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d22:	43db      	mvns	r3, r3
 8003d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d26:	4013      	ands	r3, r2
 8003d28:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f003 0310 	and.w	r3, r3, #16
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d48:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d50:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f003 0310 	and.w	r3, r3, #16
 8003d58:	2207      	movs	r2, #7
 8003d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5e:	43db      	mvns	r3, r3
 8003d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d62:	4013      	ands	r3, r2
 8003d64:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d002      	beq.n	8003d78 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 8003d72:	2300      	movs	r3, #0
 8003d74:	623b      	str	r3, [r7, #32]
 8003d76:	e011      	b.n	8003d9c <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d002      	beq.n	8003d8a <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003d84:	2301      	movs	r3, #1
 8003d86:	623b      	str	r3, [r7, #32]
 8003d88:	e008      	b.n	8003d9c <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d102      	bne.n	8003d98 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003d92:	2301      	movs	r3, #1
 8003d94:	623b      	str	r3, [r7, #32]
 8003d96:	e001      	b.n	8003d9c <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	689a      	ldr	r2, [r3, #8]
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	6a3a      	ldr	r2, [r7, #32]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f003 0310 	and.w	r3, r3, #16
 8003db2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003db6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dba:	43db      	mvns	r3, r3
 8003dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	791b      	ldrb	r3, [r3, #4]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d102      	bne.n	8003dd0 <HAL_DAC_ConfigChannel+0x1e4>
 8003dca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dce:	e000      	b.n	8003dd2 <HAL_DAC_ConfigChannel+0x1e6>
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f003 0310 	and.w	r3, r3, #16
 8003dde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003de2:	fa02 f303 	lsl.w	r3, r2, r3
 8003de6:	43db      	mvns	r3, r3
 8003de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dea:	4013      	ands	r3, r2
 8003dec:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	795b      	ldrb	r3, [r3, #5]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d102      	bne.n	8003dfc <HAL_DAC_ConfigChannel+0x210>
 8003df6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003dfa:	e000      	b.n	8003dfe <HAL_DAC_ConfigChannel+0x212>
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003e0a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d114      	bne.n	8003e3e <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003e14:	f001 fa9e 	bl	8005354 <HAL_RCC_GetHCLKFreq>
 8003e18:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	4a47      	ldr	r2, [pc, #284]	; (8003f3c <HAL_DAC_ConfigChannel+0x350>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d904      	bls.n	8003e2c <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e28:	627b      	str	r3, [r7, #36]	; 0x24
 8003e2a:	e00d      	b.n	8003e48 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	4a44      	ldr	r2, [pc, #272]	; (8003f40 <HAL_DAC_ConfigChannel+0x354>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d909      	bls.n	8003e48 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e3c:	e004      	b.n	8003e48 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e44:	4313      	orrs	r3, r2
 8003e46:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f003 0310 	and.w	r3, r3, #16
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e56:	4313      	orrs	r3, r2
 8003e58:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6819      	ldr	r1, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f003 0310 	and.w	r3, r3, #16
 8003e6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e72:	fa02 f303 	lsl.w	r3, r2, r3
 8003e76:	43da      	mvns	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	400a      	ands	r2, r1
 8003e7e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f003 0310 	and.w	r3, r3, #16
 8003e8e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003e92:	fa02 f303 	lsl.w	r3, r2, r3
 8003e96:	43db      	mvns	r3, r3
 8003e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f003 0310 	and.w	r3, r3, #16
 8003eaa:	69ba      	ldr	r2, [r7, #24]
 8003eac:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ebc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	6819      	ldr	r1, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f003 0310 	and.w	r3, r3, #16
 8003eca:	22c0      	movs	r2, #192	; 0xc0
 8003ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed0:	43da      	mvns	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	400a      	ands	r2, r1
 8003ed8:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	089b      	lsrs	r3, r3, #2
 8003ee0:	f003 030f 	and.w	r3, r3, #15
 8003ee4:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	089b      	lsrs	r3, r3, #2
 8003eec:	021b      	lsls	r3, r3, #8
 8003eee:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f003 0310 	and.w	r3, r3, #16
 8003f04:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003f08:	fa01 f303 	lsl.w	r3, r1, r3
 8003f0c:	43db      	mvns	r3, r3
 8003f0e:	ea02 0103 	and.w	r1, r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f003 0310 	and.w	r3, r3, #16
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	409a      	lsls	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2201      	movs	r2, #1
 8003f28:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3728      	adds	r7, #40	; 0x28
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	09896800 	.word	0x09896800
 8003f40:	04c4b400 	.word	0x04c4b400

08003f44 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f50:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f7ff fe2c 	bl	8003bb0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	711a      	strb	r2, [r3, #4]
}
 8003f5e:	bf00      	nop
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b084      	sub	sp, #16
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f72:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f7ff fe25 	bl	8003bc4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003f7a:	bf00      	nop
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b084      	sub	sp, #16
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	f043 0204 	orr.w	r2, r3, #4
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f7ff fe1b 	bl	8003bd8 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	711a      	strb	r2, [r3, #4]
}
 8003fa8:	bf00      	nop
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f7ff ffd8 	bl	8003fb0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2201      	movs	r2, #1
 8004004:	711a      	strb	r2, [r3, #4]
}
 8004006:	bf00      	nop
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b084      	sub	sp, #16
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800401c:	68f8      	ldr	r0, [r7, #12]
 800401e:	f7ff ffd1 	bl	8003fc4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004022:	bf00      	nop
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}

0800402a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800402a:	b580      	push	{r7, lr}
 800402c:	b084      	sub	sp, #16
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004036:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	f043 0204 	orr.w	r2, r3, #4
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f7ff ffc7 	bl	8003fd8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2201      	movs	r2, #1
 800404e:	711a      	strb	r2, [r3, #4]
}
 8004050:	bf00      	nop
 8004052:	3710      	adds	r7, #16
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e08d      	b.n	8004186 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	461a      	mov	r2, r3
 8004070:	4b47      	ldr	r3, [pc, #284]	; (8004190 <HAL_DMA_Init+0x138>)
 8004072:	429a      	cmp	r2, r3
 8004074:	d80f      	bhi.n	8004096 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	461a      	mov	r2, r3
 800407c:	4b45      	ldr	r3, [pc, #276]	; (8004194 <HAL_DMA_Init+0x13c>)
 800407e:	4413      	add	r3, r2
 8004080:	4a45      	ldr	r2, [pc, #276]	; (8004198 <HAL_DMA_Init+0x140>)
 8004082:	fba2 2303 	umull	r2, r3, r2, r3
 8004086:	091b      	lsrs	r3, r3, #4
 8004088:	009a      	lsls	r2, r3, #2
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a42      	ldr	r2, [pc, #264]	; (800419c <HAL_DMA_Init+0x144>)
 8004092:	641a      	str	r2, [r3, #64]	; 0x40
 8004094:	e00e      	b.n	80040b4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	461a      	mov	r2, r3
 800409c:	4b40      	ldr	r3, [pc, #256]	; (80041a0 <HAL_DMA_Init+0x148>)
 800409e:	4413      	add	r3, r2
 80040a0:	4a3d      	ldr	r2, [pc, #244]	; (8004198 <HAL_DMA_Init+0x140>)
 80040a2:	fba2 2303 	umull	r2, r3, r2, r3
 80040a6:	091b      	lsrs	r3, r3, #4
 80040a8:	009a      	lsls	r2, r3, #2
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a3c      	ldr	r2, [pc, #240]	; (80041a4 <HAL_DMA_Init+0x14c>)
 80040b2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2202      	movs	r2, #2
 80040b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80040ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80040d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f9b6 	bl	8004478 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004114:	d102      	bne.n	800411c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004124:	b2d2      	uxtb	r2, r2
 8004126:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004130:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d010      	beq.n	800415c <HAL_DMA_Init+0x104>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	2b04      	cmp	r3, #4
 8004140:	d80c      	bhi.n	800415c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 f9d6 	bl	80044f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800414c:	2200      	movs	r2, #0
 800414e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004158:	605a      	str	r2, [r3, #4]
 800415a:	e008      	b.n	800416e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	40020407 	.word	0x40020407
 8004194:	bffdfff8 	.word	0xbffdfff8
 8004198:	cccccccd 	.word	0xcccccccd
 800419c:	40020000 	.word	0x40020000
 80041a0:	bffdfbf8 	.word	0xbffdfbf8
 80041a4:	40020400 	.word	0x40020400

080041a8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
 80041b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041b6:	2300      	movs	r3, #0
 80041b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d101      	bne.n	80041c8 <HAL_DMA_Start_IT+0x20>
 80041c4:	2302      	movs	r3, #2
 80041c6:	e066      	b.n	8004296 <HAL_DMA_Start_IT+0xee>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d155      	bne.n	8004288 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2202      	movs	r2, #2
 80041e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 0201 	bic.w	r2, r2, #1
 80041f8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	68b9      	ldr	r1, [r7, #8]
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f000 f8fb 	bl	80043fc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420a:	2b00      	cmp	r3, #0
 800420c:	d008      	beq.n	8004220 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f042 020e 	orr.w	r2, r2, #14
 800421c:	601a      	str	r2, [r3, #0]
 800421e:	e00f      	b.n	8004240 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 0204 	bic.w	r2, r2, #4
 800422e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f042 020a 	orr.w	r2, r2, #10
 800423e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d007      	beq.n	800425e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004258:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800425c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004262:	2b00      	cmp	r3, #0
 8004264:	d007      	beq.n	8004276 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004270:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004274:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f042 0201 	orr.w	r2, r2, #1
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	e005      	b.n	8004294 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004290:	2302      	movs	r3, #2
 8004292:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004294:	7dfb      	ldrb	r3, [r7, #23]
}
 8004296:	4618      	mov	r0, r3
 8004298:	3718      	adds	r7, #24
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b084      	sub	sp, #16
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ba:	f003 031f 	and.w	r3, r3, #31
 80042be:	2204      	movs	r2, #4
 80042c0:	409a      	lsls	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	4013      	ands	r3, r2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d026      	beq.n	8004318 <HAL_DMA_IRQHandler+0x7a>
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d021      	beq.n	8004318 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0320 	and.w	r3, r3, #32
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d107      	bne.n	80042f2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 0204 	bic.w	r2, r2, #4
 80042f0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f6:	f003 021f 	and.w	r2, r3, #31
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	2104      	movs	r1, #4
 8004300:	fa01 f202 	lsl.w	r2, r1, r2
 8004304:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430a:	2b00      	cmp	r3, #0
 800430c:	d071      	beq.n	80043f2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004316:	e06c      	b.n	80043f2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800431c:	f003 031f 	and.w	r3, r3, #31
 8004320:	2202      	movs	r2, #2
 8004322:	409a      	lsls	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	4013      	ands	r3, r2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d02e      	beq.n	800438a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d029      	beq.n	800438a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0320 	and.w	r3, r3, #32
 8004340:	2b00      	cmp	r3, #0
 8004342:	d10b      	bne.n	800435c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f022 020a 	bic.w	r2, r2, #10
 8004352:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004360:	f003 021f 	and.w	r2, r3, #31
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004368:	2102      	movs	r1, #2
 800436a:	fa01 f202 	lsl.w	r2, r1, r2
 800436e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437c:	2b00      	cmp	r3, #0
 800437e:	d038      	beq.n	80043f2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004388:	e033      	b.n	80043f2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438e:	f003 031f 	and.w	r3, r3, #31
 8004392:	2208      	movs	r2, #8
 8004394:	409a      	lsls	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	4013      	ands	r3, r2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d02a      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	f003 0308 	and.w	r3, r3, #8
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d025      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 020e 	bic.w	r2, r2, #14
 80043b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043bc:	f003 021f 	and.w	r2, r3, #31
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c4:	2101      	movs	r1, #1
 80043c6:	fa01 f202 	lsl.w	r2, r1, r2
 80043ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d004      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80043f2:	bf00      	nop
 80043f4:	bf00      	nop
}
 80043f6:	3710      	adds	r7, #16
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
 8004408:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004412:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004418:	2b00      	cmp	r3, #0
 800441a:	d004      	beq.n	8004426 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004424:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800442a:	f003 021f 	and.w	r2, r3, #31
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004432:	2101      	movs	r1, #1
 8004434:	fa01 f202 	lsl.w	r2, r1, r2
 8004438:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	2b10      	cmp	r3, #16
 8004448:	d108      	bne.n	800445c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800445a:	e007      	b.n	800446c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	60da      	str	r2, [r3, #12]
}
 800446c:	bf00      	nop
 800446e:	3714      	adds	r7, #20
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004478:	b480      	push	{r7}
 800447a:	b087      	sub	sp, #28
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	461a      	mov	r2, r3
 8004486:	4b16      	ldr	r3, [pc, #88]	; (80044e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004488:	429a      	cmp	r2, r3
 800448a:	d802      	bhi.n	8004492 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800448c:	4b15      	ldr	r3, [pc, #84]	; (80044e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800448e:	617b      	str	r3, [r7, #20]
 8004490:	e001      	b.n	8004496 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004492:	4b15      	ldr	r3, [pc, #84]	; (80044e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004494:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	3b08      	subs	r3, #8
 80044a2:	4a12      	ldr	r2, [pc, #72]	; (80044ec <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80044a4:	fba2 2303 	umull	r2, r3, r2, r3
 80044a8:	091b      	lsrs	r3, r3, #4
 80044aa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b0:	089b      	lsrs	r3, r3, #2
 80044b2:	009a      	lsls	r2, r3, #2
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	4413      	add	r3, r2
 80044b8:	461a      	mov	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a0b      	ldr	r2, [pc, #44]	; (80044f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80044c2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f003 031f 	and.w	r3, r3, #31
 80044ca:	2201      	movs	r2, #1
 80044cc:	409a      	lsls	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80044d2:	bf00      	nop
 80044d4:	371c      	adds	r7, #28
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	40020407 	.word	0x40020407
 80044e4:	40020800 	.word	0x40020800
 80044e8:	40020820 	.word	0x40020820
 80044ec:	cccccccd 	.word	0xcccccccd
 80044f0:	40020880 	.word	0x40020880

080044f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	b2db      	uxtb	r3, r3
 8004502:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	4b0b      	ldr	r3, [pc, #44]	; (8004534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004508:	4413      	add	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	461a      	mov	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a08      	ldr	r2, [pc, #32]	; (8004538 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004516:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	3b01      	subs	r3, #1
 800451c:	f003 031f 	and.w	r3, r3, #31
 8004520:	2201      	movs	r2, #1
 8004522:	409a      	lsls	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004528:	bf00      	nop
 800452a:	3714      	adds	r7, #20
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr
 8004534:	1000823f 	.word	0x1000823f
 8004538:	40020940 	.word	0x40020940

0800453c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800453c:	b480      	push	{r7}
 800453e:	b087      	sub	sp, #28
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004546:	2300      	movs	r3, #0
 8004548:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800454a:	e15a      	b.n	8004802 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	2101      	movs	r1, #1
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	fa01 f303 	lsl.w	r3, r1, r3
 8004558:	4013      	ands	r3, r2
 800455a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2b00      	cmp	r3, #0
 8004560:	f000 814c 	beq.w	80047fc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d00b      	beq.n	8004584 <HAL_GPIO_Init+0x48>
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	2b02      	cmp	r3, #2
 8004572:	d007      	beq.n	8004584 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004578:	2b11      	cmp	r3, #17
 800457a:	d003      	beq.n	8004584 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	2b12      	cmp	r3, #18
 8004582:	d130      	bne.n	80045e6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	005b      	lsls	r3, r3, #1
 800458e:	2203      	movs	r2, #3
 8004590:	fa02 f303 	lsl.w	r3, r2, r3
 8004594:	43db      	mvns	r3, r3
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	4013      	ands	r3, r2
 800459a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	68da      	ldr	r2, [r3, #12]
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	005b      	lsls	r3, r3, #1
 80045a4:	fa02 f303 	lsl.w	r3, r2, r3
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045ba:	2201      	movs	r2, #1
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	fa02 f303 	lsl.w	r3, r2, r3
 80045c2:	43db      	mvns	r3, r3
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	4013      	ands	r3, r2
 80045c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	091b      	lsrs	r3, r3, #4
 80045d0:	f003 0201 	and.w	r2, r3, #1
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	fa02 f303 	lsl.w	r3, r2, r3
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	4313      	orrs	r3, r2
 80045de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	005b      	lsls	r3, r3, #1
 80045f0:	2203      	movs	r2, #3
 80045f2:	fa02 f303 	lsl.w	r3, r2, r3
 80045f6:	43db      	mvns	r3, r3
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	4013      	ands	r3, r2
 80045fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	689a      	ldr	r2, [r3, #8]
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	fa02 f303 	lsl.w	r3, r2, r3
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	4313      	orrs	r3, r2
 800460e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	2b02      	cmp	r3, #2
 800461c:	d003      	beq.n	8004626 <HAL_GPIO_Init+0xea>
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2b12      	cmp	r3, #18
 8004624:	d123      	bne.n	800466e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	08da      	lsrs	r2, r3, #3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	3208      	adds	r2, #8
 800462e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004632:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	f003 0307 	and.w	r3, r3, #7
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	220f      	movs	r2, #15
 800463e:	fa02 f303 	lsl.w	r3, r2, r3
 8004642:	43db      	mvns	r3, r3
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	4013      	ands	r3, r2
 8004648:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	691a      	ldr	r2, [r3, #16]
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	fa02 f303 	lsl.w	r3, r2, r3
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	4313      	orrs	r3, r2
 800465e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	08da      	lsrs	r2, r3, #3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	3208      	adds	r2, #8
 8004668:	6939      	ldr	r1, [r7, #16]
 800466a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	005b      	lsls	r3, r3, #1
 8004678:	2203      	movs	r2, #3
 800467a:	fa02 f303 	lsl.w	r3, r2, r3
 800467e:	43db      	mvns	r3, r3
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	4013      	ands	r3, r2
 8004684:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f003 0203 	and.w	r2, r3, #3
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	fa02 f303 	lsl.w	r3, r2, r3
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	4313      	orrs	r3, r2
 800469a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f000 80a6 	beq.w	80047fc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046b0:	4b5b      	ldr	r3, [pc, #364]	; (8004820 <HAL_GPIO_Init+0x2e4>)
 80046b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046b4:	4a5a      	ldr	r2, [pc, #360]	; (8004820 <HAL_GPIO_Init+0x2e4>)
 80046b6:	f043 0301 	orr.w	r3, r3, #1
 80046ba:	6613      	str	r3, [r2, #96]	; 0x60
 80046bc:	4b58      	ldr	r3, [pc, #352]	; (8004820 <HAL_GPIO_Init+0x2e4>)
 80046be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	60bb      	str	r3, [r7, #8]
 80046c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046c8:	4a56      	ldr	r2, [pc, #344]	; (8004824 <HAL_GPIO_Init+0x2e8>)
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	089b      	lsrs	r3, r3, #2
 80046ce:	3302      	adds	r3, #2
 80046d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	f003 0303 	and.w	r3, r3, #3
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	220f      	movs	r2, #15
 80046e0:	fa02 f303 	lsl.w	r3, r2, r3
 80046e4:	43db      	mvns	r3, r3
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	4013      	ands	r3, r2
 80046ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80046f2:	d01f      	beq.n	8004734 <HAL_GPIO_Init+0x1f8>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a4c      	ldr	r2, [pc, #304]	; (8004828 <HAL_GPIO_Init+0x2ec>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d019      	beq.n	8004730 <HAL_GPIO_Init+0x1f4>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a4b      	ldr	r2, [pc, #300]	; (800482c <HAL_GPIO_Init+0x2f0>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d013      	beq.n	800472c <HAL_GPIO_Init+0x1f0>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a4a      	ldr	r2, [pc, #296]	; (8004830 <HAL_GPIO_Init+0x2f4>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d00d      	beq.n	8004728 <HAL_GPIO_Init+0x1ec>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a49      	ldr	r2, [pc, #292]	; (8004834 <HAL_GPIO_Init+0x2f8>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d007      	beq.n	8004724 <HAL_GPIO_Init+0x1e8>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a48      	ldr	r2, [pc, #288]	; (8004838 <HAL_GPIO_Init+0x2fc>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d101      	bne.n	8004720 <HAL_GPIO_Init+0x1e4>
 800471c:	2305      	movs	r3, #5
 800471e:	e00a      	b.n	8004736 <HAL_GPIO_Init+0x1fa>
 8004720:	2306      	movs	r3, #6
 8004722:	e008      	b.n	8004736 <HAL_GPIO_Init+0x1fa>
 8004724:	2304      	movs	r3, #4
 8004726:	e006      	b.n	8004736 <HAL_GPIO_Init+0x1fa>
 8004728:	2303      	movs	r3, #3
 800472a:	e004      	b.n	8004736 <HAL_GPIO_Init+0x1fa>
 800472c:	2302      	movs	r3, #2
 800472e:	e002      	b.n	8004736 <HAL_GPIO_Init+0x1fa>
 8004730:	2301      	movs	r3, #1
 8004732:	e000      	b.n	8004736 <HAL_GPIO_Init+0x1fa>
 8004734:	2300      	movs	r3, #0
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	f002 0203 	and.w	r2, r2, #3
 800473c:	0092      	lsls	r2, r2, #2
 800473e:	4093      	lsls	r3, r2
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	4313      	orrs	r3, r2
 8004744:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004746:	4937      	ldr	r1, [pc, #220]	; (8004824 <HAL_GPIO_Init+0x2e8>)
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	089b      	lsrs	r3, r3, #2
 800474c:	3302      	adds	r3, #2
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004754:	4b39      	ldr	r3, [pc, #228]	; (800483c <HAL_GPIO_Init+0x300>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	43db      	mvns	r3, r3
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	4013      	ands	r3, r2
 8004762:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d003      	beq.n	8004778 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	4313      	orrs	r3, r2
 8004776:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004778:	4a30      	ldr	r2, [pc, #192]	; (800483c <HAL_GPIO_Init+0x300>)
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800477e:	4b2f      	ldr	r3, [pc, #188]	; (800483c <HAL_GPIO_Init+0x300>)
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	43db      	mvns	r3, r3
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	4013      	ands	r3, r2
 800478c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d003      	beq.n	80047a2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	4313      	orrs	r3, r2
 80047a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80047a2:	4a26      	ldr	r2, [pc, #152]	; (800483c <HAL_GPIO_Init+0x300>)
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80047a8:	4b24      	ldr	r3, [pc, #144]	; (800483c <HAL_GPIO_Init+0x300>)
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	43db      	mvns	r3, r3
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	4013      	ands	r3, r2
 80047b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d003      	beq.n	80047cc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80047cc:	4a1b      	ldr	r2, [pc, #108]	; (800483c <HAL_GPIO_Init+0x300>)
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80047d2:	4b1a      	ldr	r3, [pc, #104]	; (800483c <HAL_GPIO_Init+0x300>)
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	43db      	mvns	r3, r3
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	4013      	ands	r3, r2
 80047e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80047f6:	4a11      	ldr	r2, [pc, #68]	; (800483c <HAL_GPIO_Init+0x300>)
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	3301      	adds	r3, #1
 8004800:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	fa22 f303 	lsr.w	r3, r2, r3
 800480c:	2b00      	cmp	r3, #0
 800480e:	f47f ae9d 	bne.w	800454c <HAL_GPIO_Init+0x10>
  }
}
 8004812:	bf00      	nop
 8004814:	371c      	adds	r7, #28
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	40021000 	.word	0x40021000
 8004824:	40010000 	.word	0x40010000
 8004828:	48000400 	.word	0x48000400
 800482c:	48000800 	.word	0x48000800
 8004830:	48000c00 	.word	0x48000c00
 8004834:	48001000 	.word	0x48001000
 8004838:	48001400 	.word	0x48001400
 800483c:	40010400 	.word	0x40010400

08004840 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	460b      	mov	r3, r1
 800484a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	691a      	ldr	r2, [r3, #16]
 8004850:	887b      	ldrh	r3, [r7, #2]
 8004852:	4013      	ands	r3, r2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d002      	beq.n	800485e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004858:	2301      	movs	r3, #1
 800485a:	73fb      	strb	r3, [r7, #15]
 800485c:	e001      	b.n	8004862 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800485e:	2300      	movs	r3, #0
 8004860:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004862:	7bfb      	ldrb	r3, [r7, #15]
}
 8004864:	4618      	mov	r0, r3
 8004866:	3714      	adds	r7, #20
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	460b      	mov	r3, r1
 800487a:	807b      	strh	r3, [r7, #2]
 800487c:	4613      	mov	r3, r2
 800487e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004880:	787b      	ldrb	r3, [r7, #1]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004886:	887a      	ldrh	r2, [r7, #2]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800488c:	e002      	b.n	8004894 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800488e:	887a      	ldrh	r2, [r7, #2]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004894:	bf00      	nop
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d141      	bne.n	8004932 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80048ae:	4b4b      	ldr	r3, [pc, #300]	; (80049dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80048b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048ba:	d131      	bne.n	8004920 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048bc:	4b47      	ldr	r3, [pc, #284]	; (80049dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048c2:	4a46      	ldr	r2, [pc, #280]	; (80049dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80048cc:	4b43      	ldr	r3, [pc, #268]	; (80049dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80048d4:	4a41      	ldr	r2, [pc, #260]	; (80049dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80048dc:	4b40      	ldr	r3, [pc, #256]	; (80049e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2232      	movs	r2, #50	; 0x32
 80048e2:	fb02 f303 	mul.w	r3, r2, r3
 80048e6:	4a3f      	ldr	r2, [pc, #252]	; (80049e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80048e8:	fba2 2303 	umull	r2, r3, r2, r3
 80048ec:	0c9b      	lsrs	r3, r3, #18
 80048ee:	3301      	adds	r3, #1
 80048f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048f2:	e002      	b.n	80048fa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	3b01      	subs	r3, #1
 80048f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048fa:	4b38      	ldr	r3, [pc, #224]	; (80049dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004902:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004906:	d102      	bne.n	800490e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1f2      	bne.n	80048f4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800490e:	4b33      	ldr	r3, [pc, #204]	; (80049dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800491a:	d158      	bne.n	80049ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e057      	b.n	80049d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004920:	4b2e      	ldr	r3, [pc, #184]	; (80049dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004922:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004926:	4a2d      	ldr	r2, [pc, #180]	; (80049dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004928:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800492c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004930:	e04d      	b.n	80049ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004938:	d141      	bne.n	80049be <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800493a:	4b28      	ldr	r3, [pc, #160]	; (80049dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004942:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004946:	d131      	bne.n	80049ac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004948:	4b24      	ldr	r3, [pc, #144]	; (80049dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800494a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800494e:	4a23      	ldr	r2, [pc, #140]	; (80049dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004954:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004958:	4b20      	ldr	r3, [pc, #128]	; (80049dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004960:	4a1e      	ldr	r2, [pc, #120]	; (80049dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004962:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004966:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004968:	4b1d      	ldr	r3, [pc, #116]	; (80049e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2232      	movs	r2, #50	; 0x32
 800496e:	fb02 f303 	mul.w	r3, r2, r3
 8004972:	4a1c      	ldr	r2, [pc, #112]	; (80049e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004974:	fba2 2303 	umull	r2, r3, r2, r3
 8004978:	0c9b      	lsrs	r3, r3, #18
 800497a:	3301      	adds	r3, #1
 800497c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800497e:	e002      	b.n	8004986 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	3b01      	subs	r3, #1
 8004984:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004986:	4b15      	ldr	r3, [pc, #84]	; (80049dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800498e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004992:	d102      	bne.n	800499a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1f2      	bne.n	8004980 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800499a:	4b10      	ldr	r3, [pc, #64]	; (80049dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049a6:	d112      	bne.n	80049ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e011      	b.n	80049d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80049ac:	4b0b      	ldr	r3, [pc, #44]	; (80049dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049b2:	4a0a      	ldr	r2, [pc, #40]	; (80049dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80049bc:	e007      	b.n	80049ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80049be:	4b07      	ldr	r3, [pc, #28]	; (80049dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80049c6:	4a05      	ldr	r2, [pc, #20]	; (80049dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049cc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3714      	adds	r7, #20
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr
 80049dc:	40007000 	.word	0x40007000
 80049e0:	200003d0 	.word	0x200003d0
 80049e4:	431bde83 	.word	0x431bde83

080049e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b088      	sub	sp, #32
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e308      	b.n	800500c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d075      	beq.n	8004af2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a06:	4ba3      	ldr	r3, [pc, #652]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f003 030c 	and.w	r3, r3, #12
 8004a0e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a10:	4ba0      	ldr	r3, [pc, #640]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	f003 0303 	and.w	r3, r3, #3
 8004a18:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	2b0c      	cmp	r3, #12
 8004a1e:	d102      	bne.n	8004a26 <HAL_RCC_OscConfig+0x3e>
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	2b03      	cmp	r3, #3
 8004a24:	d002      	beq.n	8004a2c <HAL_RCC_OscConfig+0x44>
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	2b08      	cmp	r3, #8
 8004a2a:	d10b      	bne.n	8004a44 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a2c:	4b99      	ldr	r3, [pc, #612]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d05b      	beq.n	8004af0 <HAL_RCC_OscConfig+0x108>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d157      	bne.n	8004af0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e2e3      	b.n	800500c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a4c:	d106      	bne.n	8004a5c <HAL_RCC_OscConfig+0x74>
 8004a4e:	4b91      	ldr	r3, [pc, #580]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a90      	ldr	r2, [pc, #576]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a58:	6013      	str	r3, [r2, #0]
 8004a5a:	e01d      	b.n	8004a98 <HAL_RCC_OscConfig+0xb0>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a64:	d10c      	bne.n	8004a80 <HAL_RCC_OscConfig+0x98>
 8004a66:	4b8b      	ldr	r3, [pc, #556]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a8a      	ldr	r2, [pc, #552]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004a6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a70:	6013      	str	r3, [r2, #0]
 8004a72:	4b88      	ldr	r3, [pc, #544]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a87      	ldr	r2, [pc, #540]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a7c:	6013      	str	r3, [r2, #0]
 8004a7e:	e00b      	b.n	8004a98 <HAL_RCC_OscConfig+0xb0>
 8004a80:	4b84      	ldr	r3, [pc, #528]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a83      	ldr	r2, [pc, #524]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a8a:	6013      	str	r3, [r2, #0]
 8004a8c:	4b81      	ldr	r3, [pc, #516]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a80      	ldr	r2, [pc, #512]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004a92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d013      	beq.n	8004ac8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa0:	f7fd faaa 	bl	8001ff8 <HAL_GetTick>
 8004aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004aa6:	e008      	b.n	8004aba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004aa8:	f7fd faa6 	bl	8001ff8 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b64      	cmp	r3, #100	; 0x64
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e2a8      	b.n	800500c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004aba:	4b76      	ldr	r3, [pc, #472]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d0f0      	beq.n	8004aa8 <HAL_RCC_OscConfig+0xc0>
 8004ac6:	e014      	b.n	8004af2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac8:	f7fd fa96 	bl	8001ff8 <HAL_GetTick>
 8004acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ace:	e008      	b.n	8004ae2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ad0:	f7fd fa92 	bl	8001ff8 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b64      	cmp	r3, #100	; 0x64
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e294      	b.n	800500c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ae2:	4b6c      	ldr	r3, [pc, #432]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1f0      	bne.n	8004ad0 <HAL_RCC_OscConfig+0xe8>
 8004aee:	e000      	b.n	8004af2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d075      	beq.n	8004bea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004afe:	4b65      	ldr	r3, [pc, #404]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f003 030c 	and.w	r3, r3, #12
 8004b06:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b08:	4b62      	ldr	r3, [pc, #392]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	f003 0303 	and.w	r3, r3, #3
 8004b10:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	2b0c      	cmp	r3, #12
 8004b16:	d102      	bne.n	8004b1e <HAL_RCC_OscConfig+0x136>
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d002      	beq.n	8004b24 <HAL_RCC_OscConfig+0x13c>
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	2b04      	cmp	r3, #4
 8004b22:	d11f      	bne.n	8004b64 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b24:	4b5b      	ldr	r3, [pc, #364]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d005      	beq.n	8004b3c <HAL_RCC_OscConfig+0x154>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d101      	bne.n	8004b3c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e267      	b.n	800500c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b3c:	4b55      	ldr	r3, [pc, #340]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	061b      	lsls	r3, r3, #24
 8004b4a:	4952      	ldr	r1, [pc, #328]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004b50:	4b51      	ldr	r3, [pc, #324]	; (8004c98 <HAL_RCC_OscConfig+0x2b0>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7fd fa03 	bl	8001f60 <HAL_InitTick>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d043      	beq.n	8004be8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e253      	b.n	800500c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d023      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b6c:	4b49      	ldr	r3, [pc, #292]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a48      	ldr	r2, [pc, #288]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b78:	f7fd fa3e 	bl	8001ff8 <HAL_GetTick>
 8004b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b7e:	e008      	b.n	8004b92 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b80:	f7fd fa3a 	bl	8001ff8 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e23c      	b.n	800500c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b92:	4b40      	ldr	r3, [pc, #256]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d0f0      	beq.n	8004b80 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b9e:	4b3d      	ldr	r3, [pc, #244]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	061b      	lsls	r3, r3, #24
 8004bac:	4939      	ldr	r1, [pc, #228]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	604b      	str	r3, [r1, #4]
 8004bb2:	e01a      	b.n	8004bea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bb4:	4b37      	ldr	r3, [pc, #220]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a36      	ldr	r2, [pc, #216]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004bba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc0:	f7fd fa1a 	bl	8001ff8 <HAL_GetTick>
 8004bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bc6:	e008      	b.n	8004bda <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bc8:	f7fd fa16 	bl	8001ff8 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d901      	bls.n	8004bda <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e218      	b.n	800500c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bda:	4b2e      	ldr	r3, [pc, #184]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1f0      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x1e0>
 8004be6:	e000      	b.n	8004bea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004be8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0308 	and.w	r3, r3, #8
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d03c      	beq.n	8004c70 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d01c      	beq.n	8004c38 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bfe:	4b25      	ldr	r3, [pc, #148]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004c00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c04:	4a23      	ldr	r2, [pc, #140]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004c06:	f043 0301 	orr.w	r3, r3, #1
 8004c0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c0e:	f7fd f9f3 	bl	8001ff8 <HAL_GetTick>
 8004c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c14:	e008      	b.n	8004c28 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c16:	f7fd f9ef 	bl	8001ff8 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d901      	bls.n	8004c28 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e1f1      	b.n	800500c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c28:	4b1a      	ldr	r3, [pc, #104]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d0ef      	beq.n	8004c16 <HAL_RCC_OscConfig+0x22e>
 8004c36:	e01b      	b.n	8004c70 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c38:	4b16      	ldr	r3, [pc, #88]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c3e:	4a15      	ldr	r2, [pc, #84]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004c40:	f023 0301 	bic.w	r3, r3, #1
 8004c44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c48:	f7fd f9d6 	bl	8001ff8 <HAL_GetTick>
 8004c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c4e:	e008      	b.n	8004c62 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c50:	f7fd f9d2 	bl	8001ff8 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e1d4      	b.n	800500c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c62:	4b0c      	ldr	r3, [pc, #48]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c68:	f003 0302 	and.w	r3, r3, #2
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1ef      	bne.n	8004c50 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0304 	and.w	r3, r3, #4
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f000 80ab 	beq.w	8004dd4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c82:	4b04      	ldr	r3, [pc, #16]	; (8004c94 <HAL_RCC_OscConfig+0x2ac>)
 8004c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d106      	bne.n	8004c9c <HAL_RCC_OscConfig+0x2b4>
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e005      	b.n	8004c9e <HAL_RCC_OscConfig+0x2b6>
 8004c92:	bf00      	nop
 8004c94:	40021000 	.word	0x40021000
 8004c98:	200003d4 	.word	0x200003d4
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00d      	beq.n	8004cbe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ca2:	4baf      	ldr	r3, [pc, #700]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca6:	4aae      	ldr	r2, [pc, #696]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cac:	6593      	str	r3, [r2, #88]	; 0x58
 8004cae:	4bac      	ldr	r3, [pc, #688]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cb6:	60fb      	str	r3, [r7, #12]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cbe:	4ba9      	ldr	r3, [pc, #676]	; (8004f64 <HAL_RCC_OscConfig+0x57c>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d118      	bne.n	8004cfc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cca:	4ba6      	ldr	r3, [pc, #664]	; (8004f64 <HAL_RCC_OscConfig+0x57c>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4aa5      	ldr	r2, [pc, #660]	; (8004f64 <HAL_RCC_OscConfig+0x57c>)
 8004cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cd6:	f7fd f98f 	bl	8001ff8 <HAL_GetTick>
 8004cda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cdc:	e008      	b.n	8004cf0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cde:	f7fd f98b 	bl	8001ff8 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d901      	bls.n	8004cf0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e18d      	b.n	800500c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cf0:	4b9c      	ldr	r3, [pc, #624]	; (8004f64 <HAL_RCC_OscConfig+0x57c>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d0f0      	beq.n	8004cde <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d108      	bne.n	8004d16 <HAL_RCC_OscConfig+0x32e>
 8004d04:	4b96      	ldr	r3, [pc, #600]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0a:	4a95      	ldr	r2, [pc, #596]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004d0c:	f043 0301 	orr.w	r3, r3, #1
 8004d10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d14:	e024      	b.n	8004d60 <HAL_RCC_OscConfig+0x378>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	2b05      	cmp	r3, #5
 8004d1c:	d110      	bne.n	8004d40 <HAL_RCC_OscConfig+0x358>
 8004d1e:	4b90      	ldr	r3, [pc, #576]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d24:	4a8e      	ldr	r2, [pc, #568]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004d26:	f043 0304 	orr.w	r3, r3, #4
 8004d2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d2e:	4b8c      	ldr	r3, [pc, #560]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d34:	4a8a      	ldr	r2, [pc, #552]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004d36:	f043 0301 	orr.w	r3, r3, #1
 8004d3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d3e:	e00f      	b.n	8004d60 <HAL_RCC_OscConfig+0x378>
 8004d40:	4b87      	ldr	r3, [pc, #540]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d46:	4a86      	ldr	r2, [pc, #536]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004d48:	f023 0301 	bic.w	r3, r3, #1
 8004d4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d50:	4b83      	ldr	r3, [pc, #524]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d56:	4a82      	ldr	r2, [pc, #520]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004d58:	f023 0304 	bic.w	r3, r3, #4
 8004d5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d016      	beq.n	8004d96 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d68:	f7fd f946 	bl	8001ff8 <HAL_GetTick>
 8004d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d6e:	e00a      	b.n	8004d86 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d70:	f7fd f942 	bl	8001ff8 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e142      	b.n	800500c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d86:	4b76      	ldr	r3, [pc, #472]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d8c:	f003 0302 	and.w	r3, r3, #2
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d0ed      	beq.n	8004d70 <HAL_RCC_OscConfig+0x388>
 8004d94:	e015      	b.n	8004dc2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d96:	f7fd f92f 	bl	8001ff8 <HAL_GetTick>
 8004d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d9c:	e00a      	b.n	8004db4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d9e:	f7fd f92b 	bl	8001ff8 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d901      	bls.n	8004db4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e12b      	b.n	800500c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004db4:	4b6a      	ldr	r3, [pc, #424]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d1ed      	bne.n	8004d9e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004dc2:	7ffb      	ldrb	r3, [r7, #31]
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d105      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dc8:	4b65      	ldr	r3, [pc, #404]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dcc:	4a64      	ldr	r2, [pc, #400]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004dce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dd2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0320 	and.w	r3, r3, #32
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d03c      	beq.n	8004e5a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d01c      	beq.n	8004e22 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004de8:	4b5d      	ldr	r3, [pc, #372]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004dea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004dee:	4a5c      	ldr	r2, [pc, #368]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004df0:	f043 0301 	orr.w	r3, r3, #1
 8004df4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df8:	f7fd f8fe 	bl	8001ff8 <HAL_GetTick>
 8004dfc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004dfe:	e008      	b.n	8004e12 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e00:	f7fd f8fa 	bl	8001ff8 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e0fc      	b.n	800500c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e12:	4b53      	ldr	r3, [pc, #332]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004e14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d0ef      	beq.n	8004e00 <HAL_RCC_OscConfig+0x418>
 8004e20:	e01b      	b.n	8004e5a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e22:	4b4f      	ldr	r3, [pc, #316]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004e24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e28:	4a4d      	ldr	r2, [pc, #308]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004e2a:	f023 0301 	bic.w	r3, r3, #1
 8004e2e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e32:	f7fd f8e1 	bl	8001ff8 <HAL_GetTick>
 8004e36:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e38:	e008      	b.n	8004e4c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e3a:	f7fd f8dd 	bl	8001ff8 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d901      	bls.n	8004e4c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e0df      	b.n	800500c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e4c:	4b44      	ldr	r3, [pc, #272]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004e4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1ef      	bne.n	8004e3a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	69db      	ldr	r3, [r3, #28]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	f000 80d3 	beq.w	800500a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e64:	4b3e      	ldr	r3, [pc, #248]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f003 030c 	and.w	r3, r3, #12
 8004e6c:	2b0c      	cmp	r3, #12
 8004e6e:	f000 808d 	beq.w	8004f8c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d15a      	bne.n	8004f30 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e7a:	4b39      	ldr	r3, [pc, #228]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a38      	ldr	r2, [pc, #224]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004e80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e86:	f7fd f8b7 	bl	8001ff8 <HAL_GetTick>
 8004e8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e8c:	e008      	b.n	8004ea0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e8e:	f7fd f8b3 	bl	8001ff8 <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d901      	bls.n	8004ea0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e0b5      	b.n	800500c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ea0:	4b2f      	ldr	r3, [pc, #188]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1f0      	bne.n	8004e8e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004eac:	4b2c      	ldr	r3, [pc, #176]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004eae:	68da      	ldr	r2, [r3, #12]
 8004eb0:	4b2d      	ldr	r3, [pc, #180]	; (8004f68 <HAL_RCC_OscConfig+0x580>)
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	6a11      	ldr	r1, [r2, #32]
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ebc:	3a01      	subs	r2, #1
 8004ebe:	0112      	lsls	r2, r2, #4
 8004ec0:	4311      	orrs	r1, r2
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004ec6:	0212      	lsls	r2, r2, #8
 8004ec8:	4311      	orrs	r1, r2
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004ece:	0852      	lsrs	r2, r2, #1
 8004ed0:	3a01      	subs	r2, #1
 8004ed2:	0552      	lsls	r2, r2, #21
 8004ed4:	4311      	orrs	r1, r2
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004eda:	0852      	lsrs	r2, r2, #1
 8004edc:	3a01      	subs	r2, #1
 8004ede:	0652      	lsls	r2, r2, #25
 8004ee0:	4311      	orrs	r1, r2
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004ee6:	06d2      	lsls	r2, r2, #27
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	491d      	ldr	r1, [pc, #116]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ef0:	4b1b      	ldr	r3, [pc, #108]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a1a      	ldr	r2, [pc, #104]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004ef6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004efa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004efc:	4b18      	ldr	r3, [pc, #96]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	4a17      	ldr	r2, [pc, #92]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004f02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f06:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f08:	f7fd f876 	bl	8001ff8 <HAL_GetTick>
 8004f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f0e:	e008      	b.n	8004f22 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f10:	f7fd f872 	bl	8001ff8 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e074      	b.n	800500c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f22:	4b0f      	ldr	r3, [pc, #60]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d0f0      	beq.n	8004f10 <HAL_RCC_OscConfig+0x528>
 8004f2e:	e06c      	b.n	800500a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f30:	4b0b      	ldr	r3, [pc, #44]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a0a      	ldr	r2, [pc, #40]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004f36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f3a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004f3c:	4b08      	ldr	r3, [pc, #32]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	4a07      	ldr	r2, [pc, #28]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004f42:	f023 0303 	bic.w	r3, r3, #3
 8004f46:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004f48:	4b05      	ldr	r3, [pc, #20]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	4a04      	ldr	r2, [pc, #16]	; (8004f60 <HAL_RCC_OscConfig+0x578>)
 8004f4e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004f52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f56:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f58:	f7fd f84e 	bl	8001ff8 <HAL_GetTick>
 8004f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f5e:	e00e      	b.n	8004f7e <HAL_RCC_OscConfig+0x596>
 8004f60:	40021000 	.word	0x40021000
 8004f64:	40007000 	.word	0x40007000
 8004f68:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f6c:	f7fd f844 	bl	8001ff8 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e046      	b.n	800500c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f7e:	4b25      	ldr	r3, [pc, #148]	; (8005014 <HAL_RCC_OscConfig+0x62c>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1f0      	bne.n	8004f6c <HAL_RCC_OscConfig+0x584>
 8004f8a:	e03e      	b.n	800500a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	69db      	ldr	r3, [r3, #28]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d101      	bne.n	8004f98 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e039      	b.n	800500c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004f98:	4b1e      	ldr	r3, [pc, #120]	; (8005014 <HAL_RCC_OscConfig+0x62c>)
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f003 0203 	and.w	r2, r3, #3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a1b      	ldr	r3, [r3, #32]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d12c      	bne.n	8005006 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d123      	bne.n	8005006 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d11b      	bne.n	8005006 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d113      	bne.n	8005006 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe8:	085b      	lsrs	r3, r3, #1
 8004fea:	3b01      	subs	r3, #1
 8004fec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d109      	bne.n	8005006 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ffc:	085b      	lsrs	r3, r3, #1
 8004ffe:	3b01      	subs	r3, #1
 8005000:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005002:	429a      	cmp	r2, r3
 8005004:	d001      	beq.n	800500a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e000      	b.n	800500c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3720      	adds	r7, #32
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	40021000 	.word	0x40021000

08005018 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b086      	sub	sp, #24
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005022:	2300      	movs	r3, #0
 8005024:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d101      	bne.n	8005030 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e11e      	b.n	800526e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005030:	4b91      	ldr	r3, [pc, #580]	; (8005278 <HAL_RCC_ClockConfig+0x260>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 030f 	and.w	r3, r3, #15
 8005038:	683a      	ldr	r2, [r7, #0]
 800503a:	429a      	cmp	r2, r3
 800503c:	d910      	bls.n	8005060 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800503e:	4b8e      	ldr	r3, [pc, #568]	; (8005278 <HAL_RCC_ClockConfig+0x260>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f023 020f 	bic.w	r2, r3, #15
 8005046:	498c      	ldr	r1, [pc, #560]	; (8005278 <HAL_RCC_ClockConfig+0x260>)
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	4313      	orrs	r3, r2
 800504c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800504e:	4b8a      	ldr	r3, [pc, #552]	; (8005278 <HAL_RCC_ClockConfig+0x260>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 030f 	and.w	r3, r3, #15
 8005056:	683a      	ldr	r2, [r7, #0]
 8005058:	429a      	cmp	r2, r3
 800505a:	d001      	beq.n	8005060 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e106      	b.n	800526e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0301 	and.w	r3, r3, #1
 8005068:	2b00      	cmp	r3, #0
 800506a:	d073      	beq.n	8005154 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	2b03      	cmp	r3, #3
 8005072:	d129      	bne.n	80050c8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005074:	4b81      	ldr	r3, [pc, #516]	; (800527c <HAL_RCC_ClockConfig+0x264>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d101      	bne.n	8005084 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e0f4      	b.n	800526e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005084:	f000 f972 	bl	800536c <RCC_GetSysClockFreqFromPLLSource>
 8005088:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	4a7c      	ldr	r2, [pc, #496]	; (8005280 <HAL_RCC_ClockConfig+0x268>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d93f      	bls.n	8005112 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005092:	4b7a      	ldr	r3, [pc, #488]	; (800527c <HAL_RCC_ClockConfig+0x264>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d009      	beq.n	80050b2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d033      	beq.n	8005112 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d12f      	bne.n	8005112 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80050b2:	4b72      	ldr	r3, [pc, #456]	; (800527c <HAL_RCC_ClockConfig+0x264>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050ba:	4a70      	ldr	r2, [pc, #448]	; (800527c <HAL_RCC_ClockConfig+0x264>)
 80050bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050c0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80050c2:	2380      	movs	r3, #128	; 0x80
 80050c4:	617b      	str	r3, [r7, #20]
 80050c6:	e024      	b.n	8005112 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d107      	bne.n	80050e0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050d0:	4b6a      	ldr	r3, [pc, #424]	; (800527c <HAL_RCC_ClockConfig+0x264>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d109      	bne.n	80050f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e0c6      	b.n	800526e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050e0:	4b66      	ldr	r3, [pc, #408]	; (800527c <HAL_RCC_ClockConfig+0x264>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d101      	bne.n	80050f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e0be      	b.n	800526e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80050f0:	f000 f8ce 	bl	8005290 <HAL_RCC_GetSysClockFreq>
 80050f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	4a61      	ldr	r2, [pc, #388]	; (8005280 <HAL_RCC_ClockConfig+0x268>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d909      	bls.n	8005112 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80050fe:	4b5f      	ldr	r3, [pc, #380]	; (800527c <HAL_RCC_ClockConfig+0x264>)
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005106:	4a5d      	ldr	r2, [pc, #372]	; (800527c <HAL_RCC_ClockConfig+0x264>)
 8005108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800510c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800510e:	2380      	movs	r3, #128	; 0x80
 8005110:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005112:	4b5a      	ldr	r3, [pc, #360]	; (800527c <HAL_RCC_ClockConfig+0x264>)
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f023 0203 	bic.w	r2, r3, #3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	4957      	ldr	r1, [pc, #348]	; (800527c <HAL_RCC_ClockConfig+0x264>)
 8005120:	4313      	orrs	r3, r2
 8005122:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005124:	f7fc ff68 	bl	8001ff8 <HAL_GetTick>
 8005128:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800512a:	e00a      	b.n	8005142 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800512c:	f7fc ff64 	bl	8001ff8 <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	f241 3288 	movw	r2, #5000	; 0x1388
 800513a:	4293      	cmp	r3, r2
 800513c:	d901      	bls.n	8005142 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e095      	b.n	800526e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005142:	4b4e      	ldr	r3, [pc, #312]	; (800527c <HAL_RCC_ClockConfig+0x264>)
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f003 020c 	and.w	r2, r3, #12
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	429a      	cmp	r2, r3
 8005152:	d1eb      	bne.n	800512c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0302 	and.w	r3, r3, #2
 800515c:	2b00      	cmp	r3, #0
 800515e:	d023      	beq.n	80051a8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0304 	and.w	r3, r3, #4
 8005168:	2b00      	cmp	r3, #0
 800516a:	d005      	beq.n	8005178 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800516c:	4b43      	ldr	r3, [pc, #268]	; (800527c <HAL_RCC_ClockConfig+0x264>)
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	4a42      	ldr	r2, [pc, #264]	; (800527c <HAL_RCC_ClockConfig+0x264>)
 8005172:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005176:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0308 	and.w	r3, r3, #8
 8005180:	2b00      	cmp	r3, #0
 8005182:	d007      	beq.n	8005194 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005184:	4b3d      	ldr	r3, [pc, #244]	; (800527c <HAL_RCC_ClockConfig+0x264>)
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800518c:	4a3b      	ldr	r2, [pc, #236]	; (800527c <HAL_RCC_ClockConfig+0x264>)
 800518e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005192:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005194:	4b39      	ldr	r3, [pc, #228]	; (800527c <HAL_RCC_ClockConfig+0x264>)
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	4936      	ldr	r1, [pc, #216]	; (800527c <HAL_RCC_ClockConfig+0x264>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	608b      	str	r3, [r1, #8]
 80051a6:	e008      	b.n	80051ba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	2b80      	cmp	r3, #128	; 0x80
 80051ac:	d105      	bne.n	80051ba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80051ae:	4b33      	ldr	r3, [pc, #204]	; (800527c <HAL_RCC_ClockConfig+0x264>)
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	4a32      	ldr	r2, [pc, #200]	; (800527c <HAL_RCC_ClockConfig+0x264>)
 80051b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051b8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051ba:	4b2f      	ldr	r3, [pc, #188]	; (8005278 <HAL_RCC_ClockConfig+0x260>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 030f 	and.w	r3, r3, #15
 80051c2:	683a      	ldr	r2, [r7, #0]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d21d      	bcs.n	8005204 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051c8:	4b2b      	ldr	r3, [pc, #172]	; (8005278 <HAL_RCC_ClockConfig+0x260>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f023 020f 	bic.w	r2, r3, #15
 80051d0:	4929      	ldr	r1, [pc, #164]	; (8005278 <HAL_RCC_ClockConfig+0x260>)
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80051d8:	f7fc ff0e 	bl	8001ff8 <HAL_GetTick>
 80051dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051de:	e00a      	b.n	80051f6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051e0:	f7fc ff0a 	bl	8001ff8 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e03b      	b.n	800526e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051f6:	4b20      	ldr	r3, [pc, #128]	; (8005278 <HAL_RCC_ClockConfig+0x260>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 030f 	and.w	r3, r3, #15
 80051fe:	683a      	ldr	r2, [r7, #0]
 8005200:	429a      	cmp	r2, r3
 8005202:	d1ed      	bne.n	80051e0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0304 	and.w	r3, r3, #4
 800520c:	2b00      	cmp	r3, #0
 800520e:	d008      	beq.n	8005222 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005210:	4b1a      	ldr	r3, [pc, #104]	; (800527c <HAL_RCC_ClockConfig+0x264>)
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	4917      	ldr	r1, [pc, #92]	; (800527c <HAL_RCC_ClockConfig+0x264>)
 800521e:	4313      	orrs	r3, r2
 8005220:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0308 	and.w	r3, r3, #8
 800522a:	2b00      	cmp	r3, #0
 800522c:	d009      	beq.n	8005242 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800522e:	4b13      	ldr	r3, [pc, #76]	; (800527c <HAL_RCC_ClockConfig+0x264>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	00db      	lsls	r3, r3, #3
 800523c:	490f      	ldr	r1, [pc, #60]	; (800527c <HAL_RCC_ClockConfig+0x264>)
 800523e:	4313      	orrs	r3, r2
 8005240:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005242:	f000 f825 	bl	8005290 <HAL_RCC_GetSysClockFreq>
 8005246:	4601      	mov	r1, r0
 8005248:	4b0c      	ldr	r3, [pc, #48]	; (800527c <HAL_RCC_ClockConfig+0x264>)
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	091b      	lsrs	r3, r3, #4
 800524e:	f003 030f 	and.w	r3, r3, #15
 8005252:	4a0c      	ldr	r2, [pc, #48]	; (8005284 <HAL_RCC_ClockConfig+0x26c>)
 8005254:	5cd3      	ldrb	r3, [r2, r3]
 8005256:	f003 031f 	and.w	r3, r3, #31
 800525a:	fa21 f303 	lsr.w	r3, r1, r3
 800525e:	4a0a      	ldr	r2, [pc, #40]	; (8005288 <HAL_RCC_ClockConfig+0x270>)
 8005260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005262:	4b0a      	ldr	r3, [pc, #40]	; (800528c <HAL_RCC_ClockConfig+0x274>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4618      	mov	r0, r3
 8005268:	f7fc fe7a 	bl	8001f60 <HAL_InitTick>
 800526c:	4603      	mov	r3, r0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3718      	adds	r7, #24
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	40022000 	.word	0x40022000
 800527c:	40021000 	.word	0x40021000
 8005280:	04c4b400 	.word	0x04c4b400
 8005284:	08009538 	.word	0x08009538
 8005288:	200003d0 	.word	0x200003d0
 800528c:	200003d4 	.word	0x200003d4

08005290 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005290:	b480      	push	{r7}
 8005292:	b087      	sub	sp, #28
 8005294:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005296:	4b2c      	ldr	r3, [pc, #176]	; (8005348 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f003 030c 	and.w	r3, r3, #12
 800529e:	2b04      	cmp	r3, #4
 80052a0:	d102      	bne.n	80052a8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80052a2:	4b2a      	ldr	r3, [pc, #168]	; (800534c <HAL_RCC_GetSysClockFreq+0xbc>)
 80052a4:	613b      	str	r3, [r7, #16]
 80052a6:	e047      	b.n	8005338 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80052a8:	4b27      	ldr	r3, [pc, #156]	; (8005348 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f003 030c 	and.w	r3, r3, #12
 80052b0:	2b08      	cmp	r3, #8
 80052b2:	d102      	bne.n	80052ba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80052b4:	4b26      	ldr	r3, [pc, #152]	; (8005350 <HAL_RCC_GetSysClockFreq+0xc0>)
 80052b6:	613b      	str	r3, [r7, #16]
 80052b8:	e03e      	b.n	8005338 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80052ba:	4b23      	ldr	r3, [pc, #140]	; (8005348 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f003 030c 	and.w	r3, r3, #12
 80052c2:	2b0c      	cmp	r3, #12
 80052c4:	d136      	bne.n	8005334 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052c6:	4b20      	ldr	r3, [pc, #128]	; (8005348 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	f003 0303 	and.w	r3, r3, #3
 80052ce:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052d0:	4b1d      	ldr	r3, [pc, #116]	; (8005348 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	091b      	lsrs	r3, r3, #4
 80052d6:	f003 030f 	and.w	r3, r3, #15
 80052da:	3301      	adds	r3, #1
 80052dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2b03      	cmp	r3, #3
 80052e2:	d10c      	bne.n	80052fe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052e4:	4a1a      	ldr	r2, [pc, #104]	; (8005350 <HAL_RCC_GetSysClockFreq+0xc0>)
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ec:	4a16      	ldr	r2, [pc, #88]	; (8005348 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052ee:	68d2      	ldr	r2, [r2, #12]
 80052f0:	0a12      	lsrs	r2, r2, #8
 80052f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80052f6:	fb02 f303 	mul.w	r3, r2, r3
 80052fa:	617b      	str	r3, [r7, #20]
      break;
 80052fc:	e00c      	b.n	8005318 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052fe:	4a13      	ldr	r2, [pc, #76]	; (800534c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	fbb2 f3f3 	udiv	r3, r2, r3
 8005306:	4a10      	ldr	r2, [pc, #64]	; (8005348 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005308:	68d2      	ldr	r2, [r2, #12]
 800530a:	0a12      	lsrs	r2, r2, #8
 800530c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005310:	fb02 f303 	mul.w	r3, r2, r3
 8005314:	617b      	str	r3, [r7, #20]
      break;
 8005316:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005318:	4b0b      	ldr	r3, [pc, #44]	; (8005348 <HAL_RCC_GetSysClockFreq+0xb8>)
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	0e5b      	lsrs	r3, r3, #25
 800531e:	f003 0303 	and.w	r3, r3, #3
 8005322:	3301      	adds	r3, #1
 8005324:	005b      	lsls	r3, r3, #1
 8005326:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005330:	613b      	str	r3, [r7, #16]
 8005332:	e001      	b.n	8005338 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005334:	2300      	movs	r3, #0
 8005336:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005338:	693b      	ldr	r3, [r7, #16]
}
 800533a:	4618      	mov	r0, r3
 800533c:	371c      	adds	r7, #28
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	40021000 	.word	0x40021000
 800534c:	00f42400 	.word	0x00f42400
 8005350:	007a1200 	.word	0x007a1200

08005354 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005354:	b480      	push	{r7}
 8005356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005358:	4b03      	ldr	r3, [pc, #12]	; (8005368 <HAL_RCC_GetHCLKFreq+0x14>)
 800535a:	681b      	ldr	r3, [r3, #0]
}
 800535c:	4618      	mov	r0, r3
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	200003d0 	.word	0x200003d0

0800536c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800536c:	b480      	push	{r7}
 800536e:	b087      	sub	sp, #28
 8005370:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005372:	4b1e      	ldr	r3, [pc, #120]	; (80053ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	f003 0303 	and.w	r3, r3, #3
 800537a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800537c:	4b1b      	ldr	r3, [pc, #108]	; (80053ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	091b      	lsrs	r3, r3, #4
 8005382:	f003 030f 	and.w	r3, r3, #15
 8005386:	3301      	adds	r3, #1
 8005388:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	2b03      	cmp	r3, #3
 800538e:	d10c      	bne.n	80053aa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005390:	4a17      	ldr	r2, [pc, #92]	; (80053f0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	fbb2 f3f3 	udiv	r3, r2, r3
 8005398:	4a14      	ldr	r2, [pc, #80]	; (80053ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800539a:	68d2      	ldr	r2, [r2, #12]
 800539c:	0a12      	lsrs	r2, r2, #8
 800539e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80053a2:	fb02 f303 	mul.w	r3, r2, r3
 80053a6:	617b      	str	r3, [r7, #20]
    break;
 80053a8:	e00c      	b.n	80053c4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053aa:	4a12      	ldr	r2, [pc, #72]	; (80053f4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b2:	4a0e      	ldr	r2, [pc, #56]	; (80053ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053b4:	68d2      	ldr	r2, [r2, #12]
 80053b6:	0a12      	lsrs	r2, r2, #8
 80053b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80053bc:	fb02 f303 	mul.w	r3, r2, r3
 80053c0:	617b      	str	r3, [r7, #20]
    break;
 80053c2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80053c4:	4b09      	ldr	r3, [pc, #36]	; (80053ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	0e5b      	lsrs	r3, r3, #25
 80053ca:	f003 0303 	and.w	r3, r3, #3
 80053ce:	3301      	adds	r3, #1
 80053d0:	005b      	lsls	r3, r3, #1
 80053d2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053dc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80053de:	687b      	ldr	r3, [r7, #4]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	371c      	adds	r7, #28
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr
 80053ec:	40021000 	.word	0x40021000
 80053f0:	007a1200 	.word	0x007a1200
 80053f4:	00f42400 	.word	0x00f42400

080053f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005400:	2300      	movs	r3, #0
 8005402:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005404:	2300      	movs	r3, #0
 8005406:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005410:	2b00      	cmp	r3, #0
 8005412:	f000 8098 	beq.w	8005546 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005416:	2300      	movs	r3, #0
 8005418:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800541a:	4b43      	ldr	r3, [pc, #268]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800541c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800541e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10d      	bne.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005426:	4b40      	ldr	r3, [pc, #256]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800542a:	4a3f      	ldr	r2, [pc, #252]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800542c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005430:	6593      	str	r3, [r2, #88]	; 0x58
 8005432:	4b3d      	ldr	r3, [pc, #244]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800543a:	60bb      	str	r3, [r7, #8]
 800543c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800543e:	2301      	movs	r3, #1
 8005440:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005442:	4b3a      	ldr	r3, [pc, #232]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a39      	ldr	r2, [pc, #228]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800544c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800544e:	f7fc fdd3 	bl	8001ff8 <HAL_GetTick>
 8005452:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005454:	e009      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005456:	f7fc fdcf 	bl	8001ff8 <HAL_GetTick>
 800545a:	4602      	mov	r2, r0
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	2b02      	cmp	r3, #2
 8005462:	d902      	bls.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	74fb      	strb	r3, [r7, #19]
        break;
 8005468:	e005      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800546a:	4b30      	ldr	r3, [pc, #192]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005472:	2b00      	cmp	r3, #0
 8005474:	d0ef      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005476:	7cfb      	ldrb	r3, [r7, #19]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d159      	bne.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800547c:	4b2a      	ldr	r3, [pc, #168]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800547e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005486:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d01e      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005492:	697a      	ldr	r2, [r7, #20]
 8005494:	429a      	cmp	r2, r3
 8005496:	d019      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005498:	4b23      	ldr	r3, [pc, #140]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800549a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800549e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80054a4:	4b20      	ldr	r3, [pc, #128]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054aa:	4a1f      	ldr	r2, [pc, #124]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054b4:	4b1c      	ldr	r3, [pc, #112]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ba:	4a1b      	ldr	r2, [pc, #108]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80054c4:	4a18      	ldr	r2, [pc, #96]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d016      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d6:	f7fc fd8f 	bl	8001ff8 <HAL_GetTick>
 80054da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054dc:	e00b      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054de:	f7fc fd8b 	bl	8001ff8 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d902      	bls.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	74fb      	strb	r3, [r7, #19]
            break;
 80054f4:	e006      	b.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054f6:	4b0c      	ldr	r3, [pc, #48]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054fc:	f003 0302 	and.w	r3, r3, #2
 8005500:	2b00      	cmp	r3, #0
 8005502:	d0ec      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005504:	7cfb      	ldrb	r3, [r7, #19]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d10b      	bne.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800550a:	4b07      	ldr	r3, [pc, #28]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800550c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005510:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005518:	4903      	ldr	r1, [pc, #12]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800551a:	4313      	orrs	r3, r2
 800551c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005520:	e008      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005522:	7cfb      	ldrb	r3, [r7, #19]
 8005524:	74bb      	strb	r3, [r7, #18]
 8005526:	e005      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005528:	40021000 	.word	0x40021000
 800552c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005530:	7cfb      	ldrb	r3, [r7, #19]
 8005532:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005534:	7c7b      	ldrb	r3, [r7, #17]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d105      	bne.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800553a:	4baf      	ldr	r3, [pc, #700]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800553c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800553e:	4aae      	ldr	r2, [pc, #696]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005540:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005544:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00a      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005552:	4ba9      	ldr	r3, [pc, #676]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005558:	f023 0203 	bic.w	r2, r3, #3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	49a5      	ldr	r1, [pc, #660]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005562:	4313      	orrs	r3, r2
 8005564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	2b00      	cmp	r3, #0
 8005572:	d00a      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005574:	4ba0      	ldr	r3, [pc, #640]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800557a:	f023 020c 	bic.w	r2, r3, #12
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	499d      	ldr	r1, [pc, #628]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005584:	4313      	orrs	r3, r2
 8005586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0304 	and.w	r3, r3, #4
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00a      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005596:	4b98      	ldr	r3, [pc, #608]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800559c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	4994      	ldr	r1, [pc, #592]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0308 	and.w	r3, r3, #8
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d00a      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80055b8:	4b8f      	ldr	r3, [pc, #572]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	498c      	ldr	r1, [pc, #560]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0310 	and.w	r3, r3, #16
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00a      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80055da:	4b87      	ldr	r3, [pc, #540]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	695b      	ldr	r3, [r3, #20]
 80055e8:	4983      	ldr	r1, [pc, #524]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0320 	and.w	r3, r3, #32
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00a      	beq.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055fc:	4b7e      	ldr	r3, [pc, #504]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005602:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	497b      	ldr	r1, [pc, #492]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800560c:	4313      	orrs	r3, r2
 800560e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00a      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800561e:	4b76      	ldr	r3, [pc, #472]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005624:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	69db      	ldr	r3, [r3, #28]
 800562c:	4972      	ldr	r1, [pc, #456]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800562e:	4313      	orrs	r3, r2
 8005630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800563c:	2b00      	cmp	r3, #0
 800563e:	d00a      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005640:	4b6d      	ldr	r3, [pc, #436]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005646:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	496a      	ldr	r1, [pc, #424]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005650:	4313      	orrs	r3, r2
 8005652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00a      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005662:	4b65      	ldr	r3, [pc, #404]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005668:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005670:	4961      	ldr	r1, [pc, #388]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005672:	4313      	orrs	r3, r2
 8005674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d00a      	beq.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005684:	4b5c      	ldr	r3, [pc, #368]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005686:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800568a:	f023 0203 	bic.w	r2, r3, #3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005692:	4959      	ldr	r1, [pc, #356]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005694:	4313      	orrs	r3, r2
 8005696:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00a      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056a6:	4b54      	ldr	r3, [pc, #336]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b4:	4950      	ldr	r1, [pc, #320]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d015      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056c8:	4b4b      	ldr	r3, [pc, #300]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d6:	4948      	ldr	r1, [pc, #288]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056e6:	d105      	bne.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056e8:	4b43      	ldr	r3, [pc, #268]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	4a42      	ldr	r2, [pc, #264]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056f2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d015      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005700:	4b3d      	ldr	r3, [pc, #244]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005706:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800570e:	493a      	ldr	r1, [pc, #232]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005710:	4313      	orrs	r3, r2
 8005712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800571a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800571e:	d105      	bne.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005720:	4b35      	ldr	r3, [pc, #212]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	4a34      	ldr	r2, [pc, #208]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005726:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800572a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d015      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005738:	4b2f      	ldr	r3, [pc, #188]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800573a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800573e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005746:	492c      	ldr	r1, [pc, #176]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005748:	4313      	orrs	r3, r2
 800574a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005752:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005756:	d105      	bne.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005758:	4b27      	ldr	r3, [pc, #156]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	4a26      	ldr	r2, [pc, #152]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800575e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005762:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d015      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005770:	4b21      	ldr	r3, [pc, #132]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005776:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800577e:	491e      	ldr	r1, [pc, #120]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005780:	4313      	orrs	r3, r2
 8005782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800578a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800578e:	d105      	bne.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005790:	4b19      	ldr	r3, [pc, #100]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	4a18      	ldr	r2, [pc, #96]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005796:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800579a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d015      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057a8:	4b13      	ldr	r3, [pc, #76]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b6:	4910      	ldr	r1, [pc, #64]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057c6:	d105      	bne.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057c8:	4b0b      	ldr	r3, [pc, #44]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	4a0a      	ldr	r2, [pc, #40]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057d2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d018      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80057e0:	4b05      	ldr	r3, [pc, #20]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ee:	4902      	ldr	r1, [pc, #8]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057f0:	4313      	orrs	r3, r2
 80057f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80057f6:	e001      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x404>
 80057f8:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005800:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005804:	d105      	bne.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005806:	4b21      	ldr	r3, [pc, #132]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	4a20      	ldr	r2, [pc, #128]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800580c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005810:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d015      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800581e:	4b1b      	ldr	r3, [pc, #108]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005824:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800582c:	4917      	ldr	r1, [pc, #92]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800582e:	4313      	orrs	r3, r2
 8005830:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800583c:	d105      	bne.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800583e:	4b13      	ldr	r3, [pc, #76]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	4a12      	ldr	r2, [pc, #72]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005848:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d015      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005856:	4b0d      	ldr	r3, [pc, #52]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005858:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800585c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005864:	4909      	ldr	r1, [pc, #36]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005866:	4313      	orrs	r3, r2
 8005868:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005870:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005874:	d105      	bne.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005876:	4b05      	ldr	r3, [pc, #20]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	4a04      	ldr	r2, [pc, #16]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800587c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005880:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005882:	7cbb      	ldrb	r3, [r7, #18]
}
 8005884:	4618      	mov	r0, r3
 8005886:	3718      	adds	r7, #24
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	40021000 	.word	0x40021000

08005890 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d101      	bne.n	80058a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e084      	b.n	80059ac <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d106      	bne.n	80058c2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f7fb fd6b 	bl	8001398 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2202      	movs	r2, #2
 80058c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058d8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058e2:	d902      	bls.n	80058ea <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80058e4:	2300      	movs	r3, #0
 80058e6:	60fb      	str	r3, [r7, #12]
 80058e8:	e002      	b.n	80058f0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80058ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058ee:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80058f8:	d007      	beq.n	800590a <HAL_SPI_Init+0x7a>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005902:	d002      	beq.n	800590a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10b      	bne.n	800592a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800591a:	d903      	bls.n	8005924 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2202      	movs	r2, #2
 8005920:	631a      	str	r2, [r3, #48]	; 0x30
 8005922:	e002      	b.n	800592a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685a      	ldr	r2, [r3, #4]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	431a      	orrs	r2, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	431a      	orrs	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	431a      	orrs	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005948:	431a      	orrs	r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	69db      	ldr	r3, [r3, #28]
 800594e:	431a      	orrs	r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a1b      	ldr	r3, [r3, #32]
 8005954:	ea42 0103 	orr.w	r1, r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	430a      	orrs	r2, r1
 8005962:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	0c1b      	lsrs	r3, r3, #16
 800596a:	f003 0204 	and.w	r2, r3, #4
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005972:	431a      	orrs	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005978:	431a      	orrs	r2, r3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	ea42 0103 	orr.w	r1, r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	430a      	orrs	r2, r1
 800598a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	69da      	ldr	r2, [r3, #28]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800599a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b088      	sub	sp, #32
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	603b      	str	r3, [r7, #0]
 80059c0:	4613      	mov	r3, r2
 80059c2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80059c4:	2300      	movs	r3, #0
 80059c6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d101      	bne.n	80059d6 <HAL_SPI_Transmit+0x22>
 80059d2:	2302      	movs	r3, #2
 80059d4:	e150      	b.n	8005c78 <HAL_SPI_Transmit+0x2c4>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059de:	f7fc fb0b 	bl	8001ff8 <HAL_GetTick>
 80059e2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80059e4:	88fb      	ldrh	r3, [r7, #6]
 80059e6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d002      	beq.n	80059fa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80059f4:	2302      	movs	r3, #2
 80059f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80059f8:	e135      	b.n	8005c66 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d002      	beq.n	8005a06 <HAL_SPI_Transmit+0x52>
 8005a00:	88fb      	ldrh	r3, [r7, #6]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d102      	bne.n	8005a0c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a0a:	e12c      	b.n	8005c66 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2203      	movs	r2, #3
 8005a10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2200      	movs	r2, #0
 8005a18:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	68ba      	ldr	r2, [r7, #8]
 8005a1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	88fa      	ldrh	r2, [r7, #6]
 8005a24:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	88fa      	ldrh	r2, [r7, #6]
 8005a2a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a56:	d107      	bne.n	8005a68 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a66:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a72:	2b40      	cmp	r3, #64	; 0x40
 8005a74:	d007      	beq.n	8005a86 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a84:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a8e:	d94b      	bls.n	8005b28 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d002      	beq.n	8005a9e <HAL_SPI_Transmit+0xea>
 8005a98:	8afb      	ldrh	r3, [r7, #22]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d13e      	bne.n	8005b1c <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa2:	881a      	ldrh	r2, [r3, #0]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aae:	1c9a      	adds	r2, r3, #2
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	3b01      	subs	r3, #1
 8005abc:	b29a      	uxth	r2, r3
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ac2:	e02b      	b.n	8005b1c <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f003 0302 	and.w	r3, r3, #2
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d112      	bne.n	8005af8 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad6:	881a      	ldrh	r2, [r3, #0]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae2:	1c9a      	adds	r2, r3, #2
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	3b01      	subs	r3, #1
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005af6:	e011      	b.n	8005b1c <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005af8:	f7fc fa7e 	bl	8001ff8 <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	683a      	ldr	r2, [r7, #0]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d803      	bhi.n	8005b10 <HAL_SPI_Transmit+0x15c>
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b0e:	d102      	bne.n	8005b16 <HAL_SPI_Transmit+0x162>
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d102      	bne.n	8005b1c <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b1a:	e0a4      	b.n	8005c66 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1ce      	bne.n	8005ac4 <HAL_SPI_Transmit+0x110>
 8005b26:	e07c      	b.n	8005c22 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d002      	beq.n	8005b36 <HAL_SPI_Transmit+0x182>
 8005b30:	8afb      	ldrh	r3, [r7, #22]
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d170      	bne.n	8005c18 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d912      	bls.n	8005b66 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b44:	881a      	ldrh	r2, [r3, #0]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b50:	1c9a      	adds	r2, r3, #2
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	3b02      	subs	r3, #2
 8005b5e:	b29a      	uxth	r2, r3
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b64:	e058      	b.n	8005c18 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	330c      	adds	r3, #12
 8005b70:	7812      	ldrb	r2, [r2, #0]
 8005b72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b78:	1c5a      	adds	r2, r3, #1
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	3b01      	subs	r3, #1
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005b8c:	e044      	b.n	8005c18 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	f003 0302 	and.w	r3, r3, #2
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d12b      	bne.n	8005bf4 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d912      	bls.n	8005bcc <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005baa:	881a      	ldrh	r2, [r3, #0]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb6:	1c9a      	adds	r2, r3, #2
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	3b02      	subs	r3, #2
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005bca:	e025      	b.n	8005c18 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	330c      	adds	r3, #12
 8005bd6:	7812      	ldrb	r2, [r2, #0]
 8005bd8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bde:	1c5a      	adds	r2, r3, #1
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	3b01      	subs	r3, #1
 8005bec:	b29a      	uxth	r2, r3
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005bf2:	e011      	b.n	8005c18 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bf4:	f7fc fa00 	bl	8001ff8 <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	683a      	ldr	r2, [r7, #0]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d803      	bhi.n	8005c0c <HAL_SPI_Transmit+0x258>
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c0a:	d102      	bne.n	8005c12 <HAL_SPI_Transmit+0x25e>
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d102      	bne.n	8005c18 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005c16:	e026      	b.n	8005c66 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1b5      	bne.n	8005b8e <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c22:	69ba      	ldr	r2, [r7, #24]
 8005c24:	6839      	ldr	r1, [r7, #0]
 8005c26:	68f8      	ldr	r0, [r7, #12]
 8005c28:	f000 fa8c 	bl	8006144 <SPI_EndRxTxTransaction>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d002      	beq.n	8005c38 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2220      	movs	r2, #32
 8005c36:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d10a      	bne.n	8005c56 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c40:	2300      	movs	r3, #0
 8005c42:	613b      	str	r3, [r7, #16]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	613b      	str	r3, [r7, #16]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	613b      	str	r3, [r7, #16]
 8005c54:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d002      	beq.n	8005c64 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	77fb      	strb	r3, [r7, #31]
 8005c62:	e000      	b.n	8005c66 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8005c64:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005c76:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3720      	adds	r7, #32
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b086      	sub	sp, #24
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d101      	bne.n	8005ca0 <HAL_SPI_Transmit_DMA+0x20>
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	e0d0      	b.n	8005e42 <HAL_SPI_Transmit_DMA+0x1c2>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d002      	beq.n	8005cba <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005cb8:	e0be      	b.n	8005e38 <HAL_SPI_Transmit_DMA+0x1b8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d002      	beq.n	8005cc6 <HAL_SPI_Transmit_DMA+0x46>
 8005cc0:	88fb      	ldrh	r3, [r7, #6]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d102      	bne.n	8005ccc <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005cca:	e0b5      	b.n	8005e38 <HAL_SPI_Transmit_DMA+0x1b8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2203      	movs	r2, #3
 8005cd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	68ba      	ldr	r2, [r7, #8]
 8005cde:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	88fa      	ldrh	r2, [r7, #6]
 8005ce4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	88fa      	ldrh	r2, [r7, #6]
 8005cea:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d16:	d107      	bne.n	8005d28 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d26:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d2c:	4a47      	ldr	r2, [pc, #284]	; (8005e4c <HAL_SPI_Transmit_DMA+0x1cc>)
 8005d2e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d34:	4a46      	ldr	r2, [pc, #280]	; (8005e50 <HAL_SPI_Transmit_DMA+0x1d0>)
 8005d36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d3c:	4a45      	ldr	r2, [pc, #276]	; (8005e54 <HAL_SPI_Transmit_DMA+0x1d4>)
 8005d3e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d44:	2200      	movs	r2, #0
 8005d46:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	685a      	ldr	r2, [r3, #4]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005d56:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d60:	d82d      	bhi.n	8005dbe <HAL_SPI_Transmit_DMA+0x13e>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d6c:	d127      	bne.n	8005dbe <HAL_SPI_Transmit_DMA+0x13e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	f003 0301 	and.w	r3, r3, #1
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d10f      	bne.n	8005d9c <HAL_SPI_Transmit_DMA+0x11c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	685a      	ldr	r2, [r3, #4]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005d8a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	085b      	lsrs	r3, r3, #1
 8005d94:	b29a      	uxth	r2, r3
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d9a:	e010      	b.n	8005dbe <HAL_SPI_Transmit_DMA+0x13e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	685a      	ldr	r2, [r3, #4]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005daa:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	085b      	lsrs	r3, r3, #1
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	3301      	adds	r3, #1
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	330c      	adds	r3, #12
 8005dce:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dd4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005dd6:	f7fe f9e7 	bl	80041a8 <HAL_DMA_Start_IT>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d00c      	beq.n	8005dfa <HAL_SPI_Transmit_DMA+0x17a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005de4:	f043 0210 	orr.w	r2, r3, #16
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8005df8:	e01e      	b.n	8005e38 <HAL_SPI_Transmit_DMA+0x1b8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e04:	2b40      	cmp	r3, #64	; 0x40
 8005e06:	d007      	beq.n	8005e18 <HAL_SPI_Transmit_DMA+0x198>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e16:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f042 0220 	orr.w	r2, r2, #32
 8005e26:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	685a      	ldr	r2, [r3, #4]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f042 0202 	orr.w	r2, r2, #2
 8005e36:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3718      	adds	r7, #24
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	08005f3b 	.word	0x08005f3b
 8005e50:	08005e95 	.word	0x08005e95
 8005e54:	08005f57 	.word	0x08005f57

08005e58 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005e88:	bf00      	nop
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b086      	sub	sp, #24
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ea2:	f7fc f8a9 	bl	8001ff8 <HAL_GetTick>
 8005ea6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 0320 	and.w	r3, r3, #32
 8005eb2:	2b20      	cmp	r3, #32
 8005eb4:	d03b      	beq.n	8005f2e <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	685a      	ldr	r2, [r3, #4]
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f022 0220 	bic.w	r2, r2, #32
 8005ec4:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	685a      	ldr	r2, [r3, #4]
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f022 0202 	bic.w	r2, r2, #2
 8005ed4:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	2164      	movs	r1, #100	; 0x64
 8005eda:	6978      	ldr	r0, [r7, #20]
 8005edc:	f000 f932 	bl	8006144 <SPI_EndRxTxTransaction>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d005      	beq.n	8005ef2 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eea:	f043 0220 	orr.w	r2, r3, #32
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d10a      	bne.n	8005f10 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005efa:	2300      	movs	r3, #0
 8005efc:	60fb      	str	r3, [r7, #12]
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	60fb      	str	r3, [r7, #12]
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	60fb      	str	r3, [r7, #12]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	2200      	movs	r2, #0
 8005f14:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d003      	beq.n	8005f2e <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005f26:	6978      	ldr	r0, [r7, #20]
 8005f28:	f7ff ffaa 	bl	8005e80 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005f2c:	e002      	b.n	8005f34 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005f2e:	6978      	ldr	r0, [r7, #20]
 8005f30:	f7ff ff92 	bl	8005e58 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f34:	3718      	adds	r7, #24
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b084      	sub	sp, #16
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f46:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f7ff ff8f 	bl	8005e6c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f4e:	bf00      	nop
 8005f50:	3710      	adds	r7, #16
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}

08005f56 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b084      	sub	sp, #16
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f62:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	685a      	ldr	r2, [r3, #4]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f022 0203 	bic.w	r2, r2, #3
 8005f72:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f78:	f043 0210 	orr.w	r2, r3, #16
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f7ff ff79 	bl	8005e80 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f8e:	bf00      	nop
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b084      	sub	sp, #16
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	60f8      	str	r0, [r7, #12]
 8005f9e:	60b9      	str	r1, [r7, #8]
 8005fa0:	603b      	str	r3, [r7, #0]
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fa6:	e04c      	b.n	8006042 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fae:	d048      	beq.n	8006042 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005fb0:	f7fc f822 	bl	8001ff8 <HAL_GetTick>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	683a      	ldr	r2, [r7, #0]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d902      	bls.n	8005fc6 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d13d      	bne.n	8006042 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	685a      	ldr	r2, [r3, #4]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005fd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fde:	d111      	bne.n	8006004 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fe8:	d004      	beq.n	8005ff4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ff2:	d107      	bne.n	8006004 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006002:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006008:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800600c:	d10f      	bne.n	800602e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800601c:	601a      	str	r2, [r3, #0]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800602c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e00f      	b.n	8006062 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	689a      	ldr	r2, [r3, #8]
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	4013      	ands	r3, r2
 800604c:	68ba      	ldr	r2, [r7, #8]
 800604e:	429a      	cmp	r2, r3
 8006050:	bf0c      	ite	eq
 8006052:	2301      	moveq	r3, #1
 8006054:	2300      	movne	r3, #0
 8006056:	b2db      	uxtb	r3, r3
 8006058:	461a      	mov	r2, r3
 800605a:	79fb      	ldrb	r3, [r7, #7]
 800605c:	429a      	cmp	r2, r3
 800605e:	d1a3      	bne.n	8005fa8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3710      	adds	r7, #16
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800606a:	b580      	push	{r7, lr}
 800606c:	b084      	sub	sp, #16
 800606e:	af00      	add	r7, sp, #0
 8006070:	60f8      	str	r0, [r7, #12]
 8006072:	60b9      	str	r1, [r7, #8]
 8006074:	607a      	str	r2, [r7, #4]
 8006076:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8006078:	e057      	b.n	800612a <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006080:	d106      	bne.n	8006090 <SPI_WaitFifoStateUntilTimeout+0x26>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d103      	bne.n	8006090 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	330c      	adds	r3, #12
 800608e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006096:	d048      	beq.n	800612a <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006098:	f7fb ffae 	bl	8001ff8 <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	683a      	ldr	r2, [r7, #0]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d902      	bls.n	80060ae <SPI_WaitFifoStateUntilTimeout+0x44>
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d13d      	bne.n	800612a <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	685a      	ldr	r2, [r3, #4]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80060bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060c6:	d111      	bne.n	80060ec <SPI_WaitFifoStateUntilTimeout+0x82>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060d0:	d004      	beq.n	80060dc <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060da:	d107      	bne.n	80060ec <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060f4:	d10f      	bne.n	8006116 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006104:	601a      	str	r2, [r3, #0]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006114:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e008      	b.n	800613c <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	689a      	ldr	r2, [r3, #8]
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	4013      	ands	r3, r2
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	429a      	cmp	r2, r3
 8006138:	d19f      	bne.n	800607a <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b086      	sub	sp, #24
 8006148:	af02      	add	r7, sp, #8
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	9300      	str	r3, [sp, #0]
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	2200      	movs	r2, #0
 8006158:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f7ff ff84 	bl	800606a <SPI_WaitFifoStateUntilTimeout>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d007      	beq.n	8006178 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800616c:	f043 0220 	orr.w	r2, r3, #32
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006174:	2303      	movs	r3, #3
 8006176:	e027      	b.n	80061c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	9300      	str	r3, [sp, #0]
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	2200      	movs	r2, #0
 8006180:	2180      	movs	r1, #128	; 0x80
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	f7ff ff07 	bl	8005f96 <SPI_WaitFlagStateUntilTimeout>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d007      	beq.n	800619e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006192:	f043 0220 	orr.w	r2, r3, #32
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e014      	b.n	80061c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	9300      	str	r3, [sp, #0]
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f7ff ff5d 	bl	800606a <SPI_WaitFifoStateUntilTimeout>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d007      	beq.n	80061c6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061ba:	f043 0220 	orr.w	r2, r3, #32
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e000      	b.n	80061c8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3710      	adds	r7, #16
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d101      	bne.n	80061e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e049      	b.n	8006276 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d106      	bne.n	80061fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f7fb fdc0 	bl	8001d7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2202      	movs	r2, #2
 8006200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	3304      	adds	r3, #4
 800620c:	4619      	mov	r1, r3
 800620e:	4610      	mov	r0, r2
 8006210:	f000 fc24 	bl	8006a5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3708      	adds	r7, #8
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
	...

08006280 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006280:	b480      	push	{r7}
 8006282:	b085      	sub	sp, #20
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800628e:	b2db      	uxtb	r3, r3
 8006290:	2b01      	cmp	r3, #1
 8006292:	d001      	beq.n	8006298 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e019      	b.n	80062cc <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2202      	movs	r2, #2
 800629c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	689a      	ldr	r2, [r3, #8]
 80062a6:	4b0c      	ldr	r3, [pc, #48]	; (80062d8 <HAL_TIM_Base_Start+0x58>)
 80062a8:	4013      	ands	r3, r2
 80062aa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2b06      	cmp	r3, #6
 80062b0:	d00b      	beq.n	80062ca <HAL_TIM_Base_Start+0x4a>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062b8:	d007      	beq.n	80062ca <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f042 0201 	orr.w	r2, r2, #1
 80062c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3714      	adds	r7, #20
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr
 80062d8:	00010007 	.word	0x00010007

080062dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d001      	beq.n	80062f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e021      	b.n	8006338 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2202      	movs	r2, #2
 80062f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68da      	ldr	r2, [r3, #12]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f042 0201 	orr.w	r2, r2, #1
 800630a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	689a      	ldr	r2, [r3, #8]
 8006312:	4b0c      	ldr	r3, [pc, #48]	; (8006344 <HAL_TIM_Base_Start_IT+0x68>)
 8006314:	4013      	ands	r3, r2
 8006316:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2b06      	cmp	r3, #6
 800631c:	d00b      	beq.n	8006336 <HAL_TIM_Base_Start_IT+0x5a>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006324:	d007      	beq.n	8006336 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f042 0201 	orr.w	r2, r2, #1
 8006334:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006336:	2300      	movs	r3, #0
}
 8006338:	4618      	mov	r0, r3
 800633a:	3714      	adds	r7, #20
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr
 8006344:	00010007 	.word	0x00010007

08006348 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b086      	sub	sp, #24
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d101      	bne.n	800635c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e097      	b.n	800648c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006362:	b2db      	uxtb	r3, r3
 8006364:	2b00      	cmp	r3, #0
 8006366:	d106      	bne.n	8006376 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f7fb fca7 	bl	8001cc4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2202      	movs	r2, #2
 800637a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	6812      	ldr	r2, [r2, #0]
 8006388:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800638c:	f023 0307 	bic.w	r3, r3, #7
 8006390:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	3304      	adds	r3, #4
 800639a:	4619      	mov	r1, r3
 800639c:	4610      	mov	r0, r2
 800639e:	f000 fb5d 	bl	8006a5c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	699b      	ldr	r3, [r3, #24]
 80063b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	6a1b      	ldr	r3, [r3, #32]
 80063b8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	697a      	ldr	r2, [r7, #20]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063ca:	f023 0303 	bic.w	r3, r3, #3
 80063ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	689a      	ldr	r2, [r3, #8]
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	021b      	lsls	r3, r3, #8
 80063da:	4313      	orrs	r3, r2
 80063dc:	693a      	ldr	r2, [r7, #16]
 80063de:	4313      	orrs	r3, r2
 80063e0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80063e8:	f023 030c 	bic.w	r3, r3, #12
 80063ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	68da      	ldr	r2, [r3, #12]
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	69db      	ldr	r3, [r3, #28]
 8006402:	021b      	lsls	r3, r3, #8
 8006404:	4313      	orrs	r3, r2
 8006406:	693a      	ldr	r2, [r7, #16]
 8006408:	4313      	orrs	r3, r2
 800640a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	011a      	lsls	r2, r3, #4
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	031b      	lsls	r3, r3, #12
 8006418:	4313      	orrs	r3, r2
 800641a:	693a      	ldr	r2, [r7, #16]
 800641c:	4313      	orrs	r3, r2
 800641e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006426:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800642e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	685a      	ldr	r2, [r3, #4]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	695b      	ldr	r3, [r3, #20]
 8006438:	011b      	lsls	r3, r3, #4
 800643a:	4313      	orrs	r3, r2
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	4313      	orrs	r3, r2
 8006440:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	693a      	ldr	r2, [r7, #16]
 8006450:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2201      	movs	r2, #1
 800645e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2201      	movs	r2, #1
 8006476:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2201      	movs	r2, #1
 800647e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3718      	adds	r7, #24
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	f003 0302 	and.w	r3, r3, #2
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d122      	bne.n	80064f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	f003 0302 	and.w	r3, r3, #2
 80064b4:	2b02      	cmp	r3, #2
 80064b6:	d11b      	bne.n	80064f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f06f 0202 	mvn.w	r2, #2
 80064c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2201      	movs	r2, #1
 80064c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	699b      	ldr	r3, [r3, #24]
 80064ce:	f003 0303 	and.w	r3, r3, #3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d003      	beq.n	80064de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 faa2 	bl	8006a20 <HAL_TIM_IC_CaptureCallback>
 80064dc:	e005      	b.n	80064ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 fa94 	bl	8006a0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 faa5 	bl	8006a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	f003 0304 	and.w	r3, r3, #4
 80064fa:	2b04      	cmp	r3, #4
 80064fc:	d122      	bne.n	8006544 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	f003 0304 	and.w	r3, r3, #4
 8006508:	2b04      	cmp	r3, #4
 800650a:	d11b      	bne.n	8006544 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f06f 0204 	mvn.w	r2, #4
 8006514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2202      	movs	r2, #2
 800651a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006526:	2b00      	cmp	r3, #0
 8006528:	d003      	beq.n	8006532 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 fa78 	bl	8006a20 <HAL_TIM_IC_CaptureCallback>
 8006530:	e005      	b.n	800653e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 fa6a 	bl	8006a0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 fa7b 	bl	8006a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	f003 0308 	and.w	r3, r3, #8
 800654e:	2b08      	cmp	r3, #8
 8006550:	d122      	bne.n	8006598 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	f003 0308 	and.w	r3, r3, #8
 800655c:	2b08      	cmp	r3, #8
 800655e:	d11b      	bne.n	8006598 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f06f 0208 	mvn.w	r2, #8
 8006568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2204      	movs	r2, #4
 800656e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	69db      	ldr	r3, [r3, #28]
 8006576:	f003 0303 	and.w	r3, r3, #3
 800657a:	2b00      	cmp	r3, #0
 800657c:	d003      	beq.n	8006586 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 fa4e 	bl	8006a20 <HAL_TIM_IC_CaptureCallback>
 8006584:	e005      	b.n	8006592 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 fa40 	bl	8006a0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 fa51 	bl	8006a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	f003 0310 	and.w	r3, r3, #16
 80065a2:	2b10      	cmp	r3, #16
 80065a4:	d122      	bne.n	80065ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	f003 0310 	and.w	r3, r3, #16
 80065b0:	2b10      	cmp	r3, #16
 80065b2:	d11b      	bne.n	80065ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f06f 0210 	mvn.w	r2, #16
 80065bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2208      	movs	r2, #8
 80065c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	69db      	ldr	r3, [r3, #28]
 80065ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d003      	beq.n	80065da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 fa24 	bl	8006a20 <HAL_TIM_IC_CaptureCallback>
 80065d8:	e005      	b.n	80065e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 fa16 	bl	8006a0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 fa27 	bl	8006a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	f003 0301 	and.w	r3, r3, #1
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d10e      	bne.n	8006618 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	f003 0301 	and.w	r3, r3, #1
 8006604:	2b01      	cmp	r3, #1
 8006606:	d107      	bne.n	8006618 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f06f 0201 	mvn.w	r2, #1
 8006610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 f9f0 	bl	80069f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006622:	2b80      	cmp	r3, #128	; 0x80
 8006624:	d10e      	bne.n	8006644 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006630:	2b80      	cmp	r3, #128	; 0x80
 8006632:	d107      	bne.n	8006644 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800663c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 fd5e 	bl	8007100 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800664e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006652:	d10e      	bne.n	8006672 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800665e:	2b80      	cmp	r3, #128	; 0x80
 8006660:	d107      	bne.n	8006672 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800666a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 fd51 	bl	8007114 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800667c:	2b40      	cmp	r3, #64	; 0x40
 800667e:	d10e      	bne.n	800669e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800668a:	2b40      	cmp	r3, #64	; 0x40
 800668c:	d107      	bne.n	800669e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 f9d5 	bl	8006a48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	f003 0320 	and.w	r3, r3, #32
 80066a8:	2b20      	cmp	r3, #32
 80066aa:	d10e      	bne.n	80066ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	f003 0320 	and.w	r3, r3, #32
 80066b6:	2b20      	cmp	r3, #32
 80066b8:	d107      	bne.n	80066ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f06f 0220 	mvn.w	r2, #32
 80066c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 fd11 	bl	80070ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066d8:	d10f      	bne.n	80066fa <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066e8:	d107      	bne.n	80066fa <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80066f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 fd17 	bl	8007128 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006704:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006708:	d10f      	bne.n	800672a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006714:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006718:	d107      	bne.n	800672a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006722:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 fd09 	bl	800713c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006734:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006738:	d10f      	bne.n	800675a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006744:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006748:	d107      	bne.n	800675a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 fcfb 	bl	8007150 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006764:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006768:	d10f      	bne.n	800678a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006774:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006778:	d107      	bne.n	800678a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 fced 	bl	8007164 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800678a:	bf00      	nop
 800678c:	3708      	adds	r7, #8
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
	...

08006794 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d101      	bne.n	80067ac <HAL_TIM_ConfigClockSource+0x18>
 80067a8:	2302      	movs	r3, #2
 80067aa:	e0d2      	b.n	8006952 <HAL_TIM_ConfigClockSource+0x1be>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2202      	movs	r2, #2
 80067b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80067ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80067ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067d6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067e8:	f000 80a9 	beq.w	800693e <HAL_TIM_ConfigClockSource+0x1aa>
 80067ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067f0:	d81a      	bhi.n	8006828 <HAL_TIM_ConfigClockSource+0x94>
 80067f2:	2b30      	cmp	r3, #48	; 0x30
 80067f4:	f000 809a 	beq.w	800692c <HAL_TIM_ConfigClockSource+0x198>
 80067f8:	2b30      	cmp	r3, #48	; 0x30
 80067fa:	d809      	bhi.n	8006810 <HAL_TIM_ConfigClockSource+0x7c>
 80067fc:	2b10      	cmp	r3, #16
 80067fe:	f000 8095 	beq.w	800692c <HAL_TIM_ConfigClockSource+0x198>
 8006802:	2b20      	cmp	r3, #32
 8006804:	f000 8092 	beq.w	800692c <HAL_TIM_ConfigClockSource+0x198>
 8006808:	2b00      	cmp	r3, #0
 800680a:	f000 808f 	beq.w	800692c <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800680e:	e097      	b.n	8006940 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8006810:	2b50      	cmp	r3, #80	; 0x50
 8006812:	d05b      	beq.n	80068cc <HAL_TIM_ConfigClockSource+0x138>
 8006814:	2b50      	cmp	r3, #80	; 0x50
 8006816:	d802      	bhi.n	800681e <HAL_TIM_ConfigClockSource+0x8a>
 8006818:	2b40      	cmp	r3, #64	; 0x40
 800681a:	d077      	beq.n	800690c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800681c:	e090      	b.n	8006940 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800681e:	2b60      	cmp	r3, #96	; 0x60
 8006820:	d064      	beq.n	80068ec <HAL_TIM_ConfigClockSource+0x158>
 8006822:	2b70      	cmp	r3, #112	; 0x70
 8006824:	d028      	beq.n	8006878 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 8006826:	e08b      	b.n	8006940 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8006828:	4a4c      	ldr	r2, [pc, #304]	; (800695c <HAL_TIM_ConfigClockSource+0x1c8>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d07e      	beq.n	800692c <HAL_TIM_ConfigClockSource+0x198>
 800682e:	4a4b      	ldr	r2, [pc, #300]	; (800695c <HAL_TIM_ConfigClockSource+0x1c8>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d810      	bhi.n	8006856 <HAL_TIM_ConfigClockSource+0xc2>
 8006834:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006838:	d078      	beq.n	800692c <HAL_TIM_ConfigClockSource+0x198>
 800683a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800683e:	d803      	bhi.n	8006848 <HAL_TIM_ConfigClockSource+0xb4>
 8006840:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006844:	d02f      	beq.n	80068a6 <HAL_TIM_ConfigClockSource+0x112>
      break;
 8006846:	e07b      	b.n	8006940 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8006848:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800684c:	d06e      	beq.n	800692c <HAL_TIM_ConfigClockSource+0x198>
 800684e:	4a44      	ldr	r2, [pc, #272]	; (8006960 <HAL_TIM_ConfigClockSource+0x1cc>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d06b      	beq.n	800692c <HAL_TIM_ConfigClockSource+0x198>
      break;
 8006854:	e074      	b.n	8006940 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8006856:	4a43      	ldr	r2, [pc, #268]	; (8006964 <HAL_TIM_ConfigClockSource+0x1d0>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d067      	beq.n	800692c <HAL_TIM_ConfigClockSource+0x198>
 800685c:	4a41      	ldr	r2, [pc, #260]	; (8006964 <HAL_TIM_ConfigClockSource+0x1d0>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d803      	bhi.n	800686a <HAL_TIM_ConfigClockSource+0xd6>
 8006862:	4a41      	ldr	r2, [pc, #260]	; (8006968 <HAL_TIM_ConfigClockSource+0x1d4>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d061      	beq.n	800692c <HAL_TIM_ConfigClockSource+0x198>
      break;
 8006868:	e06a      	b.n	8006940 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800686a:	4a40      	ldr	r2, [pc, #256]	; (800696c <HAL_TIM_ConfigClockSource+0x1d8>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d05d      	beq.n	800692c <HAL_TIM_ConfigClockSource+0x198>
 8006870:	4a3f      	ldr	r2, [pc, #252]	; (8006970 <HAL_TIM_ConfigClockSource+0x1dc>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d05a      	beq.n	800692c <HAL_TIM_ConfigClockSource+0x198>
      break;
 8006876:	e063      	b.n	8006940 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6818      	ldr	r0, [r3, #0]
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	6899      	ldr	r1, [r3, #8]
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	685a      	ldr	r2, [r3, #4]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	f000 fac8 	bl	8006e1c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800689a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	609a      	str	r2, [r3, #8]
      break;
 80068a4:	e04c      	b.n	8006940 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6818      	ldr	r0, [r3, #0]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	6899      	ldr	r1, [r3, #8]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	685a      	ldr	r2, [r3, #4]
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	f000 fab1 	bl	8006e1c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	689a      	ldr	r2, [r3, #8]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068c8:	609a      	str	r2, [r3, #8]
      break;
 80068ca:	e039      	b.n	8006940 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6818      	ldr	r0, [r3, #0]
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	6859      	ldr	r1, [r3, #4]
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	461a      	mov	r2, r3
 80068da:	f000 fa23 	bl	8006d24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2150      	movs	r1, #80	; 0x50
 80068e4:	4618      	mov	r0, r3
 80068e6:	f000 fa7c 	bl	8006de2 <TIM_ITRx_SetConfig>
      break;
 80068ea:	e029      	b.n	8006940 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6818      	ldr	r0, [r3, #0]
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	6859      	ldr	r1, [r3, #4]
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	461a      	mov	r2, r3
 80068fa:	f000 fa42 	bl	8006d82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2160      	movs	r1, #96	; 0x60
 8006904:	4618      	mov	r0, r3
 8006906:	f000 fa6c 	bl	8006de2 <TIM_ITRx_SetConfig>
      break;
 800690a:	e019      	b.n	8006940 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6818      	ldr	r0, [r3, #0]
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	6859      	ldr	r1, [r3, #4]
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	461a      	mov	r2, r3
 800691a:	f000 fa03 	bl	8006d24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2140      	movs	r1, #64	; 0x40
 8006924:	4618      	mov	r0, r3
 8006926:	f000 fa5c 	bl	8006de2 <TIM_ITRx_SetConfig>
      break;
 800692a:	e009      	b.n	8006940 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4619      	mov	r1, r3
 8006936:	4610      	mov	r0, r2
 8006938:	f000 fa53 	bl	8006de2 <TIM_ITRx_SetConfig>
      break;
 800693c:	e000      	b.n	8006940 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800693e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3710      	adds	r7, #16
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	00100030 	.word	0x00100030
 8006960:	00100020 	.word	0x00100020
 8006964:	00100050 	.word	0x00100050
 8006968:	00100040 	.word	0x00100040
 800696c:	00100060 	.word	0x00100060
 8006970:	00100070 	.word	0x00100070

08006974 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006984:	2b01      	cmp	r3, #1
 8006986:	d101      	bne.n	800698c <HAL_TIM_SlaveConfigSynchro+0x18>
 8006988:	2302      	movs	r3, #2
 800698a:	e031      	b.n	80069f0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2202      	movs	r2, #2
 8006998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800699c:	6839      	ldr	r1, [r7, #0]
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 f904 	bl	8006bac <TIM_SlaveTimer_SetConfig>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d009      	beq.n	80069be <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2201      	movs	r2, #1
 80069ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e018      	b.n	80069f0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	68da      	ldr	r2, [r3, #12]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069cc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	68da      	ldr	r2, [r3, #12]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80069dc:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2201      	movs	r2, #1
 80069e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3708      	adds	r7, #8
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006a00:	bf00      	nop
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a14:	bf00      	nop
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a28:	bf00      	nop
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a3c:	bf00      	nop
 8006a3e:	370c      	adds	r7, #12
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a46      	ldr	r2, [pc, #280]	; (8006b88 <TIM_Base_SetConfig+0x12c>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d017      	beq.n	8006aa4 <TIM_Base_SetConfig+0x48>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a7a:	d013      	beq.n	8006aa4 <TIM_Base_SetConfig+0x48>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a43      	ldr	r2, [pc, #268]	; (8006b8c <TIM_Base_SetConfig+0x130>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d00f      	beq.n	8006aa4 <TIM_Base_SetConfig+0x48>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a42      	ldr	r2, [pc, #264]	; (8006b90 <TIM_Base_SetConfig+0x134>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d00b      	beq.n	8006aa4 <TIM_Base_SetConfig+0x48>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a41      	ldr	r2, [pc, #260]	; (8006b94 <TIM_Base_SetConfig+0x138>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d007      	beq.n	8006aa4 <TIM_Base_SetConfig+0x48>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a40      	ldr	r2, [pc, #256]	; (8006b98 <TIM_Base_SetConfig+0x13c>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d003      	beq.n	8006aa4 <TIM_Base_SetConfig+0x48>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a3f      	ldr	r2, [pc, #252]	; (8006b9c <TIM_Base_SetConfig+0x140>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d108      	bne.n	8006ab6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a33      	ldr	r2, [pc, #204]	; (8006b88 <TIM_Base_SetConfig+0x12c>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d023      	beq.n	8006b06 <TIM_Base_SetConfig+0xaa>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ac4:	d01f      	beq.n	8006b06 <TIM_Base_SetConfig+0xaa>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a30      	ldr	r2, [pc, #192]	; (8006b8c <TIM_Base_SetConfig+0x130>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d01b      	beq.n	8006b06 <TIM_Base_SetConfig+0xaa>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4a2f      	ldr	r2, [pc, #188]	; (8006b90 <TIM_Base_SetConfig+0x134>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d017      	beq.n	8006b06 <TIM_Base_SetConfig+0xaa>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4a2e      	ldr	r2, [pc, #184]	; (8006b94 <TIM_Base_SetConfig+0x138>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d013      	beq.n	8006b06 <TIM_Base_SetConfig+0xaa>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4a2d      	ldr	r2, [pc, #180]	; (8006b98 <TIM_Base_SetConfig+0x13c>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d00f      	beq.n	8006b06 <TIM_Base_SetConfig+0xaa>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a2d      	ldr	r2, [pc, #180]	; (8006ba0 <TIM_Base_SetConfig+0x144>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d00b      	beq.n	8006b06 <TIM_Base_SetConfig+0xaa>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a2c      	ldr	r2, [pc, #176]	; (8006ba4 <TIM_Base_SetConfig+0x148>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d007      	beq.n	8006b06 <TIM_Base_SetConfig+0xaa>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a2b      	ldr	r2, [pc, #172]	; (8006ba8 <TIM_Base_SetConfig+0x14c>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d003      	beq.n	8006b06 <TIM_Base_SetConfig+0xaa>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4a26      	ldr	r2, [pc, #152]	; (8006b9c <TIM_Base_SetConfig+0x140>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d108      	bne.n	8006b18 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	695b      	ldr	r3, [r3, #20]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	689a      	ldr	r2, [r3, #8]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a12      	ldr	r2, [pc, #72]	; (8006b88 <TIM_Base_SetConfig+0x12c>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d013      	beq.n	8006b6c <TIM_Base_SetConfig+0x110>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a14      	ldr	r2, [pc, #80]	; (8006b98 <TIM_Base_SetConfig+0x13c>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d00f      	beq.n	8006b6c <TIM_Base_SetConfig+0x110>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a14      	ldr	r2, [pc, #80]	; (8006ba0 <TIM_Base_SetConfig+0x144>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d00b      	beq.n	8006b6c <TIM_Base_SetConfig+0x110>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4a13      	ldr	r2, [pc, #76]	; (8006ba4 <TIM_Base_SetConfig+0x148>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d007      	beq.n	8006b6c <TIM_Base_SetConfig+0x110>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4a12      	ldr	r2, [pc, #72]	; (8006ba8 <TIM_Base_SetConfig+0x14c>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d003      	beq.n	8006b6c <TIM_Base_SetConfig+0x110>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	4a0d      	ldr	r2, [pc, #52]	; (8006b9c <TIM_Base_SetConfig+0x140>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d103      	bne.n	8006b74 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	691a      	ldr	r2, [r3, #16]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	615a      	str	r2, [r3, #20]
}
 8006b7a:	bf00      	nop
 8006b7c:	3714      	adds	r7, #20
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr
 8006b86:	bf00      	nop
 8006b88:	40012c00 	.word	0x40012c00
 8006b8c:	40000400 	.word	0x40000400
 8006b90:	40000800 	.word	0x40000800
 8006b94:	40000c00 	.word	0x40000c00
 8006b98:	40013400 	.word	0x40013400
 8006b9c:	40015000 	.word	0x40015000
 8006ba0:	40014000 	.word	0x40014000
 8006ba4:	40014400 	.word	0x40014400
 8006ba8:	40014800 	.word	0x40014800

08006bac <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b086      	sub	sp, #24
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006bc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bc8:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	697a      	ldr	r2, [r7, #20]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bda:	f023 0307 	bic.w	r3, r3, #7
 8006bde:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	697a      	ldr	r2, [r7, #20]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	697a      	ldr	r2, [r7, #20]
 8006bf0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	2b70      	cmp	r3, #112	; 0x70
 8006bf8:	d034      	beq.n	8006c64 <TIM_SlaveTimer_SetConfig+0xb8>
 8006bfa:	2b70      	cmp	r3, #112	; 0x70
 8006bfc:	d811      	bhi.n	8006c22 <TIM_SlaveTimer_SetConfig+0x76>
 8006bfe:	2b30      	cmp	r3, #48	; 0x30
 8006c00:	d07d      	beq.n	8006cfe <TIM_SlaveTimer_SetConfig+0x152>
 8006c02:	2b30      	cmp	r3, #48	; 0x30
 8006c04:	d806      	bhi.n	8006c14 <TIM_SlaveTimer_SetConfig+0x68>
 8006c06:	2b10      	cmp	r3, #16
 8006c08:	d079      	beq.n	8006cfe <TIM_SlaveTimer_SetConfig+0x152>
 8006c0a:	2b20      	cmp	r3, #32
 8006c0c:	d077      	beq.n	8006cfe <TIM_SlaveTimer_SetConfig+0x152>
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d075      	beq.n	8006cfe <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 8006c12:	e075      	b.n	8006d00 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8006c14:	2b50      	cmp	r3, #80	; 0x50
 8006c16:	d05e      	beq.n	8006cd6 <TIM_SlaveTimer_SetConfig+0x12a>
 8006c18:	2b60      	cmp	r3, #96	; 0x60
 8006c1a:	d066      	beq.n	8006cea <TIM_SlaveTimer_SetConfig+0x13e>
 8006c1c:	2b40      	cmp	r3, #64	; 0x40
 8006c1e:	d02c      	beq.n	8006c7a <TIM_SlaveTimer_SetConfig+0xce>
      break;
 8006c20:	e06e      	b.n	8006d00 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8006c22:	4a3a      	ldr	r2, [pc, #232]	; (8006d0c <TIM_SlaveTimer_SetConfig+0x160>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d06a      	beq.n	8006cfe <TIM_SlaveTimer_SetConfig+0x152>
 8006c28:	4a38      	ldr	r2, [pc, #224]	; (8006d0c <TIM_SlaveTimer_SetConfig+0x160>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d809      	bhi.n	8006c42 <TIM_SlaveTimer_SetConfig+0x96>
 8006c2e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006c32:	d064      	beq.n	8006cfe <TIM_SlaveTimer_SetConfig+0x152>
 8006c34:	4a36      	ldr	r2, [pc, #216]	; (8006d10 <TIM_SlaveTimer_SetConfig+0x164>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d061      	beq.n	8006cfe <TIM_SlaveTimer_SetConfig+0x152>
 8006c3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c3e:	d05e      	beq.n	8006cfe <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8006c40:	e05e      	b.n	8006d00 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8006c42:	4a34      	ldr	r2, [pc, #208]	; (8006d14 <TIM_SlaveTimer_SetConfig+0x168>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d05a      	beq.n	8006cfe <TIM_SlaveTimer_SetConfig+0x152>
 8006c48:	4a32      	ldr	r2, [pc, #200]	; (8006d14 <TIM_SlaveTimer_SetConfig+0x168>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d803      	bhi.n	8006c56 <TIM_SlaveTimer_SetConfig+0xaa>
 8006c4e:	4a32      	ldr	r2, [pc, #200]	; (8006d18 <TIM_SlaveTimer_SetConfig+0x16c>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d054      	beq.n	8006cfe <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8006c54:	e054      	b.n	8006d00 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8006c56:	4a31      	ldr	r2, [pc, #196]	; (8006d1c <TIM_SlaveTimer_SetConfig+0x170>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d050      	beq.n	8006cfe <TIM_SlaveTimer_SetConfig+0x152>
 8006c5c:	4a30      	ldr	r2, [pc, #192]	; (8006d20 <TIM_SlaveTimer_SetConfig+0x174>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d04d      	beq.n	8006cfe <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8006c62:	e04d      	b.n	8006d00 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6818      	ldr	r0, [r3, #0]
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	68d9      	ldr	r1, [r3, #12]
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	689a      	ldr	r2, [r3, #8]
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	691b      	ldr	r3, [r3, #16]
 8006c74:	f000 f8d2 	bl	8006e1c <TIM_ETR_SetConfig>
      break;
 8006c78:	e042      	b.n	8006d00 <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2b05      	cmp	r3, #5
 8006c80:	d004      	beq.n	8006c8c <TIM_SlaveTimer_SetConfig+0xe0>
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8006c8a:	d101      	bne.n	8006c90 <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e038      	b.n	8006d02 <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	6a1b      	ldr	r3, [r3, #32]
 8006c96:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	6a1a      	ldr	r2, [r3, #32]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f022 0201 	bic.w	r2, r2, #1
 8006ca6:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	699b      	ldr	r3, [r3, #24]
 8006cae:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cb6:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	011b      	lsls	r3, r3, #4
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	693a      	ldr	r2, [r7, #16]
 8006cd2:	621a      	str	r2, [r3, #32]
      break;
 8006cd4:	e014      	b.n	8006d00 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6818      	ldr	r0, [r3, #0]
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	6899      	ldr	r1, [r3, #8]
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	691b      	ldr	r3, [r3, #16]
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	f000 f81e 	bl	8006d24 <TIM_TI1_ConfigInputStage>
      break;
 8006ce8:	e00a      	b.n	8006d00 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6818      	ldr	r0, [r3, #0]
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	6899      	ldr	r1, [r3, #8]
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	f000 f843 	bl	8006d82 <TIM_TI2_ConfigInputStage>
      break;
 8006cfc:	e000      	b.n	8006d00 <TIM_SlaveTimer_SetConfig+0x154>
      break;
 8006cfe:	bf00      	nop
  }
  return HAL_OK;
 8006d00:	2300      	movs	r3, #0
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3718      	adds	r7, #24
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	00100030 	.word	0x00100030
 8006d10:	00100020 	.word	0x00100020
 8006d14:	00100050 	.word	0x00100050
 8006d18:	00100040 	.word	0x00100040
 8006d1c:	00100060 	.word	0x00100060
 8006d20:	00100070 	.word	0x00100070

08006d24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b087      	sub	sp, #28
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6a1b      	ldr	r3, [r3, #32]
 8006d34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6a1b      	ldr	r3, [r3, #32]
 8006d3a:	f023 0201 	bic.w	r2, r3, #1
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	699b      	ldr	r3, [r3, #24]
 8006d46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	011b      	lsls	r3, r3, #4
 8006d54:	693a      	ldr	r2, [r7, #16]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	f023 030a 	bic.w	r3, r3, #10
 8006d60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d62:	697a      	ldr	r2, [r7, #20]
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	693a      	ldr	r2, [r7, #16]
 8006d6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	697a      	ldr	r2, [r7, #20]
 8006d74:	621a      	str	r2, [r3, #32]
}
 8006d76:	bf00      	nop
 8006d78:	371c      	adds	r7, #28
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr

08006d82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d82:	b480      	push	{r7}
 8006d84:	b087      	sub	sp, #28
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	60f8      	str	r0, [r7, #12]
 8006d8a:	60b9      	str	r1, [r7, #8]
 8006d8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6a1b      	ldr	r3, [r3, #32]
 8006d92:	f023 0210 	bic.w	r2, r3, #16
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6a1b      	ldr	r3, [r3, #32]
 8006da4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006dac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	031b      	lsls	r3, r3, #12
 8006db2:	697a      	ldr	r2, [r7, #20]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006dbe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	011b      	lsls	r3, r3, #4
 8006dc4:	693a      	ldr	r2, [r7, #16]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	697a      	ldr	r2, [r7, #20]
 8006dce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	693a      	ldr	r2, [r7, #16]
 8006dd4:	621a      	str	r2, [r3, #32]
}
 8006dd6:	bf00      	nop
 8006dd8:	371c      	adds	r7, #28
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr

08006de2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006de2:	b480      	push	{r7}
 8006de4:	b085      	sub	sp, #20
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
 8006dea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006dfe:	683a      	ldr	r2, [r7, #0]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	f043 0307 	orr.w	r3, r3, #7
 8006e08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	609a      	str	r2, [r3, #8]
}
 8006e10:	bf00      	nop
 8006e12:	3714      	adds	r7, #20
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b087      	sub	sp, #28
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	607a      	str	r2, [r7, #4]
 8006e28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	021a      	lsls	r2, r3, #8
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	431a      	orrs	r2, r3
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	697a      	ldr	r2, [r7, #20]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	697a      	ldr	r2, [r7, #20]
 8006e4e:	609a      	str	r2, [r3, #8]
}
 8006e50:	bf00      	nop
 8006e52:	371c      	adds	r7, #28
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b085      	sub	sp, #20
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d101      	bne.n	8006e74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e70:	2302      	movs	r3, #2
 8006e72:	e074      	b.n	8006f5e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2202      	movs	r2, #2
 8006e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a34      	ldr	r2, [pc, #208]	; (8006f6c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d009      	beq.n	8006eb2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a33      	ldr	r2, [pc, #204]	; (8006f70 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d004      	beq.n	8006eb2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a31      	ldr	r2, [pc, #196]	; (8006f74 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d108      	bne.n	8006ec4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006eb8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ece:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a21      	ldr	r2, [pc, #132]	; (8006f6c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d022      	beq.n	8006f32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ef4:	d01d      	beq.n	8006f32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a1f      	ldr	r2, [pc, #124]	; (8006f78 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d018      	beq.n	8006f32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a1d      	ldr	r2, [pc, #116]	; (8006f7c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d013      	beq.n	8006f32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a1c      	ldr	r2, [pc, #112]	; (8006f80 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d00e      	beq.n	8006f32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a15      	ldr	r2, [pc, #84]	; (8006f70 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d009      	beq.n	8006f32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a18      	ldr	r2, [pc, #96]	; (8006f84 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d004      	beq.n	8006f32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a11      	ldr	r2, [pc, #68]	; (8006f74 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d10c      	bne.n	8006f4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	68ba      	ldr	r2, [r7, #8]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68ba      	ldr	r2, [r7, #8]
 8006f4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f5c:	2300      	movs	r3, #0
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3714      	adds	r7, #20
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	40012c00 	.word	0x40012c00
 8006f70:	40013400 	.word	0x40013400
 8006f74:	40015000 	.word	0x40015000
 8006f78:	40000400 	.word	0x40000400
 8006f7c:	40000800 	.word	0x40000800
 8006f80:	40000c00 	.word	0x40000c00
 8006f84:	40014000 	.word	0x40014000

08006f88 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006f92:	2300      	movs	r3, #0
 8006f94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d101      	bne.n	8006fa4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006fa0:	2302      	movs	r3, #2
 8006fa2:	e096      	b.n	80070d2 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	695b      	ldr	r3, [r3, #20]
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800700a:	4313      	orrs	r3, r2
 800700c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	699b      	ldr	r3, [r3, #24]
 8007018:	041b      	lsls	r3, r3, #16
 800701a:	4313      	orrs	r3, r2
 800701c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a2f      	ldr	r2, [pc, #188]	; (80070e0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d009      	beq.n	800703c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a2d      	ldr	r2, [pc, #180]	; (80070e4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d004      	beq.n	800703c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a2c      	ldr	r2, [pc, #176]	; (80070e8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d106      	bne.n	800704a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	69db      	ldr	r3, [r3, #28]
 8007046:	4313      	orrs	r3, r2
 8007048:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a24      	ldr	r2, [pc, #144]	; (80070e0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d009      	beq.n	8007068 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a22      	ldr	r2, [pc, #136]	; (80070e4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d004      	beq.n	8007068 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a21      	ldr	r2, [pc, #132]	; (80070e8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d12b      	bne.n	80070c0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007072:	051b      	lsls	r3, r3, #20
 8007074:	4313      	orrs	r3, r2
 8007076:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	6a1b      	ldr	r3, [r3, #32]
 8007082:	4313      	orrs	r3, r2
 8007084:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007090:	4313      	orrs	r3, r2
 8007092:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a11      	ldr	r2, [pc, #68]	; (80070e0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d009      	beq.n	80070b2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a10      	ldr	r2, [pc, #64]	; (80070e4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d004      	beq.n	80070b2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a0e      	ldr	r2, [pc, #56]	; (80070e8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d106      	bne.n	80070c0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070bc:	4313      	orrs	r3, r2
 80070be:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3714      	adds	r7, #20
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	40012c00 	.word	0x40012c00
 80070e4:	40013400 	.word	0x40013400
 80070e8:	40015000 	.word	0x40015000

080070ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80070f4:	bf00      	nop
 80070f6:	370c      	adds	r7, #12
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007108:	bf00      	nop
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800711c:	bf00      	nop
 800711e:	370c      	adds	r7, #12
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007130:	bf00      	nop
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007144:	bf00      	nop
 8007146:	370c      	adds	r7, #12
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007158:	bf00      	nop
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800716c:	bf00      	nop
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <LL_EXTI_EnableIT_0_31>:
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8007180:	4b05      	ldr	r3, [pc, #20]	; (8007198 <LL_EXTI_EnableIT_0_31+0x20>)
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	4904      	ldr	r1, [pc, #16]	; (8007198 <LL_EXTI_EnableIT_0_31+0x20>)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4313      	orrs	r3, r2
 800718a:	600b      	str	r3, [r1, #0]
}
 800718c:	bf00      	nop
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr
 8007198:	40010400 	.word	0x40010400

0800719c <LL_EXTI_EnableIT_32_63>:
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80071a4:	4b05      	ldr	r3, [pc, #20]	; (80071bc <LL_EXTI_EnableIT_32_63+0x20>)
 80071a6:	6a1a      	ldr	r2, [r3, #32]
 80071a8:	4904      	ldr	r1, [pc, #16]	; (80071bc <LL_EXTI_EnableIT_32_63+0x20>)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4313      	orrs	r3, r2
 80071ae:	620b      	str	r3, [r1, #32]
}
 80071b0:	bf00      	nop
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr
 80071bc:	40010400 	.word	0x40010400

080071c0 <LL_EXTI_DisableIT_0_31>:
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80071c8:	4b06      	ldr	r3, [pc, #24]	; (80071e4 <LL_EXTI_DisableIT_0_31+0x24>)
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	43db      	mvns	r3, r3
 80071d0:	4904      	ldr	r1, [pc, #16]	; (80071e4 <LL_EXTI_DisableIT_0_31+0x24>)
 80071d2:	4013      	ands	r3, r2
 80071d4:	600b      	str	r3, [r1, #0]
}
 80071d6:	bf00      	nop
 80071d8:	370c      	adds	r7, #12
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	40010400 	.word	0x40010400

080071e8 <LL_EXTI_DisableIT_32_63>:
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80071f0:	4b06      	ldr	r3, [pc, #24]	; (800720c <LL_EXTI_DisableIT_32_63+0x24>)
 80071f2:	6a1a      	ldr	r2, [r3, #32]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	43db      	mvns	r3, r3
 80071f8:	4904      	ldr	r1, [pc, #16]	; (800720c <LL_EXTI_DisableIT_32_63+0x24>)
 80071fa:	4013      	ands	r3, r2
 80071fc:	620b      	str	r3, [r1, #32]
}
 80071fe:	bf00      	nop
 8007200:	370c      	adds	r7, #12
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr
 800720a:	bf00      	nop
 800720c:	40010400 	.word	0x40010400

08007210 <LL_EXTI_EnableEvent_0_31>:
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8007218:	4b05      	ldr	r3, [pc, #20]	; (8007230 <LL_EXTI_EnableEvent_0_31+0x20>)
 800721a:	685a      	ldr	r2, [r3, #4]
 800721c:	4904      	ldr	r1, [pc, #16]	; (8007230 <LL_EXTI_EnableEvent_0_31+0x20>)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4313      	orrs	r3, r2
 8007222:	604b      	str	r3, [r1, #4]
}
 8007224:	bf00      	nop
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr
 8007230:	40010400 	.word	0x40010400

08007234 <LL_EXTI_EnableEvent_32_63>:
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800723c:	4b05      	ldr	r3, [pc, #20]	; (8007254 <LL_EXTI_EnableEvent_32_63+0x20>)
 800723e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007240:	4904      	ldr	r1, [pc, #16]	; (8007254 <LL_EXTI_EnableEvent_32_63+0x20>)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4313      	orrs	r3, r2
 8007246:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007248:	bf00      	nop
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr
 8007254:	40010400 	.word	0x40010400

08007258 <LL_EXTI_DisableEvent_0_31>:
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8007260:	4b06      	ldr	r3, [pc, #24]	; (800727c <LL_EXTI_DisableEvent_0_31+0x24>)
 8007262:	685a      	ldr	r2, [r3, #4]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	43db      	mvns	r3, r3
 8007268:	4904      	ldr	r1, [pc, #16]	; (800727c <LL_EXTI_DisableEvent_0_31+0x24>)
 800726a:	4013      	ands	r3, r2
 800726c:	604b      	str	r3, [r1, #4]
}
 800726e:	bf00      	nop
 8007270:	370c      	adds	r7, #12
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr
 800727a:	bf00      	nop
 800727c:	40010400 	.word	0x40010400

08007280 <LL_EXTI_DisableEvent_32_63>:
{
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8007288:	4b06      	ldr	r3, [pc, #24]	; (80072a4 <LL_EXTI_DisableEvent_32_63+0x24>)
 800728a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	43db      	mvns	r3, r3
 8007290:	4904      	ldr	r1, [pc, #16]	; (80072a4 <LL_EXTI_DisableEvent_32_63+0x24>)
 8007292:	4013      	ands	r3, r2
 8007294:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007296:	bf00      	nop
 8007298:	370c      	adds	r7, #12
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	40010400 	.word	0x40010400

080072a8 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80072b0:	4b05      	ldr	r3, [pc, #20]	; (80072c8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80072b2:	689a      	ldr	r2, [r3, #8]
 80072b4:	4904      	ldr	r1, [pc, #16]	; (80072c8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4313      	orrs	r3, r2
 80072ba:	608b      	str	r3, [r1, #8]
}
 80072bc:	bf00      	nop
 80072be:	370c      	adds	r7, #12
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr
 80072c8:	40010400 	.word	0x40010400

080072cc <LL_EXTI_EnableRisingTrig_32_63>:
{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80072d4:	4b05      	ldr	r3, [pc, #20]	; (80072ec <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80072d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072d8:	4904      	ldr	r1, [pc, #16]	; (80072ec <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4313      	orrs	r3, r2
 80072de:	628b      	str	r3, [r1, #40]	; 0x28
}
 80072e0:	bf00      	nop
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr
 80072ec:	40010400 	.word	0x40010400

080072f0 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80072f8:	4b06      	ldr	r3, [pc, #24]	; (8007314 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80072fa:	689a      	ldr	r2, [r3, #8]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	43db      	mvns	r3, r3
 8007300:	4904      	ldr	r1, [pc, #16]	; (8007314 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007302:	4013      	ands	r3, r2
 8007304:	608b      	str	r3, [r1, #8]
}
 8007306:	bf00      	nop
 8007308:	370c      	adds	r7, #12
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr
 8007312:	bf00      	nop
 8007314:	40010400 	.word	0x40010400

08007318 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8007320:	4b06      	ldr	r3, [pc, #24]	; (800733c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8007322:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	43db      	mvns	r3, r3
 8007328:	4904      	ldr	r1, [pc, #16]	; (800733c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800732a:	4013      	ands	r3, r2
 800732c:	628b      	str	r3, [r1, #40]	; 0x28
}
 800732e:	bf00      	nop
 8007330:	370c      	adds	r7, #12
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr
 800733a:	bf00      	nop
 800733c:	40010400 	.word	0x40010400

08007340 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8007348:	4b05      	ldr	r3, [pc, #20]	; (8007360 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800734a:	68da      	ldr	r2, [r3, #12]
 800734c:	4904      	ldr	r1, [pc, #16]	; (8007360 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	4313      	orrs	r3, r2
 8007352:	60cb      	str	r3, [r1, #12]
}
 8007354:	bf00      	nop
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr
 8007360:	40010400 	.word	0x40010400

08007364 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800736c:	4b05      	ldr	r3, [pc, #20]	; (8007384 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800736e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007370:	4904      	ldr	r1, [pc, #16]	; (8007384 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4313      	orrs	r3, r2
 8007376:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8007378:	bf00      	nop
 800737a:	370c      	adds	r7, #12
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr
 8007384:	40010400 	.word	0x40010400

08007388 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8007390:	4b06      	ldr	r3, [pc, #24]	; (80073ac <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007392:	68da      	ldr	r2, [r3, #12]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	43db      	mvns	r3, r3
 8007398:	4904      	ldr	r1, [pc, #16]	; (80073ac <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800739a:	4013      	ands	r3, r2
 800739c:	60cb      	str	r3, [r1, #12]
}
 800739e:	bf00      	nop
 80073a0:	370c      	adds	r7, #12
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop
 80073ac:	40010400 	.word	0x40010400

080073b0 <LL_EXTI_DisableFallingTrig_32_63>:
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80073b8:	4b06      	ldr	r3, [pc, #24]	; (80073d4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80073ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	43db      	mvns	r3, r3
 80073c0:	4904      	ldr	r1, [pc, #16]	; (80073d4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80073c2:	4013      	ands	r3, r2
 80073c4:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80073c6:	bf00      	nop
 80073c8:	370c      	adds	r7, #12
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	40010400 	.word	0x40010400

080073d8 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 80073e0:	2300      	movs	r3, #0
 80073e2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	7a1b      	ldrb	r3, [r3, #8]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	f000 80c8 	beq.w	800757e <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d05d      	beq.n	80074b2 <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	7a5b      	ldrb	r3, [r3, #9]
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d00e      	beq.n	800741c <LL_EXTI_Init+0x44>
 80073fe:	2b02      	cmp	r3, #2
 8007400:	d017      	beq.n	8007432 <LL_EXTI_Init+0x5a>
 8007402:	2b00      	cmp	r3, #0
 8007404:	d120      	bne.n	8007448 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4618      	mov	r0, r3
 800740c:	f7ff ff24 	bl	8007258 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4618      	mov	r0, r3
 8007416:	f7ff feaf 	bl	8007178 <LL_EXTI_EnableIT_0_31>
          break;
 800741a:	e018      	b.n	800744e <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4618      	mov	r0, r3
 8007422:	f7ff fecd 	bl	80071c0 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4618      	mov	r0, r3
 800742c:	f7ff fef0 	bl	8007210 <LL_EXTI_EnableEvent_0_31>
          break;
 8007430:	e00d      	b.n	800744e <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4618      	mov	r0, r3
 8007438:	f7ff fe9e 	bl	8007178 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4618      	mov	r0, r3
 8007442:	f7ff fee5 	bl	8007210 <LL_EXTI_EnableEvent_0_31>
          break;
 8007446:	e002      	b.n	800744e <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 8007448:	2301      	movs	r3, #1
 800744a:	60fb      	str	r3, [r7, #12]
          break;
 800744c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	7a9b      	ldrb	r3, [r3, #10]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d02d      	beq.n	80074b2 <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	7a9b      	ldrb	r3, [r3, #10]
 800745a:	2b02      	cmp	r3, #2
 800745c:	d00e      	beq.n	800747c <LL_EXTI_Init+0xa4>
 800745e:	2b03      	cmp	r3, #3
 8007460:	d017      	beq.n	8007492 <LL_EXTI_Init+0xba>
 8007462:	2b01      	cmp	r3, #1
 8007464:	d120      	bne.n	80074a8 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4618      	mov	r0, r3
 800746c:	f7ff ff8c 	bl	8007388 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4618      	mov	r0, r3
 8007476:	f7ff ff17 	bl	80072a8 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800747a:	e01b      	b.n	80074b4 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4618      	mov	r0, r3
 8007482:	f7ff ff35 	bl	80072f0 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4618      	mov	r0, r3
 800748c:	f7ff ff58 	bl	8007340 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8007490:	e010      	b.n	80074b4 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4618      	mov	r0, r3
 8007498:	f7ff ff06 	bl	80072a8 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4618      	mov	r0, r3
 80074a2:	f7ff ff4d 	bl	8007340 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80074a6:	e005      	b.n	80074b4 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f043 0302 	orr.w	r3, r3, #2
 80074ae:	60fb      	str	r3, [r7, #12]
            break;
 80074b0:	e000      	b.n	80074b4 <LL_EXTI_Init+0xdc>
        }
      }
 80074b2:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d075      	beq.n	80075a8 <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	7a5b      	ldrb	r3, [r3, #9]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d00e      	beq.n	80074e2 <LL_EXTI_Init+0x10a>
 80074c4:	2b02      	cmp	r3, #2
 80074c6:	d017      	beq.n	80074f8 <LL_EXTI_Init+0x120>
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d120      	bne.n	800750e <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7ff fed5 	bl	8007280 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	4618      	mov	r0, r3
 80074dc:	f7ff fe5e 	bl	800719c <LL_EXTI_EnableIT_32_63>
          break;
 80074e0:	e01a      	b.n	8007518 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	4618      	mov	r0, r3
 80074e8:	f7ff fe7e 	bl	80071e8 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7ff fe9f 	bl	8007234 <LL_EXTI_EnableEvent_32_63>
          break;
 80074f6:	e00f      	b.n	8007518 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	4618      	mov	r0, r3
 80074fe:	f7ff fe4d 	bl	800719c <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	4618      	mov	r0, r3
 8007508:	f7ff fe94 	bl	8007234 <LL_EXTI_EnableEvent_32_63>
          break;
 800750c:	e004      	b.n	8007518 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f043 0304 	orr.w	r3, r3, #4
 8007514:	60fb      	str	r3, [r7, #12]
          break;
 8007516:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	7a9b      	ldrb	r3, [r3, #10]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d043      	beq.n	80075a8 <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	7a9b      	ldrb	r3, [r3, #10]
 8007524:	2b02      	cmp	r3, #2
 8007526:	d00e      	beq.n	8007546 <LL_EXTI_Init+0x16e>
 8007528:	2b03      	cmp	r3, #3
 800752a:	d017      	beq.n	800755c <LL_EXTI_Init+0x184>
 800752c:	2b01      	cmp	r3, #1
 800752e:	d120      	bne.n	8007572 <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	4618      	mov	r0, r3
 8007536:	f7ff ff3b 	bl	80073b0 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	4618      	mov	r0, r3
 8007540:	f7ff fec4 	bl	80072cc <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8007544:	e031      	b.n	80075aa <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	4618      	mov	r0, r3
 800754c:	f7ff fee4 	bl	8007318 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	4618      	mov	r0, r3
 8007556:	f7ff ff05 	bl	8007364 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800755a:	e026      	b.n	80075aa <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	4618      	mov	r0, r3
 8007562:	f7ff feb3 	bl	80072cc <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	4618      	mov	r0, r3
 800756c:	f7ff fefa 	bl	8007364 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8007570:	e01b      	b.n	80075aa <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f043 0305 	orr.w	r3, r3, #5
 8007578:	60fb      	str	r3, [r7, #12]
            break;
 800757a:	bf00      	nop
 800757c:	e015      	b.n	80075aa <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4618      	mov	r0, r3
 8007584:	f7ff fe1c 	bl	80071c0 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4618      	mov	r0, r3
 800758e:	f7ff fe63 	bl	8007258 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	4618      	mov	r0, r3
 8007598:	f7ff fe26 	bl	80071e8 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	4618      	mov	r0, r3
 80075a2:	f7ff fe6d 	bl	8007280 <LL_EXTI_DisableEvent_32_63>
 80075a6:	e000      	b.n	80075aa <LL_EXTI_Init+0x1d2>
      }
 80075a8:	bf00      	nop
  }

  return status;
 80075aa:	68fb      	ldr	r3, [r7, #12]
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3710      	adds	r7, #16
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <LL_GPIO_SetPinMode>:
{
 80075b4:	b480      	push	{r7}
 80075b6:	b089      	sub	sp, #36	; 0x24
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	fa93 f3a3 	rbit	r3, r3
 80075ce:	613b      	str	r3, [r7, #16]
  return result;
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	fab3 f383 	clz	r3, r3
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	005b      	lsls	r3, r3, #1
 80075da:	2103      	movs	r1, #3
 80075dc:	fa01 f303 	lsl.w	r3, r1, r3
 80075e0:	43db      	mvns	r3, r3
 80075e2:	401a      	ands	r2, r3
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	fa93 f3a3 	rbit	r3, r3
 80075ee:	61bb      	str	r3, [r7, #24]
  return result;
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	fab3 f383 	clz	r3, r3
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	005b      	lsls	r3, r3, #1
 80075fa:	6879      	ldr	r1, [r7, #4]
 80075fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007600:	431a      	orrs	r2, r3
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	601a      	str	r2, [r3, #0]
}
 8007606:	bf00      	nop
 8007608:	3724      	adds	r7, #36	; 0x24
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr

08007612 <LL_GPIO_SetPinOutputType>:
{
 8007612:	b480      	push	{r7}
 8007614:	b085      	sub	sp, #20
 8007616:	af00      	add	r7, sp, #0
 8007618:	60f8      	str	r0, [r7, #12]
 800761a:	60b9      	str	r1, [r7, #8]
 800761c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	685a      	ldr	r2, [r3, #4]
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	43db      	mvns	r3, r3
 8007626:	401a      	ands	r2, r3
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	6879      	ldr	r1, [r7, #4]
 800762c:	fb01 f303 	mul.w	r3, r1, r3
 8007630:	431a      	orrs	r2, r3
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	605a      	str	r2, [r3, #4]
}
 8007636:	bf00      	nop
 8007638:	3714      	adds	r7, #20
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr

08007642 <LL_GPIO_SetPinSpeed>:
{
 8007642:	b480      	push	{r7}
 8007644:	b089      	sub	sp, #36	; 0x24
 8007646:	af00      	add	r7, sp, #0
 8007648:	60f8      	str	r0, [r7, #12]
 800764a:	60b9      	str	r1, [r7, #8]
 800764c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	689a      	ldr	r2, [r3, #8]
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	fa93 f3a3 	rbit	r3, r3
 800765c:	613b      	str	r3, [r7, #16]
  return result;
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	fab3 f383 	clz	r3, r3
 8007664:	b2db      	uxtb	r3, r3
 8007666:	005b      	lsls	r3, r3, #1
 8007668:	2103      	movs	r1, #3
 800766a:	fa01 f303 	lsl.w	r3, r1, r3
 800766e:	43db      	mvns	r3, r3
 8007670:	401a      	ands	r2, r3
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	fa93 f3a3 	rbit	r3, r3
 800767c:	61bb      	str	r3, [r7, #24]
  return result;
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	fab3 f383 	clz	r3, r3
 8007684:	b2db      	uxtb	r3, r3
 8007686:	005b      	lsls	r3, r3, #1
 8007688:	6879      	ldr	r1, [r7, #4]
 800768a:	fa01 f303 	lsl.w	r3, r1, r3
 800768e:	431a      	orrs	r2, r3
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	609a      	str	r2, [r3, #8]
}
 8007694:	bf00      	nop
 8007696:	3724      	adds	r7, #36	; 0x24
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <LL_GPIO_SetPinPull>:
{
 80076a0:	b480      	push	{r7}
 80076a2:	b089      	sub	sp, #36	; 0x24
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	68da      	ldr	r2, [r3, #12]
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	fa93 f3a3 	rbit	r3, r3
 80076ba:	613b      	str	r3, [r7, #16]
  return result;
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	fab3 f383 	clz	r3, r3
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	005b      	lsls	r3, r3, #1
 80076c6:	2103      	movs	r1, #3
 80076c8:	fa01 f303 	lsl.w	r3, r1, r3
 80076cc:	43db      	mvns	r3, r3
 80076ce:	401a      	ands	r2, r3
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	fa93 f3a3 	rbit	r3, r3
 80076da:	61bb      	str	r3, [r7, #24]
  return result;
 80076dc:	69bb      	ldr	r3, [r7, #24]
 80076de:	fab3 f383 	clz	r3, r3
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	005b      	lsls	r3, r3, #1
 80076e6:	6879      	ldr	r1, [r7, #4]
 80076e8:	fa01 f303 	lsl.w	r3, r1, r3
 80076ec:	431a      	orrs	r2, r3
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	60da      	str	r2, [r3, #12]
}
 80076f2:	bf00      	nop
 80076f4:	3724      	adds	r7, #36	; 0x24
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr

080076fe <LL_GPIO_SetAFPin_0_7>:
{
 80076fe:	b480      	push	{r7}
 8007700:	b089      	sub	sp, #36	; 0x24
 8007702:	af00      	add	r7, sp, #0
 8007704:	60f8      	str	r0, [r7, #12]
 8007706:	60b9      	str	r1, [r7, #8]
 8007708:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6a1a      	ldr	r2, [r3, #32]
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	fa93 f3a3 	rbit	r3, r3
 8007718:	613b      	str	r3, [r7, #16]
  return result;
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	fab3 f383 	clz	r3, r3
 8007720:	b2db      	uxtb	r3, r3
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	210f      	movs	r1, #15
 8007726:	fa01 f303 	lsl.w	r3, r1, r3
 800772a:	43db      	mvns	r3, r3
 800772c:	401a      	ands	r2, r3
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	fa93 f3a3 	rbit	r3, r3
 8007738:	61bb      	str	r3, [r7, #24]
  return result;
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	fab3 f383 	clz	r3, r3
 8007740:	b2db      	uxtb	r3, r3
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	6879      	ldr	r1, [r7, #4]
 8007746:	fa01 f303 	lsl.w	r3, r1, r3
 800774a:	431a      	orrs	r2, r3
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	621a      	str	r2, [r3, #32]
}
 8007750:	bf00      	nop
 8007752:	3724      	adds	r7, #36	; 0x24
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <LL_GPIO_SetAFPin_8_15>:
{
 800775c:	b480      	push	{r7}
 800775e:	b089      	sub	sp, #36	; 0x24
 8007760:	af00      	add	r7, sp, #0
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	60b9      	str	r1, [r7, #8]
 8007766:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	0a1b      	lsrs	r3, r3, #8
 8007770:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	fa93 f3a3 	rbit	r3, r3
 8007778:	613b      	str	r3, [r7, #16]
  return result;
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	fab3 f383 	clz	r3, r3
 8007780:	b2db      	uxtb	r3, r3
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	210f      	movs	r1, #15
 8007786:	fa01 f303 	lsl.w	r3, r1, r3
 800778a:	43db      	mvns	r3, r3
 800778c:	401a      	ands	r2, r3
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	0a1b      	lsrs	r3, r3, #8
 8007792:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007794:	69fb      	ldr	r3, [r7, #28]
 8007796:	fa93 f3a3 	rbit	r3, r3
 800779a:	61bb      	str	r3, [r7, #24]
  return result;
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	fab3 f383 	clz	r3, r3
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	6879      	ldr	r1, [r7, #4]
 80077a8:	fa01 f303 	lsl.w	r3, r1, r3
 80077ac:	431a      	orrs	r2, r3
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80077b2:	bf00      	nop
 80077b4:	3724      	adds	r7, #36	; 0x24
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr

080077be <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80077be:	b580      	push	{r7, lr}
 80077c0:	b086      	sub	sp, #24
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
 80077c6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	fa93 f3a3 	rbit	r3, r3
 80077d4:	60bb      	str	r3, [r7, #8]
  return result;
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	fab3 f383 	clz	r3, r3
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80077e0:	e040      	b.n	8007864 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	2101      	movs	r1, #1
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	fa01 f303 	lsl.w	r3, r1, r3
 80077ee:	4013      	ands	r3, r2
 80077f0:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d032      	beq.n	800785e <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	461a      	mov	r2, r3
 80077fe:	6939      	ldr	r1, [r7, #16]
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f7ff fed7 	bl	80075b4 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	2b01      	cmp	r3, #1
 800780c:	d003      	beq.n	8007816 <LL_GPIO_Init+0x58>
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	2b02      	cmp	r3, #2
 8007814:	d106      	bne.n	8007824 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	461a      	mov	r2, r3
 800781c:	6939      	ldr	r1, [r7, #16]
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f7ff ff0f 	bl	8007642 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	691b      	ldr	r3, [r3, #16]
 8007828:	461a      	mov	r2, r3
 800782a:	6939      	ldr	r1, [r7, #16]
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f7ff ff37 	bl	80076a0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	2b02      	cmp	r3, #2
 8007838:	d111      	bne.n	800785e <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	2bff      	cmp	r3, #255	; 0xff
 800783e:	d807      	bhi.n	8007850 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	695b      	ldr	r3, [r3, #20]
 8007844:	461a      	mov	r2, r3
 8007846:	6939      	ldr	r1, [r7, #16]
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f7ff ff58 	bl	80076fe <LL_GPIO_SetAFPin_0_7>
 800784e:	e006      	b.n	800785e <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	695b      	ldr	r3, [r3, #20]
 8007854:	461a      	mov	r2, r3
 8007856:	6939      	ldr	r1, [r7, #16]
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f7ff ff7f 	bl	800775c <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	3301      	adds	r3, #1
 8007862:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	fa22 f303 	lsr.w	r3, r2, r3
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1b7      	bne.n	80077e2 <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	2b01      	cmp	r3, #1
 8007878:	d003      	beq.n	8007882 <LL_GPIO_Init+0xc4>
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	2b02      	cmp	r3, #2
 8007880:	d107      	bne.n	8007892 <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	6819      	ldr	r1, [r3, #0]
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	461a      	mov	r2, r3
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f7ff fec0 	bl	8007612 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3718      	adds	r7, #24
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 */

void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint8_t border_colour)
{
 800789c:	b590      	push	{r4, r7, lr}
 800789e:	b087      	sub	sp, #28
 80078a0:	af02      	add	r7, sp, #8
 80078a2:	4604      	mov	r4, r0
 80078a4:	4608      	mov	r0, r1
 80078a6:	4611      	mov	r1, r2
 80078a8:	461a      	mov	r2, r3
 80078aa:	4623      	mov	r3, r4
 80078ac:	80fb      	strh	r3, [r7, #6]
 80078ae:	4603      	mov	r3, r0
 80078b0:	80bb      	strh	r3, [r7, #4]
 80078b2:	460b      	mov	r3, r1
 80078b4:	807b      	strh	r3, [r7, #2]
 80078b6:	4613      	mov	r3, r2
 80078b8:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 80078ba:	2300      	movs	r3, #0
 80078bc:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 80078be:	7bfa      	ldrb	r2, [r7, #15]
 80078c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d938      	bls.n	800793a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x9e>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 80078c8:	88ba      	ldrh	r2, [r7, #4]
 80078ca:	7bfb      	ldrb	r3, [r7, #15]
 80078cc:	441a      	add	r2, r3
 80078ce:	88b9      	ldrh	r1, [r7, #4]
 80078d0:	883b      	ldrh	r3, [r7, #0]
 80078d2:	4419      	add	r1, r3
 80078d4:	7bfb      	ldrb	r3, [r7, #15]
 80078d6:	1acb      	subs	r3, r1, r3
 80078d8:	429a      	cmp	r2, r3
 80078da:	f000 808e 	beq.w	80079fa <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x15e>
 80078de:	88fa      	ldrh	r2, [r7, #6]
 80078e0:	7bfb      	ldrb	r3, [r7, #15]
 80078e2:	441a      	add	r2, r3
 80078e4:	88f9      	ldrh	r1, [r7, #6]
 80078e6:	887b      	ldrh	r3, [r7, #2]
 80078e8:	4419      	add	r1, r3
 80078ea:	7bfb      	ldrb	r3, [r7, #15]
 80078ec:	1acb      	subs	r3, r1, r3
 80078ee:	429a      	cmp	r2, r3
 80078f0:	f000 8083 	beq.w	80079fa <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x15e>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour);
 80078f4:	7bfb      	ldrb	r3, [r7, #15]
 80078f6:	b29a      	uxth	r2, r3
 80078f8:	88fb      	ldrh	r3, [r7, #6]
 80078fa:	4413      	add	r3, r2
 80078fc:	b298      	uxth	r0, r3
 80078fe:	7bfb      	ldrb	r3, [r7, #15]
 8007900:	b29a      	uxth	r2, r3
 8007902:	88bb      	ldrh	r3, [r7, #4]
 8007904:	4413      	add	r3, r2
 8007906:	b299      	uxth	r1, r3
 8007908:	7bfb      	ldrb	r3, [r7, #15]
 800790a:	b29b      	uxth	r3, r3
 800790c:	005b      	lsls	r3, r3, #1
 800790e:	b29b      	uxth	r3, r3
 8007910:	887a      	ldrh	r2, [r7, #2]
 8007912:	1ad3      	subs	r3, r2, r3
 8007914:	b29b      	uxth	r3, r3
 8007916:	3301      	adds	r3, #1
 8007918:	b29c      	uxth	r4, r3
 800791a:	7bfb      	ldrb	r3, [r7, #15]
 800791c:	b29b      	uxth	r3, r3
 800791e:	005b      	lsls	r3, r3, #1
 8007920:	b29b      	uxth	r3, r3
 8007922:	883a      	ldrh	r2, [r7, #0]
 8007924:	1ad3      	subs	r3, r2, r3
 8007926:	b29b      	uxth	r3, r3
 8007928:	3301      	adds	r3, #1
 800792a:	b29a      	uxth	r2, r3
 800792c:	8c3b      	ldrh	r3, [r7, #32]
 800792e:	9300      	str	r3, [sp, #0]
 8007930:	4613      	mov	r3, r2
 8007932:	4622      	mov	r2, r4
 8007934:	f000 fd28 	bl	8008388 <ILI9341_Draw_Rectangle>
				goto finish;
 8007938:	e060      	b.n	80079fc <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x160>
			}
		}

		// Horizontal lines
		ILI9341_Draw_Horizontal_Line(	x + b,
 800793a:	7bfb      	ldrb	r3, [r7, #15]
 800793c:	b29a      	uxth	r2, r3
 800793e:	88fb      	ldrh	r3, [r7, #6]
 8007940:	4413      	add	r3, r2
 8007942:	b298      	uxth	r0, r3
 8007944:	7bfb      	ldrb	r3, [r7, #15]
 8007946:	b29a      	uxth	r2, r3
 8007948:	88bb      	ldrh	r3, [r7, #4]
 800794a:	4413      	add	r3, r2
 800794c:	b299      	uxth	r1, r3
 800794e:	7bfb      	ldrb	r3, [r7, #15]
 8007950:	b29b      	uxth	r3, r3
 8007952:	005b      	lsls	r3, r3, #1
 8007954:	b29b      	uxth	r3, r3
 8007956:	887a      	ldrh	r2, [r7, #2]
 8007958:	1ad3      	subs	r3, r2, r3
 800795a:	b29a      	uxth	r2, r3
 800795c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007960:	b29b      	uxth	r3, r3
 8007962:	f000 fd93 	bl	800848c <ILI9341_Draw_Horizontal_Line>
										y + b,
										w - (2*b),
										border_colour);

		ILI9341_Draw_Horizontal_Line(	x + b,
 8007966:	7bfb      	ldrb	r3, [r7, #15]
 8007968:	b29a      	uxth	r2, r3
 800796a:	88fb      	ldrh	r3, [r7, #6]
 800796c:	4413      	add	r3, r2
 800796e:	b298      	uxth	r0, r3
										(y + h) - b,
 8007970:	88ba      	ldrh	r2, [r7, #4]
 8007972:	883b      	ldrh	r3, [r7, #0]
 8007974:	4413      	add	r3, r2
 8007976:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 8007978:	7bfb      	ldrb	r3, [r7, #15]
 800797a:	b29b      	uxth	r3, r3
 800797c:	1ad3      	subs	r3, r2, r3
 800797e:	b299      	uxth	r1, r3
 8007980:	7bfb      	ldrb	r3, [r7, #15]
 8007982:	b29b      	uxth	r3, r3
 8007984:	887a      	ldrh	r2, [r7, #2]
 8007986:	1ad3      	subs	r3, r2, r3
 8007988:	b29a      	uxth	r2, r3
 800798a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800798e:	b29b      	uxth	r3, r3
 8007990:	f000 fd7c 	bl	800848c <ILI9341_Draw_Horizontal_Line>
										w - (b),
										border_colour);


		// Vertical lines
		ILI9341_Draw_Vertical_Line(		x + b,
 8007994:	7bfb      	ldrb	r3, [r7, #15]
 8007996:	b29a      	uxth	r2, r3
 8007998:	88fb      	ldrh	r3, [r7, #6]
 800799a:	4413      	add	r3, r2
 800799c:	b298      	uxth	r0, r3
 800799e:	7bfb      	ldrb	r3, [r7, #15]
 80079a0:	b29a      	uxth	r2, r3
 80079a2:	88bb      	ldrh	r3, [r7, #4]
 80079a4:	4413      	add	r3, r2
 80079a6:	b299      	uxth	r1, r3
 80079a8:	7bfb      	ldrb	r3, [r7, #15]
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	005b      	lsls	r3, r3, #1
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	883a      	ldrh	r2, [r7, #0]
 80079b2:	1ad3      	subs	r3, r2, r3
 80079b4:	b29a      	uxth	r2, r3
 80079b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	f000 fdaa 	bl	8008514 <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);

		ILI9341_Draw_Vertical_Line(		(x + w) - b,
 80079c0:	88fa      	ldrh	r2, [r7, #6]
 80079c2:	887b      	ldrh	r3, [r7, #2]
 80079c4:	4413      	add	r3, r2
 80079c6:	b29a      	uxth	r2, r3
 80079c8:	7bfb      	ldrb	r3, [r7, #15]
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	1ad3      	subs	r3, r2, r3
 80079ce:	b298      	uxth	r0, r3
 80079d0:	7bfb      	ldrb	r3, [r7, #15]
 80079d2:	b29a      	uxth	r2, r3
 80079d4:	88bb      	ldrh	r3, [r7, #4]
 80079d6:	4413      	add	r3, r2
 80079d8:	b299      	uxth	r1, r3
 80079da:	7bfb      	ldrb	r3, [r7, #15]
 80079dc:	b29b      	uxth	r3, r3
 80079de:	005b      	lsls	r3, r3, #1
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	883a      	ldrh	r2, [r7, #0]
 80079e4:	1ad3      	subs	r3, r2, r3
 80079e6:	b29a      	uxth	r2, r3
 80079e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	f000 fd91 	bl	8008514 <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 80079f2:	7bfb      	ldrb	r3, [r7, #15]
 80079f4:	3301      	adds	r3, #1
 80079f6:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 80079f8:	e761      	b.n	80078be <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 80079fa:	bf00      	nop
	// done
	return;
 80079fc:	bf00      	nop
}
 80079fe:	3714      	adds	r7, #20
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd90      	pop	{r4, r7, pc}

08007a04 <ILI9341_Draw_Char>:


/*Draws a character (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char character, uint8_t x, uint8_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8007a04:	b590      	push	{r4, r7, lr}
 8007a06:	b089      	sub	sp, #36	; 0x24
 8007a08:	af02      	add	r7, sp, #8
 8007a0a:	4604      	mov	r4, r0
 8007a0c:	4608      	mov	r0, r1
 8007a0e:	4611      	mov	r1, r2
 8007a10:	461a      	mov	r2, r3
 8007a12:	4623      	mov	r3, r4
 8007a14:	71fb      	strb	r3, [r7, #7]
 8007a16:	4603      	mov	r3, r0
 8007a18:	71bb      	strb	r3, [r7, #6]
 8007a1a:	460b      	mov	r3, r1
 8007a1c:	717b      	strb	r3, [r7, #5]
 8007a1e:	4613      	mov	r3, r2
 8007a20:	807b      	strh	r3, [r7, #2]
    uint8_t 	i,j;
		



	function_char = character;
 8007a22:	79fb      	ldrb	r3, [r7, #7]
 8007a24:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 8007a26:	7dfb      	ldrb	r3, [r7, #23]
 8007a28:	2b1f      	cmp	r3, #31
 8007a2a:	d802      	bhi.n	8007a32 <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	71fb      	strb	r3, [r7, #7]
 8007a30:	e002      	b.n	8007a38 <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 8007a32:	7dfb      	ldrb	r3, [r7, #23]
 8007a34:	3b20      	subs	r3, #32
 8007a36:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8007a38:	2300      	movs	r3, #0
 8007a3a:	753b      	strb	r3, [r7, #20]
 8007a3c:	e012      	b.n	8007a64 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 8007a3e:	7dfa      	ldrb	r2, [r7, #23]
 8007a40:	7d38      	ldrb	r0, [r7, #20]
 8007a42:	7d39      	ldrb	r1, [r7, #20]
 8007a44:	4c4a      	ldr	r4, [pc, #296]	; (8007b70 <ILI9341_Draw_Char+0x16c>)
 8007a46:	4613      	mov	r3, r2
 8007a48:	005b      	lsls	r3, r3, #1
 8007a4a:	4413      	add	r3, r2
 8007a4c:	005b      	lsls	r3, r3, #1
 8007a4e:	4423      	add	r3, r4
 8007a50:	4403      	add	r3, r0
 8007a52:	781a      	ldrb	r2, [r3, #0]
 8007a54:	f107 0318 	add.w	r3, r7, #24
 8007a58:	440b      	add	r3, r1
 8007a5a:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8007a5e:	7d3b      	ldrb	r3, [r7, #20]
 8007a60:	3301      	adds	r3, #1
 8007a62:	753b      	strb	r3, [r7, #20]
 8007a64:	7d3b      	ldrb	r3, [r7, #20]
 8007a66:	2b05      	cmp	r3, #5
 8007a68:	d9e9      	bls.n	8007a3e <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	757b      	strb	r3, [r7, #21]
 8007a6e:	e078      	b.n	8007b62 <ILI9341_Draw_Char+0x15e>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 8007a70:	2300      	movs	r3, #0
 8007a72:	75bb      	strb	r3, [r7, #22]
 8007a74:	e06f      	b.n	8007b56 <ILI9341_Draw_Char+0x152>
        {
            if (temp[j] & (1<<i))
 8007a76:	7d7b      	ldrb	r3, [r7, #21]
 8007a78:	f107 0218 	add.w	r2, r7, #24
 8007a7c:	4413      	add	r3, r2
 8007a7e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8007a82:	461a      	mov	r2, r3
 8007a84:	7dbb      	ldrb	r3, [r7, #22]
 8007a86:	fa42 f303 	asr.w	r3, r2, r3
 8007a8a:	f003 0301 	and.w	r3, r3, #1
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d02f      	beq.n	8007af2 <ILI9341_Draw_Char+0xee>
            {
            	if(size == 1)
 8007a92:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d110      	bne.n	8007aba <ILI9341_Draw_Char+0xb6>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 8007a98:	79bb      	ldrb	r3, [r7, #6]
 8007a9a:	b29a      	uxth	r2, r3
 8007a9c:	7d7b      	ldrb	r3, [r7, #21]
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	4413      	add	r3, r2
 8007aa2:	b298      	uxth	r0, r3
 8007aa4:	797b      	ldrb	r3, [r7, #5]
 8007aa6:	b29a      	uxth	r2, r3
 8007aa8:	7dbb      	ldrb	r3, [r7, #22]
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	4413      	add	r3, r2
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	887a      	ldrh	r2, [r7, #2]
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	f000 fb8e 	bl	80081d4 <ILI9341_Draw_Pixel>
 8007ab8:	e04a      	b.n	8007b50 <ILI9341_Draw_Char+0x14c>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour);
 8007aba:	79bb      	ldrb	r3, [r7, #6]
 8007abc:	b29a      	uxth	r2, r3
 8007abe:	7d7b      	ldrb	r3, [r7, #21]
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8007ac4:	fb11 f303 	smulbb	r3, r1, r3
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	4413      	add	r3, r2
 8007acc:	b298      	uxth	r0, r3
 8007ace:	797b      	ldrb	r3, [r7, #5]
 8007ad0:	b29a      	uxth	r2, r3
 8007ad2:	7dbb      	ldrb	r3, [r7, #22]
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8007ad8:	fb11 f303 	smulbb	r3, r1, r3
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	4413      	add	r3, r2
 8007ae0:	b299      	uxth	r1, r3
 8007ae2:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8007ae4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007ae6:	887b      	ldrh	r3, [r7, #2]
 8007ae8:	9300      	str	r3, [sp, #0]
 8007aea:	4623      	mov	r3, r4
 8007aec:	f000 fc4c 	bl	8008388 <ILI9341_Draw_Rectangle>
 8007af0:	e02e      	b.n	8007b50 <ILI9341_Draw_Char+0x14c>
				}
            }
            else
            {
               	if(size == 1)
 8007af2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d110      	bne.n	8007b1a <ILI9341_Draw_Char+0x116>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 8007af8:	79bb      	ldrb	r3, [r7, #6]
 8007afa:	b29a      	uxth	r2, r3
 8007afc:	7d7b      	ldrb	r3, [r7, #21]
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	4413      	add	r3, r2
 8007b02:	b298      	uxth	r0, r3
 8007b04:	797b      	ldrb	r3, [r7, #5]
 8007b06:	b29a      	uxth	r2, r3
 8007b08:	7dbb      	ldrb	r3, [r7, #22]
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	4413      	add	r3, r2
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8007b12:	4619      	mov	r1, r3
 8007b14:	f000 fb5e 	bl	80081d4 <ILI9341_Draw_Pixel>
 8007b18:	e01a      	b.n	8007b50 <ILI9341_Draw_Char+0x14c>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour);
 8007b1a:	79bb      	ldrb	r3, [r7, #6]
 8007b1c:	b29a      	uxth	r2, r3
 8007b1e:	7d7b      	ldrb	r3, [r7, #21]
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8007b24:	fb11 f303 	smulbb	r3, r1, r3
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	4413      	add	r3, r2
 8007b2c:	b298      	uxth	r0, r3
 8007b2e:	797b      	ldrb	r3, [r7, #5]
 8007b30:	b29a      	uxth	r2, r3
 8007b32:	7dbb      	ldrb	r3, [r7, #22]
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8007b38:	fb11 f303 	smulbb	r3, r1, r3
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	4413      	add	r3, r2
 8007b40:	b299      	uxth	r1, r3
 8007b42:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8007b44:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007b46:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007b48:	9300      	str	r3, [sp, #0]
 8007b4a:	4623      	mov	r3, r4
 8007b4c:	f000 fc1c 	bl	8008388 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 8007b50:	7dbb      	ldrb	r3, [r7, #22]
 8007b52:	3301      	adds	r3, #1
 8007b54:	75bb      	strb	r3, [r7, #22]
 8007b56:	7dbb      	ldrb	r3, [r7, #22]
 8007b58:	2b07      	cmp	r3, #7
 8007b5a:	d98c      	bls.n	8007a76 <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 8007b5c:	7d7b      	ldrb	r3, [r7, #21]
 8007b5e:	3301      	adds	r3, #1
 8007b60:	757b      	strb	r3, [r7, #21]
 8007b62:	7d7b      	ldrb	r3, [r7, #21]
 8007b64:	2b05      	cmp	r3, #5
 8007b66:	d983      	bls.n	8007a70 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 8007b68:	bf00      	nop
 8007b6a:	371c      	adds	r7, #28
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd90      	pop	{r4, r7, pc}
 8007b70:	08009548 	.word	0x08009548

08007b74 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t x, uint8_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8007b74:	b590      	push	{r4, r7, lr}
 8007b76:	b085      	sub	sp, #20
 8007b78:	af02      	add	r7, sp, #8
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	4608      	mov	r0, r1
 8007b7e:	4611      	mov	r1, r2
 8007b80:	461a      	mov	r2, r3
 8007b82:	4603      	mov	r3, r0
 8007b84:	70fb      	strb	r3, [r7, #3]
 8007b86:	460b      	mov	r3, r1
 8007b88:	70bb      	strb	r3, [r7, #2]
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	803b      	strh	r3, [r7, #0]
    /*if(size & 1)
    {
    	size = ((size >> 1) * 2);
    }*/

    while (*Text) {
 8007b8e:	e017      	b.n	8007bc0 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	1c5a      	adds	r2, r3, #1
 8007b94:	607a      	str	r2, [r7, #4]
 8007b96:	7818      	ldrb	r0, [r3, #0]
 8007b98:	883c      	ldrh	r4, [r7, #0]
 8007b9a:	78ba      	ldrb	r2, [r7, #2]
 8007b9c:	78f9      	ldrb	r1, [r7, #3]
 8007b9e:	8bbb      	ldrh	r3, [r7, #28]
 8007ba0:	9301      	str	r3, [sp, #4]
 8007ba2:	8b3b      	ldrh	r3, [r7, #24]
 8007ba4:	9300      	str	r3, [sp, #0]
 8007ba6:	4623      	mov	r3, r4
 8007ba8:	f7ff ff2c 	bl	8007a04 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 8007bac:	8b3b      	ldrh	r3, [r7, #24]
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	0052      	lsls	r2, r2, #1
 8007bb4:	4413      	add	r3, r2
 8007bb6:	005b      	lsls	r3, r3, #1
 8007bb8:	b2da      	uxtb	r2, r3
 8007bba:	78fb      	ldrb	r3, [r7, #3]
 8007bbc:	4413      	add	r3, r2
 8007bbe:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d1e3      	bne.n	8007b90 <ILI9341_Draw_Text+0x1c>
    }
}
 8007bc8:	bf00      	nop
 8007bca:	370c      	adds	r7, #12
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd90      	pop	{r4, r7, pc}

08007bd0 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	af00      	add	r7, sp, #0

	//GPIO INIT
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007bd4:	4b05      	ldr	r3, [pc, #20]	; (8007bec <ILI9341_SPI_Init+0x1c>)
 8007bd6:	695b      	ldr	r3, [r3, #20]
 8007bd8:	4a04      	ldr	r2, [pc, #16]	; (8007bec <ILI9341_SPI_Init+0x1c>)
 8007bda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bde:	6153      	str	r3, [r2, #20]
}
 8007be0:	bf00      	nop
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr
 8007bea:	bf00      	nop
 8007bec:	48000400 	.word	0x48000400

08007bf0 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef res;
	#ifdef USE_ILI9341_SPIDMA
		if( ((res = HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &SPI_Data, 1)) != HAL_OK) )
 8007bfa:	1dfb      	adds	r3, r7, #7
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	4619      	mov	r1, r3
 8007c00:	4804      	ldr	r0, [pc, #16]	; (8007c14 <ILI9341_SPI_Send+0x24>)
 8007c02:	f7fe f83d 	bl	8005c80 <HAL_SPI_Transmit_DMA>
 8007c06:	4603      	mov	r3, r0
 8007c08:	73fb      	strb	r3, [r7, #15]
		{
			//printf("HAL_SPI_Transmit Error #%u, ", res);
		}
	#endif

}
 8007c0a:	bf00      	nop
 8007c0c:	3710      	adds	r7, #16
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	2000065c 	.word	0x2000065c

08007c18 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b082      	sub	sp, #8
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	4603      	mov	r3, r0
 8007c20:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007c22:	4b0d      	ldr	r3, [pc, #52]	; (8007c58 <ILI9341_Write_Command+0x40>)
 8007c24:	695b      	ldr	r3, [r3, #20]
 8007c26:	4a0c      	ldr	r2, [pc, #48]	; (8007c58 <ILI9341_Write_Command+0x40>)
 8007c28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c2c:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8007c2e:	4b0a      	ldr	r3, [pc, #40]	; (8007c58 <ILI9341_Write_Command+0x40>)
 8007c30:	695b      	ldr	r3, [r3, #20]
 8007c32:	4a09      	ldr	r2, [pc, #36]	; (8007c58 <ILI9341_Write_Command+0x40>)
 8007c34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c38:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(Command);
 8007c3a:	79fb      	ldrb	r3, [r7, #7]
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7ff ffd7 	bl	8007bf0 <ILI9341_SPI_Send>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8007c42:	4b05      	ldr	r3, [pc, #20]	; (8007c58 <ILI9341_Write_Command+0x40>)
 8007c44:	695b      	ldr	r3, [r3, #20]
 8007c46:	4a04      	ldr	r2, [pc, #16]	; (8007c58 <ILI9341_Write_Command+0x40>)
 8007c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c4c:	6153      	str	r3, [r2, #20]
}
 8007c4e:	bf00      	nop
 8007c50:	3708      	adds	r7, #8
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop
 8007c58:	48000400 	.word	0x48000400

08007c5c <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	4603      	mov	r3, r0
 8007c64:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8007c66:	4b0d      	ldr	r3, [pc, #52]	; (8007c9c <ILI9341_Write_Data+0x40>)
 8007c68:	695b      	ldr	r3, [r3, #20]
 8007c6a:	4a0c      	ldr	r2, [pc, #48]	; (8007c9c <ILI9341_Write_Data+0x40>)
 8007c6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c70:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007c72:	4b0a      	ldr	r3, [pc, #40]	; (8007c9c <ILI9341_Write_Data+0x40>)
 8007c74:	695b      	ldr	r3, [r3, #20]
 8007c76:	4a09      	ldr	r2, [pc, #36]	; (8007c9c <ILI9341_Write_Data+0x40>)
 8007c78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c7c:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(Data);
 8007c7e:	79fb      	ldrb	r3, [r7, #7]
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7ff ffb5 	bl	8007bf0 <ILI9341_SPI_Send>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007c86:	4b05      	ldr	r3, [pc, #20]	; (8007c9c <ILI9341_Write_Data+0x40>)
 8007c88:	695b      	ldr	r3, [r3, #20]
 8007c8a:	4a04      	ldr	r2, [pc, #16]	; (8007c9c <ILI9341_Write_Data+0x40>)
 8007c8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c90:	6153      	str	r3, [r2, #20]
}
 8007c92:	bf00      	nop
 8007c94:	3708      	adds	r7, #8
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	48000400 	.word	0x48000400

08007ca0 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8007ca0:	b590      	push	{r4, r7, lr}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	4604      	mov	r4, r0
 8007ca8:	4608      	mov	r0, r1
 8007caa:	4611      	mov	r1, r2
 8007cac:	461a      	mov	r2, r3
 8007cae:	4623      	mov	r3, r4
 8007cb0:	80fb      	strh	r3, [r7, #6]
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	80bb      	strh	r3, [r7, #4]
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	807b      	strh	r3, [r7, #2]
 8007cba:	4613      	mov	r3, r2
 8007cbc:	803b      	strh	r3, [r7, #0]
	ILI9341_Write_Command(0x2A);
 8007cbe:	202a      	movs	r0, #42	; 0x2a
 8007cc0:	f7ff ffaa 	bl	8007c18 <ILI9341_Write_Command>
	ILI9341_Write_Data(X1>>8);
 8007cc4:	88fb      	ldrh	r3, [r7, #6]
 8007cc6:	0a1b      	lsrs	r3, r3, #8
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f7ff ffc5 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(X1);
 8007cd2:	88fb      	ldrh	r3, [r7, #6]
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7ff ffc0 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(X2>>8);
 8007cdc:	887b      	ldrh	r3, [r7, #2]
 8007cde:	0a1b      	lsrs	r3, r3, #8
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f7ff ffb9 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(X2);
 8007cea:	887b      	ldrh	r3, [r7, #2]
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f7ff ffb4 	bl	8007c5c <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2B);
 8007cf4:	202b      	movs	r0, #43	; 0x2b
 8007cf6:	f7ff ff8f 	bl	8007c18 <ILI9341_Write_Command>
	ILI9341_Write_Data(Y1>>8);
 8007cfa:	88bb      	ldrh	r3, [r7, #4]
 8007cfc:	0a1b      	lsrs	r3, r3, #8
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7ff ffaa 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(Y1);
 8007d08:	88bb      	ldrh	r3, [r7, #4]
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f7ff ffa5 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2>>8);
 8007d12:	883b      	ldrh	r3, [r7, #0]
 8007d14:	0a1b      	lsrs	r3, r3, #8
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f7ff ff9e 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2);
 8007d20:	883b      	ldrh	r3, [r7, #0]
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	4618      	mov	r0, r3
 8007d26:	f7ff ff99 	bl	8007c5c <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2C);
 8007d2a:	202c      	movs	r0, #44	; 0x2c
 8007d2c:	f7ff ff74 	bl	8007c18 <ILI9341_Write_Command>
}
 8007d30:	bf00      	nop
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd90      	pop	{r4, r7, pc}

08007d38 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 8007d3c:	4b0c      	ldr	r3, [pc, #48]	; (8007d70 <ILI9341_Reset+0x38>)
 8007d3e:	695b      	ldr	r3, [r3, #20]
 8007d40:	4a0b      	ldr	r2, [pc, #44]	; (8007d70 <ILI9341_Reset+0x38>)
 8007d42:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d46:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 8007d48:	20c8      	movs	r0, #200	; 0xc8
 8007d4a:	f7fa f961 	bl	8002010 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007d4e:	4b08      	ldr	r3, [pc, #32]	; (8007d70 <ILI9341_Reset+0x38>)
 8007d50:	695b      	ldr	r3, [r3, #20]
 8007d52:	4a07      	ldr	r2, [pc, #28]	; (8007d70 <ILI9341_Reset+0x38>)
 8007d54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d58:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 8007d5a:	20c8      	movs	r0, #200	; 0xc8
 8007d5c:	f7fa f958 	bl	8002010 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8007d60:	4b03      	ldr	r3, [pc, #12]	; (8007d70 <ILI9341_Reset+0x38>)
 8007d62:	695b      	ldr	r3, [r3, #20]
 8007d64:	4a02      	ldr	r2, [pc, #8]	; (8007d70 <ILI9341_Reset+0x38>)
 8007d66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007d6a:	6153      	str	r3, [r2, #20]
}
 8007d6c:	bf00      	nop
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	48000400 	.word	0x48000400

08007d74 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	71fb      	strb	r3, [r7, #7]
	
	uint8_t screen_rotation = Rotation;
 8007d7e:	79fb      	ldrb	r3, [r7, #7]
 8007d80:	73fb      	strb	r3, [r7, #15]
	
	ILI9341_Write_Command(0x36);
 8007d82:	2036      	movs	r0, #54	; 0x36
 8007d84:	f7ff ff48 	bl	8007c18 <ILI9341_Write_Command>
	//HAL_Delay(1);

	switch(screen_rotation)
 8007d88:	7bfb      	ldrb	r3, [r7, #15]
 8007d8a:	2b03      	cmp	r3, #3
 8007d8c:	d836      	bhi.n	8007dfc <ILI9341_Set_Rotation+0x88>
 8007d8e:	a201      	add	r2, pc, #4	; (adr r2, 8007d94 <ILI9341_Set_Rotation+0x20>)
 8007d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d94:	08007da5 	.word	0x08007da5
 8007d98:	08007dbb 	.word	0x08007dbb
 8007d9c:	08007dd1 	.word	0x08007dd1
 8007da0:	08007de7 	.word	0x08007de7
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8007da4:	2048      	movs	r0, #72	; 0x48
 8007da6:	f7ff ff59 	bl	8007c5c <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8007daa:	4b17      	ldr	r3, [pc, #92]	; (8007e08 <ILI9341_Set_Rotation+0x94>)
 8007dac:	22f0      	movs	r2, #240	; 0xf0
 8007dae:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8007db0:	4b16      	ldr	r3, [pc, #88]	; (8007e0c <ILI9341_Set_Rotation+0x98>)
 8007db2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007db6:	801a      	strh	r2, [r3, #0]
			break;
 8007db8:	e021      	b.n	8007dfe <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8007dba:	2028      	movs	r0, #40	; 0x28
 8007dbc:	f7ff ff4e 	bl	8007c5c <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8007dc0:	4b11      	ldr	r3, [pc, #68]	; (8007e08 <ILI9341_Set_Rotation+0x94>)
 8007dc2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007dc6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8007dc8:	4b10      	ldr	r3, [pc, #64]	; (8007e0c <ILI9341_Set_Rotation+0x98>)
 8007dca:	22f0      	movs	r2, #240	; 0xf0
 8007dcc:	801a      	strh	r2, [r3, #0]
			break;
 8007dce:	e016      	b.n	8007dfe <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8007dd0:	2088      	movs	r0, #136	; 0x88
 8007dd2:	f7ff ff43 	bl	8007c5c <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8007dd6:	4b0c      	ldr	r3, [pc, #48]	; (8007e08 <ILI9341_Set_Rotation+0x94>)
 8007dd8:	22f0      	movs	r2, #240	; 0xf0
 8007dda:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8007ddc:	4b0b      	ldr	r3, [pc, #44]	; (8007e0c <ILI9341_Set_Rotation+0x98>)
 8007dde:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007de2:	801a      	strh	r2, [r3, #0]
			break;
 8007de4:	e00b      	b.n	8007dfe <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8007de6:	20e8      	movs	r0, #232	; 0xe8
 8007de8:	f7ff ff38 	bl	8007c5c <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8007dec:	4b06      	ldr	r3, [pc, #24]	; (8007e08 <ILI9341_Set_Rotation+0x94>)
 8007dee:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007df2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8007df4:	4b05      	ldr	r3, [pc, #20]	; (8007e0c <ILI9341_Set_Rotation+0x98>)
 8007df6:	22f0      	movs	r2, #240	; 0xf0
 8007df8:	801a      	strh	r2, [r3, #0]
			break;
 8007dfa:	e000      	b.n	8007dfe <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8007dfc:	bf00      	nop
	}
}
 8007dfe:	bf00      	nop
 8007e00:	3710      	adds	r7, #16
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	200003de 	.word	0x200003de
 8007e0c:	200003dc 	.word	0x200003dc

08007e10 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8007e10:	b480      	push	{r7}
 8007e12:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8007e14:	4b05      	ldr	r3, [pc, #20]	; (8007e2c <ILI9341_Enable+0x1c>)
 8007e16:	695b      	ldr	r3, [r3, #20]
 8007e18:	4a04      	ldr	r2, [pc, #16]	; (8007e2c <ILI9341_Enable+0x1c>)
 8007e1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007e1e:	6153      	str	r3, [r2, #20]
}
 8007e20:	bf00      	nop
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr
 8007e2a:	bf00      	nop
 8007e2c:	48000400 	.word	0x48000400

08007e30 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	af00      	add	r7, sp, #0

	ILI9341_Enable();
 8007e34:	f7ff ffec 	bl	8007e10 <ILI9341_Enable>
	ILI9341_SPI_Init();
 8007e38:	f7ff feca 	bl	8007bd0 <ILI9341_SPI_Init>
	ILI9341_Reset();
 8007e3c:	f7ff ff7c 	bl	8007d38 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_Write_Command(0x01);
 8007e40:	2001      	movs	r0, #1
 8007e42:	f7ff fee9 	bl	8007c18 <ILI9341_Write_Command>
	HAL_Delay(2000);
 8007e46:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007e4a:	f7fa f8e1 	bl	8002010 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_Write_Command(0xCB);
 8007e4e:	20cb      	movs	r0, #203	; 0xcb
 8007e50:	f7ff fee2 	bl	8007c18 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x39);
 8007e54:	2039      	movs	r0, #57	; 0x39
 8007e56:	f7ff ff01 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2C);
 8007e5a:	202c      	movs	r0, #44	; 0x2c
 8007e5c:	f7ff fefe 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8007e60:	2000      	movs	r0, #0
 8007e62:	f7ff fefb 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x34);
 8007e66:	2034      	movs	r0, #52	; 0x34
 8007e68:	f7ff fef8 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x02);
 8007e6c:	2002      	movs	r0, #2
 8007e6e:	f7ff fef5 	bl	8007c5c <ILI9341_Write_Data>

	//POWER CONTROL B
	ILI9341_Write_Command(0xCF);
 8007e72:	20cf      	movs	r0, #207	; 0xcf
 8007e74:	f7ff fed0 	bl	8007c18 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8007e78:	2000      	movs	r0, #0
 8007e7a:	f7ff feef 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 8007e7e:	20c1      	movs	r0, #193	; 0xc1
 8007e80:	f7ff feec 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x30);
 8007e84:	2030      	movs	r0, #48	; 0x30
 8007e86:	f7ff fee9 	bl	8007c5c <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL A
	ILI9341_Write_Command(0xE8);
 8007e8a:	20e8      	movs	r0, #232	; 0xe8
 8007e8c:	f7ff fec4 	bl	8007c18 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x85);
 8007e90:	2085      	movs	r0, #133	; 0x85
 8007e92:	f7ff fee3 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8007e96:	2000      	movs	r0, #0
 8007e98:	f7ff fee0 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x78);
 8007e9c:	2078      	movs	r0, #120	; 0x78
 8007e9e:	f7ff fedd 	bl	8007c5c <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL B
	ILI9341_Write_Command(0xEA);
 8007ea2:	20ea      	movs	r0, #234	; 0xea
 8007ea4:	f7ff feb8 	bl	8007c18 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8007ea8:	2000      	movs	r0, #0
 8007eaa:	f7ff fed7 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8007eae:	2000      	movs	r0, #0
 8007eb0:	f7ff fed4 	bl	8007c5c <ILI9341_Write_Data>

	//POWER ON SEQUENCE CONTROL
	ILI9341_Write_Command(0xED);
 8007eb4:	20ed      	movs	r0, #237	; 0xed
 8007eb6:	f7ff feaf 	bl	8007c18 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x64);
 8007eba:	2064      	movs	r0, #100	; 0x64
 8007ebc:	f7ff fece 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8007ec0:	2003      	movs	r0, #3
 8007ec2:	f7ff fecb 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x12);
 8007ec6:	2012      	movs	r0, #18
 8007ec8:	f7ff fec8 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x81);
 8007ecc:	2081      	movs	r0, #129	; 0x81
 8007ece:	f7ff fec5 	bl	8007c5c <ILI9341_Write_Data>

	//PUMP RATIO CONTROL
	ILI9341_Write_Command(0xF7);
 8007ed2:	20f7      	movs	r0, #247	; 0xf7
 8007ed4:	f7ff fea0 	bl	8007c18 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x20);
 8007ed8:	2020      	movs	r0, #32
 8007eda:	f7ff febf 	bl	8007c5c <ILI9341_Write_Data>

	//POWER CONTROL,VRH[5:0]
	ILI9341_Write_Command(0xC0);
 8007ede:	20c0      	movs	r0, #192	; 0xc0
 8007ee0:	f7ff fe9a 	bl	8007c18 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x23);
 8007ee4:	2023      	movs	r0, #35	; 0x23
 8007ee6:	f7ff feb9 	bl	8007c5c <ILI9341_Write_Data>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_Write_Command(0xC1);
 8007eea:	20c1      	movs	r0, #193	; 0xc1
 8007eec:	f7ff fe94 	bl	8007c18 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x10);
 8007ef0:	2010      	movs	r0, #16
 8007ef2:	f7ff feb3 	bl	8007c5c <ILI9341_Write_Data>

	//VCM CONTROL
	ILI9341_Write_Command(0xC5);
 8007ef6:	20c5      	movs	r0, #197	; 0xc5
 8007ef8:	f7ff fe8e 	bl	8007c18 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x3E);
 8007efc:	203e      	movs	r0, #62	; 0x3e
 8007efe:	f7ff fead 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x28);
 8007f02:	2028      	movs	r0, #40	; 0x28
 8007f04:	f7ff feaa 	bl	8007c5c <ILI9341_Write_Data>

	//VCM CONTROL 2
	ILI9341_Write_Command(0xC7);
 8007f08:	20c7      	movs	r0, #199	; 0xc7
 8007f0a:	f7ff fe85 	bl	8007c18 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x86);
 8007f0e:	2086      	movs	r0, #134	; 0x86
 8007f10:	f7ff fea4 	bl	8007c5c <ILI9341_Write_Data>

	//MEMORY ACCESS CONTROL
	ILI9341_Write_Command(0x36);
 8007f14:	2036      	movs	r0, #54	; 0x36
 8007f16:	f7ff fe7f 	bl	8007c18 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x48);
 8007f1a:	2048      	movs	r0, #72	; 0x48
 8007f1c:	f7ff fe9e 	bl	8007c5c <ILI9341_Write_Data>

	//PIXEL FORMAT
	ILI9341_Write_Command(0x3A);
 8007f20:	203a      	movs	r0, #58	; 0x3a
 8007f22:	f7ff fe79 	bl	8007c18 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x55);
 8007f26:	2055      	movs	r0, #85	; 0x55
 8007f28:	f7ff fe98 	bl	8007c5c <ILI9341_Write_Data>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_Write_Command(0xB1);
 8007f2c:	20b1      	movs	r0, #177	; 0xb1
 8007f2e:	f7ff fe73 	bl	8007c18 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8007f32:	2000      	movs	r0, #0
 8007f34:	f7ff fe92 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x18);
 8007f38:	2018      	movs	r0, #24
 8007f3a:	f7ff fe8f 	bl	8007c5c <ILI9341_Write_Data>

	//DISPLAY FUNCTION CONTROL
	ILI9341_Write_Command(0xB6);
 8007f3e:	20b6      	movs	r0, #182	; 0xb6
 8007f40:	f7ff fe6a 	bl	8007c18 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x08);
 8007f44:	2008      	movs	r0, #8
 8007f46:	f7ff fe89 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x82);
 8007f4a:	2082      	movs	r0, #130	; 0x82
 8007f4c:	f7ff fe86 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x27);
 8007f50:	2027      	movs	r0, #39	; 0x27
 8007f52:	f7ff fe83 	bl	8007c5c <ILI9341_Write_Data>

	//3GAMMA FUNCTION DISABLE
	ILI9341_Write_Command(0xF2);
 8007f56:	20f2      	movs	r0, #242	; 0xf2
 8007f58:	f7ff fe5e 	bl	8007c18 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8007f5c:	2000      	movs	r0, #0
 8007f5e:	f7ff fe7d 	bl	8007c5c <ILI9341_Write_Data>

	//GAMMA CURVE SELECTED
	ILI9341_Write_Command(0x26);
 8007f62:	2026      	movs	r0, #38	; 0x26
 8007f64:	f7ff fe58 	bl	8007c18 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x01);
 8007f68:	2001      	movs	r0, #1
 8007f6a:	f7ff fe77 	bl	8007c5c <ILI9341_Write_Data>

	//POSITIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE0);
 8007f6e:	20e0      	movs	r0, #224	; 0xe0
 8007f70:	f7ff fe52 	bl	8007c18 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x0F);
 8007f74:	200f      	movs	r0, #15
 8007f76:	f7ff fe71 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8007f7a:	2031      	movs	r0, #49	; 0x31
 8007f7c:	f7ff fe6e 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2B);
 8007f80:	202b      	movs	r0, #43	; 0x2b
 8007f82:	f7ff fe6b 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 8007f86:	200c      	movs	r0, #12
 8007f88:	f7ff fe68 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8007f8c:	200e      	movs	r0, #14
 8007f8e:	f7ff fe65 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 8007f92:	2008      	movs	r0, #8
 8007f94:	f7ff fe62 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x4E);
 8007f98:	204e      	movs	r0, #78	; 0x4e
 8007f9a:	f7ff fe5f 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(0xF1);
 8007f9e:	20f1      	movs	r0, #241	; 0xf1
 8007fa0:	f7ff fe5c 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x37);
 8007fa4:	2037      	movs	r0, #55	; 0x37
 8007fa6:	f7ff fe59 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 8007faa:	2007      	movs	r0, #7
 8007fac:	f7ff fe56 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x10);
 8007fb0:	2010      	movs	r0, #16
 8007fb2:	f7ff fe53 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8007fb6:	2003      	movs	r0, #3
 8007fb8:	f7ff fe50 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8007fbc:	200e      	movs	r0, #14
 8007fbe:	f7ff fe4d 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x09);
 8007fc2:	2009      	movs	r0, #9
 8007fc4:	f7ff fe4a 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8007fc8:	2000      	movs	r0, #0
 8007fca:	f7ff fe47 	bl	8007c5c <ILI9341_Write_Data>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE1);
 8007fce:	20e1      	movs	r0, #225	; 0xe1
 8007fd0:	f7ff fe22 	bl	8007c18 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8007fd4:	2000      	movs	r0, #0
 8007fd6:	f7ff fe41 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8007fda:	200e      	movs	r0, #14
 8007fdc:	f7ff fe3e 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x14);
 8007fe0:	2014      	movs	r0, #20
 8007fe2:	f7ff fe3b 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8007fe6:	2003      	movs	r0, #3
 8007fe8:	f7ff fe38 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x11);
 8007fec:	2011      	movs	r0, #17
 8007fee:	f7ff fe35 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 8007ff2:	2007      	movs	r0, #7
 8007ff4:	f7ff fe32 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8007ff8:	2031      	movs	r0, #49	; 0x31
 8007ffa:	f7ff fe2f 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 8007ffe:	20c1      	movs	r0, #193	; 0xc1
 8008000:	f7ff fe2c 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x48);
 8008004:	2048      	movs	r0, #72	; 0x48
 8008006:	f7ff fe29 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 800800a:	2008      	movs	r0, #8
 800800c:	f7ff fe26 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8008010:	200f      	movs	r0, #15
 8008012:	f7ff fe23 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 8008016:	200c      	movs	r0, #12
 8008018:	f7ff fe20 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 800801c:	2031      	movs	r0, #49	; 0x31
 800801e:	f7ff fe1d 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x36);
 8008022:	2036      	movs	r0, #54	; 0x36
 8008024:	f7ff fe1a 	bl	8007c5c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8008028:	200f      	movs	r0, #15
 800802a:	f7ff fe17 	bl	8007c5c <ILI9341_Write_Data>

	//EXIT SLEEP
	ILI9341_Write_Command(0x11);
 800802e:	2011      	movs	r0, #17
 8008030:	f7ff fdf2 	bl	8007c18 <ILI9341_Write_Command>
	HAL_Delay(240);
 8008034:	20f0      	movs	r0, #240	; 0xf0
 8008036:	f7f9 ffeb 	bl	8002010 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_Write_Command(0x29);
 800803a:	2029      	movs	r0, #41	; 0x29
 800803c:	f7ff fdec 	bl	8007c18 <ILI9341_Write_Command>
	
	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8008040:	2000      	movs	r0, #0
 8008042:	f7ff fe97 	bl	8007d74 <ILI9341_Set_Rotation>
}
 8008046:	bf00      	nop
 8008048:	bd80      	pop	{r7, pc}
	...

0800804c <ILI9341_Draw_colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_colour_Burst(uint16_t colour, uint32_t size)
{
 800804c:	b5b0      	push	{r4, r5, r7, lr}
 800804e:	b08c      	sub	sp, #48	; 0x30
 8008050:	af00      	add	r7, sp, #0
 8008052:	4603      	mov	r3, r0
 8008054:	6039      	str	r1, [r7, #0]
 8008056:	80fb      	strh	r3, [r7, #6]
 8008058:	466b      	mov	r3, sp
 800805a:	461d      	mov	r5, r3

	//SENDS COLOUR

	uint32_t buffer_size = 0;
 800805c:	2300      	movs	r3, #0
 800805e:	627b      	str	r3, [r7, #36]	; 0x24
	if((size*2) < BURST_MAX_SIZE)
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	005b      	lsls	r3, r3, #1
 8008064:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008068:	d202      	bcs.n	8008070 <ILI9341_Draw_colour_Burst+0x24>
	{
		buffer_size = size;
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	627b      	str	r3, [r7, #36]	; 0x24
 800806e:	e002      	b.n	8008076 <ILI9341_Draw_colour_Burst+0x2a>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 8008070:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008074:	627b      	str	r3, [r7, #36]	; 0x24
	}

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8008076:	4b42      	ldr	r3, [pc, #264]	; (8008180 <ILI9341_Draw_colour_Burst+0x134>)
 8008078:	695b      	ldr	r3, [r3, #20]
 800807a:	4a41      	ldr	r2, [pc, #260]	; (8008180 <ILI9341_Draw_colour_Burst+0x134>)
 800807c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008080:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008082:	4b3f      	ldr	r3, [pc, #252]	; (8008180 <ILI9341_Draw_colour_Burst+0x134>)
 8008084:	695b      	ldr	r3, [r3, #20]
 8008086:	4a3e      	ldr	r2, [pc, #248]	; (8008180 <ILI9341_Draw_colour_Burst+0x134>)
 8008088:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800808c:	6153      	str	r3, [r2, #20]

	unsigned char chifted = 	colour>>8;;
 800808e:	88fb      	ldrh	r3, [r7, #6]
 8008090:	0a1b      	lsrs	r3, r3, #8
 8008092:	b29b      	uxth	r3, r3
 8008094:	76fb      	strb	r3, [r7, #27]
	unsigned char burst_buffer[buffer_size];
 8008096:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008098:	4603      	mov	r3, r0
 800809a:	3b01      	subs	r3, #1
 800809c:	617b      	str	r3, [r7, #20]
 800809e:	4601      	mov	r1, r0
 80080a0:	f04f 0200 	mov.w	r2, #0
 80080a4:	f04f 0300 	mov.w	r3, #0
 80080a8:	f04f 0400 	mov.w	r4, #0
 80080ac:	00d4      	lsls	r4, r2, #3
 80080ae:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80080b2:	00cb      	lsls	r3, r1, #3
 80080b4:	4601      	mov	r1, r0
 80080b6:	f04f 0200 	mov.w	r2, #0
 80080ba:	f04f 0300 	mov.w	r3, #0
 80080be:	f04f 0400 	mov.w	r4, #0
 80080c2:	00d4      	lsls	r4, r2, #3
 80080c4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80080c8:	00cb      	lsls	r3, r1, #3
 80080ca:	1dc3      	adds	r3, r0, #7
 80080cc:	08db      	lsrs	r3, r3, #3
 80080ce:	00db      	lsls	r3, r3, #3
 80080d0:	ebad 0d03 	sub.w	sp, sp, r3
 80080d4:	466b      	mov	r3, sp
 80080d6:	3300      	adds	r3, #0
 80080d8:	613b      	str	r3, [r7, #16]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 80080da:	2300      	movs	r3, #0
 80080dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80080de:	e00d      	b.n	80080fc <ILI9341_Draw_colour_Burst+0xb0>
	{
			burst_buffer[j] = 	chifted;
 80080e0:	693a      	ldr	r2, [r7, #16]
 80080e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e4:	4413      	add	r3, r2
 80080e6:	7efa      	ldrb	r2, [r7, #27]
 80080e8:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 80080ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ec:	3301      	adds	r3, #1
 80080ee:	88fa      	ldrh	r2, [r7, #6]
 80080f0:	b2d1      	uxtb	r1, r2
 80080f2:	693a      	ldr	r2, [r7, #16]
 80080f4:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 80080f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f8:	3302      	adds	r3, #2
 80080fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80080fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008100:	429a      	cmp	r2, r3
 8008102:	d3ed      	bcc.n	80080e0 <ILI9341_Draw_colour_Burst+0x94>
	}
	
	uint32_t Sending_size = size*2;
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	005b      	lsls	r3, r3, #1
 8008108:	60fb      	str	r3, [r7, #12]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 800810a:	2301      	movs	r3, #1
 800810c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t Remainder_from_block = 0;
 800810e:	2300      	movs	r3, #0
 8008110:	623b      	str	r3, [r7, #32]
	if(size > 0)
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d00d      	beq.n	8008134 <ILI9341_Draw_colour_Burst+0xe8>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 8008118:	68fa      	ldr	r2, [r7, #12]
 800811a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008120:	62fb      	str	r3, [r7, #44]	; 0x2c
			Remainder_from_block 	= Sending_size%buffer_size;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008126:	fbb3 f2f2 	udiv	r2, r3, r2
 800812a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800812c:	fb01 f202 	mul.w	r2, r1, r2
 8008130:	1a9b      	subs	r3, r3, r2
 8008132:	623b      	str	r3, [r7, #32]
	}


	if(Sending_in_Block != 0)
 8008134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008136:	2b00      	cmp	r3, #0
 8008138:	d010      	beq.n	800815c <ILI9341_Draw_colour_Burst+0x110>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800813a:	2300      	movs	r3, #0
 800813c:	61fb      	str	r3, [r7, #28]
 800813e:	e009      	b.n	8008154 <ILI9341_Draw_colour_Burst+0x108>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, buffer_size, 10);
 8008140:	6939      	ldr	r1, [r7, #16]
 8008142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008144:	b29a      	uxth	r2, r3
 8008146:	230a      	movs	r3, #10
 8008148:	480e      	ldr	r0, [pc, #56]	; (8008184 <ILI9341_Draw_colour_Burst+0x138>)
 800814a:	f7fd fc33 	bl	80059b4 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800814e:	69fb      	ldr	r3, [r7, #28]
 8008150:	3301      	adds	r3, #1
 8008152:	61fb      	str	r3, [r7, #28]
 8008154:	69fa      	ldr	r2, [r7, #28]
 8008156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008158:	429a      	cmp	r2, r3
 800815a:	d3f1      	bcc.n	8008140 <ILI9341_Draw_colour_Burst+0xf4>
		}
	}

	//REMAINDER!
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);
 800815c:	6939      	ldr	r1, [r7, #16]
 800815e:	6a3b      	ldr	r3, [r7, #32]
 8008160:	b29a      	uxth	r2, r3
 8008162:	230a      	movs	r3, #10
 8008164:	4807      	ldr	r0, [pc, #28]	; (8008184 <ILI9341_Draw_colour_Burst+0x138>)
 8008166:	f7fd fc25 	bl	80059b4 <HAL_SPI_Transmit>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800816a:	4b05      	ldr	r3, [pc, #20]	; (8008180 <ILI9341_Draw_colour_Burst+0x134>)
 800816c:	695b      	ldr	r3, [r3, #20]
 800816e:	4a04      	ldr	r2, [pc, #16]	; (8008180 <ILI9341_Draw_colour_Burst+0x134>)
 8008170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008174:	6153      	str	r3, [r2, #20]
 8008176:	46ad      	mov	sp, r5


}
 8008178:	bf00      	nop
 800817a:	3730      	adds	r7, #48	; 0x30
 800817c:	46bd      	mov	sp, r7
 800817e:	bdb0      	pop	{r4, r5, r7, pc}
 8008180:	48000400 	.word	0x48000400
 8008184:	2000065c 	.word	0x2000065c

08008188 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends height*width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t colour)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0
 800818e:	4603      	mov	r3, r0
 8008190:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);
 8008192:	4b0e      	ldr	r3, [pc, #56]	; (80081cc <ILI9341_Fill_Screen+0x44>)
 8008194:	881b      	ldrh	r3, [r3, #0]
 8008196:	b29a      	uxth	r2, r3
 8008198:	4b0d      	ldr	r3, [pc, #52]	; (80081d0 <ILI9341_Fill_Screen+0x48>)
 800819a:	881b      	ldrh	r3, [r3, #0]
 800819c:	b29b      	uxth	r3, r3
 800819e:	2100      	movs	r1, #0
 80081a0:	2000      	movs	r0, #0
 80081a2:	f7ff fd7d 	bl	8007ca0 <ILI9341_Set_Address>
	ILI9341_Draw_colour_Burst(colour, LCD_WIDTH*LCD_HEIGHT);
 80081a6:	4b09      	ldr	r3, [pc, #36]	; (80081cc <ILI9341_Fill_Screen+0x44>)
 80081a8:	881b      	ldrh	r3, [r3, #0]
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	461a      	mov	r2, r3
 80081ae:	4b08      	ldr	r3, [pc, #32]	; (80081d0 <ILI9341_Fill_Screen+0x48>)
 80081b0:	881b      	ldrh	r3, [r3, #0]
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	fb03 f302 	mul.w	r3, r3, r2
 80081b8:	461a      	mov	r2, r3
 80081ba:	88fb      	ldrh	r3, [r7, #6]
 80081bc:	4611      	mov	r1, r2
 80081be:	4618      	mov	r0, r3
 80081c0:	f7ff ff44 	bl	800804c <ILI9341_Draw_colour_Burst>
}
 80081c4:	bf00      	nop
 80081c6:	3708      	adds	r7, #8
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	200003de 	.word	0x200003de
 80081d0:	200003dc 	.word	0x200003dc

080081d4 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t colour)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b086      	sub	sp, #24
 80081d8:	af00      	add	r7, sp, #0
 80081da:	4603      	mov	r3, r0
 80081dc:	80fb      	strh	r3, [r7, #6]
 80081de:	460b      	mov	r3, r1
 80081e0:	80bb      	strh	r3, [r7, #4]
 80081e2:	4613      	mov	r3, r2
 80081e4:	807b      	strh	r3, [r7, #2]
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80081e6:	4b64      	ldr	r3, [pc, #400]	; (8008378 <ILI9341_Draw_Pixel+0x1a4>)
 80081e8:	881b      	ldrh	r3, [r3, #0]
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	88fa      	ldrh	r2, [r7, #6]
 80081ee:	429a      	cmp	r2, r3
 80081f0:	f080 80be 	bcs.w	8008370 <ILI9341_Draw_Pixel+0x19c>
 80081f4:	4b61      	ldr	r3, [pc, #388]	; (800837c <ILI9341_Draw_Pixel+0x1a8>)
 80081f6:	881b      	ldrh	r3, [r3, #0]
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	88ba      	ldrh	r2, [r7, #4]
 80081fc:	429a      	cmp	r2, r3
 80081fe:	f080 80b7 	bcs.w	8008370 <ILI9341_Draw_Pixel+0x19c>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8008202:	4b5f      	ldr	r3, [pc, #380]	; (8008380 <ILI9341_Draw_Pixel+0x1ac>)
 8008204:	695b      	ldr	r3, [r3, #20]
 8008206:	4a5e      	ldr	r2, [pc, #376]	; (8008380 <ILI9341_Draw_Pixel+0x1ac>)
 8008208:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800820c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800820e:	4b5c      	ldr	r3, [pc, #368]	; (8008380 <ILI9341_Draw_Pixel+0x1ac>)
 8008210:	695b      	ldr	r3, [r3, #20]
 8008212:	4a5b      	ldr	r2, [pc, #364]	; (8008380 <ILI9341_Draw_Pixel+0x1ac>)
 8008214:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008218:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(0x2A);
 800821a:	202a      	movs	r0, #42	; 0x2a
 800821c:	f7ff fce8 	bl	8007bf0 <ILI9341_SPI_Send>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8008220:	4b57      	ldr	r3, [pc, #348]	; (8008380 <ILI9341_Draw_Pixel+0x1ac>)
 8008222:	695b      	ldr	r3, [r3, #20]
 8008224:	4a56      	ldr	r2, [pc, #344]	; (8008380 <ILI9341_Draw_Pixel+0x1ac>)
 8008226:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800822a:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800822c:	4b54      	ldr	r3, [pc, #336]	; (8008380 <ILI9341_Draw_Pixel+0x1ac>)
 800822e:	695b      	ldr	r3, [r3, #20]
 8008230:	4a53      	ldr	r2, [pc, #332]	; (8008380 <ILI9341_Draw_Pixel+0x1ac>)
 8008232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008236:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008238:	4b51      	ldr	r3, [pc, #324]	; (8008380 <ILI9341_Draw_Pixel+0x1ac>)
 800823a:	695b      	ldr	r3, [r3, #20]
 800823c:	4a50      	ldr	r2, [pc, #320]	; (8008380 <ILI9341_Draw_Pixel+0x1ac>)
 800823e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008242:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8008244:	88fb      	ldrh	r3, [r7, #6]
 8008246:	0a1b      	lsrs	r3, r3, #8
 8008248:	b29b      	uxth	r3, r3
 800824a:	b2db      	uxtb	r3, r3
 800824c:	753b      	strb	r3, [r7, #20]
 800824e:	88fb      	ldrh	r3, [r7, #6]
 8008250:	b2db      	uxtb	r3, r3
 8008252:	757b      	strb	r3, [r7, #21]
 8008254:	88fb      	ldrh	r3, [r7, #6]
 8008256:	3301      	adds	r3, #1
 8008258:	121b      	asrs	r3, r3, #8
 800825a:	b2db      	uxtb	r3, r3
 800825c:	75bb      	strb	r3, [r7, #22]
 800825e:	88fb      	ldrh	r3, [r7, #6]
 8008260:	b2db      	uxtb	r3, r3
 8008262:	3301      	adds	r3, #1
 8008264:	b2db      	uxtb	r3, r3
 8008266:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8008268:	f107 0114 	add.w	r1, r7, #20
 800826c:	2301      	movs	r3, #1
 800826e:	2204      	movs	r2, #4
 8008270:	4844      	ldr	r0, [pc, #272]	; (8008384 <ILI9341_Draw_Pixel+0x1b0>)
 8008272:	f7fd fb9f 	bl	80059b4 <HAL_SPI_Transmit>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008276:	4b42      	ldr	r3, [pc, #264]	; (8008380 <ILI9341_Draw_Pixel+0x1ac>)
 8008278:	695b      	ldr	r3, [r3, #20]
 800827a:	4a41      	ldr	r2, [pc, #260]	; (8008380 <ILI9341_Draw_Pixel+0x1ac>)
 800827c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008280:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8008282:	4b3f      	ldr	r3, [pc, #252]	; (8008380 <ILI9341_Draw_Pixel+0x1ac>)
 8008284:	695b      	ldr	r3, [r3, #20]
 8008286:	4a3e      	ldr	r2, [pc, #248]	; (8008380 <ILI9341_Draw_Pixel+0x1ac>)
 8008288:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800828c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800828e:	4b3c      	ldr	r3, [pc, #240]	; (8008380 <ILI9341_Draw_Pixel+0x1ac>)
 8008290:	695b      	ldr	r3, [r3, #20]
 8008292:	4a3b      	ldr	r2, [pc, #236]	; (8008380 <ILI9341_Draw_Pixel+0x1ac>)
 8008294:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008298:	6153      	str	r3, [r2, #20]

	ILI9341_SPI_Send(0x2B);
 800829a:	202b      	movs	r0, #43	; 0x2b
 800829c:	f7ff fca8 	bl	8007bf0 <ILI9341_SPI_Send>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 80082a0:	4b37      	ldr	r3, [pc, #220]	; (8008380 <ILI9341_Draw_Pixel+0x1ac>)
 80082a2:	695b      	ldr	r3, [r3, #20]
 80082a4:	4a36      	ldr	r2, [pc, #216]	; (8008380 <ILI9341_Draw_Pixel+0x1ac>)
 80082a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082aa:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80082ac:	4b34      	ldr	r3, [pc, #208]	; (8008380 <ILI9341_Draw_Pixel+0x1ac>)
 80082ae:	695b      	ldr	r3, [r3, #20]
 80082b0:	4a33      	ldr	r2, [pc, #204]	; (8008380 <ILI9341_Draw_Pixel+0x1ac>)
 80082b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082b6:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80082b8:	4b31      	ldr	r3, [pc, #196]	; (8008380 <ILI9341_Draw_Pixel+0x1ac>)
 80082ba:	695b      	ldr	r3, [r3, #20]
 80082bc:	4a30      	ldr	r2, [pc, #192]	; (8008380 <ILI9341_Draw_Pixel+0x1ac>)
 80082be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082c2:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 80082c4:	88bb      	ldrh	r3, [r7, #4]
 80082c6:	0a1b      	lsrs	r3, r3, #8
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	743b      	strb	r3, [r7, #16]
 80082ce:	88bb      	ldrh	r3, [r7, #4]
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	747b      	strb	r3, [r7, #17]
 80082d4:	88bb      	ldrh	r3, [r7, #4]
 80082d6:	3301      	adds	r3, #1
 80082d8:	121b      	asrs	r3, r3, #8
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	74bb      	strb	r3, [r7, #18]
 80082de:	88bb      	ldrh	r3, [r7, #4]
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	3301      	adds	r3, #1
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	74fb      	strb	r3, [r7, #19]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 80082e8:	f107 0110 	add.w	r1, r7, #16
 80082ec:	2301      	movs	r3, #1
 80082ee:	2204      	movs	r2, #4
 80082f0:	4824      	ldr	r0, [pc, #144]	; (8008384 <ILI9341_Draw_Pixel+0x1b0>)
 80082f2:	f7fd fb5f 	bl	80059b4 <HAL_SPI_Transmit>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80082f6:	4b22      	ldr	r3, [pc, #136]	; (8008380 <ILI9341_Draw_Pixel+0x1ac>)
 80082f8:	695b      	ldr	r3, [r3, #20]
 80082fa:	4a21      	ldr	r2, [pc, #132]	; (8008380 <ILI9341_Draw_Pixel+0x1ac>)
 80082fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008300:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8008302:	4b1f      	ldr	r3, [pc, #124]	; (8008380 <ILI9341_Draw_Pixel+0x1ac>)
 8008304:	695b      	ldr	r3, [r3, #20]
 8008306:	4a1e      	ldr	r2, [pc, #120]	; (8008380 <ILI9341_Draw_Pixel+0x1ac>)
 8008308:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800830c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800830e:	4b1c      	ldr	r3, [pc, #112]	; (8008380 <ILI9341_Draw_Pixel+0x1ac>)
 8008310:	695b      	ldr	r3, [r3, #20]
 8008312:	4a1b      	ldr	r2, [pc, #108]	; (8008380 <ILI9341_Draw_Pixel+0x1ac>)
 8008314:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008318:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(0x2C);
 800831a:	202c      	movs	r0, #44	; 0x2c
 800831c:	f7ff fc68 	bl	8007bf0 <ILI9341_SPI_Send>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8008320:	4b17      	ldr	r3, [pc, #92]	; (8008380 <ILI9341_Draw_Pixel+0x1ac>)
 8008322:	695b      	ldr	r3, [r3, #20]
 8008324:	4a16      	ldr	r2, [pc, #88]	; (8008380 <ILI9341_Draw_Pixel+0x1ac>)
 8008326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800832a:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800832c:	4b14      	ldr	r3, [pc, #80]	; (8008380 <ILI9341_Draw_Pixel+0x1ac>)
 800832e:	695b      	ldr	r3, [r3, #20]
 8008330:	4a13      	ldr	r2, [pc, #76]	; (8008380 <ILI9341_Draw_Pixel+0x1ac>)
 8008332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008336:	6153      	str	r3, [r2, #20]
	
	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008338:	4b11      	ldr	r3, [pc, #68]	; (8008380 <ILI9341_Draw_Pixel+0x1ac>)
 800833a:	695b      	ldr	r3, [r3, #20]
 800833c:	4a10      	ldr	r2, [pc, #64]	; (8008380 <ILI9341_Draw_Pixel+0x1ac>)
 800833e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008342:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 8008344:	887b      	ldrh	r3, [r7, #2]
 8008346:	0a1b      	lsrs	r3, r3, #8
 8008348:	b29b      	uxth	r3, r3
 800834a:	b2db      	uxtb	r3, r3
 800834c:	733b      	strb	r3, [r7, #12]
 800834e:	887b      	ldrh	r3, [r7, #2]
 8008350:	b2db      	uxtb	r3, r3
 8008352:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8008354:	f107 010c 	add.w	r1, r7, #12
 8008358:	2301      	movs	r3, #1
 800835a:	2202      	movs	r2, #2
 800835c:	4809      	ldr	r0, [pc, #36]	; (8008384 <ILI9341_Draw_Pixel+0x1b0>)
 800835e:	f7fd fb29 	bl	80059b4 <HAL_SPI_Transmit>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008362:	4b07      	ldr	r3, [pc, #28]	; (8008380 <ILI9341_Draw_Pixel+0x1ac>)
 8008364:	695b      	ldr	r3, [r3, #20]
 8008366:	4a06      	ldr	r2, [pc, #24]	; (8008380 <ILI9341_Draw_Pixel+0x1ac>)
 8008368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800836c:	6153      	str	r3, [r2, #20]
 800836e:	e000      	b.n	8008372 <ILI9341_Draw_Pixel+0x19e>
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8008370:	bf00      	nop

	
}
 8008372:	3718      	adds	r7, #24
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}
 8008378:	200003de 	.word	0x200003de
 800837c:	200003dc 	.word	0x200003dc
 8008380:	48000400 	.word	0x48000400
 8008384:	2000065c 	.word	0x2000065c

08008388 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t width, uint16_t height, uint16_t colour)
{
 8008388:	b590      	push	{r4, r7, lr}
 800838a:	b085      	sub	sp, #20
 800838c:	af00      	add	r7, sp, #0
 800838e:	4604      	mov	r4, r0
 8008390:	4608      	mov	r0, r1
 8008392:	4611      	mov	r1, r2
 8008394:	461a      	mov	r2, r3
 8008396:	4623      	mov	r3, r4
 8008398:	80fb      	strh	r3, [r7, #6]
 800839a:	4603      	mov	r3, r0
 800839c:	80bb      	strh	r3, [r7, #4]
 800839e:	460b      	mov	r3, r1
 80083a0:	807b      	strh	r3, [r7, #2]
 80083a2:	4613      	mov	r3, r2
 80083a4:	803b      	strh	r3, [r7, #0]
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80083a6:	4b37      	ldr	r3, [pc, #220]	; (8008484 <ILI9341_Draw_Rectangle+0xfc>)
 80083a8:	881b      	ldrh	r3, [r3, #0]
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	88fa      	ldrh	r2, [r7, #6]
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d264      	bcs.n	800847c <ILI9341_Draw_Rectangle+0xf4>
 80083b2:	4b35      	ldr	r3, [pc, #212]	; (8008488 <ILI9341_Draw_Rectangle+0x100>)
 80083b4:	881b      	ldrh	r3, [r3, #0]
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	88ba      	ldrh	r2, [r7, #4]
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d25e      	bcs.n	800847c <ILI9341_Draw_Rectangle+0xf4>
	if((X+width-1)>=LCD_WIDTH)
 80083be:	88fa      	ldrh	r2, [r7, #6]
 80083c0:	887b      	ldrh	r3, [r7, #2]
 80083c2:	4413      	add	r3, r2
 80083c4:	3b01      	subs	r3, #1
 80083c6:	4a2f      	ldr	r2, [pc, #188]	; (8008484 <ILI9341_Draw_Rectangle+0xfc>)
 80083c8:	8812      	ldrh	r2, [r2, #0]
 80083ca:	b292      	uxth	r2, r2
 80083cc:	4293      	cmp	r3, r2
 80083ce:	db05      	blt.n	80083dc <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-X;
 80083d0:	4b2c      	ldr	r3, [pc, #176]	; (8008484 <ILI9341_Draw_Rectangle+0xfc>)
 80083d2:	881b      	ldrh	r3, [r3, #0]
 80083d4:	b29a      	uxth	r2, r3
 80083d6:	88fb      	ldrh	r3, [r7, #6]
 80083d8:	1ad3      	subs	r3, r2, r3
 80083da:	807b      	strh	r3, [r7, #2]
		}
	if((Y+height-1)>=LCD_HEIGHT)
 80083dc:	88ba      	ldrh	r2, [r7, #4]
 80083de:	883b      	ldrh	r3, [r7, #0]
 80083e0:	4413      	add	r3, r2
 80083e2:	3b01      	subs	r3, #1
 80083e4:	4a28      	ldr	r2, [pc, #160]	; (8008488 <ILI9341_Draw_Rectangle+0x100>)
 80083e6:	8812      	ldrh	r2, [r2, #0]
 80083e8:	b292      	uxth	r2, r2
 80083ea:	4293      	cmp	r3, r2
 80083ec:	db05      	blt.n	80083fa <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-Y;
 80083ee:	4b26      	ldr	r3, [pc, #152]	; (8008488 <ILI9341_Draw_Rectangle+0x100>)
 80083f0:	881b      	ldrh	r3, [r3, #0]
 80083f2:	b29a      	uxth	r2, r3
 80083f4:	88bb      	ldrh	r3, [r7, #4]
 80083f6:	1ad3      	subs	r3, r2, r3
 80083f8:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Address(X, Y, X+width-1, Y+height-1);
 80083fa:	88fa      	ldrh	r2, [r7, #6]
 80083fc:	887b      	ldrh	r3, [r7, #2]
 80083fe:	4413      	add	r3, r2
 8008400:	b29b      	uxth	r3, r3
 8008402:	3b01      	subs	r3, #1
 8008404:	b29c      	uxth	r4, r3
 8008406:	88ba      	ldrh	r2, [r7, #4]
 8008408:	883b      	ldrh	r3, [r7, #0]
 800840a:	4413      	add	r3, r2
 800840c:	b29b      	uxth	r3, r3
 800840e:	3b01      	subs	r3, #1
 8008410:	b29b      	uxth	r3, r3
 8008412:	88b9      	ldrh	r1, [r7, #4]
 8008414:	88f8      	ldrh	r0, [r7, #6]
 8008416:	4622      	mov	r2, r4
 8008418:	f7ff fc42 	bl	8007ca0 <ILI9341_Set_Address>

	uint16_t size = height*width;
 800841c:	883a      	ldrh	r2, [r7, #0]
 800841e:	887b      	ldrh	r3, [r7, #2]
 8008420:	fb12 f303 	smulbb	r3, r2, r3
 8008424:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 8008426:	2300      	movs	r3, #0
 8008428:	737b      	strb	r3, [r7, #13]
	if((size & 1) && (size > 1))
 800842a:	89fb      	ldrh	r3, [r7, #14]
 800842c:	f003 0301 	and.w	r3, r3, #1
 8008430:	2b00      	cmp	r3, #0
 8008432:	d009      	beq.n	8008448 <ILI9341_Draw_Rectangle+0xc0>
 8008434:	89fb      	ldrh	r3, [r7, #14]
 8008436:	2b01      	cmp	r3, #1
 8008438:	d906      	bls.n	8008448 <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 800843a:	2301      	movs	r3, #1
 800843c:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 800843e:	89fb      	ldrh	r3, [r7, #14]
 8008440:	085b      	lsrs	r3, r3, #1
 8008442:	b29b      	uxth	r3, r3
 8008444:	005b      	lsls	r3, r3, #1
 8008446:	81fb      	strh	r3, [r7, #14]
	}
	ILI9341_Draw_colour_Burst(colour, size);
 8008448:	89fa      	ldrh	r2, [r7, #14]
 800844a:	8c3b      	ldrh	r3, [r7, #32]
 800844c:	4611      	mov	r1, r2
 800844e:	4618      	mov	r0, r3
 8008450:	f7ff fdfc 	bl	800804c <ILI9341_Draw_colour_Burst>
	if(truncated)
 8008454:	7b7b      	ldrb	r3, [r7, #13]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d011      	beq.n	800847e <ILI9341_Draw_Rectangle+0xf6>
		ILI9341_Draw_Pixel(X+width-1, Y+height-1, colour);
 800845a:	88fa      	ldrh	r2, [r7, #6]
 800845c:	887b      	ldrh	r3, [r7, #2]
 800845e:	4413      	add	r3, r2
 8008460:	b29b      	uxth	r3, r3
 8008462:	3b01      	subs	r3, #1
 8008464:	b298      	uxth	r0, r3
 8008466:	88ba      	ldrh	r2, [r7, #4]
 8008468:	883b      	ldrh	r3, [r7, #0]
 800846a:	4413      	add	r3, r2
 800846c:	b29b      	uxth	r3, r3
 800846e:	3b01      	subs	r3, #1
 8008470:	b29b      	uxth	r3, r3
 8008472:	8c3a      	ldrh	r2, [r7, #32]
 8008474:	4619      	mov	r1, r3
 8008476:	f7ff fead 	bl	80081d4 <ILI9341_Draw_Pixel>
 800847a:	e000      	b.n	800847e <ILI9341_Draw_Rectangle+0xf6>
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800847c:	bf00      	nop

}
 800847e:	3714      	adds	r7, #20
 8008480:	46bd      	mov	sp, r7
 8008482:	bd90      	pop	{r4, r7, pc}
 8008484:	200003de 	.word	0x200003de
 8008488:	200003dc 	.word	0x200003dc

0800848c <ILI9341_Draw_Horizontal_Line>:
 *
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t X, uint16_t Y, uint16_t width, uint16_t colour)
{
 800848c:	b590      	push	{r4, r7, lr}
 800848e:	b083      	sub	sp, #12
 8008490:	af00      	add	r7, sp, #0
 8008492:	4604      	mov	r4, r0
 8008494:	4608      	mov	r0, r1
 8008496:	4611      	mov	r1, r2
 8008498:	461a      	mov	r2, r3
 800849a:	4623      	mov	r3, r4
 800849c:	80fb      	strh	r3, [r7, #6]
 800849e:	4603      	mov	r3, r0
 80084a0:	80bb      	strh	r3, [r7, #4]
 80084a2:	460b      	mov	r3, r1
 80084a4:	807b      	strh	r3, [r7, #2]
 80084a6:	4613      	mov	r3, r2
 80084a8:	803b      	strh	r3, [r7, #0]
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80084aa:	4b18      	ldr	r3, [pc, #96]	; (800850c <ILI9341_Draw_Horizontal_Line+0x80>)
 80084ac:	881b      	ldrh	r3, [r3, #0]
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	88fa      	ldrh	r2, [r7, #6]
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d226      	bcs.n	8008504 <ILI9341_Draw_Horizontal_Line+0x78>
 80084b6:	4b16      	ldr	r3, [pc, #88]	; (8008510 <ILI9341_Draw_Horizontal_Line+0x84>)
 80084b8:	881b      	ldrh	r3, [r3, #0]
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	88ba      	ldrh	r2, [r7, #4]
 80084be:	429a      	cmp	r2, r3
 80084c0:	d220      	bcs.n	8008504 <ILI9341_Draw_Horizontal_Line+0x78>
	if((X+width-1)>=LCD_WIDTH)
 80084c2:	88fa      	ldrh	r2, [r7, #6]
 80084c4:	887b      	ldrh	r3, [r7, #2]
 80084c6:	4413      	add	r3, r2
 80084c8:	3b01      	subs	r3, #1
 80084ca:	4a10      	ldr	r2, [pc, #64]	; (800850c <ILI9341_Draw_Horizontal_Line+0x80>)
 80084cc:	8812      	ldrh	r2, [r2, #0]
 80084ce:	b292      	uxth	r2, r2
 80084d0:	4293      	cmp	r3, r2
 80084d2:	db05      	blt.n	80084e0 <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width=LCD_WIDTH-X;
 80084d4:	4b0d      	ldr	r3, [pc, #52]	; (800850c <ILI9341_Draw_Horizontal_Line+0x80>)
 80084d6:	881b      	ldrh	r3, [r3, #0]
 80084d8:	b29a      	uxth	r2, r3
 80084da:	88fb      	ldrh	r3, [r7, #6]
 80084dc:	1ad3      	subs	r3, r2, r3
 80084de:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Address(X, Y, X+width-1, Y);
 80084e0:	88fa      	ldrh	r2, [r7, #6]
 80084e2:	887b      	ldrh	r3, [r7, #2]
 80084e4:	4413      	add	r3, r2
 80084e6:	b29b      	uxth	r3, r3
 80084e8:	3b01      	subs	r3, #1
 80084ea:	b29a      	uxth	r2, r3
 80084ec:	88bb      	ldrh	r3, [r7, #4]
 80084ee:	88b9      	ldrh	r1, [r7, #4]
 80084f0:	88f8      	ldrh	r0, [r7, #6]
 80084f2:	f7ff fbd5 	bl	8007ca0 <ILI9341_Set_Address>
	ILI9341_Draw_colour_Burst(colour, width);
 80084f6:	887a      	ldrh	r2, [r7, #2]
 80084f8:	883b      	ldrh	r3, [r7, #0]
 80084fa:	4611      	mov	r1, r2
 80084fc:	4618      	mov	r0, r3
 80084fe:	f7ff fda5 	bl	800804c <ILI9341_Draw_colour_Burst>
 8008502:	e000      	b.n	8008506 <ILI9341_Draw_Horizontal_Line+0x7a>
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8008504:	bf00      	nop
}
 8008506:	370c      	adds	r7, #12
 8008508:	46bd      	mov	sp, r7
 800850a:	bd90      	pop	{r4, r7, pc}
 800850c:	200003de 	.word	0x200003de
 8008510:	200003dc 	.word	0x200003dc

08008514 <ILI9341_Draw_Vertical_Line>:

//DRAW LINE FROM X,Y LOCATION to X,Y+height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t height, uint16_t colour)
{
 8008514:	b590      	push	{r4, r7, lr}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
 800851a:	4604      	mov	r4, r0
 800851c:	4608      	mov	r0, r1
 800851e:	4611      	mov	r1, r2
 8008520:	461a      	mov	r2, r3
 8008522:	4623      	mov	r3, r4
 8008524:	80fb      	strh	r3, [r7, #6]
 8008526:	4603      	mov	r3, r0
 8008528:	80bb      	strh	r3, [r7, #4]
 800852a:	460b      	mov	r3, r1
 800852c:	807b      	strh	r3, [r7, #2]
 800852e:	4613      	mov	r3, r2
 8008530:	803b      	strh	r3, [r7, #0]
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8008532:	4b18      	ldr	r3, [pc, #96]	; (8008594 <ILI9341_Draw_Vertical_Line+0x80>)
 8008534:	881b      	ldrh	r3, [r3, #0]
 8008536:	b29b      	uxth	r3, r3
 8008538:	88fa      	ldrh	r2, [r7, #6]
 800853a:	429a      	cmp	r2, r3
 800853c:	d226      	bcs.n	800858c <ILI9341_Draw_Vertical_Line+0x78>
 800853e:	4b16      	ldr	r3, [pc, #88]	; (8008598 <ILI9341_Draw_Vertical_Line+0x84>)
 8008540:	881b      	ldrh	r3, [r3, #0]
 8008542:	b29b      	uxth	r3, r3
 8008544:	88ba      	ldrh	r2, [r7, #4]
 8008546:	429a      	cmp	r2, r3
 8008548:	d220      	bcs.n	800858c <ILI9341_Draw_Vertical_Line+0x78>
	if((Y+height-1)>=LCD_HEIGHT)
 800854a:	88ba      	ldrh	r2, [r7, #4]
 800854c:	887b      	ldrh	r3, [r7, #2]
 800854e:	4413      	add	r3, r2
 8008550:	3b01      	subs	r3, #1
 8008552:	4a11      	ldr	r2, [pc, #68]	; (8008598 <ILI9341_Draw_Vertical_Line+0x84>)
 8008554:	8812      	ldrh	r2, [r2, #0]
 8008556:	b292      	uxth	r2, r2
 8008558:	4293      	cmp	r3, r2
 800855a:	db05      	blt.n	8008568 <ILI9341_Draw_Vertical_Line+0x54>
		{
			height=LCD_HEIGHT-Y;
 800855c:	4b0e      	ldr	r3, [pc, #56]	; (8008598 <ILI9341_Draw_Vertical_Line+0x84>)
 800855e:	881b      	ldrh	r3, [r3, #0]
 8008560:	b29a      	uxth	r2, r3
 8008562:	88bb      	ldrh	r3, [r7, #4]
 8008564:	1ad3      	subs	r3, r2, r3
 8008566:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Address(X, Y, X, Y+height-1);
 8008568:	88ba      	ldrh	r2, [r7, #4]
 800856a:	887b      	ldrh	r3, [r7, #2]
 800856c:	4413      	add	r3, r2
 800856e:	b29b      	uxth	r3, r3
 8008570:	3b01      	subs	r3, #1
 8008572:	b29b      	uxth	r3, r3
 8008574:	88fa      	ldrh	r2, [r7, #6]
 8008576:	88b9      	ldrh	r1, [r7, #4]
 8008578:	88f8      	ldrh	r0, [r7, #6]
 800857a:	f7ff fb91 	bl	8007ca0 <ILI9341_Set_Address>
	ILI9341_Draw_colour_Burst(colour, height);
 800857e:	887a      	ldrh	r2, [r7, #2]
 8008580:	883b      	ldrh	r3, [r7, #0]
 8008582:	4611      	mov	r1, r2
 8008584:	4618      	mov	r0, r3
 8008586:	f7ff fd61 	bl	800804c <ILI9341_Draw_colour_Burst>
 800858a:	e000      	b.n	800858e <ILI9341_Draw_Vertical_Line+0x7a>
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800858c:	bf00      	nop
}
 800858e:	370c      	adds	r7, #12
 8008590:	46bd      	mov	sp, r7
 8008592:	bd90      	pop	{r4, r7, pc}
 8008594:	200003de 	.word	0x200003de
 8008598:	200003dc 	.word	0x200003dc

0800859c <__errno>:
 800859c:	4b01      	ldr	r3, [pc, #4]	; (80085a4 <__errno+0x8>)
 800859e:	6818      	ldr	r0, [r3, #0]
 80085a0:	4770      	bx	lr
 80085a2:	bf00      	nop
 80085a4:	200003e0 	.word	0x200003e0

080085a8 <__libc_init_array>:
 80085a8:	b570      	push	{r4, r5, r6, lr}
 80085aa:	4e0d      	ldr	r6, [pc, #52]	; (80085e0 <__libc_init_array+0x38>)
 80085ac:	4c0d      	ldr	r4, [pc, #52]	; (80085e4 <__libc_init_array+0x3c>)
 80085ae:	1ba4      	subs	r4, r4, r6
 80085b0:	10a4      	asrs	r4, r4, #2
 80085b2:	2500      	movs	r5, #0
 80085b4:	42a5      	cmp	r5, r4
 80085b6:	d109      	bne.n	80085cc <__libc_init_array+0x24>
 80085b8:	4e0b      	ldr	r6, [pc, #44]	; (80085e8 <__libc_init_array+0x40>)
 80085ba:	4c0c      	ldr	r4, [pc, #48]	; (80085ec <__libc_init_array+0x44>)
 80085bc:	f000 ff68 	bl	8009490 <_init>
 80085c0:	1ba4      	subs	r4, r4, r6
 80085c2:	10a4      	asrs	r4, r4, #2
 80085c4:	2500      	movs	r5, #0
 80085c6:	42a5      	cmp	r5, r4
 80085c8:	d105      	bne.n	80085d6 <__libc_init_array+0x2e>
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80085d0:	4798      	blx	r3
 80085d2:	3501      	adds	r5, #1
 80085d4:	e7ee      	b.n	80085b4 <__libc_init_array+0xc>
 80085d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80085da:	4798      	blx	r3
 80085dc:	3501      	adds	r5, #1
 80085de:	e7f2      	b.n	80085c6 <__libc_init_array+0x1e>
 80085e0:	08009820 	.word	0x08009820
 80085e4:	08009820 	.word	0x08009820
 80085e8:	08009820 	.word	0x08009820
 80085ec:	08009824 	.word	0x08009824

080085f0 <memset>:
 80085f0:	4402      	add	r2, r0
 80085f2:	4603      	mov	r3, r0
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d100      	bne.n	80085fa <memset+0xa>
 80085f8:	4770      	bx	lr
 80085fa:	f803 1b01 	strb.w	r1, [r3], #1
 80085fe:	e7f9      	b.n	80085f4 <memset+0x4>

08008600 <iprintf>:
 8008600:	b40f      	push	{r0, r1, r2, r3}
 8008602:	4b0a      	ldr	r3, [pc, #40]	; (800862c <iprintf+0x2c>)
 8008604:	b513      	push	{r0, r1, r4, lr}
 8008606:	681c      	ldr	r4, [r3, #0]
 8008608:	b124      	cbz	r4, 8008614 <iprintf+0x14>
 800860a:	69a3      	ldr	r3, [r4, #24]
 800860c:	b913      	cbnz	r3, 8008614 <iprintf+0x14>
 800860e:	4620      	mov	r0, r4
 8008610:	f000 fa22 	bl	8008a58 <__sinit>
 8008614:	ab05      	add	r3, sp, #20
 8008616:	9a04      	ldr	r2, [sp, #16]
 8008618:	68a1      	ldr	r1, [r4, #8]
 800861a:	9301      	str	r3, [sp, #4]
 800861c:	4620      	mov	r0, r4
 800861e:	f000 fbdb 	bl	8008dd8 <_vfiprintf_r>
 8008622:	b002      	add	sp, #8
 8008624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008628:	b004      	add	sp, #16
 800862a:	4770      	bx	lr
 800862c:	200003e0 	.word	0x200003e0

08008630 <_puts_r>:
 8008630:	b570      	push	{r4, r5, r6, lr}
 8008632:	460e      	mov	r6, r1
 8008634:	4605      	mov	r5, r0
 8008636:	b118      	cbz	r0, 8008640 <_puts_r+0x10>
 8008638:	6983      	ldr	r3, [r0, #24]
 800863a:	b90b      	cbnz	r3, 8008640 <_puts_r+0x10>
 800863c:	f000 fa0c 	bl	8008a58 <__sinit>
 8008640:	69ab      	ldr	r3, [r5, #24]
 8008642:	68ac      	ldr	r4, [r5, #8]
 8008644:	b913      	cbnz	r3, 800864c <_puts_r+0x1c>
 8008646:	4628      	mov	r0, r5
 8008648:	f000 fa06 	bl	8008a58 <__sinit>
 800864c:	4b23      	ldr	r3, [pc, #140]	; (80086dc <_puts_r+0xac>)
 800864e:	429c      	cmp	r4, r3
 8008650:	d117      	bne.n	8008682 <_puts_r+0x52>
 8008652:	686c      	ldr	r4, [r5, #4]
 8008654:	89a3      	ldrh	r3, [r4, #12]
 8008656:	071b      	lsls	r3, r3, #28
 8008658:	d51d      	bpl.n	8008696 <_puts_r+0x66>
 800865a:	6923      	ldr	r3, [r4, #16]
 800865c:	b1db      	cbz	r3, 8008696 <_puts_r+0x66>
 800865e:	3e01      	subs	r6, #1
 8008660:	68a3      	ldr	r3, [r4, #8]
 8008662:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008666:	3b01      	subs	r3, #1
 8008668:	60a3      	str	r3, [r4, #8]
 800866a:	b9e9      	cbnz	r1, 80086a8 <_puts_r+0x78>
 800866c:	2b00      	cmp	r3, #0
 800866e:	da2e      	bge.n	80086ce <_puts_r+0x9e>
 8008670:	4622      	mov	r2, r4
 8008672:	210a      	movs	r1, #10
 8008674:	4628      	mov	r0, r5
 8008676:	f000 f83f 	bl	80086f8 <__swbuf_r>
 800867a:	3001      	adds	r0, #1
 800867c:	d011      	beq.n	80086a2 <_puts_r+0x72>
 800867e:	200a      	movs	r0, #10
 8008680:	e011      	b.n	80086a6 <_puts_r+0x76>
 8008682:	4b17      	ldr	r3, [pc, #92]	; (80086e0 <_puts_r+0xb0>)
 8008684:	429c      	cmp	r4, r3
 8008686:	d101      	bne.n	800868c <_puts_r+0x5c>
 8008688:	68ac      	ldr	r4, [r5, #8]
 800868a:	e7e3      	b.n	8008654 <_puts_r+0x24>
 800868c:	4b15      	ldr	r3, [pc, #84]	; (80086e4 <_puts_r+0xb4>)
 800868e:	429c      	cmp	r4, r3
 8008690:	bf08      	it	eq
 8008692:	68ec      	ldreq	r4, [r5, #12]
 8008694:	e7de      	b.n	8008654 <_puts_r+0x24>
 8008696:	4621      	mov	r1, r4
 8008698:	4628      	mov	r0, r5
 800869a:	f000 f87f 	bl	800879c <__swsetup_r>
 800869e:	2800      	cmp	r0, #0
 80086a0:	d0dd      	beq.n	800865e <_puts_r+0x2e>
 80086a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086a6:	bd70      	pop	{r4, r5, r6, pc}
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	da04      	bge.n	80086b6 <_puts_r+0x86>
 80086ac:	69a2      	ldr	r2, [r4, #24]
 80086ae:	429a      	cmp	r2, r3
 80086b0:	dc06      	bgt.n	80086c0 <_puts_r+0x90>
 80086b2:	290a      	cmp	r1, #10
 80086b4:	d004      	beq.n	80086c0 <_puts_r+0x90>
 80086b6:	6823      	ldr	r3, [r4, #0]
 80086b8:	1c5a      	adds	r2, r3, #1
 80086ba:	6022      	str	r2, [r4, #0]
 80086bc:	7019      	strb	r1, [r3, #0]
 80086be:	e7cf      	b.n	8008660 <_puts_r+0x30>
 80086c0:	4622      	mov	r2, r4
 80086c2:	4628      	mov	r0, r5
 80086c4:	f000 f818 	bl	80086f8 <__swbuf_r>
 80086c8:	3001      	adds	r0, #1
 80086ca:	d1c9      	bne.n	8008660 <_puts_r+0x30>
 80086cc:	e7e9      	b.n	80086a2 <_puts_r+0x72>
 80086ce:	6823      	ldr	r3, [r4, #0]
 80086d0:	200a      	movs	r0, #10
 80086d2:	1c5a      	adds	r2, r3, #1
 80086d4:	6022      	str	r2, [r4, #0]
 80086d6:	7018      	strb	r0, [r3, #0]
 80086d8:	e7e5      	b.n	80086a6 <_puts_r+0x76>
 80086da:	bf00      	nop
 80086dc:	080097ac 	.word	0x080097ac
 80086e0:	080097cc 	.word	0x080097cc
 80086e4:	0800978c 	.word	0x0800978c

080086e8 <puts>:
 80086e8:	4b02      	ldr	r3, [pc, #8]	; (80086f4 <puts+0xc>)
 80086ea:	4601      	mov	r1, r0
 80086ec:	6818      	ldr	r0, [r3, #0]
 80086ee:	f7ff bf9f 	b.w	8008630 <_puts_r>
 80086f2:	bf00      	nop
 80086f4:	200003e0 	.word	0x200003e0

080086f8 <__swbuf_r>:
 80086f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086fa:	460e      	mov	r6, r1
 80086fc:	4614      	mov	r4, r2
 80086fe:	4605      	mov	r5, r0
 8008700:	b118      	cbz	r0, 800870a <__swbuf_r+0x12>
 8008702:	6983      	ldr	r3, [r0, #24]
 8008704:	b90b      	cbnz	r3, 800870a <__swbuf_r+0x12>
 8008706:	f000 f9a7 	bl	8008a58 <__sinit>
 800870a:	4b21      	ldr	r3, [pc, #132]	; (8008790 <__swbuf_r+0x98>)
 800870c:	429c      	cmp	r4, r3
 800870e:	d12a      	bne.n	8008766 <__swbuf_r+0x6e>
 8008710:	686c      	ldr	r4, [r5, #4]
 8008712:	69a3      	ldr	r3, [r4, #24]
 8008714:	60a3      	str	r3, [r4, #8]
 8008716:	89a3      	ldrh	r3, [r4, #12]
 8008718:	071a      	lsls	r2, r3, #28
 800871a:	d52e      	bpl.n	800877a <__swbuf_r+0x82>
 800871c:	6923      	ldr	r3, [r4, #16]
 800871e:	b363      	cbz	r3, 800877a <__swbuf_r+0x82>
 8008720:	6923      	ldr	r3, [r4, #16]
 8008722:	6820      	ldr	r0, [r4, #0]
 8008724:	1ac0      	subs	r0, r0, r3
 8008726:	6963      	ldr	r3, [r4, #20]
 8008728:	b2f6      	uxtb	r6, r6
 800872a:	4283      	cmp	r3, r0
 800872c:	4637      	mov	r7, r6
 800872e:	dc04      	bgt.n	800873a <__swbuf_r+0x42>
 8008730:	4621      	mov	r1, r4
 8008732:	4628      	mov	r0, r5
 8008734:	f000 f926 	bl	8008984 <_fflush_r>
 8008738:	bb28      	cbnz	r0, 8008786 <__swbuf_r+0x8e>
 800873a:	68a3      	ldr	r3, [r4, #8]
 800873c:	3b01      	subs	r3, #1
 800873e:	60a3      	str	r3, [r4, #8]
 8008740:	6823      	ldr	r3, [r4, #0]
 8008742:	1c5a      	adds	r2, r3, #1
 8008744:	6022      	str	r2, [r4, #0]
 8008746:	701e      	strb	r6, [r3, #0]
 8008748:	6963      	ldr	r3, [r4, #20]
 800874a:	3001      	adds	r0, #1
 800874c:	4283      	cmp	r3, r0
 800874e:	d004      	beq.n	800875a <__swbuf_r+0x62>
 8008750:	89a3      	ldrh	r3, [r4, #12]
 8008752:	07db      	lsls	r3, r3, #31
 8008754:	d519      	bpl.n	800878a <__swbuf_r+0x92>
 8008756:	2e0a      	cmp	r6, #10
 8008758:	d117      	bne.n	800878a <__swbuf_r+0x92>
 800875a:	4621      	mov	r1, r4
 800875c:	4628      	mov	r0, r5
 800875e:	f000 f911 	bl	8008984 <_fflush_r>
 8008762:	b190      	cbz	r0, 800878a <__swbuf_r+0x92>
 8008764:	e00f      	b.n	8008786 <__swbuf_r+0x8e>
 8008766:	4b0b      	ldr	r3, [pc, #44]	; (8008794 <__swbuf_r+0x9c>)
 8008768:	429c      	cmp	r4, r3
 800876a:	d101      	bne.n	8008770 <__swbuf_r+0x78>
 800876c:	68ac      	ldr	r4, [r5, #8]
 800876e:	e7d0      	b.n	8008712 <__swbuf_r+0x1a>
 8008770:	4b09      	ldr	r3, [pc, #36]	; (8008798 <__swbuf_r+0xa0>)
 8008772:	429c      	cmp	r4, r3
 8008774:	bf08      	it	eq
 8008776:	68ec      	ldreq	r4, [r5, #12]
 8008778:	e7cb      	b.n	8008712 <__swbuf_r+0x1a>
 800877a:	4621      	mov	r1, r4
 800877c:	4628      	mov	r0, r5
 800877e:	f000 f80d 	bl	800879c <__swsetup_r>
 8008782:	2800      	cmp	r0, #0
 8008784:	d0cc      	beq.n	8008720 <__swbuf_r+0x28>
 8008786:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800878a:	4638      	mov	r0, r7
 800878c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800878e:	bf00      	nop
 8008790:	080097ac 	.word	0x080097ac
 8008794:	080097cc 	.word	0x080097cc
 8008798:	0800978c 	.word	0x0800978c

0800879c <__swsetup_r>:
 800879c:	4b32      	ldr	r3, [pc, #200]	; (8008868 <__swsetup_r+0xcc>)
 800879e:	b570      	push	{r4, r5, r6, lr}
 80087a0:	681d      	ldr	r5, [r3, #0]
 80087a2:	4606      	mov	r6, r0
 80087a4:	460c      	mov	r4, r1
 80087a6:	b125      	cbz	r5, 80087b2 <__swsetup_r+0x16>
 80087a8:	69ab      	ldr	r3, [r5, #24]
 80087aa:	b913      	cbnz	r3, 80087b2 <__swsetup_r+0x16>
 80087ac:	4628      	mov	r0, r5
 80087ae:	f000 f953 	bl	8008a58 <__sinit>
 80087b2:	4b2e      	ldr	r3, [pc, #184]	; (800886c <__swsetup_r+0xd0>)
 80087b4:	429c      	cmp	r4, r3
 80087b6:	d10f      	bne.n	80087d8 <__swsetup_r+0x3c>
 80087b8:	686c      	ldr	r4, [r5, #4]
 80087ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087be:	b29a      	uxth	r2, r3
 80087c0:	0715      	lsls	r5, r2, #28
 80087c2:	d42c      	bmi.n	800881e <__swsetup_r+0x82>
 80087c4:	06d0      	lsls	r0, r2, #27
 80087c6:	d411      	bmi.n	80087ec <__swsetup_r+0x50>
 80087c8:	2209      	movs	r2, #9
 80087ca:	6032      	str	r2, [r6, #0]
 80087cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087d0:	81a3      	strh	r3, [r4, #12]
 80087d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087d6:	e03e      	b.n	8008856 <__swsetup_r+0xba>
 80087d8:	4b25      	ldr	r3, [pc, #148]	; (8008870 <__swsetup_r+0xd4>)
 80087da:	429c      	cmp	r4, r3
 80087dc:	d101      	bne.n	80087e2 <__swsetup_r+0x46>
 80087de:	68ac      	ldr	r4, [r5, #8]
 80087e0:	e7eb      	b.n	80087ba <__swsetup_r+0x1e>
 80087e2:	4b24      	ldr	r3, [pc, #144]	; (8008874 <__swsetup_r+0xd8>)
 80087e4:	429c      	cmp	r4, r3
 80087e6:	bf08      	it	eq
 80087e8:	68ec      	ldreq	r4, [r5, #12]
 80087ea:	e7e6      	b.n	80087ba <__swsetup_r+0x1e>
 80087ec:	0751      	lsls	r1, r2, #29
 80087ee:	d512      	bpl.n	8008816 <__swsetup_r+0x7a>
 80087f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087f2:	b141      	cbz	r1, 8008806 <__swsetup_r+0x6a>
 80087f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087f8:	4299      	cmp	r1, r3
 80087fa:	d002      	beq.n	8008802 <__swsetup_r+0x66>
 80087fc:	4630      	mov	r0, r6
 80087fe:	f000 fa19 	bl	8008c34 <_free_r>
 8008802:	2300      	movs	r3, #0
 8008804:	6363      	str	r3, [r4, #52]	; 0x34
 8008806:	89a3      	ldrh	r3, [r4, #12]
 8008808:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800880c:	81a3      	strh	r3, [r4, #12]
 800880e:	2300      	movs	r3, #0
 8008810:	6063      	str	r3, [r4, #4]
 8008812:	6923      	ldr	r3, [r4, #16]
 8008814:	6023      	str	r3, [r4, #0]
 8008816:	89a3      	ldrh	r3, [r4, #12]
 8008818:	f043 0308 	orr.w	r3, r3, #8
 800881c:	81a3      	strh	r3, [r4, #12]
 800881e:	6923      	ldr	r3, [r4, #16]
 8008820:	b94b      	cbnz	r3, 8008836 <__swsetup_r+0x9a>
 8008822:	89a3      	ldrh	r3, [r4, #12]
 8008824:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800882c:	d003      	beq.n	8008836 <__swsetup_r+0x9a>
 800882e:	4621      	mov	r1, r4
 8008830:	4630      	mov	r0, r6
 8008832:	f000 f9bf 	bl	8008bb4 <__smakebuf_r>
 8008836:	89a2      	ldrh	r2, [r4, #12]
 8008838:	f012 0301 	ands.w	r3, r2, #1
 800883c:	d00c      	beq.n	8008858 <__swsetup_r+0xbc>
 800883e:	2300      	movs	r3, #0
 8008840:	60a3      	str	r3, [r4, #8]
 8008842:	6963      	ldr	r3, [r4, #20]
 8008844:	425b      	negs	r3, r3
 8008846:	61a3      	str	r3, [r4, #24]
 8008848:	6923      	ldr	r3, [r4, #16]
 800884a:	b953      	cbnz	r3, 8008862 <__swsetup_r+0xc6>
 800884c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008850:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008854:	d1ba      	bne.n	80087cc <__swsetup_r+0x30>
 8008856:	bd70      	pop	{r4, r5, r6, pc}
 8008858:	0792      	lsls	r2, r2, #30
 800885a:	bf58      	it	pl
 800885c:	6963      	ldrpl	r3, [r4, #20]
 800885e:	60a3      	str	r3, [r4, #8]
 8008860:	e7f2      	b.n	8008848 <__swsetup_r+0xac>
 8008862:	2000      	movs	r0, #0
 8008864:	e7f7      	b.n	8008856 <__swsetup_r+0xba>
 8008866:	bf00      	nop
 8008868:	200003e0 	.word	0x200003e0
 800886c:	080097ac 	.word	0x080097ac
 8008870:	080097cc 	.word	0x080097cc
 8008874:	0800978c 	.word	0x0800978c

08008878 <__sflush_r>:
 8008878:	898a      	ldrh	r2, [r1, #12]
 800887a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800887e:	4605      	mov	r5, r0
 8008880:	0710      	lsls	r0, r2, #28
 8008882:	460c      	mov	r4, r1
 8008884:	d458      	bmi.n	8008938 <__sflush_r+0xc0>
 8008886:	684b      	ldr	r3, [r1, #4]
 8008888:	2b00      	cmp	r3, #0
 800888a:	dc05      	bgt.n	8008898 <__sflush_r+0x20>
 800888c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800888e:	2b00      	cmp	r3, #0
 8008890:	dc02      	bgt.n	8008898 <__sflush_r+0x20>
 8008892:	2000      	movs	r0, #0
 8008894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008898:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800889a:	2e00      	cmp	r6, #0
 800889c:	d0f9      	beq.n	8008892 <__sflush_r+0x1a>
 800889e:	2300      	movs	r3, #0
 80088a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80088a4:	682f      	ldr	r7, [r5, #0]
 80088a6:	6a21      	ldr	r1, [r4, #32]
 80088a8:	602b      	str	r3, [r5, #0]
 80088aa:	d032      	beq.n	8008912 <__sflush_r+0x9a>
 80088ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80088ae:	89a3      	ldrh	r3, [r4, #12]
 80088b0:	075a      	lsls	r2, r3, #29
 80088b2:	d505      	bpl.n	80088c0 <__sflush_r+0x48>
 80088b4:	6863      	ldr	r3, [r4, #4]
 80088b6:	1ac0      	subs	r0, r0, r3
 80088b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088ba:	b10b      	cbz	r3, 80088c0 <__sflush_r+0x48>
 80088bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80088be:	1ac0      	subs	r0, r0, r3
 80088c0:	2300      	movs	r3, #0
 80088c2:	4602      	mov	r2, r0
 80088c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088c6:	6a21      	ldr	r1, [r4, #32]
 80088c8:	4628      	mov	r0, r5
 80088ca:	47b0      	blx	r6
 80088cc:	1c43      	adds	r3, r0, #1
 80088ce:	89a3      	ldrh	r3, [r4, #12]
 80088d0:	d106      	bne.n	80088e0 <__sflush_r+0x68>
 80088d2:	6829      	ldr	r1, [r5, #0]
 80088d4:	291d      	cmp	r1, #29
 80088d6:	d848      	bhi.n	800896a <__sflush_r+0xf2>
 80088d8:	4a29      	ldr	r2, [pc, #164]	; (8008980 <__sflush_r+0x108>)
 80088da:	40ca      	lsrs	r2, r1
 80088dc:	07d6      	lsls	r6, r2, #31
 80088de:	d544      	bpl.n	800896a <__sflush_r+0xf2>
 80088e0:	2200      	movs	r2, #0
 80088e2:	6062      	str	r2, [r4, #4]
 80088e4:	04d9      	lsls	r1, r3, #19
 80088e6:	6922      	ldr	r2, [r4, #16]
 80088e8:	6022      	str	r2, [r4, #0]
 80088ea:	d504      	bpl.n	80088f6 <__sflush_r+0x7e>
 80088ec:	1c42      	adds	r2, r0, #1
 80088ee:	d101      	bne.n	80088f4 <__sflush_r+0x7c>
 80088f0:	682b      	ldr	r3, [r5, #0]
 80088f2:	b903      	cbnz	r3, 80088f6 <__sflush_r+0x7e>
 80088f4:	6560      	str	r0, [r4, #84]	; 0x54
 80088f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088f8:	602f      	str	r7, [r5, #0]
 80088fa:	2900      	cmp	r1, #0
 80088fc:	d0c9      	beq.n	8008892 <__sflush_r+0x1a>
 80088fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008902:	4299      	cmp	r1, r3
 8008904:	d002      	beq.n	800890c <__sflush_r+0x94>
 8008906:	4628      	mov	r0, r5
 8008908:	f000 f994 	bl	8008c34 <_free_r>
 800890c:	2000      	movs	r0, #0
 800890e:	6360      	str	r0, [r4, #52]	; 0x34
 8008910:	e7c0      	b.n	8008894 <__sflush_r+0x1c>
 8008912:	2301      	movs	r3, #1
 8008914:	4628      	mov	r0, r5
 8008916:	47b0      	blx	r6
 8008918:	1c41      	adds	r1, r0, #1
 800891a:	d1c8      	bne.n	80088ae <__sflush_r+0x36>
 800891c:	682b      	ldr	r3, [r5, #0]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d0c5      	beq.n	80088ae <__sflush_r+0x36>
 8008922:	2b1d      	cmp	r3, #29
 8008924:	d001      	beq.n	800892a <__sflush_r+0xb2>
 8008926:	2b16      	cmp	r3, #22
 8008928:	d101      	bne.n	800892e <__sflush_r+0xb6>
 800892a:	602f      	str	r7, [r5, #0]
 800892c:	e7b1      	b.n	8008892 <__sflush_r+0x1a>
 800892e:	89a3      	ldrh	r3, [r4, #12]
 8008930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008934:	81a3      	strh	r3, [r4, #12]
 8008936:	e7ad      	b.n	8008894 <__sflush_r+0x1c>
 8008938:	690f      	ldr	r7, [r1, #16]
 800893a:	2f00      	cmp	r7, #0
 800893c:	d0a9      	beq.n	8008892 <__sflush_r+0x1a>
 800893e:	0793      	lsls	r3, r2, #30
 8008940:	680e      	ldr	r6, [r1, #0]
 8008942:	bf08      	it	eq
 8008944:	694b      	ldreq	r3, [r1, #20]
 8008946:	600f      	str	r7, [r1, #0]
 8008948:	bf18      	it	ne
 800894a:	2300      	movne	r3, #0
 800894c:	eba6 0807 	sub.w	r8, r6, r7
 8008950:	608b      	str	r3, [r1, #8]
 8008952:	f1b8 0f00 	cmp.w	r8, #0
 8008956:	dd9c      	ble.n	8008892 <__sflush_r+0x1a>
 8008958:	4643      	mov	r3, r8
 800895a:	463a      	mov	r2, r7
 800895c:	6a21      	ldr	r1, [r4, #32]
 800895e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008960:	4628      	mov	r0, r5
 8008962:	47b0      	blx	r6
 8008964:	2800      	cmp	r0, #0
 8008966:	dc06      	bgt.n	8008976 <__sflush_r+0xfe>
 8008968:	89a3      	ldrh	r3, [r4, #12]
 800896a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800896e:	81a3      	strh	r3, [r4, #12]
 8008970:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008974:	e78e      	b.n	8008894 <__sflush_r+0x1c>
 8008976:	4407      	add	r7, r0
 8008978:	eba8 0800 	sub.w	r8, r8, r0
 800897c:	e7e9      	b.n	8008952 <__sflush_r+0xda>
 800897e:	bf00      	nop
 8008980:	20400001 	.word	0x20400001

08008984 <_fflush_r>:
 8008984:	b538      	push	{r3, r4, r5, lr}
 8008986:	690b      	ldr	r3, [r1, #16]
 8008988:	4605      	mov	r5, r0
 800898a:	460c      	mov	r4, r1
 800898c:	b1db      	cbz	r3, 80089c6 <_fflush_r+0x42>
 800898e:	b118      	cbz	r0, 8008998 <_fflush_r+0x14>
 8008990:	6983      	ldr	r3, [r0, #24]
 8008992:	b90b      	cbnz	r3, 8008998 <_fflush_r+0x14>
 8008994:	f000 f860 	bl	8008a58 <__sinit>
 8008998:	4b0c      	ldr	r3, [pc, #48]	; (80089cc <_fflush_r+0x48>)
 800899a:	429c      	cmp	r4, r3
 800899c:	d109      	bne.n	80089b2 <_fflush_r+0x2e>
 800899e:	686c      	ldr	r4, [r5, #4]
 80089a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089a4:	b17b      	cbz	r3, 80089c6 <_fflush_r+0x42>
 80089a6:	4621      	mov	r1, r4
 80089a8:	4628      	mov	r0, r5
 80089aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089ae:	f7ff bf63 	b.w	8008878 <__sflush_r>
 80089b2:	4b07      	ldr	r3, [pc, #28]	; (80089d0 <_fflush_r+0x4c>)
 80089b4:	429c      	cmp	r4, r3
 80089b6:	d101      	bne.n	80089bc <_fflush_r+0x38>
 80089b8:	68ac      	ldr	r4, [r5, #8]
 80089ba:	e7f1      	b.n	80089a0 <_fflush_r+0x1c>
 80089bc:	4b05      	ldr	r3, [pc, #20]	; (80089d4 <_fflush_r+0x50>)
 80089be:	429c      	cmp	r4, r3
 80089c0:	bf08      	it	eq
 80089c2:	68ec      	ldreq	r4, [r5, #12]
 80089c4:	e7ec      	b.n	80089a0 <_fflush_r+0x1c>
 80089c6:	2000      	movs	r0, #0
 80089c8:	bd38      	pop	{r3, r4, r5, pc}
 80089ca:	bf00      	nop
 80089cc:	080097ac 	.word	0x080097ac
 80089d0:	080097cc 	.word	0x080097cc
 80089d4:	0800978c 	.word	0x0800978c

080089d8 <std>:
 80089d8:	2300      	movs	r3, #0
 80089da:	b510      	push	{r4, lr}
 80089dc:	4604      	mov	r4, r0
 80089de:	e9c0 3300 	strd	r3, r3, [r0]
 80089e2:	6083      	str	r3, [r0, #8]
 80089e4:	8181      	strh	r1, [r0, #12]
 80089e6:	6643      	str	r3, [r0, #100]	; 0x64
 80089e8:	81c2      	strh	r2, [r0, #14]
 80089ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80089ee:	6183      	str	r3, [r0, #24]
 80089f0:	4619      	mov	r1, r3
 80089f2:	2208      	movs	r2, #8
 80089f4:	305c      	adds	r0, #92	; 0x5c
 80089f6:	f7ff fdfb 	bl	80085f0 <memset>
 80089fa:	4b05      	ldr	r3, [pc, #20]	; (8008a10 <std+0x38>)
 80089fc:	6263      	str	r3, [r4, #36]	; 0x24
 80089fe:	4b05      	ldr	r3, [pc, #20]	; (8008a14 <std+0x3c>)
 8008a00:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a02:	4b05      	ldr	r3, [pc, #20]	; (8008a18 <std+0x40>)
 8008a04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a06:	4b05      	ldr	r3, [pc, #20]	; (8008a1c <std+0x44>)
 8008a08:	6224      	str	r4, [r4, #32]
 8008a0a:	6323      	str	r3, [r4, #48]	; 0x30
 8008a0c:	bd10      	pop	{r4, pc}
 8008a0e:	bf00      	nop
 8008a10:	08009335 	.word	0x08009335
 8008a14:	08009357 	.word	0x08009357
 8008a18:	0800938f 	.word	0x0800938f
 8008a1c:	080093b3 	.word	0x080093b3

08008a20 <_cleanup_r>:
 8008a20:	4901      	ldr	r1, [pc, #4]	; (8008a28 <_cleanup_r+0x8>)
 8008a22:	f000 b885 	b.w	8008b30 <_fwalk_reent>
 8008a26:	bf00      	nop
 8008a28:	08008985 	.word	0x08008985

08008a2c <__sfmoreglue>:
 8008a2c:	b570      	push	{r4, r5, r6, lr}
 8008a2e:	1e4a      	subs	r2, r1, #1
 8008a30:	2568      	movs	r5, #104	; 0x68
 8008a32:	4355      	muls	r5, r2
 8008a34:	460e      	mov	r6, r1
 8008a36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008a3a:	f000 f949 	bl	8008cd0 <_malloc_r>
 8008a3e:	4604      	mov	r4, r0
 8008a40:	b140      	cbz	r0, 8008a54 <__sfmoreglue+0x28>
 8008a42:	2100      	movs	r1, #0
 8008a44:	e9c0 1600 	strd	r1, r6, [r0]
 8008a48:	300c      	adds	r0, #12
 8008a4a:	60a0      	str	r0, [r4, #8]
 8008a4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008a50:	f7ff fdce 	bl	80085f0 <memset>
 8008a54:	4620      	mov	r0, r4
 8008a56:	bd70      	pop	{r4, r5, r6, pc}

08008a58 <__sinit>:
 8008a58:	6983      	ldr	r3, [r0, #24]
 8008a5a:	b510      	push	{r4, lr}
 8008a5c:	4604      	mov	r4, r0
 8008a5e:	bb33      	cbnz	r3, 8008aae <__sinit+0x56>
 8008a60:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008a64:	6503      	str	r3, [r0, #80]	; 0x50
 8008a66:	4b12      	ldr	r3, [pc, #72]	; (8008ab0 <__sinit+0x58>)
 8008a68:	4a12      	ldr	r2, [pc, #72]	; (8008ab4 <__sinit+0x5c>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	6282      	str	r2, [r0, #40]	; 0x28
 8008a6e:	4298      	cmp	r0, r3
 8008a70:	bf04      	itt	eq
 8008a72:	2301      	moveq	r3, #1
 8008a74:	6183      	streq	r3, [r0, #24]
 8008a76:	f000 f81f 	bl	8008ab8 <__sfp>
 8008a7a:	6060      	str	r0, [r4, #4]
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	f000 f81b 	bl	8008ab8 <__sfp>
 8008a82:	60a0      	str	r0, [r4, #8]
 8008a84:	4620      	mov	r0, r4
 8008a86:	f000 f817 	bl	8008ab8 <__sfp>
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	60e0      	str	r0, [r4, #12]
 8008a8e:	2104      	movs	r1, #4
 8008a90:	6860      	ldr	r0, [r4, #4]
 8008a92:	f7ff ffa1 	bl	80089d8 <std>
 8008a96:	2201      	movs	r2, #1
 8008a98:	2109      	movs	r1, #9
 8008a9a:	68a0      	ldr	r0, [r4, #8]
 8008a9c:	f7ff ff9c 	bl	80089d8 <std>
 8008aa0:	2202      	movs	r2, #2
 8008aa2:	2112      	movs	r1, #18
 8008aa4:	68e0      	ldr	r0, [r4, #12]
 8008aa6:	f7ff ff97 	bl	80089d8 <std>
 8008aaa:	2301      	movs	r3, #1
 8008aac:	61a3      	str	r3, [r4, #24]
 8008aae:	bd10      	pop	{r4, pc}
 8008ab0:	08009788 	.word	0x08009788
 8008ab4:	08008a21 	.word	0x08008a21

08008ab8 <__sfp>:
 8008ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aba:	4b1b      	ldr	r3, [pc, #108]	; (8008b28 <__sfp+0x70>)
 8008abc:	681e      	ldr	r6, [r3, #0]
 8008abe:	69b3      	ldr	r3, [r6, #24]
 8008ac0:	4607      	mov	r7, r0
 8008ac2:	b913      	cbnz	r3, 8008aca <__sfp+0x12>
 8008ac4:	4630      	mov	r0, r6
 8008ac6:	f7ff ffc7 	bl	8008a58 <__sinit>
 8008aca:	3648      	adds	r6, #72	; 0x48
 8008acc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008ad0:	3b01      	subs	r3, #1
 8008ad2:	d503      	bpl.n	8008adc <__sfp+0x24>
 8008ad4:	6833      	ldr	r3, [r6, #0]
 8008ad6:	b133      	cbz	r3, 8008ae6 <__sfp+0x2e>
 8008ad8:	6836      	ldr	r6, [r6, #0]
 8008ada:	e7f7      	b.n	8008acc <__sfp+0x14>
 8008adc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008ae0:	b16d      	cbz	r5, 8008afe <__sfp+0x46>
 8008ae2:	3468      	adds	r4, #104	; 0x68
 8008ae4:	e7f4      	b.n	8008ad0 <__sfp+0x18>
 8008ae6:	2104      	movs	r1, #4
 8008ae8:	4638      	mov	r0, r7
 8008aea:	f7ff ff9f 	bl	8008a2c <__sfmoreglue>
 8008aee:	6030      	str	r0, [r6, #0]
 8008af0:	2800      	cmp	r0, #0
 8008af2:	d1f1      	bne.n	8008ad8 <__sfp+0x20>
 8008af4:	230c      	movs	r3, #12
 8008af6:	603b      	str	r3, [r7, #0]
 8008af8:	4604      	mov	r4, r0
 8008afa:	4620      	mov	r0, r4
 8008afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008afe:	4b0b      	ldr	r3, [pc, #44]	; (8008b2c <__sfp+0x74>)
 8008b00:	6665      	str	r5, [r4, #100]	; 0x64
 8008b02:	e9c4 5500 	strd	r5, r5, [r4]
 8008b06:	60a5      	str	r5, [r4, #8]
 8008b08:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008b0c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008b10:	2208      	movs	r2, #8
 8008b12:	4629      	mov	r1, r5
 8008b14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008b18:	f7ff fd6a 	bl	80085f0 <memset>
 8008b1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008b20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008b24:	e7e9      	b.n	8008afa <__sfp+0x42>
 8008b26:	bf00      	nop
 8008b28:	08009788 	.word	0x08009788
 8008b2c:	ffff0001 	.word	0xffff0001

08008b30 <_fwalk_reent>:
 8008b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b34:	4680      	mov	r8, r0
 8008b36:	4689      	mov	r9, r1
 8008b38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008b3c:	2600      	movs	r6, #0
 8008b3e:	b914      	cbnz	r4, 8008b46 <_fwalk_reent+0x16>
 8008b40:	4630      	mov	r0, r6
 8008b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b46:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008b4a:	3f01      	subs	r7, #1
 8008b4c:	d501      	bpl.n	8008b52 <_fwalk_reent+0x22>
 8008b4e:	6824      	ldr	r4, [r4, #0]
 8008b50:	e7f5      	b.n	8008b3e <_fwalk_reent+0xe>
 8008b52:	89ab      	ldrh	r3, [r5, #12]
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d907      	bls.n	8008b68 <_fwalk_reent+0x38>
 8008b58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	d003      	beq.n	8008b68 <_fwalk_reent+0x38>
 8008b60:	4629      	mov	r1, r5
 8008b62:	4640      	mov	r0, r8
 8008b64:	47c8      	blx	r9
 8008b66:	4306      	orrs	r6, r0
 8008b68:	3568      	adds	r5, #104	; 0x68
 8008b6a:	e7ee      	b.n	8008b4a <_fwalk_reent+0x1a>

08008b6c <__swhatbuf_r>:
 8008b6c:	b570      	push	{r4, r5, r6, lr}
 8008b6e:	460e      	mov	r6, r1
 8008b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b74:	2900      	cmp	r1, #0
 8008b76:	b096      	sub	sp, #88	; 0x58
 8008b78:	4614      	mov	r4, r2
 8008b7a:	461d      	mov	r5, r3
 8008b7c:	da07      	bge.n	8008b8e <__swhatbuf_r+0x22>
 8008b7e:	2300      	movs	r3, #0
 8008b80:	602b      	str	r3, [r5, #0]
 8008b82:	89b3      	ldrh	r3, [r6, #12]
 8008b84:	061a      	lsls	r2, r3, #24
 8008b86:	d410      	bmi.n	8008baa <__swhatbuf_r+0x3e>
 8008b88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b8c:	e00e      	b.n	8008bac <__swhatbuf_r+0x40>
 8008b8e:	466a      	mov	r2, sp
 8008b90:	f000 fc36 	bl	8009400 <_fstat_r>
 8008b94:	2800      	cmp	r0, #0
 8008b96:	dbf2      	blt.n	8008b7e <__swhatbuf_r+0x12>
 8008b98:	9a01      	ldr	r2, [sp, #4]
 8008b9a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008b9e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008ba2:	425a      	negs	r2, r3
 8008ba4:	415a      	adcs	r2, r3
 8008ba6:	602a      	str	r2, [r5, #0]
 8008ba8:	e7ee      	b.n	8008b88 <__swhatbuf_r+0x1c>
 8008baa:	2340      	movs	r3, #64	; 0x40
 8008bac:	2000      	movs	r0, #0
 8008bae:	6023      	str	r3, [r4, #0]
 8008bb0:	b016      	add	sp, #88	; 0x58
 8008bb2:	bd70      	pop	{r4, r5, r6, pc}

08008bb4 <__smakebuf_r>:
 8008bb4:	898b      	ldrh	r3, [r1, #12]
 8008bb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008bb8:	079d      	lsls	r5, r3, #30
 8008bba:	4606      	mov	r6, r0
 8008bbc:	460c      	mov	r4, r1
 8008bbe:	d507      	bpl.n	8008bd0 <__smakebuf_r+0x1c>
 8008bc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008bc4:	6023      	str	r3, [r4, #0]
 8008bc6:	6123      	str	r3, [r4, #16]
 8008bc8:	2301      	movs	r3, #1
 8008bca:	6163      	str	r3, [r4, #20]
 8008bcc:	b002      	add	sp, #8
 8008bce:	bd70      	pop	{r4, r5, r6, pc}
 8008bd0:	ab01      	add	r3, sp, #4
 8008bd2:	466a      	mov	r2, sp
 8008bd4:	f7ff ffca 	bl	8008b6c <__swhatbuf_r>
 8008bd8:	9900      	ldr	r1, [sp, #0]
 8008bda:	4605      	mov	r5, r0
 8008bdc:	4630      	mov	r0, r6
 8008bde:	f000 f877 	bl	8008cd0 <_malloc_r>
 8008be2:	b948      	cbnz	r0, 8008bf8 <__smakebuf_r+0x44>
 8008be4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008be8:	059a      	lsls	r2, r3, #22
 8008bea:	d4ef      	bmi.n	8008bcc <__smakebuf_r+0x18>
 8008bec:	f023 0303 	bic.w	r3, r3, #3
 8008bf0:	f043 0302 	orr.w	r3, r3, #2
 8008bf4:	81a3      	strh	r3, [r4, #12]
 8008bf6:	e7e3      	b.n	8008bc0 <__smakebuf_r+0xc>
 8008bf8:	4b0d      	ldr	r3, [pc, #52]	; (8008c30 <__smakebuf_r+0x7c>)
 8008bfa:	62b3      	str	r3, [r6, #40]	; 0x28
 8008bfc:	89a3      	ldrh	r3, [r4, #12]
 8008bfe:	6020      	str	r0, [r4, #0]
 8008c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c04:	81a3      	strh	r3, [r4, #12]
 8008c06:	9b00      	ldr	r3, [sp, #0]
 8008c08:	6163      	str	r3, [r4, #20]
 8008c0a:	9b01      	ldr	r3, [sp, #4]
 8008c0c:	6120      	str	r0, [r4, #16]
 8008c0e:	b15b      	cbz	r3, 8008c28 <__smakebuf_r+0x74>
 8008c10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c14:	4630      	mov	r0, r6
 8008c16:	f000 fc05 	bl	8009424 <_isatty_r>
 8008c1a:	b128      	cbz	r0, 8008c28 <__smakebuf_r+0x74>
 8008c1c:	89a3      	ldrh	r3, [r4, #12]
 8008c1e:	f023 0303 	bic.w	r3, r3, #3
 8008c22:	f043 0301 	orr.w	r3, r3, #1
 8008c26:	81a3      	strh	r3, [r4, #12]
 8008c28:	89a3      	ldrh	r3, [r4, #12]
 8008c2a:	431d      	orrs	r5, r3
 8008c2c:	81a5      	strh	r5, [r4, #12]
 8008c2e:	e7cd      	b.n	8008bcc <__smakebuf_r+0x18>
 8008c30:	08008a21 	.word	0x08008a21

08008c34 <_free_r>:
 8008c34:	b538      	push	{r3, r4, r5, lr}
 8008c36:	4605      	mov	r5, r0
 8008c38:	2900      	cmp	r1, #0
 8008c3a:	d045      	beq.n	8008cc8 <_free_r+0x94>
 8008c3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c40:	1f0c      	subs	r4, r1, #4
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	bfb8      	it	lt
 8008c46:	18e4      	addlt	r4, r4, r3
 8008c48:	f000 fc0e 	bl	8009468 <__malloc_lock>
 8008c4c:	4a1f      	ldr	r2, [pc, #124]	; (8008ccc <_free_r+0x98>)
 8008c4e:	6813      	ldr	r3, [r2, #0]
 8008c50:	4610      	mov	r0, r2
 8008c52:	b933      	cbnz	r3, 8008c62 <_free_r+0x2e>
 8008c54:	6063      	str	r3, [r4, #4]
 8008c56:	6014      	str	r4, [r2, #0]
 8008c58:	4628      	mov	r0, r5
 8008c5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c5e:	f000 bc04 	b.w	800946a <__malloc_unlock>
 8008c62:	42a3      	cmp	r3, r4
 8008c64:	d90c      	bls.n	8008c80 <_free_r+0x4c>
 8008c66:	6821      	ldr	r1, [r4, #0]
 8008c68:	1862      	adds	r2, r4, r1
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	bf04      	itt	eq
 8008c6e:	681a      	ldreq	r2, [r3, #0]
 8008c70:	685b      	ldreq	r3, [r3, #4]
 8008c72:	6063      	str	r3, [r4, #4]
 8008c74:	bf04      	itt	eq
 8008c76:	1852      	addeq	r2, r2, r1
 8008c78:	6022      	streq	r2, [r4, #0]
 8008c7a:	6004      	str	r4, [r0, #0]
 8008c7c:	e7ec      	b.n	8008c58 <_free_r+0x24>
 8008c7e:	4613      	mov	r3, r2
 8008c80:	685a      	ldr	r2, [r3, #4]
 8008c82:	b10a      	cbz	r2, 8008c88 <_free_r+0x54>
 8008c84:	42a2      	cmp	r2, r4
 8008c86:	d9fa      	bls.n	8008c7e <_free_r+0x4a>
 8008c88:	6819      	ldr	r1, [r3, #0]
 8008c8a:	1858      	adds	r0, r3, r1
 8008c8c:	42a0      	cmp	r0, r4
 8008c8e:	d10b      	bne.n	8008ca8 <_free_r+0x74>
 8008c90:	6820      	ldr	r0, [r4, #0]
 8008c92:	4401      	add	r1, r0
 8008c94:	1858      	adds	r0, r3, r1
 8008c96:	4282      	cmp	r2, r0
 8008c98:	6019      	str	r1, [r3, #0]
 8008c9a:	d1dd      	bne.n	8008c58 <_free_r+0x24>
 8008c9c:	6810      	ldr	r0, [r2, #0]
 8008c9e:	6852      	ldr	r2, [r2, #4]
 8008ca0:	605a      	str	r2, [r3, #4]
 8008ca2:	4401      	add	r1, r0
 8008ca4:	6019      	str	r1, [r3, #0]
 8008ca6:	e7d7      	b.n	8008c58 <_free_r+0x24>
 8008ca8:	d902      	bls.n	8008cb0 <_free_r+0x7c>
 8008caa:	230c      	movs	r3, #12
 8008cac:	602b      	str	r3, [r5, #0]
 8008cae:	e7d3      	b.n	8008c58 <_free_r+0x24>
 8008cb0:	6820      	ldr	r0, [r4, #0]
 8008cb2:	1821      	adds	r1, r4, r0
 8008cb4:	428a      	cmp	r2, r1
 8008cb6:	bf04      	itt	eq
 8008cb8:	6811      	ldreq	r1, [r2, #0]
 8008cba:	6852      	ldreq	r2, [r2, #4]
 8008cbc:	6062      	str	r2, [r4, #4]
 8008cbe:	bf04      	itt	eq
 8008cc0:	1809      	addeq	r1, r1, r0
 8008cc2:	6021      	streq	r1, [r4, #0]
 8008cc4:	605c      	str	r4, [r3, #4]
 8008cc6:	e7c7      	b.n	8008c58 <_free_r+0x24>
 8008cc8:	bd38      	pop	{r3, r4, r5, pc}
 8008cca:	bf00      	nop
 8008ccc:	20000470 	.word	0x20000470

08008cd0 <_malloc_r>:
 8008cd0:	b570      	push	{r4, r5, r6, lr}
 8008cd2:	1ccd      	adds	r5, r1, #3
 8008cd4:	f025 0503 	bic.w	r5, r5, #3
 8008cd8:	3508      	adds	r5, #8
 8008cda:	2d0c      	cmp	r5, #12
 8008cdc:	bf38      	it	cc
 8008cde:	250c      	movcc	r5, #12
 8008ce0:	2d00      	cmp	r5, #0
 8008ce2:	4606      	mov	r6, r0
 8008ce4:	db01      	blt.n	8008cea <_malloc_r+0x1a>
 8008ce6:	42a9      	cmp	r1, r5
 8008ce8:	d903      	bls.n	8008cf2 <_malloc_r+0x22>
 8008cea:	230c      	movs	r3, #12
 8008cec:	6033      	str	r3, [r6, #0]
 8008cee:	2000      	movs	r0, #0
 8008cf0:	bd70      	pop	{r4, r5, r6, pc}
 8008cf2:	f000 fbb9 	bl	8009468 <__malloc_lock>
 8008cf6:	4a21      	ldr	r2, [pc, #132]	; (8008d7c <_malloc_r+0xac>)
 8008cf8:	6814      	ldr	r4, [r2, #0]
 8008cfa:	4621      	mov	r1, r4
 8008cfc:	b991      	cbnz	r1, 8008d24 <_malloc_r+0x54>
 8008cfe:	4c20      	ldr	r4, [pc, #128]	; (8008d80 <_malloc_r+0xb0>)
 8008d00:	6823      	ldr	r3, [r4, #0]
 8008d02:	b91b      	cbnz	r3, 8008d0c <_malloc_r+0x3c>
 8008d04:	4630      	mov	r0, r6
 8008d06:	f000 fb05 	bl	8009314 <_sbrk_r>
 8008d0a:	6020      	str	r0, [r4, #0]
 8008d0c:	4629      	mov	r1, r5
 8008d0e:	4630      	mov	r0, r6
 8008d10:	f000 fb00 	bl	8009314 <_sbrk_r>
 8008d14:	1c43      	adds	r3, r0, #1
 8008d16:	d124      	bne.n	8008d62 <_malloc_r+0x92>
 8008d18:	230c      	movs	r3, #12
 8008d1a:	6033      	str	r3, [r6, #0]
 8008d1c:	4630      	mov	r0, r6
 8008d1e:	f000 fba4 	bl	800946a <__malloc_unlock>
 8008d22:	e7e4      	b.n	8008cee <_malloc_r+0x1e>
 8008d24:	680b      	ldr	r3, [r1, #0]
 8008d26:	1b5b      	subs	r3, r3, r5
 8008d28:	d418      	bmi.n	8008d5c <_malloc_r+0x8c>
 8008d2a:	2b0b      	cmp	r3, #11
 8008d2c:	d90f      	bls.n	8008d4e <_malloc_r+0x7e>
 8008d2e:	600b      	str	r3, [r1, #0]
 8008d30:	50cd      	str	r5, [r1, r3]
 8008d32:	18cc      	adds	r4, r1, r3
 8008d34:	4630      	mov	r0, r6
 8008d36:	f000 fb98 	bl	800946a <__malloc_unlock>
 8008d3a:	f104 000b 	add.w	r0, r4, #11
 8008d3e:	1d23      	adds	r3, r4, #4
 8008d40:	f020 0007 	bic.w	r0, r0, #7
 8008d44:	1ac3      	subs	r3, r0, r3
 8008d46:	d0d3      	beq.n	8008cf0 <_malloc_r+0x20>
 8008d48:	425a      	negs	r2, r3
 8008d4a:	50e2      	str	r2, [r4, r3]
 8008d4c:	e7d0      	b.n	8008cf0 <_malloc_r+0x20>
 8008d4e:	428c      	cmp	r4, r1
 8008d50:	684b      	ldr	r3, [r1, #4]
 8008d52:	bf16      	itet	ne
 8008d54:	6063      	strne	r3, [r4, #4]
 8008d56:	6013      	streq	r3, [r2, #0]
 8008d58:	460c      	movne	r4, r1
 8008d5a:	e7eb      	b.n	8008d34 <_malloc_r+0x64>
 8008d5c:	460c      	mov	r4, r1
 8008d5e:	6849      	ldr	r1, [r1, #4]
 8008d60:	e7cc      	b.n	8008cfc <_malloc_r+0x2c>
 8008d62:	1cc4      	adds	r4, r0, #3
 8008d64:	f024 0403 	bic.w	r4, r4, #3
 8008d68:	42a0      	cmp	r0, r4
 8008d6a:	d005      	beq.n	8008d78 <_malloc_r+0xa8>
 8008d6c:	1a21      	subs	r1, r4, r0
 8008d6e:	4630      	mov	r0, r6
 8008d70:	f000 fad0 	bl	8009314 <_sbrk_r>
 8008d74:	3001      	adds	r0, #1
 8008d76:	d0cf      	beq.n	8008d18 <_malloc_r+0x48>
 8008d78:	6025      	str	r5, [r4, #0]
 8008d7a:	e7db      	b.n	8008d34 <_malloc_r+0x64>
 8008d7c:	20000470 	.word	0x20000470
 8008d80:	20000474 	.word	0x20000474

08008d84 <__sfputc_r>:
 8008d84:	6893      	ldr	r3, [r2, #8]
 8008d86:	3b01      	subs	r3, #1
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	b410      	push	{r4}
 8008d8c:	6093      	str	r3, [r2, #8]
 8008d8e:	da08      	bge.n	8008da2 <__sfputc_r+0x1e>
 8008d90:	6994      	ldr	r4, [r2, #24]
 8008d92:	42a3      	cmp	r3, r4
 8008d94:	db01      	blt.n	8008d9a <__sfputc_r+0x16>
 8008d96:	290a      	cmp	r1, #10
 8008d98:	d103      	bne.n	8008da2 <__sfputc_r+0x1e>
 8008d9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d9e:	f7ff bcab 	b.w	80086f8 <__swbuf_r>
 8008da2:	6813      	ldr	r3, [r2, #0]
 8008da4:	1c58      	adds	r0, r3, #1
 8008da6:	6010      	str	r0, [r2, #0]
 8008da8:	7019      	strb	r1, [r3, #0]
 8008daa:	4608      	mov	r0, r1
 8008dac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008db0:	4770      	bx	lr

08008db2 <__sfputs_r>:
 8008db2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008db4:	4606      	mov	r6, r0
 8008db6:	460f      	mov	r7, r1
 8008db8:	4614      	mov	r4, r2
 8008dba:	18d5      	adds	r5, r2, r3
 8008dbc:	42ac      	cmp	r4, r5
 8008dbe:	d101      	bne.n	8008dc4 <__sfputs_r+0x12>
 8008dc0:	2000      	movs	r0, #0
 8008dc2:	e007      	b.n	8008dd4 <__sfputs_r+0x22>
 8008dc4:	463a      	mov	r2, r7
 8008dc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dca:	4630      	mov	r0, r6
 8008dcc:	f7ff ffda 	bl	8008d84 <__sfputc_r>
 8008dd0:	1c43      	adds	r3, r0, #1
 8008dd2:	d1f3      	bne.n	8008dbc <__sfputs_r+0xa>
 8008dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008dd8 <_vfiprintf_r>:
 8008dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ddc:	460c      	mov	r4, r1
 8008dde:	b09d      	sub	sp, #116	; 0x74
 8008de0:	4617      	mov	r7, r2
 8008de2:	461d      	mov	r5, r3
 8008de4:	4606      	mov	r6, r0
 8008de6:	b118      	cbz	r0, 8008df0 <_vfiprintf_r+0x18>
 8008de8:	6983      	ldr	r3, [r0, #24]
 8008dea:	b90b      	cbnz	r3, 8008df0 <_vfiprintf_r+0x18>
 8008dec:	f7ff fe34 	bl	8008a58 <__sinit>
 8008df0:	4b7c      	ldr	r3, [pc, #496]	; (8008fe4 <_vfiprintf_r+0x20c>)
 8008df2:	429c      	cmp	r4, r3
 8008df4:	d158      	bne.n	8008ea8 <_vfiprintf_r+0xd0>
 8008df6:	6874      	ldr	r4, [r6, #4]
 8008df8:	89a3      	ldrh	r3, [r4, #12]
 8008dfa:	0718      	lsls	r0, r3, #28
 8008dfc:	d55e      	bpl.n	8008ebc <_vfiprintf_r+0xe4>
 8008dfe:	6923      	ldr	r3, [r4, #16]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d05b      	beq.n	8008ebc <_vfiprintf_r+0xe4>
 8008e04:	2300      	movs	r3, #0
 8008e06:	9309      	str	r3, [sp, #36]	; 0x24
 8008e08:	2320      	movs	r3, #32
 8008e0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e0e:	2330      	movs	r3, #48	; 0x30
 8008e10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e14:	9503      	str	r5, [sp, #12]
 8008e16:	f04f 0b01 	mov.w	fp, #1
 8008e1a:	46b8      	mov	r8, r7
 8008e1c:	4645      	mov	r5, r8
 8008e1e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008e22:	b10b      	cbz	r3, 8008e28 <_vfiprintf_r+0x50>
 8008e24:	2b25      	cmp	r3, #37	; 0x25
 8008e26:	d154      	bne.n	8008ed2 <_vfiprintf_r+0xfa>
 8008e28:	ebb8 0a07 	subs.w	sl, r8, r7
 8008e2c:	d00b      	beq.n	8008e46 <_vfiprintf_r+0x6e>
 8008e2e:	4653      	mov	r3, sl
 8008e30:	463a      	mov	r2, r7
 8008e32:	4621      	mov	r1, r4
 8008e34:	4630      	mov	r0, r6
 8008e36:	f7ff ffbc 	bl	8008db2 <__sfputs_r>
 8008e3a:	3001      	adds	r0, #1
 8008e3c:	f000 80c2 	beq.w	8008fc4 <_vfiprintf_r+0x1ec>
 8008e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e42:	4453      	add	r3, sl
 8008e44:	9309      	str	r3, [sp, #36]	; 0x24
 8008e46:	f898 3000 	ldrb.w	r3, [r8]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	f000 80ba 	beq.w	8008fc4 <_vfiprintf_r+0x1ec>
 8008e50:	2300      	movs	r3, #0
 8008e52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e5a:	9304      	str	r3, [sp, #16]
 8008e5c:	9307      	str	r3, [sp, #28]
 8008e5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e62:	931a      	str	r3, [sp, #104]	; 0x68
 8008e64:	46a8      	mov	r8, r5
 8008e66:	2205      	movs	r2, #5
 8008e68:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008e6c:	485e      	ldr	r0, [pc, #376]	; (8008fe8 <_vfiprintf_r+0x210>)
 8008e6e:	f7f7 f9d7 	bl	8000220 <memchr>
 8008e72:	9b04      	ldr	r3, [sp, #16]
 8008e74:	bb78      	cbnz	r0, 8008ed6 <_vfiprintf_r+0xfe>
 8008e76:	06d9      	lsls	r1, r3, #27
 8008e78:	bf44      	itt	mi
 8008e7a:	2220      	movmi	r2, #32
 8008e7c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008e80:	071a      	lsls	r2, r3, #28
 8008e82:	bf44      	itt	mi
 8008e84:	222b      	movmi	r2, #43	; 0x2b
 8008e86:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008e8a:	782a      	ldrb	r2, [r5, #0]
 8008e8c:	2a2a      	cmp	r2, #42	; 0x2a
 8008e8e:	d02a      	beq.n	8008ee6 <_vfiprintf_r+0x10e>
 8008e90:	9a07      	ldr	r2, [sp, #28]
 8008e92:	46a8      	mov	r8, r5
 8008e94:	2000      	movs	r0, #0
 8008e96:	250a      	movs	r5, #10
 8008e98:	4641      	mov	r1, r8
 8008e9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e9e:	3b30      	subs	r3, #48	; 0x30
 8008ea0:	2b09      	cmp	r3, #9
 8008ea2:	d969      	bls.n	8008f78 <_vfiprintf_r+0x1a0>
 8008ea4:	b360      	cbz	r0, 8008f00 <_vfiprintf_r+0x128>
 8008ea6:	e024      	b.n	8008ef2 <_vfiprintf_r+0x11a>
 8008ea8:	4b50      	ldr	r3, [pc, #320]	; (8008fec <_vfiprintf_r+0x214>)
 8008eaa:	429c      	cmp	r4, r3
 8008eac:	d101      	bne.n	8008eb2 <_vfiprintf_r+0xda>
 8008eae:	68b4      	ldr	r4, [r6, #8]
 8008eb0:	e7a2      	b.n	8008df8 <_vfiprintf_r+0x20>
 8008eb2:	4b4f      	ldr	r3, [pc, #316]	; (8008ff0 <_vfiprintf_r+0x218>)
 8008eb4:	429c      	cmp	r4, r3
 8008eb6:	bf08      	it	eq
 8008eb8:	68f4      	ldreq	r4, [r6, #12]
 8008eba:	e79d      	b.n	8008df8 <_vfiprintf_r+0x20>
 8008ebc:	4621      	mov	r1, r4
 8008ebe:	4630      	mov	r0, r6
 8008ec0:	f7ff fc6c 	bl	800879c <__swsetup_r>
 8008ec4:	2800      	cmp	r0, #0
 8008ec6:	d09d      	beq.n	8008e04 <_vfiprintf_r+0x2c>
 8008ec8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ecc:	b01d      	add	sp, #116	; 0x74
 8008ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ed2:	46a8      	mov	r8, r5
 8008ed4:	e7a2      	b.n	8008e1c <_vfiprintf_r+0x44>
 8008ed6:	4a44      	ldr	r2, [pc, #272]	; (8008fe8 <_vfiprintf_r+0x210>)
 8008ed8:	1a80      	subs	r0, r0, r2
 8008eda:	fa0b f000 	lsl.w	r0, fp, r0
 8008ede:	4318      	orrs	r0, r3
 8008ee0:	9004      	str	r0, [sp, #16]
 8008ee2:	4645      	mov	r5, r8
 8008ee4:	e7be      	b.n	8008e64 <_vfiprintf_r+0x8c>
 8008ee6:	9a03      	ldr	r2, [sp, #12]
 8008ee8:	1d11      	adds	r1, r2, #4
 8008eea:	6812      	ldr	r2, [r2, #0]
 8008eec:	9103      	str	r1, [sp, #12]
 8008eee:	2a00      	cmp	r2, #0
 8008ef0:	db01      	blt.n	8008ef6 <_vfiprintf_r+0x11e>
 8008ef2:	9207      	str	r2, [sp, #28]
 8008ef4:	e004      	b.n	8008f00 <_vfiprintf_r+0x128>
 8008ef6:	4252      	negs	r2, r2
 8008ef8:	f043 0302 	orr.w	r3, r3, #2
 8008efc:	9207      	str	r2, [sp, #28]
 8008efe:	9304      	str	r3, [sp, #16]
 8008f00:	f898 3000 	ldrb.w	r3, [r8]
 8008f04:	2b2e      	cmp	r3, #46	; 0x2e
 8008f06:	d10e      	bne.n	8008f26 <_vfiprintf_r+0x14e>
 8008f08:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008f0c:	2b2a      	cmp	r3, #42	; 0x2a
 8008f0e:	d138      	bne.n	8008f82 <_vfiprintf_r+0x1aa>
 8008f10:	9b03      	ldr	r3, [sp, #12]
 8008f12:	1d1a      	adds	r2, r3, #4
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	9203      	str	r2, [sp, #12]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	bfb8      	it	lt
 8008f1c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008f20:	f108 0802 	add.w	r8, r8, #2
 8008f24:	9305      	str	r3, [sp, #20]
 8008f26:	4d33      	ldr	r5, [pc, #204]	; (8008ff4 <_vfiprintf_r+0x21c>)
 8008f28:	f898 1000 	ldrb.w	r1, [r8]
 8008f2c:	2203      	movs	r2, #3
 8008f2e:	4628      	mov	r0, r5
 8008f30:	f7f7 f976 	bl	8000220 <memchr>
 8008f34:	b140      	cbz	r0, 8008f48 <_vfiprintf_r+0x170>
 8008f36:	2340      	movs	r3, #64	; 0x40
 8008f38:	1b40      	subs	r0, r0, r5
 8008f3a:	fa03 f000 	lsl.w	r0, r3, r0
 8008f3e:	9b04      	ldr	r3, [sp, #16]
 8008f40:	4303      	orrs	r3, r0
 8008f42:	f108 0801 	add.w	r8, r8, #1
 8008f46:	9304      	str	r3, [sp, #16]
 8008f48:	f898 1000 	ldrb.w	r1, [r8]
 8008f4c:	482a      	ldr	r0, [pc, #168]	; (8008ff8 <_vfiprintf_r+0x220>)
 8008f4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f52:	2206      	movs	r2, #6
 8008f54:	f108 0701 	add.w	r7, r8, #1
 8008f58:	f7f7 f962 	bl	8000220 <memchr>
 8008f5c:	2800      	cmp	r0, #0
 8008f5e:	d037      	beq.n	8008fd0 <_vfiprintf_r+0x1f8>
 8008f60:	4b26      	ldr	r3, [pc, #152]	; (8008ffc <_vfiprintf_r+0x224>)
 8008f62:	bb1b      	cbnz	r3, 8008fac <_vfiprintf_r+0x1d4>
 8008f64:	9b03      	ldr	r3, [sp, #12]
 8008f66:	3307      	adds	r3, #7
 8008f68:	f023 0307 	bic.w	r3, r3, #7
 8008f6c:	3308      	adds	r3, #8
 8008f6e:	9303      	str	r3, [sp, #12]
 8008f70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f72:	444b      	add	r3, r9
 8008f74:	9309      	str	r3, [sp, #36]	; 0x24
 8008f76:	e750      	b.n	8008e1a <_vfiprintf_r+0x42>
 8008f78:	fb05 3202 	mla	r2, r5, r2, r3
 8008f7c:	2001      	movs	r0, #1
 8008f7e:	4688      	mov	r8, r1
 8008f80:	e78a      	b.n	8008e98 <_vfiprintf_r+0xc0>
 8008f82:	2300      	movs	r3, #0
 8008f84:	f108 0801 	add.w	r8, r8, #1
 8008f88:	9305      	str	r3, [sp, #20]
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	250a      	movs	r5, #10
 8008f8e:	4640      	mov	r0, r8
 8008f90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f94:	3a30      	subs	r2, #48	; 0x30
 8008f96:	2a09      	cmp	r2, #9
 8008f98:	d903      	bls.n	8008fa2 <_vfiprintf_r+0x1ca>
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d0c3      	beq.n	8008f26 <_vfiprintf_r+0x14e>
 8008f9e:	9105      	str	r1, [sp, #20]
 8008fa0:	e7c1      	b.n	8008f26 <_vfiprintf_r+0x14e>
 8008fa2:	fb05 2101 	mla	r1, r5, r1, r2
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	4680      	mov	r8, r0
 8008faa:	e7f0      	b.n	8008f8e <_vfiprintf_r+0x1b6>
 8008fac:	ab03      	add	r3, sp, #12
 8008fae:	9300      	str	r3, [sp, #0]
 8008fb0:	4622      	mov	r2, r4
 8008fb2:	4b13      	ldr	r3, [pc, #76]	; (8009000 <_vfiprintf_r+0x228>)
 8008fb4:	a904      	add	r1, sp, #16
 8008fb6:	4630      	mov	r0, r6
 8008fb8:	f3af 8000 	nop.w
 8008fbc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008fc0:	4681      	mov	r9, r0
 8008fc2:	d1d5      	bne.n	8008f70 <_vfiprintf_r+0x198>
 8008fc4:	89a3      	ldrh	r3, [r4, #12]
 8008fc6:	065b      	lsls	r3, r3, #25
 8008fc8:	f53f af7e 	bmi.w	8008ec8 <_vfiprintf_r+0xf0>
 8008fcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fce:	e77d      	b.n	8008ecc <_vfiprintf_r+0xf4>
 8008fd0:	ab03      	add	r3, sp, #12
 8008fd2:	9300      	str	r3, [sp, #0]
 8008fd4:	4622      	mov	r2, r4
 8008fd6:	4b0a      	ldr	r3, [pc, #40]	; (8009000 <_vfiprintf_r+0x228>)
 8008fd8:	a904      	add	r1, sp, #16
 8008fda:	4630      	mov	r0, r6
 8008fdc:	f000 f888 	bl	80090f0 <_printf_i>
 8008fe0:	e7ec      	b.n	8008fbc <_vfiprintf_r+0x1e4>
 8008fe2:	bf00      	nop
 8008fe4:	080097ac 	.word	0x080097ac
 8008fe8:	080097ec 	.word	0x080097ec
 8008fec:	080097cc 	.word	0x080097cc
 8008ff0:	0800978c 	.word	0x0800978c
 8008ff4:	080097f2 	.word	0x080097f2
 8008ff8:	080097f6 	.word	0x080097f6
 8008ffc:	00000000 	.word	0x00000000
 8009000:	08008db3 	.word	0x08008db3

08009004 <_printf_common>:
 8009004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009008:	4691      	mov	r9, r2
 800900a:	461f      	mov	r7, r3
 800900c:	688a      	ldr	r2, [r1, #8]
 800900e:	690b      	ldr	r3, [r1, #16]
 8009010:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009014:	4293      	cmp	r3, r2
 8009016:	bfb8      	it	lt
 8009018:	4613      	movlt	r3, r2
 800901a:	f8c9 3000 	str.w	r3, [r9]
 800901e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009022:	4606      	mov	r6, r0
 8009024:	460c      	mov	r4, r1
 8009026:	b112      	cbz	r2, 800902e <_printf_common+0x2a>
 8009028:	3301      	adds	r3, #1
 800902a:	f8c9 3000 	str.w	r3, [r9]
 800902e:	6823      	ldr	r3, [r4, #0]
 8009030:	0699      	lsls	r1, r3, #26
 8009032:	bf42      	ittt	mi
 8009034:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009038:	3302      	addmi	r3, #2
 800903a:	f8c9 3000 	strmi.w	r3, [r9]
 800903e:	6825      	ldr	r5, [r4, #0]
 8009040:	f015 0506 	ands.w	r5, r5, #6
 8009044:	d107      	bne.n	8009056 <_printf_common+0x52>
 8009046:	f104 0a19 	add.w	sl, r4, #25
 800904a:	68e3      	ldr	r3, [r4, #12]
 800904c:	f8d9 2000 	ldr.w	r2, [r9]
 8009050:	1a9b      	subs	r3, r3, r2
 8009052:	42ab      	cmp	r3, r5
 8009054:	dc28      	bgt.n	80090a8 <_printf_common+0xa4>
 8009056:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800905a:	6822      	ldr	r2, [r4, #0]
 800905c:	3300      	adds	r3, #0
 800905e:	bf18      	it	ne
 8009060:	2301      	movne	r3, #1
 8009062:	0692      	lsls	r2, r2, #26
 8009064:	d42d      	bmi.n	80090c2 <_printf_common+0xbe>
 8009066:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800906a:	4639      	mov	r1, r7
 800906c:	4630      	mov	r0, r6
 800906e:	47c0      	blx	r8
 8009070:	3001      	adds	r0, #1
 8009072:	d020      	beq.n	80090b6 <_printf_common+0xb2>
 8009074:	6823      	ldr	r3, [r4, #0]
 8009076:	68e5      	ldr	r5, [r4, #12]
 8009078:	f8d9 2000 	ldr.w	r2, [r9]
 800907c:	f003 0306 	and.w	r3, r3, #6
 8009080:	2b04      	cmp	r3, #4
 8009082:	bf08      	it	eq
 8009084:	1aad      	subeq	r5, r5, r2
 8009086:	68a3      	ldr	r3, [r4, #8]
 8009088:	6922      	ldr	r2, [r4, #16]
 800908a:	bf0c      	ite	eq
 800908c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009090:	2500      	movne	r5, #0
 8009092:	4293      	cmp	r3, r2
 8009094:	bfc4      	itt	gt
 8009096:	1a9b      	subgt	r3, r3, r2
 8009098:	18ed      	addgt	r5, r5, r3
 800909a:	f04f 0900 	mov.w	r9, #0
 800909e:	341a      	adds	r4, #26
 80090a0:	454d      	cmp	r5, r9
 80090a2:	d11a      	bne.n	80090da <_printf_common+0xd6>
 80090a4:	2000      	movs	r0, #0
 80090a6:	e008      	b.n	80090ba <_printf_common+0xb6>
 80090a8:	2301      	movs	r3, #1
 80090aa:	4652      	mov	r2, sl
 80090ac:	4639      	mov	r1, r7
 80090ae:	4630      	mov	r0, r6
 80090b0:	47c0      	blx	r8
 80090b2:	3001      	adds	r0, #1
 80090b4:	d103      	bne.n	80090be <_printf_common+0xba>
 80090b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090be:	3501      	adds	r5, #1
 80090c0:	e7c3      	b.n	800904a <_printf_common+0x46>
 80090c2:	18e1      	adds	r1, r4, r3
 80090c4:	1c5a      	adds	r2, r3, #1
 80090c6:	2030      	movs	r0, #48	; 0x30
 80090c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80090cc:	4422      	add	r2, r4
 80090ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80090d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80090d6:	3302      	adds	r3, #2
 80090d8:	e7c5      	b.n	8009066 <_printf_common+0x62>
 80090da:	2301      	movs	r3, #1
 80090dc:	4622      	mov	r2, r4
 80090de:	4639      	mov	r1, r7
 80090e0:	4630      	mov	r0, r6
 80090e2:	47c0      	blx	r8
 80090e4:	3001      	adds	r0, #1
 80090e6:	d0e6      	beq.n	80090b6 <_printf_common+0xb2>
 80090e8:	f109 0901 	add.w	r9, r9, #1
 80090ec:	e7d8      	b.n	80090a0 <_printf_common+0x9c>
	...

080090f0 <_printf_i>:
 80090f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80090f4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80090f8:	460c      	mov	r4, r1
 80090fa:	7e09      	ldrb	r1, [r1, #24]
 80090fc:	b085      	sub	sp, #20
 80090fe:	296e      	cmp	r1, #110	; 0x6e
 8009100:	4617      	mov	r7, r2
 8009102:	4606      	mov	r6, r0
 8009104:	4698      	mov	r8, r3
 8009106:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009108:	f000 80b3 	beq.w	8009272 <_printf_i+0x182>
 800910c:	d822      	bhi.n	8009154 <_printf_i+0x64>
 800910e:	2963      	cmp	r1, #99	; 0x63
 8009110:	d036      	beq.n	8009180 <_printf_i+0x90>
 8009112:	d80a      	bhi.n	800912a <_printf_i+0x3a>
 8009114:	2900      	cmp	r1, #0
 8009116:	f000 80b9 	beq.w	800928c <_printf_i+0x19c>
 800911a:	2958      	cmp	r1, #88	; 0x58
 800911c:	f000 8083 	beq.w	8009226 <_printf_i+0x136>
 8009120:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009124:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009128:	e032      	b.n	8009190 <_printf_i+0xa0>
 800912a:	2964      	cmp	r1, #100	; 0x64
 800912c:	d001      	beq.n	8009132 <_printf_i+0x42>
 800912e:	2969      	cmp	r1, #105	; 0x69
 8009130:	d1f6      	bne.n	8009120 <_printf_i+0x30>
 8009132:	6820      	ldr	r0, [r4, #0]
 8009134:	6813      	ldr	r3, [r2, #0]
 8009136:	0605      	lsls	r5, r0, #24
 8009138:	f103 0104 	add.w	r1, r3, #4
 800913c:	d52a      	bpl.n	8009194 <_printf_i+0xa4>
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	6011      	str	r1, [r2, #0]
 8009142:	2b00      	cmp	r3, #0
 8009144:	da03      	bge.n	800914e <_printf_i+0x5e>
 8009146:	222d      	movs	r2, #45	; 0x2d
 8009148:	425b      	negs	r3, r3
 800914a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800914e:	486f      	ldr	r0, [pc, #444]	; (800930c <_printf_i+0x21c>)
 8009150:	220a      	movs	r2, #10
 8009152:	e039      	b.n	80091c8 <_printf_i+0xd8>
 8009154:	2973      	cmp	r1, #115	; 0x73
 8009156:	f000 809d 	beq.w	8009294 <_printf_i+0x1a4>
 800915a:	d808      	bhi.n	800916e <_printf_i+0x7e>
 800915c:	296f      	cmp	r1, #111	; 0x6f
 800915e:	d020      	beq.n	80091a2 <_printf_i+0xb2>
 8009160:	2970      	cmp	r1, #112	; 0x70
 8009162:	d1dd      	bne.n	8009120 <_printf_i+0x30>
 8009164:	6823      	ldr	r3, [r4, #0]
 8009166:	f043 0320 	orr.w	r3, r3, #32
 800916a:	6023      	str	r3, [r4, #0]
 800916c:	e003      	b.n	8009176 <_printf_i+0x86>
 800916e:	2975      	cmp	r1, #117	; 0x75
 8009170:	d017      	beq.n	80091a2 <_printf_i+0xb2>
 8009172:	2978      	cmp	r1, #120	; 0x78
 8009174:	d1d4      	bne.n	8009120 <_printf_i+0x30>
 8009176:	2378      	movs	r3, #120	; 0x78
 8009178:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800917c:	4864      	ldr	r0, [pc, #400]	; (8009310 <_printf_i+0x220>)
 800917e:	e055      	b.n	800922c <_printf_i+0x13c>
 8009180:	6813      	ldr	r3, [r2, #0]
 8009182:	1d19      	adds	r1, r3, #4
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	6011      	str	r1, [r2, #0]
 8009188:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800918c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009190:	2301      	movs	r3, #1
 8009192:	e08c      	b.n	80092ae <_printf_i+0x1be>
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	6011      	str	r1, [r2, #0]
 8009198:	f010 0f40 	tst.w	r0, #64	; 0x40
 800919c:	bf18      	it	ne
 800919e:	b21b      	sxthne	r3, r3
 80091a0:	e7cf      	b.n	8009142 <_printf_i+0x52>
 80091a2:	6813      	ldr	r3, [r2, #0]
 80091a4:	6825      	ldr	r5, [r4, #0]
 80091a6:	1d18      	adds	r0, r3, #4
 80091a8:	6010      	str	r0, [r2, #0]
 80091aa:	0628      	lsls	r0, r5, #24
 80091ac:	d501      	bpl.n	80091b2 <_printf_i+0xc2>
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	e002      	b.n	80091b8 <_printf_i+0xc8>
 80091b2:	0668      	lsls	r0, r5, #25
 80091b4:	d5fb      	bpl.n	80091ae <_printf_i+0xbe>
 80091b6:	881b      	ldrh	r3, [r3, #0]
 80091b8:	4854      	ldr	r0, [pc, #336]	; (800930c <_printf_i+0x21c>)
 80091ba:	296f      	cmp	r1, #111	; 0x6f
 80091bc:	bf14      	ite	ne
 80091be:	220a      	movne	r2, #10
 80091c0:	2208      	moveq	r2, #8
 80091c2:	2100      	movs	r1, #0
 80091c4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80091c8:	6865      	ldr	r5, [r4, #4]
 80091ca:	60a5      	str	r5, [r4, #8]
 80091cc:	2d00      	cmp	r5, #0
 80091ce:	f2c0 8095 	blt.w	80092fc <_printf_i+0x20c>
 80091d2:	6821      	ldr	r1, [r4, #0]
 80091d4:	f021 0104 	bic.w	r1, r1, #4
 80091d8:	6021      	str	r1, [r4, #0]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d13d      	bne.n	800925a <_printf_i+0x16a>
 80091de:	2d00      	cmp	r5, #0
 80091e0:	f040 808e 	bne.w	8009300 <_printf_i+0x210>
 80091e4:	4665      	mov	r5, ip
 80091e6:	2a08      	cmp	r2, #8
 80091e8:	d10b      	bne.n	8009202 <_printf_i+0x112>
 80091ea:	6823      	ldr	r3, [r4, #0]
 80091ec:	07db      	lsls	r3, r3, #31
 80091ee:	d508      	bpl.n	8009202 <_printf_i+0x112>
 80091f0:	6923      	ldr	r3, [r4, #16]
 80091f2:	6862      	ldr	r2, [r4, #4]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	bfde      	ittt	le
 80091f8:	2330      	movle	r3, #48	; 0x30
 80091fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80091fe:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009202:	ebac 0305 	sub.w	r3, ip, r5
 8009206:	6123      	str	r3, [r4, #16]
 8009208:	f8cd 8000 	str.w	r8, [sp]
 800920c:	463b      	mov	r3, r7
 800920e:	aa03      	add	r2, sp, #12
 8009210:	4621      	mov	r1, r4
 8009212:	4630      	mov	r0, r6
 8009214:	f7ff fef6 	bl	8009004 <_printf_common>
 8009218:	3001      	adds	r0, #1
 800921a:	d14d      	bne.n	80092b8 <_printf_i+0x1c8>
 800921c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009220:	b005      	add	sp, #20
 8009222:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009226:	4839      	ldr	r0, [pc, #228]	; (800930c <_printf_i+0x21c>)
 8009228:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800922c:	6813      	ldr	r3, [r2, #0]
 800922e:	6821      	ldr	r1, [r4, #0]
 8009230:	1d1d      	adds	r5, r3, #4
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	6015      	str	r5, [r2, #0]
 8009236:	060a      	lsls	r2, r1, #24
 8009238:	d50b      	bpl.n	8009252 <_printf_i+0x162>
 800923a:	07ca      	lsls	r2, r1, #31
 800923c:	bf44      	itt	mi
 800923e:	f041 0120 	orrmi.w	r1, r1, #32
 8009242:	6021      	strmi	r1, [r4, #0]
 8009244:	b91b      	cbnz	r3, 800924e <_printf_i+0x15e>
 8009246:	6822      	ldr	r2, [r4, #0]
 8009248:	f022 0220 	bic.w	r2, r2, #32
 800924c:	6022      	str	r2, [r4, #0]
 800924e:	2210      	movs	r2, #16
 8009250:	e7b7      	b.n	80091c2 <_printf_i+0xd2>
 8009252:	064d      	lsls	r5, r1, #25
 8009254:	bf48      	it	mi
 8009256:	b29b      	uxthmi	r3, r3
 8009258:	e7ef      	b.n	800923a <_printf_i+0x14a>
 800925a:	4665      	mov	r5, ip
 800925c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009260:	fb02 3311 	mls	r3, r2, r1, r3
 8009264:	5cc3      	ldrb	r3, [r0, r3]
 8009266:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800926a:	460b      	mov	r3, r1
 800926c:	2900      	cmp	r1, #0
 800926e:	d1f5      	bne.n	800925c <_printf_i+0x16c>
 8009270:	e7b9      	b.n	80091e6 <_printf_i+0xf6>
 8009272:	6813      	ldr	r3, [r2, #0]
 8009274:	6825      	ldr	r5, [r4, #0]
 8009276:	6961      	ldr	r1, [r4, #20]
 8009278:	1d18      	adds	r0, r3, #4
 800927a:	6010      	str	r0, [r2, #0]
 800927c:	0628      	lsls	r0, r5, #24
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	d501      	bpl.n	8009286 <_printf_i+0x196>
 8009282:	6019      	str	r1, [r3, #0]
 8009284:	e002      	b.n	800928c <_printf_i+0x19c>
 8009286:	066a      	lsls	r2, r5, #25
 8009288:	d5fb      	bpl.n	8009282 <_printf_i+0x192>
 800928a:	8019      	strh	r1, [r3, #0]
 800928c:	2300      	movs	r3, #0
 800928e:	6123      	str	r3, [r4, #16]
 8009290:	4665      	mov	r5, ip
 8009292:	e7b9      	b.n	8009208 <_printf_i+0x118>
 8009294:	6813      	ldr	r3, [r2, #0]
 8009296:	1d19      	adds	r1, r3, #4
 8009298:	6011      	str	r1, [r2, #0]
 800929a:	681d      	ldr	r5, [r3, #0]
 800929c:	6862      	ldr	r2, [r4, #4]
 800929e:	2100      	movs	r1, #0
 80092a0:	4628      	mov	r0, r5
 80092a2:	f7f6 ffbd 	bl	8000220 <memchr>
 80092a6:	b108      	cbz	r0, 80092ac <_printf_i+0x1bc>
 80092a8:	1b40      	subs	r0, r0, r5
 80092aa:	6060      	str	r0, [r4, #4]
 80092ac:	6863      	ldr	r3, [r4, #4]
 80092ae:	6123      	str	r3, [r4, #16]
 80092b0:	2300      	movs	r3, #0
 80092b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092b6:	e7a7      	b.n	8009208 <_printf_i+0x118>
 80092b8:	6923      	ldr	r3, [r4, #16]
 80092ba:	462a      	mov	r2, r5
 80092bc:	4639      	mov	r1, r7
 80092be:	4630      	mov	r0, r6
 80092c0:	47c0      	blx	r8
 80092c2:	3001      	adds	r0, #1
 80092c4:	d0aa      	beq.n	800921c <_printf_i+0x12c>
 80092c6:	6823      	ldr	r3, [r4, #0]
 80092c8:	079b      	lsls	r3, r3, #30
 80092ca:	d413      	bmi.n	80092f4 <_printf_i+0x204>
 80092cc:	68e0      	ldr	r0, [r4, #12]
 80092ce:	9b03      	ldr	r3, [sp, #12]
 80092d0:	4298      	cmp	r0, r3
 80092d2:	bfb8      	it	lt
 80092d4:	4618      	movlt	r0, r3
 80092d6:	e7a3      	b.n	8009220 <_printf_i+0x130>
 80092d8:	2301      	movs	r3, #1
 80092da:	464a      	mov	r2, r9
 80092dc:	4639      	mov	r1, r7
 80092de:	4630      	mov	r0, r6
 80092e0:	47c0      	blx	r8
 80092e2:	3001      	adds	r0, #1
 80092e4:	d09a      	beq.n	800921c <_printf_i+0x12c>
 80092e6:	3501      	adds	r5, #1
 80092e8:	68e3      	ldr	r3, [r4, #12]
 80092ea:	9a03      	ldr	r2, [sp, #12]
 80092ec:	1a9b      	subs	r3, r3, r2
 80092ee:	42ab      	cmp	r3, r5
 80092f0:	dcf2      	bgt.n	80092d8 <_printf_i+0x1e8>
 80092f2:	e7eb      	b.n	80092cc <_printf_i+0x1dc>
 80092f4:	2500      	movs	r5, #0
 80092f6:	f104 0919 	add.w	r9, r4, #25
 80092fa:	e7f5      	b.n	80092e8 <_printf_i+0x1f8>
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d1ac      	bne.n	800925a <_printf_i+0x16a>
 8009300:	7803      	ldrb	r3, [r0, #0]
 8009302:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009306:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800930a:	e76c      	b.n	80091e6 <_printf_i+0xf6>
 800930c:	080097fd 	.word	0x080097fd
 8009310:	0800980e 	.word	0x0800980e

08009314 <_sbrk_r>:
 8009314:	b538      	push	{r3, r4, r5, lr}
 8009316:	4c06      	ldr	r4, [pc, #24]	; (8009330 <_sbrk_r+0x1c>)
 8009318:	2300      	movs	r3, #0
 800931a:	4605      	mov	r5, r0
 800931c:	4608      	mov	r0, r1
 800931e:	6023      	str	r3, [r4, #0]
 8009320:	f7f8 faae 	bl	8001880 <_sbrk>
 8009324:	1c43      	adds	r3, r0, #1
 8009326:	d102      	bne.n	800932e <_sbrk_r+0x1a>
 8009328:	6823      	ldr	r3, [r4, #0]
 800932a:	b103      	cbz	r3, 800932e <_sbrk_r+0x1a>
 800932c:	602b      	str	r3, [r5, #0]
 800932e:	bd38      	pop	{r3, r4, r5, pc}
 8009330:	200008ec 	.word	0x200008ec

08009334 <__sread>:
 8009334:	b510      	push	{r4, lr}
 8009336:	460c      	mov	r4, r1
 8009338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800933c:	f000 f896 	bl	800946c <_read_r>
 8009340:	2800      	cmp	r0, #0
 8009342:	bfab      	itete	ge
 8009344:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009346:	89a3      	ldrhlt	r3, [r4, #12]
 8009348:	181b      	addge	r3, r3, r0
 800934a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800934e:	bfac      	ite	ge
 8009350:	6563      	strge	r3, [r4, #84]	; 0x54
 8009352:	81a3      	strhlt	r3, [r4, #12]
 8009354:	bd10      	pop	{r4, pc}

08009356 <__swrite>:
 8009356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800935a:	461f      	mov	r7, r3
 800935c:	898b      	ldrh	r3, [r1, #12]
 800935e:	05db      	lsls	r3, r3, #23
 8009360:	4605      	mov	r5, r0
 8009362:	460c      	mov	r4, r1
 8009364:	4616      	mov	r6, r2
 8009366:	d505      	bpl.n	8009374 <__swrite+0x1e>
 8009368:	2302      	movs	r3, #2
 800936a:	2200      	movs	r2, #0
 800936c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009370:	f000 f868 	bl	8009444 <_lseek_r>
 8009374:	89a3      	ldrh	r3, [r4, #12]
 8009376:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800937a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800937e:	81a3      	strh	r3, [r4, #12]
 8009380:	4632      	mov	r2, r6
 8009382:	463b      	mov	r3, r7
 8009384:	4628      	mov	r0, r5
 8009386:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800938a:	f000 b817 	b.w	80093bc <_write_r>

0800938e <__sseek>:
 800938e:	b510      	push	{r4, lr}
 8009390:	460c      	mov	r4, r1
 8009392:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009396:	f000 f855 	bl	8009444 <_lseek_r>
 800939a:	1c43      	adds	r3, r0, #1
 800939c:	89a3      	ldrh	r3, [r4, #12]
 800939e:	bf15      	itete	ne
 80093a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80093a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80093a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80093aa:	81a3      	strheq	r3, [r4, #12]
 80093ac:	bf18      	it	ne
 80093ae:	81a3      	strhne	r3, [r4, #12]
 80093b0:	bd10      	pop	{r4, pc}

080093b2 <__sclose>:
 80093b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093b6:	f000 b813 	b.w	80093e0 <_close_r>
	...

080093bc <_write_r>:
 80093bc:	b538      	push	{r3, r4, r5, lr}
 80093be:	4c07      	ldr	r4, [pc, #28]	; (80093dc <_write_r+0x20>)
 80093c0:	4605      	mov	r5, r0
 80093c2:	4608      	mov	r0, r1
 80093c4:	4611      	mov	r1, r2
 80093c6:	2200      	movs	r2, #0
 80093c8:	6022      	str	r2, [r4, #0]
 80093ca:	461a      	mov	r2, r3
 80093cc:	f7f7 fe3f 	bl	800104e <_write>
 80093d0:	1c43      	adds	r3, r0, #1
 80093d2:	d102      	bne.n	80093da <_write_r+0x1e>
 80093d4:	6823      	ldr	r3, [r4, #0]
 80093d6:	b103      	cbz	r3, 80093da <_write_r+0x1e>
 80093d8:	602b      	str	r3, [r5, #0]
 80093da:	bd38      	pop	{r3, r4, r5, pc}
 80093dc:	200008ec 	.word	0x200008ec

080093e0 <_close_r>:
 80093e0:	b538      	push	{r3, r4, r5, lr}
 80093e2:	4c06      	ldr	r4, [pc, #24]	; (80093fc <_close_r+0x1c>)
 80093e4:	2300      	movs	r3, #0
 80093e6:	4605      	mov	r5, r0
 80093e8:	4608      	mov	r0, r1
 80093ea:	6023      	str	r3, [r4, #0]
 80093ec:	f7f8 fa13 	bl	8001816 <_close>
 80093f0:	1c43      	adds	r3, r0, #1
 80093f2:	d102      	bne.n	80093fa <_close_r+0x1a>
 80093f4:	6823      	ldr	r3, [r4, #0]
 80093f6:	b103      	cbz	r3, 80093fa <_close_r+0x1a>
 80093f8:	602b      	str	r3, [r5, #0]
 80093fa:	bd38      	pop	{r3, r4, r5, pc}
 80093fc:	200008ec 	.word	0x200008ec

08009400 <_fstat_r>:
 8009400:	b538      	push	{r3, r4, r5, lr}
 8009402:	4c07      	ldr	r4, [pc, #28]	; (8009420 <_fstat_r+0x20>)
 8009404:	2300      	movs	r3, #0
 8009406:	4605      	mov	r5, r0
 8009408:	4608      	mov	r0, r1
 800940a:	4611      	mov	r1, r2
 800940c:	6023      	str	r3, [r4, #0]
 800940e:	f7f8 fa0e 	bl	800182e <_fstat>
 8009412:	1c43      	adds	r3, r0, #1
 8009414:	d102      	bne.n	800941c <_fstat_r+0x1c>
 8009416:	6823      	ldr	r3, [r4, #0]
 8009418:	b103      	cbz	r3, 800941c <_fstat_r+0x1c>
 800941a:	602b      	str	r3, [r5, #0]
 800941c:	bd38      	pop	{r3, r4, r5, pc}
 800941e:	bf00      	nop
 8009420:	200008ec 	.word	0x200008ec

08009424 <_isatty_r>:
 8009424:	b538      	push	{r3, r4, r5, lr}
 8009426:	4c06      	ldr	r4, [pc, #24]	; (8009440 <_isatty_r+0x1c>)
 8009428:	2300      	movs	r3, #0
 800942a:	4605      	mov	r5, r0
 800942c:	4608      	mov	r0, r1
 800942e:	6023      	str	r3, [r4, #0]
 8009430:	f7f8 fa0d 	bl	800184e <_isatty>
 8009434:	1c43      	adds	r3, r0, #1
 8009436:	d102      	bne.n	800943e <_isatty_r+0x1a>
 8009438:	6823      	ldr	r3, [r4, #0]
 800943a:	b103      	cbz	r3, 800943e <_isatty_r+0x1a>
 800943c:	602b      	str	r3, [r5, #0]
 800943e:	bd38      	pop	{r3, r4, r5, pc}
 8009440:	200008ec 	.word	0x200008ec

08009444 <_lseek_r>:
 8009444:	b538      	push	{r3, r4, r5, lr}
 8009446:	4c07      	ldr	r4, [pc, #28]	; (8009464 <_lseek_r+0x20>)
 8009448:	4605      	mov	r5, r0
 800944a:	4608      	mov	r0, r1
 800944c:	4611      	mov	r1, r2
 800944e:	2200      	movs	r2, #0
 8009450:	6022      	str	r2, [r4, #0]
 8009452:	461a      	mov	r2, r3
 8009454:	f7f8 fa06 	bl	8001864 <_lseek>
 8009458:	1c43      	adds	r3, r0, #1
 800945a:	d102      	bne.n	8009462 <_lseek_r+0x1e>
 800945c:	6823      	ldr	r3, [r4, #0]
 800945e:	b103      	cbz	r3, 8009462 <_lseek_r+0x1e>
 8009460:	602b      	str	r3, [r5, #0]
 8009462:	bd38      	pop	{r3, r4, r5, pc}
 8009464:	200008ec 	.word	0x200008ec

08009468 <__malloc_lock>:
 8009468:	4770      	bx	lr

0800946a <__malloc_unlock>:
 800946a:	4770      	bx	lr

0800946c <_read_r>:
 800946c:	b538      	push	{r3, r4, r5, lr}
 800946e:	4c07      	ldr	r4, [pc, #28]	; (800948c <_read_r+0x20>)
 8009470:	4605      	mov	r5, r0
 8009472:	4608      	mov	r0, r1
 8009474:	4611      	mov	r1, r2
 8009476:	2200      	movs	r2, #0
 8009478:	6022      	str	r2, [r4, #0]
 800947a:	461a      	mov	r2, r3
 800947c:	f7f8 f9ae 	bl	80017dc <_read>
 8009480:	1c43      	adds	r3, r0, #1
 8009482:	d102      	bne.n	800948a <_read_r+0x1e>
 8009484:	6823      	ldr	r3, [r4, #0]
 8009486:	b103      	cbz	r3, 800948a <_read_r+0x1e>
 8009488:	602b      	str	r3, [r5, #0]
 800948a:	bd38      	pop	{r3, r4, r5, pc}
 800948c:	200008ec 	.word	0x200008ec

08009490 <_init>:
 8009490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009492:	bf00      	nop
 8009494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009496:	bc08      	pop	{r3}
 8009498:	469e      	mov	lr, r3
 800949a:	4770      	bx	lr

0800949c <_fini>:
 800949c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800949e:	bf00      	nop
 80094a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094a2:	bc08      	pop	{r3}
 80094a4:	469e      	mov	lr, r3
 80094a6:	4770      	bx	lr
