
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e550  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000990  0800e730  0800e730  0001e730  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f0c0  0800f0c0  000213f8  2**0
                  CONTENTS
  4 .ARM          00000000  0800f0c0  0800f0c0  000213f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f0c0  0800f0c0  000213f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f0c0  0800f0c0  0001f0c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f0c4  0800f0c4  0001f0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000013f8  20000000  0800f0c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000049c  200013f8  080104c0  000213f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001894  080104c0  00021894  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000213f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c380  00000000  00000000  00021428  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005b8c  00000000  00000000  0004d7a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001e88  00000000  00000000  00053338  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001b28  00000000  00000000  000551c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000307b6  00000000  00000000  00056ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000219a1  00000000  00000000  0008749e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00124be8  00000000  00000000  000a8e3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001cda27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000088c4  00000000  00000000  001cdaa4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200013f8 	.word	0x200013f8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e718 	.word	0x0800e718

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200013fc 	.word	0x200013fc
 800021c:	0800e718 	.word	0x0800e718

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <DM_Init>:
 *	@param None
 *	@retval None
 *
 */
void DM_Init()
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 8000bfc:	f00a fb9a 	bl	800b334 <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000c00:	2003      	movs	r0, #3
 8000c02:	f00a ff87 	bl	800bb14 <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 8000c06:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000c0a:	f00a fd9b 	bl	800b744 <ILI9341_Fill_Screen>

}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <DM_PostInit>:
 *	@param None
 *	@retval None
 *
 */
void DM_PostInit()
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af02      	add	r7, sp, #8

	  ILI9341_Draw_Text("Initialising", 10, 10, BLACK, 1, WHITE);
 8000c1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c1e:	9301      	str	r3, [sp, #4]
 8000c20:	2301      	movs	r3, #1
 8000c22:	9300      	str	r3, [sp, #0]
 8000c24:	2300      	movs	r3, #0
 8000c26:	220a      	movs	r2, #10
 8000c28:	210a      	movs	r1, #10
 8000c2a:	4807      	ldr	r0, [pc, #28]	; (8000c48 <DM_PostInit+0x34>)
 8000c2c:	f00a fb30 	bl	800b290 <ILI9341_Draw_Text>
	  HAL_Delay(500);
 8000c30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c34:	f004 fe1e 	bl	8005874 <HAL_Delay>

	  DM_RefreshBackgroundLayout();
 8000c38:	f000 fc1e 	bl	8001478 <DM_RefreshBackgroundLayout>
	  printf("Init Completed\n");
 8000c3c:	4803      	ldr	r0, [pc, #12]	; (8000c4c <DM_PostInit+0x38>)
 8000c3e:	f00b fe11 	bl	800c864 <puts>
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	0800e730 	.word	0x0800e730
 8000c4c:	0800e740 	.word	0x0800e740

08000c50 <DM_DisplayFormattedOutput>:
 *	@param None
 *	@retval None
 *
 */
void DM_DisplayFormattedOutput()
{
 8000c50:	b590      	push	{r4, r7, lr}
 8000c52:	b093      	sub	sp, #76	; 0x4c
 8000c54:	af02      	add	r7, sp, #8
	char out_hertz[13] = "";
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
 8000c5a:	f107 0320 	add.w	r3, r7, #32
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	721a      	strb	r2, [r3, #8]
	uint8_t out_hertz_x = 70;
 8000c66:	2346      	movs	r3, #70	; 0x46
 8000c68:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t out_hertz_y = 50;
 8000c6c:	2332      	movs	r3, #50	; 0x32
 8000c6e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	char out_decibels[8] = "";
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
 8000c76:	2300      	movs	r3, #0
 8000c78:	61bb      	str	r3, [r7, #24]
	uint8_t out_decibels_x = 70;
 8000c7a:	2346      	movs	r3, #70	; 0x46
 8000c7c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	uint8_t out_decibels_y = 80;
 8000c80:	2350      	movs	r3, #80	; 0x50
 8000c82:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

	float volts_per_thou = 0.00075;
 8000c86:	4b65      	ldr	r3, [pc, #404]	; (8000e1c <DM_DisplayFormattedOutput+0x1cc>)
 8000c88:	637b      	str	r3, [r7, #52]	; 0x34
	char out_dcvolts[10] = "";
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	f107 030c 	add.w	r3, r7, #12
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	809a      	strh	r2, [r3, #4]
	uint8_t out_dcvolts_x = 70;
 8000c98:	2346      	movs	r3, #70	; 0x46
 8000c9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t out_dcvolts_y = 110;
 8000c9e:	236e      	movs	r3, #110	; 0x6e
 8000ca0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	// display output in hertz
	snprintf(out_hertz, sizeof(out_hertz), "%4.2f Hz", SM_GetOutputInHertz());
 8000ca4:	f002 ff50 	bl	8003b48 <SM_GetOutputInHertz>
 8000ca8:	ee10 3a10 	vmov	r3, s0
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fc73 	bl	8000598 <__aeabi_f2d>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	460c      	mov	r4, r1
 8000cb6:	f107 001c 	add.w	r0, r7, #28
 8000cba:	e9cd 3400 	strd	r3, r4, [sp]
 8000cbe:	4a58      	ldr	r2, [pc, #352]	; (8000e20 <DM_DisplayFormattedOutput+0x1d0>)
 8000cc0:	210d      	movs	r1, #13
 8000cc2:	f00b fdd7 	bl	800c874 <sniprintf>
	ILI9341_Draw_Text(out_hertz, out_hertz_x, out_hertz_y, BLACK, 3, WHITE);
 8000cc6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000cca:	b299      	uxth	r1, r3
 8000ccc:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	f107 001c 	add.w	r0, r7, #28
 8000cd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cda:	9301      	str	r3, [sp, #4]
 8000cdc:	2303      	movs	r3, #3
 8000cde:	9300      	str	r3, [sp, #0]
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	f00a fad5 	bl	800b290 <ILI9341_Draw_Text>

	// display output in decibels
	Gain_Preset_Encoder_Pos_t *pGainPresetTmp =  GO_GetGPresetObject();
 8000ce6:	f002 fefb 	bl	8003ae0 <GO_GetGPresetObject>
 8000cea:	62f8      	str	r0, [r7, #44]	; 0x2c
	if(pGainPresetTmp)
 8000cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d027      	beq.n	8000d42 <DM_DisplayFormattedOutput+0xf2>
	{
		if(pGainPresetTmp->decibels < 0)
 8000cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cf4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	da06      	bge.n	8000d0a <DM_DisplayFormattedOutput+0xba>
			snprintf(out_decibels, sizeof(out_decibels), "AMP OFF");
 8000cfc:	4a49      	ldr	r2, [pc, #292]	; (8000e24 <DM_DisplayFormattedOutput+0x1d4>)
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d06:	e883 0003 	stmia.w	r3, {r0, r1}
		if(pGainPresetTmp->decibels == 0)
 8000d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d0c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d108      	bne.n	8000d26 <DM_DisplayFormattedOutput+0xd6>
			snprintf(out_decibels, sizeof(out_decibels), "  %2d dB", pGainPresetTmp->decibels);
 8000d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d16:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000d1a:	f107 0014 	add.w	r0, r7, #20
 8000d1e:	4a42      	ldr	r2, [pc, #264]	; (8000e28 <DM_DisplayFormattedOutput+0x1d8>)
 8000d20:	2108      	movs	r1, #8
 8000d22:	f00b fda7 	bl	800c874 <sniprintf>
		if(pGainPresetTmp->decibels > 0)
 8000d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d28:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	dd08      	ble.n	8000d42 <DM_DisplayFormattedOutput+0xf2>
			snprintf(out_decibels, sizeof(out_decibels), " +%2d dB", pGainPresetTmp->decibels);
 8000d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d32:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000d36:	f107 0014 	add.w	r0, r7, #20
 8000d3a:	4a3c      	ldr	r2, [pc, #240]	; (8000e2c <DM_DisplayFormattedOutput+0x1dc>)
 8000d3c:	2108      	movs	r1, #8
 8000d3e:	f00b fd99 	bl	800c874 <sniprintf>

	}

	ILI9341_Draw_Text(out_decibels, out_decibels_x, out_decibels_y, BLACK, 3, WHITE);
 8000d42:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000d46:	b299      	uxth	r1, r3
 8000d48:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000d4c:	b29a      	uxth	r2, r3
 8000d4e:	f107 0014 	add.w	r0, r7, #20
 8000d52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d56:	9301      	str	r3, [sp, #4]
 8000d58:	2303      	movs	r3, #3
 8000d5a:	9300      	str	r3, [sp, #0]
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	f00a fa97 	bl	800b290 <ILI9341_Draw_Text>

	// display output bias in +/- Volts
	float dc_volts;
	(BO_GetOutputBias() == 0) ? (dc_volts = 0) : (dc_volts = volts_per_thou * (float)BO_GetOutputBias());
 8000d62:	f002 fa83 	bl	800326c <BO_GetOutputBias>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d103      	bne.n	8000d74 <DM_DisplayFormattedOutput+0x124>
 8000d6c:	f04f 0300 	mov.w	r3, #0
 8000d70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d72:	e00b      	b.n	8000d8c <DM_DisplayFormattedOutput+0x13c>
 8000d74:	f002 fa7a 	bl	800326c <BO_GetOutputBias>
 8000d78:	ee07 0a90 	vmov	s15, r0
 8000d7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d80:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8000d84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d88:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

	snprintf(out_dcvolts, sizeof(out_dcvolts), "%1.4f v", dc_volts);
 8000d8c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000d8e:	f7ff fc03 	bl	8000598 <__aeabi_f2d>
 8000d92:	4603      	mov	r3, r0
 8000d94:	460c      	mov	r4, r1
 8000d96:	f107 0008 	add.w	r0, r7, #8
 8000d9a:	e9cd 3400 	strd	r3, r4, [sp]
 8000d9e:	4a24      	ldr	r2, [pc, #144]	; (8000e30 <DM_DisplayFormattedOutput+0x1e0>)
 8000da0:	210a      	movs	r1, #10
 8000da2:	f00b fd67 	bl	800c874 <sniprintf>
	//if(DM_AddDigitPadding(dc_volts, out_dcvolts, sizeof(out_dcvolts)) == 0)
	//{
		if(BO_GetBiasPolarity())
 8000da6:	f002 fa0f 	bl	80031c8 <BO_GetBiasPolarity>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d018      	beq.n	8000de2 <DM_DisplayFormattedOutput+0x192>
		{
			char symbol[2] = "+\0";
 8000db0:	4b20      	ldr	r3, [pc, #128]	; (8000e34 <DM_DisplayFormattedOutput+0x1e4>)
 8000db2:	881b      	ldrh	r3, [r3, #0]
 8000db4:	80bb      	strh	r3, [r7, #4]
			ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, BLACK, 3, WHITE);
 8000db6:	f107 0208 	add.w	r2, r7, #8
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	4611      	mov	r1, r2
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f00b fd8c 	bl	800c8dc <strcat>
 8000dc4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000dc8:	b299      	uxth	r1, r3
 8000dca:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000dce:	b29a      	uxth	r2, r3
 8000dd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dd4:	9301      	str	r3, [sp, #4]
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	9300      	str	r3, [sp, #0]
 8000dda:	2300      	movs	r3, #0
 8000ddc:	f00a fa58 	bl	800b290 <ILI9341_Draw_Text>
		{
			char symbol[2] = "-\0";
			ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, BLACK, 3, WHITE);
		}
	//}
}
 8000de0:	e017      	b.n	8000e12 <DM_DisplayFormattedOutput+0x1c2>
			char symbol[2] = "-\0";
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <DM_DisplayFormattedOutput+0x1e8>)
 8000de4:	881b      	ldrh	r3, [r3, #0]
 8000de6:	803b      	strh	r3, [r7, #0]
			ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, BLACK, 3, WHITE);
 8000de8:	f107 0208 	add.w	r2, r7, #8
 8000dec:	463b      	mov	r3, r7
 8000dee:	4611      	mov	r1, r2
 8000df0:	4618      	mov	r0, r3
 8000df2:	f00b fd73 	bl	800c8dc <strcat>
 8000df6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000dfa:	b299      	uxth	r1, r3
 8000dfc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e06:	9301      	str	r3, [sp, #4]
 8000e08:	2303      	movs	r3, #3
 8000e0a:	9300      	str	r3, [sp, #0]
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	f00a fa3f 	bl	800b290 <ILI9341_Draw_Text>
}
 8000e12:	bf00      	nop
 8000e14:	3744      	adds	r7, #68	; 0x44
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd90      	pop	{r4, r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	3a449ba6 	.word	0x3a449ba6
 8000e20:	0800e750 	.word	0x0800e750
 8000e24:	0800e75c 	.word	0x0800e75c
 8000e28:	0800e764 	.word	0x0800e764
 8000e2c:	0800e770 	.word	0x0800e770
 8000e30:	0800e77c 	.word	0x0800e77c
 8000e34:	0800e784 	.word	0x0800e784
 8000e38:	0800e788 	.word	0x0800e788

08000e3c <DM_UpdateDisplay>:
 *	@param None
 *	@retval None
 *
 */
void DM_UpdateDisplay()
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af02      	add	r7, sp, #8


	if(eNextFuncMenuStatus)		//  == ENABLE_FUNCMENU
 8000e42:	4b4c      	ldr	r3, [pc, #304]	; (8000f74 <DM_UpdateDisplay+0x138>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d002      	beq.n	8000e50 <DM_UpdateDisplay+0x14>
 		ILI9341_Draw_Text("    ", 10, 210, BLACK, 2, DARKCYAN);
		ILI9341_Draw_Text("    ", 100, 210, BLACK, 2, DARKGREEN);
		ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
		ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
*/
		_DrawFuncSelectMenu();
 8000e4a:	f000 f8b7 	bl	8000fbc <_DrawFuncSelectMenu>
 8000e4e:	e071      	b.n	8000f34 <DM_UpdateDisplay+0xf8>
	}
	else if(eNextGainMenuStatus)		//  == ENABLE_GAINMENU
 8000e50:	4b49      	ldr	r3, [pc, #292]	; (8000f78 <DM_UpdateDisplay+0x13c>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d004      	beq.n	8000e62 <DM_UpdateDisplay+0x26>
		ILI9341_Draw_Text("    ", 10, 210, BLACK, 2, DARKCYAN);
		ILI9341_Draw_Text("    ", 100, 210, BLACK, 2, DARKGREEN);
		ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
		ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
*/
		DM_DisplayFormattedOutput();
 8000e58:	f7ff fefa 	bl	8000c50 <DM_DisplayFormattedOutput>
		_DrawGainSelectMenu();
 8000e5c:	f000 fa9a 	bl	8001394 <_DrawGainSelectMenu>
 8000e60:	e068      	b.n	8000f34 <DM_UpdateDisplay+0xf8>
	}
	else if(eNextFreqMenuStatus)		//  frequency menu enabled
 8000e62:	4b46      	ldr	r3, [pc, #280]	; (8000f7c <DM_UpdateDisplay+0x140>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d02a      	beq.n	8000ec0 <DM_UpdateDisplay+0x84>
	{

		ILI9341_Draw_Text("FREQUENCY MENU", 	30, 10, WHITE, 3, BLACK);
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	9301      	str	r3, [sp, #4]
 8000e6e:	2303      	movs	r3, #3
 8000e70:	9300      	str	r3, [sp, #0]
 8000e72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e76:	220a      	movs	r2, #10
 8000e78:	211e      	movs	r1, #30
 8000e7a:	4841      	ldr	r0, [pc, #260]	; (8000f80 <DM_UpdateDisplay+0x144>)
 8000e7c:	f00a fa08 	bl	800b290 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("1Hz", 24, 210, BLACK, 2, DARKCYAN);
		ILI9341_Draw_Text("100Hz", 93, 210, BLACK, 2, DARKGREEN);
		ILI9341_Draw_Text("1KHz", 175, 210, BLACK, 2, YELLOW);
		ILI9341_Draw_Text("100KHz", 247, 210, BLACK, 2, RED);
*/
		switch(eNextFreqMenuStatus)
 8000e80:	4b3e      	ldr	r3, [pc, #248]	; (8000f7c <DM_UpdateDisplay+0x140>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	3b01      	subs	r3, #1
 8000e86:	2b03      	cmp	r3, #3
 8000e88:	d853      	bhi.n	8000f32 <DM_UpdateDisplay+0xf6>
 8000e8a:	a201      	add	r2, pc, #4	; (adr r2, 8000e90 <DM_UpdateDisplay+0x54>)
 8000e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e90:	08000ea1 	.word	0x08000ea1
 8000e94:	08000eab 	.word	0x08000eab
 8000e98:	08000eb1 	.word	0x08000eb1
 8000e9c:	08000ebb 	.word	0x08000ebb
		{
			case ENABLE_FREQ_MAIN_MENU:

				DM_DisplayFormattedOutput();
 8000ea0:	f7ff fed6 	bl	8000c50 <DM_DisplayFormattedOutput>

				FreqMenu_DrawFreqMainMenu();
 8000ea4:	f000 fb94 	bl	80015d0 <FreqMenu_DrawFreqMainMenu>

				break;
 8000ea8:	e044      	b.n	8000f34 <DM_UpdateDisplay+0xf8>

			case ENABLE_FREQ_PRESET_MENU:
				FreqMenu_DrawFreqPresetMenu();
 8000eaa:	f000 fbcb 	bl	8001644 <FreqMenu_DrawFreqPresetMenu>
				break;
 8000eae:	e041      	b.n	8000f34 <DM_UpdateDisplay+0xf8>

			case ENABLE_FREQ_ADJUST_MENU:

				DM_DisplayFormattedOutput();
 8000eb0:	f7ff fece 	bl	8000c50 <DM_DisplayFormattedOutput>

				FreqMenu_DrawFreqAdjustMenu();
 8000eb4:	f001 fe4c 	bl	8002b50 <FreqMenu_DrawFreqAdjustMenu>

				break;
 8000eb8:	e03c      	b.n	8000f34 <DM_UpdateDisplay+0xf8>

			case ENABLE_FREQ_SWEEP_MENU:
				FreqMenu_DrawFreqSweepMenu();
 8000eba:	f001 fe79 	bl	8002bb0 <FreqMenu_DrawFreqSweepMenu>
				break;
 8000ebe:	e039      	b.n	8000f34 <DM_UpdateDisplay+0xf8>
			default:
				break;
		}

	}
	else if(eNextBiasMenuStatus)		//  == ENABLE_BIASMENU
 8000ec0:	4b30      	ldr	r3, [pc, #192]	; (8000f84 <DM_UpdateDisplay+0x148>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d004      	beq.n	8000ed2 <DM_UpdateDisplay+0x96>
		ILI9341_Draw_Text("    ", 10, 210, BLACK, 2, DARKCYAN);
		ILI9341_Draw_Text("    ", 100, 210, BLACK, 2, DARKGREEN);
		ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
		ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
*/
		DM_DisplayFormattedOutput();
 8000ec8:	f7ff fec2 	bl	8000c50 <DM_DisplayFormattedOutput>
		_DrawBiasSelectMenu();
 8000ecc:	f000 fa96 	bl	80013fc <_DrawBiasSelectMenu>
 8000ed0:	e030      	b.n	8000f34 <DM_UpdateDisplay+0xf8>
	}
	else
	{
		DM_DisplayFormattedOutput();
 8000ed2:	f7ff febd 	bl	8000c50 <DM_DisplayFormattedOutput>

		ILI9341_Draw_Text("FUNC", 10, 210, BLACK, 2, DARKCYAN);
 8000ed6:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8000eda:	9301      	str	r3, [sp, #4]
 8000edc:	2302      	movs	r3, #2
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	22d2      	movs	r2, #210	; 0xd2
 8000ee4:	210a      	movs	r1, #10
 8000ee6:	4828      	ldr	r0, [pc, #160]	; (8000f88 <DM_UpdateDisplay+0x14c>)
 8000ee8:	f00a f9d2 	bl	800b290 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("FREQ", 100, 210, BLACK, 2, DARKGREEN);
 8000eec:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000ef0:	9301      	str	r3, [sp, #4]
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	22d2      	movs	r2, #210	; 0xd2
 8000efa:	2164      	movs	r1, #100	; 0x64
 8000efc:	4823      	ldr	r0, [pc, #140]	; (8000f8c <DM_UpdateDisplay+0x150>)
 8000efe:	f00a f9c7 	bl	800b290 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("GAIN", 175, 210, BLACK, 2, YELLOW);
 8000f02:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000f06:	9301      	str	r3, [sp, #4]
 8000f08:	2302      	movs	r3, #2
 8000f0a:	9300      	str	r3, [sp, #0]
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	22d2      	movs	r2, #210	; 0xd2
 8000f10:	21af      	movs	r1, #175	; 0xaf
 8000f12:	481f      	ldr	r0, [pc, #124]	; (8000f90 <DM_UpdateDisplay+0x154>)
 8000f14:	f00a f9bc 	bl	800b290 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("BIAS", 260, 210, BLACK, 2, RED);
 8000f18:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000f1c:	9301      	str	r3, [sp, #4]
 8000f1e:	2302      	movs	r3, #2
 8000f20:	9300      	str	r3, [sp, #0]
 8000f22:	2300      	movs	r3, #0
 8000f24:	22d2      	movs	r2, #210	; 0xd2
 8000f26:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000f2a:	481a      	ldr	r0, [pc, #104]	; (8000f94 <DM_UpdateDisplay+0x158>)
 8000f2c:	f00a f9b0 	bl	800b290 <ILI9341_Draw_Text>
 8000f30:	e000      	b.n	8000f34 <DM_UpdateDisplay+0xf8>
				break;
 8000f32:	bf00      	nop
	}

#ifdef ENCODER_DEBUG
	char tim1tmp[5] = "";
 8000f34:	2300      	movs	r3, #0
 8000f36:	603b      	str	r3, [r7, #0]
 8000f38:	2300      	movs	r3, #0
 8000f3a:	713b      	strb	r3, [r7, #4]
	//snprintf(tim1tmp, sizeof(tim1tmp), "%lu", ENCODER_TIMER->CNT);
	if(DM_AddDigitPadding(ENCODER_TIMER->CNT, tim1tmp, sizeof(tim1tmp)) == 0)
 8000f3c:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <DM_UpdateDisplay+0x15c>)
 8000f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	4639      	mov	r1, r7
 8000f44:	2205      	movs	r2, #5
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 fad8 	bl	80014fc <DM_AddDigitPadding>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d10b      	bne.n	8000f6a <DM_UpdateDisplay+0x12e>
		ILI9341_Draw_Text(tim1tmp, 260, 180, BLACK, 2, RED);
 8000f52:	4638      	mov	r0, r7
 8000f54:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000f58:	9301      	str	r3, [sp, #4]
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	2300      	movs	r3, #0
 8000f60:	22b4      	movs	r2, #180	; 0xb4
 8000f62:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000f66:	f00a f993 	bl	800b290 <ILI9341_Draw_Text>
/*
	if((TIM1->SR & TIM_SR_IDXF) == TIM_SR_IDXF)
	{
		TIM1->SR &= ~(TIM_SR_IDXF);
	}*/
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20001414 	.word	0x20001414
 8000f78:	20001415 	.word	0x20001415
 8000f7c:	20001416 	.word	0x20001416
 8000f80:	0800e78c 	.word	0x0800e78c
 8000f84:	20001417 	.word	0x20001417
 8000f88:	0800e79c 	.word	0x0800e79c
 8000f8c:	0800e7a4 	.word	0x0800e7a4
 8000f90:	0800e7ac 	.word	0x0800e7ac
 8000f94:	0800e7b4 	.word	0x0800e7b4
 8000f98:	40012c00 	.word	0x40012c00

08000f9c <DM_ShowFuncSelectMenu>:
 *	@param None
 *	@retval None
 *
 */
void DM_ShowFuncSelectMenu(eFuncMenu_Status pValue)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
	eNextFuncMenuStatus = pValue;
 8000fa6:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <DM_ShowFuncSelectMenu+0x1c>)
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	7013      	strb	r3, [r2, #0]
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	20001414 	.word	0x20001414

08000fbc <_DrawFuncSelectMenu>:
 *	@param None
 *	@retval None
 *
 */
void _DrawFuncSelectMenu()
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("SELECT FUNCTION", 	10, 10, WHITE, 3, BLACK);
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	9301      	str	r3, [sp, #4]
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fce:	220a      	movs	r2, #10
 8000fd0:	210a      	movs	r1, #10
 8000fd2:	48b7      	ldr	r0, [pc, #732]	; (80012b0 <_DrawFuncSelectMenu+0x2f4>)
 8000fd4:	f00a f95c 	bl	800b290 <ILI9341_Draw_Text>

	Func_Preset_Encoder_Pos_t *pFuncPresetTmp = FuncO_GetFPresetObject();
 8000fd8:	f002 fc2e 	bl	8003838 <FuncO_GetFPresetObject>
 8000fdc:	6078      	str	r0, [r7, #4]
	if(pFuncPresetTmp)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	f000 81b6 	beq.w	8001352 <_DrawFuncSelectMenu+0x396>
	{
		switch(pFuncPresetTmp->func)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b05      	cmp	r3, #5
 8000fec:	f200 81b1 	bhi.w	8001352 <_DrawFuncSelectMenu+0x396>
 8000ff0:	a201      	add	r2, pc, #4	; (adr r2, 8000ff8 <_DrawFuncSelectMenu+0x3c>)
 8000ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff6:	bf00      	nop
 8000ff8:	08001011 	.word	0x08001011
 8000ffc:	08001097 	.word	0x08001097
 8001000:	0800111d 	.word	0x0800111d
 8001004:	080011a3 	.word	0x080011a3
 8001008:	08001229 	.word	0x08001229
 800100c:	080012cd 	.word	0x080012cd
		{
			case SINE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, WHITE, 2, BLACK);
 8001010:	2300      	movs	r3, #0
 8001012:	9301      	str	r3, [sp, #4]
 8001014:	2302      	movs	r3, #2
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800101c:	2232      	movs	r2, #50	; 0x32
 800101e:	210a      	movs	r1, #10
 8001020:	48a4      	ldr	r0, [pc, #656]	; (80012b4 <_DrawFuncSelectMenu+0x2f8>)
 8001022:	f00a f935 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8001026:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800102a:	9301      	str	r3, [sp, #4]
 800102c:	2302      	movs	r3, #2
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	2300      	movs	r3, #0
 8001032:	2246      	movs	r2, #70	; 0x46
 8001034:	210a      	movs	r1, #10
 8001036:	48a0      	ldr	r0, [pc, #640]	; (80012b8 <_DrawFuncSelectMenu+0x2fc>)
 8001038:	f00a f92a 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 800103c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001040:	9301      	str	r3, [sp, #4]
 8001042:	2302      	movs	r3, #2
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	2300      	movs	r3, #0
 8001048:	225a      	movs	r2, #90	; 0x5a
 800104a:	210a      	movs	r1, #10
 800104c:	489b      	ldr	r0, [pc, #620]	; (80012bc <_DrawFuncSelectMenu+0x300>)
 800104e:	f00a f91f 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8001052:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001056:	9301      	str	r3, [sp, #4]
 8001058:	2302      	movs	r3, #2
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	2300      	movs	r3, #0
 800105e:	226e      	movs	r2, #110	; 0x6e
 8001060:	210a      	movs	r1, #10
 8001062:	4897      	ldr	r0, [pc, #604]	; (80012c0 <_DrawFuncSelectMenu+0x304>)
 8001064:	f00a f914 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8001068:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800106c:	9301      	str	r3, [sp, #4]
 800106e:	2302      	movs	r3, #2
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	2300      	movs	r3, #0
 8001074:	2282      	movs	r2, #130	; 0x82
 8001076:	210a      	movs	r1, #10
 8001078:	4892      	ldr	r0, [pc, #584]	; (80012c4 <_DrawFuncSelectMenu+0x308>)
 800107a:	f00a f909 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 800107e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001082:	9301      	str	r3, [sp, #4]
 8001084:	2302      	movs	r3, #2
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	2300      	movs	r3, #0
 800108a:	2296      	movs	r2, #150	; 0x96
 800108c:	210a      	movs	r1, #10
 800108e:	488e      	ldr	r0, [pc, #568]	; (80012c8 <_DrawFuncSelectMenu+0x30c>)
 8001090:	f00a f8fe 	bl	800b290 <ILI9341_Draw_Text>
				break;
 8001094:	e15d      	b.n	8001352 <_DrawFuncSelectMenu+0x396>
			case SQUARE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8001096:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800109a:	9301      	str	r3, [sp, #4]
 800109c:	2302      	movs	r3, #2
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	2300      	movs	r3, #0
 80010a2:	2232      	movs	r2, #50	; 0x32
 80010a4:	210a      	movs	r1, #10
 80010a6:	4883      	ldr	r0, [pc, #524]	; (80012b4 <_DrawFuncSelectMenu+0x2f8>)
 80010a8:	f00a f8f2 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, WHITE, 2, BLACK);
 80010ac:	2300      	movs	r3, #0
 80010ae:	9301      	str	r3, [sp, #4]
 80010b0:	2302      	movs	r3, #2
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010b8:	2246      	movs	r2, #70	; 0x46
 80010ba:	210a      	movs	r1, #10
 80010bc:	487e      	ldr	r0, [pc, #504]	; (80012b8 <_DrawFuncSelectMenu+0x2fc>)
 80010be:	f00a f8e7 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 80010c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010c6:	9301      	str	r3, [sp, #4]
 80010c8:	2302      	movs	r3, #2
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	2300      	movs	r3, #0
 80010ce:	225a      	movs	r2, #90	; 0x5a
 80010d0:	210a      	movs	r1, #10
 80010d2:	487a      	ldr	r0, [pc, #488]	; (80012bc <_DrawFuncSelectMenu+0x300>)
 80010d4:	f00a f8dc 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 80010d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010dc:	9301      	str	r3, [sp, #4]
 80010de:	2302      	movs	r3, #2
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	2300      	movs	r3, #0
 80010e4:	226e      	movs	r2, #110	; 0x6e
 80010e6:	210a      	movs	r1, #10
 80010e8:	4875      	ldr	r0, [pc, #468]	; (80012c0 <_DrawFuncSelectMenu+0x304>)
 80010ea:	f00a f8d1 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 80010ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010f2:	9301      	str	r3, [sp, #4]
 80010f4:	2302      	movs	r3, #2
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	2300      	movs	r3, #0
 80010fa:	2282      	movs	r2, #130	; 0x82
 80010fc:	210a      	movs	r1, #10
 80010fe:	4871      	ldr	r0, [pc, #452]	; (80012c4 <_DrawFuncSelectMenu+0x308>)
 8001100:	f00a f8c6 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8001104:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001108:	9301      	str	r3, [sp, #4]
 800110a:	2302      	movs	r3, #2
 800110c:	9300      	str	r3, [sp, #0]
 800110e:	2300      	movs	r3, #0
 8001110:	2296      	movs	r2, #150	; 0x96
 8001112:	210a      	movs	r1, #10
 8001114:	486c      	ldr	r0, [pc, #432]	; (80012c8 <_DrawFuncSelectMenu+0x30c>)
 8001116:	f00a f8bb 	bl	800b290 <ILI9341_Draw_Text>
				break;
 800111a:	e11a      	b.n	8001352 <_DrawFuncSelectMenu+0x396>
			case SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 800111c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001120:	9301      	str	r3, [sp, #4]
 8001122:	2302      	movs	r3, #2
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	2300      	movs	r3, #0
 8001128:	2232      	movs	r2, #50	; 0x32
 800112a:	210a      	movs	r1, #10
 800112c:	4861      	ldr	r0, [pc, #388]	; (80012b4 <_DrawFuncSelectMenu+0x2f8>)
 800112e:	f00a f8af 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8001132:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001136:	9301      	str	r3, [sp, #4]
 8001138:	2302      	movs	r3, #2
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	2300      	movs	r3, #0
 800113e:	2246      	movs	r2, #70	; 0x46
 8001140:	210a      	movs	r1, #10
 8001142:	485d      	ldr	r0, [pc, #372]	; (80012b8 <_DrawFuncSelectMenu+0x2fc>)
 8001144:	f00a f8a4 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, WHITE, 2, BLACK);
 8001148:	2300      	movs	r3, #0
 800114a:	9301      	str	r3, [sp, #4]
 800114c:	2302      	movs	r3, #2
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001154:	225a      	movs	r2, #90	; 0x5a
 8001156:	210a      	movs	r1, #10
 8001158:	4858      	ldr	r0, [pc, #352]	; (80012bc <_DrawFuncSelectMenu+0x300>)
 800115a:	f00a f899 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 800115e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001162:	9301      	str	r3, [sp, #4]
 8001164:	2302      	movs	r3, #2
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	2300      	movs	r3, #0
 800116a:	226e      	movs	r2, #110	; 0x6e
 800116c:	210a      	movs	r1, #10
 800116e:	4854      	ldr	r0, [pc, #336]	; (80012c0 <_DrawFuncSelectMenu+0x304>)
 8001170:	f00a f88e 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8001174:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001178:	9301      	str	r3, [sp, #4]
 800117a:	2302      	movs	r3, #2
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	2300      	movs	r3, #0
 8001180:	2282      	movs	r2, #130	; 0x82
 8001182:	210a      	movs	r1, #10
 8001184:	484f      	ldr	r0, [pc, #316]	; (80012c4 <_DrawFuncSelectMenu+0x308>)
 8001186:	f00a f883 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 800118a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800118e:	9301      	str	r3, [sp, #4]
 8001190:	2302      	movs	r3, #2
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2300      	movs	r3, #0
 8001196:	2296      	movs	r2, #150	; 0x96
 8001198:	210a      	movs	r1, #10
 800119a:	484b      	ldr	r0, [pc, #300]	; (80012c8 <_DrawFuncSelectMenu+0x30c>)
 800119c:	f00a f878 	bl	800b290 <ILI9341_Draw_Text>
				break;
 80011a0:	e0d7      	b.n	8001352 <_DrawFuncSelectMenu+0x396>
			case REV_SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 80011a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011a6:	9301      	str	r3, [sp, #4]
 80011a8:	2302      	movs	r3, #2
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	2300      	movs	r3, #0
 80011ae:	2232      	movs	r2, #50	; 0x32
 80011b0:	210a      	movs	r1, #10
 80011b2:	4840      	ldr	r0, [pc, #256]	; (80012b4 <_DrawFuncSelectMenu+0x2f8>)
 80011b4:	f00a f86c 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 80011b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011bc:	9301      	str	r3, [sp, #4]
 80011be:	2302      	movs	r3, #2
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	2300      	movs	r3, #0
 80011c4:	2246      	movs	r2, #70	; 0x46
 80011c6:	210a      	movs	r1, #10
 80011c8:	483b      	ldr	r0, [pc, #236]	; (80012b8 <_DrawFuncSelectMenu+0x2fc>)
 80011ca:	f00a f861 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 80011ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011d2:	9301      	str	r3, [sp, #4]
 80011d4:	2302      	movs	r3, #2
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	2300      	movs	r3, #0
 80011da:	225a      	movs	r2, #90	; 0x5a
 80011dc:	210a      	movs	r1, #10
 80011de:	4837      	ldr	r0, [pc, #220]	; (80012bc <_DrawFuncSelectMenu+0x300>)
 80011e0:	f00a f856 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, WHITE, 2, BLACK);
 80011e4:	2300      	movs	r3, #0
 80011e6:	9301      	str	r3, [sp, #4]
 80011e8:	2302      	movs	r3, #2
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011f0:	226e      	movs	r2, #110	; 0x6e
 80011f2:	210a      	movs	r1, #10
 80011f4:	4832      	ldr	r0, [pc, #200]	; (80012c0 <_DrawFuncSelectMenu+0x304>)
 80011f6:	f00a f84b 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 80011fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011fe:	9301      	str	r3, [sp, #4]
 8001200:	2302      	movs	r3, #2
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	2300      	movs	r3, #0
 8001206:	2282      	movs	r2, #130	; 0x82
 8001208:	210a      	movs	r1, #10
 800120a:	482e      	ldr	r0, [pc, #184]	; (80012c4 <_DrawFuncSelectMenu+0x308>)
 800120c:	f00a f840 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8001210:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001214:	9301      	str	r3, [sp, #4]
 8001216:	2302      	movs	r3, #2
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	2300      	movs	r3, #0
 800121c:	2296      	movs	r2, #150	; 0x96
 800121e:	210a      	movs	r1, #10
 8001220:	4829      	ldr	r0, [pc, #164]	; (80012c8 <_DrawFuncSelectMenu+0x30c>)
 8001222:	f00a f835 	bl	800b290 <ILI9341_Draw_Text>
				break;
 8001226:	e094      	b.n	8001352 <_DrawFuncSelectMenu+0x396>
			case TRIANGLE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8001228:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800122c:	9301      	str	r3, [sp, #4]
 800122e:	2302      	movs	r3, #2
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	2300      	movs	r3, #0
 8001234:	2232      	movs	r2, #50	; 0x32
 8001236:	210a      	movs	r1, #10
 8001238:	481e      	ldr	r0, [pc, #120]	; (80012b4 <_DrawFuncSelectMenu+0x2f8>)
 800123a:	f00a f829 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 800123e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001242:	9301      	str	r3, [sp, #4]
 8001244:	2302      	movs	r3, #2
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	2300      	movs	r3, #0
 800124a:	2246      	movs	r2, #70	; 0x46
 800124c:	210a      	movs	r1, #10
 800124e:	481a      	ldr	r0, [pc, #104]	; (80012b8 <_DrawFuncSelectMenu+0x2fc>)
 8001250:	f00a f81e 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8001254:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001258:	9301      	str	r3, [sp, #4]
 800125a:	2302      	movs	r3, #2
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	2300      	movs	r3, #0
 8001260:	225a      	movs	r2, #90	; 0x5a
 8001262:	210a      	movs	r1, #10
 8001264:	4815      	ldr	r0, [pc, #84]	; (80012bc <_DrawFuncSelectMenu+0x300>)
 8001266:	f00a f813 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 800126a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800126e:	9301      	str	r3, [sp, #4]
 8001270:	2302      	movs	r3, #2
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	2300      	movs	r3, #0
 8001276:	226e      	movs	r2, #110	; 0x6e
 8001278:	210a      	movs	r1, #10
 800127a:	4811      	ldr	r0, [pc, #68]	; (80012c0 <_DrawFuncSelectMenu+0x304>)
 800127c:	f00a f808 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, WHITE, 2, BLACK);
 8001280:	2300      	movs	r3, #0
 8001282:	9301      	str	r3, [sp, #4]
 8001284:	2302      	movs	r3, #2
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800128c:	2282      	movs	r2, #130	; 0x82
 800128e:	210a      	movs	r1, #10
 8001290:	480c      	ldr	r0, [pc, #48]	; (80012c4 <_DrawFuncSelectMenu+0x308>)
 8001292:	f009 fffd 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8001296:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800129a:	9301      	str	r3, [sp, #4]
 800129c:	2302      	movs	r3, #2
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	2300      	movs	r3, #0
 80012a2:	2296      	movs	r2, #150	; 0x96
 80012a4:	210a      	movs	r1, #10
 80012a6:	4808      	ldr	r0, [pc, #32]	; (80012c8 <_DrawFuncSelectMenu+0x30c>)
 80012a8:	f009 fff2 	bl	800b290 <ILI9341_Draw_Text>
				break;
 80012ac:	e051      	b.n	8001352 <_DrawFuncSelectMenu+0x396>
 80012ae:	bf00      	nop
 80012b0:	0800e7bc 	.word	0x0800e7bc
 80012b4:	0800e7cc 	.word	0x0800e7cc
 80012b8:	0800e7d4 	.word	0x0800e7d4
 80012bc:	0800e7e0 	.word	0x0800e7e0
 80012c0:	0800e7e8 	.word	0x0800e7e8
 80012c4:	0800e7f4 	.word	0x0800e7f4
 80012c8:	0800e800 	.word	0x0800e800
			case IMPULSE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 80012cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012d0:	9301      	str	r3, [sp, #4]
 80012d2:	2302      	movs	r3, #2
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	2300      	movs	r3, #0
 80012d8:	2232      	movs	r2, #50	; 0x32
 80012da:	210a      	movs	r1, #10
 80012dc:	481f      	ldr	r0, [pc, #124]	; (800135c <_DrawFuncSelectMenu+0x3a0>)
 80012de:	f009 ffd7 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 80012e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012e6:	9301      	str	r3, [sp, #4]
 80012e8:	2302      	movs	r3, #2
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	2300      	movs	r3, #0
 80012ee:	2246      	movs	r2, #70	; 0x46
 80012f0:	210a      	movs	r1, #10
 80012f2:	481b      	ldr	r0, [pc, #108]	; (8001360 <_DrawFuncSelectMenu+0x3a4>)
 80012f4:	f009 ffcc 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 80012f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012fc:	9301      	str	r3, [sp, #4]
 80012fe:	2302      	movs	r3, #2
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	2300      	movs	r3, #0
 8001304:	225a      	movs	r2, #90	; 0x5a
 8001306:	210a      	movs	r1, #10
 8001308:	4816      	ldr	r0, [pc, #88]	; (8001364 <_DrawFuncSelectMenu+0x3a8>)
 800130a:	f009 ffc1 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 800130e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001312:	9301      	str	r3, [sp, #4]
 8001314:	2302      	movs	r3, #2
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	2300      	movs	r3, #0
 800131a:	226e      	movs	r2, #110	; 0x6e
 800131c:	210a      	movs	r1, #10
 800131e:	4812      	ldr	r0, [pc, #72]	; (8001368 <_DrawFuncSelectMenu+0x3ac>)
 8001320:	f009 ffb6 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8001324:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001328:	9301      	str	r3, [sp, #4]
 800132a:	2302      	movs	r3, #2
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	2300      	movs	r3, #0
 8001330:	2282      	movs	r2, #130	; 0x82
 8001332:	210a      	movs	r1, #10
 8001334:	480d      	ldr	r0, [pc, #52]	; (800136c <_DrawFuncSelectMenu+0x3b0>)
 8001336:	f009 ffab 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, WHITE, 2, BLACK);
 800133a:	2300      	movs	r3, #0
 800133c:	9301      	str	r3, [sp, #4]
 800133e:	2302      	movs	r3, #2
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001346:	2296      	movs	r2, #150	; 0x96
 8001348:	210a      	movs	r1, #10
 800134a:	4809      	ldr	r0, [pc, #36]	; (8001370 <_DrawFuncSelectMenu+0x3b4>)
 800134c:	f009 ffa0 	bl	800b290 <ILI9341_Draw_Text>
				break;
 8001350:	bf00      	nop

		}
	}


}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	0800e7cc 	.word	0x0800e7cc
 8001360:	0800e7d4 	.word	0x0800e7d4
 8001364:	0800e7e0 	.word	0x0800e7e0
 8001368:	0800e7e8 	.word	0x0800e7e8
 800136c:	0800e7f4 	.word	0x0800e7f4
 8001370:	0800e800 	.word	0x0800e800

08001374 <DM_ShowGainSelectMenu>:
 *	@param None
 *	@retval None
 *
 */
void DM_ShowGainSelectMenu(eGainMenu_Status pValue)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
	eNextGainMenuStatus = pValue;
 800137e:	4a04      	ldr	r2, [pc, #16]	; (8001390 <DM_ShowGainSelectMenu+0x1c>)
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	7013      	strb	r3, [r2, #0]
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	20001415 	.word	0x20001415

08001394 <_DrawGainSelectMenu>:
 *	@param None
 *	@retval None
 *
 */
void _DrawGainSelectMenu()
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("ADJUST GAIN", 	40, 10, WHITE, 3, BLACK);
 800139a:	2300      	movs	r3, #0
 800139c:	9301      	str	r3, [sp, #4]
 800139e:	2303      	movs	r3, #3
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013a6:	220a      	movs	r2, #10
 80013a8:	2128      	movs	r1, #40	; 0x28
 80013aa:	4803      	ldr	r0, [pc, #12]	; (80013b8 <_DrawGainSelectMenu+0x24>)
 80013ac:	f009 ff70 	bl	800b290 <ILI9341_Draw_Text>
	char gain[4] = "";
	//snprintf(gain, sizeof(gain), "%u", GO_GetOutputGain());
	if(DM_AddDigitPadding((uint16_t)GO_GetOutputGain(), gain, sizeof(gain)) == 0)
		ILI9341_Draw_Text(gain, 250, 150, WHITE, 1, BLACK);
*/
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	0800e808 	.word	0x0800e808

080013bc <DM_ShowFreqMenu>:
 *	@param None
 *	@retval None
 *
 */
void DM_ShowFreqMenu(eFreqMenu_Status pValue)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	71fb      	strb	r3, [r7, #7]
	eNextFreqMenuStatus = pValue;
 80013c6:	4a04      	ldr	r2, [pc, #16]	; (80013d8 <DM_ShowFreqMenu+0x1c>)
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	7013      	strb	r3, [r2, #0]
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	20001416 	.word	0x20001416

080013dc <DM_ShowBiasSelectMenu>:
 *	@param None
 *	@retval None
 *
 */
void DM_ShowBiasSelectMenu(eBiasMenu_Status pValue)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
	eNextBiasMenuStatus = pValue;
 80013e6:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <DM_ShowBiasSelectMenu+0x1c>)
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	7013      	strb	r3, [r2, #0]
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	20001417 	.word	0x20001417

080013fc <_DrawBiasSelectMenu>:
 *	@param None
 *	@retval None
 *
 */
void _DrawBiasSelectMenu()
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("ADJUST DC BIAS", 	30, 10, WHITE, 3, BLACK);
 8001402:	2300      	movs	r3, #0
 8001404:	9301      	str	r3, [sp, #4]
 8001406:	2303      	movs	r3, #3
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800140e:	220a      	movs	r2, #10
 8001410:	211e      	movs	r1, #30
 8001412:	4803      	ldr	r0, [pc, #12]	; (8001420 <_DrawBiasSelectMenu+0x24>)
 8001414:	f009 ff3c 	bl	800b290 <ILI9341_Draw_Text>
			char symbol[2] = "-\0";
			ILI9341_Draw_Text(strcat(symbol, bias), 250, 150, WHITE, 1, BLACK);
		}
	}
*/
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	0800e814 	.word	0x0800e814

08001424 <DM_DigitCount>:
 *	@param None
 *	@retval None
 *
 */
int DM_DigitCount(int num)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	if(num < 10)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b09      	cmp	r3, #9
 8001430:	dc01      	bgt.n	8001436 <DM_DigitCount+0x12>
		return 1;
 8001432:	2301      	movs	r3, #1
 8001434:	e018      	b.n	8001468 <DM_DigitCount+0x44>
	if(num < 100)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2b63      	cmp	r3, #99	; 0x63
 800143a:	dc01      	bgt.n	8001440 <DM_DigitCount+0x1c>
		return 2;
 800143c:	2302      	movs	r3, #2
 800143e:	e013      	b.n	8001468 <DM_DigitCount+0x44>
	if(num < 1000)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001446:	da01      	bge.n	800144c <DM_DigitCount+0x28>
		return 3;
 8001448:	2303      	movs	r3, #3
 800144a:	e00d      	b.n	8001468 <DM_DigitCount+0x44>
	if(num < 10000)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001452:	4293      	cmp	r3, r2
 8001454:	dc01      	bgt.n	800145a <DM_DigitCount+0x36>
		return 4;
 8001456:	2304      	movs	r3, #4
 8001458:	e006      	b.n	8001468 <DM_DigitCount+0x44>
	if(num < 100000)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a05      	ldr	r2, [pc, #20]	; (8001474 <DM_DigitCount+0x50>)
 800145e:	4293      	cmp	r3, r2
 8001460:	dc01      	bgt.n	8001466 <DM_DigitCount+0x42>
		return 5;
 8001462:	2305      	movs	r3, #5
 8001464:	e000      	b.n	8001468 <DM_DigitCount+0x44>
	else
		return 0;
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	0001869f 	.word	0x0001869f

08001478 <DM_RefreshBackgroundLayout>:
 *	@param None
 *	@retval None
 *
 */
void DM_RefreshBackgroundLayout()
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af04      	add	r7, sp, #16


	//ILI9341_Fill_Screen(WHITE);
	ILI9341_FillScreenGradient();
 800147e:	f009 ff35 	bl	800b2ec <ILI9341_FillScreenGradient>

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[0],
 8001482:	4b1d      	ldr	r3, [pc, #116]	; (80014f8 <DM_RefreshBackgroundLayout+0x80>)
 8001484:	8818      	ldrh	r0, [r3, #0]
 8001486:	2300      	movs	r3, #0
 8001488:	9302      	str	r3, [sp, #8]
 800148a:	2302      	movs	r3, #2
 800148c:	9301      	str	r3, [sp, #4]
 800148e:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	2332      	movs	r3, #50	; 0x32
 8001496:	2250      	movs	r2, #80	; 0x50
 8001498:	21c8      	movs	r1, #200	; 0xc8
 800149a:	f009 fd8f 	bl	800afbc <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKCYAN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[1],
 800149e:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <DM_RefreshBackgroundLayout+0x80>)
 80014a0:	8858      	ldrh	r0, [r3, #2]
 80014a2:	2300      	movs	r3, #0
 80014a4:	9302      	str	r3, [sp, #8]
 80014a6:	2302      	movs	r3, #2
 80014a8:	9301      	str	r3, [sp, #4]
 80014aa:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	2332      	movs	r3, #50	; 0x32
 80014b2:	2250      	movs	r2, #80	; 0x50
 80014b4:	21c8      	movs	r1, #200	; 0xc8
 80014b6:	f009 fd81 	bl	800afbc <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKGREEN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[2],
 80014ba:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <DM_RefreshBackgroundLayout+0x80>)
 80014bc:	8898      	ldrh	r0, [r3, #4]
 80014be:	2300      	movs	r3, #0
 80014c0:	9302      	str	r3, [sp, #8]
 80014c2:	2302      	movs	r3, #2
 80014c4:	9301      	str	r3, [sp, #4]
 80014c6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	2332      	movs	r3, #50	; 0x32
 80014ce:	2250      	movs	r2, #80	; 0x50
 80014d0:	21c8      	movs	r1, #200	; 0xc8
 80014d2:	f009 fd73 	bl	800afbc <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													YELLOW,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[3],
 80014d6:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <DM_RefreshBackgroundLayout+0x80>)
 80014d8:	88d8      	ldrh	r0, [r3, #6]
 80014da:	2300      	movs	r3, #0
 80014dc:	9302      	str	r3, [sp, #8]
 80014de:	2302      	movs	r3, #2
 80014e0:	9301      	str	r3, [sp, #4]
 80014e2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	2332      	movs	r3, #50	; 0x32
 80014ea:	2250      	movs	r2, #80	; 0x50
 80014ec:	21c8      	movs	r1, #200	; 0xc8
 80014ee:	f009 fd65 	bl	800afbc <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_WIDTH,
													BTN_HEIGHT,
													RED,
													BORDER_SIZE,
													BLACK);
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000000 	.word	0x20000000

080014fc <DM_AddDigitPadding>:
 *			1 if buflen is invalid size
 *			2 unknown error
 *
 */
int DM_AddDigitPadding(uint16_t num, char *buffer, uint16_t buflen)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	6039      	str	r1, [r7, #0]
 8001506:	80fb      	strh	r3, [r7, #6]
 8001508:	4613      	mov	r3, r2
 800150a:	80bb      	strh	r3, [r7, #4]
	if((buflen < 1) || (buflen > 6))
 800150c:	88bb      	ldrh	r3, [r7, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d002      	beq.n	8001518 <DM_AddDigitPadding+0x1c>
 8001512:	88bb      	ldrh	r3, [r7, #4]
 8001514:	2b06      	cmp	r3, #6
 8001516:	d901      	bls.n	800151c <DM_AddDigitPadding+0x20>
		return 1;
 8001518:	2301      	movs	r3, #1
 800151a:	e048      	b.n	80015ae <DM_AddDigitPadding+0xb2>

	//char* tmpbuf = malloc(sizeof(buffer) * buflen);

	uint16_t tmpcnt = num;
 800151c:	88fb      	ldrh	r3, [r7, #6]
 800151e:	81fb      	strh	r3, [r7, #14]
	switch(DM_DigitCount(tmpcnt))
 8001520:	89fb      	ldrh	r3, [r7, #14]
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff ff7e 	bl	8001424 <DM_DigitCount>
 8001528:	4603      	mov	r3, r0
 800152a:	2b05      	cmp	r3, #5
 800152c:	d83e      	bhi.n	80015ac <DM_AddDigitPadding+0xb0>
 800152e:	a201      	add	r2, pc, #4	; (adr r2, 8001534 <DM_AddDigitPadding+0x38>)
 8001530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001534:	0800154d 	.word	0x0800154d
 8001538:	0800155d 	.word	0x0800155d
 800153c:	0800156d 	.word	0x0800156d
 8001540:	0800157d 	.word	0x0800157d
 8001544:	0800158d 	.word	0x0800158d
 8001548:	0800159d 	.word	0x0800159d
	{

		case 0:
			snprintf(buffer,buflen, "     ");
 800154c:	88bb      	ldrh	r3, [r7, #4]
 800154e:	4a1a      	ldr	r2, [pc, #104]	; (80015b8 <DM_AddDigitPadding+0xbc>)
 8001550:	4619      	mov	r1, r3
 8001552:	6838      	ldr	r0, [r7, #0]
 8001554:	f00b f98e 	bl	800c874 <sniprintf>
			return 0;
 8001558:	2300      	movs	r3, #0
 800155a:	e028      	b.n	80015ae <DM_AddDigitPadding+0xb2>
		case 1:
			snprintf(buffer, buflen, "%u    ", tmpcnt);
 800155c:	88b9      	ldrh	r1, [r7, #4]
 800155e:	89fb      	ldrh	r3, [r7, #14]
 8001560:	4a16      	ldr	r2, [pc, #88]	; (80015bc <DM_AddDigitPadding+0xc0>)
 8001562:	6838      	ldr	r0, [r7, #0]
 8001564:	f00b f986 	bl	800c874 <sniprintf>
			return 0;
 8001568:	2300      	movs	r3, #0
 800156a:	e020      	b.n	80015ae <DM_AddDigitPadding+0xb2>
		case 2:
			snprintf(buffer, buflen, "%u   ", tmpcnt);
 800156c:	88b9      	ldrh	r1, [r7, #4]
 800156e:	89fb      	ldrh	r3, [r7, #14]
 8001570:	4a13      	ldr	r2, [pc, #76]	; (80015c0 <DM_AddDigitPadding+0xc4>)
 8001572:	6838      	ldr	r0, [r7, #0]
 8001574:	f00b f97e 	bl	800c874 <sniprintf>
			return 0;
 8001578:	2300      	movs	r3, #0
 800157a:	e018      	b.n	80015ae <DM_AddDigitPadding+0xb2>
		case 3:
			snprintf(buffer, buflen, "%u  ", tmpcnt);
 800157c:	88b9      	ldrh	r1, [r7, #4]
 800157e:	89fb      	ldrh	r3, [r7, #14]
 8001580:	4a10      	ldr	r2, [pc, #64]	; (80015c4 <DM_AddDigitPadding+0xc8>)
 8001582:	6838      	ldr	r0, [r7, #0]
 8001584:	f00b f976 	bl	800c874 <sniprintf>
			return 0;
 8001588:	2300      	movs	r3, #0
 800158a:	e010      	b.n	80015ae <DM_AddDigitPadding+0xb2>
		case 4:
			snprintf(buffer, buflen, "%u ", tmpcnt);
 800158c:	88b9      	ldrh	r1, [r7, #4]
 800158e:	89fb      	ldrh	r3, [r7, #14]
 8001590:	4a0d      	ldr	r2, [pc, #52]	; (80015c8 <DM_AddDigitPadding+0xcc>)
 8001592:	6838      	ldr	r0, [r7, #0]
 8001594:	f00b f96e 	bl	800c874 <sniprintf>
			return 0;
 8001598:	2300      	movs	r3, #0
 800159a:	e008      	b.n	80015ae <DM_AddDigitPadding+0xb2>
		case 5:
			snprintf(buffer, buflen, "%u", tmpcnt);
 800159c:	88b9      	ldrh	r1, [r7, #4]
 800159e:	89fb      	ldrh	r3, [r7, #14]
 80015a0:	4a0a      	ldr	r2, [pc, #40]	; (80015cc <DM_AddDigitPadding+0xd0>)
 80015a2:	6838      	ldr	r0, [r7, #0]
 80015a4:	f00b f966 	bl	800c874 <sniprintf>
			return 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	e000      	b.n	80015ae <DM_AddDigitPadding+0xb2>

	}

	return 2;
 80015ac:	2302      	movs	r3, #2


}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	0800e85c 	.word	0x0800e85c
 80015bc:	0800e864 	.word	0x0800e864
 80015c0:	0800e86c 	.word	0x0800e86c
 80015c4:	0800e874 	.word	0x0800e874
 80015c8:	0800e87c 	.word	0x0800e87c
 80015cc:	0800e880 	.word	0x0800e880

080015d0 <FreqMenu_DrawFreqMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawFreqMainMenu()
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af02      	add	r7, sp, #8
	// main
	ILI9341_Draw_Text("Select an option below", 	30, 150, BLACK, 2, WHITE);
 80015d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015da:	9301      	str	r3, [sp, #4]
 80015dc:	2302      	movs	r3, #2
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	2300      	movs	r3, #0
 80015e2:	2296      	movs	r2, #150	; 0x96
 80015e4:	211e      	movs	r1, #30
 80015e6:	4813      	ldr	r0, [pc, #76]	; (8001634 <FreqMenu_DrawFreqMainMenu+0x64>)
 80015e8:	f009 fe52 	bl	800b290 <ILI9341_Draw_Text>

	// buttons
	ILI9341_Draw_Text("PRESET", 5, 210, BLACK, 2, DARKCYAN);
 80015ec:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80015f0:	9301      	str	r3, [sp, #4]
 80015f2:	2302      	movs	r3, #2
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	2300      	movs	r3, #0
 80015f8:	22d2      	movs	r2, #210	; 0xd2
 80015fa:	2105      	movs	r1, #5
 80015fc:	480e      	ldr	r0, [pc, #56]	; (8001638 <FreqMenu_DrawFreqMainMenu+0x68>)
 80015fe:	f009 fe47 	bl	800b290 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("ADJUST", 87, 210, BLACK, 2, DARKGREEN);
 8001602:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001606:	9301      	str	r3, [sp, #4]
 8001608:	2302      	movs	r3, #2
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	2300      	movs	r3, #0
 800160e:	22d2      	movs	r2, #210	; 0xd2
 8001610:	2157      	movs	r1, #87	; 0x57
 8001612:	480a      	ldr	r0, [pc, #40]	; (800163c <FreqMenu_DrawFreqMainMenu+0x6c>)
 8001614:	f009 fe3c 	bl	800b290 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SWEEP", 174, 210, BLACK, 2, YELLOW);
 8001618:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800161c:	9301      	str	r3, [sp, #4]
 800161e:	2302      	movs	r3, #2
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	2300      	movs	r3, #0
 8001624:	22d2      	movs	r2, #210	; 0xd2
 8001626:	21ae      	movs	r1, #174	; 0xae
 8001628:	4805      	ldr	r0, [pc, #20]	; (8001640 <FreqMenu_DrawFreqMainMenu+0x70>)
 800162a:	f009 fe31 	bl	800b290 <ILI9341_Draw_Text>
	//ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
}
 800162e:	bf00      	nop
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	0800e884 	.word	0x0800e884
 8001638:	0800e89c 	.word	0x0800e89c
 800163c:	0800e8a4 	.word	0x0800e8a4
 8001640:	0800e8ac 	.word	0x0800e8ac

08001644 <FreqMenu_DrawFreqPresetMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawFreqPresetMenu()
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af02      	add	r7, sp, #8

	uint8_t menu_pos_y1 = 50;
 800164a:	2332      	movs	r3, #50	; 0x32
 800164c:	73fb      	strb	r3, [r7, #15]
	uint8_t menu_pos_y2 = 70;
 800164e:	2346      	movs	r3, #70	; 0x46
 8001650:	73bb      	strb	r3, [r7, #14]
	uint8_t menu_pos_y3 = 90;
 8001652:	235a      	movs	r3, #90	; 0x5a
 8001654:	737b      	strb	r3, [r7, #13]
	uint8_t menu_pos_y4 = 110;
 8001656:	236e      	movs	r3, #110	; 0x6e
 8001658:	733b      	strb	r3, [r7, #12]
	uint8_t menu_pos_y5 = 130;
 800165a:	2382      	movs	r3, #130	; 0x82
 800165c:	72fb      	strb	r3, [r7, #11]
	uint8_t menu_pos_y6 = 150;
 800165e:	2396      	movs	r3, #150	; 0x96
 8001660:	72bb      	strb	r3, [r7, #10]
	uint8_t menu_pos_y7 = 170;
 8001662:	23aa      	movs	r3, #170	; 0xaa
 8001664:	727b      	strb	r3, [r7, #9]
	Freq_Preset_Encoder_Pos_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8001666:	f001 ffb1 	bl	80035cc <FreqO_GetFPresetObject>
 800166a:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	f001 823f 	beq.w	8002af2 <FreqMenu_DrawFreqPresetMenu+0x14ae>
	{
		switch(pFreqPresetTmp->hertz)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f240 22ee 	movw	r2, #750	; 0x2ee
 800167c:	4293      	cmp	r3, r2
 800167e:	f000 8499 	beq.w	8001fb4 <FreqMenu_DrawFreqPresetMenu+0x970>
 8001682:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001686:	4293      	cmp	r3, r2
 8001688:	d817      	bhi.n	80016ba <FreqMenu_DrawFreqPresetMenu+0x76>
 800168a:	2b32      	cmp	r3, #50	; 0x32
 800168c:	f000 81b2 	beq.w	80019f4 <FreqMenu_DrawFreqPresetMenu+0x3b0>
 8001690:	2b32      	cmp	r3, #50	; 0x32
 8001692:	d806      	bhi.n	80016a2 <FreqMenu_DrawFreqPresetMenu+0x5e>
 8001694:	2b01      	cmp	r3, #1
 8001696:	d038      	beq.n	800170a <FreqMenu_DrawFreqPresetMenu+0xc6>
 8001698:	2b0a      	cmp	r3, #10
 800169a:	f000 80e0 	beq.w	800185e <FreqMenu_DrawFreqPresetMenu+0x21a>
	else
	{
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		10, 180, RED, 1, BLACK);
	}

}
 800169e:	f001 ba34 	b.w	8002b0a <FreqMenu_DrawFreqPresetMenu+0x14c6>
		switch(pFreqPresetTmp->hertz)
 80016a2:	2bfa      	cmp	r3, #250	; 0xfa
 80016a4:	f000 8316 	beq.w	8001cd4 <FreqMenu_DrawFreqPresetMenu+0x690>
 80016a8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016ac:	f000 83bc 	beq.w	8001e28 <FreqMenu_DrawFreqPresetMenu+0x7e4>
 80016b0:	2b64      	cmp	r3, #100	; 0x64
 80016b2:	f000 8249 	beq.w	8001b48 <FreqMenu_DrawFreqPresetMenu+0x504>
}
 80016b6:	f001 ba28 	b.w	8002b0a <FreqMenu_DrawFreqPresetMenu+0x14c6>
		switch(pFreqPresetTmp->hertz)
 80016ba:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80016be:	4293      	cmp	r3, r2
 80016c0:	f000 8756 	beq.w	8002570 <FreqMenu_DrawFreqPresetMenu+0xf2c>
 80016c4:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d80f      	bhi.n	80016ec <FreqMenu_DrawFreqPresetMenu+0xa8>
 80016cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d0:	4293      	cmp	r3, r2
 80016d2:	f000 85df 	beq.w	8002294 <FreqMenu_DrawFreqPresetMenu+0xc50>
 80016d6:	f242 7210 	movw	r2, #10000	; 0x2710
 80016da:	4293      	cmp	r3, r2
 80016dc:	f000 8683 	beq.w	80023e6 <FreqMenu_DrawFreqPresetMenu+0xda2>
 80016e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016e4:	f000 8510 	beq.w	8002108 <FreqMenu_DrawFreqPresetMenu+0xac4>
}
 80016e8:	f001 ba0f 	b.w	8002b0a <FreqMenu_DrawFreqPresetMenu+0x14c6>
		switch(pFreqPresetTmp->hertz)
 80016ec:	4ab1      	ldr	r2, [pc, #708]	; (80019b4 <FreqMenu_DrawFreqPresetMenu+0x370>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	f001 80ac 	beq.w	800284c <FreqMenu_DrawFreqPresetMenu+0x1208>
 80016f4:	4ab0      	ldr	r2, [pc, #704]	; (80019b8 <FreqMenu_DrawFreqPresetMenu+0x374>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	f001 8151 	beq.w	800299e <FreqMenu_DrawFreqPresetMenu+0x135a>
 80016fc:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001700:	4293      	cmp	r3, r2
 8001702:	f000 87de 	beq.w	80026c2 <FreqMenu_DrawFreqPresetMenu+0x107e>
}
 8001706:	f001 ba00 	b.w	8002b0a <FreqMenu_DrawFreqPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, WHITE, 2, BLACK);
 800170a:	7bfb      	ldrb	r3, [r7, #15]
 800170c:	b29a      	uxth	r2, r3
 800170e:	2300      	movs	r3, #0
 8001710:	9301      	str	r3, [sp, #4]
 8001712:	2302      	movs	r3, #2
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800171a:	210a      	movs	r1, #10
 800171c:	48a7      	ldr	r0, [pc, #668]	; (80019bc <FreqMenu_DrawFreqPresetMenu+0x378>)
 800171e:	f009 fdb7 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001722:	7bbb      	ldrb	r3, [r7, #14]
 8001724:	b29a      	uxth	r2, r3
 8001726:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800172a:	9301      	str	r3, [sp, #4]
 800172c:	2302      	movs	r3, #2
 800172e:	9300      	str	r3, [sp, #0]
 8001730:	2300      	movs	r3, #0
 8001732:	210a      	movs	r1, #10
 8001734:	48a2      	ldr	r0, [pc, #648]	; (80019c0 <FreqMenu_DrawFreqPresetMenu+0x37c>)
 8001736:	f009 fdab 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 800173a:	7b7b      	ldrb	r3, [r7, #13]
 800173c:	b29a      	uxth	r2, r3
 800173e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001742:	9301      	str	r3, [sp, #4]
 8001744:	2302      	movs	r3, #2
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	2300      	movs	r3, #0
 800174a:	210a      	movs	r1, #10
 800174c:	489d      	ldr	r0, [pc, #628]	; (80019c4 <FreqMenu_DrawFreqPresetMenu+0x380>)
 800174e:	f009 fd9f 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001752:	7b3b      	ldrb	r3, [r7, #12]
 8001754:	b29a      	uxth	r2, r3
 8001756:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800175a:	9301      	str	r3, [sp, #4]
 800175c:	2302      	movs	r3, #2
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	2300      	movs	r3, #0
 8001762:	210a      	movs	r1, #10
 8001764:	4898      	ldr	r0, [pc, #608]	; (80019c8 <FreqMenu_DrawFreqPresetMenu+0x384>)
 8001766:	f009 fd93 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 800176a:	7afb      	ldrb	r3, [r7, #11]
 800176c:	b29a      	uxth	r2, r3
 800176e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001772:	9301      	str	r3, [sp, #4]
 8001774:	2302      	movs	r3, #2
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	2300      	movs	r3, #0
 800177a:	210a      	movs	r1, #10
 800177c:	4893      	ldr	r0, [pc, #588]	; (80019cc <FreqMenu_DrawFreqPresetMenu+0x388>)
 800177e:	f009 fd87 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001782:	7abb      	ldrb	r3, [r7, #10]
 8001784:	b29a      	uxth	r2, r3
 8001786:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800178a:	9301      	str	r3, [sp, #4]
 800178c:	2302      	movs	r3, #2
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	2300      	movs	r3, #0
 8001792:	210a      	movs	r1, #10
 8001794:	488e      	ldr	r0, [pc, #568]	; (80019d0 <FreqMenu_DrawFreqPresetMenu+0x38c>)
 8001796:	f009 fd7b 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 800179a:	7a7b      	ldrb	r3, [r7, #9]
 800179c:	b29a      	uxth	r2, r3
 800179e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017a2:	9301      	str	r3, [sp, #4]
 80017a4:	2302      	movs	r3, #2
 80017a6:	9300      	str	r3, [sp, #0]
 80017a8:	2300      	movs	r3, #0
 80017aa:	210a      	movs	r1, #10
 80017ac:	4889      	ldr	r0, [pc, #548]	; (80019d4 <FreqMenu_DrawFreqPresetMenu+0x390>)
 80017ae:	f009 fd6f 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017ba:	9301      	str	r3, [sp, #4]
 80017bc:	2302      	movs	r3, #2
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	2300      	movs	r3, #0
 80017c2:	2178      	movs	r1, #120	; 0x78
 80017c4:	4884      	ldr	r0, [pc, #528]	; (80019d8 <FreqMenu_DrawFreqPresetMenu+0x394>)
 80017c6:	f009 fd63 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 80017ca:	7bbb      	ldrb	r3, [r7, #14]
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017d2:	9301      	str	r3, [sp, #4]
 80017d4:	2302      	movs	r3, #2
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	2300      	movs	r3, #0
 80017da:	2178      	movs	r1, #120	; 0x78
 80017dc:	487f      	ldr	r0, [pc, #508]	; (80019dc <FreqMenu_DrawFreqPresetMenu+0x398>)
 80017de:	f009 fd57 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 80017e2:	7b7b      	ldrb	r3, [r7, #13]
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017ea:	9301      	str	r3, [sp, #4]
 80017ec:	2302      	movs	r3, #2
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	2300      	movs	r3, #0
 80017f2:	2178      	movs	r1, #120	; 0x78
 80017f4:	487a      	ldr	r0, [pc, #488]	; (80019e0 <FreqMenu_DrawFreqPresetMenu+0x39c>)
 80017f6:	f009 fd4b 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80017fa:	7b3b      	ldrb	r3, [r7, #12]
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001802:	9301      	str	r3, [sp, #4]
 8001804:	2302      	movs	r3, #2
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	2300      	movs	r3, #0
 800180a:	2178      	movs	r1, #120	; 0x78
 800180c:	4875      	ldr	r0, [pc, #468]	; (80019e4 <FreqMenu_DrawFreqPresetMenu+0x3a0>)
 800180e:	f009 fd3f 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001812:	7afb      	ldrb	r3, [r7, #11]
 8001814:	b29a      	uxth	r2, r3
 8001816:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800181a:	9301      	str	r3, [sp, #4]
 800181c:	2302      	movs	r3, #2
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	2300      	movs	r3, #0
 8001822:	2178      	movs	r1, #120	; 0x78
 8001824:	4870      	ldr	r0, [pc, #448]	; (80019e8 <FreqMenu_DrawFreqPresetMenu+0x3a4>)
 8001826:	f009 fd33 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 800182a:	7abb      	ldrb	r3, [r7, #10]
 800182c:	b29a      	uxth	r2, r3
 800182e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001832:	9301      	str	r3, [sp, #4]
 8001834:	2302      	movs	r3, #2
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2300      	movs	r3, #0
 800183a:	2178      	movs	r1, #120	; 0x78
 800183c:	486b      	ldr	r0, [pc, #428]	; (80019ec <FreqMenu_DrawFreqPresetMenu+0x3a8>)
 800183e:	f009 fd27 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001842:	7a7b      	ldrb	r3, [r7, #9]
 8001844:	b29a      	uxth	r2, r3
 8001846:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800184a:	9301      	str	r3, [sp, #4]
 800184c:	2302      	movs	r3, #2
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	2300      	movs	r3, #0
 8001852:	2178      	movs	r1, #120	; 0x78
 8001854:	4866      	ldr	r0, [pc, #408]	; (80019f0 <FreqMenu_DrawFreqPresetMenu+0x3ac>)
 8001856:	f009 fd1b 	bl	800b290 <ILI9341_Draw_Text>
				break;
 800185a:	f001 b956 	b.w	8002b0a <FreqMenu_DrawFreqPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 800185e:	7bfb      	ldrb	r3, [r7, #15]
 8001860:	b29a      	uxth	r2, r3
 8001862:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001866:	9301      	str	r3, [sp, #4]
 8001868:	2302      	movs	r3, #2
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	2300      	movs	r3, #0
 800186e:	210a      	movs	r1, #10
 8001870:	4852      	ldr	r0, [pc, #328]	; (80019bc <FreqMenu_DrawFreqPresetMenu+0x378>)
 8001872:	f009 fd0d 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, WHITE, 2, BLACK);
 8001876:	7bbb      	ldrb	r3, [r7, #14]
 8001878:	b29a      	uxth	r2, r3
 800187a:	2300      	movs	r3, #0
 800187c:	9301      	str	r3, [sp, #4]
 800187e:	2302      	movs	r3, #2
 8001880:	9300      	str	r3, [sp, #0]
 8001882:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001886:	210a      	movs	r1, #10
 8001888:	484d      	ldr	r0, [pc, #308]	; (80019c0 <FreqMenu_DrawFreqPresetMenu+0x37c>)
 800188a:	f009 fd01 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 800188e:	7b7b      	ldrb	r3, [r7, #13]
 8001890:	b29a      	uxth	r2, r3
 8001892:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001896:	9301      	str	r3, [sp, #4]
 8001898:	2302      	movs	r3, #2
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	2300      	movs	r3, #0
 800189e:	210a      	movs	r1, #10
 80018a0:	4848      	ldr	r0, [pc, #288]	; (80019c4 <FreqMenu_DrawFreqPresetMenu+0x380>)
 80018a2:	f009 fcf5 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 80018a6:	7b3b      	ldrb	r3, [r7, #12]
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018ae:	9301      	str	r3, [sp, #4]
 80018b0:	2302      	movs	r3, #2
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	2300      	movs	r3, #0
 80018b6:	210a      	movs	r1, #10
 80018b8:	4843      	ldr	r0, [pc, #268]	; (80019c8 <FreqMenu_DrawFreqPresetMenu+0x384>)
 80018ba:	f009 fce9 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80018be:	7afb      	ldrb	r3, [r7, #11]
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018c6:	9301      	str	r3, [sp, #4]
 80018c8:	2302      	movs	r3, #2
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	2300      	movs	r3, #0
 80018ce:	210a      	movs	r1, #10
 80018d0:	483e      	ldr	r0, [pc, #248]	; (80019cc <FreqMenu_DrawFreqPresetMenu+0x388>)
 80018d2:	f009 fcdd 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 80018d6:	7abb      	ldrb	r3, [r7, #10]
 80018d8:	b29a      	uxth	r2, r3
 80018da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018de:	9301      	str	r3, [sp, #4]
 80018e0:	2302      	movs	r3, #2
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	2300      	movs	r3, #0
 80018e6:	210a      	movs	r1, #10
 80018e8:	4839      	ldr	r0, [pc, #228]	; (80019d0 <FreqMenu_DrawFreqPresetMenu+0x38c>)
 80018ea:	f009 fcd1 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 80018ee:	7a7b      	ldrb	r3, [r7, #9]
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018f6:	9301      	str	r3, [sp, #4]
 80018f8:	2302      	movs	r3, #2
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	2300      	movs	r3, #0
 80018fe:	210a      	movs	r1, #10
 8001900:	4834      	ldr	r0, [pc, #208]	; (80019d4 <FreqMenu_DrawFreqPresetMenu+0x390>)
 8001902:	f009 fcc5 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001906:	7bfb      	ldrb	r3, [r7, #15]
 8001908:	b29a      	uxth	r2, r3
 800190a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800190e:	9301      	str	r3, [sp, #4]
 8001910:	2302      	movs	r3, #2
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	2300      	movs	r3, #0
 8001916:	2178      	movs	r1, #120	; 0x78
 8001918:	482f      	ldr	r0, [pc, #188]	; (80019d8 <FreqMenu_DrawFreqPresetMenu+0x394>)
 800191a:	f009 fcb9 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 800191e:	7bbb      	ldrb	r3, [r7, #14]
 8001920:	b29a      	uxth	r2, r3
 8001922:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001926:	9301      	str	r3, [sp, #4]
 8001928:	2302      	movs	r3, #2
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	2300      	movs	r3, #0
 800192e:	2178      	movs	r1, #120	; 0x78
 8001930:	482a      	ldr	r0, [pc, #168]	; (80019dc <FreqMenu_DrawFreqPresetMenu+0x398>)
 8001932:	f009 fcad 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001936:	7b7b      	ldrb	r3, [r7, #13]
 8001938:	b29a      	uxth	r2, r3
 800193a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800193e:	9301      	str	r3, [sp, #4]
 8001940:	2302      	movs	r3, #2
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	2300      	movs	r3, #0
 8001946:	2178      	movs	r1, #120	; 0x78
 8001948:	4825      	ldr	r0, [pc, #148]	; (80019e0 <FreqMenu_DrawFreqPresetMenu+0x39c>)
 800194a:	f009 fca1 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 800194e:	7b3b      	ldrb	r3, [r7, #12]
 8001950:	b29a      	uxth	r2, r3
 8001952:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001956:	9301      	str	r3, [sp, #4]
 8001958:	2302      	movs	r3, #2
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	2300      	movs	r3, #0
 800195e:	2178      	movs	r1, #120	; 0x78
 8001960:	4820      	ldr	r0, [pc, #128]	; (80019e4 <FreqMenu_DrawFreqPresetMenu+0x3a0>)
 8001962:	f009 fc95 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001966:	7afb      	ldrb	r3, [r7, #11]
 8001968:	b29a      	uxth	r2, r3
 800196a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800196e:	9301      	str	r3, [sp, #4]
 8001970:	2302      	movs	r3, #2
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	2300      	movs	r3, #0
 8001976:	2178      	movs	r1, #120	; 0x78
 8001978:	481b      	ldr	r0, [pc, #108]	; (80019e8 <FreqMenu_DrawFreqPresetMenu+0x3a4>)
 800197a:	f009 fc89 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 800197e:	7abb      	ldrb	r3, [r7, #10]
 8001980:	b29a      	uxth	r2, r3
 8001982:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001986:	9301      	str	r3, [sp, #4]
 8001988:	2302      	movs	r3, #2
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	2300      	movs	r3, #0
 800198e:	2178      	movs	r1, #120	; 0x78
 8001990:	4816      	ldr	r0, [pc, #88]	; (80019ec <FreqMenu_DrawFreqPresetMenu+0x3a8>)
 8001992:	f009 fc7d 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001996:	7a7b      	ldrb	r3, [r7, #9]
 8001998:	b29a      	uxth	r2, r3
 800199a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800199e:	9301      	str	r3, [sp, #4]
 80019a0:	2302      	movs	r3, #2
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	2300      	movs	r3, #0
 80019a6:	2178      	movs	r1, #120	; 0x78
 80019a8:	4811      	ldr	r0, [pc, #68]	; (80019f0 <FreqMenu_DrawFreqPresetMenu+0x3ac>)
 80019aa:	f009 fc71 	bl	800b290 <ILI9341_Draw_Text>
				break;
 80019ae:	f001 b8ac 	b.w	8002b0a <FreqMenu_DrawFreqPresetMenu+0x14c6>
 80019b2:	bf00      	nop
 80019b4:	000124f8 	.word	0x000124f8
 80019b8:	000186a0 	.word	0x000186a0
 80019bc:	0800e8b4 	.word	0x0800e8b4
 80019c0:	0800e8bc 	.word	0x0800e8bc
 80019c4:	0800e8c4 	.word	0x0800e8c4
 80019c8:	0800e8cc 	.word	0x0800e8cc
 80019cc:	0800e8d4 	.word	0x0800e8d4
 80019d0:	0800e8dc 	.word	0x0800e8dc
 80019d4:	0800e8e4 	.word	0x0800e8e4
 80019d8:	0800e8ec 	.word	0x0800e8ec
 80019dc:	0800e8f4 	.word	0x0800e8f4
 80019e0:	0800e8fc 	.word	0x0800e8fc
 80019e4:	0800e904 	.word	0x0800e904
 80019e8:	0800e90c 	.word	0x0800e90c
 80019ec:	0800e914 	.word	0x0800e914
 80019f0:	0800e91c 	.word	0x0800e91c
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 80019f4:	7bfb      	ldrb	r3, [r7, #15]
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019fc:	9301      	str	r3, [sp, #4]
 80019fe:	2302      	movs	r3, #2
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	2300      	movs	r3, #0
 8001a04:	210a      	movs	r1, #10
 8001a06:	48a5      	ldr	r0, [pc, #660]	; (8001c9c <FreqMenu_DrawFreqPresetMenu+0x658>)
 8001a08:	f009 fc42 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001a0c:	7bbb      	ldrb	r3, [r7, #14]
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a14:	9301      	str	r3, [sp, #4]
 8001a16:	2302      	movs	r3, #2
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	210a      	movs	r1, #10
 8001a1e:	48a0      	ldr	r0, [pc, #640]	; (8001ca0 <FreqMenu_DrawFreqPresetMenu+0x65c>)
 8001a20:	f009 fc36 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, WHITE, 2, BLACK);
 8001a24:	7b7b      	ldrb	r3, [r7, #13]
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	2300      	movs	r3, #0
 8001a2a:	9301      	str	r3, [sp, #4]
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a34:	210a      	movs	r1, #10
 8001a36:	489b      	ldr	r0, [pc, #620]	; (8001ca4 <FreqMenu_DrawFreqPresetMenu+0x660>)
 8001a38:	f009 fc2a 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001a3c:	7b3b      	ldrb	r3, [r7, #12]
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a44:	9301      	str	r3, [sp, #4]
 8001a46:	2302      	movs	r3, #2
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	210a      	movs	r1, #10
 8001a4e:	4896      	ldr	r0, [pc, #600]	; (8001ca8 <FreqMenu_DrawFreqPresetMenu+0x664>)
 8001a50:	f009 fc1e 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001a54:	7afb      	ldrb	r3, [r7, #11]
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a5c:	9301      	str	r3, [sp, #4]
 8001a5e:	2302      	movs	r3, #2
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	2300      	movs	r3, #0
 8001a64:	210a      	movs	r1, #10
 8001a66:	4891      	ldr	r0, [pc, #580]	; (8001cac <FreqMenu_DrawFreqPresetMenu+0x668>)
 8001a68:	f009 fc12 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001a6c:	7abb      	ldrb	r3, [r7, #10]
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a74:	9301      	str	r3, [sp, #4]
 8001a76:	2302      	movs	r3, #2
 8001a78:	9300      	str	r3, [sp, #0]
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	210a      	movs	r1, #10
 8001a7e:	488c      	ldr	r0, [pc, #560]	; (8001cb0 <FreqMenu_DrawFreqPresetMenu+0x66c>)
 8001a80:	f009 fc06 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001a84:	7a7b      	ldrb	r3, [r7, #9]
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a8c:	9301      	str	r3, [sp, #4]
 8001a8e:	2302      	movs	r3, #2
 8001a90:	9300      	str	r3, [sp, #0]
 8001a92:	2300      	movs	r3, #0
 8001a94:	210a      	movs	r1, #10
 8001a96:	4887      	ldr	r0, [pc, #540]	; (8001cb4 <FreqMenu_DrawFreqPresetMenu+0x670>)
 8001a98:	f009 fbfa 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001a9c:	7bfb      	ldrb	r3, [r7, #15]
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001aa4:	9301      	str	r3, [sp, #4]
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	9300      	str	r3, [sp, #0]
 8001aaa:	2300      	movs	r3, #0
 8001aac:	2178      	movs	r1, #120	; 0x78
 8001aae:	4882      	ldr	r0, [pc, #520]	; (8001cb8 <FreqMenu_DrawFreqPresetMenu+0x674>)
 8001ab0:	f009 fbee 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001ab4:	7bbb      	ldrb	r3, [r7, #14]
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001abc:	9301      	str	r3, [sp, #4]
 8001abe:	2302      	movs	r3, #2
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	2178      	movs	r1, #120	; 0x78
 8001ac6:	487d      	ldr	r0, [pc, #500]	; (8001cbc <FreqMenu_DrawFreqPresetMenu+0x678>)
 8001ac8:	f009 fbe2 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001acc:	7b7b      	ldrb	r3, [r7, #13]
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ad4:	9301      	str	r3, [sp, #4]
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	2300      	movs	r3, #0
 8001adc:	2178      	movs	r1, #120	; 0x78
 8001ade:	4878      	ldr	r0, [pc, #480]	; (8001cc0 <FreqMenu_DrawFreqPresetMenu+0x67c>)
 8001ae0:	f009 fbd6 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001ae4:	7b3b      	ldrb	r3, [r7, #12]
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001aec:	9301      	str	r3, [sp, #4]
 8001aee:	2302      	movs	r3, #2
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	2300      	movs	r3, #0
 8001af4:	2178      	movs	r1, #120	; 0x78
 8001af6:	4873      	ldr	r0, [pc, #460]	; (8001cc4 <FreqMenu_DrawFreqPresetMenu+0x680>)
 8001af8:	f009 fbca 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001afc:	7afb      	ldrb	r3, [r7, #11]
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b04:	9301      	str	r3, [sp, #4]
 8001b06:	2302      	movs	r3, #2
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	2178      	movs	r1, #120	; 0x78
 8001b0e:	486e      	ldr	r0, [pc, #440]	; (8001cc8 <FreqMenu_DrawFreqPresetMenu+0x684>)
 8001b10:	f009 fbbe 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001b14:	7abb      	ldrb	r3, [r7, #10]
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b1c:	9301      	str	r3, [sp, #4]
 8001b1e:	2302      	movs	r3, #2
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	2300      	movs	r3, #0
 8001b24:	2178      	movs	r1, #120	; 0x78
 8001b26:	4869      	ldr	r0, [pc, #420]	; (8001ccc <FreqMenu_DrawFreqPresetMenu+0x688>)
 8001b28:	f009 fbb2 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001b2c:	7a7b      	ldrb	r3, [r7, #9]
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b34:	9301      	str	r3, [sp, #4]
 8001b36:	2302      	movs	r3, #2
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	2178      	movs	r1, #120	; 0x78
 8001b3e:	4864      	ldr	r0, [pc, #400]	; (8001cd0 <FreqMenu_DrawFreqPresetMenu+0x68c>)
 8001b40:	f009 fba6 	bl	800b290 <ILI9341_Draw_Text>
				break;
 8001b44:	f000 bfe1 	b.w	8002b0a <FreqMenu_DrawFreqPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b50:	9301      	str	r3, [sp, #4]
 8001b52:	2302      	movs	r3, #2
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	2300      	movs	r3, #0
 8001b58:	210a      	movs	r1, #10
 8001b5a:	4850      	ldr	r0, [pc, #320]	; (8001c9c <FreqMenu_DrawFreqPresetMenu+0x658>)
 8001b5c:	f009 fb98 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001b60:	7bbb      	ldrb	r3, [r7, #14]
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b68:	9301      	str	r3, [sp, #4]
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	2300      	movs	r3, #0
 8001b70:	210a      	movs	r1, #10
 8001b72:	484b      	ldr	r0, [pc, #300]	; (8001ca0 <FreqMenu_DrawFreqPresetMenu+0x65c>)
 8001b74:	f009 fb8c 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001b78:	7b7b      	ldrb	r3, [r7, #13]
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b80:	9301      	str	r3, [sp, #4]
 8001b82:	2302      	movs	r3, #2
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	2300      	movs	r3, #0
 8001b88:	210a      	movs	r1, #10
 8001b8a:	4846      	ldr	r0, [pc, #280]	; (8001ca4 <FreqMenu_DrawFreqPresetMenu+0x660>)
 8001b8c:	f009 fb80 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, WHITE, 2, BLACK);
 8001b90:	7b3b      	ldrb	r3, [r7, #12]
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	2300      	movs	r3, #0
 8001b96:	9301      	str	r3, [sp, #4]
 8001b98:	2302      	movs	r3, #2
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ba0:	210a      	movs	r1, #10
 8001ba2:	4841      	ldr	r0, [pc, #260]	; (8001ca8 <FreqMenu_DrawFreqPresetMenu+0x664>)
 8001ba4:	f009 fb74 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001ba8:	7afb      	ldrb	r3, [r7, #11]
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bb0:	9301      	str	r3, [sp, #4]
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	9300      	str	r3, [sp, #0]
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	210a      	movs	r1, #10
 8001bba:	483c      	ldr	r0, [pc, #240]	; (8001cac <FreqMenu_DrawFreqPresetMenu+0x668>)
 8001bbc:	f009 fb68 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001bc0:	7abb      	ldrb	r3, [r7, #10]
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bc8:	9301      	str	r3, [sp, #4]
 8001bca:	2302      	movs	r3, #2
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	2300      	movs	r3, #0
 8001bd0:	210a      	movs	r1, #10
 8001bd2:	4837      	ldr	r0, [pc, #220]	; (8001cb0 <FreqMenu_DrawFreqPresetMenu+0x66c>)
 8001bd4:	f009 fb5c 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001bd8:	7a7b      	ldrb	r3, [r7, #9]
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001be0:	9301      	str	r3, [sp, #4]
 8001be2:	2302      	movs	r3, #2
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	2300      	movs	r3, #0
 8001be8:	210a      	movs	r1, #10
 8001bea:	4832      	ldr	r0, [pc, #200]	; (8001cb4 <FreqMenu_DrawFreqPresetMenu+0x670>)
 8001bec:	f009 fb50 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001bf0:	7bfb      	ldrb	r3, [r7, #15]
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bf8:	9301      	str	r3, [sp, #4]
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	9300      	str	r3, [sp, #0]
 8001bfe:	2300      	movs	r3, #0
 8001c00:	2178      	movs	r1, #120	; 0x78
 8001c02:	482d      	ldr	r0, [pc, #180]	; (8001cb8 <FreqMenu_DrawFreqPresetMenu+0x674>)
 8001c04:	f009 fb44 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001c08:	7bbb      	ldrb	r3, [r7, #14]
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c10:	9301      	str	r3, [sp, #4]
 8001c12:	2302      	movs	r3, #2
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	2300      	movs	r3, #0
 8001c18:	2178      	movs	r1, #120	; 0x78
 8001c1a:	4828      	ldr	r0, [pc, #160]	; (8001cbc <FreqMenu_DrawFreqPresetMenu+0x678>)
 8001c1c:	f009 fb38 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001c20:	7b7b      	ldrb	r3, [r7, #13]
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c28:	9301      	str	r3, [sp, #4]
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	2300      	movs	r3, #0
 8001c30:	2178      	movs	r1, #120	; 0x78
 8001c32:	4823      	ldr	r0, [pc, #140]	; (8001cc0 <FreqMenu_DrawFreqPresetMenu+0x67c>)
 8001c34:	f009 fb2c 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001c38:	7b3b      	ldrb	r3, [r7, #12]
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c40:	9301      	str	r3, [sp, #4]
 8001c42:	2302      	movs	r3, #2
 8001c44:	9300      	str	r3, [sp, #0]
 8001c46:	2300      	movs	r3, #0
 8001c48:	2178      	movs	r1, #120	; 0x78
 8001c4a:	481e      	ldr	r0, [pc, #120]	; (8001cc4 <FreqMenu_DrawFreqPresetMenu+0x680>)
 8001c4c:	f009 fb20 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001c50:	7afb      	ldrb	r3, [r7, #11]
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c58:	9301      	str	r3, [sp, #4]
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	2300      	movs	r3, #0
 8001c60:	2178      	movs	r1, #120	; 0x78
 8001c62:	4819      	ldr	r0, [pc, #100]	; (8001cc8 <FreqMenu_DrawFreqPresetMenu+0x684>)
 8001c64:	f009 fb14 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001c68:	7abb      	ldrb	r3, [r7, #10]
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c70:	9301      	str	r3, [sp, #4]
 8001c72:	2302      	movs	r3, #2
 8001c74:	9300      	str	r3, [sp, #0]
 8001c76:	2300      	movs	r3, #0
 8001c78:	2178      	movs	r1, #120	; 0x78
 8001c7a:	4814      	ldr	r0, [pc, #80]	; (8001ccc <FreqMenu_DrawFreqPresetMenu+0x688>)
 8001c7c:	f009 fb08 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001c80:	7a7b      	ldrb	r3, [r7, #9]
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c88:	9301      	str	r3, [sp, #4]
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	2300      	movs	r3, #0
 8001c90:	2178      	movs	r1, #120	; 0x78
 8001c92:	480f      	ldr	r0, [pc, #60]	; (8001cd0 <FreqMenu_DrawFreqPresetMenu+0x68c>)
 8001c94:	f009 fafc 	bl	800b290 <ILI9341_Draw_Text>
				break;
 8001c98:	f000 bf37 	b.w	8002b0a <FreqMenu_DrawFreqPresetMenu+0x14c6>
 8001c9c:	0800e8b4 	.word	0x0800e8b4
 8001ca0:	0800e8bc 	.word	0x0800e8bc
 8001ca4:	0800e8c4 	.word	0x0800e8c4
 8001ca8:	0800e8cc 	.word	0x0800e8cc
 8001cac:	0800e8d4 	.word	0x0800e8d4
 8001cb0:	0800e8dc 	.word	0x0800e8dc
 8001cb4:	0800e8e4 	.word	0x0800e8e4
 8001cb8:	0800e8ec 	.word	0x0800e8ec
 8001cbc:	0800e8f4 	.word	0x0800e8f4
 8001cc0:	0800e8fc 	.word	0x0800e8fc
 8001cc4:	0800e904 	.word	0x0800e904
 8001cc8:	0800e90c 	.word	0x0800e90c
 8001ccc:	0800e914 	.word	0x0800e914
 8001cd0:	0800e91c 	.word	0x0800e91c
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cdc:	9301      	str	r3, [sp, #4]
 8001cde:	2302      	movs	r3, #2
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	210a      	movs	r1, #10
 8001ce6:	48a5      	ldr	r0, [pc, #660]	; (8001f7c <FreqMenu_DrawFreqPresetMenu+0x938>)
 8001ce8:	f009 fad2 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001cec:	7bbb      	ldrb	r3, [r7, #14]
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cf4:	9301      	str	r3, [sp, #4]
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	210a      	movs	r1, #10
 8001cfe:	48a0      	ldr	r0, [pc, #640]	; (8001f80 <FreqMenu_DrawFreqPresetMenu+0x93c>)
 8001d00:	f009 fac6 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001d04:	7b7b      	ldrb	r3, [r7, #13]
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d0c:	9301      	str	r3, [sp, #4]
 8001d0e:	2302      	movs	r3, #2
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	2300      	movs	r3, #0
 8001d14:	210a      	movs	r1, #10
 8001d16:	489b      	ldr	r0, [pc, #620]	; (8001f84 <FreqMenu_DrawFreqPresetMenu+0x940>)
 8001d18:	f009 faba 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001d1c:	7b3b      	ldrb	r3, [r7, #12]
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d24:	9301      	str	r3, [sp, #4]
 8001d26:	2302      	movs	r3, #2
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	210a      	movs	r1, #10
 8001d2e:	4896      	ldr	r0, [pc, #600]	; (8001f88 <FreqMenu_DrawFreqPresetMenu+0x944>)
 8001d30:	f009 faae 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, WHITE, 2, BLACK);
 8001d34:	7afb      	ldrb	r3, [r7, #11]
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	2300      	movs	r3, #0
 8001d3a:	9301      	str	r3, [sp, #4]
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d44:	210a      	movs	r1, #10
 8001d46:	4891      	ldr	r0, [pc, #580]	; (8001f8c <FreqMenu_DrawFreqPresetMenu+0x948>)
 8001d48:	f009 faa2 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001d4c:	7abb      	ldrb	r3, [r7, #10]
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d54:	9301      	str	r3, [sp, #4]
 8001d56:	2302      	movs	r3, #2
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	210a      	movs	r1, #10
 8001d5e:	488c      	ldr	r0, [pc, #560]	; (8001f90 <FreqMenu_DrawFreqPresetMenu+0x94c>)
 8001d60:	f009 fa96 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001d64:	7a7b      	ldrb	r3, [r7, #9]
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d6c:	9301      	str	r3, [sp, #4]
 8001d6e:	2302      	movs	r3, #2
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	2300      	movs	r3, #0
 8001d74:	210a      	movs	r1, #10
 8001d76:	4887      	ldr	r0, [pc, #540]	; (8001f94 <FreqMenu_DrawFreqPresetMenu+0x950>)
 8001d78:	f009 fa8a 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001d7c:	7bfb      	ldrb	r3, [r7, #15]
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d84:	9301      	str	r3, [sp, #4]
 8001d86:	2302      	movs	r3, #2
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	2178      	movs	r1, #120	; 0x78
 8001d8e:	4882      	ldr	r0, [pc, #520]	; (8001f98 <FreqMenu_DrawFreqPresetMenu+0x954>)
 8001d90:	f009 fa7e 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001d94:	7bbb      	ldrb	r3, [r7, #14]
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d9c:	9301      	str	r3, [sp, #4]
 8001d9e:	2302      	movs	r3, #2
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	2300      	movs	r3, #0
 8001da4:	2178      	movs	r1, #120	; 0x78
 8001da6:	487d      	ldr	r0, [pc, #500]	; (8001f9c <FreqMenu_DrawFreqPresetMenu+0x958>)
 8001da8:	f009 fa72 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001dac:	7b7b      	ldrb	r3, [r7, #13]
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001db4:	9301      	str	r3, [sp, #4]
 8001db6:	2302      	movs	r3, #2
 8001db8:	9300      	str	r3, [sp, #0]
 8001dba:	2300      	movs	r3, #0
 8001dbc:	2178      	movs	r1, #120	; 0x78
 8001dbe:	4878      	ldr	r0, [pc, #480]	; (8001fa0 <FreqMenu_DrawFreqPresetMenu+0x95c>)
 8001dc0:	f009 fa66 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001dc4:	7b3b      	ldrb	r3, [r7, #12]
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dcc:	9301      	str	r3, [sp, #4]
 8001dce:	2302      	movs	r3, #2
 8001dd0:	9300      	str	r3, [sp, #0]
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	2178      	movs	r1, #120	; 0x78
 8001dd6:	4873      	ldr	r0, [pc, #460]	; (8001fa4 <FreqMenu_DrawFreqPresetMenu+0x960>)
 8001dd8:	f009 fa5a 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001ddc:	7afb      	ldrb	r3, [r7, #11]
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001de4:	9301      	str	r3, [sp, #4]
 8001de6:	2302      	movs	r3, #2
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	2300      	movs	r3, #0
 8001dec:	2178      	movs	r1, #120	; 0x78
 8001dee:	486e      	ldr	r0, [pc, #440]	; (8001fa8 <FreqMenu_DrawFreqPresetMenu+0x964>)
 8001df0:	f009 fa4e 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001df4:	7abb      	ldrb	r3, [r7, #10]
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dfc:	9301      	str	r3, [sp, #4]
 8001dfe:	2302      	movs	r3, #2
 8001e00:	9300      	str	r3, [sp, #0]
 8001e02:	2300      	movs	r3, #0
 8001e04:	2178      	movs	r1, #120	; 0x78
 8001e06:	4869      	ldr	r0, [pc, #420]	; (8001fac <FreqMenu_DrawFreqPresetMenu+0x968>)
 8001e08:	f009 fa42 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001e0c:	7a7b      	ldrb	r3, [r7, #9]
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e14:	9301      	str	r3, [sp, #4]
 8001e16:	2302      	movs	r3, #2
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	2178      	movs	r1, #120	; 0x78
 8001e1e:	4864      	ldr	r0, [pc, #400]	; (8001fb0 <FreqMenu_DrawFreqPresetMenu+0x96c>)
 8001e20:	f009 fa36 	bl	800b290 <ILI9341_Draw_Text>
				break;
 8001e24:	f000 be71 	b.w	8002b0a <FreqMenu_DrawFreqPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001e28:	7bfb      	ldrb	r3, [r7, #15]
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e30:	9301      	str	r3, [sp, #4]
 8001e32:	2302      	movs	r3, #2
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	2300      	movs	r3, #0
 8001e38:	210a      	movs	r1, #10
 8001e3a:	4850      	ldr	r0, [pc, #320]	; (8001f7c <FreqMenu_DrawFreqPresetMenu+0x938>)
 8001e3c:	f009 fa28 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001e40:	7bbb      	ldrb	r3, [r7, #14]
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e48:	9301      	str	r3, [sp, #4]
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	9300      	str	r3, [sp, #0]
 8001e4e:	2300      	movs	r3, #0
 8001e50:	210a      	movs	r1, #10
 8001e52:	484b      	ldr	r0, [pc, #300]	; (8001f80 <FreqMenu_DrawFreqPresetMenu+0x93c>)
 8001e54:	f009 fa1c 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001e58:	7b7b      	ldrb	r3, [r7, #13]
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e60:	9301      	str	r3, [sp, #4]
 8001e62:	2302      	movs	r3, #2
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	2300      	movs	r3, #0
 8001e68:	210a      	movs	r1, #10
 8001e6a:	4846      	ldr	r0, [pc, #280]	; (8001f84 <FreqMenu_DrawFreqPresetMenu+0x940>)
 8001e6c:	f009 fa10 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001e70:	7b3b      	ldrb	r3, [r7, #12]
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e78:	9301      	str	r3, [sp, #4]
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	2300      	movs	r3, #0
 8001e80:	210a      	movs	r1, #10
 8001e82:	4841      	ldr	r0, [pc, #260]	; (8001f88 <FreqMenu_DrawFreqPresetMenu+0x944>)
 8001e84:	f009 fa04 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001e88:	7afb      	ldrb	r3, [r7, #11]
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e90:	9301      	str	r3, [sp, #4]
 8001e92:	2302      	movs	r3, #2
 8001e94:	9300      	str	r3, [sp, #0]
 8001e96:	2300      	movs	r3, #0
 8001e98:	210a      	movs	r1, #10
 8001e9a:	483c      	ldr	r0, [pc, #240]	; (8001f8c <FreqMenu_DrawFreqPresetMenu+0x948>)
 8001e9c:	f009 f9f8 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, WHITE, 2, BLACK);
 8001ea0:	7abb      	ldrb	r3, [r7, #10]
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	9301      	str	r3, [sp, #4]
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	9300      	str	r3, [sp, #0]
 8001eac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001eb0:	210a      	movs	r1, #10
 8001eb2:	4837      	ldr	r0, [pc, #220]	; (8001f90 <FreqMenu_DrawFreqPresetMenu+0x94c>)
 8001eb4:	f009 f9ec 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001eb8:	7a7b      	ldrb	r3, [r7, #9]
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ec0:	9301      	str	r3, [sp, #4]
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	210a      	movs	r1, #10
 8001eca:	4832      	ldr	r0, [pc, #200]	; (8001f94 <FreqMenu_DrawFreqPresetMenu+0x950>)
 8001ecc:	f009 f9e0 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001ed0:	7bfb      	ldrb	r3, [r7, #15]
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ed8:	9301      	str	r3, [sp, #4]
 8001eda:	2302      	movs	r3, #2
 8001edc:	9300      	str	r3, [sp, #0]
 8001ede:	2300      	movs	r3, #0
 8001ee0:	2178      	movs	r1, #120	; 0x78
 8001ee2:	482d      	ldr	r0, [pc, #180]	; (8001f98 <FreqMenu_DrawFreqPresetMenu+0x954>)
 8001ee4:	f009 f9d4 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001ee8:	7bbb      	ldrb	r3, [r7, #14]
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ef0:	9301      	str	r3, [sp, #4]
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	2178      	movs	r1, #120	; 0x78
 8001efa:	4828      	ldr	r0, [pc, #160]	; (8001f9c <FreqMenu_DrawFreqPresetMenu+0x958>)
 8001efc:	f009 f9c8 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001f00:	7b7b      	ldrb	r3, [r7, #13]
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f08:	9301      	str	r3, [sp, #4]
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	2300      	movs	r3, #0
 8001f10:	2178      	movs	r1, #120	; 0x78
 8001f12:	4823      	ldr	r0, [pc, #140]	; (8001fa0 <FreqMenu_DrawFreqPresetMenu+0x95c>)
 8001f14:	f009 f9bc 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001f18:	7b3b      	ldrb	r3, [r7, #12]
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f20:	9301      	str	r3, [sp, #4]
 8001f22:	2302      	movs	r3, #2
 8001f24:	9300      	str	r3, [sp, #0]
 8001f26:	2300      	movs	r3, #0
 8001f28:	2178      	movs	r1, #120	; 0x78
 8001f2a:	481e      	ldr	r0, [pc, #120]	; (8001fa4 <FreqMenu_DrawFreqPresetMenu+0x960>)
 8001f2c:	f009 f9b0 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001f30:	7afb      	ldrb	r3, [r7, #11]
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f38:	9301      	str	r3, [sp, #4]
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	9300      	str	r3, [sp, #0]
 8001f3e:	2300      	movs	r3, #0
 8001f40:	2178      	movs	r1, #120	; 0x78
 8001f42:	4819      	ldr	r0, [pc, #100]	; (8001fa8 <FreqMenu_DrawFreqPresetMenu+0x964>)
 8001f44:	f009 f9a4 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001f48:	7abb      	ldrb	r3, [r7, #10]
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f50:	9301      	str	r3, [sp, #4]
 8001f52:	2302      	movs	r3, #2
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	2300      	movs	r3, #0
 8001f58:	2178      	movs	r1, #120	; 0x78
 8001f5a:	4814      	ldr	r0, [pc, #80]	; (8001fac <FreqMenu_DrawFreqPresetMenu+0x968>)
 8001f5c:	f009 f998 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001f60:	7a7b      	ldrb	r3, [r7, #9]
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f68:	9301      	str	r3, [sp, #4]
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	2300      	movs	r3, #0
 8001f70:	2178      	movs	r1, #120	; 0x78
 8001f72:	480f      	ldr	r0, [pc, #60]	; (8001fb0 <FreqMenu_DrawFreqPresetMenu+0x96c>)
 8001f74:	f009 f98c 	bl	800b290 <ILI9341_Draw_Text>
				break;
 8001f78:	f000 bdc7 	b.w	8002b0a <FreqMenu_DrawFreqPresetMenu+0x14c6>
 8001f7c:	0800e8b4 	.word	0x0800e8b4
 8001f80:	0800e8bc 	.word	0x0800e8bc
 8001f84:	0800e8c4 	.word	0x0800e8c4
 8001f88:	0800e8cc 	.word	0x0800e8cc
 8001f8c:	0800e8d4 	.word	0x0800e8d4
 8001f90:	0800e8dc 	.word	0x0800e8dc
 8001f94:	0800e8e4 	.word	0x0800e8e4
 8001f98:	0800e8ec 	.word	0x0800e8ec
 8001f9c:	0800e8f4 	.word	0x0800e8f4
 8001fa0:	0800e8fc 	.word	0x0800e8fc
 8001fa4:	0800e904 	.word	0x0800e904
 8001fa8:	0800e90c 	.word	0x0800e90c
 8001fac:	0800e914 	.word	0x0800e914
 8001fb0:	0800e91c 	.word	0x0800e91c
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001fb4:	7bfb      	ldrb	r3, [r7, #15]
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fbc:	9301      	str	r3, [sp, #4]
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	210a      	movs	r1, #10
 8001fc6:	48a5      	ldr	r0, [pc, #660]	; (800225c <FreqMenu_DrawFreqPresetMenu+0xc18>)
 8001fc8:	f009 f962 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001fcc:	7bbb      	ldrb	r3, [r7, #14]
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fd4:	9301      	str	r3, [sp, #4]
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	2300      	movs	r3, #0
 8001fdc:	210a      	movs	r1, #10
 8001fde:	48a0      	ldr	r0, [pc, #640]	; (8002260 <FreqMenu_DrawFreqPresetMenu+0xc1c>)
 8001fe0:	f009 f956 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001fe4:	7b7b      	ldrb	r3, [r7, #13]
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fec:	9301      	str	r3, [sp, #4]
 8001fee:	2302      	movs	r3, #2
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	210a      	movs	r1, #10
 8001ff6:	489b      	ldr	r0, [pc, #620]	; (8002264 <FreqMenu_DrawFreqPresetMenu+0xc20>)
 8001ff8:	f009 f94a 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001ffc:	7b3b      	ldrb	r3, [r7, #12]
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002004:	9301      	str	r3, [sp, #4]
 8002006:	2302      	movs	r3, #2
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	2300      	movs	r3, #0
 800200c:	210a      	movs	r1, #10
 800200e:	4896      	ldr	r0, [pc, #600]	; (8002268 <FreqMenu_DrawFreqPresetMenu+0xc24>)
 8002010:	f009 f93e 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8002014:	7afb      	ldrb	r3, [r7, #11]
 8002016:	b29a      	uxth	r2, r3
 8002018:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800201c:	9301      	str	r3, [sp, #4]
 800201e:	2302      	movs	r3, #2
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	2300      	movs	r3, #0
 8002024:	210a      	movs	r1, #10
 8002026:	4891      	ldr	r0, [pc, #580]	; (800226c <FreqMenu_DrawFreqPresetMenu+0xc28>)
 8002028:	f009 f932 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 800202c:	7abb      	ldrb	r3, [r7, #10]
 800202e:	b29a      	uxth	r2, r3
 8002030:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002034:	9301      	str	r3, [sp, #4]
 8002036:	2302      	movs	r3, #2
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	2300      	movs	r3, #0
 800203c:	210a      	movs	r1, #10
 800203e:	488c      	ldr	r0, [pc, #560]	; (8002270 <FreqMenu_DrawFreqPresetMenu+0xc2c>)
 8002040:	f009 f926 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, WHITE, 2, BLACK);
 8002044:	7a7b      	ldrb	r3, [r7, #9]
 8002046:	b29a      	uxth	r2, r3
 8002048:	2300      	movs	r3, #0
 800204a:	9301      	str	r3, [sp, #4]
 800204c:	2302      	movs	r3, #2
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002054:	210a      	movs	r1, #10
 8002056:	4887      	ldr	r0, [pc, #540]	; (8002274 <FreqMenu_DrawFreqPresetMenu+0xc30>)
 8002058:	f009 f91a 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 800205c:	7bfb      	ldrb	r3, [r7, #15]
 800205e:	b29a      	uxth	r2, r3
 8002060:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002064:	9301      	str	r3, [sp, #4]
 8002066:	2302      	movs	r3, #2
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	2300      	movs	r3, #0
 800206c:	2178      	movs	r1, #120	; 0x78
 800206e:	4882      	ldr	r0, [pc, #520]	; (8002278 <FreqMenu_DrawFreqPresetMenu+0xc34>)
 8002070:	f009 f90e 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8002074:	7bbb      	ldrb	r3, [r7, #14]
 8002076:	b29a      	uxth	r2, r3
 8002078:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800207c:	9301      	str	r3, [sp, #4]
 800207e:	2302      	movs	r3, #2
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	2300      	movs	r3, #0
 8002084:	2178      	movs	r1, #120	; 0x78
 8002086:	487d      	ldr	r0, [pc, #500]	; (800227c <FreqMenu_DrawFreqPresetMenu+0xc38>)
 8002088:	f009 f902 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 800208c:	7b7b      	ldrb	r3, [r7, #13]
 800208e:	b29a      	uxth	r2, r3
 8002090:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002094:	9301      	str	r3, [sp, #4]
 8002096:	2302      	movs	r3, #2
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	2300      	movs	r3, #0
 800209c:	2178      	movs	r1, #120	; 0x78
 800209e:	4878      	ldr	r0, [pc, #480]	; (8002280 <FreqMenu_DrawFreqPresetMenu+0xc3c>)
 80020a0:	f009 f8f6 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80020a4:	7b3b      	ldrb	r3, [r7, #12]
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020ac:	9301      	str	r3, [sp, #4]
 80020ae:	2302      	movs	r3, #2
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	2300      	movs	r3, #0
 80020b4:	2178      	movs	r1, #120	; 0x78
 80020b6:	4873      	ldr	r0, [pc, #460]	; (8002284 <FreqMenu_DrawFreqPresetMenu+0xc40>)
 80020b8:	f009 f8ea 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 80020bc:	7afb      	ldrb	r3, [r7, #11]
 80020be:	b29a      	uxth	r2, r3
 80020c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020c4:	9301      	str	r3, [sp, #4]
 80020c6:	2302      	movs	r3, #2
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	2300      	movs	r3, #0
 80020cc:	2178      	movs	r1, #120	; 0x78
 80020ce:	486e      	ldr	r0, [pc, #440]	; (8002288 <FreqMenu_DrawFreqPresetMenu+0xc44>)
 80020d0:	f009 f8de 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 80020d4:	7abb      	ldrb	r3, [r7, #10]
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020dc:	9301      	str	r3, [sp, #4]
 80020de:	2302      	movs	r3, #2
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	2300      	movs	r3, #0
 80020e4:	2178      	movs	r1, #120	; 0x78
 80020e6:	4869      	ldr	r0, [pc, #420]	; (800228c <FreqMenu_DrawFreqPresetMenu+0xc48>)
 80020e8:	f009 f8d2 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80020ec:	7a7b      	ldrb	r3, [r7, #9]
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020f4:	9301      	str	r3, [sp, #4]
 80020f6:	2302      	movs	r3, #2
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	2300      	movs	r3, #0
 80020fc:	2178      	movs	r1, #120	; 0x78
 80020fe:	4864      	ldr	r0, [pc, #400]	; (8002290 <FreqMenu_DrawFreqPresetMenu+0xc4c>)
 8002100:	f009 f8c6 	bl	800b290 <ILI9341_Draw_Text>
				break;
 8002104:	f000 bd01 	b.w	8002b0a <FreqMenu_DrawFreqPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8002108:	7bfb      	ldrb	r3, [r7, #15]
 800210a:	b29a      	uxth	r2, r3
 800210c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002110:	9301      	str	r3, [sp, #4]
 8002112:	2302      	movs	r3, #2
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	2300      	movs	r3, #0
 8002118:	210a      	movs	r1, #10
 800211a:	4850      	ldr	r0, [pc, #320]	; (800225c <FreqMenu_DrawFreqPresetMenu+0xc18>)
 800211c:	f009 f8b8 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8002120:	7bbb      	ldrb	r3, [r7, #14]
 8002122:	b29a      	uxth	r2, r3
 8002124:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002128:	9301      	str	r3, [sp, #4]
 800212a:	2302      	movs	r3, #2
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	2300      	movs	r3, #0
 8002130:	210a      	movs	r1, #10
 8002132:	484b      	ldr	r0, [pc, #300]	; (8002260 <FreqMenu_DrawFreqPresetMenu+0xc1c>)
 8002134:	f009 f8ac 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8002138:	7b7b      	ldrb	r3, [r7, #13]
 800213a:	b29a      	uxth	r2, r3
 800213c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002140:	9301      	str	r3, [sp, #4]
 8002142:	2302      	movs	r3, #2
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	2300      	movs	r3, #0
 8002148:	210a      	movs	r1, #10
 800214a:	4846      	ldr	r0, [pc, #280]	; (8002264 <FreqMenu_DrawFreqPresetMenu+0xc20>)
 800214c:	f009 f8a0 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8002150:	7b3b      	ldrb	r3, [r7, #12]
 8002152:	b29a      	uxth	r2, r3
 8002154:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002158:	9301      	str	r3, [sp, #4]
 800215a:	2302      	movs	r3, #2
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	2300      	movs	r3, #0
 8002160:	210a      	movs	r1, #10
 8002162:	4841      	ldr	r0, [pc, #260]	; (8002268 <FreqMenu_DrawFreqPresetMenu+0xc24>)
 8002164:	f009 f894 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8002168:	7afb      	ldrb	r3, [r7, #11]
 800216a:	b29a      	uxth	r2, r3
 800216c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002170:	9301      	str	r3, [sp, #4]
 8002172:	2302      	movs	r3, #2
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	2300      	movs	r3, #0
 8002178:	210a      	movs	r1, #10
 800217a:	483c      	ldr	r0, [pc, #240]	; (800226c <FreqMenu_DrawFreqPresetMenu+0xc28>)
 800217c:	f009 f888 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8002180:	7abb      	ldrb	r3, [r7, #10]
 8002182:	b29a      	uxth	r2, r3
 8002184:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002188:	9301      	str	r3, [sp, #4]
 800218a:	2302      	movs	r3, #2
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	2300      	movs	r3, #0
 8002190:	210a      	movs	r1, #10
 8002192:	4837      	ldr	r0, [pc, #220]	; (8002270 <FreqMenu_DrawFreqPresetMenu+0xc2c>)
 8002194:	f009 f87c 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8002198:	7a7b      	ldrb	r3, [r7, #9]
 800219a:	b29a      	uxth	r2, r3
 800219c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021a0:	9301      	str	r3, [sp, #4]
 80021a2:	2302      	movs	r3, #2
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	2300      	movs	r3, #0
 80021a8:	210a      	movs	r1, #10
 80021aa:	4832      	ldr	r0, [pc, #200]	; (8002274 <FreqMenu_DrawFreqPresetMenu+0xc30>)
 80021ac:	f009 f870 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, WHITE, 2, BLACK);
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	2300      	movs	r3, #0
 80021b6:	9301      	str	r3, [sp, #4]
 80021b8:	2302      	movs	r3, #2
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021c0:	2178      	movs	r1, #120	; 0x78
 80021c2:	482d      	ldr	r0, [pc, #180]	; (8002278 <FreqMenu_DrawFreqPresetMenu+0xc34>)
 80021c4:	f009 f864 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 80021c8:	7bbb      	ldrb	r3, [r7, #14]
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021d0:	9301      	str	r3, [sp, #4]
 80021d2:	2302      	movs	r3, #2
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	2300      	movs	r3, #0
 80021d8:	2178      	movs	r1, #120	; 0x78
 80021da:	4828      	ldr	r0, [pc, #160]	; (800227c <FreqMenu_DrawFreqPresetMenu+0xc38>)
 80021dc:	f009 f858 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 80021e0:	7b7b      	ldrb	r3, [r7, #13]
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021e8:	9301      	str	r3, [sp, #4]
 80021ea:	2302      	movs	r3, #2
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	2300      	movs	r3, #0
 80021f0:	2178      	movs	r1, #120	; 0x78
 80021f2:	4823      	ldr	r0, [pc, #140]	; (8002280 <FreqMenu_DrawFreqPresetMenu+0xc3c>)
 80021f4:	f009 f84c 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80021f8:	7b3b      	ldrb	r3, [r7, #12]
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002200:	9301      	str	r3, [sp, #4]
 8002202:	2302      	movs	r3, #2
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	2300      	movs	r3, #0
 8002208:	2178      	movs	r1, #120	; 0x78
 800220a:	481e      	ldr	r0, [pc, #120]	; (8002284 <FreqMenu_DrawFreqPresetMenu+0xc40>)
 800220c:	f009 f840 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8002210:	7afb      	ldrb	r3, [r7, #11]
 8002212:	b29a      	uxth	r2, r3
 8002214:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002218:	9301      	str	r3, [sp, #4]
 800221a:	2302      	movs	r3, #2
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	2300      	movs	r3, #0
 8002220:	2178      	movs	r1, #120	; 0x78
 8002222:	4819      	ldr	r0, [pc, #100]	; (8002288 <FreqMenu_DrawFreqPresetMenu+0xc44>)
 8002224:	f009 f834 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8002228:	7abb      	ldrb	r3, [r7, #10]
 800222a:	b29a      	uxth	r2, r3
 800222c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002230:	9301      	str	r3, [sp, #4]
 8002232:	2302      	movs	r3, #2
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	2300      	movs	r3, #0
 8002238:	2178      	movs	r1, #120	; 0x78
 800223a:	4814      	ldr	r0, [pc, #80]	; (800228c <FreqMenu_DrawFreqPresetMenu+0xc48>)
 800223c:	f009 f828 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8002240:	7a7b      	ldrb	r3, [r7, #9]
 8002242:	b29a      	uxth	r2, r3
 8002244:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002248:	9301      	str	r3, [sp, #4]
 800224a:	2302      	movs	r3, #2
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	2300      	movs	r3, #0
 8002250:	2178      	movs	r1, #120	; 0x78
 8002252:	480f      	ldr	r0, [pc, #60]	; (8002290 <FreqMenu_DrawFreqPresetMenu+0xc4c>)
 8002254:	f009 f81c 	bl	800b290 <ILI9341_Draw_Text>
				break;
 8002258:	f000 bc57 	b.w	8002b0a <FreqMenu_DrawFreqPresetMenu+0x14c6>
 800225c:	0800e8b4 	.word	0x0800e8b4
 8002260:	0800e8bc 	.word	0x0800e8bc
 8002264:	0800e8c4 	.word	0x0800e8c4
 8002268:	0800e8cc 	.word	0x0800e8cc
 800226c:	0800e8d4 	.word	0x0800e8d4
 8002270:	0800e8dc 	.word	0x0800e8dc
 8002274:	0800e8e4 	.word	0x0800e8e4
 8002278:	0800e8ec 	.word	0x0800e8ec
 800227c:	0800e8f4 	.word	0x0800e8f4
 8002280:	0800e8fc 	.word	0x0800e8fc
 8002284:	0800e904 	.word	0x0800e904
 8002288:	0800e90c 	.word	0x0800e90c
 800228c:	0800e914 	.word	0x0800e914
 8002290:	0800e91c 	.word	0x0800e91c
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8002294:	7bfb      	ldrb	r3, [r7, #15]
 8002296:	b29a      	uxth	r2, r3
 8002298:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800229c:	9301      	str	r3, [sp, #4]
 800229e:	2302      	movs	r3, #2
 80022a0:	9300      	str	r3, [sp, #0]
 80022a2:	2300      	movs	r3, #0
 80022a4:	210a      	movs	r1, #10
 80022a6:	48a4      	ldr	r0, [pc, #656]	; (8002538 <FreqMenu_DrawFreqPresetMenu+0xef4>)
 80022a8:	f008 fff2 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 80022ac:	7bbb      	ldrb	r3, [r7, #14]
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022b4:	9301      	str	r3, [sp, #4]
 80022b6:	2302      	movs	r3, #2
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	2300      	movs	r3, #0
 80022bc:	210a      	movs	r1, #10
 80022be:	489f      	ldr	r0, [pc, #636]	; (800253c <FreqMenu_DrawFreqPresetMenu+0xef8>)
 80022c0:	f008 ffe6 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 80022c4:	7b7b      	ldrb	r3, [r7, #13]
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022cc:	9301      	str	r3, [sp, #4]
 80022ce:	2302      	movs	r3, #2
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	2300      	movs	r3, #0
 80022d4:	210a      	movs	r1, #10
 80022d6:	489a      	ldr	r0, [pc, #616]	; (8002540 <FreqMenu_DrawFreqPresetMenu+0xefc>)
 80022d8:	f008 ffda 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 80022dc:	7b3b      	ldrb	r3, [r7, #12]
 80022de:	b29a      	uxth	r2, r3
 80022e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022e4:	9301      	str	r3, [sp, #4]
 80022e6:	2302      	movs	r3, #2
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	2300      	movs	r3, #0
 80022ec:	210a      	movs	r1, #10
 80022ee:	4895      	ldr	r0, [pc, #596]	; (8002544 <FreqMenu_DrawFreqPresetMenu+0xf00>)
 80022f0:	f008 ffce 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80022f4:	7afb      	ldrb	r3, [r7, #11]
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022fc:	9301      	str	r3, [sp, #4]
 80022fe:	2302      	movs	r3, #2
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	2300      	movs	r3, #0
 8002304:	210a      	movs	r1, #10
 8002306:	4890      	ldr	r0, [pc, #576]	; (8002548 <FreqMenu_DrawFreqPresetMenu+0xf04>)
 8002308:	f008 ffc2 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 800230c:	7abb      	ldrb	r3, [r7, #10]
 800230e:	b29a      	uxth	r2, r3
 8002310:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002314:	9301      	str	r3, [sp, #4]
 8002316:	2302      	movs	r3, #2
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	2300      	movs	r3, #0
 800231c:	210a      	movs	r1, #10
 800231e:	488b      	ldr	r0, [pc, #556]	; (800254c <FreqMenu_DrawFreqPresetMenu+0xf08>)
 8002320:	f008 ffb6 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8002324:	7a7b      	ldrb	r3, [r7, #9]
 8002326:	b29a      	uxth	r2, r3
 8002328:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800232c:	9301      	str	r3, [sp, #4]
 800232e:	2302      	movs	r3, #2
 8002330:	9300      	str	r3, [sp, #0]
 8002332:	2300      	movs	r3, #0
 8002334:	210a      	movs	r1, #10
 8002336:	4886      	ldr	r0, [pc, #536]	; (8002550 <FreqMenu_DrawFreqPresetMenu+0xf0c>)
 8002338:	f008 ffaa 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 800233c:	7bfb      	ldrb	r3, [r7, #15]
 800233e:	b29a      	uxth	r2, r3
 8002340:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002344:	9301      	str	r3, [sp, #4]
 8002346:	2302      	movs	r3, #2
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	2300      	movs	r3, #0
 800234c:	2178      	movs	r1, #120	; 0x78
 800234e:	4881      	ldr	r0, [pc, #516]	; (8002554 <FreqMenu_DrawFreqPresetMenu+0xf10>)
 8002350:	f008 ff9e 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, WHITE, 2, BLACK);
 8002354:	7bbb      	ldrb	r3, [r7, #14]
 8002356:	b29a      	uxth	r2, r3
 8002358:	2300      	movs	r3, #0
 800235a:	9301      	str	r3, [sp, #4]
 800235c:	2302      	movs	r3, #2
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002364:	2178      	movs	r1, #120	; 0x78
 8002366:	487c      	ldr	r0, [pc, #496]	; (8002558 <FreqMenu_DrawFreqPresetMenu+0xf14>)
 8002368:	f008 ff92 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 800236c:	7b7b      	ldrb	r3, [r7, #13]
 800236e:	b29a      	uxth	r2, r3
 8002370:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002374:	9301      	str	r3, [sp, #4]
 8002376:	2302      	movs	r3, #2
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	2300      	movs	r3, #0
 800237c:	2178      	movs	r1, #120	; 0x78
 800237e:	4877      	ldr	r0, [pc, #476]	; (800255c <FreqMenu_DrawFreqPresetMenu+0xf18>)
 8002380:	f008 ff86 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8002384:	7b3b      	ldrb	r3, [r7, #12]
 8002386:	b29a      	uxth	r2, r3
 8002388:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800238c:	9301      	str	r3, [sp, #4]
 800238e:	2302      	movs	r3, #2
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	2300      	movs	r3, #0
 8002394:	2178      	movs	r1, #120	; 0x78
 8002396:	4872      	ldr	r0, [pc, #456]	; (8002560 <FreqMenu_DrawFreqPresetMenu+0xf1c>)
 8002398:	f008 ff7a 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 800239c:	7afb      	ldrb	r3, [r7, #11]
 800239e:	b29a      	uxth	r2, r3
 80023a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023a4:	9301      	str	r3, [sp, #4]
 80023a6:	2302      	movs	r3, #2
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	2300      	movs	r3, #0
 80023ac:	2178      	movs	r1, #120	; 0x78
 80023ae:	486d      	ldr	r0, [pc, #436]	; (8002564 <FreqMenu_DrawFreqPresetMenu+0xf20>)
 80023b0:	f008 ff6e 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 80023b4:	7abb      	ldrb	r3, [r7, #10]
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023bc:	9301      	str	r3, [sp, #4]
 80023be:	2302      	movs	r3, #2
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	2300      	movs	r3, #0
 80023c4:	2178      	movs	r1, #120	; 0x78
 80023c6:	4868      	ldr	r0, [pc, #416]	; (8002568 <FreqMenu_DrawFreqPresetMenu+0xf24>)
 80023c8:	f008 ff62 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80023cc:	7a7b      	ldrb	r3, [r7, #9]
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023d4:	9301      	str	r3, [sp, #4]
 80023d6:	2302      	movs	r3, #2
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	2300      	movs	r3, #0
 80023dc:	2178      	movs	r1, #120	; 0x78
 80023de:	4863      	ldr	r0, [pc, #396]	; (800256c <FreqMenu_DrawFreqPresetMenu+0xf28>)
 80023e0:	f008 ff56 	bl	800b290 <ILI9341_Draw_Text>
				break;
 80023e4:	e391      	b.n	8002b0a <FreqMenu_DrawFreqPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 80023e6:	7bfb      	ldrb	r3, [r7, #15]
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023ee:	9301      	str	r3, [sp, #4]
 80023f0:	2302      	movs	r3, #2
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	2300      	movs	r3, #0
 80023f6:	210a      	movs	r1, #10
 80023f8:	484f      	ldr	r0, [pc, #316]	; (8002538 <FreqMenu_DrawFreqPresetMenu+0xef4>)
 80023fa:	f008 ff49 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 80023fe:	7bbb      	ldrb	r3, [r7, #14]
 8002400:	b29a      	uxth	r2, r3
 8002402:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002406:	9301      	str	r3, [sp, #4]
 8002408:	2302      	movs	r3, #2
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	2300      	movs	r3, #0
 800240e:	210a      	movs	r1, #10
 8002410:	484a      	ldr	r0, [pc, #296]	; (800253c <FreqMenu_DrawFreqPresetMenu+0xef8>)
 8002412:	f008 ff3d 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8002416:	7b7b      	ldrb	r3, [r7, #13]
 8002418:	b29a      	uxth	r2, r3
 800241a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800241e:	9301      	str	r3, [sp, #4]
 8002420:	2302      	movs	r3, #2
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	2300      	movs	r3, #0
 8002426:	210a      	movs	r1, #10
 8002428:	4845      	ldr	r0, [pc, #276]	; (8002540 <FreqMenu_DrawFreqPresetMenu+0xefc>)
 800242a:	f008 ff31 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 800242e:	7b3b      	ldrb	r3, [r7, #12]
 8002430:	b29a      	uxth	r2, r3
 8002432:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002436:	9301      	str	r3, [sp, #4]
 8002438:	2302      	movs	r3, #2
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	2300      	movs	r3, #0
 800243e:	210a      	movs	r1, #10
 8002440:	4840      	ldr	r0, [pc, #256]	; (8002544 <FreqMenu_DrawFreqPresetMenu+0xf00>)
 8002442:	f008 ff25 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8002446:	7afb      	ldrb	r3, [r7, #11]
 8002448:	b29a      	uxth	r2, r3
 800244a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800244e:	9301      	str	r3, [sp, #4]
 8002450:	2302      	movs	r3, #2
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	2300      	movs	r3, #0
 8002456:	210a      	movs	r1, #10
 8002458:	483b      	ldr	r0, [pc, #236]	; (8002548 <FreqMenu_DrawFreqPresetMenu+0xf04>)
 800245a:	f008 ff19 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 800245e:	7abb      	ldrb	r3, [r7, #10]
 8002460:	b29a      	uxth	r2, r3
 8002462:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002466:	9301      	str	r3, [sp, #4]
 8002468:	2302      	movs	r3, #2
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	2300      	movs	r3, #0
 800246e:	210a      	movs	r1, #10
 8002470:	4836      	ldr	r0, [pc, #216]	; (800254c <FreqMenu_DrawFreqPresetMenu+0xf08>)
 8002472:	f008 ff0d 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8002476:	7a7b      	ldrb	r3, [r7, #9]
 8002478:	b29a      	uxth	r2, r3
 800247a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800247e:	9301      	str	r3, [sp, #4]
 8002480:	2302      	movs	r3, #2
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	2300      	movs	r3, #0
 8002486:	210a      	movs	r1, #10
 8002488:	4831      	ldr	r0, [pc, #196]	; (8002550 <FreqMenu_DrawFreqPresetMenu+0xf0c>)
 800248a:	f008 ff01 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 800248e:	7bfb      	ldrb	r3, [r7, #15]
 8002490:	b29a      	uxth	r2, r3
 8002492:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002496:	9301      	str	r3, [sp, #4]
 8002498:	2302      	movs	r3, #2
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	2300      	movs	r3, #0
 800249e:	2178      	movs	r1, #120	; 0x78
 80024a0:	482c      	ldr	r0, [pc, #176]	; (8002554 <FreqMenu_DrawFreqPresetMenu+0xf10>)
 80024a2:	f008 fef5 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 80024a6:	7bbb      	ldrb	r3, [r7, #14]
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024ae:	9301      	str	r3, [sp, #4]
 80024b0:	2302      	movs	r3, #2
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	2300      	movs	r3, #0
 80024b6:	2178      	movs	r1, #120	; 0x78
 80024b8:	4827      	ldr	r0, [pc, #156]	; (8002558 <FreqMenu_DrawFreqPresetMenu+0xf14>)
 80024ba:	f008 fee9 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, WHITE, 2, BLACK);
 80024be:	7b7b      	ldrb	r3, [r7, #13]
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	2300      	movs	r3, #0
 80024c4:	9301      	str	r3, [sp, #4]
 80024c6:	2302      	movs	r3, #2
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024ce:	2178      	movs	r1, #120	; 0x78
 80024d0:	4822      	ldr	r0, [pc, #136]	; (800255c <FreqMenu_DrawFreqPresetMenu+0xf18>)
 80024d2:	f008 fedd 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80024d6:	7b3b      	ldrb	r3, [r7, #12]
 80024d8:	b29a      	uxth	r2, r3
 80024da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024de:	9301      	str	r3, [sp, #4]
 80024e0:	2302      	movs	r3, #2
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	2300      	movs	r3, #0
 80024e6:	2178      	movs	r1, #120	; 0x78
 80024e8:	481d      	ldr	r0, [pc, #116]	; (8002560 <FreqMenu_DrawFreqPresetMenu+0xf1c>)
 80024ea:	f008 fed1 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 80024ee:	7afb      	ldrb	r3, [r7, #11]
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024f6:	9301      	str	r3, [sp, #4]
 80024f8:	2302      	movs	r3, #2
 80024fa:	9300      	str	r3, [sp, #0]
 80024fc:	2300      	movs	r3, #0
 80024fe:	2178      	movs	r1, #120	; 0x78
 8002500:	4818      	ldr	r0, [pc, #96]	; (8002564 <FreqMenu_DrawFreqPresetMenu+0xf20>)
 8002502:	f008 fec5 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8002506:	7abb      	ldrb	r3, [r7, #10]
 8002508:	b29a      	uxth	r2, r3
 800250a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800250e:	9301      	str	r3, [sp, #4]
 8002510:	2302      	movs	r3, #2
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	2300      	movs	r3, #0
 8002516:	2178      	movs	r1, #120	; 0x78
 8002518:	4813      	ldr	r0, [pc, #76]	; (8002568 <FreqMenu_DrawFreqPresetMenu+0xf24>)
 800251a:	f008 feb9 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 800251e:	7a7b      	ldrb	r3, [r7, #9]
 8002520:	b29a      	uxth	r2, r3
 8002522:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002526:	9301      	str	r3, [sp, #4]
 8002528:	2302      	movs	r3, #2
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	2300      	movs	r3, #0
 800252e:	2178      	movs	r1, #120	; 0x78
 8002530:	480e      	ldr	r0, [pc, #56]	; (800256c <FreqMenu_DrawFreqPresetMenu+0xf28>)
 8002532:	f008 fead 	bl	800b290 <ILI9341_Draw_Text>
				break;
 8002536:	e2e8      	b.n	8002b0a <FreqMenu_DrawFreqPresetMenu+0x14c6>
 8002538:	0800e8b4 	.word	0x0800e8b4
 800253c:	0800e8bc 	.word	0x0800e8bc
 8002540:	0800e8c4 	.word	0x0800e8c4
 8002544:	0800e8cc 	.word	0x0800e8cc
 8002548:	0800e8d4 	.word	0x0800e8d4
 800254c:	0800e8dc 	.word	0x0800e8dc
 8002550:	0800e8e4 	.word	0x0800e8e4
 8002554:	0800e8ec 	.word	0x0800e8ec
 8002558:	0800e8f4 	.word	0x0800e8f4
 800255c:	0800e8fc 	.word	0x0800e8fc
 8002560:	0800e904 	.word	0x0800e904
 8002564:	0800e90c 	.word	0x0800e90c
 8002568:	0800e914 	.word	0x0800e914
 800256c:	0800e91c 	.word	0x0800e91c
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8002570:	7bfb      	ldrb	r3, [r7, #15]
 8002572:	b29a      	uxth	r2, r3
 8002574:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002578:	9301      	str	r3, [sp, #4]
 800257a:	2302      	movs	r3, #2
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	2300      	movs	r3, #0
 8002580:	210a      	movs	r1, #10
 8002582:	48a4      	ldr	r0, [pc, #656]	; (8002814 <FreqMenu_DrawFreqPresetMenu+0x11d0>)
 8002584:	f008 fe84 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8002588:	7bbb      	ldrb	r3, [r7, #14]
 800258a:	b29a      	uxth	r2, r3
 800258c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002590:	9301      	str	r3, [sp, #4]
 8002592:	2302      	movs	r3, #2
 8002594:	9300      	str	r3, [sp, #0]
 8002596:	2300      	movs	r3, #0
 8002598:	210a      	movs	r1, #10
 800259a:	489f      	ldr	r0, [pc, #636]	; (8002818 <FreqMenu_DrawFreqPresetMenu+0x11d4>)
 800259c:	f008 fe78 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 80025a0:	7b7b      	ldrb	r3, [r7, #13]
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025a8:	9301      	str	r3, [sp, #4]
 80025aa:	2302      	movs	r3, #2
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	2300      	movs	r3, #0
 80025b0:	210a      	movs	r1, #10
 80025b2:	489a      	ldr	r0, [pc, #616]	; (800281c <FreqMenu_DrawFreqPresetMenu+0x11d8>)
 80025b4:	f008 fe6c 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 80025b8:	7b3b      	ldrb	r3, [r7, #12]
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025c0:	9301      	str	r3, [sp, #4]
 80025c2:	2302      	movs	r3, #2
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	2300      	movs	r3, #0
 80025c8:	210a      	movs	r1, #10
 80025ca:	4895      	ldr	r0, [pc, #596]	; (8002820 <FreqMenu_DrawFreqPresetMenu+0x11dc>)
 80025cc:	f008 fe60 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80025d0:	7afb      	ldrb	r3, [r7, #11]
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025d8:	9301      	str	r3, [sp, #4]
 80025da:	2302      	movs	r3, #2
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	2300      	movs	r3, #0
 80025e0:	210a      	movs	r1, #10
 80025e2:	4890      	ldr	r0, [pc, #576]	; (8002824 <FreqMenu_DrawFreqPresetMenu+0x11e0>)
 80025e4:	f008 fe54 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 80025e8:	7abb      	ldrb	r3, [r7, #10]
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025f0:	9301      	str	r3, [sp, #4]
 80025f2:	2302      	movs	r3, #2
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	2300      	movs	r3, #0
 80025f8:	210a      	movs	r1, #10
 80025fa:	488b      	ldr	r0, [pc, #556]	; (8002828 <FreqMenu_DrawFreqPresetMenu+0x11e4>)
 80025fc:	f008 fe48 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8002600:	7a7b      	ldrb	r3, [r7, #9]
 8002602:	b29a      	uxth	r2, r3
 8002604:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002608:	9301      	str	r3, [sp, #4]
 800260a:	2302      	movs	r3, #2
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	2300      	movs	r3, #0
 8002610:	210a      	movs	r1, #10
 8002612:	4886      	ldr	r0, [pc, #536]	; (800282c <FreqMenu_DrawFreqPresetMenu+0x11e8>)
 8002614:	f008 fe3c 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8002618:	7bfb      	ldrb	r3, [r7, #15]
 800261a:	b29a      	uxth	r2, r3
 800261c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002620:	9301      	str	r3, [sp, #4]
 8002622:	2302      	movs	r3, #2
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	2300      	movs	r3, #0
 8002628:	2178      	movs	r1, #120	; 0x78
 800262a:	4881      	ldr	r0, [pc, #516]	; (8002830 <FreqMenu_DrawFreqPresetMenu+0x11ec>)
 800262c:	f008 fe30 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8002630:	7bbb      	ldrb	r3, [r7, #14]
 8002632:	b29a      	uxth	r2, r3
 8002634:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002638:	9301      	str	r3, [sp, #4]
 800263a:	2302      	movs	r3, #2
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	2300      	movs	r3, #0
 8002640:	2178      	movs	r1, #120	; 0x78
 8002642:	487c      	ldr	r0, [pc, #496]	; (8002834 <FreqMenu_DrawFreqPresetMenu+0x11f0>)
 8002644:	f008 fe24 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8002648:	7b7b      	ldrb	r3, [r7, #13]
 800264a:	b29a      	uxth	r2, r3
 800264c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002650:	9301      	str	r3, [sp, #4]
 8002652:	2302      	movs	r3, #2
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	2300      	movs	r3, #0
 8002658:	2178      	movs	r1, #120	; 0x78
 800265a:	4877      	ldr	r0, [pc, #476]	; (8002838 <FreqMenu_DrawFreqPresetMenu+0x11f4>)
 800265c:	f008 fe18 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, WHITE, 2, BLACK);
 8002660:	7b3b      	ldrb	r3, [r7, #12]
 8002662:	b29a      	uxth	r2, r3
 8002664:	2300      	movs	r3, #0
 8002666:	9301      	str	r3, [sp, #4]
 8002668:	2302      	movs	r3, #2
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002670:	2178      	movs	r1, #120	; 0x78
 8002672:	4872      	ldr	r0, [pc, #456]	; (800283c <FreqMenu_DrawFreqPresetMenu+0x11f8>)
 8002674:	f008 fe0c 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8002678:	7afb      	ldrb	r3, [r7, #11]
 800267a:	b29a      	uxth	r2, r3
 800267c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002680:	9301      	str	r3, [sp, #4]
 8002682:	2302      	movs	r3, #2
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	2300      	movs	r3, #0
 8002688:	2178      	movs	r1, #120	; 0x78
 800268a:	486d      	ldr	r0, [pc, #436]	; (8002840 <FreqMenu_DrawFreqPresetMenu+0x11fc>)
 800268c:	f008 fe00 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8002690:	7abb      	ldrb	r3, [r7, #10]
 8002692:	b29a      	uxth	r2, r3
 8002694:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002698:	9301      	str	r3, [sp, #4]
 800269a:	2302      	movs	r3, #2
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	2300      	movs	r3, #0
 80026a0:	2178      	movs	r1, #120	; 0x78
 80026a2:	4868      	ldr	r0, [pc, #416]	; (8002844 <FreqMenu_DrawFreqPresetMenu+0x1200>)
 80026a4:	f008 fdf4 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80026a8:	7a7b      	ldrb	r3, [r7, #9]
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026b0:	9301      	str	r3, [sp, #4]
 80026b2:	2302      	movs	r3, #2
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	2300      	movs	r3, #0
 80026b8:	2178      	movs	r1, #120	; 0x78
 80026ba:	4863      	ldr	r0, [pc, #396]	; (8002848 <FreqMenu_DrawFreqPresetMenu+0x1204>)
 80026bc:	f008 fde8 	bl	800b290 <ILI9341_Draw_Text>
				break;
 80026c0:	e223      	b.n	8002b0a <FreqMenu_DrawFreqPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026ca:	9301      	str	r3, [sp, #4]
 80026cc:	2302      	movs	r3, #2
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	2300      	movs	r3, #0
 80026d2:	210a      	movs	r1, #10
 80026d4:	484f      	ldr	r0, [pc, #316]	; (8002814 <FreqMenu_DrawFreqPresetMenu+0x11d0>)
 80026d6:	f008 fddb 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 80026da:	7bbb      	ldrb	r3, [r7, #14]
 80026dc:	b29a      	uxth	r2, r3
 80026de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026e2:	9301      	str	r3, [sp, #4]
 80026e4:	2302      	movs	r3, #2
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	2300      	movs	r3, #0
 80026ea:	210a      	movs	r1, #10
 80026ec:	484a      	ldr	r0, [pc, #296]	; (8002818 <FreqMenu_DrawFreqPresetMenu+0x11d4>)
 80026ee:	f008 fdcf 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 80026f2:	7b7b      	ldrb	r3, [r7, #13]
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026fa:	9301      	str	r3, [sp, #4]
 80026fc:	2302      	movs	r3, #2
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	2300      	movs	r3, #0
 8002702:	210a      	movs	r1, #10
 8002704:	4845      	ldr	r0, [pc, #276]	; (800281c <FreqMenu_DrawFreqPresetMenu+0x11d8>)
 8002706:	f008 fdc3 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 800270a:	7b3b      	ldrb	r3, [r7, #12]
 800270c:	b29a      	uxth	r2, r3
 800270e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002712:	9301      	str	r3, [sp, #4]
 8002714:	2302      	movs	r3, #2
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	2300      	movs	r3, #0
 800271a:	210a      	movs	r1, #10
 800271c:	4840      	ldr	r0, [pc, #256]	; (8002820 <FreqMenu_DrawFreqPresetMenu+0x11dc>)
 800271e:	f008 fdb7 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8002722:	7afb      	ldrb	r3, [r7, #11]
 8002724:	b29a      	uxth	r2, r3
 8002726:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800272a:	9301      	str	r3, [sp, #4]
 800272c:	2302      	movs	r3, #2
 800272e:	9300      	str	r3, [sp, #0]
 8002730:	2300      	movs	r3, #0
 8002732:	210a      	movs	r1, #10
 8002734:	483b      	ldr	r0, [pc, #236]	; (8002824 <FreqMenu_DrawFreqPresetMenu+0x11e0>)
 8002736:	f008 fdab 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 800273a:	7abb      	ldrb	r3, [r7, #10]
 800273c:	b29a      	uxth	r2, r3
 800273e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002742:	9301      	str	r3, [sp, #4]
 8002744:	2302      	movs	r3, #2
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	2300      	movs	r3, #0
 800274a:	210a      	movs	r1, #10
 800274c:	4836      	ldr	r0, [pc, #216]	; (8002828 <FreqMenu_DrawFreqPresetMenu+0x11e4>)
 800274e:	f008 fd9f 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8002752:	7a7b      	ldrb	r3, [r7, #9]
 8002754:	b29a      	uxth	r2, r3
 8002756:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800275a:	9301      	str	r3, [sp, #4]
 800275c:	2302      	movs	r3, #2
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	2300      	movs	r3, #0
 8002762:	210a      	movs	r1, #10
 8002764:	4831      	ldr	r0, [pc, #196]	; (800282c <FreqMenu_DrawFreqPresetMenu+0x11e8>)
 8002766:	f008 fd93 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 800276a:	7bfb      	ldrb	r3, [r7, #15]
 800276c:	b29a      	uxth	r2, r3
 800276e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002772:	9301      	str	r3, [sp, #4]
 8002774:	2302      	movs	r3, #2
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	2300      	movs	r3, #0
 800277a:	2178      	movs	r1, #120	; 0x78
 800277c:	482c      	ldr	r0, [pc, #176]	; (8002830 <FreqMenu_DrawFreqPresetMenu+0x11ec>)
 800277e:	f008 fd87 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8002782:	7bbb      	ldrb	r3, [r7, #14]
 8002784:	b29a      	uxth	r2, r3
 8002786:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800278a:	9301      	str	r3, [sp, #4]
 800278c:	2302      	movs	r3, #2
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	2300      	movs	r3, #0
 8002792:	2178      	movs	r1, #120	; 0x78
 8002794:	4827      	ldr	r0, [pc, #156]	; (8002834 <FreqMenu_DrawFreqPresetMenu+0x11f0>)
 8002796:	f008 fd7b 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 800279a:	7b7b      	ldrb	r3, [r7, #13]
 800279c:	b29a      	uxth	r2, r3
 800279e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027a2:	9301      	str	r3, [sp, #4]
 80027a4:	2302      	movs	r3, #2
 80027a6:	9300      	str	r3, [sp, #0]
 80027a8:	2300      	movs	r3, #0
 80027aa:	2178      	movs	r1, #120	; 0x78
 80027ac:	4822      	ldr	r0, [pc, #136]	; (8002838 <FreqMenu_DrawFreqPresetMenu+0x11f4>)
 80027ae:	f008 fd6f 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80027b2:	7b3b      	ldrb	r3, [r7, #12]
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027ba:	9301      	str	r3, [sp, #4]
 80027bc:	2302      	movs	r3, #2
 80027be:	9300      	str	r3, [sp, #0]
 80027c0:	2300      	movs	r3, #0
 80027c2:	2178      	movs	r1, #120	; 0x78
 80027c4:	481d      	ldr	r0, [pc, #116]	; (800283c <FreqMenu_DrawFreqPresetMenu+0x11f8>)
 80027c6:	f008 fd63 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, WHITE, 2, BLACK);
 80027ca:	7afb      	ldrb	r3, [r7, #11]
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	2300      	movs	r3, #0
 80027d0:	9301      	str	r3, [sp, #4]
 80027d2:	2302      	movs	r3, #2
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027da:	2178      	movs	r1, #120	; 0x78
 80027dc:	4818      	ldr	r0, [pc, #96]	; (8002840 <FreqMenu_DrawFreqPresetMenu+0x11fc>)
 80027de:	f008 fd57 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 80027e2:	7abb      	ldrb	r3, [r7, #10]
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027ea:	9301      	str	r3, [sp, #4]
 80027ec:	2302      	movs	r3, #2
 80027ee:	9300      	str	r3, [sp, #0]
 80027f0:	2300      	movs	r3, #0
 80027f2:	2178      	movs	r1, #120	; 0x78
 80027f4:	4813      	ldr	r0, [pc, #76]	; (8002844 <FreqMenu_DrawFreqPresetMenu+0x1200>)
 80027f6:	f008 fd4b 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80027fa:	7a7b      	ldrb	r3, [r7, #9]
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002802:	9301      	str	r3, [sp, #4]
 8002804:	2302      	movs	r3, #2
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	2300      	movs	r3, #0
 800280a:	2178      	movs	r1, #120	; 0x78
 800280c:	480e      	ldr	r0, [pc, #56]	; (8002848 <FreqMenu_DrawFreqPresetMenu+0x1204>)
 800280e:	f008 fd3f 	bl	800b290 <ILI9341_Draw_Text>
			break;
 8002812:	e17a      	b.n	8002b0a <FreqMenu_DrawFreqPresetMenu+0x14c6>
 8002814:	0800e8b4 	.word	0x0800e8b4
 8002818:	0800e8bc 	.word	0x0800e8bc
 800281c:	0800e8c4 	.word	0x0800e8c4
 8002820:	0800e8cc 	.word	0x0800e8cc
 8002824:	0800e8d4 	.word	0x0800e8d4
 8002828:	0800e8dc 	.word	0x0800e8dc
 800282c:	0800e8e4 	.word	0x0800e8e4
 8002830:	0800e8ec 	.word	0x0800e8ec
 8002834:	0800e8f4 	.word	0x0800e8f4
 8002838:	0800e8fc 	.word	0x0800e8fc
 800283c:	0800e904 	.word	0x0800e904
 8002840:	0800e90c 	.word	0x0800e90c
 8002844:	0800e914 	.word	0x0800e914
 8002848:	0800e91c 	.word	0x0800e91c
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	b29a      	uxth	r2, r3
 8002850:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002854:	9301      	str	r3, [sp, #4]
 8002856:	2302      	movs	r3, #2
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	2300      	movs	r3, #0
 800285c:	210a      	movs	r1, #10
 800285e:	48ad      	ldr	r0, [pc, #692]	; (8002b14 <FreqMenu_DrawFreqPresetMenu+0x14d0>)
 8002860:	f008 fd16 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8002864:	7bbb      	ldrb	r3, [r7, #14]
 8002866:	b29a      	uxth	r2, r3
 8002868:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800286c:	9301      	str	r3, [sp, #4]
 800286e:	2302      	movs	r3, #2
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	2300      	movs	r3, #0
 8002874:	210a      	movs	r1, #10
 8002876:	48a8      	ldr	r0, [pc, #672]	; (8002b18 <FreqMenu_DrawFreqPresetMenu+0x14d4>)
 8002878:	f008 fd0a 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 800287c:	7b7b      	ldrb	r3, [r7, #13]
 800287e:	b29a      	uxth	r2, r3
 8002880:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002884:	9301      	str	r3, [sp, #4]
 8002886:	2302      	movs	r3, #2
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	2300      	movs	r3, #0
 800288c:	210a      	movs	r1, #10
 800288e:	48a3      	ldr	r0, [pc, #652]	; (8002b1c <FreqMenu_DrawFreqPresetMenu+0x14d8>)
 8002890:	f008 fcfe 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8002894:	7b3b      	ldrb	r3, [r7, #12]
 8002896:	b29a      	uxth	r2, r3
 8002898:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800289c:	9301      	str	r3, [sp, #4]
 800289e:	2302      	movs	r3, #2
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	2300      	movs	r3, #0
 80028a4:	210a      	movs	r1, #10
 80028a6:	489e      	ldr	r0, [pc, #632]	; (8002b20 <FreqMenu_DrawFreqPresetMenu+0x14dc>)
 80028a8:	f008 fcf2 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80028ac:	7afb      	ldrb	r3, [r7, #11]
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028b4:	9301      	str	r3, [sp, #4]
 80028b6:	2302      	movs	r3, #2
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	2300      	movs	r3, #0
 80028bc:	210a      	movs	r1, #10
 80028be:	4899      	ldr	r0, [pc, #612]	; (8002b24 <FreqMenu_DrawFreqPresetMenu+0x14e0>)
 80028c0:	f008 fce6 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 80028c4:	7abb      	ldrb	r3, [r7, #10]
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028cc:	9301      	str	r3, [sp, #4]
 80028ce:	2302      	movs	r3, #2
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	2300      	movs	r3, #0
 80028d4:	210a      	movs	r1, #10
 80028d6:	4894      	ldr	r0, [pc, #592]	; (8002b28 <FreqMenu_DrawFreqPresetMenu+0x14e4>)
 80028d8:	f008 fcda 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 80028dc:	7a7b      	ldrb	r3, [r7, #9]
 80028de:	b29a      	uxth	r2, r3
 80028e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028e4:	9301      	str	r3, [sp, #4]
 80028e6:	2302      	movs	r3, #2
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	2300      	movs	r3, #0
 80028ec:	210a      	movs	r1, #10
 80028ee:	488f      	ldr	r0, [pc, #572]	; (8002b2c <FreqMenu_DrawFreqPresetMenu+0x14e8>)
 80028f0:	f008 fcce 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028fc:	9301      	str	r3, [sp, #4]
 80028fe:	2302      	movs	r3, #2
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	2300      	movs	r3, #0
 8002904:	2178      	movs	r1, #120	; 0x78
 8002906:	488a      	ldr	r0, [pc, #552]	; (8002b30 <FreqMenu_DrawFreqPresetMenu+0x14ec>)
 8002908:	f008 fcc2 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 800290c:	7bbb      	ldrb	r3, [r7, #14]
 800290e:	b29a      	uxth	r2, r3
 8002910:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002914:	9301      	str	r3, [sp, #4]
 8002916:	2302      	movs	r3, #2
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	2300      	movs	r3, #0
 800291c:	2178      	movs	r1, #120	; 0x78
 800291e:	4885      	ldr	r0, [pc, #532]	; (8002b34 <FreqMenu_DrawFreqPresetMenu+0x14f0>)
 8002920:	f008 fcb6 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8002924:	7b7b      	ldrb	r3, [r7, #13]
 8002926:	b29a      	uxth	r2, r3
 8002928:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800292c:	9301      	str	r3, [sp, #4]
 800292e:	2302      	movs	r3, #2
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	2300      	movs	r3, #0
 8002934:	2178      	movs	r1, #120	; 0x78
 8002936:	4880      	ldr	r0, [pc, #512]	; (8002b38 <FreqMenu_DrawFreqPresetMenu+0x14f4>)
 8002938:	f008 fcaa 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 800293c:	7b3b      	ldrb	r3, [r7, #12]
 800293e:	b29a      	uxth	r2, r3
 8002940:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002944:	9301      	str	r3, [sp, #4]
 8002946:	2302      	movs	r3, #2
 8002948:	9300      	str	r3, [sp, #0]
 800294a:	2300      	movs	r3, #0
 800294c:	2178      	movs	r1, #120	; 0x78
 800294e:	487b      	ldr	r0, [pc, #492]	; (8002b3c <FreqMenu_DrawFreqPresetMenu+0x14f8>)
 8002950:	f008 fc9e 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8002954:	7afb      	ldrb	r3, [r7, #11]
 8002956:	b29a      	uxth	r2, r3
 8002958:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800295c:	9301      	str	r3, [sp, #4]
 800295e:	2302      	movs	r3, #2
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	2300      	movs	r3, #0
 8002964:	2178      	movs	r1, #120	; 0x78
 8002966:	4876      	ldr	r0, [pc, #472]	; (8002b40 <FreqMenu_DrawFreqPresetMenu+0x14fc>)
 8002968:	f008 fc92 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, WHITE, 2, BLACK);
 800296c:	7abb      	ldrb	r3, [r7, #10]
 800296e:	b29a      	uxth	r2, r3
 8002970:	2300      	movs	r3, #0
 8002972:	9301      	str	r3, [sp, #4]
 8002974:	2302      	movs	r3, #2
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800297c:	2178      	movs	r1, #120	; 0x78
 800297e:	4871      	ldr	r0, [pc, #452]	; (8002b44 <FreqMenu_DrawFreqPresetMenu+0x1500>)
 8002980:	f008 fc86 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8002984:	7a7b      	ldrb	r3, [r7, #9]
 8002986:	b29a      	uxth	r2, r3
 8002988:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800298c:	9301      	str	r3, [sp, #4]
 800298e:	2302      	movs	r3, #2
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	2300      	movs	r3, #0
 8002994:	2178      	movs	r1, #120	; 0x78
 8002996:	486c      	ldr	r0, [pc, #432]	; (8002b48 <FreqMenu_DrawFreqPresetMenu+0x1504>)
 8002998:	f008 fc7a 	bl	800b290 <ILI9341_Draw_Text>
			break;
 800299c:	e0b5      	b.n	8002b0a <FreqMenu_DrawFreqPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 800299e:	7bfb      	ldrb	r3, [r7, #15]
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029a6:	9301      	str	r3, [sp, #4]
 80029a8:	2302      	movs	r3, #2
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	2300      	movs	r3, #0
 80029ae:	210a      	movs	r1, #10
 80029b0:	4858      	ldr	r0, [pc, #352]	; (8002b14 <FreqMenu_DrawFreqPresetMenu+0x14d0>)
 80029b2:	f008 fc6d 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 80029b6:	7bbb      	ldrb	r3, [r7, #14]
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029be:	9301      	str	r3, [sp, #4]
 80029c0:	2302      	movs	r3, #2
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	2300      	movs	r3, #0
 80029c6:	210a      	movs	r1, #10
 80029c8:	4853      	ldr	r0, [pc, #332]	; (8002b18 <FreqMenu_DrawFreqPresetMenu+0x14d4>)
 80029ca:	f008 fc61 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 80029ce:	7b7b      	ldrb	r3, [r7, #13]
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029d6:	9301      	str	r3, [sp, #4]
 80029d8:	2302      	movs	r3, #2
 80029da:	9300      	str	r3, [sp, #0]
 80029dc:	2300      	movs	r3, #0
 80029de:	210a      	movs	r1, #10
 80029e0:	484e      	ldr	r0, [pc, #312]	; (8002b1c <FreqMenu_DrawFreqPresetMenu+0x14d8>)
 80029e2:	f008 fc55 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 80029e6:	7b3b      	ldrb	r3, [r7, #12]
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029ee:	9301      	str	r3, [sp, #4]
 80029f0:	2302      	movs	r3, #2
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	2300      	movs	r3, #0
 80029f6:	210a      	movs	r1, #10
 80029f8:	4849      	ldr	r0, [pc, #292]	; (8002b20 <FreqMenu_DrawFreqPresetMenu+0x14dc>)
 80029fa:	f008 fc49 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80029fe:	7afb      	ldrb	r3, [r7, #11]
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a06:	9301      	str	r3, [sp, #4]
 8002a08:	2302      	movs	r3, #2
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	210a      	movs	r1, #10
 8002a10:	4844      	ldr	r0, [pc, #272]	; (8002b24 <FreqMenu_DrawFreqPresetMenu+0x14e0>)
 8002a12:	f008 fc3d 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8002a16:	7abb      	ldrb	r3, [r7, #10]
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a1e:	9301      	str	r3, [sp, #4]
 8002a20:	2302      	movs	r3, #2
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	2300      	movs	r3, #0
 8002a26:	210a      	movs	r1, #10
 8002a28:	483f      	ldr	r0, [pc, #252]	; (8002b28 <FreqMenu_DrawFreqPresetMenu+0x14e4>)
 8002a2a:	f008 fc31 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8002a2e:	7a7b      	ldrb	r3, [r7, #9]
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a36:	9301      	str	r3, [sp, #4]
 8002a38:	2302      	movs	r3, #2
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	210a      	movs	r1, #10
 8002a40:	483a      	ldr	r0, [pc, #232]	; (8002b2c <FreqMenu_DrawFreqPresetMenu+0x14e8>)
 8002a42:	f008 fc25 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8002a46:	7bfb      	ldrb	r3, [r7, #15]
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a4e:	9301      	str	r3, [sp, #4]
 8002a50:	2302      	movs	r3, #2
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	2300      	movs	r3, #0
 8002a56:	2178      	movs	r1, #120	; 0x78
 8002a58:	4835      	ldr	r0, [pc, #212]	; (8002b30 <FreqMenu_DrawFreqPresetMenu+0x14ec>)
 8002a5a:	f008 fc19 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8002a5e:	7bbb      	ldrb	r3, [r7, #14]
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a66:	9301      	str	r3, [sp, #4]
 8002a68:	2302      	movs	r3, #2
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	2178      	movs	r1, #120	; 0x78
 8002a70:	4830      	ldr	r0, [pc, #192]	; (8002b34 <FreqMenu_DrawFreqPresetMenu+0x14f0>)
 8002a72:	f008 fc0d 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8002a76:	7b7b      	ldrb	r3, [r7, #13]
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a7e:	9301      	str	r3, [sp, #4]
 8002a80:	2302      	movs	r3, #2
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	2300      	movs	r3, #0
 8002a86:	2178      	movs	r1, #120	; 0x78
 8002a88:	482b      	ldr	r0, [pc, #172]	; (8002b38 <FreqMenu_DrawFreqPresetMenu+0x14f4>)
 8002a8a:	f008 fc01 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8002a8e:	7b3b      	ldrb	r3, [r7, #12]
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a96:	9301      	str	r3, [sp, #4]
 8002a98:	2302      	movs	r3, #2
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	2178      	movs	r1, #120	; 0x78
 8002aa0:	4826      	ldr	r0, [pc, #152]	; (8002b3c <FreqMenu_DrawFreqPresetMenu+0x14f8>)
 8002aa2:	f008 fbf5 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8002aa6:	7afb      	ldrb	r3, [r7, #11]
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002aae:	9301      	str	r3, [sp, #4]
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	9300      	str	r3, [sp, #0]
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	2178      	movs	r1, #120	; 0x78
 8002ab8:	4821      	ldr	r0, [pc, #132]	; (8002b40 <FreqMenu_DrawFreqPresetMenu+0x14fc>)
 8002aba:	f008 fbe9 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8002abe:	7abb      	ldrb	r3, [r7, #10]
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ac6:	9301      	str	r3, [sp, #4]
 8002ac8:	2302      	movs	r3, #2
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	2300      	movs	r3, #0
 8002ace:	2178      	movs	r1, #120	; 0x78
 8002ad0:	481c      	ldr	r0, [pc, #112]	; (8002b44 <FreqMenu_DrawFreqPresetMenu+0x1500>)
 8002ad2:	f008 fbdd 	bl	800b290 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, WHITE, 2, BLACK);
 8002ad6:	7a7b      	ldrb	r3, [r7, #9]
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	2300      	movs	r3, #0
 8002adc:	9301      	str	r3, [sp, #4]
 8002ade:	2302      	movs	r3, #2
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ae6:	2178      	movs	r1, #120	; 0x78
 8002ae8:	4817      	ldr	r0, [pc, #92]	; (8002b48 <FreqMenu_DrawFreqPresetMenu+0x1504>)
 8002aea:	f008 fbd1 	bl	800b290 <ILI9341_Draw_Text>
			break;
 8002aee:	bf00      	nop
 8002af0:	e00b      	b.n	8002b0a <FreqMenu_DrawFreqPresetMenu+0x14c6>
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		10, 180, RED, 1, BLACK);
 8002af2:	2300      	movs	r3, #0
 8002af4:	9301      	str	r3, [sp, #4]
 8002af6:	2301      	movs	r3, #1
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002afe:	22b4      	movs	r2, #180	; 0xb4
 8002b00:	210a      	movs	r1, #10
 8002b02:	4812      	ldr	r0, [pc, #72]	; (8002b4c <FreqMenu_DrawFreqPresetMenu+0x1508>)
 8002b04:	f008 fbc4 	bl	800b290 <ILI9341_Draw_Text>
}
 8002b08:	e7ff      	b.n	8002b0a <FreqMenu_DrawFreqPresetMenu+0x14c6>
 8002b0a:	bf00      	nop
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	0800e8b4 	.word	0x0800e8b4
 8002b18:	0800e8bc 	.word	0x0800e8bc
 8002b1c:	0800e8c4 	.word	0x0800e8c4
 8002b20:	0800e8cc 	.word	0x0800e8cc
 8002b24:	0800e8d4 	.word	0x0800e8d4
 8002b28:	0800e8dc 	.word	0x0800e8dc
 8002b2c:	0800e8e4 	.word	0x0800e8e4
 8002b30:	0800e8ec 	.word	0x0800e8ec
 8002b34:	0800e8f4 	.word	0x0800e8f4
 8002b38:	0800e8fc 	.word	0x0800e8fc
 8002b3c:	0800e904 	.word	0x0800e904
 8002b40:	0800e90c 	.word	0x0800e90c
 8002b44:	0800e914 	.word	0x0800e914
 8002b48:	0800e91c 	.word	0x0800e91c
 8002b4c:	0800e928 	.word	0x0800e928

08002b50 <FreqMenu_DrawFreqAdjustMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawFreqAdjustMenu()
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("Output Signal Freq: ", 	10, 150, BLACK, 1, WHITE);
 8002b56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b5a:	9301      	str	r3, [sp, #4]
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	9300      	str	r3, [sp, #0]
 8002b60:	2300      	movs	r3, #0
 8002b62:	2296      	movs	r2, #150	; 0x96
 8002b64:	210a      	movs	r1, #10
 8002b66:	4811      	ldr	r0, [pc, #68]	; (8002bac <FreqMenu_DrawFreqAdjustMenu+0x5c>)
 8002b68:	f008 fb92 	bl	800b290 <ILI9341_Draw_Text>

	char freq[6] = "";
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	603b      	str	r3, [r7, #0]
 8002b70:	2300      	movs	r3, #0
 8002b72:	80bb      	strh	r3, [r7, #4]
	//snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
	if(DM_AddDigitPadding((uint16_t)FreqO_GetOutputFreq(), freq, sizeof(freq)) == 0)
 8002b74:	f000 fd64 	bl	8003640 <FreqO_GetOutputFreq>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	4639      	mov	r1, r7
 8002b7e:	2206      	movs	r2, #6
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fe fcbb 	bl	80014fc <DM_AddDigitPadding>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d10a      	bne.n	8002ba2 <FreqMenu_DrawFreqAdjustMenu+0x52>
		ILI9341_Draw_Text(freq, 250, 150, WHITE, 1, BLACK);
 8002b8c:	4638      	mov	r0, r7
 8002b8e:	2300      	movs	r3, #0
 8002b90:	9301      	str	r3, [sp, #4]
 8002b92:	2301      	movs	r3, #1
 8002b94:	9300      	str	r3, [sp, #0]
 8002b96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b9a:	2296      	movs	r2, #150	; 0x96
 8002b9c:	21fa      	movs	r1, #250	; 0xfa
 8002b9e:	f008 fb77 	bl	800b290 <ILI9341_Draw_Text>


}
 8002ba2:	bf00      	nop
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	0800e958 	.word	0x0800e958

08002bb0 <FreqMenu_DrawFreqSweepMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawFreqSweepMenu()
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("TODO: Freq Sweep Menu", 	10, 120, BLACK, 2, WHITE);
 8002bb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bba:	9301      	str	r3, [sp, #4]
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	2278      	movs	r2, #120	; 0x78
 8002bc4:	210a      	movs	r1, #10
 8002bc6:	4803      	ldr	r0, [pc, #12]	; (8002bd4 <FreqMenu_DrawFreqSweepMenu+0x24>)
 8002bc8:	f008 fb62 	bl	800b290 <ILI9341_Draw_Text>




}
 8002bcc:	bf00      	nop
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	0800e970 	.word	0x0800e970

08002bd8 <EM_ProcessEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_ProcessEvent()
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0

	switch(eNextState)
 8002bdc:	4b79      	ldr	r3, [pc, #484]	; (8002dc4 <EM_ProcessEvent+0x1ec>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b07      	cmp	r3, #7
 8002be2:	f200 80db 	bhi.w	8002d9c <EM_ProcessEvent+0x1c4>
 8002be6:	a201      	add	r2, pc, #4	; (adr r2, 8002bec <EM_ProcessEvent+0x14>)
 8002be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bec:	08002c0d 	.word	0x08002c0d
 8002bf0:	08002c61 	.word	0x08002c61
 8002bf4:	08002c8d 	.word	0x08002c8d
 8002bf8:	08002cb7 	.word	0x08002cb7
 8002bfc:	08002d09 	.word	0x08002d09
 8002c00:	08002d33 	.word	0x08002d33
 8002c04:	08002d5d 	.word	0x08002d5d
 8002c08:	08002d73 	.word	0x08002d73
	{
		case Idle_State:

			if(eNewEvent == evBlueBtn)
 8002c0c:	4b6e      	ldr	r3, [pc, #440]	; (8002dc8 <EM_ProcessEvent+0x1f0>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d105      	bne.n	8002c20 <EM_ProcessEvent+0x48>
			{
				eNextState = _FuncMenuEntryHandler();
 8002c14:	f000 f8da 	bl	8002dcc <_FuncMenuEntryHandler>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	4b69      	ldr	r3, [pc, #420]	; (8002dc4 <EM_ProcessEvent+0x1ec>)
 8002c1e:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8002c20:	4b69      	ldr	r3, [pc, #420]	; (8002dc8 <EM_ProcessEvent+0x1f0>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d105      	bne.n	8002c34 <EM_ProcessEvent+0x5c>
			{
				eNextState = _FreqMainMenuEntryHandler();
 8002c28:	f000 f9b8 	bl	8002f9c <_FreqMainMenuEntryHandler>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	461a      	mov	r2, r3
 8002c30:	4b64      	ldr	r3, [pc, #400]	; (8002dc4 <EM_ProcessEvent+0x1ec>)
 8002c32:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8002c34:	4b64      	ldr	r3, [pc, #400]	; (8002dc8 <EM_ProcessEvent+0x1f0>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b03      	cmp	r3, #3
 8002c3a:	d105      	bne.n	8002c48 <EM_ProcessEvent+0x70>
			{
				eNextState = _GainMenuEntryHandler();
 8002c3c:	f000 f91a 	bl	8002e74 <_GainMenuEntryHandler>
 8002c40:	4603      	mov	r3, r0
 8002c42:	461a      	mov	r2, r3
 8002c44:	4b5f      	ldr	r3, [pc, #380]	; (8002dc4 <EM_ProcessEvent+0x1ec>)
 8002c46:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 8002c48:	4b5f      	ldr	r3, [pc, #380]	; (8002dc8 <EM_ProcessEvent+0x1f0>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b04      	cmp	r3, #4
 8002c4e:	f040 80a7 	bne.w	8002da0 <EM_ProcessEvent+0x1c8>
			{
				eNextState = _BiasMenuEntryHandler();
 8002c52:	f000 f95d 	bl	8002f10 <_BiasMenuEntryHandler>
 8002c56:	4603      	mov	r3, r0
 8002c58:	461a      	mov	r2, r3
 8002c5a:	4b5a      	ldr	r3, [pc, #360]	; (8002dc4 <EM_ProcessEvent+0x1ec>)
 8002c5c:	701a      	strb	r2, [r3, #0]
			}

			break;
 8002c5e:	e09f      	b.n	8002da0 <EM_ProcessEvent+0x1c8>

		case Func_Menu_State:

			if(eNewEvent == evEncoderSet)
 8002c60:	4b59      	ldr	r3, [pc, #356]	; (8002dc8 <EM_ProcessEvent+0x1f0>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b05      	cmp	r3, #5
 8002c66:	d105      	bne.n	8002c74 <EM_ProcessEvent+0x9c>
			{
				eNextState = _FuncMenuInputHandler();
 8002c68:	f000 f8d4 	bl	8002e14 <_FuncMenuInputHandler>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	461a      	mov	r2, r3
 8002c70:	4b54      	ldr	r3, [pc, #336]	; (8002dc4 <EM_ProcessEvent+0x1ec>)
 8002c72:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8002c74:	4b54      	ldr	r3, [pc, #336]	; (8002dc8 <EM_ProcessEvent+0x1f0>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2b06      	cmp	r3, #6
 8002c7a:	f040 8093 	bne.w	8002da4 <EM_ProcessEvent+0x1cc>
			{
				eNextState = _FuncMenuExitHandler();
 8002c7e:	f000 f8df 	bl	8002e40 <_FuncMenuExitHandler>
 8002c82:	4603      	mov	r3, r0
 8002c84:	461a      	mov	r2, r3
 8002c86:	4b4f      	ldr	r3, [pc, #316]	; (8002dc4 <EM_ProcessEvent+0x1ec>)
 8002c88:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002c8a:	e08b      	b.n	8002da4 <EM_ProcessEvent+0x1cc>

		case Gain_Menu_State:

			if(eNewEvent == evEncoderSet)
 8002c8c:	4b4e      	ldr	r3, [pc, #312]	; (8002dc8 <EM_ProcessEvent+0x1f0>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2b05      	cmp	r3, #5
 8002c92:	d105      	bne.n	8002ca0 <EM_ProcessEvent+0xc8>
			{
				eNextState = _GainMenuInputHandler();
 8002c94:	f000 f912 	bl	8002ebc <_GainMenuInputHandler>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	4b49      	ldr	r3, [pc, #292]	; (8002dc4 <EM_ProcessEvent+0x1ec>)
 8002c9e:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8002ca0:	4b49      	ldr	r3, [pc, #292]	; (8002dc8 <EM_ProcessEvent+0x1f0>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2b06      	cmp	r3, #6
 8002ca6:	d17f      	bne.n	8002da8 <EM_ProcessEvent+0x1d0>
			{
				eNextState = _GainMenuExitHandler();
 8002ca8:	f000 f91e 	bl	8002ee8 <_GainMenuExitHandler>
 8002cac:	4603      	mov	r3, r0
 8002cae:	461a      	mov	r2, r3
 8002cb0:	4b44      	ldr	r3, [pc, #272]	; (8002dc4 <EM_ProcessEvent+0x1ec>)
 8002cb2:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002cb4:	e078      	b.n	8002da8 <EM_ProcessEvent+0x1d0>

			if(eNewEvent == evEncoderSet)
			{
//				eNextState = _FreqMainMenuSetHandler();
			}
			if(eNewEvent == evEncoderPush)
 8002cb6:	4b44      	ldr	r3, [pc, #272]	; (8002dc8 <EM_ProcessEvent+0x1f0>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	2b06      	cmp	r3, #6
 8002cbc:	d105      	bne.n	8002cca <EM_ProcessEvent+0xf2>
			{
				eNextState = _FreqMainMenuExitHandler();
 8002cbe:	f000 f981 	bl	8002fc4 <_FreqMainMenuExitHandler>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	4b3f      	ldr	r3, [pc, #252]	; (8002dc4 <EM_ProcessEvent+0x1ec>)
 8002cc8:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBlueBtn)
 8002cca:	4b3f      	ldr	r3, [pc, #252]	; (8002dc8 <EM_ProcessEvent+0x1f0>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d105      	bne.n	8002cde <EM_ProcessEvent+0x106>
			{
//				FreqO_ApplyPreset(FPRESET_1HZ);
				eNextState = _FreqPresetMenuEntryHandler();
 8002cd2:	f000 f991 	bl	8002ff8 <_FreqPresetMenuEntryHandler>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4b3a      	ldr	r3, [pc, #232]	; (8002dc4 <EM_ProcessEvent+0x1ec>)
 8002cdc:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8002cde:	4b3a      	ldr	r3, [pc, #232]	; (8002dc8 <EM_ProcessEvent+0x1f0>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d105      	bne.n	8002cf2 <EM_ProcessEvent+0x11a>
			{
//				FreqO_ApplyPreset(FPRESET_100HZ);
				eNextState = _FreqAdjustMenuEntryHandler();
 8002ce6:	f000 f9d9 	bl	800309c <_FreqAdjustMenuEntryHandler>
 8002cea:	4603      	mov	r3, r0
 8002cec:	461a      	mov	r2, r3
 8002cee:	4b35      	ldr	r3, [pc, #212]	; (8002dc4 <EM_ProcessEvent+0x1ec>)
 8002cf0:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8002cf2:	4b35      	ldr	r3, [pc, #212]	; (8002dc8 <EM_ProcessEvent+0x1f0>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b03      	cmp	r3, #3
 8002cf8:	d158      	bne.n	8002dac <EM_ProcessEvent+0x1d4>
			{
//				FreqO_ApplyPreset(FPRESET_1KHZ);
				eNextState = _FreqSweepMenuEntryHandler();
 8002cfa:	f000 fa13 	bl	8003124 <_FreqSweepMenuEntryHandler>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	461a      	mov	r2, r3
 8002d02:	4b30      	ldr	r3, [pc, #192]	; (8002dc4 <EM_ProcessEvent+0x1ec>)
 8002d04:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
			{
				// No menu action
			}
			break;
 8002d06:	e051      	b.n	8002dac <EM_ProcessEvent+0x1d4>

		case Freq_Preset_Menu_State:
			if(eNewEvent == evEncoderSet)
 8002d08:	4b2f      	ldr	r3, [pc, #188]	; (8002dc8 <EM_ProcessEvent+0x1f0>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b05      	cmp	r3, #5
 8002d0e:	d105      	bne.n	8002d1c <EM_ProcessEvent+0x144>
			{
				eNextState = _FreqPresetMenuInputHandler();
 8002d10:	f000 f99c 	bl	800304c <_FreqPresetMenuInputHandler>
 8002d14:	4603      	mov	r3, r0
 8002d16:	461a      	mov	r2, r3
 8002d18:	4b2a      	ldr	r3, [pc, #168]	; (8002dc4 <EM_ProcessEvent+0x1ec>)
 8002d1a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8002d1c:	4b2a      	ldr	r3, [pc, #168]	; (8002dc8 <EM_ProcessEvent+0x1f0>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b06      	cmp	r3, #6
 8002d22:	d145      	bne.n	8002db0 <EM_ProcessEvent+0x1d8>
			{
				eNextState = _FreqPresetMenuExitHandler();
 8002d24:	f000 f9a8 	bl	8003078 <_FreqPresetMenuExitHandler>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	4b25      	ldr	r3, [pc, #148]	; (8002dc4 <EM_ProcessEvent+0x1ec>)
 8002d2e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002d30:	e03e      	b.n	8002db0 <EM_ProcessEvent+0x1d8>

		case Freq_Adjust_Menu_State:
			if(eNewEvent == evEncoderSet)
 8002d32:	4b25      	ldr	r3, [pc, #148]	; (8002dc8 <EM_ProcessEvent+0x1f0>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	2b05      	cmp	r3, #5
 8002d38:	d105      	bne.n	8002d46 <EM_ProcessEvent+0x16e>
			{
				eNextState = _FreqAdjustMenuInputHandler();
 8002d3a:	f000 f9cf 	bl	80030dc <_FreqAdjustMenuInputHandler>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	461a      	mov	r2, r3
 8002d42:	4b20      	ldr	r3, [pc, #128]	; (8002dc4 <EM_ProcessEvent+0x1ec>)
 8002d44:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8002d46:	4b20      	ldr	r3, [pc, #128]	; (8002dc8 <EM_ProcessEvent+0x1f0>)
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b06      	cmp	r3, #6
 8002d4c:	d132      	bne.n	8002db4 <EM_ProcessEvent+0x1dc>
			{
				eNextState = _FreqAdjustMenuExitHandler();
 8002d4e:	f000 f9d7 	bl	8003100 <_FreqAdjustMenuExitHandler>
 8002d52:	4603      	mov	r3, r0
 8002d54:	461a      	mov	r2, r3
 8002d56:	4b1b      	ldr	r3, [pc, #108]	; (8002dc4 <EM_ProcessEvent+0x1ec>)
 8002d58:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002d5a:	e02b      	b.n	8002db4 <EM_ProcessEvent+0x1dc>
		case Freq_Sweep_Menu_State:
			if(eNewEvent == evEncoderSet)
			{
//				eNextState = _FreqMainMenuSetHandler();
			}
			if(eNewEvent == evEncoderPush)
 8002d5c:	4b1a      	ldr	r3, [pc, #104]	; (8002dc8 <EM_ProcessEvent+0x1f0>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b06      	cmp	r3, #6
 8002d62:	d129      	bne.n	8002db8 <EM_ProcessEvent+0x1e0>
			{
				eNextState = _FreqSweepMenuExitHandler();
 8002d64:	f000 f9fa 	bl	800315c <_FreqSweepMenuExitHandler>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	4b15      	ldr	r3, [pc, #84]	; (8002dc4 <EM_ProcessEvent+0x1ec>)
 8002d6e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002d70:	e022      	b.n	8002db8 <EM_ProcessEvent+0x1e0>

		case Bias_Menu_State:
			if(eNewEvent == evEncoderSet)
 8002d72:	4b15      	ldr	r3, [pc, #84]	; (8002dc8 <EM_ProcessEvent+0x1f0>)
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	2b05      	cmp	r3, #5
 8002d78:	d105      	bne.n	8002d86 <EM_ProcessEvent+0x1ae>
			{
				eNextState = _BiasMenuInputHandler();
 8002d7a:	f000 f8e3 	bl	8002f44 <_BiasMenuInputHandler>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	461a      	mov	r2, r3
 8002d82:	4b10      	ldr	r3, [pc, #64]	; (8002dc4 <EM_ProcessEvent+0x1ec>)
 8002d84:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8002d86:	4b10      	ldr	r3, [pc, #64]	; (8002dc8 <EM_ProcessEvent+0x1f0>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	2b06      	cmp	r3, #6
 8002d8c:	d116      	bne.n	8002dbc <EM_ProcessEvent+0x1e4>
			{
				eNextState = _BiasMenuExitHandler();
 8002d8e:	f000 f8eb 	bl	8002f68 <_BiasMenuExitHandler>
 8002d92:	4603      	mov	r3, r0
 8002d94:	461a      	mov	r2, r3
 8002d96:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <EM_ProcessEvent+0x1ec>)
 8002d98:	701a      	strb	r2, [r3, #0]
			}

			break;
 8002d9a:	e00f      	b.n	8002dbc <EM_ProcessEvent+0x1e4>

		default:
			break;
 8002d9c:	bf00      	nop
 8002d9e:	e00e      	b.n	8002dbe <EM_ProcessEvent+0x1e6>
			break;
 8002da0:	bf00      	nop
 8002da2:	e00c      	b.n	8002dbe <EM_ProcessEvent+0x1e6>
			break;
 8002da4:	bf00      	nop
 8002da6:	e00a      	b.n	8002dbe <EM_ProcessEvent+0x1e6>
			break;
 8002da8:	bf00      	nop
 8002daa:	e008      	b.n	8002dbe <EM_ProcessEvent+0x1e6>
			break;
 8002dac:	bf00      	nop
 8002dae:	e006      	b.n	8002dbe <EM_ProcessEvent+0x1e6>
			break;
 8002db0:	bf00      	nop
 8002db2:	e004      	b.n	8002dbe <EM_ProcessEvent+0x1e6>
			break;
 8002db4:	bf00      	nop
 8002db6:	e002      	b.n	8002dbe <EM_ProcessEvent+0x1e6>
			break;
 8002db8:	bf00      	nop
 8002dba:	e000      	b.n	8002dbe <EM_ProcessEvent+0x1e6>
			break;
 8002dbc:	bf00      	nop
	}

}
 8002dbe:	bf00      	nop
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	20001418 	.word	0x20001418
 8002dc8:	20001419 	.word	0x20001419

08002dcc <_FuncMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FuncMenuEntryHandler(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FunctionMenu Event captured\n");
 8002dd2:	480e      	ldr	r0, [pc, #56]	; (8002e0c <_FuncMenuEntryHandler+0x40>)
 8002dd4:	f009 fd46 	bl	800c864 <puts>
#endif

	_RefreshDisplay();
 8002dd8:	f000 f9e8 	bl	80031ac <_RefreshDisplay>

	DM_ShowFuncSelectMenu(ENABLE_FUNCMENU);
 8002ddc:	2001      	movs	r0, #1
 8002dde:	f7fe f8dd 	bl	8000f9c <DM_ShowFuncSelectMenu>

	Func_Preset_Encoder_Pos_t *pFuncPresetTmp =  FuncO_GetFPresetObject();
 8002de2:	f000 fd29 	bl	8003838 <FuncO_GetFPresetObject>
 8002de6:	6078      	str	r0, [r7, #4]
	if(pFuncPresetTmp)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d009      	beq.n	8002e02 <_FuncMenuEntryHandler+0x36>
	{
		ENCODER_TIMER->CNT = pFuncPresetTmp->epos;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	785a      	ldrb	r2, [r3, #1]
 8002df2:	4b07      	ldr	r3, [pc, #28]	; (8002e10 <_FuncMenuEntryHandler+0x44>)
 8002df4:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FuncO_GetFuncPresetEncoderRange();
 8002df6:	f000 fd2b 	bl	8003850 <FuncO_GetFuncPresetEncoderRange>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	4b04      	ldr	r3, [pc, #16]	; (8002e10 <_FuncMenuEntryHandler+0x44>)
 8002e00:	62da      	str	r2, [r3, #44]	; 0x2c
	}


	return Func_Menu_State;
 8002e02:	2301      	movs	r3, #1
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	0800e988 	.word	0x0800e988
 8002e10:	40012c00 	.word	0x40012c00

08002e14 <_FuncMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FuncMenuInputHandler(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FunctionAdjust Event captured\n");
 8002e18:	4807      	ldr	r0, [pc, #28]	; (8002e38 <_FuncMenuInputHandler+0x24>)
 8002e1a:	f009 fd23 	bl	800c864 <puts>
#endif


	FuncO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8002e1e:	2001      	movs	r0, #1
 8002e20:	f000 fe76 	bl	8003b10 <SM_GetEncoderValue>
 8002e24:	4603      	mov	r3, r0
 8002e26:	4618      	mov	r0, r3
 8002e28:	f000 fc16 	bl	8003658 <FuncO_ModifyOutput>
	eNewEvent = evBlueBtn;
 8002e2c:	4b03      	ldr	r3, [pc, #12]	; (8002e3c <_FuncMenuInputHandler+0x28>)
 8002e2e:	2201      	movs	r2, #1
 8002e30:	701a      	strb	r2, [r3, #0]
	return Func_Menu_State;
 8002e32:	2301      	movs	r3, #1
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	0800e9a4 	.word	0x0800e9a4
 8002e3c:	20001419 	.word	0x20001419

08002e40 <_FuncMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FuncMenuExitHandler()
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitFuncMenu Event captured\n");
 8002e44:	4808      	ldr	r0, [pc, #32]	; (8002e68 <_FuncMenuExitHandler+0x28>)
 8002e46:	f009 fd0d 	bl	800c864 <puts>
#endif

	// disable the menu

	DM_ShowFuncSelectMenu(DISABLE_FUNCMENU);
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	f7fe f8a6 	bl	8000f9c <DM_ShowFuncSelectMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8002e50:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <_FuncMenuExitHandler+0x2c>)
 8002e52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e56:	62da      	str	r2, [r3, #44]	; 0x2c

	_RefreshDisplay();
 8002e58:	f000 f9a8 	bl	80031ac <_RefreshDisplay>

	eNewEvent = evIdle;
 8002e5c:	4b04      	ldr	r3, [pc, #16]	; (8002e70 <_FuncMenuExitHandler+0x30>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	0800e9c4 	.word	0x0800e9c4
 8002e6c:	40012c00 	.word	0x40012c00
 8002e70:	20001419 	.word	0x20001419

08002e74 <_GainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _GainMenuEntryHandler()
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("GainMenu Event captured\n");
 8002e7a:	480e      	ldr	r0, [pc, #56]	; (8002eb4 <_GainMenuEntryHandler+0x40>)
 8002e7c:	f009 fcf2 	bl	800c864 <puts>
#endif

	_RefreshDisplay();
 8002e80:	f000 f994 	bl	80031ac <_RefreshDisplay>

	DM_ShowGainSelectMenu(ENABLE_GAINMENU);
 8002e84:	2001      	movs	r0, #1
 8002e86:	f7fe fa75 	bl	8001374 <DM_ShowGainSelectMenu>

	Gain_Preset_Encoder_Pos_t *pGainPresetTmp =  GO_GetGPresetObject();
 8002e8a:	f000 fe29 	bl	8003ae0 <GO_GetGPresetObject>
 8002e8e:	6078      	str	r0, [r7, #4]
	if(pGainPresetTmp)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d009      	beq.n	8002eaa <_GainMenuEntryHandler+0x36>
	{
		ENCODER_TIMER->CNT = pGainPresetTmp->epos;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	789a      	ldrb	r2, [r3, #2]
 8002e9a:	4b07      	ldr	r3, [pc, #28]	; (8002eb8 <_GainMenuEntryHandler+0x44>)
 8002e9c:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = GO_GetGainPresetEncoderRange();
 8002e9e:	f000 fe2b 	bl	8003af8 <GO_GetGainPresetEncoderRange>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4b04      	ldr	r3, [pc, #16]	; (8002eb8 <_GainMenuEntryHandler+0x44>)
 8002ea8:	62da      	str	r2, [r3, #44]	; 0x2c
	}


	return Gain_Menu_State;
 8002eaa:	2302      	movs	r3, #2
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	0800e9e0 	.word	0x0800e9e0
 8002eb8:	40012c00 	.word	0x40012c00

08002ebc <_GainMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _GainMenuInputHandler()
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("GainSet Event captured\n");
 8002ec0:	4807      	ldr	r0, [pc, #28]	; (8002ee0 <_GainMenuInputHandler+0x24>)
 8002ec2:	f009 fccf 	bl	800c864 <puts>
#endif

	GO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8002ec6:	2001      	movs	r0, #1
 8002ec8:	f000 fe22 	bl	8003b10 <SM_GetEncoderValue>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 fcca 	bl	8003868 <GO_ModifyOutput>

	eNewEvent = evYellowBtn;
 8002ed4:	4b03      	ldr	r3, [pc, #12]	; (8002ee4 <_GainMenuInputHandler+0x28>)
 8002ed6:	2203      	movs	r2, #3
 8002ed8:	701a      	strb	r2, [r3, #0]
	return Gain_Menu_State;
 8002eda:	2302      	movs	r3, #2
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	0800e9f8 	.word	0x0800e9f8
 8002ee4:	20001419 	.word	0x20001419

08002ee8 <_GainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _GainMenuExitHandler()
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitGainMenu Event captured\n");
 8002eec:	4806      	ldr	r0, [pc, #24]	; (8002f08 <_GainMenuExitHandler+0x20>)
 8002eee:	f009 fcb9 	bl	800c864 <puts>
#endif


	// disable the menu
	DM_ShowGainSelectMenu(DISABLE_GAINMENU);
 8002ef2:	2000      	movs	r0, #0
 8002ef4:	f7fe fa3e 	bl	8001374 <DM_ShowGainSelectMenu>

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	_RefreshDisplay();
 8002ef8:	f000 f958 	bl	80031ac <_RefreshDisplay>

	eNewEvent = evIdle;
 8002efc:	4b03      	ldr	r3, [pc, #12]	; (8002f0c <_GainMenuExitHandler+0x24>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	0800ea10 	.word	0x0800ea10
 8002f0c:	20001419 	.word	0x20001419

08002f10 <_BiasMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _BiasMenuEntryHandler()
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("BiasMenu Event captured\n");
 8002f14:	4809      	ldr	r0, [pc, #36]	; (8002f3c <_BiasMenuEntryHandler+0x2c>)
 8002f16:	f009 fca5 	bl	800c864 <puts>
#endif

	_RefreshDisplay();
 8002f1a:	f000 f947 	bl	80031ac <_RefreshDisplay>

	DM_ShowBiasSelectMenu(ENABLE_BIASMENU);
 8002f1e:	2001      	movs	r0, #1
 8002f20:	f7fe fa5c 	bl	80013dc <DM_ShowBiasSelectMenu>

	// set the rotary encoder limits to 0-20 for this menu


	ENCODER_TIMER->ARR = BIAS_MAX;
 8002f24:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <_BiasMenuEntryHandler+0x30>)
 8002f26:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002f2a:	62da      	str	r2, [r3, #44]	; 0x2c
	ENCODER_TIMER->CNT = BIAS_CENTER;
 8002f2c:	4b04      	ldr	r3, [pc, #16]	; (8002f40 <_BiasMenuEntryHandler+0x30>)
 8002f2e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002f32:	625a      	str	r2, [r3, #36]	; 0x24

	return Bias_Menu_State;
 8002f34:	2307      	movs	r3, #7
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	0800ea2c 	.word	0x0800ea2c
 8002f40:	40012c00 	.word	0x40012c00

08002f44 <_BiasMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _BiasMenuInputHandler()
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("BiasSet Event captured\n");
 8002f48:	4805      	ldr	r0, [pc, #20]	; (8002f60 <_BiasMenuInputHandler+0x1c>)
 8002f4a:	f009 fc8b 	bl	800c864 <puts>
#endif

	BO_ModifyOutput();
 8002f4e:	f000 f947 	bl	80031e0 <BO_ModifyOutput>

	eNewEvent = evRedBtn;
 8002f52:	4b04      	ldr	r3, [pc, #16]	; (8002f64 <_BiasMenuInputHandler+0x20>)
 8002f54:	2204      	movs	r2, #4
 8002f56:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8002f58:	2307      	movs	r3, #7
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	0800ea44 	.word	0x0800ea44
 8002f64:	20001419 	.word	0x20001419

08002f68 <_BiasMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _BiasMenuExitHandler()
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitBiasMenu Event captured\n");
 8002f6c:	4808      	ldr	r0, [pc, #32]	; (8002f90 <_BiasMenuExitHandler+0x28>)
 8002f6e:	f009 fc79 	bl	800c864 <puts>
#endif


	// disable the menu
	DM_ShowBiasSelectMenu(DISABLE_BIASMENU);
 8002f72:	2000      	movs	r0, #0
 8002f74:	f7fe fa32 	bl	80013dc <DM_ShowBiasSelectMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8002f78:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <_BiasMenuExitHandler+0x2c>)
 8002f7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f7e:	62da      	str	r2, [r3, #44]	; 0x2c

	_RefreshDisplay();
 8002f80:	f000 f914 	bl	80031ac <_RefreshDisplay>

	eNewEvent = evIdle;
 8002f84:	4b04      	ldr	r3, [pc, #16]	; (8002f98 <_BiasMenuExitHandler+0x30>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	0800ea5c 	.word	0x0800ea5c
 8002f94:	40012c00 	.word	0x40012c00
 8002f98:	20001419 	.word	0x20001419

08002f9c <_FreqMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqMainMenuEntryHandler()
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqMenu Event captured\n");
 8002fa0:	4806      	ldr	r0, [pc, #24]	; (8002fbc <_FreqMainMenuEntryHandler+0x20>)
 8002fa2:	f009 fc5f 	bl	800c864 <puts>
#endif

	_RefreshDisplay();
 8002fa6:	f000 f901 	bl	80031ac <_RefreshDisplay>

	DM_ShowFreqMenu(ENABLE_FREQ_MAIN_MENU);
 8002faa:	2001      	movs	r0, #1
 8002fac:	f7fe fa06 	bl	80013bc <DM_ShowFreqMenu>
	// set the rotary encoder limits to 0-? for this menu
//	ENCODER_TIMER->CNT = 0;
//	ENCODER_TIMER->ARR = 56;

	// stay in this state
	eNewEvent = evIdle;
 8002fb0:	4b03      	ldr	r3, [pc, #12]	; (8002fc0 <_FreqMainMenuEntryHandler+0x24>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8002fb6:	2303      	movs	r3, #3
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	0800ea78 	.word	0x0800ea78
 8002fc0:	20001419 	.word	0x20001419

08002fc4 <_FreqMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqMainMenuExitHandler()
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Exit Freq Main Menu Event captured\n");
 8002fc8:	4808      	ldr	r0, [pc, #32]	; (8002fec <_FreqMainMenuExitHandler+0x28>)
 8002fca:	f009 fc4b 	bl	800c864 <puts>
#endif


	// disable the menu
	DM_ShowFreqMenu(DISABLE_FREQ_MENU);
 8002fce:	2000      	movs	r0, #0
 8002fd0:	f7fe f9f4 	bl	80013bc <DM_ShowFreqMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8002fd4:	4b06      	ldr	r3, [pc, #24]	; (8002ff0 <_FreqMainMenuExitHandler+0x2c>)
 8002fd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fda:	62da      	str	r2, [r3, #44]	; 0x2c

	_RefreshDisplay();
 8002fdc:	f000 f8e6 	bl	80031ac <_RefreshDisplay>

	eNewEvent = evIdle;
 8002fe0:	4b04      	ldr	r3, [pc, #16]	; (8002ff4 <_FreqMainMenuExitHandler+0x30>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	0800eaa8 	.word	0x0800eaa8
 8002ff0:	40012c00 	.word	0x40012c00
 8002ff4:	20001419 	.word	0x20001419

08002ff8 <_FreqPresetMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqPresetMenuEntryHandler()
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Freq Preset Menu Entry Event captured\n");
 8002ffe:	4810      	ldr	r0, [pc, #64]	; (8003040 <_FreqPresetMenuEntryHandler+0x48>)
 8003000:	f009 fc30 	bl	800c864 <puts>
#endif

	_RefreshDisplay();
 8003004:	f000 f8d2 	bl	80031ac <_RefreshDisplay>

	DM_ShowFreqMenu(ENABLE_FREQ_PRESET_MENU);
 8003008:	2002      	movs	r0, #2
 800300a:	f7fe f9d7 	bl	80013bc <DM_ShowFreqMenu>

	Freq_Preset_Encoder_Pos_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 800300e:	f000 fadd 	bl	80035cc <FreqO_GetFPresetObject>
 8003012:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d009      	beq.n	800302e <_FreqPresetMenuEntryHandler+0x36>
	{
		ENCODER_TIMER->CNT = pFreqPresetTmp->epos;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	791a      	ldrb	r2, [r3, #4]
 800301e:	4b09      	ldr	r3, [pc, #36]	; (8003044 <_FreqPresetMenuEntryHandler+0x4c>)
 8003020:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FreqO_GetFreqPresetEncoderRange();
 8003022:	f000 fb01 	bl	8003628 <FreqO_GetFreqPresetEncoderRange>
 8003026:	4603      	mov	r3, r0
 8003028:	461a      	mov	r2, r3
 800302a:	4b06      	ldr	r3, [pc, #24]	; (8003044 <_FreqPresetMenuEntryHandler+0x4c>)
 800302c:	62da      	str	r2, [r3, #44]	; 0x2c
	}


	// stay in this state
	eNewEvent = evIdle;
 800302e:	4b06      	ldr	r3, [pc, #24]	; (8003048 <_FreqPresetMenuEntryHandler+0x50>)
 8003030:	2200      	movs	r2, #0
 8003032:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8003034:	2304      	movs	r3, #4
}
 8003036:	4618      	mov	r0, r3
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	0800eacc 	.word	0x0800eacc
 8003044:	40012c00 	.word	0x40012c00
 8003048:	20001419 	.word	0x20001419

0800304c <_FreqPresetMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqPresetMenuInputHandler()
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqSet Event captured\n");
 8003050:	4807      	ldr	r0, [pc, #28]	; (8003070 <_FreqPresetMenuInputHandler+0x24>)
 8003052:	f009 fc07 	bl	800c864 <puts>
#endif

	FreqO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8003056:	2001      	movs	r0, #1
 8003058:	f000 fd5a 	bl	8003b10 <SM_GetEncoderValue>
 800305c:	4603      	mov	r3, r0
 800305e:	4618      	mov	r0, r3
 8003060:	f000 f9c8 	bl	80033f4 <FreqO_ModifyOutput>

	// stay in this state
	eNewEvent = evIdle;
 8003064:	4b03      	ldr	r3, [pc, #12]	; (8003074 <_FreqPresetMenuInputHandler+0x28>)
 8003066:	2200      	movs	r2, #0
 8003068:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 800306a:	2304      	movs	r3, #4
}
 800306c:	4618      	mov	r0, r3
 800306e:	bd80      	pop	{r7, pc}
 8003070:	0800ea90 	.word	0x0800ea90
 8003074:	20001419 	.word	0x20001419

08003078 <_FreqPresetMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqPresetMenuExitHandler()
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Exit Freq Menu Event captured\n");
 800307c:	4805      	ldr	r0, [pc, #20]	; (8003094 <_FreqPresetMenuExitHandler+0x1c>)
 800307e:	f009 fbf1 	bl	800c864 <puts>
#endif


	// disable the menu
	DM_ShowFreqMenu(DISABLE_FREQ_MENU);
 8003082:	2000      	movs	r0, #0
 8003084:	f7fe f99a 	bl	80013bc <DM_ShowFreqMenu>
	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	// back to main freq menu
	eNewEvent = evGreenBtn;
 8003088:	4b03      	ldr	r3, [pc, #12]	; (8003098 <_FreqPresetMenuExitHandler+0x20>)
 800308a:	2202      	movs	r2, #2
 800308c:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	bd80      	pop	{r7, pc}
 8003094:	0800eaf4 	.word	0x0800eaf4
 8003098:	20001419 	.word	0x20001419

0800309c <_FreqAdjustMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqAdjustMenuEntryHandler()
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Freq Adjust Menu Event captured\n");
 80030a0:	480a      	ldr	r0, [pc, #40]	; (80030cc <_FreqAdjustMenuEntryHandler+0x30>)
 80030a2:	f009 fbdf 	bl	800c864 <puts>
#endif

	_RefreshDisplay();
 80030a6:	f000 f881 	bl	80031ac <_RefreshDisplay>

	DM_ShowFreqMenu(ENABLE_FREQ_ADJUST_MENU);
 80030aa:	2003      	movs	r0, #3
 80030ac:	f7fe f986 	bl	80013bc <DM_ShowFreqMenu>

	// set the rotary encoder limits to 0-? for this menu
	ENCODER_TIMER->CNT = TIM8->ARR;
 80030b0:	4b07      	ldr	r3, [pc, #28]	; (80030d0 <_FreqAdjustMenuEntryHandler+0x34>)
 80030b2:	4a08      	ldr	r2, [pc, #32]	; (80030d4 <_FreqAdjustMenuEntryHandler+0x38>)
 80030b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b6:	6253      	str	r3, [r2, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 80030b8:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <_FreqAdjustMenuEntryHandler+0x38>)
 80030ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030be:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 80030c0:	4b05      	ldr	r3, [pc, #20]	; (80030d8 <_FreqAdjustMenuEntryHandler+0x3c>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 80030c6:	2305      	movs	r3, #5
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	0800eb14 	.word	0x0800eb14
 80030d0:	40013400 	.word	0x40013400
 80030d4:	40012c00 	.word	0x40012c00
 80030d8:	20001419 	.word	0x20001419

080030dc <_FreqAdjustMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqAdjustMenuInputHandler()
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqSet Event captured\n");
 80030e0:	4805      	ldr	r0, [pc, #20]	; (80030f8 <_FreqAdjustMenuInputHandler+0x1c>)
 80030e2:	f009 fbbf 	bl	800c864 <puts>
#endif

	FreqO_AdjustFreq();
 80030e6:	f000 f977 	bl	80033d8 <FreqO_AdjustFreq>

	// stay in this state
	eNewEvent = evIdle;
 80030ea:	4b04      	ldr	r3, [pc, #16]	; (80030fc <_FreqAdjustMenuInputHandler+0x20>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 80030f0:	2305      	movs	r3, #5
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	0800ea90 	.word	0x0800ea90
 80030fc:	20001419 	.word	0x20001419

08003100 <_FreqAdjustMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqAdjustMenuExitHandler()
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Exit Freq Adjust Menu Exit Event captured\n");
 8003104:	4805      	ldr	r0, [pc, #20]	; (800311c <_FreqAdjustMenuExitHandler+0x1c>)
 8003106:	f009 fbad 	bl	800c864 <puts>
#endif


	// disable the menu
	DM_ShowFreqMenu(DISABLE_FREQ_MENU);
 800310a:	2000      	movs	r0, #0
 800310c:	f7fe f956 	bl	80013bc <DM_ShowFreqMenu>
	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	// back to main freq menu
	eNewEvent = evGreenBtn;
 8003110:	4b03      	ldr	r3, [pc, #12]	; (8003120 <_FreqAdjustMenuExitHandler+0x20>)
 8003112:	2202      	movs	r2, #2
 8003114:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	bd80      	pop	{r7, pc}
 800311c:	0800eb34 	.word	0x0800eb34
 8003120:	20001419 	.word	0x20001419

08003124 <_FreqSweepMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqSweepMenuEntryHandler()
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Freq Sweep Menu Event captured\n");
 8003128:	4809      	ldr	r0, [pc, #36]	; (8003150 <_FreqSweepMenuEntryHandler+0x2c>)
 800312a:	f009 fb9b 	bl	800c864 <puts>
#endif

	_RefreshDisplay();
 800312e:	f000 f83d 	bl	80031ac <_RefreshDisplay>

	DM_ShowFreqMenu(ENABLE_FREQ_SWEEP_MENU);
 8003132:	2004      	movs	r0, #4
 8003134:	f7fe f942 	bl	80013bc <DM_ShowFreqMenu>

	// set the rotary encoder limits to 0-? for this menu
	ENCODER_TIMER->CNT = 0;
 8003138:	4b06      	ldr	r3, [pc, #24]	; (8003154 <_FreqSweepMenuEntryHandler+0x30>)
 800313a:	2200      	movs	r2, #0
 800313c:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 56;
 800313e:	4b05      	ldr	r3, [pc, #20]	; (8003154 <_FreqSweepMenuEntryHandler+0x30>)
 8003140:	2238      	movs	r2, #56	; 0x38
 8003142:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 8003144:	4b04      	ldr	r3, [pc, #16]	; (8003158 <_FreqSweepMenuEntryHandler+0x34>)
 8003146:	2200      	movs	r2, #0
 8003148:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 800314a:	2306      	movs	r3, #6
}
 800314c:	4618      	mov	r0, r3
 800314e:	bd80      	pop	{r7, pc}
 8003150:	0800eb60 	.word	0x0800eb60
 8003154:	40012c00 	.word	0x40012c00
 8003158:	20001419 	.word	0x20001419

0800315c <_FreqSweepMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqSweepMenuExitHandler()
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Exit Freq Sweep Menu Exit Event captured\n");
 8003160:	4807      	ldr	r0, [pc, #28]	; (8003180 <_FreqSweepMenuExitHandler+0x24>)
 8003162:	f009 fb7f 	bl	800c864 <puts>
#endif


	// disable the menu
	DM_ShowFreqMenu(DISABLE_FREQ_MENU);
 8003166:	2000      	movs	r0, #0
 8003168:	f7fe f928 	bl	80013bc <DM_ShowFreqMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 800316c:	4b05      	ldr	r3, [pc, #20]	; (8003184 <_FreqSweepMenuExitHandler+0x28>)
 800316e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003172:	62da      	str	r2, [r3, #44]	; 0x2c

	// back to main freq menu
	eNewEvent = evGreenBtn;
 8003174:	4b04      	ldr	r3, [pc, #16]	; (8003188 <_FreqSweepMenuExitHandler+0x2c>)
 8003176:	2202      	movs	r2, #2
 8003178:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	bd80      	pop	{r7, pc}
 8003180:	0800eb80 	.word	0x0800eb80
 8003184:	40012c00 	.word	0x40012c00
 8003188:	20001419 	.word	0x20001419

0800318c <EM_SetNewEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	4603      	mov	r3, r0
 8003194:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 8003196:	4a04      	ldr	r2, [pc, #16]	; (80031a8 <EM_SetNewEvent+0x1c>)
 8003198:	79fb      	ldrb	r3, [r7, #7]
 800319a:	7013      	strb	r3, [r2, #0]
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	20001419 	.word	0x20001419

080031ac <_RefreshDisplay>:
 *	@param None
 *	@retval None
 *
 */
void _RefreshDisplay()
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 80031b0:	4804      	ldr	r0, [pc, #16]	; (80031c4 <_RefreshDisplay+0x18>)
 80031b2:	f006 fc2b 	bl	8009a0c <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 80031b6:	f7fe f95f 	bl	8001478 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 80031ba:	4802      	ldr	r0, [pc, #8]	; (80031c4 <_RefreshDisplay+0x18>)
 80031bc:	f006 fbf0 	bl	80099a0 <HAL_TIM_Base_Start_IT>
}
 80031c0:	bf00      	nop
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	200016c4 	.word	0x200016c4

080031c8 <BO_GetBiasPolarity>:
 *	@param None
 *	@retval None
 *
 */
eBias_Polarity BO_GetBiasPolarity()
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
	return eBiasPolarity;
 80031cc:	4b03      	ldr	r3, [pc, #12]	; (80031dc <BO_GetBiasPolarity+0x14>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	20000008 	.word	0x20000008

080031e0 <BO_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void BO_ModifyOutput()
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
	// apply negative dc bias
	if(SM_GetEncoderValue(ENCODER_REVERSE) < BIAS_CENTER) {
 80031e4:	2001      	movs	r0, #1
 80031e6:	f000 fc93 	bl	8003b10 <SM_GetEncoderValue>
 80031ea:	4603      	mov	r3, r0
 80031ec:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80031f0:	d217      	bcs.n	8003222 <BO_ModifyOutput+0x42>

		eBiasPolarity = INVERSEBIAS;
 80031f2:	4b1c      	ldr	r3, [pc, #112]	; (8003264 <BO_ModifyOutput+0x84>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	701a      	strb	r2, [r3, #0]

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							(BIAS_CENTER - SM_GetEncoderValue(ENCODER_REVERSE)) * BIAS_MAG);
 80031f8:	2001      	movs	r0, #1
 80031fa:	f000 fc89 	bl	8003b10 <SM_GetEncoderValue>
 80031fe:	4603      	mov	r3, r0
 8003200:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 8003204:	4613      	mov	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4413      	add	r3, r2
 800320a:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 800320c:	2200      	movs	r2, #0
 800320e:	2110      	movs	r1, #16
 8003210:	4815      	ldr	r0, [pc, #84]	; (8003268 <BO_ModifyOutput+0x88>)
 8003212:	f004 f92d 	bl	8007470 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 8003216:	2201      	movs	r2, #1
 8003218:	2108      	movs	r1, #8
 800321a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800321e:	f005 f815 	bl	800824c <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(SM_GetEncoderValue(ENCODER_REVERSE) >= BIAS_CENTER) {
 8003222:	2001      	movs	r0, #1
 8003224:	f000 fc74 	bl	8003b10 <SM_GetEncoderValue>
 8003228:	4603      	mov	r3, r0
 800322a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800322e:	d317      	bcc.n	8003260 <BO_ModifyOutput+0x80>

		eBiasPolarity = NORMALBIAS;
 8003230:	4b0c      	ldr	r3, [pc, #48]	; (8003264 <BO_ModifyOutput+0x84>)
 8003232:	2201      	movs	r2, #1
 8003234:	701a      	strb	r2, [r3, #0]

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							(SM_GetEncoderValue(ENCODER_REVERSE) - BIAS_CENTER) * BIAS_MAG);
 8003236:	2001      	movs	r0, #1
 8003238:	f000 fc6a 	bl	8003b10 <SM_GetEncoderValue>
 800323c:	4603      	mov	r3, r0
 800323e:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 8003242:	4613      	mov	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4413      	add	r3, r2
 8003248:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 800324a:	2200      	movs	r2, #0
 800324c:	2110      	movs	r1, #16
 800324e:	4806      	ldr	r0, [pc, #24]	; (8003268 <BO_ModifyOutput+0x88>)
 8003250:	f004 f90e 	bl	8007470 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 8003254:	2200      	movs	r2, #0
 8003256:	2108      	movs	r1, #8
 8003258:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800325c:	f004 fff6 	bl	800824c <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_RESET);
	}
}
 8003260:	bf00      	nop
 8003262:	bd80      	pop	{r7, pc}
 8003264:	20000008 	.word	0x20000008
 8003268:	20001540 	.word	0x20001540

0800326c <BO_GetOutputBias>:
 *	@param None
 *	@retval None
 *
 */
uint32_t BO_GetOutputBias()
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 8003270:	2110      	movs	r1, #16
 8003272:	4803      	ldr	r0, [pc, #12]	; (8003280 <BO_GetOutputBias+0x14>)
 8003274:	f004 f938 	bl	80074e8 <HAL_DAC_GetValue>
 8003278:	4603      	mov	r3, r0
}
 800327a:	4618      	mov	r0, r3
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	20001540 	.word	0x20001540

08003284 <DT_InitRegister>:
 *	@param None
 *	@retval None
 *
 */
void DT_InitRegister()
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 800328a:	2300      	movs	r3, #0
 800328c:	607b      	str	r3, [r7, #4]
 800328e:	e06b      	b.n	8003368 <DT_InitRegister+0xe4>
	{
		// prevent divide by zero (prescaler)
		if(DacTimerReg[i].psc == 0)
 8003290:	493a      	ldr	r1, [pc, #232]	; (800337c <DT_InitRegister+0xf8>)
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	4613      	mov	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	3308      	adds	r3, #8
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d129      	bne.n	80032fa <DT_InitRegister+0x76>
			DacTimerReg[i].arr = ((SM_MCLK / DacTimerReg[i].hertz) / SM_FSAMP) * DacTimerReg[i].error;
 80032a6:	4935      	ldr	r1, [pc, #212]	; (800337c <DT_InitRegister+0xf8>)
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	4613      	mov	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	440b      	add	r3, r1
 80032b4:	3304      	adds	r3, #4
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a31      	ldr	r2, [pc, #196]	; (8003380 <DT_InitRegister+0xfc>)
 80032ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80032be:	ee07 3a90 	vmov	s15, r3
 80032c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032c6:	492d      	ldr	r1, [pc, #180]	; (800337c <DT_InitRegister+0xf8>)
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	4613      	mov	r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	4413      	add	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	440b      	add	r3, r1
 80032d4:	3310      	adds	r3, #16
 80032d6:	edd3 7a00 	vldr	s15, [r3]
 80032da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032e2:	ee17 0a90 	vmov	r0, s15
 80032e6:	4925      	ldr	r1, [pc, #148]	; (800337c <DT_InitRegister+0xf8>)
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	4613      	mov	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	440b      	add	r3, r1
 80032f4:	330c      	adds	r3, #12
 80032f6:	6018      	str	r0, [r3, #0]
 80032f8:	e033      	b.n	8003362 <DT_InitRegister+0xde>
		else
			DacTimerReg[i].arr = (((SM_MCLK / DacTimerReg[i].hertz) / DacTimerReg[i].psc) / SM_FSAMP) * DacTimerReg[i].error;
 80032fa:	4920      	ldr	r1, [pc, #128]	; (800337c <DT_InitRegister+0xf8>)
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	4613      	mov	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4413      	add	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	440b      	add	r3, r1
 8003308:	3304      	adds	r3, #4
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a1c      	ldr	r2, [pc, #112]	; (8003380 <DT_InitRegister+0xfc>)
 800330e:	fbb2 f1f3 	udiv	r1, r2, r3
 8003312:	481a      	ldr	r0, [pc, #104]	; (800337c <DT_InitRegister+0xf8>)
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4403      	add	r3, r0
 8003320:	3308      	adds	r3, #8
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	fbb1 f3f3 	udiv	r3, r1, r3
 8003328:	ee07 3a90 	vmov	s15, r3
 800332c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003330:	4912      	ldr	r1, [pc, #72]	; (800337c <DT_InitRegister+0xf8>)
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	4613      	mov	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4413      	add	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	440b      	add	r3, r1
 800333e:	3310      	adds	r3, #16
 8003340:	edd3 7a00 	vldr	s15, [r3]
 8003344:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003348:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800334c:	ee17 0a90 	vmov	r0, s15
 8003350:	490a      	ldr	r1, [pc, #40]	; (800337c <DT_InitRegister+0xf8>)
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	4613      	mov	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4413      	add	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	330c      	adds	r3, #12
 8003360:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3301      	adds	r3, #1
 8003366:	607b      	str	r3, [r7, #4]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b0d      	cmp	r3, #13
 800336c:	dd90      	ble.n	8003290 <DT_InitRegister+0xc>
	}
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	2000000c 	.word	0x2000000c
 8003380:	00155cc0 	.word	0x00155cc0

08003384 <DT_GetRegisterByEnum>:
 *	@param pEnum Enummeration (eFreq_Preset) search criteria. Not an index
 *	@retval Pointer to the found DacTimeReg_t struct. Null if no result!
 *
 */
DacTimeReg_t* DT_GetRegisterByEnum(eFreq_Preset pEnum)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 800338c:	2300      	movs	r3, #0
 800338e:	60fb      	str	r3, [r7, #12]
 8003390:	e016      	b.n	80033c0 <DT_GetRegisterByEnum+0x3c>
		if(DacTimerReg[i].hertz == pEnum)
 8003392:	4910      	ldr	r1, [pc, #64]	; (80033d4 <DT_GetRegisterByEnum+0x50>)
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	4613      	mov	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	440b      	add	r3, r1
 80033a0:	3304      	adds	r3, #4
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d107      	bne.n	80033ba <DT_GetRegisterByEnum+0x36>
			return &DacTimerReg[i];
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	4613      	mov	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4a07      	ldr	r2, [pc, #28]	; (80033d4 <DT_GetRegisterByEnum+0x50>)
 80033b6:	4413      	add	r3, r2
 80033b8:	e006      	b.n	80033c8 <DT_GetRegisterByEnum+0x44>
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	3301      	adds	r3, #1
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2b0d      	cmp	r3, #13
 80033c4:	dde5      	ble.n	8003392 <DT_GetRegisterByEnum+0xe>

	return 0;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3714      	adds	r7, #20
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	2000000c 	.word	0x2000000c

080033d8 <FreqO_AdjustFreq>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustFreq()
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
		//TIM8->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_HIFREQ_MAG;
		TIM8->ARR = SM_GetEncoderValue(ENCODER_FORWARD); //* FREQ_ENCODER_MIDFREQ_MAG;
 80033dc:	2000      	movs	r0, #0
 80033de:	f000 fb97 	bl	8003b10 <SM_GetEncoderValue>
 80033e2:	4603      	mov	r3, r0
 80033e4:	461a      	mov	r2, r3
 80033e6:	4b02      	ldr	r3, [pc, #8]	; (80033f0 <FreqO_AdjustFreq+0x18>)
 80033e8:	62da      	str	r2, [r3, #44]	; 0x2c
		//TIM8->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_LOFREQ_MAG;
}
 80033ea:	bf00      	nop
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40013400 	.word	0x40013400

080033f4 <FreqO_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_ModifyOutput(uint16_t pEncValue)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	4603      	mov	r3, r0
 80033fc:	80fb      	strh	r3, [r7, #6]

	switch(pEncValue)
 80033fe:	88fb      	ldrh	r3, [r7, #6]
 8003400:	2b38      	cmp	r3, #56	; 0x38
 8003402:	f200 80b4 	bhi.w	800356e <FreqO_ModifyOutput+0x17a>
 8003406:	a201      	add	r2, pc, #4	; (adr r2, 800340c <FreqO_ModifyOutput+0x18>)
 8003408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800340c:	080034f1 	.word	0x080034f1
 8003410:	080034f1 	.word	0x080034f1
 8003414:	080034f1 	.word	0x080034f1
 8003418:	080034f1 	.word	0x080034f1
 800341c:	080034f9 	.word	0x080034f9
 8003420:	080034f9 	.word	0x080034f9
 8003424:	080034f9 	.word	0x080034f9
 8003428:	080034f9 	.word	0x080034f9
 800342c:	08003501 	.word	0x08003501
 8003430:	08003501 	.word	0x08003501
 8003434:	08003501 	.word	0x08003501
 8003438:	08003501 	.word	0x08003501
 800343c:	08003509 	.word	0x08003509
 8003440:	08003509 	.word	0x08003509
 8003444:	08003509 	.word	0x08003509
 8003448:	08003509 	.word	0x08003509
 800344c:	08003511 	.word	0x08003511
 8003450:	08003511 	.word	0x08003511
 8003454:	08003511 	.word	0x08003511
 8003458:	08003511 	.word	0x08003511
 800345c:	08003519 	.word	0x08003519
 8003460:	08003519 	.word	0x08003519
 8003464:	08003519 	.word	0x08003519
 8003468:	08003519 	.word	0x08003519
 800346c:	08003523 	.word	0x08003523
 8003470:	08003523 	.word	0x08003523
 8003474:	08003523 	.word	0x08003523
 8003478:	08003523 	.word	0x08003523
 800347c:	0800352d 	.word	0x0800352d
 8003480:	0800352d 	.word	0x0800352d
 8003484:	0800352d 	.word	0x0800352d
 8003488:	0800356f 	.word	0x0800356f
 800348c:	0800352d 	.word	0x0800352d
 8003490:	08003537 	.word	0x08003537
 8003494:	08003537 	.word	0x08003537
 8003498:	08003537 	.word	0x08003537
 800349c:	08003537 	.word	0x08003537
 80034a0:	08003541 	.word	0x08003541
 80034a4:	08003541 	.word	0x08003541
 80034a8:	08003541 	.word	0x08003541
 80034ac:	08003541 	.word	0x08003541
 80034b0:	0800354b 	.word	0x0800354b
 80034b4:	0800354b 	.word	0x0800354b
 80034b8:	0800354b 	.word	0x0800354b
 80034bc:	0800354b 	.word	0x0800354b
 80034c0:	08003555 	.word	0x08003555
 80034c4:	08003555 	.word	0x08003555
 80034c8:	08003555 	.word	0x08003555
 80034cc:	08003555 	.word	0x08003555
 80034d0:	0800355f 	.word	0x0800355f
 80034d4:	0800355f 	.word	0x0800355f
 80034d8:	0800355f 	.word	0x0800355f
 80034dc:	0800355f 	.word	0x0800355f
 80034e0:	08003567 	.word	0x08003567
 80034e4:	08003567 	.word	0x08003567
 80034e8:	08003567 	.word	0x08003567
 80034ec:	08003567 	.word	0x08003567
	{
		case 0:
		case 1:
		case 2:
		case 3:
			FreqO_ApplyPreset(FPRESET_1HZ);
 80034f0:	2001      	movs	r0, #1
 80034f2:	f000 f845 	bl	8003580 <FreqO_ApplyPreset>
			break;
 80034f6:	e03a      	b.n	800356e <FreqO_ModifyOutput+0x17a>
		case 4:
		case 5:
		case 6:
		case 7:
			FreqO_ApplyPreset(FPRESET_10HZ);
 80034f8:	200a      	movs	r0, #10
 80034fa:	f000 f841 	bl	8003580 <FreqO_ApplyPreset>
			break;
 80034fe:	e036      	b.n	800356e <FreqO_ModifyOutput+0x17a>
		case 8:
		case 9:
		case 10:
		case 11:
			FreqO_ApplyPreset(FPRESET_50HZ);
 8003500:	2032      	movs	r0, #50	; 0x32
 8003502:	f000 f83d 	bl	8003580 <FreqO_ApplyPreset>
			break;
 8003506:	e032      	b.n	800356e <FreqO_ModifyOutput+0x17a>
		case 12:
		case 13:
		case 14:
		case 15:
			FreqO_ApplyPreset(FPRESET_100HZ);
 8003508:	2064      	movs	r0, #100	; 0x64
 800350a:	f000 f839 	bl	8003580 <FreqO_ApplyPreset>
			break;
 800350e:	e02e      	b.n	800356e <FreqO_ModifyOutput+0x17a>
		case 16:
		case 17:
		case 18:
		case 19:
			FreqO_ApplyPreset(FPRESET_250HZ);
 8003510:	20fa      	movs	r0, #250	; 0xfa
 8003512:	f000 f835 	bl	8003580 <FreqO_ApplyPreset>
			break;
 8003516:	e02a      	b.n	800356e <FreqO_ModifyOutput+0x17a>
		case 20:
		case 21:
		case 22:
		case 23:
			FreqO_ApplyPreset(FPRESET_500HZ);
 8003518:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800351c:	f000 f830 	bl	8003580 <FreqO_ApplyPreset>
			break;
 8003520:	e025      	b.n	800356e <FreqO_ModifyOutput+0x17a>
		case 24:
		case 25:
		case 26:
		case 27:
			FreqO_ApplyPreset(FPRESET_750HZ);
 8003522:	f240 20ee 	movw	r0, #750	; 0x2ee
 8003526:	f000 f82b 	bl	8003580 <FreqO_ApplyPreset>
			break;
 800352a:	e020      	b.n	800356e <FreqO_ModifyOutput+0x17a>
		case 28:
		case 29:
		case 30:
		case 32:
			FreqO_ApplyPreset(FPRESET_1KHZ);
 800352c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003530:	f000 f826 	bl	8003580 <FreqO_ApplyPreset>
			break;
 8003534:	e01b      	b.n	800356e <FreqO_ModifyOutput+0x17a>
		case 33:
		case 34:
		case 35:
		case 36:
			FreqO_ApplyPreset(FPRESET_5KHZ);
 8003536:	f241 3088 	movw	r0, #5000	; 0x1388
 800353a:	f000 f821 	bl	8003580 <FreqO_ApplyPreset>
			break;
 800353e:	e016      	b.n	800356e <FreqO_ModifyOutput+0x17a>
		case 37:
		case 38:
		case 39:
		case 40:
			FreqO_ApplyPreset(FPRESET_10KHZ);
 8003540:	f242 7010 	movw	r0, #10000	; 0x2710
 8003544:	f000 f81c 	bl	8003580 <FreqO_ApplyPreset>
			break;
 8003548:	e011      	b.n	800356e <FreqO_ModifyOutput+0x17a>
		case 41:
		case 42:
		case 43:
		case 44:
			FreqO_ApplyPreset(FPRESET_25KHZ);
 800354a:	f246 10a8 	movw	r0, #25000	; 0x61a8
 800354e:	f000 f817 	bl	8003580 <FreqO_ApplyPreset>
			break;
 8003552:	e00c      	b.n	800356e <FreqO_ModifyOutput+0x17a>
		case 45:
		case 46:
		case 47:
		case 48:
			FreqO_ApplyPreset(FPRESET_50KHZ);
 8003554:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003558:	f000 f812 	bl	8003580 <FreqO_ApplyPreset>
			break;
 800355c:	e007      	b.n	800356e <FreqO_ModifyOutput+0x17a>
		case 49:
		case 50:
		case 51:
		case 52:
			FreqO_ApplyPreset(FPRESET_75KHZ);
 800355e:	4806      	ldr	r0, [pc, #24]	; (8003578 <FreqO_ModifyOutput+0x184>)
 8003560:	f000 f80e 	bl	8003580 <FreqO_ApplyPreset>
			break;
 8003564:	e003      	b.n	800356e <FreqO_ModifyOutput+0x17a>
		case 53:
		case 54:
		case 55:
		case 56:
			FreqO_ApplyPreset(FPRESET_100KHZ);
 8003566:	4805      	ldr	r0, [pc, #20]	; (800357c <FreqO_ModifyOutput+0x188>)
 8003568:	f000 f80a 	bl	8003580 <FreqO_ApplyPreset>
			break;
 800356c:	bf00      	nop
	}

}
 800356e:	bf00      	nop
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	000124f8 	.word	0x000124f8
 800357c:	000186a0 	.word	0x000186a0

08003580 <FreqO_ApplyPreset>:

 *	@retval None
 *
 */
void FreqO_ApplyPreset(eFreq_Preset pPresetEnum)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
	DacTimeReg_t* tmp = DT_GetRegisterByEnum(pPresetEnum);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f7ff fefb 	bl	8003384 <DT_GetRegisterByEnum>
 800358e:	60f8      	str	r0, [r7, #12]
	if(tmp)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d011      	beq.n	80035ba <FreqO_ApplyPreset+0x3a>
	{
		TIM8->PSC = tmp->psc;
 8003596:	4a0b      	ldr	r2, [pc, #44]	; (80035c4 <FreqO_ApplyPreset+0x44>)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	6293      	str	r3, [r2, #40]	; 0x28
		TIM8->ARR = tmp->arr;
 800359e:	4a09      	ldr	r2, [pc, #36]	; (80035c4 <FreqO_ApplyPreset+0x44>)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	62d3      	str	r3, [r2, #44]	; 0x2c
		//eNewFreqPreset = pPresetEnum;
		Freq_Preset_Encoder_Pos_t * tmp = FreqO_FindFPresetObject(pPresetEnum);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f81c 	bl	80035e4 <FreqO_FindFPresetObject>
 80035ac:	60b8      	str	r0, [r7, #8]
		if(tmp)
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d002      	beq.n	80035ba <FreqO_ApplyPreset+0x3a>
		{
			pNewFreqPresetEncoderPos = tmp;
 80035b4:	4a04      	ldr	r2, [pc, #16]	; (80035c8 <FreqO_ApplyPreset+0x48>)
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	6013      	str	r3, [r2, #0]
		}

	}
}
 80035ba:	bf00      	nop
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	40013400 	.word	0x40013400
 80035c8:	20000198 	.word	0x20000198

080035cc <FreqO_GetFPresetObject>:
 *	@param None
 *	@retval pointer to Freq_Preset_Encoder_Pos_t struct
 *
 */
Freq_Preset_Encoder_Pos_t * FreqO_GetFPresetObject()
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
	return pNewFreqPresetEncoderPos;
 80035d0:	4b03      	ldr	r3, [pc, #12]	; (80035e0 <FreqO_GetFPresetObject+0x14>)
 80035d2:	681b      	ldr	r3, [r3, #0]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	20000198 	.word	0x20000198

080035e4 <FreqO_FindFPresetObject>:

 *	@retval pointer to Freq_Preset_Encoder_Pos_t struct
 *
 */
Freq_Preset_Encoder_Pos_t * FreqO_FindFPresetObject(eFreq_Preset pEnum)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 80035ec:	2300      	movs	r3, #0
 80035ee:	60fb      	str	r3, [r7, #12]
 80035f0:	e00e      	b.n	8003610 <FreqO_FindFPresetObject+0x2c>
	{
		if(aFreqPresetEncoderPos[i].hertz == pEnum)
 80035f2:	4a0c      	ldr	r2, [pc, #48]	; (8003624 <FreqO_FindFPresetObject+0x40>)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d104      	bne.n	800360a <FreqO_FindFPresetObject+0x26>
		{
			return &aFreqPresetEncoderPos[i];
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	4a07      	ldr	r2, [pc, #28]	; (8003624 <FreqO_FindFPresetObject+0x40>)
 8003606:	4413      	add	r3, r2
 8003608:	e006      	b.n	8003618 <FreqO_FindFPresetObject+0x34>
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	3301      	adds	r3, #1
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2b0d      	cmp	r3, #13
 8003614:	dded      	ble.n	80035f2 <FreqO_FindFPresetObject+0xe>
		}
	}
	// error!
	return 0;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3714      	adds	r7, #20
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	20000128 	.word	0x20000128

08003628 <FreqO_GetFreqPresetEncoderRange>:
 *	@param None
 *	@retval uint8_t
 *
 */
uint8_t FreqO_GetFreqPresetEncoderRange()
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
	return FreqPresetEncoderRange;
 800362c:	4b03      	ldr	r3, [pc, #12]	; (800363c <FreqO_GetFreqPresetEncoderRange+0x14>)
 800362e:	781b      	ldrb	r3, [r3, #0]
}
 8003630:	4618      	mov	r0, r3
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	20000124 	.word	0x20000124

08003640 <FreqO_GetOutputFreq>:
 *	@param None
 *	@retval uint32_t
 *
 */
uint32_t FreqO_GetOutputFreq()
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
	return TIM8->ARR;
 8003644:	4b03      	ldr	r3, [pc, #12]	; (8003654 <FreqO_GetOutputFreq+0x14>)
 8003646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8003648:	4618      	mov	r0, r3
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	40013400 	.word	0x40013400

08003658 <FuncO_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void FuncO_ModifyOutput(uint16_t pEncoderValue)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	4603      	mov	r3, r0
 8003660:	80fb      	strh	r3, [r7, #6]


	switch(pEncoderValue)
 8003662:	88fb      	ldrh	r3, [r7, #6]
 8003664:	2b17      	cmp	r3, #23
 8003666:	d84b      	bhi.n	8003700 <FuncO_ModifyOutput+0xa8>
 8003668:	a201      	add	r2, pc, #4	; (adr r2, 8003670 <FuncO_ModifyOutput+0x18>)
 800366a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800366e:	bf00      	nop
 8003670:	080036d1 	.word	0x080036d1
 8003674:	080036d1 	.word	0x080036d1
 8003678:	080036d1 	.word	0x080036d1
 800367c:	080036d9 	.word	0x080036d9
 8003680:	080036d9 	.word	0x080036d9
 8003684:	080036d9 	.word	0x080036d9
 8003688:	080036d9 	.word	0x080036d9
 800368c:	080036e1 	.word	0x080036e1
 8003690:	080036e1 	.word	0x080036e1
 8003694:	080036e1 	.word	0x080036e1
 8003698:	080036e1 	.word	0x080036e1
 800369c:	080036e9 	.word	0x080036e9
 80036a0:	080036e9 	.word	0x080036e9
 80036a4:	080036e9 	.word	0x080036e9
 80036a8:	080036e9 	.word	0x080036e9
 80036ac:	080036f1 	.word	0x080036f1
 80036b0:	080036f1 	.word	0x080036f1
 80036b4:	080036f1 	.word	0x080036f1
 80036b8:	080036f1 	.word	0x080036f1
 80036bc:	080036f9 	.word	0x080036f9
 80036c0:	080036f9 	.word	0x080036f9
 80036c4:	080036f9 	.word	0x080036f9
 80036c8:	080036f9 	.word	0x080036f9
 80036cc:	080036f9 	.word	0x080036f9
	{
		case 0:
		case 1:
		case 2:

			FuncO_ApplyPreset_Fast(SINE_FUNC_MODE);
 80036d0:	2000      	movs	r0, #0
 80036d2:	f000 f819 	bl	8003708 <FuncO_ApplyPreset_Fast>
			break;
 80036d6:	e013      	b.n	8003700 <FuncO_ModifyOutput+0xa8>
		case 3:
		case 4:
		case 5:
		case 6:

			FuncO_ApplyPreset_Fast(SQUARE_FUNC_MODE);
 80036d8:	2001      	movs	r0, #1
 80036da:	f000 f815 	bl	8003708 <FuncO_ApplyPreset_Fast>

			break;
 80036de:	e00f      	b.n	8003700 <FuncO_ModifyOutput+0xa8>
		case 7:
		case 8:
		case 9:
		case 10:

			FuncO_ApplyPreset_Fast(SAW_FUNC_MODE);
 80036e0:	2002      	movs	r0, #2
 80036e2:	f000 f811 	bl	8003708 <FuncO_ApplyPreset_Fast>
			break;
 80036e6:	e00b      	b.n	8003700 <FuncO_ModifyOutput+0xa8>
		case 11:
		case 12:
		case 13:
		case 14:

			FuncO_ApplyPreset_Fast(REV_SAW_FUNC_MODE);
 80036e8:	2003      	movs	r0, #3
 80036ea:	f000 f80d 	bl	8003708 <FuncO_ApplyPreset_Fast>
			break;
 80036ee:	e007      	b.n	8003700 <FuncO_ModifyOutput+0xa8>
		case 15:
		case 16:
		case 17:
		case 18:

			FuncO_ApplyPreset_Fast(TRIANGLE_FUNC_MODE);
 80036f0:	2004      	movs	r0, #4
 80036f2:	f000 f809 	bl	8003708 <FuncO_ApplyPreset_Fast>
			break;
 80036f6:	e003      	b.n	8003700 <FuncO_ModifyOutput+0xa8>
		case 20:
		case 21:
		case 22:
		case 23:

			FuncO_ApplyPreset_Fast(IMPULSE_FUNC_MODE);
 80036f8:	2005      	movs	r0, #5
 80036fa:	f000 f805 	bl	8003708 <FuncO_ApplyPreset_Fast>
			break;
 80036fe:	bf00      	nop
	}
}
 8003700:	bf00      	nop
 8003702:	3708      	adds	r7, #8
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <FuncO_ApplyPreset_Fast>:

 *	@retval None
 *
 */
void FuncO_ApplyPreset_Fast(eOutput_mode pPresetEnum)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af02      	add	r7, sp, #8
 800370e:	4603      	mov	r3, r0
 8003710:	71fb      	strb	r3, [r7, #7]

	switch(pPresetEnum)
 8003712:	79fb      	ldrb	r3, [r7, #7]
 8003714:	2b05      	cmp	r3, #5
 8003716:	d86f      	bhi.n	80037f8 <FuncO_ApplyPreset_Fast+0xf0>
 8003718:	a201      	add	r2, pc, #4	; (adr r2, 8003720 <FuncO_ApplyPreset_Fast+0x18>)
 800371a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800371e:	bf00      	nop
 8003720:	08003739 	.word	0x08003739
 8003724:	08003759 	.word	0x08003759
 8003728:	08003779 	.word	0x08003779
 800372c:	08003799 	.word	0x08003799
 8003730:	080037b9 	.word	0x080037b9
 8003734:	080037d9 	.word	0x080037d9
	{
		case SINE_FUNC_MODE:
			pNewFuncPresetEncoderPos = &aFuncPresetEncoderPos[0];
 8003738:	4b31      	ldr	r3, [pc, #196]	; (8003800 <FuncO_ApplyPreset_Fast+0xf8>)
 800373a:	4a32      	ldr	r2, [pc, #200]	; (8003804 <FuncO_ApplyPreset_Fast+0xfc>)
 800373c:	601a      	str	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800373e:	2100      	movs	r1, #0
 8003740:	4831      	ldr	r0, [pc, #196]	; (8003808 <FuncO_ApplyPreset_Fast+0x100>)
 8003742:	f003 fe3f 	bl	80073c4 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8003746:	2300      	movs	r3, #0
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	2378      	movs	r3, #120	; 0x78
 800374c:	4a2f      	ldr	r2, [pc, #188]	; (800380c <FuncO_ApplyPreset_Fast+0x104>)
 800374e:	2100      	movs	r1, #0
 8003750:	482d      	ldr	r0, [pc, #180]	; (8003808 <FuncO_ApplyPreset_Fast+0x100>)
 8003752:	f003 fd75 	bl	8007240 <HAL_DAC_Start_DMA>
			break;
 8003756:	e04f      	b.n	80037f8 <FuncO_ApplyPreset_Fast+0xf0>

		case SQUARE_FUNC_MODE:
			pNewFuncPresetEncoderPos = &aFuncPresetEncoderPos[1];
 8003758:	4b29      	ldr	r3, [pc, #164]	; (8003800 <FuncO_ApplyPreset_Fast+0xf8>)
 800375a:	4a2d      	ldr	r2, [pc, #180]	; (8003810 <FuncO_ApplyPreset_Fast+0x108>)
 800375c:	601a      	str	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800375e:	2100      	movs	r1, #0
 8003760:	4829      	ldr	r0, [pc, #164]	; (8003808 <FuncO_ApplyPreset_Fast+0x100>)
 8003762:	f003 fe2f 	bl	80073c4 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, square_data_table, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
 8003766:	2300      	movs	r3, #0
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	2378      	movs	r3, #120	; 0x78
 800376c:	4a29      	ldr	r2, [pc, #164]	; (8003814 <FuncO_ApplyPreset_Fast+0x10c>)
 800376e:	2100      	movs	r1, #0
 8003770:	4825      	ldr	r0, [pc, #148]	; (8003808 <FuncO_ApplyPreset_Fast+0x100>)
 8003772:	f003 fd65 	bl	8007240 <HAL_DAC_Start_DMA>
			break;
 8003776:	e03f      	b.n	80037f8 <FuncO_ApplyPreset_Fast+0xf0>

		case SAW_FUNC_MODE:
			pNewFuncPresetEncoderPos = &aFuncPresetEncoderPos[2];
 8003778:	4b21      	ldr	r3, [pc, #132]	; (8003800 <FuncO_ApplyPreset_Fast+0xf8>)
 800377a:	4a27      	ldr	r2, [pc, #156]	; (8003818 <FuncO_ApplyPreset_Fast+0x110>)
 800377c:	601a      	str	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800377e:	2100      	movs	r1, #0
 8003780:	4821      	ldr	r0, [pc, #132]	; (8003808 <FuncO_ApplyPreset_Fast+0x100>)
 8003782:	f003 fe1f 	bl	80073c4 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, saw_data_table, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
 8003786:	2300      	movs	r3, #0
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	2378      	movs	r3, #120	; 0x78
 800378c:	4a23      	ldr	r2, [pc, #140]	; (800381c <FuncO_ApplyPreset_Fast+0x114>)
 800378e:	2100      	movs	r1, #0
 8003790:	481d      	ldr	r0, [pc, #116]	; (8003808 <FuncO_ApplyPreset_Fast+0x100>)
 8003792:	f003 fd55 	bl	8007240 <HAL_DAC_Start_DMA>
			break;
 8003796:	e02f      	b.n	80037f8 <FuncO_ApplyPreset_Fast+0xf0>

		case REV_SAW_FUNC_MODE:
			pNewFuncPresetEncoderPos = &aFuncPresetEncoderPos[3];
 8003798:	4b19      	ldr	r3, [pc, #100]	; (8003800 <FuncO_ApplyPreset_Fast+0xf8>)
 800379a:	4a21      	ldr	r2, [pc, #132]	; (8003820 <FuncO_ApplyPreset_Fast+0x118>)
 800379c:	601a      	str	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800379e:	2100      	movs	r1, #0
 80037a0:	4819      	ldr	r0, [pc, #100]	; (8003808 <FuncO_ApplyPreset_Fast+0x100>)
 80037a2:	f003 fe0f 	bl	80073c4 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, saw_rev_data_table, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
 80037a6:	2300      	movs	r3, #0
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	2378      	movs	r3, #120	; 0x78
 80037ac:	4a1d      	ldr	r2, [pc, #116]	; (8003824 <FuncO_ApplyPreset_Fast+0x11c>)
 80037ae:	2100      	movs	r1, #0
 80037b0:	4815      	ldr	r0, [pc, #84]	; (8003808 <FuncO_ApplyPreset_Fast+0x100>)
 80037b2:	f003 fd45 	bl	8007240 <HAL_DAC_Start_DMA>
			break;
 80037b6:	e01f      	b.n	80037f8 <FuncO_ApplyPreset_Fast+0xf0>

		case TRIANGLE_FUNC_MODE:
			pNewFuncPresetEncoderPos = &aFuncPresetEncoderPos[4];
 80037b8:	4b11      	ldr	r3, [pc, #68]	; (8003800 <FuncO_ApplyPreset_Fast+0xf8>)
 80037ba:	4a1b      	ldr	r2, [pc, #108]	; (8003828 <FuncO_ApplyPreset_Fast+0x120>)
 80037bc:	601a      	str	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80037be:	2100      	movs	r1, #0
 80037c0:	4811      	ldr	r0, [pc, #68]	; (8003808 <FuncO_ApplyPreset_Fast+0x100>)
 80037c2:	f003 fdff 	bl	80073c4 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, triangle_data_table, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 80037c6:	2300      	movs	r3, #0
 80037c8:	9300      	str	r3, [sp, #0]
 80037ca:	2378      	movs	r3, #120	; 0x78
 80037cc:	4a17      	ldr	r2, [pc, #92]	; (800382c <FuncO_ApplyPreset_Fast+0x124>)
 80037ce:	2100      	movs	r1, #0
 80037d0:	480d      	ldr	r0, [pc, #52]	; (8003808 <FuncO_ApplyPreset_Fast+0x100>)
 80037d2:	f003 fd35 	bl	8007240 <HAL_DAC_Start_DMA>
			break;
 80037d6:	e00f      	b.n	80037f8 <FuncO_ApplyPreset_Fast+0xf0>

		case IMPULSE_FUNC_MODE:
			pNewFuncPresetEncoderPos = &aFuncPresetEncoderPos[5];
 80037d8:	4b09      	ldr	r3, [pc, #36]	; (8003800 <FuncO_ApplyPreset_Fast+0xf8>)
 80037da:	4a15      	ldr	r2, [pc, #84]	; (8003830 <FuncO_ApplyPreset_Fast+0x128>)
 80037dc:	601a      	str	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80037de:	2100      	movs	r1, #0
 80037e0:	4809      	ldr	r0, [pc, #36]	; (8003808 <FuncO_ApplyPreset_Fast+0x100>)
 80037e2:	f003 fdef 	bl	80073c4 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, unitimpulse_data_table, UNITIMPULSE_DATA_SIZE,  DAC_ALIGN_12B_R);
 80037e6:	2300      	movs	r3, #0
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	2378      	movs	r3, #120	; 0x78
 80037ec:	4a11      	ldr	r2, [pc, #68]	; (8003834 <FuncO_ApplyPreset_Fast+0x12c>)
 80037ee:	2100      	movs	r1, #0
 80037f0:	4805      	ldr	r0, [pc, #20]	; (8003808 <FuncO_ApplyPreset_Fast+0x100>)
 80037f2:	f003 fd25 	bl	8007240 <HAL_DAC_Start_DMA>
			break;
 80037f6:	bf00      	nop

	//
	}

}
 80037f8:	bf00      	nop
 80037fa:	3708      	adds	r7, #8
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	200001ac 	.word	0x200001ac
 8003804:	200001a0 	.word	0x200001a0
 8003808:	20001540 	.word	0x20001540
 800380c:	20000aa8 	.word	0x20000aa8
 8003810:	200001a2 	.word	0x200001a2
 8003814:	20000c88 	.word	0x20000c88
 8003818:	200001a4 	.word	0x200001a4
 800381c:	200006e8 	.word	0x200006e8
 8003820:	200001a6 	.word	0x200001a6
 8003824:	200008c8 	.word	0x200008c8
 8003828:	200001a8 	.word	0x200001a8
 800382c:	20000e68 	.word	0x20000e68
 8003830:	200001aa 	.word	0x200001aa
 8003834:	20001048 	.word	0x20001048

08003838 <FuncO_GetFPresetObject>:
 *	@param None
 *	@retval pointer to Func_Preset_Encoder_Pos_t struct
 *
 */
Func_Preset_Encoder_Pos_t * FuncO_GetFPresetObject()
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
	return pNewFuncPresetEncoderPos;
 800383c:	4b03      	ldr	r3, [pc, #12]	; (800384c <FuncO_GetFPresetObject+0x14>)
 800383e:	681b      	ldr	r3, [r3, #0]
}
 8003840:	4618      	mov	r0, r3
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	200001ac 	.word	0x200001ac

08003850 <FuncO_GetFuncPresetEncoderRange>:
 *	@param None
 *	@retval uint8_t
 *
 */
uint8_t FuncO_GetFuncPresetEncoderRange()
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
	return FuncPresetEncoderRange;
 8003854:	4b03      	ldr	r3, [pc, #12]	; (8003864 <FuncO_GetFuncPresetEncoderRange+0x14>)
 8003856:	781b      	ldrb	r3, [r3, #0]
}
 8003858:	4618      	mov	r0, r3
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	2000019c 	.word	0x2000019c

08003868 <GO_ModifyOutput>:
// signal output gain
eOutput_gain eNewOutGain = ONE_GAIN;


void GO_ModifyOutput(uint16_t pEncoderValue)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	4603      	mov	r3, r0
 8003870:	80fb      	strh	r3, [r7, #6]


	switch(pEncoderValue)
 8003872:	88fb      	ldrh	r3, [r7, #6]
 8003874:	2b1e      	cmp	r3, #30
 8003876:	d861      	bhi.n	800393c <GO_ModifyOutput+0xd4>
 8003878:	a201      	add	r2, pc, #4	; (adr r2, 8003880 <GO_ModifyOutput+0x18>)
 800387a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387e:	bf00      	nop
 8003880:	080038fd 	.word	0x080038fd
 8003884:	080038fd 	.word	0x080038fd
 8003888:	080038fd 	.word	0x080038fd
 800388c:	08003905 	.word	0x08003905
 8003890:	08003905 	.word	0x08003905
 8003894:	08003905 	.word	0x08003905
 8003898:	08003905 	.word	0x08003905
 800389c:	0800390d 	.word	0x0800390d
 80038a0:	0800390d 	.word	0x0800390d
 80038a4:	0800390d 	.word	0x0800390d
 80038a8:	0800390d 	.word	0x0800390d
 80038ac:	08003915 	.word	0x08003915
 80038b0:	08003915 	.word	0x08003915
 80038b4:	08003915 	.word	0x08003915
 80038b8:	08003915 	.word	0x08003915
 80038bc:	0800391d 	.word	0x0800391d
 80038c0:	0800391d 	.word	0x0800391d
 80038c4:	0800391d 	.word	0x0800391d
 80038c8:	0800391d 	.word	0x0800391d
 80038cc:	08003925 	.word	0x08003925
 80038d0:	08003925 	.word	0x08003925
 80038d4:	08003925 	.word	0x08003925
 80038d8:	08003925 	.word	0x08003925
 80038dc:	0800392d 	.word	0x0800392d
 80038e0:	0800392d 	.word	0x0800392d
 80038e4:	0800392d 	.word	0x0800392d
 80038e8:	0800392d 	.word	0x0800392d
 80038ec:	08003935 	.word	0x08003935
 80038f0:	08003935 	.word	0x08003935
 80038f4:	08003935 	.word	0x08003935
 80038f8:	08003935 	.word	0x08003935
	{
		case 0:
		case 1:
		case 2:
			GO_ApplyPreset_Fast(ZERO_GAIN);
 80038fc:	2000      	movs	r0, #0
 80038fe:	f000 f821 	bl	8003944 <GO_ApplyPreset_Fast>
			break;
 8003902:	e01b      	b.n	800393c <GO_ModifyOutput+0xd4>
		case 3:
		case 4:
		case 5:
		case 6:
			GO_ApplyPreset_Fast(ONE_GAIN);
 8003904:	2001      	movs	r0, #1
 8003906:	f000 f81d 	bl	8003944 <GO_ApplyPreset_Fast>
			break;
 800390a:	e017      	b.n	800393c <GO_ModifyOutput+0xd4>
		case 7:
		case 8:
		case 9:
		case 10:
			GO_ApplyPreset_Fast(TWO_GAIN);
 800390c:	2002      	movs	r0, #2
 800390e:	f000 f819 	bl	8003944 <GO_ApplyPreset_Fast>
			break;
 8003912:	e013      	b.n	800393c <GO_ModifyOutput+0xd4>
		case 11:
		case 12:
		case 13:
		case 14:
			GO_ApplyPreset_Fast(THREE_GAIN);
 8003914:	2003      	movs	r0, #3
 8003916:	f000 f815 	bl	8003944 <GO_ApplyPreset_Fast>
			break;
 800391a:	e00f      	b.n	800393c <GO_ModifyOutput+0xd4>
		case 15:
		case 16:
		case 17:
		case 18:
			GO_ApplyPreset_Fast(FOUR_GAIN);
 800391c:	2004      	movs	r0, #4
 800391e:	f000 f811 	bl	8003944 <GO_ApplyPreset_Fast>
			break;
 8003922:	e00b      	b.n	800393c <GO_ModifyOutput+0xd4>
		case 19:
		case 20:
		case 21:
		case 22:
			GO_ApplyPreset_Fast(FIVE_GAIN);
 8003924:	2005      	movs	r0, #5
 8003926:	f000 f80d 	bl	8003944 <GO_ApplyPreset_Fast>
			break;
 800392a:	e007      	b.n	800393c <GO_ModifyOutput+0xd4>
		case 23:
		case 24:
		case 25:
		case 26:
			GO_ApplyPreset_Fast(SIX_GAIN);
 800392c:	2006      	movs	r0, #6
 800392e:	f000 f809 	bl	8003944 <GO_ApplyPreset_Fast>
			break;
 8003932:	e003      	b.n	800393c <GO_ModifyOutput+0xd4>
		case 27:
		case 28:
		case 29:
		case 30:
			GO_ApplyPreset_Fast(SEVEN_GAIN);
 8003934:	2007      	movs	r0, #7
 8003936:	f000 f805 	bl	8003944 <GO_ApplyPreset_Fast>
			break;
 800393a:	bf00      	nop


	}
}
 800393c:	bf00      	nop
 800393e:	3708      	adds	r7, #8
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <GO_ApplyPreset_Fast>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPreset_Fast(eOutput_gain pPresetEnum)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	4603      	mov	r3, r0
 800394c:	71fb      	strb	r3, [r7, #7]
	switch(pPresetEnum)
 800394e:	79fb      	ldrb	r3, [r7, #7]
 8003950:	2b07      	cmp	r3, #7
 8003952:	f200 80ab 	bhi.w	8003aac <GO_ApplyPreset_Fast+0x168>
 8003956:	a201      	add	r2, pc, #4	; (adr r2, 800395c <GO_ApplyPreset_Fast+0x18>)
 8003958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395c:	0800397d 	.word	0x0800397d
 8003960:	080039a3 	.word	0x080039a3
 8003964:	080039c9 	.word	0x080039c9
 8003968:	080039ef 	.word	0x080039ef
 800396c:	08003a15 	.word	0x08003a15
 8003970:	08003a3b 	.word	0x08003a3b
 8003974:	08003a61 	.word	0x08003a61
 8003978:	08003a87 	.word	0x08003a87
	{
		case ZERO_GAIN:
			pNewGainPresetEncoderPos = &aGainPresetEncoderPos[0];
 800397c:	4b4d      	ldr	r3, [pc, #308]	; (8003ab4 <GO_ApplyPreset_Fast+0x170>)
 800397e:	4a4e      	ldr	r2, [pc, #312]	; (8003ab8 <GO_ApplyPreset_Fast+0x174>)
 8003980:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8003982:	2200      	movs	r2, #0
 8003984:	2101      	movs	r1, #1
 8003986:	484d      	ldr	r0, [pc, #308]	; (8003abc <GO_ApplyPreset_Fast+0x178>)
 8003988:	f004 fc60 	bl	800824c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800398c:	2200      	movs	r2, #0
 800398e:	2120      	movs	r1, #32
 8003990:	484b      	ldr	r0, [pc, #300]	; (8003ac0 <GO_ApplyPreset_Fast+0x17c>)
 8003992:	f004 fc5b 	bl	800824c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8003996:	2200      	movs	r2, #0
 8003998:	2110      	movs	r1, #16
 800399a:	4849      	ldr	r0, [pc, #292]	; (8003ac0 <GO_ApplyPreset_Fast+0x17c>)
 800399c:	f004 fc56 	bl	800824c <HAL_GPIO_WritePin>
			break;
 80039a0:	e084      	b.n	8003aac <GO_ApplyPreset_Fast+0x168>

		case ONE_GAIN:
			pNewGainPresetEncoderPos = &aGainPresetEncoderPos[1];
 80039a2:	4b44      	ldr	r3, [pc, #272]	; (8003ab4 <GO_ApplyPreset_Fast+0x170>)
 80039a4:	4a47      	ldr	r2, [pc, #284]	; (8003ac4 <GO_ApplyPreset_Fast+0x180>)
 80039a6:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80039a8:	2201      	movs	r2, #1
 80039aa:	2101      	movs	r1, #1
 80039ac:	4843      	ldr	r0, [pc, #268]	; (8003abc <GO_ApplyPreset_Fast+0x178>)
 80039ae:	f004 fc4d 	bl	800824c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80039b2:	2200      	movs	r2, #0
 80039b4:	2120      	movs	r1, #32
 80039b6:	4842      	ldr	r0, [pc, #264]	; (8003ac0 <GO_ApplyPreset_Fast+0x17c>)
 80039b8:	f004 fc48 	bl	800824c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80039bc:	2200      	movs	r2, #0
 80039be:	2110      	movs	r1, #16
 80039c0:	483f      	ldr	r0, [pc, #252]	; (8003ac0 <GO_ApplyPreset_Fast+0x17c>)
 80039c2:	f004 fc43 	bl	800824c <HAL_GPIO_WritePin>
			break;
 80039c6:	e071      	b.n	8003aac <GO_ApplyPreset_Fast+0x168>

		case TWO_GAIN:
			pNewGainPresetEncoderPos = &aGainPresetEncoderPos[2];
 80039c8:	4b3a      	ldr	r3, [pc, #232]	; (8003ab4 <GO_ApplyPreset_Fast+0x170>)
 80039ca:	4a3f      	ldr	r2, [pc, #252]	; (8003ac8 <GO_ApplyPreset_Fast+0x184>)
 80039cc:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80039ce:	2200      	movs	r2, #0
 80039d0:	2101      	movs	r1, #1
 80039d2:	483a      	ldr	r0, [pc, #232]	; (8003abc <GO_ApplyPreset_Fast+0x178>)
 80039d4:	f004 fc3a 	bl	800824c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80039d8:	2201      	movs	r2, #1
 80039da:	2120      	movs	r1, #32
 80039dc:	4838      	ldr	r0, [pc, #224]	; (8003ac0 <GO_ApplyPreset_Fast+0x17c>)
 80039de:	f004 fc35 	bl	800824c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80039e2:	2200      	movs	r2, #0
 80039e4:	2110      	movs	r1, #16
 80039e6:	4836      	ldr	r0, [pc, #216]	; (8003ac0 <GO_ApplyPreset_Fast+0x17c>)
 80039e8:	f004 fc30 	bl	800824c <HAL_GPIO_WritePin>
			break;
 80039ec:	e05e      	b.n	8003aac <GO_ApplyPreset_Fast+0x168>

		case THREE_GAIN:
			pNewGainPresetEncoderPos = &aGainPresetEncoderPos[3];
 80039ee:	4b31      	ldr	r3, [pc, #196]	; (8003ab4 <GO_ApplyPreset_Fast+0x170>)
 80039f0:	4a36      	ldr	r2, [pc, #216]	; (8003acc <GO_ApplyPreset_Fast+0x188>)
 80039f2:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80039f4:	2201      	movs	r2, #1
 80039f6:	2101      	movs	r1, #1
 80039f8:	4830      	ldr	r0, [pc, #192]	; (8003abc <GO_ApplyPreset_Fast+0x178>)
 80039fa:	f004 fc27 	bl	800824c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80039fe:	2201      	movs	r2, #1
 8003a00:	2120      	movs	r1, #32
 8003a02:	482f      	ldr	r0, [pc, #188]	; (8003ac0 <GO_ApplyPreset_Fast+0x17c>)
 8003a04:	f004 fc22 	bl	800824c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8003a08:	2200      	movs	r2, #0
 8003a0a:	2110      	movs	r1, #16
 8003a0c:	482c      	ldr	r0, [pc, #176]	; (8003ac0 <GO_ApplyPreset_Fast+0x17c>)
 8003a0e:	f004 fc1d 	bl	800824c <HAL_GPIO_WritePin>
			break;
 8003a12:	e04b      	b.n	8003aac <GO_ApplyPreset_Fast+0x168>

		case FOUR_GAIN:
			pNewGainPresetEncoderPos = &aGainPresetEncoderPos[4];
 8003a14:	4b27      	ldr	r3, [pc, #156]	; (8003ab4 <GO_ApplyPreset_Fast+0x170>)
 8003a16:	4a2e      	ldr	r2, [pc, #184]	; (8003ad0 <GO_ApplyPreset_Fast+0x18c>)
 8003a18:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	4827      	ldr	r0, [pc, #156]	; (8003abc <GO_ApplyPreset_Fast+0x178>)
 8003a20:	f004 fc14 	bl	800824c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8003a24:	2200      	movs	r2, #0
 8003a26:	2120      	movs	r1, #32
 8003a28:	4825      	ldr	r0, [pc, #148]	; (8003ac0 <GO_ApplyPreset_Fast+0x17c>)
 8003a2a:	f004 fc0f 	bl	800824c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8003a2e:	2201      	movs	r2, #1
 8003a30:	2110      	movs	r1, #16
 8003a32:	4823      	ldr	r0, [pc, #140]	; (8003ac0 <GO_ApplyPreset_Fast+0x17c>)
 8003a34:	f004 fc0a 	bl	800824c <HAL_GPIO_WritePin>
			break;
 8003a38:	e038      	b.n	8003aac <GO_ApplyPreset_Fast+0x168>

		case FIVE_GAIN:
			pNewGainPresetEncoderPos = &aGainPresetEncoderPos[5];
 8003a3a:	4b1e      	ldr	r3, [pc, #120]	; (8003ab4 <GO_ApplyPreset_Fast+0x170>)
 8003a3c:	4a25      	ldr	r2, [pc, #148]	; (8003ad4 <GO_ApplyPreset_Fast+0x190>)
 8003a3e:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8003a40:	2201      	movs	r2, #1
 8003a42:	2101      	movs	r1, #1
 8003a44:	481d      	ldr	r0, [pc, #116]	; (8003abc <GO_ApplyPreset_Fast+0x178>)
 8003a46:	f004 fc01 	bl	800824c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	2120      	movs	r1, #32
 8003a4e:	481c      	ldr	r0, [pc, #112]	; (8003ac0 <GO_ApplyPreset_Fast+0x17c>)
 8003a50:	f004 fbfc 	bl	800824c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8003a54:	2201      	movs	r2, #1
 8003a56:	2110      	movs	r1, #16
 8003a58:	4819      	ldr	r0, [pc, #100]	; (8003ac0 <GO_ApplyPreset_Fast+0x17c>)
 8003a5a:	f004 fbf7 	bl	800824c <HAL_GPIO_WritePin>
			break;
 8003a5e:	e025      	b.n	8003aac <GO_ApplyPreset_Fast+0x168>

		case SIX_GAIN:
			pNewGainPresetEncoderPos = &aGainPresetEncoderPos[6];
 8003a60:	4b14      	ldr	r3, [pc, #80]	; (8003ab4 <GO_ApplyPreset_Fast+0x170>)
 8003a62:	4a1d      	ldr	r2, [pc, #116]	; (8003ad8 <GO_ApplyPreset_Fast+0x194>)
 8003a64:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8003a66:	2200      	movs	r2, #0
 8003a68:	2101      	movs	r1, #1
 8003a6a:	4814      	ldr	r0, [pc, #80]	; (8003abc <GO_ApplyPreset_Fast+0x178>)
 8003a6c:	f004 fbee 	bl	800824c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8003a70:	2201      	movs	r2, #1
 8003a72:	2120      	movs	r1, #32
 8003a74:	4812      	ldr	r0, [pc, #72]	; (8003ac0 <GO_ApplyPreset_Fast+0x17c>)
 8003a76:	f004 fbe9 	bl	800824c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	2110      	movs	r1, #16
 8003a7e:	4810      	ldr	r0, [pc, #64]	; (8003ac0 <GO_ApplyPreset_Fast+0x17c>)
 8003a80:	f004 fbe4 	bl	800824c <HAL_GPIO_WritePin>
			break;
 8003a84:	e012      	b.n	8003aac <GO_ApplyPreset_Fast+0x168>

		case SEVEN_GAIN:
			pNewGainPresetEncoderPos = &aGainPresetEncoderPos[7];
 8003a86:	4b0b      	ldr	r3, [pc, #44]	; (8003ab4 <GO_ApplyPreset_Fast+0x170>)
 8003a88:	4a14      	ldr	r2, [pc, #80]	; (8003adc <GO_ApplyPreset_Fast+0x198>)
 8003a8a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	2101      	movs	r1, #1
 8003a90:	480a      	ldr	r0, [pc, #40]	; (8003abc <GO_ApplyPreset_Fast+0x178>)
 8003a92:	f004 fbdb 	bl	800824c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8003a96:	2201      	movs	r2, #1
 8003a98:	2120      	movs	r1, #32
 8003a9a:	4809      	ldr	r0, [pc, #36]	; (8003ac0 <GO_ApplyPreset_Fast+0x17c>)
 8003a9c:	f004 fbd6 	bl	800824c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	2110      	movs	r1, #16
 8003aa4:	4806      	ldr	r0, [pc, #24]	; (8003ac0 <GO_ApplyPreset_Fast+0x17c>)
 8003aa6:	f004 fbd1 	bl	800824c <HAL_GPIO_WritePin>
			break;
 8003aaa:	bf00      	nop
	}
}
 8003aac:	bf00      	nop
 8003aae:	3708      	adds	r7, #8
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	200001c8 	.word	0x200001c8
 8003ab8:	200001b0 	.word	0x200001b0
 8003abc:	48000400 	.word	0x48000400
 8003ac0:	48000800 	.word	0x48000800
 8003ac4:	200001b3 	.word	0x200001b3
 8003ac8:	200001b6 	.word	0x200001b6
 8003acc:	200001b9 	.word	0x200001b9
 8003ad0:	200001bc 	.word	0x200001bc
 8003ad4:	200001bf 	.word	0x200001bf
 8003ad8:	200001c2 	.word	0x200001c2
 8003adc:	200001c5 	.word	0x200001c5

08003ae0 <GO_GetGPresetObject>:
 *	@param None
 *	@retval None
 *
 */
Gain_Preset_Encoder_Pos_t * GO_GetGPresetObject()
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
	return pNewGainPresetEncoderPos;
 8003ae4:	4b03      	ldr	r3, [pc, #12]	; (8003af4 <GO_GetGPresetObject+0x14>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	200001c8 	.word	0x200001c8

08003af8 <GO_GetGainPresetEncoderRange>:
 *	@param None
 *	@retval None
 *
 */
uint8_t GO_GetGainPresetEncoderRange()
{
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
	return GainPresetEncoderRange;
 8003afc:	4b03      	ldr	r3, [pc, #12]	; (8003b0c <GO_GetGainPresetEncoderRange+0x14>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	200001cc 	.word	0x200001cc

08003b10 <SM_GetEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t SM_GetEncoderValue(eEncoder_Direction direction)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	4603      	mov	r3, r0
 8003b18:	71fb      	strb	r3, [r7, #7]
	if(direction)
 8003b1a:	79fb      	ldrb	r3, [r7, #7]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d008      	beq.n	8003b32 <SM_GetEncoderValue+0x22>
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
 8003b20:	4b08      	ldr	r3, [pc, #32]	; (8003b44 <SM_GetEncoderValue+0x34>)
 8003b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	4b07      	ldr	r3, [pc, #28]	; (8003b44 <SM_GetEncoderValue+0x34>)
 8003b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	e002      	b.n	8003b38 <SM_GetEncoderValue+0x28>
	}
	else
	{
		return ENCODER_TIMER->CNT;
 8003b32:	4b04      	ldr	r3, [pc, #16]	; (8003b44 <SM_GetEncoderValue+0x34>)
 8003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b36:	b29b      	uxth	r3, r3
	}
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr
 8003b44:	40012c00 	.word	0x40012c00

08003b48 <SM_GetOutputInHertz>:
 *	@param None
 *	@retval None
 *
 */
float SM_GetOutputInHertz()
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
	volatile float tim8_psc;
	volatile float tim8_arr;

	// safe-guard against divide by zero
	(TIM8->PSC == 0) ? (tim8_psc = 1) : (tim8_psc = TIM8->PSC);
 8003b4e:	4b1d      	ldr	r3, [pc, #116]	; (8003bc4 <SM_GetOutputInHertz+0x7c>)
 8003b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d103      	bne.n	8003b5e <SM_GetOutputInHertz+0x16>
 8003b56:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003b5a:	60bb      	str	r3, [r7, #8]
 8003b5c:	e007      	b.n	8003b6e <SM_GetOutputInHertz+0x26>
 8003b5e:	4b19      	ldr	r3, [pc, #100]	; (8003bc4 <SM_GetOutputInHertz+0x7c>)
 8003b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b62:	ee07 3a90 	vmov	s15, r3
 8003b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b6a:	edc7 7a02 	vstr	s15, [r7, #8]
	(TIM8->ARR == 0) ? (tim8_arr = 1) : (tim8_arr = TIM8->ARR);
 8003b6e:	4b15      	ldr	r3, [pc, #84]	; (8003bc4 <SM_GetOutputInHertz+0x7c>)
 8003b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d103      	bne.n	8003b7e <SM_GetOutputInHertz+0x36>
 8003b76:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003b7a:	607b      	str	r3, [r7, #4]
 8003b7c:	e007      	b.n	8003b8e <SM_GetOutputInHertz+0x46>
 8003b7e:	4b11      	ldr	r3, [pc, #68]	; (8003bc4 <SM_GetOutputInHertz+0x7c>)
 8003b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b82:	ee07 3a90 	vmov	s15, r3
 8003b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b8a:	edc7 7a01 	vstr	s15, [r7, #4]

	float tim8_freq = SM_MCLK / (tim8_psc * tim8_arr);
 8003b8e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003b92:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b9a:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8003bc8 <SM_GetOutputInHertz+0x80>
 8003b9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ba2:	edc7 7a03 	vstr	s15, [r7, #12]


	return tim8_freq / SM_FSAMP;
 8003ba6:	edd7 7a03 	vldr	s15, [r7, #12]
 8003baa:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8003bcc <SM_GetOutputInHertz+0x84>
 8003bae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003bb2:	eef0 7a66 	vmov.f32	s15, s13
}
 8003bb6:	eeb0 0a67 	vmov.f32	s0, s15
 8003bba:	3714      	adds	r7, #20
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	40013400 	.word	0x40013400
 8003bc8:	4d2037a0 	.word	0x4d2037a0
 8003bcc:	42f00000 	.word	0x42f00000

08003bd0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b08c      	sub	sp, #48	; 0x30
 8003bd4:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8003bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bda:	2200      	movs	r2, #0
 8003bdc:	601a      	str	r2, [r3, #0]
 8003bde:	605a      	str	r2, [r3, #4]
 8003be0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003be2:	1d3b      	adds	r3, r7, #4
 8003be4:	2220      	movs	r2, #32
 8003be6:	2100      	movs	r1, #0
 8003be8:	4618      	mov	r0, r3
 8003bea:	f008 f97b 	bl	800bee4 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8003bee:	4b32      	ldr	r3, [pc, #200]	; (8003cb8 <MX_ADC1_Init+0xe8>)
 8003bf0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003bf4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003bf6:	4b30      	ldr	r3, [pc, #192]	; (8003cb8 <MX_ADC1_Init+0xe8>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003bfc:	4b2e      	ldr	r3, [pc, #184]	; (8003cb8 <MX_ADC1_Init+0xe8>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003c02:	4b2d      	ldr	r3, [pc, #180]	; (8003cb8 <MX_ADC1_Init+0xe8>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8003c08:	4b2b      	ldr	r3, [pc, #172]	; (8003cb8 <MX_ADC1_Init+0xe8>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003c0e:	4b2a      	ldr	r3, [pc, #168]	; (8003cb8 <MX_ADC1_Init+0xe8>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003c14:	4b28      	ldr	r3, [pc, #160]	; (8003cb8 <MX_ADC1_Init+0xe8>)
 8003c16:	2204      	movs	r2, #4
 8003c18:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003c1a:	4b27      	ldr	r3, [pc, #156]	; (8003cb8 <MX_ADC1_Init+0xe8>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003c20:	4b25      	ldr	r3, [pc, #148]	; (8003cb8 <MX_ADC1_Init+0xe8>)
 8003c22:	2201      	movs	r2, #1
 8003c24:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8003c26:	4b24      	ldr	r3, [pc, #144]	; (8003cb8 <MX_ADC1_Init+0xe8>)
 8003c28:	2201      	movs	r2, #1
 8003c2a:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003c2c:	4b22      	ldr	r3, [pc, #136]	; (8003cb8 <MX_ADC1_Init+0xe8>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003c34:	4b20      	ldr	r3, [pc, #128]	; (8003cb8 <MX_ADC1_Init+0xe8>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003c3a:	4b1f      	ldr	r3, [pc, #124]	; (8003cb8 <MX_ADC1_Init+0xe8>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003c40:	4b1d      	ldr	r3, [pc, #116]	; (8003cb8 <MX_ADC1_Init+0xe8>)
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003c48:	4b1b      	ldr	r3, [pc, #108]	; (8003cb8 <MX_ADC1_Init+0xe8>)
 8003c4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c4e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8003c50:	4b19      	ldr	r3, [pc, #100]	; (8003cb8 <MX_ADC1_Init+0xe8>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003c58:	4817      	ldr	r0, [pc, #92]	; (8003cb8 <MX_ADC1_Init+0xe8>)
 8003c5a:	f001 ffef 	bl	8005c3c <HAL_ADC_Init>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8003c64:	f000 ff2a 	bl	8004abc <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c70:	4619      	mov	r1, r3
 8003c72:	4811      	ldr	r0, [pc, #68]	; (8003cb8 <MX_ADC1_Init+0xe8>)
 8003c74:	f002 fd78 	bl	8006768 <HAL_ADCEx_MultiModeConfigChannel>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8003c7e:	f000 ff1d 	bl	8004abc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003c82:	4b0e      	ldr	r3, [pc, #56]	; (8003cbc <MX_ADC1_Init+0xec>)
 8003c84:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003c86:	2306      	movs	r3, #6
 8003c88:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003c8e:	237f      	movs	r3, #127	; 0x7f
 8003c90:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003c92:	2304      	movs	r3, #4
 8003c94:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003c96:	2300      	movs	r3, #0
 8003c98:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c9a:	1d3b      	adds	r3, r7, #4
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	4806      	ldr	r0, [pc, #24]	; (8003cb8 <MX_ADC1_Init+0xe8>)
 8003ca0:	f002 f98c 	bl	8005fbc <HAL_ADC_ConfigChannel>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8003caa:	f000 ff07 	bl	8004abc <Error_Handler>
  }

}
 8003cae:	bf00      	nop
 8003cb0:	3730      	adds	r7, #48	; 0x30
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	2000143c 	.word	0x2000143c
 8003cbc:	0c900008 	.word	0x0c900008

08003cc0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b08a      	sub	sp, #40	; 0x28
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cc8:	f107 0314 	add.w	r3, r7, #20
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	605a      	str	r2, [r3, #4]
 8003cd2:	609a      	str	r2, [r3, #8]
 8003cd4:	60da      	str	r2, [r3, #12]
 8003cd6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ce0:	d14f      	bne.n	8003d82 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003ce2:	4b2a      	ldr	r3, [pc, #168]	; (8003d8c <HAL_ADC_MspInit+0xcc>)
 8003ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ce6:	4a29      	ldr	r2, [pc, #164]	; (8003d8c <HAL_ADC_MspInit+0xcc>)
 8003ce8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003cec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cee:	4b27      	ldr	r3, [pc, #156]	; (8003d8c <HAL_ADC_MspInit+0xcc>)
 8003cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cf2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cf6:	613b      	str	r3, [r7, #16]
 8003cf8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cfa:	4b24      	ldr	r3, [pc, #144]	; (8003d8c <HAL_ADC_MspInit+0xcc>)
 8003cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cfe:	4a23      	ldr	r2, [pc, #140]	; (8003d8c <HAL_ADC_MspInit+0xcc>)
 8003d00:	f043 0301 	orr.w	r3, r3, #1
 8003d04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d06:	4b21      	ldr	r3, [pc, #132]	; (8003d8c <HAL_ADC_MspInit+0xcc>)
 8003d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	60fb      	str	r3, [r7, #12]
 8003d10:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003d12:	2304      	movs	r3, #4
 8003d14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d16:	2303      	movs	r3, #3
 8003d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d1e:	f107 0314 	add.w	r3, r7, #20
 8003d22:	4619      	mov	r1, r3
 8003d24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d28:	f004 f8f6 	bl	8007f18 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003d2c:	4b18      	ldr	r3, [pc, #96]	; (8003d90 <HAL_ADC_MspInit+0xd0>)
 8003d2e:	4a19      	ldr	r2, [pc, #100]	; (8003d94 <HAL_ADC_MspInit+0xd4>)
 8003d30:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003d32:	4b17      	ldr	r3, [pc, #92]	; (8003d90 <HAL_ADC_MspInit+0xd0>)
 8003d34:	2205      	movs	r2, #5
 8003d36:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d38:	4b15      	ldr	r3, [pc, #84]	; (8003d90 <HAL_ADC_MspInit+0xd0>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d3e:	4b14      	ldr	r3, [pc, #80]	; (8003d90 <HAL_ADC_MspInit+0xd0>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003d44:	4b12      	ldr	r3, [pc, #72]	; (8003d90 <HAL_ADC_MspInit+0xd0>)
 8003d46:	2280      	movs	r2, #128	; 0x80
 8003d48:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003d4a:	4b11      	ldr	r3, [pc, #68]	; (8003d90 <HAL_ADC_MspInit+0xd0>)
 8003d4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d50:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003d52:	4b0f      	ldr	r3, [pc, #60]	; (8003d90 <HAL_ADC_MspInit+0xd0>)
 8003d54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d58:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003d5a:	4b0d      	ldr	r3, [pc, #52]	; (8003d90 <HAL_ADC_MspInit+0xd0>)
 8003d5c:	2220      	movs	r2, #32
 8003d5e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003d60:	4b0b      	ldr	r3, [pc, #44]	; (8003d90 <HAL_ADC_MspInit+0xd0>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003d66:	480a      	ldr	r0, [pc, #40]	; (8003d90 <HAL_ADC_MspInit+0xd0>)
 8003d68:	f003 fe0a 	bl	8007980 <HAL_DMA_Init>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d001      	beq.n	8003d76 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8003d72:	f000 fea3 	bl	8004abc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a05      	ldr	r2, [pc, #20]	; (8003d90 <HAL_ADC_MspInit+0xd0>)
 8003d7a:	655a      	str	r2, [r3, #84]	; 0x54
 8003d7c:	4a04      	ldr	r2, [pc, #16]	; (8003d90 <HAL_ADC_MspInit+0xd0>)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003d82:	bf00      	nop
 8003d84:	3728      	adds	r7, #40	; 0x28
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	200014a8 	.word	0x200014a8
 8003d94:	40020008 	.word	0x40020008

08003d98 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 8003d9c:	4b0f      	ldr	r3, [pc, #60]	; (8003ddc <MX_COMP1_Init+0x44>)
 8003d9e:	4a10      	ldr	r2, [pc, #64]	; (8003de0 <MX_COMP1_Init+0x48>)
 8003da0:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8003da2:	4b0e      	ldr	r3, [pc, #56]	; (8003ddc <MX_COMP1_Init+0x44>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8003da8:	4b0c      	ldr	r3, [pc, #48]	; (8003ddc <MX_COMP1_Init+0x44>)
 8003daa:	4a0e      	ldr	r2, [pc, #56]	; (8003de4 <MX_COMP1_Init+0x4c>)
 8003dac:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8003dae:	4b0b      	ldr	r3, [pc, #44]	; (8003ddc <MX_COMP1_Init+0x44>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8003db4:	4b09      	ldr	r3, [pc, #36]	; (8003ddc <MX_COMP1_Init+0x44>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8003dba:	4b08      	ldr	r3, [pc, #32]	; (8003ddc <MX_COMP1_Init+0x44>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8003dc0:	4b06      	ldr	r3, [pc, #24]	; (8003ddc <MX_COMP1_Init+0x44>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8003dc6:	4805      	ldr	r0, [pc, #20]	; (8003ddc <MX_COMP1_Init+0x44>)
 8003dc8:	f002 ff22 	bl	8006c10 <HAL_COMP_Init>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 8003dd2:	f000 fe73 	bl	8004abc <Error_Handler>
  }

}
 8003dd6:	bf00      	nop
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	20001508 	.word	0x20001508
 8003de0:	40010200 	.word	0x40010200
 8003de4:	00800030 	.word	0x00800030

08003de8 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b088      	sub	sp, #32
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003df0:	f107 030c 	add.w	r3, r7, #12
 8003df4:	2200      	movs	r2, #0
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	605a      	str	r2, [r3, #4]
 8003dfa:	609a      	str	r2, [r3, #8]
 8003dfc:	60da      	str	r2, [r3, #12]
 8003dfe:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a0f      	ldr	r2, [pc, #60]	; (8003e44 <HAL_COMP_MspInit+0x5c>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d118      	bne.n	8003e3c <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e0a:	4b0f      	ldr	r3, [pc, #60]	; (8003e48 <HAL_COMP_MspInit+0x60>)
 8003e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e0e:	4a0e      	ldr	r2, [pc, #56]	; (8003e48 <HAL_COMP_MspInit+0x60>)
 8003e10:	f043 0301 	orr.w	r3, r3, #1
 8003e14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e16:	4b0c      	ldr	r3, [pc, #48]	; (8003e48 <HAL_COMP_MspInit+0x60>)
 8003e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	60bb      	str	r3, [r7, #8]
 8003e20:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003e22:	2302      	movs	r3, #2
 8003e24:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e26:	2303      	movs	r3, #3
 8003e28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e2e:	f107 030c 	add.w	r3, r7, #12
 8003e32:	4619      	mov	r1, r3
 8003e34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e38:	f004 f86e 	bl	8007f18 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8003e3c:	bf00      	nop
 8003e3e:	3720      	adds	r7, #32
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	40010200 	.word	0x40010200
 8003e48:	40021000 	.word	0x40021000

08003e4c <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b08c      	sub	sp, #48	; 0x30
 8003e50:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8003e52:	463b      	mov	r3, r7
 8003e54:	2230      	movs	r2, #48	; 0x30
 8003e56:	2100      	movs	r1, #0
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f008 f843 	bl	800bee4 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8003e5e:	4b1e      	ldr	r3, [pc, #120]	; (8003ed8 <MX_DAC1_Init+0x8c>)
 8003e60:	4a1e      	ldr	r2, [pc, #120]	; (8003edc <MX_DAC1_Init+0x90>)
 8003e62:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8003e64:	481c      	ldr	r0, [pc, #112]	; (8003ed8 <MX_DAC1_Init+0x8c>)
 8003e66:	f003 f976 	bl	8007156 <HAL_DAC_Init>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8003e70:	f000 fe24 	bl	8004abc <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003e74:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e78:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8003e82:	2300      	movs	r3, #0
 8003e84:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8003e86:	2306      	movs	r3, #6
 8003e88:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8003e92:	2301      	movs	r3, #1
 8003e94:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8003e96:	2300      	movs	r3, #0
 8003e98:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003e9a:	463b      	mov	r3, r7
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	480d      	ldr	r0, [pc, #52]	; (8003ed8 <MX_DAC1_Init+0x8c>)
 8003ea2:	f003 fb37 	bl	8007514 <HAL_DAC_ConfigChannel>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 8003eac:	f000 fe06 	bl	8004abc <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8003eb8:	463b      	mov	r3, r7
 8003eba:	2210      	movs	r2, #16
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	4806      	ldr	r0, [pc, #24]	; (8003ed8 <MX_DAC1_Init+0x8c>)
 8003ec0:	f003 fb28 	bl	8007514 <HAL_DAC_ConfigChannel>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 8003eca:	f000 fdf7 	bl	8004abc <Error_Handler>
  }

}
 8003ece:	bf00      	nop
 8003ed0:	3730      	adds	r7, #48	; 0x30
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	20001540 	.word	0x20001540
 8003edc:	50000800 	.word	0x50000800

08003ee0 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b08c      	sub	sp, #48	; 0x30
 8003ee4:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8003ee6:	463b      	mov	r3, r7
 8003ee8:	2230      	movs	r2, #48	; 0x30
 8003eea:	2100      	movs	r1, #0
 8003eec:	4618      	mov	r0, r3
 8003eee:	f007 fff9 	bl	800bee4 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 8003ef2:	4b16      	ldr	r3, [pc, #88]	; (8003f4c <MX_DAC2_Init+0x6c>)
 8003ef4:	4a16      	ldr	r2, [pc, #88]	; (8003f50 <MX_DAC2_Init+0x70>)
 8003ef6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8003ef8:	4814      	ldr	r0, [pc, #80]	; (8003f4c <MX_DAC2_Init+0x6c>)
 8003efa:	f003 f92c 	bl	8007156 <HAL_DAC_Init>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8003f04:	f000 fdda 	bl	8004abc <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003f08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f0c:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8003f12:	2300      	movs	r3, #0
 8003f14:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8003f16:	2300      	movs	r3, #0
 8003f18:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8003f1a:	2306      	movs	r3, #6
 8003f1c:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003f22:	2300      	movs	r3, #0
 8003f24:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8003f26:	2301      	movs	r3, #1
 8003f28:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003f2e:	463b      	mov	r3, r7
 8003f30:	2200      	movs	r2, #0
 8003f32:	4619      	mov	r1, r3
 8003f34:	4805      	ldr	r0, [pc, #20]	; (8003f4c <MX_DAC2_Init+0x6c>)
 8003f36:	f003 faed 	bl	8007514 <HAL_DAC_ConfigChannel>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 8003f40:	f000 fdbc 	bl	8004abc <Error_Handler>
  }

}
 8003f44:	bf00      	nop
 8003f46:	3730      	adds	r7, #48	; 0x30
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	2000152c 	.word	0x2000152c
 8003f50:	50000c00 	.word	0x50000c00

08003f54 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b08c      	sub	sp, #48	; 0x30
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f5c:	f107 031c 	add.w	r3, r7, #28
 8003f60:	2200      	movs	r2, #0
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	605a      	str	r2, [r3, #4]
 8003f66:	609a      	str	r2, [r3, #8]
 8003f68:	60da      	str	r2, [r3, #12]
 8003f6a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a56      	ldr	r2, [pc, #344]	; (80040cc <HAL_DAC_MspInit+0x178>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d150      	bne.n	8004018 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003f76:	4b56      	ldr	r3, [pc, #344]	; (80040d0 <HAL_DAC_MspInit+0x17c>)
 8003f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f7a:	4a55      	ldr	r2, [pc, #340]	; (80040d0 <HAL_DAC_MspInit+0x17c>)
 8003f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f82:	4b53      	ldr	r3, [pc, #332]	; (80040d0 <HAL_DAC_MspInit+0x17c>)
 8003f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f8a:	61bb      	str	r3, [r7, #24]
 8003f8c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f8e:	4b50      	ldr	r3, [pc, #320]	; (80040d0 <HAL_DAC_MspInit+0x17c>)
 8003f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f92:	4a4f      	ldr	r2, [pc, #316]	; (80040d0 <HAL_DAC_MspInit+0x17c>)
 8003f94:	f043 0301 	orr.w	r3, r3, #1
 8003f98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f9a:	4b4d      	ldr	r3, [pc, #308]	; (80040d0 <HAL_DAC_MspInit+0x17c>)
 8003f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	617b      	str	r3, [r7, #20]
 8003fa4:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003fa6:	2330      	movs	r3, #48	; 0x30
 8003fa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003faa:	2303      	movs	r3, #3
 8003fac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fb2:	f107 031c 	add.w	r3, r7, #28
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fbc:	f003 ffac 	bl	8007f18 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8003fc0:	4b44      	ldr	r3, [pc, #272]	; (80040d4 <HAL_DAC_MspInit+0x180>)
 8003fc2:	4a45      	ldr	r2, [pc, #276]	; (80040d8 <HAL_DAC_MspInit+0x184>)
 8003fc4:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8003fc6:	4b43      	ldr	r3, [pc, #268]	; (80040d4 <HAL_DAC_MspInit+0x180>)
 8003fc8:	2206      	movs	r2, #6
 8003fca:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003fcc:	4b41      	ldr	r3, [pc, #260]	; (80040d4 <HAL_DAC_MspInit+0x180>)
 8003fce:	2210      	movs	r2, #16
 8003fd0:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fd2:	4b40      	ldr	r3, [pc, #256]	; (80040d4 <HAL_DAC_MspInit+0x180>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003fd8:	4b3e      	ldr	r3, [pc, #248]	; (80040d4 <HAL_DAC_MspInit+0x180>)
 8003fda:	2280      	movs	r2, #128	; 0x80
 8003fdc:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003fde:	4b3d      	ldr	r3, [pc, #244]	; (80040d4 <HAL_DAC_MspInit+0x180>)
 8003fe0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fe4:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003fe6:	4b3b      	ldr	r3, [pc, #236]	; (80040d4 <HAL_DAC_MspInit+0x180>)
 8003fe8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fec:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8003fee:	4b39      	ldr	r3, [pc, #228]	; (80040d4 <HAL_DAC_MspInit+0x180>)
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003ff4:	4b37      	ldr	r3, [pc, #220]	; (80040d4 <HAL_DAC_MspInit+0x180>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8003ffa:	4836      	ldr	r0, [pc, #216]	; (80040d4 <HAL_DAC_MspInit+0x180>)
 8003ffc:	f003 fcc0 	bl	8007980 <HAL_DMA_Init>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8004006:	f000 fd59 	bl	8004abc <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a31      	ldr	r2, [pc, #196]	; (80040d4 <HAL_DAC_MspInit+0x180>)
 800400e:	609a      	str	r2, [r3, #8]
 8004010:	4a30      	ldr	r2, [pc, #192]	; (80040d4 <HAL_DAC_MspInit+0x180>)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 8004016:	e054      	b.n	80040c2 <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a2f      	ldr	r2, [pc, #188]	; (80040dc <HAL_DAC_MspInit+0x188>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d14f      	bne.n	80040c2 <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8004022:	4b2b      	ldr	r3, [pc, #172]	; (80040d0 <HAL_DAC_MspInit+0x17c>)
 8004024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004026:	4a2a      	ldr	r2, [pc, #168]	; (80040d0 <HAL_DAC_MspInit+0x17c>)
 8004028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800402c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800402e:	4b28      	ldr	r3, [pc, #160]	; (80040d0 <HAL_DAC_MspInit+0x17c>)
 8004030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004036:	613b      	str	r3, [r7, #16]
 8004038:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800403a:	4b25      	ldr	r3, [pc, #148]	; (80040d0 <HAL_DAC_MspInit+0x17c>)
 800403c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800403e:	4a24      	ldr	r2, [pc, #144]	; (80040d0 <HAL_DAC_MspInit+0x17c>)
 8004040:	f043 0301 	orr.w	r3, r3, #1
 8004044:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004046:	4b22      	ldr	r3, [pc, #136]	; (80040d0 <HAL_DAC_MspInit+0x17c>)
 8004048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	60fb      	str	r3, [r7, #12]
 8004050:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004052:	2340      	movs	r3, #64	; 0x40
 8004054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004056:	2303      	movs	r3, #3
 8004058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800405a:	2300      	movs	r3, #0
 800405c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800405e:	f107 031c 	add.w	r3, r7, #28
 8004062:	4619      	mov	r1, r3
 8004064:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004068:	f003 ff56 	bl	8007f18 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 800406c:	4b1c      	ldr	r3, [pc, #112]	; (80040e0 <HAL_DAC_MspInit+0x18c>)
 800406e:	4a1d      	ldr	r2, [pc, #116]	; (80040e4 <HAL_DAC_MspInit+0x190>)
 8004070:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8004072:	4b1b      	ldr	r3, [pc, #108]	; (80040e0 <HAL_DAC_MspInit+0x18c>)
 8004074:	2229      	movs	r2, #41	; 0x29
 8004076:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004078:	4b19      	ldr	r3, [pc, #100]	; (80040e0 <HAL_DAC_MspInit+0x18c>)
 800407a:	2210      	movs	r2, #16
 800407c:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800407e:	4b18      	ldr	r3, [pc, #96]	; (80040e0 <HAL_DAC_MspInit+0x18c>)
 8004080:	2200      	movs	r2, #0
 8004082:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8004084:	4b16      	ldr	r3, [pc, #88]	; (80040e0 <HAL_DAC_MspInit+0x18c>)
 8004086:	2280      	movs	r2, #128	; 0x80
 8004088:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800408a:	4b15      	ldr	r3, [pc, #84]	; (80040e0 <HAL_DAC_MspInit+0x18c>)
 800408c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004090:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004092:	4b13      	ldr	r3, [pc, #76]	; (80040e0 <HAL_DAC_MspInit+0x18c>)
 8004094:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004098:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 800409a:	4b11      	ldr	r3, [pc, #68]	; (80040e0 <HAL_DAC_MspInit+0x18c>)
 800409c:	2220      	movs	r2, #32
 800409e:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80040a0:	4b0f      	ldr	r3, [pc, #60]	; (80040e0 <HAL_DAC_MspInit+0x18c>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 80040a6:	480e      	ldr	r0, [pc, #56]	; (80040e0 <HAL_DAC_MspInit+0x18c>)
 80040a8:	f003 fc6a 	bl	8007980 <HAL_DMA_Init>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <HAL_DAC_MspInit+0x162>
      Error_Handler();
 80040b2:	f000 fd03 	bl	8004abc <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a09      	ldr	r2, [pc, #36]	; (80040e0 <HAL_DAC_MspInit+0x18c>)
 80040ba:	609a      	str	r2, [r3, #8]
 80040bc:	4a08      	ldr	r2, [pc, #32]	; (80040e0 <HAL_DAC_MspInit+0x18c>)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6293      	str	r3, [r2, #40]	; 0x28
}
 80040c2:	bf00      	nop
 80040c4:	3730      	adds	r7, #48	; 0x30
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	50000800 	.word	0x50000800
 80040d0:	40021000 	.word	0x40021000
 80040d4:	20001554 	.word	0x20001554
 80040d8:	4002001c 	.word	0x4002001c
 80040dc:	50000c00 	.word	0x50000c00
 80040e0:	200015b4 	.word	0x200015b4
 80040e4:	40020030 	.word	0x40020030

080040e8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80040ee:	4b1a      	ldr	r3, [pc, #104]	; (8004158 <MX_DMA_Init+0x70>)
 80040f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040f2:	4a19      	ldr	r2, [pc, #100]	; (8004158 <MX_DMA_Init+0x70>)
 80040f4:	f043 0304 	orr.w	r3, r3, #4
 80040f8:	6493      	str	r3, [r2, #72]	; 0x48
 80040fa:	4b17      	ldr	r3, [pc, #92]	; (8004158 <MX_DMA_Init+0x70>)
 80040fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040fe:	f003 0304 	and.w	r3, r3, #4
 8004102:	607b      	str	r3, [r7, #4]
 8004104:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004106:	4b14      	ldr	r3, [pc, #80]	; (8004158 <MX_DMA_Init+0x70>)
 8004108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800410a:	4a13      	ldr	r2, [pc, #76]	; (8004158 <MX_DMA_Init+0x70>)
 800410c:	f043 0301 	orr.w	r3, r3, #1
 8004110:	6493      	str	r3, [r2, #72]	; 0x48
 8004112:	4b11      	ldr	r3, [pc, #68]	; (8004158 <MX_DMA_Init+0x70>)
 8004114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	603b      	str	r3, [r7, #0]
 800411c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 800411e:	2200      	movs	r2, #0
 8004120:	2101      	movs	r1, #1
 8004122:	200b      	movs	r0, #11
 8004124:	f002 ffe3 	bl	80070ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004128:	200b      	movs	r0, #11
 800412a:	f002 fffa 	bl	8007122 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800412e:	2200      	movs	r2, #0
 8004130:	2100      	movs	r1, #0
 8004132:	200c      	movs	r0, #12
 8004134:	f002 ffdb 	bl	80070ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004138:	200c      	movs	r0, #12
 800413a:	f002 fff2 	bl	8007122 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800413e:	2200      	movs	r2, #0
 8004140:	2100      	movs	r1, #0
 8004142:	200d      	movs	r0, #13
 8004144:	f002 ffd3 	bl	80070ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8004148:	200d      	movs	r0, #13
 800414a:	f002 ffea 	bl	8007122 <HAL_NVIC_EnableIRQ>

}
 800414e:	bf00      	nop
 8004150:	3708      	adds	r7, #8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	40021000 	.word	0x40021000

0800415c <update_dc_bias_sweep>:
uint16_t dcbias = 0;
int dcbias_dir = 1;
int dcinverted = 0;

void update_dc_bias_sweep()
{
 800415c:	b580      	push	{r7, lr}
 800415e:	af00      	add	r7, sp, #0
	  // up=1, down=0
	  (dcbias_dir) ? (dcbias++) : (dcbias--);
 8004160:	4b20      	ldr	r3, [pc, #128]	; (80041e4 <update_dc_bias_sweep+0x88>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d006      	beq.n	8004176 <update_dc_bias_sweep+0x1a>
 8004168:	4b1f      	ldr	r3, [pc, #124]	; (80041e8 <update_dc_bias_sweep+0x8c>)
 800416a:	881b      	ldrh	r3, [r3, #0]
 800416c:	3301      	adds	r3, #1
 800416e:	b29a      	uxth	r2, r3
 8004170:	4b1d      	ldr	r3, [pc, #116]	; (80041e8 <update_dc_bias_sweep+0x8c>)
 8004172:	801a      	strh	r2, [r3, #0]
 8004174:	e005      	b.n	8004182 <update_dc_bias_sweep+0x26>
 8004176:	4b1c      	ldr	r3, [pc, #112]	; (80041e8 <update_dc_bias_sweep+0x8c>)
 8004178:	881b      	ldrh	r3, [r3, #0]
 800417a:	3b01      	subs	r3, #1
 800417c:	b29a      	uxth	r2, r3
 800417e:	4b1a      	ldr	r3, [pc, #104]	; (80041e8 <update_dc_bias_sweep+0x8c>)
 8004180:	801a      	strh	r2, [r3, #0]

	  // invert the bias signal at zero crossing
	  if(dcbias < 1) {
 8004182:	4b19      	ldr	r3, [pc, #100]	; (80041e8 <update_dc_bias_sweep+0x8c>)
 8004184:	881b      	ldrh	r3, [r3, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10a      	bne.n	80041a0 <update_dc_bias_sweep+0x44>
		(dcinverted) ? (dcinverted=0) : (dcinverted=1);
 800418a:	4b18      	ldr	r3, [pc, #96]	; (80041ec <update_dc_bias_sweep+0x90>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <update_dc_bias_sweep+0x3e>
 8004192:	4b16      	ldr	r3, [pc, #88]	; (80041ec <update_dc_bias_sweep+0x90>)
 8004194:	2200      	movs	r2, #0
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	e002      	b.n	80041a0 <update_dc_bias_sweep+0x44>
 800419a:	4b14      	ldr	r3, [pc, #80]	; (80041ec <update_dc_bias_sweep+0x90>)
 800419c:	2201      	movs	r2, #1
 800419e:	601a      	str	r2, [r3, #0]
	  }

	  // change direction if dac limits are reached
	  if(dcbias < 1) 	{ dcbias_dir = 1; }
 80041a0:	4b11      	ldr	r3, [pc, #68]	; (80041e8 <update_dc_bias_sweep+0x8c>)
 80041a2:	881b      	ldrh	r3, [r3, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d102      	bne.n	80041ae <update_dc_bias_sweep+0x52>
 80041a8:	4b0e      	ldr	r3, [pc, #56]	; (80041e4 <update_dc_bias_sweep+0x88>)
 80041aa:	2201      	movs	r2, #1
 80041ac:	601a      	str	r2, [r3, #0]
	  if(dcbias > 4095) { dcbias_dir = 0; }
 80041ae:	4b0e      	ldr	r3, [pc, #56]	; (80041e8 <update_dc_bias_sweep+0x8c>)
 80041b0:	881b      	ldrh	r3, [r3, #0]
 80041b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041b6:	d302      	bcc.n	80041be <update_dc_bias_sweep+0x62>
 80041b8:	4b0a      	ldr	r3, [pc, #40]	; (80041e4 <update_dc_bias_sweep+0x88>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	601a      	str	r2, [r3, #0]


	  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, dcinverted);
 80041be:	4b0b      	ldr	r3, [pc, #44]	; (80041ec <update_dc_bias_sweep+0x90>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	461a      	mov	r2, r3
 80041c6:	2108      	movs	r1, #8
 80041c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041cc:	f004 f83e 	bl	800824c <HAL_GPIO_WritePin>
	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, dcbias);
 80041d0:	4b05      	ldr	r3, [pc, #20]	; (80041e8 <update_dc_bias_sweep+0x8c>)
 80041d2:	881b      	ldrh	r3, [r3, #0]
 80041d4:	2200      	movs	r2, #0
 80041d6:	2110      	movs	r1, #16
 80041d8:	4805      	ldr	r0, [pc, #20]	; (80041f0 <update_dc_bias_sweep+0x94>)
 80041da:	f003 f949 	bl	8007470 <HAL_DAC_SetValue>
}
 80041de:	bf00      	nop
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	200001d0 	.word	0x200001d0
 80041e8:	2000141a 	.word	0x2000141a
 80041ec:	2000141c 	.word	0x2000141c
 80041f0:	20001540 	.word	0x20001540

080041f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041f8:	4b04      	ldr	r3, [pc, #16]	; (800420c <__NVIC_GetPriorityGrouping+0x18>)
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	0a1b      	lsrs	r3, r3, #8
 80041fe:	f003 0307 	and.w	r3, r3, #7
}
 8004202:	4618      	mov	r0, r3
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr
 800420c:	e000ed00 	.word	0xe000ed00

08004210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	4603      	mov	r3, r0
 8004218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800421a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800421e:	2b00      	cmp	r3, #0
 8004220:	db0b      	blt.n	800423a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004222:	79fb      	ldrb	r3, [r7, #7]
 8004224:	f003 021f 	and.w	r2, r3, #31
 8004228:	4907      	ldr	r1, [pc, #28]	; (8004248 <__NVIC_EnableIRQ+0x38>)
 800422a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800422e:	095b      	lsrs	r3, r3, #5
 8004230:	2001      	movs	r0, #1
 8004232:	fa00 f202 	lsl.w	r2, r0, r2
 8004236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800423a:	bf00      	nop
 800423c:	370c      	adds	r7, #12
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	e000e100 	.word	0xe000e100

0800424c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	4603      	mov	r3, r0
 8004254:	6039      	str	r1, [r7, #0]
 8004256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800425c:	2b00      	cmp	r3, #0
 800425e:	db0a      	blt.n	8004276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	b2da      	uxtb	r2, r3
 8004264:	490c      	ldr	r1, [pc, #48]	; (8004298 <__NVIC_SetPriority+0x4c>)
 8004266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800426a:	0112      	lsls	r2, r2, #4
 800426c:	b2d2      	uxtb	r2, r2
 800426e:	440b      	add	r3, r1
 8004270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004274:	e00a      	b.n	800428c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	b2da      	uxtb	r2, r3
 800427a:	4908      	ldr	r1, [pc, #32]	; (800429c <__NVIC_SetPriority+0x50>)
 800427c:	79fb      	ldrb	r3, [r7, #7]
 800427e:	f003 030f 	and.w	r3, r3, #15
 8004282:	3b04      	subs	r3, #4
 8004284:	0112      	lsls	r2, r2, #4
 8004286:	b2d2      	uxtb	r2, r2
 8004288:	440b      	add	r3, r1
 800428a:	761a      	strb	r2, [r3, #24]
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr
 8004298:	e000e100 	.word	0xe000e100
 800429c:	e000ed00 	.word	0xe000ed00

080042a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b089      	sub	sp, #36	; 0x24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f003 0307 	and.w	r3, r3, #7
 80042b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	f1c3 0307 	rsb	r3, r3, #7
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	bf28      	it	cs
 80042be:	2304      	movcs	r3, #4
 80042c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	3304      	adds	r3, #4
 80042c6:	2b06      	cmp	r3, #6
 80042c8:	d902      	bls.n	80042d0 <NVIC_EncodePriority+0x30>
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	3b03      	subs	r3, #3
 80042ce:	e000      	b.n	80042d2 <NVIC_EncodePriority+0x32>
 80042d0:	2300      	movs	r3, #0
 80042d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	fa02 f303 	lsl.w	r3, r2, r3
 80042de:	43da      	mvns	r2, r3
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	401a      	ands	r2, r3
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	fa01 f303 	lsl.w	r3, r1, r3
 80042f2:	43d9      	mvns	r1, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042f8:	4313      	orrs	r3, r2
         );
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3724      	adds	r7, #36	; 0x24
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
	...

08004308 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 8004312:	4a14      	ldr	r2, [pc, #80]	; (8004364 <LL_SYSCFG_SetEXTISource+0x5c>)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	f003 0303 	and.w	r3, r3, #3
 800431a:	3302      	adds	r3, #2
 800431c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	0c1b      	lsrs	r3, r3, #16
 8004324:	43db      	mvns	r3, r3
 8004326:	ea02 0103 	and.w	r1, r2, r3
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	0c1b      	lsrs	r3, r3, #16
 800432e:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	fa93 f3a3 	rbit	r3, r3
 8004336:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	fab3 f383 	clz	r3, r3
 800433e:	b2db      	uxtb	r3, r3
 8004340:	f003 031f 	and.w	r3, r3, #31
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	409a      	lsls	r2, r3
 8004348:	4806      	ldr	r0, [pc, #24]	; (8004364 <LL_SYSCFG_SetEXTISource+0x5c>)
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	f003 0303 	and.w	r3, r3, #3
 8004350:	430a      	orrs	r2, r1
 8004352:	3302      	adds	r3, #2
 8004354:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8004358:	bf00      	nop
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr
 8004364:	40010000 	.word	0x40010000

08004368 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8004368:	b480      	push	{r7}
 800436a:	b089      	sub	sp, #36	; 0x24
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	fa93 f3a3 	rbit	r3, r3
 8004382:	613b      	str	r3, [r7, #16]
  return result;
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	fab3 f383 	clz	r3, r3
 800438a:	b2db      	uxtb	r3, r3
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	2103      	movs	r1, #3
 8004390:	fa01 f303 	lsl.w	r3, r1, r3
 8004394:	43db      	mvns	r3, r3
 8004396:	401a      	ands	r2, r3
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	fa93 f3a3 	rbit	r3, r3
 80043a2:	61bb      	str	r3, [r7, #24]
  return result;
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	fab3 f383 	clz	r3, r3
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	6879      	ldr	r1, [r7, #4]
 80043b0:	fa01 f303 	lsl.w	r3, r1, r3
 80043b4:	431a      	orrs	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	601a      	str	r2, [r3, #0]
}
 80043ba:	bf00      	nop
 80043bc:	3724      	adds	r7, #36	; 0x24
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr

080043c6 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80043c6:	b480      	push	{r7}
 80043c8:	b089      	sub	sp, #36	; 0x24
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	60f8      	str	r0, [r7, #12]
 80043ce:	60b9      	str	r1, [r7, #8]
 80043d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	68da      	ldr	r2, [r3, #12]
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	fa93 f3a3 	rbit	r3, r3
 80043e0:	613b      	str	r3, [r7, #16]
  return result;
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	fab3 f383 	clz	r3, r3
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	2103      	movs	r1, #3
 80043ee:	fa01 f303 	lsl.w	r3, r1, r3
 80043f2:	43db      	mvns	r3, r3
 80043f4:	401a      	ands	r2, r3
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	fa93 f3a3 	rbit	r3, r3
 8004400:	61bb      	str	r3, [r7, #24]
  return result;
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	fab3 f383 	clz	r3, r3
 8004408:	b2db      	uxtb	r3, r3
 800440a:	005b      	lsls	r3, r3, #1
 800440c:	6879      	ldr	r1, [r7, #4]
 800440e:	fa01 f303 	lsl.w	r3, r1, r3
 8004412:	431a      	orrs	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	60da      	str	r2, [r3, #12]
}
 8004418:	bf00      	nop
 800441a:	3724      	adds	r7, #36	; 0x24
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004448:	4b08      	ldr	r3, [pc, #32]	; (800446c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800444a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800444c:	4907      	ldr	r1, [pc, #28]	; (800446c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4313      	orrs	r3, r2
 8004452:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004454:	4b05      	ldr	r3, [pc, #20]	; (800446c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004456:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4013      	ands	r3, r2
 800445c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800445e:	68fb      	ldr	r3, [r7, #12]
}
 8004460:	bf00      	nop
 8004462:	3714      	adds	r7, #20
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr
 800446c:	40021000 	.word	0x40021000

08004470 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b08a      	sub	sp, #40	; 0x28
 8004474:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8004476:	f107 031c 	add.w	r3, r7, #28
 800447a:	2200      	movs	r2, #0
 800447c:	601a      	str	r2, [r3, #0]
 800447e:	605a      	str	r2, [r3, #4]
 8004480:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004482:	1d3b      	adds	r3, r7, #4
 8004484:	2200      	movs	r2, #0
 8004486:	601a      	str	r2, [r3, #0]
 8004488:	605a      	str	r2, [r3, #4]
 800448a:	609a      	str	r2, [r3, #8]
 800448c:	60da      	str	r2, [r3, #12]
 800448e:	611a      	str	r2, [r3, #16]
 8004490:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8004492:	2004      	movs	r0, #4
 8004494:	f7ff ffd4 	bl	8004440 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8004498:	2020      	movs	r0, #32
 800449a:	f7ff ffd1 	bl	8004440 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800449e:	2001      	movs	r0, #1
 80044a0:	f7ff ffce 	bl	8004440 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80044a4:	2002      	movs	r0, #2
 80044a6:	f7ff ffcb 	bl	8004440 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 80044aa:	2108      	movs	r1, #8
 80044ac:	48d3      	ldr	r0, [pc, #844]	; (80047fc <MX_GPIO_Init+0x38c>)
 80044ae:	f7ff ffb9 	bl	8004424 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 80044b2:	2108      	movs	r1, #8
 80044b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80044b8:	f7ff ffb4 	bl	8004424 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 80044bc:	2110      	movs	r1, #16
 80044be:	48cf      	ldr	r0, [pc, #828]	; (80047fc <MX_GPIO_Init+0x38c>)
 80044c0:	f7ff ffb0 	bl	8004424 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 80044c4:	2120      	movs	r1, #32
 80044c6:	48cd      	ldr	r0, [pc, #820]	; (80047fc <MX_GPIO_Init+0x38c>)
 80044c8:	f7ff ffac 	bl	8004424 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 80044cc:	2101      	movs	r1, #1
 80044ce:	48cc      	ldr	r0, [pc, #816]	; (8004800 <MX_GPIO_Init+0x390>)
 80044d0:	f7ff ffa8 	bl	8004424 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 80044d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80044d8:	48c8      	ldr	r0, [pc, #800]	; (80047fc <MX_GPIO_Init+0x38c>)
 80044da:	f7ff ffa3 	bl	8004424 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 80044de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80044e2:	48c6      	ldr	r0, [pc, #792]	; (80047fc <MX_GPIO_Init+0x38c>)
 80044e4:	f7ff ff9e 	bl	8004424 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 80044e8:	2140      	movs	r1, #64	; 0x40
 80044ea:	48c5      	ldr	r0, [pc, #788]	; (8004800 <MX_GPIO_Init+0x390>)
 80044ec:	f7ff ff9a 	bl	8004424 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 80044f0:	2180      	movs	r1, #128	; 0x80
 80044f2:	48c3      	ldr	r0, [pc, #780]	; (8004800 <MX_GPIO_Init+0x390>)
 80044f4:	f7ff ff96 	bl	8004424 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 80044f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80044fc:	48c0      	ldr	r0, [pc, #768]	; (8004800 <MX_GPIO_Init+0x390>)
 80044fe:	f7ff ff91 	bl	8004424 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 8004502:	49c0      	ldr	r1, [pc, #768]	; (8004804 <MX_GPIO_Init+0x394>)
 8004504:	2002      	movs	r0, #2
 8004506:	f7ff feff 	bl	8004308 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 800450a:	49bf      	ldr	r1, [pc, #764]	; (8004808 <MX_GPIO_Init+0x398>)
 800450c:	2002      	movs	r0, #2
 800450e:	f7ff fefb 	bl	8004308 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 8004512:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8004516:	2005      	movs	r0, #5
 8004518:	f7ff fef6 	bl	8004308 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 800451c:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8004520:	2005      	movs	r0, #5
 8004522:	f7ff fef1 	bl	8004308 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 8004526:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 800452a:	2002      	movs	r0, #2
 800452c:	f7ff feec 	bl	8004308 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8004530:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004534:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8004536:	2301      	movs	r3, #1
 8004538:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800453c:	2300      	movs	r3, #0
 800453e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8004542:	2302      	movs	r3, #2
 8004544:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8004548:	f107 031c 	add.w	r3, r7, #28
 800454c:	4618      	mov	r0, r3
 800454e:	f006 fad3 	bl	800aaf8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8004552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004556:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8004558:	2301      	movs	r3, #1
 800455a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800455e:	2300      	movs	r3, #0
 8004560:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8004564:	2302      	movs	r3, #2
 8004566:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800456a:	f107 031c 	add.w	r3, r7, #28
 800456e:	4618      	mov	r0, r3
 8004570:	f006 fac2 	bl	800aaf8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8004574:	2301      	movs	r3, #1
 8004576:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8004578:	2301      	movs	r3, #1
 800457a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800457e:	2300      	movs	r3, #0
 8004580:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8004584:	2302      	movs	r3, #2
 8004586:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800458a:	f107 031c 	add.w	r3, r7, #28
 800458e:	4618      	mov	r0, r3
 8004590:	f006 fab2 	bl	800aaf8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8004594:	2302      	movs	r3, #2
 8004596:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8004598:	2301      	movs	r3, #1
 800459a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800459e:	2300      	movs	r3, #0
 80045a0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80045a4:	2302      	movs	r3, #2
 80045a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80045aa:	f107 031c 	add.w	r3, r7, #28
 80045ae:	4618      	mov	r0, r3
 80045b0:	f006 faa2 	bl	800aaf8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 80045b4:	2304      	movs	r3, #4
 80045b6:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80045b8:	2301      	movs	r3, #1
 80045ba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80045be:	2300      	movs	r3, #0
 80045c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80045c4:	2302      	movs	r3, #2
 80045c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80045ca:	f107 031c 	add.w	r3, r7, #28
 80045ce:	4618      	mov	r0, r3
 80045d0:	f006 fa92 	bl	800aaf8 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 80045d4:	2201      	movs	r2, #1
 80045d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80045da:	4888      	ldr	r0, [pc, #544]	; (80047fc <MX_GPIO_Init+0x38c>)
 80045dc:	f7ff fef3 	bl	80043c6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 80045e0:	2201      	movs	r2, #1
 80045e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80045e6:	4885      	ldr	r0, [pc, #532]	; (80047fc <MX_GPIO_Init+0x38c>)
 80045e8:	f7ff feed 	bl	80043c6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 80045ec:	2201      	movs	r2, #1
 80045ee:	2101      	movs	r1, #1
 80045f0:	4886      	ldr	r0, [pc, #536]	; (800480c <MX_GPIO_Init+0x39c>)
 80045f2:	f7ff fee8 	bl	80043c6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 80045f6:	2201      	movs	r2, #1
 80045f8:	2102      	movs	r1, #2
 80045fa:	4884      	ldr	r0, [pc, #528]	; (800480c <MX_GPIO_Init+0x39c>)
 80045fc:	f7ff fee3 	bl	80043c6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 8004600:	2201      	movs	r2, #1
 8004602:	2104      	movs	r1, #4
 8004604:	487d      	ldr	r0, [pc, #500]	; (80047fc <MX_GPIO_Init+0x38c>)
 8004606:	f7ff fede 	bl	80043c6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 800460a:	2200      	movs	r2, #0
 800460c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004610:	487a      	ldr	r0, [pc, #488]	; (80047fc <MX_GPIO_Init+0x38c>)
 8004612:	f7ff fea9 	bl	8004368 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 8004616:	2200      	movs	r2, #0
 8004618:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800461c:	4877      	ldr	r0, [pc, #476]	; (80047fc <MX_GPIO_Init+0x38c>)
 800461e:	f7ff fea3 	bl	8004368 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 8004622:	2200      	movs	r2, #0
 8004624:	2101      	movs	r1, #1
 8004626:	4879      	ldr	r0, [pc, #484]	; (800480c <MX_GPIO_Init+0x39c>)
 8004628:	f7ff fe9e 	bl	8004368 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 800462c:	2200      	movs	r2, #0
 800462e:	2102      	movs	r1, #2
 8004630:	4876      	ldr	r0, [pc, #472]	; (800480c <MX_GPIO_Init+0x39c>)
 8004632:	f7ff fe99 	bl	8004368 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 8004636:	2200      	movs	r2, #0
 8004638:	2104      	movs	r1, #4
 800463a:	4870      	ldr	r0, [pc, #448]	; (80047fc <MX_GPIO_Init+0x38c>)
 800463c:	f7ff fe94 	bl	8004368 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 8004640:	2308      	movs	r3, #8
 8004642:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004644:	2301      	movs	r3, #1
 8004646:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004648:	2300      	movs	r3, #0
 800464a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800464c:	2300      	movs	r3, #0
 800464e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8004650:	2302      	movs	r3, #2
 8004652:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 8004654:	1d3b      	adds	r3, r7, #4
 8004656:	4619      	mov	r1, r3
 8004658:	4868      	ldr	r0, [pc, #416]	; (80047fc <MX_GPIO_Init+0x38c>)
 800465a:	f006 fc40 	bl	800aede <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 800465e:	2308      	movs	r3, #8
 8004660:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004662:	2301      	movs	r3, #1
 8004664:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004666:	2300      	movs	r3, #0
 8004668:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800466a:	2300      	movs	r3, #0
 800466c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800466e:	2300      	movs	r3, #0
 8004670:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 8004672:	1d3b      	adds	r3, r7, #4
 8004674:	4619      	mov	r1, r3
 8004676:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800467a:	f006 fc30 	bl	800aede <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 800467e:	2310      	movs	r3, #16
 8004680:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004682:	2301      	movs	r3, #1
 8004684:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004686:	2300      	movs	r3, #0
 8004688:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800468a:	2300      	movs	r3, #0
 800468c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800468e:	2300      	movs	r3, #0
 8004690:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 8004692:	1d3b      	adds	r3, r7, #4
 8004694:	4619      	mov	r1, r3
 8004696:	4859      	ldr	r0, [pc, #356]	; (80047fc <MX_GPIO_Init+0x38c>)
 8004698:	f006 fc21 	bl	800aede <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 800469c:	2320      	movs	r3, #32
 800469e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80046a0:	2301      	movs	r3, #1
 80046a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80046a4:	2300      	movs	r3, #0
 80046a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80046a8:	2300      	movs	r3, #0
 80046aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80046ac:	2300      	movs	r3, #0
 80046ae:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 80046b0:	1d3b      	adds	r3, r7, #4
 80046b2:	4619      	mov	r1, r3
 80046b4:	4851      	ldr	r0, [pc, #324]	; (80047fc <MX_GPIO_Init+0x38c>)
 80046b6:	f006 fc12 	bl	800aede <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 80046ba:	2301      	movs	r3, #1
 80046bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80046be:	2301      	movs	r3, #1
 80046c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80046c2:	2300      	movs	r3, #0
 80046c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80046c6:	2300      	movs	r3, #0
 80046c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80046ca:	2300      	movs	r3, #0
 80046cc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 80046ce:	1d3b      	adds	r3, r7, #4
 80046d0:	4619      	mov	r1, r3
 80046d2:	484b      	ldr	r0, [pc, #300]	; (8004800 <MX_GPIO_Init+0x390>)
 80046d4:	f006 fc03 	bl	800aede <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 80046d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80046de:	2301      	movs	r3, #1
 80046e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80046e2:	2300      	movs	r3, #0
 80046e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80046e6:	2300      	movs	r3, #0
 80046e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80046ea:	2300      	movs	r3, #0
 80046ec:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 80046ee:	1d3b      	adds	r3, r7, #4
 80046f0:	4619      	mov	r1, r3
 80046f2:	4842      	ldr	r0, [pc, #264]	; (80047fc <MX_GPIO_Init+0x38c>)
 80046f4:	f006 fbf3 	bl	800aede <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 80046f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80046fe:	2301      	movs	r3, #1
 8004700:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004702:	2300      	movs	r3, #0
 8004704:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004706:	2300      	movs	r3, #0
 8004708:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800470a:	2300      	movs	r3, #0
 800470c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 800470e:	1d3b      	adds	r3, r7, #4
 8004710:	4619      	mov	r1, r3
 8004712:	483a      	ldr	r0, [pc, #232]	; (80047fc <MX_GPIO_Init+0x38c>)
 8004714:	f006 fbe3 	bl	800aede <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 8004718:	2340      	movs	r3, #64	; 0x40
 800471a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800471c:	2301      	movs	r3, #1
 800471e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004720:	2303      	movs	r3, #3
 8004722:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004724:	2300      	movs	r3, #0
 8004726:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004728:	2300      	movs	r3, #0
 800472a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 800472c:	1d3b      	adds	r3, r7, #4
 800472e:	4619      	mov	r1, r3
 8004730:	4833      	ldr	r0, [pc, #204]	; (8004800 <MX_GPIO_Init+0x390>)
 8004732:	f006 fbd4 	bl	800aede <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 8004736:	2380      	movs	r3, #128	; 0x80
 8004738:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800473a:	2301      	movs	r3, #1
 800473c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800473e:	2303      	movs	r3, #3
 8004740:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004742:	2300      	movs	r3, #0
 8004744:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004746:	2300      	movs	r3, #0
 8004748:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800474a:	1d3b      	adds	r3, r7, #4
 800474c:	4619      	mov	r1, r3
 800474e:	482c      	ldr	r0, [pc, #176]	; (8004800 <MX_GPIO_Init+0x390>)
 8004750:	f006 fbc5 	bl	800aede <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 8004754:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004758:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800475a:	2301      	movs	r3, #1
 800475c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800475e:	2303      	movs	r3, #3
 8004760:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004762:	2300      	movs	r3, #0
 8004764:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004766:	2300      	movs	r3, #0
 8004768:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 800476a:	1d3b      	adds	r3, r7, #4
 800476c:	4619      	mov	r1, r3
 800476e:	4824      	ldr	r0, [pc, #144]	; (8004800 <MX_GPIO_Init+0x390>)
 8004770:	f006 fbb5 	bl	800aede <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004774:	f7ff fd3e 	bl	80041f4 <__NVIC_GetPriorityGrouping>
 8004778:	4603      	mov	r3, r0
 800477a:	2200      	movs	r2, #0
 800477c:	2100      	movs	r1, #0
 800477e:	4618      	mov	r0, r3
 8004780:	f7ff fd8e 	bl	80042a0 <NVIC_EncodePriority>
 8004784:	4603      	mov	r3, r0
 8004786:	4619      	mov	r1, r3
 8004788:	2006      	movs	r0, #6
 800478a:	f7ff fd5f 	bl	800424c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 800478e:	2006      	movs	r0, #6
 8004790:	f7ff fd3e 	bl	8004210 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004794:	f7ff fd2e 	bl	80041f4 <__NVIC_GetPriorityGrouping>
 8004798:	4603      	mov	r3, r0
 800479a:	2200      	movs	r2, #0
 800479c:	2100      	movs	r1, #0
 800479e:	4618      	mov	r0, r3
 80047a0:	f7ff fd7e 	bl	80042a0 <NVIC_EncodePriority>
 80047a4:	4603      	mov	r3, r0
 80047a6:	4619      	mov	r1, r3
 80047a8:	2007      	movs	r0, #7
 80047aa:	f7ff fd4f 	bl	800424c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 80047ae:	2007      	movs	r0, #7
 80047b0:	f7ff fd2e 	bl	8004210 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80047b4:	f7ff fd1e 	bl	80041f4 <__NVIC_GetPriorityGrouping>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2200      	movs	r2, #0
 80047bc:	2100      	movs	r1, #0
 80047be:	4618      	mov	r0, r3
 80047c0:	f7ff fd6e 	bl	80042a0 <NVIC_EncodePriority>
 80047c4:	4603      	mov	r3, r0
 80047c6:	4619      	mov	r1, r3
 80047c8:	2008      	movs	r0, #8
 80047ca:	f7ff fd3f 	bl	800424c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 80047ce:	2008      	movs	r0, #8
 80047d0:	f7ff fd1e 	bl	8004210 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80047d4:	f7ff fd0e 	bl	80041f4 <__NVIC_GetPriorityGrouping>
 80047d8:	4603      	mov	r3, r0
 80047da:	2200      	movs	r2, #0
 80047dc:	2100      	movs	r1, #0
 80047de:	4618      	mov	r0, r3
 80047e0:	f7ff fd5e 	bl	80042a0 <NVIC_EncodePriority>
 80047e4:	4603      	mov	r3, r0
 80047e6:	4619      	mov	r1, r3
 80047e8:	2028      	movs	r0, #40	; 0x28
 80047ea:	f7ff fd2f 	bl	800424c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 80047ee:	2028      	movs	r0, #40	; 0x28
 80047f0:	f7ff fd0e 	bl	8004210 <__NVIC_EnableIRQ>

}
 80047f4:	bf00      	nop
 80047f6:	3728      	adds	r7, #40	; 0x28
 80047f8:	46bd      	mov	sp, r7
 80047fa:	e009      	b.n	8004810 <MX_GPIO_Init+0x3a0>
 80047fc:	48000800 	.word	0x48000800
 8004800:	48000400 	.word	0x48000400
 8004804:	0f000003 	.word	0x0f000003
 8004808:	f0000003 	.word	0xf0000003
 800480c:	48001400 	.word	0x48001400
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop

08004814 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800481c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004820:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	2b00      	cmp	r3, #0
 800482a:	d013      	beq.n	8004854 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800482c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004830:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8004834:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00b      	beq.n	8004854 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800483c:	e000      	b.n	8004840 <ITM_SendChar+0x2c>
    {
      __NOP();
 800483e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8004840:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d0f9      	beq.n	800483e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800484a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	b2d2      	uxtb	r2, r2
 8004852:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8004854:	687b      	ldr	r3, [r7, #4]
}
 8004856:	4618      	mov	r0, r3
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b086      	sub	sp, #24
 8004866:	af00      	add	r7, sp, #0
 8004868:	60f8      	str	r0, [r7, #12]
 800486a:	60b9      	str	r1, [r7, #8]
 800486c:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 800486e:	2300      	movs	r3, #0
 8004870:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8004872:	2300      	movs	r3, #0
 8004874:	617b      	str	r3, [r7, #20]
 8004876:	e009      	b.n	800488c <_write+0x2a>
    ITM_SendChar((*ptr++));
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	1c5a      	adds	r2, r3, #1
 800487c:	60ba      	str	r2, [r7, #8]
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	4618      	mov	r0, r3
 8004882:	f7ff ffc7 	bl	8004814 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	3301      	adds	r3, #1
 800488a:	617b      	str	r3, [r7, #20]
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	429a      	cmp	r2, r3
 8004892:	dbf1      	blt.n	8004878 <_write+0x16>
  return len;
 8004894:	687b      	ldr	r3, [r7, #4]
}
 8004896:	4618      	mov	r0, r3
 8004898:	3718      	adds	r7, #24
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <HAL_DAC_ErrorCallbackCh1>:

void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800489e:	b480      	push	{r7}
 80048a0:	b083      	sub	sp, #12
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
	// do something
}
 80048a6:	bf00      	nop
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
	...

080048b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80048ba:	f000 ff6a 	bl	8005792 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80048be:	f000 f88f 	bl	80049e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80048c2:	f7ff fdd5 	bl	8004470 <MX_GPIO_Init>
  MX_DMA_Init();
 80048c6:	f7ff fc0f 	bl	80040e8 <MX_DMA_Init>
  MX_DAC1_Init();
 80048ca:	f7ff fabf 	bl	8003e4c <MX_DAC1_Init>
  MX_DAC2_Init();
 80048ce:	f7ff fb07 	bl	8003ee0 <MX_DAC2_Init>
  MX_ADC1_Init();
 80048d2:	f7ff f97d 	bl	8003bd0 <MX_ADC1_Init>
  MX_COMP1_Init();
 80048d6:	f7ff fa5f 	bl	8003d98 <MX_COMP1_Init>
  MX_TIM2_Init();
 80048da:	f000 fc51 	bl	8005180 <MX_TIM2_Init>
  MX_TIM17_Init();
 80048de:	f000 fde9 	bl	80054b4 <MX_TIM17_Init>
  MX_SPI3_Init();
 80048e2:	f000 f929 	bl	8004b38 <MX_SPI3_Init>
  MX_RNG_Init();
 80048e6:	f000 f919 	bl	8004b1c <MX_RNG_Init>
  MX_TIM1_Init();
 80048ea:	f000 fbd9 	bl	80050a0 <MX_TIM1_Init>
  MX_TIM8_Init();
 80048ee:	f000 fd01 	bl	80052f4 <MX_TIM8_Init>
  MX_TIM16_Init();
 80048f2:	f000 fdb9 	bl	8005468 <MX_TIM16_Init>
  MX_TIM15_Init();
 80048f6:	f000 fd65 	bl	80053c4 <MX_TIM15_Init>
  MX_TIM5_Init();
 80048fa:	f000 fcab 	bl	8005254 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  DT_InitRegister();
 80048fe:	f7fe fcc1 	bl	8003284 <DT_InitRegister>

  // main signal function output (external)
  FuncO_ApplyPreset_Fast(eDefaultFuncPreset);
 8004902:	2000      	movs	r0, #0
 8004904:	f7fe ff00 	bl	8003708 <FuncO_ApplyPreset_Fast>
  //HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
  //TIM8->ARR = sin1_max_arr;

  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 8004908:	2110      	movs	r1, #16
 800490a:	482b      	ldr	r0, [pc, #172]	; (80049b8 <main+0x104>)
 800490c:	f002 fc45 	bl	800719a <HAL_DAC_Start>
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, square_data_table, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, unitimpulse_data_table, UNITIMPULSE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_data_table, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_rev_data_table, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
  HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, triangle_data_table, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 8004910:	2300      	movs	r3, #0
 8004912:	9300      	str	r3, [sp, #0]
 8004914:	2378      	movs	r3, #120	; 0x78
 8004916:	4a29      	ldr	r2, [pc, #164]	; (80049bc <main+0x108>)
 8004918:	2100      	movs	r1, #0
 800491a:	4829      	ldr	r0, [pc, #164]	; (80049c0 <main+0x10c>)
 800491c:	f002 fc90 	bl	8007240 <HAL_DAC_Start_DMA>
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);

#ifndef DISABLE_ALL_TIMERS

  // single clock to run all DAC channels. TODO add independent clocks
  HAL_TIM_Base_Start(&htim8);
 8004920:	4828      	ldr	r0, [pc, #160]	; (80049c4 <main+0x110>)
 8004922:	f005 f80f 	bl	8009944 <HAL_TIM_Base_Start>
  FreqO_ApplyPreset(eDefaultFreqPreset);
 8004926:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800492a:	f7fe fe29 	bl	8003580 <FreqO_ApplyPreset>

#endif //DISABLE_ALL_TIMERS

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 800492e:	2201      	movs	r2, #1
 8004930:	2108      	movs	r1, #8
 8004932:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004936:	f003 fc89 	bl	800824c <HAL_GPIO_WritePin>

  // PGA gain
  GO_ApplyPreset_Fast(eDefaultGainPreset);
 800493a:	2003      	movs	r0, #3
 800493c:	f7ff f802 	bl	8003944 <GO_ApplyPreset_Fast>
  //HAL_TIM_Base_Start_IT(&htim17);
#endif	//DISABLE_ALL_TIMERS


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 8004940:	2200      	movs	r2, #0
 8004942:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004946:	4820      	ldr	r0, [pc, #128]	; (80049c8 <main+0x114>)
 8004948:	f003 fc80 	bl	800824c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 800494c:	2200      	movs	r2, #0
 800494e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004952:	481d      	ldr	r0, [pc, #116]	; (80049c8 <main+0x114>)
 8004954:	f003 fc7a 	bl	800824c <HAL_GPIO_WritePin>

#ifdef TIM_TRIGGER_MODE
  // input capture on in TIM2 slave-mode TF1FP1

  // set HW switch to direct ext. trigger input to TIM pin
  HAL_GPIO_WritePin(TRIGMODE_GPIO_Port, TRIGMODE_Pin, GPIO_PIN_SET);
 8004958:	2201      	movs	r2, #1
 800495a:	2108      	movs	r1, #8
 800495c:	481a      	ldr	r0, [pc, #104]	; (80049c8 <main+0x114>)
 800495e:	f003 fc75 	bl	800824c <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);	// TS5A3357 Pin6
  //HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); // TS5A3357 Pin5

  // clear slave mode select reg
  TIM2->SMCR &= ~(TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2);
 8004962:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800496c:	f023 0307 	bic.w	r3, r3, #7
 8004970:	6093      	str	r3, [r2, #8]

  // slave mode
  //TIM2->SMCR |= TIM_SMCR_SMS_2;						// SLAVE MODE: RESET
  TIM2->SMCR |= TIM_SMCR_SMS_0 | TIM_SMCR_SMS_2;	// SLAVE MODE: GATED
 8004972:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800497c:	f043 0305 	orr.w	r3, r3, #5
 8004980:	6093      	str	r3, [r2, #8]
  //TIM2->SMCR |= TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;	// SLAVE MODE: TRIGGER

#ifndef DISABLE_ALL_TIMERS
  HAL_TIM_Base_Start_IT(&htim2);
 8004982:	4812      	ldr	r0, [pc, #72]	; (80049cc <main+0x118>)
 8004984:	f005 f80c 	bl	80099a0 <HAL_TIM_Base_Start_IT>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 8004988:	4811      	ldr	r0, [pc, #68]	; (80049d0 <main+0x11c>)
 800498a:	f004 ffdb 	bl	8009944 <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 800498e:	4b11      	ldr	r3, [pc, #68]	; (80049d4 <main+0x120>)
 8004990:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004994:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 8004996:	4b0f      	ldr	r3, [pc, #60]	; (80049d4 <main+0x120>)
 8004998:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800499c:	62da      	str	r2, [r3, #44]	; 0x2c



  // TFT lib enable
  DM_Init();
 800499e:	f7fc f92b 	bl	8000bf8 <DM_Init>
  DM_PostInit();
 80049a2:	f7fc f937 	bl	8000c14 <DM_PostInit>


  HAL_TIM_Base_Start_IT(&htim15);
 80049a6:	480c      	ldr	r0, [pc, #48]	; (80049d8 <main+0x124>)
 80049a8:	f004 fffa 	bl	80099a0 <HAL_TIM_Base_Start_IT>

  // debounce timer
  HAL_TIM_Base_Start(&htim5);
 80049ac:	480b      	ldr	r0, [pc, #44]	; (80049dc <main+0x128>)
 80049ae:	f004 ffc9 	bl	8009944 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	EM_ProcessEvent();
 80049b2:	f7fe f911 	bl	8002bd8 <EM_ProcessEvent>
 80049b6:	e7fc      	b.n	80049b2 <main+0xfe>
 80049b8:	20001540 	.word	0x20001540
 80049bc:	20000e68 	.word	0x20000e68
 80049c0:	2000152c 	.word	0x2000152c
 80049c4:	20001678 	.word	0x20001678
 80049c8:	48000800 	.word	0x48000800
 80049cc:	200017f4 	.word	0x200017f4
 80049d0:	200017a8 	.word	0x200017a8
 80049d4:	40001000 	.word	0x40001000
 80049d8:	200016c4 	.word	0x200016c4
 80049dc:	2000175c 	.word	0x2000175c

080049e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b0a8      	sub	sp, #160	; 0xa0
 80049e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80049e6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80049ea:	2238      	movs	r2, #56	; 0x38
 80049ec:	2100      	movs	r1, #0
 80049ee:	4618      	mov	r0, r3
 80049f0:	f007 fa78 	bl	800bee4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80049f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80049f8:	2200      	movs	r2, #0
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	605a      	str	r2, [r3, #4]
 80049fe:	609a      	str	r2, [r3, #8]
 8004a00:	60da      	str	r2, [r3, #12]
 8004a02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a04:	463b      	mov	r3, r7
 8004a06:	2254      	movs	r2, #84	; 0x54
 8004a08:	2100      	movs	r1, #0
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f007 fa6a 	bl	800bee4 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004a10:	2000      	movs	r0, #0
 8004a12:	f003 fc33 	bl	800827c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8004a16:	2322      	movs	r3, #34	; 0x22
 8004a18:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004a1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a1e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004a20:	2340      	movs	r3, #64	; 0x40
 8004a22:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8004a24:	2301      	movs	r3, #1
 8004a26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004a2a:	2302      	movs	r3, #2
 8004a2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004a30:	2302      	movs	r3, #2
 8004a32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8004a36:	2302      	movs	r3, #2
 8004a38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8004a3c:	232a      	movs	r3, #42	; 0x2a
 8004a3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004a42:	2302      	movs	r3, #2
 8004a44:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8004a48:	2304      	movs	r3, #4
 8004a4a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004a4e:	2302      	movs	r3, #2
 8004a50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a54:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f003 fcb3 	bl	80083c4 <HAL_RCC_OscConfig>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d001      	beq.n	8004a68 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8004a64:	f000 f82a 	bl	8004abc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a68:	230f      	movs	r3, #15
 8004a6a:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a70:	2300      	movs	r3, #0
 8004a72:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004a74:	2300      	movs	r3, #0
 8004a76:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8004a7c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004a80:	2108      	movs	r1, #8
 8004a82:	4618      	mov	r0, r3
 8004a84:	f003 ffb6 	bl	80089f4 <HAL_RCC_ClockConfig>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8004a8e:	f000 f815 	bl	8004abc <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 8004a92:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004a96:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004a9c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004aa0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004aa2:	463b      	mov	r3, r7
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f004 f995 	bl	8008dd4 <HAL_RCCEx_PeriphCLKConfig>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d001      	beq.n	8004ab4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8004ab0:	f000 f804 	bl	8004abc <Error_Handler>
  }
}
 8004ab4:	bf00      	nop
 8004ab6:	37a0      	adds	r7, #160	; 0xa0
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004abc:	b480      	push	{r7}
 8004abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004ac0:	bf00      	nop
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b083      	sub	sp, #12
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f043 0204 	orr.w	r2, r3, #4
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	601a      	str	r2, [r3, #0]
}
 8004ade:	bf00      	nop
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
	...

08004aec <LL_AHB2_GRP1_EnableClock>:
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004af4:	4b08      	ldr	r3, [pc, #32]	; (8004b18 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004af6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004af8:	4907      	ldr	r1, [pc, #28]	; (8004b18 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004b00:	4b05      	ldr	r3, [pc, #20]	; (8004b18 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004b02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4013      	ands	r3, r2
 8004b08:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
}
 8004b0c:	bf00      	nop
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr
 8004b18:	40021000 	.word	0x40021000

08004b1c <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 8004b20:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8004b24:	f7ff ffe2 	bl	8004aec <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 8004b28:	4802      	ldr	r0, [pc, #8]	; (8004b34 <MX_RNG_Init+0x18>)
 8004b2a:	f7ff ffce 	bl	8004aca <LL_RNG_Enable>

}
 8004b2e:	bf00      	nop
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	50060800 	.word	0x50060800

08004b38 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8004b3c:	4b1b      	ldr	r3, [pc, #108]	; (8004bac <MX_SPI3_Init+0x74>)
 8004b3e:	4a1c      	ldr	r2, [pc, #112]	; (8004bb0 <MX_SPI3_Init+0x78>)
 8004b40:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004b42:	4b1a      	ldr	r3, [pc, #104]	; (8004bac <MX_SPI3_Init+0x74>)
 8004b44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004b48:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004b4a:	4b18      	ldr	r3, [pc, #96]	; (8004bac <MX_SPI3_Init+0x74>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004b50:	4b16      	ldr	r3, [pc, #88]	; (8004bac <MX_SPI3_Init+0x74>)
 8004b52:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004b56:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b58:	4b14      	ldr	r3, [pc, #80]	; (8004bac <MX_SPI3_Init+0x74>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004b5e:	4b13      	ldr	r3, [pc, #76]	; (8004bac <MX_SPI3_Init+0x74>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004b64:	4b11      	ldr	r3, [pc, #68]	; (8004bac <MX_SPI3_Init+0x74>)
 8004b66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b6a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004b6c:	4b0f      	ldr	r3, [pc, #60]	; (8004bac <MX_SPI3_Init+0x74>)
 8004b6e:	2210      	movs	r2, #16
 8004b70:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004b72:	4b0e      	ldr	r3, [pc, #56]	; (8004bac <MX_SPI3_Init+0x74>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004b78:	4b0c      	ldr	r3, [pc, #48]	; (8004bac <MX_SPI3_Init+0x74>)
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b7e:	4b0b      	ldr	r3, [pc, #44]	; (8004bac <MX_SPI3_Init+0x74>)
 8004b80:	2200      	movs	r2, #0
 8004b82:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8004b84:	4b09      	ldr	r3, [pc, #36]	; (8004bac <MX_SPI3_Init+0x74>)
 8004b86:	2207      	movs	r2, #7
 8004b88:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004b8a:	4b08      	ldr	r3, [pc, #32]	; (8004bac <MX_SPI3_Init+0x74>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004b90:	4b06      	ldr	r3, [pc, #24]	; (8004bac <MX_SPI3_Init+0x74>)
 8004b92:	2208      	movs	r2, #8
 8004b94:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004b96:	4805      	ldr	r0, [pc, #20]	; (8004bac <MX_SPI3_Init+0x74>)
 8004b98:	f004 fb68 	bl	800926c <HAL_SPI_Init>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d001      	beq.n	8004ba6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8004ba2:	f7ff ff8b 	bl	8004abc <Error_Handler>
  }

}
 8004ba6:	bf00      	nop
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	20001614 	.word	0x20001614
 8004bb0:	40003c00 	.word	0x40003c00

08004bb4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b08a      	sub	sp, #40	; 0x28
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bbc:	f107 0314 	add.w	r3, r7, #20
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	601a      	str	r2, [r3, #0]
 8004bc4:	605a      	str	r2, [r3, #4]
 8004bc6:	609a      	str	r2, [r3, #8]
 8004bc8:	60da      	str	r2, [r3, #12]
 8004bca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a17      	ldr	r2, [pc, #92]	; (8004c30 <HAL_SPI_MspInit+0x7c>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d128      	bne.n	8004c28 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004bd6:	4b17      	ldr	r3, [pc, #92]	; (8004c34 <HAL_SPI_MspInit+0x80>)
 8004bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bda:	4a16      	ldr	r2, [pc, #88]	; (8004c34 <HAL_SPI_MspInit+0x80>)
 8004bdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004be0:	6593      	str	r3, [r2, #88]	; 0x58
 8004be2:	4b14      	ldr	r3, [pc, #80]	; (8004c34 <HAL_SPI_MspInit+0x80>)
 8004be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bea:	613b      	str	r3, [r7, #16]
 8004bec:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004bee:	4b11      	ldr	r3, [pc, #68]	; (8004c34 <HAL_SPI_MspInit+0x80>)
 8004bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bf2:	4a10      	ldr	r2, [pc, #64]	; (8004c34 <HAL_SPI_MspInit+0x80>)
 8004bf4:	f043 0304 	orr.w	r3, r3, #4
 8004bf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004bfa:	4b0e      	ldr	r3, [pc, #56]	; (8004c34 <HAL_SPI_MspInit+0x80>)
 8004bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bfe:	f003 0304 	and.w	r3, r3, #4
 8004c02:	60fb      	str	r3, [r7, #12]
 8004c04:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004c06:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004c0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c10:	2300      	movs	r3, #0
 8004c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c14:	2300      	movs	r3, #0
 8004c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004c18:	2306      	movs	r3, #6
 8004c1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c1c:	f107 0314 	add.w	r3, r7, #20
 8004c20:	4619      	mov	r1, r3
 8004c22:	4805      	ldr	r0, [pc, #20]	; (8004c38 <HAL_SPI_MspInit+0x84>)
 8004c24:	f003 f978 	bl	8007f18 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8004c28:	bf00      	nop
 8004c2a:	3728      	adds	r7, #40	; 0x28
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	40003c00 	.word	0x40003c00
 8004c34:	40021000 	.word	0x40021000
 8004c38:	48000800 	.word	0x48000800

08004c3c <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004c40:	4b05      	ldr	r3, [pc, #20]	; (8004c58 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	4a04      	ldr	r2, [pc, #16]	; (8004c58 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8004c46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c4a:	6093      	str	r3, [r2, #8]
}
 8004c4c:	bf00      	nop
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	40007000 	.word	0x40007000

08004c5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c62:	4b0f      	ldr	r3, [pc, #60]	; (8004ca0 <HAL_MspInit+0x44>)
 8004c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c66:	4a0e      	ldr	r2, [pc, #56]	; (8004ca0 <HAL_MspInit+0x44>)
 8004c68:	f043 0301 	orr.w	r3, r3, #1
 8004c6c:	6613      	str	r3, [r2, #96]	; 0x60
 8004c6e:	4b0c      	ldr	r3, [pc, #48]	; (8004ca0 <HAL_MspInit+0x44>)
 8004c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	607b      	str	r3, [r7, #4]
 8004c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c7a:	4b09      	ldr	r3, [pc, #36]	; (8004ca0 <HAL_MspInit+0x44>)
 8004c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c7e:	4a08      	ldr	r2, [pc, #32]	; (8004ca0 <HAL_MspInit+0x44>)
 8004c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c84:	6593      	str	r3, [r2, #88]	; 0x58
 8004c86:	4b06      	ldr	r3, [pc, #24]	; (8004ca0 <HAL_MspInit+0x44>)
 8004c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c8e:	603b      	str	r3, [r7, #0]
 8004c90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8004c92:	f7ff ffd3 	bl	8004c3c <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c96:	bf00      	nop
 8004c98:	3708      	adds	r7, #8
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	40021000 	.word	0x40021000

08004ca4 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8004cac:	4b07      	ldr	r3, [pc, #28]	; (8004ccc <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8004cae:	695a      	ldr	r2, [r3, #20]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d101      	bne.n	8004cbe <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e000      	b.n	8004cc0 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr
 8004ccc:	40010400 	.word	0x40010400

08004cd0 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8004cd8:	4a04      	ldr	r2, [pc, #16]	; (8004cec <LL_EXTI_ClearFlag_0_31+0x1c>)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6153      	str	r3, [r2, #20]
}
 8004cde:	bf00      	nop
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	40010400 	.word	0x40010400

08004cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004cf4:	bf00      	nop
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr

08004cfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d02:	e7fe      	b.n	8004d02 <HardFault_Handler+0x4>

08004d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d04:	b480      	push	{r7}
 8004d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d08:	e7fe      	b.n	8004d08 <MemManage_Handler+0x4>

08004d0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d0e:	e7fe      	b.n	8004d0e <BusFault_Handler+0x4>

08004d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d10:	b480      	push	{r7}
 8004d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d14:	e7fe      	b.n	8004d14 <UsageFault_Handler+0x4>

08004d16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004d16:	b480      	push	{r7}
 8004d18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004d1a:	bf00      	nop
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d28:	bf00      	nop
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004d32:	b480      	push	{r7}
 8004d34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004d36:	bf00      	nop
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004d44:	f000 fd78 	bl	8005838 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004d48:	bf00      	nop
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	uint16_t interrupt_time = TIM5->CNT;
 8004d52:	4b0e      	ldr	r3, [pc, #56]	; (8004d8c <EXTI0_IRQHandler+0x40>)
 8004d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d56:	80fb      	strh	r3, [r7, #6]
	if (interrupt_time - last_interrupt_time > DEBOUNCE_DELAY)
 8004d58:	88fb      	ldrh	r3, [r7, #6]
 8004d5a:	4a0d      	ldr	r2, [pc, #52]	; (8004d90 <EXTI0_IRQHandler+0x44>)
 8004d5c:	8812      	ldrh	r2, [r2, #0]
 8004d5e:	1a9b      	subs	r3, r3, r2
 8004d60:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004d64:	dd02      	ble.n	8004d6c <EXTI0_IRQHandler+0x20>
	{
		EM_SetNewEvent(evRedBtn);
 8004d66:	2004      	movs	r0, #4
 8004d68:	f7fe fa10 	bl	800318c <EM_SetNewEvent>
	}
	last_interrupt_time = interrupt_time;
 8004d6c:	4a08      	ldr	r2, [pc, #32]	; (8004d90 <EXTI0_IRQHandler+0x44>)
 8004d6e:	88fb      	ldrh	r3, [r7, #6]
 8004d70:	8013      	strh	r3, [r2, #0]

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8004d72:	2001      	movs	r0, #1
 8004d74:	f7ff ff96 	bl	8004ca4 <LL_EXTI_IsActiveFlag_0_31>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d002      	beq.n	8004d84 <EXTI0_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8004d7e:	2001      	movs	r0, #1
 8004d80:	f7ff ffa6 	bl	8004cd0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004d84:	bf00      	nop
 8004d86:	3708      	adds	r7, #8
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	40000c00 	.word	0x40000c00
 8004d90:	20001422 	.word	0x20001422

08004d94 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	uint16_t interrupt_time = TIM5->CNT;
 8004d9a:	4b0e      	ldr	r3, [pc, #56]	; (8004dd4 <EXTI1_IRQHandler+0x40>)
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9e:	80fb      	strh	r3, [r7, #6]
	if (interrupt_time - last_interrupt_time > DEBOUNCE_DELAY)
 8004da0:	88fb      	ldrh	r3, [r7, #6]
 8004da2:	4a0d      	ldr	r2, [pc, #52]	; (8004dd8 <EXTI1_IRQHandler+0x44>)
 8004da4:	8812      	ldrh	r2, [r2, #0]
 8004da6:	1a9b      	subs	r3, r3, r2
 8004da8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004dac:	dd02      	ble.n	8004db4 <EXTI1_IRQHandler+0x20>
	{
		EM_SetNewEvent(evGreenBtn);
 8004dae:	2002      	movs	r0, #2
 8004db0:	f7fe f9ec 	bl	800318c <EM_SetNewEvent>
	}
	last_interrupt_time = interrupt_time;
 8004db4:	4a08      	ldr	r2, [pc, #32]	; (8004dd8 <EXTI1_IRQHandler+0x44>)
 8004db6:	88fb      	ldrh	r3, [r7, #6]
 8004db8:	8013      	strh	r3, [r2, #0]

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 8004dba:	2002      	movs	r0, #2
 8004dbc:	f7ff ff72 	bl	8004ca4 <LL_EXTI_IsActiveFlag_0_31>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d002      	beq.n	8004dcc <EXTI1_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 8004dc6:	2002      	movs	r0, #2
 8004dc8:	f7ff ff82 	bl	8004cd0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004dcc:	bf00      	nop
 8004dce:	3708      	adds	r7, #8
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	40000c00 	.word	0x40000c00
 8004dd8:	20001422 	.word	0x20001422

08004ddc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */


	uint16_t interrupt_time = TIM5->CNT;
 8004de2:	4b0e      	ldr	r3, [pc, #56]	; (8004e1c <EXTI2_IRQHandler+0x40>)
 8004de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de6:	80fb      	strh	r3, [r7, #6]
	if (interrupt_time - last_interrupt_time > DEBOUNCE_DELAY)
 8004de8:	88fb      	ldrh	r3, [r7, #6]
 8004dea:	4a0d      	ldr	r2, [pc, #52]	; (8004e20 <EXTI2_IRQHandler+0x44>)
 8004dec:	8812      	ldrh	r2, [r2, #0]
 8004dee:	1a9b      	subs	r3, r3, r2
 8004df0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004df4:	dd02      	ble.n	8004dfc <EXTI2_IRQHandler+0x20>
	{
		EM_SetNewEvent(evEncoderPush);
 8004df6:	2006      	movs	r0, #6
 8004df8:	f7fe f9c8 	bl	800318c <EM_SetNewEvent>
	}
	last_interrupt_time = interrupt_time;
 8004dfc:	4a08      	ldr	r2, [pc, #32]	; (8004e20 <EXTI2_IRQHandler+0x44>)
 8004dfe:	88fb      	ldrh	r3, [r7, #6]
 8004e00:	8013      	strh	r3, [r2, #0]


  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8004e02:	2004      	movs	r0, #4
 8004e04:	f7ff ff4e 	bl	8004ca4 <LL_EXTI_IsActiveFlag_0_31>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d002      	beq.n	8004e14 <EXTI2_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 8004e0e:	2004      	movs	r0, #4
 8004e10:	f7ff ff5e 	bl	8004cd0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8004e14:	bf00      	nop
 8004e16:	3708      	adds	r7, #8
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	40000c00 	.word	0x40000c00
 8004e20:	20001422 	.word	0x20001422

08004e24 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	//printf("Test\n");
	//printf("%lu\n", trigger_input[0]);
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004e28:	4802      	ldr	r0, [pc, #8]	; (8004e34 <DMA1_Channel1_IRQHandler+0x10>)
 8004e2a:	f002 ff25 	bl	8007c78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004e2e:	bf00      	nop
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	200014a8 	.word	0x200014a8

08004e38 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8004e3c:	4802      	ldr	r0, [pc, #8]	; (8004e48 <DMA1_Channel2_IRQHandler+0x10>)
 8004e3e:	f002 ff1b 	bl	8007c78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004e42:	bf00      	nop
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	20001554 	.word	0x20001554

08004e4c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8004e50:	4802      	ldr	r0, [pc, #8]	; (8004e5c <DMA1_Channel3_IRQHandler+0x10>)
 8004e52:	f002 ff11 	bl	8007c78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004e56:	bf00      	nop
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	200015b4 	.word	0x200015b4

08004e60 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	DM_UpdateDisplay();
 8004e64:	f7fb ffea 	bl	8000e3c <DM_UpdateDisplay>
	//DM_TestScreen();

	if((TIM1->CNT < last_enc_value) || (TIM1->CNT > last_enc_value))
 8004e68:	4b0d      	ldr	r3, [pc, #52]	; (8004ea0 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 8004e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6c:	4a0d      	ldr	r2, [pc, #52]	; (8004ea4 <TIM1_BRK_TIM15_IRQHandler+0x44>)
 8004e6e:	8812      	ldrh	r2, [r2, #0]
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d305      	bcc.n	8004e80 <TIM1_BRK_TIM15_IRQHandler+0x20>
 8004e74:	4b0a      	ldr	r3, [pc, #40]	; (8004ea0 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 8004e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e78:	4a0a      	ldr	r2, [pc, #40]	; (8004ea4 <TIM1_BRK_TIM15_IRQHandler+0x44>)
 8004e7a:	8812      	ldrh	r2, [r2, #0]
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d902      	bls.n	8004e86 <TIM1_BRK_TIM15_IRQHandler+0x26>
	{

		EM_SetNewEvent(evEncoderSet);
 8004e80:	2005      	movs	r0, #5
 8004e82:	f7fe f983 	bl	800318c <EM_SetNewEvent>

	}
	last_enc_value = TIM1->CNT;
 8004e86:	4b06      	ldr	r3, [pc, #24]	; (8004ea0 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 8004e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	4b05      	ldr	r3, [pc, #20]	; (8004ea4 <TIM1_BRK_TIM15_IRQHandler+0x44>)
 8004e8e:	801a      	strh	r2, [r3, #0]

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004e90:	4805      	ldr	r0, [pc, #20]	; (8004ea8 <TIM1_BRK_TIM15_IRQHandler+0x48>)
 8004e92:	f004 fe90 	bl	8009bb6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8004e96:	4805      	ldr	r0, [pc, #20]	; (8004eac <TIM1_BRK_TIM15_IRQHandler+0x4c>)
 8004e98:	f004 fe8d 	bl	8009bb6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8004e9c:	bf00      	nop
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	40012c00 	.word	0x40012c00
 8004ea4:	20001420 	.word	0x20001420
 8004ea8:	200017a8 	.word	0x200017a8
 8004eac:	200016c4 	.word	0x200016c4

08004eb0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	snprintf(control_pressed, sizeof(control_pressed), " ");
 8004eb4:	4a05      	ldr	r2, [pc, #20]	; (8004ecc <TIM1_UP_TIM16_IRQHandler+0x1c>)
 8004eb6:	4b06      	ldr	r3, [pc, #24]	; (8004ed0 <TIM1_UP_TIM16_IRQHandler+0x20>)
 8004eb8:	881b      	ldrh	r3, [r3, #0]
 8004eba:	8013      	strh	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004ebc:	4805      	ldr	r0, [pc, #20]	; (8004ed4 <TIM1_UP_TIM16_IRQHandler+0x24>)
 8004ebe:	f004 fe7a 	bl	8009bb6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8004ec2:	4805      	ldr	r0, [pc, #20]	; (8004ed8 <TIM1_UP_TIM16_IRQHandler+0x28>)
 8004ec4:	f004 fe77 	bl	8009bb6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004ec8:	bf00      	nop
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	20001430 	.word	0x20001430
 8004ed0:	0800ebac 	.word	0x0800ebac
 8004ed4:	200017a8 	.word	0x200017a8
 8004ed8:	20001840 	.word	0x20001840

08004edc <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	update_dc_bias_sweep();
 8004ee0:	f7ff f93c 	bl	800415c <update_dc_bias_sweep>




  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004ee4:	4803      	ldr	r0, [pc, #12]	; (8004ef4 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8004ee6:	f004 fe66 	bl	8009bb6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8004eea:	4803      	ldr	r0, [pc, #12]	; (8004ef8 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 8004eec:	f004 fe63 	bl	8009bb6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8004ef0:	bf00      	nop
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	200017a8 	.word	0x200017a8
 8004ef8:	20001710 	.word	0x20001710

08004efc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004f00:	4802      	ldr	r0, [pc, #8]	; (8004f0c <TIM2_IRQHandler+0x10>)
 8004f02:	f004 fe58 	bl	8009bb6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004f06:	bf00      	nop
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	200017f4 	.word	0x200017f4

08004f10 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	if(HAL_GPIO_ReadPin(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin))
 8004f14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004f18:	4816      	ldr	r0, [pc, #88]	; (8004f74 <EXTI15_10_IRQHandler+0x64>)
 8004f1a:	f003 f97f 	bl	800821c <HAL_GPIO_ReadPin>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d003      	beq.n	8004f2c <EXTI15_10_IRQHandler+0x1c>
	{
//		uint16_t interrupt_time = TIM5->CNT;
//		if (interrupt_time - last_interrupt_time > DEBOUNCE_DELAY)
//		{
			EM_SetNewEvent(evYellowBtn);
 8004f24:	2003      	movs	r0, #3
 8004f26:	f7fe f931 	bl	800318c <EM_SetNewEvent>
 8004f2a:	e00a      	b.n	8004f42 <EXTI15_10_IRQHandler+0x32>
//		}
//		last_interrupt_time = interrupt_time;
		//snprintf(control_pressed, sizeof(control_pressed), "BTN1");
		//printf("BTN1_EXTI14_Pin\n");
	}
	else if(HAL_GPIO_ReadPin(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin))
 8004f2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f30:	4810      	ldr	r0, [pc, #64]	; (8004f74 <EXTI15_10_IRQHandler+0x64>)
 8004f32:	f003 f973 	bl	800821c <HAL_GPIO_ReadPin>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d002      	beq.n	8004f42 <EXTI15_10_IRQHandler+0x32>
	{
//		uint16_t interrupt_time = TIM5->CNT;
//		if (interrupt_time - last_interrupt_time > DEBOUNCE_DELAY)
//		{
			EM_SetNewEvent(evBlueBtn);
 8004f3c:	2001      	movs	r0, #1
 8004f3e:	f7fe f925 	bl	800318c <EM_SetNewEvent>
		//snprintf(control_pressed, sizeof(control_pressed), "BTN2");
		//printf("BTN2_EXTI15_Pin\n");
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8004f42:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004f46:	f7ff fead 	bl	8004ca4 <LL_EXTI_IsActiveFlag_0_31>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d003      	beq.n	8004f58 <EXTI15_10_IRQHandler+0x48>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8004f50:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004f54:	f7ff febc 	bl	8004cd0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8004f58:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004f5c:	f7ff fea2 	bl	8004ca4 <LL_EXTI_IsActiveFlag_0_31>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d003      	beq.n	8004f6e <EXTI15_10_IRQHandler+0x5e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8004f66:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004f6a:	f7ff feb1 	bl	8004cd0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004f6e:	bf00      	nop
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	48000800 	.word	0x48000800

08004f78 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f84:	2300      	movs	r3, #0
 8004f86:	617b      	str	r3, [r7, #20]
 8004f88:	e00a      	b.n	8004fa0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004f8a:	f3af 8000 	nop.w
 8004f8e:	4601      	mov	r1, r0
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	1c5a      	adds	r2, r3, #1
 8004f94:	60ba      	str	r2, [r7, #8]
 8004f96:	b2ca      	uxtb	r2, r1
 8004f98:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	617b      	str	r3, [r7, #20]
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	dbf0      	blt.n	8004f8a <_read+0x12>
	}

return len;
 8004fa8:	687b      	ldr	r3, [r7, #4]
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3718      	adds	r7, #24
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b083      	sub	sp, #12
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
	return -1;
 8004fba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b083      	sub	sp, #12
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
 8004fd2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004fda:	605a      	str	r2, [r3, #4]
	return 0;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <_isatty>:

int _isatty(int file)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b083      	sub	sp, #12
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
	return 1;
 8004ff2:	2301      	movs	r3, #1
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
	return 0;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
	...

0800501c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005024:	4b11      	ldr	r3, [pc, #68]	; (800506c <_sbrk+0x50>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d102      	bne.n	8005032 <_sbrk+0x16>
		heap_end = &end;
 800502c:	4b0f      	ldr	r3, [pc, #60]	; (800506c <_sbrk+0x50>)
 800502e:	4a10      	ldr	r2, [pc, #64]	; (8005070 <_sbrk+0x54>)
 8005030:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005032:	4b0e      	ldr	r3, [pc, #56]	; (800506c <_sbrk+0x50>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005038:	4b0c      	ldr	r3, [pc, #48]	; (800506c <_sbrk+0x50>)
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4413      	add	r3, r2
 8005040:	466a      	mov	r2, sp
 8005042:	4293      	cmp	r3, r2
 8005044:	d907      	bls.n	8005056 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005046:	f006 ff23 	bl	800be90 <__errno>
 800504a:	4602      	mov	r2, r0
 800504c:	230c      	movs	r3, #12
 800504e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005050:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005054:	e006      	b.n	8005064 <_sbrk+0x48>
	}

	heap_end += incr;
 8005056:	4b05      	ldr	r3, [pc, #20]	; (800506c <_sbrk+0x50>)
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4413      	add	r3, r2
 800505e:	4a03      	ldr	r2, [pc, #12]	; (800506c <_sbrk+0x50>)
 8005060:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005062:	68fb      	ldr	r3, [r7, #12]
}
 8005064:	4618      	mov	r0, r3
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	20001424 	.word	0x20001424
 8005070:	20001898 	.word	0x20001898

08005074 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005074:	b480      	push	{r7}
 8005076:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005078:	4b08      	ldr	r3, [pc, #32]	; (800509c <SystemInit+0x28>)
 800507a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800507e:	4a07      	ldr	r2, [pc, #28]	; (800509c <SystemInit+0x28>)
 8005080:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005084:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005088:	4b04      	ldr	r3, [pc, #16]	; (800509c <SystemInit+0x28>)
 800508a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800508e:	609a      	str	r2, [r3, #8]
#endif
}
 8005090:	bf00      	nop
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	e000ed00 	.word	0xe000ed00

080050a0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b09a      	sub	sp, #104	; 0x68
 80050a4:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80050a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80050aa:	2224      	movs	r2, #36	; 0x24
 80050ac:	2100      	movs	r1, #0
 80050ae:	4618      	mov	r0, r3
 80050b0:	f006 ff18 	bl	800bee4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80050b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80050b8:	2200      	movs	r2, #0
 80050ba:	601a      	str	r2, [r3, #0]
 80050bc:	605a      	str	r2, [r3, #4]
 80050be:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80050c0:	1d3b      	adds	r3, r7, #4
 80050c2:	2234      	movs	r2, #52	; 0x34
 80050c4:	2100      	movs	r1, #0
 80050c6:	4618      	mov	r0, r3
 80050c8:	f006 ff0c 	bl	800bee4 <memset>

  htim1.Instance = TIM1;
 80050cc:	4b2a      	ldr	r3, [pc, #168]	; (8005178 <MX_TIM1_Init+0xd8>)
 80050ce:	4a2b      	ldr	r2, [pc, #172]	; (800517c <MX_TIM1_Init+0xdc>)
 80050d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80050d2:	4b29      	ldr	r3, [pc, #164]	; (8005178 <MX_TIM1_Init+0xd8>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 80050d8:	4b27      	ldr	r3, [pc, #156]	; (8005178 <MX_TIM1_Init+0xd8>)
 80050da:	2240      	movs	r2, #64	; 0x40
 80050dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 80050de:	4b26      	ldr	r3, [pc, #152]	; (8005178 <MX_TIM1_Init+0xd8>)
 80050e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80050e6:	4b24      	ldr	r3, [pc, #144]	; (8005178 <MX_TIM1_Init+0xd8>)
 80050e8:	2200      	movs	r2, #0
 80050ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80050ec:	4b22      	ldr	r3, [pc, #136]	; (8005178 <MX_TIM1_Init+0xd8>)
 80050ee:	2200      	movs	r2, #0
 80050f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80050f2:	4b21      	ldr	r3, [pc, #132]	; (8005178 <MX_TIM1_Init+0xd8>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80050f8:	2303      	movs	r3, #3
 80050fa:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80050fc:	2300      	movs	r3, #0
 80050fe:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005100:	2301      	movs	r3, #1
 8005102:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005104:	2300      	movs	r3, #0
 8005106:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8005108:	2300      	movs	r3, #0
 800510a:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800510c:	2300      	movs	r3, #0
 800510e:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005110:	2301      	movs	r3, #1
 8005112:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005114:	2300      	movs	r3, #0
 8005116:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8005118:	2300      	movs	r3, #0
 800511a:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800511c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005120:	4619      	mov	r1, r3
 8005122:	4815      	ldr	r0, [pc, #84]	; (8005178 <MX_TIM1_Init+0xd8>)
 8005124:	f004 fca1 	bl	8009a6a <HAL_TIM_Encoder_Init>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d001      	beq.n	8005132 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800512e:	f7ff fcc5 	bl	8004abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005132:	2300      	movs	r3, #0
 8005134:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005136:	2300      	movs	r3, #0
 8005138:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800513a:	2300      	movs	r3, #0
 800513c:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800513e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005142:	4619      	mov	r1, r3
 8005144:	480c      	ldr	r0, [pc, #48]	; (8005178 <MX_TIM1_Init+0xd8>)
 8005146:	f005 fa19 	bl	800a57c <HAL_TIMEx_MasterConfigSynchronization>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d001      	beq.n	8005154 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8005150:	f7ff fcb4 	bl	8004abc <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8005154:	2300      	movs	r3, #0
 8005156:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8005158:	2300      	movs	r3, #0
 800515a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800515c:	1d3b      	adds	r3, r7, #4
 800515e:	4619      	mov	r1, r3
 8005160:	4805      	ldr	r0, [pc, #20]	; (8005178 <MX_TIM1_Init+0xd8>)
 8005162:	f005 faa1 	bl	800a6a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d001      	beq.n	8005170 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 800516c:	f7ff fca6 	bl	8004abc <Error_Handler>
  }

}
 8005170:	bf00      	nop
 8005172:	3768      	adds	r7, #104	; 0x68
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	200017a8 	.word	0x200017a8
 800517c:	40012c00 	.word	0x40012c00

08005180 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b08c      	sub	sp, #48	; 0x30
 8005184:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005186:	f107 0320 	add.w	r3, r7, #32
 800518a:	2200      	movs	r2, #0
 800518c:	601a      	str	r2, [r3, #0]
 800518e:	605a      	str	r2, [r3, #4]
 8005190:	609a      	str	r2, [r3, #8]
 8005192:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8005194:	f107 030c 	add.w	r3, r7, #12
 8005198:	2200      	movs	r2, #0
 800519a:	601a      	str	r2, [r3, #0]
 800519c:	605a      	str	r2, [r3, #4]
 800519e:	609a      	str	r2, [r3, #8]
 80051a0:	60da      	str	r2, [r3, #12]
 80051a2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80051a4:	463b      	mov	r3, r7
 80051a6:	2200      	movs	r2, #0
 80051a8:	601a      	str	r2, [r3, #0]
 80051aa:	605a      	str	r2, [r3, #4]
 80051ac:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 80051ae:	4b28      	ldr	r3, [pc, #160]	; (8005250 <MX_TIM2_Init+0xd0>)
 80051b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80051b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2047;
 80051b6:	4b26      	ldr	r3, [pc, #152]	; (8005250 <MX_TIM2_Init+0xd0>)
 80051b8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80051bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051be:	4b24      	ldr	r3, [pc, #144]	; (8005250 <MX_TIM2_Init+0xd0>)
 80051c0:	2200      	movs	r2, #0
 80051c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024;
 80051c4:	4b22      	ldr	r3, [pc, #136]	; (8005250 <MX_TIM2_Init+0xd0>)
 80051c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80051cc:	4b20      	ldr	r3, [pc, #128]	; (8005250 <MX_TIM2_Init+0xd0>)
 80051ce:	2200      	movs	r2, #0
 80051d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80051d2:	4b1f      	ldr	r3, [pc, #124]	; (8005250 <MX_TIM2_Init+0xd0>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80051d8:	481d      	ldr	r0, [pc, #116]	; (8005250 <MX_TIM2_Init+0xd0>)
 80051da:	f004 fb5c 	bl	8009896 <HAL_TIM_Base_Init>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d001      	beq.n	80051e8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80051e4:	f7ff fc6a 	bl	8004abc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80051e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051ec:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80051ee:	f107 0320 	add.w	r3, r7, #32
 80051f2:	4619      	mov	r1, r3
 80051f4:	4816      	ldr	r0, [pc, #88]	; (8005250 <MX_TIM2_Init+0xd0>)
 80051f6:	f004 fe5d 	bl	8009eb4 <HAL_TIM_ConfigClockSource>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d001      	beq.n	8005204 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8005200:	f7ff fc5c 	bl	8004abc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8005204:	2305      	movs	r3, #5
 8005206:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8005208:	2350      	movs	r3, #80	; 0x50
 800520a:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 800520c:	2300      	movs	r3, #0
 800520e:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8005210:	2300      	movs	r3, #0
 8005212:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8005214:	f107 030c 	add.w	r3, r7, #12
 8005218:	4619      	mov	r1, r3
 800521a:	480d      	ldr	r0, [pc, #52]	; (8005250 <MX_TIM2_Init+0xd0>)
 800521c:	f004 ff3a 	bl	800a094 <HAL_TIM_SlaveConfigSynchro>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d001      	beq.n	800522a <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8005226:	f7ff fc49 	bl	8004abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800522a:	2300      	movs	r3, #0
 800522c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800522e:	2300      	movs	r3, #0
 8005230:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005232:	463b      	mov	r3, r7
 8005234:	4619      	mov	r1, r3
 8005236:	4806      	ldr	r0, [pc, #24]	; (8005250 <MX_TIM2_Init+0xd0>)
 8005238:	f005 f9a0 	bl	800a57c <HAL_TIMEx_MasterConfigSynchronization>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d001      	beq.n	8005246 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8005242:	f7ff fc3b 	bl	8004abc <Error_Handler>
  }

}
 8005246:	bf00      	nop
 8005248:	3730      	adds	r7, #48	; 0x30
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	200017f4 	.word	0x200017f4

08005254 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b088      	sub	sp, #32
 8005258:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800525a:	f107 0310 	add.w	r3, r7, #16
 800525e:	2200      	movs	r2, #0
 8005260:	601a      	str	r2, [r3, #0]
 8005262:	605a      	str	r2, [r3, #4]
 8005264:	609a      	str	r2, [r3, #8]
 8005266:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005268:	1d3b      	adds	r3, r7, #4
 800526a:	2200      	movs	r2, #0
 800526c:	601a      	str	r2, [r3, #0]
 800526e:	605a      	str	r2, [r3, #4]
 8005270:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 8005272:	4b1e      	ldr	r3, [pc, #120]	; (80052ec <MX_TIM5_Init+0x98>)
 8005274:	4a1e      	ldr	r2, [pc, #120]	; (80052f0 <MX_TIM5_Init+0x9c>)
 8005276:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 65535;
 8005278:	4b1c      	ldr	r3, [pc, #112]	; (80052ec <MX_TIM5_Init+0x98>)
 800527a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800527e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005280:	4b1a      	ldr	r3, [pc, #104]	; (80052ec <MX_TIM5_Init+0x98>)
 8005282:	2200      	movs	r2, #0
 8005284:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8005286:	4b19      	ldr	r3, [pc, #100]	; (80052ec <MX_TIM5_Init+0x98>)
 8005288:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800528c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800528e:	4b17      	ldr	r3, [pc, #92]	; (80052ec <MX_TIM5_Init+0x98>)
 8005290:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005294:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005296:	4b15      	ldr	r3, [pc, #84]	; (80052ec <MX_TIM5_Init+0x98>)
 8005298:	2200      	movs	r2, #0
 800529a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800529c:	4813      	ldr	r0, [pc, #76]	; (80052ec <MX_TIM5_Init+0x98>)
 800529e:	f004 fafa 	bl	8009896 <HAL_TIM_Base_Init>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d001      	beq.n	80052ac <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80052a8:	f7ff fc08 	bl	8004abc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80052ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80052b2:	f107 0310 	add.w	r3, r7, #16
 80052b6:	4619      	mov	r1, r3
 80052b8:	480c      	ldr	r0, [pc, #48]	; (80052ec <MX_TIM5_Init+0x98>)
 80052ba:	f004 fdfb 	bl	8009eb4 <HAL_TIM_ConfigClockSource>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d001      	beq.n	80052c8 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 80052c4:	f7ff fbfa 	bl	8004abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80052c8:	2300      	movs	r3, #0
 80052ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80052cc:	2300      	movs	r3, #0
 80052ce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80052d0:	1d3b      	adds	r3, r7, #4
 80052d2:	4619      	mov	r1, r3
 80052d4:	4805      	ldr	r0, [pc, #20]	; (80052ec <MX_TIM5_Init+0x98>)
 80052d6:	f005 f951 	bl	800a57c <HAL_TIMEx_MasterConfigSynchronization>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d001      	beq.n	80052e4 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 80052e0:	f7ff fbec 	bl	8004abc <Error_Handler>
  }

}
 80052e4:	bf00      	nop
 80052e6:	3720      	adds	r7, #32
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	2000175c 	.word	0x2000175c
 80052f0:	40000c00 	.word	0x40000c00

080052f4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b094      	sub	sp, #80	; 0x50
 80052f8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80052fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80052fe:	2200      	movs	r2, #0
 8005300:	601a      	str	r2, [r3, #0]
 8005302:	605a      	str	r2, [r3, #4]
 8005304:	609a      	str	r2, [r3, #8]
 8005306:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005308:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800530c:	2200      	movs	r2, #0
 800530e:	601a      	str	r2, [r3, #0]
 8005310:	605a      	str	r2, [r3, #4]
 8005312:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005314:	463b      	mov	r3, r7
 8005316:	2234      	movs	r2, #52	; 0x34
 8005318:	2100      	movs	r1, #0
 800531a:	4618      	mov	r0, r3
 800531c:	f006 fde2 	bl	800bee4 <memset>

  htim8.Instance = TIM8;
 8005320:	4b26      	ldr	r3, [pc, #152]	; (80053bc <MX_TIM8_Init+0xc8>)
 8005322:	4a27      	ldr	r2, [pc, #156]	; (80053c0 <MX_TIM8_Init+0xcc>)
 8005324:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8005326:	4b25      	ldr	r3, [pc, #148]	; (80053bc <MX_TIM8_Init+0xc8>)
 8005328:	2200      	movs	r2, #0
 800532a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800532c:	4b23      	ldr	r3, [pc, #140]	; (80053bc <MX_TIM8_Init+0xc8>)
 800532e:	2200      	movs	r2, #0
 8005330:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 8005332:	4b22      	ldr	r3, [pc, #136]	; (80053bc <MX_TIM8_Init+0xc8>)
 8005334:	2201      	movs	r2, #1
 8005336:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005338:	4b20      	ldr	r3, [pc, #128]	; (80053bc <MX_TIM8_Init+0xc8>)
 800533a:	2200      	movs	r2, #0
 800533c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800533e:	4b1f      	ldr	r3, [pc, #124]	; (80053bc <MX_TIM8_Init+0xc8>)
 8005340:	2200      	movs	r2, #0
 8005342:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005344:	4b1d      	ldr	r3, [pc, #116]	; (80053bc <MX_TIM8_Init+0xc8>)
 8005346:	2200      	movs	r2, #0
 8005348:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800534a:	481c      	ldr	r0, [pc, #112]	; (80053bc <MX_TIM8_Init+0xc8>)
 800534c:	f004 faa3 	bl	8009896 <HAL_TIM_Base_Init>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d001      	beq.n	800535a <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8005356:	f7ff fbb1 	bl	8004abc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800535a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800535e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8005360:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005364:	4619      	mov	r1, r3
 8005366:	4815      	ldr	r0, [pc, #84]	; (80053bc <MX_TIM8_Init+0xc8>)
 8005368:	f004 fda4 	bl	8009eb4 <HAL_TIM_ConfigClockSource>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8005372:	f7ff fba3 	bl	8004abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005376:	2320      	movs	r3, #32
 8005378:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800537a:	2300      	movs	r3, #0
 800537c:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800537e:	2300      	movs	r3, #0
 8005380:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8005382:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005386:	4619      	mov	r1, r3
 8005388:	480c      	ldr	r0, [pc, #48]	; (80053bc <MX_TIM8_Init+0xc8>)
 800538a:	f005 f8f7 	bl	800a57c <HAL_TIMEx_MasterConfigSynchronization>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d001      	beq.n	8005398 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8005394:	f7ff fb92 	bl	8004abc <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8005398:	2300      	movs	r3, #0
 800539a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800539c:	2300      	movs	r3, #0
 800539e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80053a0:	463b      	mov	r3, r7
 80053a2:	4619      	mov	r1, r3
 80053a4:	4805      	ldr	r0, [pc, #20]	; (80053bc <MX_TIM8_Init+0xc8>)
 80053a6:	f005 f97f 	bl	800a6a8 <HAL_TIMEx_ConfigBreakDeadTime>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d001      	beq.n	80053b4 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 80053b0:	f7ff fb84 	bl	8004abc <Error_Handler>
  }

}
 80053b4:	bf00      	nop
 80053b6:	3750      	adds	r7, #80	; 0x50
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	20001678 	.word	0x20001678
 80053c0:	40013400 	.word	0x40013400

080053c4 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b088      	sub	sp, #32
 80053c8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80053ca:	f107 0310 	add.w	r3, r7, #16
 80053ce:	2200      	movs	r2, #0
 80053d0:	601a      	str	r2, [r3, #0]
 80053d2:	605a      	str	r2, [r3, #4]
 80053d4:	609a      	str	r2, [r3, #8]
 80053d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80053d8:	1d3b      	adds	r3, r7, #4
 80053da:	2200      	movs	r2, #0
 80053dc:	601a      	str	r2, [r3, #0]
 80053de:	605a      	str	r2, [r3, #4]
 80053e0:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 80053e2:	4b1f      	ldr	r3, [pc, #124]	; (8005460 <MX_TIM15_Init+0x9c>)
 80053e4:	4a1f      	ldr	r2, [pc, #124]	; (8005464 <MX_TIM15_Init+0xa0>)
 80053e6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 80053e8:	4b1d      	ldr	r3, [pc, #116]	; (8005460 <MX_TIM15_Init+0x9c>)
 80053ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053ee:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053f0:	4b1b      	ldr	r3, [pc, #108]	; (8005460 <MX_TIM15_Init+0x9c>)
 80053f2:	2200      	movs	r2, #0
 80053f4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 80053f6:	4b1a      	ldr	r3, [pc, #104]	; (8005460 <MX_TIM15_Init+0x9c>)
 80053f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053fc:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80053fe:	4b18      	ldr	r3, [pc, #96]	; (8005460 <MX_TIM15_Init+0x9c>)
 8005400:	2200      	movs	r2, #0
 8005402:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8005404:	4b16      	ldr	r3, [pc, #88]	; (8005460 <MX_TIM15_Init+0x9c>)
 8005406:	2200      	movs	r2, #0
 8005408:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800540a:	4b15      	ldr	r3, [pc, #84]	; (8005460 <MX_TIM15_Init+0x9c>)
 800540c:	2200      	movs	r2, #0
 800540e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8005410:	4813      	ldr	r0, [pc, #76]	; (8005460 <MX_TIM15_Init+0x9c>)
 8005412:	f004 fa40 	bl	8009896 <HAL_TIM_Base_Init>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d001      	beq.n	8005420 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 800541c:	f7ff fb4e 	bl	8004abc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005420:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005424:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8005426:	f107 0310 	add.w	r3, r7, #16
 800542a:	4619      	mov	r1, r3
 800542c:	480c      	ldr	r0, [pc, #48]	; (8005460 <MX_TIM15_Init+0x9c>)
 800542e:	f004 fd41 	bl	8009eb4 <HAL_TIM_ConfigClockSource>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d001      	beq.n	800543c <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8005438:	f7ff fb40 	bl	8004abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800543c:	2300      	movs	r3, #0
 800543e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005440:	2300      	movs	r3, #0
 8005442:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8005444:	1d3b      	adds	r3, r7, #4
 8005446:	4619      	mov	r1, r3
 8005448:	4805      	ldr	r0, [pc, #20]	; (8005460 <MX_TIM15_Init+0x9c>)
 800544a:	f005 f897 	bl	800a57c <HAL_TIMEx_MasterConfigSynchronization>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d001      	beq.n	8005458 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8005454:	f7ff fb32 	bl	8004abc <Error_Handler>
  }

}
 8005458:	bf00      	nop
 800545a:	3720      	adds	r7, #32
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	200016c4 	.word	0x200016c4
 8005464:	40014000 	.word	0x40014000

08005468 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 800546c:	4b0f      	ldr	r3, [pc, #60]	; (80054ac <MX_TIM16_Init+0x44>)
 800546e:	4a10      	ldr	r2, [pc, #64]	; (80054b0 <MX_TIM16_Init+0x48>)
 8005470:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8005472:	4b0e      	ldr	r3, [pc, #56]	; (80054ac <MX_TIM16_Init+0x44>)
 8005474:	2200      	movs	r2, #0
 8005476:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005478:	4b0c      	ldr	r3, [pc, #48]	; (80054ac <MX_TIM16_Init+0x44>)
 800547a:	2200      	movs	r2, #0
 800547c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 8191;
 800547e:	4b0b      	ldr	r3, [pc, #44]	; (80054ac <MX_TIM16_Init+0x44>)
 8005480:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8005484:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005486:	4b09      	ldr	r3, [pc, #36]	; (80054ac <MX_TIM16_Init+0x44>)
 8005488:	2200      	movs	r2, #0
 800548a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800548c:	4b07      	ldr	r3, [pc, #28]	; (80054ac <MX_TIM16_Init+0x44>)
 800548e:	2200      	movs	r2, #0
 8005490:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005492:	4b06      	ldr	r3, [pc, #24]	; (80054ac <MX_TIM16_Init+0x44>)
 8005494:	2200      	movs	r2, #0
 8005496:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8005498:	4804      	ldr	r0, [pc, #16]	; (80054ac <MX_TIM16_Init+0x44>)
 800549a:	f004 f9fc 	bl	8009896 <HAL_TIM_Base_Init>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d001      	beq.n	80054a8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80054a4:	f7ff fb0a 	bl	8004abc <Error_Handler>
  }

}
 80054a8:	bf00      	nop
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	20001840 	.word	0x20001840
 80054b0:	40014400 	.word	0x40014400

080054b4 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 80054b8:	4b0f      	ldr	r3, [pc, #60]	; (80054f8 <MX_TIM17_Init+0x44>)
 80054ba:	4a10      	ldr	r2, [pc, #64]	; (80054fc <MX_TIM17_Init+0x48>)
 80054bc:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1023;
 80054be:	4b0e      	ldr	r3, [pc, #56]	; (80054f8 <MX_TIM17_Init+0x44>)
 80054c0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80054c4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054c6:	4b0c      	ldr	r3, [pc, #48]	; (80054f8 <MX_TIM17_Init+0x44>)
 80054c8:	2200      	movs	r2, #0
 80054ca:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 64;
 80054cc:	4b0a      	ldr	r3, [pc, #40]	; (80054f8 <MX_TIM17_Init+0x44>)
 80054ce:	2240      	movs	r2, #64	; 0x40
 80054d0:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80054d2:	4b09      	ldr	r3, [pc, #36]	; (80054f8 <MX_TIM17_Init+0x44>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80054d8:	4b07      	ldr	r3, [pc, #28]	; (80054f8 <MX_TIM17_Init+0x44>)
 80054da:	2200      	movs	r2, #0
 80054dc:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80054de:	4b06      	ldr	r3, [pc, #24]	; (80054f8 <MX_TIM17_Init+0x44>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80054e4:	4804      	ldr	r0, [pc, #16]	; (80054f8 <MX_TIM17_Init+0x44>)
 80054e6:	f004 f9d6 	bl	8009896 <HAL_TIM_Base_Init>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d001      	beq.n	80054f4 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80054f0:	f7ff fae4 	bl	8004abc <Error_Handler>
  }

}
 80054f4:	bf00      	nop
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	20001710 	.word	0x20001710
 80054fc:	40014800 	.word	0x40014800

08005500 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b08a      	sub	sp, #40	; 0x28
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005508:	f107 0314 	add.w	r3, r7, #20
 800550c:	2200      	movs	r2, #0
 800550e:	601a      	str	r2, [r3, #0]
 8005510:	605a      	str	r2, [r3, #4]
 8005512:	609a      	str	r2, [r3, #8]
 8005514:	60da      	str	r2, [r3, #12]
 8005516:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a23      	ldr	r2, [pc, #140]	; (80055ac <HAL_TIM_Encoder_MspInit+0xac>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d13f      	bne.n	80055a2 <HAL_TIM_Encoder_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005522:	4b23      	ldr	r3, [pc, #140]	; (80055b0 <HAL_TIM_Encoder_MspInit+0xb0>)
 8005524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005526:	4a22      	ldr	r2, [pc, #136]	; (80055b0 <HAL_TIM_Encoder_MspInit+0xb0>)
 8005528:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800552c:	6613      	str	r3, [r2, #96]	; 0x60
 800552e:	4b20      	ldr	r3, [pc, #128]	; (80055b0 <HAL_TIM_Encoder_MspInit+0xb0>)
 8005530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005532:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005536:	613b      	str	r3, [r7, #16]
 8005538:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800553a:	4b1d      	ldr	r3, [pc, #116]	; (80055b0 <HAL_TIM_Encoder_MspInit+0xb0>)
 800553c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800553e:	4a1c      	ldr	r2, [pc, #112]	; (80055b0 <HAL_TIM_Encoder_MspInit+0xb0>)
 8005540:	f043 0304 	orr.w	r3, r3, #4
 8005544:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005546:	4b1a      	ldr	r3, [pc, #104]	; (80055b0 <HAL_TIM_Encoder_MspInit+0xb0>)
 8005548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800554a:	f003 0304 	and.w	r3, r3, #4
 800554e:	60fb      	str	r3, [r7, #12]
 8005550:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005552:	2303      	movs	r3, #3
 8005554:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005556:	2302      	movs	r3, #2
 8005558:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800555a:	2300      	movs	r3, #0
 800555c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800555e:	2300      	movs	r3, #0
 8005560:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8005562:	2302      	movs	r3, #2
 8005564:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005566:	f107 0314 	add.w	r3, r7, #20
 800556a:	4619      	mov	r1, r3
 800556c:	4811      	ldr	r0, [pc, #68]	; (80055b4 <HAL_TIM_Encoder_MspInit+0xb4>)
 800556e:	f002 fcd3 	bl	8007f18 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8005572:	2200      	movs	r2, #0
 8005574:	2100      	movs	r1, #0
 8005576:	2018      	movs	r0, #24
 8005578:	f001 fdb9 	bl	80070ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800557c:	2018      	movs	r0, #24
 800557e:	f001 fdd0 	bl	8007122 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8005582:	2200      	movs	r2, #0
 8005584:	2101      	movs	r1, #1
 8005586:	2019      	movs	r0, #25
 8005588:	f001 fdb1 	bl	80070ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800558c:	2019      	movs	r0, #25
 800558e:	f001 fdc8 	bl	8007122 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8005592:	2200      	movs	r2, #0
 8005594:	2101      	movs	r1, #1
 8005596:	201a      	movs	r0, #26
 8005598:	f001 fda9 	bl	80070ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800559c:	201a      	movs	r0, #26
 800559e:	f001 fdc0 	bl	8007122 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80055a2:	bf00      	nop
 80055a4:	3728      	adds	r7, #40	; 0x28
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	40012c00 	.word	0x40012c00
 80055b0:	40021000 	.word	0x40021000
 80055b4:	48000800 	.word	0x48000800

080055b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b08e      	sub	sp, #56	; 0x38
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055c4:	2200      	movs	r2, #0
 80055c6:	601a      	str	r2, [r3, #0]
 80055c8:	605a      	str	r2, [r3, #4]
 80055ca:	609a      	str	r2, [r3, #8]
 80055cc:	60da      	str	r2, [r3, #12]
 80055ce:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055d8:	d131      	bne.n	800563e <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80055da:	4b53      	ldr	r3, [pc, #332]	; (8005728 <HAL_TIM_Base_MspInit+0x170>)
 80055dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055de:	4a52      	ldr	r2, [pc, #328]	; (8005728 <HAL_TIM_Base_MspInit+0x170>)
 80055e0:	f043 0301 	orr.w	r3, r3, #1
 80055e4:	6593      	str	r3, [r2, #88]	; 0x58
 80055e6:	4b50      	ldr	r3, [pc, #320]	; (8005728 <HAL_TIM_Base_MspInit+0x170>)
 80055e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	623b      	str	r3, [r7, #32]
 80055f0:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055f2:	4b4d      	ldr	r3, [pc, #308]	; (8005728 <HAL_TIM_Base_MspInit+0x170>)
 80055f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055f6:	4a4c      	ldr	r2, [pc, #304]	; (8005728 <HAL_TIM_Base_MspInit+0x170>)
 80055f8:	f043 0301 	orr.w	r3, r3, #1
 80055fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80055fe:	4b4a      	ldr	r3, [pc, #296]	; (8005728 <HAL_TIM_Base_MspInit+0x170>)
 8005600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	61fb      	str	r3, [r7, #28]
 8005608:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800560a:	2301      	movs	r3, #1
 800560c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800560e:	2302      	movs	r3, #2
 8005610:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005612:	2300      	movs	r3, #0
 8005614:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005616:	2300      	movs	r3, #0
 8005618:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800561a:	2301      	movs	r3, #1
 800561c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800561e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005622:	4619      	mov	r1, r3
 8005624:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005628:	f002 fc76 	bl	8007f18 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800562c:	2200      	movs	r2, #0
 800562e:	2101      	movs	r1, #1
 8005630:	201c      	movs	r0, #28
 8005632:	f001 fd5c 	bl	80070ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005636:	201c      	movs	r0, #28
 8005638:	f001 fd73 	bl	8007122 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800563c:	e070      	b.n	8005720 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM5)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a3a      	ldr	r2, [pc, #232]	; (800572c <HAL_TIM_Base_MspInit+0x174>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d10c      	bne.n	8005662 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005648:	4b37      	ldr	r3, [pc, #220]	; (8005728 <HAL_TIM_Base_MspInit+0x170>)
 800564a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800564c:	4a36      	ldr	r2, [pc, #216]	; (8005728 <HAL_TIM_Base_MspInit+0x170>)
 800564e:	f043 0308 	orr.w	r3, r3, #8
 8005652:	6593      	str	r3, [r2, #88]	; 0x58
 8005654:	4b34      	ldr	r3, [pc, #208]	; (8005728 <HAL_TIM_Base_MspInit+0x170>)
 8005656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005658:	f003 0308 	and.w	r3, r3, #8
 800565c:	61bb      	str	r3, [r7, #24]
 800565e:	69bb      	ldr	r3, [r7, #24]
}
 8005660:	e05e      	b.n	8005720 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM8)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a32      	ldr	r2, [pc, #200]	; (8005730 <HAL_TIM_Base_MspInit+0x178>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d10c      	bne.n	8005686 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800566c:	4b2e      	ldr	r3, [pc, #184]	; (8005728 <HAL_TIM_Base_MspInit+0x170>)
 800566e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005670:	4a2d      	ldr	r2, [pc, #180]	; (8005728 <HAL_TIM_Base_MspInit+0x170>)
 8005672:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005676:	6613      	str	r3, [r2, #96]	; 0x60
 8005678:	4b2b      	ldr	r3, [pc, #172]	; (8005728 <HAL_TIM_Base_MspInit+0x170>)
 800567a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800567c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005680:	617b      	str	r3, [r7, #20]
 8005682:	697b      	ldr	r3, [r7, #20]
}
 8005684:	e04c      	b.n	8005720 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM15)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a2a      	ldr	r2, [pc, #168]	; (8005734 <HAL_TIM_Base_MspInit+0x17c>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d114      	bne.n	80056ba <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005690:	4b25      	ldr	r3, [pc, #148]	; (8005728 <HAL_TIM_Base_MspInit+0x170>)
 8005692:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005694:	4a24      	ldr	r2, [pc, #144]	; (8005728 <HAL_TIM_Base_MspInit+0x170>)
 8005696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800569a:	6613      	str	r3, [r2, #96]	; 0x60
 800569c:	4b22      	ldr	r3, [pc, #136]	; (8005728 <HAL_TIM_Base_MspInit+0x170>)
 800569e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056a4:	613b      	str	r3, [r7, #16]
 80056a6:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80056a8:	2200      	movs	r2, #0
 80056aa:	2100      	movs	r1, #0
 80056ac:	2018      	movs	r0, #24
 80056ae:	f001 fd1e 	bl	80070ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80056b2:	2018      	movs	r0, #24
 80056b4:	f001 fd35 	bl	8007122 <HAL_NVIC_EnableIRQ>
}
 80056b8:	e032      	b.n	8005720 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM16)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a1e      	ldr	r2, [pc, #120]	; (8005738 <HAL_TIM_Base_MspInit+0x180>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d114      	bne.n	80056ee <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80056c4:	4b18      	ldr	r3, [pc, #96]	; (8005728 <HAL_TIM_Base_MspInit+0x170>)
 80056c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056c8:	4a17      	ldr	r2, [pc, #92]	; (8005728 <HAL_TIM_Base_MspInit+0x170>)
 80056ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056ce:	6613      	str	r3, [r2, #96]	; 0x60
 80056d0:	4b15      	ldr	r3, [pc, #84]	; (8005728 <HAL_TIM_Base_MspInit+0x170>)
 80056d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056d8:	60fb      	str	r3, [r7, #12]
 80056da:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 80056dc:	2200      	movs	r2, #0
 80056de:	2101      	movs	r1, #1
 80056e0:	2019      	movs	r0, #25
 80056e2:	f001 fd04 	bl	80070ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80056e6:	2019      	movs	r0, #25
 80056e8:	f001 fd1b 	bl	8007122 <HAL_NVIC_EnableIRQ>
}
 80056ec:	e018      	b.n	8005720 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM17)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a12      	ldr	r2, [pc, #72]	; (800573c <HAL_TIM_Base_MspInit+0x184>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d113      	bne.n	8005720 <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80056f8:	4b0b      	ldr	r3, [pc, #44]	; (8005728 <HAL_TIM_Base_MspInit+0x170>)
 80056fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056fc:	4a0a      	ldr	r2, [pc, #40]	; (8005728 <HAL_TIM_Base_MspInit+0x170>)
 80056fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005702:	6613      	str	r3, [r2, #96]	; 0x60
 8005704:	4b08      	ldr	r3, [pc, #32]	; (8005728 <HAL_TIM_Base_MspInit+0x170>)
 8005706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005708:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800570c:	60bb      	str	r3, [r7, #8]
 800570e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8005710:	2200      	movs	r2, #0
 8005712:	2101      	movs	r1, #1
 8005714:	201a      	movs	r0, #26
 8005716:	f001 fcea 	bl	80070ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800571a:	201a      	movs	r0, #26
 800571c:	f001 fd01 	bl	8007122 <HAL_NVIC_EnableIRQ>
}
 8005720:	bf00      	nop
 8005722:	3738      	adds	r7, #56	; 0x38
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	40021000 	.word	0x40021000
 800572c:	40000c00 	.word	0x40000c00
 8005730:	40013400 	.word	0x40013400
 8005734:	40014000 	.word	0x40014000
 8005738:	40014400 	.word	0x40014400
 800573c:	40014800 	.word	0x40014800

08005740 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005740:	480d      	ldr	r0, [pc, #52]	; (8005778 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005742:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005744:	480d      	ldr	r0, [pc, #52]	; (800577c <LoopForever+0x6>)
  ldr r1, =_edata
 8005746:	490e      	ldr	r1, [pc, #56]	; (8005780 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005748:	4a0e      	ldr	r2, [pc, #56]	; (8005784 <LoopForever+0xe>)
  movs r3, #0
 800574a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800574c:	e002      	b.n	8005754 <LoopCopyDataInit>

0800574e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800574e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005752:	3304      	adds	r3, #4

08005754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005758:	d3f9      	bcc.n	800574e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800575a:	4a0b      	ldr	r2, [pc, #44]	; (8005788 <LoopForever+0x12>)
  ldr r4, =_ebss
 800575c:	4c0b      	ldr	r4, [pc, #44]	; (800578c <LoopForever+0x16>)
  movs r3, #0
 800575e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005760:	e001      	b.n	8005766 <LoopFillZerobss>

08005762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005764:	3204      	adds	r2, #4

08005766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005768:	d3fb      	bcc.n	8005762 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800576a:	f7ff fc83 	bl	8005074 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800576e:	f006 fb95 	bl	800be9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005772:	f7ff f89f 	bl	80048b4 <main>

08005776 <LoopForever>:

LoopForever:
    b LoopForever
 8005776:	e7fe      	b.n	8005776 <LoopForever>
  ldr   r0, =_estack
 8005778:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800577c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005780:	200013f8 	.word	0x200013f8
  ldr r2, =_sidata
 8005784:	0800f0c8 	.word	0x0800f0c8
  ldr r2, =_sbss
 8005788:	200013f8 	.word	0x200013f8
  ldr r4, =_ebss
 800578c:	20001894 	.word	0x20001894

08005790 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005790:	e7fe      	b.n	8005790 <ADC1_2_IRQHandler>

08005792 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b082      	sub	sp, #8
 8005796:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005798:	2300      	movs	r3, #0
 800579a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800579c:	2003      	movs	r0, #3
 800579e:	f001 fc9b 	bl	80070d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80057a2:	2000      	movs	r0, #0
 80057a4:	f000 f80e 	bl	80057c4 <HAL_InitTick>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d002      	beq.n	80057b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	71fb      	strb	r3, [r7, #7]
 80057b2:	e001      	b.n	80057b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80057b4:	f7ff fa52 	bl	8004c5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80057b8:	79fb      	ldrb	r3, [r7, #7]

}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3708      	adds	r7, #8
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
	...

080057c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80057cc:	2300      	movs	r3, #0
 80057ce:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80057d0:	4b16      	ldr	r3, [pc, #88]	; (800582c <HAL_InitTick+0x68>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d022      	beq.n	800581e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80057d8:	4b15      	ldr	r3, [pc, #84]	; (8005830 <HAL_InitTick+0x6c>)
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	4b13      	ldr	r3, [pc, #76]	; (800582c <HAL_InitTick+0x68>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80057e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80057e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ec:	4618      	mov	r0, r3
 80057ee:	f001 fca6 	bl	800713e <HAL_SYSTICK_Config>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d10f      	bne.n	8005818 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2b0f      	cmp	r3, #15
 80057fc:	d809      	bhi.n	8005812 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80057fe:	2200      	movs	r2, #0
 8005800:	6879      	ldr	r1, [r7, #4]
 8005802:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005806:	f001 fc72 	bl	80070ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800580a:	4a0a      	ldr	r2, [pc, #40]	; (8005834 <HAL_InitTick+0x70>)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6013      	str	r3, [r2, #0]
 8005810:	e007      	b.n	8005822 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	73fb      	strb	r3, [r7, #15]
 8005816:	e004      	b.n	8005822 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	73fb      	strb	r3, [r7, #15]
 800581c:	e001      	b.n	8005822 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005822:	7bfb      	ldrb	r3, [r7, #15]
}
 8005824:	4618      	mov	r0, r3
 8005826:	3710      	adds	r7, #16
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	200001dc 	.word	0x200001dc
 8005830:	200001d4 	.word	0x200001d4
 8005834:	200001d8 	.word	0x200001d8

08005838 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005838:	b480      	push	{r7}
 800583a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800583c:	4b05      	ldr	r3, [pc, #20]	; (8005854 <HAL_IncTick+0x1c>)
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	4b05      	ldr	r3, [pc, #20]	; (8005858 <HAL_IncTick+0x20>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4413      	add	r3, r2
 8005846:	4a03      	ldr	r2, [pc, #12]	; (8005854 <HAL_IncTick+0x1c>)
 8005848:	6013      	str	r3, [r2, #0]
}
 800584a:	bf00      	nop
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr
 8005854:	2000188c 	.word	0x2000188c
 8005858:	200001dc 	.word	0x200001dc

0800585c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800585c:	b480      	push	{r7}
 800585e:	af00      	add	r7, sp, #0
  return uwTick;
 8005860:	4b03      	ldr	r3, [pc, #12]	; (8005870 <HAL_GetTick+0x14>)
 8005862:	681b      	ldr	r3, [r3, #0]
}
 8005864:	4618      	mov	r0, r3
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	2000188c 	.word	0x2000188c

08005874 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800587c:	f7ff ffee 	bl	800585c <HAL_GetTick>
 8005880:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800588c:	d004      	beq.n	8005898 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800588e:	4b09      	ldr	r3, [pc, #36]	; (80058b4 <HAL_Delay+0x40>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	4413      	add	r3, r2
 8005896:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005898:	bf00      	nop
 800589a:	f7ff ffdf 	bl	800585c <HAL_GetTick>
 800589e:	4602      	mov	r2, r0
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d8f7      	bhi.n	800589a <HAL_Delay+0x26>
  {
  }
}
 80058aa:	bf00      	nop
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	200001dc 	.word	0x200001dc

080058b8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	431a      	orrs	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	609a      	str	r2, [r3, #8]
}
 80058d2:	bf00      	nop
 80058d4:	370c      	adds	r7, #12
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr

080058de <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80058de:	b480      	push	{r7}
 80058e0:	b083      	sub	sp, #12
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
 80058e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	431a      	orrs	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	609a      	str	r2, [r3, #8]
}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005914:	4618      	mov	r0, r3
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005920:	b490      	push	{r4, r7}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]
 800592c:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	3360      	adds	r3, #96	; 0x60
 8005932:	461a      	mov	r2, r3
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	4413      	add	r3, r2
 800593a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800593c:	6822      	ldr	r2, [r4, #0]
 800593e:	4b08      	ldr	r3, [pc, #32]	; (8005960 <LL_ADC_SetOffset+0x40>)
 8005940:	4013      	ands	r3, r2
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005948:	683a      	ldr	r2, [r7, #0]
 800594a:	430a      	orrs	r2, r1
 800594c:	4313      	orrs	r3, r2
 800594e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005952:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005954:	bf00      	nop
 8005956:	3710      	adds	r7, #16
 8005958:	46bd      	mov	sp, r7
 800595a:	bc90      	pop	{r4, r7}
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	03fff000 	.word	0x03fff000

08005964 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005964:	b490      	push	{r4, r7}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	3360      	adds	r3, #96	; 0x60
 8005972:	461a      	mov	r2, r3
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4413      	add	r3, r2
 800597a:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800597c:	6823      	ldr	r3, [r4, #0]
 800597e:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005982:	4618      	mov	r0, r3
 8005984:	3708      	adds	r7, #8
 8005986:	46bd      	mov	sp, r7
 8005988:	bc90      	pop	{r4, r7}
 800598a:	4770      	bx	lr

0800598c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800598c:	b490      	push	{r4, r7}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	3360      	adds	r3, #96	; 0x60
 800599c:	461a      	mov	r2, r3
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	4413      	add	r3, r2
 80059a4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80059a6:	6823      	ldr	r3, [r4, #0]
 80059a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80059b2:	bf00      	nop
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bc90      	pop	{r4, r7}
 80059ba:	4770      	bx	lr

080059bc <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80059bc:	b490      	push	{r4, r7}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	3360      	adds	r3, #96	; 0x60
 80059cc:	461a      	mov	r2, r3
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	4413      	add	r3, r2
 80059d4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80059d6:	6823      	ldr	r3, [r4, #0]
 80059d8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4313      	orrs	r3, r2
 80059e0:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80059e2:	bf00      	nop
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bc90      	pop	{r4, r7}
 80059ea:	4770      	bx	lr

080059ec <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80059ec:	b490      	push	{r4, r7}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	3360      	adds	r3, #96	; 0x60
 80059fc:	461a      	mov	r2, r3
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	4413      	add	r3, r2
 8005a04:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8005a06:	6823      	ldr	r3, [r4, #0]
 8005a08:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8005a12:	bf00      	nop
 8005a14:	3710      	adds	r7, #16
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bc90      	pop	{r4, r7}
 8005a1a:	4770      	bx	lr

08005a1c <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	431a      	orrs	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	615a      	str	r2, [r3, #20]
}
 8005a36:	bf00      	nop
 8005a38:	370c      	adds	r7, #12
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005a42:	b490      	push	{r4, r7}
 8005a44:	b084      	sub	sp, #16
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	60f8      	str	r0, [r7, #12]
 8005a4a:	60b9      	str	r1, [r7, #8]
 8005a4c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	3330      	adds	r3, #48	; 0x30
 8005a52:	461a      	mov	r2, r3
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	0a1b      	lsrs	r3, r3, #8
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	f003 030c 	and.w	r3, r3, #12
 8005a5e:	4413      	add	r3, r2
 8005a60:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8005a62:	6822      	ldr	r2, [r4, #0]
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	f003 031f 	and.w	r3, r3, #31
 8005a6a:	211f      	movs	r1, #31
 8005a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a70:	43db      	mvns	r3, r3
 8005a72:	401a      	ands	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	0e9b      	lsrs	r3, r3, #26
 8005a78:	f003 011f 	and.w	r1, r3, #31
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	f003 031f 	and.w	r3, r3, #31
 8005a82:	fa01 f303 	lsl.w	r3, r1, r3
 8005a86:	4313      	orrs	r3, r2
 8005a88:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005a8a:	bf00      	nop
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bc90      	pop	{r4, r7}
 8005a92:	4770      	bx	lr

08005a94 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005a94:	b490      	push	{r4, r7}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	3314      	adds	r3, #20
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	0e5b      	lsrs	r3, r3, #25
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	f003 0304 	and.w	r3, r3, #4
 8005ab0:	4413      	add	r3, r2
 8005ab2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8005ab4:	6822      	ldr	r2, [r4, #0]
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	0d1b      	lsrs	r3, r3, #20
 8005aba:	f003 031f 	and.w	r3, r3, #31
 8005abe:	2107      	movs	r1, #7
 8005ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ac4:	43db      	mvns	r3, r3
 8005ac6:	401a      	ands	r2, r3
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	0d1b      	lsrs	r3, r3, #20
 8005acc:	f003 031f 	and.w	r3, r3, #31
 8005ad0:	6879      	ldr	r1, [r7, #4]
 8005ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005ada:	bf00      	nop
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bc90      	pop	{r4, r7}
 8005ae2:	4770      	bx	lr

08005ae4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005afc:	43db      	mvns	r3, r3
 8005afe:	401a      	ands	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f003 0318 	and.w	r3, r3, #24
 8005b06:	4908      	ldr	r1, [pc, #32]	; (8005b28 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005b08:	40d9      	lsrs	r1, r3
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	400b      	ands	r3, r1
 8005b0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b12:	431a      	orrs	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005b1a:	bf00      	nop
 8005b1c:	3714      	adds	r7, #20
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	0007ffff 	.word	0x0007ffff

08005b2c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005b3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	6093      	str	r3, [r2, #8]
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b64:	d101      	bne.n	8005b6a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005b66:	2301      	movs	r3, #1
 8005b68:	e000      	b.n	8005b6c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005b88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005b8c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005b94:	bf00      	nop
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bb4:	d101      	bne.n	8005bba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e000      	b.n	8005bbc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f003 0301 	and.w	r3, r3, #1
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d101      	bne.n	8005be0 <LL_ADC_IsEnabled+0x18>
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e000      	b.n	8005be2 <LL_ADC_IsEnabled+0x1a>
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	370c      	adds	r7, #12
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b083      	sub	sp, #12
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	f003 0304 	and.w	r3, r3, #4
 8005bfe:	2b04      	cmp	r3, #4
 8005c00:	d101      	bne.n	8005c06 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005c02:	2301      	movs	r3, #1
 8005c04:	e000      	b.n	8005c08 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f003 0308 	and.w	r3, r3, #8
 8005c24:	2b08      	cmp	r3, #8
 8005c26:	d101      	bne.n	8005c2c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e000      	b.n	8005c2e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
	...

08005c3c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005c3c:	b590      	push	{r4, r7, lr}
 8005c3e:	b089      	sub	sp, #36	; 0x24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c44:	2300      	movs	r3, #0
 8005c46:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d101      	bne.n	8005c56 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e1ad      	b.n	8005fb2 <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	695b      	ldr	r3, [r3, #20]
 8005c5a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d109      	bne.n	8005c78 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f7fe f82b 	bl	8003cc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f7ff ff67 	bl	8005b50 <LL_ADC_IsDeepPowerDownEnabled>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d004      	beq.n	8005c92 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f7ff ff4d 	bl	8005b2c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7ff ff82 	bl	8005ba0 <LL_ADC_IsInternalRegulatorEnabled>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d113      	bne.n	8005cca <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7ff ff66 	bl	8005b78 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005cac:	4b9e      	ldr	r3, [pc, #632]	; (8005f28 <HAL_ADC_Init+0x2ec>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	099b      	lsrs	r3, r3, #6
 8005cb2:	4a9e      	ldr	r2, [pc, #632]	; (8005f2c <HAL_ADC_Init+0x2f0>)
 8005cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb8:	099b      	lsrs	r3, r3, #6
 8005cba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005cbc:	e002      	b.n	8005cc4 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d1f9      	bne.n	8005cbe <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7ff ff66 	bl	8005ba0 <LL_ADC_IsInternalRegulatorEnabled>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10d      	bne.n	8005cf6 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cde:	f043 0210 	orr.w	r2, r3, #16
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cea:	f043 0201 	orr.w	r2, r3, #1
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7ff ff77 	bl	8005bee <LL_ADC_REG_IsConversionOngoing>
 8005d00:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d06:	f003 0310 	and.w	r3, r3, #16
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	f040 8148 	bne.w	8005fa0 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	f040 8144 	bne.w	8005fa0 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d1c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005d20:	f043 0202 	orr.w	r2, r3, #2
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f7ff ff4b 	bl	8005bc8 <LL_ADC_IsEnabled>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d141      	bne.n	8005dbc <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d40:	d004      	beq.n	8005d4c <HAL_ADC_Init+0x110>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a7a      	ldr	r2, [pc, #488]	; (8005f30 <HAL_ADC_Init+0x2f4>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d10f      	bne.n	8005d6c <HAL_ADC_Init+0x130>
 8005d4c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005d50:	f7ff ff3a 	bl	8005bc8 <LL_ADC_IsEnabled>
 8005d54:	4604      	mov	r4, r0
 8005d56:	4876      	ldr	r0, [pc, #472]	; (8005f30 <HAL_ADC_Init+0x2f4>)
 8005d58:	f7ff ff36 	bl	8005bc8 <LL_ADC_IsEnabled>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	4323      	orrs	r3, r4
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	bf0c      	ite	eq
 8005d64:	2301      	moveq	r3, #1
 8005d66:	2300      	movne	r3, #0
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	e012      	b.n	8005d92 <HAL_ADC_Init+0x156>
 8005d6c:	4871      	ldr	r0, [pc, #452]	; (8005f34 <HAL_ADC_Init+0x2f8>)
 8005d6e:	f7ff ff2b 	bl	8005bc8 <LL_ADC_IsEnabled>
 8005d72:	4604      	mov	r4, r0
 8005d74:	4870      	ldr	r0, [pc, #448]	; (8005f38 <HAL_ADC_Init+0x2fc>)
 8005d76:	f7ff ff27 	bl	8005bc8 <LL_ADC_IsEnabled>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	431c      	orrs	r4, r3
 8005d7e:	486f      	ldr	r0, [pc, #444]	; (8005f3c <HAL_ADC_Init+0x300>)
 8005d80:	f7ff ff22 	bl	8005bc8 <LL_ADC_IsEnabled>
 8005d84:	4603      	mov	r3, r0
 8005d86:	4323      	orrs	r3, r4
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	bf0c      	ite	eq
 8005d8c:	2301      	moveq	r3, #1
 8005d8e:	2300      	movne	r3, #0
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d012      	beq.n	8005dbc <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d9e:	d004      	beq.n	8005daa <HAL_ADC_Init+0x16e>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a62      	ldr	r2, [pc, #392]	; (8005f30 <HAL_ADC_Init+0x2f4>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d101      	bne.n	8005dae <HAL_ADC_Init+0x172>
 8005daa:	4a65      	ldr	r2, [pc, #404]	; (8005f40 <HAL_ADC_Init+0x304>)
 8005dac:	e000      	b.n	8005db0 <HAL_ADC_Init+0x174>
 8005dae:	4a65      	ldr	r2, [pc, #404]	; (8005f44 <HAL_ADC_Init+0x308>)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	4619      	mov	r1, r3
 8005db6:	4610      	mov	r0, r2
 8005db8:	f7ff fd7e 	bl	80058b8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	7f5b      	ldrb	r3, [r3, #29]
 8005dc0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005dc6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005dcc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8005dd2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005dda:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d106      	bne.n	8005df8 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dee:	3b01      	subs	r3, #1
 8005df0:	045b      	lsls	r3, r3, #17
 8005df2:	69ba      	ldr	r2, [r7, #24]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d009      	beq.n	8005e14 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e04:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e0c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005e0e:	69ba      	ldr	r2, [r7, #24]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68da      	ldr	r2, [r3, #12]
 8005e1a:	4b4b      	ldr	r3, [pc, #300]	; (8005f48 <HAL_ADC_Init+0x30c>)
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	6812      	ldr	r2, [r2, #0]
 8005e22:	69b9      	ldr	r1, [r7, #24]
 8005e24:	430b      	orrs	r3, r1
 8005e26:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7ff fed3 	bl	8005bee <LL_ADC_REG_IsConversionOngoing>
 8005e48:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7ff fee0 	bl	8005c14 <LL_ADC_INJ_IsConversionOngoing>
 8005e54:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d17f      	bne.n	8005f5c <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d17c      	bne.n	8005f5c <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005e66:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005e6e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005e70:	4313      	orrs	r3, r2
 8005e72:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e7e:	f023 0302 	bic.w	r3, r3, #2
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	6812      	ldr	r2, [r2, #0]
 8005e86:	69b9      	ldr	r1, [r7, #24]
 8005e88:	430b      	orrs	r3, r1
 8005e8a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d017      	beq.n	8005ec4 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	691a      	ldr	r2, [r3, #16]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005ea2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005eac:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005eb0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	6911      	ldr	r1, [r2, #16]
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	6812      	ldr	r2, [r2, #0]
 8005ebc:	430b      	orrs	r3, r1
 8005ebe:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8005ec2:	e013      	b.n	8005eec <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	691a      	ldr	r2, [r3, #16]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005ed2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	6812      	ldr	r2, [r2, #0]
 8005ee0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005ee4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005ee8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d12a      	bne.n	8005f4c <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005f00:	f023 0304 	bic.w	r3, r3, #4
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005f0c:	4311      	orrs	r1, r2
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005f12:	4311      	orrs	r1, r2
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005f18:	430a      	orrs	r2, r1
 8005f1a:	431a      	orrs	r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f042 0201 	orr.w	r2, r2, #1
 8005f24:	611a      	str	r2, [r3, #16]
 8005f26:	e019      	b.n	8005f5c <HAL_ADC_Init+0x320>
 8005f28:	200001d4 	.word	0x200001d4
 8005f2c:	053e2d63 	.word	0x053e2d63
 8005f30:	50000100 	.word	0x50000100
 8005f34:	50000400 	.word	0x50000400
 8005f38:	50000500 	.word	0x50000500
 8005f3c:	50000600 	.word	0x50000600
 8005f40:	50000300 	.word	0x50000300
 8005f44:	50000700 	.word	0x50000700
 8005f48:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	691a      	ldr	r2, [r3, #16]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f022 0201 	bic.w	r2, r2, #1
 8005f5a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	695b      	ldr	r3, [r3, #20]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d10c      	bne.n	8005f7e <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6a:	f023 010f 	bic.w	r1, r3, #15
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	1e5a      	subs	r2, r3, #1
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	430a      	orrs	r2, r1
 8005f7a:	631a      	str	r2, [r3, #48]	; 0x30
 8005f7c:	e007      	b.n	8005f8e <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f022 020f 	bic.w	r2, r2, #15
 8005f8c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f92:	f023 0303 	bic.w	r3, r3, #3
 8005f96:	f043 0201 	orr.w	r2, r3, #1
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	65da      	str	r2, [r3, #92]	; 0x5c
 8005f9e:	e007      	b.n	8005fb0 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fa4:	f043 0210 	orr.w	r2, r3, #16
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005fb0:	7ffb      	ldrb	r3, [r7, #31]
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3724      	adds	r7, #36	; 0x24
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd90      	pop	{r4, r7, pc}
 8005fba:	bf00      	nop

08005fbc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b0a6      	sub	sp, #152	; 0x98
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d101      	bne.n	8005fde <HAL_ADC_ConfigChannel+0x22>
 8005fda:	2302      	movs	r3, #2
 8005fdc:	e38e      	b.n	80066fc <HAL_ADC_ConfigChannel+0x740>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7ff fdff 	bl	8005bee <LL_ADC_REG_IsConversionOngoing>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	f040 836f 	bne.w	80066d6 <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6818      	ldr	r0, [r3, #0]
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	6859      	ldr	r1, [r3, #4]
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	461a      	mov	r2, r3
 8006006:	f7ff fd1c 	bl	8005a42 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4618      	mov	r0, r3
 8006010:	f7ff fded 	bl	8005bee <LL_ADC_REG_IsConversionOngoing>
 8006014:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4618      	mov	r0, r3
 800601e:	f7ff fdf9 	bl	8005c14 <LL_ADC_INJ_IsConversionOngoing>
 8006022:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006026:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800602a:	2b00      	cmp	r3, #0
 800602c:	f040 817b 	bne.w	8006326 <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006030:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006034:	2b00      	cmp	r3, #0
 8006036:	f040 8176 	bne.w	8006326 <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006042:	d10f      	bne.n	8006064 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6818      	ldr	r0, [r3, #0]
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2200      	movs	r2, #0
 800604e:	4619      	mov	r1, r3
 8006050:	f7ff fd20 	bl	8005a94 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800605c:	4618      	mov	r0, r3
 800605e:	f7ff fcdd 	bl	8005a1c <LL_ADC_SetSamplingTimeCommonConfig>
 8006062:	e00e      	b.n	8006082 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6818      	ldr	r0, [r3, #0]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	6819      	ldr	r1, [r3, #0]
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	461a      	mov	r2, r3
 8006072:	f7ff fd0f 	bl	8005a94 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2100      	movs	r1, #0
 800607c:	4618      	mov	r0, r3
 800607e:	f7ff fccd 	bl	8005a1c <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	695a      	ldr	r2, [r3, #20]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	08db      	lsrs	r3, r3, #3
 800608e:	f003 0303 	and.w	r3, r3, #3
 8006092:	005b      	lsls	r3, r3, #1
 8006094:	fa02 f303 	lsl.w	r3, r2, r3
 8006098:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	2b04      	cmp	r3, #4
 80060a2:	d022      	beq.n	80060ea <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6818      	ldr	r0, [r3, #0]
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	6919      	ldr	r1, [r3, #16]
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060b4:	f7ff fc34 	bl	8005920 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6818      	ldr	r0, [r3, #0]
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	6919      	ldr	r1, [r3, #16]
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	699b      	ldr	r3, [r3, #24]
 80060c4:	461a      	mov	r2, r3
 80060c6:	f7ff fc79 	bl	80059bc <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6818      	ldr	r0, [r3, #0]
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	6919      	ldr	r1, [r3, #16]
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	7f1b      	ldrb	r3, [r3, #28]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d102      	bne.n	80060e0 <HAL_ADC_ConfigChannel+0x124>
 80060da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80060de:	e000      	b.n	80060e2 <HAL_ADC_ConfigChannel+0x126>
 80060e0:	2300      	movs	r3, #0
 80060e2:	461a      	mov	r2, r3
 80060e4:	f7ff fc82 	bl	80059ec <LL_ADC_SetOffsetSaturation>
 80060e8:	e11d      	b.n	8006326 <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2100      	movs	r1, #0
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7ff fc37 	bl	8005964 <LL_ADC_GetOffsetChannel>
 80060f6:	4603      	mov	r3, r0
 80060f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d10a      	bne.n	8006116 <HAL_ADC_ConfigChannel+0x15a>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2100      	movs	r1, #0
 8006106:	4618      	mov	r0, r3
 8006108:	f7ff fc2c 	bl	8005964 <LL_ADC_GetOffsetChannel>
 800610c:	4603      	mov	r3, r0
 800610e:	0e9b      	lsrs	r3, r3, #26
 8006110:	f003 021f 	and.w	r2, r3, #31
 8006114:	e012      	b.n	800613c <HAL_ADC_ConfigChannel+0x180>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2100      	movs	r1, #0
 800611c:	4618      	mov	r0, r3
 800611e:	f7ff fc21 	bl	8005964 <LL_ADC_GetOffsetChannel>
 8006122:	4603      	mov	r3, r0
 8006124:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006128:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800612c:	fa93 f3a3 	rbit	r3, r3
 8006130:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8006132:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006134:	fab3 f383 	clz	r3, r3
 8006138:	b2db      	uxtb	r3, r3
 800613a:	461a      	mov	r2, r3
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006144:	2b00      	cmp	r3, #0
 8006146:	d105      	bne.n	8006154 <HAL_ADC_ConfigChannel+0x198>
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	0e9b      	lsrs	r3, r3, #26
 800614e:	f003 031f 	and.w	r3, r3, #31
 8006152:	e00a      	b.n	800616a <HAL_ADC_ConfigChannel+0x1ae>
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800615a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800615c:	fa93 f3a3 	rbit	r3, r3
 8006160:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8006162:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006164:	fab3 f383 	clz	r3, r3
 8006168:	b2db      	uxtb	r3, r3
 800616a:	429a      	cmp	r2, r3
 800616c:	d106      	bne.n	800617c <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2200      	movs	r2, #0
 8006174:	2100      	movs	r1, #0
 8006176:	4618      	mov	r0, r3
 8006178:	f7ff fc08 	bl	800598c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2101      	movs	r1, #1
 8006182:	4618      	mov	r0, r3
 8006184:	f7ff fbee 	bl	8005964 <LL_ADC_GetOffsetChannel>
 8006188:	4603      	mov	r3, r0
 800618a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800618e:	2b00      	cmp	r3, #0
 8006190:	d10a      	bne.n	80061a8 <HAL_ADC_ConfigChannel+0x1ec>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2101      	movs	r1, #1
 8006198:	4618      	mov	r0, r3
 800619a:	f7ff fbe3 	bl	8005964 <LL_ADC_GetOffsetChannel>
 800619e:	4603      	mov	r3, r0
 80061a0:	0e9b      	lsrs	r3, r3, #26
 80061a2:	f003 021f 	and.w	r2, r3, #31
 80061a6:	e010      	b.n	80061ca <HAL_ADC_ConfigChannel+0x20e>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2101      	movs	r1, #1
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7ff fbd8 	bl	8005964 <LL_ADC_GetOffsetChannel>
 80061b4:	4603      	mov	r3, r0
 80061b6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061ba:	fa93 f3a3 	rbit	r3, r3
 80061be:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80061c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061c2:	fab3 f383 	clz	r3, r3
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	461a      	mov	r2, r3
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d105      	bne.n	80061e2 <HAL_ADC_ConfigChannel+0x226>
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	0e9b      	lsrs	r3, r3, #26
 80061dc:	f003 031f 	and.w	r3, r3, #31
 80061e0:	e00a      	b.n	80061f8 <HAL_ADC_ConfigChannel+0x23c>
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061ea:	fa93 f3a3 	rbit	r3, r3
 80061ee:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80061f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061f2:	fab3 f383 	clz	r3, r3
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d106      	bne.n	800620a <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2200      	movs	r2, #0
 8006202:	2101      	movs	r1, #1
 8006204:	4618      	mov	r0, r3
 8006206:	f7ff fbc1 	bl	800598c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2102      	movs	r1, #2
 8006210:	4618      	mov	r0, r3
 8006212:	f7ff fba7 	bl	8005964 <LL_ADC_GetOffsetChannel>
 8006216:	4603      	mov	r3, r0
 8006218:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800621c:	2b00      	cmp	r3, #0
 800621e:	d10a      	bne.n	8006236 <HAL_ADC_ConfigChannel+0x27a>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2102      	movs	r1, #2
 8006226:	4618      	mov	r0, r3
 8006228:	f7ff fb9c 	bl	8005964 <LL_ADC_GetOffsetChannel>
 800622c:	4603      	mov	r3, r0
 800622e:	0e9b      	lsrs	r3, r3, #26
 8006230:	f003 021f 	and.w	r2, r3, #31
 8006234:	e010      	b.n	8006258 <HAL_ADC_ConfigChannel+0x29c>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2102      	movs	r1, #2
 800623c:	4618      	mov	r0, r3
 800623e:	f7ff fb91 	bl	8005964 <LL_ADC_GetOffsetChannel>
 8006242:	4603      	mov	r3, r0
 8006244:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006246:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006248:	fa93 f3a3 	rbit	r3, r3
 800624c:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 800624e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006250:	fab3 f383 	clz	r3, r3
 8006254:	b2db      	uxtb	r3, r3
 8006256:	461a      	mov	r2, r3
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006260:	2b00      	cmp	r3, #0
 8006262:	d105      	bne.n	8006270 <HAL_ADC_ConfigChannel+0x2b4>
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	0e9b      	lsrs	r3, r3, #26
 800626a:	f003 031f 	and.w	r3, r3, #31
 800626e:	e00a      	b.n	8006286 <HAL_ADC_ConfigChannel+0x2ca>
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006276:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006278:	fa93 f3a3 	rbit	r3, r3
 800627c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800627e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006280:	fab3 f383 	clz	r3, r3
 8006284:	b2db      	uxtb	r3, r3
 8006286:	429a      	cmp	r2, r3
 8006288:	d106      	bne.n	8006298 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2200      	movs	r2, #0
 8006290:	2102      	movs	r1, #2
 8006292:	4618      	mov	r0, r3
 8006294:	f7ff fb7a 	bl	800598c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2103      	movs	r1, #3
 800629e:	4618      	mov	r0, r3
 80062a0:	f7ff fb60 	bl	8005964 <LL_ADC_GetOffsetChannel>
 80062a4:	4603      	mov	r3, r0
 80062a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d10a      	bne.n	80062c4 <HAL_ADC_ConfigChannel+0x308>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2103      	movs	r1, #3
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7ff fb55 	bl	8005964 <LL_ADC_GetOffsetChannel>
 80062ba:	4603      	mov	r3, r0
 80062bc:	0e9b      	lsrs	r3, r3, #26
 80062be:	f003 021f 	and.w	r2, r3, #31
 80062c2:	e010      	b.n	80062e6 <HAL_ADC_ConfigChannel+0x32a>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2103      	movs	r1, #3
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7ff fb4a 	bl	8005964 <LL_ADC_GetOffsetChannel>
 80062d0:	4603      	mov	r3, r0
 80062d2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062d6:	fa93 f3a3 	rbit	r3, r3
 80062da:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80062dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062de:	fab3 f383 	clz	r3, r3
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	461a      	mov	r2, r3
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d105      	bne.n	80062fe <HAL_ADC_ConfigChannel+0x342>
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	0e9b      	lsrs	r3, r3, #26
 80062f8:	f003 031f 	and.w	r3, r3, #31
 80062fc:	e00a      	b.n	8006314 <HAL_ADC_ConfigChannel+0x358>
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006304:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006306:	fa93 f3a3 	rbit	r3, r3
 800630a:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 800630c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800630e:	fab3 f383 	clz	r3, r3
 8006312:	b2db      	uxtb	r3, r3
 8006314:	429a      	cmp	r2, r3
 8006316:	d106      	bne.n	8006326 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2200      	movs	r2, #0
 800631e:	2103      	movs	r1, #3
 8006320:	4618      	mov	r0, r3
 8006322:	f7ff fb33 	bl	800598c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4618      	mov	r0, r3
 800632c:	f7ff fc4c 	bl	8005bc8 <LL_ADC_IsEnabled>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	f040 810c 	bne.w	8006550 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6818      	ldr	r0, [r3, #0]
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	6819      	ldr	r1, [r3, #0]
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	461a      	mov	r2, r3
 8006346:	f7ff fbcd 	bl	8005ae4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	4aaf      	ldr	r2, [pc, #700]	; (800660c <HAL_ADC_ConfigChannel+0x650>)
 8006350:	4293      	cmp	r3, r2
 8006352:	f040 80fd 	bne.w	8006550 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006362:	2b00      	cmp	r3, #0
 8006364:	d10b      	bne.n	800637e <HAL_ADC_ConfigChannel+0x3c2>
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	0e9b      	lsrs	r3, r3, #26
 800636c:	3301      	adds	r3, #1
 800636e:	f003 031f 	and.w	r3, r3, #31
 8006372:	2b09      	cmp	r3, #9
 8006374:	bf94      	ite	ls
 8006376:	2301      	movls	r3, #1
 8006378:	2300      	movhi	r3, #0
 800637a:	b2db      	uxtb	r3, r3
 800637c:	e012      	b.n	80063a4 <HAL_ADC_ConfigChannel+0x3e8>
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006386:	fa93 f3a3 	rbit	r3, r3
 800638a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800638c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800638e:	fab3 f383 	clz	r3, r3
 8006392:	b2db      	uxtb	r3, r3
 8006394:	3301      	adds	r3, #1
 8006396:	f003 031f 	and.w	r3, r3, #31
 800639a:	2b09      	cmp	r3, #9
 800639c:	bf94      	ite	ls
 800639e:	2301      	movls	r3, #1
 80063a0:	2300      	movhi	r3, #0
 80063a2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d064      	beq.n	8006472 <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d107      	bne.n	80063c4 <HAL_ADC_ConfigChannel+0x408>
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	0e9b      	lsrs	r3, r3, #26
 80063ba:	3301      	adds	r3, #1
 80063bc:	069b      	lsls	r3, r3, #26
 80063be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80063c2:	e00e      	b.n	80063e2 <HAL_ADC_ConfigChannel+0x426>
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063cc:	fa93 f3a3 	rbit	r3, r3
 80063d0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80063d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063d4:	fab3 f383 	clz	r3, r3
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	3301      	adds	r3, #1
 80063dc:	069b      	lsls	r3, r3, #26
 80063de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d109      	bne.n	8006402 <HAL_ADC_ConfigChannel+0x446>
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	0e9b      	lsrs	r3, r3, #26
 80063f4:	3301      	adds	r3, #1
 80063f6:	f003 031f 	and.w	r3, r3, #31
 80063fa:	2101      	movs	r1, #1
 80063fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006400:	e010      	b.n	8006424 <HAL_ADC_ConfigChannel+0x468>
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640a:	fa93 f3a3 	rbit	r3, r3
 800640e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006412:	fab3 f383 	clz	r3, r3
 8006416:	b2db      	uxtb	r3, r3
 8006418:	3301      	adds	r3, #1
 800641a:	f003 031f 	and.w	r3, r3, #31
 800641e:	2101      	movs	r1, #1
 8006420:	fa01 f303 	lsl.w	r3, r1, r3
 8006424:	ea42 0103 	orr.w	r1, r2, r3
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006430:	2b00      	cmp	r3, #0
 8006432:	d10a      	bne.n	800644a <HAL_ADC_ConfigChannel+0x48e>
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	0e9b      	lsrs	r3, r3, #26
 800643a:	3301      	adds	r3, #1
 800643c:	f003 021f 	and.w	r2, r3, #31
 8006440:	4613      	mov	r3, r2
 8006442:	005b      	lsls	r3, r3, #1
 8006444:	4413      	add	r3, r2
 8006446:	051b      	lsls	r3, r3, #20
 8006448:	e011      	b.n	800646e <HAL_ADC_ConfigChannel+0x4b2>
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006452:	fa93 f3a3 	rbit	r3, r3
 8006456:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8006458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645a:	fab3 f383 	clz	r3, r3
 800645e:	b2db      	uxtb	r3, r3
 8006460:	3301      	adds	r3, #1
 8006462:	f003 021f 	and.w	r2, r3, #31
 8006466:	4613      	mov	r3, r2
 8006468:	005b      	lsls	r3, r3, #1
 800646a:	4413      	add	r3, r2
 800646c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800646e:	430b      	orrs	r3, r1
 8006470:	e069      	b.n	8006546 <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800647a:	2b00      	cmp	r3, #0
 800647c:	d107      	bne.n	800648e <HAL_ADC_ConfigChannel+0x4d2>
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	0e9b      	lsrs	r3, r3, #26
 8006484:	3301      	adds	r3, #1
 8006486:	069b      	lsls	r3, r3, #26
 8006488:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800648c:	e00e      	b.n	80064ac <HAL_ADC_ConfigChannel+0x4f0>
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006494:	6a3b      	ldr	r3, [r7, #32]
 8006496:	fa93 f3a3 	rbit	r3, r3
 800649a:	61fb      	str	r3, [r7, #28]
  return result;
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	fab3 f383 	clz	r3, r3
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	3301      	adds	r3, #1
 80064a6:	069b      	lsls	r3, r3, #26
 80064a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d109      	bne.n	80064cc <HAL_ADC_ConfigChannel+0x510>
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	0e9b      	lsrs	r3, r3, #26
 80064be:	3301      	adds	r3, #1
 80064c0:	f003 031f 	and.w	r3, r3, #31
 80064c4:	2101      	movs	r1, #1
 80064c6:	fa01 f303 	lsl.w	r3, r1, r3
 80064ca:	e010      	b.n	80064ee <HAL_ADC_ConfigChannel+0x532>
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	fa93 f3a3 	rbit	r3, r3
 80064d8:	617b      	str	r3, [r7, #20]
  return result;
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	fab3 f383 	clz	r3, r3
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	3301      	adds	r3, #1
 80064e4:	f003 031f 	and.w	r3, r3, #31
 80064e8:	2101      	movs	r1, #1
 80064ea:	fa01 f303 	lsl.w	r3, r1, r3
 80064ee:	ea42 0103 	orr.w	r1, r2, r3
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d10d      	bne.n	800651a <HAL_ADC_ConfigChannel+0x55e>
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	0e9b      	lsrs	r3, r3, #26
 8006504:	3301      	adds	r3, #1
 8006506:	f003 021f 	and.w	r2, r3, #31
 800650a:	4613      	mov	r3, r2
 800650c:	005b      	lsls	r3, r3, #1
 800650e:	4413      	add	r3, r2
 8006510:	3b1e      	subs	r3, #30
 8006512:	051b      	lsls	r3, r3, #20
 8006514:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006518:	e014      	b.n	8006544 <HAL_ADC_ConfigChannel+0x588>
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	fa93 f3a3 	rbit	r3, r3
 8006526:	60fb      	str	r3, [r7, #12]
  return result;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	fab3 f383 	clz	r3, r3
 800652e:	b2db      	uxtb	r3, r3
 8006530:	3301      	adds	r3, #1
 8006532:	f003 021f 	and.w	r2, r3, #31
 8006536:	4613      	mov	r3, r2
 8006538:	005b      	lsls	r3, r3, #1
 800653a:	4413      	add	r3, r2
 800653c:	3b1e      	subs	r3, #30
 800653e:	051b      	lsls	r3, r3, #20
 8006540:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006544:	430b      	orrs	r3, r1
 8006546:	683a      	ldr	r2, [r7, #0]
 8006548:	6892      	ldr	r2, [r2, #8]
 800654a:	4619      	mov	r1, r3
 800654c:	f7ff faa2 	bl	8005a94 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	4b2e      	ldr	r3, [pc, #184]	; (8006610 <HAL_ADC_ConfigChannel+0x654>)
 8006556:	4013      	ands	r3, r2
 8006558:	2b00      	cmp	r3, #0
 800655a:	f000 80c9 	beq.w	80066f0 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006566:	d004      	beq.n	8006572 <HAL_ADC_ConfigChannel+0x5b6>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a29      	ldr	r2, [pc, #164]	; (8006614 <HAL_ADC_ConfigChannel+0x658>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d101      	bne.n	8006576 <HAL_ADC_ConfigChannel+0x5ba>
 8006572:	4b29      	ldr	r3, [pc, #164]	; (8006618 <HAL_ADC_ConfigChannel+0x65c>)
 8006574:	e000      	b.n	8006578 <HAL_ADC_ConfigChannel+0x5bc>
 8006576:	4b29      	ldr	r3, [pc, #164]	; (800661c <HAL_ADC_ConfigChannel+0x660>)
 8006578:	4618      	mov	r0, r3
 800657a:	f7ff f9c3 	bl	8005904 <LL_ADC_GetCommonPathInternalCh>
 800657e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a26      	ldr	r2, [pc, #152]	; (8006620 <HAL_ADC_ConfigChannel+0x664>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d004      	beq.n	8006596 <HAL_ADC_ConfigChannel+0x5da>
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a24      	ldr	r2, [pc, #144]	; (8006624 <HAL_ADC_ConfigChannel+0x668>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d14e      	bne.n	8006634 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006596:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800659a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d148      	bne.n	8006634 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065aa:	d005      	beq.n	80065b8 <HAL_ADC_ConfigChannel+0x5fc>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a1d      	ldr	r2, [pc, #116]	; (8006628 <HAL_ADC_ConfigChannel+0x66c>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	f040 8099 	bne.w	80066ea <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065c0:	d004      	beq.n	80065cc <HAL_ADC_ConfigChannel+0x610>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a13      	ldr	r2, [pc, #76]	; (8006614 <HAL_ADC_ConfigChannel+0x658>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d101      	bne.n	80065d0 <HAL_ADC_ConfigChannel+0x614>
 80065cc:	4a12      	ldr	r2, [pc, #72]	; (8006618 <HAL_ADC_ConfigChannel+0x65c>)
 80065ce:	e000      	b.n	80065d2 <HAL_ADC_ConfigChannel+0x616>
 80065d0:	4a12      	ldr	r2, [pc, #72]	; (800661c <HAL_ADC_ConfigChannel+0x660>)
 80065d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80065d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80065da:	4619      	mov	r1, r3
 80065dc:	4610      	mov	r0, r2
 80065de:	f7ff f97e 	bl	80058de <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80065e2:	4b12      	ldr	r3, [pc, #72]	; (800662c <HAL_ADC_ConfigChannel+0x670>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	099b      	lsrs	r3, r3, #6
 80065e8:	4a11      	ldr	r2, [pc, #68]	; (8006630 <HAL_ADC_ConfigChannel+0x674>)
 80065ea:	fba2 2303 	umull	r2, r3, r2, r3
 80065ee:	099a      	lsrs	r2, r3, #6
 80065f0:	4613      	mov	r3, r2
 80065f2:	005b      	lsls	r3, r3, #1
 80065f4:	4413      	add	r3, r2
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80065fa:	e002      	b.n	8006602 <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	3b01      	subs	r3, #1
 8006600:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d1f9      	bne.n	80065fc <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006608:	e06f      	b.n	80066ea <HAL_ADC_ConfigChannel+0x72e>
 800660a:	bf00      	nop
 800660c:	407f0000 	.word	0x407f0000
 8006610:	80080000 	.word	0x80080000
 8006614:	50000100 	.word	0x50000100
 8006618:	50000300 	.word	0x50000300
 800661c:	50000700 	.word	0x50000700
 8006620:	c3210000 	.word	0xc3210000
 8006624:	90c00010 	.word	0x90c00010
 8006628:	50000600 	.word	0x50000600
 800662c:	200001d4 	.word	0x200001d4
 8006630:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a32      	ldr	r2, [pc, #200]	; (8006704 <HAL_ADC_ConfigChannel+0x748>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d125      	bne.n	800668a <HAL_ADC_ConfigChannel+0x6ce>
 800663e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006642:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d11f      	bne.n	800668a <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a2e      	ldr	r2, [pc, #184]	; (8006708 <HAL_ADC_ConfigChannel+0x74c>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d104      	bne.n	800665e <HAL_ADC_ConfigChannel+0x6a2>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a2c      	ldr	r2, [pc, #176]	; (800670c <HAL_ADC_ConfigChannel+0x750>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d047      	beq.n	80066ee <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006666:	d004      	beq.n	8006672 <HAL_ADC_ConfigChannel+0x6b6>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a26      	ldr	r2, [pc, #152]	; (8006708 <HAL_ADC_ConfigChannel+0x74c>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d101      	bne.n	8006676 <HAL_ADC_ConfigChannel+0x6ba>
 8006672:	4a27      	ldr	r2, [pc, #156]	; (8006710 <HAL_ADC_ConfigChannel+0x754>)
 8006674:	e000      	b.n	8006678 <HAL_ADC_ConfigChannel+0x6bc>
 8006676:	4a27      	ldr	r2, [pc, #156]	; (8006714 <HAL_ADC_ConfigChannel+0x758>)
 8006678:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800667c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006680:	4619      	mov	r1, r3
 8006682:	4610      	mov	r0, r2
 8006684:	f7ff f92b 	bl	80058de <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006688:	e031      	b.n	80066ee <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a22      	ldr	r2, [pc, #136]	; (8006718 <HAL_ADC_ConfigChannel+0x75c>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d12d      	bne.n	80066f0 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006694:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006698:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d127      	bne.n	80066f0 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a18      	ldr	r2, [pc, #96]	; (8006708 <HAL_ADC_ConfigChannel+0x74c>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d022      	beq.n	80066f0 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066b2:	d004      	beq.n	80066be <HAL_ADC_ConfigChannel+0x702>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a13      	ldr	r2, [pc, #76]	; (8006708 <HAL_ADC_ConfigChannel+0x74c>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d101      	bne.n	80066c2 <HAL_ADC_ConfigChannel+0x706>
 80066be:	4a14      	ldr	r2, [pc, #80]	; (8006710 <HAL_ADC_ConfigChannel+0x754>)
 80066c0:	e000      	b.n	80066c4 <HAL_ADC_ConfigChannel+0x708>
 80066c2:	4a14      	ldr	r2, [pc, #80]	; (8006714 <HAL_ADC_ConfigChannel+0x758>)
 80066c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80066c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80066cc:	4619      	mov	r1, r3
 80066ce:	4610      	mov	r0, r2
 80066d0:	f7ff f905 	bl	80058de <LL_ADC_SetCommonPathInternalCh>
 80066d4:	e00c      	b.n	80066f0 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066da:	f043 0220 	orr.w	r2, r3, #32
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80066e8:	e002      	b.n	80066f0 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80066ea:	bf00      	nop
 80066ec:	e000      	b.n	80066f0 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80066ee:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80066f8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3798      	adds	r7, #152	; 0x98
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	c7520000 	.word	0xc7520000
 8006708:	50000100 	.word	0x50000100
 800670c:	50000500 	.word	0x50000500
 8006710:	50000300 	.word	0x50000300
 8006714:	50000700 	.word	0x50000700
 8006718:	cb840000 	.word	0xcb840000

0800671c <LL_ADC_IsEnabled>:
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	f003 0301 	and.w	r3, r3, #1
 800672c:	2b01      	cmp	r3, #1
 800672e:	d101      	bne.n	8006734 <LL_ADC_IsEnabled+0x18>
 8006730:	2301      	movs	r3, #1
 8006732:	e000      	b.n	8006736 <LL_ADC_IsEnabled+0x1a>
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	370c      	adds	r7, #12
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr

08006742 <LL_ADC_REG_IsConversionOngoing>:
{
 8006742:	b480      	push	{r7}
 8006744:	b083      	sub	sp, #12
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	f003 0304 	and.w	r3, r3, #4
 8006752:	2b04      	cmp	r3, #4
 8006754:	d101      	bne.n	800675a <LL_ADC_REG_IsConversionOngoing+0x18>
 8006756:	2301      	movs	r3, #1
 8006758:	e000      	b.n	800675c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006768:	b590      	push	{r4, r7, lr}
 800676a:	b0a1      	sub	sp, #132	; 0x84
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006772:	2300      	movs	r3, #0
 8006774:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800677e:	2b01      	cmp	r3, #1
 8006780:	d101      	bne.n	8006786 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006782:	2302      	movs	r3, #2
 8006784:	e0e3      	b.n	800694e <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006796:	d102      	bne.n	800679e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8006798:	4b6f      	ldr	r3, [pc, #444]	; (8006958 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800679a:	60bb      	str	r3, [r7, #8]
 800679c:	e009      	b.n	80067b2 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a6e      	ldr	r2, [pc, #440]	; (800695c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d102      	bne.n	80067ae <HAL_ADCEx_MultiModeConfigChannel+0x46>
 80067a8:	4b6d      	ldr	r3, [pc, #436]	; (8006960 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80067aa:	60bb      	str	r3, [r7, #8]
 80067ac:	e001      	b.n	80067b2 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80067ae:	2300      	movs	r3, #0
 80067b0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d10b      	bne.n	80067d0 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067bc:	f043 0220 	orr.w	r2, r3, #32
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e0be      	b.n	800694e <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7ff ffb5 	bl	8006742 <LL_ADC_REG_IsConversionOngoing>
 80067d8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4618      	mov	r0, r3
 80067e0:	f7ff ffaf 	bl	8006742 <LL_ADC_REG_IsConversionOngoing>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	f040 80a0 	bne.w	800692c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80067ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	f040 809c 	bne.w	800692c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067fc:	d004      	beq.n	8006808 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a55      	ldr	r2, [pc, #340]	; (8006958 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d101      	bne.n	800680c <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8006808:	4b56      	ldr	r3, [pc, #344]	; (8006964 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800680a:	e000      	b.n	800680e <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 800680c:	4b56      	ldr	r3, [pc, #344]	; (8006968 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800680e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d04b      	beq.n	80068b0 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006818:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	6859      	ldr	r1, [r3, #4]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800682a:	035b      	lsls	r3, r3, #13
 800682c:	430b      	orrs	r3, r1
 800682e:	431a      	orrs	r2, r3
 8006830:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006832:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800683c:	d004      	beq.n	8006848 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a45      	ldr	r2, [pc, #276]	; (8006958 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d10f      	bne.n	8006868 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8006848:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800684c:	f7ff ff66 	bl	800671c <LL_ADC_IsEnabled>
 8006850:	4604      	mov	r4, r0
 8006852:	4841      	ldr	r0, [pc, #260]	; (8006958 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8006854:	f7ff ff62 	bl	800671c <LL_ADC_IsEnabled>
 8006858:	4603      	mov	r3, r0
 800685a:	4323      	orrs	r3, r4
 800685c:	2b00      	cmp	r3, #0
 800685e:	bf0c      	ite	eq
 8006860:	2301      	moveq	r3, #1
 8006862:	2300      	movne	r3, #0
 8006864:	b2db      	uxtb	r3, r3
 8006866:	e012      	b.n	800688e <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8006868:	483c      	ldr	r0, [pc, #240]	; (800695c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800686a:	f7ff ff57 	bl	800671c <LL_ADC_IsEnabled>
 800686e:	4604      	mov	r4, r0
 8006870:	483b      	ldr	r0, [pc, #236]	; (8006960 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006872:	f7ff ff53 	bl	800671c <LL_ADC_IsEnabled>
 8006876:	4603      	mov	r3, r0
 8006878:	431c      	orrs	r4, r3
 800687a:	483c      	ldr	r0, [pc, #240]	; (800696c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800687c:	f7ff ff4e 	bl	800671c <LL_ADC_IsEnabled>
 8006880:	4603      	mov	r3, r0
 8006882:	4323      	orrs	r3, r4
 8006884:	2b00      	cmp	r3, #0
 8006886:	bf0c      	ite	eq
 8006888:	2301      	moveq	r3, #1
 800688a:	2300      	movne	r3, #0
 800688c:	b2db      	uxtb	r3, r3
 800688e:	2b00      	cmp	r3, #0
 8006890:	d056      	beq.n	8006940 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006892:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800689a:	f023 030f 	bic.w	r3, r3, #15
 800689e:	683a      	ldr	r2, [r7, #0]
 80068a0:	6811      	ldr	r1, [r2, #0]
 80068a2:	683a      	ldr	r2, [r7, #0]
 80068a4:	6892      	ldr	r2, [r2, #8]
 80068a6:	430a      	orrs	r2, r1
 80068a8:	431a      	orrs	r2, r3
 80068aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068ac:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80068ae:	e047      	b.n	8006940 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80068b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80068b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068ba:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80068c4:	d004      	beq.n	80068d0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a23      	ldr	r2, [pc, #140]	; (8006958 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d10f      	bne.n	80068f0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80068d0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80068d4:	f7ff ff22 	bl	800671c <LL_ADC_IsEnabled>
 80068d8:	4604      	mov	r4, r0
 80068da:	481f      	ldr	r0, [pc, #124]	; (8006958 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80068dc:	f7ff ff1e 	bl	800671c <LL_ADC_IsEnabled>
 80068e0:	4603      	mov	r3, r0
 80068e2:	4323      	orrs	r3, r4
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	bf0c      	ite	eq
 80068e8:	2301      	moveq	r3, #1
 80068ea:	2300      	movne	r3, #0
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	e012      	b.n	8006916 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 80068f0:	481a      	ldr	r0, [pc, #104]	; (800695c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80068f2:	f7ff ff13 	bl	800671c <LL_ADC_IsEnabled>
 80068f6:	4604      	mov	r4, r0
 80068f8:	4819      	ldr	r0, [pc, #100]	; (8006960 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80068fa:	f7ff ff0f 	bl	800671c <LL_ADC_IsEnabled>
 80068fe:	4603      	mov	r3, r0
 8006900:	431c      	orrs	r4, r3
 8006902:	481a      	ldr	r0, [pc, #104]	; (800696c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8006904:	f7ff ff0a 	bl	800671c <LL_ADC_IsEnabled>
 8006908:	4603      	mov	r3, r0
 800690a:	4323      	orrs	r3, r4
 800690c:	2b00      	cmp	r3, #0
 800690e:	bf0c      	ite	eq
 8006910:	2301      	moveq	r3, #1
 8006912:	2300      	movne	r3, #0
 8006914:	b2db      	uxtb	r3, r3
 8006916:	2b00      	cmp	r3, #0
 8006918:	d012      	beq.n	8006940 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800691a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006922:	f023 030f 	bic.w	r3, r3, #15
 8006926:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006928:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800692a:	e009      	b.n	8006940 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006930:	f043 0220 	orr.w	r2, r3, #32
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800693e:	e000      	b.n	8006942 <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006940:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800694a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800694e:	4618      	mov	r0, r3
 8006950:	3784      	adds	r7, #132	; 0x84
 8006952:	46bd      	mov	sp, r7
 8006954:	bd90      	pop	{r4, r7, pc}
 8006956:	bf00      	nop
 8006958:	50000100 	.word	0x50000100
 800695c:	50000400 	.word	0x50000400
 8006960:	50000500 	.word	0x50000500
 8006964:	50000300 	.word	0x50000300
 8006968:	50000700 	.word	0x50000700
 800696c:	50000600 	.word	0x50000600

08006970 <LL_EXTI_EnableIT_0_31>:
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8006978:	4b05      	ldr	r3, [pc, #20]	; (8006990 <LL_EXTI_EnableIT_0_31+0x20>)
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	4904      	ldr	r1, [pc, #16]	; (8006990 <LL_EXTI_EnableIT_0_31+0x20>)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4313      	orrs	r3, r2
 8006982:	600b      	str	r3, [r1, #0]
}
 8006984:	bf00      	nop
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	40010400 	.word	0x40010400

08006994 <LL_EXTI_EnableIT_32_63>:
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800699c:	4b05      	ldr	r3, [pc, #20]	; (80069b4 <LL_EXTI_EnableIT_32_63+0x20>)
 800699e:	6a1a      	ldr	r2, [r3, #32]
 80069a0:	4904      	ldr	r1, [pc, #16]	; (80069b4 <LL_EXTI_EnableIT_32_63+0x20>)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	620b      	str	r3, [r1, #32]
}
 80069a8:	bf00      	nop
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr
 80069b4:	40010400 	.word	0x40010400

080069b8 <LL_EXTI_DisableIT_0_31>:
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80069c0:	4b06      	ldr	r3, [pc, #24]	; (80069dc <LL_EXTI_DisableIT_0_31+0x24>)
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	43db      	mvns	r3, r3
 80069c8:	4904      	ldr	r1, [pc, #16]	; (80069dc <LL_EXTI_DisableIT_0_31+0x24>)
 80069ca:	4013      	ands	r3, r2
 80069cc:	600b      	str	r3, [r1, #0]
}
 80069ce:	bf00      	nop
 80069d0:	370c      	adds	r7, #12
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	40010400 	.word	0x40010400

080069e0 <LL_EXTI_DisableIT_32_63>:
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80069e8:	4b06      	ldr	r3, [pc, #24]	; (8006a04 <LL_EXTI_DisableIT_32_63+0x24>)
 80069ea:	6a1a      	ldr	r2, [r3, #32]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	43db      	mvns	r3, r3
 80069f0:	4904      	ldr	r1, [pc, #16]	; (8006a04 <LL_EXTI_DisableIT_32_63+0x24>)
 80069f2:	4013      	ands	r3, r2
 80069f4:	620b      	str	r3, [r1, #32]
}
 80069f6:	bf00      	nop
 80069f8:	370c      	adds	r7, #12
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	40010400 	.word	0x40010400

08006a08 <LL_EXTI_EnableEvent_0_31>:
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8006a10:	4b05      	ldr	r3, [pc, #20]	; (8006a28 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006a12:	685a      	ldr	r2, [r3, #4]
 8006a14:	4904      	ldr	r1, [pc, #16]	; (8006a28 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	604b      	str	r3, [r1, #4]
}
 8006a1c:	bf00      	nop
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr
 8006a28:	40010400 	.word	0x40010400

08006a2c <LL_EXTI_EnableEvent_32_63>:
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8006a34:	4b05      	ldr	r3, [pc, #20]	; (8006a4c <LL_EXTI_EnableEvent_32_63+0x20>)
 8006a36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a38:	4904      	ldr	r1, [pc, #16]	; (8006a4c <LL_EXTI_EnableEvent_32_63+0x20>)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr
 8006a4c:	40010400 	.word	0x40010400

08006a50 <LL_EXTI_DisableEvent_0_31>:
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8006a58:	4b06      	ldr	r3, [pc, #24]	; (8006a74 <LL_EXTI_DisableEvent_0_31+0x24>)
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	43db      	mvns	r3, r3
 8006a60:	4904      	ldr	r1, [pc, #16]	; (8006a74 <LL_EXTI_DisableEvent_0_31+0x24>)
 8006a62:	4013      	ands	r3, r2
 8006a64:	604b      	str	r3, [r1, #4]
}
 8006a66:	bf00      	nop
 8006a68:	370c      	adds	r7, #12
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	40010400 	.word	0x40010400

08006a78 <LL_EXTI_DisableEvent_32_63>:
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8006a80:	4b06      	ldr	r3, [pc, #24]	; (8006a9c <LL_EXTI_DisableEvent_32_63+0x24>)
 8006a82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	43db      	mvns	r3, r3
 8006a88:	4904      	ldr	r1, [pc, #16]	; (8006a9c <LL_EXTI_DisableEvent_32_63+0x24>)
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006a8e:	bf00      	nop
 8006a90:	370c      	adds	r7, #12
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	40010400 	.word	0x40010400

08006aa0 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8006aa8:	4b05      	ldr	r3, [pc, #20]	; (8006ac0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006aaa:	689a      	ldr	r2, [r3, #8]
 8006aac:	4904      	ldr	r1, [pc, #16]	; (8006ac0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	608b      	str	r3, [r1, #8]
}
 8006ab4:	bf00      	nop
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr
 8006ac0:	40010400 	.word	0x40010400

08006ac4 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8006acc:	4b05      	ldr	r3, [pc, #20]	; (8006ae4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8006ace:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ad0:	4904      	ldr	r1, [pc, #16]	; (8006ae4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	628b      	str	r3, [r1, #40]	; 0x28
}
 8006ad8:	bf00      	nop
 8006ada:	370c      	adds	r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr
 8006ae4:	40010400 	.word	0x40010400

08006ae8 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8006af0:	4b06      	ldr	r3, [pc, #24]	; (8006b0c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006af2:	689a      	ldr	r2, [r3, #8]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	43db      	mvns	r3, r3
 8006af8:	4904      	ldr	r1, [pc, #16]	; (8006b0c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006afa:	4013      	ands	r3, r2
 8006afc:	608b      	str	r3, [r1, #8]
}
 8006afe:	bf00      	nop
 8006b00:	370c      	adds	r7, #12
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	40010400 	.word	0x40010400

08006b10 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8006b18:	4b06      	ldr	r3, [pc, #24]	; (8006b34 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8006b1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	43db      	mvns	r3, r3
 8006b20:	4904      	ldr	r1, [pc, #16]	; (8006b34 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8006b22:	4013      	ands	r3, r2
 8006b24:	628b      	str	r3, [r1, #40]	; 0x28
}
 8006b26:	bf00      	nop
 8006b28:	370c      	adds	r7, #12
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	40010400 	.word	0x40010400

08006b38 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8006b40:	4b05      	ldr	r3, [pc, #20]	; (8006b58 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006b42:	68da      	ldr	r2, [r3, #12]
 8006b44:	4904      	ldr	r1, [pc, #16]	; (8006b58 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	60cb      	str	r3, [r1, #12]
}
 8006b4c:	bf00      	nop
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr
 8006b58:	40010400 	.word	0x40010400

08006b5c <LL_EXTI_EnableFallingTrig_32_63>:
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8006b64:	4b05      	ldr	r3, [pc, #20]	; (8006b7c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8006b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b68:	4904      	ldr	r1, [pc, #16]	; (8006b7c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8006b70:	bf00      	nop
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr
 8006b7c:	40010400 	.word	0x40010400

08006b80 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8006b88:	4b06      	ldr	r3, [pc, #24]	; (8006ba4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006b8a:	68da      	ldr	r2, [r3, #12]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	43db      	mvns	r3, r3
 8006b90:	4904      	ldr	r1, [pc, #16]	; (8006ba4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006b92:	4013      	ands	r3, r2
 8006b94:	60cb      	str	r3, [r1, #12]
}
 8006b96:	bf00      	nop
 8006b98:	370c      	adds	r7, #12
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop
 8006ba4:	40010400 	.word	0x40010400

08006ba8 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8006bb0:	4b06      	ldr	r3, [pc, #24]	; (8006bcc <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8006bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	43db      	mvns	r3, r3
 8006bb8:	4904      	ldr	r1, [pc, #16]	; (8006bcc <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8006bba:	4013      	ands	r3, r2
 8006bbc:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8006bbe:	bf00      	nop
 8006bc0:	370c      	adds	r7, #12
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	40010400 	.word	0x40010400

08006bd0 <LL_EXTI_ClearFlag_0_31>:
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8006bd8:	4a04      	ldr	r2, [pc, #16]	; (8006bec <LL_EXTI_ClearFlag_0_31+0x1c>)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6153      	str	r3, [r2, #20]
}
 8006bde:	bf00      	nop
 8006be0:	370c      	adds	r7, #12
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	40010400 	.word	0x40010400

08006bf0 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8006bf8:	4a04      	ldr	r2, [pc, #16]	; (8006c0c <LL_EXTI_ClearFlag_32_63+0x1c>)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6353      	str	r3, [r2, #52]	; 0x34
}
 8006bfe:	bf00      	nop
 8006c00:	370c      	adds	r7, #12
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	40010400 	.word	0x40010400

08006c10 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b088      	sub	sp, #32
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d102      	bne.n	8006c2c <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	77fb      	strb	r3, [r7, #31]
 8006c2a:	e180      	b.n	8006f2e <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c3a:	d102      	bne.n	8006c42 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	77fb      	strb	r3, [r7, #31]
 8006c40:	e175      	b.n	8006f2e <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	7f5b      	ldrb	r3, [r3, #29]
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d108      	bne.n	8006c5e <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f7fd f8c5 	bl	8003de8 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c68:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	695b      	ldr	r3, [r3, #20]
 8006c78:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8006c84:	4313      	orrs	r3, r2
 8006c86:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	4b98      	ldr	r3, [pc, #608]	; (8006ef0 <HAL_COMP_Init+0x2e0>)
 8006c90:	4013      	ands	r3, r2
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	6812      	ldr	r2, [r2, #0]
 8006c96:	6979      	ldr	r1, [r7, #20]
 8006c98:	430b      	orrs	r3, r1
 8006c9a:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d015      	beq.n	8006cd6 <HAL_COMP_Init+0xc6>
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d112      	bne.n	8006cd6 <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8006cb0:	4b90      	ldr	r3, [pc, #576]	; (8006ef4 <HAL_COMP_Init+0x2e4>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	099b      	lsrs	r3, r3, #6
 8006cb6:	4a90      	ldr	r2, [pc, #576]	; (8006ef8 <HAL_COMP_Init+0x2e8>)
 8006cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cbc:	099a      	lsrs	r2, r3, #6
 8006cbe:	4613      	mov	r3, r2
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	4413      	add	r3, r2
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8006cc8:	e002      	b.n	8006cd0 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1f9      	bne.n	8006cca <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a88      	ldr	r2, [pc, #544]	; (8006efc <HAL_COMP_Init+0x2ec>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d028      	beq.n	8006d32 <HAL_COMP_Init+0x122>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a86      	ldr	r2, [pc, #536]	; (8006f00 <HAL_COMP_Init+0x2f0>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d020      	beq.n	8006d2c <HAL_COMP_Init+0x11c>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a85      	ldr	r2, [pc, #532]	; (8006f04 <HAL_COMP_Init+0x2f4>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d018      	beq.n	8006d26 <HAL_COMP_Init+0x116>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a83      	ldr	r2, [pc, #524]	; (8006f08 <HAL_COMP_Init+0x2f8>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d010      	beq.n	8006d20 <HAL_COMP_Init+0x110>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a82      	ldr	r2, [pc, #520]	; (8006f0c <HAL_COMP_Init+0x2fc>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d008      	beq.n	8006d1a <HAL_COMP_Init+0x10a>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a80      	ldr	r2, [pc, #512]	; (8006f10 <HAL_COMP_Init+0x300>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d101      	bne.n	8006d16 <HAL_COMP_Init+0x106>
 8006d12:	2301      	movs	r3, #1
 8006d14:	e00f      	b.n	8006d36 <HAL_COMP_Init+0x126>
 8006d16:	2302      	movs	r3, #2
 8006d18:	e00d      	b.n	8006d36 <HAL_COMP_Init+0x126>
 8006d1a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006d1e:	e00a      	b.n	8006d36 <HAL_COMP_Init+0x126>
 8006d20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006d24:	e007      	b.n	8006d36 <HAL_COMP_Init+0x126>
 8006d26:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8006d2a:	e004      	b.n	8006d36 <HAL_COMP_Init+0x126>
 8006d2c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006d30:	e001      	b.n	8006d36 <HAL_COMP_Init+0x126>
 8006d32:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006d36:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	699b      	ldr	r3, [r3, #24]
 8006d3c:	f003 0303 	and.w	r3, r3, #3
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f000 80b6 	beq.w	8006eb2 <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	699b      	ldr	r3, [r3, #24]
 8006d4a:	f003 0310 	and.w	r3, r3, #16
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d011      	beq.n	8006d76 <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a6e      	ldr	r2, [pc, #440]	; (8006f10 <HAL_COMP_Init+0x300>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d004      	beq.n	8006d66 <HAL_COMP_Init+0x156>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a6c      	ldr	r2, [pc, #432]	; (8006f14 <HAL_COMP_Init+0x304>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d103      	bne.n	8006d6e <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8006d66:	6938      	ldr	r0, [r7, #16]
 8006d68:	f7ff feac 	bl	8006ac4 <LL_EXTI_EnableRisingTrig_32_63>
 8006d6c:	e014      	b.n	8006d98 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8006d6e:	6938      	ldr	r0, [r7, #16]
 8006d70:	f7ff fe96 	bl	8006aa0 <LL_EXTI_EnableRisingTrig_0_31>
 8006d74:	e010      	b.n	8006d98 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a65      	ldr	r2, [pc, #404]	; (8006f10 <HAL_COMP_Init+0x300>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d004      	beq.n	8006d8a <HAL_COMP_Init+0x17a>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a63      	ldr	r2, [pc, #396]	; (8006f14 <HAL_COMP_Init+0x304>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d103      	bne.n	8006d92 <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8006d8a:	6938      	ldr	r0, [r7, #16]
 8006d8c:	f7ff fec0 	bl	8006b10 <LL_EXTI_DisableRisingTrig_32_63>
 8006d90:	e002      	b.n	8006d98 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8006d92:	6938      	ldr	r0, [r7, #16]
 8006d94:	f7ff fea8 	bl	8006ae8 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	699b      	ldr	r3, [r3, #24]
 8006d9c:	f003 0320 	and.w	r3, r3, #32
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d011      	beq.n	8006dc8 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a59      	ldr	r2, [pc, #356]	; (8006f10 <HAL_COMP_Init+0x300>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d004      	beq.n	8006db8 <HAL_COMP_Init+0x1a8>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a58      	ldr	r2, [pc, #352]	; (8006f14 <HAL_COMP_Init+0x304>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d103      	bne.n	8006dc0 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8006db8:	6938      	ldr	r0, [r7, #16]
 8006dba:	f7ff fecf 	bl	8006b5c <LL_EXTI_EnableFallingTrig_32_63>
 8006dbe:	e014      	b.n	8006dea <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8006dc0:	6938      	ldr	r0, [r7, #16]
 8006dc2:	f7ff feb9 	bl	8006b38 <LL_EXTI_EnableFallingTrig_0_31>
 8006dc6:	e010      	b.n	8006dea <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a50      	ldr	r2, [pc, #320]	; (8006f10 <HAL_COMP_Init+0x300>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d004      	beq.n	8006ddc <HAL_COMP_Init+0x1cc>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a4f      	ldr	r2, [pc, #316]	; (8006f14 <HAL_COMP_Init+0x304>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d103      	bne.n	8006de4 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8006ddc:	6938      	ldr	r0, [r7, #16]
 8006dde:	f7ff fee3 	bl	8006ba8 <LL_EXTI_DisableFallingTrig_32_63>
 8006de2:	e002      	b.n	8006dea <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8006de4:	6938      	ldr	r0, [r7, #16]
 8006de6:	f7ff fecb 	bl	8006b80 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a48      	ldr	r2, [pc, #288]	; (8006f10 <HAL_COMP_Init+0x300>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d004      	beq.n	8006dfe <HAL_COMP_Init+0x1ee>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a46      	ldr	r2, [pc, #280]	; (8006f14 <HAL_COMP_Init+0x304>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d103      	bne.n	8006e06 <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8006dfe:	6938      	ldr	r0, [r7, #16]
 8006e00:	f7ff fef6 	bl	8006bf0 <LL_EXTI_ClearFlag_32_63>
 8006e04:	e002      	b.n	8006e0c <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8006e06:	6938      	ldr	r0, [r7, #16]
 8006e08:	f7ff fee2 	bl	8006bd0 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	699b      	ldr	r3, [r3, #24]
 8006e10:	f003 0302 	and.w	r3, r3, #2
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d011      	beq.n	8006e3c <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a3c      	ldr	r2, [pc, #240]	; (8006f10 <HAL_COMP_Init+0x300>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d004      	beq.n	8006e2c <HAL_COMP_Init+0x21c>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a3b      	ldr	r2, [pc, #236]	; (8006f14 <HAL_COMP_Init+0x304>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d103      	bne.n	8006e34 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8006e2c:	6938      	ldr	r0, [r7, #16]
 8006e2e:	f7ff fdfd 	bl	8006a2c <LL_EXTI_EnableEvent_32_63>
 8006e32:	e014      	b.n	8006e5e <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8006e34:	6938      	ldr	r0, [r7, #16]
 8006e36:	f7ff fde7 	bl	8006a08 <LL_EXTI_EnableEvent_0_31>
 8006e3a:	e010      	b.n	8006e5e <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a33      	ldr	r2, [pc, #204]	; (8006f10 <HAL_COMP_Init+0x300>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d004      	beq.n	8006e50 <HAL_COMP_Init+0x240>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a32      	ldr	r2, [pc, #200]	; (8006f14 <HAL_COMP_Init+0x304>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d103      	bne.n	8006e58 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8006e50:	6938      	ldr	r0, [r7, #16]
 8006e52:	f7ff fe11 	bl	8006a78 <LL_EXTI_DisableEvent_32_63>
 8006e56:	e002      	b.n	8006e5e <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8006e58:	6938      	ldr	r0, [r7, #16]
 8006e5a:	f7ff fdf9 	bl	8006a50 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	699b      	ldr	r3, [r3, #24]
 8006e62:	f003 0301 	and.w	r3, r3, #1
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d011      	beq.n	8006e8e <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a28      	ldr	r2, [pc, #160]	; (8006f10 <HAL_COMP_Init+0x300>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d004      	beq.n	8006e7e <HAL_COMP_Init+0x26e>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a26      	ldr	r2, [pc, #152]	; (8006f14 <HAL_COMP_Init+0x304>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d103      	bne.n	8006e86 <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8006e7e:	6938      	ldr	r0, [r7, #16]
 8006e80:	f7ff fd88 	bl	8006994 <LL_EXTI_EnableIT_32_63>
 8006e84:	e04b      	b.n	8006f1e <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8006e86:	6938      	ldr	r0, [r7, #16]
 8006e88:	f7ff fd72 	bl	8006970 <LL_EXTI_EnableIT_0_31>
 8006e8c:	e047      	b.n	8006f1e <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a1f      	ldr	r2, [pc, #124]	; (8006f10 <HAL_COMP_Init+0x300>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d004      	beq.n	8006ea2 <HAL_COMP_Init+0x292>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a1d      	ldr	r2, [pc, #116]	; (8006f14 <HAL_COMP_Init+0x304>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d103      	bne.n	8006eaa <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8006ea2:	6938      	ldr	r0, [r7, #16]
 8006ea4:	f7ff fd9c 	bl	80069e0 <LL_EXTI_DisableIT_32_63>
 8006ea8:	e039      	b.n	8006f1e <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8006eaa:	6938      	ldr	r0, [r7, #16]
 8006eac:	f7ff fd84 	bl	80069b8 <LL_EXTI_DisableIT_0_31>
 8006eb0:	e035      	b.n	8006f1e <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a16      	ldr	r2, [pc, #88]	; (8006f10 <HAL_COMP_Init+0x300>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d004      	beq.n	8006ec6 <HAL_COMP_Init+0x2b6>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a14      	ldr	r2, [pc, #80]	; (8006f14 <HAL_COMP_Init+0x304>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d103      	bne.n	8006ece <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8006ec6:	6938      	ldr	r0, [r7, #16]
 8006ec8:	f7ff fdd6 	bl	8006a78 <LL_EXTI_DisableEvent_32_63>
 8006ecc:	e002      	b.n	8006ed4 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8006ece:	6938      	ldr	r0, [r7, #16]
 8006ed0:	f7ff fdbe 	bl	8006a50 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a0d      	ldr	r2, [pc, #52]	; (8006f10 <HAL_COMP_Init+0x300>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d004      	beq.n	8006ee8 <HAL_COMP_Init+0x2d8>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a0c      	ldr	r2, [pc, #48]	; (8006f14 <HAL_COMP_Init+0x304>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d117      	bne.n	8006f18 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8006ee8:	6938      	ldr	r0, [r7, #16]
 8006eea:	f7ff fd79 	bl	80069e0 <LL_EXTI_DisableIT_32_63>
 8006eee:	e016      	b.n	8006f1e <HAL_COMP_Init+0x30e>
 8006ef0:	ff007e0f 	.word	0xff007e0f
 8006ef4:	200001d4 	.word	0x200001d4
 8006ef8:	053e2d63 	.word	0x053e2d63
 8006efc:	40010200 	.word	0x40010200
 8006f00:	40010204 	.word	0x40010204
 8006f04:	40010208 	.word	0x40010208
 8006f08:	4001020c 	.word	0x4001020c
 8006f0c:	40010210 	.word	0x40010210
 8006f10:	40010214 	.word	0x40010214
 8006f14:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8006f18:	6938      	ldr	r0, [r7, #16]
 8006f1a:	f7ff fd4d 	bl	80069b8 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	7f5b      	ldrb	r3, [r3, #29]
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d102      	bne.n	8006f2e <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8006f2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3720      	adds	r7, #32
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <__NVIC_SetPriorityGrouping>:
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f003 0307 	and.w	r3, r3, #7
 8006f46:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006f48:	4b0c      	ldr	r3, [pc, #48]	; (8006f7c <__NVIC_SetPriorityGrouping+0x44>)
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006f4e:	68ba      	ldr	r2, [r7, #8]
 8006f50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006f54:	4013      	ands	r3, r2
 8006f56:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006f60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006f6a:	4a04      	ldr	r2, [pc, #16]	; (8006f7c <__NVIC_SetPriorityGrouping+0x44>)
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	60d3      	str	r3, [r2, #12]
}
 8006f70:	bf00      	nop
 8006f72:	3714      	adds	r7, #20
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr
 8006f7c:	e000ed00 	.word	0xe000ed00

08006f80 <__NVIC_GetPriorityGrouping>:
{
 8006f80:	b480      	push	{r7}
 8006f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006f84:	4b04      	ldr	r3, [pc, #16]	; (8006f98 <__NVIC_GetPriorityGrouping+0x18>)
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	0a1b      	lsrs	r3, r3, #8
 8006f8a:	f003 0307 	and.w	r3, r3, #7
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr
 8006f98:	e000ed00 	.word	0xe000ed00

08006f9c <__NVIC_EnableIRQ>:
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	db0b      	blt.n	8006fc6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006fae:	79fb      	ldrb	r3, [r7, #7]
 8006fb0:	f003 021f 	and.w	r2, r3, #31
 8006fb4:	4907      	ldr	r1, [pc, #28]	; (8006fd4 <__NVIC_EnableIRQ+0x38>)
 8006fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fba:	095b      	lsrs	r3, r3, #5
 8006fbc:	2001      	movs	r0, #1
 8006fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8006fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006fc6:	bf00      	nop
 8006fc8:	370c      	adds	r7, #12
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop
 8006fd4:	e000e100 	.word	0xe000e100

08006fd8 <__NVIC_SetPriority>:
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	4603      	mov	r3, r0
 8006fe0:	6039      	str	r1, [r7, #0]
 8006fe2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	db0a      	blt.n	8007002 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	b2da      	uxtb	r2, r3
 8006ff0:	490c      	ldr	r1, [pc, #48]	; (8007024 <__NVIC_SetPriority+0x4c>)
 8006ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ff6:	0112      	lsls	r2, r2, #4
 8006ff8:	b2d2      	uxtb	r2, r2
 8006ffa:	440b      	add	r3, r1
 8006ffc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007000:	e00a      	b.n	8007018 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	b2da      	uxtb	r2, r3
 8007006:	4908      	ldr	r1, [pc, #32]	; (8007028 <__NVIC_SetPriority+0x50>)
 8007008:	79fb      	ldrb	r3, [r7, #7]
 800700a:	f003 030f 	and.w	r3, r3, #15
 800700e:	3b04      	subs	r3, #4
 8007010:	0112      	lsls	r2, r2, #4
 8007012:	b2d2      	uxtb	r2, r2
 8007014:	440b      	add	r3, r1
 8007016:	761a      	strb	r2, [r3, #24]
}
 8007018:	bf00      	nop
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr
 8007024:	e000e100 	.word	0xe000e100
 8007028:	e000ed00 	.word	0xe000ed00

0800702c <NVIC_EncodePriority>:
{
 800702c:	b480      	push	{r7}
 800702e:	b089      	sub	sp, #36	; 0x24
 8007030:	af00      	add	r7, sp, #0
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f003 0307 	and.w	r3, r3, #7
 800703e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	f1c3 0307 	rsb	r3, r3, #7
 8007046:	2b04      	cmp	r3, #4
 8007048:	bf28      	it	cs
 800704a:	2304      	movcs	r3, #4
 800704c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	3304      	adds	r3, #4
 8007052:	2b06      	cmp	r3, #6
 8007054:	d902      	bls.n	800705c <NVIC_EncodePriority+0x30>
 8007056:	69fb      	ldr	r3, [r7, #28]
 8007058:	3b03      	subs	r3, #3
 800705a:	e000      	b.n	800705e <NVIC_EncodePriority+0x32>
 800705c:	2300      	movs	r3, #0
 800705e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007060:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	fa02 f303 	lsl.w	r3, r2, r3
 800706a:	43da      	mvns	r2, r3
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	401a      	ands	r2, r3
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007074:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	fa01 f303 	lsl.w	r3, r1, r3
 800707e:	43d9      	mvns	r1, r3
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007084:	4313      	orrs	r3, r2
}
 8007086:	4618      	mov	r0, r3
 8007088:	3724      	adds	r7, #36	; 0x24
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr
	...

08007094 <SysTick_Config>:
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	3b01      	subs	r3, #1
 80070a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80070a4:	d301      	bcc.n	80070aa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80070a6:	2301      	movs	r3, #1
 80070a8:	e00f      	b.n	80070ca <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80070aa:	4a0a      	ldr	r2, [pc, #40]	; (80070d4 <SysTick_Config+0x40>)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	3b01      	subs	r3, #1
 80070b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80070b2:	210f      	movs	r1, #15
 80070b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070b8:	f7ff ff8e 	bl	8006fd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80070bc:	4b05      	ldr	r3, [pc, #20]	; (80070d4 <SysTick_Config+0x40>)
 80070be:	2200      	movs	r2, #0
 80070c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80070c2:	4b04      	ldr	r3, [pc, #16]	; (80070d4 <SysTick_Config+0x40>)
 80070c4:	2207      	movs	r2, #7
 80070c6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3708      	adds	r7, #8
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	e000e010 	.word	0xe000e010

080070d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f7ff ff29 	bl	8006f38 <__NVIC_SetPriorityGrouping>
}
 80070e6:	bf00      	nop
 80070e8:	3708      	adds	r7, #8
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b086      	sub	sp, #24
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	4603      	mov	r3, r0
 80070f6:	60b9      	str	r1, [r7, #8]
 80070f8:	607a      	str	r2, [r7, #4]
 80070fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80070fc:	f7ff ff40 	bl	8006f80 <__NVIC_GetPriorityGrouping>
 8007100:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	68b9      	ldr	r1, [r7, #8]
 8007106:	6978      	ldr	r0, [r7, #20]
 8007108:	f7ff ff90 	bl	800702c <NVIC_EncodePriority>
 800710c:	4602      	mov	r2, r0
 800710e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007112:	4611      	mov	r1, r2
 8007114:	4618      	mov	r0, r3
 8007116:	f7ff ff5f 	bl	8006fd8 <__NVIC_SetPriority>
}
 800711a:	bf00      	nop
 800711c:	3718      	adds	r7, #24
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b082      	sub	sp, #8
 8007126:	af00      	add	r7, sp, #0
 8007128:	4603      	mov	r3, r0
 800712a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800712c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007130:	4618      	mov	r0, r3
 8007132:	f7ff ff33 	bl	8006f9c <__NVIC_EnableIRQ>
}
 8007136:	bf00      	nop
 8007138:	3708      	adds	r7, #8
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800713e:	b580      	push	{r7, lr}
 8007140:	b082      	sub	sp, #8
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f7ff ffa4 	bl	8007094 <SysTick_Config>
 800714c:	4603      	mov	r3, r0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3708      	adds	r7, #8
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8007156:	b580      	push	{r7, lr}
 8007158:	b082      	sub	sp, #8
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d101      	bne.n	8007168 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	e014      	b.n	8007192 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	791b      	ldrb	r3, [r3, #4]
 800716c:	b2db      	uxtb	r3, r3
 800716e:	2b00      	cmp	r3, #0
 8007170:	d105      	bne.n	800717e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f7fc feeb 	bl	8003f54 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2202      	movs	r2, #2
 8007182:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2201      	movs	r2, #1
 800718e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3708      	adds	r7, #8
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800719a:	b580      	push	{r7, lr}
 800719c:	b082      	sub	sp, #8
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
 80071a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	795b      	ldrb	r3, [r3, #5]
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d101      	bne.n	80071b0 <HAL_DAC_Start+0x16>
 80071ac:	2302      	movs	r3, #2
 80071ae:	e043      	b.n	8007238 <HAL_DAC_Start+0x9e>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2202      	movs	r2, #2
 80071ba:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	6819      	ldr	r1, [r3, #0]
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	f003 0310 	and.w	r3, r3, #16
 80071c8:	2201      	movs	r2, #1
 80071ca:	409a      	lsls	r2, r3
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	430a      	orrs	r2, r1
 80071d2:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 80071d4:	2001      	movs	r0, #1
 80071d6:	f7fe fb4d 	bl	8005874 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d10f      	bne.n	8007200 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80071ea:	2b02      	cmp	r3, #2
 80071ec:	d11d      	bne.n	800722a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	685a      	ldr	r2, [r3, #4]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f042 0201 	orr.w	r2, r2, #1
 80071fc:	605a      	str	r2, [r3, #4]
 80071fe:	e014      	b.n	800722a <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	f003 0310 	and.w	r3, r3, #16
 8007210:	2102      	movs	r1, #2
 8007212:	fa01 f303 	lsl.w	r3, r1, r3
 8007216:	429a      	cmp	r2, r3
 8007218:	d107      	bne.n	800722a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	685a      	ldr	r2, [r3, #4]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f042 0202 	orr.w	r2, r2, #2
 8007228:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2201      	movs	r2, #1
 800722e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007236:	2300      	movs	r3, #0
}
 8007238:	4618      	mov	r0, r3
 800723a:	3708      	adds	r7, #8
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b086      	sub	sp, #24
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	607a      	str	r2, [r7, #4]
 800724c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800724e:	2300      	movs	r3, #0
 8007250:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	795b      	ldrb	r3, [r3, #5]
 8007256:	2b01      	cmp	r3, #1
 8007258:	d101      	bne.n	800725e <HAL_DAC_Start_DMA+0x1e>
 800725a:	2302      	movs	r3, #2
 800725c:	e0a1      	b.n	80073a2 <HAL_DAC_Start_DMA+0x162>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2201      	movs	r2, #1
 8007262:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2202      	movs	r2, #2
 8007268:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d12a      	bne.n	80072c6 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	4a4d      	ldr	r2, [pc, #308]	; (80073ac <HAL_DAC_Start_DMA+0x16c>)
 8007276:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	4a4c      	ldr	r2, [pc, #304]	; (80073b0 <HAL_DAC_Start_DMA+0x170>)
 800727e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	4a4b      	ldr	r2, [pc, #300]	; (80073b4 <HAL_DAC_Start_DMA+0x174>)
 8007286:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007296:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8007298:	6a3b      	ldr	r3, [r7, #32]
 800729a:	2b04      	cmp	r3, #4
 800729c:	d009      	beq.n	80072b2 <HAL_DAC_Start_DMA+0x72>
 800729e:	2b08      	cmp	r3, #8
 80072a0:	d00c      	beq.n	80072bc <HAL_DAC_Start_DMA+0x7c>
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d000      	beq.n	80072a8 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80072a6:	e039      	b.n	800731c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	3308      	adds	r3, #8
 80072ae:	613b      	str	r3, [r7, #16]
        break;
 80072b0:	e034      	b.n	800731c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	330c      	adds	r3, #12
 80072b8:	613b      	str	r3, [r7, #16]
        break;
 80072ba:	e02f      	b.n	800731c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	3310      	adds	r3, #16
 80072c2:	613b      	str	r3, [r7, #16]
        break;
 80072c4:	e02a      	b.n	800731c <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	4a3b      	ldr	r2, [pc, #236]	; (80073b8 <HAL_DAC_Start_DMA+0x178>)
 80072cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	4a3a      	ldr	r2, [pc, #232]	; (80073bc <HAL_DAC_Start_DMA+0x17c>)
 80072d4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	4a39      	ldr	r2, [pc, #228]	; (80073c0 <HAL_DAC_Start_DMA+0x180>)
 80072dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80072ec:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80072ee:	6a3b      	ldr	r3, [r7, #32]
 80072f0:	2b04      	cmp	r3, #4
 80072f2:	d009      	beq.n	8007308 <HAL_DAC_Start_DMA+0xc8>
 80072f4:	2b08      	cmp	r3, #8
 80072f6:	d00c      	beq.n	8007312 <HAL_DAC_Start_DMA+0xd2>
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d000      	beq.n	80072fe <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80072fc:	e00e      	b.n	800731c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	3314      	adds	r3, #20
 8007304:	613b      	str	r3, [r7, #16]
        break;
 8007306:	e009      	b.n	800731c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	3318      	adds	r3, #24
 800730e:	613b      	str	r3, [r7, #16]
        break;
 8007310:	e004      	b.n	800731c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	331c      	adds	r3, #28
 8007318:	613b      	str	r3, [r7, #16]
        break;
 800731a:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d111      	bne.n	8007346 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007330:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6898      	ldr	r0, [r3, #8]
 8007336:	6879      	ldr	r1, [r7, #4]
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	693a      	ldr	r2, [r7, #16]
 800733c:	f000 fbc8 	bl	8007ad0 <HAL_DMA_Start_IT>
 8007340:	4603      	mov	r3, r0
 8007342:	75fb      	strb	r3, [r7, #23]
 8007344:	e010      	b.n	8007368 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8007354:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	68d8      	ldr	r0, [r3, #12]
 800735a:	6879      	ldr	r1, [r7, #4]
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	693a      	ldr	r2, [r7, #16]
 8007360:	f000 fbb6 	bl	8007ad0 <HAL_DMA_Start_IT>
 8007364:	4603      	mov	r3, r0
 8007366:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2200      	movs	r2, #0
 800736c:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800736e:	7dfb      	ldrb	r3, [r7, #23]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d10f      	bne.n	8007394 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	6819      	ldr	r1, [r3, #0]
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	f003 0310 	and.w	r3, r3, #16
 8007380:	2201      	movs	r2, #1
 8007382:	409a      	lsls	r2, r3
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	430a      	orrs	r2, r1
 800738a:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 800738c:	2001      	movs	r0, #1
 800738e:	f7fe fa71 	bl	8005874 <HAL_Delay>
 8007392:	e005      	b.n	80073a0 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	f043 0204 	orr.w	r2, r3, #4
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80073a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3718      	adds	r7, #24
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	0800786d 	.word	0x0800786d
 80073b0:	0800788f 	.word	0x0800788f
 80073b4:	080078ab 	.word	0x080078ab
 80073b8:	08007915 	.word	0x08007915
 80073bc:	08007937 	.word	0x08007937
 80073c0:	08007953 	.word	0x08007953

080073c4 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	6819      	ldr	r1, [r3, #0]
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	f003 0310 	and.w	r3, r3, #16
 80073da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80073de:	fa02 f303 	lsl.w	r3, r2, r3
 80073e2:	43da      	mvns	r2, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	400a      	ands	r2, r1
 80073ea:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	6819      	ldr	r1, [r3, #0]
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	f003 0310 	and.w	r3, r3, #16
 80073f8:	2201      	movs	r2, #1
 80073fa:	fa02 f303 	lsl.w	r3, r2, r3
 80073fe:	43da      	mvns	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	400a      	ands	r2, r1
 8007406:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 8007408:	2001      	movs	r0, #1
 800740a:	f7fe fa33 	bl	8005874 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d10f      	bne.n	8007434 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	4618      	mov	r0, r3
 800741a:	f000 fbd4 	bl	8007bc6 <HAL_DMA_Abort>
 800741e:	4603      	mov	r3, r0
 8007420:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007430:	601a      	str	r2, [r3, #0]
 8007432:	e00e      	b.n	8007452 <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	4618      	mov	r0, r3
 800743a:	f000 fbc4 	bl	8007bc6 <HAL_DMA_Abort>
 800743e:	4603      	mov	r3, r0
 8007440:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8007450:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 8007452:	7bfb      	ldrb	r3, [r7, #15]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d003      	beq.n	8007460 <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2204      	movs	r2, #4
 800745c:	711a      	strb	r2, [r3, #4]
 800745e:	e002      	b.n	8007466 <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 8007466:	7bfb      	ldrb	r3, [r7, #15]
}
 8007468:	4618      	mov	r0, r3
 800746a:	3710      	adds	r7, #16
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8007470:	b480      	push	{r7}
 8007472:	b087      	sub	sp, #28
 8007474:	af00      	add	r7, sp, #0
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	60b9      	str	r1, [r7, #8]
 800747a:	607a      	str	r2, [r7, #4]
 800747c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800747e:	2300      	movs	r3, #0
 8007480:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d105      	bne.n	80074a0 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8007494:	697a      	ldr	r2, [r7, #20]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4413      	add	r3, r2
 800749a:	3308      	adds	r3, #8
 800749c:	617b      	str	r3, [r7, #20]
 800749e:	e004      	b.n	80074aa <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80074a0:	697a      	ldr	r2, [r7, #20]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4413      	add	r3, r2
 80074a6:	3314      	adds	r3, #20
 80074a8:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	461a      	mov	r2, r3
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80074b2:	2300      	movs	r3, #0
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	371c      	adds	r7, #28
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80074c8:	bf00      	nop
 80074ca:	370c      	adds	r7, #12
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80074dc:	bf00      	nop
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d103      	bne.n	8007500 <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074fe:	e002      	b.n	8007506 <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 8007506:	4618      	mov	r0, r3
 8007508:	370c      	adds	r7, #12
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr
	...

08007514 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b08a      	sub	sp, #40	; 0x28
 8007518:	af00      	add	r7, sp, #0
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8007520:	2300      	movs	r3, #0
 8007522:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	795b      	ldrb	r3, [r3, #5]
 8007528:	2b01      	cmp	r3, #1
 800752a:	d101      	bne.n	8007530 <HAL_DAC_ConfigChannel+0x1c>
 800752c:	2302      	movs	r3, #2
 800752e:	e194      	b.n	800785a <HAL_DAC_ConfigChannel+0x346>
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2201      	movs	r2, #1
 8007534:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2202      	movs	r2, #2
 800753a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	2b04      	cmp	r3, #4
 8007542:	d174      	bne.n	800762e <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d137      	bne.n	80075ba <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800754a:	f7fe f987 	bl	800585c <HAL_GetTick>
 800754e:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007550:	e011      	b.n	8007576 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007552:	f7fe f983 	bl	800585c <HAL_GetTick>
 8007556:	4602      	mov	r2, r0
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	1ad3      	subs	r3, r2, r3
 800755c:	2b01      	cmp	r3, #1
 800755e:	d90a      	bls.n	8007576 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	691b      	ldr	r3, [r3, #16]
 8007564:	f043 0208 	orr.w	r2, r3, #8
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2203      	movs	r2, #3
 8007570:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8007572:	2303      	movs	r3, #3
 8007574:	e171      	b.n	800785a <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800757c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007580:	2b00      	cmp	r3, #0
 8007582:	d1e6      	bne.n	8007552 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8007584:	2001      	movs	r0, #1
 8007586:	f7fe f975 	bl	8005874 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	68ba      	ldr	r2, [r7, #8]
 8007590:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007592:	641a      	str	r2, [r3, #64]	; 0x40
 8007594:	e01e      	b.n	80075d4 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007596:	f7fe f961 	bl	800585c <HAL_GetTick>
 800759a:	4602      	mov	r2, r0
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	1ad3      	subs	r3, r2, r3
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d90a      	bls.n	80075ba <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	f043 0208 	orr.w	r2, r3, #8
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2203      	movs	r2, #3
 80075b4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80075b6:	2303      	movs	r3, #3
 80075b8:	e14f      	b.n	800785a <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	dbe8      	blt.n	8007596 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80075c4:	2001      	movs	r0, #1
 80075c6:	f7fe f955 	bl	8005874 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	68ba      	ldr	r2, [r7, #8]
 80075d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80075d2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f003 0310 	and.w	r3, r3, #16
 80075e0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80075e4:	fa01 f303 	lsl.w	r3, r1, r3
 80075e8:	43db      	mvns	r3, r3
 80075ea:	ea02 0103 	and.w	r1, r2, r3
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f003 0310 	and.w	r3, r3, #16
 80075f8:	409a      	lsls	r2, r3
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	430a      	orrs	r2, r1
 8007600:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f003 0310 	and.w	r3, r3, #16
 800760e:	21ff      	movs	r1, #255	; 0xff
 8007610:	fa01 f303 	lsl.w	r3, r1, r3
 8007614:	43db      	mvns	r3, r3
 8007616:	ea02 0103 	and.w	r1, r2, r3
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f003 0310 	and.w	r3, r3, #16
 8007624:	409a      	lsls	r2, r3
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	430a      	orrs	r2, r1
 800762c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	69db      	ldr	r3, [r3, #28]
 8007632:	2b01      	cmp	r3, #1
 8007634:	d11d      	bne.n	8007672 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800763c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f003 0310 	and.w	r3, r3, #16
 8007644:	221f      	movs	r2, #31
 8007646:	fa02 f303 	lsl.w	r3, r2, r3
 800764a:	43db      	mvns	r3, r3
 800764c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800764e:	4013      	ands	r3, r2
 8007650:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f003 0310 	and.w	r3, r3, #16
 800765e:	69ba      	ldr	r2, [r7, #24]
 8007660:	fa02 f303 	lsl.w	r3, r2, r3
 8007664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007666:	4313      	orrs	r3, r2
 8007668:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007670:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007678:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f003 0310 	and.w	r3, r3, #16
 8007680:	2207      	movs	r2, #7
 8007682:	fa02 f303 	lsl.w	r3, r2, r3
 8007686:	43db      	mvns	r3, r3
 8007688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800768a:	4013      	ands	r3, r2
 800768c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	699b      	ldr	r3, [r3, #24]
 8007692:	f003 0301 	and.w	r3, r3, #1
 8007696:	2b00      	cmp	r3, #0
 8007698:	d002      	beq.n	80076a0 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 800769a:	2300      	movs	r3, #0
 800769c:	623b      	str	r3, [r7, #32]
 800769e:	e011      	b.n	80076c4 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	699b      	ldr	r3, [r3, #24]
 80076a4:	f003 0302 	and.w	r3, r3, #2
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d002      	beq.n	80076b2 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80076ac:	2301      	movs	r3, #1
 80076ae:	623b      	str	r3, [r7, #32]
 80076b0:	e008      	b.n	80076c4 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	695b      	ldr	r3, [r3, #20]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d102      	bne.n	80076c0 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80076ba:	2301      	movs	r3, #1
 80076bc:	623b      	str	r3, [r7, #32]
 80076be:	e001      	b.n	80076c4 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80076c0:	2300      	movs	r3, #0
 80076c2:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	689a      	ldr	r2, [r3, #8]
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	695b      	ldr	r3, [r3, #20]
 80076cc:	4313      	orrs	r3, r2
 80076ce:	6a3a      	ldr	r2, [r7, #32]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f003 0310 	and.w	r3, r3, #16
 80076da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80076de:	fa02 f303 	lsl.w	r3, r2, r3
 80076e2:	43db      	mvns	r3, r3
 80076e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076e6:	4013      	ands	r3, r2
 80076e8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	791b      	ldrb	r3, [r3, #4]
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d102      	bne.n	80076f8 <HAL_DAC_ConfigChannel+0x1e4>
 80076f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076f6:	e000      	b.n	80076fa <HAL_DAC_ConfigChannel+0x1e6>
 80076f8:	2300      	movs	r3, #0
 80076fa:	69ba      	ldr	r2, [r7, #24]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f003 0310 	and.w	r3, r3, #16
 8007706:	f44f 7200 	mov.w	r2, #512	; 0x200
 800770a:	fa02 f303 	lsl.w	r3, r2, r3
 800770e:	43db      	mvns	r3, r3
 8007710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007712:	4013      	ands	r3, r2
 8007714:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	795b      	ldrb	r3, [r3, #5]
 800771a:	2b01      	cmp	r3, #1
 800771c:	d102      	bne.n	8007724 <HAL_DAC_ConfigChannel+0x210>
 800771e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007722:	e000      	b.n	8007726 <HAL_DAC_ConfigChannel+0x212>
 8007724:	2300      	movs	r3, #0
 8007726:	69ba      	ldr	r2, [r7, #24]
 8007728:	4313      	orrs	r3, r2
 800772a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800772c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007732:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2b02      	cmp	r3, #2
 800773a:	d114      	bne.n	8007766 <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800773c:	f001 faf8 	bl	8008d30 <HAL_RCC_GetHCLKFreq>
 8007740:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	4a47      	ldr	r2, [pc, #284]	; (8007864 <HAL_DAC_ConfigChannel+0x350>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d904      	bls.n	8007754 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800774a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007750:	627b      	str	r3, [r7, #36]	; 0x24
 8007752:	e00d      	b.n	8007770 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	4a44      	ldr	r2, [pc, #272]	; (8007868 <HAL_DAC_ConfigChannel+0x354>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d909      	bls.n	8007770 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800775c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007762:	627b      	str	r3, [r7, #36]	; 0x24
 8007764:	e004      	b.n	8007770 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800776c:	4313      	orrs	r3, r2
 800776e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f003 0310 	and.w	r3, r3, #16
 8007776:	69ba      	ldr	r2, [r7, #24]
 8007778:	fa02 f303 	lsl.w	r3, r2, r3
 800777c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800777e:	4313      	orrs	r3, r2
 8007780:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007788:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	6819      	ldr	r1, [r3, #0]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f003 0310 	and.w	r3, r3, #16
 8007796:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800779a:	fa02 f303 	lsl.w	r3, r2, r3
 800779e:	43da      	mvns	r2, r3
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	400a      	ands	r2, r1
 80077a6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f003 0310 	and.w	r3, r3, #16
 80077b6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80077ba:	fa02 f303 	lsl.w	r3, r2, r3
 80077be:	43db      	mvns	r3, r3
 80077c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077c2:	4013      	ands	r3, r2
 80077c4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f003 0310 	and.w	r3, r3, #16
 80077d2:	69ba      	ldr	r2, [r7, #24]
 80077d4:	fa02 f303 	lsl.w	r3, r2, r3
 80077d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077da:	4313      	orrs	r3, r2
 80077dc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077e4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	6819      	ldr	r1, [r3, #0]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f003 0310 	and.w	r3, r3, #16
 80077f2:	22c0      	movs	r2, #192	; 0xc0
 80077f4:	fa02 f303 	lsl.w	r3, r2, r3
 80077f8:	43da      	mvns	r2, r3
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	400a      	ands	r2, r1
 8007800:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	089b      	lsrs	r3, r3, #2
 8007808:	f003 030f 	and.w	r3, r3, #15
 800780c:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	089b      	lsrs	r3, r3, #2
 8007814:	021b      	lsls	r3, r3, #8
 8007816:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800781a:	69ba      	ldr	r2, [r7, #24]
 800781c:	4313      	orrs	r3, r2
 800781e:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f003 0310 	and.w	r3, r3, #16
 800782c:	f640 710f 	movw	r1, #3855	; 0xf0f
 8007830:	fa01 f303 	lsl.w	r3, r1, r3
 8007834:	43db      	mvns	r3, r3
 8007836:	ea02 0103 	and.w	r1, r2, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f003 0310 	and.w	r3, r3, #16
 8007840:	69ba      	ldr	r2, [r7, #24]
 8007842:	409a      	lsls	r2, r3
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	430a      	orrs	r2, r1
 800784a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2201      	movs	r2, #1
 8007850:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2200      	movs	r2, #0
 8007856:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3728      	adds	r7, #40	; 0x28
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	09896800 	.word	0x09896800
 8007868:	04c4b400 	.word	0x04c4b400

0800786c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007878:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800787a:	68f8      	ldr	r0, [r7, #12]
 800787c:	f7ff fe20 	bl	80074c0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2201      	movs	r2, #1
 8007884:	711a      	strb	r2, [r3, #4]
}
 8007886:	bf00      	nop
 8007888:	3710      	adds	r7, #16
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800788e:	b580      	push	{r7, lr}
 8007890:	b084      	sub	sp, #16
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800789a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800789c:	68f8      	ldr	r0, [r7, #12]
 800789e:	f7ff fe19 	bl	80074d4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80078a2:	bf00      	nop
 80078a4:	3710      	adds	r7, #16
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}

080078aa <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b084      	sub	sp, #16
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	691b      	ldr	r3, [r3, #16]
 80078bc:	f043 0204 	orr.w	r2, r3, #4
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80078c4:	68f8      	ldr	r0, [r7, #12]
 80078c6:	f7fc ffea 	bl	800489e <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2201      	movs	r2, #1
 80078ce:	711a      	strb	r2, [r3, #4]
}
 80078d0:	bf00      	nop
 80078d2:	3710      	adds	r7, #16
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80078e0:	bf00      	nop
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80078f4:	bf00      	nop
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8007908:	bf00      	nop
 800790a:	370c      	adds	r7, #12
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007920:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8007922:	68f8      	ldr	r0, [r7, #12]
 8007924:	f7ff ffd8 	bl	80078d8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2201      	movs	r2, #1
 800792c:	711a      	strb	r2, [r3, #4]
}
 800792e:	bf00      	nop
 8007930:	3710      	adds	r7, #16
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}

08007936 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007936:	b580      	push	{r7, lr}
 8007938:	b084      	sub	sp, #16
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007942:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8007944:	68f8      	ldr	r0, [r7, #12]
 8007946:	f7ff ffd1 	bl	80078ec <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800794a:	bf00      	nop
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b084      	sub	sp, #16
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800795e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	691b      	ldr	r3, [r3, #16]
 8007964:	f043 0204 	orr.w	r2, r3, #4
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800796c:	68f8      	ldr	r0, [r7, #12]
 800796e:	f7ff ffc7 	bl	8007900 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2201      	movs	r2, #1
 8007976:	711a      	strb	r2, [r3, #4]
}
 8007978:	bf00      	nop
 800797a:	3710      	adds	r7, #16
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d101      	bne.n	8007992 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	e08d      	b.n	8007aae <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	461a      	mov	r2, r3
 8007998:	4b47      	ldr	r3, [pc, #284]	; (8007ab8 <HAL_DMA_Init+0x138>)
 800799a:	429a      	cmp	r2, r3
 800799c:	d80f      	bhi.n	80079be <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	461a      	mov	r2, r3
 80079a4:	4b45      	ldr	r3, [pc, #276]	; (8007abc <HAL_DMA_Init+0x13c>)
 80079a6:	4413      	add	r3, r2
 80079a8:	4a45      	ldr	r2, [pc, #276]	; (8007ac0 <HAL_DMA_Init+0x140>)
 80079aa:	fba2 2303 	umull	r2, r3, r2, r3
 80079ae:	091b      	lsrs	r3, r3, #4
 80079b0:	009a      	lsls	r2, r3, #2
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a42      	ldr	r2, [pc, #264]	; (8007ac4 <HAL_DMA_Init+0x144>)
 80079ba:	641a      	str	r2, [r3, #64]	; 0x40
 80079bc:	e00e      	b.n	80079dc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	461a      	mov	r2, r3
 80079c4:	4b40      	ldr	r3, [pc, #256]	; (8007ac8 <HAL_DMA_Init+0x148>)
 80079c6:	4413      	add	r3, r2
 80079c8:	4a3d      	ldr	r2, [pc, #244]	; (8007ac0 <HAL_DMA_Init+0x140>)
 80079ca:	fba2 2303 	umull	r2, r3, r2, r3
 80079ce:	091b      	lsrs	r3, r3, #4
 80079d0:	009a      	lsls	r2, r3, #2
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	4a3c      	ldr	r2, [pc, #240]	; (8007acc <HAL_DMA_Init+0x14c>)
 80079da:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2202      	movs	r2, #2
 80079e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80079f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007a00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	699b      	ldr	r3, [r3, #24]
 8007a12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007a18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a1b      	ldr	r3, [r3, #32]
 8007a1e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007a20:	68fa      	ldr	r2, [r7, #12]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fa10 	bl	8007e54 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a3c:	d102      	bne.n	8007a44 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	685a      	ldr	r2, [r3, #4]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a4c:	b2d2      	uxtb	r2, r2
 8007a4e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007a58:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d010      	beq.n	8007a84 <HAL_DMA_Init+0x104>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	2b04      	cmp	r3, #4
 8007a68:	d80c      	bhi.n	8007a84 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 fa30 	bl	8007ed0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a74:	2200      	movs	r2, #0
 8007a76:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007a80:	605a      	str	r2, [r3, #4]
 8007a82:	e008      	b.n	8007a96 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2200      	movs	r2, #0
 8007a88:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3710      	adds	r7, #16
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	40020407 	.word	0x40020407
 8007abc:	bffdfff8 	.word	0xbffdfff8
 8007ac0:	cccccccd 	.word	0xcccccccd
 8007ac4:	40020000 	.word	0x40020000
 8007ac8:	bffdfbf8 	.word	0xbffdfbf8
 8007acc:	40020400 	.word	0x40020400

08007ad0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b086      	sub	sp, #24
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	607a      	str	r2, [r7, #4]
 8007adc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d101      	bne.n	8007af0 <HAL_DMA_Start_IT+0x20>
 8007aec:	2302      	movs	r3, #2
 8007aee:	e066      	b.n	8007bbe <HAL_DMA_Start_IT+0xee>
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2201      	movs	r2, #1
 8007af4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d155      	bne.n	8007bb0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2202      	movs	r2, #2
 8007b08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f022 0201 	bic.w	r2, r2, #1
 8007b20:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	68b9      	ldr	r1, [r7, #8]
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f000 f954 	bl	8007dd6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d008      	beq.n	8007b48 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f042 020e 	orr.w	r2, r2, #14
 8007b44:	601a      	str	r2, [r3, #0]
 8007b46:	e00f      	b.n	8007b68 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f022 0204 	bic.w	r2, r2, #4
 8007b56:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f042 020a 	orr.w	r2, r2, #10
 8007b66:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d007      	beq.n	8007b86 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b84:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d007      	beq.n	8007b9e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b9c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f042 0201 	orr.w	r2, r2, #1
 8007bac:	601a      	str	r2, [r3, #0]
 8007bae:	e005      	b.n	8007bbc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007bb8:	2302      	movs	r3, #2
 8007bba:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3718      	adds	r7, #24
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007bc6:	b480      	push	{r7}
 8007bc8:	b085      	sub	sp, #20
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	2b02      	cmp	r3, #2
 8007bdc:	d005      	beq.n	8007bea <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2204      	movs	r2, #4
 8007be2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	73fb      	strb	r3, [r7, #15]
 8007be8:	e037      	b.n	8007c5a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f022 020e 	bic.w	r2, r2, #14
 8007bf8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c08:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f022 0201 	bic.w	r2, r2, #1
 8007c18:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c1e:	f003 021f 	and.w	r2, r3, #31
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c26:	2101      	movs	r1, #1
 8007c28:	fa01 f202 	lsl.w	r2, r1, r2
 8007c2c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007c36:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d00c      	beq.n	8007c5a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c4e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007c58:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8007c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3714      	adds	r7, #20
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c94:	f003 031f 	and.w	r3, r3, #31
 8007c98:	2204      	movs	r2, #4
 8007c9a:	409a      	lsls	r2, r3
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	4013      	ands	r3, r2
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d026      	beq.n	8007cf2 <HAL_DMA_IRQHandler+0x7a>
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	f003 0304 	and.w	r3, r3, #4
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d021      	beq.n	8007cf2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f003 0320 	and.w	r3, r3, #32
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d107      	bne.n	8007ccc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f022 0204 	bic.w	r2, r2, #4
 8007cca:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cd0:	f003 021f 	and.w	r2, r3, #31
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd8:	2104      	movs	r1, #4
 8007cda:	fa01 f202 	lsl.w	r2, r1, r2
 8007cde:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d071      	beq.n	8007dcc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007cf0:	e06c      	b.n	8007dcc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cf6:	f003 031f 	and.w	r3, r3, #31
 8007cfa:	2202      	movs	r2, #2
 8007cfc:	409a      	lsls	r2, r3
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	4013      	ands	r3, r2
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d02e      	beq.n	8007d64 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	f003 0302 	and.w	r3, r3, #2
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d029      	beq.n	8007d64 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 0320 	and.w	r3, r3, #32
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d10b      	bne.n	8007d36 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f022 020a 	bic.w	r2, r2, #10
 8007d2c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2201      	movs	r2, #1
 8007d32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d3a:	f003 021f 	and.w	r2, r3, #31
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d42:	2102      	movs	r1, #2
 8007d44:	fa01 f202 	lsl.w	r2, r1, r2
 8007d48:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d038      	beq.n	8007dcc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007d62:	e033      	b.n	8007dcc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d68:	f003 031f 	and.w	r3, r3, #31
 8007d6c:	2208      	movs	r2, #8
 8007d6e:	409a      	lsls	r2, r3
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	4013      	ands	r3, r2
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d02a      	beq.n	8007dce <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	f003 0308 	and.w	r3, r3, #8
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d025      	beq.n	8007dce <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f022 020e 	bic.w	r2, r2, #14
 8007d90:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d96:	f003 021f 	and.w	r2, r3, #31
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d9e:	2101      	movs	r1, #1
 8007da0:	fa01 f202 	lsl.w	r2, r1, r2
 8007da4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2201      	movs	r2, #1
 8007daa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2201      	movs	r2, #1
 8007db0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d004      	beq.n	8007dce <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007dcc:	bf00      	nop
 8007dce:	bf00      	nop
}
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007dd6:	b480      	push	{r7}
 8007dd8:	b085      	sub	sp, #20
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	60f8      	str	r0, [r7, #12]
 8007dde:	60b9      	str	r1, [r7, #8]
 8007de0:	607a      	str	r2, [r7, #4]
 8007de2:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007de8:	68fa      	ldr	r2, [r7, #12]
 8007dea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007dec:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d004      	beq.n	8007e00 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007dfe:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e04:	f003 021f 	and.w	r2, r3, #31
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0c:	2101      	movs	r1, #1
 8007e0e:	fa01 f202 	lsl.w	r2, r1, r2
 8007e12:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	683a      	ldr	r2, [r7, #0]
 8007e1a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	2b10      	cmp	r3, #16
 8007e22:	d108      	bne.n	8007e36 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68ba      	ldr	r2, [r7, #8]
 8007e32:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007e34:	e007      	b.n	8007e46 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	68ba      	ldr	r2, [r7, #8]
 8007e3c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	60da      	str	r2, [r3, #12]
}
 8007e46:	bf00      	nop
 8007e48:	3714      	adds	r7, #20
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr
	...

08007e54 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b087      	sub	sp, #28
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	461a      	mov	r2, r3
 8007e62:	4b16      	ldr	r3, [pc, #88]	; (8007ebc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d802      	bhi.n	8007e6e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8007e68:	4b15      	ldr	r3, [pc, #84]	; (8007ec0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007e6a:	617b      	str	r3, [r7, #20]
 8007e6c:	e001      	b.n	8007e72 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8007e6e:	4b15      	ldr	r3, [pc, #84]	; (8007ec4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007e70:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	3b08      	subs	r3, #8
 8007e7e:	4a12      	ldr	r2, [pc, #72]	; (8007ec8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007e80:	fba2 2303 	umull	r2, r3, r2, r3
 8007e84:	091b      	lsrs	r3, r3, #4
 8007e86:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e8c:	089b      	lsrs	r3, r3, #2
 8007e8e:	009a      	lsls	r2, r3, #2
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	4413      	add	r3, r2
 8007e94:	461a      	mov	r2, r3
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a0b      	ldr	r2, [pc, #44]	; (8007ecc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007e9e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f003 031f 	and.w	r3, r3, #31
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	409a      	lsls	r2, r3
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007eae:	bf00      	nop
 8007eb0:	371c      	adds	r7, #28
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr
 8007eba:	bf00      	nop
 8007ebc:	40020407 	.word	0x40020407
 8007ec0:	40020800 	.word	0x40020800
 8007ec4:	40020820 	.word	0x40020820
 8007ec8:	cccccccd 	.word	0xcccccccd
 8007ecc:	40020880 	.word	0x40020880

08007ed0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b085      	sub	sp, #20
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	4b0b      	ldr	r3, [pc, #44]	; (8007f10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007ee4:	4413      	add	r3, r2
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	461a      	mov	r2, r3
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4a08      	ldr	r2, [pc, #32]	; (8007f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007ef2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	3b01      	subs	r3, #1
 8007ef8:	f003 031f 	and.w	r3, r3, #31
 8007efc:	2201      	movs	r2, #1
 8007efe:	409a      	lsls	r2, r3
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8007f04:	bf00      	nop
 8007f06:	3714      	adds	r7, #20
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr
 8007f10:	1000823f 	.word	0x1000823f
 8007f14:	40020940 	.word	0x40020940

08007f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b087      	sub	sp, #28
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007f22:	2300      	movs	r3, #0
 8007f24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007f26:	e15a      	b.n	80081de <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	2101      	movs	r1, #1
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	fa01 f303 	lsl.w	r3, r1, r3
 8007f34:	4013      	ands	r3, r2
 8007f36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	f000 814c 	beq.w	80081d8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d00b      	beq.n	8007f60 <HAL_GPIO_Init+0x48>
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	2b02      	cmp	r3, #2
 8007f4e:	d007      	beq.n	8007f60 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007f54:	2b11      	cmp	r3, #17
 8007f56:	d003      	beq.n	8007f60 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	2b12      	cmp	r3, #18
 8007f5e:	d130      	bne.n	8007fc2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	005b      	lsls	r3, r3, #1
 8007f6a:	2203      	movs	r2, #3
 8007f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f70:	43db      	mvns	r3, r3
 8007f72:	693a      	ldr	r2, [r7, #16]
 8007f74:	4013      	ands	r3, r2
 8007f76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	68da      	ldr	r2, [r3, #12]
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	005b      	lsls	r3, r3, #1
 8007f80:	fa02 f303 	lsl.w	r3, r2, r3
 8007f84:	693a      	ldr	r2, [r7, #16]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	693a      	ldr	r2, [r7, #16]
 8007f8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007f96:	2201      	movs	r2, #1
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f9e:	43db      	mvns	r3, r3
 8007fa0:	693a      	ldr	r2, [r7, #16]
 8007fa2:	4013      	ands	r3, r2
 8007fa4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	091b      	lsrs	r3, r3, #4
 8007fac:	f003 0201 	and.w	r2, r3, #1
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8007fb6:	693a      	ldr	r2, [r7, #16]
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	693a      	ldr	r2, [r7, #16]
 8007fc0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	005b      	lsls	r3, r3, #1
 8007fcc:	2203      	movs	r2, #3
 8007fce:	fa02 f303 	lsl.w	r3, r2, r3
 8007fd2:	43db      	mvns	r3, r3
 8007fd4:	693a      	ldr	r2, [r7, #16]
 8007fd6:	4013      	ands	r3, r2
 8007fd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	689a      	ldr	r2, [r3, #8]
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	005b      	lsls	r3, r3, #1
 8007fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8007fe6:	693a      	ldr	r2, [r7, #16]
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	693a      	ldr	r2, [r7, #16]
 8007ff0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	d003      	beq.n	8008002 <HAL_GPIO_Init+0xea>
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	2b12      	cmp	r3, #18
 8008000:	d123      	bne.n	800804a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	08da      	lsrs	r2, r3, #3
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	3208      	adds	r2, #8
 800800a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800800e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	f003 0307 	and.w	r3, r3, #7
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	220f      	movs	r2, #15
 800801a:	fa02 f303 	lsl.w	r3, r2, r3
 800801e:	43db      	mvns	r3, r3
 8008020:	693a      	ldr	r2, [r7, #16]
 8008022:	4013      	ands	r3, r2
 8008024:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	691a      	ldr	r2, [r3, #16]
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	f003 0307 	and.w	r3, r3, #7
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	fa02 f303 	lsl.w	r3, r2, r3
 8008036:	693a      	ldr	r2, [r7, #16]
 8008038:	4313      	orrs	r3, r2
 800803a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	08da      	lsrs	r2, r3, #3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	3208      	adds	r2, #8
 8008044:	6939      	ldr	r1, [r7, #16]
 8008046:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	005b      	lsls	r3, r3, #1
 8008054:	2203      	movs	r2, #3
 8008056:	fa02 f303 	lsl.w	r3, r2, r3
 800805a:	43db      	mvns	r3, r3
 800805c:	693a      	ldr	r2, [r7, #16]
 800805e:	4013      	ands	r3, r2
 8008060:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	f003 0203 	and.w	r2, r3, #3
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	005b      	lsls	r3, r3, #1
 800806e:	fa02 f303 	lsl.w	r3, r2, r3
 8008072:	693a      	ldr	r2, [r7, #16]
 8008074:	4313      	orrs	r3, r2
 8008076:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	693a      	ldr	r2, [r7, #16]
 800807c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008086:	2b00      	cmp	r3, #0
 8008088:	f000 80a6 	beq.w	80081d8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800808c:	4b5b      	ldr	r3, [pc, #364]	; (80081fc <HAL_GPIO_Init+0x2e4>)
 800808e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008090:	4a5a      	ldr	r2, [pc, #360]	; (80081fc <HAL_GPIO_Init+0x2e4>)
 8008092:	f043 0301 	orr.w	r3, r3, #1
 8008096:	6613      	str	r3, [r2, #96]	; 0x60
 8008098:	4b58      	ldr	r3, [pc, #352]	; (80081fc <HAL_GPIO_Init+0x2e4>)
 800809a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800809c:	f003 0301 	and.w	r3, r3, #1
 80080a0:	60bb      	str	r3, [r7, #8]
 80080a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80080a4:	4a56      	ldr	r2, [pc, #344]	; (8008200 <HAL_GPIO_Init+0x2e8>)
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	089b      	lsrs	r3, r3, #2
 80080aa:	3302      	adds	r3, #2
 80080ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	f003 0303 	and.w	r3, r3, #3
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	220f      	movs	r2, #15
 80080bc:	fa02 f303 	lsl.w	r3, r2, r3
 80080c0:	43db      	mvns	r3, r3
 80080c2:	693a      	ldr	r2, [r7, #16]
 80080c4:	4013      	ands	r3, r2
 80080c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80080ce:	d01f      	beq.n	8008110 <HAL_GPIO_Init+0x1f8>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	4a4c      	ldr	r2, [pc, #304]	; (8008204 <HAL_GPIO_Init+0x2ec>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d019      	beq.n	800810c <HAL_GPIO_Init+0x1f4>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4a4b      	ldr	r2, [pc, #300]	; (8008208 <HAL_GPIO_Init+0x2f0>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d013      	beq.n	8008108 <HAL_GPIO_Init+0x1f0>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4a4a      	ldr	r2, [pc, #296]	; (800820c <HAL_GPIO_Init+0x2f4>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d00d      	beq.n	8008104 <HAL_GPIO_Init+0x1ec>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	4a49      	ldr	r2, [pc, #292]	; (8008210 <HAL_GPIO_Init+0x2f8>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d007      	beq.n	8008100 <HAL_GPIO_Init+0x1e8>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4a48      	ldr	r2, [pc, #288]	; (8008214 <HAL_GPIO_Init+0x2fc>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d101      	bne.n	80080fc <HAL_GPIO_Init+0x1e4>
 80080f8:	2305      	movs	r3, #5
 80080fa:	e00a      	b.n	8008112 <HAL_GPIO_Init+0x1fa>
 80080fc:	2306      	movs	r3, #6
 80080fe:	e008      	b.n	8008112 <HAL_GPIO_Init+0x1fa>
 8008100:	2304      	movs	r3, #4
 8008102:	e006      	b.n	8008112 <HAL_GPIO_Init+0x1fa>
 8008104:	2303      	movs	r3, #3
 8008106:	e004      	b.n	8008112 <HAL_GPIO_Init+0x1fa>
 8008108:	2302      	movs	r3, #2
 800810a:	e002      	b.n	8008112 <HAL_GPIO_Init+0x1fa>
 800810c:	2301      	movs	r3, #1
 800810e:	e000      	b.n	8008112 <HAL_GPIO_Init+0x1fa>
 8008110:	2300      	movs	r3, #0
 8008112:	697a      	ldr	r2, [r7, #20]
 8008114:	f002 0203 	and.w	r2, r2, #3
 8008118:	0092      	lsls	r2, r2, #2
 800811a:	4093      	lsls	r3, r2
 800811c:	693a      	ldr	r2, [r7, #16]
 800811e:	4313      	orrs	r3, r2
 8008120:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008122:	4937      	ldr	r1, [pc, #220]	; (8008200 <HAL_GPIO_Init+0x2e8>)
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	089b      	lsrs	r3, r3, #2
 8008128:	3302      	adds	r3, #2
 800812a:	693a      	ldr	r2, [r7, #16]
 800812c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008130:	4b39      	ldr	r3, [pc, #228]	; (8008218 <HAL_GPIO_Init+0x300>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	43db      	mvns	r3, r3
 800813a:	693a      	ldr	r2, [r7, #16]
 800813c:	4013      	ands	r3, r2
 800813e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008148:	2b00      	cmp	r3, #0
 800814a:	d003      	beq.n	8008154 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800814c:	693a      	ldr	r2, [r7, #16]
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	4313      	orrs	r3, r2
 8008152:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008154:	4a30      	ldr	r2, [pc, #192]	; (8008218 <HAL_GPIO_Init+0x300>)
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800815a:	4b2f      	ldr	r3, [pc, #188]	; (8008218 <HAL_GPIO_Init+0x300>)
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	43db      	mvns	r3, r3
 8008164:	693a      	ldr	r2, [r7, #16]
 8008166:	4013      	ands	r3, r2
 8008168:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008172:	2b00      	cmp	r3, #0
 8008174:	d003      	beq.n	800817e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8008176:	693a      	ldr	r2, [r7, #16]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	4313      	orrs	r3, r2
 800817c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800817e:	4a26      	ldr	r2, [pc, #152]	; (8008218 <HAL_GPIO_Init+0x300>)
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008184:	4b24      	ldr	r3, [pc, #144]	; (8008218 <HAL_GPIO_Init+0x300>)
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	43db      	mvns	r3, r3
 800818e:	693a      	ldr	r2, [r7, #16]
 8008190:	4013      	ands	r3, r2
 8008192:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800819c:	2b00      	cmp	r3, #0
 800819e:	d003      	beq.n	80081a8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80081a0:	693a      	ldr	r2, [r7, #16]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	4313      	orrs	r3, r2
 80081a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80081a8:	4a1b      	ldr	r2, [pc, #108]	; (8008218 <HAL_GPIO_Init+0x300>)
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80081ae:	4b1a      	ldr	r3, [pc, #104]	; (8008218 <HAL_GPIO_Init+0x300>)
 80081b0:	68db      	ldr	r3, [r3, #12]
 80081b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	43db      	mvns	r3, r3
 80081b8:	693a      	ldr	r2, [r7, #16]
 80081ba:	4013      	ands	r3, r2
 80081bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d003      	beq.n	80081d2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80081ca:	693a      	ldr	r2, [r7, #16]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80081d2:	4a11      	ldr	r2, [pc, #68]	; (8008218 <HAL_GPIO_Init+0x300>)
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	3301      	adds	r3, #1
 80081dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	fa22 f303 	lsr.w	r3, r2, r3
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	f47f ae9d 	bne.w	8007f28 <HAL_GPIO_Init+0x10>
  }
}
 80081ee:	bf00      	nop
 80081f0:	371c      	adds	r7, #28
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop
 80081fc:	40021000 	.word	0x40021000
 8008200:	40010000 	.word	0x40010000
 8008204:	48000400 	.word	0x48000400
 8008208:	48000800 	.word	0x48000800
 800820c:	48000c00 	.word	0x48000c00
 8008210:	48001000 	.word	0x48001000
 8008214:	48001400 	.word	0x48001400
 8008218:	40010400 	.word	0x40010400

0800821c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800821c:	b480      	push	{r7}
 800821e:	b085      	sub	sp, #20
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	460b      	mov	r3, r1
 8008226:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	691a      	ldr	r2, [r3, #16]
 800822c:	887b      	ldrh	r3, [r7, #2]
 800822e:	4013      	ands	r3, r2
 8008230:	2b00      	cmp	r3, #0
 8008232:	d002      	beq.n	800823a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008234:	2301      	movs	r3, #1
 8008236:	73fb      	strb	r3, [r7, #15]
 8008238:	e001      	b.n	800823e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800823a:	2300      	movs	r3, #0
 800823c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800823e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008240:	4618      	mov	r0, r3
 8008242:	3714      	adds	r7, #20
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	460b      	mov	r3, r1
 8008256:	807b      	strh	r3, [r7, #2]
 8008258:	4613      	mov	r3, r2
 800825a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800825c:	787b      	ldrb	r3, [r7, #1]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d003      	beq.n	800826a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008262:	887a      	ldrh	r2, [r7, #2]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008268:	e002      	b.n	8008270 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800826a:	887a      	ldrh	r2, [r7, #2]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008270:	bf00      	nop
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr

0800827c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800827c:	b480      	push	{r7}
 800827e:	b085      	sub	sp, #20
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d141      	bne.n	800830e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800828a:	4b4b      	ldr	r3, [pc, #300]	; (80083b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008296:	d131      	bne.n	80082fc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008298:	4b47      	ldr	r3, [pc, #284]	; (80083b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800829a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800829e:	4a46      	ldr	r2, [pc, #280]	; (80083b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80082a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80082a8:	4b43      	ldr	r3, [pc, #268]	; (80083b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80082b0:	4a41      	ldr	r2, [pc, #260]	; (80083b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80082b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80082b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80082b8:	4b40      	ldr	r3, [pc, #256]	; (80083bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	2232      	movs	r2, #50	; 0x32
 80082be:	fb02 f303 	mul.w	r3, r2, r3
 80082c2:	4a3f      	ldr	r2, [pc, #252]	; (80083c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80082c4:	fba2 2303 	umull	r2, r3, r2, r3
 80082c8:	0c9b      	lsrs	r3, r3, #18
 80082ca:	3301      	adds	r3, #1
 80082cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80082ce:	e002      	b.n	80082d6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	3b01      	subs	r3, #1
 80082d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80082d6:	4b38      	ldr	r3, [pc, #224]	; (80083b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80082d8:	695b      	ldr	r3, [r3, #20]
 80082da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082e2:	d102      	bne.n	80082ea <HAL_PWREx_ControlVoltageScaling+0x6e>
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d1f2      	bne.n	80082d0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80082ea:	4b33      	ldr	r3, [pc, #204]	; (80083b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80082ec:	695b      	ldr	r3, [r3, #20]
 80082ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082f6:	d158      	bne.n	80083aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80082f8:	2303      	movs	r3, #3
 80082fa:	e057      	b.n	80083ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80082fc:	4b2e      	ldr	r3, [pc, #184]	; (80083b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80082fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008302:	4a2d      	ldr	r2, [pc, #180]	; (80083b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008304:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008308:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800830c:	e04d      	b.n	80083aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008314:	d141      	bne.n	800839a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008316:	4b28      	ldr	r3, [pc, #160]	; (80083b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800831e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008322:	d131      	bne.n	8008388 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008324:	4b24      	ldr	r3, [pc, #144]	; (80083b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008326:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800832a:	4a23      	ldr	r2, [pc, #140]	; (80083b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800832c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008330:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008334:	4b20      	ldr	r3, [pc, #128]	; (80083b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800833c:	4a1e      	ldr	r2, [pc, #120]	; (80083b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800833e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008342:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008344:	4b1d      	ldr	r3, [pc, #116]	; (80083bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	2232      	movs	r2, #50	; 0x32
 800834a:	fb02 f303 	mul.w	r3, r2, r3
 800834e:	4a1c      	ldr	r2, [pc, #112]	; (80083c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008350:	fba2 2303 	umull	r2, r3, r2, r3
 8008354:	0c9b      	lsrs	r3, r3, #18
 8008356:	3301      	adds	r3, #1
 8008358:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800835a:	e002      	b.n	8008362 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	3b01      	subs	r3, #1
 8008360:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008362:	4b15      	ldr	r3, [pc, #84]	; (80083b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008364:	695b      	ldr	r3, [r3, #20]
 8008366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800836a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800836e:	d102      	bne.n	8008376 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d1f2      	bne.n	800835c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008376:	4b10      	ldr	r3, [pc, #64]	; (80083b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008378:	695b      	ldr	r3, [r3, #20]
 800837a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800837e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008382:	d112      	bne.n	80083aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008384:	2303      	movs	r3, #3
 8008386:	e011      	b.n	80083ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008388:	4b0b      	ldr	r3, [pc, #44]	; (80083b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800838a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800838e:	4a0a      	ldr	r2, [pc, #40]	; (80083b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008394:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008398:	e007      	b.n	80083aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800839a:	4b07      	ldr	r3, [pc, #28]	; (80083b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80083a2:	4a05      	ldr	r2, [pc, #20]	; (80083b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80083a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80083a8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80083aa:	2300      	movs	r3, #0
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3714      	adds	r7, #20
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr
 80083b8:	40007000 	.word	0x40007000
 80083bc:	200001d4 	.word	0x200001d4
 80083c0:	431bde83 	.word	0x431bde83

080083c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b088      	sub	sp, #32
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d101      	bne.n	80083d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80083d2:	2301      	movs	r3, #1
 80083d4:	e308      	b.n	80089e8 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f003 0301 	and.w	r3, r3, #1
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d075      	beq.n	80084ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80083e2:	4ba3      	ldr	r3, [pc, #652]	; (8008670 <HAL_RCC_OscConfig+0x2ac>)
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	f003 030c 	and.w	r3, r3, #12
 80083ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80083ec:	4ba0      	ldr	r3, [pc, #640]	; (8008670 <HAL_RCC_OscConfig+0x2ac>)
 80083ee:	68db      	ldr	r3, [r3, #12]
 80083f0:	f003 0303 	and.w	r3, r3, #3
 80083f4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80083f6:	69bb      	ldr	r3, [r7, #24]
 80083f8:	2b0c      	cmp	r3, #12
 80083fa:	d102      	bne.n	8008402 <HAL_RCC_OscConfig+0x3e>
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	2b03      	cmp	r3, #3
 8008400:	d002      	beq.n	8008408 <HAL_RCC_OscConfig+0x44>
 8008402:	69bb      	ldr	r3, [r7, #24]
 8008404:	2b08      	cmp	r3, #8
 8008406:	d10b      	bne.n	8008420 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008408:	4b99      	ldr	r3, [pc, #612]	; (8008670 <HAL_RCC_OscConfig+0x2ac>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008410:	2b00      	cmp	r3, #0
 8008412:	d05b      	beq.n	80084cc <HAL_RCC_OscConfig+0x108>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d157      	bne.n	80084cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800841c:	2301      	movs	r3, #1
 800841e:	e2e3      	b.n	80089e8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008428:	d106      	bne.n	8008438 <HAL_RCC_OscConfig+0x74>
 800842a:	4b91      	ldr	r3, [pc, #580]	; (8008670 <HAL_RCC_OscConfig+0x2ac>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a90      	ldr	r2, [pc, #576]	; (8008670 <HAL_RCC_OscConfig+0x2ac>)
 8008430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008434:	6013      	str	r3, [r2, #0]
 8008436:	e01d      	b.n	8008474 <HAL_RCC_OscConfig+0xb0>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008440:	d10c      	bne.n	800845c <HAL_RCC_OscConfig+0x98>
 8008442:	4b8b      	ldr	r3, [pc, #556]	; (8008670 <HAL_RCC_OscConfig+0x2ac>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a8a      	ldr	r2, [pc, #552]	; (8008670 <HAL_RCC_OscConfig+0x2ac>)
 8008448:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800844c:	6013      	str	r3, [r2, #0]
 800844e:	4b88      	ldr	r3, [pc, #544]	; (8008670 <HAL_RCC_OscConfig+0x2ac>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a87      	ldr	r2, [pc, #540]	; (8008670 <HAL_RCC_OscConfig+0x2ac>)
 8008454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008458:	6013      	str	r3, [r2, #0]
 800845a:	e00b      	b.n	8008474 <HAL_RCC_OscConfig+0xb0>
 800845c:	4b84      	ldr	r3, [pc, #528]	; (8008670 <HAL_RCC_OscConfig+0x2ac>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a83      	ldr	r2, [pc, #524]	; (8008670 <HAL_RCC_OscConfig+0x2ac>)
 8008462:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008466:	6013      	str	r3, [r2, #0]
 8008468:	4b81      	ldr	r3, [pc, #516]	; (8008670 <HAL_RCC_OscConfig+0x2ac>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a80      	ldr	r2, [pc, #512]	; (8008670 <HAL_RCC_OscConfig+0x2ac>)
 800846e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008472:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d013      	beq.n	80084a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800847c:	f7fd f9ee 	bl	800585c <HAL_GetTick>
 8008480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008482:	e008      	b.n	8008496 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008484:	f7fd f9ea 	bl	800585c <HAL_GetTick>
 8008488:	4602      	mov	r2, r0
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	1ad3      	subs	r3, r2, r3
 800848e:	2b64      	cmp	r3, #100	; 0x64
 8008490:	d901      	bls.n	8008496 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008492:	2303      	movs	r3, #3
 8008494:	e2a8      	b.n	80089e8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008496:	4b76      	ldr	r3, [pc, #472]	; (8008670 <HAL_RCC_OscConfig+0x2ac>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d0f0      	beq.n	8008484 <HAL_RCC_OscConfig+0xc0>
 80084a2:	e014      	b.n	80084ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084a4:	f7fd f9da 	bl	800585c <HAL_GetTick>
 80084a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80084aa:	e008      	b.n	80084be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80084ac:	f7fd f9d6 	bl	800585c <HAL_GetTick>
 80084b0:	4602      	mov	r2, r0
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	1ad3      	subs	r3, r2, r3
 80084b6:	2b64      	cmp	r3, #100	; 0x64
 80084b8:	d901      	bls.n	80084be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80084ba:	2303      	movs	r3, #3
 80084bc:	e294      	b.n	80089e8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80084be:	4b6c      	ldr	r3, [pc, #432]	; (8008670 <HAL_RCC_OscConfig+0x2ac>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d1f0      	bne.n	80084ac <HAL_RCC_OscConfig+0xe8>
 80084ca:	e000      	b.n	80084ce <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f003 0302 	and.w	r3, r3, #2
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d075      	beq.n	80085c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80084da:	4b65      	ldr	r3, [pc, #404]	; (8008670 <HAL_RCC_OscConfig+0x2ac>)
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	f003 030c 	and.w	r3, r3, #12
 80084e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80084e4:	4b62      	ldr	r3, [pc, #392]	; (8008670 <HAL_RCC_OscConfig+0x2ac>)
 80084e6:	68db      	ldr	r3, [r3, #12]
 80084e8:	f003 0303 	and.w	r3, r3, #3
 80084ec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	2b0c      	cmp	r3, #12
 80084f2:	d102      	bne.n	80084fa <HAL_RCC_OscConfig+0x136>
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	2b02      	cmp	r3, #2
 80084f8:	d002      	beq.n	8008500 <HAL_RCC_OscConfig+0x13c>
 80084fa:	69bb      	ldr	r3, [r7, #24]
 80084fc:	2b04      	cmp	r3, #4
 80084fe:	d11f      	bne.n	8008540 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008500:	4b5b      	ldr	r3, [pc, #364]	; (8008670 <HAL_RCC_OscConfig+0x2ac>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008508:	2b00      	cmp	r3, #0
 800850a:	d005      	beq.n	8008518 <HAL_RCC_OscConfig+0x154>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	68db      	ldr	r3, [r3, #12]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d101      	bne.n	8008518 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	e267      	b.n	80089e8 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008518:	4b55      	ldr	r3, [pc, #340]	; (8008670 <HAL_RCC_OscConfig+0x2ac>)
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	061b      	lsls	r3, r3, #24
 8008526:	4952      	ldr	r1, [pc, #328]	; (8008670 <HAL_RCC_OscConfig+0x2ac>)
 8008528:	4313      	orrs	r3, r2
 800852a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800852c:	4b51      	ldr	r3, [pc, #324]	; (8008674 <HAL_RCC_OscConfig+0x2b0>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4618      	mov	r0, r3
 8008532:	f7fd f947 	bl	80057c4 <HAL_InitTick>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d043      	beq.n	80085c4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800853c:	2301      	movs	r3, #1
 800853e:	e253      	b.n	80089e8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d023      	beq.n	8008590 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008548:	4b49      	ldr	r3, [pc, #292]	; (8008670 <HAL_RCC_OscConfig+0x2ac>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a48      	ldr	r2, [pc, #288]	; (8008670 <HAL_RCC_OscConfig+0x2ac>)
 800854e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008552:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008554:	f7fd f982 	bl	800585c <HAL_GetTick>
 8008558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800855a:	e008      	b.n	800856e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800855c:	f7fd f97e 	bl	800585c <HAL_GetTick>
 8008560:	4602      	mov	r2, r0
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	1ad3      	subs	r3, r2, r3
 8008566:	2b02      	cmp	r3, #2
 8008568:	d901      	bls.n	800856e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800856a:	2303      	movs	r3, #3
 800856c:	e23c      	b.n	80089e8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800856e:	4b40      	ldr	r3, [pc, #256]	; (8008670 <HAL_RCC_OscConfig+0x2ac>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008576:	2b00      	cmp	r3, #0
 8008578:	d0f0      	beq.n	800855c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800857a:	4b3d      	ldr	r3, [pc, #244]	; (8008670 <HAL_RCC_OscConfig+0x2ac>)
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	691b      	ldr	r3, [r3, #16]
 8008586:	061b      	lsls	r3, r3, #24
 8008588:	4939      	ldr	r1, [pc, #228]	; (8008670 <HAL_RCC_OscConfig+0x2ac>)
 800858a:	4313      	orrs	r3, r2
 800858c:	604b      	str	r3, [r1, #4]
 800858e:	e01a      	b.n	80085c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008590:	4b37      	ldr	r3, [pc, #220]	; (8008670 <HAL_RCC_OscConfig+0x2ac>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a36      	ldr	r2, [pc, #216]	; (8008670 <HAL_RCC_OscConfig+0x2ac>)
 8008596:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800859a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800859c:	f7fd f95e 	bl	800585c <HAL_GetTick>
 80085a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80085a2:	e008      	b.n	80085b6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80085a4:	f7fd f95a 	bl	800585c <HAL_GetTick>
 80085a8:	4602      	mov	r2, r0
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	1ad3      	subs	r3, r2, r3
 80085ae:	2b02      	cmp	r3, #2
 80085b0:	d901      	bls.n	80085b6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80085b2:	2303      	movs	r3, #3
 80085b4:	e218      	b.n	80089e8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80085b6:	4b2e      	ldr	r3, [pc, #184]	; (8008670 <HAL_RCC_OscConfig+0x2ac>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d1f0      	bne.n	80085a4 <HAL_RCC_OscConfig+0x1e0>
 80085c2:	e000      	b.n	80085c6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80085c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f003 0308 	and.w	r3, r3, #8
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d03c      	beq.n	800864c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	695b      	ldr	r3, [r3, #20]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d01c      	beq.n	8008614 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80085da:	4b25      	ldr	r3, [pc, #148]	; (8008670 <HAL_RCC_OscConfig+0x2ac>)
 80085dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80085e0:	4a23      	ldr	r2, [pc, #140]	; (8008670 <HAL_RCC_OscConfig+0x2ac>)
 80085e2:	f043 0301 	orr.w	r3, r3, #1
 80085e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085ea:	f7fd f937 	bl	800585c <HAL_GetTick>
 80085ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80085f0:	e008      	b.n	8008604 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80085f2:	f7fd f933 	bl	800585c <HAL_GetTick>
 80085f6:	4602      	mov	r2, r0
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	1ad3      	subs	r3, r2, r3
 80085fc:	2b02      	cmp	r3, #2
 80085fe:	d901      	bls.n	8008604 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008600:	2303      	movs	r3, #3
 8008602:	e1f1      	b.n	80089e8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008604:	4b1a      	ldr	r3, [pc, #104]	; (8008670 <HAL_RCC_OscConfig+0x2ac>)
 8008606:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800860a:	f003 0302 	and.w	r3, r3, #2
 800860e:	2b00      	cmp	r3, #0
 8008610:	d0ef      	beq.n	80085f2 <HAL_RCC_OscConfig+0x22e>
 8008612:	e01b      	b.n	800864c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008614:	4b16      	ldr	r3, [pc, #88]	; (8008670 <HAL_RCC_OscConfig+0x2ac>)
 8008616:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800861a:	4a15      	ldr	r2, [pc, #84]	; (8008670 <HAL_RCC_OscConfig+0x2ac>)
 800861c:	f023 0301 	bic.w	r3, r3, #1
 8008620:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008624:	f7fd f91a 	bl	800585c <HAL_GetTick>
 8008628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800862a:	e008      	b.n	800863e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800862c:	f7fd f916 	bl	800585c <HAL_GetTick>
 8008630:	4602      	mov	r2, r0
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	1ad3      	subs	r3, r2, r3
 8008636:	2b02      	cmp	r3, #2
 8008638:	d901      	bls.n	800863e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800863a:	2303      	movs	r3, #3
 800863c:	e1d4      	b.n	80089e8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800863e:	4b0c      	ldr	r3, [pc, #48]	; (8008670 <HAL_RCC_OscConfig+0x2ac>)
 8008640:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008644:	f003 0302 	and.w	r3, r3, #2
 8008648:	2b00      	cmp	r3, #0
 800864a:	d1ef      	bne.n	800862c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f003 0304 	and.w	r3, r3, #4
 8008654:	2b00      	cmp	r3, #0
 8008656:	f000 80ab 	beq.w	80087b0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800865a:	2300      	movs	r3, #0
 800865c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800865e:	4b04      	ldr	r3, [pc, #16]	; (8008670 <HAL_RCC_OscConfig+0x2ac>)
 8008660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008666:	2b00      	cmp	r3, #0
 8008668:	d106      	bne.n	8008678 <HAL_RCC_OscConfig+0x2b4>
 800866a:	2301      	movs	r3, #1
 800866c:	e005      	b.n	800867a <HAL_RCC_OscConfig+0x2b6>
 800866e:	bf00      	nop
 8008670:	40021000 	.word	0x40021000
 8008674:	200001d8 	.word	0x200001d8
 8008678:	2300      	movs	r3, #0
 800867a:	2b00      	cmp	r3, #0
 800867c:	d00d      	beq.n	800869a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800867e:	4baf      	ldr	r3, [pc, #700]	; (800893c <HAL_RCC_OscConfig+0x578>)
 8008680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008682:	4aae      	ldr	r2, [pc, #696]	; (800893c <HAL_RCC_OscConfig+0x578>)
 8008684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008688:	6593      	str	r3, [r2, #88]	; 0x58
 800868a:	4bac      	ldr	r3, [pc, #688]	; (800893c <HAL_RCC_OscConfig+0x578>)
 800868c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800868e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008692:	60fb      	str	r3, [r7, #12]
 8008694:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008696:	2301      	movs	r3, #1
 8008698:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800869a:	4ba9      	ldr	r3, [pc, #676]	; (8008940 <HAL_RCC_OscConfig+0x57c>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d118      	bne.n	80086d8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80086a6:	4ba6      	ldr	r3, [pc, #664]	; (8008940 <HAL_RCC_OscConfig+0x57c>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4aa5      	ldr	r2, [pc, #660]	; (8008940 <HAL_RCC_OscConfig+0x57c>)
 80086ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80086b2:	f7fd f8d3 	bl	800585c <HAL_GetTick>
 80086b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80086b8:	e008      	b.n	80086cc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80086ba:	f7fd f8cf 	bl	800585c <HAL_GetTick>
 80086be:	4602      	mov	r2, r0
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	1ad3      	subs	r3, r2, r3
 80086c4:	2b02      	cmp	r3, #2
 80086c6:	d901      	bls.n	80086cc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80086c8:	2303      	movs	r3, #3
 80086ca:	e18d      	b.n	80089e8 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80086cc:	4b9c      	ldr	r3, [pc, #624]	; (8008940 <HAL_RCC_OscConfig+0x57c>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d0f0      	beq.n	80086ba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	689b      	ldr	r3, [r3, #8]
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d108      	bne.n	80086f2 <HAL_RCC_OscConfig+0x32e>
 80086e0:	4b96      	ldr	r3, [pc, #600]	; (800893c <HAL_RCC_OscConfig+0x578>)
 80086e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086e6:	4a95      	ldr	r2, [pc, #596]	; (800893c <HAL_RCC_OscConfig+0x578>)
 80086e8:	f043 0301 	orr.w	r3, r3, #1
 80086ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80086f0:	e024      	b.n	800873c <HAL_RCC_OscConfig+0x378>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	2b05      	cmp	r3, #5
 80086f8:	d110      	bne.n	800871c <HAL_RCC_OscConfig+0x358>
 80086fa:	4b90      	ldr	r3, [pc, #576]	; (800893c <HAL_RCC_OscConfig+0x578>)
 80086fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008700:	4a8e      	ldr	r2, [pc, #568]	; (800893c <HAL_RCC_OscConfig+0x578>)
 8008702:	f043 0304 	orr.w	r3, r3, #4
 8008706:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800870a:	4b8c      	ldr	r3, [pc, #560]	; (800893c <HAL_RCC_OscConfig+0x578>)
 800870c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008710:	4a8a      	ldr	r2, [pc, #552]	; (800893c <HAL_RCC_OscConfig+0x578>)
 8008712:	f043 0301 	orr.w	r3, r3, #1
 8008716:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800871a:	e00f      	b.n	800873c <HAL_RCC_OscConfig+0x378>
 800871c:	4b87      	ldr	r3, [pc, #540]	; (800893c <HAL_RCC_OscConfig+0x578>)
 800871e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008722:	4a86      	ldr	r2, [pc, #536]	; (800893c <HAL_RCC_OscConfig+0x578>)
 8008724:	f023 0301 	bic.w	r3, r3, #1
 8008728:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800872c:	4b83      	ldr	r3, [pc, #524]	; (800893c <HAL_RCC_OscConfig+0x578>)
 800872e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008732:	4a82      	ldr	r2, [pc, #520]	; (800893c <HAL_RCC_OscConfig+0x578>)
 8008734:	f023 0304 	bic.w	r3, r3, #4
 8008738:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d016      	beq.n	8008772 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008744:	f7fd f88a 	bl	800585c <HAL_GetTick>
 8008748:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800874a:	e00a      	b.n	8008762 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800874c:	f7fd f886 	bl	800585c <HAL_GetTick>
 8008750:	4602      	mov	r2, r0
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	1ad3      	subs	r3, r2, r3
 8008756:	f241 3288 	movw	r2, #5000	; 0x1388
 800875a:	4293      	cmp	r3, r2
 800875c:	d901      	bls.n	8008762 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800875e:	2303      	movs	r3, #3
 8008760:	e142      	b.n	80089e8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008762:	4b76      	ldr	r3, [pc, #472]	; (800893c <HAL_RCC_OscConfig+0x578>)
 8008764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008768:	f003 0302 	and.w	r3, r3, #2
 800876c:	2b00      	cmp	r3, #0
 800876e:	d0ed      	beq.n	800874c <HAL_RCC_OscConfig+0x388>
 8008770:	e015      	b.n	800879e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008772:	f7fd f873 	bl	800585c <HAL_GetTick>
 8008776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008778:	e00a      	b.n	8008790 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800877a:	f7fd f86f 	bl	800585c <HAL_GetTick>
 800877e:	4602      	mov	r2, r0
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	1ad3      	subs	r3, r2, r3
 8008784:	f241 3288 	movw	r2, #5000	; 0x1388
 8008788:	4293      	cmp	r3, r2
 800878a:	d901      	bls.n	8008790 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800878c:	2303      	movs	r3, #3
 800878e:	e12b      	b.n	80089e8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008790:	4b6a      	ldr	r3, [pc, #424]	; (800893c <HAL_RCC_OscConfig+0x578>)
 8008792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008796:	f003 0302 	and.w	r3, r3, #2
 800879a:	2b00      	cmp	r3, #0
 800879c:	d1ed      	bne.n	800877a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800879e:	7ffb      	ldrb	r3, [r7, #31]
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d105      	bne.n	80087b0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80087a4:	4b65      	ldr	r3, [pc, #404]	; (800893c <HAL_RCC_OscConfig+0x578>)
 80087a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087a8:	4a64      	ldr	r2, [pc, #400]	; (800893c <HAL_RCC_OscConfig+0x578>)
 80087aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087ae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f003 0320 	and.w	r3, r3, #32
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d03c      	beq.n	8008836 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	699b      	ldr	r3, [r3, #24]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d01c      	beq.n	80087fe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80087c4:	4b5d      	ldr	r3, [pc, #372]	; (800893c <HAL_RCC_OscConfig+0x578>)
 80087c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80087ca:	4a5c      	ldr	r2, [pc, #368]	; (800893c <HAL_RCC_OscConfig+0x578>)
 80087cc:	f043 0301 	orr.w	r3, r3, #1
 80087d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087d4:	f7fd f842 	bl	800585c <HAL_GetTick>
 80087d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80087da:	e008      	b.n	80087ee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80087dc:	f7fd f83e 	bl	800585c <HAL_GetTick>
 80087e0:	4602      	mov	r2, r0
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	1ad3      	subs	r3, r2, r3
 80087e6:	2b02      	cmp	r3, #2
 80087e8:	d901      	bls.n	80087ee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80087ea:	2303      	movs	r3, #3
 80087ec:	e0fc      	b.n	80089e8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80087ee:	4b53      	ldr	r3, [pc, #332]	; (800893c <HAL_RCC_OscConfig+0x578>)
 80087f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80087f4:	f003 0302 	and.w	r3, r3, #2
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d0ef      	beq.n	80087dc <HAL_RCC_OscConfig+0x418>
 80087fc:	e01b      	b.n	8008836 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80087fe:	4b4f      	ldr	r3, [pc, #316]	; (800893c <HAL_RCC_OscConfig+0x578>)
 8008800:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008804:	4a4d      	ldr	r2, [pc, #308]	; (800893c <HAL_RCC_OscConfig+0x578>)
 8008806:	f023 0301 	bic.w	r3, r3, #1
 800880a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800880e:	f7fd f825 	bl	800585c <HAL_GetTick>
 8008812:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008814:	e008      	b.n	8008828 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008816:	f7fd f821 	bl	800585c <HAL_GetTick>
 800881a:	4602      	mov	r2, r0
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	1ad3      	subs	r3, r2, r3
 8008820:	2b02      	cmp	r3, #2
 8008822:	d901      	bls.n	8008828 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008824:	2303      	movs	r3, #3
 8008826:	e0df      	b.n	80089e8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008828:	4b44      	ldr	r3, [pc, #272]	; (800893c <HAL_RCC_OscConfig+0x578>)
 800882a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800882e:	f003 0302 	and.w	r3, r3, #2
 8008832:	2b00      	cmp	r3, #0
 8008834:	d1ef      	bne.n	8008816 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	69db      	ldr	r3, [r3, #28]
 800883a:	2b00      	cmp	r3, #0
 800883c:	f000 80d3 	beq.w	80089e6 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008840:	4b3e      	ldr	r3, [pc, #248]	; (800893c <HAL_RCC_OscConfig+0x578>)
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	f003 030c 	and.w	r3, r3, #12
 8008848:	2b0c      	cmp	r3, #12
 800884a:	f000 808d 	beq.w	8008968 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	69db      	ldr	r3, [r3, #28]
 8008852:	2b02      	cmp	r3, #2
 8008854:	d15a      	bne.n	800890c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008856:	4b39      	ldr	r3, [pc, #228]	; (800893c <HAL_RCC_OscConfig+0x578>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a38      	ldr	r2, [pc, #224]	; (800893c <HAL_RCC_OscConfig+0x578>)
 800885c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008860:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008862:	f7fc fffb 	bl	800585c <HAL_GetTick>
 8008866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008868:	e008      	b.n	800887c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800886a:	f7fc fff7 	bl	800585c <HAL_GetTick>
 800886e:	4602      	mov	r2, r0
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	1ad3      	subs	r3, r2, r3
 8008874:	2b02      	cmp	r3, #2
 8008876:	d901      	bls.n	800887c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8008878:	2303      	movs	r3, #3
 800887a:	e0b5      	b.n	80089e8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800887c:	4b2f      	ldr	r3, [pc, #188]	; (800893c <HAL_RCC_OscConfig+0x578>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008884:	2b00      	cmp	r3, #0
 8008886:	d1f0      	bne.n	800886a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008888:	4b2c      	ldr	r3, [pc, #176]	; (800893c <HAL_RCC_OscConfig+0x578>)
 800888a:	68da      	ldr	r2, [r3, #12]
 800888c:	4b2d      	ldr	r3, [pc, #180]	; (8008944 <HAL_RCC_OscConfig+0x580>)
 800888e:	4013      	ands	r3, r2
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	6a11      	ldr	r1, [r2, #32]
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008898:	3a01      	subs	r2, #1
 800889a:	0112      	lsls	r2, r2, #4
 800889c:	4311      	orrs	r1, r2
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80088a2:	0212      	lsls	r2, r2, #8
 80088a4:	4311      	orrs	r1, r2
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80088aa:	0852      	lsrs	r2, r2, #1
 80088ac:	3a01      	subs	r2, #1
 80088ae:	0552      	lsls	r2, r2, #21
 80088b0:	4311      	orrs	r1, r2
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80088b6:	0852      	lsrs	r2, r2, #1
 80088b8:	3a01      	subs	r2, #1
 80088ba:	0652      	lsls	r2, r2, #25
 80088bc:	4311      	orrs	r1, r2
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80088c2:	06d2      	lsls	r2, r2, #27
 80088c4:	430a      	orrs	r2, r1
 80088c6:	491d      	ldr	r1, [pc, #116]	; (800893c <HAL_RCC_OscConfig+0x578>)
 80088c8:	4313      	orrs	r3, r2
 80088ca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80088cc:	4b1b      	ldr	r3, [pc, #108]	; (800893c <HAL_RCC_OscConfig+0x578>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a1a      	ldr	r2, [pc, #104]	; (800893c <HAL_RCC_OscConfig+0x578>)
 80088d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80088d6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80088d8:	4b18      	ldr	r3, [pc, #96]	; (800893c <HAL_RCC_OscConfig+0x578>)
 80088da:	68db      	ldr	r3, [r3, #12]
 80088dc:	4a17      	ldr	r2, [pc, #92]	; (800893c <HAL_RCC_OscConfig+0x578>)
 80088de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80088e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088e4:	f7fc ffba 	bl	800585c <HAL_GetTick>
 80088e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80088ea:	e008      	b.n	80088fe <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088ec:	f7fc ffb6 	bl	800585c <HAL_GetTick>
 80088f0:	4602      	mov	r2, r0
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	1ad3      	subs	r3, r2, r3
 80088f6:	2b02      	cmp	r3, #2
 80088f8:	d901      	bls.n	80088fe <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80088fa:	2303      	movs	r3, #3
 80088fc:	e074      	b.n	80089e8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80088fe:	4b0f      	ldr	r3, [pc, #60]	; (800893c <HAL_RCC_OscConfig+0x578>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008906:	2b00      	cmp	r3, #0
 8008908:	d0f0      	beq.n	80088ec <HAL_RCC_OscConfig+0x528>
 800890a:	e06c      	b.n	80089e6 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800890c:	4b0b      	ldr	r3, [pc, #44]	; (800893c <HAL_RCC_OscConfig+0x578>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a0a      	ldr	r2, [pc, #40]	; (800893c <HAL_RCC_OscConfig+0x578>)
 8008912:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008916:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8008918:	4b08      	ldr	r3, [pc, #32]	; (800893c <HAL_RCC_OscConfig+0x578>)
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	4a07      	ldr	r2, [pc, #28]	; (800893c <HAL_RCC_OscConfig+0x578>)
 800891e:	f023 0303 	bic.w	r3, r3, #3
 8008922:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008924:	4b05      	ldr	r3, [pc, #20]	; (800893c <HAL_RCC_OscConfig+0x578>)
 8008926:	68db      	ldr	r3, [r3, #12]
 8008928:	4a04      	ldr	r2, [pc, #16]	; (800893c <HAL_RCC_OscConfig+0x578>)
 800892a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800892e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008932:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008934:	f7fc ff92 	bl	800585c <HAL_GetTick>
 8008938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800893a:	e00e      	b.n	800895a <HAL_RCC_OscConfig+0x596>
 800893c:	40021000 	.word	0x40021000
 8008940:	40007000 	.word	0x40007000
 8008944:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008948:	f7fc ff88 	bl	800585c <HAL_GetTick>
 800894c:	4602      	mov	r2, r0
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	1ad3      	subs	r3, r2, r3
 8008952:	2b02      	cmp	r3, #2
 8008954:	d901      	bls.n	800895a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8008956:	2303      	movs	r3, #3
 8008958:	e046      	b.n	80089e8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800895a:	4b25      	ldr	r3, [pc, #148]	; (80089f0 <HAL_RCC_OscConfig+0x62c>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008962:	2b00      	cmp	r3, #0
 8008964:	d1f0      	bne.n	8008948 <HAL_RCC_OscConfig+0x584>
 8008966:	e03e      	b.n	80089e6 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	69db      	ldr	r3, [r3, #28]
 800896c:	2b01      	cmp	r3, #1
 800896e:	d101      	bne.n	8008974 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8008970:	2301      	movs	r3, #1
 8008972:	e039      	b.n	80089e8 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008974:	4b1e      	ldr	r3, [pc, #120]	; (80089f0 <HAL_RCC_OscConfig+0x62c>)
 8008976:	68db      	ldr	r3, [r3, #12]
 8008978:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	f003 0203 	and.w	r2, r3, #3
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6a1b      	ldr	r3, [r3, #32]
 8008984:	429a      	cmp	r2, r3
 8008986:	d12c      	bne.n	80089e2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008992:	3b01      	subs	r3, #1
 8008994:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008996:	429a      	cmp	r2, r3
 8008998:	d123      	bne.n	80089e2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d11b      	bne.n	80089e2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d113      	bne.n	80089e2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089c4:	085b      	lsrs	r3, r3, #1
 80089c6:	3b01      	subs	r3, #1
 80089c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d109      	bne.n	80089e2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089d8:	085b      	lsrs	r3, r3, #1
 80089da:	3b01      	subs	r3, #1
 80089dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80089de:	429a      	cmp	r2, r3
 80089e0:	d001      	beq.n	80089e6 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80089e2:	2301      	movs	r3, #1
 80089e4:	e000      	b.n	80089e8 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80089e6:	2300      	movs	r3, #0
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3720      	adds	r7, #32
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}
 80089f0:	40021000 	.word	0x40021000

080089f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b086      	sub	sp, #24
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80089fe:	2300      	movs	r3, #0
 8008a00:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d101      	bne.n	8008a0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008a08:	2301      	movs	r3, #1
 8008a0a:	e11e      	b.n	8008c4a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008a0c:	4b91      	ldr	r3, [pc, #580]	; (8008c54 <HAL_RCC_ClockConfig+0x260>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f003 030f 	and.w	r3, r3, #15
 8008a14:	683a      	ldr	r2, [r7, #0]
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d910      	bls.n	8008a3c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a1a:	4b8e      	ldr	r3, [pc, #568]	; (8008c54 <HAL_RCC_ClockConfig+0x260>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f023 020f 	bic.w	r2, r3, #15
 8008a22:	498c      	ldr	r1, [pc, #560]	; (8008c54 <HAL_RCC_ClockConfig+0x260>)
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	4313      	orrs	r3, r2
 8008a28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a2a:	4b8a      	ldr	r3, [pc, #552]	; (8008c54 <HAL_RCC_ClockConfig+0x260>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f003 030f 	and.w	r3, r3, #15
 8008a32:	683a      	ldr	r2, [r7, #0]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d001      	beq.n	8008a3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	e106      	b.n	8008c4a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f003 0301 	and.w	r3, r3, #1
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d073      	beq.n	8008b30 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	2b03      	cmp	r3, #3
 8008a4e:	d129      	bne.n	8008aa4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a50:	4b81      	ldr	r3, [pc, #516]	; (8008c58 <HAL_RCC_ClockConfig+0x264>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d101      	bne.n	8008a60 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	e0f4      	b.n	8008c4a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008a60:	f000 f972 	bl	8008d48 <RCC_GetSysClockFreqFromPLLSource>
 8008a64:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	4a7c      	ldr	r2, [pc, #496]	; (8008c5c <HAL_RCC_ClockConfig+0x268>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d93f      	bls.n	8008aee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008a6e:	4b7a      	ldr	r3, [pc, #488]	; (8008c58 <HAL_RCC_ClockConfig+0x264>)
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d009      	beq.n	8008a8e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d033      	beq.n	8008aee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d12f      	bne.n	8008aee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008a8e:	4b72      	ldr	r3, [pc, #456]	; (8008c58 <HAL_RCC_ClockConfig+0x264>)
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a96:	4a70      	ldr	r2, [pc, #448]	; (8008c58 <HAL_RCC_ClockConfig+0x264>)
 8008a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a9c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008a9e:	2380      	movs	r3, #128	; 0x80
 8008aa0:	617b      	str	r3, [r7, #20]
 8008aa2:	e024      	b.n	8008aee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	2b02      	cmp	r3, #2
 8008aaa:	d107      	bne.n	8008abc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008aac:	4b6a      	ldr	r3, [pc, #424]	; (8008c58 <HAL_RCC_ClockConfig+0x264>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d109      	bne.n	8008acc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	e0c6      	b.n	8008c4a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008abc:	4b66      	ldr	r3, [pc, #408]	; (8008c58 <HAL_RCC_ClockConfig+0x264>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d101      	bne.n	8008acc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008ac8:	2301      	movs	r3, #1
 8008aca:	e0be      	b.n	8008c4a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008acc:	f000 f8ce 	bl	8008c6c <HAL_RCC_GetSysClockFreq>
 8008ad0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	4a61      	ldr	r2, [pc, #388]	; (8008c5c <HAL_RCC_ClockConfig+0x268>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d909      	bls.n	8008aee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008ada:	4b5f      	ldr	r3, [pc, #380]	; (8008c58 <HAL_RCC_ClockConfig+0x264>)
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008ae2:	4a5d      	ldr	r2, [pc, #372]	; (8008c58 <HAL_RCC_ClockConfig+0x264>)
 8008ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ae8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008aea:	2380      	movs	r3, #128	; 0x80
 8008aec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008aee:	4b5a      	ldr	r3, [pc, #360]	; (8008c58 <HAL_RCC_ClockConfig+0x264>)
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	f023 0203 	bic.w	r2, r3, #3
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	4957      	ldr	r1, [pc, #348]	; (8008c58 <HAL_RCC_ClockConfig+0x264>)
 8008afc:	4313      	orrs	r3, r2
 8008afe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b00:	f7fc feac 	bl	800585c <HAL_GetTick>
 8008b04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b06:	e00a      	b.n	8008b1e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b08:	f7fc fea8 	bl	800585c <HAL_GetTick>
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	1ad3      	subs	r3, r2, r3
 8008b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d901      	bls.n	8008b1e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008b1a:	2303      	movs	r3, #3
 8008b1c:	e095      	b.n	8008c4a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b1e:	4b4e      	ldr	r3, [pc, #312]	; (8008c58 <HAL_RCC_ClockConfig+0x264>)
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	f003 020c 	and.w	r2, r3, #12
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d1eb      	bne.n	8008b08 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f003 0302 	and.w	r3, r3, #2
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d023      	beq.n	8008b84 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f003 0304 	and.w	r3, r3, #4
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d005      	beq.n	8008b54 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008b48:	4b43      	ldr	r3, [pc, #268]	; (8008c58 <HAL_RCC_ClockConfig+0x264>)
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	4a42      	ldr	r2, [pc, #264]	; (8008c58 <HAL_RCC_ClockConfig+0x264>)
 8008b4e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008b52:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f003 0308 	and.w	r3, r3, #8
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d007      	beq.n	8008b70 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008b60:	4b3d      	ldr	r3, [pc, #244]	; (8008c58 <HAL_RCC_ClockConfig+0x264>)
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008b68:	4a3b      	ldr	r2, [pc, #236]	; (8008c58 <HAL_RCC_ClockConfig+0x264>)
 8008b6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008b6e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b70:	4b39      	ldr	r3, [pc, #228]	; (8008c58 <HAL_RCC_ClockConfig+0x264>)
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	4936      	ldr	r1, [pc, #216]	; (8008c58 <HAL_RCC_ClockConfig+0x264>)
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	608b      	str	r3, [r1, #8]
 8008b82:	e008      	b.n	8008b96 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	2b80      	cmp	r3, #128	; 0x80
 8008b88:	d105      	bne.n	8008b96 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008b8a:	4b33      	ldr	r3, [pc, #204]	; (8008c58 <HAL_RCC_ClockConfig+0x264>)
 8008b8c:	689b      	ldr	r3, [r3, #8]
 8008b8e:	4a32      	ldr	r2, [pc, #200]	; (8008c58 <HAL_RCC_ClockConfig+0x264>)
 8008b90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b94:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008b96:	4b2f      	ldr	r3, [pc, #188]	; (8008c54 <HAL_RCC_ClockConfig+0x260>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f003 030f 	and.w	r3, r3, #15
 8008b9e:	683a      	ldr	r2, [r7, #0]
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d21d      	bcs.n	8008be0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ba4:	4b2b      	ldr	r3, [pc, #172]	; (8008c54 <HAL_RCC_ClockConfig+0x260>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f023 020f 	bic.w	r2, r3, #15
 8008bac:	4929      	ldr	r1, [pc, #164]	; (8008c54 <HAL_RCC_ClockConfig+0x260>)
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008bb4:	f7fc fe52 	bl	800585c <HAL_GetTick>
 8008bb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bba:	e00a      	b.n	8008bd2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008bbc:	f7fc fe4e 	bl	800585c <HAL_GetTick>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	1ad3      	subs	r3, r2, r3
 8008bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d901      	bls.n	8008bd2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008bce:	2303      	movs	r3, #3
 8008bd0:	e03b      	b.n	8008c4a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bd2:	4b20      	ldr	r3, [pc, #128]	; (8008c54 <HAL_RCC_ClockConfig+0x260>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f003 030f 	and.w	r3, r3, #15
 8008bda:	683a      	ldr	r2, [r7, #0]
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d1ed      	bne.n	8008bbc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f003 0304 	and.w	r3, r3, #4
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d008      	beq.n	8008bfe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008bec:	4b1a      	ldr	r3, [pc, #104]	; (8008c58 <HAL_RCC_ClockConfig+0x264>)
 8008bee:	689b      	ldr	r3, [r3, #8]
 8008bf0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	68db      	ldr	r3, [r3, #12]
 8008bf8:	4917      	ldr	r1, [pc, #92]	; (8008c58 <HAL_RCC_ClockConfig+0x264>)
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f003 0308 	and.w	r3, r3, #8
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d009      	beq.n	8008c1e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008c0a:	4b13      	ldr	r3, [pc, #76]	; (8008c58 <HAL_RCC_ClockConfig+0x264>)
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	691b      	ldr	r3, [r3, #16]
 8008c16:	00db      	lsls	r3, r3, #3
 8008c18:	490f      	ldr	r1, [pc, #60]	; (8008c58 <HAL_RCC_ClockConfig+0x264>)
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008c1e:	f000 f825 	bl	8008c6c <HAL_RCC_GetSysClockFreq>
 8008c22:	4601      	mov	r1, r0
 8008c24:	4b0c      	ldr	r3, [pc, #48]	; (8008c58 <HAL_RCC_ClockConfig+0x264>)
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	091b      	lsrs	r3, r3, #4
 8008c2a:	f003 030f 	and.w	r3, r3, #15
 8008c2e:	4a0c      	ldr	r2, [pc, #48]	; (8008c60 <HAL_RCC_ClockConfig+0x26c>)
 8008c30:	5cd3      	ldrb	r3, [r2, r3]
 8008c32:	f003 031f 	and.w	r3, r3, #31
 8008c36:	fa21 f303 	lsr.w	r3, r1, r3
 8008c3a:	4a0a      	ldr	r2, [pc, #40]	; (8008c64 <HAL_RCC_ClockConfig+0x270>)
 8008c3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008c3e:	4b0a      	ldr	r3, [pc, #40]	; (8008c68 <HAL_RCC_ClockConfig+0x274>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7fc fdbe 	bl	80057c4 <HAL_InitTick>
 8008c48:	4603      	mov	r3, r0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3718      	adds	r7, #24
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	40022000 	.word	0x40022000
 8008c58:	40021000 	.word	0x40021000
 8008c5c:	04c4b400 	.word	0x04c4b400
 8008c60:	0800ebb0 	.word	0x0800ebb0
 8008c64:	200001d4 	.word	0x200001d4
 8008c68:	200001d8 	.word	0x200001d8

08008c6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b087      	sub	sp, #28
 8008c70:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008c72:	4b2c      	ldr	r3, [pc, #176]	; (8008d24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	f003 030c 	and.w	r3, r3, #12
 8008c7a:	2b04      	cmp	r3, #4
 8008c7c:	d102      	bne.n	8008c84 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008c7e:	4b2a      	ldr	r3, [pc, #168]	; (8008d28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008c80:	613b      	str	r3, [r7, #16]
 8008c82:	e047      	b.n	8008d14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008c84:	4b27      	ldr	r3, [pc, #156]	; (8008d24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008c86:	689b      	ldr	r3, [r3, #8]
 8008c88:	f003 030c 	and.w	r3, r3, #12
 8008c8c:	2b08      	cmp	r3, #8
 8008c8e:	d102      	bne.n	8008c96 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008c90:	4b26      	ldr	r3, [pc, #152]	; (8008d2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8008c92:	613b      	str	r3, [r7, #16]
 8008c94:	e03e      	b.n	8008d14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008c96:	4b23      	ldr	r3, [pc, #140]	; (8008d24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008c98:	689b      	ldr	r3, [r3, #8]
 8008c9a:	f003 030c 	and.w	r3, r3, #12
 8008c9e:	2b0c      	cmp	r3, #12
 8008ca0:	d136      	bne.n	8008d10 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008ca2:	4b20      	ldr	r3, [pc, #128]	; (8008d24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008ca4:	68db      	ldr	r3, [r3, #12]
 8008ca6:	f003 0303 	and.w	r3, r3, #3
 8008caa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008cac:	4b1d      	ldr	r3, [pc, #116]	; (8008d24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008cae:	68db      	ldr	r3, [r3, #12]
 8008cb0:	091b      	lsrs	r3, r3, #4
 8008cb2:	f003 030f 	and.w	r3, r3, #15
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2b03      	cmp	r3, #3
 8008cbe:	d10c      	bne.n	8008cda <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008cc0:	4a1a      	ldr	r2, [pc, #104]	; (8008d2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cc8:	4a16      	ldr	r2, [pc, #88]	; (8008d24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008cca:	68d2      	ldr	r2, [r2, #12]
 8008ccc:	0a12      	lsrs	r2, r2, #8
 8008cce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008cd2:	fb02 f303 	mul.w	r3, r2, r3
 8008cd6:	617b      	str	r3, [r7, #20]
      break;
 8008cd8:	e00c      	b.n	8008cf4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008cda:	4a13      	ldr	r2, [pc, #76]	; (8008d28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ce2:	4a10      	ldr	r2, [pc, #64]	; (8008d24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008ce4:	68d2      	ldr	r2, [r2, #12]
 8008ce6:	0a12      	lsrs	r2, r2, #8
 8008ce8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008cec:	fb02 f303 	mul.w	r3, r2, r3
 8008cf0:	617b      	str	r3, [r7, #20]
      break;
 8008cf2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008cf4:	4b0b      	ldr	r3, [pc, #44]	; (8008d24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008cf6:	68db      	ldr	r3, [r3, #12]
 8008cf8:	0e5b      	lsrs	r3, r3, #25
 8008cfa:	f003 0303 	and.w	r3, r3, #3
 8008cfe:	3301      	adds	r3, #1
 8008d00:	005b      	lsls	r3, r3, #1
 8008d02:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008d04:	697a      	ldr	r2, [r7, #20]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d0c:	613b      	str	r3, [r7, #16]
 8008d0e:	e001      	b.n	8008d14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008d10:	2300      	movs	r3, #0
 8008d12:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008d14:	693b      	ldr	r3, [r7, #16]
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	371c      	adds	r7, #28
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr
 8008d22:	bf00      	nop
 8008d24:	40021000 	.word	0x40021000
 8008d28:	00f42400 	.word	0x00f42400
 8008d2c:	007a1200 	.word	0x007a1200

08008d30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d30:	b480      	push	{r7}
 8008d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008d34:	4b03      	ldr	r3, [pc, #12]	; (8008d44 <HAL_RCC_GetHCLKFreq+0x14>)
 8008d36:	681b      	ldr	r3, [r3, #0]
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr
 8008d42:	bf00      	nop
 8008d44:	200001d4 	.word	0x200001d4

08008d48 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b087      	sub	sp, #28
 8008d4c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008d4e:	4b1e      	ldr	r3, [pc, #120]	; (8008dc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008d50:	68db      	ldr	r3, [r3, #12]
 8008d52:	f003 0303 	and.w	r3, r3, #3
 8008d56:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008d58:	4b1b      	ldr	r3, [pc, #108]	; (8008dc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	091b      	lsrs	r3, r3, #4
 8008d5e:	f003 030f 	and.w	r3, r3, #15
 8008d62:	3301      	adds	r3, #1
 8008d64:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	2b03      	cmp	r3, #3
 8008d6a:	d10c      	bne.n	8008d86 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008d6c:	4a17      	ldr	r2, [pc, #92]	; (8008dcc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d74:	4a14      	ldr	r2, [pc, #80]	; (8008dc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008d76:	68d2      	ldr	r2, [r2, #12]
 8008d78:	0a12      	lsrs	r2, r2, #8
 8008d7a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008d7e:	fb02 f303 	mul.w	r3, r2, r3
 8008d82:	617b      	str	r3, [r7, #20]
    break;
 8008d84:	e00c      	b.n	8008da0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008d86:	4a12      	ldr	r2, [pc, #72]	; (8008dd0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d8e:	4a0e      	ldr	r2, [pc, #56]	; (8008dc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008d90:	68d2      	ldr	r2, [r2, #12]
 8008d92:	0a12      	lsrs	r2, r2, #8
 8008d94:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008d98:	fb02 f303 	mul.w	r3, r2, r3
 8008d9c:	617b      	str	r3, [r7, #20]
    break;
 8008d9e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008da0:	4b09      	ldr	r3, [pc, #36]	; (8008dc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	0e5b      	lsrs	r3, r3, #25
 8008da6:	f003 0303 	and.w	r3, r3, #3
 8008daa:	3301      	adds	r3, #1
 8008dac:	005b      	lsls	r3, r3, #1
 8008dae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008db0:	697a      	ldr	r2, [r7, #20]
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008db8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008dba:	687b      	ldr	r3, [r7, #4]
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	371c      	adds	r7, #28
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr
 8008dc8:	40021000 	.word	0x40021000
 8008dcc:	007a1200 	.word	0x007a1200
 8008dd0:	00f42400 	.word	0x00f42400

08008dd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b086      	sub	sp, #24
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008ddc:	2300      	movs	r3, #0
 8008dde:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008de0:	2300      	movs	r3, #0
 8008de2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f000 8098 	beq.w	8008f22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008df2:	2300      	movs	r3, #0
 8008df4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008df6:	4b43      	ldr	r3, [pc, #268]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d10d      	bne.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e02:	4b40      	ldr	r3, [pc, #256]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e06:	4a3f      	ldr	r2, [pc, #252]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e0c:	6593      	str	r3, [r2, #88]	; 0x58
 8008e0e:	4b3d      	ldr	r3, [pc, #244]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e16:	60bb      	str	r3, [r7, #8]
 8008e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008e1e:	4b3a      	ldr	r3, [pc, #232]	; (8008f08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a39      	ldr	r2, [pc, #228]	; (8008f08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008e2a:	f7fc fd17 	bl	800585c <HAL_GetTick>
 8008e2e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008e30:	e009      	b.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e32:	f7fc fd13 	bl	800585c <HAL_GetTick>
 8008e36:	4602      	mov	r2, r0
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	1ad3      	subs	r3, r2, r3
 8008e3c:	2b02      	cmp	r3, #2
 8008e3e:	d902      	bls.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008e40:	2303      	movs	r3, #3
 8008e42:	74fb      	strb	r3, [r7, #19]
        break;
 8008e44:	e005      	b.n	8008e52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008e46:	4b30      	ldr	r3, [pc, #192]	; (8008f08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d0ef      	beq.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008e52:	7cfb      	ldrb	r3, [r7, #19]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d159      	bne.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008e58:	4b2a      	ldr	r3, [pc, #168]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e62:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d01e      	beq.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e6e:	697a      	ldr	r2, [r7, #20]
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d019      	beq.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008e74:	4b23      	ldr	r3, [pc, #140]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008e80:	4b20      	ldr	r3, [pc, #128]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e86:	4a1f      	ldr	r2, [pc, #124]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008e90:	4b1c      	ldr	r3, [pc, #112]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e96:	4a1b      	ldr	r2, [pc, #108]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008ea0:	4a18      	ldr	r2, [pc, #96]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	f003 0301 	and.w	r3, r3, #1
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d016      	beq.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008eb2:	f7fc fcd3 	bl	800585c <HAL_GetTick>
 8008eb6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008eb8:	e00b      	b.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008eba:	f7fc fccf 	bl	800585c <HAL_GetTick>
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	1ad3      	subs	r3, r2, r3
 8008ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d902      	bls.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008ecc:	2303      	movs	r3, #3
 8008ece:	74fb      	strb	r3, [r7, #19]
            break;
 8008ed0:	e006      	b.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008ed2:	4b0c      	ldr	r3, [pc, #48]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ed8:	f003 0302 	and.w	r3, r3, #2
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d0ec      	beq.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008ee0:	7cfb      	ldrb	r3, [r7, #19]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d10b      	bne.n	8008efe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008ee6:	4b07      	ldr	r3, [pc, #28]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008eec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ef4:	4903      	ldr	r1, [pc, #12]	; (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008efc:	e008      	b.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008efe:	7cfb      	ldrb	r3, [r7, #19]
 8008f00:	74bb      	strb	r3, [r7, #18]
 8008f02:	e005      	b.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008f04:	40021000 	.word	0x40021000
 8008f08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f0c:	7cfb      	ldrb	r3, [r7, #19]
 8008f0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008f10:	7c7b      	ldrb	r3, [r7, #17]
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	d105      	bne.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f16:	4baf      	ldr	r3, [pc, #700]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f1a:	4aae      	ldr	r2, [pc, #696]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008f1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f20:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f003 0301 	and.w	r3, r3, #1
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d00a      	beq.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008f2e:	4ba9      	ldr	r3, [pc, #676]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f34:	f023 0203 	bic.w	r2, r3, #3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	49a5      	ldr	r1, [pc, #660]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f003 0302 	and.w	r3, r3, #2
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d00a      	beq.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008f50:	4ba0      	ldr	r3, [pc, #640]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f56:	f023 020c 	bic.w	r2, r3, #12
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	689b      	ldr	r3, [r3, #8]
 8008f5e:	499d      	ldr	r1, [pc, #628]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008f60:	4313      	orrs	r3, r2
 8008f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f003 0304 	and.w	r3, r3, #4
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d00a      	beq.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008f72:	4b98      	ldr	r3, [pc, #608]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f78:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	4994      	ldr	r1, [pc, #592]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008f82:	4313      	orrs	r3, r2
 8008f84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f003 0308 	and.w	r3, r3, #8
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d00a      	beq.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008f94:	4b8f      	ldr	r3, [pc, #572]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f9a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	691b      	ldr	r3, [r3, #16]
 8008fa2:	498c      	ldr	r1, [pc, #560]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f003 0310 	and.w	r3, r3, #16
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d00a      	beq.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008fb6:	4b87      	ldr	r3, [pc, #540]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	695b      	ldr	r3, [r3, #20]
 8008fc4:	4983      	ldr	r1, [pc, #524]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f003 0320 	and.w	r3, r3, #32
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d00a      	beq.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008fd8:	4b7e      	ldr	r3, [pc, #504]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fde:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	699b      	ldr	r3, [r3, #24]
 8008fe6:	497b      	ldr	r1, [pc, #492]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d00a      	beq.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008ffa:	4b76      	ldr	r3, [pc, #472]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009000:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	69db      	ldr	r3, [r3, #28]
 8009008:	4972      	ldr	r1, [pc, #456]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800900a:	4313      	orrs	r3, r2
 800900c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009018:	2b00      	cmp	r3, #0
 800901a:	d00a      	beq.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800901c:	4b6d      	ldr	r3, [pc, #436]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800901e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009022:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6a1b      	ldr	r3, [r3, #32]
 800902a:	496a      	ldr	r1, [pc, #424]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800902c:	4313      	orrs	r3, r2
 800902e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800903a:	2b00      	cmp	r3, #0
 800903c:	d00a      	beq.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800903e:	4b65      	ldr	r3, [pc, #404]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009044:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904c:	4961      	ldr	r1, [pc, #388]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800904e:	4313      	orrs	r3, r2
 8009050:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800905c:	2b00      	cmp	r3, #0
 800905e:	d00a      	beq.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009060:	4b5c      	ldr	r3, [pc, #368]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009062:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009066:	f023 0203 	bic.w	r2, r3, #3
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800906e:	4959      	ldr	r1, [pc, #356]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009070:	4313      	orrs	r3, r2
 8009072:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800907e:	2b00      	cmp	r3, #0
 8009080:	d00a      	beq.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009082:	4b54      	ldr	r3, [pc, #336]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009088:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009090:	4950      	ldr	r1, [pc, #320]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009092:	4313      	orrs	r3, r2
 8009094:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d015      	beq.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80090a4:	4b4b      	ldr	r3, [pc, #300]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80090a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090b2:	4948      	ldr	r1, [pc, #288]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80090b4:	4313      	orrs	r3, r2
 80090b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090c2:	d105      	bne.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80090c4:	4b43      	ldr	r3, [pc, #268]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	4a42      	ldr	r2, [pc, #264]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80090ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80090ce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d015      	beq.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80090dc:	4b3d      	ldr	r3, [pc, #244]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80090de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090ea:	493a      	ldr	r1, [pc, #232]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80090ec:	4313      	orrs	r3, r2
 80090ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80090fa:	d105      	bne.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80090fc:	4b35      	ldr	r3, [pc, #212]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80090fe:	68db      	ldr	r3, [r3, #12]
 8009100:	4a34      	ldr	r2, [pc, #208]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009102:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009106:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009110:	2b00      	cmp	r3, #0
 8009112:	d015      	beq.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009114:	4b2f      	ldr	r3, [pc, #188]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800911a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009122:	492c      	ldr	r1, [pc, #176]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009124:	4313      	orrs	r3, r2
 8009126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800912e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009132:	d105      	bne.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009134:	4b27      	ldr	r3, [pc, #156]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009136:	68db      	ldr	r3, [r3, #12]
 8009138:	4a26      	ldr	r2, [pc, #152]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800913a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800913e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009148:	2b00      	cmp	r3, #0
 800914a:	d015      	beq.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800914c:	4b21      	ldr	r3, [pc, #132]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800914e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009152:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800915a:	491e      	ldr	r1, [pc, #120]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800915c:	4313      	orrs	r3, r2
 800915e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009166:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800916a:	d105      	bne.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800916c:	4b19      	ldr	r3, [pc, #100]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	4a18      	ldr	r2, [pc, #96]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009172:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009176:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009180:	2b00      	cmp	r3, #0
 8009182:	d015      	beq.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009184:	4b13      	ldr	r3, [pc, #76]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800918a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009192:	4910      	ldr	r1, [pc, #64]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009194:	4313      	orrs	r3, r2
 8009196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800919e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091a2:	d105      	bne.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80091a4:	4b0b      	ldr	r3, [pc, #44]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80091a6:	68db      	ldr	r3, [r3, #12]
 80091a8:	4a0a      	ldr	r2, [pc, #40]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80091aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80091ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d018      	beq.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80091bc:	4b05      	ldr	r3, [pc, #20]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80091be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091ca:	4902      	ldr	r1, [pc, #8]	; (80091d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80091cc:	4313      	orrs	r3, r2
 80091ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80091d2:	e001      	b.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80091d4:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80091e0:	d105      	bne.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80091e2:	4b21      	ldr	r3, [pc, #132]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80091e4:	68db      	ldr	r3, [r3, #12]
 80091e6:	4a20      	ldr	r2, [pc, #128]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80091e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091ec:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d015      	beq.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80091fa:	4b1b      	ldr	r3, [pc, #108]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80091fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009200:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009208:	4917      	ldr	r1, [pc, #92]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800920a:	4313      	orrs	r3, r2
 800920c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009218:	d105      	bne.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800921a:	4b13      	ldr	r3, [pc, #76]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800921c:	68db      	ldr	r3, [r3, #12]
 800921e:	4a12      	ldr	r2, [pc, #72]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009224:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800922e:	2b00      	cmp	r3, #0
 8009230:	d015      	beq.n	800925e <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009232:	4b0d      	ldr	r3, [pc, #52]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009234:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009238:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009240:	4909      	ldr	r1, [pc, #36]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009242:	4313      	orrs	r3, r2
 8009244:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800924c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009250:	d105      	bne.n	800925e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009252:	4b05      	ldr	r3, [pc, #20]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009254:	68db      	ldr	r3, [r3, #12]
 8009256:	4a04      	ldr	r2, [pc, #16]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009258:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800925c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800925e:	7cbb      	ldrb	r3, [r7, #18]
}
 8009260:	4618      	mov	r0, r3
 8009262:	3718      	adds	r7, #24
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}
 8009268:	40021000 	.word	0x40021000

0800926c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d101      	bne.n	800927e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800927a:	2301      	movs	r3, #1
 800927c:	e084      	b.n	8009388 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2200      	movs	r2, #0
 8009282:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800928a:	b2db      	uxtb	r3, r3
 800928c:	2b00      	cmp	r3, #0
 800928e:	d106      	bne.n	800929e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f7fb fc8b 	bl	8004bb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2202      	movs	r2, #2
 80092a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	681a      	ldr	r2, [r3, #0]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092b4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	68db      	ldr	r3, [r3, #12]
 80092ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80092be:	d902      	bls.n	80092c6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80092c0:	2300      	movs	r3, #0
 80092c2:	60fb      	str	r3, [r7, #12]
 80092c4:	e002      	b.n	80092cc <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80092c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80092ca:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	68db      	ldr	r3, [r3, #12]
 80092d0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80092d4:	d007      	beq.n	80092e6 <HAL_SPI_Init+0x7a>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	68db      	ldr	r3, [r3, #12]
 80092da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80092de:	d002      	beq.n	80092e6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2200      	movs	r2, #0
 80092e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d10b      	bne.n	8009306 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80092f6:	d903      	bls.n	8009300 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2202      	movs	r2, #2
 80092fc:	631a      	str	r2, [r3, #48]	; 0x30
 80092fe:	e002      	b.n	8009306 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2201      	movs	r2, #1
 8009304:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	685a      	ldr	r2, [r3, #4]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	689b      	ldr	r3, [r3, #8]
 800930e:	431a      	orrs	r2, r3
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	691b      	ldr	r3, [r3, #16]
 8009314:	431a      	orrs	r2, r3
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	695b      	ldr	r3, [r3, #20]
 800931a:	431a      	orrs	r2, r3
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	699b      	ldr	r3, [r3, #24]
 8009320:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009324:	431a      	orrs	r2, r3
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	69db      	ldr	r3, [r3, #28]
 800932a:	431a      	orrs	r2, r3
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6a1b      	ldr	r3, [r3, #32]
 8009330:	ea42 0103 	orr.w	r1, r2, r3
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	430a      	orrs	r2, r1
 800933e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	699b      	ldr	r3, [r3, #24]
 8009344:	0c1b      	lsrs	r3, r3, #16
 8009346:	f003 0204 	and.w	r2, r3, #4
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800934e:	431a      	orrs	r2, r3
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009354:	431a      	orrs	r2, r3
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	68db      	ldr	r3, [r3, #12]
 800935a:	ea42 0103 	orr.w	r1, r2, r3
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	68fa      	ldr	r2, [r7, #12]
 8009364:	430a      	orrs	r2, r1
 8009366:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	69da      	ldr	r2, [r3, #28]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009376:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2200      	movs	r2, #0
 800937c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2201      	movs	r2, #1
 8009382:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009386:	2300      	movs	r3, #0
}
 8009388:	4618      	mov	r0, r3
 800938a:	3710      	adds	r7, #16
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b088      	sub	sp, #32
 8009394:	af00      	add	r7, sp, #0
 8009396:	60f8      	str	r0, [r7, #12]
 8009398:	60b9      	str	r1, [r7, #8]
 800939a:	603b      	str	r3, [r7, #0]
 800939c:	4613      	mov	r3, r2
 800939e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80093a0:	2300      	movs	r3, #0
 80093a2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80093aa:	2b01      	cmp	r3, #1
 80093ac:	d101      	bne.n	80093b2 <HAL_SPI_Transmit+0x22>
 80093ae:	2302      	movs	r3, #2
 80093b0:	e150      	b.n	8009654 <HAL_SPI_Transmit+0x2c4>
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2201      	movs	r2, #1
 80093b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80093ba:	f7fc fa4f 	bl	800585c <HAL_GetTick>
 80093be:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80093c0:	88fb      	ldrh	r3, [r7, #6]
 80093c2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80093ca:	b2db      	uxtb	r3, r3
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d002      	beq.n	80093d6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80093d0:	2302      	movs	r3, #2
 80093d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80093d4:	e135      	b.n	8009642 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d002      	beq.n	80093e2 <HAL_SPI_Transmit+0x52>
 80093dc:	88fb      	ldrh	r3, [r7, #6]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d102      	bne.n	80093e8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80093e2:	2301      	movs	r3, #1
 80093e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80093e6:	e12c      	b.n	8009642 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2203      	movs	r2, #3
 80093ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2200      	movs	r2, #0
 80093f4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	68ba      	ldr	r2, [r7, #8]
 80093fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	88fa      	ldrh	r2, [r7, #6]
 8009400:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	88fa      	ldrh	r2, [r7, #6]
 8009406:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	2200      	movs	r2, #0
 800940c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2200      	movs	r2, #0
 8009412:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2200      	movs	r2, #0
 800941a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2200      	movs	r2, #0
 8009422:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2200      	movs	r2, #0
 8009428:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	689b      	ldr	r3, [r3, #8]
 800942e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009432:	d107      	bne.n	8009444 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	681a      	ldr	r2, [r3, #0]
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009442:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800944e:	2b40      	cmp	r3, #64	; 0x40
 8009450:	d007      	beq.n	8009462 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	681a      	ldr	r2, [r3, #0]
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009460:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	68db      	ldr	r3, [r3, #12]
 8009466:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800946a:	d94b      	bls.n	8009504 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d002      	beq.n	800947a <HAL_SPI_Transmit+0xea>
 8009474:	8afb      	ldrh	r3, [r7, #22]
 8009476:	2b01      	cmp	r3, #1
 8009478:	d13e      	bne.n	80094f8 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800947e:	881a      	ldrh	r2, [r3, #0]
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800948a:	1c9a      	adds	r2, r3, #2
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009494:	b29b      	uxth	r3, r3
 8009496:	3b01      	subs	r3, #1
 8009498:	b29a      	uxth	r2, r3
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800949e:	e02b      	b.n	80094f8 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	689b      	ldr	r3, [r3, #8]
 80094a6:	f003 0302 	and.w	r3, r3, #2
 80094aa:	2b02      	cmp	r3, #2
 80094ac:	d112      	bne.n	80094d4 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094b2:	881a      	ldrh	r2, [r3, #0]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094be:	1c9a      	adds	r2, r3, #2
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	3b01      	subs	r3, #1
 80094cc:	b29a      	uxth	r2, r3
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80094d2:	e011      	b.n	80094f8 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80094d4:	f7fc f9c2 	bl	800585c <HAL_GetTick>
 80094d8:	4602      	mov	r2, r0
 80094da:	69bb      	ldr	r3, [r7, #24]
 80094dc:	1ad3      	subs	r3, r2, r3
 80094de:	683a      	ldr	r2, [r7, #0]
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d803      	bhi.n	80094ec <HAL_SPI_Transmit+0x15c>
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094ea:	d102      	bne.n	80094f2 <HAL_SPI_Transmit+0x162>
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d102      	bne.n	80094f8 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80094f2:	2303      	movs	r3, #3
 80094f4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80094f6:	e0a4      	b.n	8009642 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d1ce      	bne.n	80094a0 <HAL_SPI_Transmit+0x110>
 8009502:	e07c      	b.n	80095fe <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d002      	beq.n	8009512 <HAL_SPI_Transmit+0x182>
 800950c:	8afb      	ldrh	r3, [r7, #22]
 800950e:	2b01      	cmp	r3, #1
 8009510:	d170      	bne.n	80095f4 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009516:	b29b      	uxth	r3, r3
 8009518:	2b01      	cmp	r3, #1
 800951a:	d912      	bls.n	8009542 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009520:	881a      	ldrh	r2, [r3, #0]
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800952c:	1c9a      	adds	r2, r3, #2
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009536:	b29b      	uxth	r3, r3
 8009538:	3b02      	subs	r3, #2
 800953a:	b29a      	uxth	r2, r3
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009540:	e058      	b.n	80095f4 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	330c      	adds	r3, #12
 800954c:	7812      	ldrb	r2, [r2, #0]
 800954e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009554:	1c5a      	adds	r2, r3, #1
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800955e:	b29b      	uxth	r3, r3
 8009560:	3b01      	subs	r3, #1
 8009562:	b29a      	uxth	r2, r3
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009568:	e044      	b.n	80095f4 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	689b      	ldr	r3, [r3, #8]
 8009570:	f003 0302 	and.w	r3, r3, #2
 8009574:	2b02      	cmp	r3, #2
 8009576:	d12b      	bne.n	80095d0 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800957c:	b29b      	uxth	r3, r3
 800957e:	2b01      	cmp	r3, #1
 8009580:	d912      	bls.n	80095a8 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009586:	881a      	ldrh	r2, [r3, #0]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009592:	1c9a      	adds	r2, r3, #2
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800959c:	b29b      	uxth	r3, r3
 800959e:	3b02      	subs	r3, #2
 80095a0:	b29a      	uxth	r2, r3
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80095a6:	e025      	b.n	80095f4 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	330c      	adds	r3, #12
 80095b2:	7812      	ldrb	r2, [r2, #0]
 80095b4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ba:	1c5a      	adds	r2, r3, #1
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	3b01      	subs	r3, #1
 80095c8:	b29a      	uxth	r2, r3
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80095ce:	e011      	b.n	80095f4 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80095d0:	f7fc f944 	bl	800585c <HAL_GetTick>
 80095d4:	4602      	mov	r2, r0
 80095d6:	69bb      	ldr	r3, [r7, #24]
 80095d8:	1ad3      	subs	r3, r2, r3
 80095da:	683a      	ldr	r2, [r7, #0]
 80095dc:	429a      	cmp	r2, r3
 80095de:	d803      	bhi.n	80095e8 <HAL_SPI_Transmit+0x258>
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095e6:	d102      	bne.n	80095ee <HAL_SPI_Transmit+0x25e>
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d102      	bne.n	80095f4 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 80095ee:	2303      	movs	r3, #3
 80095f0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80095f2:	e026      	b.n	8009642 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d1b5      	bne.n	800956a <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80095fe:	69ba      	ldr	r2, [r7, #24]
 8009600:	6839      	ldr	r1, [r7, #0]
 8009602:	68f8      	ldr	r0, [r7, #12]
 8009604:	f000 f901 	bl	800980a <SPI_EndRxTxTransaction>
 8009608:	4603      	mov	r3, r0
 800960a:	2b00      	cmp	r3, #0
 800960c:	d002      	beq.n	8009614 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	2220      	movs	r2, #32
 8009612:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	689b      	ldr	r3, [r3, #8]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d10a      	bne.n	8009632 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800961c:	2300      	movs	r3, #0
 800961e:	613b      	str	r3, [r7, #16]
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	68db      	ldr	r3, [r3, #12]
 8009626:	613b      	str	r3, [r7, #16]
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	613b      	str	r3, [r7, #16]
 8009630:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009636:	2b00      	cmp	r3, #0
 8009638:	d002      	beq.n	8009640 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800963a:	2301      	movs	r3, #1
 800963c:	77fb      	strb	r3, [r7, #31]
 800963e:	e000      	b.n	8009642 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8009640:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	2201      	movs	r2, #1
 8009646:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2200      	movs	r2, #0
 800964e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009652:	7ffb      	ldrb	r3, [r7, #31]
}
 8009654:	4618      	mov	r0, r3
 8009656:	3720      	adds	r7, #32
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	60f8      	str	r0, [r7, #12]
 8009664:	60b9      	str	r1, [r7, #8]
 8009666:	603b      	str	r3, [r7, #0]
 8009668:	4613      	mov	r3, r2
 800966a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800966c:	e04c      	b.n	8009708 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009674:	d048      	beq.n	8009708 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009676:	f7fc f8f1 	bl	800585c <HAL_GetTick>
 800967a:	4602      	mov	r2, r0
 800967c:	69bb      	ldr	r3, [r7, #24]
 800967e:	1ad3      	subs	r3, r2, r3
 8009680:	683a      	ldr	r2, [r7, #0]
 8009682:	429a      	cmp	r2, r3
 8009684:	d902      	bls.n	800968c <SPI_WaitFlagStateUntilTimeout+0x30>
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d13d      	bne.n	8009708 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	685a      	ldr	r2, [r3, #4]
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800969a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80096a4:	d111      	bne.n	80096ca <SPI_WaitFlagStateUntilTimeout+0x6e>
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	689b      	ldr	r3, [r3, #8]
 80096aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096ae:	d004      	beq.n	80096ba <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	689b      	ldr	r3, [r3, #8]
 80096b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096b8:	d107      	bne.n	80096ca <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096c8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096d2:	d10f      	bne.n	80096f4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80096e2:	601a      	str	r2, [r3, #0]
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	681a      	ldr	r2, [r3, #0]
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80096f2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	2201      	movs	r2, #1
 80096f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2200      	movs	r2, #0
 8009700:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009704:	2303      	movs	r3, #3
 8009706:	e00f      	b.n	8009728 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	689a      	ldr	r2, [r3, #8]
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	4013      	ands	r3, r2
 8009712:	68ba      	ldr	r2, [r7, #8]
 8009714:	429a      	cmp	r2, r3
 8009716:	bf0c      	ite	eq
 8009718:	2301      	moveq	r3, #1
 800971a:	2300      	movne	r3, #0
 800971c:	b2db      	uxtb	r3, r3
 800971e:	461a      	mov	r2, r3
 8009720:	79fb      	ldrb	r3, [r7, #7]
 8009722:	429a      	cmp	r2, r3
 8009724:	d1a3      	bne.n	800966e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009726:	2300      	movs	r3, #0
}
 8009728:	4618      	mov	r0, r3
 800972a:	3710      	adds	r7, #16
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b084      	sub	sp, #16
 8009734:	af00      	add	r7, sp, #0
 8009736:	60f8      	str	r0, [r7, #12]
 8009738:	60b9      	str	r1, [r7, #8]
 800973a:	607a      	str	r2, [r7, #4]
 800973c:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800973e:	e057      	b.n	80097f0 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009746:	d106      	bne.n	8009756 <SPI_WaitFifoStateUntilTimeout+0x26>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d103      	bne.n	8009756 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	330c      	adds	r3, #12
 8009754:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800975c:	d048      	beq.n	80097f0 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800975e:	f7fc f87d 	bl	800585c <HAL_GetTick>
 8009762:	4602      	mov	r2, r0
 8009764:	69bb      	ldr	r3, [r7, #24]
 8009766:	1ad3      	subs	r3, r2, r3
 8009768:	683a      	ldr	r2, [r7, #0]
 800976a:	429a      	cmp	r2, r3
 800976c:	d902      	bls.n	8009774 <SPI_WaitFifoStateUntilTimeout+0x44>
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d13d      	bne.n	80097f0 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	685a      	ldr	r2, [r3, #4]
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009782:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800978c:	d111      	bne.n	80097b2 <SPI_WaitFifoStateUntilTimeout+0x82>
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009796:	d004      	beq.n	80097a2 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	689b      	ldr	r3, [r3, #8]
 800979c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097a0:	d107      	bne.n	80097b2 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097b0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097ba:	d10f      	bne.n	80097dc <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80097ca:	601a      	str	r2, [r3, #0]
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80097da:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2201      	movs	r2, #1
 80097e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2200      	movs	r2, #0
 80097e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80097ec:	2303      	movs	r3, #3
 80097ee:	e008      	b.n	8009802 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	689a      	ldr	r2, [r3, #8]
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	4013      	ands	r3, r2
 80097fa:	687a      	ldr	r2, [r7, #4]
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d19f      	bne.n	8009740 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8009800:	2300      	movs	r3, #0
}
 8009802:	4618      	mov	r0, r3
 8009804:	3710      	adds	r7, #16
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}

0800980a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800980a:	b580      	push	{r7, lr}
 800980c:	b086      	sub	sp, #24
 800980e:	af02      	add	r7, sp, #8
 8009810:	60f8      	str	r0, [r7, #12]
 8009812:	60b9      	str	r1, [r7, #8]
 8009814:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	9300      	str	r3, [sp, #0]
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	2200      	movs	r2, #0
 800981e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009822:	68f8      	ldr	r0, [r7, #12]
 8009824:	f7ff ff84 	bl	8009730 <SPI_WaitFifoStateUntilTimeout>
 8009828:	4603      	mov	r3, r0
 800982a:	2b00      	cmp	r3, #0
 800982c:	d007      	beq.n	800983e <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009832:	f043 0220 	orr.w	r2, r3, #32
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800983a:	2303      	movs	r3, #3
 800983c:	e027      	b.n	800988e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	9300      	str	r3, [sp, #0]
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	2200      	movs	r2, #0
 8009846:	2180      	movs	r1, #128	; 0x80
 8009848:	68f8      	ldr	r0, [r7, #12]
 800984a:	f7ff ff07 	bl	800965c <SPI_WaitFlagStateUntilTimeout>
 800984e:	4603      	mov	r3, r0
 8009850:	2b00      	cmp	r3, #0
 8009852:	d007      	beq.n	8009864 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009858:	f043 0220 	orr.w	r2, r3, #32
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009860:	2303      	movs	r3, #3
 8009862:	e014      	b.n	800988e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	9300      	str	r3, [sp, #0]
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	2200      	movs	r2, #0
 800986c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009870:	68f8      	ldr	r0, [r7, #12]
 8009872:	f7ff ff5d 	bl	8009730 <SPI_WaitFifoStateUntilTimeout>
 8009876:	4603      	mov	r3, r0
 8009878:	2b00      	cmp	r3, #0
 800987a:	d007      	beq.n	800988c <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009880:	f043 0220 	orr.w	r2, r3, #32
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009888:	2303      	movs	r3, #3
 800988a:	e000      	b.n	800988e <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800988c:	2300      	movs	r3, #0
}
 800988e:	4618      	mov	r0, r3
 8009890:	3710      	adds	r7, #16
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}

08009896 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009896:	b580      	push	{r7, lr}
 8009898:	b082      	sub	sp, #8
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d101      	bne.n	80098a8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80098a4:	2301      	movs	r3, #1
 80098a6:	e049      	b.n	800993c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d106      	bne.n	80098c2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2200      	movs	r2, #0
 80098b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f7fb fe7b 	bl	80055b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2202      	movs	r2, #2
 80098c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	3304      	adds	r3, #4
 80098d2:	4619      	mov	r1, r3
 80098d4:	4610      	mov	r0, r2
 80098d6:	f000 fc51 	bl	800a17c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2201      	movs	r2, #1
 80098de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2201      	movs	r2, #1
 80098e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2201      	movs	r2, #1
 80098ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2201      	movs	r2, #1
 80098f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2201      	movs	r2, #1
 80098fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2201      	movs	r2, #1
 8009906:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2201      	movs	r2, #1
 800990e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2201      	movs	r2, #1
 8009916:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2201      	movs	r2, #1
 800991e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2201      	movs	r2, #1
 8009926:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2201      	movs	r2, #1
 800992e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2201      	movs	r2, #1
 8009936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800993a:	2300      	movs	r3, #0
}
 800993c:	4618      	mov	r0, r3
 800993e:	3708      	adds	r7, #8
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009944:	b480      	push	{r7}
 8009946:	b085      	sub	sp, #20
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009952:	b2db      	uxtb	r3, r3
 8009954:	2b01      	cmp	r3, #1
 8009956:	d001      	beq.n	800995c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009958:	2301      	movs	r3, #1
 800995a:	e019      	b.n	8009990 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2202      	movs	r2, #2
 8009960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	689a      	ldr	r2, [r3, #8]
 800996a:	4b0c      	ldr	r3, [pc, #48]	; (800999c <HAL_TIM_Base_Start+0x58>)
 800996c:	4013      	ands	r3, r2
 800996e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2b06      	cmp	r3, #6
 8009974:	d00b      	beq.n	800998e <HAL_TIM_Base_Start+0x4a>
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800997c:	d007      	beq.n	800998e <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	681a      	ldr	r2, [r3, #0]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f042 0201 	orr.w	r2, r2, #1
 800998c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800998e:	2300      	movs	r3, #0
}
 8009990:	4618      	mov	r0, r3
 8009992:	3714      	adds	r7, #20
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr
 800999c:	00010007 	.word	0x00010007

080099a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b085      	sub	sp, #20
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099ae:	b2db      	uxtb	r3, r3
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d001      	beq.n	80099b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80099b4:	2301      	movs	r3, #1
 80099b6:	e021      	b.n	80099fc <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2202      	movs	r2, #2
 80099bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	68da      	ldr	r2, [r3, #12]
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f042 0201 	orr.w	r2, r2, #1
 80099ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	689a      	ldr	r2, [r3, #8]
 80099d6:	4b0c      	ldr	r3, [pc, #48]	; (8009a08 <HAL_TIM_Base_Start_IT+0x68>)
 80099d8:	4013      	ands	r3, r2
 80099da:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2b06      	cmp	r3, #6
 80099e0:	d00b      	beq.n	80099fa <HAL_TIM_Base_Start_IT+0x5a>
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099e8:	d007      	beq.n	80099fa <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	681a      	ldr	r2, [r3, #0]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f042 0201 	orr.w	r2, r2, #1
 80099f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80099fa:	2300      	movs	r3, #0
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	3714      	adds	r7, #20
 8009a00:	46bd      	mov	sp, r7
 8009a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a06:	4770      	bx	lr
 8009a08:	00010007 	.word	0x00010007

08009a0c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b083      	sub	sp, #12
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	68da      	ldr	r2, [r3, #12]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f022 0201 	bic.w	r2, r2, #1
 8009a22:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	6a1a      	ldr	r2, [r3, #32]
 8009a2a:	f241 1311 	movw	r3, #4369	; 0x1111
 8009a2e:	4013      	ands	r3, r2
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d10f      	bne.n	8009a54 <HAL_TIM_Base_Stop_IT+0x48>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	6a1a      	ldr	r2, [r3, #32]
 8009a3a:	f244 4344 	movw	r3, #17476	; 0x4444
 8009a3e:	4013      	ands	r3, r2
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d107      	bne.n	8009a54 <HAL_TIM_Base_Stop_IT+0x48>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	681a      	ldr	r2, [r3, #0]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f022 0201 	bic.w	r2, r2, #1
 8009a52:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2201      	movs	r2, #1
 8009a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009a5c:	2300      	movs	r3, #0
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	370c      	adds	r7, #12
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr

08009a6a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009a6a:	b580      	push	{r7, lr}
 8009a6c:	b086      	sub	sp, #24
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	6078      	str	r0, [r7, #4]
 8009a72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d101      	bne.n	8009a7e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	e097      	b.n	8009bae <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a84:	b2db      	uxtb	r3, r3
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d106      	bne.n	8009a98 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f7fb fd34 	bl	8005500 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2202      	movs	r2, #2
 8009a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	689b      	ldr	r3, [r3, #8]
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	6812      	ldr	r2, [r2, #0]
 8009aaa:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8009aae:	f023 0307 	bic.w	r3, r3, #7
 8009ab2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681a      	ldr	r2, [r3, #0]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	3304      	adds	r3, #4
 8009abc:	4619      	mov	r1, r3
 8009abe:	4610      	mov	r0, r2
 8009ac0:	f000 fb5c 	bl	800a17c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	689b      	ldr	r3, [r3, #8]
 8009aca:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	699b      	ldr	r3, [r3, #24]
 8009ad2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	6a1b      	ldr	r3, [r3, #32]
 8009ada:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	697a      	ldr	r2, [r7, #20]
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009aec:	f023 0303 	bic.w	r3, r3, #3
 8009af0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	689a      	ldr	r2, [r3, #8]
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	699b      	ldr	r3, [r3, #24]
 8009afa:	021b      	lsls	r3, r3, #8
 8009afc:	4313      	orrs	r3, r2
 8009afe:	693a      	ldr	r2, [r7, #16]
 8009b00:	4313      	orrs	r3, r2
 8009b02:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009b0a:	f023 030c 	bic.w	r3, r3, #12
 8009b0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009b16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	68da      	ldr	r2, [r3, #12]
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	69db      	ldr	r3, [r3, #28]
 8009b24:	021b      	lsls	r3, r3, #8
 8009b26:	4313      	orrs	r3, r2
 8009b28:	693a      	ldr	r2, [r7, #16]
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	691b      	ldr	r3, [r3, #16]
 8009b32:	011a      	lsls	r2, r3, #4
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	6a1b      	ldr	r3, [r3, #32]
 8009b38:	031b      	lsls	r3, r3, #12
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	693a      	ldr	r2, [r7, #16]
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009b48:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009b50:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	685a      	ldr	r2, [r3, #4]
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	695b      	ldr	r3, [r3, #20]
 8009b5a:	011b      	lsls	r3, r3, #4
 8009b5c:	4313      	orrs	r3, r2
 8009b5e:	68fa      	ldr	r2, [r7, #12]
 8009b60:	4313      	orrs	r3, r2
 8009b62:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	697a      	ldr	r2, [r7, #20]
 8009b6a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	693a      	ldr	r2, [r7, #16]
 8009b72:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	68fa      	ldr	r2, [r7, #12]
 8009b7a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2201      	movs	r2, #1
 8009b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2201      	movs	r2, #1
 8009b90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2201      	movs	r2, #1
 8009b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009bac:	2300      	movs	r3, #0
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3718      	adds	r7, #24
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}

08009bb6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009bb6:	b580      	push	{r7, lr}
 8009bb8:	b082      	sub	sp, #8
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	691b      	ldr	r3, [r3, #16]
 8009bc4:	f003 0302 	and.w	r3, r3, #2
 8009bc8:	2b02      	cmp	r3, #2
 8009bca:	d122      	bne.n	8009c12 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	68db      	ldr	r3, [r3, #12]
 8009bd2:	f003 0302 	and.w	r3, r3, #2
 8009bd6:	2b02      	cmp	r3, #2
 8009bd8:	d11b      	bne.n	8009c12 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f06f 0202 	mvn.w	r2, #2
 8009be2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2201      	movs	r2, #1
 8009be8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	699b      	ldr	r3, [r3, #24]
 8009bf0:	f003 0303 	and.w	r3, r3, #3
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d003      	beq.n	8009c00 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 faa1 	bl	800a140 <HAL_TIM_IC_CaptureCallback>
 8009bfe:	e005      	b.n	8009c0c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f000 fa93 	bl	800a12c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 faa4 	bl	800a154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	691b      	ldr	r3, [r3, #16]
 8009c18:	f003 0304 	and.w	r3, r3, #4
 8009c1c:	2b04      	cmp	r3, #4
 8009c1e:	d122      	bne.n	8009c66 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	68db      	ldr	r3, [r3, #12]
 8009c26:	f003 0304 	and.w	r3, r3, #4
 8009c2a:	2b04      	cmp	r3, #4
 8009c2c:	d11b      	bne.n	8009c66 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f06f 0204 	mvn.w	r2, #4
 8009c36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2202      	movs	r2, #2
 8009c3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	699b      	ldr	r3, [r3, #24]
 8009c44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d003      	beq.n	8009c54 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f000 fa77 	bl	800a140 <HAL_TIM_IC_CaptureCallback>
 8009c52:	e005      	b.n	8009c60 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 fa69 	bl	800a12c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 fa7a 	bl	800a154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2200      	movs	r2, #0
 8009c64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	691b      	ldr	r3, [r3, #16]
 8009c6c:	f003 0308 	and.w	r3, r3, #8
 8009c70:	2b08      	cmp	r3, #8
 8009c72:	d122      	bne.n	8009cba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	68db      	ldr	r3, [r3, #12]
 8009c7a:	f003 0308 	and.w	r3, r3, #8
 8009c7e:	2b08      	cmp	r3, #8
 8009c80:	d11b      	bne.n	8009cba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f06f 0208 	mvn.w	r2, #8
 8009c8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2204      	movs	r2, #4
 8009c90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	69db      	ldr	r3, [r3, #28]
 8009c98:	f003 0303 	and.w	r3, r3, #3
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d003      	beq.n	8009ca8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f000 fa4d 	bl	800a140 <HAL_TIM_IC_CaptureCallback>
 8009ca6:	e005      	b.n	8009cb4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f000 fa3f 	bl	800a12c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 fa50 	bl	800a154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	691b      	ldr	r3, [r3, #16]
 8009cc0:	f003 0310 	and.w	r3, r3, #16
 8009cc4:	2b10      	cmp	r3, #16
 8009cc6:	d122      	bne.n	8009d0e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	68db      	ldr	r3, [r3, #12]
 8009cce:	f003 0310 	and.w	r3, r3, #16
 8009cd2:	2b10      	cmp	r3, #16
 8009cd4:	d11b      	bne.n	8009d0e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f06f 0210 	mvn.w	r2, #16
 8009cde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2208      	movs	r2, #8
 8009ce4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	69db      	ldr	r3, [r3, #28]
 8009cec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d003      	beq.n	8009cfc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 fa23 	bl	800a140 <HAL_TIM_IC_CaptureCallback>
 8009cfa:	e005      	b.n	8009d08 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f000 fa15 	bl	800a12c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f000 fa26 	bl	800a154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	691b      	ldr	r3, [r3, #16]
 8009d14:	f003 0301 	and.w	r3, r3, #1
 8009d18:	2b01      	cmp	r3, #1
 8009d1a:	d10e      	bne.n	8009d3a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	68db      	ldr	r3, [r3, #12]
 8009d22:	f003 0301 	and.w	r3, r3, #1
 8009d26:	2b01      	cmp	r3, #1
 8009d28:	d107      	bne.n	8009d3a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f06f 0201 	mvn.w	r2, #1
 8009d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 f9ef 	bl	800a118 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	691b      	ldr	r3, [r3, #16]
 8009d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d44:	2b80      	cmp	r3, #128	; 0x80
 8009d46:	d10e      	bne.n	8009d66 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	68db      	ldr	r3, [r3, #12]
 8009d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d52:	2b80      	cmp	r3, #128	; 0x80
 8009d54:	d107      	bne.n	8009d66 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 fd5d 	bl	800a820 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	691b      	ldr	r3, [r3, #16]
 8009d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d74:	d10e      	bne.n	8009d94 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	68db      	ldr	r3, [r3, #12]
 8009d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d80:	2b80      	cmp	r3, #128	; 0x80
 8009d82:	d107      	bne.n	8009d94 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 fd50 	bl	800a834 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	691b      	ldr	r3, [r3, #16]
 8009d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d9e:	2b40      	cmp	r3, #64	; 0x40
 8009da0:	d10e      	bne.n	8009dc0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	68db      	ldr	r3, [r3, #12]
 8009da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dac:	2b40      	cmp	r3, #64	; 0x40
 8009dae:	d107      	bne.n	8009dc0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f000 f9d4 	bl	800a168 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	691b      	ldr	r3, [r3, #16]
 8009dc6:	f003 0320 	and.w	r3, r3, #32
 8009dca:	2b20      	cmp	r3, #32
 8009dcc:	d10e      	bne.n	8009dec <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	68db      	ldr	r3, [r3, #12]
 8009dd4:	f003 0320 	and.w	r3, r3, #32
 8009dd8:	2b20      	cmp	r3, #32
 8009dda:	d107      	bne.n	8009dec <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f06f 0220 	mvn.w	r2, #32
 8009de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f000 fd10 	bl	800a80c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	691b      	ldr	r3, [r3, #16]
 8009df2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009df6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009dfa:	d10f      	bne.n	8009e1c <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	68db      	ldr	r3, [r3, #12]
 8009e02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e0a:	d107      	bne.n	8009e1c <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8009e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f000 fd16 	bl	800a848 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	691b      	ldr	r3, [r3, #16]
 8009e22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009e26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e2a:	d10f      	bne.n	8009e4c <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	68db      	ldr	r3, [r3, #12]
 8009e32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009e36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e3a:	d107      	bne.n	8009e4c <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8009e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f000 fd08 	bl	800a85c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	691b      	ldr	r3, [r3, #16]
 8009e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e5a:	d10f      	bne.n	8009e7c <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	68db      	ldr	r3, [r3, #12]
 8009e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e6a:	d107      	bne.n	8009e7c <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8009e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 fcfa 	bl	800a870 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	691b      	ldr	r3, [r3, #16]
 8009e82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009e8a:	d10f      	bne.n	8009eac <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	68db      	ldr	r3, [r3, #12]
 8009e92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009e9a:	d107      	bne.n	8009eac <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8009ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 fcec 	bl	800a884 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009eac:	bf00      	nop
 8009eae:	3708      	adds	r7, #8
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}

08009eb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b084      	sub	sp, #16
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d101      	bne.n	8009ecc <HAL_TIM_ConfigClockSource+0x18>
 8009ec8:	2302      	movs	r3, #2
 8009eca:	e0d2      	b.n	800a072 <HAL_TIM_ConfigClockSource+0x1be>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2201      	movs	r2, #1
 8009ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2202      	movs	r2, #2
 8009ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	689b      	ldr	r3, [r3, #8]
 8009ee2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8009eea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009eee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ef6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	68fa      	ldr	r2, [r7, #12]
 8009efe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f08:	f000 80a9 	beq.w	800a05e <HAL_TIM_ConfigClockSource+0x1aa>
 8009f0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f10:	d81a      	bhi.n	8009f48 <HAL_TIM_ConfigClockSource+0x94>
 8009f12:	2b30      	cmp	r3, #48	; 0x30
 8009f14:	f000 809a 	beq.w	800a04c <HAL_TIM_ConfigClockSource+0x198>
 8009f18:	2b30      	cmp	r3, #48	; 0x30
 8009f1a:	d809      	bhi.n	8009f30 <HAL_TIM_ConfigClockSource+0x7c>
 8009f1c:	2b10      	cmp	r3, #16
 8009f1e:	f000 8095 	beq.w	800a04c <HAL_TIM_ConfigClockSource+0x198>
 8009f22:	2b20      	cmp	r3, #32
 8009f24:	f000 8092 	beq.w	800a04c <HAL_TIM_ConfigClockSource+0x198>
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	f000 808f 	beq.w	800a04c <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009f2e:	e097      	b.n	800a060 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8009f30:	2b50      	cmp	r3, #80	; 0x50
 8009f32:	d05b      	beq.n	8009fec <HAL_TIM_ConfigClockSource+0x138>
 8009f34:	2b50      	cmp	r3, #80	; 0x50
 8009f36:	d802      	bhi.n	8009f3e <HAL_TIM_ConfigClockSource+0x8a>
 8009f38:	2b40      	cmp	r3, #64	; 0x40
 8009f3a:	d077      	beq.n	800a02c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8009f3c:	e090      	b.n	800a060 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8009f3e:	2b60      	cmp	r3, #96	; 0x60
 8009f40:	d064      	beq.n	800a00c <HAL_TIM_ConfigClockSource+0x158>
 8009f42:	2b70      	cmp	r3, #112	; 0x70
 8009f44:	d028      	beq.n	8009f98 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 8009f46:	e08b      	b.n	800a060 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8009f48:	4a4c      	ldr	r2, [pc, #304]	; (800a07c <HAL_TIM_ConfigClockSource+0x1c8>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d07e      	beq.n	800a04c <HAL_TIM_ConfigClockSource+0x198>
 8009f4e:	4a4b      	ldr	r2, [pc, #300]	; (800a07c <HAL_TIM_ConfigClockSource+0x1c8>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d810      	bhi.n	8009f76 <HAL_TIM_ConfigClockSource+0xc2>
 8009f54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f58:	d078      	beq.n	800a04c <HAL_TIM_ConfigClockSource+0x198>
 8009f5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f5e:	d803      	bhi.n	8009f68 <HAL_TIM_ConfigClockSource+0xb4>
 8009f60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f64:	d02f      	beq.n	8009fc6 <HAL_TIM_ConfigClockSource+0x112>
      break;
 8009f66:	e07b      	b.n	800a060 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8009f68:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009f6c:	d06e      	beq.n	800a04c <HAL_TIM_ConfigClockSource+0x198>
 8009f6e:	4a44      	ldr	r2, [pc, #272]	; (800a080 <HAL_TIM_ConfigClockSource+0x1cc>)
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d06b      	beq.n	800a04c <HAL_TIM_ConfigClockSource+0x198>
      break;
 8009f74:	e074      	b.n	800a060 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8009f76:	4a43      	ldr	r2, [pc, #268]	; (800a084 <HAL_TIM_ConfigClockSource+0x1d0>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d067      	beq.n	800a04c <HAL_TIM_ConfigClockSource+0x198>
 8009f7c:	4a41      	ldr	r2, [pc, #260]	; (800a084 <HAL_TIM_ConfigClockSource+0x1d0>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d803      	bhi.n	8009f8a <HAL_TIM_ConfigClockSource+0xd6>
 8009f82:	4a41      	ldr	r2, [pc, #260]	; (800a088 <HAL_TIM_ConfigClockSource+0x1d4>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d061      	beq.n	800a04c <HAL_TIM_ConfigClockSource+0x198>
      break;
 8009f88:	e06a      	b.n	800a060 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8009f8a:	4a40      	ldr	r2, [pc, #256]	; (800a08c <HAL_TIM_ConfigClockSource+0x1d8>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d05d      	beq.n	800a04c <HAL_TIM_ConfigClockSource+0x198>
 8009f90:	4a3f      	ldr	r2, [pc, #252]	; (800a090 <HAL_TIM_ConfigClockSource+0x1dc>)
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d05a      	beq.n	800a04c <HAL_TIM_ConfigClockSource+0x198>
      break;
 8009f96:	e063      	b.n	800a060 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6818      	ldr	r0, [r3, #0]
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	6899      	ldr	r1, [r3, #8]
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	685a      	ldr	r2, [r3, #4]
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	68db      	ldr	r3, [r3, #12]
 8009fa8:	f000 fac8 	bl	800a53c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	689b      	ldr	r3, [r3, #8]
 8009fb2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009fba:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	68fa      	ldr	r2, [r7, #12]
 8009fc2:	609a      	str	r2, [r3, #8]
      break;
 8009fc4:	e04c      	b.n	800a060 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6818      	ldr	r0, [r3, #0]
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	6899      	ldr	r1, [r3, #8]
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	685a      	ldr	r2, [r3, #4]
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	68db      	ldr	r3, [r3, #12]
 8009fd6:	f000 fab1 	bl	800a53c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	689a      	ldr	r2, [r3, #8]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009fe8:	609a      	str	r2, [r3, #8]
      break;
 8009fea:	e039      	b.n	800a060 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6818      	ldr	r0, [r3, #0]
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	6859      	ldr	r1, [r3, #4]
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	68db      	ldr	r3, [r3, #12]
 8009ff8:	461a      	mov	r2, r3
 8009ffa:	f000 fa23 	bl	800a444 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	2150      	movs	r1, #80	; 0x50
 800a004:	4618      	mov	r0, r3
 800a006:	f000 fa7c 	bl	800a502 <TIM_ITRx_SetConfig>
      break;
 800a00a:	e029      	b.n	800a060 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6818      	ldr	r0, [r3, #0]
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	6859      	ldr	r1, [r3, #4]
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	68db      	ldr	r3, [r3, #12]
 800a018:	461a      	mov	r2, r3
 800a01a:	f000 fa42 	bl	800a4a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	2160      	movs	r1, #96	; 0x60
 800a024:	4618      	mov	r0, r3
 800a026:	f000 fa6c 	bl	800a502 <TIM_ITRx_SetConfig>
      break;
 800a02a:	e019      	b.n	800a060 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6818      	ldr	r0, [r3, #0]
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	6859      	ldr	r1, [r3, #4]
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	68db      	ldr	r3, [r3, #12]
 800a038:	461a      	mov	r2, r3
 800a03a:	f000 fa03 	bl	800a444 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	2140      	movs	r1, #64	; 0x40
 800a044:	4618      	mov	r0, r3
 800a046:	f000 fa5c 	bl	800a502 <TIM_ITRx_SetConfig>
      break;
 800a04a:	e009      	b.n	800a060 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681a      	ldr	r2, [r3, #0]
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	4619      	mov	r1, r3
 800a056:	4610      	mov	r0, r2
 800a058:	f000 fa53 	bl	800a502 <TIM_ITRx_SetConfig>
      break;
 800a05c:	e000      	b.n	800a060 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800a05e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2201      	movs	r2, #1
 800a064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2200      	movs	r2, #0
 800a06c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a070:	2300      	movs	r3, #0
}
 800a072:	4618      	mov	r0, r3
 800a074:	3710      	adds	r7, #16
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
 800a07a:	bf00      	nop
 800a07c:	00100030 	.word	0x00100030
 800a080:	00100020 	.word	0x00100020
 800a084:	00100050 	.word	0x00100050
 800a088:	00100040 	.word	0x00100040
 800a08c:	00100060 	.word	0x00100060
 800a090:	00100070 	.word	0x00100070

0800a094 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b082      	sub	sp, #8
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	d101      	bne.n	800a0ac <HAL_TIM_SlaveConfigSynchro+0x18>
 800a0a8:	2302      	movs	r3, #2
 800a0aa:	e031      	b.n	800a110 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2202      	movs	r2, #2
 800a0b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800a0bc:	6839      	ldr	r1, [r7, #0]
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f000 f904 	bl	800a2cc <TIM_SlaveTimer_SetConfig>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d009      	beq.n	800a0de <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800a0da:	2301      	movs	r3, #1
 800a0dc:	e018      	b.n	800a110 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	68da      	ldr	r2, [r3, #12]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a0ec:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	68da      	ldr	r2, [r3, #12]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a0fc:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2201      	movs	r2, #1
 800a102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2200      	movs	r2, #0
 800a10a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a10e:	2300      	movs	r3, #0
}
 800a110:	4618      	mov	r0, r3
 800a112:	3708      	adds	r7, #8
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}

0800a118 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a118:	b480      	push	{r7}
 800a11a:	b083      	sub	sp, #12
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a120:	bf00      	nop
 800a122:	370c      	adds	r7, #12
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr

0800a12c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a12c:	b480      	push	{r7}
 800a12e:	b083      	sub	sp, #12
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a134:	bf00      	nop
 800a136:	370c      	adds	r7, #12
 800a138:	46bd      	mov	sp, r7
 800a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13e:	4770      	bx	lr

0800a140 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a140:	b480      	push	{r7}
 800a142:	b083      	sub	sp, #12
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a148:	bf00      	nop
 800a14a:	370c      	adds	r7, #12
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr

0800a154 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a154:	b480      	push	{r7}
 800a156:	b083      	sub	sp, #12
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a15c:	bf00      	nop
 800a15e:	370c      	adds	r7, #12
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr

0800a168 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a168:	b480      	push	{r7}
 800a16a:	b083      	sub	sp, #12
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a170:	bf00      	nop
 800a172:	370c      	adds	r7, #12
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr

0800a17c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b085      	sub	sp, #20
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	4a46      	ldr	r2, [pc, #280]	; (800a2a8 <TIM_Base_SetConfig+0x12c>)
 800a190:	4293      	cmp	r3, r2
 800a192:	d017      	beq.n	800a1c4 <TIM_Base_SetConfig+0x48>
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a19a:	d013      	beq.n	800a1c4 <TIM_Base_SetConfig+0x48>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	4a43      	ldr	r2, [pc, #268]	; (800a2ac <TIM_Base_SetConfig+0x130>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d00f      	beq.n	800a1c4 <TIM_Base_SetConfig+0x48>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	4a42      	ldr	r2, [pc, #264]	; (800a2b0 <TIM_Base_SetConfig+0x134>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d00b      	beq.n	800a1c4 <TIM_Base_SetConfig+0x48>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	4a41      	ldr	r2, [pc, #260]	; (800a2b4 <TIM_Base_SetConfig+0x138>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d007      	beq.n	800a1c4 <TIM_Base_SetConfig+0x48>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	4a40      	ldr	r2, [pc, #256]	; (800a2b8 <TIM_Base_SetConfig+0x13c>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d003      	beq.n	800a1c4 <TIM_Base_SetConfig+0x48>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	4a3f      	ldr	r2, [pc, #252]	; (800a2bc <TIM_Base_SetConfig+0x140>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d108      	bne.n	800a1d6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	685b      	ldr	r3, [r3, #4]
 800a1d0:	68fa      	ldr	r2, [r7, #12]
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	4a33      	ldr	r2, [pc, #204]	; (800a2a8 <TIM_Base_SetConfig+0x12c>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d023      	beq.n	800a226 <TIM_Base_SetConfig+0xaa>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1e4:	d01f      	beq.n	800a226 <TIM_Base_SetConfig+0xaa>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	4a30      	ldr	r2, [pc, #192]	; (800a2ac <TIM_Base_SetConfig+0x130>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d01b      	beq.n	800a226 <TIM_Base_SetConfig+0xaa>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	4a2f      	ldr	r2, [pc, #188]	; (800a2b0 <TIM_Base_SetConfig+0x134>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d017      	beq.n	800a226 <TIM_Base_SetConfig+0xaa>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	4a2e      	ldr	r2, [pc, #184]	; (800a2b4 <TIM_Base_SetConfig+0x138>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d013      	beq.n	800a226 <TIM_Base_SetConfig+0xaa>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	4a2d      	ldr	r2, [pc, #180]	; (800a2b8 <TIM_Base_SetConfig+0x13c>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d00f      	beq.n	800a226 <TIM_Base_SetConfig+0xaa>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	4a2d      	ldr	r2, [pc, #180]	; (800a2c0 <TIM_Base_SetConfig+0x144>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d00b      	beq.n	800a226 <TIM_Base_SetConfig+0xaa>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	4a2c      	ldr	r2, [pc, #176]	; (800a2c4 <TIM_Base_SetConfig+0x148>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d007      	beq.n	800a226 <TIM_Base_SetConfig+0xaa>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	4a2b      	ldr	r2, [pc, #172]	; (800a2c8 <TIM_Base_SetConfig+0x14c>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d003      	beq.n	800a226 <TIM_Base_SetConfig+0xaa>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	4a26      	ldr	r2, [pc, #152]	; (800a2bc <TIM_Base_SetConfig+0x140>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d108      	bne.n	800a238 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a22c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	68db      	ldr	r3, [r3, #12]
 800a232:	68fa      	ldr	r2, [r7, #12]
 800a234:	4313      	orrs	r3, r2
 800a236:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	695b      	ldr	r3, [r3, #20]
 800a242:	4313      	orrs	r3, r2
 800a244:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	68fa      	ldr	r2, [r7, #12]
 800a24a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	689a      	ldr	r2, [r3, #8]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	681a      	ldr	r2, [r3, #0]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	4a12      	ldr	r2, [pc, #72]	; (800a2a8 <TIM_Base_SetConfig+0x12c>)
 800a260:	4293      	cmp	r3, r2
 800a262:	d013      	beq.n	800a28c <TIM_Base_SetConfig+0x110>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	4a14      	ldr	r2, [pc, #80]	; (800a2b8 <TIM_Base_SetConfig+0x13c>)
 800a268:	4293      	cmp	r3, r2
 800a26a:	d00f      	beq.n	800a28c <TIM_Base_SetConfig+0x110>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	4a14      	ldr	r2, [pc, #80]	; (800a2c0 <TIM_Base_SetConfig+0x144>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d00b      	beq.n	800a28c <TIM_Base_SetConfig+0x110>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	4a13      	ldr	r2, [pc, #76]	; (800a2c4 <TIM_Base_SetConfig+0x148>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d007      	beq.n	800a28c <TIM_Base_SetConfig+0x110>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	4a12      	ldr	r2, [pc, #72]	; (800a2c8 <TIM_Base_SetConfig+0x14c>)
 800a280:	4293      	cmp	r3, r2
 800a282:	d003      	beq.n	800a28c <TIM_Base_SetConfig+0x110>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	4a0d      	ldr	r2, [pc, #52]	; (800a2bc <TIM_Base_SetConfig+0x140>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d103      	bne.n	800a294 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	691a      	ldr	r2, [r3, #16]
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2201      	movs	r2, #1
 800a298:	615a      	str	r2, [r3, #20]
}
 800a29a:	bf00      	nop
 800a29c:	3714      	adds	r7, #20
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a4:	4770      	bx	lr
 800a2a6:	bf00      	nop
 800a2a8:	40012c00 	.word	0x40012c00
 800a2ac:	40000400 	.word	0x40000400
 800a2b0:	40000800 	.word	0x40000800
 800a2b4:	40000c00 	.word	0x40000c00
 800a2b8:	40013400 	.word	0x40013400
 800a2bc:	40015000 	.word	0x40015000
 800a2c0:	40014000 	.word	0x40014000
 800a2c4:	40014400 	.word	0x40014400
 800a2c8:	40014800 	.word	0x40014800

0800a2cc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b086      	sub	sp, #24
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	689b      	ldr	r3, [r3, #8]
 800a2dc:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a2e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2e8:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	685b      	ldr	r3, [r3, #4]
 800a2ee:	697a      	ldr	r2, [r7, #20]
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a2fa:	f023 0307 	bic.w	r3, r3, #7
 800a2fe:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	697a      	ldr	r2, [r7, #20]
 800a306:	4313      	orrs	r3, r2
 800a308:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	697a      	ldr	r2, [r7, #20]
 800a310:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	2b70      	cmp	r3, #112	; 0x70
 800a318:	d034      	beq.n	800a384 <TIM_SlaveTimer_SetConfig+0xb8>
 800a31a:	2b70      	cmp	r3, #112	; 0x70
 800a31c:	d811      	bhi.n	800a342 <TIM_SlaveTimer_SetConfig+0x76>
 800a31e:	2b30      	cmp	r3, #48	; 0x30
 800a320:	d07d      	beq.n	800a41e <TIM_SlaveTimer_SetConfig+0x152>
 800a322:	2b30      	cmp	r3, #48	; 0x30
 800a324:	d806      	bhi.n	800a334 <TIM_SlaveTimer_SetConfig+0x68>
 800a326:	2b10      	cmp	r3, #16
 800a328:	d079      	beq.n	800a41e <TIM_SlaveTimer_SetConfig+0x152>
 800a32a:	2b20      	cmp	r3, #32
 800a32c:	d077      	beq.n	800a41e <TIM_SlaveTimer_SetConfig+0x152>
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d075      	beq.n	800a41e <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 800a332:	e075      	b.n	800a420 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800a334:	2b50      	cmp	r3, #80	; 0x50
 800a336:	d05e      	beq.n	800a3f6 <TIM_SlaveTimer_SetConfig+0x12a>
 800a338:	2b60      	cmp	r3, #96	; 0x60
 800a33a:	d066      	beq.n	800a40a <TIM_SlaveTimer_SetConfig+0x13e>
 800a33c:	2b40      	cmp	r3, #64	; 0x40
 800a33e:	d02c      	beq.n	800a39a <TIM_SlaveTimer_SetConfig+0xce>
      break;
 800a340:	e06e      	b.n	800a420 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800a342:	4a3a      	ldr	r2, [pc, #232]	; (800a42c <TIM_SlaveTimer_SetConfig+0x160>)
 800a344:	4293      	cmp	r3, r2
 800a346:	d06a      	beq.n	800a41e <TIM_SlaveTimer_SetConfig+0x152>
 800a348:	4a38      	ldr	r2, [pc, #224]	; (800a42c <TIM_SlaveTimer_SetConfig+0x160>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d809      	bhi.n	800a362 <TIM_SlaveTimer_SetConfig+0x96>
 800a34e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a352:	d064      	beq.n	800a41e <TIM_SlaveTimer_SetConfig+0x152>
 800a354:	4a36      	ldr	r2, [pc, #216]	; (800a430 <TIM_SlaveTimer_SetConfig+0x164>)
 800a356:	4293      	cmp	r3, r2
 800a358:	d061      	beq.n	800a41e <TIM_SlaveTimer_SetConfig+0x152>
 800a35a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a35e:	d05e      	beq.n	800a41e <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800a360:	e05e      	b.n	800a420 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800a362:	4a34      	ldr	r2, [pc, #208]	; (800a434 <TIM_SlaveTimer_SetConfig+0x168>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d05a      	beq.n	800a41e <TIM_SlaveTimer_SetConfig+0x152>
 800a368:	4a32      	ldr	r2, [pc, #200]	; (800a434 <TIM_SlaveTimer_SetConfig+0x168>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d803      	bhi.n	800a376 <TIM_SlaveTimer_SetConfig+0xaa>
 800a36e:	4a32      	ldr	r2, [pc, #200]	; (800a438 <TIM_SlaveTimer_SetConfig+0x16c>)
 800a370:	4293      	cmp	r3, r2
 800a372:	d054      	beq.n	800a41e <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800a374:	e054      	b.n	800a420 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800a376:	4a31      	ldr	r2, [pc, #196]	; (800a43c <TIM_SlaveTimer_SetConfig+0x170>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d050      	beq.n	800a41e <TIM_SlaveTimer_SetConfig+0x152>
 800a37c:	4a30      	ldr	r2, [pc, #192]	; (800a440 <TIM_SlaveTimer_SetConfig+0x174>)
 800a37e:	4293      	cmp	r3, r2
 800a380:	d04d      	beq.n	800a41e <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800a382:	e04d      	b.n	800a420 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6818      	ldr	r0, [r3, #0]
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	68d9      	ldr	r1, [r3, #12]
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	689a      	ldr	r2, [r3, #8]
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	691b      	ldr	r3, [r3, #16]
 800a394:	f000 f8d2 	bl	800a53c <TIM_ETR_SetConfig>
      break;
 800a398:	e042      	b.n	800a420 <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	2b05      	cmp	r3, #5
 800a3a0:	d004      	beq.n	800a3ac <TIM_SlaveTimer_SetConfig+0xe0>
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 800a3aa:	d101      	bne.n	800a3b0 <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	e038      	b.n	800a422 <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	6a1b      	ldr	r3, [r3, #32]
 800a3b6:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	6a1a      	ldr	r2, [r3, #32]
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f022 0201 	bic.w	r2, r2, #1
 800a3c6:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	699b      	ldr	r3, [r3, #24]
 800a3ce:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a3d6:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	691b      	ldr	r3, [r3, #16]
 800a3dc:	011b      	lsls	r3, r3, #4
 800a3de:	68fa      	ldr	r2, [r7, #12]
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	68fa      	ldr	r2, [r7, #12]
 800a3ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	693a      	ldr	r2, [r7, #16]
 800a3f2:	621a      	str	r2, [r3, #32]
      break;
 800a3f4:	e014      	b.n	800a420 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6818      	ldr	r0, [r3, #0]
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	6899      	ldr	r1, [r3, #8]
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	691b      	ldr	r3, [r3, #16]
 800a402:	461a      	mov	r2, r3
 800a404:	f000 f81e 	bl	800a444 <TIM_TI1_ConfigInputStage>
      break;
 800a408:	e00a      	b.n	800a420 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6818      	ldr	r0, [r3, #0]
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	6899      	ldr	r1, [r3, #8]
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	691b      	ldr	r3, [r3, #16]
 800a416:	461a      	mov	r2, r3
 800a418:	f000 f843 	bl	800a4a2 <TIM_TI2_ConfigInputStage>
      break;
 800a41c:	e000      	b.n	800a420 <TIM_SlaveTimer_SetConfig+0x154>
      break;
 800a41e:	bf00      	nop
  }
  return HAL_OK;
 800a420:	2300      	movs	r3, #0
}
 800a422:	4618      	mov	r0, r3
 800a424:	3718      	adds	r7, #24
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	bf00      	nop
 800a42c:	00100030 	.word	0x00100030
 800a430:	00100020 	.word	0x00100020
 800a434:	00100050 	.word	0x00100050
 800a438:	00100040 	.word	0x00100040
 800a43c:	00100060 	.word	0x00100060
 800a440:	00100070 	.word	0x00100070

0800a444 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a444:	b480      	push	{r7}
 800a446:	b087      	sub	sp, #28
 800a448:	af00      	add	r7, sp, #0
 800a44a:	60f8      	str	r0, [r7, #12]
 800a44c:	60b9      	str	r1, [r7, #8]
 800a44e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	6a1b      	ldr	r3, [r3, #32]
 800a454:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	6a1b      	ldr	r3, [r3, #32]
 800a45a:	f023 0201 	bic.w	r2, r3, #1
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	699b      	ldr	r3, [r3, #24]
 800a466:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a46e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	011b      	lsls	r3, r3, #4
 800a474:	693a      	ldr	r2, [r7, #16]
 800a476:	4313      	orrs	r3, r2
 800a478:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	f023 030a 	bic.w	r3, r3, #10
 800a480:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a482:	697a      	ldr	r2, [r7, #20]
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	4313      	orrs	r3, r2
 800a488:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	693a      	ldr	r2, [r7, #16]
 800a48e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	697a      	ldr	r2, [r7, #20]
 800a494:	621a      	str	r2, [r3, #32]
}
 800a496:	bf00      	nop
 800a498:	371c      	adds	r7, #28
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr

0800a4a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a4a2:	b480      	push	{r7}
 800a4a4:	b087      	sub	sp, #28
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	60f8      	str	r0, [r7, #12]
 800a4aa:	60b9      	str	r1, [r7, #8]
 800a4ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	6a1b      	ldr	r3, [r3, #32]
 800a4b2:	f023 0210 	bic.w	r2, r3, #16
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	699b      	ldr	r3, [r3, #24]
 800a4be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	6a1b      	ldr	r3, [r3, #32]
 800a4c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a4cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	031b      	lsls	r3, r3, #12
 800a4d2:	697a      	ldr	r2, [r7, #20]
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a4de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	011b      	lsls	r3, r3, #4
 800a4e4:	693a      	ldr	r2, [r7, #16]
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	697a      	ldr	r2, [r7, #20]
 800a4ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	693a      	ldr	r2, [r7, #16]
 800a4f4:	621a      	str	r2, [r3, #32]
}
 800a4f6:	bf00      	nop
 800a4f8:	371c      	adds	r7, #28
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a500:	4770      	bx	lr

0800a502 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a502:	b480      	push	{r7}
 800a504:	b085      	sub	sp, #20
 800a506:	af00      	add	r7, sp, #0
 800a508:	6078      	str	r0, [r7, #4]
 800a50a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	689b      	ldr	r3, [r3, #8]
 800a510:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a51c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a51e:	683a      	ldr	r2, [r7, #0]
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	4313      	orrs	r3, r2
 800a524:	f043 0307 	orr.w	r3, r3, #7
 800a528:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	68fa      	ldr	r2, [r7, #12]
 800a52e:	609a      	str	r2, [r3, #8]
}
 800a530:	bf00      	nop
 800a532:	3714      	adds	r7, #20
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr

0800a53c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b087      	sub	sp, #28
 800a540:	af00      	add	r7, sp, #0
 800a542:	60f8      	str	r0, [r7, #12]
 800a544:	60b9      	str	r1, [r7, #8]
 800a546:	607a      	str	r2, [r7, #4]
 800a548:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	689b      	ldr	r3, [r3, #8]
 800a54e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a556:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	021a      	lsls	r2, r3, #8
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	431a      	orrs	r2, r3
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	4313      	orrs	r3, r2
 800a564:	697a      	ldr	r2, [r7, #20]
 800a566:	4313      	orrs	r3, r2
 800a568:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	697a      	ldr	r2, [r7, #20]
 800a56e:	609a      	str	r2, [r3, #8]
}
 800a570:	bf00      	nop
 800a572:	371c      	adds	r7, #28
 800a574:	46bd      	mov	sp, r7
 800a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57a:	4770      	bx	lr

0800a57c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b085      	sub	sp, #20
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	d101      	bne.n	800a594 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a590:	2302      	movs	r3, #2
 800a592:	e074      	b.n	800a67e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2201      	movs	r2, #1
 800a598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2202      	movs	r2, #2
 800a5a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	689b      	ldr	r3, [r3, #8]
 800a5b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4a34      	ldr	r2, [pc, #208]	; (800a68c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d009      	beq.n	800a5d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4a33      	ldr	r2, [pc, #204]	; (800a690 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d004      	beq.n	800a5d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4a31      	ldr	r2, [pc, #196]	; (800a694 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d108      	bne.n	800a5e4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a5d8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	685b      	ldr	r3, [r3, #4]
 800a5de:	68fa      	ldr	r2, [r7, #12]
 800a5e0:	4313      	orrs	r3, r2
 800a5e2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a5ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	68fa      	ldr	r2, [r7, #12]
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	68fa      	ldr	r2, [r7, #12]
 800a600:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	4a21      	ldr	r2, [pc, #132]	; (800a68c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a608:	4293      	cmp	r3, r2
 800a60a:	d022      	beq.n	800a652 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a614:	d01d      	beq.n	800a652 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4a1f      	ldr	r2, [pc, #124]	; (800a698 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d018      	beq.n	800a652 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4a1d      	ldr	r2, [pc, #116]	; (800a69c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d013      	beq.n	800a652 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	4a1c      	ldr	r2, [pc, #112]	; (800a6a0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a630:	4293      	cmp	r3, r2
 800a632:	d00e      	beq.n	800a652 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	4a15      	ldr	r2, [pc, #84]	; (800a690 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d009      	beq.n	800a652 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	4a18      	ldr	r2, [pc, #96]	; (800a6a4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a644:	4293      	cmp	r3, r2
 800a646:	d004      	beq.n	800a652 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	4a11      	ldr	r2, [pc, #68]	; (800a694 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	d10c      	bne.n	800a66c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a658:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	689b      	ldr	r3, [r3, #8]
 800a65e:	68ba      	ldr	r2, [r7, #8]
 800a660:	4313      	orrs	r3, r2
 800a662:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	68ba      	ldr	r2, [r7, #8]
 800a66a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2201      	movs	r2, #1
 800a670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2200      	movs	r2, #0
 800a678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a67c:	2300      	movs	r3, #0
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3714      	adds	r7, #20
 800a682:	46bd      	mov	sp, r7
 800a684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a688:	4770      	bx	lr
 800a68a:	bf00      	nop
 800a68c:	40012c00 	.word	0x40012c00
 800a690:	40013400 	.word	0x40013400
 800a694:	40015000 	.word	0x40015000
 800a698:	40000400 	.word	0x40000400
 800a69c:	40000800 	.word	0x40000800
 800a6a0:	40000c00 	.word	0x40000c00
 800a6a4:	40014000 	.word	0x40014000

0800a6a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b085      	sub	sp, #20
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6bc:	2b01      	cmp	r3, #1
 800a6be:	d101      	bne.n	800a6c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a6c0:	2302      	movs	r3, #2
 800a6c2:	e096      	b.n	800a7f2 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	68db      	ldr	r3, [r3, #12]
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	689b      	ldr	r3, [r3, #8]
 800a6e4:	4313      	orrs	r3, r2
 800a6e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	4313      	orrs	r3, r2
 800a702:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	691b      	ldr	r3, [r3, #16]
 800a70e:	4313      	orrs	r3, r2
 800a710:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	695b      	ldr	r3, [r3, #20]
 800a71c:	4313      	orrs	r3, r2
 800a71e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a72a:	4313      	orrs	r3, r2
 800a72c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	699b      	ldr	r3, [r3, #24]
 800a738:	041b      	lsls	r3, r3, #16
 800a73a:	4313      	orrs	r3, r2
 800a73c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	4a2f      	ldr	r2, [pc, #188]	; (800a800 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800a744:	4293      	cmp	r3, r2
 800a746:	d009      	beq.n	800a75c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4a2d      	ldr	r2, [pc, #180]	; (800a804 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800a74e:	4293      	cmp	r3, r2
 800a750:	d004      	beq.n	800a75c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	4a2c      	ldr	r2, [pc, #176]	; (800a808 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800a758:	4293      	cmp	r3, r2
 800a75a:	d106      	bne.n	800a76a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	69db      	ldr	r3, [r3, #28]
 800a766:	4313      	orrs	r3, r2
 800a768:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4a24      	ldr	r2, [pc, #144]	; (800a800 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800a770:	4293      	cmp	r3, r2
 800a772:	d009      	beq.n	800a788 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	4a22      	ldr	r2, [pc, #136]	; (800a804 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d004      	beq.n	800a788 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	4a21      	ldr	r2, [pc, #132]	; (800a808 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d12b      	bne.n	800a7e0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a792:	051b      	lsls	r3, r3, #20
 800a794:	4313      	orrs	r3, r2
 800a796:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	6a1b      	ldr	r3, [r3, #32]
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b0:	4313      	orrs	r3, r2
 800a7b2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	4a11      	ldr	r2, [pc, #68]	; (800a800 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d009      	beq.n	800a7d2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	4a10      	ldr	r2, [pc, #64]	; (800a804 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d004      	beq.n	800a7d2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	4a0e      	ldr	r2, [pc, #56]	; (800a808 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d106      	bne.n	800a7e0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7dc:	4313      	orrs	r3, r2
 800a7de:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	68fa      	ldr	r2, [r7, #12]
 800a7e6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a7f0:	2300      	movs	r3, #0
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3714      	adds	r7, #20
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fc:	4770      	bx	lr
 800a7fe:	bf00      	nop
 800a800:	40012c00 	.word	0x40012c00
 800a804:	40013400 	.word	0x40013400
 800a808:	40015000 	.word	0x40015000

0800a80c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b083      	sub	sp, #12
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a814:	bf00      	nop
 800a816:	370c      	adds	r7, #12
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr

0800a820 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a820:	b480      	push	{r7}
 800a822:	b083      	sub	sp, #12
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a828:	bf00      	nop
 800a82a:	370c      	adds	r7, #12
 800a82c:	46bd      	mov	sp, r7
 800a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a832:	4770      	bx	lr

0800a834 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a834:	b480      	push	{r7}
 800a836:	b083      	sub	sp, #12
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a83c:	bf00      	nop
 800a83e:	370c      	adds	r7, #12
 800a840:	46bd      	mov	sp, r7
 800a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a846:	4770      	bx	lr

0800a848 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a848:	b480      	push	{r7}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a850:	bf00      	nop
 800a852:	370c      	adds	r7, #12
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr

0800a85c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b083      	sub	sp, #12
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a864:	bf00      	nop
 800a866:	370c      	adds	r7, #12
 800a868:	46bd      	mov	sp, r7
 800a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86e:	4770      	bx	lr

0800a870 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a870:	b480      	push	{r7}
 800a872:	b083      	sub	sp, #12
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a878:	bf00      	nop
 800a87a:	370c      	adds	r7, #12
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr

0800a884 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a884:	b480      	push	{r7}
 800a886:	b083      	sub	sp, #12
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a88c:	bf00      	nop
 800a88e:	370c      	adds	r7, #12
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr

0800a898 <LL_EXTI_EnableIT_0_31>:
{
 800a898:	b480      	push	{r7}
 800a89a:	b083      	sub	sp, #12
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800a8a0:	4b05      	ldr	r3, [pc, #20]	; (800a8b8 <LL_EXTI_EnableIT_0_31+0x20>)
 800a8a2:	681a      	ldr	r2, [r3, #0]
 800a8a4:	4904      	ldr	r1, [pc, #16]	; (800a8b8 <LL_EXTI_EnableIT_0_31+0x20>)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	4313      	orrs	r3, r2
 800a8aa:	600b      	str	r3, [r1, #0]
}
 800a8ac:	bf00      	nop
 800a8ae:	370c      	adds	r7, #12
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr
 800a8b8:	40010400 	.word	0x40010400

0800a8bc <LL_EXTI_EnableIT_32_63>:
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b083      	sub	sp, #12
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800a8c4:	4b05      	ldr	r3, [pc, #20]	; (800a8dc <LL_EXTI_EnableIT_32_63+0x20>)
 800a8c6:	6a1a      	ldr	r2, [r3, #32]
 800a8c8:	4904      	ldr	r1, [pc, #16]	; (800a8dc <LL_EXTI_EnableIT_32_63+0x20>)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	620b      	str	r3, [r1, #32]
}
 800a8d0:	bf00      	nop
 800a8d2:	370c      	adds	r7, #12
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr
 800a8dc:	40010400 	.word	0x40010400

0800a8e0 <LL_EXTI_DisableIT_0_31>:
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b083      	sub	sp, #12
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800a8e8:	4b06      	ldr	r3, [pc, #24]	; (800a904 <LL_EXTI_DisableIT_0_31+0x24>)
 800a8ea:	681a      	ldr	r2, [r3, #0]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	43db      	mvns	r3, r3
 800a8f0:	4904      	ldr	r1, [pc, #16]	; (800a904 <LL_EXTI_DisableIT_0_31+0x24>)
 800a8f2:	4013      	ands	r3, r2
 800a8f4:	600b      	str	r3, [r1, #0]
}
 800a8f6:	bf00      	nop
 800a8f8:	370c      	adds	r7, #12
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a900:	4770      	bx	lr
 800a902:	bf00      	nop
 800a904:	40010400 	.word	0x40010400

0800a908 <LL_EXTI_DisableIT_32_63>:
{
 800a908:	b480      	push	{r7}
 800a90a:	b083      	sub	sp, #12
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800a910:	4b06      	ldr	r3, [pc, #24]	; (800a92c <LL_EXTI_DisableIT_32_63+0x24>)
 800a912:	6a1a      	ldr	r2, [r3, #32]
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	43db      	mvns	r3, r3
 800a918:	4904      	ldr	r1, [pc, #16]	; (800a92c <LL_EXTI_DisableIT_32_63+0x24>)
 800a91a:	4013      	ands	r3, r2
 800a91c:	620b      	str	r3, [r1, #32]
}
 800a91e:	bf00      	nop
 800a920:	370c      	adds	r7, #12
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr
 800a92a:	bf00      	nop
 800a92c:	40010400 	.word	0x40010400

0800a930 <LL_EXTI_EnableEvent_0_31>:
{
 800a930:	b480      	push	{r7}
 800a932:	b083      	sub	sp, #12
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800a938:	4b05      	ldr	r3, [pc, #20]	; (800a950 <LL_EXTI_EnableEvent_0_31+0x20>)
 800a93a:	685a      	ldr	r2, [r3, #4]
 800a93c:	4904      	ldr	r1, [pc, #16]	; (800a950 <LL_EXTI_EnableEvent_0_31+0x20>)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	4313      	orrs	r3, r2
 800a942:	604b      	str	r3, [r1, #4]
}
 800a944:	bf00      	nop
 800a946:	370c      	adds	r7, #12
 800a948:	46bd      	mov	sp, r7
 800a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94e:	4770      	bx	lr
 800a950:	40010400 	.word	0x40010400

0800a954 <LL_EXTI_EnableEvent_32_63>:
{
 800a954:	b480      	push	{r7}
 800a956:	b083      	sub	sp, #12
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800a95c:	4b05      	ldr	r3, [pc, #20]	; (800a974 <LL_EXTI_EnableEvent_32_63+0x20>)
 800a95e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a960:	4904      	ldr	r1, [pc, #16]	; (800a974 <LL_EXTI_EnableEvent_32_63+0x20>)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	4313      	orrs	r3, r2
 800a966:	624b      	str	r3, [r1, #36]	; 0x24
}
 800a968:	bf00      	nop
 800a96a:	370c      	adds	r7, #12
 800a96c:	46bd      	mov	sp, r7
 800a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a972:	4770      	bx	lr
 800a974:	40010400 	.word	0x40010400

0800a978 <LL_EXTI_DisableEvent_0_31>:
{
 800a978:	b480      	push	{r7}
 800a97a:	b083      	sub	sp, #12
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800a980:	4b06      	ldr	r3, [pc, #24]	; (800a99c <LL_EXTI_DisableEvent_0_31+0x24>)
 800a982:	685a      	ldr	r2, [r3, #4]
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	43db      	mvns	r3, r3
 800a988:	4904      	ldr	r1, [pc, #16]	; (800a99c <LL_EXTI_DisableEvent_0_31+0x24>)
 800a98a:	4013      	ands	r3, r2
 800a98c:	604b      	str	r3, [r1, #4]
}
 800a98e:	bf00      	nop
 800a990:	370c      	adds	r7, #12
 800a992:	46bd      	mov	sp, r7
 800a994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a998:	4770      	bx	lr
 800a99a:	bf00      	nop
 800a99c:	40010400 	.word	0x40010400

0800a9a0 <LL_EXTI_DisableEvent_32_63>:
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b083      	sub	sp, #12
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800a9a8:	4b06      	ldr	r3, [pc, #24]	; (800a9c4 <LL_EXTI_DisableEvent_32_63+0x24>)
 800a9aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	43db      	mvns	r3, r3
 800a9b0:	4904      	ldr	r1, [pc, #16]	; (800a9c4 <LL_EXTI_DisableEvent_32_63+0x24>)
 800a9b2:	4013      	ands	r3, r2
 800a9b4:	624b      	str	r3, [r1, #36]	; 0x24
}
 800a9b6:	bf00      	nop
 800a9b8:	370c      	adds	r7, #12
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c0:	4770      	bx	lr
 800a9c2:	bf00      	nop
 800a9c4:	40010400 	.word	0x40010400

0800a9c8 <LL_EXTI_EnableRisingTrig_0_31>:
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b083      	sub	sp, #12
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800a9d0:	4b05      	ldr	r3, [pc, #20]	; (800a9e8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800a9d2:	689a      	ldr	r2, [r3, #8]
 800a9d4:	4904      	ldr	r1, [pc, #16]	; (800a9e8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	608b      	str	r3, [r1, #8]
}
 800a9dc:	bf00      	nop
 800a9de:	370c      	adds	r7, #12
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e6:	4770      	bx	lr
 800a9e8:	40010400 	.word	0x40010400

0800a9ec <LL_EXTI_EnableRisingTrig_32_63>:
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b083      	sub	sp, #12
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800a9f4:	4b05      	ldr	r3, [pc, #20]	; (800aa0c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a9f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a9f8:	4904      	ldr	r1, [pc, #16]	; (800aa0c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	4313      	orrs	r3, r2
 800a9fe:	628b      	str	r3, [r1, #40]	; 0x28
}
 800aa00:	bf00      	nop
 800aa02:	370c      	adds	r7, #12
 800aa04:	46bd      	mov	sp, r7
 800aa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0a:	4770      	bx	lr
 800aa0c:	40010400 	.word	0x40010400

0800aa10 <LL_EXTI_DisableRisingTrig_0_31>:
{
 800aa10:	b480      	push	{r7}
 800aa12:	b083      	sub	sp, #12
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800aa18:	4b06      	ldr	r3, [pc, #24]	; (800aa34 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800aa1a:	689a      	ldr	r2, [r3, #8]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	43db      	mvns	r3, r3
 800aa20:	4904      	ldr	r1, [pc, #16]	; (800aa34 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800aa22:	4013      	ands	r3, r2
 800aa24:	608b      	str	r3, [r1, #8]
}
 800aa26:	bf00      	nop
 800aa28:	370c      	adds	r7, #12
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa30:	4770      	bx	lr
 800aa32:	bf00      	nop
 800aa34:	40010400 	.word	0x40010400

0800aa38 <LL_EXTI_DisableRisingTrig_32_63>:
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b083      	sub	sp, #12
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800aa40:	4b06      	ldr	r3, [pc, #24]	; (800aa5c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800aa42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	43db      	mvns	r3, r3
 800aa48:	4904      	ldr	r1, [pc, #16]	; (800aa5c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800aa4a:	4013      	ands	r3, r2
 800aa4c:	628b      	str	r3, [r1, #40]	; 0x28
}
 800aa4e:	bf00      	nop
 800aa50:	370c      	adds	r7, #12
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr
 800aa5a:	bf00      	nop
 800aa5c:	40010400 	.word	0x40010400

0800aa60 <LL_EXTI_EnableFallingTrig_0_31>:
{
 800aa60:	b480      	push	{r7}
 800aa62:	b083      	sub	sp, #12
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800aa68:	4b05      	ldr	r3, [pc, #20]	; (800aa80 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800aa6a:	68da      	ldr	r2, [r3, #12]
 800aa6c:	4904      	ldr	r1, [pc, #16]	; (800aa80 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	4313      	orrs	r3, r2
 800aa72:	60cb      	str	r3, [r1, #12]
}
 800aa74:	bf00      	nop
 800aa76:	370c      	adds	r7, #12
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7e:	4770      	bx	lr
 800aa80:	40010400 	.word	0x40010400

0800aa84 <LL_EXTI_EnableFallingTrig_32_63>:
{
 800aa84:	b480      	push	{r7}
 800aa86:	b083      	sub	sp, #12
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800aa8c:	4b05      	ldr	r3, [pc, #20]	; (800aaa4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800aa8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa90:	4904      	ldr	r1, [pc, #16]	; (800aaa4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	4313      	orrs	r3, r2
 800aa96:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800aa98:	bf00      	nop
 800aa9a:	370c      	adds	r7, #12
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr
 800aaa4:	40010400 	.word	0x40010400

0800aaa8 <LL_EXTI_DisableFallingTrig_0_31>:
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b083      	sub	sp, #12
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800aab0:	4b06      	ldr	r3, [pc, #24]	; (800aacc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800aab2:	68da      	ldr	r2, [r3, #12]
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	43db      	mvns	r3, r3
 800aab8:	4904      	ldr	r1, [pc, #16]	; (800aacc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800aaba:	4013      	ands	r3, r2
 800aabc:	60cb      	str	r3, [r1, #12]
}
 800aabe:	bf00      	nop
 800aac0:	370c      	adds	r7, #12
 800aac2:	46bd      	mov	sp, r7
 800aac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac8:	4770      	bx	lr
 800aaca:	bf00      	nop
 800aacc:	40010400 	.word	0x40010400

0800aad0 <LL_EXTI_DisableFallingTrig_32_63>:
{
 800aad0:	b480      	push	{r7}
 800aad2:	b083      	sub	sp, #12
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800aad8:	4b06      	ldr	r3, [pc, #24]	; (800aaf4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800aada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	43db      	mvns	r3, r3
 800aae0:	4904      	ldr	r1, [pc, #16]	; (800aaf4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800aae2:	4013      	ands	r3, r2
 800aae4:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800aae6:	bf00      	nop
 800aae8:	370c      	adds	r7, #12
 800aaea:	46bd      	mov	sp, r7
 800aaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf0:	4770      	bx	lr
 800aaf2:	bf00      	nop
 800aaf4:	40010400 	.word	0x40010400

0800aaf8 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b084      	sub	sp, #16
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 800ab00:	2300      	movs	r3, #0
 800ab02:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	7a1b      	ldrb	r3, [r3, #8]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	f000 80c8 	beq.w	800ac9e <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d05d      	beq.n	800abd2 <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	7a5b      	ldrb	r3, [r3, #9]
 800ab1a:	2b01      	cmp	r3, #1
 800ab1c:	d00e      	beq.n	800ab3c <LL_EXTI_Init+0x44>
 800ab1e:	2b02      	cmp	r3, #2
 800ab20:	d017      	beq.n	800ab52 <LL_EXTI_Init+0x5a>
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d120      	bne.n	800ab68 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f7ff ff24 	bl	800a978 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	4618      	mov	r0, r3
 800ab36:	f7ff feaf 	bl	800a898 <LL_EXTI_EnableIT_0_31>
          break;
 800ab3a:	e018      	b.n	800ab6e <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	4618      	mov	r0, r3
 800ab42:	f7ff fecd 	bl	800a8e0 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f7ff fef0 	bl	800a930 <LL_EXTI_EnableEvent_0_31>
          break;
 800ab50:	e00d      	b.n	800ab6e <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	4618      	mov	r0, r3
 800ab58:	f7ff fe9e 	bl	800a898 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	4618      	mov	r0, r3
 800ab62:	f7ff fee5 	bl	800a930 <LL_EXTI_EnableEvent_0_31>
          break;
 800ab66:	e002      	b.n	800ab6e <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 800ab68:	2301      	movs	r3, #1
 800ab6a:	60fb      	str	r3, [r7, #12]
          break;
 800ab6c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	7a9b      	ldrb	r3, [r3, #10]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d02d      	beq.n	800abd2 <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	7a9b      	ldrb	r3, [r3, #10]
 800ab7a:	2b02      	cmp	r3, #2
 800ab7c:	d00e      	beq.n	800ab9c <LL_EXTI_Init+0xa4>
 800ab7e:	2b03      	cmp	r3, #3
 800ab80:	d017      	beq.n	800abb2 <LL_EXTI_Init+0xba>
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	d120      	bne.n	800abc8 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f7ff ff8c 	bl	800aaa8 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	4618      	mov	r0, r3
 800ab96:	f7ff ff17 	bl	800a9c8 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800ab9a:	e01b      	b.n	800abd4 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4618      	mov	r0, r3
 800aba2:	f7ff ff35 	bl	800aa10 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	4618      	mov	r0, r3
 800abac:	f7ff ff58 	bl	800aa60 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800abb0:	e010      	b.n	800abd4 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	4618      	mov	r0, r3
 800abb8:	f7ff ff06 	bl	800a9c8 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	4618      	mov	r0, r3
 800abc2:	f7ff ff4d 	bl	800aa60 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800abc6:	e005      	b.n	800abd4 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f043 0302 	orr.w	r3, r3, #2
 800abce:	60fb      	str	r3, [r7, #12]
            break;
 800abd0:	e000      	b.n	800abd4 <LL_EXTI_Init+0xdc>
        }
      }
 800abd2:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	685b      	ldr	r3, [r3, #4]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d075      	beq.n	800acc8 <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	7a5b      	ldrb	r3, [r3, #9]
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d00e      	beq.n	800ac02 <LL_EXTI_Init+0x10a>
 800abe4:	2b02      	cmp	r3, #2
 800abe6:	d017      	beq.n	800ac18 <LL_EXTI_Init+0x120>
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d120      	bne.n	800ac2e <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	4618      	mov	r0, r3
 800abf2:	f7ff fed5 	bl	800a9a0 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	685b      	ldr	r3, [r3, #4]
 800abfa:	4618      	mov	r0, r3
 800abfc:	f7ff fe5e 	bl	800a8bc <LL_EXTI_EnableIT_32_63>
          break;
 800ac00:	e01a      	b.n	800ac38 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	4618      	mov	r0, r3
 800ac08:	f7ff fe7e 	bl	800a908 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	4618      	mov	r0, r3
 800ac12:	f7ff fe9f 	bl	800a954 <LL_EXTI_EnableEvent_32_63>
          break;
 800ac16:	e00f      	b.n	800ac38 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	685b      	ldr	r3, [r3, #4]
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f7ff fe4d 	bl	800a8bc <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	685b      	ldr	r3, [r3, #4]
 800ac26:	4618      	mov	r0, r3
 800ac28:	f7ff fe94 	bl	800a954 <LL_EXTI_EnableEvent_32_63>
          break;
 800ac2c:	e004      	b.n	800ac38 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	f043 0304 	orr.w	r3, r3, #4
 800ac34:	60fb      	str	r3, [r7, #12]
          break;
 800ac36:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	7a9b      	ldrb	r3, [r3, #10]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d043      	beq.n	800acc8 <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	7a9b      	ldrb	r3, [r3, #10]
 800ac44:	2b02      	cmp	r3, #2
 800ac46:	d00e      	beq.n	800ac66 <LL_EXTI_Init+0x16e>
 800ac48:	2b03      	cmp	r3, #3
 800ac4a:	d017      	beq.n	800ac7c <LL_EXTI_Init+0x184>
 800ac4c:	2b01      	cmp	r3, #1
 800ac4e:	d120      	bne.n	800ac92 <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	4618      	mov	r0, r3
 800ac56:	f7ff ff3b 	bl	800aad0 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	685b      	ldr	r3, [r3, #4]
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f7ff fec4 	bl	800a9ec <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800ac64:	e031      	b.n	800acca <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	685b      	ldr	r3, [r3, #4]
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f7ff fee4 	bl	800aa38 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	4618      	mov	r0, r3
 800ac76:	f7ff ff05 	bl	800aa84 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800ac7a:	e026      	b.n	800acca <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	685b      	ldr	r3, [r3, #4]
 800ac80:	4618      	mov	r0, r3
 800ac82:	f7ff feb3 	bl	800a9ec <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	685b      	ldr	r3, [r3, #4]
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f7ff fefa 	bl	800aa84 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800ac90:	e01b      	b.n	800acca <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	f043 0305 	orr.w	r3, r3, #5
 800ac98:	60fb      	str	r3, [r7, #12]
            break;
 800ac9a:	bf00      	nop
 800ac9c:	e015      	b.n	800acca <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	4618      	mov	r0, r3
 800aca4:	f7ff fe1c 	bl	800a8e0 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	4618      	mov	r0, r3
 800acae:	f7ff fe63 	bl	800a978 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	4618      	mov	r0, r3
 800acb8:	f7ff fe26 	bl	800a908 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	4618      	mov	r0, r3
 800acc2:	f7ff fe6d 	bl	800a9a0 <LL_EXTI_DisableEvent_32_63>
 800acc6:	e000      	b.n	800acca <LL_EXTI_Init+0x1d2>
      }
 800acc8:	bf00      	nop
  }

  return status;
 800acca:	68fb      	ldr	r3, [r7, #12]
}
 800accc:	4618      	mov	r0, r3
 800acce:	3710      	adds	r7, #16
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}

0800acd4 <LL_GPIO_SetPinMode>:
{
 800acd4:	b480      	push	{r7}
 800acd6:	b089      	sub	sp, #36	; 0x24
 800acd8:	af00      	add	r7, sp, #0
 800acda:	60f8      	str	r0, [r7, #12]
 800acdc:	60b9      	str	r1, [r7, #8]
 800acde:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	681a      	ldr	r2, [r3, #0]
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	fa93 f3a3 	rbit	r3, r3
 800acee:	613b      	str	r3, [r7, #16]
  return result;
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	fab3 f383 	clz	r3, r3
 800acf6:	b2db      	uxtb	r3, r3
 800acf8:	005b      	lsls	r3, r3, #1
 800acfa:	2103      	movs	r1, #3
 800acfc:	fa01 f303 	lsl.w	r3, r1, r3
 800ad00:	43db      	mvns	r3, r3
 800ad02:	401a      	ands	r2, r3
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad08:	69fb      	ldr	r3, [r7, #28]
 800ad0a:	fa93 f3a3 	rbit	r3, r3
 800ad0e:	61bb      	str	r3, [r7, #24]
  return result;
 800ad10:	69bb      	ldr	r3, [r7, #24]
 800ad12:	fab3 f383 	clz	r3, r3
 800ad16:	b2db      	uxtb	r3, r3
 800ad18:	005b      	lsls	r3, r3, #1
 800ad1a:	6879      	ldr	r1, [r7, #4]
 800ad1c:	fa01 f303 	lsl.w	r3, r1, r3
 800ad20:	431a      	orrs	r2, r3
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	601a      	str	r2, [r3, #0]
}
 800ad26:	bf00      	nop
 800ad28:	3724      	adds	r7, #36	; 0x24
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad30:	4770      	bx	lr

0800ad32 <LL_GPIO_SetPinOutputType>:
{
 800ad32:	b480      	push	{r7}
 800ad34:	b085      	sub	sp, #20
 800ad36:	af00      	add	r7, sp, #0
 800ad38:	60f8      	str	r0, [r7, #12]
 800ad3a:	60b9      	str	r1, [r7, #8]
 800ad3c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	685a      	ldr	r2, [r3, #4]
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	43db      	mvns	r3, r3
 800ad46:	401a      	ands	r2, r3
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	6879      	ldr	r1, [r7, #4]
 800ad4c:	fb01 f303 	mul.w	r3, r1, r3
 800ad50:	431a      	orrs	r2, r3
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	605a      	str	r2, [r3, #4]
}
 800ad56:	bf00      	nop
 800ad58:	3714      	adds	r7, #20
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad60:	4770      	bx	lr

0800ad62 <LL_GPIO_SetPinSpeed>:
{
 800ad62:	b480      	push	{r7}
 800ad64:	b089      	sub	sp, #36	; 0x24
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	60f8      	str	r0, [r7, #12]
 800ad6a:	60b9      	str	r1, [r7, #8]
 800ad6c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	689a      	ldr	r2, [r3, #8]
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	fa93 f3a3 	rbit	r3, r3
 800ad7c:	613b      	str	r3, [r7, #16]
  return result;
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	fab3 f383 	clz	r3, r3
 800ad84:	b2db      	uxtb	r3, r3
 800ad86:	005b      	lsls	r3, r3, #1
 800ad88:	2103      	movs	r1, #3
 800ad8a:	fa01 f303 	lsl.w	r3, r1, r3
 800ad8e:	43db      	mvns	r3, r3
 800ad90:	401a      	ands	r2, r3
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad96:	69fb      	ldr	r3, [r7, #28]
 800ad98:	fa93 f3a3 	rbit	r3, r3
 800ad9c:	61bb      	str	r3, [r7, #24]
  return result;
 800ad9e:	69bb      	ldr	r3, [r7, #24]
 800ada0:	fab3 f383 	clz	r3, r3
 800ada4:	b2db      	uxtb	r3, r3
 800ada6:	005b      	lsls	r3, r3, #1
 800ada8:	6879      	ldr	r1, [r7, #4]
 800adaa:	fa01 f303 	lsl.w	r3, r1, r3
 800adae:	431a      	orrs	r2, r3
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	609a      	str	r2, [r3, #8]
}
 800adb4:	bf00      	nop
 800adb6:	3724      	adds	r7, #36	; 0x24
 800adb8:	46bd      	mov	sp, r7
 800adba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbe:	4770      	bx	lr

0800adc0 <LL_GPIO_SetPinPull>:
{
 800adc0:	b480      	push	{r7}
 800adc2:	b089      	sub	sp, #36	; 0x24
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	60f8      	str	r0, [r7, #12]
 800adc8:	60b9      	str	r1, [r7, #8]
 800adca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	68da      	ldr	r2, [r3, #12]
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	fa93 f3a3 	rbit	r3, r3
 800adda:	613b      	str	r3, [r7, #16]
  return result;
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	fab3 f383 	clz	r3, r3
 800ade2:	b2db      	uxtb	r3, r3
 800ade4:	005b      	lsls	r3, r3, #1
 800ade6:	2103      	movs	r1, #3
 800ade8:	fa01 f303 	lsl.w	r3, r1, r3
 800adec:	43db      	mvns	r3, r3
 800adee:	401a      	ands	r2, r3
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800adf4:	69fb      	ldr	r3, [r7, #28]
 800adf6:	fa93 f3a3 	rbit	r3, r3
 800adfa:	61bb      	str	r3, [r7, #24]
  return result;
 800adfc:	69bb      	ldr	r3, [r7, #24]
 800adfe:	fab3 f383 	clz	r3, r3
 800ae02:	b2db      	uxtb	r3, r3
 800ae04:	005b      	lsls	r3, r3, #1
 800ae06:	6879      	ldr	r1, [r7, #4]
 800ae08:	fa01 f303 	lsl.w	r3, r1, r3
 800ae0c:	431a      	orrs	r2, r3
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	60da      	str	r2, [r3, #12]
}
 800ae12:	bf00      	nop
 800ae14:	3724      	adds	r7, #36	; 0x24
 800ae16:	46bd      	mov	sp, r7
 800ae18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1c:	4770      	bx	lr

0800ae1e <LL_GPIO_SetAFPin_0_7>:
{
 800ae1e:	b480      	push	{r7}
 800ae20:	b089      	sub	sp, #36	; 0x24
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	60f8      	str	r0, [r7, #12]
 800ae26:	60b9      	str	r1, [r7, #8]
 800ae28:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	6a1a      	ldr	r2, [r3, #32]
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	fa93 f3a3 	rbit	r3, r3
 800ae38:	613b      	str	r3, [r7, #16]
  return result;
 800ae3a:	693b      	ldr	r3, [r7, #16]
 800ae3c:	fab3 f383 	clz	r3, r3
 800ae40:	b2db      	uxtb	r3, r3
 800ae42:	009b      	lsls	r3, r3, #2
 800ae44:	210f      	movs	r1, #15
 800ae46:	fa01 f303 	lsl.w	r3, r1, r3
 800ae4a:	43db      	mvns	r3, r3
 800ae4c:	401a      	ands	r2, r3
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae52:	69fb      	ldr	r3, [r7, #28]
 800ae54:	fa93 f3a3 	rbit	r3, r3
 800ae58:	61bb      	str	r3, [r7, #24]
  return result;
 800ae5a:	69bb      	ldr	r3, [r7, #24]
 800ae5c:	fab3 f383 	clz	r3, r3
 800ae60:	b2db      	uxtb	r3, r3
 800ae62:	009b      	lsls	r3, r3, #2
 800ae64:	6879      	ldr	r1, [r7, #4]
 800ae66:	fa01 f303 	lsl.w	r3, r1, r3
 800ae6a:	431a      	orrs	r2, r3
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	621a      	str	r2, [r3, #32]
}
 800ae70:	bf00      	nop
 800ae72:	3724      	adds	r7, #36	; 0x24
 800ae74:	46bd      	mov	sp, r7
 800ae76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7a:	4770      	bx	lr

0800ae7c <LL_GPIO_SetAFPin_8_15>:
{
 800ae7c:	b480      	push	{r7}
 800ae7e:	b089      	sub	sp, #36	; 0x24
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	60f8      	str	r0, [r7, #12]
 800ae84:	60b9      	str	r1, [r7, #8]
 800ae86:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	0a1b      	lsrs	r3, r3, #8
 800ae90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	fa93 f3a3 	rbit	r3, r3
 800ae98:	613b      	str	r3, [r7, #16]
  return result;
 800ae9a:	693b      	ldr	r3, [r7, #16]
 800ae9c:	fab3 f383 	clz	r3, r3
 800aea0:	b2db      	uxtb	r3, r3
 800aea2:	009b      	lsls	r3, r3, #2
 800aea4:	210f      	movs	r1, #15
 800aea6:	fa01 f303 	lsl.w	r3, r1, r3
 800aeaa:	43db      	mvns	r3, r3
 800aeac:	401a      	ands	r2, r3
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	0a1b      	lsrs	r3, r3, #8
 800aeb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aeb4:	69fb      	ldr	r3, [r7, #28]
 800aeb6:	fa93 f3a3 	rbit	r3, r3
 800aeba:	61bb      	str	r3, [r7, #24]
  return result;
 800aebc:	69bb      	ldr	r3, [r7, #24]
 800aebe:	fab3 f383 	clz	r3, r3
 800aec2:	b2db      	uxtb	r3, r3
 800aec4:	009b      	lsls	r3, r3, #2
 800aec6:	6879      	ldr	r1, [r7, #4]
 800aec8:	fa01 f303 	lsl.w	r3, r1, r3
 800aecc:	431a      	orrs	r2, r3
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	625a      	str	r2, [r3, #36]	; 0x24
}
 800aed2:	bf00      	nop
 800aed4:	3724      	adds	r7, #36	; 0x24
 800aed6:	46bd      	mov	sp, r7
 800aed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aedc:	4770      	bx	lr

0800aede <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800aede:	b580      	push	{r7, lr}
 800aee0:	b086      	sub	sp, #24
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6078      	str	r0, [r7, #4]
 800aee6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	fa93 f3a3 	rbit	r3, r3
 800aef4:	60bb      	str	r3, [r7, #8]
  return result;
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	fab3 f383 	clz	r3, r3
 800aefc:	b2db      	uxtb	r3, r3
 800aefe:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800af00:	e040      	b.n	800af84 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	681a      	ldr	r2, [r3, #0]
 800af06:	2101      	movs	r1, #1
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	fa01 f303 	lsl.w	r3, r1, r3
 800af0e:	4013      	ands	r3, r2
 800af10:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d032      	beq.n	800af7e <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	685b      	ldr	r3, [r3, #4]
 800af1c:	461a      	mov	r2, r3
 800af1e:	6939      	ldr	r1, [r7, #16]
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f7ff fed7 	bl	800acd4 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	685b      	ldr	r3, [r3, #4]
 800af2a:	2b01      	cmp	r3, #1
 800af2c:	d003      	beq.n	800af36 <LL_GPIO_Init+0x58>
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	685b      	ldr	r3, [r3, #4]
 800af32:	2b02      	cmp	r3, #2
 800af34:	d106      	bne.n	800af44 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	689b      	ldr	r3, [r3, #8]
 800af3a:	461a      	mov	r2, r3
 800af3c:	6939      	ldr	r1, [r7, #16]
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f7ff ff0f 	bl	800ad62 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	691b      	ldr	r3, [r3, #16]
 800af48:	461a      	mov	r2, r3
 800af4a:	6939      	ldr	r1, [r7, #16]
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f7ff ff37 	bl	800adc0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	685b      	ldr	r3, [r3, #4]
 800af56:	2b02      	cmp	r3, #2
 800af58:	d111      	bne.n	800af7e <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	2bff      	cmp	r3, #255	; 0xff
 800af5e:	d807      	bhi.n	800af70 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	695b      	ldr	r3, [r3, #20]
 800af64:	461a      	mov	r2, r3
 800af66:	6939      	ldr	r1, [r7, #16]
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f7ff ff58 	bl	800ae1e <LL_GPIO_SetAFPin_0_7>
 800af6e:	e006      	b.n	800af7e <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	695b      	ldr	r3, [r3, #20]
 800af74:	461a      	mov	r2, r3
 800af76:	6939      	ldr	r1, [r7, #16]
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f7ff ff7f 	bl	800ae7c <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	3301      	adds	r3, #1
 800af82:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	681a      	ldr	r2, [r3, #0]
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	fa22 f303 	lsr.w	r3, r2, r3
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d1b7      	bne.n	800af02 <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	2b01      	cmp	r3, #1
 800af98:	d003      	beq.n	800afa2 <LL_GPIO_Init+0xc4>
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	685b      	ldr	r3, [r3, #4]
 800af9e:	2b02      	cmp	r3, #2
 800afa0:	d107      	bne.n	800afb2 <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	6819      	ldr	r1, [r3, #0]
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	68db      	ldr	r3, [r3, #12]
 800afaa:	461a      	mov	r2, r3
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f7ff fec0 	bl	800ad32 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800afb2:	2300      	movs	r3, #0
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3718      	adds	r7, #24
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}

0800afbc <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 */

void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint8_t border_colour)
{
 800afbc:	b590      	push	{r4, r7, lr}
 800afbe:	b087      	sub	sp, #28
 800afc0:	af02      	add	r7, sp, #8
 800afc2:	4604      	mov	r4, r0
 800afc4:	4608      	mov	r0, r1
 800afc6:	4611      	mov	r1, r2
 800afc8:	461a      	mov	r2, r3
 800afca:	4623      	mov	r3, r4
 800afcc:	80fb      	strh	r3, [r7, #6]
 800afce:	4603      	mov	r3, r0
 800afd0:	80bb      	strh	r3, [r7, #4]
 800afd2:	460b      	mov	r3, r1
 800afd4:	807b      	strh	r3, [r7, #2]
 800afd6:	4613      	mov	r3, r2
 800afd8:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 800afda:	2300      	movs	r3, #0
 800afdc:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 800afde:	7bfa      	ldrb	r2, [r7, #15]
 800afe0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800afe4:	429a      	cmp	r2, r3
 800afe6:	d93a      	bls.n	800b05e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa2>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 800afe8:	88ba      	ldrh	r2, [r7, #4]
 800afea:	7bfb      	ldrb	r3, [r7, #15]
 800afec:	441a      	add	r2, r3
 800afee:	88b9      	ldrh	r1, [r7, #4]
 800aff0:	883b      	ldrh	r3, [r7, #0]
 800aff2:	4419      	add	r1, r3
 800aff4:	7bfb      	ldrb	r3, [r7, #15]
 800aff6:	1acb      	subs	r3, r1, r3
 800aff8:	429a      	cmp	r2, r3
 800affa:	f000 8090 	beq.w	800b11e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
 800affe:	88fa      	ldrh	r2, [r7, #6]
 800b000:	7bfb      	ldrb	r3, [r7, #15]
 800b002:	441a      	add	r2, r3
 800b004:	88f9      	ldrh	r1, [r7, #6]
 800b006:	887b      	ldrh	r3, [r7, #2]
 800b008:	4419      	add	r1, r3
 800b00a:	7bfb      	ldrb	r3, [r7, #15]
 800b00c:	1acb      	subs	r3, r1, r3
 800b00e:	429a      	cmp	r2, r3
 800b010:	f000 8085 	beq.w	800b11e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 800b014:	7bfb      	ldrb	r3, [r7, #15]
 800b016:	b29a      	uxth	r2, r3
 800b018:	88fb      	ldrh	r3, [r7, #6]
 800b01a:	4413      	add	r3, r2
 800b01c:	b298      	uxth	r0, r3
 800b01e:	7bfb      	ldrb	r3, [r7, #15]
 800b020:	b29a      	uxth	r2, r3
 800b022:	88bb      	ldrh	r3, [r7, #4]
 800b024:	4413      	add	r3, r2
 800b026:	b299      	uxth	r1, r3
 800b028:	7bfb      	ldrb	r3, [r7, #15]
 800b02a:	b29b      	uxth	r3, r3
 800b02c:	005b      	lsls	r3, r3, #1
 800b02e:	b29b      	uxth	r3, r3
 800b030:	887a      	ldrh	r2, [r7, #2]
 800b032:	1ad3      	subs	r3, r2, r3
 800b034:	b29b      	uxth	r3, r3
 800b036:	3301      	adds	r3, #1
 800b038:	b29c      	uxth	r4, r3
 800b03a:	7bfb      	ldrb	r3, [r7, #15]
 800b03c:	b29b      	uxth	r3, r3
 800b03e:	005b      	lsls	r3, r3, #1
 800b040:	b29b      	uxth	r3, r3
 800b042:	883a      	ldrh	r2, [r7, #0]
 800b044:	1ad3      	subs	r3, r2, r3
 800b046:	b29b      	uxth	r3, r3
 800b048:	3301      	adds	r3, #1
 800b04a:	b29a      	uxth	r2, r3
 800b04c:	2304      	movs	r3, #4
 800b04e:	9301      	str	r3, [sp, #4]
 800b050:	8c3b      	ldrh	r3, [r7, #32]
 800b052:	9300      	str	r3, [sp, #0]
 800b054:	4613      	mov	r3, r2
 800b056:	4622      	mov	r2, r4
 800b058:	f000 fcd6 	bl	800ba08 <ILI9341_Draw_Rectangle>
				goto finish;
 800b05c:	e060      	b.n	800b120 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x164>
			}
		}

		// Horizontal lines
		ILI9341_Draw_Horizontal_Line(	x + b,
 800b05e:	7bfb      	ldrb	r3, [r7, #15]
 800b060:	b29a      	uxth	r2, r3
 800b062:	88fb      	ldrh	r3, [r7, #6]
 800b064:	4413      	add	r3, r2
 800b066:	b298      	uxth	r0, r3
 800b068:	7bfb      	ldrb	r3, [r7, #15]
 800b06a:	b29a      	uxth	r2, r3
 800b06c:	88bb      	ldrh	r3, [r7, #4]
 800b06e:	4413      	add	r3, r2
 800b070:	b299      	uxth	r1, r3
 800b072:	7bfb      	ldrb	r3, [r7, #15]
 800b074:	b29b      	uxth	r3, r3
 800b076:	005b      	lsls	r3, r3, #1
 800b078:	b29b      	uxth	r3, r3
 800b07a:	887a      	ldrh	r2, [r7, #2]
 800b07c:	1ad3      	subs	r3, r2, r3
 800b07e:	b29a      	uxth	r2, r3
 800b080:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b084:	b29b      	uxth	r3, r3
 800b086:	f000 fa81 	bl	800b58c <ILI9341_Draw_Horizontal_Line>
										y + b,
										w - (2*b),
										border_colour);

		ILI9341_Draw_Horizontal_Line(	x + b,
 800b08a:	7bfb      	ldrb	r3, [r7, #15]
 800b08c:	b29a      	uxth	r2, r3
 800b08e:	88fb      	ldrh	r3, [r7, #6]
 800b090:	4413      	add	r3, r2
 800b092:	b298      	uxth	r0, r3
										(y + h) - b,
 800b094:	88ba      	ldrh	r2, [r7, #4]
 800b096:	883b      	ldrh	r3, [r7, #0]
 800b098:	4413      	add	r3, r2
 800b09a:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800b09c:	7bfb      	ldrb	r3, [r7, #15]
 800b09e:	b29b      	uxth	r3, r3
 800b0a0:	1ad3      	subs	r3, r2, r3
 800b0a2:	b299      	uxth	r1, r3
 800b0a4:	7bfb      	ldrb	r3, [r7, #15]
 800b0a6:	b29b      	uxth	r3, r3
 800b0a8:	887a      	ldrh	r2, [r7, #2]
 800b0aa:	1ad3      	subs	r3, r2, r3
 800b0ac:	b29a      	uxth	r2, r3
 800b0ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b0b2:	b29b      	uxth	r3, r3
 800b0b4:	f000 fa6a 	bl	800b58c <ILI9341_Draw_Horizontal_Line>
										w - (b),
										border_colour);


		// Vertical lines
		ILI9341_Draw_Vertical_Line(		x + b,
 800b0b8:	7bfb      	ldrb	r3, [r7, #15]
 800b0ba:	b29a      	uxth	r2, r3
 800b0bc:	88fb      	ldrh	r3, [r7, #6]
 800b0be:	4413      	add	r3, r2
 800b0c0:	b298      	uxth	r0, r3
 800b0c2:	7bfb      	ldrb	r3, [r7, #15]
 800b0c4:	b29a      	uxth	r2, r3
 800b0c6:	88bb      	ldrh	r3, [r7, #4]
 800b0c8:	4413      	add	r3, r2
 800b0ca:	b299      	uxth	r1, r3
 800b0cc:	7bfb      	ldrb	r3, [r7, #15]
 800b0ce:	b29b      	uxth	r3, r3
 800b0d0:	005b      	lsls	r3, r3, #1
 800b0d2:	b29b      	uxth	r3, r3
 800b0d4:	883a      	ldrh	r2, [r7, #0]
 800b0d6:	1ad3      	subs	r3, r2, r3
 800b0d8:	b29a      	uxth	r2, r3
 800b0da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b0de:	b29b      	uxth	r3, r3
 800b0e0:	f000 fa9c 	bl	800b61c <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);

		ILI9341_Draw_Vertical_Line(		(x + w) - b,
 800b0e4:	88fa      	ldrh	r2, [r7, #6]
 800b0e6:	887b      	ldrh	r3, [r7, #2]
 800b0e8:	4413      	add	r3, r2
 800b0ea:	b29a      	uxth	r2, r3
 800b0ec:	7bfb      	ldrb	r3, [r7, #15]
 800b0ee:	b29b      	uxth	r3, r3
 800b0f0:	1ad3      	subs	r3, r2, r3
 800b0f2:	b298      	uxth	r0, r3
 800b0f4:	7bfb      	ldrb	r3, [r7, #15]
 800b0f6:	b29a      	uxth	r2, r3
 800b0f8:	88bb      	ldrh	r3, [r7, #4]
 800b0fa:	4413      	add	r3, r2
 800b0fc:	b299      	uxth	r1, r3
 800b0fe:	7bfb      	ldrb	r3, [r7, #15]
 800b100:	b29b      	uxth	r3, r3
 800b102:	005b      	lsls	r3, r3, #1
 800b104:	b29b      	uxth	r3, r3
 800b106:	883a      	ldrh	r2, [r7, #0]
 800b108:	1ad3      	subs	r3, r2, r3
 800b10a:	b29a      	uxth	r2, r3
 800b10c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b110:	b29b      	uxth	r3, r3
 800b112:	f000 fa83 	bl	800b61c <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 800b116:	7bfb      	ldrb	r3, [r7, #15]
 800b118:	3301      	adds	r3, #1
 800b11a:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 800b11c:	e75f      	b.n	800afde <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 800b11e:	bf00      	nop
	// done
	return;
 800b120:	bf00      	nop
}
 800b122:	3714      	adds	r7, #20
 800b124:	46bd      	mov	sp, r7
 800b126:	bd90      	pop	{r4, r7, pc}

0800b128 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800b128:	b590      	push	{r4, r7, lr}
 800b12a:	b089      	sub	sp, #36	; 0x24
 800b12c:	af02      	add	r7, sp, #8
 800b12e:	4604      	mov	r4, r0
 800b130:	4608      	mov	r0, r1
 800b132:	4611      	mov	r1, r2
 800b134:	461a      	mov	r2, r3
 800b136:	4623      	mov	r3, r4
 800b138:	71fb      	strb	r3, [r7, #7]
 800b13a:	4603      	mov	r3, r0
 800b13c:	80bb      	strh	r3, [r7, #4]
 800b13e:	460b      	mov	r3, r1
 800b140:	807b      	strh	r3, [r7, #2]
 800b142:	4613      	mov	r3, r2
 800b144:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 800b146:	79fb      	ldrb	r3, [r7, #7]
 800b148:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 800b14a:	7dfb      	ldrb	r3, [r7, #23]
 800b14c:	2b1f      	cmp	r3, #31
 800b14e:	d802      	bhi.n	800b156 <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 800b150:	2300      	movs	r3, #0
 800b152:	71fb      	strb	r3, [r7, #7]
 800b154:	e002      	b.n	800b15c <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 800b156:	7dfb      	ldrb	r3, [r7, #23]
 800b158:	3b20      	subs	r3, #32
 800b15a:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800b15c:	2300      	movs	r3, #0
 800b15e:	753b      	strb	r3, [r7, #20]
 800b160:	e012      	b.n	800b188 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 800b162:	7dfa      	ldrb	r2, [r7, #23]
 800b164:	7d38      	ldrb	r0, [r7, #20]
 800b166:	7d39      	ldrb	r1, [r7, #20]
 800b168:	4c48      	ldr	r4, [pc, #288]	; (800b28c <ILI9341_Draw_Char+0x164>)
 800b16a:	4613      	mov	r3, r2
 800b16c:	005b      	lsls	r3, r3, #1
 800b16e:	4413      	add	r3, r2
 800b170:	005b      	lsls	r3, r3, #1
 800b172:	4423      	add	r3, r4
 800b174:	4403      	add	r3, r0
 800b176:	781a      	ldrb	r2, [r3, #0]
 800b178:	f107 0318 	add.w	r3, r7, #24
 800b17c:	440b      	add	r3, r1
 800b17e:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800b182:	7d3b      	ldrb	r3, [r7, #20]
 800b184:	3301      	adds	r3, #1
 800b186:	753b      	strb	r3, [r7, #20]
 800b188:	7d3b      	ldrb	r3, [r7, #20]
 800b18a:	2b05      	cmp	r3, #5
 800b18c:	d9e9      	bls.n	800b162 <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 800b18e:	2300      	movs	r3, #0
 800b190:	757b      	strb	r3, [r7, #21]
 800b192:	e074      	b.n	800b27e <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 800b194:	2300      	movs	r3, #0
 800b196:	75bb      	strb	r3, [r7, #22]
 800b198:	e06b      	b.n	800b272 <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 800b19a:	7d7b      	ldrb	r3, [r7, #21]
 800b19c:	f107 0218 	add.w	r2, r7, #24
 800b1a0:	4413      	add	r3, r2
 800b1a2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	7dbb      	ldrb	r3, [r7, #22]
 800b1aa:	fa42 f303 	asr.w	r3, r2, r3
 800b1ae:	f003 0301 	and.w	r3, r3, #1
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d02d      	beq.n	800b212 <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 800b1b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b1b8:	2b01      	cmp	r3, #1
 800b1ba:	d10e      	bne.n	800b1da <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 800b1bc:	7d7b      	ldrb	r3, [r7, #21]
 800b1be:	b29a      	uxth	r2, r3
 800b1c0:	88bb      	ldrh	r3, [r7, #4]
 800b1c2:	4413      	add	r3, r2
 800b1c4:	b298      	uxth	r0, r3
 800b1c6:	7dbb      	ldrb	r3, [r7, #22]
 800b1c8:	b29a      	uxth	r2, r3
 800b1ca:	887b      	ldrh	r3, [r7, #2]
 800b1cc:	4413      	add	r3, r2
 800b1ce:	b29b      	uxth	r3, r3
 800b1d0:	883a      	ldrh	r2, [r7, #0]
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	f000 fae0 	bl	800b798 <ILI9341_Draw_Pixel>
 800b1d8:	e048      	b.n	800b26c <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 800b1da:	7d7b      	ldrb	r3, [r7, #21]
 800b1dc:	b29b      	uxth	r3, r3
 800b1de:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b1e0:	fb12 f303 	smulbb	r3, r2, r3
 800b1e4:	b29a      	uxth	r2, r3
 800b1e6:	88bb      	ldrh	r3, [r7, #4]
 800b1e8:	4413      	add	r3, r2
 800b1ea:	b298      	uxth	r0, r3
 800b1ec:	7dbb      	ldrb	r3, [r7, #22]
 800b1ee:	b29b      	uxth	r3, r3
 800b1f0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b1f2:	fb12 f303 	smulbb	r3, r2, r3
 800b1f6:	b29a      	uxth	r2, r3
 800b1f8:	887b      	ldrh	r3, [r7, #2]
 800b1fa:	4413      	add	r3, r2
 800b1fc:	b299      	uxth	r1, r3
 800b1fe:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800b200:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b202:	2301      	movs	r3, #1
 800b204:	9301      	str	r3, [sp, #4]
 800b206:	883b      	ldrh	r3, [r7, #0]
 800b208:	9300      	str	r3, [sp, #0]
 800b20a:	4623      	mov	r3, r4
 800b20c:	f000 fbfc 	bl	800ba08 <ILI9341_Draw_Rectangle>
 800b210:	e02c      	b.n	800b26c <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 800b212:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b214:	2b01      	cmp	r3, #1
 800b216:	d10e      	bne.n	800b236 <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 800b218:	7d7b      	ldrb	r3, [r7, #21]
 800b21a:	b29a      	uxth	r2, r3
 800b21c:	88bb      	ldrh	r3, [r7, #4]
 800b21e:	4413      	add	r3, r2
 800b220:	b298      	uxth	r0, r3
 800b222:	7dbb      	ldrb	r3, [r7, #22]
 800b224:	b29a      	uxth	r2, r3
 800b226:	887b      	ldrh	r3, [r7, #2]
 800b228:	4413      	add	r3, r2
 800b22a:	b29b      	uxth	r3, r3
 800b22c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800b22e:	4619      	mov	r1, r3
 800b230:	f000 fab2 	bl	800b798 <ILI9341_Draw_Pixel>
 800b234:	e01a      	b.n	800b26c <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 800b236:	7d7b      	ldrb	r3, [r7, #21]
 800b238:	b29b      	uxth	r3, r3
 800b23a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b23c:	fb12 f303 	smulbb	r3, r2, r3
 800b240:	b29a      	uxth	r2, r3
 800b242:	88bb      	ldrh	r3, [r7, #4]
 800b244:	4413      	add	r3, r2
 800b246:	b298      	uxth	r0, r3
 800b248:	7dbb      	ldrb	r3, [r7, #22]
 800b24a:	b29b      	uxth	r3, r3
 800b24c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b24e:	fb12 f303 	smulbb	r3, r2, r3
 800b252:	b29a      	uxth	r2, r3
 800b254:	887b      	ldrh	r3, [r7, #2]
 800b256:	4413      	add	r3, r2
 800b258:	b299      	uxth	r1, r3
 800b25a:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800b25c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b25e:	2301      	movs	r3, #1
 800b260:	9301      	str	r3, [sp, #4]
 800b262:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b264:	9300      	str	r3, [sp, #0]
 800b266:	4623      	mov	r3, r4
 800b268:	f000 fbce 	bl	800ba08 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 800b26c:	7dbb      	ldrb	r3, [r7, #22]
 800b26e:	3301      	adds	r3, #1
 800b270:	75bb      	strb	r3, [r7, #22]
 800b272:	7dbb      	ldrb	r3, [r7, #22]
 800b274:	2b07      	cmp	r3, #7
 800b276:	d990      	bls.n	800b19a <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 800b278:	7d7b      	ldrb	r3, [r7, #21]
 800b27a:	3301      	adds	r3, #1
 800b27c:	757b      	strb	r3, [r7, #21]
 800b27e:	7d7b      	ldrb	r3, [r7, #21]
 800b280:	2b05      	cmp	r3, #5
 800b282:	d987      	bls.n	800b194 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 800b284:	bf00      	nop
 800b286:	371c      	adds	r7, #28
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd90      	pop	{r4, r7, pc}
 800b28c:	0800ebc0 	.word	0x0800ebc0

0800b290 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800b290:	b590      	push	{r4, r7, lr}
 800b292:	b087      	sub	sp, #28
 800b294:	af02      	add	r7, sp, #8
 800b296:	60f8      	str	r0, [r7, #12]
 800b298:	4608      	mov	r0, r1
 800b29a:	4611      	mov	r1, r2
 800b29c:	461a      	mov	r2, r3
 800b29e:	4603      	mov	r3, r0
 800b2a0:	817b      	strh	r3, [r7, #10]
 800b2a2:	460b      	mov	r3, r1
 800b2a4:	813b      	strh	r3, [r7, #8]
 800b2a6:	4613      	mov	r3, r2
 800b2a8:	80fb      	strh	r3, [r7, #6]
    /*if(size & 1)
    {
    	size = ((size >> 1) * 2);
    }*/

    while (*Text) {
 800b2aa:	e016      	b.n	800b2da <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	1c5a      	adds	r2, r3, #1
 800b2b0:	60fa      	str	r2, [r7, #12]
 800b2b2:	7818      	ldrb	r0, [r3, #0]
 800b2b4:	88fc      	ldrh	r4, [r7, #6]
 800b2b6:	893a      	ldrh	r2, [r7, #8]
 800b2b8:	8979      	ldrh	r1, [r7, #10]
 800b2ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2bc:	9301      	str	r3, [sp, #4]
 800b2be:	8c3b      	ldrh	r3, [r7, #32]
 800b2c0:	9300      	str	r3, [sp, #0]
 800b2c2:	4623      	mov	r3, r4
 800b2c4:	f7ff ff30 	bl	800b128 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 800b2c8:	8c3b      	ldrh	r3, [r7, #32]
 800b2ca:	461a      	mov	r2, r3
 800b2cc:	0052      	lsls	r2, r2, #1
 800b2ce:	4413      	add	r3, r2
 800b2d0:	005b      	lsls	r3, r3, #1
 800b2d2:	b29a      	uxth	r2, r3
 800b2d4:	897b      	ldrh	r3, [r7, #10]
 800b2d6:	4413      	add	r3, r2
 800b2d8:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	781b      	ldrb	r3, [r3, #0]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d1e4      	bne.n	800b2ac <ILI9341_Draw_Text+0x1c>
    }


}
 800b2e2:	bf00      	nop
 800b2e4:	3714      	adds	r7, #20
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd90      	pop	{r4, r7, pc}
	...

0800b2ec <ILI9341_FillScreenGradient>:
		GPIOC->ODR |= CS_Pin;
	}
}

void ILI9341_FillScreenGradient()
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b084      	sub	sp, #16
 800b2f0:	af02      	add	r7, sp, #8
	uint16_t x = 0;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	80bb      	strh	r3, [r7, #4]
	//ILI9341_Draw_Text("Colour gradient", 10, 10, BLACK, 1, WHITE);
	//ILI9341_Draw_Text("Grayscale", 10, 20, BLACK, 1, WHITE);



	for(uint16_t i = 0; i <= (320); i++)
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	80fb      	strh	r3, [r7, #6]
 800b2fa:	e010      	b.n	800b31e <ILI9341_FillScreenGradient+0x32>

		uint16_t RGB_color = Red + Green + Blue;
		ILI9341_Draw_Rectangle(i, x, 1, 240, RGB_color, AREA_CHUNK);
*/

	ILI9341_Draw_Rectangle(i, x, 1, 240, (uint16_t)fade_log_seq_data_table[i], AREA_CHUNK);
 800b2fc:	88fb      	ldrh	r3, [r7, #6]
 800b2fe:	4a0c      	ldr	r2, [pc, #48]	; (800b330 <ILI9341_FillScreenGradient+0x44>)
 800b300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b304:	b29b      	uxth	r3, r3
 800b306:	88b9      	ldrh	r1, [r7, #4]
 800b308:	88f8      	ldrh	r0, [r7, #6]
 800b30a:	2204      	movs	r2, #4
 800b30c:	9201      	str	r2, [sp, #4]
 800b30e:	9300      	str	r3, [sp, #0]
 800b310:	23f0      	movs	r3, #240	; 0xf0
 800b312:	2201      	movs	r2, #1
 800b314:	f000 fb78 	bl	800ba08 <ILI9341_Draw_Rectangle>
	for(uint16_t i = 0; i <= (320); i++)
 800b318:	88fb      	ldrh	r3, [r7, #6]
 800b31a:	3301      	adds	r3, #1
 800b31c:	80fb      	strh	r3, [r7, #6]
 800b31e:	88fb      	ldrh	r3, [r7, #6]
 800b320:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800b324:	d9ea      	bls.n	800b2fc <ILI9341_FillScreenGradient+0x10>

	}
}
 800b326:	bf00      	nop
 800b328:	3708      	adds	r7, #8
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}
 800b32e:	bf00      	nop
 800b330:	200001e8 	.word	0x200001e8

0800b334 <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	af00      	add	r7, sp, #0

	_LCD_Enable();
 800b338:	f000 fc3a 	bl	800bbb0 <_LCD_Enable>
	ILI9341_SPI_Init();
 800b33c:	f000 f908 	bl	800b550 <ILI9341_SPI_Init>
	_LCD_Reset();
 800b340:	f000 fc46 	bl	800bbd0 <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 800b344:	2001      	movs	r0, #1
 800b346:	f000 fd11 	bl	800bd6c <_LCD_SendCommand>
	HAL_Delay(2000);
 800b34a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b34e:	f7fa fa91 	bl	8005874 <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 800b352:	20cb      	movs	r0, #203	; 0xcb
 800b354:	f000 fd0a 	bl	800bd6c <_LCD_SendCommand>
	_LCD_SendData(0x39);
 800b358:	2039      	movs	r0, #57	; 0x39
 800b35a:	f000 fd39 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(0x2C);
 800b35e:	202c      	movs	r0, #44	; 0x2c
 800b360:	f000 fd36 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(0x00);
 800b364:	2000      	movs	r0, #0
 800b366:	f000 fd33 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(0x34);
 800b36a:	2034      	movs	r0, #52	; 0x34
 800b36c:	f000 fd30 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(0x02);
 800b370:	2002      	movs	r0, #2
 800b372:	f000 fd2d 	bl	800bdd0 <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 800b376:	20cf      	movs	r0, #207	; 0xcf
 800b378:	f000 fcf8 	bl	800bd6c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800b37c:	2000      	movs	r0, #0
 800b37e:	f000 fd27 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800b382:	20c1      	movs	r0, #193	; 0xc1
 800b384:	f000 fd24 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(0x30);
 800b388:	2030      	movs	r0, #48	; 0x30
 800b38a:	f000 fd21 	bl	800bdd0 <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 800b38e:	20e8      	movs	r0, #232	; 0xe8
 800b390:	f000 fcec 	bl	800bd6c <_LCD_SendCommand>
	_LCD_SendData(0x85);
 800b394:	2085      	movs	r0, #133	; 0x85
 800b396:	f000 fd1b 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(0x00);
 800b39a:	2000      	movs	r0, #0
 800b39c:	f000 fd18 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(0x78);
 800b3a0:	2078      	movs	r0, #120	; 0x78
 800b3a2:	f000 fd15 	bl	800bdd0 <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 800b3a6:	20ea      	movs	r0, #234	; 0xea
 800b3a8:	f000 fce0 	bl	800bd6c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800b3ac:	2000      	movs	r0, #0
 800b3ae:	f000 fd0f 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(0x00);
 800b3b2:	2000      	movs	r0, #0
 800b3b4:	f000 fd0c 	bl	800bdd0 <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 800b3b8:	20ed      	movs	r0, #237	; 0xed
 800b3ba:	f000 fcd7 	bl	800bd6c <_LCD_SendCommand>
	_LCD_SendData(0x64);
 800b3be:	2064      	movs	r0, #100	; 0x64
 800b3c0:	f000 fd06 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(0x03);
 800b3c4:	2003      	movs	r0, #3
 800b3c6:	f000 fd03 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(0x12);
 800b3ca:	2012      	movs	r0, #18
 800b3cc:	f000 fd00 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(0x81);
 800b3d0:	2081      	movs	r0, #129	; 0x81
 800b3d2:	f000 fcfd 	bl	800bdd0 <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 800b3d6:	20f7      	movs	r0, #247	; 0xf7
 800b3d8:	f000 fcc8 	bl	800bd6c <_LCD_SendCommand>
	_LCD_SendData(0x20);
 800b3dc:	2020      	movs	r0, #32
 800b3de:	f000 fcf7 	bl	800bdd0 <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 800b3e2:	20c0      	movs	r0, #192	; 0xc0
 800b3e4:	f000 fcc2 	bl	800bd6c <_LCD_SendCommand>
	_LCD_SendData(0x23);
 800b3e8:	2023      	movs	r0, #35	; 0x23
 800b3ea:	f000 fcf1 	bl	800bdd0 <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 800b3ee:	20c1      	movs	r0, #193	; 0xc1
 800b3f0:	f000 fcbc 	bl	800bd6c <_LCD_SendCommand>
	_LCD_SendData(0x10);
 800b3f4:	2010      	movs	r0, #16
 800b3f6:	f000 fceb 	bl	800bdd0 <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 800b3fa:	20c5      	movs	r0, #197	; 0xc5
 800b3fc:	f000 fcb6 	bl	800bd6c <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 800b400:	203e      	movs	r0, #62	; 0x3e
 800b402:	f000 fce5 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(0x28);
 800b406:	2028      	movs	r0, #40	; 0x28
 800b408:	f000 fce2 	bl	800bdd0 <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 800b40c:	20c7      	movs	r0, #199	; 0xc7
 800b40e:	f000 fcad 	bl	800bd6c <_LCD_SendCommand>
	_LCD_SendData(0x86);
 800b412:	2086      	movs	r0, #134	; 0x86
 800b414:	f000 fcdc 	bl	800bdd0 <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 800b418:	2036      	movs	r0, #54	; 0x36
 800b41a:	f000 fca7 	bl	800bd6c <_LCD_SendCommand>
	_LCD_SendData(0x48);
 800b41e:	2048      	movs	r0, #72	; 0x48
 800b420:	f000 fcd6 	bl	800bdd0 <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 800b424:	203a      	movs	r0, #58	; 0x3a
 800b426:	f000 fca1 	bl	800bd6c <_LCD_SendCommand>
	_LCD_SendData(0x55);
 800b42a:	2055      	movs	r0, #85	; 0x55
 800b42c:	f000 fcd0 	bl	800bdd0 <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 800b430:	20b1      	movs	r0, #177	; 0xb1
 800b432:	f000 fc9b 	bl	800bd6c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800b436:	2000      	movs	r0, #0
 800b438:	f000 fcca 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(0x18);
 800b43c:	2018      	movs	r0, #24
 800b43e:	f000 fcc7 	bl	800bdd0 <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 800b442:	20b6      	movs	r0, #182	; 0xb6
 800b444:	f000 fc92 	bl	800bd6c <_LCD_SendCommand>
	_LCD_SendData(0x08);
 800b448:	2008      	movs	r0, #8
 800b44a:	f000 fcc1 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(0x82);
 800b44e:	2082      	movs	r0, #130	; 0x82
 800b450:	f000 fcbe 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(0x27);
 800b454:	2027      	movs	r0, #39	; 0x27
 800b456:	f000 fcbb 	bl	800bdd0 <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 800b45a:	20f2      	movs	r0, #242	; 0xf2
 800b45c:	f000 fc86 	bl	800bd6c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800b460:	2000      	movs	r0, #0
 800b462:	f000 fcb5 	bl	800bdd0 <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 800b466:	2026      	movs	r0, #38	; 0x26
 800b468:	f000 fc80 	bl	800bd6c <_LCD_SendCommand>
	_LCD_SendData(0x01);
 800b46c:	2001      	movs	r0, #1
 800b46e:	f000 fcaf 	bl	800bdd0 <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 800b472:	20e0      	movs	r0, #224	; 0xe0
 800b474:	f000 fc7a 	bl	800bd6c <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 800b478:	200f      	movs	r0, #15
 800b47a:	f000 fca9 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(0x31);
 800b47e:	2031      	movs	r0, #49	; 0x31
 800b480:	f000 fca6 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(0x2B);
 800b484:	202b      	movs	r0, #43	; 0x2b
 800b486:	f000 fca3 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800b48a:	200c      	movs	r0, #12
 800b48c:	f000 fca0 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800b490:	200e      	movs	r0, #14
 800b492:	f000 fc9d 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(0x08);
 800b496:	2008      	movs	r0, #8
 800b498:	f000 fc9a 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(0x4E);
 800b49c:	204e      	movs	r0, #78	; 0x4e
 800b49e:	f000 fc97 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(0xF1);
 800b4a2:	20f1      	movs	r0, #241	; 0xf1
 800b4a4:	f000 fc94 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(0x37);
 800b4a8:	2037      	movs	r0, #55	; 0x37
 800b4aa:	f000 fc91 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(0x07);
 800b4ae:	2007      	movs	r0, #7
 800b4b0:	f000 fc8e 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(0x10);
 800b4b4:	2010      	movs	r0, #16
 800b4b6:	f000 fc8b 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(0x03);
 800b4ba:	2003      	movs	r0, #3
 800b4bc:	f000 fc88 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800b4c0:	200e      	movs	r0, #14
 800b4c2:	f000 fc85 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(0x09);
 800b4c6:	2009      	movs	r0, #9
 800b4c8:	f000 fc82 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(0x00);
 800b4cc:	2000      	movs	r0, #0
 800b4ce:	f000 fc7f 	bl	800bdd0 <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 800b4d2:	20e1      	movs	r0, #225	; 0xe1
 800b4d4:	f000 fc4a 	bl	800bd6c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800b4d8:	2000      	movs	r0, #0
 800b4da:	f000 fc79 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800b4de:	200e      	movs	r0, #14
 800b4e0:	f000 fc76 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(0x14);
 800b4e4:	2014      	movs	r0, #20
 800b4e6:	f000 fc73 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(0x03);
 800b4ea:	2003      	movs	r0, #3
 800b4ec:	f000 fc70 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(0x11);
 800b4f0:	2011      	movs	r0, #17
 800b4f2:	f000 fc6d 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(0x07);
 800b4f6:	2007      	movs	r0, #7
 800b4f8:	f000 fc6a 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(0x31);
 800b4fc:	2031      	movs	r0, #49	; 0x31
 800b4fe:	f000 fc67 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800b502:	20c1      	movs	r0, #193	; 0xc1
 800b504:	f000 fc64 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(0x48);
 800b508:	2048      	movs	r0, #72	; 0x48
 800b50a:	f000 fc61 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(0x08);
 800b50e:	2008      	movs	r0, #8
 800b510:	f000 fc5e 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800b514:	200f      	movs	r0, #15
 800b516:	f000 fc5b 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800b51a:	200c      	movs	r0, #12
 800b51c:	f000 fc58 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(0x31);
 800b520:	2031      	movs	r0, #49	; 0x31
 800b522:	f000 fc55 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(0x36);
 800b526:	2036      	movs	r0, #54	; 0x36
 800b528:	f000 fc52 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800b52c:	200f      	movs	r0, #15
 800b52e:	f000 fc4f 	bl	800bdd0 <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 800b532:	2011      	movs	r0, #17
 800b534:	f000 fc1a 	bl	800bd6c <_LCD_SendCommand>
	HAL_Delay(240);
 800b538:	20f0      	movs	r0, #240	; 0xf0
 800b53a:	f7fa f99b 	bl	8005874 <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 800b53e:	2029      	movs	r0, #41	; 0x29
 800b540:	f000 fc14 	bl	800bd6c <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800b544:	2000      	movs	r0, #0
 800b546:	f000 fae5 	bl	800bb14 <ILI9341_Set_Rotation>
}
 800b54a:	bf00      	nop
 800b54c:	bd80      	pop	{r7, pc}
	...

0800b550 <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 800b550:	b480      	push	{r7}
 800b552:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b554:	4b0b      	ldr	r3, [pc, #44]	; (800b584 <ILI9341_SPI_Init+0x34>)
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b55c:	2b40      	cmp	r3, #64	; 0x40
 800b55e:	d005      	beq.n	800b56c <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 800b560:	4b08      	ldr	r3, [pc, #32]	; (800b584 <ILI9341_SPI_Init+0x34>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	4a07      	ldr	r2, [pc, #28]	; (800b584 <ILI9341_SPI_Init+0x34>)
 800b566:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b56a:	6013      	str	r3, [r2, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b56c:	4b06      	ldr	r3, [pc, #24]	; (800b588 <ILI9341_SPI_Init+0x38>)
 800b56e:	695b      	ldr	r3, [r3, #20]
 800b570:	4a05      	ldr	r2, [pc, #20]	; (800b588 <ILI9341_SPI_Init+0x38>)
 800b572:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b576:	6153      	str	r3, [r2, #20]
}
 800b578:	bf00      	nop
 800b57a:	46bd      	mov	sp, r7
 800b57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b580:	4770      	bx	lr
 800b582:	bf00      	nop
 800b584:	40003c00 	.word	0x40003c00
 800b588:	48000400 	.word	0x48000400

0800b58c <ILI9341_Draw_Horizontal_Line>:
 *	Draw horizontal line
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 800b58c:	b590      	push	{r4, r7, lr}
 800b58e:	b085      	sub	sp, #20
 800b590:	af02      	add	r7, sp, #8
 800b592:	4604      	mov	r4, r0
 800b594:	4608      	mov	r0, r1
 800b596:	4611      	mov	r1, r2
 800b598:	461a      	mov	r2, r3
 800b59a:	4623      	mov	r3, r4
 800b59c:	80fb      	strh	r3, [r7, #6]
 800b59e:	4603      	mov	r3, r0
 800b5a0:	80bb      	strh	r3, [r7, #4]
 800b5a2:	460b      	mov	r3, r1
 800b5a4:	807b      	strh	r3, [r7, #2]
 800b5a6:	4613      	mov	r3, r2
 800b5a8:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800b5aa:	4b1a      	ldr	r3, [pc, #104]	; (800b614 <ILI9341_Draw_Horizontal_Line+0x88>)
 800b5ac:	881b      	ldrh	r3, [r3, #0]
 800b5ae:	b29b      	uxth	r3, r3
 800b5b0:	88fa      	ldrh	r2, [r7, #6]
 800b5b2:	429a      	cmp	r2, r3
 800b5b4:	d229      	bcs.n	800b60a <ILI9341_Draw_Horizontal_Line+0x7e>
 800b5b6:	4b18      	ldr	r3, [pc, #96]	; (800b618 <ILI9341_Draw_Horizontal_Line+0x8c>)
 800b5b8:	881b      	ldrh	r3, [r3, #0]
 800b5ba:	b29b      	uxth	r3, r3
 800b5bc:	88ba      	ldrh	r2, [r7, #4]
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d223      	bcs.n	800b60a <ILI9341_Draw_Horizontal_Line+0x7e>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 800b5c2:	88fa      	ldrh	r2, [r7, #6]
 800b5c4:	887b      	ldrh	r3, [r7, #2]
 800b5c6:	4413      	add	r3, r2
 800b5c8:	3b01      	subs	r3, #1
 800b5ca:	4a12      	ldr	r2, [pc, #72]	; (800b614 <ILI9341_Draw_Horizontal_Line+0x88>)
 800b5cc:	8812      	ldrh	r2, [r2, #0]
 800b5ce:	b292      	uxth	r2, r2
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	db05      	blt.n	800b5e0 <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 800b5d4:	4b0f      	ldr	r3, [pc, #60]	; (800b614 <ILI9341_Draw_Horizontal_Line+0x88>)
 800b5d6:	881b      	ldrh	r3, [r3, #0]
 800b5d8:	b29a      	uxth	r2, r3
 800b5da:	88fb      	ldrh	r3, [r7, #6]
 800b5dc:	1ad3      	subs	r3, r2, r3
 800b5de:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(	xpos,
							ypos,
							(xpos + width) - 1,
 800b5e0:	88fa      	ldrh	r2, [r7, #6]
 800b5e2:	887b      	ldrh	r3, [r7, #2]
 800b5e4:	4413      	add	r3, r2
 800b5e6:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800b5e8:	3b01      	subs	r3, #1
 800b5ea:	b29a      	uxth	r2, r3
 800b5ec:	88bb      	ldrh	r3, [r7, #4]
 800b5ee:	88b9      	ldrh	r1, [r7, #4]
 800b5f0:	88f8      	ldrh	r0, [r7, #6]
 800b5f2:	f000 f85b 	bl	800b6ac <ILI9341_Set_Frame>
							ypos);

	_LCD_Write_Frame(xpos, ypos, colour, width, LINE_CHUNK);
 800b5f6:	887c      	ldrh	r4, [r7, #2]
 800b5f8:	883a      	ldrh	r2, [r7, #0]
 800b5fa:	88b9      	ldrh	r1, [r7, #4]
 800b5fc:	88f8      	ldrh	r0, [r7, #6]
 800b5fe:	2303      	movs	r3, #3
 800b600:	9300      	str	r3, [sp, #0]
 800b602:	4623      	mov	r3, r4
 800b604:	f000 fb02 	bl	800bc0c <_LCD_Write_Frame>
 800b608:	e000      	b.n	800b60c <ILI9341_Draw_Horizontal_Line+0x80>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800b60a:	bf00      	nop
}
 800b60c:	370c      	adds	r7, #12
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd90      	pop	{r4, r7, pc}
 800b612:	bf00      	nop
 800b614:	200001e2 	.word	0x200001e2
 800b618:	200001e0 	.word	0x200001e0

0800b61c <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 800b61c:	b590      	push	{r4, r7, lr}
 800b61e:	b085      	sub	sp, #20
 800b620:	af02      	add	r7, sp, #8
 800b622:	4604      	mov	r4, r0
 800b624:	4608      	mov	r0, r1
 800b626:	4611      	mov	r1, r2
 800b628:	461a      	mov	r2, r3
 800b62a:	4623      	mov	r3, r4
 800b62c:	80fb      	strh	r3, [r7, #6]
 800b62e:	4603      	mov	r3, r0
 800b630:	80bb      	strh	r3, [r7, #4]
 800b632:	460b      	mov	r3, r1
 800b634:	807b      	strh	r3, [r7, #2]
 800b636:	4613      	mov	r3, r2
 800b638:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800b63a:	4b1a      	ldr	r3, [pc, #104]	; (800b6a4 <ILI9341_Draw_Vertical_Line+0x88>)
 800b63c:	881b      	ldrh	r3, [r3, #0]
 800b63e:	b29b      	uxth	r3, r3
 800b640:	88fa      	ldrh	r2, [r7, #6]
 800b642:	429a      	cmp	r2, r3
 800b644:	d229      	bcs.n	800b69a <ILI9341_Draw_Vertical_Line+0x7e>
 800b646:	4b18      	ldr	r3, [pc, #96]	; (800b6a8 <ILI9341_Draw_Vertical_Line+0x8c>)
 800b648:	881b      	ldrh	r3, [r3, #0]
 800b64a:	b29b      	uxth	r3, r3
 800b64c:	88ba      	ldrh	r2, [r7, #4]
 800b64e:	429a      	cmp	r2, r3
 800b650:	d223      	bcs.n	800b69a <ILI9341_Draw_Vertical_Line+0x7e>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 800b652:	88ba      	ldrh	r2, [r7, #4]
 800b654:	887b      	ldrh	r3, [r7, #2]
 800b656:	4413      	add	r3, r2
 800b658:	3b01      	subs	r3, #1
 800b65a:	4a13      	ldr	r2, [pc, #76]	; (800b6a8 <ILI9341_Draw_Vertical_Line+0x8c>)
 800b65c:	8812      	ldrh	r2, [r2, #0]
 800b65e:	b292      	uxth	r2, r2
 800b660:	4293      	cmp	r3, r2
 800b662:	db05      	blt.n	800b670 <ILI9341_Draw_Vertical_Line+0x54>
		{
			height= LCD_HEIGHT - ypos;
 800b664:	4b10      	ldr	r3, [pc, #64]	; (800b6a8 <ILI9341_Draw_Vertical_Line+0x8c>)
 800b666:	881b      	ldrh	r3, [r3, #0]
 800b668:	b29a      	uxth	r2, r3
 800b66a:	88bb      	ldrh	r3, [r7, #4]
 800b66c:	1ad3      	subs	r3, r2, r3
 800b66e:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 800b670:	88ba      	ldrh	r2, [r7, #4]
 800b672:	887b      	ldrh	r3, [r7, #2]
 800b674:	4413      	add	r3, r2
 800b676:	b29b      	uxth	r3, r3
 800b678:	3b01      	subs	r3, #1
 800b67a:	b29b      	uxth	r3, r3
 800b67c:	88fa      	ldrh	r2, [r7, #6]
 800b67e:	88b9      	ldrh	r1, [r7, #4]
 800b680:	88f8      	ldrh	r0, [r7, #6]
 800b682:	f000 f813 	bl	800b6ac <ILI9341_Set_Frame>
	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 800b686:	887c      	ldrh	r4, [r7, #2]
 800b688:	883a      	ldrh	r2, [r7, #0]
 800b68a:	88b9      	ldrh	r1, [r7, #4]
 800b68c:	88f8      	ldrh	r0, [r7, #6]
 800b68e:	2303      	movs	r3, #3
 800b690:	9300      	str	r3, [sp, #0]
 800b692:	4623      	mov	r3, r4
 800b694:	f000 faba 	bl	800bc0c <_LCD_Write_Frame>
 800b698:	e000      	b.n	800b69c <ILI9341_Draw_Vertical_Line+0x80>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800b69a:	bf00      	nop
}
 800b69c:	370c      	adds	r7, #12
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd90      	pop	{r4, r7, pc}
 800b6a2:	bf00      	nop
 800b6a4:	200001e2 	.word	0x200001e2
 800b6a8:	200001e0 	.word	0x200001e0

0800b6ac <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 800b6ac:	b590      	push	{r4, r7, lr}
 800b6ae:	b083      	sub	sp, #12
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	4604      	mov	r4, r0
 800b6b4:	4608      	mov	r0, r1
 800b6b6:	4611      	mov	r1, r2
 800b6b8:	461a      	mov	r2, r3
 800b6ba:	4623      	mov	r3, r4
 800b6bc:	80fb      	strh	r3, [r7, #6]
 800b6be:	4603      	mov	r3, r0
 800b6c0:	80bb      	strh	r3, [r7, #4]
 800b6c2:	460b      	mov	r3, r1
 800b6c4:	807b      	strh	r3, [r7, #2]
 800b6c6:	4613      	mov	r3, r2
 800b6c8:	803b      	strh	r3, [r7, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 800b6ca:	202a      	movs	r0, #42	; 0x2a
 800b6cc:	f000 fb4e 	bl	800bd6c <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 800b6d0:	88fb      	ldrh	r3, [r7, #6]
 800b6d2:	0a1b      	lsrs	r3, r3, #8
 800b6d4:	b29b      	uxth	r3, r3
 800b6d6:	b2db      	uxtb	r3, r3
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f000 fb79 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(sc);
 800b6de:	88fb      	ldrh	r3, [r7, #6]
 800b6e0:	b2db      	uxtb	r3, r3
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f000 fb74 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 800b6e8:	887b      	ldrh	r3, [r7, #2]
 800b6ea:	0a1b      	lsrs	r3, r3, #8
 800b6ec:	b29b      	uxth	r3, r3
 800b6ee:	b2db      	uxtb	r3, r3
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f000 fb6d 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(ec);
 800b6f6:	887b      	ldrh	r3, [r7, #2]
 800b6f8:	b2db      	uxtb	r3, r3
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f000 fb68 	bl	800bdd0 <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 800b700:	202b      	movs	r0, #43	; 0x2b
 800b702:	f000 fb33 	bl	800bd6c <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 800b706:	88bb      	ldrh	r3, [r7, #4]
 800b708:	0a1b      	lsrs	r3, r3, #8
 800b70a:	b29b      	uxth	r3, r3
 800b70c:	b2db      	uxtb	r3, r3
 800b70e:	4618      	mov	r0, r3
 800b710:	f000 fb5e 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(sp);
 800b714:	88bb      	ldrh	r3, [r7, #4]
 800b716:	b2db      	uxtb	r3, r3
 800b718:	4618      	mov	r0, r3
 800b71a:	f000 fb59 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 800b71e:	883b      	ldrh	r3, [r7, #0]
 800b720:	0a1b      	lsrs	r3, r3, #8
 800b722:	b29b      	uxth	r3, r3
 800b724:	b2db      	uxtb	r3, r3
 800b726:	4618      	mov	r0, r3
 800b728:	f000 fb52 	bl	800bdd0 <_LCD_SendData>
	_LCD_SendData(ep);
 800b72c:	883b      	ldrh	r3, [r7, #0]
 800b72e:	b2db      	uxtb	r3, r3
 800b730:	4618      	mov	r0, r3
 800b732:	f000 fb4d 	bl	800bdd0 <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 800b736:	202c      	movs	r0, #44	; 0x2c
 800b738:	f000 fb18 	bl	800bd6c <_LCD_SendCommand>
}
 800b73c:	bf00      	nop
 800b73e:	370c      	adds	r7, #12
 800b740:	46bd      	mov	sp, r7
 800b742:	bd90      	pop	{r4, r7, pc}

0800b744 <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b084      	sub	sp, #16
 800b748:	af02      	add	r7, sp, #8
 800b74a:	4603      	mov	r3, r0
 800b74c:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 800b74e:	4b10      	ldr	r3, [pc, #64]	; (800b790 <ILI9341_Fill_Screen+0x4c>)
 800b750:	881b      	ldrh	r3, [r3, #0]
 800b752:	b29a      	uxth	r2, r3
 800b754:	4b0f      	ldr	r3, [pc, #60]	; (800b794 <ILI9341_Fill_Screen+0x50>)
 800b756:	881b      	ldrh	r3, [r3, #0]
 800b758:	b29b      	uxth	r3, r3
 800b75a:	2100      	movs	r1, #0
 800b75c:	2000      	movs	r0, #0
 800b75e:	f7ff ffa5 	bl	800b6ac <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 800b762:	4b0b      	ldr	r3, [pc, #44]	; (800b790 <ILI9341_Fill_Screen+0x4c>)
 800b764:	881b      	ldrh	r3, [r3, #0]
 800b766:	b29b      	uxth	r3, r3
 800b768:	461a      	mov	r2, r3
 800b76a:	4b0a      	ldr	r3, [pc, #40]	; (800b794 <ILI9341_Fill_Screen+0x50>)
 800b76c:	881b      	ldrh	r3, [r3, #0]
 800b76e:	b29b      	uxth	r3, r3
 800b770:	fb03 f302 	mul.w	r3, r3, r2
 800b774:	4619      	mov	r1, r3
 800b776:	88fa      	ldrh	r2, [r7, #6]
 800b778:	2304      	movs	r3, #4
 800b77a:	9300      	str	r3, [sp, #0]
 800b77c:	460b      	mov	r3, r1
 800b77e:	2100      	movs	r1, #0
 800b780:	2000      	movs	r0, #0
 800b782:	f000 fa43 	bl	800bc0c <_LCD_Write_Frame>
}
 800b786:	bf00      	nop
 800b788:	3708      	adds	r7, #8
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}
 800b78e:	bf00      	nop
 800b790:	200001e2 	.word	0x200001e2
 800b794:	200001e0 	.word	0x200001e0

0800b798 <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b08c      	sub	sp, #48	; 0x30
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	4603      	mov	r3, r0
 800b7a0:	80fb      	strh	r3, [r7, #6]
 800b7a2:	460b      	mov	r3, r1
 800b7a4:	80bb      	strh	r3, [r7, #4]
 800b7a6:	4613      	mov	r3, r2
 800b7a8:	807b      	strh	r3, [r7, #2]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800b7aa:	4b94      	ldr	r3, [pc, #592]	; (800b9fc <ILI9341_Draw_Pixel+0x264>)
 800b7ac:	881b      	ldrh	r3, [r3, #0]
 800b7ae:	b29b      	uxth	r3, r3
 800b7b0:	88fa      	ldrh	r2, [r7, #6]
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	f080 811e 	bcs.w	800b9f4 <ILI9341_Draw_Pixel+0x25c>
 800b7b8:	4b91      	ldr	r3, [pc, #580]	; (800ba00 <ILI9341_Draw_Pixel+0x268>)
 800b7ba:	881b      	ldrh	r3, [r3, #0]
 800b7bc:	b29b      	uxth	r3, r3
 800b7be:	88ba      	ldrh	r2, [r7, #4]
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	f080 8117 	bcs.w	800b9f4 <ILI9341_Draw_Pixel+0x25c>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800b7c6:	4b8f      	ldr	r3, [pc, #572]	; (800ba04 <ILI9341_Draw_Pixel+0x26c>)
 800b7c8:	695b      	ldr	r3, [r3, #20]
 800b7ca:	4a8e      	ldr	r2, [pc, #568]	; (800ba04 <ILI9341_Draw_Pixel+0x26c>)
 800b7cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7d0:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b7d2:	4b8c      	ldr	r3, [pc, #560]	; (800ba04 <ILI9341_Draw_Pixel+0x26c>)
 800b7d4:	695b      	ldr	r3, [r3, #20]
 800b7d6:	4a8b      	ldr	r2, [pc, #556]	; (800ba04 <ILI9341_Draw_Pixel+0x26c>)
 800b7d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b7dc:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2A, 0, 0);
 800b7de:	2200      	movs	r2, #0
 800b7e0:	2100      	movs	r1, #0
 800b7e2:	202a      	movs	r0, #42	; 0x2a
 800b7e4:	f000 fb26 	bl	800be34 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b7ec:	e008      	b.n	800b800 <ILI9341_Draw_Pixel+0x68>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b7ee:	4b85      	ldr	r3, [pc, #532]	; (800ba04 <ILI9341_Draw_Pixel+0x26c>)
 800b7f0:	695b      	ldr	r3, [r3, #20]
 800b7f2:	4a84      	ldr	r2, [pc, #528]	; (800ba04 <ILI9341_Draw_Pixel+0x26c>)
 800b7f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b7f8:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7fc:	3301      	adds	r3, #1
 800b7fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b802:	2b02      	cmp	r3, #2
 800b804:	ddf3      	ble.n	800b7ee <ILI9341_Draw_Pixel+0x56>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800b806:	4b7f      	ldr	r3, [pc, #508]	; (800ba04 <ILI9341_Draw_Pixel+0x26c>)
 800b808:	695b      	ldr	r3, [r3, #20]
 800b80a:	4a7e      	ldr	r2, [pc, #504]	; (800ba04 <ILI9341_Draw_Pixel+0x26c>)
 800b80c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b810:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800b812:	4b7c      	ldr	r3, [pc, #496]	; (800ba04 <ILI9341_Draw_Pixel+0x26c>)
 800b814:	695b      	ldr	r3, [r3, #20]
 800b816:	4a7b      	ldr	r2, [pc, #492]	; (800ba04 <ILI9341_Draw_Pixel+0x26c>)
 800b818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b81c:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b81e:	4b79      	ldr	r3, [pc, #484]	; (800ba04 <ILI9341_Draw_Pixel+0x26c>)
 800b820:	695b      	ldr	r3, [r3, #20]
 800b822:	4a78      	ldr	r2, [pc, #480]	; (800ba04 <ILI9341_Draw_Pixel+0x26c>)
 800b824:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b828:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] =
 800b82a:	88fb      	ldrh	r3, [r7, #6]
 800b82c:	0a1b      	lsrs	r3, r3, #8
 800b82e:	b29b      	uxth	r3, r3
 800b830:	b2db      	uxtb	r3, r3
 800b832:	753b      	strb	r3, [r7, #20]
 800b834:	88fb      	ldrh	r3, [r7, #6]
 800b836:	b2db      	uxtb	r3, r3
 800b838:	757b      	strb	r3, [r7, #21]
	{
			x >> 8,
			x,
			(x + 1) >> 8,
 800b83a:	88fb      	ldrh	r3, [r7, #6]
 800b83c:	3301      	adds	r3, #1
 800b83e:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer[4] =
 800b840:	b2db      	uxtb	r3, r3
 800b842:	75bb      	strb	r3, [r7, #22]
			(x + 1)
 800b844:	88fb      	ldrh	r3, [r7, #6]
 800b846:	b2db      	uxtb	r3, r3
 800b848:	3301      	adds	r3, #1
 800b84a:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer[4] =
 800b84c:	75fb      	strb	r3, [r7, #23]
	};

	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 9);
 800b84e:	f107 0014 	add.w	r0, r7, #20
 800b852:	2309      	movs	r3, #9
 800b854:	2200      	movs	r2, #0
 800b856:	2104      	movs	r1, #4
 800b858:	f000 fb02 	bl	800be60 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b85c:	2300      	movs	r3, #0
 800b85e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b860:	e008      	b.n	800b874 <ILI9341_Draw_Pixel+0xdc>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b862:	4b68      	ldr	r3, [pc, #416]	; (800ba04 <ILI9341_Draw_Pixel+0x26c>)
 800b864:	695b      	ldr	r3, [r3, #20]
 800b866:	4a67      	ldr	r2, [pc, #412]	; (800ba04 <ILI9341_Draw_Pixel+0x26c>)
 800b868:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b86c:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b870:	3301      	adds	r3, #1
 800b872:	62bb      	str	r3, [r7, #40]	; 0x28
 800b874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b876:	2b02      	cmp	r3, #2
 800b878:	ddf3      	ble.n	800b862 <ILI9341_Draw_Pixel+0xca>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800b87a:	4b62      	ldr	r3, [pc, #392]	; (800ba04 <ILI9341_Draw_Pixel+0x26c>)
 800b87c:	695b      	ldr	r3, [r3, #20]
 800b87e:	4a61      	ldr	r2, [pc, #388]	; (800ba04 <ILI9341_Draw_Pixel+0x26c>)
 800b880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b884:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800b886:	4b5f      	ldr	r3, [pc, #380]	; (800ba04 <ILI9341_Draw_Pixel+0x26c>)
 800b888:	695b      	ldr	r3, [r3, #20]
 800b88a:	4a5e      	ldr	r2, [pc, #376]	; (800ba04 <ILI9341_Draw_Pixel+0x26c>)
 800b88c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b890:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b892:	4b5c      	ldr	r3, [pc, #368]	; (800ba04 <ILI9341_Draw_Pixel+0x26c>)
 800b894:	695b      	ldr	r3, [r3, #20]
 800b896:	4a5b      	ldr	r2, [pc, #364]	; (800ba04 <ILI9341_Draw_Pixel+0x26c>)
 800b898:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b89c:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2B, 0, 0);
 800b89e:	2200      	movs	r2, #0
 800b8a0:	2100      	movs	r1, #0
 800b8a2:	202b      	movs	r0, #43	; 0x2b
 800b8a4:	f000 fac6 	bl	800be34 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	627b      	str	r3, [r7, #36]	; 0x24
 800b8ac:	e008      	b.n	800b8c0 <ILI9341_Draw_Pixel+0x128>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b8ae:	4b55      	ldr	r3, [pc, #340]	; (800ba04 <ILI9341_Draw_Pixel+0x26c>)
 800b8b0:	695b      	ldr	r3, [r3, #20]
 800b8b2:	4a54      	ldr	r2, [pc, #336]	; (800ba04 <ILI9341_Draw_Pixel+0x26c>)
 800b8b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b8b8:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8bc:	3301      	adds	r3, #1
 800b8be:	627b      	str	r3, [r7, #36]	; 0x24
 800b8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c2:	2b02      	cmp	r3, #2
 800b8c4:	ddf3      	ble.n	800b8ae <ILI9341_Draw_Pixel+0x116>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800b8c6:	4b4f      	ldr	r3, [pc, #316]	; (800ba04 <ILI9341_Draw_Pixel+0x26c>)
 800b8c8:	695b      	ldr	r3, [r3, #20]
 800b8ca:	4a4e      	ldr	r2, [pc, #312]	; (800ba04 <ILI9341_Draw_Pixel+0x26c>)
 800b8cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8d0:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800b8d2:	4b4c      	ldr	r3, [pc, #304]	; (800ba04 <ILI9341_Draw_Pixel+0x26c>)
 800b8d4:	695b      	ldr	r3, [r3, #20]
 800b8d6:	4a4b      	ldr	r2, [pc, #300]	; (800ba04 <ILI9341_Draw_Pixel+0x26c>)
 800b8d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8dc:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b8de:	4b49      	ldr	r3, [pc, #292]	; (800ba04 <ILI9341_Draw_Pixel+0x26c>)
 800b8e0:	695b      	ldr	r3, [r3, #20]
 800b8e2:	4a48      	ldr	r2, [pc, #288]	; (800ba04 <ILI9341_Draw_Pixel+0x26c>)
 800b8e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b8e8:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] =
 800b8ea:	88bb      	ldrh	r3, [r7, #4]
 800b8ec:	0a1b      	lsrs	r3, r3, #8
 800b8ee:	b29b      	uxth	r3, r3
 800b8f0:	b2db      	uxtb	r3, r3
 800b8f2:	743b      	strb	r3, [r7, #16]
 800b8f4:	88bb      	ldrh	r3, [r7, #4]
 800b8f6:	b2db      	uxtb	r3, r3
 800b8f8:	747b      	strb	r3, [r7, #17]
	{
			y >> 8,
			y,
			(y + 1) >> 8,
 800b8fa:	88bb      	ldrh	r3, [r7, #4]
 800b8fc:	3301      	adds	r3, #1
 800b8fe:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer1[4] =
 800b900:	b2db      	uxtb	r3, r3
 800b902:	74bb      	strb	r3, [r7, #18]
			(y + 1)
 800b904:	88bb      	ldrh	r3, [r7, #4]
 800b906:	b2db      	uxtb	r3, r3
 800b908:	3301      	adds	r3, #1
 800b90a:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer1[4] =
 800b90c:	74fb      	strb	r3, [r7, #19]
	};

	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 9);
 800b90e:	f107 0010 	add.w	r0, r7, #16
 800b912:	2309      	movs	r3, #9
 800b914:	2200      	movs	r2, #0
 800b916:	2104      	movs	r1, #4
 800b918:	f000 faa2 	bl	800be60 <_SPI_SendByteMultiByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b91c:	2300      	movs	r3, #0
 800b91e:	623b      	str	r3, [r7, #32]
 800b920:	e008      	b.n	800b934 <ILI9341_Draw_Pixel+0x19c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b922:	4b38      	ldr	r3, [pc, #224]	; (800ba04 <ILI9341_Draw_Pixel+0x26c>)
 800b924:	695b      	ldr	r3, [r3, #20]
 800b926:	4a37      	ldr	r2, [pc, #220]	; (800ba04 <ILI9341_Draw_Pixel+0x26c>)
 800b928:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b92c:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b92e:	6a3b      	ldr	r3, [r7, #32]
 800b930:	3301      	adds	r3, #1
 800b932:	623b      	str	r3, [r7, #32]
 800b934:	6a3b      	ldr	r3, [r7, #32]
 800b936:	2b02      	cmp	r3, #2
 800b938:	ddf3      	ble.n	800b922 <ILI9341_Draw_Pixel+0x18a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800b93a:	4b32      	ldr	r3, [pc, #200]	; (800ba04 <ILI9341_Draw_Pixel+0x26c>)
 800b93c:	695b      	ldr	r3, [r3, #20]
 800b93e:	4a31      	ldr	r2, [pc, #196]	; (800ba04 <ILI9341_Draw_Pixel+0x26c>)
 800b940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b944:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800b946:	4b2f      	ldr	r3, [pc, #188]	; (800ba04 <ILI9341_Draw_Pixel+0x26c>)
 800b948:	695b      	ldr	r3, [r3, #20]
 800b94a:	4a2e      	ldr	r2, [pc, #184]	; (800ba04 <ILI9341_Draw_Pixel+0x26c>)
 800b94c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b950:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b952:	4b2c      	ldr	r3, [pc, #176]	; (800ba04 <ILI9341_Draw_Pixel+0x26c>)
 800b954:	695b      	ldr	r3, [r3, #20]
 800b956:	4a2b      	ldr	r2, [pc, #172]	; (800ba04 <ILI9341_Draw_Pixel+0x26c>)
 800b958:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b95c:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2C, 0, 0);
 800b95e:	2200      	movs	r2, #0
 800b960:	2100      	movs	r1, #0
 800b962:	202c      	movs	r0, #44	; 0x2c
 800b964:	f000 fa66 	bl	800be34 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b968:	2300      	movs	r3, #0
 800b96a:	61fb      	str	r3, [r7, #28]
 800b96c:	e008      	b.n	800b980 <ILI9341_Draw_Pixel+0x1e8>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b96e:	4b25      	ldr	r3, [pc, #148]	; (800ba04 <ILI9341_Draw_Pixel+0x26c>)
 800b970:	695b      	ldr	r3, [r3, #20]
 800b972:	4a24      	ldr	r2, [pc, #144]	; (800ba04 <ILI9341_Draw_Pixel+0x26c>)
 800b974:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b978:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b97a:	69fb      	ldr	r3, [r7, #28]
 800b97c:	3301      	adds	r3, #1
 800b97e:	61fb      	str	r3, [r7, #28]
 800b980:	69fb      	ldr	r3, [r7, #28]
 800b982:	2b02      	cmp	r3, #2
 800b984:	ddf3      	ble.n	800b96e <ILI9341_Draw_Pixel+0x1d6>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800b986:	4b1f      	ldr	r3, [pc, #124]	; (800ba04 <ILI9341_Draw_Pixel+0x26c>)
 800b988:	695b      	ldr	r3, [r3, #20]
 800b98a:	4a1e      	ldr	r2, [pc, #120]	; (800ba04 <ILI9341_Draw_Pixel+0x26c>)
 800b98c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b990:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800b992:	4b1c      	ldr	r3, [pc, #112]	; (800ba04 <ILI9341_Draw_Pixel+0x26c>)
 800b994:	695b      	ldr	r3, [r3, #20]
 800b996:	4a1b      	ldr	r2, [pc, #108]	; (800ba04 <ILI9341_Draw_Pixel+0x26c>)
 800b998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b99c:	6153      	str	r3, [r2, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b99e:	4b19      	ldr	r3, [pc, #100]	; (800ba04 <ILI9341_Draw_Pixel+0x26c>)
 800b9a0:	695b      	ldr	r3, [r3, #20]
 800b9a2:	4a18      	ldr	r2, [pc, #96]	; (800ba04 <ILI9341_Draw_Pixel+0x26c>)
 800b9a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b9a8:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 800b9aa:	887b      	ldrh	r3, [r7, #2]
 800b9ac:	0a1b      	lsrs	r3, r3, #8
 800b9ae:	b29b      	uxth	r3, r3
 800b9b0:	b2db      	uxtb	r3, r3
 800b9b2:	733b      	strb	r3, [r7, #12]
 800b9b4:	887b      	ldrh	r3, [r7, #2]
 800b9b6:	b2db      	uxtb	r3, r3
 800b9b8:	737b      	strb	r3, [r7, #13]

	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 4, 0, 9);
 800b9ba:	f107 000c 	add.w	r0, r7, #12
 800b9be:	2309      	movs	r3, #9
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	2104      	movs	r1, #4
 800b9c4:	f000 fa4c 	bl	800be60 <_SPI_SendByteMultiByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	61bb      	str	r3, [r7, #24]
 800b9cc:	e008      	b.n	800b9e0 <ILI9341_Draw_Pixel+0x248>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b9ce:	4b0d      	ldr	r3, [pc, #52]	; (800ba04 <ILI9341_Draw_Pixel+0x26c>)
 800b9d0:	695b      	ldr	r3, [r3, #20]
 800b9d2:	4a0c      	ldr	r2, [pc, #48]	; (800ba04 <ILI9341_Draw_Pixel+0x26c>)
 800b9d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b9d8:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b9da:	69bb      	ldr	r3, [r7, #24]
 800b9dc:	3301      	adds	r3, #1
 800b9de:	61bb      	str	r3, [r7, #24]
 800b9e0:	69bb      	ldr	r3, [r7, #24]
 800b9e2:	2b02      	cmp	r3, #2
 800b9e4:	ddf3      	ble.n	800b9ce <ILI9341_Draw_Pixel+0x236>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800b9e6:	4b07      	ldr	r3, [pc, #28]	; (800ba04 <ILI9341_Draw_Pixel+0x26c>)
 800b9e8:	695b      	ldr	r3, [r3, #20]
 800b9ea:	4a06      	ldr	r2, [pc, #24]	; (800ba04 <ILI9341_Draw_Pixel+0x26c>)
 800b9ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9f0:	6153      	str	r3, [r2, #20]
 800b9f2:	e000      	b.n	800b9f6 <ILI9341_Draw_Pixel+0x25e>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800b9f4:	bf00      	nop


}
 800b9f6:	3730      	adds	r7, #48	; 0x30
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}
 800b9fc:	200001e2 	.word	0x200001e2
 800ba00:	200001e0 	.word	0x200001e0
 800ba04:	48000400 	.word	0x48000400

0800ba08 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 800ba08:	b590      	push	{r4, r7, lr}
 800ba0a:	b087      	sub	sp, #28
 800ba0c:	af02      	add	r7, sp, #8
 800ba0e:	4604      	mov	r4, r0
 800ba10:	4608      	mov	r0, r1
 800ba12:	4611      	mov	r1, r2
 800ba14:	461a      	mov	r2, r3
 800ba16:	4623      	mov	r3, r4
 800ba18:	80fb      	strh	r3, [r7, #6]
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	80bb      	strh	r3, [r7, #4]
 800ba1e:	460b      	mov	r3, r1
 800ba20:	807b      	strh	r3, [r7, #2]
 800ba22:	4613      	mov	r3, r2
 800ba24:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800ba26:	4b39      	ldr	r3, [pc, #228]	; (800bb0c <ILI9341_Draw_Rectangle+0x104>)
 800ba28:	881b      	ldrh	r3, [r3, #0]
 800ba2a:	b29b      	uxth	r3, r3
 800ba2c:	88fa      	ldrh	r2, [r7, #6]
 800ba2e:	429a      	cmp	r2, r3
 800ba30:	d268      	bcs.n	800bb04 <ILI9341_Draw_Rectangle+0xfc>
 800ba32:	4b37      	ldr	r3, [pc, #220]	; (800bb10 <ILI9341_Draw_Rectangle+0x108>)
 800ba34:	881b      	ldrh	r3, [r3, #0]
 800ba36:	b29b      	uxth	r3, r3
 800ba38:	88ba      	ldrh	r2, [r7, #4]
 800ba3a:	429a      	cmp	r2, r3
 800ba3c:	d262      	bcs.n	800bb04 <ILI9341_Draw_Rectangle+0xfc>
	if((xpos+width-1)>=LCD_WIDTH)
 800ba3e:	88fa      	ldrh	r2, [r7, #6]
 800ba40:	887b      	ldrh	r3, [r7, #2]
 800ba42:	4413      	add	r3, r2
 800ba44:	3b01      	subs	r3, #1
 800ba46:	4a31      	ldr	r2, [pc, #196]	; (800bb0c <ILI9341_Draw_Rectangle+0x104>)
 800ba48:	8812      	ldrh	r2, [r2, #0]
 800ba4a:	b292      	uxth	r2, r2
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	db05      	blt.n	800ba5c <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 800ba50:	4b2e      	ldr	r3, [pc, #184]	; (800bb0c <ILI9341_Draw_Rectangle+0x104>)
 800ba52:	881b      	ldrh	r3, [r3, #0]
 800ba54:	b29a      	uxth	r2, r3
 800ba56:	88fb      	ldrh	r3, [r7, #6]
 800ba58:	1ad3      	subs	r3, r2, r3
 800ba5a:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 800ba5c:	88ba      	ldrh	r2, [r7, #4]
 800ba5e:	883b      	ldrh	r3, [r7, #0]
 800ba60:	4413      	add	r3, r2
 800ba62:	3b01      	subs	r3, #1
 800ba64:	4a2a      	ldr	r2, [pc, #168]	; (800bb10 <ILI9341_Draw_Rectangle+0x108>)
 800ba66:	8812      	ldrh	r2, [r2, #0]
 800ba68:	b292      	uxth	r2, r2
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	db05      	blt.n	800ba7a <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 800ba6e:	4b28      	ldr	r3, [pc, #160]	; (800bb10 <ILI9341_Draw_Rectangle+0x108>)
 800ba70:	881b      	ldrh	r3, [r3, #0]
 800ba72:	b29a      	uxth	r2, r3
 800ba74:	88bb      	ldrh	r3, [r7, #4]
 800ba76:	1ad3      	subs	r3, r2, r3
 800ba78:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 800ba7a:	88fa      	ldrh	r2, [r7, #6]
 800ba7c:	887b      	ldrh	r3, [r7, #2]
 800ba7e:	4413      	add	r3, r2
 800ba80:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800ba82:	3b01      	subs	r3, #1
 800ba84:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 800ba86:	88ba      	ldrh	r2, [r7, #4]
 800ba88:	883b      	ldrh	r3, [r7, #0]
 800ba8a:	4413      	add	r3, r2
 800ba8c:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800ba8e:	3b01      	subs	r3, #1
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	88b9      	ldrh	r1, [r7, #4]
 800ba94:	88f8      	ldrh	r0, [r7, #6]
 800ba96:	4622      	mov	r2, r4
 800ba98:	f7ff fe08 	bl	800b6ac <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 800ba9c:	883a      	ldrh	r2, [r7, #0]
 800ba9e:	887b      	ldrh	r3, [r7, #2]
 800baa0:	fb12 f303 	smulbb	r3, r2, r3
 800baa4:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 800baa6:	2300      	movs	r3, #0
 800baa8:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 800baaa:	89fb      	ldrh	r3, [r7, #14]
 800baac:	f003 0301 	and.w	r3, r3, #1
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d009      	beq.n	800bac8 <ILI9341_Draw_Rectangle+0xc0>
 800bab4:	89fb      	ldrh	r3, [r7, #14]
 800bab6:	2b01      	cmp	r3, #1
 800bab8:	d906      	bls.n	800bac8 <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 800baba:	2301      	movs	r3, #1
 800babc:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 800babe:	89fb      	ldrh	r3, [r7, #14]
 800bac0:	085b      	lsrs	r3, r3, #1
 800bac2:	b29b      	uxth	r3, r3
 800bac4:	005b      	lsls	r3, r3, #1
 800bac6:	81fb      	strh	r3, [r7, #14]
	}

	_LCD_Write_Frame(	xpos,
 800bac8:	89fc      	ldrh	r4, [r7, #14]
 800baca:	8c3a      	ldrh	r2, [r7, #32]
 800bacc:	88b9      	ldrh	r1, [r7, #4]
 800bace:	88f8      	ldrh	r0, [r7, #6]
 800bad0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bad4:	9300      	str	r3, [sp, #0]
 800bad6:	4623      	mov	r3, r4
 800bad8:	f000 f898 	bl	800bc0c <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 800badc:	7b7b      	ldrb	r3, [r7, #13]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d011      	beq.n	800bb06 <ILI9341_Draw_Rectangle+0xfe>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800bae2:	88fa      	ldrh	r2, [r7, #6]
 800bae4:	887b      	ldrh	r3, [r7, #2]
 800bae6:	4413      	add	r3, r2
 800bae8:	b29b      	uxth	r3, r3
 800baea:	3b01      	subs	r3, #1
 800baec:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800baee:	88ba      	ldrh	r2, [r7, #4]
 800baf0:	883b      	ldrh	r3, [r7, #0]
 800baf2:	4413      	add	r3, r2
 800baf4:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800baf6:	3b01      	subs	r3, #1
 800baf8:	b29b      	uxth	r3, r3
 800bafa:	8c3a      	ldrh	r2, [r7, #32]
 800bafc:	4619      	mov	r1, r3
 800bafe:	f7ff fe4b 	bl	800b798 <ILI9341_Draw_Pixel>
 800bb02:	e000      	b.n	800bb06 <ILI9341_Draw_Rectangle+0xfe>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800bb04:	bf00      	nop
							colour);
	}
}
 800bb06:	3714      	adds	r7, #20
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd90      	pop	{r4, r7, pc}
 800bb0c:	200001e2 	.word	0x200001e2
 800bb10:	200001e0 	.word	0x200001e0

0800bb14 <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b084      	sub	sp, #16
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = rotation;
 800bb1e:	79fb      	ldrb	r3, [r7, #7]
 800bb20:	73fb      	strb	r3, [r7, #15]

	_LCD_SendCommand(0x36);
 800bb22:	2036      	movs	r0, #54	; 0x36
 800bb24:	f000 f922 	bl	800bd6c <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 800bb28:	7bfb      	ldrb	r3, [r7, #15]
 800bb2a:	2b03      	cmp	r3, #3
 800bb2c:	d836      	bhi.n	800bb9c <ILI9341_Set_Rotation+0x88>
 800bb2e:	a201      	add	r2, pc, #4	; (adr r2, 800bb34 <ILI9341_Set_Rotation+0x20>)
 800bb30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb34:	0800bb45 	.word	0x0800bb45
 800bb38:	0800bb5b 	.word	0x0800bb5b
 800bb3c:	0800bb71 	.word	0x0800bb71
 800bb40:	0800bb87 	.word	0x0800bb87
	{
		case SCREEN_VERTICAL_1:
			_LCD_SendData(0x40|0x08);
 800bb44:	2048      	movs	r0, #72	; 0x48
 800bb46:	f000 f943 	bl	800bdd0 <_LCD_SendData>
			LCD_WIDTH = 240;
 800bb4a:	4b17      	ldr	r3, [pc, #92]	; (800bba8 <ILI9341_Set_Rotation+0x94>)
 800bb4c:	22f0      	movs	r2, #240	; 0xf0
 800bb4e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800bb50:	4b16      	ldr	r3, [pc, #88]	; (800bbac <ILI9341_Set_Rotation+0x98>)
 800bb52:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800bb56:	801a      	strh	r2, [r3, #0]
			break;
 800bb58:	e021      	b.n	800bb9e <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			_LCD_SendData(0x20|0x08);
 800bb5a:	2028      	movs	r0, #40	; 0x28
 800bb5c:	f000 f938 	bl	800bdd0 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800bb60:	4b11      	ldr	r3, [pc, #68]	; (800bba8 <ILI9341_Set_Rotation+0x94>)
 800bb62:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800bb66:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800bb68:	4b10      	ldr	r3, [pc, #64]	; (800bbac <ILI9341_Set_Rotation+0x98>)
 800bb6a:	22f0      	movs	r2, #240	; 0xf0
 800bb6c:	801a      	strh	r2, [r3, #0]
			break;
 800bb6e:	e016      	b.n	800bb9e <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			_LCD_SendData(0x80|0x08);
 800bb70:	2088      	movs	r0, #136	; 0x88
 800bb72:	f000 f92d 	bl	800bdd0 <_LCD_SendData>
			LCD_WIDTH  = 240;
 800bb76:	4b0c      	ldr	r3, [pc, #48]	; (800bba8 <ILI9341_Set_Rotation+0x94>)
 800bb78:	22f0      	movs	r2, #240	; 0xf0
 800bb7a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800bb7c:	4b0b      	ldr	r3, [pc, #44]	; (800bbac <ILI9341_Set_Rotation+0x98>)
 800bb7e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800bb82:	801a      	strh	r2, [r3, #0]
			break;
 800bb84:	e00b      	b.n	800bb9e <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			_LCD_SendData(0x40|0x80|0x20|0x08);
 800bb86:	20e8      	movs	r0, #232	; 0xe8
 800bb88:	f000 f922 	bl	800bdd0 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800bb8c:	4b06      	ldr	r3, [pc, #24]	; (800bba8 <ILI9341_Set_Rotation+0x94>)
 800bb8e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800bb92:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800bb94:	4b05      	ldr	r3, [pc, #20]	; (800bbac <ILI9341_Set_Rotation+0x98>)
 800bb96:	22f0      	movs	r2, #240	; 0xf0
 800bb98:	801a      	strh	r2, [r3, #0]
			break;
 800bb9a:	e000      	b.n	800bb9e <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800bb9c:	bf00      	nop
	}
}
 800bb9e:	bf00      	nop
 800bba0:	3710      	adds	r7, #16
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}
 800bba6:	bf00      	nop
 800bba8:	200001e2 	.word	0x200001e2
 800bbac:	200001e0 	.word	0x200001e0

0800bbb0 <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800bbb4:	4b05      	ldr	r3, [pc, #20]	; (800bbcc <_LCD_Enable+0x1c>)
 800bbb6:	695b      	ldr	r3, [r3, #20]
 800bbb8:	4a04      	ldr	r2, [pc, #16]	; (800bbcc <_LCD_Enable+0x1c>)
 800bbba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bbbe:	6153      	str	r3, [r2, #20]
}
 800bbc0:	bf00      	nop
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc8:	4770      	bx	lr
 800bbca:	bf00      	nop
 800bbcc:	48000400 	.word	0x48000400

0800bbd0 <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 800bbd4:	4b0c      	ldr	r3, [pc, #48]	; (800bc08 <_LCD_Reset+0x38>)
 800bbd6:	695b      	ldr	r3, [r3, #20]
 800bbd8:	4a0b      	ldr	r2, [pc, #44]	; (800bc08 <_LCD_Reset+0x38>)
 800bbda:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bbde:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800bbe0:	20c8      	movs	r0, #200	; 0xc8
 800bbe2:	f7f9 fe47 	bl	8005874 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bbe6:	4b08      	ldr	r3, [pc, #32]	; (800bc08 <_LCD_Reset+0x38>)
 800bbe8:	695b      	ldr	r3, [r3, #20]
 800bbea:	4a07      	ldr	r2, [pc, #28]	; (800bc08 <_LCD_Reset+0x38>)
 800bbec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bbf0:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800bbf2:	20c8      	movs	r0, #200	; 0xc8
 800bbf4:	f7f9 fe3e 	bl	8005874 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800bbf8:	4b03      	ldr	r3, [pc, #12]	; (800bc08 <_LCD_Reset+0x38>)
 800bbfa:	695b      	ldr	r3, [r3, #20]
 800bbfc:	4a02      	ldr	r2, [pc, #8]	; (800bc08 <_LCD_Reset+0x38>)
 800bbfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bc02:	6153      	str	r3, [r2, #20]
}
 800bc04:	bf00      	nop
 800bc06:	bd80      	pop	{r7, pc}
 800bc08:	48000400 	.word	0x48000400

0800bc0c <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 800bc0c:	b5b0      	push	{r4, r5, r7, lr}
 800bc0e:	b08e      	sub	sp, #56	; 0x38
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	607b      	str	r3, [r7, #4]
 800bc14:	4603      	mov	r3, r0
 800bc16:	81fb      	strh	r3, [r7, #14]
 800bc18:	460b      	mov	r3, r1
 800bc1a:	81bb      	strh	r3, [r7, #12]
 800bc1c:	4613      	mov	r3, r2
 800bc1e:	817b      	strh	r3, [r7, #10]
 800bc20:	466b      	mov	r3, sp
 800bc22:	461d      	mov	r5, r3

	uint32_t buffer_size = 0;
 800bc24:	2300      	movs	r3, #0
 800bc26:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	005b      	lsls	r3, r3, #1
 800bc2c:	4a4d      	ldr	r2, [pc, #308]	; (800bd64 <_LCD_Write_Frame+0x158>)
 800bc2e:	8812      	ldrh	r2, [r2, #0]
 800bc30:	4293      	cmp	r3, r2
 800bc32:	d202      	bcs.n	800bc3a <_LCD_Write_Frame+0x2e>
	{
		buffer_size = chunk_size;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc38:	e002      	b.n	800bc40 <_LCD_Write_Frame+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 800bc3a:	4b4a      	ldr	r3, [pc, #296]	; (800bd64 <_LCD_Write_Frame+0x158>)
 800bc3c:	881b      	ldrh	r3, [r3, #0]
 800bc3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	unsigned char chifted = 	colour>>8;;
 800bc40:	897b      	ldrh	r3, [r7, #10]
 800bc42:	0a1b      	lsrs	r3, r3, #8
 800bc44:	b29b      	uxth	r3, r3
 800bc46:	77fb      	strb	r3, [r7, #31]
	unsigned char burst_buffer[buffer_size];
 800bc48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	3b01      	subs	r3, #1
 800bc4e:	61bb      	str	r3, [r7, #24]
 800bc50:	4601      	mov	r1, r0
 800bc52:	f04f 0200 	mov.w	r2, #0
 800bc56:	f04f 0300 	mov.w	r3, #0
 800bc5a:	f04f 0400 	mov.w	r4, #0
 800bc5e:	00d4      	lsls	r4, r2, #3
 800bc60:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800bc64:	00cb      	lsls	r3, r1, #3
 800bc66:	4601      	mov	r1, r0
 800bc68:	f04f 0200 	mov.w	r2, #0
 800bc6c:	f04f 0300 	mov.w	r3, #0
 800bc70:	f04f 0400 	mov.w	r4, #0
 800bc74:	00d4      	lsls	r4, r2, #3
 800bc76:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800bc7a:	00cb      	lsls	r3, r1, #3
 800bc7c:	1dc3      	adds	r3, r0, #7
 800bc7e:	08db      	lsrs	r3, r3, #3
 800bc80:	00db      	lsls	r3, r3, #3
 800bc82:	ebad 0d03 	sub.w	sp, sp, r3
 800bc86:	466b      	mov	r3, sp
 800bc88:	3300      	adds	r3, #0
 800bc8a:	617b      	str	r3, [r7, #20]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	633b      	str	r3, [r7, #48]	; 0x30
 800bc90:	e00d      	b.n	800bcae <_LCD_Write_Frame+0xa2>
	{
			burst_buffer[j] = 	chifted;
 800bc92:	697a      	ldr	r2, [r7, #20]
 800bc94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc96:	4413      	add	r3, r2
 800bc98:	7ffa      	ldrb	r2, [r7, #31]
 800bc9a:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 800bc9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc9e:	3301      	adds	r3, #1
 800bca0:	897a      	ldrh	r2, [r7, #10]
 800bca2:	b2d1      	uxtb	r1, r2
 800bca4:	697a      	ldr	r2, [r7, #20]
 800bca6:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800bca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcaa:	3302      	adds	r3, #2
 800bcac:	633b      	str	r3, [r7, #48]	; 0x30
 800bcae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcb2:	429a      	cmp	r2, r3
 800bcb4:	d3ed      	bcc.n	800bc92 <_LCD_Write_Frame+0x86>
	}
	
	uint32_t Sending_size = chunk_size*2;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	005b      	lsls	r3, r3, #1
 800bcba:	613b      	str	r3, [r7, #16]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d00d      	beq.n	800bce6 <_LCD_Write_Frame+0xda>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 800bcca:	693a      	ldr	r2, [r7, #16]
 800bccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcce:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcd2:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bcd8:	fbb3 f2f2 	udiv	r2, r3, r2
 800bcdc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bcde:	fb01 f202 	mul.w	r2, r1, r2
 800bce2:	1a9b      	subs	r3, r3, r2
 800bce4:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800bce6:	4b20      	ldr	r3, [pc, #128]	; (800bd68 <_LCD_Write_Frame+0x15c>)
 800bce8:	695b      	ldr	r3, [r3, #20]
 800bcea:	4a1f      	ldr	r2, [pc, #124]	; (800bd68 <_LCD_Write_Frame+0x15c>)
 800bcec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcf0:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bcf2:	4b1d      	ldr	r3, [pc, #116]	; (800bd68 <_LCD_Write_Frame+0x15c>)
 800bcf4:	695b      	ldr	r3, [r3, #20]
 800bcf6:	4a1c      	ldr	r2, [pc, #112]	; (800bd68 <_LCD_Write_Frame+0x15c>)
 800bcf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bcfc:	6153      	str	r3, [r2, #20]

	if(Sending_in_Block != 0)
 800bcfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d00f      	beq.n	800bd24 <_LCD_Write_Frame+0x118>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800bd04:	2300      	movs	r3, #0
 800bd06:	627b      	str	r3, [r7, #36]	; 0x24
 800bd08:	e008      	b.n	800bd1c <_LCD_Write_Frame+0x110>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 9);
 800bd0a:	6978      	ldr	r0, [r7, #20]
 800bd0c:	2309      	movs	r3, #9
 800bd0e:	2200      	movs	r2, #0
 800bd10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bd12:	f000 f8a5 	bl	800be60 <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800bd16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd18:	3301      	adds	r3, #1
 800bd1a:	627b      	str	r3, [r7, #36]	; 0x24
 800bd1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d3f2      	bcc.n	800bd0a <_LCD_Write_Frame+0xfe>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 9);
 800bd24:	6978      	ldr	r0, [r7, #20]
 800bd26:	2309      	movs	r3, #9
 800bd28:	2200      	movs	r2, #0
 800bd2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bd2c:	f000 f898 	bl	800be60 <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800bd30:	2300      	movs	r3, #0
 800bd32:	623b      	str	r3, [r7, #32]
 800bd34:	e008      	b.n	800bd48 <_LCD_Write_Frame+0x13c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bd36:	4b0c      	ldr	r3, [pc, #48]	; (800bd68 <_LCD_Write_Frame+0x15c>)
 800bd38:	695b      	ldr	r3, [r3, #20]
 800bd3a:	4a0b      	ldr	r2, [pc, #44]	; (800bd68 <_LCD_Write_Frame+0x15c>)
 800bd3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd40:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800bd42:	6a3b      	ldr	r3, [r7, #32]
 800bd44:	3301      	adds	r3, #1
 800bd46:	623b      	str	r3, [r7, #32]
 800bd48:	6a3b      	ldr	r3, [r7, #32]
 800bd4a:	2b02      	cmp	r3, #2
 800bd4c:	ddf3      	ble.n	800bd36 <_LCD_Write_Frame+0x12a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800bd4e:	4b06      	ldr	r3, [pc, #24]	; (800bd68 <_LCD_Write_Frame+0x15c>)
 800bd50:	695b      	ldr	r3, [r3, #20]
 800bd52:	4a05      	ldr	r2, [pc, #20]	; (800bd68 <_LCD_Write_Frame+0x15c>)
 800bd54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd58:	6153      	str	r3, [r2, #20]
 800bd5a:	46ad      	mov	sp, r5

}
 800bd5c:	bf00      	nop
 800bd5e:	3738      	adds	r7, #56	; 0x38
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bdb0      	pop	{r4, r5, r7, pc}
 800bd64:	200001e4 	.word	0x200001e4
 800bd68:	48000400 	.word	0x48000400

0800bd6c <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b084      	sub	sp, #16
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	4603      	mov	r3, r0
 800bd74:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bd76:	4b15      	ldr	r3, [pc, #84]	; (800bdcc <_LCD_SendCommand+0x60>)
 800bd78:	695b      	ldr	r3, [r3, #20]
 800bd7a:	4a14      	ldr	r2, [pc, #80]	; (800bdcc <_LCD_SendCommand+0x60>)
 800bd7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd80:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800bd82:	4b12      	ldr	r3, [pc, #72]	; (800bdcc <_LCD_SendCommand+0x60>)
 800bd84:	695b      	ldr	r3, [r3, #20]
 800bd86:	4a11      	ldr	r2, [pc, #68]	; (800bdcc <_LCD_SendCommand+0x60>)
 800bd88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd8c:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(command, 0 , 0);
 800bd8e:	79fb      	ldrb	r3, [r7, #7]
 800bd90:	2200      	movs	r2, #0
 800bd92:	2100      	movs	r1, #0
 800bd94:	4618      	mov	r0, r3
 800bd96:	f000 f84d 	bl	800be34 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	60fb      	str	r3, [r7, #12]
 800bd9e:	e008      	b.n	800bdb2 <_LCD_SendCommand+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bda0:	4b0a      	ldr	r3, [pc, #40]	; (800bdcc <_LCD_SendCommand+0x60>)
 800bda2:	695b      	ldr	r3, [r3, #20]
 800bda4:	4a09      	ldr	r2, [pc, #36]	; (800bdcc <_LCD_SendCommand+0x60>)
 800bda6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bdaa:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	3301      	adds	r3, #1
 800bdb0:	60fb      	str	r3, [r7, #12]
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	2b02      	cmp	r3, #2
 800bdb6:	ddf3      	ble.n	800bda0 <_LCD_SendCommand+0x34>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800bdb8:	4b04      	ldr	r3, [pc, #16]	; (800bdcc <_LCD_SendCommand+0x60>)
 800bdba:	695b      	ldr	r3, [r3, #20]
 800bdbc:	4a03      	ldr	r2, [pc, #12]	; (800bdcc <_LCD_SendCommand+0x60>)
 800bdbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdc2:	6153      	str	r3, [r2, #20]
}
 800bdc4:	bf00      	nop
 800bdc6:	3710      	adds	r7, #16
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}
 800bdcc:	48000400 	.word	0x48000400

0800bdd0 <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b084      	sub	sp, #16
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800bdda:	4b15      	ldr	r3, [pc, #84]	; (800be30 <_LCD_SendData+0x60>)
 800bddc:	695b      	ldr	r3, [r3, #20]
 800bdde:	4a14      	ldr	r2, [pc, #80]	; (800be30 <_LCD_SendData+0x60>)
 800bde0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bde4:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bde6:	4b12      	ldr	r3, [pc, #72]	; (800be30 <_LCD_SendData+0x60>)
 800bde8:	695b      	ldr	r3, [r3, #20]
 800bdea:	4a11      	ldr	r2, [pc, #68]	; (800be30 <_LCD_SendData+0x60>)
 800bdec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bdf0:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(data, 0 , 0);
 800bdf2:	79fb      	ldrb	r3, [r7, #7]
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	2100      	movs	r1, #0
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f000 f81b 	bl	800be34 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800bdfe:	2300      	movs	r3, #0
 800be00:	60fb      	str	r3, [r7, #12]
 800be02:	e008      	b.n	800be16 <_LCD_SendData+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800be04:	4b0a      	ldr	r3, [pc, #40]	; (800be30 <_LCD_SendData+0x60>)
 800be06:	695b      	ldr	r3, [r3, #20]
 800be08:	4a09      	ldr	r2, [pc, #36]	; (800be30 <_LCD_SendData+0x60>)
 800be0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be0e:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	3301      	adds	r3, #1
 800be14:	60fb      	str	r3, [r7, #12]
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	2b02      	cmp	r3, #2
 800be1a:	ddf3      	ble.n	800be04 <_LCD_SendData+0x34>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800be1c:	4b04      	ldr	r3, [pc, #16]	; (800be30 <_LCD_SendData+0x60>)
 800be1e:	695b      	ldr	r3, [r3, #20]
 800be20:	4a03      	ldr	r2, [pc, #12]	; (800be30 <_LCD_SendData+0x60>)
 800be22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be26:	6153      	str	r3, [r2, #20]
}
 800be28:	bf00      	nop
 800be2a:	3710      	adds	r7, #16
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bd80      	pop	{r7, pc}
 800be30:	48000400 	.word	0x48000400

0800be34 <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b082      	sub	sp, #8
 800be38:	af00      	add	r7, sp, #0
 800be3a:	4603      	mov	r3, r0
 800be3c:	71fb      	strb	r3, [r7, #7]
 800be3e:	460b      	mov	r3, r1
 800be40:	71bb      	strb	r3, [r7, #6]
 800be42:	4613      	mov	r3, r2
 800be44:	717b      	strb	r3, [r7, #5]

#ifdef USE_HAL_SPI
	HAL_SPI_Transmit(HSPI_INSTANCE, &data_buffer, 1, 1);
 800be46:	1df9      	adds	r1, r7, #7
 800be48:	2301      	movs	r3, #1
 800be4a:	2201      	movs	r2, #1
 800be4c:	4803      	ldr	r0, [pc, #12]	; (800be5c <_SPI_SendByte+0x28>)
 800be4e:	f7fd fa9f 	bl	8009390 <HAL_SPI_Transmit>
   	for(int d = 0; d < post_frame_delay ; d++)
   		asm("nop");

#endif

}
 800be52:	bf00      	nop
 800be54:	3708      	adds	r7, #8
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}
 800be5a:	bf00      	nop
 800be5c:	20001614 	.word	0x20001614

0800be60 <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b084      	sub	sp, #16
 800be64:	af00      	add	r7, sp, #0
 800be66:	60f8      	str	r0, [r7, #12]
 800be68:	60b9      	str	r1, [r7, #8]
 800be6a:	4611      	mov	r1, r2
 800be6c:	461a      	mov	r2, r3
 800be6e:	460b      	mov	r3, r1
 800be70:	71fb      	strb	r3, [r7, #7]
 800be72:	4613      	mov	r3, r2
 800be74:	71bb      	strb	r3, [r7, #6]

#ifdef USE_HAL_SPI
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)data_buffer, buffer_size, 2 );
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	b29a      	uxth	r2, r3
 800be7a:	2302      	movs	r3, #2
 800be7c:	68f9      	ldr	r1, [r7, #12]
 800be7e:	4803      	ldr	r0, [pc, #12]	; (800be8c <_SPI_SendByteMultiByte+0x2c>)
 800be80:	f7fd fa86 	bl	8009390 <HAL_SPI_Transmit>
   	for(int d = 0; d < post_frame_delay ; d++)
   		asm("nop");

#endif

}
 800be84:	bf00      	nop
 800be86:	3710      	adds	r7, #16
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}
 800be8c:	20001614 	.word	0x20001614

0800be90 <__errno>:
 800be90:	4b01      	ldr	r3, [pc, #4]	; (800be98 <__errno+0x8>)
 800be92:	6818      	ldr	r0, [r3, #0]
 800be94:	4770      	bx	lr
 800be96:	bf00      	nop
 800be98:	20001228 	.word	0x20001228

0800be9c <__libc_init_array>:
 800be9c:	b570      	push	{r4, r5, r6, lr}
 800be9e:	4e0d      	ldr	r6, [pc, #52]	; (800bed4 <__libc_init_array+0x38>)
 800bea0:	4c0d      	ldr	r4, [pc, #52]	; (800bed8 <__libc_init_array+0x3c>)
 800bea2:	1ba4      	subs	r4, r4, r6
 800bea4:	10a4      	asrs	r4, r4, #2
 800bea6:	2500      	movs	r5, #0
 800bea8:	42a5      	cmp	r5, r4
 800beaa:	d109      	bne.n	800bec0 <__libc_init_array+0x24>
 800beac:	4e0b      	ldr	r6, [pc, #44]	; (800bedc <__libc_init_array+0x40>)
 800beae:	4c0c      	ldr	r4, [pc, #48]	; (800bee0 <__libc_init_array+0x44>)
 800beb0:	f002 fc32 	bl	800e718 <_init>
 800beb4:	1ba4      	subs	r4, r4, r6
 800beb6:	10a4      	asrs	r4, r4, #2
 800beb8:	2500      	movs	r5, #0
 800beba:	42a5      	cmp	r5, r4
 800bebc:	d105      	bne.n	800beca <__libc_init_array+0x2e>
 800bebe:	bd70      	pop	{r4, r5, r6, pc}
 800bec0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bec4:	4798      	blx	r3
 800bec6:	3501      	adds	r5, #1
 800bec8:	e7ee      	b.n	800bea8 <__libc_init_array+0xc>
 800beca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bece:	4798      	blx	r3
 800bed0:	3501      	adds	r5, #1
 800bed2:	e7f2      	b.n	800beba <__libc_init_array+0x1e>
 800bed4:	0800f0c0 	.word	0x0800f0c0
 800bed8:	0800f0c0 	.word	0x0800f0c0
 800bedc:	0800f0c0 	.word	0x0800f0c0
 800bee0:	0800f0c4 	.word	0x0800f0c4

0800bee4 <memset>:
 800bee4:	4402      	add	r2, r0
 800bee6:	4603      	mov	r3, r0
 800bee8:	4293      	cmp	r3, r2
 800beea:	d100      	bne.n	800beee <memset+0xa>
 800beec:	4770      	bx	lr
 800beee:	f803 1b01 	strb.w	r1, [r3], #1
 800bef2:	e7f9      	b.n	800bee8 <memset+0x4>

0800bef4 <__cvt>:
 800bef4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bef8:	ec55 4b10 	vmov	r4, r5, d0
 800befc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800befe:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bf02:	2d00      	cmp	r5, #0
 800bf04:	460e      	mov	r6, r1
 800bf06:	4691      	mov	r9, r2
 800bf08:	4619      	mov	r1, r3
 800bf0a:	bfb8      	it	lt
 800bf0c:	4622      	movlt	r2, r4
 800bf0e:	462b      	mov	r3, r5
 800bf10:	f027 0720 	bic.w	r7, r7, #32
 800bf14:	bfbb      	ittet	lt
 800bf16:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bf1a:	461d      	movlt	r5, r3
 800bf1c:	2300      	movge	r3, #0
 800bf1e:	232d      	movlt	r3, #45	; 0x2d
 800bf20:	bfb8      	it	lt
 800bf22:	4614      	movlt	r4, r2
 800bf24:	2f46      	cmp	r7, #70	; 0x46
 800bf26:	700b      	strb	r3, [r1, #0]
 800bf28:	d004      	beq.n	800bf34 <__cvt+0x40>
 800bf2a:	2f45      	cmp	r7, #69	; 0x45
 800bf2c:	d100      	bne.n	800bf30 <__cvt+0x3c>
 800bf2e:	3601      	adds	r6, #1
 800bf30:	2102      	movs	r1, #2
 800bf32:	e000      	b.n	800bf36 <__cvt+0x42>
 800bf34:	2103      	movs	r1, #3
 800bf36:	ab03      	add	r3, sp, #12
 800bf38:	9301      	str	r3, [sp, #4]
 800bf3a:	ab02      	add	r3, sp, #8
 800bf3c:	9300      	str	r3, [sp, #0]
 800bf3e:	4632      	mov	r2, r6
 800bf40:	4653      	mov	r3, sl
 800bf42:	ec45 4b10 	vmov	d0, r4, r5
 800bf46:	f000 fe27 	bl	800cb98 <_dtoa_r>
 800bf4a:	2f47      	cmp	r7, #71	; 0x47
 800bf4c:	4680      	mov	r8, r0
 800bf4e:	d102      	bne.n	800bf56 <__cvt+0x62>
 800bf50:	f019 0f01 	tst.w	r9, #1
 800bf54:	d026      	beq.n	800bfa4 <__cvt+0xb0>
 800bf56:	2f46      	cmp	r7, #70	; 0x46
 800bf58:	eb08 0906 	add.w	r9, r8, r6
 800bf5c:	d111      	bne.n	800bf82 <__cvt+0x8e>
 800bf5e:	f898 3000 	ldrb.w	r3, [r8]
 800bf62:	2b30      	cmp	r3, #48	; 0x30
 800bf64:	d10a      	bne.n	800bf7c <__cvt+0x88>
 800bf66:	2200      	movs	r2, #0
 800bf68:	2300      	movs	r3, #0
 800bf6a:	4620      	mov	r0, r4
 800bf6c:	4629      	mov	r1, r5
 800bf6e:	f7f4 fdd3 	bl	8000b18 <__aeabi_dcmpeq>
 800bf72:	b918      	cbnz	r0, 800bf7c <__cvt+0x88>
 800bf74:	f1c6 0601 	rsb	r6, r6, #1
 800bf78:	f8ca 6000 	str.w	r6, [sl]
 800bf7c:	f8da 3000 	ldr.w	r3, [sl]
 800bf80:	4499      	add	r9, r3
 800bf82:	2200      	movs	r2, #0
 800bf84:	2300      	movs	r3, #0
 800bf86:	4620      	mov	r0, r4
 800bf88:	4629      	mov	r1, r5
 800bf8a:	f7f4 fdc5 	bl	8000b18 <__aeabi_dcmpeq>
 800bf8e:	b938      	cbnz	r0, 800bfa0 <__cvt+0xac>
 800bf90:	2230      	movs	r2, #48	; 0x30
 800bf92:	9b03      	ldr	r3, [sp, #12]
 800bf94:	454b      	cmp	r3, r9
 800bf96:	d205      	bcs.n	800bfa4 <__cvt+0xb0>
 800bf98:	1c59      	adds	r1, r3, #1
 800bf9a:	9103      	str	r1, [sp, #12]
 800bf9c:	701a      	strb	r2, [r3, #0]
 800bf9e:	e7f8      	b.n	800bf92 <__cvt+0x9e>
 800bfa0:	f8cd 900c 	str.w	r9, [sp, #12]
 800bfa4:	9b03      	ldr	r3, [sp, #12]
 800bfa6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bfa8:	eba3 0308 	sub.w	r3, r3, r8
 800bfac:	4640      	mov	r0, r8
 800bfae:	6013      	str	r3, [r2, #0]
 800bfb0:	b004      	add	sp, #16
 800bfb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800bfb6 <__exponent>:
 800bfb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bfb8:	2900      	cmp	r1, #0
 800bfba:	4604      	mov	r4, r0
 800bfbc:	bfba      	itte	lt
 800bfbe:	4249      	neglt	r1, r1
 800bfc0:	232d      	movlt	r3, #45	; 0x2d
 800bfc2:	232b      	movge	r3, #43	; 0x2b
 800bfc4:	2909      	cmp	r1, #9
 800bfc6:	f804 2b02 	strb.w	r2, [r4], #2
 800bfca:	7043      	strb	r3, [r0, #1]
 800bfcc:	dd20      	ble.n	800c010 <__exponent+0x5a>
 800bfce:	f10d 0307 	add.w	r3, sp, #7
 800bfd2:	461f      	mov	r7, r3
 800bfd4:	260a      	movs	r6, #10
 800bfd6:	fb91 f5f6 	sdiv	r5, r1, r6
 800bfda:	fb06 1115 	mls	r1, r6, r5, r1
 800bfde:	3130      	adds	r1, #48	; 0x30
 800bfe0:	2d09      	cmp	r5, #9
 800bfe2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bfe6:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800bfea:	4629      	mov	r1, r5
 800bfec:	dc09      	bgt.n	800c002 <__exponent+0x4c>
 800bfee:	3130      	adds	r1, #48	; 0x30
 800bff0:	3b02      	subs	r3, #2
 800bff2:	f802 1c01 	strb.w	r1, [r2, #-1]
 800bff6:	42bb      	cmp	r3, r7
 800bff8:	4622      	mov	r2, r4
 800bffa:	d304      	bcc.n	800c006 <__exponent+0x50>
 800bffc:	1a10      	subs	r0, r2, r0
 800bffe:	b003      	add	sp, #12
 800c000:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c002:	4613      	mov	r3, r2
 800c004:	e7e7      	b.n	800bfd6 <__exponent+0x20>
 800c006:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c00a:	f804 2b01 	strb.w	r2, [r4], #1
 800c00e:	e7f2      	b.n	800bff6 <__exponent+0x40>
 800c010:	2330      	movs	r3, #48	; 0x30
 800c012:	4419      	add	r1, r3
 800c014:	7083      	strb	r3, [r0, #2]
 800c016:	1d02      	adds	r2, r0, #4
 800c018:	70c1      	strb	r1, [r0, #3]
 800c01a:	e7ef      	b.n	800bffc <__exponent+0x46>

0800c01c <_printf_float>:
 800c01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c020:	b08d      	sub	sp, #52	; 0x34
 800c022:	460c      	mov	r4, r1
 800c024:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800c028:	4616      	mov	r6, r2
 800c02a:	461f      	mov	r7, r3
 800c02c:	4605      	mov	r5, r0
 800c02e:	f001 fce5 	bl	800d9fc <_localeconv_r>
 800c032:	6803      	ldr	r3, [r0, #0]
 800c034:	9304      	str	r3, [sp, #16]
 800c036:	4618      	mov	r0, r3
 800c038:	f7f4 f8f2 	bl	8000220 <strlen>
 800c03c:	2300      	movs	r3, #0
 800c03e:	930a      	str	r3, [sp, #40]	; 0x28
 800c040:	f8d8 3000 	ldr.w	r3, [r8]
 800c044:	9005      	str	r0, [sp, #20]
 800c046:	3307      	adds	r3, #7
 800c048:	f023 0307 	bic.w	r3, r3, #7
 800c04c:	f103 0208 	add.w	r2, r3, #8
 800c050:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c054:	f8d4 b000 	ldr.w	fp, [r4]
 800c058:	f8c8 2000 	str.w	r2, [r8]
 800c05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c060:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c064:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c068:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c06c:	9307      	str	r3, [sp, #28]
 800c06e:	f8cd 8018 	str.w	r8, [sp, #24]
 800c072:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c076:	4ba7      	ldr	r3, [pc, #668]	; (800c314 <_printf_float+0x2f8>)
 800c078:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c07c:	f7f4 fd7e 	bl	8000b7c <__aeabi_dcmpun>
 800c080:	bb70      	cbnz	r0, 800c0e0 <_printf_float+0xc4>
 800c082:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c086:	4ba3      	ldr	r3, [pc, #652]	; (800c314 <_printf_float+0x2f8>)
 800c088:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c08c:	f7f4 fd58 	bl	8000b40 <__aeabi_dcmple>
 800c090:	bb30      	cbnz	r0, 800c0e0 <_printf_float+0xc4>
 800c092:	2200      	movs	r2, #0
 800c094:	2300      	movs	r3, #0
 800c096:	4640      	mov	r0, r8
 800c098:	4649      	mov	r1, r9
 800c09a:	f7f4 fd47 	bl	8000b2c <__aeabi_dcmplt>
 800c09e:	b110      	cbz	r0, 800c0a6 <_printf_float+0x8a>
 800c0a0:	232d      	movs	r3, #45	; 0x2d
 800c0a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c0a6:	4a9c      	ldr	r2, [pc, #624]	; (800c318 <_printf_float+0x2fc>)
 800c0a8:	4b9c      	ldr	r3, [pc, #624]	; (800c31c <_printf_float+0x300>)
 800c0aa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c0ae:	bf8c      	ite	hi
 800c0b0:	4690      	movhi	r8, r2
 800c0b2:	4698      	movls	r8, r3
 800c0b4:	2303      	movs	r3, #3
 800c0b6:	f02b 0204 	bic.w	r2, fp, #4
 800c0ba:	6123      	str	r3, [r4, #16]
 800c0bc:	6022      	str	r2, [r4, #0]
 800c0be:	f04f 0900 	mov.w	r9, #0
 800c0c2:	9700      	str	r7, [sp, #0]
 800c0c4:	4633      	mov	r3, r6
 800c0c6:	aa0b      	add	r2, sp, #44	; 0x2c
 800c0c8:	4621      	mov	r1, r4
 800c0ca:	4628      	mov	r0, r5
 800c0cc:	f000 f9e6 	bl	800c49c <_printf_common>
 800c0d0:	3001      	adds	r0, #1
 800c0d2:	f040 808d 	bne.w	800c1f0 <_printf_float+0x1d4>
 800c0d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c0da:	b00d      	add	sp, #52	; 0x34
 800c0dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0e0:	4642      	mov	r2, r8
 800c0e2:	464b      	mov	r3, r9
 800c0e4:	4640      	mov	r0, r8
 800c0e6:	4649      	mov	r1, r9
 800c0e8:	f7f4 fd48 	bl	8000b7c <__aeabi_dcmpun>
 800c0ec:	b110      	cbz	r0, 800c0f4 <_printf_float+0xd8>
 800c0ee:	4a8c      	ldr	r2, [pc, #560]	; (800c320 <_printf_float+0x304>)
 800c0f0:	4b8c      	ldr	r3, [pc, #560]	; (800c324 <_printf_float+0x308>)
 800c0f2:	e7da      	b.n	800c0aa <_printf_float+0x8e>
 800c0f4:	6861      	ldr	r1, [r4, #4]
 800c0f6:	1c4b      	adds	r3, r1, #1
 800c0f8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800c0fc:	a80a      	add	r0, sp, #40	; 0x28
 800c0fe:	d13e      	bne.n	800c17e <_printf_float+0x162>
 800c100:	2306      	movs	r3, #6
 800c102:	6063      	str	r3, [r4, #4]
 800c104:	2300      	movs	r3, #0
 800c106:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c10a:	ab09      	add	r3, sp, #36	; 0x24
 800c10c:	9300      	str	r3, [sp, #0]
 800c10e:	ec49 8b10 	vmov	d0, r8, r9
 800c112:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c116:	6022      	str	r2, [r4, #0]
 800c118:	f8cd a004 	str.w	sl, [sp, #4]
 800c11c:	6861      	ldr	r1, [r4, #4]
 800c11e:	4628      	mov	r0, r5
 800c120:	f7ff fee8 	bl	800bef4 <__cvt>
 800c124:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800c128:	2b47      	cmp	r3, #71	; 0x47
 800c12a:	4680      	mov	r8, r0
 800c12c:	d109      	bne.n	800c142 <_printf_float+0x126>
 800c12e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c130:	1cd8      	adds	r0, r3, #3
 800c132:	db02      	blt.n	800c13a <_printf_float+0x11e>
 800c134:	6862      	ldr	r2, [r4, #4]
 800c136:	4293      	cmp	r3, r2
 800c138:	dd47      	ble.n	800c1ca <_printf_float+0x1ae>
 800c13a:	f1aa 0a02 	sub.w	sl, sl, #2
 800c13e:	fa5f fa8a 	uxtb.w	sl, sl
 800c142:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c146:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c148:	d824      	bhi.n	800c194 <_printf_float+0x178>
 800c14a:	3901      	subs	r1, #1
 800c14c:	4652      	mov	r2, sl
 800c14e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c152:	9109      	str	r1, [sp, #36]	; 0x24
 800c154:	f7ff ff2f 	bl	800bfb6 <__exponent>
 800c158:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c15a:	1813      	adds	r3, r2, r0
 800c15c:	2a01      	cmp	r2, #1
 800c15e:	4681      	mov	r9, r0
 800c160:	6123      	str	r3, [r4, #16]
 800c162:	dc02      	bgt.n	800c16a <_printf_float+0x14e>
 800c164:	6822      	ldr	r2, [r4, #0]
 800c166:	07d1      	lsls	r1, r2, #31
 800c168:	d501      	bpl.n	800c16e <_printf_float+0x152>
 800c16a:	3301      	adds	r3, #1
 800c16c:	6123      	str	r3, [r4, #16]
 800c16e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c172:	2b00      	cmp	r3, #0
 800c174:	d0a5      	beq.n	800c0c2 <_printf_float+0xa6>
 800c176:	232d      	movs	r3, #45	; 0x2d
 800c178:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c17c:	e7a1      	b.n	800c0c2 <_printf_float+0xa6>
 800c17e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800c182:	f000 8177 	beq.w	800c474 <_printf_float+0x458>
 800c186:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c18a:	d1bb      	bne.n	800c104 <_printf_float+0xe8>
 800c18c:	2900      	cmp	r1, #0
 800c18e:	d1b9      	bne.n	800c104 <_printf_float+0xe8>
 800c190:	2301      	movs	r3, #1
 800c192:	e7b6      	b.n	800c102 <_printf_float+0xe6>
 800c194:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800c198:	d119      	bne.n	800c1ce <_printf_float+0x1b2>
 800c19a:	2900      	cmp	r1, #0
 800c19c:	6863      	ldr	r3, [r4, #4]
 800c19e:	dd0c      	ble.n	800c1ba <_printf_float+0x19e>
 800c1a0:	6121      	str	r1, [r4, #16]
 800c1a2:	b913      	cbnz	r3, 800c1aa <_printf_float+0x18e>
 800c1a4:	6822      	ldr	r2, [r4, #0]
 800c1a6:	07d2      	lsls	r2, r2, #31
 800c1a8:	d502      	bpl.n	800c1b0 <_printf_float+0x194>
 800c1aa:	3301      	adds	r3, #1
 800c1ac:	440b      	add	r3, r1
 800c1ae:	6123      	str	r3, [r4, #16]
 800c1b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1b2:	65a3      	str	r3, [r4, #88]	; 0x58
 800c1b4:	f04f 0900 	mov.w	r9, #0
 800c1b8:	e7d9      	b.n	800c16e <_printf_float+0x152>
 800c1ba:	b913      	cbnz	r3, 800c1c2 <_printf_float+0x1a6>
 800c1bc:	6822      	ldr	r2, [r4, #0]
 800c1be:	07d0      	lsls	r0, r2, #31
 800c1c0:	d501      	bpl.n	800c1c6 <_printf_float+0x1aa>
 800c1c2:	3302      	adds	r3, #2
 800c1c4:	e7f3      	b.n	800c1ae <_printf_float+0x192>
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	e7f1      	b.n	800c1ae <_printf_float+0x192>
 800c1ca:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800c1ce:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c1d2:	4293      	cmp	r3, r2
 800c1d4:	db05      	blt.n	800c1e2 <_printf_float+0x1c6>
 800c1d6:	6822      	ldr	r2, [r4, #0]
 800c1d8:	6123      	str	r3, [r4, #16]
 800c1da:	07d1      	lsls	r1, r2, #31
 800c1dc:	d5e8      	bpl.n	800c1b0 <_printf_float+0x194>
 800c1de:	3301      	adds	r3, #1
 800c1e0:	e7e5      	b.n	800c1ae <_printf_float+0x192>
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	bfd4      	ite	le
 800c1e6:	f1c3 0302 	rsble	r3, r3, #2
 800c1ea:	2301      	movgt	r3, #1
 800c1ec:	4413      	add	r3, r2
 800c1ee:	e7de      	b.n	800c1ae <_printf_float+0x192>
 800c1f0:	6823      	ldr	r3, [r4, #0]
 800c1f2:	055a      	lsls	r2, r3, #21
 800c1f4:	d407      	bmi.n	800c206 <_printf_float+0x1ea>
 800c1f6:	6923      	ldr	r3, [r4, #16]
 800c1f8:	4642      	mov	r2, r8
 800c1fa:	4631      	mov	r1, r6
 800c1fc:	4628      	mov	r0, r5
 800c1fe:	47b8      	blx	r7
 800c200:	3001      	adds	r0, #1
 800c202:	d12b      	bne.n	800c25c <_printf_float+0x240>
 800c204:	e767      	b.n	800c0d6 <_printf_float+0xba>
 800c206:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c20a:	f240 80dc 	bls.w	800c3c6 <_printf_float+0x3aa>
 800c20e:	2200      	movs	r2, #0
 800c210:	2300      	movs	r3, #0
 800c212:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c216:	f7f4 fc7f 	bl	8000b18 <__aeabi_dcmpeq>
 800c21a:	2800      	cmp	r0, #0
 800c21c:	d033      	beq.n	800c286 <_printf_float+0x26a>
 800c21e:	2301      	movs	r3, #1
 800c220:	4a41      	ldr	r2, [pc, #260]	; (800c328 <_printf_float+0x30c>)
 800c222:	4631      	mov	r1, r6
 800c224:	4628      	mov	r0, r5
 800c226:	47b8      	blx	r7
 800c228:	3001      	adds	r0, #1
 800c22a:	f43f af54 	beq.w	800c0d6 <_printf_float+0xba>
 800c22e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c232:	429a      	cmp	r2, r3
 800c234:	db02      	blt.n	800c23c <_printf_float+0x220>
 800c236:	6823      	ldr	r3, [r4, #0]
 800c238:	07d8      	lsls	r0, r3, #31
 800c23a:	d50f      	bpl.n	800c25c <_printf_float+0x240>
 800c23c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c240:	4631      	mov	r1, r6
 800c242:	4628      	mov	r0, r5
 800c244:	47b8      	blx	r7
 800c246:	3001      	adds	r0, #1
 800c248:	f43f af45 	beq.w	800c0d6 <_printf_float+0xba>
 800c24c:	f04f 0800 	mov.w	r8, #0
 800c250:	f104 091a 	add.w	r9, r4, #26
 800c254:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c256:	3b01      	subs	r3, #1
 800c258:	4543      	cmp	r3, r8
 800c25a:	dc09      	bgt.n	800c270 <_printf_float+0x254>
 800c25c:	6823      	ldr	r3, [r4, #0]
 800c25e:	079b      	lsls	r3, r3, #30
 800c260:	f100 8103 	bmi.w	800c46a <_printf_float+0x44e>
 800c264:	68e0      	ldr	r0, [r4, #12]
 800c266:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c268:	4298      	cmp	r0, r3
 800c26a:	bfb8      	it	lt
 800c26c:	4618      	movlt	r0, r3
 800c26e:	e734      	b.n	800c0da <_printf_float+0xbe>
 800c270:	2301      	movs	r3, #1
 800c272:	464a      	mov	r2, r9
 800c274:	4631      	mov	r1, r6
 800c276:	4628      	mov	r0, r5
 800c278:	47b8      	blx	r7
 800c27a:	3001      	adds	r0, #1
 800c27c:	f43f af2b 	beq.w	800c0d6 <_printf_float+0xba>
 800c280:	f108 0801 	add.w	r8, r8, #1
 800c284:	e7e6      	b.n	800c254 <_printf_float+0x238>
 800c286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c288:	2b00      	cmp	r3, #0
 800c28a:	dc2b      	bgt.n	800c2e4 <_printf_float+0x2c8>
 800c28c:	2301      	movs	r3, #1
 800c28e:	4a26      	ldr	r2, [pc, #152]	; (800c328 <_printf_float+0x30c>)
 800c290:	4631      	mov	r1, r6
 800c292:	4628      	mov	r0, r5
 800c294:	47b8      	blx	r7
 800c296:	3001      	adds	r0, #1
 800c298:	f43f af1d 	beq.w	800c0d6 <_printf_float+0xba>
 800c29c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c29e:	b923      	cbnz	r3, 800c2aa <_printf_float+0x28e>
 800c2a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2a2:	b913      	cbnz	r3, 800c2aa <_printf_float+0x28e>
 800c2a4:	6823      	ldr	r3, [r4, #0]
 800c2a6:	07d9      	lsls	r1, r3, #31
 800c2a8:	d5d8      	bpl.n	800c25c <_printf_float+0x240>
 800c2aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c2ae:	4631      	mov	r1, r6
 800c2b0:	4628      	mov	r0, r5
 800c2b2:	47b8      	blx	r7
 800c2b4:	3001      	adds	r0, #1
 800c2b6:	f43f af0e 	beq.w	800c0d6 <_printf_float+0xba>
 800c2ba:	f04f 0900 	mov.w	r9, #0
 800c2be:	f104 0a1a 	add.w	sl, r4, #26
 800c2c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2c4:	425b      	negs	r3, r3
 800c2c6:	454b      	cmp	r3, r9
 800c2c8:	dc01      	bgt.n	800c2ce <_printf_float+0x2b2>
 800c2ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2cc:	e794      	b.n	800c1f8 <_printf_float+0x1dc>
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	4652      	mov	r2, sl
 800c2d2:	4631      	mov	r1, r6
 800c2d4:	4628      	mov	r0, r5
 800c2d6:	47b8      	blx	r7
 800c2d8:	3001      	adds	r0, #1
 800c2da:	f43f aefc 	beq.w	800c0d6 <_printf_float+0xba>
 800c2de:	f109 0901 	add.w	r9, r9, #1
 800c2e2:	e7ee      	b.n	800c2c2 <_printf_float+0x2a6>
 800c2e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c2e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c2e8:	429a      	cmp	r2, r3
 800c2ea:	bfa8      	it	ge
 800c2ec:	461a      	movge	r2, r3
 800c2ee:	2a00      	cmp	r2, #0
 800c2f0:	4691      	mov	r9, r2
 800c2f2:	dd07      	ble.n	800c304 <_printf_float+0x2e8>
 800c2f4:	4613      	mov	r3, r2
 800c2f6:	4631      	mov	r1, r6
 800c2f8:	4642      	mov	r2, r8
 800c2fa:	4628      	mov	r0, r5
 800c2fc:	47b8      	blx	r7
 800c2fe:	3001      	adds	r0, #1
 800c300:	f43f aee9 	beq.w	800c0d6 <_printf_float+0xba>
 800c304:	f104 031a 	add.w	r3, r4, #26
 800c308:	f04f 0b00 	mov.w	fp, #0
 800c30c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c310:	9306      	str	r3, [sp, #24]
 800c312:	e015      	b.n	800c340 <_printf_float+0x324>
 800c314:	7fefffff 	.word	0x7fefffff
 800c318:	0800ee08 	.word	0x0800ee08
 800c31c:	0800ee04 	.word	0x0800ee04
 800c320:	0800ee10 	.word	0x0800ee10
 800c324:	0800ee0c 	.word	0x0800ee0c
 800c328:	0800ee14 	.word	0x0800ee14
 800c32c:	2301      	movs	r3, #1
 800c32e:	9a06      	ldr	r2, [sp, #24]
 800c330:	4631      	mov	r1, r6
 800c332:	4628      	mov	r0, r5
 800c334:	47b8      	blx	r7
 800c336:	3001      	adds	r0, #1
 800c338:	f43f aecd 	beq.w	800c0d6 <_printf_float+0xba>
 800c33c:	f10b 0b01 	add.w	fp, fp, #1
 800c340:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800c344:	ebaa 0309 	sub.w	r3, sl, r9
 800c348:	455b      	cmp	r3, fp
 800c34a:	dcef      	bgt.n	800c32c <_printf_float+0x310>
 800c34c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c350:	429a      	cmp	r2, r3
 800c352:	44d0      	add	r8, sl
 800c354:	db15      	blt.n	800c382 <_printf_float+0x366>
 800c356:	6823      	ldr	r3, [r4, #0]
 800c358:	07da      	lsls	r2, r3, #31
 800c35a:	d412      	bmi.n	800c382 <_printf_float+0x366>
 800c35c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c35e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c360:	eba3 020a 	sub.w	r2, r3, sl
 800c364:	eba3 0a01 	sub.w	sl, r3, r1
 800c368:	4592      	cmp	sl, r2
 800c36a:	bfa8      	it	ge
 800c36c:	4692      	movge	sl, r2
 800c36e:	f1ba 0f00 	cmp.w	sl, #0
 800c372:	dc0e      	bgt.n	800c392 <_printf_float+0x376>
 800c374:	f04f 0800 	mov.w	r8, #0
 800c378:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c37c:	f104 091a 	add.w	r9, r4, #26
 800c380:	e019      	b.n	800c3b6 <_printf_float+0x39a>
 800c382:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c386:	4631      	mov	r1, r6
 800c388:	4628      	mov	r0, r5
 800c38a:	47b8      	blx	r7
 800c38c:	3001      	adds	r0, #1
 800c38e:	d1e5      	bne.n	800c35c <_printf_float+0x340>
 800c390:	e6a1      	b.n	800c0d6 <_printf_float+0xba>
 800c392:	4653      	mov	r3, sl
 800c394:	4642      	mov	r2, r8
 800c396:	4631      	mov	r1, r6
 800c398:	4628      	mov	r0, r5
 800c39a:	47b8      	blx	r7
 800c39c:	3001      	adds	r0, #1
 800c39e:	d1e9      	bne.n	800c374 <_printf_float+0x358>
 800c3a0:	e699      	b.n	800c0d6 <_printf_float+0xba>
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	464a      	mov	r2, r9
 800c3a6:	4631      	mov	r1, r6
 800c3a8:	4628      	mov	r0, r5
 800c3aa:	47b8      	blx	r7
 800c3ac:	3001      	adds	r0, #1
 800c3ae:	f43f ae92 	beq.w	800c0d6 <_printf_float+0xba>
 800c3b2:	f108 0801 	add.w	r8, r8, #1
 800c3b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c3ba:	1a9b      	subs	r3, r3, r2
 800c3bc:	eba3 030a 	sub.w	r3, r3, sl
 800c3c0:	4543      	cmp	r3, r8
 800c3c2:	dcee      	bgt.n	800c3a2 <_printf_float+0x386>
 800c3c4:	e74a      	b.n	800c25c <_printf_float+0x240>
 800c3c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c3c8:	2a01      	cmp	r2, #1
 800c3ca:	dc01      	bgt.n	800c3d0 <_printf_float+0x3b4>
 800c3cc:	07db      	lsls	r3, r3, #31
 800c3ce:	d53a      	bpl.n	800c446 <_printf_float+0x42a>
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	4642      	mov	r2, r8
 800c3d4:	4631      	mov	r1, r6
 800c3d6:	4628      	mov	r0, r5
 800c3d8:	47b8      	blx	r7
 800c3da:	3001      	adds	r0, #1
 800c3dc:	f43f ae7b 	beq.w	800c0d6 <_printf_float+0xba>
 800c3e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c3e4:	4631      	mov	r1, r6
 800c3e6:	4628      	mov	r0, r5
 800c3e8:	47b8      	blx	r7
 800c3ea:	3001      	adds	r0, #1
 800c3ec:	f108 0801 	add.w	r8, r8, #1
 800c3f0:	f43f ae71 	beq.w	800c0d6 <_printf_float+0xba>
 800c3f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800c3fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c400:	2300      	movs	r3, #0
 800c402:	f7f4 fb89 	bl	8000b18 <__aeabi_dcmpeq>
 800c406:	b9c8      	cbnz	r0, 800c43c <_printf_float+0x420>
 800c408:	4653      	mov	r3, sl
 800c40a:	4642      	mov	r2, r8
 800c40c:	4631      	mov	r1, r6
 800c40e:	4628      	mov	r0, r5
 800c410:	47b8      	blx	r7
 800c412:	3001      	adds	r0, #1
 800c414:	d10e      	bne.n	800c434 <_printf_float+0x418>
 800c416:	e65e      	b.n	800c0d6 <_printf_float+0xba>
 800c418:	2301      	movs	r3, #1
 800c41a:	4652      	mov	r2, sl
 800c41c:	4631      	mov	r1, r6
 800c41e:	4628      	mov	r0, r5
 800c420:	47b8      	blx	r7
 800c422:	3001      	adds	r0, #1
 800c424:	f43f ae57 	beq.w	800c0d6 <_printf_float+0xba>
 800c428:	f108 0801 	add.w	r8, r8, #1
 800c42c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c42e:	3b01      	subs	r3, #1
 800c430:	4543      	cmp	r3, r8
 800c432:	dcf1      	bgt.n	800c418 <_printf_float+0x3fc>
 800c434:	464b      	mov	r3, r9
 800c436:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c43a:	e6de      	b.n	800c1fa <_printf_float+0x1de>
 800c43c:	f04f 0800 	mov.w	r8, #0
 800c440:	f104 0a1a 	add.w	sl, r4, #26
 800c444:	e7f2      	b.n	800c42c <_printf_float+0x410>
 800c446:	2301      	movs	r3, #1
 800c448:	e7df      	b.n	800c40a <_printf_float+0x3ee>
 800c44a:	2301      	movs	r3, #1
 800c44c:	464a      	mov	r2, r9
 800c44e:	4631      	mov	r1, r6
 800c450:	4628      	mov	r0, r5
 800c452:	47b8      	blx	r7
 800c454:	3001      	adds	r0, #1
 800c456:	f43f ae3e 	beq.w	800c0d6 <_printf_float+0xba>
 800c45a:	f108 0801 	add.w	r8, r8, #1
 800c45e:	68e3      	ldr	r3, [r4, #12]
 800c460:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c462:	1a9b      	subs	r3, r3, r2
 800c464:	4543      	cmp	r3, r8
 800c466:	dcf0      	bgt.n	800c44a <_printf_float+0x42e>
 800c468:	e6fc      	b.n	800c264 <_printf_float+0x248>
 800c46a:	f04f 0800 	mov.w	r8, #0
 800c46e:	f104 0919 	add.w	r9, r4, #25
 800c472:	e7f4      	b.n	800c45e <_printf_float+0x442>
 800c474:	2900      	cmp	r1, #0
 800c476:	f43f ae8b 	beq.w	800c190 <_printf_float+0x174>
 800c47a:	2300      	movs	r3, #0
 800c47c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c480:	ab09      	add	r3, sp, #36	; 0x24
 800c482:	9300      	str	r3, [sp, #0]
 800c484:	ec49 8b10 	vmov	d0, r8, r9
 800c488:	6022      	str	r2, [r4, #0]
 800c48a:	f8cd a004 	str.w	sl, [sp, #4]
 800c48e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c492:	4628      	mov	r0, r5
 800c494:	f7ff fd2e 	bl	800bef4 <__cvt>
 800c498:	4680      	mov	r8, r0
 800c49a:	e648      	b.n	800c12e <_printf_float+0x112>

0800c49c <_printf_common>:
 800c49c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4a0:	4691      	mov	r9, r2
 800c4a2:	461f      	mov	r7, r3
 800c4a4:	688a      	ldr	r2, [r1, #8]
 800c4a6:	690b      	ldr	r3, [r1, #16]
 800c4a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c4ac:	4293      	cmp	r3, r2
 800c4ae:	bfb8      	it	lt
 800c4b0:	4613      	movlt	r3, r2
 800c4b2:	f8c9 3000 	str.w	r3, [r9]
 800c4b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c4ba:	4606      	mov	r6, r0
 800c4bc:	460c      	mov	r4, r1
 800c4be:	b112      	cbz	r2, 800c4c6 <_printf_common+0x2a>
 800c4c0:	3301      	adds	r3, #1
 800c4c2:	f8c9 3000 	str.w	r3, [r9]
 800c4c6:	6823      	ldr	r3, [r4, #0]
 800c4c8:	0699      	lsls	r1, r3, #26
 800c4ca:	bf42      	ittt	mi
 800c4cc:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c4d0:	3302      	addmi	r3, #2
 800c4d2:	f8c9 3000 	strmi.w	r3, [r9]
 800c4d6:	6825      	ldr	r5, [r4, #0]
 800c4d8:	f015 0506 	ands.w	r5, r5, #6
 800c4dc:	d107      	bne.n	800c4ee <_printf_common+0x52>
 800c4de:	f104 0a19 	add.w	sl, r4, #25
 800c4e2:	68e3      	ldr	r3, [r4, #12]
 800c4e4:	f8d9 2000 	ldr.w	r2, [r9]
 800c4e8:	1a9b      	subs	r3, r3, r2
 800c4ea:	42ab      	cmp	r3, r5
 800c4ec:	dc28      	bgt.n	800c540 <_printf_common+0xa4>
 800c4ee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c4f2:	6822      	ldr	r2, [r4, #0]
 800c4f4:	3300      	adds	r3, #0
 800c4f6:	bf18      	it	ne
 800c4f8:	2301      	movne	r3, #1
 800c4fa:	0692      	lsls	r2, r2, #26
 800c4fc:	d42d      	bmi.n	800c55a <_printf_common+0xbe>
 800c4fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c502:	4639      	mov	r1, r7
 800c504:	4630      	mov	r0, r6
 800c506:	47c0      	blx	r8
 800c508:	3001      	adds	r0, #1
 800c50a:	d020      	beq.n	800c54e <_printf_common+0xb2>
 800c50c:	6823      	ldr	r3, [r4, #0]
 800c50e:	68e5      	ldr	r5, [r4, #12]
 800c510:	f8d9 2000 	ldr.w	r2, [r9]
 800c514:	f003 0306 	and.w	r3, r3, #6
 800c518:	2b04      	cmp	r3, #4
 800c51a:	bf08      	it	eq
 800c51c:	1aad      	subeq	r5, r5, r2
 800c51e:	68a3      	ldr	r3, [r4, #8]
 800c520:	6922      	ldr	r2, [r4, #16]
 800c522:	bf0c      	ite	eq
 800c524:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c528:	2500      	movne	r5, #0
 800c52a:	4293      	cmp	r3, r2
 800c52c:	bfc4      	itt	gt
 800c52e:	1a9b      	subgt	r3, r3, r2
 800c530:	18ed      	addgt	r5, r5, r3
 800c532:	f04f 0900 	mov.w	r9, #0
 800c536:	341a      	adds	r4, #26
 800c538:	454d      	cmp	r5, r9
 800c53a:	d11a      	bne.n	800c572 <_printf_common+0xd6>
 800c53c:	2000      	movs	r0, #0
 800c53e:	e008      	b.n	800c552 <_printf_common+0xb6>
 800c540:	2301      	movs	r3, #1
 800c542:	4652      	mov	r2, sl
 800c544:	4639      	mov	r1, r7
 800c546:	4630      	mov	r0, r6
 800c548:	47c0      	blx	r8
 800c54a:	3001      	adds	r0, #1
 800c54c:	d103      	bne.n	800c556 <_printf_common+0xba>
 800c54e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c556:	3501      	adds	r5, #1
 800c558:	e7c3      	b.n	800c4e2 <_printf_common+0x46>
 800c55a:	18e1      	adds	r1, r4, r3
 800c55c:	1c5a      	adds	r2, r3, #1
 800c55e:	2030      	movs	r0, #48	; 0x30
 800c560:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c564:	4422      	add	r2, r4
 800c566:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c56a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c56e:	3302      	adds	r3, #2
 800c570:	e7c5      	b.n	800c4fe <_printf_common+0x62>
 800c572:	2301      	movs	r3, #1
 800c574:	4622      	mov	r2, r4
 800c576:	4639      	mov	r1, r7
 800c578:	4630      	mov	r0, r6
 800c57a:	47c0      	blx	r8
 800c57c:	3001      	adds	r0, #1
 800c57e:	d0e6      	beq.n	800c54e <_printf_common+0xb2>
 800c580:	f109 0901 	add.w	r9, r9, #1
 800c584:	e7d8      	b.n	800c538 <_printf_common+0x9c>
	...

0800c588 <_printf_i>:
 800c588:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c58c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c590:	460c      	mov	r4, r1
 800c592:	7e09      	ldrb	r1, [r1, #24]
 800c594:	b085      	sub	sp, #20
 800c596:	296e      	cmp	r1, #110	; 0x6e
 800c598:	4617      	mov	r7, r2
 800c59a:	4606      	mov	r6, r0
 800c59c:	4698      	mov	r8, r3
 800c59e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c5a0:	f000 80b3 	beq.w	800c70a <_printf_i+0x182>
 800c5a4:	d822      	bhi.n	800c5ec <_printf_i+0x64>
 800c5a6:	2963      	cmp	r1, #99	; 0x63
 800c5a8:	d036      	beq.n	800c618 <_printf_i+0x90>
 800c5aa:	d80a      	bhi.n	800c5c2 <_printf_i+0x3a>
 800c5ac:	2900      	cmp	r1, #0
 800c5ae:	f000 80b9 	beq.w	800c724 <_printf_i+0x19c>
 800c5b2:	2958      	cmp	r1, #88	; 0x58
 800c5b4:	f000 8083 	beq.w	800c6be <_printf_i+0x136>
 800c5b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c5bc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c5c0:	e032      	b.n	800c628 <_printf_i+0xa0>
 800c5c2:	2964      	cmp	r1, #100	; 0x64
 800c5c4:	d001      	beq.n	800c5ca <_printf_i+0x42>
 800c5c6:	2969      	cmp	r1, #105	; 0x69
 800c5c8:	d1f6      	bne.n	800c5b8 <_printf_i+0x30>
 800c5ca:	6820      	ldr	r0, [r4, #0]
 800c5cc:	6813      	ldr	r3, [r2, #0]
 800c5ce:	0605      	lsls	r5, r0, #24
 800c5d0:	f103 0104 	add.w	r1, r3, #4
 800c5d4:	d52a      	bpl.n	800c62c <_printf_i+0xa4>
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	6011      	str	r1, [r2, #0]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	da03      	bge.n	800c5e6 <_printf_i+0x5e>
 800c5de:	222d      	movs	r2, #45	; 0x2d
 800c5e0:	425b      	negs	r3, r3
 800c5e2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c5e6:	486f      	ldr	r0, [pc, #444]	; (800c7a4 <_printf_i+0x21c>)
 800c5e8:	220a      	movs	r2, #10
 800c5ea:	e039      	b.n	800c660 <_printf_i+0xd8>
 800c5ec:	2973      	cmp	r1, #115	; 0x73
 800c5ee:	f000 809d 	beq.w	800c72c <_printf_i+0x1a4>
 800c5f2:	d808      	bhi.n	800c606 <_printf_i+0x7e>
 800c5f4:	296f      	cmp	r1, #111	; 0x6f
 800c5f6:	d020      	beq.n	800c63a <_printf_i+0xb2>
 800c5f8:	2970      	cmp	r1, #112	; 0x70
 800c5fa:	d1dd      	bne.n	800c5b8 <_printf_i+0x30>
 800c5fc:	6823      	ldr	r3, [r4, #0]
 800c5fe:	f043 0320 	orr.w	r3, r3, #32
 800c602:	6023      	str	r3, [r4, #0]
 800c604:	e003      	b.n	800c60e <_printf_i+0x86>
 800c606:	2975      	cmp	r1, #117	; 0x75
 800c608:	d017      	beq.n	800c63a <_printf_i+0xb2>
 800c60a:	2978      	cmp	r1, #120	; 0x78
 800c60c:	d1d4      	bne.n	800c5b8 <_printf_i+0x30>
 800c60e:	2378      	movs	r3, #120	; 0x78
 800c610:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c614:	4864      	ldr	r0, [pc, #400]	; (800c7a8 <_printf_i+0x220>)
 800c616:	e055      	b.n	800c6c4 <_printf_i+0x13c>
 800c618:	6813      	ldr	r3, [r2, #0]
 800c61a:	1d19      	adds	r1, r3, #4
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	6011      	str	r1, [r2, #0]
 800c620:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c624:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c628:	2301      	movs	r3, #1
 800c62a:	e08c      	b.n	800c746 <_printf_i+0x1be>
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	6011      	str	r1, [r2, #0]
 800c630:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c634:	bf18      	it	ne
 800c636:	b21b      	sxthne	r3, r3
 800c638:	e7cf      	b.n	800c5da <_printf_i+0x52>
 800c63a:	6813      	ldr	r3, [r2, #0]
 800c63c:	6825      	ldr	r5, [r4, #0]
 800c63e:	1d18      	adds	r0, r3, #4
 800c640:	6010      	str	r0, [r2, #0]
 800c642:	0628      	lsls	r0, r5, #24
 800c644:	d501      	bpl.n	800c64a <_printf_i+0xc2>
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	e002      	b.n	800c650 <_printf_i+0xc8>
 800c64a:	0668      	lsls	r0, r5, #25
 800c64c:	d5fb      	bpl.n	800c646 <_printf_i+0xbe>
 800c64e:	881b      	ldrh	r3, [r3, #0]
 800c650:	4854      	ldr	r0, [pc, #336]	; (800c7a4 <_printf_i+0x21c>)
 800c652:	296f      	cmp	r1, #111	; 0x6f
 800c654:	bf14      	ite	ne
 800c656:	220a      	movne	r2, #10
 800c658:	2208      	moveq	r2, #8
 800c65a:	2100      	movs	r1, #0
 800c65c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c660:	6865      	ldr	r5, [r4, #4]
 800c662:	60a5      	str	r5, [r4, #8]
 800c664:	2d00      	cmp	r5, #0
 800c666:	f2c0 8095 	blt.w	800c794 <_printf_i+0x20c>
 800c66a:	6821      	ldr	r1, [r4, #0]
 800c66c:	f021 0104 	bic.w	r1, r1, #4
 800c670:	6021      	str	r1, [r4, #0]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d13d      	bne.n	800c6f2 <_printf_i+0x16a>
 800c676:	2d00      	cmp	r5, #0
 800c678:	f040 808e 	bne.w	800c798 <_printf_i+0x210>
 800c67c:	4665      	mov	r5, ip
 800c67e:	2a08      	cmp	r2, #8
 800c680:	d10b      	bne.n	800c69a <_printf_i+0x112>
 800c682:	6823      	ldr	r3, [r4, #0]
 800c684:	07db      	lsls	r3, r3, #31
 800c686:	d508      	bpl.n	800c69a <_printf_i+0x112>
 800c688:	6923      	ldr	r3, [r4, #16]
 800c68a:	6862      	ldr	r2, [r4, #4]
 800c68c:	429a      	cmp	r2, r3
 800c68e:	bfde      	ittt	le
 800c690:	2330      	movle	r3, #48	; 0x30
 800c692:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c696:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c69a:	ebac 0305 	sub.w	r3, ip, r5
 800c69e:	6123      	str	r3, [r4, #16]
 800c6a0:	f8cd 8000 	str.w	r8, [sp]
 800c6a4:	463b      	mov	r3, r7
 800c6a6:	aa03      	add	r2, sp, #12
 800c6a8:	4621      	mov	r1, r4
 800c6aa:	4630      	mov	r0, r6
 800c6ac:	f7ff fef6 	bl	800c49c <_printf_common>
 800c6b0:	3001      	adds	r0, #1
 800c6b2:	d14d      	bne.n	800c750 <_printf_i+0x1c8>
 800c6b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c6b8:	b005      	add	sp, #20
 800c6ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c6be:	4839      	ldr	r0, [pc, #228]	; (800c7a4 <_printf_i+0x21c>)
 800c6c0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c6c4:	6813      	ldr	r3, [r2, #0]
 800c6c6:	6821      	ldr	r1, [r4, #0]
 800c6c8:	1d1d      	adds	r5, r3, #4
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	6015      	str	r5, [r2, #0]
 800c6ce:	060a      	lsls	r2, r1, #24
 800c6d0:	d50b      	bpl.n	800c6ea <_printf_i+0x162>
 800c6d2:	07ca      	lsls	r2, r1, #31
 800c6d4:	bf44      	itt	mi
 800c6d6:	f041 0120 	orrmi.w	r1, r1, #32
 800c6da:	6021      	strmi	r1, [r4, #0]
 800c6dc:	b91b      	cbnz	r3, 800c6e6 <_printf_i+0x15e>
 800c6de:	6822      	ldr	r2, [r4, #0]
 800c6e0:	f022 0220 	bic.w	r2, r2, #32
 800c6e4:	6022      	str	r2, [r4, #0]
 800c6e6:	2210      	movs	r2, #16
 800c6e8:	e7b7      	b.n	800c65a <_printf_i+0xd2>
 800c6ea:	064d      	lsls	r5, r1, #25
 800c6ec:	bf48      	it	mi
 800c6ee:	b29b      	uxthmi	r3, r3
 800c6f0:	e7ef      	b.n	800c6d2 <_printf_i+0x14a>
 800c6f2:	4665      	mov	r5, ip
 800c6f4:	fbb3 f1f2 	udiv	r1, r3, r2
 800c6f8:	fb02 3311 	mls	r3, r2, r1, r3
 800c6fc:	5cc3      	ldrb	r3, [r0, r3]
 800c6fe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c702:	460b      	mov	r3, r1
 800c704:	2900      	cmp	r1, #0
 800c706:	d1f5      	bne.n	800c6f4 <_printf_i+0x16c>
 800c708:	e7b9      	b.n	800c67e <_printf_i+0xf6>
 800c70a:	6813      	ldr	r3, [r2, #0]
 800c70c:	6825      	ldr	r5, [r4, #0]
 800c70e:	6961      	ldr	r1, [r4, #20]
 800c710:	1d18      	adds	r0, r3, #4
 800c712:	6010      	str	r0, [r2, #0]
 800c714:	0628      	lsls	r0, r5, #24
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	d501      	bpl.n	800c71e <_printf_i+0x196>
 800c71a:	6019      	str	r1, [r3, #0]
 800c71c:	e002      	b.n	800c724 <_printf_i+0x19c>
 800c71e:	066a      	lsls	r2, r5, #25
 800c720:	d5fb      	bpl.n	800c71a <_printf_i+0x192>
 800c722:	8019      	strh	r1, [r3, #0]
 800c724:	2300      	movs	r3, #0
 800c726:	6123      	str	r3, [r4, #16]
 800c728:	4665      	mov	r5, ip
 800c72a:	e7b9      	b.n	800c6a0 <_printf_i+0x118>
 800c72c:	6813      	ldr	r3, [r2, #0]
 800c72e:	1d19      	adds	r1, r3, #4
 800c730:	6011      	str	r1, [r2, #0]
 800c732:	681d      	ldr	r5, [r3, #0]
 800c734:	6862      	ldr	r2, [r4, #4]
 800c736:	2100      	movs	r1, #0
 800c738:	4628      	mov	r0, r5
 800c73a:	f7f3 fd79 	bl	8000230 <memchr>
 800c73e:	b108      	cbz	r0, 800c744 <_printf_i+0x1bc>
 800c740:	1b40      	subs	r0, r0, r5
 800c742:	6060      	str	r0, [r4, #4]
 800c744:	6863      	ldr	r3, [r4, #4]
 800c746:	6123      	str	r3, [r4, #16]
 800c748:	2300      	movs	r3, #0
 800c74a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c74e:	e7a7      	b.n	800c6a0 <_printf_i+0x118>
 800c750:	6923      	ldr	r3, [r4, #16]
 800c752:	462a      	mov	r2, r5
 800c754:	4639      	mov	r1, r7
 800c756:	4630      	mov	r0, r6
 800c758:	47c0      	blx	r8
 800c75a:	3001      	adds	r0, #1
 800c75c:	d0aa      	beq.n	800c6b4 <_printf_i+0x12c>
 800c75e:	6823      	ldr	r3, [r4, #0]
 800c760:	079b      	lsls	r3, r3, #30
 800c762:	d413      	bmi.n	800c78c <_printf_i+0x204>
 800c764:	68e0      	ldr	r0, [r4, #12]
 800c766:	9b03      	ldr	r3, [sp, #12]
 800c768:	4298      	cmp	r0, r3
 800c76a:	bfb8      	it	lt
 800c76c:	4618      	movlt	r0, r3
 800c76e:	e7a3      	b.n	800c6b8 <_printf_i+0x130>
 800c770:	2301      	movs	r3, #1
 800c772:	464a      	mov	r2, r9
 800c774:	4639      	mov	r1, r7
 800c776:	4630      	mov	r0, r6
 800c778:	47c0      	blx	r8
 800c77a:	3001      	adds	r0, #1
 800c77c:	d09a      	beq.n	800c6b4 <_printf_i+0x12c>
 800c77e:	3501      	adds	r5, #1
 800c780:	68e3      	ldr	r3, [r4, #12]
 800c782:	9a03      	ldr	r2, [sp, #12]
 800c784:	1a9b      	subs	r3, r3, r2
 800c786:	42ab      	cmp	r3, r5
 800c788:	dcf2      	bgt.n	800c770 <_printf_i+0x1e8>
 800c78a:	e7eb      	b.n	800c764 <_printf_i+0x1dc>
 800c78c:	2500      	movs	r5, #0
 800c78e:	f104 0919 	add.w	r9, r4, #25
 800c792:	e7f5      	b.n	800c780 <_printf_i+0x1f8>
 800c794:	2b00      	cmp	r3, #0
 800c796:	d1ac      	bne.n	800c6f2 <_printf_i+0x16a>
 800c798:	7803      	ldrb	r3, [r0, #0]
 800c79a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c79e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c7a2:	e76c      	b.n	800c67e <_printf_i+0xf6>
 800c7a4:	0800ee16 	.word	0x0800ee16
 800c7a8:	0800ee27 	.word	0x0800ee27

0800c7ac <_puts_r>:
 800c7ac:	b570      	push	{r4, r5, r6, lr}
 800c7ae:	460e      	mov	r6, r1
 800c7b0:	4605      	mov	r5, r0
 800c7b2:	b118      	cbz	r0, 800c7bc <_puts_r+0x10>
 800c7b4:	6983      	ldr	r3, [r0, #24]
 800c7b6:	b90b      	cbnz	r3, 800c7bc <_puts_r+0x10>
 800c7b8:	f001 f896 	bl	800d8e8 <__sinit>
 800c7bc:	69ab      	ldr	r3, [r5, #24]
 800c7be:	68ac      	ldr	r4, [r5, #8]
 800c7c0:	b913      	cbnz	r3, 800c7c8 <_puts_r+0x1c>
 800c7c2:	4628      	mov	r0, r5
 800c7c4:	f001 f890 	bl	800d8e8 <__sinit>
 800c7c8:	4b23      	ldr	r3, [pc, #140]	; (800c858 <_puts_r+0xac>)
 800c7ca:	429c      	cmp	r4, r3
 800c7cc:	d117      	bne.n	800c7fe <_puts_r+0x52>
 800c7ce:	686c      	ldr	r4, [r5, #4]
 800c7d0:	89a3      	ldrh	r3, [r4, #12]
 800c7d2:	071b      	lsls	r3, r3, #28
 800c7d4:	d51d      	bpl.n	800c812 <_puts_r+0x66>
 800c7d6:	6923      	ldr	r3, [r4, #16]
 800c7d8:	b1db      	cbz	r3, 800c812 <_puts_r+0x66>
 800c7da:	3e01      	subs	r6, #1
 800c7dc:	68a3      	ldr	r3, [r4, #8]
 800c7de:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c7e2:	3b01      	subs	r3, #1
 800c7e4:	60a3      	str	r3, [r4, #8]
 800c7e6:	b9e9      	cbnz	r1, 800c824 <_puts_r+0x78>
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	da2e      	bge.n	800c84a <_puts_r+0x9e>
 800c7ec:	4622      	mov	r2, r4
 800c7ee:	210a      	movs	r1, #10
 800c7f0:	4628      	mov	r0, r5
 800c7f2:	f000 f883 	bl	800c8fc <__swbuf_r>
 800c7f6:	3001      	adds	r0, #1
 800c7f8:	d011      	beq.n	800c81e <_puts_r+0x72>
 800c7fa:	200a      	movs	r0, #10
 800c7fc:	e011      	b.n	800c822 <_puts_r+0x76>
 800c7fe:	4b17      	ldr	r3, [pc, #92]	; (800c85c <_puts_r+0xb0>)
 800c800:	429c      	cmp	r4, r3
 800c802:	d101      	bne.n	800c808 <_puts_r+0x5c>
 800c804:	68ac      	ldr	r4, [r5, #8]
 800c806:	e7e3      	b.n	800c7d0 <_puts_r+0x24>
 800c808:	4b15      	ldr	r3, [pc, #84]	; (800c860 <_puts_r+0xb4>)
 800c80a:	429c      	cmp	r4, r3
 800c80c:	bf08      	it	eq
 800c80e:	68ec      	ldreq	r4, [r5, #12]
 800c810:	e7de      	b.n	800c7d0 <_puts_r+0x24>
 800c812:	4621      	mov	r1, r4
 800c814:	4628      	mov	r0, r5
 800c816:	f000 f8c3 	bl	800c9a0 <__swsetup_r>
 800c81a:	2800      	cmp	r0, #0
 800c81c:	d0dd      	beq.n	800c7da <_puts_r+0x2e>
 800c81e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c822:	bd70      	pop	{r4, r5, r6, pc}
 800c824:	2b00      	cmp	r3, #0
 800c826:	da04      	bge.n	800c832 <_puts_r+0x86>
 800c828:	69a2      	ldr	r2, [r4, #24]
 800c82a:	429a      	cmp	r2, r3
 800c82c:	dc06      	bgt.n	800c83c <_puts_r+0x90>
 800c82e:	290a      	cmp	r1, #10
 800c830:	d004      	beq.n	800c83c <_puts_r+0x90>
 800c832:	6823      	ldr	r3, [r4, #0]
 800c834:	1c5a      	adds	r2, r3, #1
 800c836:	6022      	str	r2, [r4, #0]
 800c838:	7019      	strb	r1, [r3, #0]
 800c83a:	e7cf      	b.n	800c7dc <_puts_r+0x30>
 800c83c:	4622      	mov	r2, r4
 800c83e:	4628      	mov	r0, r5
 800c840:	f000 f85c 	bl	800c8fc <__swbuf_r>
 800c844:	3001      	adds	r0, #1
 800c846:	d1c9      	bne.n	800c7dc <_puts_r+0x30>
 800c848:	e7e9      	b.n	800c81e <_puts_r+0x72>
 800c84a:	6823      	ldr	r3, [r4, #0]
 800c84c:	200a      	movs	r0, #10
 800c84e:	1c5a      	adds	r2, r3, #1
 800c850:	6022      	str	r2, [r4, #0]
 800c852:	7018      	strb	r0, [r3, #0]
 800c854:	e7e5      	b.n	800c822 <_puts_r+0x76>
 800c856:	bf00      	nop
 800c858:	0800ee68 	.word	0x0800ee68
 800c85c:	0800ee88 	.word	0x0800ee88
 800c860:	0800ee48 	.word	0x0800ee48

0800c864 <puts>:
 800c864:	4b02      	ldr	r3, [pc, #8]	; (800c870 <puts+0xc>)
 800c866:	4601      	mov	r1, r0
 800c868:	6818      	ldr	r0, [r3, #0]
 800c86a:	f7ff bf9f 	b.w	800c7ac <_puts_r>
 800c86e:	bf00      	nop
 800c870:	20001228 	.word	0x20001228

0800c874 <sniprintf>:
 800c874:	b40c      	push	{r2, r3}
 800c876:	b530      	push	{r4, r5, lr}
 800c878:	4b17      	ldr	r3, [pc, #92]	; (800c8d8 <sniprintf+0x64>)
 800c87a:	1e0c      	subs	r4, r1, #0
 800c87c:	b09d      	sub	sp, #116	; 0x74
 800c87e:	681d      	ldr	r5, [r3, #0]
 800c880:	da08      	bge.n	800c894 <sniprintf+0x20>
 800c882:	238b      	movs	r3, #139	; 0x8b
 800c884:	602b      	str	r3, [r5, #0]
 800c886:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c88a:	b01d      	add	sp, #116	; 0x74
 800c88c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c890:	b002      	add	sp, #8
 800c892:	4770      	bx	lr
 800c894:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c898:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c89c:	bf14      	ite	ne
 800c89e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800c8a2:	4623      	moveq	r3, r4
 800c8a4:	9304      	str	r3, [sp, #16]
 800c8a6:	9307      	str	r3, [sp, #28]
 800c8a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c8ac:	9002      	str	r0, [sp, #8]
 800c8ae:	9006      	str	r0, [sp, #24]
 800c8b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c8b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c8b6:	ab21      	add	r3, sp, #132	; 0x84
 800c8b8:	a902      	add	r1, sp, #8
 800c8ba:	4628      	mov	r0, r5
 800c8bc:	9301      	str	r3, [sp, #4]
 800c8be:	f001 fd0d 	bl	800e2dc <_svfiprintf_r>
 800c8c2:	1c43      	adds	r3, r0, #1
 800c8c4:	bfbc      	itt	lt
 800c8c6:	238b      	movlt	r3, #139	; 0x8b
 800c8c8:	602b      	strlt	r3, [r5, #0]
 800c8ca:	2c00      	cmp	r4, #0
 800c8cc:	d0dd      	beq.n	800c88a <sniprintf+0x16>
 800c8ce:	9b02      	ldr	r3, [sp, #8]
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	701a      	strb	r2, [r3, #0]
 800c8d4:	e7d9      	b.n	800c88a <sniprintf+0x16>
 800c8d6:	bf00      	nop
 800c8d8:	20001228 	.word	0x20001228

0800c8dc <strcat>:
 800c8dc:	b510      	push	{r4, lr}
 800c8de:	4603      	mov	r3, r0
 800c8e0:	781a      	ldrb	r2, [r3, #0]
 800c8e2:	1c5c      	adds	r4, r3, #1
 800c8e4:	b93a      	cbnz	r2, 800c8f6 <strcat+0x1a>
 800c8e6:	3b01      	subs	r3, #1
 800c8e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c8ec:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c8f0:	2a00      	cmp	r2, #0
 800c8f2:	d1f9      	bne.n	800c8e8 <strcat+0xc>
 800c8f4:	bd10      	pop	{r4, pc}
 800c8f6:	4623      	mov	r3, r4
 800c8f8:	e7f2      	b.n	800c8e0 <strcat+0x4>
	...

0800c8fc <__swbuf_r>:
 800c8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8fe:	460e      	mov	r6, r1
 800c900:	4614      	mov	r4, r2
 800c902:	4605      	mov	r5, r0
 800c904:	b118      	cbz	r0, 800c90e <__swbuf_r+0x12>
 800c906:	6983      	ldr	r3, [r0, #24]
 800c908:	b90b      	cbnz	r3, 800c90e <__swbuf_r+0x12>
 800c90a:	f000 ffed 	bl	800d8e8 <__sinit>
 800c90e:	4b21      	ldr	r3, [pc, #132]	; (800c994 <__swbuf_r+0x98>)
 800c910:	429c      	cmp	r4, r3
 800c912:	d12a      	bne.n	800c96a <__swbuf_r+0x6e>
 800c914:	686c      	ldr	r4, [r5, #4]
 800c916:	69a3      	ldr	r3, [r4, #24]
 800c918:	60a3      	str	r3, [r4, #8]
 800c91a:	89a3      	ldrh	r3, [r4, #12]
 800c91c:	071a      	lsls	r2, r3, #28
 800c91e:	d52e      	bpl.n	800c97e <__swbuf_r+0x82>
 800c920:	6923      	ldr	r3, [r4, #16]
 800c922:	b363      	cbz	r3, 800c97e <__swbuf_r+0x82>
 800c924:	6923      	ldr	r3, [r4, #16]
 800c926:	6820      	ldr	r0, [r4, #0]
 800c928:	1ac0      	subs	r0, r0, r3
 800c92a:	6963      	ldr	r3, [r4, #20]
 800c92c:	b2f6      	uxtb	r6, r6
 800c92e:	4283      	cmp	r3, r0
 800c930:	4637      	mov	r7, r6
 800c932:	dc04      	bgt.n	800c93e <__swbuf_r+0x42>
 800c934:	4621      	mov	r1, r4
 800c936:	4628      	mov	r0, r5
 800c938:	f000 ff6c 	bl	800d814 <_fflush_r>
 800c93c:	bb28      	cbnz	r0, 800c98a <__swbuf_r+0x8e>
 800c93e:	68a3      	ldr	r3, [r4, #8]
 800c940:	3b01      	subs	r3, #1
 800c942:	60a3      	str	r3, [r4, #8]
 800c944:	6823      	ldr	r3, [r4, #0]
 800c946:	1c5a      	adds	r2, r3, #1
 800c948:	6022      	str	r2, [r4, #0]
 800c94a:	701e      	strb	r6, [r3, #0]
 800c94c:	6963      	ldr	r3, [r4, #20]
 800c94e:	3001      	adds	r0, #1
 800c950:	4283      	cmp	r3, r0
 800c952:	d004      	beq.n	800c95e <__swbuf_r+0x62>
 800c954:	89a3      	ldrh	r3, [r4, #12]
 800c956:	07db      	lsls	r3, r3, #31
 800c958:	d519      	bpl.n	800c98e <__swbuf_r+0x92>
 800c95a:	2e0a      	cmp	r6, #10
 800c95c:	d117      	bne.n	800c98e <__swbuf_r+0x92>
 800c95e:	4621      	mov	r1, r4
 800c960:	4628      	mov	r0, r5
 800c962:	f000 ff57 	bl	800d814 <_fflush_r>
 800c966:	b190      	cbz	r0, 800c98e <__swbuf_r+0x92>
 800c968:	e00f      	b.n	800c98a <__swbuf_r+0x8e>
 800c96a:	4b0b      	ldr	r3, [pc, #44]	; (800c998 <__swbuf_r+0x9c>)
 800c96c:	429c      	cmp	r4, r3
 800c96e:	d101      	bne.n	800c974 <__swbuf_r+0x78>
 800c970:	68ac      	ldr	r4, [r5, #8]
 800c972:	e7d0      	b.n	800c916 <__swbuf_r+0x1a>
 800c974:	4b09      	ldr	r3, [pc, #36]	; (800c99c <__swbuf_r+0xa0>)
 800c976:	429c      	cmp	r4, r3
 800c978:	bf08      	it	eq
 800c97a:	68ec      	ldreq	r4, [r5, #12]
 800c97c:	e7cb      	b.n	800c916 <__swbuf_r+0x1a>
 800c97e:	4621      	mov	r1, r4
 800c980:	4628      	mov	r0, r5
 800c982:	f000 f80d 	bl	800c9a0 <__swsetup_r>
 800c986:	2800      	cmp	r0, #0
 800c988:	d0cc      	beq.n	800c924 <__swbuf_r+0x28>
 800c98a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c98e:	4638      	mov	r0, r7
 800c990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c992:	bf00      	nop
 800c994:	0800ee68 	.word	0x0800ee68
 800c998:	0800ee88 	.word	0x0800ee88
 800c99c:	0800ee48 	.word	0x0800ee48

0800c9a0 <__swsetup_r>:
 800c9a0:	4b32      	ldr	r3, [pc, #200]	; (800ca6c <__swsetup_r+0xcc>)
 800c9a2:	b570      	push	{r4, r5, r6, lr}
 800c9a4:	681d      	ldr	r5, [r3, #0]
 800c9a6:	4606      	mov	r6, r0
 800c9a8:	460c      	mov	r4, r1
 800c9aa:	b125      	cbz	r5, 800c9b6 <__swsetup_r+0x16>
 800c9ac:	69ab      	ldr	r3, [r5, #24]
 800c9ae:	b913      	cbnz	r3, 800c9b6 <__swsetup_r+0x16>
 800c9b0:	4628      	mov	r0, r5
 800c9b2:	f000 ff99 	bl	800d8e8 <__sinit>
 800c9b6:	4b2e      	ldr	r3, [pc, #184]	; (800ca70 <__swsetup_r+0xd0>)
 800c9b8:	429c      	cmp	r4, r3
 800c9ba:	d10f      	bne.n	800c9dc <__swsetup_r+0x3c>
 800c9bc:	686c      	ldr	r4, [r5, #4]
 800c9be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9c2:	b29a      	uxth	r2, r3
 800c9c4:	0715      	lsls	r5, r2, #28
 800c9c6:	d42c      	bmi.n	800ca22 <__swsetup_r+0x82>
 800c9c8:	06d0      	lsls	r0, r2, #27
 800c9ca:	d411      	bmi.n	800c9f0 <__swsetup_r+0x50>
 800c9cc:	2209      	movs	r2, #9
 800c9ce:	6032      	str	r2, [r6, #0]
 800c9d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9d4:	81a3      	strh	r3, [r4, #12]
 800c9d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c9da:	e03e      	b.n	800ca5a <__swsetup_r+0xba>
 800c9dc:	4b25      	ldr	r3, [pc, #148]	; (800ca74 <__swsetup_r+0xd4>)
 800c9de:	429c      	cmp	r4, r3
 800c9e0:	d101      	bne.n	800c9e6 <__swsetup_r+0x46>
 800c9e2:	68ac      	ldr	r4, [r5, #8]
 800c9e4:	e7eb      	b.n	800c9be <__swsetup_r+0x1e>
 800c9e6:	4b24      	ldr	r3, [pc, #144]	; (800ca78 <__swsetup_r+0xd8>)
 800c9e8:	429c      	cmp	r4, r3
 800c9ea:	bf08      	it	eq
 800c9ec:	68ec      	ldreq	r4, [r5, #12]
 800c9ee:	e7e6      	b.n	800c9be <__swsetup_r+0x1e>
 800c9f0:	0751      	lsls	r1, r2, #29
 800c9f2:	d512      	bpl.n	800ca1a <__swsetup_r+0x7a>
 800c9f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c9f6:	b141      	cbz	r1, 800ca0a <__swsetup_r+0x6a>
 800c9f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c9fc:	4299      	cmp	r1, r3
 800c9fe:	d002      	beq.n	800ca06 <__swsetup_r+0x66>
 800ca00:	4630      	mov	r0, r6
 800ca02:	f001 fb69 	bl	800e0d8 <_free_r>
 800ca06:	2300      	movs	r3, #0
 800ca08:	6363      	str	r3, [r4, #52]	; 0x34
 800ca0a:	89a3      	ldrh	r3, [r4, #12]
 800ca0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ca10:	81a3      	strh	r3, [r4, #12]
 800ca12:	2300      	movs	r3, #0
 800ca14:	6063      	str	r3, [r4, #4]
 800ca16:	6923      	ldr	r3, [r4, #16]
 800ca18:	6023      	str	r3, [r4, #0]
 800ca1a:	89a3      	ldrh	r3, [r4, #12]
 800ca1c:	f043 0308 	orr.w	r3, r3, #8
 800ca20:	81a3      	strh	r3, [r4, #12]
 800ca22:	6923      	ldr	r3, [r4, #16]
 800ca24:	b94b      	cbnz	r3, 800ca3a <__swsetup_r+0x9a>
 800ca26:	89a3      	ldrh	r3, [r4, #12]
 800ca28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ca2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca30:	d003      	beq.n	800ca3a <__swsetup_r+0x9a>
 800ca32:	4621      	mov	r1, r4
 800ca34:	4630      	mov	r0, r6
 800ca36:	f001 f813 	bl	800da60 <__smakebuf_r>
 800ca3a:	89a2      	ldrh	r2, [r4, #12]
 800ca3c:	f012 0301 	ands.w	r3, r2, #1
 800ca40:	d00c      	beq.n	800ca5c <__swsetup_r+0xbc>
 800ca42:	2300      	movs	r3, #0
 800ca44:	60a3      	str	r3, [r4, #8]
 800ca46:	6963      	ldr	r3, [r4, #20]
 800ca48:	425b      	negs	r3, r3
 800ca4a:	61a3      	str	r3, [r4, #24]
 800ca4c:	6923      	ldr	r3, [r4, #16]
 800ca4e:	b953      	cbnz	r3, 800ca66 <__swsetup_r+0xc6>
 800ca50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca54:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800ca58:	d1ba      	bne.n	800c9d0 <__swsetup_r+0x30>
 800ca5a:	bd70      	pop	{r4, r5, r6, pc}
 800ca5c:	0792      	lsls	r2, r2, #30
 800ca5e:	bf58      	it	pl
 800ca60:	6963      	ldrpl	r3, [r4, #20]
 800ca62:	60a3      	str	r3, [r4, #8]
 800ca64:	e7f2      	b.n	800ca4c <__swsetup_r+0xac>
 800ca66:	2000      	movs	r0, #0
 800ca68:	e7f7      	b.n	800ca5a <__swsetup_r+0xba>
 800ca6a:	bf00      	nop
 800ca6c:	20001228 	.word	0x20001228
 800ca70:	0800ee68 	.word	0x0800ee68
 800ca74:	0800ee88 	.word	0x0800ee88
 800ca78:	0800ee48 	.word	0x0800ee48

0800ca7c <quorem>:
 800ca7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca80:	6903      	ldr	r3, [r0, #16]
 800ca82:	690c      	ldr	r4, [r1, #16]
 800ca84:	42a3      	cmp	r3, r4
 800ca86:	4680      	mov	r8, r0
 800ca88:	f2c0 8082 	blt.w	800cb90 <quorem+0x114>
 800ca8c:	3c01      	subs	r4, #1
 800ca8e:	f101 0714 	add.w	r7, r1, #20
 800ca92:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800ca96:	f100 0614 	add.w	r6, r0, #20
 800ca9a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800ca9e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800caa2:	eb06 030c 	add.w	r3, r6, ip
 800caa6:	3501      	adds	r5, #1
 800caa8:	eb07 090c 	add.w	r9, r7, ip
 800caac:	9301      	str	r3, [sp, #4]
 800caae:	fbb0 f5f5 	udiv	r5, r0, r5
 800cab2:	b395      	cbz	r5, 800cb1a <quorem+0x9e>
 800cab4:	f04f 0a00 	mov.w	sl, #0
 800cab8:	4638      	mov	r0, r7
 800caba:	46b6      	mov	lr, r6
 800cabc:	46d3      	mov	fp, sl
 800cabe:	f850 2b04 	ldr.w	r2, [r0], #4
 800cac2:	b293      	uxth	r3, r2
 800cac4:	fb05 a303 	mla	r3, r5, r3, sl
 800cac8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cacc:	b29b      	uxth	r3, r3
 800cace:	ebab 0303 	sub.w	r3, fp, r3
 800cad2:	0c12      	lsrs	r2, r2, #16
 800cad4:	f8de b000 	ldr.w	fp, [lr]
 800cad8:	fb05 a202 	mla	r2, r5, r2, sl
 800cadc:	fa13 f38b 	uxtah	r3, r3, fp
 800cae0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800cae4:	fa1f fb82 	uxth.w	fp, r2
 800cae8:	f8de 2000 	ldr.w	r2, [lr]
 800caec:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800caf0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800caf4:	b29b      	uxth	r3, r3
 800caf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cafa:	4581      	cmp	r9, r0
 800cafc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800cb00:	f84e 3b04 	str.w	r3, [lr], #4
 800cb04:	d2db      	bcs.n	800cabe <quorem+0x42>
 800cb06:	f856 300c 	ldr.w	r3, [r6, ip]
 800cb0a:	b933      	cbnz	r3, 800cb1a <quorem+0x9e>
 800cb0c:	9b01      	ldr	r3, [sp, #4]
 800cb0e:	3b04      	subs	r3, #4
 800cb10:	429e      	cmp	r6, r3
 800cb12:	461a      	mov	r2, r3
 800cb14:	d330      	bcc.n	800cb78 <quorem+0xfc>
 800cb16:	f8c8 4010 	str.w	r4, [r8, #16]
 800cb1a:	4640      	mov	r0, r8
 800cb1c:	f001 fa08 	bl	800df30 <__mcmp>
 800cb20:	2800      	cmp	r0, #0
 800cb22:	db25      	blt.n	800cb70 <quorem+0xf4>
 800cb24:	3501      	adds	r5, #1
 800cb26:	4630      	mov	r0, r6
 800cb28:	f04f 0c00 	mov.w	ip, #0
 800cb2c:	f857 2b04 	ldr.w	r2, [r7], #4
 800cb30:	f8d0 e000 	ldr.w	lr, [r0]
 800cb34:	b293      	uxth	r3, r2
 800cb36:	ebac 0303 	sub.w	r3, ip, r3
 800cb3a:	0c12      	lsrs	r2, r2, #16
 800cb3c:	fa13 f38e 	uxtah	r3, r3, lr
 800cb40:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cb44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cb48:	b29b      	uxth	r3, r3
 800cb4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cb4e:	45b9      	cmp	r9, r7
 800cb50:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cb54:	f840 3b04 	str.w	r3, [r0], #4
 800cb58:	d2e8      	bcs.n	800cb2c <quorem+0xb0>
 800cb5a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800cb5e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800cb62:	b92a      	cbnz	r2, 800cb70 <quorem+0xf4>
 800cb64:	3b04      	subs	r3, #4
 800cb66:	429e      	cmp	r6, r3
 800cb68:	461a      	mov	r2, r3
 800cb6a:	d30b      	bcc.n	800cb84 <quorem+0x108>
 800cb6c:	f8c8 4010 	str.w	r4, [r8, #16]
 800cb70:	4628      	mov	r0, r5
 800cb72:	b003      	add	sp, #12
 800cb74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb78:	6812      	ldr	r2, [r2, #0]
 800cb7a:	3b04      	subs	r3, #4
 800cb7c:	2a00      	cmp	r2, #0
 800cb7e:	d1ca      	bne.n	800cb16 <quorem+0x9a>
 800cb80:	3c01      	subs	r4, #1
 800cb82:	e7c5      	b.n	800cb10 <quorem+0x94>
 800cb84:	6812      	ldr	r2, [r2, #0]
 800cb86:	3b04      	subs	r3, #4
 800cb88:	2a00      	cmp	r2, #0
 800cb8a:	d1ef      	bne.n	800cb6c <quorem+0xf0>
 800cb8c:	3c01      	subs	r4, #1
 800cb8e:	e7ea      	b.n	800cb66 <quorem+0xea>
 800cb90:	2000      	movs	r0, #0
 800cb92:	e7ee      	b.n	800cb72 <quorem+0xf6>
 800cb94:	0000      	movs	r0, r0
	...

0800cb98 <_dtoa_r>:
 800cb98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb9c:	ec57 6b10 	vmov	r6, r7, d0
 800cba0:	b097      	sub	sp, #92	; 0x5c
 800cba2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cba4:	9106      	str	r1, [sp, #24]
 800cba6:	4604      	mov	r4, r0
 800cba8:	920b      	str	r2, [sp, #44]	; 0x2c
 800cbaa:	9312      	str	r3, [sp, #72]	; 0x48
 800cbac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cbb0:	e9cd 6700 	strd	r6, r7, [sp]
 800cbb4:	b93d      	cbnz	r5, 800cbc6 <_dtoa_r+0x2e>
 800cbb6:	2010      	movs	r0, #16
 800cbb8:	f000 ff92 	bl	800dae0 <malloc>
 800cbbc:	6260      	str	r0, [r4, #36]	; 0x24
 800cbbe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cbc2:	6005      	str	r5, [r0, #0]
 800cbc4:	60c5      	str	r5, [r0, #12]
 800cbc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cbc8:	6819      	ldr	r1, [r3, #0]
 800cbca:	b151      	cbz	r1, 800cbe2 <_dtoa_r+0x4a>
 800cbcc:	685a      	ldr	r2, [r3, #4]
 800cbce:	604a      	str	r2, [r1, #4]
 800cbd0:	2301      	movs	r3, #1
 800cbd2:	4093      	lsls	r3, r2
 800cbd4:	608b      	str	r3, [r1, #8]
 800cbd6:	4620      	mov	r0, r4
 800cbd8:	f000 ffc9 	bl	800db6e <_Bfree>
 800cbdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cbde:	2200      	movs	r2, #0
 800cbe0:	601a      	str	r2, [r3, #0]
 800cbe2:	1e3b      	subs	r3, r7, #0
 800cbe4:	bfbb      	ittet	lt
 800cbe6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800cbea:	9301      	strlt	r3, [sp, #4]
 800cbec:	2300      	movge	r3, #0
 800cbee:	2201      	movlt	r2, #1
 800cbf0:	bfac      	ite	ge
 800cbf2:	f8c8 3000 	strge.w	r3, [r8]
 800cbf6:	f8c8 2000 	strlt.w	r2, [r8]
 800cbfa:	4baf      	ldr	r3, [pc, #700]	; (800ceb8 <_dtoa_r+0x320>)
 800cbfc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cc00:	ea33 0308 	bics.w	r3, r3, r8
 800cc04:	d114      	bne.n	800cc30 <_dtoa_r+0x98>
 800cc06:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cc08:	f242 730f 	movw	r3, #9999	; 0x270f
 800cc0c:	6013      	str	r3, [r2, #0]
 800cc0e:	9b00      	ldr	r3, [sp, #0]
 800cc10:	b923      	cbnz	r3, 800cc1c <_dtoa_r+0x84>
 800cc12:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800cc16:	2800      	cmp	r0, #0
 800cc18:	f000 8542 	beq.w	800d6a0 <_dtoa_r+0xb08>
 800cc1c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cc1e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800cecc <_dtoa_r+0x334>
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	f000 8544 	beq.w	800d6b0 <_dtoa_r+0xb18>
 800cc28:	f10b 0303 	add.w	r3, fp, #3
 800cc2c:	f000 bd3e 	b.w	800d6ac <_dtoa_r+0xb14>
 800cc30:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cc34:	2200      	movs	r2, #0
 800cc36:	2300      	movs	r3, #0
 800cc38:	4630      	mov	r0, r6
 800cc3a:	4639      	mov	r1, r7
 800cc3c:	f7f3 ff6c 	bl	8000b18 <__aeabi_dcmpeq>
 800cc40:	4681      	mov	r9, r0
 800cc42:	b168      	cbz	r0, 800cc60 <_dtoa_r+0xc8>
 800cc44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cc46:	2301      	movs	r3, #1
 800cc48:	6013      	str	r3, [r2, #0]
 800cc4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	f000 8524 	beq.w	800d69a <_dtoa_r+0xb02>
 800cc52:	4b9a      	ldr	r3, [pc, #616]	; (800cebc <_dtoa_r+0x324>)
 800cc54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cc56:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800cc5a:	6013      	str	r3, [r2, #0]
 800cc5c:	f000 bd28 	b.w	800d6b0 <_dtoa_r+0xb18>
 800cc60:	aa14      	add	r2, sp, #80	; 0x50
 800cc62:	a915      	add	r1, sp, #84	; 0x54
 800cc64:	ec47 6b10 	vmov	d0, r6, r7
 800cc68:	4620      	mov	r0, r4
 800cc6a:	f001 f9d8 	bl	800e01e <__d2b>
 800cc6e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800cc72:	9004      	str	r0, [sp, #16]
 800cc74:	2d00      	cmp	r5, #0
 800cc76:	d07c      	beq.n	800cd72 <_dtoa_r+0x1da>
 800cc78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cc7c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800cc80:	46b2      	mov	sl, r6
 800cc82:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800cc86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cc8a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800cc8e:	2200      	movs	r2, #0
 800cc90:	4b8b      	ldr	r3, [pc, #556]	; (800cec0 <_dtoa_r+0x328>)
 800cc92:	4650      	mov	r0, sl
 800cc94:	4659      	mov	r1, fp
 800cc96:	f7f3 fb1f 	bl	80002d8 <__aeabi_dsub>
 800cc9a:	a381      	add	r3, pc, #516	; (adr r3, 800cea0 <_dtoa_r+0x308>)
 800cc9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca0:	f7f3 fcd2 	bl	8000648 <__aeabi_dmul>
 800cca4:	a380      	add	r3, pc, #512	; (adr r3, 800cea8 <_dtoa_r+0x310>)
 800cca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccaa:	f7f3 fb17 	bl	80002dc <__adddf3>
 800ccae:	4606      	mov	r6, r0
 800ccb0:	4628      	mov	r0, r5
 800ccb2:	460f      	mov	r7, r1
 800ccb4:	f7f3 fc5e 	bl	8000574 <__aeabi_i2d>
 800ccb8:	a37d      	add	r3, pc, #500	; (adr r3, 800ceb0 <_dtoa_r+0x318>)
 800ccba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccbe:	f7f3 fcc3 	bl	8000648 <__aeabi_dmul>
 800ccc2:	4602      	mov	r2, r0
 800ccc4:	460b      	mov	r3, r1
 800ccc6:	4630      	mov	r0, r6
 800ccc8:	4639      	mov	r1, r7
 800ccca:	f7f3 fb07 	bl	80002dc <__adddf3>
 800ccce:	4606      	mov	r6, r0
 800ccd0:	460f      	mov	r7, r1
 800ccd2:	f7f3 ff69 	bl	8000ba8 <__aeabi_d2iz>
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	4682      	mov	sl, r0
 800ccda:	2300      	movs	r3, #0
 800ccdc:	4630      	mov	r0, r6
 800ccde:	4639      	mov	r1, r7
 800cce0:	f7f3 ff24 	bl	8000b2c <__aeabi_dcmplt>
 800cce4:	b148      	cbz	r0, 800ccfa <_dtoa_r+0x162>
 800cce6:	4650      	mov	r0, sl
 800cce8:	f7f3 fc44 	bl	8000574 <__aeabi_i2d>
 800ccec:	4632      	mov	r2, r6
 800ccee:	463b      	mov	r3, r7
 800ccf0:	f7f3 ff12 	bl	8000b18 <__aeabi_dcmpeq>
 800ccf4:	b908      	cbnz	r0, 800ccfa <_dtoa_r+0x162>
 800ccf6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ccfa:	f1ba 0f16 	cmp.w	sl, #22
 800ccfe:	d859      	bhi.n	800cdb4 <_dtoa_r+0x21c>
 800cd00:	4970      	ldr	r1, [pc, #448]	; (800cec4 <_dtoa_r+0x32c>)
 800cd02:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800cd06:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd0e:	f7f3 ff2b 	bl	8000b68 <__aeabi_dcmpgt>
 800cd12:	2800      	cmp	r0, #0
 800cd14:	d050      	beq.n	800cdb8 <_dtoa_r+0x220>
 800cd16:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cd20:	1b5d      	subs	r5, r3, r5
 800cd22:	f1b5 0801 	subs.w	r8, r5, #1
 800cd26:	bf49      	itett	mi
 800cd28:	f1c5 0301 	rsbmi	r3, r5, #1
 800cd2c:	2300      	movpl	r3, #0
 800cd2e:	9305      	strmi	r3, [sp, #20]
 800cd30:	f04f 0800 	movmi.w	r8, #0
 800cd34:	bf58      	it	pl
 800cd36:	9305      	strpl	r3, [sp, #20]
 800cd38:	f1ba 0f00 	cmp.w	sl, #0
 800cd3c:	db3e      	blt.n	800cdbc <_dtoa_r+0x224>
 800cd3e:	2300      	movs	r3, #0
 800cd40:	44d0      	add	r8, sl
 800cd42:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800cd46:	9307      	str	r3, [sp, #28]
 800cd48:	9b06      	ldr	r3, [sp, #24]
 800cd4a:	2b09      	cmp	r3, #9
 800cd4c:	f200 8090 	bhi.w	800ce70 <_dtoa_r+0x2d8>
 800cd50:	2b05      	cmp	r3, #5
 800cd52:	bfc4      	itt	gt
 800cd54:	3b04      	subgt	r3, #4
 800cd56:	9306      	strgt	r3, [sp, #24]
 800cd58:	9b06      	ldr	r3, [sp, #24]
 800cd5a:	f1a3 0302 	sub.w	r3, r3, #2
 800cd5e:	bfcc      	ite	gt
 800cd60:	2500      	movgt	r5, #0
 800cd62:	2501      	movle	r5, #1
 800cd64:	2b03      	cmp	r3, #3
 800cd66:	f200 808f 	bhi.w	800ce88 <_dtoa_r+0x2f0>
 800cd6a:	e8df f003 	tbb	[pc, r3]
 800cd6e:	7f7d      	.short	0x7f7d
 800cd70:	7131      	.short	0x7131
 800cd72:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800cd76:	441d      	add	r5, r3
 800cd78:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800cd7c:	2820      	cmp	r0, #32
 800cd7e:	dd13      	ble.n	800cda8 <_dtoa_r+0x210>
 800cd80:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800cd84:	9b00      	ldr	r3, [sp, #0]
 800cd86:	fa08 f800 	lsl.w	r8, r8, r0
 800cd8a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800cd8e:	fa23 f000 	lsr.w	r0, r3, r0
 800cd92:	ea48 0000 	orr.w	r0, r8, r0
 800cd96:	f7f3 fbdd 	bl	8000554 <__aeabi_ui2d>
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	4682      	mov	sl, r0
 800cd9e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800cda2:	3d01      	subs	r5, #1
 800cda4:	9313      	str	r3, [sp, #76]	; 0x4c
 800cda6:	e772      	b.n	800cc8e <_dtoa_r+0xf6>
 800cda8:	9b00      	ldr	r3, [sp, #0]
 800cdaa:	f1c0 0020 	rsb	r0, r0, #32
 800cdae:	fa03 f000 	lsl.w	r0, r3, r0
 800cdb2:	e7f0      	b.n	800cd96 <_dtoa_r+0x1fe>
 800cdb4:	2301      	movs	r3, #1
 800cdb6:	e7b1      	b.n	800cd1c <_dtoa_r+0x184>
 800cdb8:	900f      	str	r0, [sp, #60]	; 0x3c
 800cdba:	e7b0      	b.n	800cd1e <_dtoa_r+0x186>
 800cdbc:	9b05      	ldr	r3, [sp, #20]
 800cdbe:	eba3 030a 	sub.w	r3, r3, sl
 800cdc2:	9305      	str	r3, [sp, #20]
 800cdc4:	f1ca 0300 	rsb	r3, sl, #0
 800cdc8:	9307      	str	r3, [sp, #28]
 800cdca:	2300      	movs	r3, #0
 800cdcc:	930e      	str	r3, [sp, #56]	; 0x38
 800cdce:	e7bb      	b.n	800cd48 <_dtoa_r+0x1b0>
 800cdd0:	2301      	movs	r3, #1
 800cdd2:	930a      	str	r3, [sp, #40]	; 0x28
 800cdd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	dd59      	ble.n	800ce8e <_dtoa_r+0x2f6>
 800cdda:	9302      	str	r3, [sp, #8]
 800cddc:	4699      	mov	r9, r3
 800cdde:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cde0:	2200      	movs	r2, #0
 800cde2:	6072      	str	r2, [r6, #4]
 800cde4:	2204      	movs	r2, #4
 800cde6:	f102 0014 	add.w	r0, r2, #20
 800cdea:	4298      	cmp	r0, r3
 800cdec:	6871      	ldr	r1, [r6, #4]
 800cdee:	d953      	bls.n	800ce98 <_dtoa_r+0x300>
 800cdf0:	4620      	mov	r0, r4
 800cdf2:	f000 fe88 	bl	800db06 <_Balloc>
 800cdf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cdf8:	6030      	str	r0, [r6, #0]
 800cdfa:	f1b9 0f0e 	cmp.w	r9, #14
 800cdfe:	f8d3 b000 	ldr.w	fp, [r3]
 800ce02:	f200 80e6 	bhi.w	800cfd2 <_dtoa_r+0x43a>
 800ce06:	2d00      	cmp	r5, #0
 800ce08:	f000 80e3 	beq.w	800cfd2 <_dtoa_r+0x43a>
 800ce0c:	ed9d 7b00 	vldr	d7, [sp]
 800ce10:	f1ba 0f00 	cmp.w	sl, #0
 800ce14:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800ce18:	dd74      	ble.n	800cf04 <_dtoa_r+0x36c>
 800ce1a:	4a2a      	ldr	r2, [pc, #168]	; (800cec4 <_dtoa_r+0x32c>)
 800ce1c:	f00a 030f 	and.w	r3, sl, #15
 800ce20:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ce24:	ed93 7b00 	vldr	d7, [r3]
 800ce28:	ea4f 162a 	mov.w	r6, sl, asr #4
 800ce2c:	06f0      	lsls	r0, r6, #27
 800ce2e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800ce32:	d565      	bpl.n	800cf00 <_dtoa_r+0x368>
 800ce34:	4b24      	ldr	r3, [pc, #144]	; (800cec8 <_dtoa_r+0x330>)
 800ce36:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ce3a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ce3e:	f7f3 fd2d 	bl	800089c <__aeabi_ddiv>
 800ce42:	e9cd 0100 	strd	r0, r1, [sp]
 800ce46:	f006 060f 	and.w	r6, r6, #15
 800ce4a:	2503      	movs	r5, #3
 800ce4c:	4f1e      	ldr	r7, [pc, #120]	; (800cec8 <_dtoa_r+0x330>)
 800ce4e:	e04c      	b.n	800ceea <_dtoa_r+0x352>
 800ce50:	2301      	movs	r3, #1
 800ce52:	930a      	str	r3, [sp, #40]	; 0x28
 800ce54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce56:	4453      	add	r3, sl
 800ce58:	f103 0901 	add.w	r9, r3, #1
 800ce5c:	9302      	str	r3, [sp, #8]
 800ce5e:	464b      	mov	r3, r9
 800ce60:	2b01      	cmp	r3, #1
 800ce62:	bfb8      	it	lt
 800ce64:	2301      	movlt	r3, #1
 800ce66:	e7ba      	b.n	800cdde <_dtoa_r+0x246>
 800ce68:	2300      	movs	r3, #0
 800ce6a:	e7b2      	b.n	800cdd2 <_dtoa_r+0x23a>
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	e7f0      	b.n	800ce52 <_dtoa_r+0x2ba>
 800ce70:	2501      	movs	r5, #1
 800ce72:	2300      	movs	r3, #0
 800ce74:	9306      	str	r3, [sp, #24]
 800ce76:	950a      	str	r5, [sp, #40]	; 0x28
 800ce78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ce7c:	9302      	str	r3, [sp, #8]
 800ce7e:	4699      	mov	r9, r3
 800ce80:	2200      	movs	r2, #0
 800ce82:	2312      	movs	r3, #18
 800ce84:	920b      	str	r2, [sp, #44]	; 0x2c
 800ce86:	e7aa      	b.n	800cdde <_dtoa_r+0x246>
 800ce88:	2301      	movs	r3, #1
 800ce8a:	930a      	str	r3, [sp, #40]	; 0x28
 800ce8c:	e7f4      	b.n	800ce78 <_dtoa_r+0x2e0>
 800ce8e:	2301      	movs	r3, #1
 800ce90:	9302      	str	r3, [sp, #8]
 800ce92:	4699      	mov	r9, r3
 800ce94:	461a      	mov	r2, r3
 800ce96:	e7f5      	b.n	800ce84 <_dtoa_r+0x2ec>
 800ce98:	3101      	adds	r1, #1
 800ce9a:	6071      	str	r1, [r6, #4]
 800ce9c:	0052      	lsls	r2, r2, #1
 800ce9e:	e7a2      	b.n	800cde6 <_dtoa_r+0x24e>
 800cea0:	636f4361 	.word	0x636f4361
 800cea4:	3fd287a7 	.word	0x3fd287a7
 800cea8:	8b60c8b3 	.word	0x8b60c8b3
 800ceac:	3fc68a28 	.word	0x3fc68a28
 800ceb0:	509f79fb 	.word	0x509f79fb
 800ceb4:	3fd34413 	.word	0x3fd34413
 800ceb8:	7ff00000 	.word	0x7ff00000
 800cebc:	0800ee15 	.word	0x0800ee15
 800cec0:	3ff80000 	.word	0x3ff80000
 800cec4:	0800eed0 	.word	0x0800eed0
 800cec8:	0800eea8 	.word	0x0800eea8
 800cecc:	0800ee41 	.word	0x0800ee41
 800ced0:	07f1      	lsls	r1, r6, #31
 800ced2:	d508      	bpl.n	800cee6 <_dtoa_r+0x34e>
 800ced4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ced8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cedc:	f7f3 fbb4 	bl	8000648 <__aeabi_dmul>
 800cee0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cee4:	3501      	adds	r5, #1
 800cee6:	1076      	asrs	r6, r6, #1
 800cee8:	3708      	adds	r7, #8
 800ceea:	2e00      	cmp	r6, #0
 800ceec:	d1f0      	bne.n	800ced0 <_dtoa_r+0x338>
 800ceee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cef2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cef6:	f7f3 fcd1 	bl	800089c <__aeabi_ddiv>
 800cefa:	e9cd 0100 	strd	r0, r1, [sp]
 800cefe:	e01a      	b.n	800cf36 <_dtoa_r+0x39e>
 800cf00:	2502      	movs	r5, #2
 800cf02:	e7a3      	b.n	800ce4c <_dtoa_r+0x2b4>
 800cf04:	f000 80a0 	beq.w	800d048 <_dtoa_r+0x4b0>
 800cf08:	f1ca 0600 	rsb	r6, sl, #0
 800cf0c:	4b9f      	ldr	r3, [pc, #636]	; (800d18c <_dtoa_r+0x5f4>)
 800cf0e:	4fa0      	ldr	r7, [pc, #640]	; (800d190 <_dtoa_r+0x5f8>)
 800cf10:	f006 020f 	and.w	r2, r6, #15
 800cf14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf1c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cf20:	f7f3 fb92 	bl	8000648 <__aeabi_dmul>
 800cf24:	e9cd 0100 	strd	r0, r1, [sp]
 800cf28:	1136      	asrs	r6, r6, #4
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	2502      	movs	r5, #2
 800cf2e:	2e00      	cmp	r6, #0
 800cf30:	d17f      	bne.n	800d032 <_dtoa_r+0x49a>
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d1e1      	bne.n	800cefa <_dtoa_r+0x362>
 800cf36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	f000 8087 	beq.w	800d04c <_dtoa_r+0x4b4>
 800cf3e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cf42:	2200      	movs	r2, #0
 800cf44:	4b93      	ldr	r3, [pc, #588]	; (800d194 <_dtoa_r+0x5fc>)
 800cf46:	4630      	mov	r0, r6
 800cf48:	4639      	mov	r1, r7
 800cf4a:	f7f3 fdef 	bl	8000b2c <__aeabi_dcmplt>
 800cf4e:	2800      	cmp	r0, #0
 800cf50:	d07c      	beq.n	800d04c <_dtoa_r+0x4b4>
 800cf52:	f1b9 0f00 	cmp.w	r9, #0
 800cf56:	d079      	beq.n	800d04c <_dtoa_r+0x4b4>
 800cf58:	9b02      	ldr	r3, [sp, #8]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	dd35      	ble.n	800cfca <_dtoa_r+0x432>
 800cf5e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800cf62:	9308      	str	r3, [sp, #32]
 800cf64:	4639      	mov	r1, r7
 800cf66:	2200      	movs	r2, #0
 800cf68:	4b8b      	ldr	r3, [pc, #556]	; (800d198 <_dtoa_r+0x600>)
 800cf6a:	4630      	mov	r0, r6
 800cf6c:	f7f3 fb6c 	bl	8000648 <__aeabi_dmul>
 800cf70:	e9cd 0100 	strd	r0, r1, [sp]
 800cf74:	9f02      	ldr	r7, [sp, #8]
 800cf76:	3501      	adds	r5, #1
 800cf78:	4628      	mov	r0, r5
 800cf7a:	f7f3 fafb 	bl	8000574 <__aeabi_i2d>
 800cf7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf82:	f7f3 fb61 	bl	8000648 <__aeabi_dmul>
 800cf86:	2200      	movs	r2, #0
 800cf88:	4b84      	ldr	r3, [pc, #528]	; (800d19c <_dtoa_r+0x604>)
 800cf8a:	f7f3 f9a7 	bl	80002dc <__adddf3>
 800cf8e:	4605      	mov	r5, r0
 800cf90:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800cf94:	2f00      	cmp	r7, #0
 800cf96:	d15d      	bne.n	800d054 <_dtoa_r+0x4bc>
 800cf98:	2200      	movs	r2, #0
 800cf9a:	4b81      	ldr	r3, [pc, #516]	; (800d1a0 <_dtoa_r+0x608>)
 800cf9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cfa0:	f7f3 f99a 	bl	80002d8 <__aeabi_dsub>
 800cfa4:	462a      	mov	r2, r5
 800cfa6:	4633      	mov	r3, r6
 800cfa8:	e9cd 0100 	strd	r0, r1, [sp]
 800cfac:	f7f3 fddc 	bl	8000b68 <__aeabi_dcmpgt>
 800cfb0:	2800      	cmp	r0, #0
 800cfb2:	f040 8288 	bne.w	800d4c6 <_dtoa_r+0x92e>
 800cfb6:	462a      	mov	r2, r5
 800cfb8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800cfbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cfc0:	f7f3 fdb4 	bl	8000b2c <__aeabi_dcmplt>
 800cfc4:	2800      	cmp	r0, #0
 800cfc6:	f040 827c 	bne.w	800d4c2 <_dtoa_r+0x92a>
 800cfca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cfce:	e9cd 2300 	strd	r2, r3, [sp]
 800cfd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	f2c0 8150 	blt.w	800d27a <_dtoa_r+0x6e2>
 800cfda:	f1ba 0f0e 	cmp.w	sl, #14
 800cfde:	f300 814c 	bgt.w	800d27a <_dtoa_r+0x6e2>
 800cfe2:	4b6a      	ldr	r3, [pc, #424]	; (800d18c <_dtoa_r+0x5f4>)
 800cfe4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cfe8:	ed93 7b00 	vldr	d7, [r3]
 800cfec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cff4:	f280 80d8 	bge.w	800d1a8 <_dtoa_r+0x610>
 800cff8:	f1b9 0f00 	cmp.w	r9, #0
 800cffc:	f300 80d4 	bgt.w	800d1a8 <_dtoa_r+0x610>
 800d000:	f040 825e 	bne.w	800d4c0 <_dtoa_r+0x928>
 800d004:	2200      	movs	r2, #0
 800d006:	4b66      	ldr	r3, [pc, #408]	; (800d1a0 <_dtoa_r+0x608>)
 800d008:	ec51 0b17 	vmov	r0, r1, d7
 800d00c:	f7f3 fb1c 	bl	8000648 <__aeabi_dmul>
 800d010:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d014:	f7f3 fd9e 	bl	8000b54 <__aeabi_dcmpge>
 800d018:	464f      	mov	r7, r9
 800d01a:	464e      	mov	r6, r9
 800d01c:	2800      	cmp	r0, #0
 800d01e:	f040 8234 	bne.w	800d48a <_dtoa_r+0x8f2>
 800d022:	2331      	movs	r3, #49	; 0x31
 800d024:	f10b 0501 	add.w	r5, fp, #1
 800d028:	f88b 3000 	strb.w	r3, [fp]
 800d02c:	f10a 0a01 	add.w	sl, sl, #1
 800d030:	e22f      	b.n	800d492 <_dtoa_r+0x8fa>
 800d032:	07f2      	lsls	r2, r6, #31
 800d034:	d505      	bpl.n	800d042 <_dtoa_r+0x4aa>
 800d036:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d03a:	f7f3 fb05 	bl	8000648 <__aeabi_dmul>
 800d03e:	3501      	adds	r5, #1
 800d040:	2301      	movs	r3, #1
 800d042:	1076      	asrs	r6, r6, #1
 800d044:	3708      	adds	r7, #8
 800d046:	e772      	b.n	800cf2e <_dtoa_r+0x396>
 800d048:	2502      	movs	r5, #2
 800d04a:	e774      	b.n	800cf36 <_dtoa_r+0x39e>
 800d04c:	f8cd a020 	str.w	sl, [sp, #32]
 800d050:	464f      	mov	r7, r9
 800d052:	e791      	b.n	800cf78 <_dtoa_r+0x3e0>
 800d054:	4b4d      	ldr	r3, [pc, #308]	; (800d18c <_dtoa_r+0x5f4>)
 800d056:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d05a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800d05e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d060:	2b00      	cmp	r3, #0
 800d062:	d047      	beq.n	800d0f4 <_dtoa_r+0x55c>
 800d064:	4602      	mov	r2, r0
 800d066:	460b      	mov	r3, r1
 800d068:	2000      	movs	r0, #0
 800d06a:	494e      	ldr	r1, [pc, #312]	; (800d1a4 <_dtoa_r+0x60c>)
 800d06c:	f7f3 fc16 	bl	800089c <__aeabi_ddiv>
 800d070:	462a      	mov	r2, r5
 800d072:	4633      	mov	r3, r6
 800d074:	f7f3 f930 	bl	80002d8 <__aeabi_dsub>
 800d078:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d07c:	465d      	mov	r5, fp
 800d07e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d082:	f7f3 fd91 	bl	8000ba8 <__aeabi_d2iz>
 800d086:	4606      	mov	r6, r0
 800d088:	f7f3 fa74 	bl	8000574 <__aeabi_i2d>
 800d08c:	4602      	mov	r2, r0
 800d08e:	460b      	mov	r3, r1
 800d090:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d094:	f7f3 f920 	bl	80002d8 <__aeabi_dsub>
 800d098:	3630      	adds	r6, #48	; 0x30
 800d09a:	f805 6b01 	strb.w	r6, [r5], #1
 800d09e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d0a2:	e9cd 0100 	strd	r0, r1, [sp]
 800d0a6:	f7f3 fd41 	bl	8000b2c <__aeabi_dcmplt>
 800d0aa:	2800      	cmp	r0, #0
 800d0ac:	d163      	bne.n	800d176 <_dtoa_r+0x5de>
 800d0ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d0b2:	2000      	movs	r0, #0
 800d0b4:	4937      	ldr	r1, [pc, #220]	; (800d194 <_dtoa_r+0x5fc>)
 800d0b6:	f7f3 f90f 	bl	80002d8 <__aeabi_dsub>
 800d0ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d0be:	f7f3 fd35 	bl	8000b2c <__aeabi_dcmplt>
 800d0c2:	2800      	cmp	r0, #0
 800d0c4:	f040 80b7 	bne.w	800d236 <_dtoa_r+0x69e>
 800d0c8:	eba5 030b 	sub.w	r3, r5, fp
 800d0cc:	429f      	cmp	r7, r3
 800d0ce:	f77f af7c 	ble.w	800cfca <_dtoa_r+0x432>
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	4b30      	ldr	r3, [pc, #192]	; (800d198 <_dtoa_r+0x600>)
 800d0d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d0da:	f7f3 fab5 	bl	8000648 <__aeabi_dmul>
 800d0de:	2200      	movs	r2, #0
 800d0e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d0e4:	4b2c      	ldr	r3, [pc, #176]	; (800d198 <_dtoa_r+0x600>)
 800d0e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d0ea:	f7f3 faad 	bl	8000648 <__aeabi_dmul>
 800d0ee:	e9cd 0100 	strd	r0, r1, [sp]
 800d0f2:	e7c4      	b.n	800d07e <_dtoa_r+0x4e6>
 800d0f4:	462a      	mov	r2, r5
 800d0f6:	4633      	mov	r3, r6
 800d0f8:	f7f3 faa6 	bl	8000648 <__aeabi_dmul>
 800d0fc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d100:	eb0b 0507 	add.w	r5, fp, r7
 800d104:	465e      	mov	r6, fp
 800d106:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d10a:	f7f3 fd4d 	bl	8000ba8 <__aeabi_d2iz>
 800d10e:	4607      	mov	r7, r0
 800d110:	f7f3 fa30 	bl	8000574 <__aeabi_i2d>
 800d114:	3730      	adds	r7, #48	; 0x30
 800d116:	4602      	mov	r2, r0
 800d118:	460b      	mov	r3, r1
 800d11a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d11e:	f7f3 f8db 	bl	80002d8 <__aeabi_dsub>
 800d122:	f806 7b01 	strb.w	r7, [r6], #1
 800d126:	42ae      	cmp	r6, r5
 800d128:	e9cd 0100 	strd	r0, r1, [sp]
 800d12c:	f04f 0200 	mov.w	r2, #0
 800d130:	d126      	bne.n	800d180 <_dtoa_r+0x5e8>
 800d132:	4b1c      	ldr	r3, [pc, #112]	; (800d1a4 <_dtoa_r+0x60c>)
 800d134:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d138:	f7f3 f8d0 	bl	80002dc <__adddf3>
 800d13c:	4602      	mov	r2, r0
 800d13e:	460b      	mov	r3, r1
 800d140:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d144:	f7f3 fd10 	bl	8000b68 <__aeabi_dcmpgt>
 800d148:	2800      	cmp	r0, #0
 800d14a:	d174      	bne.n	800d236 <_dtoa_r+0x69e>
 800d14c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d150:	2000      	movs	r0, #0
 800d152:	4914      	ldr	r1, [pc, #80]	; (800d1a4 <_dtoa_r+0x60c>)
 800d154:	f7f3 f8c0 	bl	80002d8 <__aeabi_dsub>
 800d158:	4602      	mov	r2, r0
 800d15a:	460b      	mov	r3, r1
 800d15c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d160:	f7f3 fce4 	bl	8000b2c <__aeabi_dcmplt>
 800d164:	2800      	cmp	r0, #0
 800d166:	f43f af30 	beq.w	800cfca <_dtoa_r+0x432>
 800d16a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d16e:	2b30      	cmp	r3, #48	; 0x30
 800d170:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800d174:	d002      	beq.n	800d17c <_dtoa_r+0x5e4>
 800d176:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d17a:	e04a      	b.n	800d212 <_dtoa_r+0x67a>
 800d17c:	4615      	mov	r5, r2
 800d17e:	e7f4      	b.n	800d16a <_dtoa_r+0x5d2>
 800d180:	4b05      	ldr	r3, [pc, #20]	; (800d198 <_dtoa_r+0x600>)
 800d182:	f7f3 fa61 	bl	8000648 <__aeabi_dmul>
 800d186:	e9cd 0100 	strd	r0, r1, [sp]
 800d18a:	e7bc      	b.n	800d106 <_dtoa_r+0x56e>
 800d18c:	0800eed0 	.word	0x0800eed0
 800d190:	0800eea8 	.word	0x0800eea8
 800d194:	3ff00000 	.word	0x3ff00000
 800d198:	40240000 	.word	0x40240000
 800d19c:	401c0000 	.word	0x401c0000
 800d1a0:	40140000 	.word	0x40140000
 800d1a4:	3fe00000 	.word	0x3fe00000
 800d1a8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d1ac:	465d      	mov	r5, fp
 800d1ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d1b2:	4630      	mov	r0, r6
 800d1b4:	4639      	mov	r1, r7
 800d1b6:	f7f3 fb71 	bl	800089c <__aeabi_ddiv>
 800d1ba:	f7f3 fcf5 	bl	8000ba8 <__aeabi_d2iz>
 800d1be:	4680      	mov	r8, r0
 800d1c0:	f7f3 f9d8 	bl	8000574 <__aeabi_i2d>
 800d1c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d1c8:	f7f3 fa3e 	bl	8000648 <__aeabi_dmul>
 800d1cc:	4602      	mov	r2, r0
 800d1ce:	460b      	mov	r3, r1
 800d1d0:	4630      	mov	r0, r6
 800d1d2:	4639      	mov	r1, r7
 800d1d4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800d1d8:	f7f3 f87e 	bl	80002d8 <__aeabi_dsub>
 800d1dc:	f805 6b01 	strb.w	r6, [r5], #1
 800d1e0:	eba5 060b 	sub.w	r6, r5, fp
 800d1e4:	45b1      	cmp	r9, r6
 800d1e6:	4602      	mov	r2, r0
 800d1e8:	460b      	mov	r3, r1
 800d1ea:	d139      	bne.n	800d260 <_dtoa_r+0x6c8>
 800d1ec:	f7f3 f876 	bl	80002dc <__adddf3>
 800d1f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d1f4:	4606      	mov	r6, r0
 800d1f6:	460f      	mov	r7, r1
 800d1f8:	f7f3 fcb6 	bl	8000b68 <__aeabi_dcmpgt>
 800d1fc:	b9c8      	cbnz	r0, 800d232 <_dtoa_r+0x69a>
 800d1fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d202:	4630      	mov	r0, r6
 800d204:	4639      	mov	r1, r7
 800d206:	f7f3 fc87 	bl	8000b18 <__aeabi_dcmpeq>
 800d20a:	b110      	cbz	r0, 800d212 <_dtoa_r+0x67a>
 800d20c:	f018 0f01 	tst.w	r8, #1
 800d210:	d10f      	bne.n	800d232 <_dtoa_r+0x69a>
 800d212:	9904      	ldr	r1, [sp, #16]
 800d214:	4620      	mov	r0, r4
 800d216:	f000 fcaa 	bl	800db6e <_Bfree>
 800d21a:	2300      	movs	r3, #0
 800d21c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d21e:	702b      	strb	r3, [r5, #0]
 800d220:	f10a 0301 	add.w	r3, sl, #1
 800d224:	6013      	str	r3, [r2, #0]
 800d226:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d228:	2b00      	cmp	r3, #0
 800d22a:	f000 8241 	beq.w	800d6b0 <_dtoa_r+0xb18>
 800d22e:	601d      	str	r5, [r3, #0]
 800d230:	e23e      	b.n	800d6b0 <_dtoa_r+0xb18>
 800d232:	f8cd a020 	str.w	sl, [sp, #32]
 800d236:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d23a:	2a39      	cmp	r2, #57	; 0x39
 800d23c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800d240:	d108      	bne.n	800d254 <_dtoa_r+0x6bc>
 800d242:	459b      	cmp	fp, r3
 800d244:	d10a      	bne.n	800d25c <_dtoa_r+0x6c4>
 800d246:	9b08      	ldr	r3, [sp, #32]
 800d248:	3301      	adds	r3, #1
 800d24a:	9308      	str	r3, [sp, #32]
 800d24c:	2330      	movs	r3, #48	; 0x30
 800d24e:	f88b 3000 	strb.w	r3, [fp]
 800d252:	465b      	mov	r3, fp
 800d254:	781a      	ldrb	r2, [r3, #0]
 800d256:	3201      	adds	r2, #1
 800d258:	701a      	strb	r2, [r3, #0]
 800d25a:	e78c      	b.n	800d176 <_dtoa_r+0x5de>
 800d25c:	461d      	mov	r5, r3
 800d25e:	e7ea      	b.n	800d236 <_dtoa_r+0x69e>
 800d260:	2200      	movs	r2, #0
 800d262:	4b9b      	ldr	r3, [pc, #620]	; (800d4d0 <_dtoa_r+0x938>)
 800d264:	f7f3 f9f0 	bl	8000648 <__aeabi_dmul>
 800d268:	2200      	movs	r2, #0
 800d26a:	2300      	movs	r3, #0
 800d26c:	4606      	mov	r6, r0
 800d26e:	460f      	mov	r7, r1
 800d270:	f7f3 fc52 	bl	8000b18 <__aeabi_dcmpeq>
 800d274:	2800      	cmp	r0, #0
 800d276:	d09a      	beq.n	800d1ae <_dtoa_r+0x616>
 800d278:	e7cb      	b.n	800d212 <_dtoa_r+0x67a>
 800d27a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d27c:	2a00      	cmp	r2, #0
 800d27e:	f000 808b 	beq.w	800d398 <_dtoa_r+0x800>
 800d282:	9a06      	ldr	r2, [sp, #24]
 800d284:	2a01      	cmp	r2, #1
 800d286:	dc6e      	bgt.n	800d366 <_dtoa_r+0x7ce>
 800d288:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d28a:	2a00      	cmp	r2, #0
 800d28c:	d067      	beq.n	800d35e <_dtoa_r+0x7c6>
 800d28e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d292:	9f07      	ldr	r7, [sp, #28]
 800d294:	9d05      	ldr	r5, [sp, #20]
 800d296:	9a05      	ldr	r2, [sp, #20]
 800d298:	2101      	movs	r1, #1
 800d29a:	441a      	add	r2, r3
 800d29c:	4620      	mov	r0, r4
 800d29e:	9205      	str	r2, [sp, #20]
 800d2a0:	4498      	add	r8, r3
 800d2a2:	f000 fd04 	bl	800dcae <__i2b>
 800d2a6:	4606      	mov	r6, r0
 800d2a8:	2d00      	cmp	r5, #0
 800d2aa:	dd0c      	ble.n	800d2c6 <_dtoa_r+0x72e>
 800d2ac:	f1b8 0f00 	cmp.w	r8, #0
 800d2b0:	dd09      	ble.n	800d2c6 <_dtoa_r+0x72e>
 800d2b2:	4545      	cmp	r5, r8
 800d2b4:	9a05      	ldr	r2, [sp, #20]
 800d2b6:	462b      	mov	r3, r5
 800d2b8:	bfa8      	it	ge
 800d2ba:	4643      	movge	r3, r8
 800d2bc:	1ad2      	subs	r2, r2, r3
 800d2be:	9205      	str	r2, [sp, #20]
 800d2c0:	1aed      	subs	r5, r5, r3
 800d2c2:	eba8 0803 	sub.w	r8, r8, r3
 800d2c6:	9b07      	ldr	r3, [sp, #28]
 800d2c8:	b1eb      	cbz	r3, 800d306 <_dtoa_r+0x76e>
 800d2ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d067      	beq.n	800d3a0 <_dtoa_r+0x808>
 800d2d0:	b18f      	cbz	r7, 800d2f6 <_dtoa_r+0x75e>
 800d2d2:	4631      	mov	r1, r6
 800d2d4:	463a      	mov	r2, r7
 800d2d6:	4620      	mov	r0, r4
 800d2d8:	f000 fd88 	bl	800ddec <__pow5mult>
 800d2dc:	9a04      	ldr	r2, [sp, #16]
 800d2de:	4601      	mov	r1, r0
 800d2e0:	4606      	mov	r6, r0
 800d2e2:	4620      	mov	r0, r4
 800d2e4:	f000 fcec 	bl	800dcc0 <__multiply>
 800d2e8:	9904      	ldr	r1, [sp, #16]
 800d2ea:	9008      	str	r0, [sp, #32]
 800d2ec:	4620      	mov	r0, r4
 800d2ee:	f000 fc3e 	bl	800db6e <_Bfree>
 800d2f2:	9b08      	ldr	r3, [sp, #32]
 800d2f4:	9304      	str	r3, [sp, #16]
 800d2f6:	9b07      	ldr	r3, [sp, #28]
 800d2f8:	1bda      	subs	r2, r3, r7
 800d2fa:	d004      	beq.n	800d306 <_dtoa_r+0x76e>
 800d2fc:	9904      	ldr	r1, [sp, #16]
 800d2fe:	4620      	mov	r0, r4
 800d300:	f000 fd74 	bl	800ddec <__pow5mult>
 800d304:	9004      	str	r0, [sp, #16]
 800d306:	2101      	movs	r1, #1
 800d308:	4620      	mov	r0, r4
 800d30a:	f000 fcd0 	bl	800dcae <__i2b>
 800d30e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d310:	4607      	mov	r7, r0
 800d312:	2b00      	cmp	r3, #0
 800d314:	f000 81d0 	beq.w	800d6b8 <_dtoa_r+0xb20>
 800d318:	461a      	mov	r2, r3
 800d31a:	4601      	mov	r1, r0
 800d31c:	4620      	mov	r0, r4
 800d31e:	f000 fd65 	bl	800ddec <__pow5mult>
 800d322:	9b06      	ldr	r3, [sp, #24]
 800d324:	2b01      	cmp	r3, #1
 800d326:	4607      	mov	r7, r0
 800d328:	dc40      	bgt.n	800d3ac <_dtoa_r+0x814>
 800d32a:	9b00      	ldr	r3, [sp, #0]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d139      	bne.n	800d3a4 <_dtoa_r+0x80c>
 800d330:	9b01      	ldr	r3, [sp, #4]
 800d332:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d336:	2b00      	cmp	r3, #0
 800d338:	d136      	bne.n	800d3a8 <_dtoa_r+0x810>
 800d33a:	9b01      	ldr	r3, [sp, #4]
 800d33c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d340:	0d1b      	lsrs	r3, r3, #20
 800d342:	051b      	lsls	r3, r3, #20
 800d344:	b12b      	cbz	r3, 800d352 <_dtoa_r+0x7ba>
 800d346:	9b05      	ldr	r3, [sp, #20]
 800d348:	3301      	adds	r3, #1
 800d34a:	9305      	str	r3, [sp, #20]
 800d34c:	f108 0801 	add.w	r8, r8, #1
 800d350:	2301      	movs	r3, #1
 800d352:	9307      	str	r3, [sp, #28]
 800d354:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d356:	2b00      	cmp	r3, #0
 800d358:	d12a      	bne.n	800d3b0 <_dtoa_r+0x818>
 800d35a:	2001      	movs	r0, #1
 800d35c:	e030      	b.n	800d3c0 <_dtoa_r+0x828>
 800d35e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d360:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d364:	e795      	b.n	800d292 <_dtoa_r+0x6fa>
 800d366:	9b07      	ldr	r3, [sp, #28]
 800d368:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800d36c:	42bb      	cmp	r3, r7
 800d36e:	bfbf      	itttt	lt
 800d370:	9b07      	ldrlt	r3, [sp, #28]
 800d372:	9707      	strlt	r7, [sp, #28]
 800d374:	1afa      	sublt	r2, r7, r3
 800d376:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d378:	bfbb      	ittet	lt
 800d37a:	189b      	addlt	r3, r3, r2
 800d37c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d37e:	1bdf      	subge	r7, r3, r7
 800d380:	2700      	movlt	r7, #0
 800d382:	f1b9 0f00 	cmp.w	r9, #0
 800d386:	bfb5      	itete	lt
 800d388:	9b05      	ldrlt	r3, [sp, #20]
 800d38a:	9d05      	ldrge	r5, [sp, #20]
 800d38c:	eba3 0509 	sublt.w	r5, r3, r9
 800d390:	464b      	movge	r3, r9
 800d392:	bfb8      	it	lt
 800d394:	2300      	movlt	r3, #0
 800d396:	e77e      	b.n	800d296 <_dtoa_r+0x6fe>
 800d398:	9f07      	ldr	r7, [sp, #28]
 800d39a:	9d05      	ldr	r5, [sp, #20]
 800d39c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800d39e:	e783      	b.n	800d2a8 <_dtoa_r+0x710>
 800d3a0:	9a07      	ldr	r2, [sp, #28]
 800d3a2:	e7ab      	b.n	800d2fc <_dtoa_r+0x764>
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	e7d4      	b.n	800d352 <_dtoa_r+0x7ba>
 800d3a8:	9b00      	ldr	r3, [sp, #0]
 800d3aa:	e7d2      	b.n	800d352 <_dtoa_r+0x7ba>
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	9307      	str	r3, [sp, #28]
 800d3b0:	693b      	ldr	r3, [r7, #16]
 800d3b2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800d3b6:	6918      	ldr	r0, [r3, #16]
 800d3b8:	f000 fc2b 	bl	800dc12 <__hi0bits>
 800d3bc:	f1c0 0020 	rsb	r0, r0, #32
 800d3c0:	4440      	add	r0, r8
 800d3c2:	f010 001f 	ands.w	r0, r0, #31
 800d3c6:	d047      	beq.n	800d458 <_dtoa_r+0x8c0>
 800d3c8:	f1c0 0320 	rsb	r3, r0, #32
 800d3cc:	2b04      	cmp	r3, #4
 800d3ce:	dd3b      	ble.n	800d448 <_dtoa_r+0x8b0>
 800d3d0:	9b05      	ldr	r3, [sp, #20]
 800d3d2:	f1c0 001c 	rsb	r0, r0, #28
 800d3d6:	4403      	add	r3, r0
 800d3d8:	9305      	str	r3, [sp, #20]
 800d3da:	4405      	add	r5, r0
 800d3dc:	4480      	add	r8, r0
 800d3de:	9b05      	ldr	r3, [sp, #20]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	dd05      	ble.n	800d3f0 <_dtoa_r+0x858>
 800d3e4:	461a      	mov	r2, r3
 800d3e6:	9904      	ldr	r1, [sp, #16]
 800d3e8:	4620      	mov	r0, r4
 800d3ea:	f000 fd4d 	bl	800de88 <__lshift>
 800d3ee:	9004      	str	r0, [sp, #16]
 800d3f0:	f1b8 0f00 	cmp.w	r8, #0
 800d3f4:	dd05      	ble.n	800d402 <_dtoa_r+0x86a>
 800d3f6:	4639      	mov	r1, r7
 800d3f8:	4642      	mov	r2, r8
 800d3fa:	4620      	mov	r0, r4
 800d3fc:	f000 fd44 	bl	800de88 <__lshift>
 800d400:	4607      	mov	r7, r0
 800d402:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d404:	b353      	cbz	r3, 800d45c <_dtoa_r+0x8c4>
 800d406:	4639      	mov	r1, r7
 800d408:	9804      	ldr	r0, [sp, #16]
 800d40a:	f000 fd91 	bl	800df30 <__mcmp>
 800d40e:	2800      	cmp	r0, #0
 800d410:	da24      	bge.n	800d45c <_dtoa_r+0x8c4>
 800d412:	2300      	movs	r3, #0
 800d414:	220a      	movs	r2, #10
 800d416:	9904      	ldr	r1, [sp, #16]
 800d418:	4620      	mov	r0, r4
 800d41a:	f000 fbbf 	bl	800db9c <__multadd>
 800d41e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d420:	9004      	str	r0, [sp, #16]
 800d422:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d426:	2b00      	cmp	r3, #0
 800d428:	f000 814d 	beq.w	800d6c6 <_dtoa_r+0xb2e>
 800d42c:	2300      	movs	r3, #0
 800d42e:	4631      	mov	r1, r6
 800d430:	220a      	movs	r2, #10
 800d432:	4620      	mov	r0, r4
 800d434:	f000 fbb2 	bl	800db9c <__multadd>
 800d438:	9b02      	ldr	r3, [sp, #8]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	4606      	mov	r6, r0
 800d43e:	dc4f      	bgt.n	800d4e0 <_dtoa_r+0x948>
 800d440:	9b06      	ldr	r3, [sp, #24]
 800d442:	2b02      	cmp	r3, #2
 800d444:	dd4c      	ble.n	800d4e0 <_dtoa_r+0x948>
 800d446:	e011      	b.n	800d46c <_dtoa_r+0x8d4>
 800d448:	d0c9      	beq.n	800d3de <_dtoa_r+0x846>
 800d44a:	9a05      	ldr	r2, [sp, #20]
 800d44c:	331c      	adds	r3, #28
 800d44e:	441a      	add	r2, r3
 800d450:	9205      	str	r2, [sp, #20]
 800d452:	441d      	add	r5, r3
 800d454:	4498      	add	r8, r3
 800d456:	e7c2      	b.n	800d3de <_dtoa_r+0x846>
 800d458:	4603      	mov	r3, r0
 800d45a:	e7f6      	b.n	800d44a <_dtoa_r+0x8b2>
 800d45c:	f1b9 0f00 	cmp.w	r9, #0
 800d460:	dc38      	bgt.n	800d4d4 <_dtoa_r+0x93c>
 800d462:	9b06      	ldr	r3, [sp, #24]
 800d464:	2b02      	cmp	r3, #2
 800d466:	dd35      	ble.n	800d4d4 <_dtoa_r+0x93c>
 800d468:	f8cd 9008 	str.w	r9, [sp, #8]
 800d46c:	9b02      	ldr	r3, [sp, #8]
 800d46e:	b963      	cbnz	r3, 800d48a <_dtoa_r+0x8f2>
 800d470:	4639      	mov	r1, r7
 800d472:	2205      	movs	r2, #5
 800d474:	4620      	mov	r0, r4
 800d476:	f000 fb91 	bl	800db9c <__multadd>
 800d47a:	4601      	mov	r1, r0
 800d47c:	4607      	mov	r7, r0
 800d47e:	9804      	ldr	r0, [sp, #16]
 800d480:	f000 fd56 	bl	800df30 <__mcmp>
 800d484:	2800      	cmp	r0, #0
 800d486:	f73f adcc 	bgt.w	800d022 <_dtoa_r+0x48a>
 800d48a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d48c:	465d      	mov	r5, fp
 800d48e:	ea6f 0a03 	mvn.w	sl, r3
 800d492:	f04f 0900 	mov.w	r9, #0
 800d496:	4639      	mov	r1, r7
 800d498:	4620      	mov	r0, r4
 800d49a:	f000 fb68 	bl	800db6e <_Bfree>
 800d49e:	2e00      	cmp	r6, #0
 800d4a0:	f43f aeb7 	beq.w	800d212 <_dtoa_r+0x67a>
 800d4a4:	f1b9 0f00 	cmp.w	r9, #0
 800d4a8:	d005      	beq.n	800d4b6 <_dtoa_r+0x91e>
 800d4aa:	45b1      	cmp	r9, r6
 800d4ac:	d003      	beq.n	800d4b6 <_dtoa_r+0x91e>
 800d4ae:	4649      	mov	r1, r9
 800d4b0:	4620      	mov	r0, r4
 800d4b2:	f000 fb5c 	bl	800db6e <_Bfree>
 800d4b6:	4631      	mov	r1, r6
 800d4b8:	4620      	mov	r0, r4
 800d4ba:	f000 fb58 	bl	800db6e <_Bfree>
 800d4be:	e6a8      	b.n	800d212 <_dtoa_r+0x67a>
 800d4c0:	2700      	movs	r7, #0
 800d4c2:	463e      	mov	r6, r7
 800d4c4:	e7e1      	b.n	800d48a <_dtoa_r+0x8f2>
 800d4c6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d4ca:	463e      	mov	r6, r7
 800d4cc:	e5a9      	b.n	800d022 <_dtoa_r+0x48a>
 800d4ce:	bf00      	nop
 800d4d0:	40240000 	.word	0x40240000
 800d4d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4d6:	f8cd 9008 	str.w	r9, [sp, #8]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	f000 80fa 	beq.w	800d6d4 <_dtoa_r+0xb3c>
 800d4e0:	2d00      	cmp	r5, #0
 800d4e2:	dd05      	ble.n	800d4f0 <_dtoa_r+0x958>
 800d4e4:	4631      	mov	r1, r6
 800d4e6:	462a      	mov	r2, r5
 800d4e8:	4620      	mov	r0, r4
 800d4ea:	f000 fccd 	bl	800de88 <__lshift>
 800d4ee:	4606      	mov	r6, r0
 800d4f0:	9b07      	ldr	r3, [sp, #28]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d04c      	beq.n	800d590 <_dtoa_r+0x9f8>
 800d4f6:	6871      	ldr	r1, [r6, #4]
 800d4f8:	4620      	mov	r0, r4
 800d4fa:	f000 fb04 	bl	800db06 <_Balloc>
 800d4fe:	6932      	ldr	r2, [r6, #16]
 800d500:	3202      	adds	r2, #2
 800d502:	4605      	mov	r5, r0
 800d504:	0092      	lsls	r2, r2, #2
 800d506:	f106 010c 	add.w	r1, r6, #12
 800d50a:	300c      	adds	r0, #12
 800d50c:	f000 faf0 	bl	800daf0 <memcpy>
 800d510:	2201      	movs	r2, #1
 800d512:	4629      	mov	r1, r5
 800d514:	4620      	mov	r0, r4
 800d516:	f000 fcb7 	bl	800de88 <__lshift>
 800d51a:	9b00      	ldr	r3, [sp, #0]
 800d51c:	f8cd b014 	str.w	fp, [sp, #20]
 800d520:	f003 0301 	and.w	r3, r3, #1
 800d524:	46b1      	mov	r9, r6
 800d526:	9307      	str	r3, [sp, #28]
 800d528:	4606      	mov	r6, r0
 800d52a:	4639      	mov	r1, r7
 800d52c:	9804      	ldr	r0, [sp, #16]
 800d52e:	f7ff faa5 	bl	800ca7c <quorem>
 800d532:	4649      	mov	r1, r9
 800d534:	4605      	mov	r5, r0
 800d536:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d53a:	9804      	ldr	r0, [sp, #16]
 800d53c:	f000 fcf8 	bl	800df30 <__mcmp>
 800d540:	4632      	mov	r2, r6
 800d542:	9000      	str	r0, [sp, #0]
 800d544:	4639      	mov	r1, r7
 800d546:	4620      	mov	r0, r4
 800d548:	f000 fd0c 	bl	800df64 <__mdiff>
 800d54c:	68c3      	ldr	r3, [r0, #12]
 800d54e:	4602      	mov	r2, r0
 800d550:	bb03      	cbnz	r3, 800d594 <_dtoa_r+0x9fc>
 800d552:	4601      	mov	r1, r0
 800d554:	9008      	str	r0, [sp, #32]
 800d556:	9804      	ldr	r0, [sp, #16]
 800d558:	f000 fcea 	bl	800df30 <__mcmp>
 800d55c:	9a08      	ldr	r2, [sp, #32]
 800d55e:	4603      	mov	r3, r0
 800d560:	4611      	mov	r1, r2
 800d562:	4620      	mov	r0, r4
 800d564:	9308      	str	r3, [sp, #32]
 800d566:	f000 fb02 	bl	800db6e <_Bfree>
 800d56a:	9b08      	ldr	r3, [sp, #32]
 800d56c:	b9a3      	cbnz	r3, 800d598 <_dtoa_r+0xa00>
 800d56e:	9a06      	ldr	r2, [sp, #24]
 800d570:	b992      	cbnz	r2, 800d598 <_dtoa_r+0xa00>
 800d572:	9a07      	ldr	r2, [sp, #28]
 800d574:	b982      	cbnz	r2, 800d598 <_dtoa_r+0xa00>
 800d576:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d57a:	d029      	beq.n	800d5d0 <_dtoa_r+0xa38>
 800d57c:	9b00      	ldr	r3, [sp, #0]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	dd01      	ble.n	800d586 <_dtoa_r+0x9ee>
 800d582:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800d586:	9b05      	ldr	r3, [sp, #20]
 800d588:	1c5d      	adds	r5, r3, #1
 800d58a:	f883 8000 	strb.w	r8, [r3]
 800d58e:	e782      	b.n	800d496 <_dtoa_r+0x8fe>
 800d590:	4630      	mov	r0, r6
 800d592:	e7c2      	b.n	800d51a <_dtoa_r+0x982>
 800d594:	2301      	movs	r3, #1
 800d596:	e7e3      	b.n	800d560 <_dtoa_r+0x9c8>
 800d598:	9a00      	ldr	r2, [sp, #0]
 800d59a:	2a00      	cmp	r2, #0
 800d59c:	db04      	blt.n	800d5a8 <_dtoa_r+0xa10>
 800d59e:	d125      	bne.n	800d5ec <_dtoa_r+0xa54>
 800d5a0:	9a06      	ldr	r2, [sp, #24]
 800d5a2:	bb1a      	cbnz	r2, 800d5ec <_dtoa_r+0xa54>
 800d5a4:	9a07      	ldr	r2, [sp, #28]
 800d5a6:	bb0a      	cbnz	r2, 800d5ec <_dtoa_r+0xa54>
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	ddec      	ble.n	800d586 <_dtoa_r+0x9ee>
 800d5ac:	2201      	movs	r2, #1
 800d5ae:	9904      	ldr	r1, [sp, #16]
 800d5b0:	4620      	mov	r0, r4
 800d5b2:	f000 fc69 	bl	800de88 <__lshift>
 800d5b6:	4639      	mov	r1, r7
 800d5b8:	9004      	str	r0, [sp, #16]
 800d5ba:	f000 fcb9 	bl	800df30 <__mcmp>
 800d5be:	2800      	cmp	r0, #0
 800d5c0:	dc03      	bgt.n	800d5ca <_dtoa_r+0xa32>
 800d5c2:	d1e0      	bne.n	800d586 <_dtoa_r+0x9ee>
 800d5c4:	f018 0f01 	tst.w	r8, #1
 800d5c8:	d0dd      	beq.n	800d586 <_dtoa_r+0x9ee>
 800d5ca:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d5ce:	d1d8      	bne.n	800d582 <_dtoa_r+0x9ea>
 800d5d0:	9b05      	ldr	r3, [sp, #20]
 800d5d2:	9a05      	ldr	r2, [sp, #20]
 800d5d4:	1c5d      	adds	r5, r3, #1
 800d5d6:	2339      	movs	r3, #57	; 0x39
 800d5d8:	7013      	strb	r3, [r2, #0]
 800d5da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d5de:	2b39      	cmp	r3, #57	; 0x39
 800d5e0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800d5e4:	d04f      	beq.n	800d686 <_dtoa_r+0xaee>
 800d5e6:	3301      	adds	r3, #1
 800d5e8:	7013      	strb	r3, [r2, #0]
 800d5ea:	e754      	b.n	800d496 <_dtoa_r+0x8fe>
 800d5ec:	9a05      	ldr	r2, [sp, #20]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	f102 0501 	add.w	r5, r2, #1
 800d5f4:	dd06      	ble.n	800d604 <_dtoa_r+0xa6c>
 800d5f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d5fa:	d0e9      	beq.n	800d5d0 <_dtoa_r+0xa38>
 800d5fc:	f108 0801 	add.w	r8, r8, #1
 800d600:	9b05      	ldr	r3, [sp, #20]
 800d602:	e7c2      	b.n	800d58a <_dtoa_r+0x9f2>
 800d604:	9a02      	ldr	r2, [sp, #8]
 800d606:	f805 8c01 	strb.w	r8, [r5, #-1]
 800d60a:	eba5 030b 	sub.w	r3, r5, fp
 800d60e:	4293      	cmp	r3, r2
 800d610:	d021      	beq.n	800d656 <_dtoa_r+0xabe>
 800d612:	2300      	movs	r3, #0
 800d614:	220a      	movs	r2, #10
 800d616:	9904      	ldr	r1, [sp, #16]
 800d618:	4620      	mov	r0, r4
 800d61a:	f000 fabf 	bl	800db9c <__multadd>
 800d61e:	45b1      	cmp	r9, r6
 800d620:	9004      	str	r0, [sp, #16]
 800d622:	f04f 0300 	mov.w	r3, #0
 800d626:	f04f 020a 	mov.w	r2, #10
 800d62a:	4649      	mov	r1, r9
 800d62c:	4620      	mov	r0, r4
 800d62e:	d105      	bne.n	800d63c <_dtoa_r+0xaa4>
 800d630:	f000 fab4 	bl	800db9c <__multadd>
 800d634:	4681      	mov	r9, r0
 800d636:	4606      	mov	r6, r0
 800d638:	9505      	str	r5, [sp, #20]
 800d63a:	e776      	b.n	800d52a <_dtoa_r+0x992>
 800d63c:	f000 faae 	bl	800db9c <__multadd>
 800d640:	4631      	mov	r1, r6
 800d642:	4681      	mov	r9, r0
 800d644:	2300      	movs	r3, #0
 800d646:	220a      	movs	r2, #10
 800d648:	4620      	mov	r0, r4
 800d64a:	f000 faa7 	bl	800db9c <__multadd>
 800d64e:	4606      	mov	r6, r0
 800d650:	e7f2      	b.n	800d638 <_dtoa_r+0xaa0>
 800d652:	f04f 0900 	mov.w	r9, #0
 800d656:	2201      	movs	r2, #1
 800d658:	9904      	ldr	r1, [sp, #16]
 800d65a:	4620      	mov	r0, r4
 800d65c:	f000 fc14 	bl	800de88 <__lshift>
 800d660:	4639      	mov	r1, r7
 800d662:	9004      	str	r0, [sp, #16]
 800d664:	f000 fc64 	bl	800df30 <__mcmp>
 800d668:	2800      	cmp	r0, #0
 800d66a:	dcb6      	bgt.n	800d5da <_dtoa_r+0xa42>
 800d66c:	d102      	bne.n	800d674 <_dtoa_r+0xadc>
 800d66e:	f018 0f01 	tst.w	r8, #1
 800d672:	d1b2      	bne.n	800d5da <_dtoa_r+0xa42>
 800d674:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d678:	2b30      	cmp	r3, #48	; 0x30
 800d67a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800d67e:	f47f af0a 	bne.w	800d496 <_dtoa_r+0x8fe>
 800d682:	4615      	mov	r5, r2
 800d684:	e7f6      	b.n	800d674 <_dtoa_r+0xadc>
 800d686:	4593      	cmp	fp, r2
 800d688:	d105      	bne.n	800d696 <_dtoa_r+0xafe>
 800d68a:	2331      	movs	r3, #49	; 0x31
 800d68c:	f10a 0a01 	add.w	sl, sl, #1
 800d690:	f88b 3000 	strb.w	r3, [fp]
 800d694:	e6ff      	b.n	800d496 <_dtoa_r+0x8fe>
 800d696:	4615      	mov	r5, r2
 800d698:	e79f      	b.n	800d5da <_dtoa_r+0xa42>
 800d69a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800d700 <_dtoa_r+0xb68>
 800d69e:	e007      	b.n	800d6b0 <_dtoa_r+0xb18>
 800d6a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d6a2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800d704 <_dtoa_r+0xb6c>
 800d6a6:	b11b      	cbz	r3, 800d6b0 <_dtoa_r+0xb18>
 800d6a8:	f10b 0308 	add.w	r3, fp, #8
 800d6ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d6ae:	6013      	str	r3, [r2, #0]
 800d6b0:	4658      	mov	r0, fp
 800d6b2:	b017      	add	sp, #92	; 0x5c
 800d6b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6b8:	9b06      	ldr	r3, [sp, #24]
 800d6ba:	2b01      	cmp	r3, #1
 800d6bc:	f77f ae35 	ble.w	800d32a <_dtoa_r+0x792>
 800d6c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d6c2:	9307      	str	r3, [sp, #28]
 800d6c4:	e649      	b.n	800d35a <_dtoa_r+0x7c2>
 800d6c6:	9b02      	ldr	r3, [sp, #8]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	dc03      	bgt.n	800d6d4 <_dtoa_r+0xb3c>
 800d6cc:	9b06      	ldr	r3, [sp, #24]
 800d6ce:	2b02      	cmp	r3, #2
 800d6d0:	f73f aecc 	bgt.w	800d46c <_dtoa_r+0x8d4>
 800d6d4:	465d      	mov	r5, fp
 800d6d6:	4639      	mov	r1, r7
 800d6d8:	9804      	ldr	r0, [sp, #16]
 800d6da:	f7ff f9cf 	bl	800ca7c <quorem>
 800d6de:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d6e2:	f805 8b01 	strb.w	r8, [r5], #1
 800d6e6:	9a02      	ldr	r2, [sp, #8]
 800d6e8:	eba5 030b 	sub.w	r3, r5, fp
 800d6ec:	429a      	cmp	r2, r3
 800d6ee:	ddb0      	ble.n	800d652 <_dtoa_r+0xaba>
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	220a      	movs	r2, #10
 800d6f4:	9904      	ldr	r1, [sp, #16]
 800d6f6:	4620      	mov	r0, r4
 800d6f8:	f000 fa50 	bl	800db9c <__multadd>
 800d6fc:	9004      	str	r0, [sp, #16]
 800d6fe:	e7ea      	b.n	800d6d6 <_dtoa_r+0xb3e>
 800d700:	0800ee14 	.word	0x0800ee14
 800d704:	0800ee38 	.word	0x0800ee38

0800d708 <__sflush_r>:
 800d708:	898a      	ldrh	r2, [r1, #12]
 800d70a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d70e:	4605      	mov	r5, r0
 800d710:	0710      	lsls	r0, r2, #28
 800d712:	460c      	mov	r4, r1
 800d714:	d458      	bmi.n	800d7c8 <__sflush_r+0xc0>
 800d716:	684b      	ldr	r3, [r1, #4]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	dc05      	bgt.n	800d728 <__sflush_r+0x20>
 800d71c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d71e:	2b00      	cmp	r3, #0
 800d720:	dc02      	bgt.n	800d728 <__sflush_r+0x20>
 800d722:	2000      	movs	r0, #0
 800d724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d728:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d72a:	2e00      	cmp	r6, #0
 800d72c:	d0f9      	beq.n	800d722 <__sflush_r+0x1a>
 800d72e:	2300      	movs	r3, #0
 800d730:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d734:	682f      	ldr	r7, [r5, #0]
 800d736:	6a21      	ldr	r1, [r4, #32]
 800d738:	602b      	str	r3, [r5, #0]
 800d73a:	d032      	beq.n	800d7a2 <__sflush_r+0x9a>
 800d73c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d73e:	89a3      	ldrh	r3, [r4, #12]
 800d740:	075a      	lsls	r2, r3, #29
 800d742:	d505      	bpl.n	800d750 <__sflush_r+0x48>
 800d744:	6863      	ldr	r3, [r4, #4]
 800d746:	1ac0      	subs	r0, r0, r3
 800d748:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d74a:	b10b      	cbz	r3, 800d750 <__sflush_r+0x48>
 800d74c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d74e:	1ac0      	subs	r0, r0, r3
 800d750:	2300      	movs	r3, #0
 800d752:	4602      	mov	r2, r0
 800d754:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d756:	6a21      	ldr	r1, [r4, #32]
 800d758:	4628      	mov	r0, r5
 800d75a:	47b0      	blx	r6
 800d75c:	1c43      	adds	r3, r0, #1
 800d75e:	89a3      	ldrh	r3, [r4, #12]
 800d760:	d106      	bne.n	800d770 <__sflush_r+0x68>
 800d762:	6829      	ldr	r1, [r5, #0]
 800d764:	291d      	cmp	r1, #29
 800d766:	d848      	bhi.n	800d7fa <__sflush_r+0xf2>
 800d768:	4a29      	ldr	r2, [pc, #164]	; (800d810 <__sflush_r+0x108>)
 800d76a:	40ca      	lsrs	r2, r1
 800d76c:	07d6      	lsls	r6, r2, #31
 800d76e:	d544      	bpl.n	800d7fa <__sflush_r+0xf2>
 800d770:	2200      	movs	r2, #0
 800d772:	6062      	str	r2, [r4, #4]
 800d774:	04d9      	lsls	r1, r3, #19
 800d776:	6922      	ldr	r2, [r4, #16]
 800d778:	6022      	str	r2, [r4, #0]
 800d77a:	d504      	bpl.n	800d786 <__sflush_r+0x7e>
 800d77c:	1c42      	adds	r2, r0, #1
 800d77e:	d101      	bne.n	800d784 <__sflush_r+0x7c>
 800d780:	682b      	ldr	r3, [r5, #0]
 800d782:	b903      	cbnz	r3, 800d786 <__sflush_r+0x7e>
 800d784:	6560      	str	r0, [r4, #84]	; 0x54
 800d786:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d788:	602f      	str	r7, [r5, #0]
 800d78a:	2900      	cmp	r1, #0
 800d78c:	d0c9      	beq.n	800d722 <__sflush_r+0x1a>
 800d78e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d792:	4299      	cmp	r1, r3
 800d794:	d002      	beq.n	800d79c <__sflush_r+0x94>
 800d796:	4628      	mov	r0, r5
 800d798:	f000 fc9e 	bl	800e0d8 <_free_r>
 800d79c:	2000      	movs	r0, #0
 800d79e:	6360      	str	r0, [r4, #52]	; 0x34
 800d7a0:	e7c0      	b.n	800d724 <__sflush_r+0x1c>
 800d7a2:	2301      	movs	r3, #1
 800d7a4:	4628      	mov	r0, r5
 800d7a6:	47b0      	blx	r6
 800d7a8:	1c41      	adds	r1, r0, #1
 800d7aa:	d1c8      	bne.n	800d73e <__sflush_r+0x36>
 800d7ac:	682b      	ldr	r3, [r5, #0]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d0c5      	beq.n	800d73e <__sflush_r+0x36>
 800d7b2:	2b1d      	cmp	r3, #29
 800d7b4:	d001      	beq.n	800d7ba <__sflush_r+0xb2>
 800d7b6:	2b16      	cmp	r3, #22
 800d7b8:	d101      	bne.n	800d7be <__sflush_r+0xb6>
 800d7ba:	602f      	str	r7, [r5, #0]
 800d7bc:	e7b1      	b.n	800d722 <__sflush_r+0x1a>
 800d7be:	89a3      	ldrh	r3, [r4, #12]
 800d7c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7c4:	81a3      	strh	r3, [r4, #12]
 800d7c6:	e7ad      	b.n	800d724 <__sflush_r+0x1c>
 800d7c8:	690f      	ldr	r7, [r1, #16]
 800d7ca:	2f00      	cmp	r7, #0
 800d7cc:	d0a9      	beq.n	800d722 <__sflush_r+0x1a>
 800d7ce:	0793      	lsls	r3, r2, #30
 800d7d0:	680e      	ldr	r6, [r1, #0]
 800d7d2:	bf08      	it	eq
 800d7d4:	694b      	ldreq	r3, [r1, #20]
 800d7d6:	600f      	str	r7, [r1, #0]
 800d7d8:	bf18      	it	ne
 800d7da:	2300      	movne	r3, #0
 800d7dc:	eba6 0807 	sub.w	r8, r6, r7
 800d7e0:	608b      	str	r3, [r1, #8]
 800d7e2:	f1b8 0f00 	cmp.w	r8, #0
 800d7e6:	dd9c      	ble.n	800d722 <__sflush_r+0x1a>
 800d7e8:	4643      	mov	r3, r8
 800d7ea:	463a      	mov	r2, r7
 800d7ec:	6a21      	ldr	r1, [r4, #32]
 800d7ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d7f0:	4628      	mov	r0, r5
 800d7f2:	47b0      	blx	r6
 800d7f4:	2800      	cmp	r0, #0
 800d7f6:	dc06      	bgt.n	800d806 <__sflush_r+0xfe>
 800d7f8:	89a3      	ldrh	r3, [r4, #12]
 800d7fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7fe:	81a3      	strh	r3, [r4, #12]
 800d800:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d804:	e78e      	b.n	800d724 <__sflush_r+0x1c>
 800d806:	4407      	add	r7, r0
 800d808:	eba8 0800 	sub.w	r8, r8, r0
 800d80c:	e7e9      	b.n	800d7e2 <__sflush_r+0xda>
 800d80e:	bf00      	nop
 800d810:	20400001 	.word	0x20400001

0800d814 <_fflush_r>:
 800d814:	b538      	push	{r3, r4, r5, lr}
 800d816:	690b      	ldr	r3, [r1, #16]
 800d818:	4605      	mov	r5, r0
 800d81a:	460c      	mov	r4, r1
 800d81c:	b1db      	cbz	r3, 800d856 <_fflush_r+0x42>
 800d81e:	b118      	cbz	r0, 800d828 <_fflush_r+0x14>
 800d820:	6983      	ldr	r3, [r0, #24]
 800d822:	b90b      	cbnz	r3, 800d828 <_fflush_r+0x14>
 800d824:	f000 f860 	bl	800d8e8 <__sinit>
 800d828:	4b0c      	ldr	r3, [pc, #48]	; (800d85c <_fflush_r+0x48>)
 800d82a:	429c      	cmp	r4, r3
 800d82c:	d109      	bne.n	800d842 <_fflush_r+0x2e>
 800d82e:	686c      	ldr	r4, [r5, #4]
 800d830:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d834:	b17b      	cbz	r3, 800d856 <_fflush_r+0x42>
 800d836:	4621      	mov	r1, r4
 800d838:	4628      	mov	r0, r5
 800d83a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d83e:	f7ff bf63 	b.w	800d708 <__sflush_r>
 800d842:	4b07      	ldr	r3, [pc, #28]	; (800d860 <_fflush_r+0x4c>)
 800d844:	429c      	cmp	r4, r3
 800d846:	d101      	bne.n	800d84c <_fflush_r+0x38>
 800d848:	68ac      	ldr	r4, [r5, #8]
 800d84a:	e7f1      	b.n	800d830 <_fflush_r+0x1c>
 800d84c:	4b05      	ldr	r3, [pc, #20]	; (800d864 <_fflush_r+0x50>)
 800d84e:	429c      	cmp	r4, r3
 800d850:	bf08      	it	eq
 800d852:	68ec      	ldreq	r4, [r5, #12]
 800d854:	e7ec      	b.n	800d830 <_fflush_r+0x1c>
 800d856:	2000      	movs	r0, #0
 800d858:	bd38      	pop	{r3, r4, r5, pc}
 800d85a:	bf00      	nop
 800d85c:	0800ee68 	.word	0x0800ee68
 800d860:	0800ee88 	.word	0x0800ee88
 800d864:	0800ee48 	.word	0x0800ee48

0800d868 <std>:
 800d868:	2300      	movs	r3, #0
 800d86a:	b510      	push	{r4, lr}
 800d86c:	4604      	mov	r4, r0
 800d86e:	e9c0 3300 	strd	r3, r3, [r0]
 800d872:	6083      	str	r3, [r0, #8]
 800d874:	8181      	strh	r1, [r0, #12]
 800d876:	6643      	str	r3, [r0, #100]	; 0x64
 800d878:	81c2      	strh	r2, [r0, #14]
 800d87a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d87e:	6183      	str	r3, [r0, #24]
 800d880:	4619      	mov	r1, r3
 800d882:	2208      	movs	r2, #8
 800d884:	305c      	adds	r0, #92	; 0x5c
 800d886:	f7fe fb2d 	bl	800bee4 <memset>
 800d88a:	4b05      	ldr	r3, [pc, #20]	; (800d8a0 <std+0x38>)
 800d88c:	6263      	str	r3, [r4, #36]	; 0x24
 800d88e:	4b05      	ldr	r3, [pc, #20]	; (800d8a4 <std+0x3c>)
 800d890:	62a3      	str	r3, [r4, #40]	; 0x28
 800d892:	4b05      	ldr	r3, [pc, #20]	; (800d8a8 <std+0x40>)
 800d894:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d896:	4b05      	ldr	r3, [pc, #20]	; (800d8ac <std+0x44>)
 800d898:	6224      	str	r4, [r4, #32]
 800d89a:	6323      	str	r3, [r4, #48]	; 0x30
 800d89c:	bd10      	pop	{r4, pc}
 800d89e:	bf00      	nop
 800d8a0:	0800e4ed 	.word	0x0800e4ed
 800d8a4:	0800e50f 	.word	0x0800e50f
 800d8a8:	0800e547 	.word	0x0800e547
 800d8ac:	0800e56b 	.word	0x0800e56b

0800d8b0 <_cleanup_r>:
 800d8b0:	4901      	ldr	r1, [pc, #4]	; (800d8b8 <_cleanup_r+0x8>)
 800d8b2:	f000 b885 	b.w	800d9c0 <_fwalk_reent>
 800d8b6:	bf00      	nop
 800d8b8:	0800d815 	.word	0x0800d815

0800d8bc <__sfmoreglue>:
 800d8bc:	b570      	push	{r4, r5, r6, lr}
 800d8be:	1e4a      	subs	r2, r1, #1
 800d8c0:	2568      	movs	r5, #104	; 0x68
 800d8c2:	4355      	muls	r5, r2
 800d8c4:	460e      	mov	r6, r1
 800d8c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d8ca:	f000 fc53 	bl	800e174 <_malloc_r>
 800d8ce:	4604      	mov	r4, r0
 800d8d0:	b140      	cbz	r0, 800d8e4 <__sfmoreglue+0x28>
 800d8d2:	2100      	movs	r1, #0
 800d8d4:	e9c0 1600 	strd	r1, r6, [r0]
 800d8d8:	300c      	adds	r0, #12
 800d8da:	60a0      	str	r0, [r4, #8]
 800d8dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d8e0:	f7fe fb00 	bl	800bee4 <memset>
 800d8e4:	4620      	mov	r0, r4
 800d8e6:	bd70      	pop	{r4, r5, r6, pc}

0800d8e8 <__sinit>:
 800d8e8:	6983      	ldr	r3, [r0, #24]
 800d8ea:	b510      	push	{r4, lr}
 800d8ec:	4604      	mov	r4, r0
 800d8ee:	bb33      	cbnz	r3, 800d93e <__sinit+0x56>
 800d8f0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800d8f4:	6503      	str	r3, [r0, #80]	; 0x50
 800d8f6:	4b12      	ldr	r3, [pc, #72]	; (800d940 <__sinit+0x58>)
 800d8f8:	4a12      	ldr	r2, [pc, #72]	; (800d944 <__sinit+0x5c>)
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	6282      	str	r2, [r0, #40]	; 0x28
 800d8fe:	4298      	cmp	r0, r3
 800d900:	bf04      	itt	eq
 800d902:	2301      	moveq	r3, #1
 800d904:	6183      	streq	r3, [r0, #24]
 800d906:	f000 f81f 	bl	800d948 <__sfp>
 800d90a:	6060      	str	r0, [r4, #4]
 800d90c:	4620      	mov	r0, r4
 800d90e:	f000 f81b 	bl	800d948 <__sfp>
 800d912:	60a0      	str	r0, [r4, #8]
 800d914:	4620      	mov	r0, r4
 800d916:	f000 f817 	bl	800d948 <__sfp>
 800d91a:	2200      	movs	r2, #0
 800d91c:	60e0      	str	r0, [r4, #12]
 800d91e:	2104      	movs	r1, #4
 800d920:	6860      	ldr	r0, [r4, #4]
 800d922:	f7ff ffa1 	bl	800d868 <std>
 800d926:	2201      	movs	r2, #1
 800d928:	2109      	movs	r1, #9
 800d92a:	68a0      	ldr	r0, [r4, #8]
 800d92c:	f7ff ff9c 	bl	800d868 <std>
 800d930:	2202      	movs	r2, #2
 800d932:	2112      	movs	r1, #18
 800d934:	68e0      	ldr	r0, [r4, #12]
 800d936:	f7ff ff97 	bl	800d868 <std>
 800d93a:	2301      	movs	r3, #1
 800d93c:	61a3      	str	r3, [r4, #24]
 800d93e:	bd10      	pop	{r4, pc}
 800d940:	0800ee00 	.word	0x0800ee00
 800d944:	0800d8b1 	.word	0x0800d8b1

0800d948 <__sfp>:
 800d948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d94a:	4b1b      	ldr	r3, [pc, #108]	; (800d9b8 <__sfp+0x70>)
 800d94c:	681e      	ldr	r6, [r3, #0]
 800d94e:	69b3      	ldr	r3, [r6, #24]
 800d950:	4607      	mov	r7, r0
 800d952:	b913      	cbnz	r3, 800d95a <__sfp+0x12>
 800d954:	4630      	mov	r0, r6
 800d956:	f7ff ffc7 	bl	800d8e8 <__sinit>
 800d95a:	3648      	adds	r6, #72	; 0x48
 800d95c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d960:	3b01      	subs	r3, #1
 800d962:	d503      	bpl.n	800d96c <__sfp+0x24>
 800d964:	6833      	ldr	r3, [r6, #0]
 800d966:	b133      	cbz	r3, 800d976 <__sfp+0x2e>
 800d968:	6836      	ldr	r6, [r6, #0]
 800d96a:	e7f7      	b.n	800d95c <__sfp+0x14>
 800d96c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d970:	b16d      	cbz	r5, 800d98e <__sfp+0x46>
 800d972:	3468      	adds	r4, #104	; 0x68
 800d974:	e7f4      	b.n	800d960 <__sfp+0x18>
 800d976:	2104      	movs	r1, #4
 800d978:	4638      	mov	r0, r7
 800d97a:	f7ff ff9f 	bl	800d8bc <__sfmoreglue>
 800d97e:	6030      	str	r0, [r6, #0]
 800d980:	2800      	cmp	r0, #0
 800d982:	d1f1      	bne.n	800d968 <__sfp+0x20>
 800d984:	230c      	movs	r3, #12
 800d986:	603b      	str	r3, [r7, #0]
 800d988:	4604      	mov	r4, r0
 800d98a:	4620      	mov	r0, r4
 800d98c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d98e:	4b0b      	ldr	r3, [pc, #44]	; (800d9bc <__sfp+0x74>)
 800d990:	6665      	str	r5, [r4, #100]	; 0x64
 800d992:	e9c4 5500 	strd	r5, r5, [r4]
 800d996:	60a5      	str	r5, [r4, #8]
 800d998:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d99c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800d9a0:	2208      	movs	r2, #8
 800d9a2:	4629      	mov	r1, r5
 800d9a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d9a8:	f7fe fa9c 	bl	800bee4 <memset>
 800d9ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d9b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d9b4:	e7e9      	b.n	800d98a <__sfp+0x42>
 800d9b6:	bf00      	nop
 800d9b8:	0800ee00 	.word	0x0800ee00
 800d9bc:	ffff0001 	.word	0xffff0001

0800d9c0 <_fwalk_reent>:
 800d9c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9c4:	4680      	mov	r8, r0
 800d9c6:	4689      	mov	r9, r1
 800d9c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d9cc:	2600      	movs	r6, #0
 800d9ce:	b914      	cbnz	r4, 800d9d6 <_fwalk_reent+0x16>
 800d9d0:	4630      	mov	r0, r6
 800d9d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9d6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800d9da:	3f01      	subs	r7, #1
 800d9dc:	d501      	bpl.n	800d9e2 <_fwalk_reent+0x22>
 800d9de:	6824      	ldr	r4, [r4, #0]
 800d9e0:	e7f5      	b.n	800d9ce <_fwalk_reent+0xe>
 800d9e2:	89ab      	ldrh	r3, [r5, #12]
 800d9e4:	2b01      	cmp	r3, #1
 800d9e6:	d907      	bls.n	800d9f8 <_fwalk_reent+0x38>
 800d9e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d9ec:	3301      	adds	r3, #1
 800d9ee:	d003      	beq.n	800d9f8 <_fwalk_reent+0x38>
 800d9f0:	4629      	mov	r1, r5
 800d9f2:	4640      	mov	r0, r8
 800d9f4:	47c8      	blx	r9
 800d9f6:	4306      	orrs	r6, r0
 800d9f8:	3568      	adds	r5, #104	; 0x68
 800d9fa:	e7ee      	b.n	800d9da <_fwalk_reent+0x1a>

0800d9fc <_localeconv_r>:
 800d9fc:	4b04      	ldr	r3, [pc, #16]	; (800da10 <_localeconv_r+0x14>)
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	6a18      	ldr	r0, [r3, #32]
 800da02:	4b04      	ldr	r3, [pc, #16]	; (800da14 <_localeconv_r+0x18>)
 800da04:	2800      	cmp	r0, #0
 800da06:	bf08      	it	eq
 800da08:	4618      	moveq	r0, r3
 800da0a:	30f0      	adds	r0, #240	; 0xf0
 800da0c:	4770      	bx	lr
 800da0e:	bf00      	nop
 800da10:	20001228 	.word	0x20001228
 800da14:	2000128c 	.word	0x2000128c

0800da18 <__swhatbuf_r>:
 800da18:	b570      	push	{r4, r5, r6, lr}
 800da1a:	460e      	mov	r6, r1
 800da1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da20:	2900      	cmp	r1, #0
 800da22:	b096      	sub	sp, #88	; 0x58
 800da24:	4614      	mov	r4, r2
 800da26:	461d      	mov	r5, r3
 800da28:	da07      	bge.n	800da3a <__swhatbuf_r+0x22>
 800da2a:	2300      	movs	r3, #0
 800da2c:	602b      	str	r3, [r5, #0]
 800da2e:	89b3      	ldrh	r3, [r6, #12]
 800da30:	061a      	lsls	r2, r3, #24
 800da32:	d410      	bmi.n	800da56 <__swhatbuf_r+0x3e>
 800da34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da38:	e00e      	b.n	800da58 <__swhatbuf_r+0x40>
 800da3a:	466a      	mov	r2, sp
 800da3c:	f000 fdbc 	bl	800e5b8 <_fstat_r>
 800da40:	2800      	cmp	r0, #0
 800da42:	dbf2      	blt.n	800da2a <__swhatbuf_r+0x12>
 800da44:	9a01      	ldr	r2, [sp, #4]
 800da46:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800da4a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800da4e:	425a      	negs	r2, r3
 800da50:	415a      	adcs	r2, r3
 800da52:	602a      	str	r2, [r5, #0]
 800da54:	e7ee      	b.n	800da34 <__swhatbuf_r+0x1c>
 800da56:	2340      	movs	r3, #64	; 0x40
 800da58:	2000      	movs	r0, #0
 800da5a:	6023      	str	r3, [r4, #0]
 800da5c:	b016      	add	sp, #88	; 0x58
 800da5e:	bd70      	pop	{r4, r5, r6, pc}

0800da60 <__smakebuf_r>:
 800da60:	898b      	ldrh	r3, [r1, #12]
 800da62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800da64:	079d      	lsls	r5, r3, #30
 800da66:	4606      	mov	r6, r0
 800da68:	460c      	mov	r4, r1
 800da6a:	d507      	bpl.n	800da7c <__smakebuf_r+0x1c>
 800da6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800da70:	6023      	str	r3, [r4, #0]
 800da72:	6123      	str	r3, [r4, #16]
 800da74:	2301      	movs	r3, #1
 800da76:	6163      	str	r3, [r4, #20]
 800da78:	b002      	add	sp, #8
 800da7a:	bd70      	pop	{r4, r5, r6, pc}
 800da7c:	ab01      	add	r3, sp, #4
 800da7e:	466a      	mov	r2, sp
 800da80:	f7ff ffca 	bl	800da18 <__swhatbuf_r>
 800da84:	9900      	ldr	r1, [sp, #0]
 800da86:	4605      	mov	r5, r0
 800da88:	4630      	mov	r0, r6
 800da8a:	f000 fb73 	bl	800e174 <_malloc_r>
 800da8e:	b948      	cbnz	r0, 800daa4 <__smakebuf_r+0x44>
 800da90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da94:	059a      	lsls	r2, r3, #22
 800da96:	d4ef      	bmi.n	800da78 <__smakebuf_r+0x18>
 800da98:	f023 0303 	bic.w	r3, r3, #3
 800da9c:	f043 0302 	orr.w	r3, r3, #2
 800daa0:	81a3      	strh	r3, [r4, #12]
 800daa2:	e7e3      	b.n	800da6c <__smakebuf_r+0xc>
 800daa4:	4b0d      	ldr	r3, [pc, #52]	; (800dadc <__smakebuf_r+0x7c>)
 800daa6:	62b3      	str	r3, [r6, #40]	; 0x28
 800daa8:	89a3      	ldrh	r3, [r4, #12]
 800daaa:	6020      	str	r0, [r4, #0]
 800daac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dab0:	81a3      	strh	r3, [r4, #12]
 800dab2:	9b00      	ldr	r3, [sp, #0]
 800dab4:	6163      	str	r3, [r4, #20]
 800dab6:	9b01      	ldr	r3, [sp, #4]
 800dab8:	6120      	str	r0, [r4, #16]
 800daba:	b15b      	cbz	r3, 800dad4 <__smakebuf_r+0x74>
 800dabc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dac0:	4630      	mov	r0, r6
 800dac2:	f000 fd8b 	bl	800e5dc <_isatty_r>
 800dac6:	b128      	cbz	r0, 800dad4 <__smakebuf_r+0x74>
 800dac8:	89a3      	ldrh	r3, [r4, #12]
 800daca:	f023 0303 	bic.w	r3, r3, #3
 800dace:	f043 0301 	orr.w	r3, r3, #1
 800dad2:	81a3      	strh	r3, [r4, #12]
 800dad4:	89a3      	ldrh	r3, [r4, #12]
 800dad6:	431d      	orrs	r5, r3
 800dad8:	81a5      	strh	r5, [r4, #12]
 800dada:	e7cd      	b.n	800da78 <__smakebuf_r+0x18>
 800dadc:	0800d8b1 	.word	0x0800d8b1

0800dae0 <malloc>:
 800dae0:	4b02      	ldr	r3, [pc, #8]	; (800daec <malloc+0xc>)
 800dae2:	4601      	mov	r1, r0
 800dae4:	6818      	ldr	r0, [r3, #0]
 800dae6:	f000 bb45 	b.w	800e174 <_malloc_r>
 800daea:	bf00      	nop
 800daec:	20001228 	.word	0x20001228

0800daf0 <memcpy>:
 800daf0:	b510      	push	{r4, lr}
 800daf2:	1e43      	subs	r3, r0, #1
 800daf4:	440a      	add	r2, r1
 800daf6:	4291      	cmp	r1, r2
 800daf8:	d100      	bne.n	800dafc <memcpy+0xc>
 800dafa:	bd10      	pop	{r4, pc}
 800dafc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db00:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db04:	e7f7      	b.n	800daf6 <memcpy+0x6>

0800db06 <_Balloc>:
 800db06:	b570      	push	{r4, r5, r6, lr}
 800db08:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800db0a:	4604      	mov	r4, r0
 800db0c:	460e      	mov	r6, r1
 800db0e:	b93d      	cbnz	r5, 800db20 <_Balloc+0x1a>
 800db10:	2010      	movs	r0, #16
 800db12:	f7ff ffe5 	bl	800dae0 <malloc>
 800db16:	6260      	str	r0, [r4, #36]	; 0x24
 800db18:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800db1c:	6005      	str	r5, [r0, #0]
 800db1e:	60c5      	str	r5, [r0, #12]
 800db20:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800db22:	68eb      	ldr	r3, [r5, #12]
 800db24:	b183      	cbz	r3, 800db48 <_Balloc+0x42>
 800db26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db28:	68db      	ldr	r3, [r3, #12]
 800db2a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800db2e:	b9b8      	cbnz	r0, 800db60 <_Balloc+0x5a>
 800db30:	2101      	movs	r1, #1
 800db32:	fa01 f506 	lsl.w	r5, r1, r6
 800db36:	1d6a      	adds	r2, r5, #5
 800db38:	0092      	lsls	r2, r2, #2
 800db3a:	4620      	mov	r0, r4
 800db3c:	f000 fabe 	bl	800e0bc <_calloc_r>
 800db40:	b160      	cbz	r0, 800db5c <_Balloc+0x56>
 800db42:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800db46:	e00e      	b.n	800db66 <_Balloc+0x60>
 800db48:	2221      	movs	r2, #33	; 0x21
 800db4a:	2104      	movs	r1, #4
 800db4c:	4620      	mov	r0, r4
 800db4e:	f000 fab5 	bl	800e0bc <_calloc_r>
 800db52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db54:	60e8      	str	r0, [r5, #12]
 800db56:	68db      	ldr	r3, [r3, #12]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d1e4      	bne.n	800db26 <_Balloc+0x20>
 800db5c:	2000      	movs	r0, #0
 800db5e:	bd70      	pop	{r4, r5, r6, pc}
 800db60:	6802      	ldr	r2, [r0, #0]
 800db62:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800db66:	2300      	movs	r3, #0
 800db68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800db6c:	e7f7      	b.n	800db5e <_Balloc+0x58>

0800db6e <_Bfree>:
 800db6e:	b570      	push	{r4, r5, r6, lr}
 800db70:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800db72:	4606      	mov	r6, r0
 800db74:	460d      	mov	r5, r1
 800db76:	b93c      	cbnz	r4, 800db88 <_Bfree+0x1a>
 800db78:	2010      	movs	r0, #16
 800db7a:	f7ff ffb1 	bl	800dae0 <malloc>
 800db7e:	6270      	str	r0, [r6, #36]	; 0x24
 800db80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800db84:	6004      	str	r4, [r0, #0]
 800db86:	60c4      	str	r4, [r0, #12]
 800db88:	b13d      	cbz	r5, 800db9a <_Bfree+0x2c>
 800db8a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800db8c:	686a      	ldr	r2, [r5, #4]
 800db8e:	68db      	ldr	r3, [r3, #12]
 800db90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800db94:	6029      	str	r1, [r5, #0]
 800db96:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800db9a:	bd70      	pop	{r4, r5, r6, pc}

0800db9c <__multadd>:
 800db9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dba0:	690d      	ldr	r5, [r1, #16]
 800dba2:	461f      	mov	r7, r3
 800dba4:	4606      	mov	r6, r0
 800dba6:	460c      	mov	r4, r1
 800dba8:	f101 0c14 	add.w	ip, r1, #20
 800dbac:	2300      	movs	r3, #0
 800dbae:	f8dc 0000 	ldr.w	r0, [ip]
 800dbb2:	b281      	uxth	r1, r0
 800dbb4:	fb02 7101 	mla	r1, r2, r1, r7
 800dbb8:	0c0f      	lsrs	r7, r1, #16
 800dbba:	0c00      	lsrs	r0, r0, #16
 800dbbc:	fb02 7000 	mla	r0, r2, r0, r7
 800dbc0:	b289      	uxth	r1, r1
 800dbc2:	3301      	adds	r3, #1
 800dbc4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800dbc8:	429d      	cmp	r5, r3
 800dbca:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800dbce:	f84c 1b04 	str.w	r1, [ip], #4
 800dbd2:	dcec      	bgt.n	800dbae <__multadd+0x12>
 800dbd4:	b1d7      	cbz	r7, 800dc0c <__multadd+0x70>
 800dbd6:	68a3      	ldr	r3, [r4, #8]
 800dbd8:	42ab      	cmp	r3, r5
 800dbda:	dc12      	bgt.n	800dc02 <__multadd+0x66>
 800dbdc:	6861      	ldr	r1, [r4, #4]
 800dbde:	4630      	mov	r0, r6
 800dbe0:	3101      	adds	r1, #1
 800dbe2:	f7ff ff90 	bl	800db06 <_Balloc>
 800dbe6:	6922      	ldr	r2, [r4, #16]
 800dbe8:	3202      	adds	r2, #2
 800dbea:	f104 010c 	add.w	r1, r4, #12
 800dbee:	4680      	mov	r8, r0
 800dbf0:	0092      	lsls	r2, r2, #2
 800dbf2:	300c      	adds	r0, #12
 800dbf4:	f7ff ff7c 	bl	800daf0 <memcpy>
 800dbf8:	4621      	mov	r1, r4
 800dbfa:	4630      	mov	r0, r6
 800dbfc:	f7ff ffb7 	bl	800db6e <_Bfree>
 800dc00:	4644      	mov	r4, r8
 800dc02:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dc06:	3501      	adds	r5, #1
 800dc08:	615f      	str	r7, [r3, #20]
 800dc0a:	6125      	str	r5, [r4, #16]
 800dc0c:	4620      	mov	r0, r4
 800dc0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dc12 <__hi0bits>:
 800dc12:	0c02      	lsrs	r2, r0, #16
 800dc14:	0412      	lsls	r2, r2, #16
 800dc16:	4603      	mov	r3, r0
 800dc18:	b9b2      	cbnz	r2, 800dc48 <__hi0bits+0x36>
 800dc1a:	0403      	lsls	r3, r0, #16
 800dc1c:	2010      	movs	r0, #16
 800dc1e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800dc22:	bf04      	itt	eq
 800dc24:	021b      	lsleq	r3, r3, #8
 800dc26:	3008      	addeq	r0, #8
 800dc28:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800dc2c:	bf04      	itt	eq
 800dc2e:	011b      	lsleq	r3, r3, #4
 800dc30:	3004      	addeq	r0, #4
 800dc32:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800dc36:	bf04      	itt	eq
 800dc38:	009b      	lsleq	r3, r3, #2
 800dc3a:	3002      	addeq	r0, #2
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	db06      	blt.n	800dc4e <__hi0bits+0x3c>
 800dc40:	005b      	lsls	r3, r3, #1
 800dc42:	d503      	bpl.n	800dc4c <__hi0bits+0x3a>
 800dc44:	3001      	adds	r0, #1
 800dc46:	4770      	bx	lr
 800dc48:	2000      	movs	r0, #0
 800dc4a:	e7e8      	b.n	800dc1e <__hi0bits+0xc>
 800dc4c:	2020      	movs	r0, #32
 800dc4e:	4770      	bx	lr

0800dc50 <__lo0bits>:
 800dc50:	6803      	ldr	r3, [r0, #0]
 800dc52:	f013 0207 	ands.w	r2, r3, #7
 800dc56:	4601      	mov	r1, r0
 800dc58:	d00b      	beq.n	800dc72 <__lo0bits+0x22>
 800dc5a:	07da      	lsls	r2, r3, #31
 800dc5c:	d423      	bmi.n	800dca6 <__lo0bits+0x56>
 800dc5e:	0798      	lsls	r0, r3, #30
 800dc60:	bf49      	itett	mi
 800dc62:	085b      	lsrmi	r3, r3, #1
 800dc64:	089b      	lsrpl	r3, r3, #2
 800dc66:	2001      	movmi	r0, #1
 800dc68:	600b      	strmi	r3, [r1, #0]
 800dc6a:	bf5c      	itt	pl
 800dc6c:	600b      	strpl	r3, [r1, #0]
 800dc6e:	2002      	movpl	r0, #2
 800dc70:	4770      	bx	lr
 800dc72:	b298      	uxth	r0, r3
 800dc74:	b9a8      	cbnz	r0, 800dca2 <__lo0bits+0x52>
 800dc76:	0c1b      	lsrs	r3, r3, #16
 800dc78:	2010      	movs	r0, #16
 800dc7a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800dc7e:	bf04      	itt	eq
 800dc80:	0a1b      	lsreq	r3, r3, #8
 800dc82:	3008      	addeq	r0, #8
 800dc84:	071a      	lsls	r2, r3, #28
 800dc86:	bf04      	itt	eq
 800dc88:	091b      	lsreq	r3, r3, #4
 800dc8a:	3004      	addeq	r0, #4
 800dc8c:	079a      	lsls	r2, r3, #30
 800dc8e:	bf04      	itt	eq
 800dc90:	089b      	lsreq	r3, r3, #2
 800dc92:	3002      	addeq	r0, #2
 800dc94:	07da      	lsls	r2, r3, #31
 800dc96:	d402      	bmi.n	800dc9e <__lo0bits+0x4e>
 800dc98:	085b      	lsrs	r3, r3, #1
 800dc9a:	d006      	beq.n	800dcaa <__lo0bits+0x5a>
 800dc9c:	3001      	adds	r0, #1
 800dc9e:	600b      	str	r3, [r1, #0]
 800dca0:	4770      	bx	lr
 800dca2:	4610      	mov	r0, r2
 800dca4:	e7e9      	b.n	800dc7a <__lo0bits+0x2a>
 800dca6:	2000      	movs	r0, #0
 800dca8:	4770      	bx	lr
 800dcaa:	2020      	movs	r0, #32
 800dcac:	4770      	bx	lr

0800dcae <__i2b>:
 800dcae:	b510      	push	{r4, lr}
 800dcb0:	460c      	mov	r4, r1
 800dcb2:	2101      	movs	r1, #1
 800dcb4:	f7ff ff27 	bl	800db06 <_Balloc>
 800dcb8:	2201      	movs	r2, #1
 800dcba:	6144      	str	r4, [r0, #20]
 800dcbc:	6102      	str	r2, [r0, #16]
 800dcbe:	bd10      	pop	{r4, pc}

0800dcc0 <__multiply>:
 800dcc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcc4:	4614      	mov	r4, r2
 800dcc6:	690a      	ldr	r2, [r1, #16]
 800dcc8:	6923      	ldr	r3, [r4, #16]
 800dcca:	429a      	cmp	r2, r3
 800dccc:	bfb8      	it	lt
 800dcce:	460b      	movlt	r3, r1
 800dcd0:	4688      	mov	r8, r1
 800dcd2:	bfbc      	itt	lt
 800dcd4:	46a0      	movlt	r8, r4
 800dcd6:	461c      	movlt	r4, r3
 800dcd8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dcdc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800dce0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dce4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dce8:	eb07 0609 	add.w	r6, r7, r9
 800dcec:	42b3      	cmp	r3, r6
 800dcee:	bfb8      	it	lt
 800dcf0:	3101      	addlt	r1, #1
 800dcf2:	f7ff ff08 	bl	800db06 <_Balloc>
 800dcf6:	f100 0514 	add.w	r5, r0, #20
 800dcfa:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800dcfe:	462b      	mov	r3, r5
 800dd00:	2200      	movs	r2, #0
 800dd02:	4573      	cmp	r3, lr
 800dd04:	d316      	bcc.n	800dd34 <__multiply+0x74>
 800dd06:	f104 0214 	add.w	r2, r4, #20
 800dd0a:	f108 0114 	add.w	r1, r8, #20
 800dd0e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800dd12:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800dd16:	9300      	str	r3, [sp, #0]
 800dd18:	9b00      	ldr	r3, [sp, #0]
 800dd1a:	9201      	str	r2, [sp, #4]
 800dd1c:	4293      	cmp	r3, r2
 800dd1e:	d80c      	bhi.n	800dd3a <__multiply+0x7a>
 800dd20:	2e00      	cmp	r6, #0
 800dd22:	dd03      	ble.n	800dd2c <__multiply+0x6c>
 800dd24:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d05d      	beq.n	800dde8 <__multiply+0x128>
 800dd2c:	6106      	str	r6, [r0, #16]
 800dd2e:	b003      	add	sp, #12
 800dd30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd34:	f843 2b04 	str.w	r2, [r3], #4
 800dd38:	e7e3      	b.n	800dd02 <__multiply+0x42>
 800dd3a:	f8b2 b000 	ldrh.w	fp, [r2]
 800dd3e:	f1bb 0f00 	cmp.w	fp, #0
 800dd42:	d023      	beq.n	800dd8c <__multiply+0xcc>
 800dd44:	4689      	mov	r9, r1
 800dd46:	46ac      	mov	ip, r5
 800dd48:	f04f 0800 	mov.w	r8, #0
 800dd4c:	f859 4b04 	ldr.w	r4, [r9], #4
 800dd50:	f8dc a000 	ldr.w	sl, [ip]
 800dd54:	b2a3      	uxth	r3, r4
 800dd56:	fa1f fa8a 	uxth.w	sl, sl
 800dd5a:	fb0b a303 	mla	r3, fp, r3, sl
 800dd5e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800dd62:	f8dc 4000 	ldr.w	r4, [ip]
 800dd66:	4443      	add	r3, r8
 800dd68:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800dd6c:	fb0b 840a 	mla	r4, fp, sl, r8
 800dd70:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800dd74:	46e2      	mov	sl, ip
 800dd76:	b29b      	uxth	r3, r3
 800dd78:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800dd7c:	454f      	cmp	r7, r9
 800dd7e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800dd82:	f84a 3b04 	str.w	r3, [sl], #4
 800dd86:	d82b      	bhi.n	800dde0 <__multiply+0x120>
 800dd88:	f8cc 8004 	str.w	r8, [ip, #4]
 800dd8c:	9b01      	ldr	r3, [sp, #4]
 800dd8e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800dd92:	3204      	adds	r2, #4
 800dd94:	f1ba 0f00 	cmp.w	sl, #0
 800dd98:	d020      	beq.n	800dddc <__multiply+0x11c>
 800dd9a:	682b      	ldr	r3, [r5, #0]
 800dd9c:	4689      	mov	r9, r1
 800dd9e:	46a8      	mov	r8, r5
 800dda0:	f04f 0b00 	mov.w	fp, #0
 800dda4:	f8b9 c000 	ldrh.w	ip, [r9]
 800dda8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800ddac:	fb0a 440c 	mla	r4, sl, ip, r4
 800ddb0:	445c      	add	r4, fp
 800ddb2:	46c4      	mov	ip, r8
 800ddb4:	b29b      	uxth	r3, r3
 800ddb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ddba:	f84c 3b04 	str.w	r3, [ip], #4
 800ddbe:	f859 3b04 	ldr.w	r3, [r9], #4
 800ddc2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800ddc6:	0c1b      	lsrs	r3, r3, #16
 800ddc8:	fb0a b303 	mla	r3, sl, r3, fp
 800ddcc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ddd0:	454f      	cmp	r7, r9
 800ddd2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800ddd6:	d805      	bhi.n	800dde4 <__multiply+0x124>
 800ddd8:	f8c8 3004 	str.w	r3, [r8, #4]
 800dddc:	3504      	adds	r5, #4
 800ddde:	e79b      	b.n	800dd18 <__multiply+0x58>
 800dde0:	46d4      	mov	ip, sl
 800dde2:	e7b3      	b.n	800dd4c <__multiply+0x8c>
 800dde4:	46e0      	mov	r8, ip
 800dde6:	e7dd      	b.n	800dda4 <__multiply+0xe4>
 800dde8:	3e01      	subs	r6, #1
 800ddea:	e799      	b.n	800dd20 <__multiply+0x60>

0800ddec <__pow5mult>:
 800ddec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ddf0:	4615      	mov	r5, r2
 800ddf2:	f012 0203 	ands.w	r2, r2, #3
 800ddf6:	4606      	mov	r6, r0
 800ddf8:	460f      	mov	r7, r1
 800ddfa:	d007      	beq.n	800de0c <__pow5mult+0x20>
 800ddfc:	3a01      	subs	r2, #1
 800ddfe:	4c21      	ldr	r4, [pc, #132]	; (800de84 <__pow5mult+0x98>)
 800de00:	2300      	movs	r3, #0
 800de02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800de06:	f7ff fec9 	bl	800db9c <__multadd>
 800de0a:	4607      	mov	r7, r0
 800de0c:	10ad      	asrs	r5, r5, #2
 800de0e:	d035      	beq.n	800de7c <__pow5mult+0x90>
 800de10:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800de12:	b93c      	cbnz	r4, 800de24 <__pow5mult+0x38>
 800de14:	2010      	movs	r0, #16
 800de16:	f7ff fe63 	bl	800dae0 <malloc>
 800de1a:	6270      	str	r0, [r6, #36]	; 0x24
 800de1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800de20:	6004      	str	r4, [r0, #0]
 800de22:	60c4      	str	r4, [r0, #12]
 800de24:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800de28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800de2c:	b94c      	cbnz	r4, 800de42 <__pow5mult+0x56>
 800de2e:	f240 2171 	movw	r1, #625	; 0x271
 800de32:	4630      	mov	r0, r6
 800de34:	f7ff ff3b 	bl	800dcae <__i2b>
 800de38:	2300      	movs	r3, #0
 800de3a:	f8c8 0008 	str.w	r0, [r8, #8]
 800de3e:	4604      	mov	r4, r0
 800de40:	6003      	str	r3, [r0, #0]
 800de42:	f04f 0800 	mov.w	r8, #0
 800de46:	07eb      	lsls	r3, r5, #31
 800de48:	d50a      	bpl.n	800de60 <__pow5mult+0x74>
 800de4a:	4639      	mov	r1, r7
 800de4c:	4622      	mov	r2, r4
 800de4e:	4630      	mov	r0, r6
 800de50:	f7ff ff36 	bl	800dcc0 <__multiply>
 800de54:	4639      	mov	r1, r7
 800de56:	4681      	mov	r9, r0
 800de58:	4630      	mov	r0, r6
 800de5a:	f7ff fe88 	bl	800db6e <_Bfree>
 800de5e:	464f      	mov	r7, r9
 800de60:	106d      	asrs	r5, r5, #1
 800de62:	d00b      	beq.n	800de7c <__pow5mult+0x90>
 800de64:	6820      	ldr	r0, [r4, #0]
 800de66:	b938      	cbnz	r0, 800de78 <__pow5mult+0x8c>
 800de68:	4622      	mov	r2, r4
 800de6a:	4621      	mov	r1, r4
 800de6c:	4630      	mov	r0, r6
 800de6e:	f7ff ff27 	bl	800dcc0 <__multiply>
 800de72:	6020      	str	r0, [r4, #0]
 800de74:	f8c0 8000 	str.w	r8, [r0]
 800de78:	4604      	mov	r4, r0
 800de7a:	e7e4      	b.n	800de46 <__pow5mult+0x5a>
 800de7c:	4638      	mov	r0, r7
 800de7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de82:	bf00      	nop
 800de84:	0800ef98 	.word	0x0800ef98

0800de88 <__lshift>:
 800de88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de8c:	460c      	mov	r4, r1
 800de8e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800de92:	6923      	ldr	r3, [r4, #16]
 800de94:	6849      	ldr	r1, [r1, #4]
 800de96:	eb0a 0903 	add.w	r9, sl, r3
 800de9a:	68a3      	ldr	r3, [r4, #8]
 800de9c:	4607      	mov	r7, r0
 800de9e:	4616      	mov	r6, r2
 800dea0:	f109 0501 	add.w	r5, r9, #1
 800dea4:	42ab      	cmp	r3, r5
 800dea6:	db32      	blt.n	800df0e <__lshift+0x86>
 800dea8:	4638      	mov	r0, r7
 800deaa:	f7ff fe2c 	bl	800db06 <_Balloc>
 800deae:	2300      	movs	r3, #0
 800deb0:	4680      	mov	r8, r0
 800deb2:	f100 0114 	add.w	r1, r0, #20
 800deb6:	461a      	mov	r2, r3
 800deb8:	4553      	cmp	r3, sl
 800deba:	db2b      	blt.n	800df14 <__lshift+0x8c>
 800debc:	6920      	ldr	r0, [r4, #16]
 800debe:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dec2:	f104 0314 	add.w	r3, r4, #20
 800dec6:	f016 021f 	ands.w	r2, r6, #31
 800deca:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dece:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ded2:	d025      	beq.n	800df20 <__lshift+0x98>
 800ded4:	f1c2 0e20 	rsb	lr, r2, #32
 800ded8:	2000      	movs	r0, #0
 800deda:	681e      	ldr	r6, [r3, #0]
 800dedc:	468a      	mov	sl, r1
 800dede:	4096      	lsls	r6, r2
 800dee0:	4330      	orrs	r0, r6
 800dee2:	f84a 0b04 	str.w	r0, [sl], #4
 800dee6:	f853 0b04 	ldr.w	r0, [r3], #4
 800deea:	459c      	cmp	ip, r3
 800deec:	fa20 f00e 	lsr.w	r0, r0, lr
 800def0:	d814      	bhi.n	800df1c <__lshift+0x94>
 800def2:	6048      	str	r0, [r1, #4]
 800def4:	b108      	cbz	r0, 800defa <__lshift+0x72>
 800def6:	f109 0502 	add.w	r5, r9, #2
 800defa:	3d01      	subs	r5, #1
 800defc:	4638      	mov	r0, r7
 800defe:	f8c8 5010 	str.w	r5, [r8, #16]
 800df02:	4621      	mov	r1, r4
 800df04:	f7ff fe33 	bl	800db6e <_Bfree>
 800df08:	4640      	mov	r0, r8
 800df0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df0e:	3101      	adds	r1, #1
 800df10:	005b      	lsls	r3, r3, #1
 800df12:	e7c7      	b.n	800dea4 <__lshift+0x1c>
 800df14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800df18:	3301      	adds	r3, #1
 800df1a:	e7cd      	b.n	800deb8 <__lshift+0x30>
 800df1c:	4651      	mov	r1, sl
 800df1e:	e7dc      	b.n	800deda <__lshift+0x52>
 800df20:	3904      	subs	r1, #4
 800df22:	f853 2b04 	ldr.w	r2, [r3], #4
 800df26:	f841 2f04 	str.w	r2, [r1, #4]!
 800df2a:	459c      	cmp	ip, r3
 800df2c:	d8f9      	bhi.n	800df22 <__lshift+0x9a>
 800df2e:	e7e4      	b.n	800defa <__lshift+0x72>

0800df30 <__mcmp>:
 800df30:	6903      	ldr	r3, [r0, #16]
 800df32:	690a      	ldr	r2, [r1, #16]
 800df34:	1a9b      	subs	r3, r3, r2
 800df36:	b530      	push	{r4, r5, lr}
 800df38:	d10c      	bne.n	800df54 <__mcmp+0x24>
 800df3a:	0092      	lsls	r2, r2, #2
 800df3c:	3014      	adds	r0, #20
 800df3e:	3114      	adds	r1, #20
 800df40:	1884      	adds	r4, r0, r2
 800df42:	4411      	add	r1, r2
 800df44:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800df48:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800df4c:	4295      	cmp	r5, r2
 800df4e:	d003      	beq.n	800df58 <__mcmp+0x28>
 800df50:	d305      	bcc.n	800df5e <__mcmp+0x2e>
 800df52:	2301      	movs	r3, #1
 800df54:	4618      	mov	r0, r3
 800df56:	bd30      	pop	{r4, r5, pc}
 800df58:	42a0      	cmp	r0, r4
 800df5a:	d3f3      	bcc.n	800df44 <__mcmp+0x14>
 800df5c:	e7fa      	b.n	800df54 <__mcmp+0x24>
 800df5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800df62:	e7f7      	b.n	800df54 <__mcmp+0x24>

0800df64 <__mdiff>:
 800df64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df68:	460d      	mov	r5, r1
 800df6a:	4607      	mov	r7, r0
 800df6c:	4611      	mov	r1, r2
 800df6e:	4628      	mov	r0, r5
 800df70:	4614      	mov	r4, r2
 800df72:	f7ff ffdd 	bl	800df30 <__mcmp>
 800df76:	1e06      	subs	r6, r0, #0
 800df78:	d108      	bne.n	800df8c <__mdiff+0x28>
 800df7a:	4631      	mov	r1, r6
 800df7c:	4638      	mov	r0, r7
 800df7e:	f7ff fdc2 	bl	800db06 <_Balloc>
 800df82:	2301      	movs	r3, #1
 800df84:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800df88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df8c:	bfa4      	itt	ge
 800df8e:	4623      	movge	r3, r4
 800df90:	462c      	movge	r4, r5
 800df92:	4638      	mov	r0, r7
 800df94:	6861      	ldr	r1, [r4, #4]
 800df96:	bfa6      	itte	ge
 800df98:	461d      	movge	r5, r3
 800df9a:	2600      	movge	r6, #0
 800df9c:	2601      	movlt	r6, #1
 800df9e:	f7ff fdb2 	bl	800db06 <_Balloc>
 800dfa2:	692b      	ldr	r3, [r5, #16]
 800dfa4:	60c6      	str	r6, [r0, #12]
 800dfa6:	6926      	ldr	r6, [r4, #16]
 800dfa8:	f105 0914 	add.w	r9, r5, #20
 800dfac:	f104 0214 	add.w	r2, r4, #20
 800dfb0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800dfb4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800dfb8:	f100 0514 	add.w	r5, r0, #20
 800dfbc:	f04f 0e00 	mov.w	lr, #0
 800dfc0:	f852 ab04 	ldr.w	sl, [r2], #4
 800dfc4:	f859 4b04 	ldr.w	r4, [r9], #4
 800dfc8:	fa1e f18a 	uxtah	r1, lr, sl
 800dfcc:	b2a3      	uxth	r3, r4
 800dfce:	1ac9      	subs	r1, r1, r3
 800dfd0:	0c23      	lsrs	r3, r4, #16
 800dfd2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800dfd6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800dfda:	b289      	uxth	r1, r1
 800dfdc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800dfe0:	45c8      	cmp	r8, r9
 800dfe2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800dfe6:	4694      	mov	ip, r2
 800dfe8:	f845 3b04 	str.w	r3, [r5], #4
 800dfec:	d8e8      	bhi.n	800dfc0 <__mdiff+0x5c>
 800dfee:	45bc      	cmp	ip, r7
 800dff0:	d304      	bcc.n	800dffc <__mdiff+0x98>
 800dff2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800dff6:	b183      	cbz	r3, 800e01a <__mdiff+0xb6>
 800dff8:	6106      	str	r6, [r0, #16]
 800dffa:	e7c5      	b.n	800df88 <__mdiff+0x24>
 800dffc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e000:	fa1e f381 	uxtah	r3, lr, r1
 800e004:	141a      	asrs	r2, r3, #16
 800e006:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e00a:	b29b      	uxth	r3, r3
 800e00c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e010:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800e014:	f845 3b04 	str.w	r3, [r5], #4
 800e018:	e7e9      	b.n	800dfee <__mdiff+0x8a>
 800e01a:	3e01      	subs	r6, #1
 800e01c:	e7e9      	b.n	800dff2 <__mdiff+0x8e>

0800e01e <__d2b>:
 800e01e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e022:	460e      	mov	r6, r1
 800e024:	2101      	movs	r1, #1
 800e026:	ec59 8b10 	vmov	r8, r9, d0
 800e02a:	4615      	mov	r5, r2
 800e02c:	f7ff fd6b 	bl	800db06 <_Balloc>
 800e030:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800e034:	4607      	mov	r7, r0
 800e036:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e03a:	bb34      	cbnz	r4, 800e08a <__d2b+0x6c>
 800e03c:	9301      	str	r3, [sp, #4]
 800e03e:	f1b8 0300 	subs.w	r3, r8, #0
 800e042:	d027      	beq.n	800e094 <__d2b+0x76>
 800e044:	a802      	add	r0, sp, #8
 800e046:	f840 3d08 	str.w	r3, [r0, #-8]!
 800e04a:	f7ff fe01 	bl	800dc50 <__lo0bits>
 800e04e:	9900      	ldr	r1, [sp, #0]
 800e050:	b1f0      	cbz	r0, 800e090 <__d2b+0x72>
 800e052:	9a01      	ldr	r2, [sp, #4]
 800e054:	f1c0 0320 	rsb	r3, r0, #32
 800e058:	fa02 f303 	lsl.w	r3, r2, r3
 800e05c:	430b      	orrs	r3, r1
 800e05e:	40c2      	lsrs	r2, r0
 800e060:	617b      	str	r3, [r7, #20]
 800e062:	9201      	str	r2, [sp, #4]
 800e064:	9b01      	ldr	r3, [sp, #4]
 800e066:	61bb      	str	r3, [r7, #24]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	bf14      	ite	ne
 800e06c:	2102      	movne	r1, #2
 800e06e:	2101      	moveq	r1, #1
 800e070:	6139      	str	r1, [r7, #16]
 800e072:	b1c4      	cbz	r4, 800e0a6 <__d2b+0x88>
 800e074:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800e078:	4404      	add	r4, r0
 800e07a:	6034      	str	r4, [r6, #0]
 800e07c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e080:	6028      	str	r0, [r5, #0]
 800e082:	4638      	mov	r0, r7
 800e084:	b003      	add	sp, #12
 800e086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e08a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e08e:	e7d5      	b.n	800e03c <__d2b+0x1e>
 800e090:	6179      	str	r1, [r7, #20]
 800e092:	e7e7      	b.n	800e064 <__d2b+0x46>
 800e094:	a801      	add	r0, sp, #4
 800e096:	f7ff fddb 	bl	800dc50 <__lo0bits>
 800e09a:	9b01      	ldr	r3, [sp, #4]
 800e09c:	617b      	str	r3, [r7, #20]
 800e09e:	2101      	movs	r1, #1
 800e0a0:	6139      	str	r1, [r7, #16]
 800e0a2:	3020      	adds	r0, #32
 800e0a4:	e7e5      	b.n	800e072 <__d2b+0x54>
 800e0a6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800e0aa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e0ae:	6030      	str	r0, [r6, #0]
 800e0b0:	6918      	ldr	r0, [r3, #16]
 800e0b2:	f7ff fdae 	bl	800dc12 <__hi0bits>
 800e0b6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800e0ba:	e7e1      	b.n	800e080 <__d2b+0x62>

0800e0bc <_calloc_r>:
 800e0bc:	b538      	push	{r3, r4, r5, lr}
 800e0be:	fb02 f401 	mul.w	r4, r2, r1
 800e0c2:	4621      	mov	r1, r4
 800e0c4:	f000 f856 	bl	800e174 <_malloc_r>
 800e0c8:	4605      	mov	r5, r0
 800e0ca:	b118      	cbz	r0, 800e0d4 <_calloc_r+0x18>
 800e0cc:	4622      	mov	r2, r4
 800e0ce:	2100      	movs	r1, #0
 800e0d0:	f7fd ff08 	bl	800bee4 <memset>
 800e0d4:	4628      	mov	r0, r5
 800e0d6:	bd38      	pop	{r3, r4, r5, pc}

0800e0d8 <_free_r>:
 800e0d8:	b538      	push	{r3, r4, r5, lr}
 800e0da:	4605      	mov	r5, r0
 800e0dc:	2900      	cmp	r1, #0
 800e0de:	d045      	beq.n	800e16c <_free_r+0x94>
 800e0e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0e4:	1f0c      	subs	r4, r1, #4
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	bfb8      	it	lt
 800e0ea:	18e4      	addlt	r4, r4, r3
 800e0ec:	f000 fac3 	bl	800e676 <__malloc_lock>
 800e0f0:	4a1f      	ldr	r2, [pc, #124]	; (800e170 <_free_r+0x98>)
 800e0f2:	6813      	ldr	r3, [r2, #0]
 800e0f4:	4610      	mov	r0, r2
 800e0f6:	b933      	cbnz	r3, 800e106 <_free_r+0x2e>
 800e0f8:	6063      	str	r3, [r4, #4]
 800e0fa:	6014      	str	r4, [r2, #0]
 800e0fc:	4628      	mov	r0, r5
 800e0fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e102:	f000 bab9 	b.w	800e678 <__malloc_unlock>
 800e106:	42a3      	cmp	r3, r4
 800e108:	d90c      	bls.n	800e124 <_free_r+0x4c>
 800e10a:	6821      	ldr	r1, [r4, #0]
 800e10c:	1862      	adds	r2, r4, r1
 800e10e:	4293      	cmp	r3, r2
 800e110:	bf04      	itt	eq
 800e112:	681a      	ldreq	r2, [r3, #0]
 800e114:	685b      	ldreq	r3, [r3, #4]
 800e116:	6063      	str	r3, [r4, #4]
 800e118:	bf04      	itt	eq
 800e11a:	1852      	addeq	r2, r2, r1
 800e11c:	6022      	streq	r2, [r4, #0]
 800e11e:	6004      	str	r4, [r0, #0]
 800e120:	e7ec      	b.n	800e0fc <_free_r+0x24>
 800e122:	4613      	mov	r3, r2
 800e124:	685a      	ldr	r2, [r3, #4]
 800e126:	b10a      	cbz	r2, 800e12c <_free_r+0x54>
 800e128:	42a2      	cmp	r2, r4
 800e12a:	d9fa      	bls.n	800e122 <_free_r+0x4a>
 800e12c:	6819      	ldr	r1, [r3, #0]
 800e12e:	1858      	adds	r0, r3, r1
 800e130:	42a0      	cmp	r0, r4
 800e132:	d10b      	bne.n	800e14c <_free_r+0x74>
 800e134:	6820      	ldr	r0, [r4, #0]
 800e136:	4401      	add	r1, r0
 800e138:	1858      	adds	r0, r3, r1
 800e13a:	4282      	cmp	r2, r0
 800e13c:	6019      	str	r1, [r3, #0]
 800e13e:	d1dd      	bne.n	800e0fc <_free_r+0x24>
 800e140:	6810      	ldr	r0, [r2, #0]
 800e142:	6852      	ldr	r2, [r2, #4]
 800e144:	605a      	str	r2, [r3, #4]
 800e146:	4401      	add	r1, r0
 800e148:	6019      	str	r1, [r3, #0]
 800e14a:	e7d7      	b.n	800e0fc <_free_r+0x24>
 800e14c:	d902      	bls.n	800e154 <_free_r+0x7c>
 800e14e:	230c      	movs	r3, #12
 800e150:	602b      	str	r3, [r5, #0]
 800e152:	e7d3      	b.n	800e0fc <_free_r+0x24>
 800e154:	6820      	ldr	r0, [r4, #0]
 800e156:	1821      	adds	r1, r4, r0
 800e158:	428a      	cmp	r2, r1
 800e15a:	bf04      	itt	eq
 800e15c:	6811      	ldreq	r1, [r2, #0]
 800e15e:	6852      	ldreq	r2, [r2, #4]
 800e160:	6062      	str	r2, [r4, #4]
 800e162:	bf04      	itt	eq
 800e164:	1809      	addeq	r1, r1, r0
 800e166:	6021      	streq	r1, [r4, #0]
 800e168:	605c      	str	r4, [r3, #4]
 800e16a:	e7c7      	b.n	800e0fc <_free_r+0x24>
 800e16c:	bd38      	pop	{r3, r4, r5, pc}
 800e16e:	bf00      	nop
 800e170:	20001428 	.word	0x20001428

0800e174 <_malloc_r>:
 800e174:	b570      	push	{r4, r5, r6, lr}
 800e176:	1ccd      	adds	r5, r1, #3
 800e178:	f025 0503 	bic.w	r5, r5, #3
 800e17c:	3508      	adds	r5, #8
 800e17e:	2d0c      	cmp	r5, #12
 800e180:	bf38      	it	cc
 800e182:	250c      	movcc	r5, #12
 800e184:	2d00      	cmp	r5, #0
 800e186:	4606      	mov	r6, r0
 800e188:	db01      	blt.n	800e18e <_malloc_r+0x1a>
 800e18a:	42a9      	cmp	r1, r5
 800e18c:	d903      	bls.n	800e196 <_malloc_r+0x22>
 800e18e:	230c      	movs	r3, #12
 800e190:	6033      	str	r3, [r6, #0]
 800e192:	2000      	movs	r0, #0
 800e194:	bd70      	pop	{r4, r5, r6, pc}
 800e196:	f000 fa6e 	bl	800e676 <__malloc_lock>
 800e19a:	4a21      	ldr	r2, [pc, #132]	; (800e220 <_malloc_r+0xac>)
 800e19c:	6814      	ldr	r4, [r2, #0]
 800e19e:	4621      	mov	r1, r4
 800e1a0:	b991      	cbnz	r1, 800e1c8 <_malloc_r+0x54>
 800e1a2:	4c20      	ldr	r4, [pc, #128]	; (800e224 <_malloc_r+0xb0>)
 800e1a4:	6823      	ldr	r3, [r4, #0]
 800e1a6:	b91b      	cbnz	r3, 800e1b0 <_malloc_r+0x3c>
 800e1a8:	4630      	mov	r0, r6
 800e1aa:	f000 f98f 	bl	800e4cc <_sbrk_r>
 800e1ae:	6020      	str	r0, [r4, #0]
 800e1b0:	4629      	mov	r1, r5
 800e1b2:	4630      	mov	r0, r6
 800e1b4:	f000 f98a 	bl	800e4cc <_sbrk_r>
 800e1b8:	1c43      	adds	r3, r0, #1
 800e1ba:	d124      	bne.n	800e206 <_malloc_r+0x92>
 800e1bc:	230c      	movs	r3, #12
 800e1be:	6033      	str	r3, [r6, #0]
 800e1c0:	4630      	mov	r0, r6
 800e1c2:	f000 fa59 	bl	800e678 <__malloc_unlock>
 800e1c6:	e7e4      	b.n	800e192 <_malloc_r+0x1e>
 800e1c8:	680b      	ldr	r3, [r1, #0]
 800e1ca:	1b5b      	subs	r3, r3, r5
 800e1cc:	d418      	bmi.n	800e200 <_malloc_r+0x8c>
 800e1ce:	2b0b      	cmp	r3, #11
 800e1d0:	d90f      	bls.n	800e1f2 <_malloc_r+0x7e>
 800e1d2:	600b      	str	r3, [r1, #0]
 800e1d4:	50cd      	str	r5, [r1, r3]
 800e1d6:	18cc      	adds	r4, r1, r3
 800e1d8:	4630      	mov	r0, r6
 800e1da:	f000 fa4d 	bl	800e678 <__malloc_unlock>
 800e1de:	f104 000b 	add.w	r0, r4, #11
 800e1e2:	1d23      	adds	r3, r4, #4
 800e1e4:	f020 0007 	bic.w	r0, r0, #7
 800e1e8:	1ac3      	subs	r3, r0, r3
 800e1ea:	d0d3      	beq.n	800e194 <_malloc_r+0x20>
 800e1ec:	425a      	negs	r2, r3
 800e1ee:	50e2      	str	r2, [r4, r3]
 800e1f0:	e7d0      	b.n	800e194 <_malloc_r+0x20>
 800e1f2:	428c      	cmp	r4, r1
 800e1f4:	684b      	ldr	r3, [r1, #4]
 800e1f6:	bf16      	itet	ne
 800e1f8:	6063      	strne	r3, [r4, #4]
 800e1fa:	6013      	streq	r3, [r2, #0]
 800e1fc:	460c      	movne	r4, r1
 800e1fe:	e7eb      	b.n	800e1d8 <_malloc_r+0x64>
 800e200:	460c      	mov	r4, r1
 800e202:	6849      	ldr	r1, [r1, #4]
 800e204:	e7cc      	b.n	800e1a0 <_malloc_r+0x2c>
 800e206:	1cc4      	adds	r4, r0, #3
 800e208:	f024 0403 	bic.w	r4, r4, #3
 800e20c:	42a0      	cmp	r0, r4
 800e20e:	d005      	beq.n	800e21c <_malloc_r+0xa8>
 800e210:	1a21      	subs	r1, r4, r0
 800e212:	4630      	mov	r0, r6
 800e214:	f000 f95a 	bl	800e4cc <_sbrk_r>
 800e218:	3001      	adds	r0, #1
 800e21a:	d0cf      	beq.n	800e1bc <_malloc_r+0x48>
 800e21c:	6025      	str	r5, [r4, #0]
 800e21e:	e7db      	b.n	800e1d8 <_malloc_r+0x64>
 800e220:	20001428 	.word	0x20001428
 800e224:	2000142c 	.word	0x2000142c

0800e228 <__ssputs_r>:
 800e228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e22c:	688e      	ldr	r6, [r1, #8]
 800e22e:	429e      	cmp	r6, r3
 800e230:	4682      	mov	sl, r0
 800e232:	460c      	mov	r4, r1
 800e234:	4690      	mov	r8, r2
 800e236:	4699      	mov	r9, r3
 800e238:	d837      	bhi.n	800e2aa <__ssputs_r+0x82>
 800e23a:	898a      	ldrh	r2, [r1, #12]
 800e23c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e240:	d031      	beq.n	800e2a6 <__ssputs_r+0x7e>
 800e242:	6825      	ldr	r5, [r4, #0]
 800e244:	6909      	ldr	r1, [r1, #16]
 800e246:	1a6f      	subs	r7, r5, r1
 800e248:	6965      	ldr	r5, [r4, #20]
 800e24a:	2302      	movs	r3, #2
 800e24c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e250:	fb95 f5f3 	sdiv	r5, r5, r3
 800e254:	f109 0301 	add.w	r3, r9, #1
 800e258:	443b      	add	r3, r7
 800e25a:	429d      	cmp	r5, r3
 800e25c:	bf38      	it	cc
 800e25e:	461d      	movcc	r5, r3
 800e260:	0553      	lsls	r3, r2, #21
 800e262:	d530      	bpl.n	800e2c6 <__ssputs_r+0x9e>
 800e264:	4629      	mov	r1, r5
 800e266:	f7ff ff85 	bl	800e174 <_malloc_r>
 800e26a:	4606      	mov	r6, r0
 800e26c:	b950      	cbnz	r0, 800e284 <__ssputs_r+0x5c>
 800e26e:	230c      	movs	r3, #12
 800e270:	f8ca 3000 	str.w	r3, [sl]
 800e274:	89a3      	ldrh	r3, [r4, #12]
 800e276:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e27a:	81a3      	strh	r3, [r4, #12]
 800e27c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e284:	463a      	mov	r2, r7
 800e286:	6921      	ldr	r1, [r4, #16]
 800e288:	f7ff fc32 	bl	800daf0 <memcpy>
 800e28c:	89a3      	ldrh	r3, [r4, #12]
 800e28e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e296:	81a3      	strh	r3, [r4, #12]
 800e298:	6126      	str	r6, [r4, #16]
 800e29a:	6165      	str	r5, [r4, #20]
 800e29c:	443e      	add	r6, r7
 800e29e:	1bed      	subs	r5, r5, r7
 800e2a0:	6026      	str	r6, [r4, #0]
 800e2a2:	60a5      	str	r5, [r4, #8]
 800e2a4:	464e      	mov	r6, r9
 800e2a6:	454e      	cmp	r6, r9
 800e2a8:	d900      	bls.n	800e2ac <__ssputs_r+0x84>
 800e2aa:	464e      	mov	r6, r9
 800e2ac:	4632      	mov	r2, r6
 800e2ae:	4641      	mov	r1, r8
 800e2b0:	6820      	ldr	r0, [r4, #0]
 800e2b2:	f000 f9c7 	bl	800e644 <memmove>
 800e2b6:	68a3      	ldr	r3, [r4, #8]
 800e2b8:	1b9b      	subs	r3, r3, r6
 800e2ba:	60a3      	str	r3, [r4, #8]
 800e2bc:	6823      	ldr	r3, [r4, #0]
 800e2be:	441e      	add	r6, r3
 800e2c0:	6026      	str	r6, [r4, #0]
 800e2c2:	2000      	movs	r0, #0
 800e2c4:	e7dc      	b.n	800e280 <__ssputs_r+0x58>
 800e2c6:	462a      	mov	r2, r5
 800e2c8:	f000 f9d7 	bl	800e67a <_realloc_r>
 800e2cc:	4606      	mov	r6, r0
 800e2ce:	2800      	cmp	r0, #0
 800e2d0:	d1e2      	bne.n	800e298 <__ssputs_r+0x70>
 800e2d2:	6921      	ldr	r1, [r4, #16]
 800e2d4:	4650      	mov	r0, sl
 800e2d6:	f7ff feff 	bl	800e0d8 <_free_r>
 800e2da:	e7c8      	b.n	800e26e <__ssputs_r+0x46>

0800e2dc <_svfiprintf_r>:
 800e2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2e0:	461d      	mov	r5, r3
 800e2e2:	898b      	ldrh	r3, [r1, #12]
 800e2e4:	061f      	lsls	r7, r3, #24
 800e2e6:	b09d      	sub	sp, #116	; 0x74
 800e2e8:	4680      	mov	r8, r0
 800e2ea:	460c      	mov	r4, r1
 800e2ec:	4616      	mov	r6, r2
 800e2ee:	d50f      	bpl.n	800e310 <_svfiprintf_r+0x34>
 800e2f0:	690b      	ldr	r3, [r1, #16]
 800e2f2:	b96b      	cbnz	r3, 800e310 <_svfiprintf_r+0x34>
 800e2f4:	2140      	movs	r1, #64	; 0x40
 800e2f6:	f7ff ff3d 	bl	800e174 <_malloc_r>
 800e2fa:	6020      	str	r0, [r4, #0]
 800e2fc:	6120      	str	r0, [r4, #16]
 800e2fe:	b928      	cbnz	r0, 800e30c <_svfiprintf_r+0x30>
 800e300:	230c      	movs	r3, #12
 800e302:	f8c8 3000 	str.w	r3, [r8]
 800e306:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e30a:	e0c8      	b.n	800e49e <_svfiprintf_r+0x1c2>
 800e30c:	2340      	movs	r3, #64	; 0x40
 800e30e:	6163      	str	r3, [r4, #20]
 800e310:	2300      	movs	r3, #0
 800e312:	9309      	str	r3, [sp, #36]	; 0x24
 800e314:	2320      	movs	r3, #32
 800e316:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e31a:	2330      	movs	r3, #48	; 0x30
 800e31c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e320:	9503      	str	r5, [sp, #12]
 800e322:	f04f 0b01 	mov.w	fp, #1
 800e326:	4637      	mov	r7, r6
 800e328:	463d      	mov	r5, r7
 800e32a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e32e:	b10b      	cbz	r3, 800e334 <_svfiprintf_r+0x58>
 800e330:	2b25      	cmp	r3, #37	; 0x25
 800e332:	d13e      	bne.n	800e3b2 <_svfiprintf_r+0xd6>
 800e334:	ebb7 0a06 	subs.w	sl, r7, r6
 800e338:	d00b      	beq.n	800e352 <_svfiprintf_r+0x76>
 800e33a:	4653      	mov	r3, sl
 800e33c:	4632      	mov	r2, r6
 800e33e:	4621      	mov	r1, r4
 800e340:	4640      	mov	r0, r8
 800e342:	f7ff ff71 	bl	800e228 <__ssputs_r>
 800e346:	3001      	adds	r0, #1
 800e348:	f000 80a4 	beq.w	800e494 <_svfiprintf_r+0x1b8>
 800e34c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e34e:	4453      	add	r3, sl
 800e350:	9309      	str	r3, [sp, #36]	; 0x24
 800e352:	783b      	ldrb	r3, [r7, #0]
 800e354:	2b00      	cmp	r3, #0
 800e356:	f000 809d 	beq.w	800e494 <_svfiprintf_r+0x1b8>
 800e35a:	2300      	movs	r3, #0
 800e35c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e360:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e364:	9304      	str	r3, [sp, #16]
 800e366:	9307      	str	r3, [sp, #28]
 800e368:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e36c:	931a      	str	r3, [sp, #104]	; 0x68
 800e36e:	462f      	mov	r7, r5
 800e370:	2205      	movs	r2, #5
 800e372:	f817 1b01 	ldrb.w	r1, [r7], #1
 800e376:	4850      	ldr	r0, [pc, #320]	; (800e4b8 <_svfiprintf_r+0x1dc>)
 800e378:	f7f1 ff5a 	bl	8000230 <memchr>
 800e37c:	9b04      	ldr	r3, [sp, #16]
 800e37e:	b9d0      	cbnz	r0, 800e3b6 <_svfiprintf_r+0xda>
 800e380:	06d9      	lsls	r1, r3, #27
 800e382:	bf44      	itt	mi
 800e384:	2220      	movmi	r2, #32
 800e386:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e38a:	071a      	lsls	r2, r3, #28
 800e38c:	bf44      	itt	mi
 800e38e:	222b      	movmi	r2, #43	; 0x2b
 800e390:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e394:	782a      	ldrb	r2, [r5, #0]
 800e396:	2a2a      	cmp	r2, #42	; 0x2a
 800e398:	d015      	beq.n	800e3c6 <_svfiprintf_r+0xea>
 800e39a:	9a07      	ldr	r2, [sp, #28]
 800e39c:	462f      	mov	r7, r5
 800e39e:	2000      	movs	r0, #0
 800e3a0:	250a      	movs	r5, #10
 800e3a2:	4639      	mov	r1, r7
 800e3a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e3a8:	3b30      	subs	r3, #48	; 0x30
 800e3aa:	2b09      	cmp	r3, #9
 800e3ac:	d94d      	bls.n	800e44a <_svfiprintf_r+0x16e>
 800e3ae:	b1b8      	cbz	r0, 800e3e0 <_svfiprintf_r+0x104>
 800e3b0:	e00f      	b.n	800e3d2 <_svfiprintf_r+0xf6>
 800e3b2:	462f      	mov	r7, r5
 800e3b4:	e7b8      	b.n	800e328 <_svfiprintf_r+0x4c>
 800e3b6:	4a40      	ldr	r2, [pc, #256]	; (800e4b8 <_svfiprintf_r+0x1dc>)
 800e3b8:	1a80      	subs	r0, r0, r2
 800e3ba:	fa0b f000 	lsl.w	r0, fp, r0
 800e3be:	4318      	orrs	r0, r3
 800e3c0:	9004      	str	r0, [sp, #16]
 800e3c2:	463d      	mov	r5, r7
 800e3c4:	e7d3      	b.n	800e36e <_svfiprintf_r+0x92>
 800e3c6:	9a03      	ldr	r2, [sp, #12]
 800e3c8:	1d11      	adds	r1, r2, #4
 800e3ca:	6812      	ldr	r2, [r2, #0]
 800e3cc:	9103      	str	r1, [sp, #12]
 800e3ce:	2a00      	cmp	r2, #0
 800e3d0:	db01      	blt.n	800e3d6 <_svfiprintf_r+0xfa>
 800e3d2:	9207      	str	r2, [sp, #28]
 800e3d4:	e004      	b.n	800e3e0 <_svfiprintf_r+0x104>
 800e3d6:	4252      	negs	r2, r2
 800e3d8:	f043 0302 	orr.w	r3, r3, #2
 800e3dc:	9207      	str	r2, [sp, #28]
 800e3de:	9304      	str	r3, [sp, #16]
 800e3e0:	783b      	ldrb	r3, [r7, #0]
 800e3e2:	2b2e      	cmp	r3, #46	; 0x2e
 800e3e4:	d10c      	bne.n	800e400 <_svfiprintf_r+0x124>
 800e3e6:	787b      	ldrb	r3, [r7, #1]
 800e3e8:	2b2a      	cmp	r3, #42	; 0x2a
 800e3ea:	d133      	bne.n	800e454 <_svfiprintf_r+0x178>
 800e3ec:	9b03      	ldr	r3, [sp, #12]
 800e3ee:	1d1a      	adds	r2, r3, #4
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	9203      	str	r2, [sp, #12]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	bfb8      	it	lt
 800e3f8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e3fc:	3702      	adds	r7, #2
 800e3fe:	9305      	str	r3, [sp, #20]
 800e400:	4d2e      	ldr	r5, [pc, #184]	; (800e4bc <_svfiprintf_r+0x1e0>)
 800e402:	7839      	ldrb	r1, [r7, #0]
 800e404:	2203      	movs	r2, #3
 800e406:	4628      	mov	r0, r5
 800e408:	f7f1 ff12 	bl	8000230 <memchr>
 800e40c:	b138      	cbz	r0, 800e41e <_svfiprintf_r+0x142>
 800e40e:	2340      	movs	r3, #64	; 0x40
 800e410:	1b40      	subs	r0, r0, r5
 800e412:	fa03 f000 	lsl.w	r0, r3, r0
 800e416:	9b04      	ldr	r3, [sp, #16]
 800e418:	4303      	orrs	r3, r0
 800e41a:	3701      	adds	r7, #1
 800e41c:	9304      	str	r3, [sp, #16]
 800e41e:	7839      	ldrb	r1, [r7, #0]
 800e420:	4827      	ldr	r0, [pc, #156]	; (800e4c0 <_svfiprintf_r+0x1e4>)
 800e422:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e426:	2206      	movs	r2, #6
 800e428:	1c7e      	adds	r6, r7, #1
 800e42a:	f7f1 ff01 	bl	8000230 <memchr>
 800e42e:	2800      	cmp	r0, #0
 800e430:	d038      	beq.n	800e4a4 <_svfiprintf_r+0x1c8>
 800e432:	4b24      	ldr	r3, [pc, #144]	; (800e4c4 <_svfiprintf_r+0x1e8>)
 800e434:	bb13      	cbnz	r3, 800e47c <_svfiprintf_r+0x1a0>
 800e436:	9b03      	ldr	r3, [sp, #12]
 800e438:	3307      	adds	r3, #7
 800e43a:	f023 0307 	bic.w	r3, r3, #7
 800e43e:	3308      	adds	r3, #8
 800e440:	9303      	str	r3, [sp, #12]
 800e442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e444:	444b      	add	r3, r9
 800e446:	9309      	str	r3, [sp, #36]	; 0x24
 800e448:	e76d      	b.n	800e326 <_svfiprintf_r+0x4a>
 800e44a:	fb05 3202 	mla	r2, r5, r2, r3
 800e44e:	2001      	movs	r0, #1
 800e450:	460f      	mov	r7, r1
 800e452:	e7a6      	b.n	800e3a2 <_svfiprintf_r+0xc6>
 800e454:	2300      	movs	r3, #0
 800e456:	3701      	adds	r7, #1
 800e458:	9305      	str	r3, [sp, #20]
 800e45a:	4619      	mov	r1, r3
 800e45c:	250a      	movs	r5, #10
 800e45e:	4638      	mov	r0, r7
 800e460:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e464:	3a30      	subs	r2, #48	; 0x30
 800e466:	2a09      	cmp	r2, #9
 800e468:	d903      	bls.n	800e472 <_svfiprintf_r+0x196>
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d0c8      	beq.n	800e400 <_svfiprintf_r+0x124>
 800e46e:	9105      	str	r1, [sp, #20]
 800e470:	e7c6      	b.n	800e400 <_svfiprintf_r+0x124>
 800e472:	fb05 2101 	mla	r1, r5, r1, r2
 800e476:	2301      	movs	r3, #1
 800e478:	4607      	mov	r7, r0
 800e47a:	e7f0      	b.n	800e45e <_svfiprintf_r+0x182>
 800e47c:	ab03      	add	r3, sp, #12
 800e47e:	9300      	str	r3, [sp, #0]
 800e480:	4622      	mov	r2, r4
 800e482:	4b11      	ldr	r3, [pc, #68]	; (800e4c8 <_svfiprintf_r+0x1ec>)
 800e484:	a904      	add	r1, sp, #16
 800e486:	4640      	mov	r0, r8
 800e488:	f7fd fdc8 	bl	800c01c <_printf_float>
 800e48c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800e490:	4681      	mov	r9, r0
 800e492:	d1d6      	bne.n	800e442 <_svfiprintf_r+0x166>
 800e494:	89a3      	ldrh	r3, [r4, #12]
 800e496:	065b      	lsls	r3, r3, #25
 800e498:	f53f af35 	bmi.w	800e306 <_svfiprintf_r+0x2a>
 800e49c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e49e:	b01d      	add	sp, #116	; 0x74
 800e4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4a4:	ab03      	add	r3, sp, #12
 800e4a6:	9300      	str	r3, [sp, #0]
 800e4a8:	4622      	mov	r2, r4
 800e4aa:	4b07      	ldr	r3, [pc, #28]	; (800e4c8 <_svfiprintf_r+0x1ec>)
 800e4ac:	a904      	add	r1, sp, #16
 800e4ae:	4640      	mov	r0, r8
 800e4b0:	f7fe f86a 	bl	800c588 <_printf_i>
 800e4b4:	e7ea      	b.n	800e48c <_svfiprintf_r+0x1b0>
 800e4b6:	bf00      	nop
 800e4b8:	0800efa4 	.word	0x0800efa4
 800e4bc:	0800efaa 	.word	0x0800efaa
 800e4c0:	0800efae 	.word	0x0800efae
 800e4c4:	0800c01d 	.word	0x0800c01d
 800e4c8:	0800e229 	.word	0x0800e229

0800e4cc <_sbrk_r>:
 800e4cc:	b538      	push	{r3, r4, r5, lr}
 800e4ce:	4c06      	ldr	r4, [pc, #24]	; (800e4e8 <_sbrk_r+0x1c>)
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	4605      	mov	r5, r0
 800e4d4:	4608      	mov	r0, r1
 800e4d6:	6023      	str	r3, [r4, #0]
 800e4d8:	f7f6 fda0 	bl	800501c <_sbrk>
 800e4dc:	1c43      	adds	r3, r0, #1
 800e4de:	d102      	bne.n	800e4e6 <_sbrk_r+0x1a>
 800e4e0:	6823      	ldr	r3, [r4, #0]
 800e4e2:	b103      	cbz	r3, 800e4e6 <_sbrk_r+0x1a>
 800e4e4:	602b      	str	r3, [r5, #0]
 800e4e6:	bd38      	pop	{r3, r4, r5, pc}
 800e4e8:	20001890 	.word	0x20001890

0800e4ec <__sread>:
 800e4ec:	b510      	push	{r4, lr}
 800e4ee:	460c      	mov	r4, r1
 800e4f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4f4:	f000 f8e8 	bl	800e6c8 <_read_r>
 800e4f8:	2800      	cmp	r0, #0
 800e4fa:	bfab      	itete	ge
 800e4fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e4fe:	89a3      	ldrhlt	r3, [r4, #12]
 800e500:	181b      	addge	r3, r3, r0
 800e502:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e506:	bfac      	ite	ge
 800e508:	6563      	strge	r3, [r4, #84]	; 0x54
 800e50a:	81a3      	strhlt	r3, [r4, #12]
 800e50c:	bd10      	pop	{r4, pc}

0800e50e <__swrite>:
 800e50e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e512:	461f      	mov	r7, r3
 800e514:	898b      	ldrh	r3, [r1, #12]
 800e516:	05db      	lsls	r3, r3, #23
 800e518:	4605      	mov	r5, r0
 800e51a:	460c      	mov	r4, r1
 800e51c:	4616      	mov	r6, r2
 800e51e:	d505      	bpl.n	800e52c <__swrite+0x1e>
 800e520:	2302      	movs	r3, #2
 800e522:	2200      	movs	r2, #0
 800e524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e528:	f000 f868 	bl	800e5fc <_lseek_r>
 800e52c:	89a3      	ldrh	r3, [r4, #12]
 800e52e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e532:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e536:	81a3      	strh	r3, [r4, #12]
 800e538:	4632      	mov	r2, r6
 800e53a:	463b      	mov	r3, r7
 800e53c:	4628      	mov	r0, r5
 800e53e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e542:	f000 b817 	b.w	800e574 <_write_r>

0800e546 <__sseek>:
 800e546:	b510      	push	{r4, lr}
 800e548:	460c      	mov	r4, r1
 800e54a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e54e:	f000 f855 	bl	800e5fc <_lseek_r>
 800e552:	1c43      	adds	r3, r0, #1
 800e554:	89a3      	ldrh	r3, [r4, #12]
 800e556:	bf15      	itete	ne
 800e558:	6560      	strne	r0, [r4, #84]	; 0x54
 800e55a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e55e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e562:	81a3      	strheq	r3, [r4, #12]
 800e564:	bf18      	it	ne
 800e566:	81a3      	strhne	r3, [r4, #12]
 800e568:	bd10      	pop	{r4, pc}

0800e56a <__sclose>:
 800e56a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e56e:	f000 b813 	b.w	800e598 <_close_r>
	...

0800e574 <_write_r>:
 800e574:	b538      	push	{r3, r4, r5, lr}
 800e576:	4c07      	ldr	r4, [pc, #28]	; (800e594 <_write_r+0x20>)
 800e578:	4605      	mov	r5, r0
 800e57a:	4608      	mov	r0, r1
 800e57c:	4611      	mov	r1, r2
 800e57e:	2200      	movs	r2, #0
 800e580:	6022      	str	r2, [r4, #0]
 800e582:	461a      	mov	r2, r3
 800e584:	f7f6 f96d 	bl	8004862 <_write>
 800e588:	1c43      	adds	r3, r0, #1
 800e58a:	d102      	bne.n	800e592 <_write_r+0x1e>
 800e58c:	6823      	ldr	r3, [r4, #0]
 800e58e:	b103      	cbz	r3, 800e592 <_write_r+0x1e>
 800e590:	602b      	str	r3, [r5, #0]
 800e592:	bd38      	pop	{r3, r4, r5, pc}
 800e594:	20001890 	.word	0x20001890

0800e598 <_close_r>:
 800e598:	b538      	push	{r3, r4, r5, lr}
 800e59a:	4c06      	ldr	r4, [pc, #24]	; (800e5b4 <_close_r+0x1c>)
 800e59c:	2300      	movs	r3, #0
 800e59e:	4605      	mov	r5, r0
 800e5a0:	4608      	mov	r0, r1
 800e5a2:	6023      	str	r3, [r4, #0]
 800e5a4:	f7f6 fd05 	bl	8004fb2 <_close>
 800e5a8:	1c43      	adds	r3, r0, #1
 800e5aa:	d102      	bne.n	800e5b2 <_close_r+0x1a>
 800e5ac:	6823      	ldr	r3, [r4, #0]
 800e5ae:	b103      	cbz	r3, 800e5b2 <_close_r+0x1a>
 800e5b0:	602b      	str	r3, [r5, #0]
 800e5b2:	bd38      	pop	{r3, r4, r5, pc}
 800e5b4:	20001890 	.word	0x20001890

0800e5b8 <_fstat_r>:
 800e5b8:	b538      	push	{r3, r4, r5, lr}
 800e5ba:	4c07      	ldr	r4, [pc, #28]	; (800e5d8 <_fstat_r+0x20>)
 800e5bc:	2300      	movs	r3, #0
 800e5be:	4605      	mov	r5, r0
 800e5c0:	4608      	mov	r0, r1
 800e5c2:	4611      	mov	r1, r2
 800e5c4:	6023      	str	r3, [r4, #0]
 800e5c6:	f7f6 fd00 	bl	8004fca <_fstat>
 800e5ca:	1c43      	adds	r3, r0, #1
 800e5cc:	d102      	bne.n	800e5d4 <_fstat_r+0x1c>
 800e5ce:	6823      	ldr	r3, [r4, #0]
 800e5d0:	b103      	cbz	r3, 800e5d4 <_fstat_r+0x1c>
 800e5d2:	602b      	str	r3, [r5, #0]
 800e5d4:	bd38      	pop	{r3, r4, r5, pc}
 800e5d6:	bf00      	nop
 800e5d8:	20001890 	.word	0x20001890

0800e5dc <_isatty_r>:
 800e5dc:	b538      	push	{r3, r4, r5, lr}
 800e5de:	4c06      	ldr	r4, [pc, #24]	; (800e5f8 <_isatty_r+0x1c>)
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	4605      	mov	r5, r0
 800e5e4:	4608      	mov	r0, r1
 800e5e6:	6023      	str	r3, [r4, #0]
 800e5e8:	f7f6 fcff 	bl	8004fea <_isatty>
 800e5ec:	1c43      	adds	r3, r0, #1
 800e5ee:	d102      	bne.n	800e5f6 <_isatty_r+0x1a>
 800e5f0:	6823      	ldr	r3, [r4, #0]
 800e5f2:	b103      	cbz	r3, 800e5f6 <_isatty_r+0x1a>
 800e5f4:	602b      	str	r3, [r5, #0]
 800e5f6:	bd38      	pop	{r3, r4, r5, pc}
 800e5f8:	20001890 	.word	0x20001890

0800e5fc <_lseek_r>:
 800e5fc:	b538      	push	{r3, r4, r5, lr}
 800e5fe:	4c07      	ldr	r4, [pc, #28]	; (800e61c <_lseek_r+0x20>)
 800e600:	4605      	mov	r5, r0
 800e602:	4608      	mov	r0, r1
 800e604:	4611      	mov	r1, r2
 800e606:	2200      	movs	r2, #0
 800e608:	6022      	str	r2, [r4, #0]
 800e60a:	461a      	mov	r2, r3
 800e60c:	f7f6 fcf8 	bl	8005000 <_lseek>
 800e610:	1c43      	adds	r3, r0, #1
 800e612:	d102      	bne.n	800e61a <_lseek_r+0x1e>
 800e614:	6823      	ldr	r3, [r4, #0]
 800e616:	b103      	cbz	r3, 800e61a <_lseek_r+0x1e>
 800e618:	602b      	str	r3, [r5, #0]
 800e61a:	bd38      	pop	{r3, r4, r5, pc}
 800e61c:	20001890 	.word	0x20001890

0800e620 <__ascii_mbtowc>:
 800e620:	b082      	sub	sp, #8
 800e622:	b901      	cbnz	r1, 800e626 <__ascii_mbtowc+0x6>
 800e624:	a901      	add	r1, sp, #4
 800e626:	b142      	cbz	r2, 800e63a <__ascii_mbtowc+0x1a>
 800e628:	b14b      	cbz	r3, 800e63e <__ascii_mbtowc+0x1e>
 800e62a:	7813      	ldrb	r3, [r2, #0]
 800e62c:	600b      	str	r3, [r1, #0]
 800e62e:	7812      	ldrb	r2, [r2, #0]
 800e630:	1c10      	adds	r0, r2, #0
 800e632:	bf18      	it	ne
 800e634:	2001      	movne	r0, #1
 800e636:	b002      	add	sp, #8
 800e638:	4770      	bx	lr
 800e63a:	4610      	mov	r0, r2
 800e63c:	e7fb      	b.n	800e636 <__ascii_mbtowc+0x16>
 800e63e:	f06f 0001 	mvn.w	r0, #1
 800e642:	e7f8      	b.n	800e636 <__ascii_mbtowc+0x16>

0800e644 <memmove>:
 800e644:	4288      	cmp	r0, r1
 800e646:	b510      	push	{r4, lr}
 800e648:	eb01 0302 	add.w	r3, r1, r2
 800e64c:	d807      	bhi.n	800e65e <memmove+0x1a>
 800e64e:	1e42      	subs	r2, r0, #1
 800e650:	4299      	cmp	r1, r3
 800e652:	d00a      	beq.n	800e66a <memmove+0x26>
 800e654:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e658:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e65c:	e7f8      	b.n	800e650 <memmove+0xc>
 800e65e:	4283      	cmp	r3, r0
 800e660:	d9f5      	bls.n	800e64e <memmove+0xa>
 800e662:	1881      	adds	r1, r0, r2
 800e664:	1ad2      	subs	r2, r2, r3
 800e666:	42d3      	cmn	r3, r2
 800e668:	d100      	bne.n	800e66c <memmove+0x28>
 800e66a:	bd10      	pop	{r4, pc}
 800e66c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e670:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e674:	e7f7      	b.n	800e666 <memmove+0x22>

0800e676 <__malloc_lock>:
 800e676:	4770      	bx	lr

0800e678 <__malloc_unlock>:
 800e678:	4770      	bx	lr

0800e67a <_realloc_r>:
 800e67a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e67c:	4607      	mov	r7, r0
 800e67e:	4614      	mov	r4, r2
 800e680:	460e      	mov	r6, r1
 800e682:	b921      	cbnz	r1, 800e68e <_realloc_r+0x14>
 800e684:	4611      	mov	r1, r2
 800e686:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e68a:	f7ff bd73 	b.w	800e174 <_malloc_r>
 800e68e:	b922      	cbnz	r2, 800e69a <_realloc_r+0x20>
 800e690:	f7ff fd22 	bl	800e0d8 <_free_r>
 800e694:	4625      	mov	r5, r4
 800e696:	4628      	mov	r0, r5
 800e698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e69a:	f000 f834 	bl	800e706 <_malloc_usable_size_r>
 800e69e:	42a0      	cmp	r0, r4
 800e6a0:	d20f      	bcs.n	800e6c2 <_realloc_r+0x48>
 800e6a2:	4621      	mov	r1, r4
 800e6a4:	4638      	mov	r0, r7
 800e6a6:	f7ff fd65 	bl	800e174 <_malloc_r>
 800e6aa:	4605      	mov	r5, r0
 800e6ac:	2800      	cmp	r0, #0
 800e6ae:	d0f2      	beq.n	800e696 <_realloc_r+0x1c>
 800e6b0:	4631      	mov	r1, r6
 800e6b2:	4622      	mov	r2, r4
 800e6b4:	f7ff fa1c 	bl	800daf0 <memcpy>
 800e6b8:	4631      	mov	r1, r6
 800e6ba:	4638      	mov	r0, r7
 800e6bc:	f7ff fd0c 	bl	800e0d8 <_free_r>
 800e6c0:	e7e9      	b.n	800e696 <_realloc_r+0x1c>
 800e6c2:	4635      	mov	r5, r6
 800e6c4:	e7e7      	b.n	800e696 <_realloc_r+0x1c>
	...

0800e6c8 <_read_r>:
 800e6c8:	b538      	push	{r3, r4, r5, lr}
 800e6ca:	4c07      	ldr	r4, [pc, #28]	; (800e6e8 <_read_r+0x20>)
 800e6cc:	4605      	mov	r5, r0
 800e6ce:	4608      	mov	r0, r1
 800e6d0:	4611      	mov	r1, r2
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	6022      	str	r2, [r4, #0]
 800e6d6:	461a      	mov	r2, r3
 800e6d8:	f7f6 fc4e 	bl	8004f78 <_read>
 800e6dc:	1c43      	adds	r3, r0, #1
 800e6de:	d102      	bne.n	800e6e6 <_read_r+0x1e>
 800e6e0:	6823      	ldr	r3, [r4, #0]
 800e6e2:	b103      	cbz	r3, 800e6e6 <_read_r+0x1e>
 800e6e4:	602b      	str	r3, [r5, #0]
 800e6e6:	bd38      	pop	{r3, r4, r5, pc}
 800e6e8:	20001890 	.word	0x20001890

0800e6ec <__ascii_wctomb>:
 800e6ec:	b149      	cbz	r1, 800e702 <__ascii_wctomb+0x16>
 800e6ee:	2aff      	cmp	r2, #255	; 0xff
 800e6f0:	bf85      	ittet	hi
 800e6f2:	238a      	movhi	r3, #138	; 0x8a
 800e6f4:	6003      	strhi	r3, [r0, #0]
 800e6f6:	700a      	strbls	r2, [r1, #0]
 800e6f8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800e6fc:	bf98      	it	ls
 800e6fe:	2001      	movls	r0, #1
 800e700:	4770      	bx	lr
 800e702:	4608      	mov	r0, r1
 800e704:	4770      	bx	lr

0800e706 <_malloc_usable_size_r>:
 800e706:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e70a:	1f18      	subs	r0, r3, #4
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	bfbc      	itt	lt
 800e710:	580b      	ldrlt	r3, [r1, r0]
 800e712:	18c0      	addlt	r0, r0, r3
 800e714:	4770      	bx	lr
	...

0800e718 <_init>:
 800e718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e71a:	bf00      	nop
 800e71c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e71e:	bc08      	pop	{r3}
 800e720:	469e      	mov	lr, r3
 800e722:	4770      	bx	lr

0800e724 <_fini>:
 800e724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e726:	bf00      	nop
 800e728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e72a:	bc08      	pop	{r3}
 800e72c:	469e      	mov	lr, r3
 800e72e:	4770      	bx	lr
