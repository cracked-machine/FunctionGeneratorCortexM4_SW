
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f0a0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001258  0800f280  0800f280  0001f280  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080104d8  080104d8  00031eb8  2**0
                  CONTENTS
  4 .ARM          00000000  080104d8  080104d8  00031eb8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080104d8  080104d8  00031eb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080104d8  080104d8  000204d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080104dc  080104dc  000204dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001eb8  20000000  080104e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000888  20001eb8  08012398  00031eb8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002740  08012398  00032740  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031eb8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003259a  00000000  00000000  00031ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000061eb  00000000  00000000  00064482  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001fb0  00000000  00000000  0006a670  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001c38  00000000  00000000  0006c620  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000313d5  00000000  00000000  0006e258  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00024913  00000000  00000000  0009f62d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00125556  00000000  00000000  000c3f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e9496  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008c88  00000000  00000000  001e9514  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001eb8 	.word	0x20001eb8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800f268 	.word	0x0800f268

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001ebc 	.word	0x20001ebc
 800021c:	0800f268 	.word	0x0800f268

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <DM_Init>:
 *	@param None
 *	@retval None
 *
 */
void DM_Init()
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 8000bfc:	f00b f8e8 	bl	800bdd0 <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000c00:	2003      	movs	r0, #3
 8000c02:	f00b fcd5 	bl	800c5b0 <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 8000c06:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000c0a:	f00b fae9 	bl	800c1e0 <ILI9341_Fill_Screen>

}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <DM_PostInit>:
 *	@param None
 *	@retval None
 *
 */
void DM_PostInit()
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af02      	add	r7, sp, #8

	  ILI9341_Draw_Text("Initialising", 10, 10, BLACK, 1, WHITE);
 8000c1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c1e:	9301      	str	r3, [sp, #4]
 8000c20:	2301      	movs	r3, #1
 8000c22:	9300      	str	r3, [sp, #0]
 8000c24:	2300      	movs	r3, #0
 8000c26:	220a      	movs	r2, #10
 8000c28:	210a      	movs	r1, #10
 8000c2a:	4807      	ldr	r0, [pc, #28]	; (8000c48 <DM_PostInit+0x34>)
 8000c2c:	f00b f87e 	bl	800bd2c <ILI9341_Draw_Text>
	  HAL_Delay(500);
 8000c30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c34:	f005 fe06 	bl	8006844 <HAL_Delay>

	  DM_RefreshBackgroundLayout();
 8000c38:	f000 fa80 	bl	800113c <DM_RefreshBackgroundLayout>
	  printf("Init Completed\n");
 8000c3c:	4803      	ldr	r0, [pc, #12]	; (8000c4c <DM_PostInit+0x38>)
 8000c3e:	f00c fbb9 	bl	800d3b4 <puts>
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	0800f280 	.word	0x0800f280
 8000c4c:	0800f290 	.word	0x0800f290

08000c50 <_DisplayFormattedOutput>:
 *	@param None
 *	@retval None
 *
 */
void _DisplayFormattedOutput()
{
 8000c50:	b590      	push	{r4, r7, lr}
 8000c52:	b099      	sub	sp, #100	; 0x64
 8000c54:	af02      	add	r7, sp, #8
	char out_hertz[13] = "";
 8000c56:	2300      	movs	r3, #0
 8000c58:	633b      	str	r3, [r7, #48]	; 0x30
 8000c5a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	721a      	strb	r2, [r3, #8]
	uint8_t out_hertz_x = 70;
 8000c66:	2346      	movs	r3, #70	; 0x46
 8000c68:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	uint8_t out_hertz_y = 40;
 8000c6c:	2328      	movs	r3, #40	; 0x28
 8000c6e:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

	char out_vpp[16] = "";
 8000c72:	2300      	movs	r3, #0
 8000c74:	623b      	str	r3, [r7, #32]
 8000c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
	uint8_t out_vpp_x = 70;
 8000c82:	2346      	movs	r3, #70	; 0x46
 8000c84:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	uint8_t out_vpp_y = 70;
 8000c88:	2346      	movs	r3, #70	; 0x46
 8000c8a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

	char out_decibels[11] = "";
 8000c8e:	2300      	movs	r3, #0
 8000c90:	617b      	str	r3, [r7, #20]
 8000c92:	f107 0318 	add.w	r3, r7, #24
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	f8c3 2003 	str.w	r2, [r3, #3]
	uint8_t out_decibels_x = 70;
 8000c9e:	2346      	movs	r3, #70	; 0x46
 8000ca0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t out_decibels_y = 100;
 8000ca4:	2364      	movs	r3, #100	; 0x64
 8000ca6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e


	float volts_per_thou = 0.00075;
 8000caa:	4b65      	ldr	r3, [pc, #404]	; (8000e40 <_DisplayFormattedOutput+0x1f0>)
 8000cac:	64bb      	str	r3, [r7, #72]	; 0x48
	char out_dcvolts[10] = "";
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60bb      	str	r3, [r7, #8]
 8000cb2:	f107 030c 	add.w	r3, r7, #12
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	809a      	strh	r2, [r3, #4]
	uint8_t out_dcvolts_x = 70;
 8000cbc:	2346      	movs	r3, #70	; 0x46
 8000cbe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint8_t out_dcvolts_y = 130;
 8000cc2:	2382      	movs	r3, #130	; 0x82
 8000cc4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

	// display output in hertz
	snprintf(out_hertz, sizeof(out_hertz), "%4.2f Hz", SM_GetOutputInHertz());
 8000cc8:	f003 f9d0 	bl	800406c <SM_GetOutputInHertz>
 8000ccc:	ee10 3a10 	vmov	r3, s0
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fc61 	bl	8000598 <__aeabi_f2d>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	460c      	mov	r4, r1
 8000cda:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000cde:	e9cd 3400 	strd	r3, r4, [sp]
 8000ce2:	4a58      	ldr	r2, [pc, #352]	; (8000e44 <_DisplayFormattedOutput+0x1f4>)
 8000ce4:	210d      	movs	r1, #13
 8000ce6:	f00c fb6d 	bl	800d3c4 <sniprintf>
	ILI9341_Draw_Text(out_hertz, out_hertz_x, out_hertz_y, BLACK, 3, WHITE);
 8000cea:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000cee:	b299      	uxth	r1, r3
 8000cf0:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8000cf4:	b29a      	uxth	r2, r3
 8000cf6:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000cfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cfe:	9301      	str	r3, [sp, #4]
 8000d00:	2303      	movs	r3, #3
 8000d02:	9300      	str	r3, [sp, #0]
 8000d04:	2300      	movs	r3, #0
 8000d06:	f00b f811 	bl	800bd2c <ILI9341_Draw_Text>

	// display output in volts peak-to-peak and decibels
	VppEncoderPreset_t *pVppPresetTmp =  VPP_GetVppPresetObject(SIGNAL_OUTPUT_PRESET);
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f003 ff48 	bl	8004ba0 <VPP_GetVppPresetObject>
 8000d10:	6438      	str	r0, [r7, #64]	; 0x40
	if(pVppPresetTmp)
 8000d12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d016      	beq.n	8000d46 <_DisplayFormattedOutput+0xf6>
	{
		snprintf(out_vpp, sizeof(out_vpp), "%2.2f Vpp", pVppPresetTmp->Vpp_target);
 8000d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fc3b 	bl	8000598 <__aeabi_f2d>
 8000d22:	4603      	mov	r3, r0
 8000d24:	460c      	mov	r4, r1
 8000d26:	f107 0020 	add.w	r0, r7, #32
 8000d2a:	e9cd 3400 	strd	r3, r4, [sp]
 8000d2e:	4a46      	ldr	r2, [pc, #280]	; (8000e48 <_DisplayFormattedOutput+0x1f8>)
 8000d30:	2110      	movs	r1, #16
 8000d32:	f00c fb47 	bl	800d3c4 <sniprintf>
		snprintf(out_decibels, sizeof(out_decibels), "%s", pVppPresetTmp->gain_decibels);
 8000d36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d38:	68db      	ldr	r3, [r3, #12]
 8000d3a:	f107 0014 	add.w	r0, r7, #20
 8000d3e:	4a43      	ldr	r2, [pc, #268]	; (8000e4c <_DisplayFormattedOutput+0x1fc>)
 8000d40:	210b      	movs	r1, #11
 8000d42:	f00c fb3f 	bl	800d3c4 <sniprintf>
	}
	ILI9341_Draw_Text(out_vpp, out_vpp_x, out_vpp_y, BLACK, 3, WHITE);
 8000d46:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8000d4a:	b299      	uxth	r1, r3
 8000d4c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	f107 0020 	add.w	r0, r7, #32
 8000d56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d5a:	9301      	str	r3, [sp, #4]
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	9300      	str	r3, [sp, #0]
 8000d60:	2300      	movs	r3, #0
 8000d62:	f00a ffe3 	bl	800bd2c <ILI9341_Draw_Text>
	ILI9341_Draw_Text(out_decibels, out_decibels_x, out_decibels_y, BLACK, 3, WHITE);
 8000d66:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000d6a:	b299      	uxth	r1, r3
 8000d6c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000d70:	b29a      	uxth	r2, r3
 8000d72:	f107 0014 	add.w	r0, r7, #20
 8000d76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d7a:	9301      	str	r3, [sp, #4]
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	9300      	str	r3, [sp, #0]
 8000d80:	2300      	movs	r3, #0
 8000d82:	f00a ffd3 	bl	800bd2c <ILI9341_Draw_Text>



	// display output bias in +/- Volts
	float dc_volts;
	(BO_GetOutputBias() == 0) ? (dc_volts = 0) : (dc_volts = volts_per_thou * (float)BO_GetOutputBias());
 8000d86:	f002 fd1b 	bl	80037c0 <BO_GetOutputBias>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d103      	bne.n	8000d98 <_DisplayFormattedOutput+0x148>
 8000d90:	f04f 0300 	mov.w	r3, #0
 8000d94:	657b      	str	r3, [r7, #84]	; 0x54
 8000d96:	e00b      	b.n	8000db0 <_DisplayFormattedOutput+0x160>
 8000d98:	f002 fd12 	bl	80037c0 <BO_GetOutputBias>
 8000d9c:	ee07 0a90 	vmov	s15, r0
 8000da0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000da4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000da8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dac:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

	snprintf(out_dcvolts, sizeof(out_dcvolts), "%1.4f v", dc_volts);
 8000db0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000db2:	f7ff fbf1 	bl	8000598 <__aeabi_f2d>
 8000db6:	4603      	mov	r3, r0
 8000db8:	460c      	mov	r4, r1
 8000dba:	f107 0008 	add.w	r0, r7, #8
 8000dbe:	e9cd 3400 	strd	r3, r4, [sp]
 8000dc2:	4a23      	ldr	r2, [pc, #140]	; (8000e50 <_DisplayFormattedOutput+0x200>)
 8000dc4:	210a      	movs	r1, #10
 8000dc6:	f00c fafd 	bl	800d3c4 <sniprintf>
	if(BO_GetBiasPolarity())
 8000dca:	f002 fc99 	bl	8003700 <BO_GetBiasPolarity>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d018      	beq.n	8000e06 <_DisplayFormattedOutput+0x1b6>
	{
		char symbol[2] = "+\0";
 8000dd4:	4b1f      	ldr	r3, [pc, #124]	; (8000e54 <_DisplayFormattedOutput+0x204>)
 8000dd6:	881b      	ldrh	r3, [r3, #0]
 8000dd8:	80bb      	strh	r3, [r7, #4]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, BLACK, 3, WHITE);
 8000dda:	f107 0208 	add.w	r2, r7, #8
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	4611      	mov	r1, r2
 8000de2:	4618      	mov	r0, r3
 8000de4:	f00c fb22 	bl	800d42c <strcat>
 8000de8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000dec:	b299      	uxth	r1, r3
 8000dee:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000df2:	b29a      	uxth	r2, r3
 8000df4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000df8:	9301      	str	r3, [sp, #4]
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	9300      	str	r3, [sp, #0]
 8000dfe:	2300      	movs	r3, #0
 8000e00:	f00a ff94 	bl	800bd2c <ILI9341_Draw_Text>
	{
		char symbol[2] = "-\0";
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, BLACK, 3, WHITE);
	}

}
 8000e04:	e017      	b.n	8000e36 <_DisplayFormattedOutput+0x1e6>
		char symbol[2] = "-\0";
 8000e06:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <_DisplayFormattedOutput+0x208>)
 8000e08:	881b      	ldrh	r3, [r3, #0]
 8000e0a:	803b      	strh	r3, [r7, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, BLACK, 3, WHITE);
 8000e0c:	f107 0208 	add.w	r2, r7, #8
 8000e10:	463b      	mov	r3, r7
 8000e12:	4611      	mov	r1, r2
 8000e14:	4618      	mov	r0, r3
 8000e16:	f00c fb09 	bl	800d42c <strcat>
 8000e1a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000e1e:	b299      	uxth	r1, r3
 8000e20:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000e24:	b29a      	uxth	r2, r3
 8000e26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e2a:	9301      	str	r3, [sp, #4]
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	9300      	str	r3, [sp, #0]
 8000e30:	2300      	movs	r3, #0
 8000e32:	f00a ff7b 	bl	800bd2c <ILI9341_Draw_Text>
}
 8000e36:	bf00      	nop
 8000e38:	375c      	adds	r7, #92	; 0x5c
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd90      	pop	{r4, r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	3a449ba6 	.word	0x3a449ba6
 8000e44:	0800f2a0 	.word	0x0800f2a0
 8000e48:	0800f2ac 	.word	0x0800f2ac
 8000e4c:	0800f2b8 	.word	0x0800f2b8
 8000e50:	0800f2bc 	.word	0x0800f2bc
 8000e54:	0800f2c4 	.word	0x0800f2c4
 8000e58:	0800f2c8 	.word	0x0800f2c8

08000e5c <DM_UpdateDisplay>:
 *	@param None
 *	@retval None
 *
 */
void DM_UpdateDisplay()
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af02      	add	r7, sp, #8


	if(eNextFuncMenuStatus)		//  == ENABLE_FUNCMENU
 8000e62:	4b6b      	ldr	r3, [pc, #428]	; (8001010 <DM_UpdateDisplay+0x1b4>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d013      	beq.n	8000e92 <DM_UpdateDisplay+0x36>
	{
		switch(eNextFuncMenuStatus)
 8000e6a:	4b69      	ldr	r3, [pc, #420]	; (8001010 <DM_UpdateDisplay+0x1b4>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d009      	beq.n	8000e86 <DM_UpdateDisplay+0x2a>
 8000e72:	2b03      	cmp	r3, #3
 8000e74:	d00a      	beq.n	8000e8c <DM_UpdateDisplay+0x30>
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d000      	beq.n	8000e7c <DM_UpdateDisplay+0x20>
				FuncMenu_DrawSyncMenu();

				break;

			default:
				break;
 8000e7a:	e09a      	b.n	8000fb2 <DM_UpdateDisplay+0x156>
				_DisplayFormattedOutput();
 8000e7c:	f7ff fee8 	bl	8000c50 <_DisplayFormattedOutput>
				FuncMenu_DrawMainMenu();
 8000e80:	f001 fd28 	bl	80028d4 <FuncMenu_DrawMainMenu>
				break;
 8000e84:	e095      	b.n	8000fb2 <DM_UpdateDisplay+0x156>
				FuncMenu_DrawSignalMenu();
 8000e86:	f001 fd6b 	bl	8002960 <FuncMenu_DrawSignalMenu>
				break;
 8000e8a:	e092      	b.n	8000fb2 <DM_UpdateDisplay+0x156>
				FuncMenu_DrawSyncMenu();
 8000e8c:	f001 ff44 	bl	8002d18 <FuncMenu_DrawSyncMenu>
				break;
 8000e90:	e08f      	b.n	8000fb2 <DM_UpdateDisplay+0x156>
		}

	}
	else if(eNextGainMenuStatus)		//  == ENABLE_GAINMENU
 8000e92:	4b60      	ldr	r3, [pc, #384]	; (8001014 <DM_UpdateDisplay+0x1b8>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d017      	beq.n	8000eca <DM_UpdateDisplay+0x6e>
	{

		switch(eNextGainMenuStatus)
 8000e9a:	4b5e      	ldr	r3, [pc, #376]	; (8001014 <DM_UpdateDisplay+0x1b8>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d009      	beq.n	8000eb6 <DM_UpdateDisplay+0x5a>
 8000ea2:	2b03      	cmp	r3, #3
 8000ea4:	d00c      	beq.n	8000ec0 <DM_UpdateDisplay+0x64>
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d000      	beq.n	8000eac <DM_UpdateDisplay+0x50>
				GainMenu_DrawSyncMenu();

				break;

			default:
				break;
 8000eaa:	e082      	b.n	8000fb2 <DM_UpdateDisplay+0x156>
				_DisplayFormattedOutput();
 8000eac:	f7ff fed0 	bl	8000c50 <_DisplayFormattedOutput>
				GainMenu_DrawMainMenu();
 8000eb0:	f001 ff46 	bl	8002d40 <GainMenu_DrawMainMenu>
				break;
 8000eb4:	e07d      	b.n	8000fb2 <DM_UpdateDisplay+0x156>
				_DisplayFormattedOutput();
 8000eb6:	f7ff fecb 	bl	8000c50 <_DisplayFormattedOutput>
				GainMenu_DrawSignalMenu();
 8000eba:	f001 ff87 	bl	8002dcc <GainMenu_DrawSignalMenu>
				break;
 8000ebe:	e078      	b.n	8000fb2 <DM_UpdateDisplay+0x156>
				_DisplayFormattedOutput();
 8000ec0:	f7ff fec6 	bl	8000c50 <_DisplayFormattedOutput>
				GainMenu_DrawSyncMenu();
 8000ec4:	f001 ff96 	bl	8002df4 <GainMenu_DrawSyncMenu>
				break;
 8000ec8:	e073      	b.n	8000fb2 <DM_UpdateDisplay+0x156>
		}

	}

	else if(eNextFreqMenuStatus)		//  frequency menu enabled
 8000eca:	4b53      	ldr	r3, [pc, #332]	; (8001018 <DM_UpdateDisplay+0x1bc>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d02a      	beq.n	8000f28 <DM_UpdateDisplay+0xcc>
	{

		ILI9341_Draw_Text("FREQUENCY MENU", 	30, 10, WHITE, 3, BLACK);
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	9301      	str	r3, [sp, #4]
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	9300      	str	r3, [sp, #0]
 8000eda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ede:	220a      	movs	r2, #10
 8000ee0:	211e      	movs	r1, #30
 8000ee2:	484e      	ldr	r0, [pc, #312]	; (800101c <DM_UpdateDisplay+0x1c0>)
 8000ee4:	f00a ff22 	bl	800bd2c <ILI9341_Draw_Text>
		ILI9341_Draw_Text("1Hz", 24, 210, BLACK, 2, DARKCYAN);
		ILI9341_Draw_Text("100Hz", 93, 210, BLACK, 2, DARKGREEN);
		ILI9341_Draw_Text("1KHz", 175, 210, BLACK, 2, YELLOW);
		ILI9341_Draw_Text("100KHz", 247, 210, BLACK, 2, RED);
*/
		switch(eNextFreqMenuStatus)
 8000ee8:	4b4b      	ldr	r3, [pc, #300]	; (8001018 <DM_UpdateDisplay+0x1bc>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	3b01      	subs	r3, #1
 8000eee:	2b03      	cmp	r3, #3
 8000ef0:	d85e      	bhi.n	8000fb0 <DM_UpdateDisplay+0x154>
 8000ef2:	a201      	add	r2, pc, #4	; (adr r2, 8000ef8 <DM_UpdateDisplay+0x9c>)
 8000ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef8:	08000f09 	.word	0x08000f09
 8000efc:	08000f13 	.word	0x08000f13
 8000f00:	08000f19 	.word	0x08000f19
 8000f04:	08000f23 	.word	0x08000f23
		{
			case ENABLE_FREQ_MAIN_MENU:

				_DisplayFormattedOutput();
 8000f08:	f7ff fea2 	bl	8000c50 <_DisplayFormattedOutput>

				FreqMenu_DrawMainMenu();
 8000f0c:	f000 f9de 	bl	80012cc <FreqMenu_DrawMainMenu>

				break;
 8000f10:	e04f      	b.n	8000fb2 <DM_UpdateDisplay+0x156>

			case ENABLE_FREQ_PRESET_MENU:
				FreqMenu_DrawPresetMenu();
 8000f12:	f000 fa15 	bl	8001340 <FreqMenu_DrawPresetMenu>
				break;
 8000f16:	e04c      	b.n	8000fb2 <DM_UpdateDisplay+0x156>

			case ENABLE_FREQ_ADJUST_MENU:

				_DisplayFormattedOutput();
 8000f18:	f7ff fe9a 	bl	8000c50 <_DisplayFormattedOutput>

				FreqMenu_DrawAdjustMenu();
 8000f1c:	f001 fc96 	bl	800284c <FreqMenu_DrawAdjustMenu>

				break;
 8000f20:	e047      	b.n	8000fb2 <DM_UpdateDisplay+0x156>

			case ENABLE_FREQ_SWEEP_MENU:
				FreqMenu_DrawSweepMenu();
 8000f22:	f001 fcc3 	bl	80028ac <FreqMenu_DrawSweepMenu>
				break;
 8000f26:	e044      	b.n	8000fb2 <DM_UpdateDisplay+0x156>
			default:
				break;
		}

	}
	else if(eNextBiasMenuStatus)		//  == ENABLE_BIASMENU
 8000f28:	4b3d      	ldr	r3, [pc, #244]	; (8001020 <DM_UpdateDisplay+0x1c4>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d004      	beq.n	8000f3a <DM_UpdateDisplay+0xde>
		ILI9341_Draw_Text("    ", 10, 210, BLACK, 2, DARKCYAN);
		ILI9341_Draw_Text("    ", 100, 210, BLACK, 2, DARKGREEN);
		ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
		ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
*/
		_DisplayFormattedOutput();
 8000f30:	f7ff fe8e 	bl	8000c50 <_DisplayFormattedOutput>
		_DrawBiasSelectMenu();
 8000f34:	f000 f8c4 	bl	80010c0 <_DrawBiasSelectMenu>
 8000f38:	e03b      	b.n	8000fb2 <DM_UpdateDisplay+0x156>
	}
	else
	{
		ILI9341_Draw_Text("SIGNAL GENERATOR", 	10, 10, WHITE, 3, BLACK);
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	9301      	str	r3, [sp, #4]
 8000f3e:	2303      	movs	r3, #3
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f46:	220a      	movs	r2, #10
 8000f48:	210a      	movs	r1, #10
 8000f4a:	4836      	ldr	r0, [pc, #216]	; (8001024 <DM_UpdateDisplay+0x1c8>)
 8000f4c:	f00a feee 	bl	800bd2c <ILI9341_Draw_Text>
		_DisplayFormattedOutput();
 8000f50:	f7ff fe7e 	bl	8000c50 <_DisplayFormattedOutput>

		ILI9341_Draw_Text("FUNC", 10, 210, BLACK, 2, DARKCYAN);
 8000f54:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8000f58:	9301      	str	r3, [sp, #4]
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	2300      	movs	r3, #0
 8000f60:	22d2      	movs	r2, #210	; 0xd2
 8000f62:	210a      	movs	r1, #10
 8000f64:	4830      	ldr	r0, [pc, #192]	; (8001028 <DM_UpdateDisplay+0x1cc>)
 8000f66:	f00a fee1 	bl	800bd2c <ILI9341_Draw_Text>
		ILI9341_Draw_Text("FREQ", 100, 210, BLACK, 2, DARKGREEN);
 8000f6a:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000f6e:	9301      	str	r3, [sp, #4]
 8000f70:	2302      	movs	r3, #2
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	2300      	movs	r3, #0
 8000f76:	22d2      	movs	r2, #210	; 0xd2
 8000f78:	2164      	movs	r1, #100	; 0x64
 8000f7a:	482c      	ldr	r0, [pc, #176]	; (800102c <DM_UpdateDisplay+0x1d0>)
 8000f7c:	f00a fed6 	bl	800bd2c <ILI9341_Draw_Text>
		ILI9341_Draw_Text("GAIN", 175, 210, BLACK, 2, YELLOW);
 8000f80:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000f84:	9301      	str	r3, [sp, #4]
 8000f86:	2302      	movs	r3, #2
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	22d2      	movs	r2, #210	; 0xd2
 8000f8e:	21af      	movs	r1, #175	; 0xaf
 8000f90:	4827      	ldr	r0, [pc, #156]	; (8001030 <DM_UpdateDisplay+0x1d4>)
 8000f92:	f00a fecb 	bl	800bd2c <ILI9341_Draw_Text>
		ILI9341_Draw_Text("BIAS", 260, 210, BLACK, 2, RED);
 8000f96:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000f9a:	9301      	str	r3, [sp, #4]
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	22d2      	movs	r2, #210	; 0xd2
 8000fa4:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000fa8:	4822      	ldr	r0, [pc, #136]	; (8001034 <DM_UpdateDisplay+0x1d8>)
 8000faa:	f00a febf 	bl	800bd2c <ILI9341_Draw_Text>
 8000fae:	e000      	b.n	8000fb2 <DM_UpdateDisplay+0x156>
				break;
 8000fb0:	bf00      	nop
	}

#ifdef ENCODER_DEBUG
	char encoder_value[5] = "";
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	603b      	str	r3, [r7, #0]
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	713b      	strb	r3, [r7, #4]
	//snprintf(tim1tmp, sizeof(tim1tmp), "%lu", ENCODER_TIMER->CNT);
	if(DM_AddDigitPadding(ENCODER_TIMER->CNT, encoder_value, sizeof(encoder_value)) == 0)
 8000fba:	4b1f      	ldr	r3, [pc, #124]	; (8001038 <DM_UpdateDisplay+0x1dc>)
 8000fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	4639      	mov	r1, r7
 8000fc2:	2205      	movs	r2, #5
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f000 f8fb 	bl	80011c0 <DM_AddDigitPadding>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d10b      	bne.n	8000fe8 <DM_UpdateDisplay+0x18c>
		ILI9341_Draw_Text(encoder_value, 280, 190, BLACK, 1, RED);
 8000fd0:	4638      	mov	r0, r7
 8000fd2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000fd6:	9301      	str	r3, [sp, #4]
 8000fd8:	2301      	movs	r3, #1
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	2300      	movs	r3, #0
 8000fde:	22be      	movs	r2, #190	; 0xbe
 8000fe0:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000fe4:	f00a fea2 	bl	800bd2c <ILI9341_Draw_Text>
#endif //ENCODER_DEBUG

	if(*ErrorDebugMsg)
 8000fe8:	4b14      	ldr	r3, [pc, #80]	; (800103c <DM_UpdateDisplay+0x1e0>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d00a      	beq.n	8001006 <DM_UpdateDisplay+0x1aa>
		ILI9341_Draw_Text(ErrorDebugMsg, 10, 190, BLACK, 1, RED);
 8000ff0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000ff4:	9301      	str	r3, [sp, #4]
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	22be      	movs	r2, #190	; 0xbe
 8000ffe:	210a      	movs	r1, #10
 8001000:	480e      	ldr	r0, [pc, #56]	; (800103c <DM_UpdateDisplay+0x1e0>)
 8001002:	f00a fe93 	bl	800bd2c <ILI9341_Draw_Text>

}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20001ed4 	.word	0x20001ed4
 8001014:	20001ed5 	.word	0x20001ed5
 8001018:	20001ed6 	.word	0x20001ed6
 800101c:	0800f2cc 	.word	0x0800f2cc
 8001020:	20001ed7 	.word	0x20001ed7
 8001024:	0800f2dc 	.word	0x0800f2dc
 8001028:	0800f2f0 	.word	0x0800f2f0
 800102c:	0800f2f8 	.word	0x0800f2f8
 8001030:	0800f300 	.word	0x0800f300
 8001034:	0800f308 	.word	0x0800f308
 8001038:	40012c00 	.word	0x40012c00
 800103c:	20001ed8 	.word	0x20001ed8

08001040 <DM_ShowFuncMenu>:
 *	@param None
 *	@retval None
 *
 */
void DM_ShowFuncMenu(eFuncMenu_Status pValue)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
	eNextFuncMenuStatus = pValue;
 800104a:	4a04      	ldr	r2, [pc, #16]	; (800105c <DM_ShowFuncMenu+0x1c>)
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	7013      	strb	r3, [r2, #0]
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	20001ed4 	.word	0x20001ed4

08001060 <DM_ShowGainMenu>:
 *	@param None
 *	@retval None
 *
 */
void DM_ShowGainMenu(eGainMenu_Status pValue)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	71fb      	strb	r3, [r7, #7]
	eNextGainMenuStatus = pValue;
 800106a:	4a04      	ldr	r2, [pc, #16]	; (800107c <DM_ShowGainMenu+0x1c>)
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	7013      	strb	r3, [r2, #0]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	20001ed5 	.word	0x20001ed5

08001080 <DM_ShowFreqMenu>:
 *	@param None
 *	@retval None
 *
 */
void DM_ShowFreqMenu(eFreqMenu_Status pValue)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
	eNextFreqMenuStatus = pValue;
 800108a:	4a04      	ldr	r2, [pc, #16]	; (800109c <DM_ShowFreqMenu+0x1c>)
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	7013      	strb	r3, [r2, #0]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	20001ed6 	.word	0x20001ed6

080010a0 <DM_ShowBiasSelectMenu>:
 *	@param None
 *	@retval None
 *
 */
void DM_ShowBiasSelectMenu(eBiasMenu_Status pValue)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
	eNextBiasMenuStatus = pValue;
 80010aa:	4a04      	ldr	r2, [pc, #16]	; (80010bc <DM_ShowBiasSelectMenu+0x1c>)
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	7013      	strb	r3, [r2, #0]
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	20001ed7 	.word	0x20001ed7

080010c0 <_DrawBiasSelectMenu>:
 *	@param None
 *	@retval None
 *
 */
void _DrawBiasSelectMenu()
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("ADJUST DC BIAS", 	30, 10, WHITE, 3, BLACK);
 80010c6:	2300      	movs	r3, #0
 80010c8:	9301      	str	r3, [sp, #4]
 80010ca:	2303      	movs	r3, #3
 80010cc:	9300      	str	r3, [sp, #0]
 80010ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010d2:	220a      	movs	r2, #10
 80010d4:	211e      	movs	r1, #30
 80010d6:	4803      	ldr	r0, [pc, #12]	; (80010e4 <_DrawBiasSelectMenu+0x24>)
 80010d8:	f00a fe28 	bl	800bd2c <ILI9341_Draw_Text>

}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	0800f310 	.word	0x0800f310

080010e8 <DM_DigitCount>:
 *	@param None
 *	@retval None
 *
 */
int DM_DigitCount(int num)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	if(num < 10)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b09      	cmp	r3, #9
 80010f4:	dc01      	bgt.n	80010fa <DM_DigitCount+0x12>
		return 1;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e018      	b.n	800112c <DM_DigitCount+0x44>
	if(num < 100)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2b63      	cmp	r3, #99	; 0x63
 80010fe:	dc01      	bgt.n	8001104 <DM_DigitCount+0x1c>
		return 2;
 8001100:	2302      	movs	r3, #2
 8001102:	e013      	b.n	800112c <DM_DigitCount+0x44>
	if(num < 1000)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800110a:	da01      	bge.n	8001110 <DM_DigitCount+0x28>
		return 3;
 800110c:	2303      	movs	r3, #3
 800110e:	e00d      	b.n	800112c <DM_DigitCount+0x44>
	if(num < 10000)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f242 720f 	movw	r2, #9999	; 0x270f
 8001116:	4293      	cmp	r3, r2
 8001118:	dc01      	bgt.n	800111e <DM_DigitCount+0x36>
		return 4;
 800111a:	2304      	movs	r3, #4
 800111c:	e006      	b.n	800112c <DM_DigitCount+0x44>
	if(num < 100000)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a05      	ldr	r2, [pc, #20]	; (8001138 <DM_DigitCount+0x50>)
 8001122:	4293      	cmp	r3, r2
 8001124:	dc01      	bgt.n	800112a <DM_DigitCount+0x42>
		return 5;
 8001126:	2305      	movs	r3, #5
 8001128:	e000      	b.n	800112c <DM_DigitCount+0x44>
	else
		return 0;
 800112a:	2300      	movs	r3, #0
}
 800112c:	4618      	mov	r0, r3
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	0001869f 	.word	0x0001869f

0800113c <DM_RefreshBackgroundLayout>:
 *	@param None
 *	@retval None
 *
 */
void DM_RefreshBackgroundLayout()
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af04      	add	r7, sp, #16


	//ILI9341_Fill_Screen(WHITE);
	ILI9341_FillScreenGradient();
 8001142:	f00a fe21 	bl	800bd88 <ILI9341_FillScreenGradient>

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[0],
 8001146:	4b1d      	ldr	r3, [pc, #116]	; (80011bc <DM_RefreshBackgroundLayout+0x80>)
 8001148:	8818      	ldrh	r0, [r3, #0]
 800114a:	2300      	movs	r3, #0
 800114c:	9302      	str	r3, [sp, #8]
 800114e:	2302      	movs	r3, #2
 8001150:	9301      	str	r3, [sp, #4]
 8001152:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	2332      	movs	r3, #50	; 0x32
 800115a:	2250      	movs	r2, #80	; 0x50
 800115c:	21c8      	movs	r1, #200	; 0xc8
 800115e:	f00a fc7b 	bl	800ba58 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKCYAN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[1],
 8001162:	4b16      	ldr	r3, [pc, #88]	; (80011bc <DM_RefreshBackgroundLayout+0x80>)
 8001164:	8858      	ldrh	r0, [r3, #2]
 8001166:	2300      	movs	r3, #0
 8001168:	9302      	str	r3, [sp, #8]
 800116a:	2302      	movs	r3, #2
 800116c:	9301      	str	r3, [sp, #4]
 800116e:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	2332      	movs	r3, #50	; 0x32
 8001176:	2250      	movs	r2, #80	; 0x50
 8001178:	21c8      	movs	r1, #200	; 0xc8
 800117a:	f00a fc6d 	bl	800ba58 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKGREEN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[2],
 800117e:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <DM_RefreshBackgroundLayout+0x80>)
 8001180:	8898      	ldrh	r0, [r3, #4]
 8001182:	2300      	movs	r3, #0
 8001184:	9302      	str	r3, [sp, #8]
 8001186:	2302      	movs	r3, #2
 8001188:	9301      	str	r3, [sp, #4]
 800118a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	2332      	movs	r3, #50	; 0x32
 8001192:	2250      	movs	r2, #80	; 0x50
 8001194:	21c8      	movs	r1, #200	; 0xc8
 8001196:	f00a fc5f 	bl	800ba58 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													YELLOW,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[3],
 800119a:	4b08      	ldr	r3, [pc, #32]	; (80011bc <DM_RefreshBackgroundLayout+0x80>)
 800119c:	88d8      	ldrh	r0, [r3, #6]
 800119e:	2300      	movs	r3, #0
 80011a0:	9302      	str	r3, [sp, #8]
 80011a2:	2302      	movs	r3, #2
 80011a4:	9301      	str	r3, [sp, #4]
 80011a6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	2332      	movs	r3, #50	; 0x32
 80011ae:	2250      	movs	r2, #80	; 0x50
 80011b0:	21c8      	movs	r1, #200	; 0xc8
 80011b2:	f00a fc51 	bl	800ba58 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_WIDTH,
													BTN_HEIGHT,
													RED,
													BORDER_SIZE,
													BLACK);
}
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000000 	.word	0x20000000

080011c0 <DM_AddDigitPadding>:
 *			1 if buflen is invalid size
 *			2 unknown error
 *
 */
int DM_AddDigitPadding(uint16_t num, char *buffer, uint16_t buflen)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	6039      	str	r1, [r7, #0]
 80011ca:	80fb      	strh	r3, [r7, #6]
 80011cc:	4613      	mov	r3, r2
 80011ce:	80bb      	strh	r3, [r7, #4]
	if((buflen < 1) || (buflen > 6))
 80011d0:	88bb      	ldrh	r3, [r7, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d002      	beq.n	80011dc <DM_AddDigitPadding+0x1c>
 80011d6:	88bb      	ldrh	r3, [r7, #4]
 80011d8:	2b06      	cmp	r3, #6
 80011da:	d904      	bls.n	80011e6 <DM_AddDigitPadding+0x26>
	{
		DM_SetErrorDebugMsg("DM_AddDigitPadding: invalid input string size");
 80011dc:	482a      	ldr	r0, [pc, #168]	; (8001288 <DM_AddDigitPadding+0xc8>)
 80011de:	f000 f863 	bl	80012a8 <DM_SetErrorDebugMsg>
		return 1;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e04c      	b.n	8001280 <DM_AddDigitPadding+0xc0>
	}

	//char* tmpbuf = malloc(sizeof(buffer) * buflen);

	uint16_t tmpcnt = num;
 80011e6:	88fb      	ldrh	r3, [r7, #6]
 80011e8:	81fb      	strh	r3, [r7, #14]
	switch(DM_DigitCount(tmpcnt))
 80011ea:	89fb      	ldrh	r3, [r7, #14]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff7b 	bl	80010e8 <DM_DigitCount>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b05      	cmp	r3, #5
 80011f6:	d83f      	bhi.n	8001278 <DM_AddDigitPadding+0xb8>
 80011f8:	a201      	add	r2, pc, #4	; (adr r2, 8001200 <DM_AddDigitPadding+0x40>)
 80011fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011fe:	bf00      	nop
 8001200:	08001219 	.word	0x08001219
 8001204:	08001229 	.word	0x08001229
 8001208:	08001239 	.word	0x08001239
 800120c:	08001249 	.word	0x08001249
 8001210:	08001259 	.word	0x08001259
 8001214:	08001269 	.word	0x08001269
	{

		case 0:
			snprintf(buffer,buflen, "     ");
 8001218:	88bb      	ldrh	r3, [r7, #4]
 800121a:	4a1c      	ldr	r2, [pc, #112]	; (800128c <DM_AddDigitPadding+0xcc>)
 800121c:	4619      	mov	r1, r3
 800121e:	6838      	ldr	r0, [r7, #0]
 8001220:	f00c f8d0 	bl	800d3c4 <sniprintf>
			return 0;
 8001224:	2300      	movs	r3, #0
 8001226:	e02b      	b.n	8001280 <DM_AddDigitPadding+0xc0>
		case 1:
			snprintf(buffer, buflen, "%u    ", tmpcnt);
 8001228:	88b9      	ldrh	r1, [r7, #4]
 800122a:	89fb      	ldrh	r3, [r7, #14]
 800122c:	4a18      	ldr	r2, [pc, #96]	; (8001290 <DM_AddDigitPadding+0xd0>)
 800122e:	6838      	ldr	r0, [r7, #0]
 8001230:	f00c f8c8 	bl	800d3c4 <sniprintf>
			return 0;
 8001234:	2300      	movs	r3, #0
 8001236:	e023      	b.n	8001280 <DM_AddDigitPadding+0xc0>
		case 2:
			snprintf(buffer, buflen, "%u   ", tmpcnt);
 8001238:	88b9      	ldrh	r1, [r7, #4]
 800123a:	89fb      	ldrh	r3, [r7, #14]
 800123c:	4a15      	ldr	r2, [pc, #84]	; (8001294 <DM_AddDigitPadding+0xd4>)
 800123e:	6838      	ldr	r0, [r7, #0]
 8001240:	f00c f8c0 	bl	800d3c4 <sniprintf>
			return 0;
 8001244:	2300      	movs	r3, #0
 8001246:	e01b      	b.n	8001280 <DM_AddDigitPadding+0xc0>
		case 3:
			snprintf(buffer, buflen, "%u  ", tmpcnt);
 8001248:	88b9      	ldrh	r1, [r7, #4]
 800124a:	89fb      	ldrh	r3, [r7, #14]
 800124c:	4a12      	ldr	r2, [pc, #72]	; (8001298 <DM_AddDigitPadding+0xd8>)
 800124e:	6838      	ldr	r0, [r7, #0]
 8001250:	f00c f8b8 	bl	800d3c4 <sniprintf>
			return 0;
 8001254:	2300      	movs	r3, #0
 8001256:	e013      	b.n	8001280 <DM_AddDigitPadding+0xc0>
		case 4:
			snprintf(buffer, buflen, "%u ", tmpcnt);
 8001258:	88b9      	ldrh	r1, [r7, #4]
 800125a:	89fb      	ldrh	r3, [r7, #14]
 800125c:	4a0f      	ldr	r2, [pc, #60]	; (800129c <DM_AddDigitPadding+0xdc>)
 800125e:	6838      	ldr	r0, [r7, #0]
 8001260:	f00c f8b0 	bl	800d3c4 <sniprintf>
			return 0;
 8001264:	2300      	movs	r3, #0
 8001266:	e00b      	b.n	8001280 <DM_AddDigitPadding+0xc0>
		case 5:
			snprintf(buffer, buflen, "%u", tmpcnt);
 8001268:	88b9      	ldrh	r1, [r7, #4]
 800126a:	89fb      	ldrh	r3, [r7, #14]
 800126c:	4a0c      	ldr	r2, [pc, #48]	; (80012a0 <DM_AddDigitPadding+0xe0>)
 800126e:	6838      	ldr	r0, [r7, #0]
 8001270:	f00c f8a8 	bl	800d3c4 <sniprintf>
			return 0;
 8001274:	2300      	movs	r3, #0
 8001276:	e003      	b.n	8001280 <DM_AddDigitPadding+0xc0>

	}
	DM_SetErrorDebugMsg("DM_AddDigitPadding: unknown error");
 8001278:	480a      	ldr	r0, [pc, #40]	; (80012a4 <DM_AddDigitPadding+0xe4>)
 800127a:	f000 f815 	bl	80012a8 <DM_SetErrorDebugMsg>
	return 2;
 800127e:	2302      	movs	r3, #2


}
 8001280:	4618      	mov	r0, r3
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	0800f358 	.word	0x0800f358
 800128c:	0800f388 	.word	0x0800f388
 8001290:	0800f390 	.word	0x0800f390
 8001294:	0800f398 	.word	0x0800f398
 8001298:	0800f3a0 	.word	0x0800f3a0
 800129c:	0800f3a8 	.word	0x0800f3a8
 80012a0:	0800f3ac 	.word	0x0800f3ac
 80012a4:	0800f3b0 	.word	0x0800f3b0

080012a8 <DM_SetErrorDebugMsg>:
	ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
	*/
}

void DM_SetErrorDebugMsg(char* msg)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
	snprintf(ErrorDebugMsg, sizeof(ErrorDebugMsg), "%s", msg);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4a04      	ldr	r2, [pc, #16]	; (80012c4 <DM_SetErrorDebugMsg+0x1c>)
 80012b4:	212d      	movs	r1, #45	; 0x2d
 80012b6:	4804      	ldr	r0, [pc, #16]	; (80012c8 <DM_SetErrorDebugMsg+0x20>)
 80012b8:	f00c f884 	bl	800d3c4 <sniprintf>
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	0800f2b8 	.word	0x0800f2b8
 80012c8:	20001ed8 	.word	0x20001ed8

080012cc <FreqMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMainMenu()
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af02      	add	r7, sp, #8
	// main
	ILI9341_Draw_Text("Select an option below", 	30, 165, BLACK, 2, WHITE);
 80012d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012d6:	9301      	str	r3, [sp, #4]
 80012d8:	2302      	movs	r3, #2
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	2300      	movs	r3, #0
 80012de:	22a5      	movs	r2, #165	; 0xa5
 80012e0:	211e      	movs	r1, #30
 80012e2:	4813      	ldr	r0, [pc, #76]	; (8001330 <FreqMenu_DrawMainMenu+0x64>)
 80012e4:	f00a fd22 	bl	800bd2c <ILI9341_Draw_Text>

	// buttons
	ILI9341_Draw_Text("PRESET", 5, 210, BLACK, 2, DARKCYAN);
 80012e8:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80012ec:	9301      	str	r3, [sp, #4]
 80012ee:	2302      	movs	r3, #2
 80012f0:	9300      	str	r3, [sp, #0]
 80012f2:	2300      	movs	r3, #0
 80012f4:	22d2      	movs	r2, #210	; 0xd2
 80012f6:	2105      	movs	r1, #5
 80012f8:	480e      	ldr	r0, [pc, #56]	; (8001334 <FreqMenu_DrawMainMenu+0x68>)
 80012fa:	f00a fd17 	bl	800bd2c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("ADJUST", 87, 210, BLACK, 2, DARKGREEN);
 80012fe:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001302:	9301      	str	r3, [sp, #4]
 8001304:	2302      	movs	r3, #2
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	2300      	movs	r3, #0
 800130a:	22d2      	movs	r2, #210	; 0xd2
 800130c:	2157      	movs	r1, #87	; 0x57
 800130e:	480a      	ldr	r0, [pc, #40]	; (8001338 <FreqMenu_DrawMainMenu+0x6c>)
 8001310:	f00a fd0c 	bl	800bd2c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SWEEP", 174, 210, BLACK, 2, YELLOW);
 8001314:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001318:	9301      	str	r3, [sp, #4]
 800131a:	2302      	movs	r3, #2
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	2300      	movs	r3, #0
 8001320:	22d2      	movs	r2, #210	; 0xd2
 8001322:	21ae      	movs	r1, #174	; 0xae
 8001324:	4805      	ldr	r0, [pc, #20]	; (800133c <FreqMenu_DrawMainMenu+0x70>)
 8001326:	f00a fd01 	bl	800bd2c <ILI9341_Draw_Text>
	//ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	0800f3d4 	.word	0x0800f3d4
 8001334:	0800f3ec 	.word	0x0800f3ec
 8001338:	0800f3f4 	.word	0x0800f3f4
 800133c:	0800f3fc 	.word	0x0800f3fc

08001340 <FreqMenu_DrawPresetMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawPresetMenu()
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af02      	add	r7, sp, #8

	uint8_t menu_pos_y1 = 50;
 8001346:	2332      	movs	r3, #50	; 0x32
 8001348:	73fb      	strb	r3, [r7, #15]
	uint8_t menu_pos_y2 = 70;
 800134a:	2346      	movs	r3, #70	; 0x46
 800134c:	73bb      	strb	r3, [r7, #14]
	uint8_t menu_pos_y3 = 90;
 800134e:	235a      	movs	r3, #90	; 0x5a
 8001350:	737b      	strb	r3, [r7, #13]
	uint8_t menu_pos_y4 = 110;
 8001352:	236e      	movs	r3, #110	; 0x6e
 8001354:	733b      	strb	r3, [r7, #12]
	uint8_t menu_pos_y5 = 130;
 8001356:	2382      	movs	r3, #130	; 0x82
 8001358:	72fb      	strb	r3, [r7, #11]
	uint8_t menu_pos_y6 = 150;
 800135a:	2396      	movs	r3, #150	; 0x96
 800135c:	72bb      	strb	r3, [r7, #10]
	uint8_t menu_pos_y7 = 170;
 800135e:	23aa      	movs	r3, #170	; 0xaa
 8001360:	727b      	strb	r3, [r7, #9]
	Freq_Preset_Encoder_Pos_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8001362:	f002 fbe3 	bl	8003b2c <FreqO_GetFPresetObject>
 8001366:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	f001 823f 	beq.w	80027ee <FreqMenu_DrawPresetMenu+0x14ae>
	{
		switch(pFreqPresetTmp->hertz)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001378:	4293      	cmp	r3, r2
 800137a:	f000 8499 	beq.w	8001cb0 <FreqMenu_DrawPresetMenu+0x970>
 800137e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001382:	4293      	cmp	r3, r2
 8001384:	d817      	bhi.n	80013b6 <FreqMenu_DrawPresetMenu+0x76>
 8001386:	2b32      	cmp	r3, #50	; 0x32
 8001388:	f000 81b2 	beq.w	80016f0 <FreqMenu_DrawPresetMenu+0x3b0>
 800138c:	2b32      	cmp	r3, #50	; 0x32
 800138e:	d806      	bhi.n	800139e <FreqMenu_DrawPresetMenu+0x5e>
 8001390:	2b01      	cmp	r3, #1
 8001392:	d038      	beq.n	8001406 <FreqMenu_DrawPresetMenu+0xc6>
 8001394:	2b0a      	cmp	r3, #10
 8001396:	f000 80e0 	beq.w	800155a <FreqMenu_DrawPresetMenu+0x21a>
	else
	{
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		10, 180, RED, 1, BLACK);
	}

}
 800139a:	f001 ba34 	b.w	8002806 <FreqMenu_DrawPresetMenu+0x14c6>
		switch(pFreqPresetTmp->hertz)
 800139e:	2bfa      	cmp	r3, #250	; 0xfa
 80013a0:	f000 8316 	beq.w	80019d0 <FreqMenu_DrawPresetMenu+0x690>
 80013a4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013a8:	f000 83bc 	beq.w	8001b24 <FreqMenu_DrawPresetMenu+0x7e4>
 80013ac:	2b64      	cmp	r3, #100	; 0x64
 80013ae:	f000 8249 	beq.w	8001844 <FreqMenu_DrawPresetMenu+0x504>
}
 80013b2:	f001 ba28 	b.w	8002806 <FreqMenu_DrawPresetMenu+0x14c6>
		switch(pFreqPresetTmp->hertz)
 80013b6:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80013ba:	4293      	cmp	r3, r2
 80013bc:	f000 8756 	beq.w	800226c <FreqMenu_DrawPresetMenu+0xf2c>
 80013c0:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d80f      	bhi.n	80013e8 <FreqMenu_DrawPresetMenu+0xa8>
 80013c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013cc:	4293      	cmp	r3, r2
 80013ce:	f000 85df 	beq.w	8001f90 <FreqMenu_DrawPresetMenu+0xc50>
 80013d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80013d6:	4293      	cmp	r3, r2
 80013d8:	f000 8683 	beq.w	80020e2 <FreqMenu_DrawPresetMenu+0xda2>
 80013dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013e0:	f000 8510 	beq.w	8001e04 <FreqMenu_DrawPresetMenu+0xac4>
}
 80013e4:	f001 ba0f 	b.w	8002806 <FreqMenu_DrawPresetMenu+0x14c6>
		switch(pFreqPresetTmp->hertz)
 80013e8:	4ab1      	ldr	r2, [pc, #708]	; (80016b0 <FreqMenu_DrawPresetMenu+0x370>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	f001 80ac 	beq.w	8002548 <FreqMenu_DrawPresetMenu+0x1208>
 80013f0:	4ab0      	ldr	r2, [pc, #704]	; (80016b4 <FreqMenu_DrawPresetMenu+0x374>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	f001 8151 	beq.w	800269a <FreqMenu_DrawPresetMenu+0x135a>
 80013f8:	f24c 3250 	movw	r2, #50000	; 0xc350
 80013fc:	4293      	cmp	r3, r2
 80013fe:	f000 87de 	beq.w	80023be <FreqMenu_DrawPresetMenu+0x107e>
}
 8001402:	f001 ba00 	b.w	8002806 <FreqMenu_DrawPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, WHITE, 2, BLACK);
 8001406:	7bfb      	ldrb	r3, [r7, #15]
 8001408:	b29a      	uxth	r2, r3
 800140a:	2300      	movs	r3, #0
 800140c:	9301      	str	r3, [sp, #4]
 800140e:	2302      	movs	r3, #2
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001416:	210a      	movs	r1, #10
 8001418:	48a7      	ldr	r0, [pc, #668]	; (80016b8 <FreqMenu_DrawPresetMenu+0x378>)
 800141a:	f00a fc87 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 800141e:	7bbb      	ldrb	r3, [r7, #14]
 8001420:	b29a      	uxth	r2, r3
 8001422:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001426:	9301      	str	r3, [sp, #4]
 8001428:	2302      	movs	r3, #2
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	2300      	movs	r3, #0
 800142e:	210a      	movs	r1, #10
 8001430:	48a2      	ldr	r0, [pc, #648]	; (80016bc <FreqMenu_DrawPresetMenu+0x37c>)
 8001432:	f00a fc7b 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001436:	7b7b      	ldrb	r3, [r7, #13]
 8001438:	b29a      	uxth	r2, r3
 800143a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800143e:	9301      	str	r3, [sp, #4]
 8001440:	2302      	movs	r3, #2
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	2300      	movs	r3, #0
 8001446:	210a      	movs	r1, #10
 8001448:	489d      	ldr	r0, [pc, #628]	; (80016c0 <FreqMenu_DrawPresetMenu+0x380>)
 800144a:	f00a fc6f 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 800144e:	7b3b      	ldrb	r3, [r7, #12]
 8001450:	b29a      	uxth	r2, r3
 8001452:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001456:	9301      	str	r3, [sp, #4]
 8001458:	2302      	movs	r3, #2
 800145a:	9300      	str	r3, [sp, #0]
 800145c:	2300      	movs	r3, #0
 800145e:	210a      	movs	r1, #10
 8001460:	4898      	ldr	r0, [pc, #608]	; (80016c4 <FreqMenu_DrawPresetMenu+0x384>)
 8001462:	f00a fc63 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001466:	7afb      	ldrb	r3, [r7, #11]
 8001468:	b29a      	uxth	r2, r3
 800146a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800146e:	9301      	str	r3, [sp, #4]
 8001470:	2302      	movs	r3, #2
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	2300      	movs	r3, #0
 8001476:	210a      	movs	r1, #10
 8001478:	4893      	ldr	r0, [pc, #588]	; (80016c8 <FreqMenu_DrawPresetMenu+0x388>)
 800147a:	f00a fc57 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 800147e:	7abb      	ldrb	r3, [r7, #10]
 8001480:	b29a      	uxth	r2, r3
 8001482:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001486:	9301      	str	r3, [sp, #4]
 8001488:	2302      	movs	r3, #2
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	2300      	movs	r3, #0
 800148e:	210a      	movs	r1, #10
 8001490:	488e      	ldr	r0, [pc, #568]	; (80016cc <FreqMenu_DrawPresetMenu+0x38c>)
 8001492:	f00a fc4b 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001496:	7a7b      	ldrb	r3, [r7, #9]
 8001498:	b29a      	uxth	r2, r3
 800149a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800149e:	9301      	str	r3, [sp, #4]
 80014a0:	2302      	movs	r3, #2
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	2300      	movs	r3, #0
 80014a6:	210a      	movs	r1, #10
 80014a8:	4889      	ldr	r0, [pc, #548]	; (80016d0 <FreqMenu_DrawPresetMenu+0x390>)
 80014aa:	f00a fc3f 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 80014ae:	7bfb      	ldrb	r3, [r7, #15]
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014b6:	9301      	str	r3, [sp, #4]
 80014b8:	2302      	movs	r3, #2
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	2300      	movs	r3, #0
 80014be:	2178      	movs	r1, #120	; 0x78
 80014c0:	4884      	ldr	r0, [pc, #528]	; (80016d4 <FreqMenu_DrawPresetMenu+0x394>)
 80014c2:	f00a fc33 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 80014c6:	7bbb      	ldrb	r3, [r7, #14]
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014ce:	9301      	str	r3, [sp, #4]
 80014d0:	2302      	movs	r3, #2
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	2300      	movs	r3, #0
 80014d6:	2178      	movs	r1, #120	; 0x78
 80014d8:	487f      	ldr	r0, [pc, #508]	; (80016d8 <FreqMenu_DrawPresetMenu+0x398>)
 80014da:	f00a fc27 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 80014de:	7b7b      	ldrb	r3, [r7, #13]
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014e6:	9301      	str	r3, [sp, #4]
 80014e8:	2302      	movs	r3, #2
 80014ea:	9300      	str	r3, [sp, #0]
 80014ec:	2300      	movs	r3, #0
 80014ee:	2178      	movs	r1, #120	; 0x78
 80014f0:	487a      	ldr	r0, [pc, #488]	; (80016dc <FreqMenu_DrawPresetMenu+0x39c>)
 80014f2:	f00a fc1b 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80014f6:	7b3b      	ldrb	r3, [r7, #12]
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014fe:	9301      	str	r3, [sp, #4]
 8001500:	2302      	movs	r3, #2
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	2300      	movs	r3, #0
 8001506:	2178      	movs	r1, #120	; 0x78
 8001508:	4875      	ldr	r0, [pc, #468]	; (80016e0 <FreqMenu_DrawPresetMenu+0x3a0>)
 800150a:	f00a fc0f 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 800150e:	7afb      	ldrb	r3, [r7, #11]
 8001510:	b29a      	uxth	r2, r3
 8001512:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001516:	9301      	str	r3, [sp, #4]
 8001518:	2302      	movs	r3, #2
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	2300      	movs	r3, #0
 800151e:	2178      	movs	r1, #120	; 0x78
 8001520:	4870      	ldr	r0, [pc, #448]	; (80016e4 <FreqMenu_DrawPresetMenu+0x3a4>)
 8001522:	f00a fc03 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001526:	7abb      	ldrb	r3, [r7, #10]
 8001528:	b29a      	uxth	r2, r3
 800152a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800152e:	9301      	str	r3, [sp, #4]
 8001530:	2302      	movs	r3, #2
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	2300      	movs	r3, #0
 8001536:	2178      	movs	r1, #120	; 0x78
 8001538:	486b      	ldr	r0, [pc, #428]	; (80016e8 <FreqMenu_DrawPresetMenu+0x3a8>)
 800153a:	f00a fbf7 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 800153e:	7a7b      	ldrb	r3, [r7, #9]
 8001540:	b29a      	uxth	r2, r3
 8001542:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001546:	9301      	str	r3, [sp, #4]
 8001548:	2302      	movs	r3, #2
 800154a:	9300      	str	r3, [sp, #0]
 800154c:	2300      	movs	r3, #0
 800154e:	2178      	movs	r1, #120	; 0x78
 8001550:	4866      	ldr	r0, [pc, #408]	; (80016ec <FreqMenu_DrawPresetMenu+0x3ac>)
 8001552:	f00a fbeb 	bl	800bd2c <ILI9341_Draw_Text>
				break;
 8001556:	f001 b956 	b.w	8002806 <FreqMenu_DrawPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	b29a      	uxth	r2, r3
 800155e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001562:	9301      	str	r3, [sp, #4]
 8001564:	2302      	movs	r3, #2
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	2300      	movs	r3, #0
 800156a:	210a      	movs	r1, #10
 800156c:	4852      	ldr	r0, [pc, #328]	; (80016b8 <FreqMenu_DrawPresetMenu+0x378>)
 800156e:	f00a fbdd 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, WHITE, 2, BLACK);
 8001572:	7bbb      	ldrb	r3, [r7, #14]
 8001574:	b29a      	uxth	r2, r3
 8001576:	2300      	movs	r3, #0
 8001578:	9301      	str	r3, [sp, #4]
 800157a:	2302      	movs	r3, #2
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001582:	210a      	movs	r1, #10
 8001584:	484d      	ldr	r0, [pc, #308]	; (80016bc <FreqMenu_DrawPresetMenu+0x37c>)
 8001586:	f00a fbd1 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 800158a:	7b7b      	ldrb	r3, [r7, #13]
 800158c:	b29a      	uxth	r2, r3
 800158e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001592:	9301      	str	r3, [sp, #4]
 8001594:	2302      	movs	r3, #2
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	2300      	movs	r3, #0
 800159a:	210a      	movs	r1, #10
 800159c:	4848      	ldr	r0, [pc, #288]	; (80016c0 <FreqMenu_DrawPresetMenu+0x380>)
 800159e:	f00a fbc5 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 80015a2:	7b3b      	ldrb	r3, [r7, #12]
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015aa:	9301      	str	r3, [sp, #4]
 80015ac:	2302      	movs	r3, #2
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	2300      	movs	r3, #0
 80015b2:	210a      	movs	r1, #10
 80015b4:	4843      	ldr	r0, [pc, #268]	; (80016c4 <FreqMenu_DrawPresetMenu+0x384>)
 80015b6:	f00a fbb9 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80015ba:	7afb      	ldrb	r3, [r7, #11]
 80015bc:	b29a      	uxth	r2, r3
 80015be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015c2:	9301      	str	r3, [sp, #4]
 80015c4:	2302      	movs	r3, #2
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	2300      	movs	r3, #0
 80015ca:	210a      	movs	r1, #10
 80015cc:	483e      	ldr	r0, [pc, #248]	; (80016c8 <FreqMenu_DrawPresetMenu+0x388>)
 80015ce:	f00a fbad 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 80015d2:	7abb      	ldrb	r3, [r7, #10]
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015da:	9301      	str	r3, [sp, #4]
 80015dc:	2302      	movs	r3, #2
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	2300      	movs	r3, #0
 80015e2:	210a      	movs	r1, #10
 80015e4:	4839      	ldr	r0, [pc, #228]	; (80016cc <FreqMenu_DrawPresetMenu+0x38c>)
 80015e6:	f00a fba1 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 80015ea:	7a7b      	ldrb	r3, [r7, #9]
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015f2:	9301      	str	r3, [sp, #4]
 80015f4:	2302      	movs	r3, #2
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	2300      	movs	r3, #0
 80015fa:	210a      	movs	r1, #10
 80015fc:	4834      	ldr	r0, [pc, #208]	; (80016d0 <FreqMenu_DrawPresetMenu+0x390>)
 80015fe:	f00a fb95 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001602:	7bfb      	ldrb	r3, [r7, #15]
 8001604:	b29a      	uxth	r2, r3
 8001606:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800160a:	9301      	str	r3, [sp, #4]
 800160c:	2302      	movs	r3, #2
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	2300      	movs	r3, #0
 8001612:	2178      	movs	r1, #120	; 0x78
 8001614:	482f      	ldr	r0, [pc, #188]	; (80016d4 <FreqMenu_DrawPresetMenu+0x394>)
 8001616:	f00a fb89 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 800161a:	7bbb      	ldrb	r3, [r7, #14]
 800161c:	b29a      	uxth	r2, r3
 800161e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001622:	9301      	str	r3, [sp, #4]
 8001624:	2302      	movs	r3, #2
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	2300      	movs	r3, #0
 800162a:	2178      	movs	r1, #120	; 0x78
 800162c:	482a      	ldr	r0, [pc, #168]	; (80016d8 <FreqMenu_DrawPresetMenu+0x398>)
 800162e:	f00a fb7d 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001632:	7b7b      	ldrb	r3, [r7, #13]
 8001634:	b29a      	uxth	r2, r3
 8001636:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800163a:	9301      	str	r3, [sp, #4]
 800163c:	2302      	movs	r3, #2
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2300      	movs	r3, #0
 8001642:	2178      	movs	r1, #120	; 0x78
 8001644:	4825      	ldr	r0, [pc, #148]	; (80016dc <FreqMenu_DrawPresetMenu+0x39c>)
 8001646:	f00a fb71 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 800164a:	7b3b      	ldrb	r3, [r7, #12]
 800164c:	b29a      	uxth	r2, r3
 800164e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001652:	9301      	str	r3, [sp, #4]
 8001654:	2302      	movs	r3, #2
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	2300      	movs	r3, #0
 800165a:	2178      	movs	r1, #120	; 0x78
 800165c:	4820      	ldr	r0, [pc, #128]	; (80016e0 <FreqMenu_DrawPresetMenu+0x3a0>)
 800165e:	f00a fb65 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001662:	7afb      	ldrb	r3, [r7, #11]
 8001664:	b29a      	uxth	r2, r3
 8001666:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800166a:	9301      	str	r3, [sp, #4]
 800166c:	2302      	movs	r3, #2
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	2300      	movs	r3, #0
 8001672:	2178      	movs	r1, #120	; 0x78
 8001674:	481b      	ldr	r0, [pc, #108]	; (80016e4 <FreqMenu_DrawPresetMenu+0x3a4>)
 8001676:	f00a fb59 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 800167a:	7abb      	ldrb	r3, [r7, #10]
 800167c:	b29a      	uxth	r2, r3
 800167e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001682:	9301      	str	r3, [sp, #4]
 8001684:	2302      	movs	r3, #2
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	2300      	movs	r3, #0
 800168a:	2178      	movs	r1, #120	; 0x78
 800168c:	4816      	ldr	r0, [pc, #88]	; (80016e8 <FreqMenu_DrawPresetMenu+0x3a8>)
 800168e:	f00a fb4d 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001692:	7a7b      	ldrb	r3, [r7, #9]
 8001694:	b29a      	uxth	r2, r3
 8001696:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800169a:	9301      	str	r3, [sp, #4]
 800169c:	2302      	movs	r3, #2
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	2300      	movs	r3, #0
 80016a2:	2178      	movs	r1, #120	; 0x78
 80016a4:	4811      	ldr	r0, [pc, #68]	; (80016ec <FreqMenu_DrawPresetMenu+0x3ac>)
 80016a6:	f00a fb41 	bl	800bd2c <ILI9341_Draw_Text>
				break;
 80016aa:	f001 b8ac 	b.w	8002806 <FreqMenu_DrawPresetMenu+0x14c6>
 80016ae:	bf00      	nop
 80016b0:	000124f8 	.word	0x000124f8
 80016b4:	000186a0 	.word	0x000186a0
 80016b8:	0800f404 	.word	0x0800f404
 80016bc:	0800f40c 	.word	0x0800f40c
 80016c0:	0800f414 	.word	0x0800f414
 80016c4:	0800f41c 	.word	0x0800f41c
 80016c8:	0800f424 	.word	0x0800f424
 80016cc:	0800f42c 	.word	0x0800f42c
 80016d0:	0800f434 	.word	0x0800f434
 80016d4:	0800f43c 	.word	0x0800f43c
 80016d8:	0800f444 	.word	0x0800f444
 80016dc:	0800f44c 	.word	0x0800f44c
 80016e0:	0800f454 	.word	0x0800f454
 80016e4:	0800f45c 	.word	0x0800f45c
 80016e8:	0800f464 	.word	0x0800f464
 80016ec:	0800f46c 	.word	0x0800f46c
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 80016f0:	7bfb      	ldrb	r3, [r7, #15]
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016f8:	9301      	str	r3, [sp, #4]
 80016fa:	2302      	movs	r3, #2
 80016fc:	9300      	str	r3, [sp, #0]
 80016fe:	2300      	movs	r3, #0
 8001700:	210a      	movs	r1, #10
 8001702:	48a5      	ldr	r0, [pc, #660]	; (8001998 <FreqMenu_DrawPresetMenu+0x658>)
 8001704:	f00a fb12 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001708:	7bbb      	ldrb	r3, [r7, #14]
 800170a:	b29a      	uxth	r2, r3
 800170c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001710:	9301      	str	r3, [sp, #4]
 8001712:	2302      	movs	r3, #2
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	2300      	movs	r3, #0
 8001718:	210a      	movs	r1, #10
 800171a:	48a0      	ldr	r0, [pc, #640]	; (800199c <FreqMenu_DrawPresetMenu+0x65c>)
 800171c:	f00a fb06 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, WHITE, 2, BLACK);
 8001720:	7b7b      	ldrb	r3, [r7, #13]
 8001722:	b29a      	uxth	r2, r3
 8001724:	2300      	movs	r3, #0
 8001726:	9301      	str	r3, [sp, #4]
 8001728:	2302      	movs	r3, #2
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001730:	210a      	movs	r1, #10
 8001732:	489b      	ldr	r0, [pc, #620]	; (80019a0 <FreqMenu_DrawPresetMenu+0x660>)
 8001734:	f00a fafa 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001738:	7b3b      	ldrb	r3, [r7, #12]
 800173a:	b29a      	uxth	r2, r3
 800173c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001740:	9301      	str	r3, [sp, #4]
 8001742:	2302      	movs	r3, #2
 8001744:	9300      	str	r3, [sp, #0]
 8001746:	2300      	movs	r3, #0
 8001748:	210a      	movs	r1, #10
 800174a:	4896      	ldr	r0, [pc, #600]	; (80019a4 <FreqMenu_DrawPresetMenu+0x664>)
 800174c:	f00a faee 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001750:	7afb      	ldrb	r3, [r7, #11]
 8001752:	b29a      	uxth	r2, r3
 8001754:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001758:	9301      	str	r3, [sp, #4]
 800175a:	2302      	movs	r3, #2
 800175c:	9300      	str	r3, [sp, #0]
 800175e:	2300      	movs	r3, #0
 8001760:	210a      	movs	r1, #10
 8001762:	4891      	ldr	r0, [pc, #580]	; (80019a8 <FreqMenu_DrawPresetMenu+0x668>)
 8001764:	f00a fae2 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001768:	7abb      	ldrb	r3, [r7, #10]
 800176a:	b29a      	uxth	r2, r3
 800176c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001770:	9301      	str	r3, [sp, #4]
 8001772:	2302      	movs	r3, #2
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	2300      	movs	r3, #0
 8001778:	210a      	movs	r1, #10
 800177a:	488c      	ldr	r0, [pc, #560]	; (80019ac <FreqMenu_DrawPresetMenu+0x66c>)
 800177c:	f00a fad6 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001780:	7a7b      	ldrb	r3, [r7, #9]
 8001782:	b29a      	uxth	r2, r3
 8001784:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001788:	9301      	str	r3, [sp, #4]
 800178a:	2302      	movs	r3, #2
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	2300      	movs	r3, #0
 8001790:	210a      	movs	r1, #10
 8001792:	4887      	ldr	r0, [pc, #540]	; (80019b0 <FreqMenu_DrawPresetMenu+0x670>)
 8001794:	f00a faca 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001798:	7bfb      	ldrb	r3, [r7, #15]
 800179a:	b29a      	uxth	r2, r3
 800179c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017a0:	9301      	str	r3, [sp, #4]
 80017a2:	2302      	movs	r3, #2
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	2300      	movs	r3, #0
 80017a8:	2178      	movs	r1, #120	; 0x78
 80017aa:	4882      	ldr	r0, [pc, #520]	; (80019b4 <FreqMenu_DrawPresetMenu+0x674>)
 80017ac:	f00a fabe 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 80017b0:	7bbb      	ldrb	r3, [r7, #14]
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017b8:	9301      	str	r3, [sp, #4]
 80017ba:	2302      	movs	r3, #2
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	2300      	movs	r3, #0
 80017c0:	2178      	movs	r1, #120	; 0x78
 80017c2:	487d      	ldr	r0, [pc, #500]	; (80019b8 <FreqMenu_DrawPresetMenu+0x678>)
 80017c4:	f00a fab2 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 80017c8:	7b7b      	ldrb	r3, [r7, #13]
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017d0:	9301      	str	r3, [sp, #4]
 80017d2:	2302      	movs	r3, #2
 80017d4:	9300      	str	r3, [sp, #0]
 80017d6:	2300      	movs	r3, #0
 80017d8:	2178      	movs	r1, #120	; 0x78
 80017da:	4878      	ldr	r0, [pc, #480]	; (80019bc <FreqMenu_DrawPresetMenu+0x67c>)
 80017dc:	f00a faa6 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80017e0:	7b3b      	ldrb	r3, [r7, #12]
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017e8:	9301      	str	r3, [sp, #4]
 80017ea:	2302      	movs	r3, #2
 80017ec:	9300      	str	r3, [sp, #0]
 80017ee:	2300      	movs	r3, #0
 80017f0:	2178      	movs	r1, #120	; 0x78
 80017f2:	4873      	ldr	r0, [pc, #460]	; (80019c0 <FreqMenu_DrawPresetMenu+0x680>)
 80017f4:	f00a fa9a 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 80017f8:	7afb      	ldrb	r3, [r7, #11]
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001800:	9301      	str	r3, [sp, #4]
 8001802:	2302      	movs	r3, #2
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	2300      	movs	r3, #0
 8001808:	2178      	movs	r1, #120	; 0x78
 800180a:	486e      	ldr	r0, [pc, #440]	; (80019c4 <FreqMenu_DrawPresetMenu+0x684>)
 800180c:	f00a fa8e 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001810:	7abb      	ldrb	r3, [r7, #10]
 8001812:	b29a      	uxth	r2, r3
 8001814:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001818:	9301      	str	r3, [sp, #4]
 800181a:	2302      	movs	r3, #2
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	2300      	movs	r3, #0
 8001820:	2178      	movs	r1, #120	; 0x78
 8001822:	4869      	ldr	r0, [pc, #420]	; (80019c8 <FreqMenu_DrawPresetMenu+0x688>)
 8001824:	f00a fa82 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001828:	7a7b      	ldrb	r3, [r7, #9]
 800182a:	b29a      	uxth	r2, r3
 800182c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001830:	9301      	str	r3, [sp, #4]
 8001832:	2302      	movs	r3, #2
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	2300      	movs	r3, #0
 8001838:	2178      	movs	r1, #120	; 0x78
 800183a:	4864      	ldr	r0, [pc, #400]	; (80019cc <FreqMenu_DrawPresetMenu+0x68c>)
 800183c:	f00a fa76 	bl	800bd2c <ILI9341_Draw_Text>
				break;
 8001840:	f000 bfe1 	b.w	8002806 <FreqMenu_DrawPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001844:	7bfb      	ldrb	r3, [r7, #15]
 8001846:	b29a      	uxth	r2, r3
 8001848:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800184c:	9301      	str	r3, [sp, #4]
 800184e:	2302      	movs	r3, #2
 8001850:	9300      	str	r3, [sp, #0]
 8001852:	2300      	movs	r3, #0
 8001854:	210a      	movs	r1, #10
 8001856:	4850      	ldr	r0, [pc, #320]	; (8001998 <FreqMenu_DrawPresetMenu+0x658>)
 8001858:	f00a fa68 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 800185c:	7bbb      	ldrb	r3, [r7, #14]
 800185e:	b29a      	uxth	r2, r3
 8001860:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001864:	9301      	str	r3, [sp, #4]
 8001866:	2302      	movs	r3, #2
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	2300      	movs	r3, #0
 800186c:	210a      	movs	r1, #10
 800186e:	484b      	ldr	r0, [pc, #300]	; (800199c <FreqMenu_DrawPresetMenu+0x65c>)
 8001870:	f00a fa5c 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001874:	7b7b      	ldrb	r3, [r7, #13]
 8001876:	b29a      	uxth	r2, r3
 8001878:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800187c:	9301      	str	r3, [sp, #4]
 800187e:	2302      	movs	r3, #2
 8001880:	9300      	str	r3, [sp, #0]
 8001882:	2300      	movs	r3, #0
 8001884:	210a      	movs	r1, #10
 8001886:	4846      	ldr	r0, [pc, #280]	; (80019a0 <FreqMenu_DrawPresetMenu+0x660>)
 8001888:	f00a fa50 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, WHITE, 2, BLACK);
 800188c:	7b3b      	ldrb	r3, [r7, #12]
 800188e:	b29a      	uxth	r2, r3
 8001890:	2300      	movs	r3, #0
 8001892:	9301      	str	r3, [sp, #4]
 8001894:	2302      	movs	r3, #2
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800189c:	210a      	movs	r1, #10
 800189e:	4841      	ldr	r0, [pc, #260]	; (80019a4 <FreqMenu_DrawPresetMenu+0x664>)
 80018a0:	f00a fa44 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80018a4:	7afb      	ldrb	r3, [r7, #11]
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018ac:	9301      	str	r3, [sp, #4]
 80018ae:	2302      	movs	r3, #2
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	2300      	movs	r3, #0
 80018b4:	210a      	movs	r1, #10
 80018b6:	483c      	ldr	r0, [pc, #240]	; (80019a8 <FreqMenu_DrawPresetMenu+0x668>)
 80018b8:	f00a fa38 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 80018bc:	7abb      	ldrb	r3, [r7, #10]
 80018be:	b29a      	uxth	r2, r3
 80018c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018c4:	9301      	str	r3, [sp, #4]
 80018c6:	2302      	movs	r3, #2
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	2300      	movs	r3, #0
 80018cc:	210a      	movs	r1, #10
 80018ce:	4837      	ldr	r0, [pc, #220]	; (80019ac <FreqMenu_DrawPresetMenu+0x66c>)
 80018d0:	f00a fa2c 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 80018d4:	7a7b      	ldrb	r3, [r7, #9]
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018dc:	9301      	str	r3, [sp, #4]
 80018de:	2302      	movs	r3, #2
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	2300      	movs	r3, #0
 80018e4:	210a      	movs	r1, #10
 80018e6:	4832      	ldr	r0, [pc, #200]	; (80019b0 <FreqMenu_DrawPresetMenu+0x670>)
 80018e8:	f00a fa20 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018f4:	9301      	str	r3, [sp, #4]
 80018f6:	2302      	movs	r3, #2
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	2300      	movs	r3, #0
 80018fc:	2178      	movs	r1, #120	; 0x78
 80018fe:	482d      	ldr	r0, [pc, #180]	; (80019b4 <FreqMenu_DrawPresetMenu+0x674>)
 8001900:	f00a fa14 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001904:	7bbb      	ldrb	r3, [r7, #14]
 8001906:	b29a      	uxth	r2, r3
 8001908:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800190c:	9301      	str	r3, [sp, #4]
 800190e:	2302      	movs	r3, #2
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	2300      	movs	r3, #0
 8001914:	2178      	movs	r1, #120	; 0x78
 8001916:	4828      	ldr	r0, [pc, #160]	; (80019b8 <FreqMenu_DrawPresetMenu+0x678>)
 8001918:	f00a fa08 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 800191c:	7b7b      	ldrb	r3, [r7, #13]
 800191e:	b29a      	uxth	r2, r3
 8001920:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001924:	9301      	str	r3, [sp, #4]
 8001926:	2302      	movs	r3, #2
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	2300      	movs	r3, #0
 800192c:	2178      	movs	r1, #120	; 0x78
 800192e:	4823      	ldr	r0, [pc, #140]	; (80019bc <FreqMenu_DrawPresetMenu+0x67c>)
 8001930:	f00a f9fc 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001934:	7b3b      	ldrb	r3, [r7, #12]
 8001936:	b29a      	uxth	r2, r3
 8001938:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800193c:	9301      	str	r3, [sp, #4]
 800193e:	2302      	movs	r3, #2
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	2300      	movs	r3, #0
 8001944:	2178      	movs	r1, #120	; 0x78
 8001946:	481e      	ldr	r0, [pc, #120]	; (80019c0 <FreqMenu_DrawPresetMenu+0x680>)
 8001948:	f00a f9f0 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 800194c:	7afb      	ldrb	r3, [r7, #11]
 800194e:	b29a      	uxth	r2, r3
 8001950:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001954:	9301      	str	r3, [sp, #4]
 8001956:	2302      	movs	r3, #2
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	2300      	movs	r3, #0
 800195c:	2178      	movs	r1, #120	; 0x78
 800195e:	4819      	ldr	r0, [pc, #100]	; (80019c4 <FreqMenu_DrawPresetMenu+0x684>)
 8001960:	f00a f9e4 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001964:	7abb      	ldrb	r3, [r7, #10]
 8001966:	b29a      	uxth	r2, r3
 8001968:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800196c:	9301      	str	r3, [sp, #4]
 800196e:	2302      	movs	r3, #2
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	2300      	movs	r3, #0
 8001974:	2178      	movs	r1, #120	; 0x78
 8001976:	4814      	ldr	r0, [pc, #80]	; (80019c8 <FreqMenu_DrawPresetMenu+0x688>)
 8001978:	f00a f9d8 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 800197c:	7a7b      	ldrb	r3, [r7, #9]
 800197e:	b29a      	uxth	r2, r3
 8001980:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001984:	9301      	str	r3, [sp, #4]
 8001986:	2302      	movs	r3, #2
 8001988:	9300      	str	r3, [sp, #0]
 800198a:	2300      	movs	r3, #0
 800198c:	2178      	movs	r1, #120	; 0x78
 800198e:	480f      	ldr	r0, [pc, #60]	; (80019cc <FreqMenu_DrawPresetMenu+0x68c>)
 8001990:	f00a f9cc 	bl	800bd2c <ILI9341_Draw_Text>
				break;
 8001994:	f000 bf37 	b.w	8002806 <FreqMenu_DrawPresetMenu+0x14c6>
 8001998:	0800f404 	.word	0x0800f404
 800199c:	0800f40c 	.word	0x0800f40c
 80019a0:	0800f414 	.word	0x0800f414
 80019a4:	0800f41c 	.word	0x0800f41c
 80019a8:	0800f424 	.word	0x0800f424
 80019ac:	0800f42c 	.word	0x0800f42c
 80019b0:	0800f434 	.word	0x0800f434
 80019b4:	0800f43c 	.word	0x0800f43c
 80019b8:	0800f444 	.word	0x0800f444
 80019bc:	0800f44c 	.word	0x0800f44c
 80019c0:	0800f454 	.word	0x0800f454
 80019c4:	0800f45c 	.word	0x0800f45c
 80019c8:	0800f464 	.word	0x0800f464
 80019cc:	0800f46c 	.word	0x0800f46c
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 80019d0:	7bfb      	ldrb	r3, [r7, #15]
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019d8:	9301      	str	r3, [sp, #4]
 80019da:	2302      	movs	r3, #2
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	2300      	movs	r3, #0
 80019e0:	210a      	movs	r1, #10
 80019e2:	48a5      	ldr	r0, [pc, #660]	; (8001c78 <FreqMenu_DrawPresetMenu+0x938>)
 80019e4:	f00a f9a2 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 80019e8:	7bbb      	ldrb	r3, [r7, #14]
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019f0:	9301      	str	r3, [sp, #4]
 80019f2:	2302      	movs	r3, #2
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	2300      	movs	r3, #0
 80019f8:	210a      	movs	r1, #10
 80019fa:	48a0      	ldr	r0, [pc, #640]	; (8001c7c <FreqMenu_DrawPresetMenu+0x93c>)
 80019fc:	f00a f996 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001a00:	7b7b      	ldrb	r3, [r7, #13]
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a08:	9301      	str	r3, [sp, #4]
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	2300      	movs	r3, #0
 8001a10:	210a      	movs	r1, #10
 8001a12:	489b      	ldr	r0, [pc, #620]	; (8001c80 <FreqMenu_DrawPresetMenu+0x940>)
 8001a14:	f00a f98a 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001a18:	7b3b      	ldrb	r3, [r7, #12]
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a20:	9301      	str	r3, [sp, #4]
 8001a22:	2302      	movs	r3, #2
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	2300      	movs	r3, #0
 8001a28:	210a      	movs	r1, #10
 8001a2a:	4896      	ldr	r0, [pc, #600]	; (8001c84 <FreqMenu_DrawPresetMenu+0x944>)
 8001a2c:	f00a f97e 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, WHITE, 2, BLACK);
 8001a30:	7afb      	ldrb	r3, [r7, #11]
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	2300      	movs	r3, #0
 8001a36:	9301      	str	r3, [sp, #4]
 8001a38:	2302      	movs	r3, #2
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a40:	210a      	movs	r1, #10
 8001a42:	4891      	ldr	r0, [pc, #580]	; (8001c88 <FreqMenu_DrawPresetMenu+0x948>)
 8001a44:	f00a f972 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001a48:	7abb      	ldrb	r3, [r7, #10]
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a50:	9301      	str	r3, [sp, #4]
 8001a52:	2302      	movs	r3, #2
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	2300      	movs	r3, #0
 8001a58:	210a      	movs	r1, #10
 8001a5a:	488c      	ldr	r0, [pc, #560]	; (8001c8c <FreqMenu_DrawPresetMenu+0x94c>)
 8001a5c:	f00a f966 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001a60:	7a7b      	ldrb	r3, [r7, #9]
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a68:	9301      	str	r3, [sp, #4]
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	2300      	movs	r3, #0
 8001a70:	210a      	movs	r1, #10
 8001a72:	4887      	ldr	r0, [pc, #540]	; (8001c90 <FreqMenu_DrawPresetMenu+0x950>)
 8001a74:	f00a f95a 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001a78:	7bfb      	ldrb	r3, [r7, #15]
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a80:	9301      	str	r3, [sp, #4]
 8001a82:	2302      	movs	r3, #2
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	2300      	movs	r3, #0
 8001a88:	2178      	movs	r1, #120	; 0x78
 8001a8a:	4882      	ldr	r0, [pc, #520]	; (8001c94 <FreqMenu_DrawPresetMenu+0x954>)
 8001a8c:	f00a f94e 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001a90:	7bbb      	ldrb	r3, [r7, #14]
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a98:	9301      	str	r3, [sp, #4]
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	2178      	movs	r1, #120	; 0x78
 8001aa2:	487d      	ldr	r0, [pc, #500]	; (8001c98 <FreqMenu_DrawPresetMenu+0x958>)
 8001aa4:	f00a f942 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001aa8:	7b7b      	ldrb	r3, [r7, #13]
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ab0:	9301      	str	r3, [sp, #4]
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	2178      	movs	r1, #120	; 0x78
 8001aba:	4878      	ldr	r0, [pc, #480]	; (8001c9c <FreqMenu_DrawPresetMenu+0x95c>)
 8001abc:	f00a f936 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001ac0:	7b3b      	ldrb	r3, [r7, #12]
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ac8:	9301      	str	r3, [sp, #4]
 8001aca:	2302      	movs	r3, #2
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	2300      	movs	r3, #0
 8001ad0:	2178      	movs	r1, #120	; 0x78
 8001ad2:	4873      	ldr	r0, [pc, #460]	; (8001ca0 <FreqMenu_DrawPresetMenu+0x960>)
 8001ad4:	f00a f92a 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001ad8:	7afb      	ldrb	r3, [r7, #11]
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ae0:	9301      	str	r3, [sp, #4]
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	2178      	movs	r1, #120	; 0x78
 8001aea:	486e      	ldr	r0, [pc, #440]	; (8001ca4 <FreqMenu_DrawPresetMenu+0x964>)
 8001aec:	f00a f91e 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001af0:	7abb      	ldrb	r3, [r7, #10]
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001af8:	9301      	str	r3, [sp, #4]
 8001afa:	2302      	movs	r3, #2
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	2300      	movs	r3, #0
 8001b00:	2178      	movs	r1, #120	; 0x78
 8001b02:	4869      	ldr	r0, [pc, #420]	; (8001ca8 <FreqMenu_DrawPresetMenu+0x968>)
 8001b04:	f00a f912 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001b08:	7a7b      	ldrb	r3, [r7, #9]
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b10:	9301      	str	r3, [sp, #4]
 8001b12:	2302      	movs	r3, #2
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	2300      	movs	r3, #0
 8001b18:	2178      	movs	r1, #120	; 0x78
 8001b1a:	4864      	ldr	r0, [pc, #400]	; (8001cac <FreqMenu_DrawPresetMenu+0x96c>)
 8001b1c:	f00a f906 	bl	800bd2c <ILI9341_Draw_Text>
				break;
 8001b20:	f000 be71 	b.w	8002806 <FreqMenu_DrawPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b2c:	9301      	str	r3, [sp, #4]
 8001b2e:	2302      	movs	r3, #2
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	2300      	movs	r3, #0
 8001b34:	210a      	movs	r1, #10
 8001b36:	4850      	ldr	r0, [pc, #320]	; (8001c78 <FreqMenu_DrawPresetMenu+0x938>)
 8001b38:	f00a f8f8 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001b3c:	7bbb      	ldrb	r3, [r7, #14]
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b44:	9301      	str	r3, [sp, #4]
 8001b46:	2302      	movs	r3, #2
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	210a      	movs	r1, #10
 8001b4e:	484b      	ldr	r0, [pc, #300]	; (8001c7c <FreqMenu_DrawPresetMenu+0x93c>)
 8001b50:	f00a f8ec 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001b54:	7b7b      	ldrb	r3, [r7, #13]
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b5c:	9301      	str	r3, [sp, #4]
 8001b5e:	2302      	movs	r3, #2
 8001b60:	9300      	str	r3, [sp, #0]
 8001b62:	2300      	movs	r3, #0
 8001b64:	210a      	movs	r1, #10
 8001b66:	4846      	ldr	r0, [pc, #280]	; (8001c80 <FreqMenu_DrawPresetMenu+0x940>)
 8001b68:	f00a f8e0 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001b6c:	7b3b      	ldrb	r3, [r7, #12]
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b74:	9301      	str	r3, [sp, #4]
 8001b76:	2302      	movs	r3, #2
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	210a      	movs	r1, #10
 8001b7e:	4841      	ldr	r0, [pc, #260]	; (8001c84 <FreqMenu_DrawPresetMenu+0x944>)
 8001b80:	f00a f8d4 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001b84:	7afb      	ldrb	r3, [r7, #11]
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b8c:	9301      	str	r3, [sp, #4]
 8001b8e:	2302      	movs	r3, #2
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	2300      	movs	r3, #0
 8001b94:	210a      	movs	r1, #10
 8001b96:	483c      	ldr	r0, [pc, #240]	; (8001c88 <FreqMenu_DrawPresetMenu+0x948>)
 8001b98:	f00a f8c8 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, WHITE, 2, BLACK);
 8001b9c:	7abb      	ldrb	r3, [r7, #10]
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	9301      	str	r3, [sp, #4]
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bac:	210a      	movs	r1, #10
 8001bae:	4837      	ldr	r0, [pc, #220]	; (8001c8c <FreqMenu_DrawPresetMenu+0x94c>)
 8001bb0:	f00a f8bc 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001bb4:	7a7b      	ldrb	r3, [r7, #9]
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bbc:	9301      	str	r3, [sp, #4]
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	210a      	movs	r1, #10
 8001bc6:	4832      	ldr	r0, [pc, #200]	; (8001c90 <FreqMenu_DrawPresetMenu+0x950>)
 8001bc8:	f00a f8b0 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001bcc:	7bfb      	ldrb	r3, [r7, #15]
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bd4:	9301      	str	r3, [sp, #4]
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	2300      	movs	r3, #0
 8001bdc:	2178      	movs	r1, #120	; 0x78
 8001bde:	482d      	ldr	r0, [pc, #180]	; (8001c94 <FreqMenu_DrawPresetMenu+0x954>)
 8001be0:	f00a f8a4 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001be4:	7bbb      	ldrb	r3, [r7, #14]
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bec:	9301      	str	r3, [sp, #4]
 8001bee:	2302      	movs	r3, #2
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	2178      	movs	r1, #120	; 0x78
 8001bf6:	4828      	ldr	r0, [pc, #160]	; (8001c98 <FreqMenu_DrawPresetMenu+0x958>)
 8001bf8:	f00a f898 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001bfc:	7b7b      	ldrb	r3, [r7, #13]
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c04:	9301      	str	r3, [sp, #4]
 8001c06:	2302      	movs	r3, #2
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	2178      	movs	r1, #120	; 0x78
 8001c0e:	4823      	ldr	r0, [pc, #140]	; (8001c9c <FreqMenu_DrawPresetMenu+0x95c>)
 8001c10:	f00a f88c 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001c14:	7b3b      	ldrb	r3, [r7, #12]
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c1c:	9301      	str	r3, [sp, #4]
 8001c1e:	2302      	movs	r3, #2
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	2300      	movs	r3, #0
 8001c24:	2178      	movs	r1, #120	; 0x78
 8001c26:	481e      	ldr	r0, [pc, #120]	; (8001ca0 <FreqMenu_DrawPresetMenu+0x960>)
 8001c28:	f00a f880 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001c2c:	7afb      	ldrb	r3, [r7, #11]
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c34:	9301      	str	r3, [sp, #4]
 8001c36:	2302      	movs	r3, #2
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	2178      	movs	r1, #120	; 0x78
 8001c3e:	4819      	ldr	r0, [pc, #100]	; (8001ca4 <FreqMenu_DrawPresetMenu+0x964>)
 8001c40:	f00a f874 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001c44:	7abb      	ldrb	r3, [r7, #10]
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c4c:	9301      	str	r3, [sp, #4]
 8001c4e:	2302      	movs	r3, #2
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	2300      	movs	r3, #0
 8001c54:	2178      	movs	r1, #120	; 0x78
 8001c56:	4814      	ldr	r0, [pc, #80]	; (8001ca8 <FreqMenu_DrawPresetMenu+0x968>)
 8001c58:	f00a f868 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001c5c:	7a7b      	ldrb	r3, [r7, #9]
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c64:	9301      	str	r3, [sp, #4]
 8001c66:	2302      	movs	r3, #2
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	2178      	movs	r1, #120	; 0x78
 8001c6e:	480f      	ldr	r0, [pc, #60]	; (8001cac <FreqMenu_DrawPresetMenu+0x96c>)
 8001c70:	f00a f85c 	bl	800bd2c <ILI9341_Draw_Text>
				break;
 8001c74:	f000 bdc7 	b.w	8002806 <FreqMenu_DrawPresetMenu+0x14c6>
 8001c78:	0800f404 	.word	0x0800f404
 8001c7c:	0800f40c 	.word	0x0800f40c
 8001c80:	0800f414 	.word	0x0800f414
 8001c84:	0800f41c 	.word	0x0800f41c
 8001c88:	0800f424 	.word	0x0800f424
 8001c8c:	0800f42c 	.word	0x0800f42c
 8001c90:	0800f434 	.word	0x0800f434
 8001c94:	0800f43c 	.word	0x0800f43c
 8001c98:	0800f444 	.word	0x0800f444
 8001c9c:	0800f44c 	.word	0x0800f44c
 8001ca0:	0800f454 	.word	0x0800f454
 8001ca4:	0800f45c 	.word	0x0800f45c
 8001ca8:	0800f464 	.word	0x0800f464
 8001cac:	0800f46c 	.word	0x0800f46c
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001cb0:	7bfb      	ldrb	r3, [r7, #15]
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cb8:	9301      	str	r3, [sp, #4]
 8001cba:	2302      	movs	r3, #2
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	210a      	movs	r1, #10
 8001cc2:	48a5      	ldr	r0, [pc, #660]	; (8001f58 <FreqMenu_DrawPresetMenu+0xc18>)
 8001cc4:	f00a f832 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001cc8:	7bbb      	ldrb	r3, [r7, #14]
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cd0:	9301      	str	r3, [sp, #4]
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	9300      	str	r3, [sp, #0]
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	210a      	movs	r1, #10
 8001cda:	48a0      	ldr	r0, [pc, #640]	; (8001f5c <FreqMenu_DrawPresetMenu+0xc1c>)
 8001cdc:	f00a f826 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001ce0:	7b7b      	ldrb	r3, [r7, #13]
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ce8:	9301      	str	r3, [sp, #4]
 8001cea:	2302      	movs	r3, #2
 8001cec:	9300      	str	r3, [sp, #0]
 8001cee:	2300      	movs	r3, #0
 8001cf0:	210a      	movs	r1, #10
 8001cf2:	489b      	ldr	r0, [pc, #620]	; (8001f60 <FreqMenu_DrawPresetMenu+0xc20>)
 8001cf4:	f00a f81a 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001cf8:	7b3b      	ldrb	r3, [r7, #12]
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d00:	9301      	str	r3, [sp, #4]
 8001d02:	2302      	movs	r3, #2
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	2300      	movs	r3, #0
 8001d08:	210a      	movs	r1, #10
 8001d0a:	4896      	ldr	r0, [pc, #600]	; (8001f64 <FreqMenu_DrawPresetMenu+0xc24>)
 8001d0c:	f00a f80e 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001d10:	7afb      	ldrb	r3, [r7, #11]
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d18:	9301      	str	r3, [sp, #4]
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	2300      	movs	r3, #0
 8001d20:	210a      	movs	r1, #10
 8001d22:	4891      	ldr	r0, [pc, #580]	; (8001f68 <FreqMenu_DrawPresetMenu+0xc28>)
 8001d24:	f00a f802 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001d28:	7abb      	ldrb	r3, [r7, #10]
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d30:	9301      	str	r3, [sp, #4]
 8001d32:	2302      	movs	r3, #2
 8001d34:	9300      	str	r3, [sp, #0]
 8001d36:	2300      	movs	r3, #0
 8001d38:	210a      	movs	r1, #10
 8001d3a:	488c      	ldr	r0, [pc, #560]	; (8001f6c <FreqMenu_DrawPresetMenu+0xc2c>)
 8001d3c:	f009 fff6 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, WHITE, 2, BLACK);
 8001d40:	7a7b      	ldrb	r3, [r7, #9]
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	2300      	movs	r3, #0
 8001d46:	9301      	str	r3, [sp, #4]
 8001d48:	2302      	movs	r3, #2
 8001d4a:	9300      	str	r3, [sp, #0]
 8001d4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d50:	210a      	movs	r1, #10
 8001d52:	4887      	ldr	r0, [pc, #540]	; (8001f70 <FreqMenu_DrawPresetMenu+0xc30>)
 8001d54:	f009 ffea 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d60:	9301      	str	r3, [sp, #4]
 8001d62:	2302      	movs	r3, #2
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	2300      	movs	r3, #0
 8001d68:	2178      	movs	r1, #120	; 0x78
 8001d6a:	4882      	ldr	r0, [pc, #520]	; (8001f74 <FreqMenu_DrawPresetMenu+0xc34>)
 8001d6c:	f009 ffde 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001d70:	7bbb      	ldrb	r3, [r7, #14]
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d78:	9301      	str	r3, [sp, #4]
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	2300      	movs	r3, #0
 8001d80:	2178      	movs	r1, #120	; 0x78
 8001d82:	487d      	ldr	r0, [pc, #500]	; (8001f78 <FreqMenu_DrawPresetMenu+0xc38>)
 8001d84:	f009 ffd2 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001d88:	7b7b      	ldrb	r3, [r7, #13]
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d90:	9301      	str	r3, [sp, #4]
 8001d92:	2302      	movs	r3, #2
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	2300      	movs	r3, #0
 8001d98:	2178      	movs	r1, #120	; 0x78
 8001d9a:	4878      	ldr	r0, [pc, #480]	; (8001f7c <FreqMenu_DrawPresetMenu+0xc3c>)
 8001d9c:	f009 ffc6 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001da0:	7b3b      	ldrb	r3, [r7, #12]
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001da8:	9301      	str	r3, [sp, #4]
 8001daa:	2302      	movs	r3, #2
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	2300      	movs	r3, #0
 8001db0:	2178      	movs	r1, #120	; 0x78
 8001db2:	4873      	ldr	r0, [pc, #460]	; (8001f80 <FreqMenu_DrawPresetMenu+0xc40>)
 8001db4:	f009 ffba 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001db8:	7afb      	ldrb	r3, [r7, #11]
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dc0:	9301      	str	r3, [sp, #4]
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	2178      	movs	r1, #120	; 0x78
 8001dca:	486e      	ldr	r0, [pc, #440]	; (8001f84 <FreqMenu_DrawPresetMenu+0xc44>)
 8001dcc:	f009 ffae 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001dd0:	7abb      	ldrb	r3, [r7, #10]
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dd8:	9301      	str	r3, [sp, #4]
 8001dda:	2302      	movs	r3, #2
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	2300      	movs	r3, #0
 8001de0:	2178      	movs	r1, #120	; 0x78
 8001de2:	4869      	ldr	r0, [pc, #420]	; (8001f88 <FreqMenu_DrawPresetMenu+0xc48>)
 8001de4:	f009 ffa2 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001de8:	7a7b      	ldrb	r3, [r7, #9]
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001df0:	9301      	str	r3, [sp, #4]
 8001df2:	2302      	movs	r3, #2
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	2300      	movs	r3, #0
 8001df8:	2178      	movs	r1, #120	; 0x78
 8001dfa:	4864      	ldr	r0, [pc, #400]	; (8001f8c <FreqMenu_DrawPresetMenu+0xc4c>)
 8001dfc:	f009 ff96 	bl	800bd2c <ILI9341_Draw_Text>
				break;
 8001e00:	f000 bd01 	b.w	8002806 <FreqMenu_DrawPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001e04:	7bfb      	ldrb	r3, [r7, #15]
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e0c:	9301      	str	r3, [sp, #4]
 8001e0e:	2302      	movs	r3, #2
 8001e10:	9300      	str	r3, [sp, #0]
 8001e12:	2300      	movs	r3, #0
 8001e14:	210a      	movs	r1, #10
 8001e16:	4850      	ldr	r0, [pc, #320]	; (8001f58 <FreqMenu_DrawPresetMenu+0xc18>)
 8001e18:	f009 ff88 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001e1c:	7bbb      	ldrb	r3, [r7, #14]
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e24:	9301      	str	r3, [sp, #4]
 8001e26:	2302      	movs	r3, #2
 8001e28:	9300      	str	r3, [sp, #0]
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	210a      	movs	r1, #10
 8001e2e:	484b      	ldr	r0, [pc, #300]	; (8001f5c <FreqMenu_DrawPresetMenu+0xc1c>)
 8001e30:	f009 ff7c 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001e34:	7b7b      	ldrb	r3, [r7, #13]
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e3c:	9301      	str	r3, [sp, #4]
 8001e3e:	2302      	movs	r3, #2
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	2300      	movs	r3, #0
 8001e44:	210a      	movs	r1, #10
 8001e46:	4846      	ldr	r0, [pc, #280]	; (8001f60 <FreqMenu_DrawPresetMenu+0xc20>)
 8001e48:	f009 ff70 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001e4c:	7b3b      	ldrb	r3, [r7, #12]
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e54:	9301      	str	r3, [sp, #4]
 8001e56:	2302      	movs	r3, #2
 8001e58:	9300      	str	r3, [sp, #0]
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	210a      	movs	r1, #10
 8001e5e:	4841      	ldr	r0, [pc, #260]	; (8001f64 <FreqMenu_DrawPresetMenu+0xc24>)
 8001e60:	f009 ff64 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001e64:	7afb      	ldrb	r3, [r7, #11]
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e6c:	9301      	str	r3, [sp, #4]
 8001e6e:	2302      	movs	r3, #2
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	2300      	movs	r3, #0
 8001e74:	210a      	movs	r1, #10
 8001e76:	483c      	ldr	r0, [pc, #240]	; (8001f68 <FreqMenu_DrawPresetMenu+0xc28>)
 8001e78:	f009 ff58 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001e7c:	7abb      	ldrb	r3, [r7, #10]
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e84:	9301      	str	r3, [sp, #4]
 8001e86:	2302      	movs	r3, #2
 8001e88:	9300      	str	r3, [sp, #0]
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	210a      	movs	r1, #10
 8001e8e:	4837      	ldr	r0, [pc, #220]	; (8001f6c <FreqMenu_DrawPresetMenu+0xc2c>)
 8001e90:	f009 ff4c 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001e94:	7a7b      	ldrb	r3, [r7, #9]
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e9c:	9301      	str	r3, [sp, #4]
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	210a      	movs	r1, #10
 8001ea6:	4832      	ldr	r0, [pc, #200]	; (8001f70 <FreqMenu_DrawPresetMenu+0xc30>)
 8001ea8:	f009 ff40 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, WHITE, 2, BLACK);
 8001eac:	7bfb      	ldrb	r3, [r7, #15]
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	9301      	str	r3, [sp, #4]
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ebc:	2178      	movs	r1, #120	; 0x78
 8001ebe:	482d      	ldr	r0, [pc, #180]	; (8001f74 <FreqMenu_DrawPresetMenu+0xc34>)
 8001ec0:	f009 ff34 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001ec4:	7bbb      	ldrb	r3, [r7, #14]
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ecc:	9301      	str	r3, [sp, #4]
 8001ece:	2302      	movs	r3, #2
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	2178      	movs	r1, #120	; 0x78
 8001ed6:	4828      	ldr	r0, [pc, #160]	; (8001f78 <FreqMenu_DrawPresetMenu+0xc38>)
 8001ed8:	f009 ff28 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001edc:	7b7b      	ldrb	r3, [r7, #13]
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ee4:	9301      	str	r3, [sp, #4]
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	2300      	movs	r3, #0
 8001eec:	2178      	movs	r1, #120	; 0x78
 8001eee:	4823      	ldr	r0, [pc, #140]	; (8001f7c <FreqMenu_DrawPresetMenu+0xc3c>)
 8001ef0:	f009 ff1c 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001ef4:	7b3b      	ldrb	r3, [r7, #12]
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001efc:	9301      	str	r3, [sp, #4]
 8001efe:	2302      	movs	r3, #2
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	2300      	movs	r3, #0
 8001f04:	2178      	movs	r1, #120	; 0x78
 8001f06:	481e      	ldr	r0, [pc, #120]	; (8001f80 <FreqMenu_DrawPresetMenu+0xc40>)
 8001f08:	f009 ff10 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001f0c:	7afb      	ldrb	r3, [r7, #11]
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f14:	9301      	str	r3, [sp, #4]
 8001f16:	2302      	movs	r3, #2
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	2178      	movs	r1, #120	; 0x78
 8001f1e:	4819      	ldr	r0, [pc, #100]	; (8001f84 <FreqMenu_DrawPresetMenu+0xc44>)
 8001f20:	f009 ff04 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001f24:	7abb      	ldrb	r3, [r7, #10]
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f2c:	9301      	str	r3, [sp, #4]
 8001f2e:	2302      	movs	r3, #2
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	2300      	movs	r3, #0
 8001f34:	2178      	movs	r1, #120	; 0x78
 8001f36:	4814      	ldr	r0, [pc, #80]	; (8001f88 <FreqMenu_DrawPresetMenu+0xc48>)
 8001f38:	f009 fef8 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001f3c:	7a7b      	ldrb	r3, [r7, #9]
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f44:	9301      	str	r3, [sp, #4]
 8001f46:	2302      	movs	r3, #2
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	2178      	movs	r1, #120	; 0x78
 8001f4e:	480f      	ldr	r0, [pc, #60]	; (8001f8c <FreqMenu_DrawPresetMenu+0xc4c>)
 8001f50:	f009 feec 	bl	800bd2c <ILI9341_Draw_Text>
				break;
 8001f54:	f000 bc57 	b.w	8002806 <FreqMenu_DrawPresetMenu+0x14c6>
 8001f58:	0800f404 	.word	0x0800f404
 8001f5c:	0800f40c 	.word	0x0800f40c
 8001f60:	0800f414 	.word	0x0800f414
 8001f64:	0800f41c 	.word	0x0800f41c
 8001f68:	0800f424 	.word	0x0800f424
 8001f6c:	0800f42c 	.word	0x0800f42c
 8001f70:	0800f434 	.word	0x0800f434
 8001f74:	0800f43c 	.word	0x0800f43c
 8001f78:	0800f444 	.word	0x0800f444
 8001f7c:	0800f44c 	.word	0x0800f44c
 8001f80:	0800f454 	.word	0x0800f454
 8001f84:	0800f45c 	.word	0x0800f45c
 8001f88:	0800f464 	.word	0x0800f464
 8001f8c:	0800f46c 	.word	0x0800f46c
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001f90:	7bfb      	ldrb	r3, [r7, #15]
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f98:	9301      	str	r3, [sp, #4]
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	9300      	str	r3, [sp, #0]
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	210a      	movs	r1, #10
 8001fa2:	48a4      	ldr	r0, [pc, #656]	; (8002234 <FreqMenu_DrawPresetMenu+0xef4>)
 8001fa4:	f009 fec2 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001fa8:	7bbb      	ldrb	r3, [r7, #14]
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fb0:	9301      	str	r3, [sp, #4]
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	9300      	str	r3, [sp, #0]
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	210a      	movs	r1, #10
 8001fba:	489f      	ldr	r0, [pc, #636]	; (8002238 <FreqMenu_DrawPresetMenu+0xef8>)
 8001fbc:	f009 feb6 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001fc0:	7b7b      	ldrb	r3, [r7, #13]
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fc8:	9301      	str	r3, [sp, #4]
 8001fca:	2302      	movs	r3, #2
 8001fcc:	9300      	str	r3, [sp, #0]
 8001fce:	2300      	movs	r3, #0
 8001fd0:	210a      	movs	r1, #10
 8001fd2:	489a      	ldr	r0, [pc, #616]	; (800223c <FreqMenu_DrawPresetMenu+0xefc>)
 8001fd4:	f009 feaa 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001fd8:	7b3b      	ldrb	r3, [r7, #12]
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fe0:	9301      	str	r3, [sp, #4]
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	9300      	str	r3, [sp, #0]
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	210a      	movs	r1, #10
 8001fea:	4895      	ldr	r0, [pc, #596]	; (8002240 <FreqMenu_DrawPresetMenu+0xf00>)
 8001fec:	f009 fe9e 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001ff0:	7afb      	ldrb	r3, [r7, #11]
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ff8:	9301      	str	r3, [sp, #4]
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	2300      	movs	r3, #0
 8002000:	210a      	movs	r1, #10
 8002002:	4890      	ldr	r0, [pc, #576]	; (8002244 <FreqMenu_DrawPresetMenu+0xf04>)
 8002004:	f009 fe92 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8002008:	7abb      	ldrb	r3, [r7, #10]
 800200a:	b29a      	uxth	r2, r3
 800200c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002010:	9301      	str	r3, [sp, #4]
 8002012:	2302      	movs	r3, #2
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	2300      	movs	r3, #0
 8002018:	210a      	movs	r1, #10
 800201a:	488b      	ldr	r0, [pc, #556]	; (8002248 <FreqMenu_DrawPresetMenu+0xf08>)
 800201c:	f009 fe86 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8002020:	7a7b      	ldrb	r3, [r7, #9]
 8002022:	b29a      	uxth	r2, r3
 8002024:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002028:	9301      	str	r3, [sp, #4]
 800202a:	2302      	movs	r3, #2
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	2300      	movs	r3, #0
 8002030:	210a      	movs	r1, #10
 8002032:	4886      	ldr	r0, [pc, #536]	; (800224c <FreqMenu_DrawPresetMenu+0xf0c>)
 8002034:	f009 fe7a 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8002038:	7bfb      	ldrb	r3, [r7, #15]
 800203a:	b29a      	uxth	r2, r3
 800203c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002040:	9301      	str	r3, [sp, #4]
 8002042:	2302      	movs	r3, #2
 8002044:	9300      	str	r3, [sp, #0]
 8002046:	2300      	movs	r3, #0
 8002048:	2178      	movs	r1, #120	; 0x78
 800204a:	4881      	ldr	r0, [pc, #516]	; (8002250 <FreqMenu_DrawPresetMenu+0xf10>)
 800204c:	f009 fe6e 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, WHITE, 2, BLACK);
 8002050:	7bbb      	ldrb	r3, [r7, #14]
 8002052:	b29a      	uxth	r2, r3
 8002054:	2300      	movs	r3, #0
 8002056:	9301      	str	r3, [sp, #4]
 8002058:	2302      	movs	r3, #2
 800205a:	9300      	str	r3, [sp, #0]
 800205c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002060:	2178      	movs	r1, #120	; 0x78
 8002062:	487c      	ldr	r0, [pc, #496]	; (8002254 <FreqMenu_DrawPresetMenu+0xf14>)
 8002064:	f009 fe62 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8002068:	7b7b      	ldrb	r3, [r7, #13]
 800206a:	b29a      	uxth	r2, r3
 800206c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002070:	9301      	str	r3, [sp, #4]
 8002072:	2302      	movs	r3, #2
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	2300      	movs	r3, #0
 8002078:	2178      	movs	r1, #120	; 0x78
 800207a:	4877      	ldr	r0, [pc, #476]	; (8002258 <FreqMenu_DrawPresetMenu+0xf18>)
 800207c:	f009 fe56 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8002080:	7b3b      	ldrb	r3, [r7, #12]
 8002082:	b29a      	uxth	r2, r3
 8002084:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002088:	9301      	str	r3, [sp, #4]
 800208a:	2302      	movs	r3, #2
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	2300      	movs	r3, #0
 8002090:	2178      	movs	r1, #120	; 0x78
 8002092:	4872      	ldr	r0, [pc, #456]	; (800225c <FreqMenu_DrawPresetMenu+0xf1c>)
 8002094:	f009 fe4a 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8002098:	7afb      	ldrb	r3, [r7, #11]
 800209a:	b29a      	uxth	r2, r3
 800209c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020a0:	9301      	str	r3, [sp, #4]
 80020a2:	2302      	movs	r3, #2
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	2300      	movs	r3, #0
 80020a8:	2178      	movs	r1, #120	; 0x78
 80020aa:	486d      	ldr	r0, [pc, #436]	; (8002260 <FreqMenu_DrawPresetMenu+0xf20>)
 80020ac:	f009 fe3e 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 80020b0:	7abb      	ldrb	r3, [r7, #10]
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020b8:	9301      	str	r3, [sp, #4]
 80020ba:	2302      	movs	r3, #2
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	2300      	movs	r3, #0
 80020c0:	2178      	movs	r1, #120	; 0x78
 80020c2:	4868      	ldr	r0, [pc, #416]	; (8002264 <FreqMenu_DrawPresetMenu+0xf24>)
 80020c4:	f009 fe32 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80020c8:	7a7b      	ldrb	r3, [r7, #9]
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020d0:	9301      	str	r3, [sp, #4]
 80020d2:	2302      	movs	r3, #2
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	2300      	movs	r3, #0
 80020d8:	2178      	movs	r1, #120	; 0x78
 80020da:	4863      	ldr	r0, [pc, #396]	; (8002268 <FreqMenu_DrawPresetMenu+0xf28>)
 80020dc:	f009 fe26 	bl	800bd2c <ILI9341_Draw_Text>
				break;
 80020e0:	e391      	b.n	8002806 <FreqMenu_DrawPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 80020e2:	7bfb      	ldrb	r3, [r7, #15]
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020ea:	9301      	str	r3, [sp, #4]
 80020ec:	2302      	movs	r3, #2
 80020ee:	9300      	str	r3, [sp, #0]
 80020f0:	2300      	movs	r3, #0
 80020f2:	210a      	movs	r1, #10
 80020f4:	484f      	ldr	r0, [pc, #316]	; (8002234 <FreqMenu_DrawPresetMenu+0xef4>)
 80020f6:	f009 fe19 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 80020fa:	7bbb      	ldrb	r3, [r7, #14]
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002102:	9301      	str	r3, [sp, #4]
 8002104:	2302      	movs	r3, #2
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	2300      	movs	r3, #0
 800210a:	210a      	movs	r1, #10
 800210c:	484a      	ldr	r0, [pc, #296]	; (8002238 <FreqMenu_DrawPresetMenu+0xef8>)
 800210e:	f009 fe0d 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8002112:	7b7b      	ldrb	r3, [r7, #13]
 8002114:	b29a      	uxth	r2, r3
 8002116:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800211a:	9301      	str	r3, [sp, #4]
 800211c:	2302      	movs	r3, #2
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	2300      	movs	r3, #0
 8002122:	210a      	movs	r1, #10
 8002124:	4845      	ldr	r0, [pc, #276]	; (800223c <FreqMenu_DrawPresetMenu+0xefc>)
 8002126:	f009 fe01 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 800212a:	7b3b      	ldrb	r3, [r7, #12]
 800212c:	b29a      	uxth	r2, r3
 800212e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002132:	9301      	str	r3, [sp, #4]
 8002134:	2302      	movs	r3, #2
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	2300      	movs	r3, #0
 800213a:	210a      	movs	r1, #10
 800213c:	4840      	ldr	r0, [pc, #256]	; (8002240 <FreqMenu_DrawPresetMenu+0xf00>)
 800213e:	f009 fdf5 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8002142:	7afb      	ldrb	r3, [r7, #11]
 8002144:	b29a      	uxth	r2, r3
 8002146:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800214a:	9301      	str	r3, [sp, #4]
 800214c:	2302      	movs	r3, #2
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	2300      	movs	r3, #0
 8002152:	210a      	movs	r1, #10
 8002154:	483b      	ldr	r0, [pc, #236]	; (8002244 <FreqMenu_DrawPresetMenu+0xf04>)
 8002156:	f009 fde9 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 800215a:	7abb      	ldrb	r3, [r7, #10]
 800215c:	b29a      	uxth	r2, r3
 800215e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002162:	9301      	str	r3, [sp, #4]
 8002164:	2302      	movs	r3, #2
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	2300      	movs	r3, #0
 800216a:	210a      	movs	r1, #10
 800216c:	4836      	ldr	r0, [pc, #216]	; (8002248 <FreqMenu_DrawPresetMenu+0xf08>)
 800216e:	f009 fddd 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8002172:	7a7b      	ldrb	r3, [r7, #9]
 8002174:	b29a      	uxth	r2, r3
 8002176:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800217a:	9301      	str	r3, [sp, #4]
 800217c:	2302      	movs	r3, #2
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	2300      	movs	r3, #0
 8002182:	210a      	movs	r1, #10
 8002184:	4831      	ldr	r0, [pc, #196]	; (800224c <FreqMenu_DrawPresetMenu+0xf0c>)
 8002186:	f009 fdd1 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 800218a:	7bfb      	ldrb	r3, [r7, #15]
 800218c:	b29a      	uxth	r2, r3
 800218e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002192:	9301      	str	r3, [sp, #4]
 8002194:	2302      	movs	r3, #2
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	2300      	movs	r3, #0
 800219a:	2178      	movs	r1, #120	; 0x78
 800219c:	482c      	ldr	r0, [pc, #176]	; (8002250 <FreqMenu_DrawPresetMenu+0xf10>)
 800219e:	f009 fdc5 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 80021a2:	7bbb      	ldrb	r3, [r7, #14]
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021aa:	9301      	str	r3, [sp, #4]
 80021ac:	2302      	movs	r3, #2
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	2300      	movs	r3, #0
 80021b2:	2178      	movs	r1, #120	; 0x78
 80021b4:	4827      	ldr	r0, [pc, #156]	; (8002254 <FreqMenu_DrawPresetMenu+0xf14>)
 80021b6:	f009 fdb9 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, WHITE, 2, BLACK);
 80021ba:	7b7b      	ldrb	r3, [r7, #13]
 80021bc:	b29a      	uxth	r2, r3
 80021be:	2300      	movs	r3, #0
 80021c0:	9301      	str	r3, [sp, #4]
 80021c2:	2302      	movs	r3, #2
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021ca:	2178      	movs	r1, #120	; 0x78
 80021cc:	4822      	ldr	r0, [pc, #136]	; (8002258 <FreqMenu_DrawPresetMenu+0xf18>)
 80021ce:	f009 fdad 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80021d2:	7b3b      	ldrb	r3, [r7, #12]
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021da:	9301      	str	r3, [sp, #4]
 80021dc:	2302      	movs	r3, #2
 80021de:	9300      	str	r3, [sp, #0]
 80021e0:	2300      	movs	r3, #0
 80021e2:	2178      	movs	r1, #120	; 0x78
 80021e4:	481d      	ldr	r0, [pc, #116]	; (800225c <FreqMenu_DrawPresetMenu+0xf1c>)
 80021e6:	f009 fda1 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 80021ea:	7afb      	ldrb	r3, [r7, #11]
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021f2:	9301      	str	r3, [sp, #4]
 80021f4:	2302      	movs	r3, #2
 80021f6:	9300      	str	r3, [sp, #0]
 80021f8:	2300      	movs	r3, #0
 80021fa:	2178      	movs	r1, #120	; 0x78
 80021fc:	4818      	ldr	r0, [pc, #96]	; (8002260 <FreqMenu_DrawPresetMenu+0xf20>)
 80021fe:	f009 fd95 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8002202:	7abb      	ldrb	r3, [r7, #10]
 8002204:	b29a      	uxth	r2, r3
 8002206:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800220a:	9301      	str	r3, [sp, #4]
 800220c:	2302      	movs	r3, #2
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	2300      	movs	r3, #0
 8002212:	2178      	movs	r1, #120	; 0x78
 8002214:	4813      	ldr	r0, [pc, #76]	; (8002264 <FreqMenu_DrawPresetMenu+0xf24>)
 8002216:	f009 fd89 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 800221a:	7a7b      	ldrb	r3, [r7, #9]
 800221c:	b29a      	uxth	r2, r3
 800221e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002222:	9301      	str	r3, [sp, #4]
 8002224:	2302      	movs	r3, #2
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	2300      	movs	r3, #0
 800222a:	2178      	movs	r1, #120	; 0x78
 800222c:	480e      	ldr	r0, [pc, #56]	; (8002268 <FreqMenu_DrawPresetMenu+0xf28>)
 800222e:	f009 fd7d 	bl	800bd2c <ILI9341_Draw_Text>
				break;
 8002232:	e2e8      	b.n	8002806 <FreqMenu_DrawPresetMenu+0x14c6>
 8002234:	0800f404 	.word	0x0800f404
 8002238:	0800f40c 	.word	0x0800f40c
 800223c:	0800f414 	.word	0x0800f414
 8002240:	0800f41c 	.word	0x0800f41c
 8002244:	0800f424 	.word	0x0800f424
 8002248:	0800f42c 	.word	0x0800f42c
 800224c:	0800f434 	.word	0x0800f434
 8002250:	0800f43c 	.word	0x0800f43c
 8002254:	0800f444 	.word	0x0800f444
 8002258:	0800f44c 	.word	0x0800f44c
 800225c:	0800f454 	.word	0x0800f454
 8002260:	0800f45c 	.word	0x0800f45c
 8002264:	0800f464 	.word	0x0800f464
 8002268:	0800f46c 	.word	0x0800f46c
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 800226c:	7bfb      	ldrb	r3, [r7, #15]
 800226e:	b29a      	uxth	r2, r3
 8002270:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002274:	9301      	str	r3, [sp, #4]
 8002276:	2302      	movs	r3, #2
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	2300      	movs	r3, #0
 800227c:	210a      	movs	r1, #10
 800227e:	48a4      	ldr	r0, [pc, #656]	; (8002510 <FreqMenu_DrawPresetMenu+0x11d0>)
 8002280:	f009 fd54 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8002284:	7bbb      	ldrb	r3, [r7, #14]
 8002286:	b29a      	uxth	r2, r3
 8002288:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800228c:	9301      	str	r3, [sp, #4]
 800228e:	2302      	movs	r3, #2
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	2300      	movs	r3, #0
 8002294:	210a      	movs	r1, #10
 8002296:	489f      	ldr	r0, [pc, #636]	; (8002514 <FreqMenu_DrawPresetMenu+0x11d4>)
 8002298:	f009 fd48 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 800229c:	7b7b      	ldrb	r3, [r7, #13]
 800229e:	b29a      	uxth	r2, r3
 80022a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022a4:	9301      	str	r3, [sp, #4]
 80022a6:	2302      	movs	r3, #2
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	2300      	movs	r3, #0
 80022ac:	210a      	movs	r1, #10
 80022ae:	489a      	ldr	r0, [pc, #616]	; (8002518 <FreqMenu_DrawPresetMenu+0x11d8>)
 80022b0:	f009 fd3c 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 80022b4:	7b3b      	ldrb	r3, [r7, #12]
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022bc:	9301      	str	r3, [sp, #4]
 80022be:	2302      	movs	r3, #2
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	2300      	movs	r3, #0
 80022c4:	210a      	movs	r1, #10
 80022c6:	4895      	ldr	r0, [pc, #596]	; (800251c <FreqMenu_DrawPresetMenu+0x11dc>)
 80022c8:	f009 fd30 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80022cc:	7afb      	ldrb	r3, [r7, #11]
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022d4:	9301      	str	r3, [sp, #4]
 80022d6:	2302      	movs	r3, #2
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	2300      	movs	r3, #0
 80022dc:	210a      	movs	r1, #10
 80022de:	4890      	ldr	r0, [pc, #576]	; (8002520 <FreqMenu_DrawPresetMenu+0x11e0>)
 80022e0:	f009 fd24 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 80022e4:	7abb      	ldrb	r3, [r7, #10]
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022ec:	9301      	str	r3, [sp, #4]
 80022ee:	2302      	movs	r3, #2
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	2300      	movs	r3, #0
 80022f4:	210a      	movs	r1, #10
 80022f6:	488b      	ldr	r0, [pc, #556]	; (8002524 <FreqMenu_DrawPresetMenu+0x11e4>)
 80022f8:	f009 fd18 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 80022fc:	7a7b      	ldrb	r3, [r7, #9]
 80022fe:	b29a      	uxth	r2, r3
 8002300:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002304:	9301      	str	r3, [sp, #4]
 8002306:	2302      	movs	r3, #2
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	2300      	movs	r3, #0
 800230c:	210a      	movs	r1, #10
 800230e:	4886      	ldr	r0, [pc, #536]	; (8002528 <FreqMenu_DrawPresetMenu+0x11e8>)
 8002310:	f009 fd0c 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8002314:	7bfb      	ldrb	r3, [r7, #15]
 8002316:	b29a      	uxth	r2, r3
 8002318:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800231c:	9301      	str	r3, [sp, #4]
 800231e:	2302      	movs	r3, #2
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	2300      	movs	r3, #0
 8002324:	2178      	movs	r1, #120	; 0x78
 8002326:	4881      	ldr	r0, [pc, #516]	; (800252c <FreqMenu_DrawPresetMenu+0x11ec>)
 8002328:	f009 fd00 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 800232c:	7bbb      	ldrb	r3, [r7, #14]
 800232e:	b29a      	uxth	r2, r3
 8002330:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002334:	9301      	str	r3, [sp, #4]
 8002336:	2302      	movs	r3, #2
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	2300      	movs	r3, #0
 800233c:	2178      	movs	r1, #120	; 0x78
 800233e:	487c      	ldr	r0, [pc, #496]	; (8002530 <FreqMenu_DrawPresetMenu+0x11f0>)
 8002340:	f009 fcf4 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8002344:	7b7b      	ldrb	r3, [r7, #13]
 8002346:	b29a      	uxth	r2, r3
 8002348:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800234c:	9301      	str	r3, [sp, #4]
 800234e:	2302      	movs	r3, #2
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	2300      	movs	r3, #0
 8002354:	2178      	movs	r1, #120	; 0x78
 8002356:	4877      	ldr	r0, [pc, #476]	; (8002534 <FreqMenu_DrawPresetMenu+0x11f4>)
 8002358:	f009 fce8 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, WHITE, 2, BLACK);
 800235c:	7b3b      	ldrb	r3, [r7, #12]
 800235e:	b29a      	uxth	r2, r3
 8002360:	2300      	movs	r3, #0
 8002362:	9301      	str	r3, [sp, #4]
 8002364:	2302      	movs	r3, #2
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800236c:	2178      	movs	r1, #120	; 0x78
 800236e:	4872      	ldr	r0, [pc, #456]	; (8002538 <FreqMenu_DrawPresetMenu+0x11f8>)
 8002370:	f009 fcdc 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8002374:	7afb      	ldrb	r3, [r7, #11]
 8002376:	b29a      	uxth	r2, r3
 8002378:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800237c:	9301      	str	r3, [sp, #4]
 800237e:	2302      	movs	r3, #2
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	2300      	movs	r3, #0
 8002384:	2178      	movs	r1, #120	; 0x78
 8002386:	486d      	ldr	r0, [pc, #436]	; (800253c <FreqMenu_DrawPresetMenu+0x11fc>)
 8002388:	f009 fcd0 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 800238c:	7abb      	ldrb	r3, [r7, #10]
 800238e:	b29a      	uxth	r2, r3
 8002390:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002394:	9301      	str	r3, [sp, #4]
 8002396:	2302      	movs	r3, #2
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	2300      	movs	r3, #0
 800239c:	2178      	movs	r1, #120	; 0x78
 800239e:	4868      	ldr	r0, [pc, #416]	; (8002540 <FreqMenu_DrawPresetMenu+0x1200>)
 80023a0:	f009 fcc4 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80023a4:	7a7b      	ldrb	r3, [r7, #9]
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023ac:	9301      	str	r3, [sp, #4]
 80023ae:	2302      	movs	r3, #2
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	2300      	movs	r3, #0
 80023b4:	2178      	movs	r1, #120	; 0x78
 80023b6:	4863      	ldr	r0, [pc, #396]	; (8002544 <FreqMenu_DrawPresetMenu+0x1204>)
 80023b8:	f009 fcb8 	bl	800bd2c <ILI9341_Draw_Text>
				break;
 80023bc:	e223      	b.n	8002806 <FreqMenu_DrawPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 80023be:	7bfb      	ldrb	r3, [r7, #15]
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023c6:	9301      	str	r3, [sp, #4]
 80023c8:	2302      	movs	r3, #2
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	2300      	movs	r3, #0
 80023ce:	210a      	movs	r1, #10
 80023d0:	484f      	ldr	r0, [pc, #316]	; (8002510 <FreqMenu_DrawPresetMenu+0x11d0>)
 80023d2:	f009 fcab 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 80023d6:	7bbb      	ldrb	r3, [r7, #14]
 80023d8:	b29a      	uxth	r2, r3
 80023da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023de:	9301      	str	r3, [sp, #4]
 80023e0:	2302      	movs	r3, #2
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	2300      	movs	r3, #0
 80023e6:	210a      	movs	r1, #10
 80023e8:	484a      	ldr	r0, [pc, #296]	; (8002514 <FreqMenu_DrawPresetMenu+0x11d4>)
 80023ea:	f009 fc9f 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 80023ee:	7b7b      	ldrb	r3, [r7, #13]
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023f6:	9301      	str	r3, [sp, #4]
 80023f8:	2302      	movs	r3, #2
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	2300      	movs	r3, #0
 80023fe:	210a      	movs	r1, #10
 8002400:	4845      	ldr	r0, [pc, #276]	; (8002518 <FreqMenu_DrawPresetMenu+0x11d8>)
 8002402:	f009 fc93 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8002406:	7b3b      	ldrb	r3, [r7, #12]
 8002408:	b29a      	uxth	r2, r3
 800240a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800240e:	9301      	str	r3, [sp, #4]
 8002410:	2302      	movs	r3, #2
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	2300      	movs	r3, #0
 8002416:	210a      	movs	r1, #10
 8002418:	4840      	ldr	r0, [pc, #256]	; (800251c <FreqMenu_DrawPresetMenu+0x11dc>)
 800241a:	f009 fc87 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 800241e:	7afb      	ldrb	r3, [r7, #11]
 8002420:	b29a      	uxth	r2, r3
 8002422:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002426:	9301      	str	r3, [sp, #4]
 8002428:	2302      	movs	r3, #2
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	2300      	movs	r3, #0
 800242e:	210a      	movs	r1, #10
 8002430:	483b      	ldr	r0, [pc, #236]	; (8002520 <FreqMenu_DrawPresetMenu+0x11e0>)
 8002432:	f009 fc7b 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8002436:	7abb      	ldrb	r3, [r7, #10]
 8002438:	b29a      	uxth	r2, r3
 800243a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800243e:	9301      	str	r3, [sp, #4]
 8002440:	2302      	movs	r3, #2
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	2300      	movs	r3, #0
 8002446:	210a      	movs	r1, #10
 8002448:	4836      	ldr	r0, [pc, #216]	; (8002524 <FreqMenu_DrawPresetMenu+0x11e4>)
 800244a:	f009 fc6f 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 800244e:	7a7b      	ldrb	r3, [r7, #9]
 8002450:	b29a      	uxth	r2, r3
 8002452:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002456:	9301      	str	r3, [sp, #4]
 8002458:	2302      	movs	r3, #2
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	2300      	movs	r3, #0
 800245e:	210a      	movs	r1, #10
 8002460:	4831      	ldr	r0, [pc, #196]	; (8002528 <FreqMenu_DrawPresetMenu+0x11e8>)
 8002462:	f009 fc63 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8002466:	7bfb      	ldrb	r3, [r7, #15]
 8002468:	b29a      	uxth	r2, r3
 800246a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800246e:	9301      	str	r3, [sp, #4]
 8002470:	2302      	movs	r3, #2
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	2300      	movs	r3, #0
 8002476:	2178      	movs	r1, #120	; 0x78
 8002478:	482c      	ldr	r0, [pc, #176]	; (800252c <FreqMenu_DrawPresetMenu+0x11ec>)
 800247a:	f009 fc57 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 800247e:	7bbb      	ldrb	r3, [r7, #14]
 8002480:	b29a      	uxth	r2, r3
 8002482:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002486:	9301      	str	r3, [sp, #4]
 8002488:	2302      	movs	r3, #2
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	2300      	movs	r3, #0
 800248e:	2178      	movs	r1, #120	; 0x78
 8002490:	4827      	ldr	r0, [pc, #156]	; (8002530 <FreqMenu_DrawPresetMenu+0x11f0>)
 8002492:	f009 fc4b 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8002496:	7b7b      	ldrb	r3, [r7, #13]
 8002498:	b29a      	uxth	r2, r3
 800249a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800249e:	9301      	str	r3, [sp, #4]
 80024a0:	2302      	movs	r3, #2
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	2300      	movs	r3, #0
 80024a6:	2178      	movs	r1, #120	; 0x78
 80024a8:	4822      	ldr	r0, [pc, #136]	; (8002534 <FreqMenu_DrawPresetMenu+0x11f4>)
 80024aa:	f009 fc3f 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80024ae:	7b3b      	ldrb	r3, [r7, #12]
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024b6:	9301      	str	r3, [sp, #4]
 80024b8:	2302      	movs	r3, #2
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	2300      	movs	r3, #0
 80024be:	2178      	movs	r1, #120	; 0x78
 80024c0:	481d      	ldr	r0, [pc, #116]	; (8002538 <FreqMenu_DrawPresetMenu+0x11f8>)
 80024c2:	f009 fc33 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, WHITE, 2, BLACK);
 80024c6:	7afb      	ldrb	r3, [r7, #11]
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	2300      	movs	r3, #0
 80024cc:	9301      	str	r3, [sp, #4]
 80024ce:	2302      	movs	r3, #2
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024d6:	2178      	movs	r1, #120	; 0x78
 80024d8:	4818      	ldr	r0, [pc, #96]	; (800253c <FreqMenu_DrawPresetMenu+0x11fc>)
 80024da:	f009 fc27 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 80024de:	7abb      	ldrb	r3, [r7, #10]
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024e6:	9301      	str	r3, [sp, #4]
 80024e8:	2302      	movs	r3, #2
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	2300      	movs	r3, #0
 80024ee:	2178      	movs	r1, #120	; 0x78
 80024f0:	4813      	ldr	r0, [pc, #76]	; (8002540 <FreqMenu_DrawPresetMenu+0x1200>)
 80024f2:	f009 fc1b 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80024f6:	7a7b      	ldrb	r3, [r7, #9]
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024fe:	9301      	str	r3, [sp, #4]
 8002500:	2302      	movs	r3, #2
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	2300      	movs	r3, #0
 8002506:	2178      	movs	r1, #120	; 0x78
 8002508:	480e      	ldr	r0, [pc, #56]	; (8002544 <FreqMenu_DrawPresetMenu+0x1204>)
 800250a:	f009 fc0f 	bl	800bd2c <ILI9341_Draw_Text>
			break;
 800250e:	e17a      	b.n	8002806 <FreqMenu_DrawPresetMenu+0x14c6>
 8002510:	0800f404 	.word	0x0800f404
 8002514:	0800f40c 	.word	0x0800f40c
 8002518:	0800f414 	.word	0x0800f414
 800251c:	0800f41c 	.word	0x0800f41c
 8002520:	0800f424 	.word	0x0800f424
 8002524:	0800f42c 	.word	0x0800f42c
 8002528:	0800f434 	.word	0x0800f434
 800252c:	0800f43c 	.word	0x0800f43c
 8002530:	0800f444 	.word	0x0800f444
 8002534:	0800f44c 	.word	0x0800f44c
 8002538:	0800f454 	.word	0x0800f454
 800253c:	0800f45c 	.word	0x0800f45c
 8002540:	0800f464 	.word	0x0800f464
 8002544:	0800f46c 	.word	0x0800f46c
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8002548:	7bfb      	ldrb	r3, [r7, #15]
 800254a:	b29a      	uxth	r2, r3
 800254c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002550:	9301      	str	r3, [sp, #4]
 8002552:	2302      	movs	r3, #2
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	2300      	movs	r3, #0
 8002558:	210a      	movs	r1, #10
 800255a:	48ad      	ldr	r0, [pc, #692]	; (8002810 <FreqMenu_DrawPresetMenu+0x14d0>)
 800255c:	f009 fbe6 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8002560:	7bbb      	ldrb	r3, [r7, #14]
 8002562:	b29a      	uxth	r2, r3
 8002564:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002568:	9301      	str	r3, [sp, #4]
 800256a:	2302      	movs	r3, #2
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	2300      	movs	r3, #0
 8002570:	210a      	movs	r1, #10
 8002572:	48a8      	ldr	r0, [pc, #672]	; (8002814 <FreqMenu_DrawPresetMenu+0x14d4>)
 8002574:	f009 fbda 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8002578:	7b7b      	ldrb	r3, [r7, #13]
 800257a:	b29a      	uxth	r2, r3
 800257c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002580:	9301      	str	r3, [sp, #4]
 8002582:	2302      	movs	r3, #2
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	2300      	movs	r3, #0
 8002588:	210a      	movs	r1, #10
 800258a:	48a3      	ldr	r0, [pc, #652]	; (8002818 <FreqMenu_DrawPresetMenu+0x14d8>)
 800258c:	f009 fbce 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8002590:	7b3b      	ldrb	r3, [r7, #12]
 8002592:	b29a      	uxth	r2, r3
 8002594:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002598:	9301      	str	r3, [sp, #4]
 800259a:	2302      	movs	r3, #2
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	2300      	movs	r3, #0
 80025a0:	210a      	movs	r1, #10
 80025a2:	489e      	ldr	r0, [pc, #632]	; (800281c <FreqMenu_DrawPresetMenu+0x14dc>)
 80025a4:	f009 fbc2 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80025a8:	7afb      	ldrb	r3, [r7, #11]
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025b0:	9301      	str	r3, [sp, #4]
 80025b2:	2302      	movs	r3, #2
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	2300      	movs	r3, #0
 80025b8:	210a      	movs	r1, #10
 80025ba:	4899      	ldr	r0, [pc, #612]	; (8002820 <FreqMenu_DrawPresetMenu+0x14e0>)
 80025bc:	f009 fbb6 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 80025c0:	7abb      	ldrb	r3, [r7, #10]
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025c8:	9301      	str	r3, [sp, #4]
 80025ca:	2302      	movs	r3, #2
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	2300      	movs	r3, #0
 80025d0:	210a      	movs	r1, #10
 80025d2:	4894      	ldr	r0, [pc, #592]	; (8002824 <FreqMenu_DrawPresetMenu+0x14e4>)
 80025d4:	f009 fbaa 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 80025d8:	7a7b      	ldrb	r3, [r7, #9]
 80025da:	b29a      	uxth	r2, r3
 80025dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025e0:	9301      	str	r3, [sp, #4]
 80025e2:	2302      	movs	r3, #2
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	2300      	movs	r3, #0
 80025e8:	210a      	movs	r1, #10
 80025ea:	488f      	ldr	r0, [pc, #572]	; (8002828 <FreqMenu_DrawPresetMenu+0x14e8>)
 80025ec:	f009 fb9e 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025f8:	9301      	str	r3, [sp, #4]
 80025fa:	2302      	movs	r3, #2
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	2300      	movs	r3, #0
 8002600:	2178      	movs	r1, #120	; 0x78
 8002602:	488a      	ldr	r0, [pc, #552]	; (800282c <FreqMenu_DrawPresetMenu+0x14ec>)
 8002604:	f009 fb92 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8002608:	7bbb      	ldrb	r3, [r7, #14]
 800260a:	b29a      	uxth	r2, r3
 800260c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002610:	9301      	str	r3, [sp, #4]
 8002612:	2302      	movs	r3, #2
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	2300      	movs	r3, #0
 8002618:	2178      	movs	r1, #120	; 0x78
 800261a:	4885      	ldr	r0, [pc, #532]	; (8002830 <FreqMenu_DrawPresetMenu+0x14f0>)
 800261c:	f009 fb86 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8002620:	7b7b      	ldrb	r3, [r7, #13]
 8002622:	b29a      	uxth	r2, r3
 8002624:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002628:	9301      	str	r3, [sp, #4]
 800262a:	2302      	movs	r3, #2
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	2300      	movs	r3, #0
 8002630:	2178      	movs	r1, #120	; 0x78
 8002632:	4880      	ldr	r0, [pc, #512]	; (8002834 <FreqMenu_DrawPresetMenu+0x14f4>)
 8002634:	f009 fb7a 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8002638:	7b3b      	ldrb	r3, [r7, #12]
 800263a:	b29a      	uxth	r2, r3
 800263c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002640:	9301      	str	r3, [sp, #4]
 8002642:	2302      	movs	r3, #2
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	2300      	movs	r3, #0
 8002648:	2178      	movs	r1, #120	; 0x78
 800264a:	487b      	ldr	r0, [pc, #492]	; (8002838 <FreqMenu_DrawPresetMenu+0x14f8>)
 800264c:	f009 fb6e 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8002650:	7afb      	ldrb	r3, [r7, #11]
 8002652:	b29a      	uxth	r2, r3
 8002654:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002658:	9301      	str	r3, [sp, #4]
 800265a:	2302      	movs	r3, #2
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	2300      	movs	r3, #0
 8002660:	2178      	movs	r1, #120	; 0x78
 8002662:	4876      	ldr	r0, [pc, #472]	; (800283c <FreqMenu_DrawPresetMenu+0x14fc>)
 8002664:	f009 fb62 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, WHITE, 2, BLACK);
 8002668:	7abb      	ldrb	r3, [r7, #10]
 800266a:	b29a      	uxth	r2, r3
 800266c:	2300      	movs	r3, #0
 800266e:	9301      	str	r3, [sp, #4]
 8002670:	2302      	movs	r3, #2
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002678:	2178      	movs	r1, #120	; 0x78
 800267a:	4871      	ldr	r0, [pc, #452]	; (8002840 <FreqMenu_DrawPresetMenu+0x1500>)
 800267c:	f009 fb56 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8002680:	7a7b      	ldrb	r3, [r7, #9]
 8002682:	b29a      	uxth	r2, r3
 8002684:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002688:	9301      	str	r3, [sp, #4]
 800268a:	2302      	movs	r3, #2
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	2300      	movs	r3, #0
 8002690:	2178      	movs	r1, #120	; 0x78
 8002692:	486c      	ldr	r0, [pc, #432]	; (8002844 <FreqMenu_DrawPresetMenu+0x1504>)
 8002694:	f009 fb4a 	bl	800bd2c <ILI9341_Draw_Text>
			break;
 8002698:	e0b5      	b.n	8002806 <FreqMenu_DrawPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 800269a:	7bfb      	ldrb	r3, [r7, #15]
 800269c:	b29a      	uxth	r2, r3
 800269e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026a2:	9301      	str	r3, [sp, #4]
 80026a4:	2302      	movs	r3, #2
 80026a6:	9300      	str	r3, [sp, #0]
 80026a8:	2300      	movs	r3, #0
 80026aa:	210a      	movs	r1, #10
 80026ac:	4858      	ldr	r0, [pc, #352]	; (8002810 <FreqMenu_DrawPresetMenu+0x14d0>)
 80026ae:	f009 fb3d 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 80026b2:	7bbb      	ldrb	r3, [r7, #14]
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026ba:	9301      	str	r3, [sp, #4]
 80026bc:	2302      	movs	r3, #2
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	2300      	movs	r3, #0
 80026c2:	210a      	movs	r1, #10
 80026c4:	4853      	ldr	r0, [pc, #332]	; (8002814 <FreqMenu_DrawPresetMenu+0x14d4>)
 80026c6:	f009 fb31 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 80026ca:	7b7b      	ldrb	r3, [r7, #13]
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026d2:	9301      	str	r3, [sp, #4]
 80026d4:	2302      	movs	r3, #2
 80026d6:	9300      	str	r3, [sp, #0]
 80026d8:	2300      	movs	r3, #0
 80026da:	210a      	movs	r1, #10
 80026dc:	484e      	ldr	r0, [pc, #312]	; (8002818 <FreqMenu_DrawPresetMenu+0x14d8>)
 80026de:	f009 fb25 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 80026e2:	7b3b      	ldrb	r3, [r7, #12]
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026ea:	9301      	str	r3, [sp, #4]
 80026ec:	2302      	movs	r3, #2
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	2300      	movs	r3, #0
 80026f2:	210a      	movs	r1, #10
 80026f4:	4849      	ldr	r0, [pc, #292]	; (800281c <FreqMenu_DrawPresetMenu+0x14dc>)
 80026f6:	f009 fb19 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80026fa:	7afb      	ldrb	r3, [r7, #11]
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002702:	9301      	str	r3, [sp, #4]
 8002704:	2302      	movs	r3, #2
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	2300      	movs	r3, #0
 800270a:	210a      	movs	r1, #10
 800270c:	4844      	ldr	r0, [pc, #272]	; (8002820 <FreqMenu_DrawPresetMenu+0x14e0>)
 800270e:	f009 fb0d 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8002712:	7abb      	ldrb	r3, [r7, #10]
 8002714:	b29a      	uxth	r2, r3
 8002716:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800271a:	9301      	str	r3, [sp, #4]
 800271c:	2302      	movs	r3, #2
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	2300      	movs	r3, #0
 8002722:	210a      	movs	r1, #10
 8002724:	483f      	ldr	r0, [pc, #252]	; (8002824 <FreqMenu_DrawPresetMenu+0x14e4>)
 8002726:	f009 fb01 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 800272a:	7a7b      	ldrb	r3, [r7, #9]
 800272c:	b29a      	uxth	r2, r3
 800272e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002732:	9301      	str	r3, [sp, #4]
 8002734:	2302      	movs	r3, #2
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	2300      	movs	r3, #0
 800273a:	210a      	movs	r1, #10
 800273c:	483a      	ldr	r0, [pc, #232]	; (8002828 <FreqMenu_DrawPresetMenu+0x14e8>)
 800273e:	f009 faf5 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8002742:	7bfb      	ldrb	r3, [r7, #15]
 8002744:	b29a      	uxth	r2, r3
 8002746:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800274a:	9301      	str	r3, [sp, #4]
 800274c:	2302      	movs	r3, #2
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	2300      	movs	r3, #0
 8002752:	2178      	movs	r1, #120	; 0x78
 8002754:	4835      	ldr	r0, [pc, #212]	; (800282c <FreqMenu_DrawPresetMenu+0x14ec>)
 8002756:	f009 fae9 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 800275a:	7bbb      	ldrb	r3, [r7, #14]
 800275c:	b29a      	uxth	r2, r3
 800275e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002762:	9301      	str	r3, [sp, #4]
 8002764:	2302      	movs	r3, #2
 8002766:	9300      	str	r3, [sp, #0]
 8002768:	2300      	movs	r3, #0
 800276a:	2178      	movs	r1, #120	; 0x78
 800276c:	4830      	ldr	r0, [pc, #192]	; (8002830 <FreqMenu_DrawPresetMenu+0x14f0>)
 800276e:	f009 fadd 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8002772:	7b7b      	ldrb	r3, [r7, #13]
 8002774:	b29a      	uxth	r2, r3
 8002776:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800277a:	9301      	str	r3, [sp, #4]
 800277c:	2302      	movs	r3, #2
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	2300      	movs	r3, #0
 8002782:	2178      	movs	r1, #120	; 0x78
 8002784:	482b      	ldr	r0, [pc, #172]	; (8002834 <FreqMenu_DrawPresetMenu+0x14f4>)
 8002786:	f009 fad1 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 800278a:	7b3b      	ldrb	r3, [r7, #12]
 800278c:	b29a      	uxth	r2, r3
 800278e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002792:	9301      	str	r3, [sp, #4]
 8002794:	2302      	movs	r3, #2
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	2300      	movs	r3, #0
 800279a:	2178      	movs	r1, #120	; 0x78
 800279c:	4826      	ldr	r0, [pc, #152]	; (8002838 <FreqMenu_DrawPresetMenu+0x14f8>)
 800279e:	f009 fac5 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 80027a2:	7afb      	ldrb	r3, [r7, #11]
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027aa:	9301      	str	r3, [sp, #4]
 80027ac:	2302      	movs	r3, #2
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	2300      	movs	r3, #0
 80027b2:	2178      	movs	r1, #120	; 0x78
 80027b4:	4821      	ldr	r0, [pc, #132]	; (800283c <FreqMenu_DrawPresetMenu+0x14fc>)
 80027b6:	f009 fab9 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 80027ba:	7abb      	ldrb	r3, [r7, #10]
 80027bc:	b29a      	uxth	r2, r3
 80027be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027c2:	9301      	str	r3, [sp, #4]
 80027c4:	2302      	movs	r3, #2
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	2300      	movs	r3, #0
 80027ca:	2178      	movs	r1, #120	; 0x78
 80027cc:	481c      	ldr	r0, [pc, #112]	; (8002840 <FreqMenu_DrawPresetMenu+0x1500>)
 80027ce:	f009 faad 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, WHITE, 2, BLACK);
 80027d2:	7a7b      	ldrb	r3, [r7, #9]
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	2300      	movs	r3, #0
 80027d8:	9301      	str	r3, [sp, #4]
 80027da:	2302      	movs	r3, #2
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027e2:	2178      	movs	r1, #120	; 0x78
 80027e4:	4817      	ldr	r0, [pc, #92]	; (8002844 <FreqMenu_DrawPresetMenu+0x1504>)
 80027e6:	f009 faa1 	bl	800bd2c <ILI9341_Draw_Text>
			break;
 80027ea:	bf00      	nop
 80027ec:	e00b      	b.n	8002806 <FreqMenu_DrawPresetMenu+0x14c6>
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		10, 180, RED, 1, BLACK);
 80027ee:	2300      	movs	r3, #0
 80027f0:	9301      	str	r3, [sp, #4]
 80027f2:	2301      	movs	r3, #1
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80027fa:	22b4      	movs	r2, #180	; 0xb4
 80027fc:	210a      	movs	r1, #10
 80027fe:	4812      	ldr	r0, [pc, #72]	; (8002848 <FreqMenu_DrawPresetMenu+0x1508>)
 8002800:	f009 fa94 	bl	800bd2c <ILI9341_Draw_Text>
}
 8002804:	e7ff      	b.n	8002806 <FreqMenu_DrawPresetMenu+0x14c6>
 8002806:	bf00      	nop
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	0800f404 	.word	0x0800f404
 8002814:	0800f40c 	.word	0x0800f40c
 8002818:	0800f414 	.word	0x0800f414
 800281c:	0800f41c 	.word	0x0800f41c
 8002820:	0800f424 	.word	0x0800f424
 8002824:	0800f42c 	.word	0x0800f42c
 8002828:	0800f434 	.word	0x0800f434
 800282c:	0800f43c 	.word	0x0800f43c
 8002830:	0800f444 	.word	0x0800f444
 8002834:	0800f44c 	.word	0x0800f44c
 8002838:	0800f454 	.word	0x0800f454
 800283c:	0800f45c 	.word	0x0800f45c
 8002840:	0800f464 	.word	0x0800f464
 8002844:	0800f46c 	.word	0x0800f46c
 8002848:	0800f478 	.word	0x0800f478

0800284c <FreqMenu_DrawAdjustMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawAdjustMenu()
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("Output Signal Freq: ", 	10, 150, BLACK, 1, WHITE);
 8002852:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002856:	9301      	str	r3, [sp, #4]
 8002858:	2301      	movs	r3, #1
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	2300      	movs	r3, #0
 800285e:	2296      	movs	r2, #150	; 0x96
 8002860:	210a      	movs	r1, #10
 8002862:	4811      	ldr	r0, [pc, #68]	; (80028a8 <FreqMenu_DrawAdjustMenu+0x5c>)
 8002864:	f009 fa62 	bl	800bd2c <ILI9341_Draw_Text>

	char freq[6] = "";
 8002868:	2300      	movs	r3, #0
 800286a:	603b      	str	r3, [r7, #0]
 800286c:	2300      	movs	r3, #0
 800286e:	80bb      	strh	r3, [r7, #4]
	//snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
	if(DM_AddDigitPadding((uint16_t)FreqO_GetOutputFreq(), freq, sizeof(freq)) == 0)
 8002870:	f001 f99a 	bl	8003ba8 <FreqO_GetOutputFreq>
 8002874:	4603      	mov	r3, r0
 8002876:	b29b      	uxth	r3, r3
 8002878:	4639      	mov	r1, r7
 800287a:	2206      	movs	r2, #6
 800287c:	4618      	mov	r0, r3
 800287e:	f7fe fc9f 	bl	80011c0 <DM_AddDigitPadding>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10a      	bne.n	800289e <FreqMenu_DrawAdjustMenu+0x52>
		ILI9341_Draw_Text(freq, 250, 150, WHITE, 1, BLACK);
 8002888:	4638      	mov	r0, r7
 800288a:	2300      	movs	r3, #0
 800288c:	9301      	str	r3, [sp, #4]
 800288e:	2301      	movs	r3, #1
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002896:	2296      	movs	r2, #150	; 0x96
 8002898:	21fa      	movs	r1, #250	; 0xfa
 800289a:	f009 fa47 	bl	800bd2c <ILI9341_Draw_Text>


}
 800289e:	bf00      	nop
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	0800f4a8 	.word	0x0800f4a8

080028ac <FreqMenu_DrawSweepMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawSweepMenu()
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("TODO: Freq Sweep Menu", 	10, 120, BLACK, 2, WHITE);
 80028b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028b6:	9301      	str	r3, [sp, #4]
 80028b8:	2302      	movs	r3, #2
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	2300      	movs	r3, #0
 80028be:	2278      	movs	r2, #120	; 0x78
 80028c0:	210a      	movs	r1, #10
 80028c2:	4803      	ldr	r0, [pc, #12]	; (80028d0 <FreqMenu_DrawSweepMenu+0x24>)
 80028c4:	f009 fa32 	bl	800bd2c <ILI9341_Draw_Text>




}
 80028c8:	bf00      	nop
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	0800f4c0 	.word	0x0800f4c0

080028d4 <FuncMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMainMenu()
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("FUNCTION MAIN MENU", 	10, 10, WHITE, 3, BLACK);
 80028da:	2300      	movs	r3, #0
 80028dc:	9301      	str	r3, [sp, #4]
 80028de:	2303      	movs	r3, #3
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028e6:	220a      	movs	r2, #10
 80028e8:	210a      	movs	r1, #10
 80028ea:	4819      	ldr	r0, [pc, #100]	; (8002950 <FuncMenu_DrawMainMenu+0x7c>)
 80028ec:	f009 fa1e 	bl	800bd2c <ILI9341_Draw_Text>
 	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 10, 210, BLACK, 2, DARKCYAN);
 80028f0:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80028f4:	9301      	str	r3, [sp, #4]
 80028f6:	2302      	movs	r3, #2
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	2300      	movs	r3, #0
 80028fc:	22d2      	movs	r2, #210	; 0xd2
 80028fe:	210a      	movs	r1, #10
 8002900:	4814      	ldr	r0, [pc, #80]	; (8002954 <FuncMenu_DrawMainMenu+0x80>)
 8002902:	f009 fa13 	bl	800bd2c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SYNC", 100, 210, BLACK, 2, DARKGREEN);
 8002906:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 800290a:	9301      	str	r3, [sp, #4]
 800290c:	2302      	movs	r3, #2
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	2300      	movs	r3, #0
 8002912:	22d2      	movs	r2, #210	; 0xd2
 8002914:	2164      	movs	r1, #100	; 0x64
 8002916:	4810      	ldr	r0, [pc, #64]	; (8002958 <FuncMenu_DrawMainMenu+0x84>)
 8002918:	f009 fa08 	bl	800bd2c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
 800291c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002920:	9301      	str	r3, [sp, #4]
 8002922:	2302      	movs	r3, #2
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	2300      	movs	r3, #0
 8002928:	22d2      	movs	r2, #210	; 0xd2
 800292a:	21af      	movs	r1, #175	; 0xaf
 800292c:	480b      	ldr	r0, [pc, #44]	; (800295c <FuncMenu_DrawMainMenu+0x88>)
 800292e:	f009 f9fd 	bl	800bd2c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
 8002932:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002936:	9301      	str	r3, [sp, #4]
 8002938:	2302      	movs	r3, #2
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	2300      	movs	r3, #0
 800293e:	22d2      	movs	r2, #210	; 0xd2
 8002940:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002944:	4805      	ldr	r0, [pc, #20]	; (800295c <FuncMenu_DrawMainMenu+0x88>)
 8002946:	f009 f9f1 	bl	800bd2c <ILI9341_Draw_Text>
}
 800294a:	bf00      	nop
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	0800f4d8 	.word	0x0800f4d8
 8002954:	0800f4ec 	.word	0x0800f4ec
 8002958:	0800f4f4 	.word	0x0800f4f4
 800295c:	0800f4fc 	.word	0x0800f4fc

08002960 <FuncMenu_DrawSignalMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawSignalMenu()
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("SELECT SIGNAL FUNCTION", 	10, 10, WHITE, 3, BLACK);
 8002966:	2300      	movs	r3, #0
 8002968:	9301      	str	r3, [sp, #4]
 800296a:	2303      	movs	r3, #3
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002972:	220a      	movs	r2, #10
 8002974:	210a      	movs	r1, #10
 8002976:	48b7      	ldr	r0, [pc, #732]	; (8002c54 <FuncMenu_DrawSignalMenu+0x2f4>)
 8002978:	f009 f9d8 	bl	800bd2c <ILI9341_Draw_Text>

	Func_Preset_Encoder_Pos_t *pFuncPresetTmp = FuncO_GetFPresetObject();
 800297c:	f001 fa74 	bl	8003e68 <FuncO_GetFPresetObject>
 8002980:	6078      	str	r0, [r7, #4]
	if(pFuncPresetTmp)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 81b6 	beq.w	8002cf6 <FuncMenu_DrawSignalMenu+0x396>
	{
		switch(pFuncPresetTmp->func)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	2b05      	cmp	r3, #5
 8002990:	f200 81b1 	bhi.w	8002cf6 <FuncMenu_DrawSignalMenu+0x396>
 8002994:	a201      	add	r2, pc, #4	; (adr r2, 800299c <FuncMenu_DrawSignalMenu+0x3c>)
 8002996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800299a:	bf00      	nop
 800299c:	080029b5 	.word	0x080029b5
 80029a0:	08002a3b 	.word	0x08002a3b
 80029a4:	08002ac1 	.word	0x08002ac1
 80029a8:	08002b47 	.word	0x08002b47
 80029ac:	08002bcd 	.word	0x08002bcd
 80029b0:	08002c71 	.word	0x08002c71
		{
			case SINE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, WHITE, 2, BLACK);
 80029b4:	2300      	movs	r3, #0
 80029b6:	9301      	str	r3, [sp, #4]
 80029b8:	2302      	movs	r3, #2
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029c0:	2232      	movs	r2, #50	; 0x32
 80029c2:	210a      	movs	r1, #10
 80029c4:	48a4      	ldr	r0, [pc, #656]	; (8002c58 <FuncMenu_DrawSignalMenu+0x2f8>)
 80029c6:	f009 f9b1 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 80029ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029ce:	9301      	str	r3, [sp, #4]
 80029d0:	2302      	movs	r3, #2
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	2300      	movs	r3, #0
 80029d6:	2246      	movs	r2, #70	; 0x46
 80029d8:	210a      	movs	r1, #10
 80029da:	48a0      	ldr	r0, [pc, #640]	; (8002c5c <FuncMenu_DrawSignalMenu+0x2fc>)
 80029dc:	f009 f9a6 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 80029e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029e4:	9301      	str	r3, [sp, #4]
 80029e6:	2302      	movs	r3, #2
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	2300      	movs	r3, #0
 80029ec:	225a      	movs	r2, #90	; 0x5a
 80029ee:	210a      	movs	r1, #10
 80029f0:	489b      	ldr	r0, [pc, #620]	; (8002c60 <FuncMenu_DrawSignalMenu+0x300>)
 80029f2:	f009 f99b 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 80029f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029fa:	9301      	str	r3, [sp, #4]
 80029fc:	2302      	movs	r3, #2
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	2300      	movs	r3, #0
 8002a02:	226e      	movs	r2, #110	; 0x6e
 8002a04:	210a      	movs	r1, #10
 8002a06:	4897      	ldr	r0, [pc, #604]	; (8002c64 <FuncMenu_DrawSignalMenu+0x304>)
 8002a08:	f009 f990 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8002a0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a10:	9301      	str	r3, [sp, #4]
 8002a12:	2302      	movs	r3, #2
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	2300      	movs	r3, #0
 8002a18:	2282      	movs	r2, #130	; 0x82
 8002a1a:	210a      	movs	r1, #10
 8002a1c:	4892      	ldr	r0, [pc, #584]	; (8002c68 <FuncMenu_DrawSignalMenu+0x308>)
 8002a1e:	f009 f985 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8002a22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a26:	9301      	str	r3, [sp, #4]
 8002a28:	2302      	movs	r3, #2
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	2296      	movs	r2, #150	; 0x96
 8002a30:	210a      	movs	r1, #10
 8002a32:	488e      	ldr	r0, [pc, #568]	; (8002c6c <FuncMenu_DrawSignalMenu+0x30c>)
 8002a34:	f009 f97a 	bl	800bd2c <ILI9341_Draw_Text>
				break;
 8002a38:	e15d      	b.n	8002cf6 <FuncMenu_DrawSignalMenu+0x396>
			case SQUARE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8002a3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a3e:	9301      	str	r3, [sp, #4]
 8002a40:	2302      	movs	r3, #2
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	2300      	movs	r3, #0
 8002a46:	2232      	movs	r2, #50	; 0x32
 8002a48:	210a      	movs	r1, #10
 8002a4a:	4883      	ldr	r0, [pc, #524]	; (8002c58 <FuncMenu_DrawSignalMenu+0x2f8>)
 8002a4c:	f009 f96e 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, WHITE, 2, BLACK);
 8002a50:	2300      	movs	r3, #0
 8002a52:	9301      	str	r3, [sp, #4]
 8002a54:	2302      	movs	r3, #2
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a5c:	2246      	movs	r2, #70	; 0x46
 8002a5e:	210a      	movs	r1, #10
 8002a60:	487e      	ldr	r0, [pc, #504]	; (8002c5c <FuncMenu_DrawSignalMenu+0x2fc>)
 8002a62:	f009 f963 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8002a66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a6a:	9301      	str	r3, [sp, #4]
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	2300      	movs	r3, #0
 8002a72:	225a      	movs	r2, #90	; 0x5a
 8002a74:	210a      	movs	r1, #10
 8002a76:	487a      	ldr	r0, [pc, #488]	; (8002c60 <FuncMenu_DrawSignalMenu+0x300>)
 8002a78:	f009 f958 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8002a7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a80:	9301      	str	r3, [sp, #4]
 8002a82:	2302      	movs	r3, #2
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	2300      	movs	r3, #0
 8002a88:	226e      	movs	r2, #110	; 0x6e
 8002a8a:	210a      	movs	r1, #10
 8002a8c:	4875      	ldr	r0, [pc, #468]	; (8002c64 <FuncMenu_DrawSignalMenu+0x304>)
 8002a8e:	f009 f94d 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8002a92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a96:	9301      	str	r3, [sp, #4]
 8002a98:	2302      	movs	r3, #2
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	2282      	movs	r2, #130	; 0x82
 8002aa0:	210a      	movs	r1, #10
 8002aa2:	4871      	ldr	r0, [pc, #452]	; (8002c68 <FuncMenu_DrawSignalMenu+0x308>)
 8002aa4:	f009 f942 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8002aa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002aac:	9301      	str	r3, [sp, #4]
 8002aae:	2302      	movs	r3, #2
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	2296      	movs	r2, #150	; 0x96
 8002ab6:	210a      	movs	r1, #10
 8002ab8:	486c      	ldr	r0, [pc, #432]	; (8002c6c <FuncMenu_DrawSignalMenu+0x30c>)
 8002aba:	f009 f937 	bl	800bd2c <ILI9341_Draw_Text>
				break;
 8002abe:	e11a      	b.n	8002cf6 <FuncMenu_DrawSignalMenu+0x396>
			case SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8002ac0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ac4:	9301      	str	r3, [sp, #4]
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	2300      	movs	r3, #0
 8002acc:	2232      	movs	r2, #50	; 0x32
 8002ace:	210a      	movs	r1, #10
 8002ad0:	4861      	ldr	r0, [pc, #388]	; (8002c58 <FuncMenu_DrawSignalMenu+0x2f8>)
 8002ad2:	f009 f92b 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8002ad6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ada:	9301      	str	r3, [sp, #4]
 8002adc:	2302      	movs	r3, #2
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	2246      	movs	r2, #70	; 0x46
 8002ae4:	210a      	movs	r1, #10
 8002ae6:	485d      	ldr	r0, [pc, #372]	; (8002c5c <FuncMenu_DrawSignalMenu+0x2fc>)
 8002ae8:	f009 f920 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, WHITE, 2, BLACK);
 8002aec:	2300      	movs	r3, #0
 8002aee:	9301      	str	r3, [sp, #4]
 8002af0:	2302      	movs	r3, #2
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002af8:	225a      	movs	r2, #90	; 0x5a
 8002afa:	210a      	movs	r1, #10
 8002afc:	4858      	ldr	r0, [pc, #352]	; (8002c60 <FuncMenu_DrawSignalMenu+0x300>)
 8002afe:	f009 f915 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8002b02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b06:	9301      	str	r3, [sp, #4]
 8002b08:	2302      	movs	r3, #2
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	226e      	movs	r2, #110	; 0x6e
 8002b10:	210a      	movs	r1, #10
 8002b12:	4854      	ldr	r0, [pc, #336]	; (8002c64 <FuncMenu_DrawSignalMenu+0x304>)
 8002b14:	f009 f90a 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8002b18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b1c:	9301      	str	r3, [sp, #4]
 8002b1e:	2302      	movs	r3, #2
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	2300      	movs	r3, #0
 8002b24:	2282      	movs	r2, #130	; 0x82
 8002b26:	210a      	movs	r1, #10
 8002b28:	484f      	ldr	r0, [pc, #316]	; (8002c68 <FuncMenu_DrawSignalMenu+0x308>)
 8002b2a:	f009 f8ff 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8002b2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b32:	9301      	str	r3, [sp, #4]
 8002b34:	2302      	movs	r3, #2
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	2300      	movs	r3, #0
 8002b3a:	2296      	movs	r2, #150	; 0x96
 8002b3c:	210a      	movs	r1, #10
 8002b3e:	484b      	ldr	r0, [pc, #300]	; (8002c6c <FuncMenu_DrawSignalMenu+0x30c>)
 8002b40:	f009 f8f4 	bl	800bd2c <ILI9341_Draw_Text>
				break;
 8002b44:	e0d7      	b.n	8002cf6 <FuncMenu_DrawSignalMenu+0x396>
			case REV_SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8002b46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b4a:	9301      	str	r3, [sp, #4]
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	2300      	movs	r3, #0
 8002b52:	2232      	movs	r2, #50	; 0x32
 8002b54:	210a      	movs	r1, #10
 8002b56:	4840      	ldr	r0, [pc, #256]	; (8002c58 <FuncMenu_DrawSignalMenu+0x2f8>)
 8002b58:	f009 f8e8 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8002b5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b60:	9301      	str	r3, [sp, #4]
 8002b62:	2302      	movs	r3, #2
 8002b64:	9300      	str	r3, [sp, #0]
 8002b66:	2300      	movs	r3, #0
 8002b68:	2246      	movs	r2, #70	; 0x46
 8002b6a:	210a      	movs	r1, #10
 8002b6c:	483b      	ldr	r0, [pc, #236]	; (8002c5c <FuncMenu_DrawSignalMenu+0x2fc>)
 8002b6e:	f009 f8dd 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8002b72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b76:	9301      	str	r3, [sp, #4]
 8002b78:	2302      	movs	r3, #2
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	225a      	movs	r2, #90	; 0x5a
 8002b80:	210a      	movs	r1, #10
 8002b82:	4837      	ldr	r0, [pc, #220]	; (8002c60 <FuncMenu_DrawSignalMenu+0x300>)
 8002b84:	f009 f8d2 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, WHITE, 2, BLACK);
 8002b88:	2300      	movs	r3, #0
 8002b8a:	9301      	str	r3, [sp, #4]
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	9300      	str	r3, [sp, #0]
 8002b90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b94:	226e      	movs	r2, #110	; 0x6e
 8002b96:	210a      	movs	r1, #10
 8002b98:	4832      	ldr	r0, [pc, #200]	; (8002c64 <FuncMenu_DrawSignalMenu+0x304>)
 8002b9a:	f009 f8c7 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8002b9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ba2:	9301      	str	r3, [sp, #4]
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	2300      	movs	r3, #0
 8002baa:	2282      	movs	r2, #130	; 0x82
 8002bac:	210a      	movs	r1, #10
 8002bae:	482e      	ldr	r0, [pc, #184]	; (8002c68 <FuncMenu_DrawSignalMenu+0x308>)
 8002bb0:	f009 f8bc 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8002bb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bb8:	9301      	str	r3, [sp, #4]
 8002bba:	2302      	movs	r3, #2
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	2296      	movs	r2, #150	; 0x96
 8002bc2:	210a      	movs	r1, #10
 8002bc4:	4829      	ldr	r0, [pc, #164]	; (8002c6c <FuncMenu_DrawSignalMenu+0x30c>)
 8002bc6:	f009 f8b1 	bl	800bd2c <ILI9341_Draw_Text>
				break;
 8002bca:	e094      	b.n	8002cf6 <FuncMenu_DrawSignalMenu+0x396>
			case TRIANGLE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8002bcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bd0:	9301      	str	r3, [sp, #4]
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	2232      	movs	r2, #50	; 0x32
 8002bda:	210a      	movs	r1, #10
 8002bdc:	481e      	ldr	r0, [pc, #120]	; (8002c58 <FuncMenu_DrawSignalMenu+0x2f8>)
 8002bde:	f009 f8a5 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8002be2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002be6:	9301      	str	r3, [sp, #4]
 8002be8:	2302      	movs	r3, #2
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	2300      	movs	r3, #0
 8002bee:	2246      	movs	r2, #70	; 0x46
 8002bf0:	210a      	movs	r1, #10
 8002bf2:	481a      	ldr	r0, [pc, #104]	; (8002c5c <FuncMenu_DrawSignalMenu+0x2fc>)
 8002bf4:	f009 f89a 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8002bf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bfc:	9301      	str	r3, [sp, #4]
 8002bfe:	2302      	movs	r3, #2
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	2300      	movs	r3, #0
 8002c04:	225a      	movs	r2, #90	; 0x5a
 8002c06:	210a      	movs	r1, #10
 8002c08:	4815      	ldr	r0, [pc, #84]	; (8002c60 <FuncMenu_DrawSignalMenu+0x300>)
 8002c0a:	f009 f88f 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8002c0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c12:	9301      	str	r3, [sp, #4]
 8002c14:	2302      	movs	r3, #2
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	2300      	movs	r3, #0
 8002c1a:	226e      	movs	r2, #110	; 0x6e
 8002c1c:	210a      	movs	r1, #10
 8002c1e:	4811      	ldr	r0, [pc, #68]	; (8002c64 <FuncMenu_DrawSignalMenu+0x304>)
 8002c20:	f009 f884 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, WHITE, 2, BLACK);
 8002c24:	2300      	movs	r3, #0
 8002c26:	9301      	str	r3, [sp, #4]
 8002c28:	2302      	movs	r3, #2
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c30:	2282      	movs	r2, #130	; 0x82
 8002c32:	210a      	movs	r1, #10
 8002c34:	480c      	ldr	r0, [pc, #48]	; (8002c68 <FuncMenu_DrawSignalMenu+0x308>)
 8002c36:	f009 f879 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8002c3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c3e:	9301      	str	r3, [sp, #4]
 8002c40:	2302      	movs	r3, #2
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	2300      	movs	r3, #0
 8002c46:	2296      	movs	r2, #150	; 0x96
 8002c48:	210a      	movs	r1, #10
 8002c4a:	4808      	ldr	r0, [pc, #32]	; (8002c6c <FuncMenu_DrawSignalMenu+0x30c>)
 8002c4c:	f009 f86e 	bl	800bd2c <ILI9341_Draw_Text>
				break;
 8002c50:	e051      	b.n	8002cf6 <FuncMenu_DrawSignalMenu+0x396>
 8002c52:	bf00      	nop
 8002c54:	0800f504 	.word	0x0800f504
 8002c58:	0800f51c 	.word	0x0800f51c
 8002c5c:	0800f524 	.word	0x0800f524
 8002c60:	0800f530 	.word	0x0800f530
 8002c64:	0800f538 	.word	0x0800f538
 8002c68:	0800f544 	.word	0x0800f544
 8002c6c:	0800f550 	.word	0x0800f550
			case IMPULSE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8002c70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c74:	9301      	str	r3, [sp, #4]
 8002c76:	2302      	movs	r3, #2
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	2232      	movs	r2, #50	; 0x32
 8002c7e:	210a      	movs	r1, #10
 8002c80:	481f      	ldr	r0, [pc, #124]	; (8002d00 <FuncMenu_DrawSignalMenu+0x3a0>)
 8002c82:	f009 f853 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8002c86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c8a:	9301      	str	r3, [sp, #4]
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	2300      	movs	r3, #0
 8002c92:	2246      	movs	r2, #70	; 0x46
 8002c94:	210a      	movs	r1, #10
 8002c96:	481b      	ldr	r0, [pc, #108]	; (8002d04 <FuncMenu_DrawSignalMenu+0x3a4>)
 8002c98:	f009 f848 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8002c9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ca0:	9301      	str	r3, [sp, #4]
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	225a      	movs	r2, #90	; 0x5a
 8002caa:	210a      	movs	r1, #10
 8002cac:	4816      	ldr	r0, [pc, #88]	; (8002d08 <FuncMenu_DrawSignalMenu+0x3a8>)
 8002cae:	f009 f83d 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8002cb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cb6:	9301      	str	r3, [sp, #4]
 8002cb8:	2302      	movs	r3, #2
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	226e      	movs	r2, #110	; 0x6e
 8002cc0:	210a      	movs	r1, #10
 8002cc2:	4812      	ldr	r0, [pc, #72]	; (8002d0c <FuncMenu_DrawSignalMenu+0x3ac>)
 8002cc4:	f009 f832 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8002cc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ccc:	9301      	str	r3, [sp, #4]
 8002cce:	2302      	movs	r3, #2
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	2282      	movs	r2, #130	; 0x82
 8002cd6:	210a      	movs	r1, #10
 8002cd8:	480d      	ldr	r0, [pc, #52]	; (8002d10 <FuncMenu_DrawSignalMenu+0x3b0>)
 8002cda:	f009 f827 	bl	800bd2c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, WHITE, 2, BLACK);
 8002cde:	2300      	movs	r3, #0
 8002ce0:	9301      	str	r3, [sp, #4]
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	9300      	str	r3, [sp, #0]
 8002ce6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cea:	2296      	movs	r2, #150	; 0x96
 8002cec:	210a      	movs	r1, #10
 8002cee:	4809      	ldr	r0, [pc, #36]	; (8002d14 <FuncMenu_DrawSignalMenu+0x3b4>)
 8002cf0:	f009 f81c 	bl	800bd2c <ILI9341_Draw_Text>
				break;
 8002cf4:	bf00      	nop

		}
	}


}
 8002cf6:	bf00      	nop
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	0800f51c 	.word	0x0800f51c
 8002d04:	0800f524 	.word	0x0800f524
 8002d08:	0800f530 	.word	0x0800f530
 8002d0c:	0800f538 	.word	0x0800f538
 8002d10:	0800f544 	.word	0x0800f544
 8002d14:	0800f550 	.word	0x0800f550

08002d18 <FuncMenu_DrawSyncMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawSyncMenu()
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("SELECT SYNC FUNCTION", 	10, 10, WHITE, 3, BLACK);
 8002d1e:	2300      	movs	r3, #0
 8002d20:	9301      	str	r3, [sp, #4]
 8002d22:	2303      	movs	r3, #3
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d2a:	220a      	movs	r2, #10
 8002d2c:	210a      	movs	r1, #10
 8002d2e:	4803      	ldr	r0, [pc, #12]	; (8002d3c <FuncMenu_DrawSyncMenu+0x24>)
 8002d30:	f008 fffc 	bl	800bd2c <ILI9341_Draw_Text>

}
 8002d34:	bf00      	nop
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	0800f558 	.word	0x0800f558

08002d40 <GainMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMainMenu()
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("GAIN MAIN MENU", 	10, 10, WHITE, 3, BLACK);
 8002d46:	2300      	movs	r3, #0
 8002d48:	9301      	str	r3, [sp, #4]
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d52:	220a      	movs	r2, #10
 8002d54:	210a      	movs	r1, #10
 8002d56:	4819      	ldr	r0, [pc, #100]	; (8002dbc <GainMenu_DrawMainMenu+0x7c>)
 8002d58:	f008 ffe8 	bl	800bd2c <ILI9341_Draw_Text>
 	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 10, 210, BLACK, 2, DARKCYAN);
 8002d5c:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8002d60:	9301      	str	r3, [sp, #4]
 8002d62:	2302      	movs	r3, #2
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	2300      	movs	r3, #0
 8002d68:	22d2      	movs	r2, #210	; 0xd2
 8002d6a:	210a      	movs	r1, #10
 8002d6c:	4814      	ldr	r0, [pc, #80]	; (8002dc0 <GainMenu_DrawMainMenu+0x80>)
 8002d6e:	f008 ffdd 	bl	800bd2c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SYNC", 100, 210, BLACK, 2, DARKGREEN);
 8002d72:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8002d76:	9301      	str	r3, [sp, #4]
 8002d78:	2302      	movs	r3, #2
 8002d7a:	9300      	str	r3, [sp, #0]
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	22d2      	movs	r2, #210	; 0xd2
 8002d80:	2164      	movs	r1, #100	; 0x64
 8002d82:	4810      	ldr	r0, [pc, #64]	; (8002dc4 <GainMenu_DrawMainMenu+0x84>)
 8002d84:	f008 ffd2 	bl	800bd2c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
 8002d88:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002d8c:	9301      	str	r3, [sp, #4]
 8002d8e:	2302      	movs	r3, #2
 8002d90:	9300      	str	r3, [sp, #0]
 8002d92:	2300      	movs	r3, #0
 8002d94:	22d2      	movs	r2, #210	; 0xd2
 8002d96:	21af      	movs	r1, #175	; 0xaf
 8002d98:	480b      	ldr	r0, [pc, #44]	; (8002dc8 <GainMenu_DrawMainMenu+0x88>)
 8002d9a:	f008 ffc7 	bl	800bd2c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
 8002d9e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002da2:	9301      	str	r3, [sp, #4]
 8002da4:	2302      	movs	r3, #2
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	2300      	movs	r3, #0
 8002daa:	22d2      	movs	r2, #210	; 0xd2
 8002dac:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002db0:	4805      	ldr	r0, [pc, #20]	; (8002dc8 <GainMenu_DrawMainMenu+0x88>)
 8002db2:	f008 ffbb 	bl	800bd2c <ILI9341_Draw_Text>
}
 8002db6:	bf00      	nop
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	0800f570 	.word	0x0800f570
 8002dc0:	0800f580 	.word	0x0800f580
 8002dc4:	0800f588 	.word	0x0800f588
 8002dc8:	0800f590 	.word	0x0800f590

08002dcc <GainMenu_DrawSignalMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSignalMenu()
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("SELECT SIGNAL GAIN", 10, 10, WHITE, 3, BLACK);
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	9301      	str	r3, [sp, #4]
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002dde:	220a      	movs	r2, #10
 8002de0:	210a      	movs	r1, #10
 8002de2:	4803      	ldr	r0, [pc, #12]	; (8002df0 <GainMenu_DrawSignalMenu+0x24>)
 8002de4:	f008 ffa2 	bl	800bd2c <ILI9341_Draw_Text>
}
 8002de8:	bf00      	nop
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	0800f598 	.word	0x0800f598

08002df4 <GainMenu_DrawSyncMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSyncMenu()
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("SELECT SYNC GAIN", 10, 10, WHITE, 3, BLACK);
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	9301      	str	r3, [sp, #4]
 8002dfe:	2303      	movs	r3, #3
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e06:	220a      	movs	r2, #10
 8002e08:	210a      	movs	r1, #10
 8002e0a:	4803      	ldr	r0, [pc, #12]	; (8002e18 <GainMenu_DrawSyncMenu+0x24>)
 8002e0c:	f008 ff8e 	bl	800bd2c <ILI9341_Draw_Text>
}
 8002e10:	bf00      	nop
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	0800f5ac 	.word	0x0800f5ac

08002e1c <EM_ProcessEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_ProcessEvent()
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0

	switch(eNextState)
 8002e20:	4bb8      	ldr	r3, [pc, #736]	; (8003104 <EM_ProcessEvent+0x2e8>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	2b0c      	cmp	r3, #12
 8002e26:	f200 8152 	bhi.w	80030ce <EM_ProcessEvent+0x2b2>
 8002e2a:	a201      	add	r2, pc, #4	; (adr r2, 8002e30 <EM_ProcessEvent+0x14>)
 8002e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e30:	08002e65 	.word	0x08002e65
 8002e34:	08002eb9 	.word	0x08002eb9
 8002e38:	08002ef9 	.word	0x08002ef9
 8002e3c:	08002f25 	.word	0x08002f25
 8002e40:	08002f51 	.word	0x08002f51
 8002e44:	08002f91 	.word	0x08002f91
 8002e48:	08002fbd 	.word	0x08002fbd
 8002e4c:	080030cf 	.word	0x080030cf
 8002e50:	08002fe9 	.word	0x08002fe9
 8002e54:	0800303b 	.word	0x0800303b
 8002e58:	08003065 	.word	0x08003065
 8002e5c:	0800308f 	.word	0x0800308f
 8002e60:	080030a5 	.word	0x080030a5

		case Idle_State:

//			TIM1->ARR = 12;

			if(eNewEvent == evBlueBtn)
 8002e64:	4ba8      	ldr	r3, [pc, #672]	; (8003108 <EM_ProcessEvent+0x2ec>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d105      	bne.n	8002e78 <EM_ProcessEvent+0x5c>
			{
				eNextState = _FuncMainMenuEntryHandler();
 8002e6c:	f000 f94e 	bl	800310c <_FuncMainMenuEntryHandler>
 8002e70:	4603      	mov	r3, r0
 8002e72:	461a      	mov	r2, r3
 8002e74:	4ba3      	ldr	r3, [pc, #652]	; (8003104 <EM_ProcessEvent+0x2e8>)
 8002e76:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8002e78:	4ba3      	ldr	r3, [pc, #652]	; (8003108 <EM_ProcessEvent+0x2ec>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d105      	bne.n	8002e8c <EM_ProcessEvent+0x70>
			{
				eNextState = _FreqMainMenuEntryHandler();
 8002e80:	f000 fb28 	bl	80034d4 <_FreqMainMenuEntryHandler>
 8002e84:	4603      	mov	r3, r0
 8002e86:	461a      	mov	r2, r3
 8002e88:	4b9e      	ldr	r3, [pc, #632]	; (8003104 <EM_ProcessEvent+0x2e8>)
 8002e8a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8002e8c:	4b9e      	ldr	r3, [pc, #632]	; (8003108 <EM_ProcessEvent+0x2ec>)
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	2b03      	cmp	r3, #3
 8002e92:	d105      	bne.n	8002ea0 <EM_ProcessEvent+0x84>
			{
				eNextState = _GainMainMenuEntryHandler();
 8002e94:	f000 fa1c 	bl	80032d0 <_GainMainMenuEntryHandler>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	4b99      	ldr	r3, [pc, #612]	; (8003104 <EM_ProcessEvent+0x2e8>)
 8002e9e:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 8002ea0:	4b99      	ldr	r3, [pc, #612]	; (8003108 <EM_ProcessEvent+0x2ec>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	2b04      	cmp	r3, #4
 8002ea6:	f040 8114 	bne.w	80030d2 <EM_ProcessEvent+0x2b6>
			{
				eNextState = _BiasMenuEntryHandler();
 8002eaa:	f000 fac9 	bl	8003440 <_BiasMenuEntryHandler>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	4b94      	ldr	r3, [pc, #592]	; (8003104 <EM_ProcessEvent+0x2e8>)
 8002eb4:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002eb6:	e10c      	b.n	80030d2 <EM_ProcessEvent+0x2b6>

			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 8002eb8:	4b93      	ldr	r3, [pc, #588]	; (8003108 <EM_ProcessEvent+0x2ec>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	2b06      	cmp	r3, #6
 8002ebe:	d105      	bne.n	8002ecc <EM_ProcessEvent+0xb0>
			{
				eNextState = _FuncMainMenuExitHandler();
 8002ec0:	f000 f938 	bl	8003134 <_FuncMainMenuExitHandler>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	4b8e      	ldr	r3, [pc, #568]	; (8003104 <EM_ProcessEvent+0x2e8>)
 8002eca:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBlueBtn)
 8002ecc:	4b8e      	ldr	r3, [pc, #568]	; (8003108 <EM_ProcessEvent+0x2ec>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d105      	bne.n	8002ee0 <EM_ProcessEvent+0xc4>
			{
				eNextState = _FuncSignalMenuEntryHandler();
 8002ed4:	f000 f942 	bl	800315c <_FuncSignalMenuEntryHandler>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	461a      	mov	r2, r3
 8002edc:	4b89      	ldr	r3, [pc, #548]	; (8003104 <EM_ProcessEvent+0x2e8>)
 8002ede:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8002ee0:	4b89      	ldr	r3, [pc, #548]	; (8003108 <EM_ProcessEvent+0x2ec>)
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	f040 80f6 	bne.w	80030d6 <EM_ProcessEvent+0x2ba>
			{
				eNextState = _FuncSyncMenuEntryHandler();
 8002eea:	f000 f991 	bl	8003210 <_FuncSyncMenuEntryHandler>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	4b84      	ldr	r3, [pc, #528]	; (8003104 <EM_ProcessEvent+0x2e8>)
 8002ef4:	701a      	strb	r2, [r3, #0]
			}

			break;
 8002ef6:	e0ee      	b.n	80030d6 <EM_ProcessEvent+0x2ba>

		case Func_Signal_Menu_State:

			if(eNewEvent == evEncoderSet)
 8002ef8:	4b83      	ldr	r3, [pc, #524]	; (8003108 <EM_ProcessEvent+0x2ec>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b05      	cmp	r3, #5
 8002efe:	d105      	bne.n	8002f0c <EM_ProcessEvent+0xf0>
			{
				eNextState = _FuncSignalMenuInputHandler();
 8002f00:	f000 f95c 	bl	80031bc <_FuncSignalMenuInputHandler>
 8002f04:	4603      	mov	r3, r0
 8002f06:	461a      	mov	r2, r3
 8002f08:	4b7e      	ldr	r3, [pc, #504]	; (8003104 <EM_ProcessEvent+0x2e8>)
 8002f0a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8002f0c:	4b7e      	ldr	r3, [pc, #504]	; (8003108 <EM_ProcessEvent+0x2ec>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	2b06      	cmp	r3, #6
 8002f12:	f040 80e2 	bne.w	80030da <EM_ProcessEvent+0x2be>
			{
				eNextState = _FuncSignalMenuExitHandler();
 8002f16:	f000 f967 	bl	80031e8 <_FuncSignalMenuExitHandler>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	4b79      	ldr	r3, [pc, #484]	; (8003104 <EM_ProcessEvent+0x2e8>)
 8002f20:	701a      	strb	r2, [r3, #0]
			}

			break;
 8002f22:	e0da      	b.n	80030da <EM_ProcessEvent+0x2be>

		case Func_Sync_Menu_State:

			if(eNewEvent == evEncoderSet)
 8002f24:	4b78      	ldr	r3, [pc, #480]	; (8003108 <EM_ProcessEvent+0x2ec>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	2b05      	cmp	r3, #5
 8002f2a:	d105      	bne.n	8002f38 <EM_ProcessEvent+0x11c>
			{
				eNextState = _FuncSyncMenuInputHandler();
 8002f2c:	f000 f9a0 	bl	8003270 <_FuncSyncMenuInputHandler>
 8002f30:	4603      	mov	r3, r0
 8002f32:	461a      	mov	r2, r3
 8002f34:	4b73      	ldr	r3, [pc, #460]	; (8003104 <EM_ProcessEvent+0x2e8>)
 8002f36:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8002f38:	4b73      	ldr	r3, [pc, #460]	; (8003108 <EM_ProcessEvent+0x2ec>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b06      	cmp	r3, #6
 8002f3e:	f040 80ce 	bne.w	80030de <EM_ProcessEvent+0x2c2>
			{
				eNextState = _FuncSyncMenuExitHandler();
 8002f42:	f000 f9ab 	bl	800329c <_FuncSyncMenuExitHandler>
 8002f46:	4603      	mov	r3, r0
 8002f48:	461a      	mov	r2, r3
 8002f4a:	4b6e      	ldr	r3, [pc, #440]	; (8003104 <EM_ProcessEvent+0x2e8>)
 8002f4c:	701a      	strb	r2, [r3, #0]
			}

			break;
 8002f4e:	e0c6      	b.n	80030de <EM_ProcessEvent+0x2c2>

			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 8002f50:	4b6d      	ldr	r3, [pc, #436]	; (8003108 <EM_ProcessEvent+0x2ec>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	2b06      	cmp	r3, #6
 8002f56:	d105      	bne.n	8002f64 <EM_ProcessEvent+0x148>
			{
				eNextState = _GainMainMenuExitHandler();
 8002f58:	f000 f9ce 	bl	80032f8 <_GainMainMenuExitHandler>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	461a      	mov	r2, r3
 8002f60:	4b68      	ldr	r3, [pc, #416]	; (8003104 <EM_ProcessEvent+0x2e8>)
 8002f62:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBlueBtn)
 8002f64:	4b68      	ldr	r3, [pc, #416]	; (8003108 <EM_ProcessEvent+0x2ec>)
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d105      	bne.n	8002f78 <EM_ProcessEvent+0x15c>
			{
				eNextState = _GainSignalMenuEntryHandler();
 8002f6c:	f000 f9d8 	bl	8003320 <_GainSignalMenuEntryHandler>
 8002f70:	4603      	mov	r3, r0
 8002f72:	461a      	mov	r2, r3
 8002f74:	4b63      	ldr	r3, [pc, #396]	; (8003104 <EM_ProcessEvent+0x2e8>)
 8002f76:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8002f78:	4b63      	ldr	r3, [pc, #396]	; (8003108 <EM_ProcessEvent+0x2ec>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	f040 80b0 	bne.w	80030e2 <EM_ProcessEvent+0x2c6>
			{
				eNextState = _GainSyncMenuEntryHandler();
 8002f82:	f000 fa25 	bl	80033d0 <_GainSyncMenuEntryHandler>
 8002f86:	4603      	mov	r3, r0
 8002f88:	461a      	mov	r2, r3
 8002f8a:	4b5e      	ldr	r3, [pc, #376]	; (8003104 <EM_ProcessEvent+0x2e8>)
 8002f8c:	701a      	strb	r2, [r3, #0]
			}

			break;
 8002f8e:	e0a8      	b.n	80030e2 <EM_ProcessEvent+0x2c6>

		case Gain_Signal_Menu_State:

			if(eNewEvent == evEncoderSet)
 8002f90:	4b5d      	ldr	r3, [pc, #372]	; (8003108 <EM_ProcessEvent+0x2ec>)
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	2b05      	cmp	r3, #5
 8002f96:	d105      	bne.n	8002fa4 <EM_ProcessEvent+0x188>
			{
				eNextState = _GainSignalMenuInputHandler();
 8002f98:	f000 f9f0 	bl	800337c <_GainSignalMenuInputHandler>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	4b58      	ldr	r3, [pc, #352]	; (8003104 <EM_ProcessEvent+0x2e8>)
 8002fa2:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8002fa4:	4b58      	ldr	r3, [pc, #352]	; (8003108 <EM_ProcessEvent+0x2ec>)
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	2b06      	cmp	r3, #6
 8002faa:	f040 809c 	bne.w	80030e6 <EM_ProcessEvent+0x2ca>
			{
				eNextState = _GainSignalMenuExitHandler();
 8002fae:	f000 f9fb 	bl	80033a8 <_GainSignalMenuExitHandler>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	4b53      	ldr	r3, [pc, #332]	; (8003104 <EM_ProcessEvent+0x2e8>)
 8002fb8:	701a      	strb	r2, [r3, #0]
			}

			break;
 8002fba:	e094      	b.n	80030e6 <EM_ProcessEvent+0x2ca>

		case Gain_Sync_Menu_State:

			if(eNewEvent == evEncoderSet)
 8002fbc:	4b52      	ldr	r3, [pc, #328]	; (8003108 <EM_ProcessEvent+0x2ec>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	2b05      	cmp	r3, #5
 8002fc2:	d105      	bne.n	8002fd0 <EM_ProcessEvent+0x1b4>
			{
				eNextState = _GainSyncMenuInputHandler();
 8002fc4:	f000 fa18 	bl	80033f8 <_GainSyncMenuInputHandler>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	461a      	mov	r2, r3
 8002fcc:	4b4d      	ldr	r3, [pc, #308]	; (8003104 <EM_ProcessEvent+0x2e8>)
 8002fce:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8002fd0:	4b4d      	ldr	r3, [pc, #308]	; (8003108 <EM_ProcessEvent+0x2ec>)
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	2b06      	cmp	r3, #6
 8002fd6:	f040 8088 	bne.w	80030ea <EM_ProcessEvent+0x2ce>
			{
				eNextState = _GainSyncMenuExitHandler();
 8002fda:	f000 fa1d 	bl	8003418 <_GainSyncMenuExitHandler>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	4b48      	ldr	r3, [pc, #288]	; (8003104 <EM_ProcessEvent+0x2e8>)
 8002fe4:	701a      	strb	r2, [r3, #0]
			}

			break;
 8002fe6:	e080      	b.n	80030ea <EM_ProcessEvent+0x2ce>

// FREQ MENUS

		case Freq_Main_Menu_State:

			if(eNewEvent == evEncoderPush)
 8002fe8:	4b47      	ldr	r3, [pc, #284]	; (8003108 <EM_ProcessEvent+0x2ec>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	2b06      	cmp	r3, #6
 8002fee:	d105      	bne.n	8002ffc <EM_ProcessEvent+0x1e0>
			{
				eNextState = _FreqMainMenuExitHandler();
 8002ff0:	f000 fa84 	bl	80034fc <_FreqMainMenuExitHandler>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	4b42      	ldr	r3, [pc, #264]	; (8003104 <EM_ProcessEvent+0x2e8>)
 8002ffa:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBlueBtn)
 8002ffc:	4b42      	ldr	r3, [pc, #264]	; (8003108 <EM_ProcessEvent+0x2ec>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d105      	bne.n	8003010 <EM_ProcessEvent+0x1f4>
			{
				eNextState = _FreqPresetMenuEntryHandler();
 8003004:	f000 fa94 	bl	8003530 <_FreqPresetMenuEntryHandler>
 8003008:	4603      	mov	r3, r0
 800300a:	461a      	mov	r2, r3
 800300c:	4b3d      	ldr	r3, [pc, #244]	; (8003104 <EM_ProcessEvent+0x2e8>)
 800300e:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003010:	4b3d      	ldr	r3, [pc, #244]	; (8003108 <EM_ProcessEvent+0x2ec>)
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	2b02      	cmp	r3, #2
 8003016:	d105      	bne.n	8003024 <EM_ProcessEvent+0x208>
			{
				eNextState = _FreqAdjustMenuEntryHandler();
 8003018:	f000 fae2 	bl	80035e0 <_FreqAdjustMenuEntryHandler>
 800301c:	4603      	mov	r3, r0
 800301e:	461a      	mov	r2, r3
 8003020:	4b38      	ldr	r3, [pc, #224]	; (8003104 <EM_ProcessEvent+0x2e8>)
 8003022:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8003024:	4b38      	ldr	r3, [pc, #224]	; (8003108 <EM_ProcessEvent+0x2ec>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b03      	cmp	r3, #3
 800302a:	d160      	bne.n	80030ee <EM_ProcessEvent+0x2d2>
			{
				eNextState = _FreqSweepMenuEntryHandler();
 800302c:	f000 fb1c 	bl	8003668 <_FreqSweepMenuEntryHandler>
 8003030:	4603      	mov	r3, r0
 8003032:	461a      	mov	r2, r3
 8003034:	4b33      	ldr	r3, [pc, #204]	; (8003104 <EM_ProcessEvent+0x2e8>)
 8003036:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003038:	e059      	b.n	80030ee <EM_ProcessEvent+0x2d2>

		case Freq_Preset_Menu_State:
			if(eNewEvent == evEncoderSet)
 800303a:	4b33      	ldr	r3, [pc, #204]	; (8003108 <EM_ProcessEvent+0x2ec>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b05      	cmp	r3, #5
 8003040:	d105      	bne.n	800304e <EM_ProcessEvent+0x232>
			{
				eNextState = _FreqPresetMenuInputHandler();
 8003042:	f000 faa5 	bl	8003590 <_FreqPresetMenuInputHandler>
 8003046:	4603      	mov	r3, r0
 8003048:	461a      	mov	r2, r3
 800304a:	4b2e      	ldr	r3, [pc, #184]	; (8003104 <EM_ProcessEvent+0x2e8>)
 800304c:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 800304e:	4b2e      	ldr	r3, [pc, #184]	; (8003108 <EM_ProcessEvent+0x2ec>)
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	2b06      	cmp	r3, #6
 8003054:	d14d      	bne.n	80030f2 <EM_ProcessEvent+0x2d6>
			{
				eNextState = _FreqPresetMenuExitHandler();
 8003056:	f000 fab1 	bl	80035bc <_FreqPresetMenuExitHandler>
 800305a:	4603      	mov	r3, r0
 800305c:	461a      	mov	r2, r3
 800305e:	4b29      	ldr	r3, [pc, #164]	; (8003104 <EM_ProcessEvent+0x2e8>)
 8003060:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003062:	e046      	b.n	80030f2 <EM_ProcessEvent+0x2d6>

		case Freq_Adjust_Menu_State:
			if(eNewEvent == evEncoderSet)
 8003064:	4b28      	ldr	r3, [pc, #160]	; (8003108 <EM_ProcessEvent+0x2ec>)
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	2b05      	cmp	r3, #5
 800306a:	d105      	bne.n	8003078 <EM_ProcessEvent+0x25c>
			{
				eNextState = _FreqAdjustMenuInputHandler();
 800306c:	f000 fad8 	bl	8003620 <_FreqAdjustMenuInputHandler>
 8003070:	4603      	mov	r3, r0
 8003072:	461a      	mov	r2, r3
 8003074:	4b23      	ldr	r3, [pc, #140]	; (8003104 <EM_ProcessEvent+0x2e8>)
 8003076:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003078:	4b23      	ldr	r3, [pc, #140]	; (8003108 <EM_ProcessEvent+0x2ec>)
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	2b06      	cmp	r3, #6
 800307e:	d13a      	bne.n	80030f6 <EM_ProcessEvent+0x2da>
			{
				eNextState = _FreqAdjustMenuExitHandler();
 8003080:	f000 fae0 	bl	8003644 <_FreqAdjustMenuExitHandler>
 8003084:	4603      	mov	r3, r0
 8003086:	461a      	mov	r2, r3
 8003088:	4b1e      	ldr	r3, [pc, #120]	; (8003104 <EM_ProcessEvent+0x2e8>)
 800308a:	701a      	strb	r2, [r3, #0]
			}
			break;
 800308c:	e033      	b.n	80030f6 <EM_ProcessEvent+0x2da>

		case Freq_Sweep_Menu_State:

			if(eNewEvent == evEncoderPush)
 800308e:	4b1e      	ldr	r3, [pc, #120]	; (8003108 <EM_ProcessEvent+0x2ec>)
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	2b06      	cmp	r3, #6
 8003094:	d131      	bne.n	80030fa <EM_ProcessEvent+0x2de>
			{
				eNextState = _FreqSweepMenuExitHandler();
 8003096:	f000 fb03 	bl	80036a0 <_FreqSweepMenuExitHandler>
 800309a:	4603      	mov	r3, r0
 800309c:	461a      	mov	r2, r3
 800309e:	4b19      	ldr	r3, [pc, #100]	; (8003104 <EM_ProcessEvent+0x2e8>)
 80030a0:	701a      	strb	r2, [r3, #0]
			}
			break;
 80030a2:	e02a      	b.n	80030fa <EM_ProcessEvent+0x2de>

// BIAS MENUS

		case Bias_Menu_State:
			if(eNewEvent == evEncoderSet)
 80030a4:	4b18      	ldr	r3, [pc, #96]	; (8003108 <EM_ProcessEvent+0x2ec>)
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	2b05      	cmp	r3, #5
 80030aa:	d105      	bne.n	80030b8 <EM_ProcessEvent+0x29c>
			{
				eNextState = _BiasMenuInputHandler();
 80030ac:	f000 f9e8 	bl	8003480 <_BiasMenuInputHandler>
 80030b0:	4603      	mov	r3, r0
 80030b2:	461a      	mov	r2, r3
 80030b4:	4b13      	ldr	r3, [pc, #76]	; (8003104 <EM_ProcessEvent+0x2e8>)
 80030b6:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 80030b8:	4b13      	ldr	r3, [pc, #76]	; (8003108 <EM_ProcessEvent+0x2ec>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	2b06      	cmp	r3, #6
 80030be:	d11e      	bne.n	80030fe <EM_ProcessEvent+0x2e2>
			{
				eNextState = _BiasMenuExitHandler();
 80030c0:	f000 f9f4 	bl	80034ac <_BiasMenuExitHandler>
 80030c4:	4603      	mov	r3, r0
 80030c6:	461a      	mov	r2, r3
 80030c8:	4b0e      	ldr	r3, [pc, #56]	; (8003104 <EM_ProcessEvent+0x2e8>)
 80030ca:	701a      	strb	r2, [r3, #0]
			}

			break;
 80030cc:	e017      	b.n	80030fe <EM_ProcessEvent+0x2e2>

		default:
			break;
 80030ce:	bf00      	nop
 80030d0:	e016      	b.n	8003100 <EM_ProcessEvent+0x2e4>
			break;
 80030d2:	bf00      	nop
 80030d4:	e014      	b.n	8003100 <EM_ProcessEvent+0x2e4>
			break;
 80030d6:	bf00      	nop
 80030d8:	e012      	b.n	8003100 <EM_ProcessEvent+0x2e4>
			break;
 80030da:	bf00      	nop
 80030dc:	e010      	b.n	8003100 <EM_ProcessEvent+0x2e4>
			break;
 80030de:	bf00      	nop
 80030e0:	e00e      	b.n	8003100 <EM_ProcessEvent+0x2e4>
			break;
 80030e2:	bf00      	nop
 80030e4:	e00c      	b.n	8003100 <EM_ProcessEvent+0x2e4>
			break;
 80030e6:	bf00      	nop
 80030e8:	e00a      	b.n	8003100 <EM_ProcessEvent+0x2e4>
			break;
 80030ea:	bf00      	nop
 80030ec:	e008      	b.n	8003100 <EM_ProcessEvent+0x2e4>
			break;
 80030ee:	bf00      	nop
 80030f0:	e006      	b.n	8003100 <EM_ProcessEvent+0x2e4>
			break;
 80030f2:	bf00      	nop
 80030f4:	e004      	b.n	8003100 <EM_ProcessEvent+0x2e4>
			break;
 80030f6:	bf00      	nop
 80030f8:	e002      	b.n	8003100 <EM_ProcessEvent+0x2e4>
			break;
 80030fa:	bf00      	nop
 80030fc:	e000      	b.n	8003100 <EM_ProcessEvent+0x2e4>
			break;
 80030fe:	bf00      	nop
	}

}
 8003100:	bf00      	nop
 8003102:	bd80      	pop	{r7, pc}
 8003104:	20001f05 	.word	0x20001f05
 8003108:	20001f06 	.word	0x20001f06

0800310c <_FuncMainMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState _FuncMainMenuEntryHandler(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FunctionMenu Event captured\n");
 8003110:	4806      	ldr	r0, [pc, #24]	; (800312c <_FuncMainMenuEntryHandler+0x20>)
 8003112:	f00a f94f 	bl	800d3b4 <puts>
#endif

	_RefreshDisplay();
 8003116:	f000 fae5 	bl	80036e4 <_RefreshDisplay>

	DM_ShowFuncMenu(ENABLE_FUNC_MAIN_MENU);
 800311a:	2001      	movs	r0, #1
 800311c:	f7fd ff90 	bl	8001040 <DM_ShowFuncMenu>
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: pFuncPresetTmp null pointer");
	}
*/
	eNewEvent = evIdle;
 8003120:	4b03      	ldr	r3, [pc, #12]	; (8003130 <_FuncMainMenuEntryHandler+0x24>)
 8003122:	2200      	movs	r2, #0
 8003124:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8003126:	2301      	movs	r3, #1
}
 8003128:	4618      	mov	r0, r3
 800312a:	bd80      	pop	{r7, pc}
 800312c:	0800f5c0 	.word	0x0800f5c0
 8003130:	20001f06 	.word	0x20001f06

08003134 <_FuncMainMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState _FuncMainMenuExitHandler()
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitFuncMenu Event captured\n");
 8003138:	4806      	ldr	r0, [pc, #24]	; (8003154 <_FuncMainMenuExitHandler+0x20>)
 800313a:	f00a f93b 	bl	800d3b4 <puts>
#endif

	// disable the menu

	DM_ShowFuncMenu(DISABLE_FUNCMENU);
 800313e:	2000      	movs	r0, #0
 8003140:	f7fd ff7e 	bl	8001040 <DM_ShowFuncMenu>

	// reset the encoder range

//	ENCODER_TIMER->ARR = 1024;

	_RefreshDisplay();
 8003144:	f000 face 	bl	80036e4 <_RefreshDisplay>

	eNewEvent = evIdle;
 8003148:	4b03      	ldr	r3, [pc, #12]	; (8003158 <_FuncMainMenuExitHandler+0x24>)
 800314a:	2200      	movs	r2, #0
 800314c:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	bd80      	pop	{r7, pc}
 8003154:	0800f5fc 	.word	0x0800f5fc
 8003158:	20001f06 	.word	0x20001f06

0800315c <_FuncSignalMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState _FuncSignalMenuEntryHandler(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FunctionMenu Event captured\n");
 8003162:	4812      	ldr	r0, [pc, #72]	; (80031ac <_FuncSignalMenuEntryHandler+0x50>)
 8003164:	f00a f926 	bl	800d3b4 <puts>
#endif

	_RefreshDisplay();
 8003168:	f000 fabc 	bl	80036e4 <_RefreshDisplay>

	DM_ShowFuncMenu(ENABLE_FUNC_SIGNAL_MENU);
 800316c:	2002      	movs	r0, #2
 800316e:	f7fd ff67 	bl	8001040 <DM_ShowFuncMenu>

	Func_Preset_Encoder_Pos_t *pFuncPresetTmp =  FuncO_GetFPresetObject();
 8003172:	f000 fe79 	bl	8003e68 <FuncO_GetFPresetObject>
 8003176:	6078      	str	r0, [r7, #4]
	if(pFuncPresetTmp)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00a      	beq.n	8003194 <_FuncSignalMenuEntryHandler+0x38>
	{
		ENCODER_TIMER->CNT = pFuncPresetTmp->epos;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	785a      	ldrb	r2, [r3, #1]
 8003182:	4b0b      	ldr	r3, [pc, #44]	; (80031b0 <_FuncSignalMenuEntryHandler+0x54>)
 8003184:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FuncO_GetFuncPresetEncoderRange();
 8003186:	f000 fe7b 	bl	8003e80 <FuncO_GetFuncPresetEncoderRange>
 800318a:	4603      	mov	r3, r0
 800318c:	461a      	mov	r2, r3
 800318e:	4b08      	ldr	r3, [pc, #32]	; (80031b0 <_FuncSignalMenuEntryHandler+0x54>)
 8003190:	62da      	str	r2, [r3, #44]	; 0x2c
 8003192:	e002      	b.n	800319a <_FuncSignalMenuEntryHandler+0x3e>
	}
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: pFuncPresetTmp null pointer");
 8003194:	4807      	ldr	r0, [pc, #28]	; (80031b4 <_FuncSignalMenuEntryHandler+0x58>)
 8003196:	f7fe f887 	bl	80012a8 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 800319a:	4b07      	ldr	r3, [pc, #28]	; (80031b8 <_FuncSignalMenuEntryHandler+0x5c>)
 800319c:	2200      	movs	r2, #0
 800319e:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 80031a0:	2302      	movs	r3, #2
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	0800f5c0 	.word	0x0800f5c0
 80031b0:	40012c00 	.word	0x40012c00
 80031b4:	0800f618 	.word	0x0800f618
 80031b8:	20001f06 	.word	0x20001f06

080031bc <_FuncSignalMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState _FuncSignalMenuInputHandler(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FunctionAdjust Event captured\n");
 80031c0:	4807      	ldr	r0, [pc, #28]	; (80031e0 <_FuncSignalMenuInputHandler+0x24>)
 80031c2:	f00a f8f7 	bl	800d3b4 <puts>
#endif


	FuncO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 80031c6:	2001      	movs	r0, #1
 80031c8:	f000 ff34 	bl	8004034 <SM_GetEncoderValue>
 80031cc:	4603      	mov	r3, r0
 80031ce:	4618      	mov	r0, r3
 80031d0:	f000 fd14 	bl	8003bfc <FuncO_ModifyOutput>
	eNewEvent = evBlueBtn;
 80031d4:	4b03      	ldr	r3, [pc, #12]	; (80031e4 <_FuncSignalMenuInputHandler+0x28>)
 80031d6:	2201      	movs	r2, #1
 80031d8:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 80031da:	2302      	movs	r3, #2
}
 80031dc:	4618      	mov	r0, r3
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	0800f5dc 	.word	0x0800f5dc
 80031e4:	20001f06 	.word	0x20001f06

080031e8 <_FuncSignalMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState _FuncSignalMenuExitHandler()
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitFuncMenu Event captured\n");
 80031ec:	4806      	ldr	r0, [pc, #24]	; (8003208 <_FuncSignalMenuExitHandler+0x20>)
 80031ee:	f00a f8e1 	bl	800d3b4 <puts>
#endif

	// disable the menu

	DM_ShowFuncMenu(ENABLE_FUNC_MAIN_MENU);
 80031f2:	2001      	movs	r0, #1
 80031f4:	f7fd ff24 	bl	8001040 <DM_ShowFuncMenu>

	// reset the encoder range

//	ENCODER_TIMER->ARR = 1024;

	_RefreshDisplay();
 80031f8:	f000 fa74 	bl	80036e4 <_RefreshDisplay>

	eNewEvent = evIdle;
 80031fc:	4b03      	ldr	r3, [pc, #12]	; (800320c <_FuncSignalMenuExitHandler+0x24>)
 80031fe:	2200      	movs	r2, #0
 8003200:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8003202:	2301      	movs	r3, #1
}
 8003204:	4618      	mov	r0, r3
 8003206:	bd80      	pop	{r7, pc}
 8003208:	0800f5fc 	.word	0x0800f5fc
 800320c:	20001f06 	.word	0x20001f06

08003210 <_FuncSyncMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState _FuncSyncMenuEntryHandler(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FunctionMenu Event captured\n");
 8003216:	4812      	ldr	r0, [pc, #72]	; (8003260 <_FuncSyncMenuEntryHandler+0x50>)
 8003218:	f00a f8cc 	bl	800d3b4 <puts>
#endif

	_RefreshDisplay();
 800321c:	f000 fa62 	bl	80036e4 <_RefreshDisplay>

	DM_ShowFuncMenu(ENABLE_FUNC_SYNC_MENU);
 8003220:	2003      	movs	r0, #3
 8003222:	f7fd ff0d 	bl	8001040 <DM_ShowFuncMenu>

	Func_Preset_Encoder_Pos_t *pFuncPresetTmp =  FuncO_GetFPresetObject();
 8003226:	f000 fe1f 	bl	8003e68 <FuncO_GetFPresetObject>
 800322a:	6078      	str	r0, [r7, #4]
	if(pFuncPresetTmp)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00a      	beq.n	8003248 <_FuncSyncMenuEntryHandler+0x38>
	{
		ENCODER_TIMER->CNT = pFuncPresetTmp->epos;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	785a      	ldrb	r2, [r3, #1]
 8003236:	4b0b      	ldr	r3, [pc, #44]	; (8003264 <_FuncSyncMenuEntryHandler+0x54>)
 8003238:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FuncO_GetFuncPresetEncoderRange();
 800323a:	f000 fe21 	bl	8003e80 <FuncO_GetFuncPresetEncoderRange>
 800323e:	4603      	mov	r3, r0
 8003240:	461a      	mov	r2, r3
 8003242:	4b08      	ldr	r3, [pc, #32]	; (8003264 <_FuncSyncMenuEntryHandler+0x54>)
 8003244:	62da      	str	r2, [r3, #44]	; 0x2c
 8003246:	e002      	b.n	800324e <_FuncSyncMenuEntryHandler+0x3e>
	}
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: pFuncPresetTmp null pointer");
 8003248:	4807      	ldr	r0, [pc, #28]	; (8003268 <_FuncSyncMenuEntryHandler+0x58>)
 800324a:	f7fe f82d 	bl	80012a8 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 800324e:	4b07      	ldr	r3, [pc, #28]	; (800326c <_FuncSyncMenuEntryHandler+0x5c>)
 8003250:	2200      	movs	r2, #0
 8003252:	701a      	strb	r2, [r3, #0]
	return Func_Sync_Menu_State;
 8003254:	2303      	movs	r3, #3
}
 8003256:	4618      	mov	r0, r3
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	0800f5c0 	.word	0x0800f5c0
 8003264:	40012c00 	.word	0x40012c00
 8003268:	0800f618 	.word	0x0800f618
 800326c:	20001f06 	.word	0x20001f06

08003270 <_FuncSyncMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState _FuncSyncMenuInputHandler(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FunctionAdjust Event captured\n");
 8003274:	4807      	ldr	r0, [pc, #28]	; (8003294 <_FuncSyncMenuInputHandler+0x24>)
 8003276:	f00a f89d 	bl	800d3b4 <puts>
#endif


	FuncO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 800327a:	2001      	movs	r0, #1
 800327c:	f000 feda 	bl	8004034 <SM_GetEncoderValue>
 8003280:	4603      	mov	r3, r0
 8003282:	4618      	mov	r0, r3
 8003284:	f000 fcba 	bl	8003bfc <FuncO_ModifyOutput>
	eNewEvent = evBlueBtn;
 8003288:	4b03      	ldr	r3, [pc, #12]	; (8003298 <_FuncSyncMenuInputHandler+0x28>)
 800328a:	2201      	movs	r2, #1
 800328c:	701a      	strb	r2, [r3, #0]
	return Func_Sync_Menu_State;
 800328e:	2303      	movs	r3, #3
}
 8003290:	4618      	mov	r0, r3
 8003292:	bd80      	pop	{r7, pc}
 8003294:	0800f5dc 	.word	0x0800f5dc
 8003298:	20001f06 	.word	0x20001f06

0800329c <_FuncSyncMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState _FuncSyncMenuExitHandler()
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitFuncMenu Event captured\n");
 80032a0:	4808      	ldr	r0, [pc, #32]	; (80032c4 <_FuncSyncMenuExitHandler+0x28>)
 80032a2:	f00a f887 	bl	800d3b4 <puts>
#endif

	// disable the menu

	DM_ShowFuncMenu(ENABLE_FUNC_MAIN_MENU);
 80032a6:	2001      	movs	r0, #1
 80032a8:	f7fd feca 	bl	8001040 <DM_ShowFuncMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 80032ac:	4b06      	ldr	r3, [pc, #24]	; (80032c8 <_FuncSyncMenuExitHandler+0x2c>)
 80032ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032b2:	62da      	str	r2, [r3, #44]	; 0x2c

	_RefreshDisplay();
 80032b4:	f000 fa16 	bl	80036e4 <_RefreshDisplay>

	eNewEvent = evIdle;
 80032b8:	4b04      	ldr	r3, [pc, #16]	; (80032cc <_FuncSyncMenuExitHandler+0x30>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 80032be:	2301      	movs	r3, #1
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	0800f5fc 	.word	0x0800f5fc
 80032c8:	40012c00 	.word	0x40012c00
 80032cc:	20001f06 	.word	0x20001f06

080032d0 <_GainMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _GainMainMenuEntryHandler()
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("GainMenu Event captured\n");
 80032d4:	4806      	ldr	r0, [pc, #24]	; (80032f0 <_GainMainMenuEntryHandler+0x20>)
 80032d6:	f00a f86d 	bl	800d3b4 <puts>
#endif

	_RefreshDisplay();
 80032da:	f000 fa03 	bl	80036e4 <_RefreshDisplay>

	DM_ShowGainMenu(ENABLE_GAIN_MAIN_MENU);
 80032de:	2001      	movs	r0, #1
 80032e0:	f7fd febe 	bl	8001060 <DM_ShowGainMenu>

	eNewEvent = evIdle;
 80032e4:	4b03      	ldr	r3, [pc, #12]	; (80032f4 <_GainMainMenuEntryHandler+0x24>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 80032ea:	2304      	movs	r3, #4
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	0800f64c 	.word	0x0800f64c
 80032f4:	20001f06 	.word	0x20001f06

080032f8 <_GainMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _GainMainMenuExitHandler()
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitGainMenu Event captured\n");
 80032fc:	4806      	ldr	r0, [pc, #24]	; (8003318 <_GainMainMenuExitHandler+0x20>)
 80032fe:	f00a f859 	bl	800d3b4 <puts>
#endif

	DM_ShowGainMenu(DISABLE_GAINMENU);
 8003302:	2000      	movs	r0, #0
 8003304:	f7fd feac 	bl	8001060 <DM_ShowGainMenu>

	_RefreshDisplay();
 8003308:	f000 f9ec 	bl	80036e4 <_RefreshDisplay>

	eNewEvent = evIdle;
 800330c:	4b03      	ldr	r3, [pc, #12]	; (800331c <_GainMainMenuExitHandler+0x24>)
 800330e:	2200      	movs	r2, #0
 8003310:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	bd80      	pop	{r7, pc}
 8003318:	0800f67c 	.word	0x0800f67c
 800331c:	20001f06 	.word	0x20001f06

08003320 <_GainSignalMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _GainSignalMenuEntryHandler()
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("GainMenu Event captured\n");
 8003326:	4811      	ldr	r0, [pc, #68]	; (800336c <_GainSignalMenuEntryHandler+0x4c>)
 8003328:	f00a f844 	bl	800d3b4 <puts>
#endif

	_RefreshDisplay();
 800332c:	f000 f9da 	bl	80036e4 <_RefreshDisplay>

	DM_ShowGainMenu(ENABLE_GAIN_SIGNAL_MENU);
 8003330:	2002      	movs	r0, #2
 8003332:	f7fd fe95 	bl	8001060 <DM_ShowGainMenu>

	VppEncoderPreset_t *pVppPresetTmp =  VPP_GetVppPresetObject(SIGNAL_OUTPUT_PRESET);
 8003336:	2000      	movs	r0, #0
 8003338:	f001 fc32 	bl	8004ba0 <VPP_GetVppPresetObject>
 800333c:	6078      	str	r0, [r7, #4]
	if(pVppPresetTmp)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d008      	beq.n	8003356 <_GainSignalMenuEntryHandler+0x36>
	{
		ENCODER_TIMER->CNT = pVppPresetTmp->epos;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	8b1a      	ldrh	r2, [r3, #24]
 8003348:	4b09      	ldr	r3, [pc, #36]	; (8003370 <_GainSignalMenuEntryHandler+0x50>)
 800334a:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;
 800334c:	4b08      	ldr	r3, [pc, #32]	; (8003370 <_GainSignalMenuEntryHandler+0x50>)
 800334e:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 8003352:	62da      	str	r2, [r3, #44]	; 0x2c
 8003354:	e002      	b.n	800335c <_GainSignalMenuEntryHandler+0x3c>
	}
	else
	{
		DM_SetErrorDebugMsg("_GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8003356:	4807      	ldr	r0, [pc, #28]	; (8003374 <_GainSignalMenuEntryHandler+0x54>)
 8003358:	f7fd ffa6 	bl	80012a8 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 800335c:	4b06      	ldr	r3, [pc, #24]	; (8003378 <_GainSignalMenuEntryHandler+0x58>)
 800335e:	2200      	movs	r2, #0
 8003360:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 8003362:	2305      	movs	r3, #5
}
 8003364:	4618      	mov	r0, r3
 8003366:	3708      	adds	r7, #8
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	0800f64c 	.word	0x0800f64c
 8003370:	40012c00 	.word	0x40012c00
 8003374:	0800f698 	.word	0x0800f698
 8003378:	20001f06 	.word	0x20001f06

0800337c <_GainSignalMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _GainSignalMenuInputHandler()
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("GainSet Event captured\n");
 8003380:	4807      	ldr	r0, [pc, #28]	; (80033a0 <_GainSignalMenuInputHandler+0x24>)
 8003382:	f00a f817 	bl	800d3b4 <puts>
#endif

	//GO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
	VPP_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8003386:	2001      	movs	r0, #1
 8003388:	f000 fe54 	bl	8004034 <SM_GetEncoderValue>
 800338c:	4603      	mov	r3, r0
 800338e:	4618      	mov	r0, r3
 8003390:	f000 ff5c 	bl	800424c <VPP_ModifyOutput>

	eNewEvent = evYellowBtn;
 8003394:	4b03      	ldr	r3, [pc, #12]	; (80033a4 <_GainSignalMenuInputHandler+0x28>)
 8003396:	2203      	movs	r2, #3
 8003398:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 800339a:	2305      	movs	r3, #5
}
 800339c:	4618      	mov	r0, r3
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	0800f664 	.word	0x0800f664
 80033a4:	20001f06 	.word	0x20001f06

080033a8 <_GainSignalMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _GainSignalMenuExitHandler()
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitGainMenu Event captured\n");
 80033ac:	4806      	ldr	r0, [pc, #24]	; (80033c8 <_GainSignalMenuExitHandler+0x20>)
 80033ae:	f00a f801 	bl	800d3b4 <puts>
#endif

	DM_ShowGainMenu(ENABLE_GAIN_MAIN_MENU);
 80033b2:	2001      	movs	r0, #1
 80033b4:	f7fd fe54 	bl	8001060 <DM_ShowGainMenu>

	_RefreshDisplay();
 80033b8:	f000 f994 	bl	80036e4 <_RefreshDisplay>

	eNewEvent = evIdle;
 80033bc:	4b03      	ldr	r3, [pc, #12]	; (80033cc <_GainSignalMenuExitHandler+0x24>)
 80033be:	2200      	movs	r2, #0
 80033c0:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 80033c2:	2304      	movs	r3, #4
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	0800f67c 	.word	0x0800f67c
 80033cc:	20001f06 	.word	0x20001f06

080033d0 <_GainSyncMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _GainSyncMenuEntryHandler()
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("GainMenu Event captured\n");
 80033d4:	4806      	ldr	r0, [pc, #24]	; (80033f0 <_GainSyncMenuEntryHandler+0x20>)
 80033d6:	f009 ffed 	bl	800d3b4 <puts>
#endif

	_RefreshDisplay();
 80033da:	f000 f983 	bl	80036e4 <_RefreshDisplay>

	DM_ShowGainMenu(ENABLE_GAIN_SYNC_MENU);
 80033de:	2003      	movs	r0, #3
 80033e0:	f7fd fe3e 	bl	8001060 <DM_ShowGainMenu>
	else
	{
		DM_SetErrorDebugMsg("_GainMainMenuEntryHandler: pVppPresetTmp null pointer");
	}
*/
	eNewEvent = evIdle;
 80033e4:	4b03      	ldr	r3, [pc, #12]	; (80033f4 <_GainSyncMenuEntryHandler+0x24>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	701a      	strb	r2, [r3, #0]
	return Gain_Sync_Menu_State;
 80033ea:	2306      	movs	r3, #6
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	0800f64c 	.word	0x0800f64c
 80033f4:	20001f06 	.word	0x20001f06

080033f8 <_GainSyncMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _GainSyncMenuInputHandler()
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("GainSet Event captured\n");
 80033fc:	4804      	ldr	r0, [pc, #16]	; (8003410 <_GainSyncMenuInputHandler+0x18>)
 80033fe:	f009 ffd9 	bl	800d3b4 <puts>
#endif

	//GO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
//	VPP_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));

	eNewEvent = evYellowBtn;
 8003402:	4b04      	ldr	r3, [pc, #16]	; (8003414 <_GainSyncMenuInputHandler+0x1c>)
 8003404:	2203      	movs	r2, #3
 8003406:	701a      	strb	r2, [r3, #0]
	return Gain_Sync_Menu_State;
 8003408:	2306      	movs	r3, #6
}
 800340a:	4618      	mov	r0, r3
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	0800f664 	.word	0x0800f664
 8003414:	20001f06 	.word	0x20001f06

08003418 <_GainSyncMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _GainSyncMenuExitHandler()
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitGainMenu Event captured\n");
 800341c:	4806      	ldr	r0, [pc, #24]	; (8003438 <_GainSyncMenuExitHandler+0x20>)
 800341e:	f009 ffc9 	bl	800d3b4 <puts>
#endif

	DM_ShowGainMenu(ENABLE_GAIN_MAIN_MENU);
 8003422:	2001      	movs	r0, #1
 8003424:	f7fd fe1c 	bl	8001060 <DM_ShowGainMenu>

	_RefreshDisplay();
 8003428:	f000 f95c 	bl	80036e4 <_RefreshDisplay>

	eNewEvent = evIdle;
 800342c:	4b03      	ldr	r3, [pc, #12]	; (800343c <_GainSyncMenuExitHandler+0x24>)
 800342e:	2200      	movs	r2, #0
 8003430:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8003432:	2304      	movs	r3, #4
}
 8003434:	4618      	mov	r0, r3
 8003436:	bd80      	pop	{r7, pc}
 8003438:	0800f67c 	.word	0x0800f67c
 800343c:	20001f06 	.word	0x20001f06

08003440 <_BiasMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _BiasMenuEntryHandler()
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("BiasMenu Event captured\n");
 8003444:	480b      	ldr	r0, [pc, #44]	; (8003474 <_BiasMenuEntryHandler+0x34>)
 8003446:	f009 ffb5 	bl	800d3b4 <puts>
#endif

	_RefreshDisplay();
 800344a:	f000 f94b 	bl	80036e4 <_RefreshDisplay>

	DM_ShowBiasSelectMenu(ENABLE_BIASMENU);
 800344e:	2001      	movs	r0, #1
 8003450:	f7fd fe26 	bl	80010a0 <DM_ShowBiasSelectMenu>

	ENCODER_TIMER->ARR = BIAS_MAX;
 8003454:	4b08      	ldr	r3, [pc, #32]	; (8003478 <_BiasMenuEntryHandler+0x38>)
 8003456:	f44f 7248 	mov.w	r2, #800	; 0x320
 800345a:	62da      	str	r2, [r3, #44]	; 0x2c
	ENCODER_TIMER->CNT = BO_GetDcBiasEncoderValue();
 800345c:	f000 f95c 	bl	8003718 <BO_GetDcBiasEncoderValue>
 8003460:	4603      	mov	r3, r0
 8003462:	461a      	mov	r2, r3
 8003464:	4b04      	ldr	r3, [pc, #16]	; (8003478 <_BiasMenuEntryHandler+0x38>)
 8003466:	625a      	str	r2, [r3, #36]	; 0x24

	eNewEvent = evIdle;
 8003468:	4b04      	ldr	r3, [pc, #16]	; (800347c <_BiasMenuEntryHandler+0x3c>)
 800346a:	2200      	movs	r2, #0
 800346c:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 800346e:	230c      	movs	r3, #12
}
 8003470:	4618      	mov	r0, r3
 8003472:	bd80      	pop	{r7, pc}
 8003474:	0800f6d0 	.word	0x0800f6d0
 8003478:	40012c00 	.word	0x40012c00
 800347c:	20001f06 	.word	0x20001f06

08003480 <_BiasMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _BiasMenuInputHandler()
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("BiasSet Event captured\n");
 8003484:	4807      	ldr	r0, [pc, #28]	; (80034a4 <_BiasMenuInputHandler+0x24>)
 8003486:	f009 ff95 	bl	800d3b4 <puts>
#endif

	BO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 800348a:	2001      	movs	r0, #1
 800348c:	f000 fdd2 	bl	8004034 <SM_GetEncoderValue>
 8003490:	4603      	mov	r3, r0
 8003492:	4618      	mov	r0, r3
 8003494:	f000 f94c 	bl	8003730 <BO_ModifyOutput>

	eNewEvent = evIdle;
 8003498:	4b03      	ldr	r3, [pc, #12]	; (80034a8 <_BiasMenuInputHandler+0x28>)
 800349a:	2200      	movs	r2, #0
 800349c:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 800349e:	230c      	movs	r3, #12
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	0800f6e8 	.word	0x0800f6e8
 80034a8:	20001f06 	.word	0x20001f06

080034ac <_BiasMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _BiasMenuExitHandler()
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitBiasMenu Event captured\n");
 80034b0:	4806      	ldr	r0, [pc, #24]	; (80034cc <_BiasMenuExitHandler+0x20>)
 80034b2:	f009 ff7f 	bl	800d3b4 <puts>
#endif


	// disable the menu
	DM_ShowBiasSelectMenu(DISABLE_BIASMENU);
 80034b6:	2000      	movs	r0, #0
 80034b8:	f7fd fdf2 	bl	80010a0 <DM_ShowBiasSelectMenu>

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	_RefreshDisplay();
 80034bc:	f000 f912 	bl	80036e4 <_RefreshDisplay>

	eNewEvent = evIdle;
 80034c0:	4b03      	ldr	r3, [pc, #12]	; (80034d0 <_BiasMenuExitHandler+0x24>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	0800f700 	.word	0x0800f700
 80034d0:	20001f06 	.word	0x20001f06

080034d4 <_FreqMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqMainMenuEntryHandler()
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqMenu Event captured\n");
 80034d8:	4806      	ldr	r0, [pc, #24]	; (80034f4 <_FreqMainMenuEntryHandler+0x20>)
 80034da:	f009 ff6b 	bl	800d3b4 <puts>
#endif

	_RefreshDisplay();
 80034de:	f000 f901 	bl	80036e4 <_RefreshDisplay>

	DM_ShowFreqMenu(ENABLE_FREQ_MAIN_MENU);
 80034e2:	2001      	movs	r0, #1
 80034e4:	f7fd fdcc 	bl	8001080 <DM_ShowFreqMenu>

	// stay in this state
	eNewEvent = evIdle;
 80034e8:	4b03      	ldr	r3, [pc, #12]	; (80034f8 <_FreqMainMenuEntryHandler+0x24>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 80034ee:	2308      	movs	r3, #8
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	0800f71c 	.word	0x0800f71c
 80034f8:	20001f06 	.word	0x20001f06

080034fc <_FreqMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqMainMenuExitHandler()
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Exit Freq Main Menu Event captured\n");
 8003500:	4808      	ldr	r0, [pc, #32]	; (8003524 <_FreqMainMenuExitHandler+0x28>)
 8003502:	f009 ff57 	bl	800d3b4 <puts>
#endif


	// disable the menu
	DM_ShowFreqMenu(DISABLE_FREQ_MENU);
 8003506:	2000      	movs	r0, #0
 8003508:	f7fd fdba 	bl	8001080 <DM_ShowFreqMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 800350c:	4b06      	ldr	r3, [pc, #24]	; (8003528 <_FreqMainMenuExitHandler+0x2c>)
 800350e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003512:	62da      	str	r2, [r3, #44]	; 0x2c

	_RefreshDisplay();
 8003514:	f000 f8e6 	bl	80036e4 <_RefreshDisplay>

	eNewEvent = evIdle;
 8003518:	4b04      	ldr	r3, [pc, #16]	; (800352c <_FreqMainMenuExitHandler+0x30>)
 800351a:	2200      	movs	r2, #0
 800351c:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	bd80      	pop	{r7, pc}
 8003524:	0800f74c 	.word	0x0800f74c
 8003528:	40012c00 	.word	0x40012c00
 800352c:	20001f06 	.word	0x20001f06

08003530 <_FreqPresetMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqPresetMenuEntryHandler()
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Freq Preset Menu Entry Event captured\n");
 8003536:	4812      	ldr	r0, [pc, #72]	; (8003580 <_FreqPresetMenuEntryHandler+0x50>)
 8003538:	f009 ff3c 	bl	800d3b4 <puts>
#endif

	_RefreshDisplay();
 800353c:	f000 f8d2 	bl	80036e4 <_RefreshDisplay>

	DM_ShowFreqMenu(ENABLE_FREQ_PRESET_MENU);
 8003540:	2002      	movs	r0, #2
 8003542:	f7fd fd9d 	bl	8001080 <DM_ShowFreqMenu>

	Freq_Preset_Encoder_Pos_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8003546:	f000 faf1 	bl	8003b2c <FreqO_GetFPresetObject>
 800354a:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00a      	beq.n	8003568 <_FreqPresetMenuEntryHandler+0x38>
	{
		ENCODER_TIMER->CNT = pFreqPresetTmp->epos;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	791a      	ldrb	r2, [r3, #4]
 8003556:	4b0b      	ldr	r3, [pc, #44]	; (8003584 <_FreqPresetMenuEntryHandler+0x54>)
 8003558:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FreqO_GetFreqPresetEncoderRange();
 800355a:	f000 fb19 	bl	8003b90 <FreqO_GetFreqPresetEncoderRange>
 800355e:	4603      	mov	r3, r0
 8003560:	461a      	mov	r2, r3
 8003562:	4b08      	ldr	r3, [pc, #32]	; (8003584 <_FreqPresetMenuEntryHandler+0x54>)
 8003564:	62da      	str	r2, [r3, #44]	; 0x2c
 8003566:	e002      	b.n	800356e <_FreqPresetMenuEntryHandler+0x3e>
	}
	else
	{
		DM_SetErrorDebugMsg("_FreqPresetMenuEntryHandler: pFreqPresetTmp null pointer");
 8003568:	4807      	ldr	r0, [pc, #28]	; (8003588 <_FreqPresetMenuEntryHandler+0x58>)
 800356a:	f7fd fe9d 	bl	80012a8 <DM_SetErrorDebugMsg>
	}


	// stay in this state
	eNewEvent = evIdle;
 800356e:	4b07      	ldr	r3, [pc, #28]	; (800358c <_FreqPresetMenuEntryHandler+0x5c>)
 8003570:	2200      	movs	r2, #0
 8003572:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8003574:	2309      	movs	r3, #9
}
 8003576:	4618      	mov	r0, r3
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	0800f770 	.word	0x0800f770
 8003584:	40012c00 	.word	0x40012c00
 8003588:	0800f798 	.word	0x0800f798
 800358c:	20001f06 	.word	0x20001f06

08003590 <_FreqPresetMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqPresetMenuInputHandler()
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqSet Event captured\n");
 8003594:	4807      	ldr	r0, [pc, #28]	; (80035b4 <_FreqPresetMenuInputHandler+0x24>)
 8003596:	f009 ff0d 	bl	800d3b4 <puts>
#endif

	FreqO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 800359a:	2001      	movs	r0, #1
 800359c:	f000 fd4a 	bl	8004034 <SM_GetEncoderValue>
 80035a0:	4603      	mov	r3, r0
 80035a2:	4618      	mov	r0, r3
 80035a4:	f000 f9d0 	bl	8003948 <FreqO_ModifyOutput>

	// stay in this state
	eNewEvent = evIdle;
 80035a8:	4b03      	ldr	r3, [pc, #12]	; (80035b8 <_FreqPresetMenuInputHandler+0x28>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 80035ae:	2309      	movs	r3, #9
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	0800f734 	.word	0x0800f734
 80035b8:	20001f06 	.word	0x20001f06

080035bc <_FreqPresetMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqPresetMenuExitHandler()
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Exit Freq Menu Event captured\n");
 80035c0:	4805      	ldr	r0, [pc, #20]	; (80035d8 <_FreqPresetMenuExitHandler+0x1c>)
 80035c2:	f009 fef7 	bl	800d3b4 <puts>
#endif


	// disable the menu
	DM_ShowFreqMenu(DISABLE_FREQ_MENU);
 80035c6:	2000      	movs	r0, #0
 80035c8:	f7fd fd5a 	bl	8001080 <DM_ShowFreqMenu>

	// back to main freq menu
	eNewEvent = evGreenBtn;
 80035cc:	4b03      	ldr	r3, [pc, #12]	; (80035dc <_FreqPresetMenuExitHandler+0x20>)
 80035ce:	2202      	movs	r2, #2
 80035d0:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	0800f7d4 	.word	0x0800f7d4
 80035dc:	20001f06 	.word	0x20001f06

080035e0 <_FreqAdjustMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqAdjustMenuEntryHandler()
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Freq Adjust Menu Event captured\n");
 80035e4:	480a      	ldr	r0, [pc, #40]	; (8003610 <_FreqAdjustMenuEntryHandler+0x30>)
 80035e6:	f009 fee5 	bl	800d3b4 <puts>
#endif

	_RefreshDisplay();
 80035ea:	f000 f87b 	bl	80036e4 <_RefreshDisplay>

	DM_ShowFreqMenu(ENABLE_FREQ_ADJUST_MENU);
 80035ee:	2003      	movs	r0, #3
 80035f0:	f7fd fd46 	bl	8001080 <DM_ShowFreqMenu>

	// set the rotary encoder limits to 0-? for this menu
	ENCODER_TIMER->CNT = TIM8->ARR;
 80035f4:	4b07      	ldr	r3, [pc, #28]	; (8003614 <_FreqAdjustMenuEntryHandler+0x34>)
 80035f6:	4a08      	ldr	r2, [pc, #32]	; (8003618 <_FreqAdjustMenuEntryHandler+0x38>)
 80035f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fa:	6253      	str	r3, [r2, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 80035fc:	4b06      	ldr	r3, [pc, #24]	; (8003618 <_FreqAdjustMenuEntryHandler+0x38>)
 80035fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003602:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 8003604:	4b05      	ldr	r3, [pc, #20]	; (800361c <_FreqAdjustMenuEntryHandler+0x3c>)
 8003606:	2200      	movs	r2, #0
 8003608:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 800360a:	230a      	movs	r3, #10
}
 800360c:	4618      	mov	r0, r3
 800360e:	bd80      	pop	{r7, pc}
 8003610:	0800f7f4 	.word	0x0800f7f4
 8003614:	40013400 	.word	0x40013400
 8003618:	40012c00 	.word	0x40012c00
 800361c:	20001f06 	.word	0x20001f06

08003620 <_FreqAdjustMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqAdjustMenuInputHandler()
{
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqSet Event captured\n");
 8003624:	4805      	ldr	r0, [pc, #20]	; (800363c <_FreqAdjustMenuInputHandler+0x1c>)
 8003626:	f009 fec5 	bl	800d3b4 <puts>
#endif

	FreqO_AdjustFreq();
 800362a:	f000 f97f 	bl	800392c <FreqO_AdjustFreq>

	// stay in this state
	eNewEvent = evIdle;
 800362e:	4b04      	ldr	r3, [pc, #16]	; (8003640 <_FreqAdjustMenuInputHandler+0x20>)
 8003630:	2200      	movs	r2, #0
 8003632:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8003634:	230a      	movs	r3, #10
}
 8003636:	4618      	mov	r0, r3
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	0800f734 	.word	0x0800f734
 8003640:	20001f06 	.word	0x20001f06

08003644 <_FreqAdjustMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqAdjustMenuExitHandler()
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Exit Freq Adjust Menu Exit Event captured\n");
 8003648:	4805      	ldr	r0, [pc, #20]	; (8003660 <_FreqAdjustMenuExitHandler+0x1c>)
 800364a:	f009 feb3 	bl	800d3b4 <puts>
#endif


	// disable the menu
	DM_ShowFreqMenu(DISABLE_FREQ_MENU);
 800364e:	2000      	movs	r0, #0
 8003650:	f7fd fd16 	bl	8001080 <DM_ShowFreqMenu>

	// back to main freq menu
	eNewEvent = evGreenBtn;
 8003654:	4b03      	ldr	r3, [pc, #12]	; (8003664 <_FreqAdjustMenuExitHandler+0x20>)
 8003656:	2202      	movs	r2, #2
 8003658:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	bd80      	pop	{r7, pc}
 8003660:	0800f814 	.word	0x0800f814
 8003664:	20001f06 	.word	0x20001f06

08003668 <_FreqSweepMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqSweepMenuEntryHandler()
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Freq Sweep Menu Event captured\n");
 800366c:	4809      	ldr	r0, [pc, #36]	; (8003694 <_FreqSweepMenuEntryHandler+0x2c>)
 800366e:	f009 fea1 	bl	800d3b4 <puts>
#endif

	_RefreshDisplay();
 8003672:	f000 f837 	bl	80036e4 <_RefreshDisplay>

	DM_ShowFreqMenu(ENABLE_FREQ_SWEEP_MENU);
 8003676:	2004      	movs	r0, #4
 8003678:	f7fd fd02 	bl	8001080 <DM_ShowFreqMenu>

	// set the rotary encoder limits to 0-? for this menu
	ENCODER_TIMER->CNT = 0;
 800367c:	4b06      	ldr	r3, [pc, #24]	; (8003698 <_FreqSweepMenuEntryHandler+0x30>)
 800367e:	2200      	movs	r2, #0
 8003680:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 56;
 8003682:	4b05      	ldr	r3, [pc, #20]	; (8003698 <_FreqSweepMenuEntryHandler+0x30>)
 8003684:	2238      	movs	r2, #56	; 0x38
 8003686:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 8003688:	4b04      	ldr	r3, [pc, #16]	; (800369c <_FreqSweepMenuEntryHandler+0x34>)
 800368a:	2200      	movs	r2, #0
 800368c:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 800368e:	230b      	movs	r3, #11
}
 8003690:	4618      	mov	r0, r3
 8003692:	bd80      	pop	{r7, pc}
 8003694:	0800f840 	.word	0x0800f840
 8003698:	40012c00 	.word	0x40012c00
 800369c:	20001f06 	.word	0x20001f06

080036a0 <_FreqSweepMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqSweepMenuExitHandler()
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Exit Freq Sweep Menu Exit Event captured\n");
 80036a4:	4805      	ldr	r0, [pc, #20]	; (80036bc <_FreqSweepMenuExitHandler+0x1c>)
 80036a6:	f009 fe85 	bl	800d3b4 <puts>
#endif


	// disable the menu
	DM_ShowFreqMenu(DISABLE_FREQ_MENU);
 80036aa:	2000      	movs	r0, #0
 80036ac:	f7fd fce8 	bl	8001080 <DM_ShowFreqMenu>

	// back to main freq menu
	eNewEvent = evGreenBtn;
 80036b0:	4b03      	ldr	r3, [pc, #12]	; (80036c0 <_FreqSweepMenuExitHandler+0x20>)
 80036b2:	2202      	movs	r2, #2
 80036b4:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	0800f860 	.word	0x0800f860
 80036c0:	20001f06 	.word	0x20001f06

080036c4 <EM_SetNewEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	4603      	mov	r3, r0
 80036cc:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 80036ce:	4a04      	ldr	r2, [pc, #16]	; (80036e0 <EM_SetNewEvent+0x1c>)
 80036d0:	79fb      	ldrb	r3, [r7, #7]
 80036d2:	7013      	strb	r3, [r2, #0]
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr
 80036e0:	20001f06 	.word	0x20001f06

080036e4 <_RefreshDisplay>:
 *	@param None
 *	@retval None
 *
 */
void _RefreshDisplay()
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0
	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 80036e8:	4804      	ldr	r0, [pc, #16]	; (80036fc <_RefreshDisplay+0x18>)
 80036ea:	f006 fedd 	bl	800a4a8 <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 80036ee:	f7fd fd25 	bl	800113c <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 80036f2:	4802      	ldr	r0, [pc, #8]	; (80036fc <_RefreshDisplay+0x18>)
 80036f4:	f006 fea2 	bl	800a43c <HAL_TIM_Base_Start_IT>
}
 80036f8:	bf00      	nop
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	20002570 	.word	0x20002570

08003700 <BO_GetBiasPolarity>:
 *	@param None
 *	@retval None
 *
 */
eBias_Polarity BO_GetBiasPolarity()
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
	return eBiasPolarity;
 8003704:	4b03      	ldr	r3, [pc, #12]	; (8003714 <BO_GetBiasPolarity+0x14>)
 8003706:	781b      	ldrb	r3, [r3, #0]
}
 8003708:	4618      	mov	r0, r3
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	20000008 	.word	0x20000008

08003718 <BO_GetDcBiasEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t BO_GetDcBiasEncoderValue()
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
	return dc_bias_encoder_value;
 800371c:	4b03      	ldr	r3, [pc, #12]	; (800372c <BO_GetDcBiasEncoderValue+0x14>)
 800371e:	881b      	ldrh	r3, [r3, #0]
}
 8003720:	4618      	mov	r0, r3
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	2000000a 	.word	0x2000000a

08003730 <BO_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void BO_ModifyOutput(uint16_t pEncoderValue)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	4603      	mov	r3, r0
 8003738:	80fb      	strh	r3, [r7, #6]
	// pEncoderValue is reversed for correct rotary encoder operation.
	// However, we want to retain the forward direction value to prevent polarity flip!
	dc_bias_encoder_value = SM_GetEncoderValue(ENCODER_FORWARD);
 800373a:	2000      	movs	r0, #0
 800373c:	f000 fc7a 	bl	8004034 <SM_GetEncoderValue>
 8003740:	4603      	mov	r3, r0
 8003742:	461a      	mov	r2, r3
 8003744:	4b1b      	ldr	r3, [pc, #108]	; (80037b4 <BO_ModifyOutput+0x84>)
 8003746:	801a      	strh	r2, [r3, #0]

	// apply negative dc bias
	if(pEncoderValue < BIAS_CENTER) {
 8003748:	88fb      	ldrh	r3, [r7, #6]
 800374a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800374e:	d214      	bcs.n	800377a <BO_ModifyOutput+0x4a>

		eBiasPolarity = INVERSEBIAS;
 8003750:	4b19      	ldr	r3, [pc, #100]	; (80037b8 <BO_ModifyOutput+0x88>)
 8003752:	2200      	movs	r2, #0
 8003754:	701a      	strb	r2, [r3, #0]


		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((BIAS_CENTER - pEncoderValue) * BIAS_MAG));
 8003756:	88fb      	ldrh	r3, [r7, #6]
 8003758:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 800375c:	4613      	mov	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	4413      	add	r3, r2
 8003762:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8003764:	2200      	movs	r2, #0
 8003766:	2110      	movs	r1, #16
 8003768:	4814      	ldr	r0, [pc, #80]	; (80037bc <BO_ModifyOutput+0x8c>)
 800376a:	f004 fe69 	bl	8008440 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 800376e:	2201      	movs	r2, #1
 8003770:	2108      	movs	r1, #8
 8003772:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003776:	f005 fd39 	bl	80091ec <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(pEncoderValue >= BIAS_CENTER) {
 800377a:	88fb      	ldrh	r3, [r7, #6]
 800377c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003780:	d314      	bcc.n	80037ac <BO_ModifyOutput+0x7c>

		eBiasPolarity = NORMALBIAS;
 8003782:	4b0d      	ldr	r3, [pc, #52]	; (80037b8 <BO_ModifyOutput+0x88>)
 8003784:	2201      	movs	r2, #1
 8003786:	701a      	strb	r2, [r3, #0]
		//TIM1->CNT = pEncoderValue;

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((pEncoderValue - BIAS_CENTER) * BIAS_MAG));
 8003788:	88fb      	ldrh	r3, [r7, #6]
 800378a:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 800378e:	4613      	mov	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	4413      	add	r3, r2
 8003794:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8003796:	2200      	movs	r2, #0
 8003798:	2110      	movs	r1, #16
 800379a:	4808      	ldr	r0, [pc, #32]	; (80037bc <BO_ModifyOutput+0x8c>)
 800379c:	f004 fe50 	bl	8008440 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 80037a0:	2200      	movs	r2, #0
 80037a2:	2108      	movs	r1, #8
 80037a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037a8:	f005 fd20 	bl	80091ec <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_RESET);
	}
}
 80037ac:	bf00      	nop
 80037ae:	3708      	adds	r7, #8
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	2000000a 	.word	0x2000000a
 80037b8:	20000008 	.word	0x20000008
 80037bc:	200023ec 	.word	0x200023ec

080037c0 <BO_GetOutputBias>:
 *	@param None
 *	@retval None
 *
 */
uint32_t BO_GetOutputBias()
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 80037c4:	2110      	movs	r1, #16
 80037c6:	4803      	ldr	r0, [pc, #12]	; (80037d4 <BO_GetOutputBias+0x14>)
 80037c8:	f004 fe76 	bl	80084b8 <HAL_DAC_GetValue>
 80037cc:	4603      	mov	r3, r0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	200023ec 	.word	0x200023ec

080037d8 <DT_InitRegister>:
 *	@param None
 *	@retval None
 *
 */
void DT_InitRegister()
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 80037de:	2300      	movs	r3, #0
 80037e0:	607b      	str	r3, [r7, #4]
 80037e2:	e06b      	b.n	80038bc <DT_InitRegister+0xe4>
	{
		// prevent divide by zero (prescaler)
		if(DacTimerReg[i].psc == 0)
 80037e4:	493a      	ldr	r1, [pc, #232]	; (80038d0 <DT_InitRegister+0xf8>)
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	4613      	mov	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	4413      	add	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	440b      	add	r3, r1
 80037f2:	3308      	adds	r3, #8
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d129      	bne.n	800384e <DT_InitRegister+0x76>
			DacTimerReg[i].arr = ((SM_MCLK / DacTimerReg[i].hertz) / SM_FSAMP) * DacTimerReg[i].error;
 80037fa:	4935      	ldr	r1, [pc, #212]	; (80038d0 <DT_InitRegister+0xf8>)
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	4613      	mov	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	4413      	add	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	440b      	add	r3, r1
 8003808:	3304      	adds	r3, #4
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a31      	ldr	r2, [pc, #196]	; (80038d4 <DT_InitRegister+0xfc>)
 800380e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003812:	ee07 3a90 	vmov	s15, r3
 8003816:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800381a:	492d      	ldr	r1, [pc, #180]	; (80038d0 <DT_InitRegister+0xf8>)
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	4613      	mov	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	4413      	add	r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	440b      	add	r3, r1
 8003828:	3310      	adds	r3, #16
 800382a:	edd3 7a00 	vldr	s15, [r3]
 800382e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003832:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003836:	ee17 0a90 	vmov	r0, s15
 800383a:	4925      	ldr	r1, [pc, #148]	; (80038d0 <DT_InitRegister+0xf8>)
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	4613      	mov	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4413      	add	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	440b      	add	r3, r1
 8003848:	330c      	adds	r3, #12
 800384a:	6018      	str	r0, [r3, #0]
 800384c:	e033      	b.n	80038b6 <DT_InitRegister+0xde>
		else
			DacTimerReg[i].arr = (((SM_MCLK / DacTimerReg[i].hertz) / DacTimerReg[i].psc) / SM_FSAMP) * DacTimerReg[i].error;
 800384e:	4920      	ldr	r1, [pc, #128]	; (80038d0 <DT_InitRegister+0xf8>)
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	4613      	mov	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	4413      	add	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	440b      	add	r3, r1
 800385c:	3304      	adds	r3, #4
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a1c      	ldr	r2, [pc, #112]	; (80038d4 <DT_InitRegister+0xfc>)
 8003862:	fbb2 f1f3 	udiv	r1, r2, r3
 8003866:	481a      	ldr	r0, [pc, #104]	; (80038d0 <DT_InitRegister+0xf8>)
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	4613      	mov	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4413      	add	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4403      	add	r3, r0
 8003874:	3308      	adds	r3, #8
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	fbb1 f3f3 	udiv	r3, r1, r3
 800387c:	ee07 3a90 	vmov	s15, r3
 8003880:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003884:	4912      	ldr	r1, [pc, #72]	; (80038d0 <DT_InitRegister+0xf8>)
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	4613      	mov	r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4413      	add	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	3310      	adds	r3, #16
 8003894:	edd3 7a00 	vldr	s15, [r3]
 8003898:	ee67 7a27 	vmul.f32	s15, s14, s15
 800389c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038a0:	ee17 0a90 	vmov	r0, s15
 80038a4:	490a      	ldr	r1, [pc, #40]	; (80038d0 <DT_InitRegister+0xf8>)
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	4613      	mov	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	4413      	add	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	440b      	add	r3, r1
 80038b2:	330c      	adds	r3, #12
 80038b4:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	3301      	adds	r3, #1
 80038ba:	607b      	str	r3, [r7, #4]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b0d      	cmp	r3, #13
 80038c0:	dd90      	ble.n	80037e4 <DT_InitRegister+0xc>
	}
}
 80038c2:	bf00      	nop
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	2000000c 	.word	0x2000000c
 80038d4:	00155cc0 	.word	0x00155cc0

080038d8 <DT_GetRegisterByEnum>:
 *	@param pEnum Enummeration (eFreq_Preset) search criteria. Not an index
 *	@retval Pointer to the found DacTimeReg_t struct. Null if no result!
 *
 */
DacTimeReg_t* DT_GetRegisterByEnum(eFreq_Preset pEnum)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 80038e0:	2300      	movs	r3, #0
 80038e2:	60fb      	str	r3, [r7, #12]
 80038e4:	e016      	b.n	8003914 <DT_GetRegisterByEnum+0x3c>
		if(DacTimerReg[i].hertz == pEnum)
 80038e6:	4910      	ldr	r1, [pc, #64]	; (8003928 <DT_GetRegisterByEnum+0x50>)
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	4613      	mov	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4413      	add	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	440b      	add	r3, r1
 80038f4:	3304      	adds	r3, #4
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d107      	bne.n	800390e <DT_GetRegisterByEnum+0x36>
			return &DacTimerReg[i];
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	4613      	mov	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4413      	add	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4a07      	ldr	r2, [pc, #28]	; (8003928 <DT_GetRegisterByEnum+0x50>)
 800390a:	4413      	add	r3, r2
 800390c:	e006      	b.n	800391c <DT_GetRegisterByEnum+0x44>
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	3301      	adds	r3, #1
 8003912:	60fb      	str	r3, [r7, #12]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2b0d      	cmp	r3, #13
 8003918:	dde5      	ble.n	80038e6 <DT_GetRegisterByEnum+0xe>

	return 0;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3714      	adds	r7, #20
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr
 8003928:	2000000c 	.word	0x2000000c

0800392c <FreqO_AdjustFreq>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustFreq()
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
		//TIM8->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_HIFREQ_MAG;
		TIM8->ARR = SM_GetEncoderValue(ENCODER_FORWARD); //* FREQ_ENCODER_MIDFREQ_MAG;
 8003930:	2000      	movs	r0, #0
 8003932:	f000 fb7f 	bl	8004034 <SM_GetEncoderValue>
 8003936:	4603      	mov	r3, r0
 8003938:	461a      	mov	r2, r3
 800393a:	4b02      	ldr	r3, [pc, #8]	; (8003944 <FreqO_AdjustFreq+0x18>)
 800393c:	62da      	str	r2, [r3, #44]	; 0x2c
		//TIM8->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_LOFREQ_MAG;
}
 800393e:	bf00      	nop
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	40013400 	.word	0x40013400

08003948 <FreqO_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_ModifyOutput(uint16_t pEncValue)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	4603      	mov	r3, r0
 8003950:	80fb      	strh	r3, [r7, #6]

	switch(pEncValue)
 8003952:	88fb      	ldrh	r3, [r7, #6]
 8003954:	2b38      	cmp	r3, #56	; 0x38
 8003956:	f200 80b4 	bhi.w	8003ac2 <FreqO_ModifyOutput+0x17a>
 800395a:	a201      	add	r2, pc, #4	; (adr r2, 8003960 <FreqO_ModifyOutput+0x18>)
 800395c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003960:	08003a45 	.word	0x08003a45
 8003964:	08003a45 	.word	0x08003a45
 8003968:	08003a45 	.word	0x08003a45
 800396c:	08003a45 	.word	0x08003a45
 8003970:	08003a4d 	.word	0x08003a4d
 8003974:	08003a4d 	.word	0x08003a4d
 8003978:	08003a4d 	.word	0x08003a4d
 800397c:	08003a4d 	.word	0x08003a4d
 8003980:	08003a55 	.word	0x08003a55
 8003984:	08003a55 	.word	0x08003a55
 8003988:	08003a55 	.word	0x08003a55
 800398c:	08003a55 	.word	0x08003a55
 8003990:	08003a5d 	.word	0x08003a5d
 8003994:	08003a5d 	.word	0x08003a5d
 8003998:	08003a5d 	.word	0x08003a5d
 800399c:	08003a5d 	.word	0x08003a5d
 80039a0:	08003a65 	.word	0x08003a65
 80039a4:	08003a65 	.word	0x08003a65
 80039a8:	08003a65 	.word	0x08003a65
 80039ac:	08003a65 	.word	0x08003a65
 80039b0:	08003a6d 	.word	0x08003a6d
 80039b4:	08003a6d 	.word	0x08003a6d
 80039b8:	08003a6d 	.word	0x08003a6d
 80039bc:	08003a6d 	.word	0x08003a6d
 80039c0:	08003a77 	.word	0x08003a77
 80039c4:	08003a77 	.word	0x08003a77
 80039c8:	08003a77 	.word	0x08003a77
 80039cc:	08003a77 	.word	0x08003a77
 80039d0:	08003a81 	.word	0x08003a81
 80039d4:	08003a81 	.word	0x08003a81
 80039d8:	08003a81 	.word	0x08003a81
 80039dc:	08003ac3 	.word	0x08003ac3
 80039e0:	08003a81 	.word	0x08003a81
 80039e4:	08003a8b 	.word	0x08003a8b
 80039e8:	08003a8b 	.word	0x08003a8b
 80039ec:	08003a8b 	.word	0x08003a8b
 80039f0:	08003a8b 	.word	0x08003a8b
 80039f4:	08003a95 	.word	0x08003a95
 80039f8:	08003a95 	.word	0x08003a95
 80039fc:	08003a95 	.word	0x08003a95
 8003a00:	08003a95 	.word	0x08003a95
 8003a04:	08003a9f 	.word	0x08003a9f
 8003a08:	08003a9f 	.word	0x08003a9f
 8003a0c:	08003a9f 	.word	0x08003a9f
 8003a10:	08003a9f 	.word	0x08003a9f
 8003a14:	08003aa9 	.word	0x08003aa9
 8003a18:	08003aa9 	.word	0x08003aa9
 8003a1c:	08003aa9 	.word	0x08003aa9
 8003a20:	08003aa9 	.word	0x08003aa9
 8003a24:	08003ab3 	.word	0x08003ab3
 8003a28:	08003ab3 	.word	0x08003ab3
 8003a2c:	08003ab3 	.word	0x08003ab3
 8003a30:	08003ab3 	.word	0x08003ab3
 8003a34:	08003abb 	.word	0x08003abb
 8003a38:	08003abb 	.word	0x08003abb
 8003a3c:	08003abb 	.word	0x08003abb
 8003a40:	08003abb 	.word	0x08003abb
	{
		case 0:
		case 1:
		case 2:
		case 3:
			FreqO_ApplyPreset(FPRESET_1HZ);
 8003a44:	2001      	movs	r0, #1
 8003a46:	f000 f845 	bl	8003ad4 <FreqO_ApplyPreset>
			break;
 8003a4a:	e03a      	b.n	8003ac2 <FreqO_ModifyOutput+0x17a>
		case 4:
		case 5:
		case 6:
		case 7:
			FreqO_ApplyPreset(FPRESET_10HZ);
 8003a4c:	200a      	movs	r0, #10
 8003a4e:	f000 f841 	bl	8003ad4 <FreqO_ApplyPreset>
			break;
 8003a52:	e036      	b.n	8003ac2 <FreqO_ModifyOutput+0x17a>
		case 8:
		case 9:
		case 10:
		case 11:
			FreqO_ApplyPreset(FPRESET_50HZ);
 8003a54:	2032      	movs	r0, #50	; 0x32
 8003a56:	f000 f83d 	bl	8003ad4 <FreqO_ApplyPreset>
			break;
 8003a5a:	e032      	b.n	8003ac2 <FreqO_ModifyOutput+0x17a>
		case 12:
		case 13:
		case 14:
		case 15:
			FreqO_ApplyPreset(FPRESET_100HZ);
 8003a5c:	2064      	movs	r0, #100	; 0x64
 8003a5e:	f000 f839 	bl	8003ad4 <FreqO_ApplyPreset>
			break;
 8003a62:	e02e      	b.n	8003ac2 <FreqO_ModifyOutput+0x17a>
		case 16:
		case 17:
		case 18:
		case 19:
			FreqO_ApplyPreset(FPRESET_250HZ);
 8003a64:	20fa      	movs	r0, #250	; 0xfa
 8003a66:	f000 f835 	bl	8003ad4 <FreqO_ApplyPreset>
			break;
 8003a6a:	e02a      	b.n	8003ac2 <FreqO_ModifyOutput+0x17a>
		case 20:
		case 21:
		case 22:
		case 23:
			FreqO_ApplyPreset(FPRESET_500HZ);
 8003a6c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a70:	f000 f830 	bl	8003ad4 <FreqO_ApplyPreset>
			break;
 8003a74:	e025      	b.n	8003ac2 <FreqO_ModifyOutput+0x17a>
		case 24:
		case 25:
		case 26:
		case 27:
			FreqO_ApplyPreset(FPRESET_750HZ);
 8003a76:	f240 20ee 	movw	r0, #750	; 0x2ee
 8003a7a:	f000 f82b 	bl	8003ad4 <FreqO_ApplyPreset>
			break;
 8003a7e:	e020      	b.n	8003ac2 <FreqO_ModifyOutput+0x17a>
		case 28:
		case 29:
		case 30:
		case 32:
			FreqO_ApplyPreset(FPRESET_1KHZ);
 8003a80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a84:	f000 f826 	bl	8003ad4 <FreqO_ApplyPreset>
			break;
 8003a88:	e01b      	b.n	8003ac2 <FreqO_ModifyOutput+0x17a>
		case 33:
		case 34:
		case 35:
		case 36:
			FreqO_ApplyPreset(FPRESET_5KHZ);
 8003a8a:	f241 3088 	movw	r0, #5000	; 0x1388
 8003a8e:	f000 f821 	bl	8003ad4 <FreqO_ApplyPreset>
			break;
 8003a92:	e016      	b.n	8003ac2 <FreqO_ModifyOutput+0x17a>
		case 37:
		case 38:
		case 39:
		case 40:
			FreqO_ApplyPreset(FPRESET_10KHZ);
 8003a94:	f242 7010 	movw	r0, #10000	; 0x2710
 8003a98:	f000 f81c 	bl	8003ad4 <FreqO_ApplyPreset>
			break;
 8003a9c:	e011      	b.n	8003ac2 <FreqO_ModifyOutput+0x17a>
		case 41:
		case 42:
		case 43:
		case 44:
			FreqO_ApplyPreset(FPRESET_25KHZ);
 8003a9e:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8003aa2:	f000 f817 	bl	8003ad4 <FreqO_ApplyPreset>
			break;
 8003aa6:	e00c      	b.n	8003ac2 <FreqO_ModifyOutput+0x17a>
		case 45:
		case 46:
		case 47:
		case 48:
			FreqO_ApplyPreset(FPRESET_50KHZ);
 8003aa8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003aac:	f000 f812 	bl	8003ad4 <FreqO_ApplyPreset>
			break;
 8003ab0:	e007      	b.n	8003ac2 <FreqO_ModifyOutput+0x17a>
		case 49:
		case 50:
		case 51:
		case 52:
			FreqO_ApplyPreset(FPRESET_75KHZ);
 8003ab2:	4806      	ldr	r0, [pc, #24]	; (8003acc <FreqO_ModifyOutput+0x184>)
 8003ab4:	f000 f80e 	bl	8003ad4 <FreqO_ApplyPreset>
			break;
 8003ab8:	e003      	b.n	8003ac2 <FreqO_ModifyOutput+0x17a>
		case 53:
		case 54:
		case 55:
		case 56:
			FreqO_ApplyPreset(FPRESET_100KHZ);
 8003aba:	4805      	ldr	r0, [pc, #20]	; (8003ad0 <FreqO_ModifyOutput+0x188>)
 8003abc:	f000 f80a 	bl	8003ad4 <FreqO_ApplyPreset>
			break;
 8003ac0:	bf00      	nop
	}

}
 8003ac2:	bf00      	nop
 8003ac4:	3708      	adds	r7, #8
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	000124f8 	.word	0x000124f8
 8003ad0:	000186a0 	.word	0x000186a0

08003ad4 <FreqO_ApplyPreset>:

 *	@retval None
 *
 */
void FreqO_ApplyPreset(eFreq_Preset pPresetEnum)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
	DacTimeReg_t* tmp = DT_GetRegisterByEnum(pPresetEnum);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f7ff fefb 	bl	80038d8 <DT_GetRegisterByEnum>
 8003ae2:	60f8      	str	r0, [r7, #12]
	if(tmp)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d015      	beq.n	8003b16 <FreqO_ApplyPreset+0x42>
	{
		TIM8->PSC = tmp->psc;
 8003aea:	4a0d      	ldr	r2, [pc, #52]	; (8003b20 <FreqO_ApplyPreset+0x4c>)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	6293      	str	r3, [r2, #40]	; 0x28
		TIM8->ARR = tmp->arr;
 8003af2:	4a0b      	ldr	r2, [pc, #44]	; (8003b20 <FreqO_ApplyPreset+0x4c>)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	62d3      	str	r3, [r2, #44]	; 0x2c
		//eNewFreqPreset = pPresetEnum;
		Freq_Preset_Encoder_Pos_t * tmp = FreqO_FindFPresetObject(pPresetEnum);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f822 	bl	8003b44 <FreqO_FindFPresetObject>
 8003b00:	60b8      	str	r0, [r7, #8]
		if(tmp)
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d003      	beq.n	8003b10 <FreqO_ApplyPreset+0x3c>
		{
			pNewFreqPresetEncoderPos = tmp;
 8003b08:	4a06      	ldr	r2, [pc, #24]	; (8003b24 <FreqO_ApplyPreset+0x50>)
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	6013      	str	r3, [r2, #0]
		{
			DM_SetErrorDebugMsg("FreqO_ApplyPreset() null pointer error");
		}

	}
}
 8003b0e:	e002      	b.n	8003b16 <FreqO_ApplyPreset+0x42>
			DM_SetErrorDebugMsg("FreqO_ApplyPreset() null pointer error");
 8003b10:	4805      	ldr	r0, [pc, #20]	; (8003b28 <FreqO_ApplyPreset+0x54>)
 8003b12:	f7fd fbc9 	bl	80012a8 <DM_SetErrorDebugMsg>
}
 8003b16:	bf00      	nop
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	40013400 	.word	0x40013400
 8003b24:	20000198 	.word	0x20000198
 8003b28:	0800f88c 	.word	0x0800f88c

08003b2c <FreqO_GetFPresetObject>:
 *	@param None
 *	@retval pointer to Freq_Preset_Encoder_Pos_t struct
 *
 */
Freq_Preset_Encoder_Pos_t * FreqO_GetFPresetObject()
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
	return pNewFreqPresetEncoderPos;
 8003b30:	4b03      	ldr	r3, [pc, #12]	; (8003b40 <FreqO_GetFPresetObject+0x14>)
 8003b32:	681b      	ldr	r3, [r3, #0]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	20000198 	.word	0x20000198

08003b44 <FreqO_FindFPresetObject>:

 *	@retval pointer to Freq_Preset_Encoder_Pos_t struct
 *
 */
Freq_Preset_Encoder_Pos_t * FreqO_FindFPresetObject(eFreq_Preset pEnum)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	60fb      	str	r3, [r7, #12]
 8003b50:	e00e      	b.n	8003b70 <FreqO_FindFPresetObject+0x2c>
	{
		if(aFreqPresetEncoderPos[i].hertz == pEnum)
 8003b52:	4a0d      	ldr	r2, [pc, #52]	; (8003b88 <FreqO_FindFPresetObject+0x44>)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d104      	bne.n	8003b6a <FreqO_FindFPresetObject+0x26>
		{
			return &aFreqPresetEncoderPos[i];
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	4a08      	ldr	r2, [pc, #32]	; (8003b88 <FreqO_FindFPresetObject+0x44>)
 8003b66:	4413      	add	r3, r2
 8003b68:	e009      	b.n	8003b7e <FreqO_FindFPresetObject+0x3a>
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2b0d      	cmp	r3, #13
 8003b74:	dded      	ble.n	8003b52 <FreqO_FindFPresetObject+0xe>
		}
	}
	// error!
	DM_SetErrorDebugMsg("FreqO_FindFPresetObject(): no FPreset obj found");
 8003b76:	4805      	ldr	r0, [pc, #20]	; (8003b8c <FreqO_FindFPresetObject+0x48>)
 8003b78:	f7fd fb96 	bl	80012a8 <DM_SetErrorDebugMsg>
	return 0;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	20000128 	.word	0x20000128
 8003b8c:	0800f8b4 	.word	0x0800f8b4

08003b90 <FreqO_GetFreqPresetEncoderRange>:
 *	@param None
 *	@retval uint8_t
 *
 */
uint8_t FreqO_GetFreqPresetEncoderRange()
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
	return FreqPresetEncoderRange;
 8003b94:	4b03      	ldr	r3, [pc, #12]	; (8003ba4 <FreqO_GetFreqPresetEncoderRange+0x14>)
 8003b96:	781b      	ldrb	r3, [r3, #0]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	20000124 	.word	0x20000124

08003ba8 <FreqO_GetOutputFreq>:
 *	@param None
 *	@retval uint32_t
 *
 */
uint32_t FreqO_GetOutputFreq()
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
	return TIM8->ARR;
 8003bac:	4b03      	ldr	r3, [pc, #12]	; (8003bbc <FreqO_GetOutputFreq+0x14>)
 8003bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	40013400 	.word	0x40013400

08003bc0 <FuncO_Init>:

uint32_t *pOriginalDataTable = sine_data_table_3600;
//uint32_t *pOriginalDataTable = sine_data_table_1300;

void FuncO_Init()
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	607b      	str	r3, [r7, #4]
 8003bca:	e00a      	b.n	8003be2 <FuncO_Init+0x22>
		aModdedDataTable[i] = sine_data_table_3600[i];
 8003bcc:	4a09      	ldr	r2, [pc, #36]	; (8003bf4 <FuncO_Init+0x34>)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003bd4:	4908      	ldr	r1, [pc, #32]	; (8003bf8 <FuncO_Init+0x38>)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	3301      	adds	r3, #1
 8003be0:	607b      	str	r3, [r7, #4]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2b77      	cmp	r3, #119	; 0x77
 8003be6:	ddf1      	ble.n	8003bcc <FuncO_Init+0xc>
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr
 8003bf4:	20001568 	.word	0x20001568
 8003bf8:	20001f28 	.word	0x20001f28

08003bfc <FuncO_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void FuncO_ModifyOutput(uint16_t pEncoderValue)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	4603      	mov	r3, r0
 8003c04:	80fb      	strh	r3, [r7, #6]


	switch(pEncoderValue)
 8003c06:	88fb      	ldrh	r3, [r7, #6]
 8003c08:	2b17      	cmp	r3, #23
 8003c0a:	d84b      	bhi.n	8003ca4 <FuncO_ModifyOutput+0xa8>
 8003c0c:	a201      	add	r2, pc, #4	; (adr r2, 8003c14 <FuncO_ModifyOutput+0x18>)
 8003c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c12:	bf00      	nop
 8003c14:	08003c75 	.word	0x08003c75
 8003c18:	08003c75 	.word	0x08003c75
 8003c1c:	08003c75 	.word	0x08003c75
 8003c20:	08003c7d 	.word	0x08003c7d
 8003c24:	08003c7d 	.word	0x08003c7d
 8003c28:	08003c7d 	.word	0x08003c7d
 8003c2c:	08003c7d 	.word	0x08003c7d
 8003c30:	08003c85 	.word	0x08003c85
 8003c34:	08003c85 	.word	0x08003c85
 8003c38:	08003c85 	.word	0x08003c85
 8003c3c:	08003c85 	.word	0x08003c85
 8003c40:	08003c8d 	.word	0x08003c8d
 8003c44:	08003c8d 	.word	0x08003c8d
 8003c48:	08003c8d 	.word	0x08003c8d
 8003c4c:	08003c8d 	.word	0x08003c8d
 8003c50:	08003c95 	.word	0x08003c95
 8003c54:	08003c95 	.word	0x08003c95
 8003c58:	08003c95 	.word	0x08003c95
 8003c5c:	08003c95 	.word	0x08003c95
 8003c60:	08003c9d 	.word	0x08003c9d
 8003c64:	08003c9d 	.word	0x08003c9d
 8003c68:	08003c9d 	.word	0x08003c9d
 8003c6c:	08003c9d 	.word	0x08003c9d
 8003c70:	08003c9d 	.word	0x08003c9d
	{
		case 0:
		case 1:
		case 2:

			FuncO_ApplyPreset_Fast(SINE_FUNC_MODE);
 8003c74:	2000      	movs	r0, #0
 8003c76:	f000 f819 	bl	8003cac <FuncO_ApplyPreset_Fast>
			break;
 8003c7a:	e013      	b.n	8003ca4 <FuncO_ModifyOutput+0xa8>
		case 3:
		case 4:
		case 5:
		case 6:

			FuncO_ApplyPreset_Fast(SQUARE_FUNC_MODE);
 8003c7c:	2001      	movs	r0, #1
 8003c7e:	f000 f815 	bl	8003cac <FuncO_ApplyPreset_Fast>

			break;
 8003c82:	e00f      	b.n	8003ca4 <FuncO_ModifyOutput+0xa8>
		case 7:
		case 8:
		case 9:
		case 10:

			FuncO_ApplyPreset_Fast(SAW_FUNC_MODE);
 8003c84:	2002      	movs	r0, #2
 8003c86:	f000 f811 	bl	8003cac <FuncO_ApplyPreset_Fast>
			break;
 8003c8a:	e00b      	b.n	8003ca4 <FuncO_ModifyOutput+0xa8>
		case 11:
		case 12:
		case 13:
		case 14:

			FuncO_ApplyPreset_Fast(REV_SAW_FUNC_MODE);
 8003c8c:	2003      	movs	r0, #3
 8003c8e:	f000 f80d 	bl	8003cac <FuncO_ApplyPreset_Fast>
			break;
 8003c92:	e007      	b.n	8003ca4 <FuncO_ModifyOutput+0xa8>
		case 15:
		case 16:
		case 17:
		case 18:

			FuncO_ApplyPreset_Fast(TRIANGLE_FUNC_MODE);
 8003c94:	2004      	movs	r0, #4
 8003c96:	f000 f809 	bl	8003cac <FuncO_ApplyPreset_Fast>
			break;
 8003c9a:	e003      	b.n	8003ca4 <FuncO_ModifyOutput+0xa8>
		case 20:
		case 21:
		case 22:
		case 23:

			FuncO_ApplyPreset_Fast(IMPULSE_FUNC_MODE);
 8003c9c:	2005      	movs	r0, #5
 8003c9e:	f000 f805 	bl	8003cac <FuncO_ApplyPreset_Fast>
			break;
 8003ca2:	bf00      	nop
	}
}
 8003ca4:	bf00      	nop
 8003ca6:	3708      	adds	r7, #8
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <FuncO_ApplyPreset_Fast>:

 *	@retval None
 *
 */
void FuncO_ApplyPreset_Fast(eOutput_mode pPresetEnum)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af02      	add	r7, sp, #8
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	71fb      	strb	r3, [r7, #7]

	switch(pPresetEnum)
 8003cb6:	79fb      	ldrb	r3, [r7, #7]
 8003cb8:	2b05      	cmp	r3, #5
 8003cba:	f200 80b1 	bhi.w	8003e20 <FuncO_ApplyPreset_Fast+0x174>
 8003cbe:	a201      	add	r2, pc, #4	; (adr r2, 8003cc4 <FuncO_ApplyPreset_Fast+0x18>)
 8003cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc4:	08003cdd 	.word	0x08003cdd
 8003cc8:	08003d13 	.word	0x08003d13
 8003ccc:	08003d49 	.word	0x08003d49
 8003cd0:	08003d7f 	.word	0x08003d7f
 8003cd4:	08003db5 	.word	0x08003db5
 8003cd8:	08003deb 	.word	0x08003deb
	{
		case SINE_FUNC_MODE:

			pOriginalDataTable = sine_data_table_3600;
 8003cdc:	4b52      	ldr	r3, [pc, #328]	; (8003e28 <FuncO_ApplyPreset_Fast+0x17c>)
 8003cde:	4a53      	ldr	r2, [pc, #332]	; (8003e2c <FuncO_ApplyPreset_Fast+0x180>)
 8003ce0:	601a      	str	r2, [r3, #0]
			//pOriginalDataTable = sine_data_table_1300;

			VPP_ApplyPreset_Fast(VPP_GetVppPresetObject(SIGNAL_OUTPUT_PRESET)->Vpp_literal);
 8003ce2:	2000      	movs	r0, #0
 8003ce4:	f000 ff5c 	bl	8004ba0 <VPP_GetVppPresetObject>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f000 fa01 	bl	80040f4 <VPP_ApplyPreset_Fast>

			pNewFuncPresetEncoderPos = &aFuncPresetEncoderPos[0];
 8003cf2:	4b4f      	ldr	r3, [pc, #316]	; (8003e30 <FuncO_ApplyPreset_Fast+0x184>)
 8003cf4:	4a4f      	ldr	r2, [pc, #316]	; (8003e34 <FuncO_ApplyPreset_Fast+0x188>)
 8003cf6:	601a      	str	r2, [r3, #0]

			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	484f      	ldr	r0, [pc, #316]	; (8003e38 <FuncO_ApplyPreset_Fast+0x18c>)
 8003cfc:	f004 fb4a 	bl	8008394 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)aModdedDataTable, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8003d00:	2300      	movs	r3, #0
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	2378      	movs	r3, #120	; 0x78
 8003d06:	4a4d      	ldr	r2, [pc, #308]	; (8003e3c <FuncO_ApplyPreset_Fast+0x190>)
 8003d08:	2100      	movs	r1, #0
 8003d0a:	484b      	ldr	r0, [pc, #300]	; (8003e38 <FuncO_ApplyPreset_Fast+0x18c>)
 8003d0c:	f004 fa80 	bl	8008210 <HAL_DAC_Start_DMA>
			break;
 8003d10:	e086      	b.n	8003e20 <FuncO_ApplyPreset_Fast+0x174>

		case SQUARE_FUNC_MODE:

			pOriginalDataTable = square_data_table_3600;
 8003d12:	4b45      	ldr	r3, [pc, #276]	; (8003e28 <FuncO_ApplyPreset_Fast+0x17c>)
 8003d14:	4a4a      	ldr	r2, [pc, #296]	; (8003e40 <FuncO_ApplyPreset_Fast+0x194>)
 8003d16:	601a      	str	r2, [r3, #0]

			VPP_ApplyPreset_Fast(VPP_GetVppPresetObject(SIGNAL_OUTPUT_PRESET)->Vpp_literal);
 8003d18:	2000      	movs	r0, #0
 8003d1a:	f000 ff41 	bl	8004ba0 <VPP_GetVppPresetObject>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 f9e6 	bl	80040f4 <VPP_ApplyPreset_Fast>

			pNewFuncPresetEncoderPos = &aFuncPresetEncoderPos[1];
 8003d28:	4b41      	ldr	r3, [pc, #260]	; (8003e30 <FuncO_ApplyPreset_Fast+0x184>)
 8003d2a:	4a46      	ldr	r2, [pc, #280]	; (8003e44 <FuncO_ApplyPreset_Fast+0x198>)
 8003d2c:	601a      	str	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8003d2e:	2100      	movs	r1, #0
 8003d30:	4841      	ldr	r0, [pc, #260]	; (8003e38 <FuncO_ApplyPreset_Fast+0x18c>)
 8003d32:	f004 fb2f 	bl	8008394 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)aModdedDataTable, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
 8003d36:	2300      	movs	r3, #0
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	2378      	movs	r3, #120	; 0x78
 8003d3c:	4a3f      	ldr	r2, [pc, #252]	; (8003e3c <FuncO_ApplyPreset_Fast+0x190>)
 8003d3e:	2100      	movs	r1, #0
 8003d40:	483d      	ldr	r0, [pc, #244]	; (8003e38 <FuncO_ApplyPreset_Fast+0x18c>)
 8003d42:	f004 fa65 	bl	8008210 <HAL_DAC_Start_DMA>
			break;
 8003d46:	e06b      	b.n	8003e20 <FuncO_ApplyPreset_Fast+0x174>

		case SAW_FUNC_MODE:

			pOriginalDataTable = saw_data_table_3600;
 8003d48:	4b37      	ldr	r3, [pc, #220]	; (8003e28 <FuncO_ApplyPreset_Fast+0x17c>)
 8003d4a:	4a3f      	ldr	r2, [pc, #252]	; (8003e48 <FuncO_ApplyPreset_Fast+0x19c>)
 8003d4c:	601a      	str	r2, [r3, #0]

			VPP_ApplyPreset_Fast(VPP_GetVppPresetObject(SIGNAL_OUTPUT_PRESET)->Vpp_literal);
 8003d4e:	2000      	movs	r0, #0
 8003d50:	f000 ff26 	bl	8004ba0 <VPP_GetVppPresetObject>
 8003d54:	4603      	mov	r3, r0
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f000 f9cb 	bl	80040f4 <VPP_ApplyPreset_Fast>

			pNewFuncPresetEncoderPos = &aFuncPresetEncoderPos[2];
 8003d5e:	4b34      	ldr	r3, [pc, #208]	; (8003e30 <FuncO_ApplyPreset_Fast+0x184>)
 8003d60:	4a3a      	ldr	r2, [pc, #232]	; (8003e4c <FuncO_ApplyPreset_Fast+0x1a0>)
 8003d62:	601a      	str	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8003d64:	2100      	movs	r1, #0
 8003d66:	4834      	ldr	r0, [pc, #208]	; (8003e38 <FuncO_ApplyPreset_Fast+0x18c>)
 8003d68:	f004 fb14 	bl	8008394 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)aModdedDataTable, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	9300      	str	r3, [sp, #0]
 8003d70:	2378      	movs	r3, #120	; 0x78
 8003d72:	4a32      	ldr	r2, [pc, #200]	; (8003e3c <FuncO_ApplyPreset_Fast+0x190>)
 8003d74:	2100      	movs	r1, #0
 8003d76:	4830      	ldr	r0, [pc, #192]	; (8003e38 <FuncO_ApplyPreset_Fast+0x18c>)
 8003d78:	f004 fa4a 	bl	8008210 <HAL_DAC_Start_DMA>
			break;
 8003d7c:	e050      	b.n	8003e20 <FuncO_ApplyPreset_Fast+0x174>

		case REV_SAW_FUNC_MODE:

			pOriginalDataTable = saw_rev_data_table_3600;
 8003d7e:	4b2a      	ldr	r3, [pc, #168]	; (8003e28 <FuncO_ApplyPreset_Fast+0x17c>)
 8003d80:	4a33      	ldr	r2, [pc, #204]	; (8003e50 <FuncO_ApplyPreset_Fast+0x1a4>)
 8003d82:	601a      	str	r2, [r3, #0]

			VPP_ApplyPreset_Fast(VPP_GetVppPresetObject(SIGNAL_OUTPUT_PRESET)->Vpp_literal);
 8003d84:	2000      	movs	r0, #0
 8003d86:	f000 ff0b 	bl	8004ba0 <VPP_GetVppPresetObject>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 f9b0 	bl	80040f4 <VPP_ApplyPreset_Fast>

			pNewFuncPresetEncoderPos = &aFuncPresetEncoderPos[3];
 8003d94:	4b26      	ldr	r3, [pc, #152]	; (8003e30 <FuncO_ApplyPreset_Fast+0x184>)
 8003d96:	4a2f      	ldr	r2, [pc, #188]	; (8003e54 <FuncO_ApplyPreset_Fast+0x1a8>)
 8003d98:	601a      	str	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	4826      	ldr	r0, [pc, #152]	; (8003e38 <FuncO_ApplyPreset_Fast+0x18c>)
 8003d9e:	f004 faf9 	bl	8008394 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)aModdedDataTable, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
 8003da2:	2300      	movs	r3, #0
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	2378      	movs	r3, #120	; 0x78
 8003da8:	4a24      	ldr	r2, [pc, #144]	; (8003e3c <FuncO_ApplyPreset_Fast+0x190>)
 8003daa:	2100      	movs	r1, #0
 8003dac:	4822      	ldr	r0, [pc, #136]	; (8003e38 <FuncO_ApplyPreset_Fast+0x18c>)
 8003dae:	f004 fa2f 	bl	8008210 <HAL_DAC_Start_DMA>
			break;
 8003db2:	e035      	b.n	8003e20 <FuncO_ApplyPreset_Fast+0x174>

		case TRIANGLE_FUNC_MODE:

			pOriginalDataTable = triangle_data_table_3600;
 8003db4:	4b1c      	ldr	r3, [pc, #112]	; (8003e28 <FuncO_ApplyPreset_Fast+0x17c>)
 8003db6:	4a28      	ldr	r2, [pc, #160]	; (8003e58 <FuncO_ApplyPreset_Fast+0x1ac>)
 8003db8:	601a      	str	r2, [r3, #0]

			VPP_ApplyPreset_Fast(VPP_GetVppPresetObject(SIGNAL_OUTPUT_PRESET)->Vpp_literal);
 8003dba:	2000      	movs	r0, #0
 8003dbc:	f000 fef0 	bl	8004ba0 <VPP_GetVppPresetObject>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f000 f995 	bl	80040f4 <VPP_ApplyPreset_Fast>

			pNewFuncPresetEncoderPos = &aFuncPresetEncoderPos[4];
 8003dca:	4b19      	ldr	r3, [pc, #100]	; (8003e30 <FuncO_ApplyPreset_Fast+0x184>)
 8003dcc:	4a23      	ldr	r2, [pc, #140]	; (8003e5c <FuncO_ApplyPreset_Fast+0x1b0>)
 8003dce:	601a      	str	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	4819      	ldr	r0, [pc, #100]	; (8003e38 <FuncO_ApplyPreset_Fast+0x18c>)
 8003dd4:	f004 fade 	bl	8008394 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)aModdedDataTable, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 8003dd8:	2300      	movs	r3, #0
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	2378      	movs	r3, #120	; 0x78
 8003dde:	4a17      	ldr	r2, [pc, #92]	; (8003e3c <FuncO_ApplyPreset_Fast+0x190>)
 8003de0:	2100      	movs	r1, #0
 8003de2:	4815      	ldr	r0, [pc, #84]	; (8003e38 <FuncO_ApplyPreset_Fast+0x18c>)
 8003de4:	f004 fa14 	bl	8008210 <HAL_DAC_Start_DMA>
			break;
 8003de8:	e01a      	b.n	8003e20 <FuncO_ApplyPreset_Fast+0x174>

		case IMPULSE_FUNC_MODE:

			pOriginalDataTable = unitimpulse_data_table_3600;
 8003dea:	4b0f      	ldr	r3, [pc, #60]	; (8003e28 <FuncO_ApplyPreset_Fast+0x17c>)
 8003dec:	4a1c      	ldr	r2, [pc, #112]	; (8003e60 <FuncO_ApplyPreset_Fast+0x1b4>)
 8003dee:	601a      	str	r2, [r3, #0]

			VPP_ApplyPreset_Fast(VPP_GetVppPresetObject(SIGNAL_OUTPUT_PRESET)->Vpp_literal);
 8003df0:	2000      	movs	r0, #0
 8003df2:	f000 fed5 	bl	8004ba0 <VPP_GetVppPresetObject>
 8003df6:	4603      	mov	r3, r0
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 f97a 	bl	80040f4 <VPP_ApplyPreset_Fast>

			pNewFuncPresetEncoderPos = &aFuncPresetEncoderPos[5];
 8003e00:	4b0b      	ldr	r3, [pc, #44]	; (8003e30 <FuncO_ApplyPreset_Fast+0x184>)
 8003e02:	4a18      	ldr	r2, [pc, #96]	; (8003e64 <FuncO_ApplyPreset_Fast+0x1b8>)
 8003e04:	601a      	str	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8003e06:	2100      	movs	r1, #0
 8003e08:	480b      	ldr	r0, [pc, #44]	; (8003e38 <FuncO_ApplyPreset_Fast+0x18c>)
 8003e0a:	f004 fac3 	bl	8008394 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)aModdedDataTable, UNITIMPULSE_DATA_SIZE,  DAC_ALIGN_12B_R);
 8003e0e:	2300      	movs	r3, #0
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	2378      	movs	r3, #120	; 0x78
 8003e14:	4a09      	ldr	r2, [pc, #36]	; (8003e3c <FuncO_ApplyPreset_Fast+0x190>)
 8003e16:	2100      	movs	r1, #0
 8003e18:	4807      	ldr	r0, [pc, #28]	; (8003e38 <FuncO_ApplyPreset_Fast+0x18c>)
 8003e1a:	f004 f9f9 	bl	8008210 <HAL_DAC_Start_DMA>
			break;
 8003e1e:	bf00      	nop
	//
	}



}
 8003e20:	bf00      	nop
 8003e22:	3708      	adds	r7, #8
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	200001b0 	.word	0x200001b0
 8003e2c:	20001568 	.word	0x20001568
 8003e30:	200001ac 	.word	0x200001ac
 8003e34:	200001a0 	.word	0x200001a0
 8003e38:	200023ec 	.word	0x200023ec
 8003e3c:	20001f28 	.word	0x20001f28
 8003e40:	20001748 	.word	0x20001748
 8003e44:	200001a2 	.word	0x200001a2
 8003e48:	200011a8 	.word	0x200011a8
 8003e4c:	200001a4 	.word	0x200001a4
 8003e50:	20001388 	.word	0x20001388
 8003e54:	200001a6 	.word	0x200001a6
 8003e58:	20001928 	.word	0x20001928
 8003e5c:	200001a8 	.word	0x200001a8
 8003e60:	20001b08 	.word	0x20001b08
 8003e64:	200001aa 	.word	0x200001aa

08003e68 <FuncO_GetFPresetObject>:
 *	@param None
 *	@retval pointer to Func_Preset_Encoder_Pos_t struct
 *
 */
Func_Preset_Encoder_Pos_t * FuncO_GetFPresetObject()
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
	return pNewFuncPresetEncoderPos;
 8003e6c:	4b03      	ldr	r3, [pc, #12]	; (8003e7c <FuncO_GetFPresetObject+0x14>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	200001ac 	.word	0x200001ac

08003e80 <FuncO_GetFuncPresetEncoderRange>:
 *	@param None
 *	@retval uint8_t
 *
 */
uint8_t FuncO_GetFuncPresetEncoderRange()
{
 8003e80:	b480      	push	{r7}
 8003e82:	af00      	add	r7, sp, #0
	return FuncPresetEncoderRange;
 8003e84:	4b03      	ldr	r3, [pc, #12]	; (8003e94 <FuncO_GetFuncPresetEncoderRange+0x14>)
 8003e86:	781b      	ldrb	r3, [r3, #0]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	2000019c 	.word	0x2000019c

08003e98 <GO_ApplyPreset_Fast>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPreset_Fast(eOutput_gain pPresetEnum)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	71fb      	strb	r3, [r7, #7]



	switch(pPresetEnum)
 8003ea2:	79fb      	ldrb	r3, [r7, #7]
 8003ea4:	2b07      	cmp	r3, #7
 8003ea6:	f200 80ab 	bhi.w	8004000 <GO_ApplyPreset_Fast+0x168>
 8003eaa:	a201      	add	r2, pc, #4	; (adr r2, 8003eb0 <GO_ApplyPreset_Fast+0x18>)
 8003eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb0:	08003ed1 	.word	0x08003ed1
 8003eb4:	08003ef7 	.word	0x08003ef7
 8003eb8:	08003f1d 	.word	0x08003f1d
 8003ebc:	08003f43 	.word	0x08003f43
 8003ec0:	08003f69 	.word	0x08003f69
 8003ec4:	08003f8f 	.word	0x08003f8f
 8003ec8:	08003fb5 	.word	0x08003fb5
 8003ecc:	08003fdb 	.word	0x08003fdb
	{
		case ZERO_GAIN:
			pNewGainPresetEncoderPos = &aGainPresetEncoderPos[0];
 8003ed0:	4b4d      	ldr	r3, [pc, #308]	; (8004008 <GO_ApplyPreset_Fast+0x170>)
 8003ed2:	4a4e      	ldr	r2, [pc, #312]	; (800400c <GO_ApplyPreset_Fast+0x174>)
 8003ed4:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	2101      	movs	r1, #1
 8003eda:	484d      	ldr	r0, [pc, #308]	; (8004010 <GO_ApplyPreset_Fast+0x178>)
 8003edc:	f005 f986 	bl	80091ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	2120      	movs	r1, #32
 8003ee4:	484b      	ldr	r0, [pc, #300]	; (8004014 <GO_ApplyPreset_Fast+0x17c>)
 8003ee6:	f005 f981 	bl	80091ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8003eea:	2200      	movs	r2, #0
 8003eec:	2110      	movs	r1, #16
 8003eee:	4849      	ldr	r0, [pc, #292]	; (8004014 <GO_ApplyPreset_Fast+0x17c>)
 8003ef0:	f005 f97c 	bl	80091ec <HAL_GPIO_WritePin>
			break;
 8003ef4:	e084      	b.n	8004000 <GO_ApplyPreset_Fast+0x168>

		case ONE_GAIN:
			pNewGainPresetEncoderPos = &aGainPresetEncoderPos[1];
 8003ef6:	4b44      	ldr	r3, [pc, #272]	; (8004008 <GO_ApplyPreset_Fast+0x170>)
 8003ef8:	4a47      	ldr	r2, [pc, #284]	; (8004018 <GO_ApplyPreset_Fast+0x180>)
 8003efa:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8003efc:	2201      	movs	r2, #1
 8003efe:	2101      	movs	r1, #1
 8003f00:	4843      	ldr	r0, [pc, #268]	; (8004010 <GO_ApplyPreset_Fast+0x178>)
 8003f02:	f005 f973 	bl	80091ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8003f06:	2200      	movs	r2, #0
 8003f08:	2120      	movs	r1, #32
 8003f0a:	4842      	ldr	r0, [pc, #264]	; (8004014 <GO_ApplyPreset_Fast+0x17c>)
 8003f0c:	f005 f96e 	bl	80091ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8003f10:	2200      	movs	r2, #0
 8003f12:	2110      	movs	r1, #16
 8003f14:	483f      	ldr	r0, [pc, #252]	; (8004014 <GO_ApplyPreset_Fast+0x17c>)
 8003f16:	f005 f969 	bl	80091ec <HAL_GPIO_WritePin>
			break;
 8003f1a:	e071      	b.n	8004000 <GO_ApplyPreset_Fast+0x168>

		case TWO_GAIN:
			pNewGainPresetEncoderPos = &aGainPresetEncoderPos[2];
 8003f1c:	4b3a      	ldr	r3, [pc, #232]	; (8004008 <GO_ApplyPreset_Fast+0x170>)
 8003f1e:	4a3f      	ldr	r2, [pc, #252]	; (800401c <GO_ApplyPreset_Fast+0x184>)
 8003f20:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8003f22:	2200      	movs	r2, #0
 8003f24:	2101      	movs	r1, #1
 8003f26:	483a      	ldr	r0, [pc, #232]	; (8004010 <GO_ApplyPreset_Fast+0x178>)
 8003f28:	f005 f960 	bl	80091ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	2120      	movs	r1, #32
 8003f30:	4838      	ldr	r0, [pc, #224]	; (8004014 <GO_ApplyPreset_Fast+0x17c>)
 8003f32:	f005 f95b 	bl	80091ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8003f36:	2200      	movs	r2, #0
 8003f38:	2110      	movs	r1, #16
 8003f3a:	4836      	ldr	r0, [pc, #216]	; (8004014 <GO_ApplyPreset_Fast+0x17c>)
 8003f3c:	f005 f956 	bl	80091ec <HAL_GPIO_WritePin>
			break;
 8003f40:	e05e      	b.n	8004000 <GO_ApplyPreset_Fast+0x168>

		case THREE_GAIN:
			pNewGainPresetEncoderPos = &aGainPresetEncoderPos[3];
 8003f42:	4b31      	ldr	r3, [pc, #196]	; (8004008 <GO_ApplyPreset_Fast+0x170>)
 8003f44:	4a36      	ldr	r2, [pc, #216]	; (8004020 <GO_ApplyPreset_Fast+0x188>)
 8003f46:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8003f48:	2201      	movs	r2, #1
 8003f4a:	2101      	movs	r1, #1
 8003f4c:	4830      	ldr	r0, [pc, #192]	; (8004010 <GO_ApplyPreset_Fast+0x178>)
 8003f4e:	f005 f94d 	bl	80091ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8003f52:	2201      	movs	r2, #1
 8003f54:	2120      	movs	r1, #32
 8003f56:	482f      	ldr	r0, [pc, #188]	; (8004014 <GO_ApplyPreset_Fast+0x17c>)
 8003f58:	f005 f948 	bl	80091ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	2110      	movs	r1, #16
 8003f60:	482c      	ldr	r0, [pc, #176]	; (8004014 <GO_ApplyPreset_Fast+0x17c>)
 8003f62:	f005 f943 	bl	80091ec <HAL_GPIO_WritePin>
			break;
 8003f66:	e04b      	b.n	8004000 <GO_ApplyPreset_Fast+0x168>

		case FOUR_GAIN:
			pNewGainPresetEncoderPos = &aGainPresetEncoderPos[4];
 8003f68:	4b27      	ldr	r3, [pc, #156]	; (8004008 <GO_ApplyPreset_Fast+0x170>)
 8003f6a:	4a2e      	ldr	r2, [pc, #184]	; (8004024 <GO_ApplyPreset_Fast+0x18c>)
 8003f6c:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8003f6e:	2200      	movs	r2, #0
 8003f70:	2101      	movs	r1, #1
 8003f72:	4827      	ldr	r0, [pc, #156]	; (8004010 <GO_ApplyPreset_Fast+0x178>)
 8003f74:	f005 f93a 	bl	80091ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8003f78:	2200      	movs	r2, #0
 8003f7a:	2120      	movs	r1, #32
 8003f7c:	4825      	ldr	r0, [pc, #148]	; (8004014 <GO_ApplyPreset_Fast+0x17c>)
 8003f7e:	f005 f935 	bl	80091ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8003f82:	2201      	movs	r2, #1
 8003f84:	2110      	movs	r1, #16
 8003f86:	4823      	ldr	r0, [pc, #140]	; (8004014 <GO_ApplyPreset_Fast+0x17c>)
 8003f88:	f005 f930 	bl	80091ec <HAL_GPIO_WritePin>
			break;
 8003f8c:	e038      	b.n	8004000 <GO_ApplyPreset_Fast+0x168>

		case FIVE_GAIN:
			pNewGainPresetEncoderPos = &aGainPresetEncoderPos[5];
 8003f8e:	4b1e      	ldr	r3, [pc, #120]	; (8004008 <GO_ApplyPreset_Fast+0x170>)
 8003f90:	4a25      	ldr	r2, [pc, #148]	; (8004028 <GO_ApplyPreset_Fast+0x190>)
 8003f92:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8003f94:	2201      	movs	r2, #1
 8003f96:	2101      	movs	r1, #1
 8003f98:	481d      	ldr	r0, [pc, #116]	; (8004010 <GO_ApplyPreset_Fast+0x178>)
 8003f9a:	f005 f927 	bl	80091ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	2120      	movs	r1, #32
 8003fa2:	481c      	ldr	r0, [pc, #112]	; (8004014 <GO_ApplyPreset_Fast+0x17c>)
 8003fa4:	f005 f922 	bl	80091ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8003fa8:	2201      	movs	r2, #1
 8003faa:	2110      	movs	r1, #16
 8003fac:	4819      	ldr	r0, [pc, #100]	; (8004014 <GO_ApplyPreset_Fast+0x17c>)
 8003fae:	f005 f91d 	bl	80091ec <HAL_GPIO_WritePin>
			break;
 8003fb2:	e025      	b.n	8004000 <GO_ApplyPreset_Fast+0x168>

		case SIX_GAIN:
			pNewGainPresetEncoderPos = &aGainPresetEncoderPos[6];
 8003fb4:	4b14      	ldr	r3, [pc, #80]	; (8004008 <GO_ApplyPreset_Fast+0x170>)
 8003fb6:	4a1d      	ldr	r2, [pc, #116]	; (800402c <GO_ApplyPreset_Fast+0x194>)
 8003fb8:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8003fba:	2200      	movs	r2, #0
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	4814      	ldr	r0, [pc, #80]	; (8004010 <GO_ApplyPreset_Fast+0x178>)
 8003fc0:	f005 f914 	bl	80091ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	2120      	movs	r1, #32
 8003fc8:	4812      	ldr	r0, [pc, #72]	; (8004014 <GO_ApplyPreset_Fast+0x17c>)
 8003fca:	f005 f90f 	bl	80091ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8003fce:	2201      	movs	r2, #1
 8003fd0:	2110      	movs	r1, #16
 8003fd2:	4810      	ldr	r0, [pc, #64]	; (8004014 <GO_ApplyPreset_Fast+0x17c>)
 8003fd4:	f005 f90a 	bl	80091ec <HAL_GPIO_WritePin>
			break;
 8003fd8:	e012      	b.n	8004000 <GO_ApplyPreset_Fast+0x168>

		case SEVEN_GAIN:
			pNewGainPresetEncoderPos = &aGainPresetEncoderPos[7];
 8003fda:	4b0b      	ldr	r3, [pc, #44]	; (8004008 <GO_ApplyPreset_Fast+0x170>)
 8003fdc:	4a14      	ldr	r2, [pc, #80]	; (8004030 <GO_ApplyPreset_Fast+0x198>)
 8003fde:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	480a      	ldr	r0, [pc, #40]	; (8004010 <GO_ApplyPreset_Fast+0x178>)
 8003fe6:	f005 f901 	bl	80091ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8003fea:	2201      	movs	r2, #1
 8003fec:	2120      	movs	r1, #32
 8003fee:	4809      	ldr	r0, [pc, #36]	; (8004014 <GO_ApplyPreset_Fast+0x17c>)
 8003ff0:	f005 f8fc 	bl	80091ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	2110      	movs	r1, #16
 8003ff8:	4806      	ldr	r0, [pc, #24]	; (8004014 <GO_ApplyPreset_Fast+0x17c>)
 8003ffa:	f005 f8f7 	bl	80091ec <HAL_GPIO_WritePin>
			break;
 8003ffe:	bf00      	nop
	}
}
 8004000:	bf00      	nop
 8004002:	3708      	adds	r7, #8
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	200001cc 	.word	0x200001cc
 800400c:	200001b4 	.word	0x200001b4
 8004010:	48000400 	.word	0x48000400
 8004014:	48000800 	.word	0x48000800
 8004018:	200001b7 	.word	0x200001b7
 800401c:	200001ba 	.word	0x200001ba
 8004020:	200001bd 	.word	0x200001bd
 8004024:	200001c0 	.word	0x200001c0
 8004028:	200001c3 	.word	0x200001c3
 800402c:	200001c6 	.word	0x200001c6
 8004030:	200001c9 	.word	0x200001c9

08004034 <SM_GetEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t SM_GetEncoderValue(eEncoder_Direction direction)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	4603      	mov	r3, r0
 800403c:	71fb      	strb	r3, [r7, #7]
	if(direction)
 800403e:	79fb      	ldrb	r3, [r7, #7]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d008      	beq.n	8004056 <SM_GetEncoderValue+0x22>
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
 8004044:	4b08      	ldr	r3, [pc, #32]	; (8004068 <SM_GetEncoderValue+0x34>)
 8004046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004048:	b29a      	uxth	r2, r3
 800404a:	4b07      	ldr	r3, [pc, #28]	; (8004068 <SM_GetEncoderValue+0x34>)
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	b29b      	uxth	r3, r3
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	b29b      	uxth	r3, r3
 8004054:	e002      	b.n	800405c <SM_GetEncoderValue+0x28>
	}
	else
	{
		return ENCODER_TIMER->CNT;
 8004056:	4b04      	ldr	r3, [pc, #16]	; (8004068 <SM_GetEncoderValue+0x34>)
 8004058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405a:	b29b      	uxth	r3, r3
	}
}
 800405c:	4618      	mov	r0, r3
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr
 8004068:	40012c00 	.word	0x40012c00

0800406c <SM_GetOutputInHertz>:
 *	@param None
 *	@retval None
 *
 */
float SM_GetOutputInHertz()
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
	volatile float tim8_psc;
	volatile float tim8_arr;

	// safe-guard against divide by zero
	(TIM8->PSC == 0) ? (tim8_psc = 1) : (tim8_psc = TIM8->PSC);
 8004072:	4b1d      	ldr	r3, [pc, #116]	; (80040e8 <SM_GetOutputInHertz+0x7c>)
 8004074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004076:	2b00      	cmp	r3, #0
 8004078:	d103      	bne.n	8004082 <SM_GetOutputInHertz+0x16>
 800407a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800407e:	60bb      	str	r3, [r7, #8]
 8004080:	e007      	b.n	8004092 <SM_GetOutputInHertz+0x26>
 8004082:	4b19      	ldr	r3, [pc, #100]	; (80040e8 <SM_GetOutputInHertz+0x7c>)
 8004084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004086:	ee07 3a90 	vmov	s15, r3
 800408a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800408e:	edc7 7a02 	vstr	s15, [r7, #8]
	(TIM8->ARR == 0) ? (tim8_arr = 1) : (tim8_arr = TIM8->ARR);
 8004092:	4b15      	ldr	r3, [pc, #84]	; (80040e8 <SM_GetOutputInHertz+0x7c>)
 8004094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004096:	2b00      	cmp	r3, #0
 8004098:	d103      	bne.n	80040a2 <SM_GetOutputInHertz+0x36>
 800409a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800409e:	607b      	str	r3, [r7, #4]
 80040a0:	e007      	b.n	80040b2 <SM_GetOutputInHertz+0x46>
 80040a2:	4b11      	ldr	r3, [pc, #68]	; (80040e8 <SM_GetOutputInHertz+0x7c>)
 80040a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a6:	ee07 3a90 	vmov	s15, r3
 80040aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ae:	edc7 7a01 	vstr	s15, [r7, #4]

	float tim8_freq = SM_MCLK / (tim8_psc * tim8_arr);
 80040b2:	ed97 7a02 	vldr	s14, [r7, #8]
 80040b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80040ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040be:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80040ec <SM_GetOutputInHertz+0x80>
 80040c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040c6:	edc7 7a03 	vstr	s15, [r7, #12]


	return tim8_freq / SM_FSAMP;
 80040ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80040ce:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80040f0 <SM_GetOutputInHertz+0x84>
 80040d2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80040d6:	eef0 7a66 	vmov.f32	s15, s13
}
 80040da:	eeb0 0a67 	vmov.f32	s0, s15
 80040de:	3714      	adds	r7, #20
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	40013400 	.word	0x40013400
 80040ec:	4d2037a0 	.word	0x4d2037a0
 80040f0:	42f00000 	.word	0x42f00000

080040f4 <VPP_ApplyPreset_Fast>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyPreset_Fast(eVppPreset_t pPresetEnum)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	4603      	mov	r3, r0
 80040fc:	71fb      	strb	r3, [r7, #7]
    pSignalVppEncoderPreset = &aVppEncoderPresets[pPresetEnum];
 80040fe:	79fa      	ldrb	r2, [r7, #7]
 8004100:	4613      	mov	r3, r2
 8004102:	00db      	lsls	r3, r3, #3
 8004104:	1a9b      	subs	r3, r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4a0f      	ldr	r2, [pc, #60]	; (8004148 <VPP_ApplyPreset_Fast+0x54>)
 800410a:	4413      	add	r3, r2
 800410c:	4a0f      	ldr	r2, [pc, #60]	; (800414c <VPP_ApplyPreset_Fast+0x58>)
 800410e:	6013      	str	r3, [r2, #0]
    //GO_ApplyPreset_Fast((ONE_GAIN));

    // set the gain preset
    GO_ApplyPreset_Fast(pSignalVppEncoderPreset->gain_preset);
 8004110:	4b0e      	ldr	r3, [pc, #56]	; (800414c <VPP_ApplyPreset_Fast+0x58>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	7a1b      	ldrb	r3, [r3, #8]
 8004116:	4618      	mov	r0, r3
 8004118:	f7ff febe 	bl	8003e98 <GO_ApplyPreset_Fast>

    // set the amplitude
    _ProcessDataTable(pSignalVppEncoderPreset->neg_gain_coeff, pSignalVppEncoderPreset->vpp_offset , pSignalVppEncoderPreset->epos);
 800411c:	4b0b      	ldr	r3, [pc, #44]	; (800414c <VPP_ApplyPreset_Fast+0x58>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	edd3 7a04 	vldr	s15, [r3, #16]
 8004124:	4b09      	ldr	r3, [pc, #36]	; (800414c <VPP_ApplyPreset_Fast+0x58>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	ed93 7a05 	vldr	s14, [r3, #20]
 800412c:	4b07      	ldr	r3, [pc, #28]	; (800414c <VPP_ApplyPreset_Fast+0x58>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	8b1b      	ldrh	r3, [r3, #24]
 8004132:	4618      	mov	r0, r3
 8004134:	eef0 0a47 	vmov.f32	s1, s14
 8004138:	eeb0 0a67 	vmov.f32	s0, s15
 800413c:	f000 f808 	bl	8004150 <_ProcessDataTable>
}
 8004140:	bf00      	nop
 8004142:	3708      	adds	r7, #8
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	200001d0 	.word	0x200001d0
 800414c:	20000c88 	.word	0x20000c88

08004150 <_ProcessDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessDataTable(float _neg_gain_coeff, float vpp_offset, uint16_t _encoder_value)
{
 8004150:	b480      	push	{r7}
 8004152:	b089      	sub	sp, #36	; 0x24
 8004154:	af00      	add	r7, sp, #0
 8004156:	ed87 0a03 	vstr	s0, [r7, #12]
 800415a:	edc7 0a02 	vstr	s1, [r7, #8]
 800415e:	4603      	mov	r3, r0
 8004160:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8004162:	2300      	movs	r3, #0
 8004164:	61fb      	str	r3, [r7, #28]
 8004166:	e00c      	b.n	8004182 <_ProcessDataTable+0x32>
	{
		tmpDataTable[i] = pOriginalDataTable[i];
 8004168:	4b35      	ldr	r3, [pc, #212]	; (8004240 <_ProcessDataTable+0xf0>)
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4413      	add	r3, r2
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	4933      	ldr	r1, [pc, #204]	; (8004244 <_ProcessDataTable+0xf4>)
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	3301      	adds	r3, #1
 8004180:	61fb      	str	r3, [r7, #28]
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	2b77      	cmp	r3, #119	; 0x77
 8004186:	ddef      	ble.n	8004168 <_ProcessDataTable+0x18>
	}

	float pos_offset_coeff = 1;
 8004188:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800418c:	61bb      	str	r3, [r7, #24]
	if(_encoder_value)
 800418e:	88fb      	ldrh	r3, [r7, #6]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d008      	beq.n	80041a6 <_ProcessDataTable+0x56>
		pos_offset_coeff = (_encoder_value/4);
 8004194:	88fb      	ldrh	r3, [r7, #6]
 8004196:	089b      	lsrs	r3, r3, #2
 8004198:	b29b      	uxth	r3, r3
 800419a:	ee07 3a90 	vmov	s15, r3
 800419e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041a2:	edc7 7a06 	vstr	s15, [r7, #24]

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80041a6:	2300      	movs	r3, #0
 80041a8:	617b      	str	r3, [r7, #20]
 80041aa:	e02e      	b.n	800420a <_ProcessDataTable+0xba>
	{

		tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 80041ac:	4a25      	ldr	r2, [pc, #148]	; (8004244 <_ProcessDataTable+0xf4>)
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041b4:	ee07 3a90 	vmov	s15, r3
 80041b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80041c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041c8:	ee17 1a90 	vmov	r1, s15
 80041cc:	4a1d      	ldr	r2, [pc, #116]	; (8004244 <_ProcessDataTable+0xf4>)
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		tmpDataTable[i] = tmpDataTable[i] + (vpp_offset * pos_offset_coeff);
 80041d4:	4a1b      	ldr	r2, [pc, #108]	; (8004244 <_ProcessDataTable+0xf4>)
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041dc:	ee07 3a90 	vmov	s15, r3
 80041e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041e4:	edd7 6a02 	vldr	s13, [r7, #8]
 80041e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80041ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041f8:	ee17 1a90 	vmov	r1, s15
 80041fc:	4a11      	ldr	r2, [pc, #68]	; (8004244 <_ProcessDataTable+0xf4>)
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	3301      	adds	r3, #1
 8004208:	617b      	str	r3, [r7, #20]
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	2b77      	cmp	r3, #119	; 0x77
 800420e:	ddcd      	ble.n	80041ac <_ProcessDataTable+0x5c>
	}
	//HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8004210:	2300      	movs	r3, #0
 8004212:	613b      	str	r3, [r7, #16]
 8004214:	e00a      	b.n	800422c <_ProcessDataTable+0xdc>
	{
		aModdedDataTable[i] = tmpDataTable[i];
 8004216:	4a0b      	ldr	r2, [pc, #44]	; (8004244 <_ProcessDataTable+0xf4>)
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800421e:	490a      	ldr	r1, [pc, #40]	; (8004248 <_ProcessDataTable+0xf8>)
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	3301      	adds	r3, #1
 800422a:	613b      	str	r3, [r7, #16]
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	2b77      	cmp	r3, #119	; 0x77
 8004230:	ddf1      	ble.n	8004216 <_ProcessDataTable+0xc6>
	}
	//HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)aModdedDataTable, SINE_DATA_SIZE,  DAC_ALIGN_12B_R);
}
 8004232:	bf00      	nop
 8004234:	3724      	adds	r7, #36	; 0x24
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	200001b0 	.word	0x200001b0
 8004244:	20002108 	.word	0x20002108
 8004248:	20001f28 	.word	0x20001f28

0800424c <VPP_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ModifyOutput(uint16_t pEncoderValue)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	4603      	mov	r3, r0
 8004254:	80fb      	strh	r3, [r7, #6]
	switch(pEncoderValue)
 8004256:	88fb      	ldrh	r3, [r7, #6]
 8004258:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 800425c:	f200 849a 	bhi.w	8004b94 <VPP_ModifyOutput+0x948>
 8004260:	a201      	add	r2, pc, #4	; (adr r2, 8004268 <VPP_ModifyOutput+0x1c>)
 8004262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004266:	bf00      	nop
 8004268:	08004885 	.word	0x08004885
 800426c:	08004885 	.word	0x08004885
 8004270:	08004885 	.word	0x08004885
 8004274:	0800488d 	.word	0x0800488d
 8004278:	0800488d 	.word	0x0800488d
 800427c:	0800488d 	.word	0x0800488d
 8004280:	0800488d 	.word	0x0800488d
 8004284:	08004895 	.word	0x08004895
 8004288:	08004895 	.word	0x08004895
 800428c:	08004895 	.word	0x08004895
 8004290:	08004895 	.word	0x08004895
 8004294:	0800489d 	.word	0x0800489d
 8004298:	0800489d 	.word	0x0800489d
 800429c:	0800489d 	.word	0x0800489d
 80042a0:	0800489d 	.word	0x0800489d
 80042a4:	080048a5 	.word	0x080048a5
 80042a8:	080048a5 	.word	0x080048a5
 80042ac:	080048a5 	.word	0x080048a5
 80042b0:	080048a5 	.word	0x080048a5
 80042b4:	080048ad 	.word	0x080048ad
 80042b8:	080048ad 	.word	0x080048ad
 80042bc:	080048ad 	.word	0x080048ad
 80042c0:	080048ad 	.word	0x080048ad
 80042c4:	080048b5 	.word	0x080048b5
 80042c8:	080048b5 	.word	0x080048b5
 80042cc:	080048b5 	.word	0x080048b5
 80042d0:	080048b5 	.word	0x080048b5
 80042d4:	080048bd 	.word	0x080048bd
 80042d8:	080048bd 	.word	0x080048bd
 80042dc:	080048bd 	.word	0x080048bd
 80042e0:	080048bd 	.word	0x080048bd
 80042e4:	080048c5 	.word	0x080048c5
 80042e8:	080048c5 	.word	0x080048c5
 80042ec:	080048c5 	.word	0x080048c5
 80042f0:	080048c5 	.word	0x080048c5
 80042f4:	080048cd 	.word	0x080048cd
 80042f8:	080048cd 	.word	0x080048cd
 80042fc:	080048cd 	.word	0x080048cd
 8004300:	080048cd 	.word	0x080048cd
 8004304:	080048d5 	.word	0x080048d5
 8004308:	080048d5 	.word	0x080048d5
 800430c:	080048d5 	.word	0x080048d5
 8004310:	080048d5 	.word	0x080048d5
 8004314:	080048dd 	.word	0x080048dd
 8004318:	080048dd 	.word	0x080048dd
 800431c:	080048dd 	.word	0x080048dd
 8004320:	080048dd 	.word	0x080048dd
 8004324:	080048e5 	.word	0x080048e5
 8004328:	080048e5 	.word	0x080048e5
 800432c:	080048e5 	.word	0x080048e5
 8004330:	080048e5 	.word	0x080048e5
 8004334:	080048ed 	.word	0x080048ed
 8004338:	080048ed 	.word	0x080048ed
 800433c:	080048ed 	.word	0x080048ed
 8004340:	080048ed 	.word	0x080048ed
 8004344:	080048f5 	.word	0x080048f5
 8004348:	080048f5 	.word	0x080048f5
 800434c:	080048f5 	.word	0x080048f5
 8004350:	080048f5 	.word	0x080048f5
 8004354:	080048fd 	.word	0x080048fd
 8004358:	080048fd 	.word	0x080048fd
 800435c:	080048fd 	.word	0x080048fd
 8004360:	080048fd 	.word	0x080048fd
 8004364:	08004905 	.word	0x08004905
 8004368:	08004905 	.word	0x08004905
 800436c:	08004905 	.word	0x08004905
 8004370:	08004905 	.word	0x08004905
 8004374:	0800490d 	.word	0x0800490d
 8004378:	0800490d 	.word	0x0800490d
 800437c:	0800490d 	.word	0x0800490d
 8004380:	0800490d 	.word	0x0800490d
 8004384:	08004915 	.word	0x08004915
 8004388:	08004915 	.word	0x08004915
 800438c:	08004915 	.word	0x08004915
 8004390:	08004915 	.word	0x08004915
 8004394:	0800491d 	.word	0x0800491d
 8004398:	0800491d 	.word	0x0800491d
 800439c:	0800491d 	.word	0x0800491d
 80043a0:	0800491d 	.word	0x0800491d
 80043a4:	08004925 	.word	0x08004925
 80043a8:	08004925 	.word	0x08004925
 80043ac:	08004925 	.word	0x08004925
 80043b0:	08004925 	.word	0x08004925
 80043b4:	0800492d 	.word	0x0800492d
 80043b8:	0800492d 	.word	0x0800492d
 80043bc:	0800492d 	.word	0x0800492d
 80043c0:	0800492d 	.word	0x0800492d
 80043c4:	08004935 	.word	0x08004935
 80043c8:	08004935 	.word	0x08004935
 80043cc:	08004935 	.word	0x08004935
 80043d0:	08004935 	.word	0x08004935
 80043d4:	0800493d 	.word	0x0800493d
 80043d8:	0800493d 	.word	0x0800493d
 80043dc:	0800493d 	.word	0x0800493d
 80043e0:	0800493d 	.word	0x0800493d
 80043e4:	08004945 	.word	0x08004945
 80043e8:	08004945 	.word	0x08004945
 80043ec:	08004945 	.word	0x08004945
 80043f0:	08004945 	.word	0x08004945
 80043f4:	0800494d 	.word	0x0800494d
 80043f8:	0800494d 	.word	0x0800494d
 80043fc:	0800494d 	.word	0x0800494d
 8004400:	0800494d 	.word	0x0800494d
 8004404:	08004955 	.word	0x08004955
 8004408:	08004955 	.word	0x08004955
 800440c:	08004955 	.word	0x08004955
 8004410:	08004955 	.word	0x08004955
 8004414:	0800495d 	.word	0x0800495d
 8004418:	0800495d 	.word	0x0800495d
 800441c:	0800495d 	.word	0x0800495d
 8004420:	0800495d 	.word	0x0800495d
 8004424:	08004965 	.word	0x08004965
 8004428:	08004965 	.word	0x08004965
 800442c:	08004965 	.word	0x08004965
 8004430:	08004965 	.word	0x08004965
 8004434:	0800496d 	.word	0x0800496d
 8004438:	0800496d 	.word	0x0800496d
 800443c:	0800496d 	.word	0x0800496d
 8004440:	0800496d 	.word	0x0800496d
 8004444:	08004975 	.word	0x08004975
 8004448:	08004975 	.word	0x08004975
 800444c:	08004975 	.word	0x08004975
 8004450:	08004975 	.word	0x08004975
 8004454:	0800497d 	.word	0x0800497d
 8004458:	0800497d 	.word	0x0800497d
 800445c:	0800497d 	.word	0x0800497d
 8004460:	0800497d 	.word	0x0800497d
 8004464:	08004985 	.word	0x08004985
 8004468:	08004985 	.word	0x08004985
 800446c:	08004985 	.word	0x08004985
 8004470:	08004985 	.word	0x08004985
 8004474:	0800498d 	.word	0x0800498d
 8004478:	0800498d 	.word	0x0800498d
 800447c:	0800498d 	.word	0x0800498d
 8004480:	0800498d 	.word	0x0800498d
 8004484:	08004995 	.word	0x08004995
 8004488:	08004995 	.word	0x08004995
 800448c:	08004995 	.word	0x08004995
 8004490:	08004995 	.word	0x08004995
 8004494:	0800499d 	.word	0x0800499d
 8004498:	0800499d 	.word	0x0800499d
 800449c:	0800499d 	.word	0x0800499d
 80044a0:	0800499d 	.word	0x0800499d
 80044a4:	080049a5 	.word	0x080049a5
 80044a8:	080049a5 	.word	0x080049a5
 80044ac:	080049a5 	.word	0x080049a5
 80044b0:	080049a5 	.word	0x080049a5
 80044b4:	080049ad 	.word	0x080049ad
 80044b8:	080049ad 	.word	0x080049ad
 80044bc:	080049ad 	.word	0x080049ad
 80044c0:	080049ad 	.word	0x080049ad
 80044c4:	080049b5 	.word	0x080049b5
 80044c8:	080049b5 	.word	0x080049b5
 80044cc:	080049b5 	.word	0x080049b5
 80044d0:	080049b5 	.word	0x080049b5
 80044d4:	080049bd 	.word	0x080049bd
 80044d8:	080049bd 	.word	0x080049bd
 80044dc:	080049bd 	.word	0x080049bd
 80044e0:	080049bd 	.word	0x080049bd
 80044e4:	080049c5 	.word	0x080049c5
 80044e8:	080049c5 	.word	0x080049c5
 80044ec:	080049c5 	.word	0x080049c5
 80044f0:	080049c5 	.word	0x080049c5
 80044f4:	080049cd 	.word	0x080049cd
 80044f8:	080049cd 	.word	0x080049cd
 80044fc:	080049cd 	.word	0x080049cd
 8004500:	080049cd 	.word	0x080049cd
 8004504:	080049d5 	.word	0x080049d5
 8004508:	080049d5 	.word	0x080049d5
 800450c:	080049d5 	.word	0x080049d5
 8004510:	080049d5 	.word	0x080049d5
 8004514:	080049dd 	.word	0x080049dd
 8004518:	080049dd 	.word	0x080049dd
 800451c:	080049dd 	.word	0x080049dd
 8004520:	080049dd 	.word	0x080049dd
 8004524:	080049e5 	.word	0x080049e5
 8004528:	080049e5 	.word	0x080049e5
 800452c:	080049e5 	.word	0x080049e5
 8004530:	080049e5 	.word	0x080049e5
 8004534:	080049ed 	.word	0x080049ed
 8004538:	080049ed 	.word	0x080049ed
 800453c:	080049ed 	.word	0x080049ed
 8004540:	080049ed 	.word	0x080049ed
 8004544:	080049f5 	.word	0x080049f5
 8004548:	080049f5 	.word	0x080049f5
 800454c:	080049f5 	.word	0x080049f5
 8004550:	080049f5 	.word	0x080049f5
 8004554:	080049fd 	.word	0x080049fd
 8004558:	080049fd 	.word	0x080049fd
 800455c:	080049fd 	.word	0x080049fd
 8004560:	080049fd 	.word	0x080049fd
 8004564:	08004a05 	.word	0x08004a05
 8004568:	08004a05 	.word	0x08004a05
 800456c:	08004a05 	.word	0x08004a05
 8004570:	08004a05 	.word	0x08004a05
 8004574:	08004a0d 	.word	0x08004a0d
 8004578:	08004a0d 	.word	0x08004a0d
 800457c:	08004a0d 	.word	0x08004a0d
 8004580:	08004a0d 	.word	0x08004a0d
 8004584:	08004a15 	.word	0x08004a15
 8004588:	08004a15 	.word	0x08004a15
 800458c:	08004a15 	.word	0x08004a15
 8004590:	08004a15 	.word	0x08004a15
 8004594:	08004a1d 	.word	0x08004a1d
 8004598:	08004a1d 	.word	0x08004a1d
 800459c:	08004a1d 	.word	0x08004a1d
 80045a0:	08004a1d 	.word	0x08004a1d
 80045a4:	08004a25 	.word	0x08004a25
 80045a8:	08004a25 	.word	0x08004a25
 80045ac:	08004a25 	.word	0x08004a25
 80045b0:	08004a25 	.word	0x08004a25
 80045b4:	08004a2d 	.word	0x08004a2d
 80045b8:	08004a2d 	.word	0x08004a2d
 80045bc:	08004a2d 	.word	0x08004a2d
 80045c0:	08004a2d 	.word	0x08004a2d
 80045c4:	08004a35 	.word	0x08004a35
 80045c8:	08004a35 	.word	0x08004a35
 80045cc:	08004a35 	.word	0x08004a35
 80045d0:	08004a35 	.word	0x08004a35
 80045d4:	08004a3d 	.word	0x08004a3d
 80045d8:	08004a3d 	.word	0x08004a3d
 80045dc:	08004a3d 	.word	0x08004a3d
 80045e0:	08004a3d 	.word	0x08004a3d
 80045e4:	08004a45 	.word	0x08004a45
 80045e8:	08004a45 	.word	0x08004a45
 80045ec:	08004a45 	.word	0x08004a45
 80045f0:	08004a45 	.word	0x08004a45
 80045f4:	08004a4d 	.word	0x08004a4d
 80045f8:	08004a4d 	.word	0x08004a4d
 80045fc:	08004a4d 	.word	0x08004a4d
 8004600:	08004a4d 	.word	0x08004a4d
 8004604:	08004a55 	.word	0x08004a55
 8004608:	08004a55 	.word	0x08004a55
 800460c:	08004a55 	.word	0x08004a55
 8004610:	08004a55 	.word	0x08004a55
 8004614:	08004a5d 	.word	0x08004a5d
 8004618:	08004a5d 	.word	0x08004a5d
 800461c:	08004a5d 	.word	0x08004a5d
 8004620:	08004a5d 	.word	0x08004a5d
 8004624:	08004a65 	.word	0x08004a65
 8004628:	08004a65 	.word	0x08004a65
 800462c:	08004a65 	.word	0x08004a65
 8004630:	08004a65 	.word	0x08004a65
 8004634:	08004a6d 	.word	0x08004a6d
 8004638:	08004a6d 	.word	0x08004a6d
 800463c:	08004a6d 	.word	0x08004a6d
 8004640:	08004a6d 	.word	0x08004a6d
 8004644:	08004a75 	.word	0x08004a75
 8004648:	08004a75 	.word	0x08004a75
 800464c:	08004a75 	.word	0x08004a75
 8004650:	08004a75 	.word	0x08004a75
 8004654:	08004a7d 	.word	0x08004a7d
 8004658:	08004a7d 	.word	0x08004a7d
 800465c:	08004a7d 	.word	0x08004a7d
 8004660:	08004a7d 	.word	0x08004a7d
 8004664:	08004a85 	.word	0x08004a85
 8004668:	08004a85 	.word	0x08004a85
 800466c:	08004a85 	.word	0x08004a85
 8004670:	08004a85 	.word	0x08004a85
 8004674:	08004a8d 	.word	0x08004a8d
 8004678:	08004a8d 	.word	0x08004a8d
 800467c:	08004a8d 	.word	0x08004a8d
 8004680:	08004a8d 	.word	0x08004a8d
 8004684:	08004a95 	.word	0x08004a95
 8004688:	08004a95 	.word	0x08004a95
 800468c:	08004a95 	.word	0x08004a95
 8004690:	08004a95 	.word	0x08004a95
 8004694:	08004a9d 	.word	0x08004a9d
 8004698:	08004a9d 	.word	0x08004a9d
 800469c:	08004a9d 	.word	0x08004a9d
 80046a0:	08004a9d 	.word	0x08004a9d
 80046a4:	08004aa5 	.word	0x08004aa5
 80046a8:	08004aa5 	.word	0x08004aa5
 80046ac:	08004aa5 	.word	0x08004aa5
 80046b0:	08004aa5 	.word	0x08004aa5
 80046b4:	08004aad 	.word	0x08004aad
 80046b8:	08004aad 	.word	0x08004aad
 80046bc:	08004aad 	.word	0x08004aad
 80046c0:	08004aad 	.word	0x08004aad
 80046c4:	08004ab5 	.word	0x08004ab5
 80046c8:	08004ab5 	.word	0x08004ab5
 80046cc:	08004ab5 	.word	0x08004ab5
 80046d0:	08004ab5 	.word	0x08004ab5
 80046d4:	08004abd 	.word	0x08004abd
 80046d8:	08004abd 	.word	0x08004abd
 80046dc:	08004abd 	.word	0x08004abd
 80046e0:	08004abd 	.word	0x08004abd
 80046e4:	08004ac5 	.word	0x08004ac5
 80046e8:	08004ac5 	.word	0x08004ac5
 80046ec:	08004ac5 	.word	0x08004ac5
 80046f0:	08004ac5 	.word	0x08004ac5
 80046f4:	08004acd 	.word	0x08004acd
 80046f8:	08004acd 	.word	0x08004acd
 80046fc:	08004acd 	.word	0x08004acd
 8004700:	08004acd 	.word	0x08004acd
 8004704:	08004ad5 	.word	0x08004ad5
 8004708:	08004ad5 	.word	0x08004ad5
 800470c:	08004ad5 	.word	0x08004ad5
 8004710:	08004ad5 	.word	0x08004ad5
 8004714:	08004add 	.word	0x08004add
 8004718:	08004add 	.word	0x08004add
 800471c:	08004add 	.word	0x08004add
 8004720:	08004add 	.word	0x08004add
 8004724:	08004ae5 	.word	0x08004ae5
 8004728:	08004ae5 	.word	0x08004ae5
 800472c:	08004ae5 	.word	0x08004ae5
 8004730:	08004ae5 	.word	0x08004ae5
 8004734:	08004aed 	.word	0x08004aed
 8004738:	08004aed 	.word	0x08004aed
 800473c:	08004aed 	.word	0x08004aed
 8004740:	08004aed 	.word	0x08004aed
 8004744:	08004af5 	.word	0x08004af5
 8004748:	08004af5 	.word	0x08004af5
 800474c:	08004af5 	.word	0x08004af5
 8004750:	08004af5 	.word	0x08004af5
 8004754:	08004afd 	.word	0x08004afd
 8004758:	08004afd 	.word	0x08004afd
 800475c:	08004afd 	.word	0x08004afd
 8004760:	08004afd 	.word	0x08004afd
 8004764:	08004b05 	.word	0x08004b05
 8004768:	08004b05 	.word	0x08004b05
 800476c:	08004b05 	.word	0x08004b05
 8004770:	08004b05 	.word	0x08004b05
 8004774:	08004b0d 	.word	0x08004b0d
 8004778:	08004b0d 	.word	0x08004b0d
 800477c:	08004b0d 	.word	0x08004b0d
 8004780:	08004b0d 	.word	0x08004b0d
 8004784:	08004b15 	.word	0x08004b15
 8004788:	08004b15 	.word	0x08004b15
 800478c:	08004b15 	.word	0x08004b15
 8004790:	08004b15 	.word	0x08004b15
 8004794:	08004b1d 	.word	0x08004b1d
 8004798:	08004b1d 	.word	0x08004b1d
 800479c:	08004b1d 	.word	0x08004b1d
 80047a0:	08004b1d 	.word	0x08004b1d
 80047a4:	08004b25 	.word	0x08004b25
 80047a8:	08004b25 	.word	0x08004b25
 80047ac:	08004b25 	.word	0x08004b25
 80047b0:	08004b25 	.word	0x08004b25
 80047b4:	08004b2d 	.word	0x08004b2d
 80047b8:	08004b2d 	.word	0x08004b2d
 80047bc:	08004b2d 	.word	0x08004b2d
 80047c0:	08004b2d 	.word	0x08004b2d
 80047c4:	08004b35 	.word	0x08004b35
 80047c8:	08004b35 	.word	0x08004b35
 80047cc:	08004b35 	.word	0x08004b35
 80047d0:	08004b35 	.word	0x08004b35
 80047d4:	08004b3d 	.word	0x08004b3d
 80047d8:	08004b3d 	.word	0x08004b3d
 80047dc:	08004b3d 	.word	0x08004b3d
 80047e0:	08004b3d 	.word	0x08004b3d
 80047e4:	08004b45 	.word	0x08004b45
 80047e8:	08004b45 	.word	0x08004b45
 80047ec:	08004b45 	.word	0x08004b45
 80047f0:	08004b45 	.word	0x08004b45
 80047f4:	08004b4d 	.word	0x08004b4d
 80047f8:	08004b4d 	.word	0x08004b4d
 80047fc:	08004b4d 	.word	0x08004b4d
 8004800:	08004b4d 	.word	0x08004b4d
 8004804:	08004b55 	.word	0x08004b55
 8004808:	08004b55 	.word	0x08004b55
 800480c:	08004b55 	.word	0x08004b55
 8004810:	08004b55 	.word	0x08004b55
 8004814:	08004b5d 	.word	0x08004b5d
 8004818:	08004b5d 	.word	0x08004b5d
 800481c:	08004b5d 	.word	0x08004b5d
 8004820:	08004b5d 	.word	0x08004b5d
 8004824:	08004b65 	.word	0x08004b65
 8004828:	08004b65 	.word	0x08004b65
 800482c:	08004b65 	.word	0x08004b65
 8004830:	08004b65 	.word	0x08004b65
 8004834:	08004b6d 	.word	0x08004b6d
 8004838:	08004b6d 	.word	0x08004b6d
 800483c:	08004b6d 	.word	0x08004b6d
 8004840:	08004b6d 	.word	0x08004b6d
 8004844:	08004b75 	.word	0x08004b75
 8004848:	08004b75 	.word	0x08004b75
 800484c:	08004b75 	.word	0x08004b75
 8004850:	08004b75 	.word	0x08004b75
 8004854:	08004b7d 	.word	0x08004b7d
 8004858:	08004b7d 	.word	0x08004b7d
 800485c:	08004b7d 	.word	0x08004b7d
 8004860:	08004b7d 	.word	0x08004b7d
 8004864:	08004b85 	.word	0x08004b85
 8004868:	08004b85 	.word	0x08004b85
 800486c:	08004b85 	.word	0x08004b85
 8004870:	08004b85 	.word	0x08004b85
 8004874:	08004b8d 	.word	0x08004b8d
 8004878:	08004b8d 	.word	0x08004b8d
 800487c:	08004b8d 	.word	0x08004b8d
 8004880:	08004b8d 	.word	0x08004b8d
	{
		case 0	:
		case 1	:
		case 2	:
			VPP_ApplyPreset_Fast( VPP01 );
 8004884:	2000      	movs	r0, #0
 8004886:	f7ff fc35 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 800488a:	e184      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 3	:
		case 4	:
		case 5	:
		case 6	:
			VPP_ApplyPreset_Fast( VPP02	);
 800488c:	2001      	movs	r0, #1
 800488e:	f7ff fc31 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004892:	e180      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 7	:
		case 8	:
		case 9	:
		case 10	:
			VPP_ApplyPreset_Fast( VPP03	);
 8004894:	2002      	movs	r0, #2
 8004896:	f7ff fc2d 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 800489a:	e17c      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 11	:
		case 12	:
		case 13	:
		case 14	:
			VPP_ApplyPreset_Fast( VPP04	);
 800489c:	2003      	movs	r0, #3
 800489e:	f7ff fc29 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 80048a2:	e178      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 15	:
		case 16	:
		case 17	:
		case 18	:
			VPP_ApplyPreset_Fast( VPP05	);
 80048a4:	2004      	movs	r0, #4
 80048a6:	f7ff fc25 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 80048aa:	e174      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 19	:
		case 20	:
		case 21	:
		case 22	:
			VPP_ApplyPreset_Fast( VPP06	);
 80048ac:	2005      	movs	r0, #5
 80048ae:	f7ff fc21 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 80048b2:	e170      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 23	:
		case 24	:
		case 25	:
		case 26	:
			VPP_ApplyPreset_Fast( VPP07	);
 80048b4:	2006      	movs	r0, #6
 80048b6:	f7ff fc1d 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 80048ba:	e16c      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 27	:
		case 28	:
		case 29	:
		case 30	:
			VPP_ApplyPreset_Fast( VPP08	);
 80048bc:	2007      	movs	r0, #7
 80048be:	f7ff fc19 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 80048c2:	e168      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 31	:
		case 32	:
		case 33	:
		case 34	:
			VPP_ApplyPreset_Fast( VPP09	);
 80048c4:	2008      	movs	r0, #8
 80048c6:	f7ff fc15 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 80048ca:	e164      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 35	:
		case 36	:
		case 37	:
		case 38	:
			VPP_ApplyPreset_Fast( VPP10	);
 80048cc:	2009      	movs	r0, #9
 80048ce:	f7ff fc11 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 80048d2:	e160      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 39	:
		case 40	:
		case 41	:
		case 42	:
			VPP_ApplyPreset_Fast( VPP11	);
 80048d4:	200a      	movs	r0, #10
 80048d6:	f7ff fc0d 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 80048da:	e15c      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 43	:
		case 44	:
		case 45	:
		case 46	:
			VPP_ApplyPreset_Fast( VPP12	);
 80048dc:	200b      	movs	r0, #11
 80048de:	f7ff fc09 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 80048e2:	e158      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 47	:
		case 48	:
		case 49	:
		case 50	:
			VPP_ApplyPreset_Fast( VPP13	);
 80048e4:	200c      	movs	r0, #12
 80048e6:	f7ff fc05 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 80048ea:	e154      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 51	:
		case 52	:
		case 53	:
		case 54	:
			VPP_ApplyPreset_Fast( VPP14	);
 80048ec:	200d      	movs	r0, #13
 80048ee:	f7ff fc01 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 80048f2:	e150      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 55	:
		case 56	:
		case 57	:
		case 58	:
			VPP_ApplyPreset_Fast( VPP15	);
 80048f4:	200e      	movs	r0, #14
 80048f6:	f7ff fbfd 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 80048fa:	e14c      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 59	:
		case 60	:
		case 61	:
		case 62	:
			VPP_ApplyPreset_Fast( VPP16	);
 80048fc:	200f      	movs	r0, #15
 80048fe:	f7ff fbf9 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004902:	e148      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 63	:
		case 64	:
		case 65	:
		case 66	:
			VPP_ApplyPreset_Fast( VPP17	);
 8004904:	2010      	movs	r0, #16
 8004906:	f7ff fbf5 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 800490a:	e144      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 67	:
		case 68	:
		case 69	:
		case 70	:
			VPP_ApplyPreset_Fast( VPP18	);
 800490c:	2011      	movs	r0, #17
 800490e:	f7ff fbf1 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004912:	e140      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 71	:
		case 72	:
		case 73	:
		case 74	:
			VPP_ApplyPreset_Fast( VPP19	);
 8004914:	2012      	movs	r0, #18
 8004916:	f7ff fbed 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 800491a:	e13c      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 75	:
		case 76	:
		case 77	:
		case 78	:
			VPP_ApplyPreset_Fast( VPP20	);
 800491c:	2013      	movs	r0, #19
 800491e:	f7ff fbe9 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004922:	e138      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 79	:
		case 80	:
		case 81	:
		case 82	:
			VPP_ApplyPreset_Fast( VPP21	);
 8004924:	2014      	movs	r0, #20
 8004926:	f7ff fbe5 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 800492a:	e134      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 83	:
		case 84	:
		case 85	:
		case 86	:
			VPP_ApplyPreset_Fast( VPP22	);
 800492c:	2015      	movs	r0, #21
 800492e:	f7ff fbe1 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004932:	e130      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 87	:
		case 88	:
		case 89	:
		case 90	:
			VPP_ApplyPreset_Fast( VPP23	);
 8004934:	2016      	movs	r0, #22
 8004936:	f7ff fbdd 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 800493a:	e12c      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 91	:
		case 92	:
		case 93	:
		case 94	:
			VPP_ApplyPreset_Fast( VPP24	);
 800493c:	2017      	movs	r0, #23
 800493e:	f7ff fbd9 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004942:	e128      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 95	:
		case 96	:
		case 97	:
		case 98	:
			VPP_ApplyPreset_Fast( VPP25	);
 8004944:	2018      	movs	r0, #24
 8004946:	f7ff fbd5 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 800494a:	e124      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 99		:
		case 100	:
		case 101	:
		case 102	:
			VPP_ApplyPreset_Fast( VPP26	);
 800494c:	2019      	movs	r0, #25
 800494e:	f7ff fbd1 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004952:	e120      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 103	:
		case 104	:
		case 105	:
		case 106	:
			VPP_ApplyPreset_Fast( VPP27	);
 8004954:	201a      	movs	r0, #26
 8004956:	f7ff fbcd 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 800495a:	e11c      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 107	:
		case 108	:
		case 109	:
		case 110	:
			VPP_ApplyPreset_Fast( VPP28	);
 800495c:	201b      	movs	r0, #27
 800495e:	f7ff fbc9 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004962:	e118      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 111	:
		case 112	:
		case 113	:
		case 114	:
			VPP_ApplyPreset_Fast( VPP29	);
 8004964:	201c      	movs	r0, #28
 8004966:	f7ff fbc5 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 800496a:	e114      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 115	:
		case 116	:
		case 117	:
		case 118	:
			VPP_ApplyPreset_Fast( VPP30	);
 800496c:	201d      	movs	r0, #29
 800496e:	f7ff fbc1 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004972:	e110      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 119	:
		case 120	:
		case 121	:
		case 122	:
			VPP_ApplyPreset_Fast( VPP31	);
 8004974:	201e      	movs	r0, #30
 8004976:	f7ff fbbd 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 800497a:	e10c      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 123	:
		case 124	:
		case 125	:
		case 126	:
			VPP_ApplyPreset_Fast( VPP32	);
 800497c:	201f      	movs	r0, #31
 800497e:	f7ff fbb9 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004982:	e108      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 127	:
		case 128	:
		case 129	:
		case 130	:
			VPP_ApplyPreset_Fast( VPP33	);
 8004984:	2020      	movs	r0, #32
 8004986:	f7ff fbb5 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 800498a:	e104      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 131	:
		case 132	:
		case 133	:
		case 134	:
			VPP_ApplyPreset_Fast( VPP34	);
 800498c:	2021      	movs	r0, #33	; 0x21
 800498e:	f7ff fbb1 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004992:	e100      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 135	:
		case 136	:
		case 137	:
		case 138	:
			VPP_ApplyPreset_Fast( VPP35	);
 8004994:	2022      	movs	r0, #34	; 0x22
 8004996:	f7ff fbad 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 800499a:	e0fc      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 139	:
		case 140	:
		case 141	:
		case 142	:
			VPP_ApplyPreset_Fast( VPP36	);
 800499c:	2023      	movs	r0, #35	; 0x23
 800499e:	f7ff fba9 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 80049a2:	e0f8      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 143	:
		case 144	:
		case 145	:
		case 146	:
			VPP_ApplyPreset_Fast( VPP37	);
 80049a4:	2024      	movs	r0, #36	; 0x24
 80049a6:	f7ff fba5 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 80049aa:	e0f4      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 147	:
		case 148	:
		case 149	:
		case 150	:
			VPP_ApplyPreset_Fast( VPP38	);
 80049ac:	2025      	movs	r0, #37	; 0x25
 80049ae:	f7ff fba1 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 80049b2:	e0f0      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 151	:
		case 152	:
		case 153	:
		case 154	:
			VPP_ApplyPreset_Fast( VPP39	);
 80049b4:	2026      	movs	r0, #38	; 0x26
 80049b6:	f7ff fb9d 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 80049ba:	e0ec      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 155	:
		case 156	:
		case 157	:
		case 158	:
			VPP_ApplyPreset_Fast( VPP40	);
 80049bc:	2027      	movs	r0, #39	; 0x27
 80049be:	f7ff fb99 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 80049c2:	e0e8      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 159	:
		case 160	:
		case 161	:
		case 162	:
			VPP_ApplyPreset_Fast( VPP41	);
 80049c4:	2028      	movs	r0, #40	; 0x28
 80049c6:	f7ff fb95 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 80049ca:	e0e4      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 163	:
		case 164	:
		case 165	:
		case 166	:
			VPP_ApplyPreset_Fast( VPP42	);
 80049cc:	2029      	movs	r0, #41	; 0x29
 80049ce:	f7ff fb91 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 80049d2:	e0e0      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 167	:
		case 168	:
		case 169	:
		case 170	:
			VPP_ApplyPreset_Fast( VPP43	);
 80049d4:	202a      	movs	r0, #42	; 0x2a
 80049d6:	f7ff fb8d 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 80049da:	e0dc      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 171	:
		case 172	:
		case 173	:
		case 174	:
			VPP_ApplyPreset_Fast( VPP44	);
 80049dc:	202b      	movs	r0, #43	; 0x2b
 80049de:	f7ff fb89 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 80049e2:	e0d8      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 175	:
		case 176	:
		case 177	:
		case 178	:
			VPP_ApplyPreset_Fast( VPP45	);
 80049e4:	202c      	movs	r0, #44	; 0x2c
 80049e6:	f7ff fb85 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 80049ea:	e0d4      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 179	:
		case 180	:
		case 181	:
		case 182	:
			VPP_ApplyPreset_Fast( VPP46	);
 80049ec:	202d      	movs	r0, #45	; 0x2d
 80049ee:	f7ff fb81 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 80049f2:	e0d0      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 183	:
		case 184	:
		case 185	:
		case 186	:
			VPP_ApplyPreset_Fast( VPP47	);
 80049f4:	202e      	movs	r0, #46	; 0x2e
 80049f6:	f7ff fb7d 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 80049fa:	e0cc      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 187	:
		case 188	:
		case 189	:
		case 190	:
			VPP_ApplyPreset_Fast( VPP48	);
 80049fc:	202f      	movs	r0, #47	; 0x2f
 80049fe:	f7ff fb79 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004a02:	e0c8      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 191	:
		case 192	:
		case 193	:
		case 194	:
			VPP_ApplyPreset_Fast( VPP49	);
 8004a04:	2030      	movs	r0, #48	; 0x30
 8004a06:	f7ff fb75 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004a0a:	e0c4      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 195	:
		case 196	:
		case 197	:
		case 198	:
			VPP_ApplyPreset_Fast( VPP50	);
 8004a0c:	2031      	movs	r0, #49	; 0x31
 8004a0e:	f7ff fb71 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004a12:	e0c0      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 199	:
		case 200	:
		case 201	:
		case 202	:
			VPP_ApplyPreset_Fast( VPP51	);
 8004a14:	2032      	movs	r0, #50	; 0x32
 8004a16:	f7ff fb6d 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004a1a:	e0bc      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 203	:
		case 204	:
		case 205	:
		case 206	:
			VPP_ApplyPreset_Fast( VPP52	);
 8004a1c:	2033      	movs	r0, #51	; 0x33
 8004a1e:	f7ff fb69 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004a22:	e0b8      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 207	:
		case 208	:
		case 209	:
		case 210	:
			VPP_ApplyPreset_Fast( VPP53	);
 8004a24:	2034      	movs	r0, #52	; 0x34
 8004a26:	f7ff fb65 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004a2a:	e0b4      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 211	:
		case 212	:
		case 213	:
		case 214	:
			VPP_ApplyPreset_Fast( VPP54	);
 8004a2c:	2035      	movs	r0, #53	; 0x35
 8004a2e:	f7ff fb61 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004a32:	e0b0      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 215	:
		case 216	:
		case 217	:
		case 218	:
			VPP_ApplyPreset_Fast( VPP55	);
 8004a34:	2036      	movs	r0, #54	; 0x36
 8004a36:	f7ff fb5d 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004a3a:	e0ac      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 219	:
		case 220	:
		case 221	:
		case 222	:
			VPP_ApplyPreset_Fast( VPP56	);
 8004a3c:	2037      	movs	r0, #55	; 0x37
 8004a3e:	f7ff fb59 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004a42:	e0a8      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 223	:
		case 224	:
		case 225	:
		case 226	:
			VPP_ApplyPreset_Fast( VPP57	);
 8004a44:	2038      	movs	r0, #56	; 0x38
 8004a46:	f7ff fb55 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004a4a:	e0a4      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 227	:
		case 228	:
		case 229	:
		case 230	:
			VPP_ApplyPreset_Fast( VPP58	);
 8004a4c:	2039      	movs	r0, #57	; 0x39
 8004a4e:	f7ff fb51 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004a52:	e0a0      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 231	:
		case 232	:
		case 233	:
		case 234	:
			VPP_ApplyPreset_Fast( VPP59	);
 8004a54:	203a      	movs	r0, #58	; 0x3a
 8004a56:	f7ff fb4d 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004a5a:	e09c      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 235	:
		case 236	:
		case 237	:
		case 238	:
			VPP_ApplyPreset_Fast( VPP60	);
 8004a5c:	203b      	movs	r0, #59	; 0x3b
 8004a5e:	f7ff fb49 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004a62:	e098      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 239	:
		case 240	:
		case 241	:
		case 242	:
			VPP_ApplyPreset_Fast( VPP61	);
 8004a64:	203c      	movs	r0, #60	; 0x3c
 8004a66:	f7ff fb45 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004a6a:	e094      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 243	:
		case 244	:
		case 245	:
		case 246	:
			VPP_ApplyPreset_Fast( VPP62	);
 8004a6c:	203d      	movs	r0, #61	; 0x3d
 8004a6e:	f7ff fb41 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004a72:	e090      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 247	:
		case 248	:
		case 249	:
		case 250	:
			VPP_ApplyPreset_Fast( VPP63	);
 8004a74:	203e      	movs	r0, #62	; 0x3e
 8004a76:	f7ff fb3d 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004a7a:	e08c      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 251	:
		case 252	:
		case 253	:
		case 254	:
			VPP_ApplyPreset_Fast( VPP64	);
 8004a7c:	203f      	movs	r0, #63	; 0x3f
 8004a7e:	f7ff fb39 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004a82:	e088      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 255	:
		case 256	:
		case 257	:
		case 258	:
			VPP_ApplyPreset_Fast( VPP65	);
 8004a84:	2040      	movs	r0, #64	; 0x40
 8004a86:	f7ff fb35 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004a8a:	e084      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 259	:
		case 260	:
		case 261	:
		case 262	:
			VPP_ApplyPreset_Fast( VPP66	);
 8004a8c:	2041      	movs	r0, #65	; 0x41
 8004a8e:	f7ff fb31 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004a92:	e080      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 263	:
		case 264	:
		case 265	:
		case 266	:
			VPP_ApplyPreset_Fast( VPP67	);
 8004a94:	2042      	movs	r0, #66	; 0x42
 8004a96:	f7ff fb2d 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004a9a:	e07c      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 267	:
		case 268	:
		case 269	:
		case 270	:
			VPP_ApplyPreset_Fast( VPP68	);
 8004a9c:	2043      	movs	r0, #67	; 0x43
 8004a9e:	f7ff fb29 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004aa2:	e078      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 271	:
		case 272	:
		case 273	:
		case 274	:
			VPP_ApplyPreset_Fast( VPP69	);
 8004aa4:	2044      	movs	r0, #68	; 0x44
 8004aa6:	f7ff fb25 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004aaa:	e074      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 275	:
		case 276	:
		case 277	:
		case 278	:
			VPP_ApplyPreset_Fast( VPP70	);
 8004aac:	2045      	movs	r0, #69	; 0x45
 8004aae:	f7ff fb21 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004ab2:	e070      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 279	:
		case 280	:
		case 281	:
		case 282	:
			VPP_ApplyPreset_Fast( VPP71	);
 8004ab4:	2046      	movs	r0, #70	; 0x46
 8004ab6:	f7ff fb1d 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004aba:	e06c      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 283	:
		case 284	:
		case 285	:
		case 286	:
			VPP_ApplyPreset_Fast( VPP72	);
 8004abc:	2047      	movs	r0, #71	; 0x47
 8004abe:	f7ff fb19 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004ac2:	e068      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 287	:
		case 288	:
		case 289	:
		case 290	:
			VPP_ApplyPreset_Fast( VPP73	);
 8004ac4:	2048      	movs	r0, #72	; 0x48
 8004ac6:	f7ff fb15 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004aca:	e064      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 291	:
		case 292	:
		case 293	:
		case 294	:
			VPP_ApplyPreset_Fast( VPP74	);
 8004acc:	2049      	movs	r0, #73	; 0x49
 8004ace:	f7ff fb11 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004ad2:	e060      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 295	:
		case 296	:
		case 297	:
		case 298	:
			VPP_ApplyPreset_Fast( VPP75	);
 8004ad4:	204a      	movs	r0, #74	; 0x4a
 8004ad6:	f7ff fb0d 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004ada:	e05c      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 299	:
		case 300	:
		case 301	:
		case 302	:
			VPP_ApplyPreset_Fast( VPP76	);
 8004adc:	204b      	movs	r0, #75	; 0x4b
 8004ade:	f7ff fb09 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004ae2:	e058      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 303	:
		case 304	:
		case 305	:
		case 306	:
			VPP_ApplyPreset_Fast( VPP77	);
 8004ae4:	204c      	movs	r0, #76	; 0x4c
 8004ae6:	f7ff fb05 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004aea:	e054      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 307	:
		case 308	:
		case 309	:
		case 310	:
			VPP_ApplyPreset_Fast( VPP78	);
 8004aec:	204d      	movs	r0, #77	; 0x4d
 8004aee:	f7ff fb01 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004af2:	e050      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 311	:
		case 312	:
		case 313	:
		case 314	:
			VPP_ApplyPreset_Fast( VPP79	);
 8004af4:	204e      	movs	r0, #78	; 0x4e
 8004af6:	f7ff fafd 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004afa:	e04c      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 315	:
		case 316	:
		case 317	:
		case 318	:
			VPP_ApplyPreset_Fast( VPP80	);
 8004afc:	204f      	movs	r0, #79	; 0x4f
 8004afe:	f7ff faf9 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004b02:	e048      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 319	:
		case 320	:
		case 321	:
		case 322	:
			VPP_ApplyPreset_Fast( VPP81	);
 8004b04:	2050      	movs	r0, #80	; 0x50
 8004b06:	f7ff faf5 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004b0a:	e044      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 323	:
		case 324	:
		case 325	:
		case 326	:
			VPP_ApplyPreset_Fast( VPP82	);
 8004b0c:	2051      	movs	r0, #81	; 0x51
 8004b0e:	f7ff faf1 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004b12:	e040      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 327	:
		case 328	:
		case 329	:
		case 330	:
			VPP_ApplyPreset_Fast( VPP83	);
 8004b14:	2052      	movs	r0, #82	; 0x52
 8004b16:	f7ff faed 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004b1a:	e03c      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 331	:
		case 332	:
		case 333	:
		case 334	:
			VPP_ApplyPreset_Fast( VPP84	);
 8004b1c:	2053      	movs	r0, #83	; 0x53
 8004b1e:	f7ff fae9 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004b22:	e038      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 335	:
		case 336	:
		case 337	:
		case 338	:
			VPP_ApplyPreset_Fast( VPP85	);
 8004b24:	2054      	movs	r0, #84	; 0x54
 8004b26:	f7ff fae5 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004b2a:	e034      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 339	:
		case 340	:
		case 341	:
		case 342	:
			VPP_ApplyPreset_Fast( VPP86	);
 8004b2c:	2055      	movs	r0, #85	; 0x55
 8004b2e:	f7ff fae1 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004b32:	e030      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 343	:
		case 344	:
		case 345	:
		case 346	:
			VPP_ApplyPreset_Fast( VPP87	);
 8004b34:	2056      	movs	r0, #86	; 0x56
 8004b36:	f7ff fadd 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004b3a:	e02c      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 347	:
		case 348	:
		case 349	:
		case 350	:
			VPP_ApplyPreset_Fast( VPP88	);
 8004b3c:	2057      	movs	r0, #87	; 0x57
 8004b3e:	f7ff fad9 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004b42:	e028      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 351	:
		case 352	:
		case 353	:
		case 354	:
			VPP_ApplyPreset_Fast( VPP89	);
 8004b44:	2058      	movs	r0, #88	; 0x58
 8004b46:	f7ff fad5 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004b4a:	e024      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 355	:
		case 356	:
		case 357	:
		case 358	:
			VPP_ApplyPreset_Fast( VPP90	);
 8004b4c:	2059      	movs	r0, #89	; 0x59
 8004b4e:	f7ff fad1 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004b52:	e020      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 359	:
		case 360	:
		case 361	:
		case 362	:
			VPP_ApplyPreset_Fast( VPP91	);
 8004b54:	205a      	movs	r0, #90	; 0x5a
 8004b56:	f7ff facd 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004b5a:	e01c      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 363	:
		case 364	:
		case 365	:
		case 366	:
			VPP_ApplyPreset_Fast( VPP92	);
 8004b5c:	205b      	movs	r0, #91	; 0x5b
 8004b5e:	f7ff fac9 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004b62:	e018      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 367	:
		case 368	:
		case 369	:
		case 370	:
			VPP_ApplyPreset_Fast( VPP93	);
 8004b64:	205c      	movs	r0, #92	; 0x5c
 8004b66:	f7ff fac5 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004b6a:	e014      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 371	:
		case 372	:
		case 373	:
		case 374	:
			VPP_ApplyPreset_Fast( VPP94	);
 8004b6c:	205d      	movs	r0, #93	; 0x5d
 8004b6e:	f7ff fac1 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004b72:	e010      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 375	:
		case 376	:
		case 377	:
		case 378	:
			VPP_ApplyPreset_Fast( VPP95	);
 8004b74:	205e      	movs	r0, #94	; 0x5e
 8004b76:	f7ff fabd 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004b7a:	e00c      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 379	:
		case 380	:
		case 381	:
		case 382	:
			VPP_ApplyPreset_Fast( VPP96	);
 8004b7c:	205f      	movs	r0, #95	; 0x5f
 8004b7e:	f7ff fab9 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004b82:	e008      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 383	:
		case 384	:
		case 385	:
		case 386	:
			VPP_ApplyPreset_Fast( VPP97	);
 8004b84:	2060      	movs	r0, #96	; 0x60
 8004b86:	f7ff fab5 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004b8a:	e004      	b.n	8004b96 <VPP_ModifyOutput+0x94a>
		case 387	:
		case 388	:
		case 389	:
		case 390	:
			VPP_ApplyPreset_Fast( VPP98	);
 8004b8c:	2061      	movs	r0, #97	; 0x61
 8004b8e:	f7ff fab1 	bl	80040f4 <VPP_ApplyPreset_Fast>
			break;
 8004b92:	e000      	b.n	8004b96 <VPP_ModifyOutput+0x94a>

		default:
			break;
 8004b94:	bf00      	nop
	}
}
 8004b96:	bf00      	nop
 8004b98:	3708      	adds	r7, #8
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop

08004ba0 <VPP_GetVppPresetObject>:
 *	@param None
 *	@retval pointer to VppEncoderPreset_t struct
 *
 */
VppEncoderPreset_t * VPP_GetVppPresetObject(eVppActivePresetSelect_t eVppActivePresetSelect)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	71fb      	strb	r3, [r7, #7]
	if(eVppActivePresetSelect)
 8004baa:	79fb      	ldrb	r3, [r7, #7]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d002      	beq.n	8004bb6 <VPP_GetVppPresetObject+0x16>
		return pSyncVppEncoderPreset;
 8004bb0:	4b05      	ldr	r3, [pc, #20]	; (8004bc8 <VPP_GetVppPresetObject+0x28>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	e001      	b.n	8004bba <VPP_GetVppPresetObject+0x1a>
	else
		return pSignalVppEncoderPreset;
 8004bb6:	4b05      	ldr	r3, [pc, #20]	; (8004bcc <VPP_GetVppPresetObject+0x2c>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	370c      	adds	r7, #12
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	20000c8c 	.word	0x20000c8c
 8004bcc:	20000c88 	.word	0x20000c88

08004bd0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b08c      	sub	sp, #48	; 0x30
 8004bd4:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8004bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bda:	2200      	movs	r2, #0
 8004bdc:	601a      	str	r2, [r3, #0]
 8004bde:	605a      	str	r2, [r3, #4]
 8004be0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8004be2:	1d3b      	adds	r3, r7, #4
 8004be4:	2220      	movs	r2, #32
 8004be6:	2100      	movs	r1, #0
 8004be8:	4618      	mov	r0, r3
 8004bea:	f007 ff23 	bl	800ca34 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8004bee:	4b32      	ldr	r3, [pc, #200]	; (8004cb8 <MX_ADC1_Init+0xe8>)
 8004bf0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004bf4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004bf6:	4b30      	ldr	r3, [pc, #192]	; (8004cb8 <MX_ADC1_Init+0xe8>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004bfc:	4b2e      	ldr	r3, [pc, #184]	; (8004cb8 <MX_ADC1_Init+0xe8>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004c02:	4b2d      	ldr	r3, [pc, #180]	; (8004cb8 <MX_ADC1_Init+0xe8>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8004c08:	4b2b      	ldr	r3, [pc, #172]	; (8004cb8 <MX_ADC1_Init+0xe8>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004c0e:	4b2a      	ldr	r3, [pc, #168]	; (8004cb8 <MX_ADC1_Init+0xe8>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004c14:	4b28      	ldr	r3, [pc, #160]	; (8004cb8 <MX_ADC1_Init+0xe8>)
 8004c16:	2204      	movs	r2, #4
 8004c18:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004c1a:	4b27      	ldr	r3, [pc, #156]	; (8004cb8 <MX_ADC1_Init+0xe8>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004c20:	4b25      	ldr	r3, [pc, #148]	; (8004cb8 <MX_ADC1_Init+0xe8>)
 8004c22:	2201      	movs	r2, #1
 8004c24:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8004c26:	4b24      	ldr	r3, [pc, #144]	; (8004cb8 <MX_ADC1_Init+0xe8>)
 8004c28:	2201      	movs	r2, #1
 8004c2a:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004c2c:	4b22      	ldr	r3, [pc, #136]	; (8004cb8 <MX_ADC1_Init+0xe8>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004c34:	4b20      	ldr	r3, [pc, #128]	; (8004cb8 <MX_ADC1_Init+0xe8>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004c3a:	4b1f      	ldr	r3, [pc, #124]	; (8004cb8 <MX_ADC1_Init+0xe8>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004c40:	4b1d      	ldr	r3, [pc, #116]	; (8004cb8 <MX_ADC1_Init+0xe8>)
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8004c48:	4b1b      	ldr	r3, [pc, #108]	; (8004cb8 <MX_ADC1_Init+0xe8>)
 8004c4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004c4e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8004c50:	4b19      	ldr	r3, [pc, #100]	; (8004cb8 <MX_ADC1_Init+0xe8>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004c58:	4817      	ldr	r0, [pc, #92]	; (8004cb8 <MX_ADC1_Init+0xe8>)
 8004c5a:	f001 ffd7 	bl	8006c0c <HAL_ADC_Init>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8004c64:	f000 ff2c 	bl	8005ac0 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c70:	4619      	mov	r1, r3
 8004c72:	4811      	ldr	r0, [pc, #68]	; (8004cb8 <MX_ADC1_Init+0xe8>)
 8004c74:	f002 fd60 	bl	8007738 <HAL_ADCEx_MultiModeConfigChannel>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d001      	beq.n	8004c82 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8004c7e:	f000 ff1f 	bl	8005ac0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004c82:	4b0e      	ldr	r3, [pc, #56]	; (8004cbc <MX_ADC1_Init+0xec>)
 8004c84:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004c86:	2306      	movs	r3, #6
 8004c88:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004c8e:	237f      	movs	r3, #127	; 0x7f
 8004c90:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004c92:	2304      	movs	r3, #4
 8004c94:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8004c96:	2300      	movs	r3, #0
 8004c98:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004c9a:	1d3b      	adds	r3, r7, #4
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	4806      	ldr	r0, [pc, #24]	; (8004cb8 <MX_ADC1_Init+0xe8>)
 8004ca0:	f002 f974 	bl	8006f8c <HAL_ADC_ConfigChannel>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8004caa:	f000 ff09 	bl	8005ac0 <Error_Handler>
  }

}
 8004cae:	bf00      	nop
 8004cb0:	3730      	adds	r7, #48	; 0x30
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	200022e8 	.word	0x200022e8
 8004cbc:	0c900008 	.word	0x0c900008

08004cc0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b08a      	sub	sp, #40	; 0x28
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cc8:	f107 0314 	add.w	r3, r7, #20
 8004ccc:	2200      	movs	r2, #0
 8004cce:	601a      	str	r2, [r3, #0]
 8004cd0:	605a      	str	r2, [r3, #4]
 8004cd2:	609a      	str	r2, [r3, #8]
 8004cd4:	60da      	str	r2, [r3, #12]
 8004cd6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ce0:	d14f      	bne.n	8004d82 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004ce2:	4b2a      	ldr	r3, [pc, #168]	; (8004d8c <HAL_ADC_MspInit+0xcc>)
 8004ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce6:	4a29      	ldr	r2, [pc, #164]	; (8004d8c <HAL_ADC_MspInit+0xcc>)
 8004ce8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004cec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cee:	4b27      	ldr	r3, [pc, #156]	; (8004d8c <HAL_ADC_MspInit+0xcc>)
 8004cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cf2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cf6:	613b      	str	r3, [r7, #16]
 8004cf8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cfa:	4b24      	ldr	r3, [pc, #144]	; (8004d8c <HAL_ADC_MspInit+0xcc>)
 8004cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cfe:	4a23      	ldr	r2, [pc, #140]	; (8004d8c <HAL_ADC_MspInit+0xcc>)
 8004d00:	f043 0301 	orr.w	r3, r3, #1
 8004d04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d06:	4b21      	ldr	r3, [pc, #132]	; (8004d8c <HAL_ADC_MspInit+0xcc>)
 8004d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	60fb      	str	r3, [r7, #12]
 8004d10:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004d12:	2304      	movs	r3, #4
 8004d14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d16:	2303      	movs	r3, #3
 8004d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d1e:	f107 0314 	add.w	r3, r7, #20
 8004d22:	4619      	mov	r1, r3
 8004d24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d28:	f004 f8de 	bl	8008ee8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004d2c:	4b18      	ldr	r3, [pc, #96]	; (8004d90 <HAL_ADC_MspInit+0xd0>)
 8004d2e:	4a19      	ldr	r2, [pc, #100]	; (8004d94 <HAL_ADC_MspInit+0xd4>)
 8004d30:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004d32:	4b17      	ldr	r3, [pc, #92]	; (8004d90 <HAL_ADC_MspInit+0xd0>)
 8004d34:	2205      	movs	r2, #5
 8004d36:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d38:	4b15      	ldr	r3, [pc, #84]	; (8004d90 <HAL_ADC_MspInit+0xd0>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d3e:	4b14      	ldr	r3, [pc, #80]	; (8004d90 <HAL_ADC_MspInit+0xd0>)
 8004d40:	2200      	movs	r2, #0
 8004d42:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004d44:	4b12      	ldr	r3, [pc, #72]	; (8004d90 <HAL_ADC_MspInit+0xd0>)
 8004d46:	2280      	movs	r2, #128	; 0x80
 8004d48:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004d4a:	4b11      	ldr	r3, [pc, #68]	; (8004d90 <HAL_ADC_MspInit+0xd0>)
 8004d4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d50:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004d52:	4b0f      	ldr	r3, [pc, #60]	; (8004d90 <HAL_ADC_MspInit+0xd0>)
 8004d54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d58:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004d5a:	4b0d      	ldr	r3, [pc, #52]	; (8004d90 <HAL_ADC_MspInit+0xd0>)
 8004d5c:	2220      	movs	r2, #32
 8004d5e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004d60:	4b0b      	ldr	r3, [pc, #44]	; (8004d90 <HAL_ADC_MspInit+0xd0>)
 8004d62:	2200      	movs	r2, #0
 8004d64:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004d66:	480a      	ldr	r0, [pc, #40]	; (8004d90 <HAL_ADC_MspInit+0xd0>)
 8004d68:	f003 fdf2 	bl	8008950 <HAL_DMA_Init>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8004d72:	f000 fea5 	bl	8005ac0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a05      	ldr	r2, [pc, #20]	; (8004d90 <HAL_ADC_MspInit+0xd0>)
 8004d7a:	655a      	str	r2, [r3, #84]	; 0x54
 8004d7c:	4a04      	ldr	r2, [pc, #16]	; (8004d90 <HAL_ADC_MspInit+0xd0>)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8004d82:	bf00      	nop
 8004d84:	3728      	adds	r7, #40	; 0x28
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	40021000 	.word	0x40021000
 8004d90:	20002354 	.word	0x20002354
 8004d94:	40020008 	.word	0x40020008

08004d98 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 8004d9c:	4b0f      	ldr	r3, [pc, #60]	; (8004ddc <MX_COMP1_Init+0x44>)
 8004d9e:	4a10      	ldr	r2, [pc, #64]	; (8004de0 <MX_COMP1_Init+0x48>)
 8004da0:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8004da2:	4b0e      	ldr	r3, [pc, #56]	; (8004ddc <MX_COMP1_Init+0x44>)
 8004da4:	2200      	movs	r2, #0
 8004da6:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8004da8:	4b0c      	ldr	r3, [pc, #48]	; (8004ddc <MX_COMP1_Init+0x44>)
 8004daa:	4a0e      	ldr	r2, [pc, #56]	; (8004de4 <MX_COMP1_Init+0x4c>)
 8004dac:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8004dae:	4b0b      	ldr	r3, [pc, #44]	; (8004ddc <MX_COMP1_Init+0x44>)
 8004db0:	2200      	movs	r2, #0
 8004db2:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8004db4:	4b09      	ldr	r3, [pc, #36]	; (8004ddc <MX_COMP1_Init+0x44>)
 8004db6:	2200      	movs	r2, #0
 8004db8:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8004dba:	4b08      	ldr	r3, [pc, #32]	; (8004ddc <MX_COMP1_Init+0x44>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8004dc0:	4b06      	ldr	r3, [pc, #24]	; (8004ddc <MX_COMP1_Init+0x44>)
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8004dc6:	4805      	ldr	r0, [pc, #20]	; (8004ddc <MX_COMP1_Init+0x44>)
 8004dc8:	f002 ff0a 	bl	8007be0 <HAL_COMP_Init>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 8004dd2:	f000 fe75 	bl	8005ac0 <Error_Handler>
  }

}
 8004dd6:	bf00      	nop
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	200023b4 	.word	0x200023b4
 8004de0:	40010200 	.word	0x40010200
 8004de4:	00800030 	.word	0x00800030

08004de8 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b088      	sub	sp, #32
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004df0:	f107 030c 	add.w	r3, r7, #12
 8004df4:	2200      	movs	r2, #0
 8004df6:	601a      	str	r2, [r3, #0]
 8004df8:	605a      	str	r2, [r3, #4]
 8004dfa:	609a      	str	r2, [r3, #8]
 8004dfc:	60da      	str	r2, [r3, #12]
 8004dfe:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a0f      	ldr	r2, [pc, #60]	; (8004e44 <HAL_COMP_MspInit+0x5c>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d118      	bne.n	8004e3c <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e0a:	4b0f      	ldr	r3, [pc, #60]	; (8004e48 <HAL_COMP_MspInit+0x60>)
 8004e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e0e:	4a0e      	ldr	r2, [pc, #56]	; (8004e48 <HAL_COMP_MspInit+0x60>)
 8004e10:	f043 0301 	orr.w	r3, r3, #1
 8004e14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e16:	4b0c      	ldr	r3, [pc, #48]	; (8004e48 <HAL_COMP_MspInit+0x60>)
 8004e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	60bb      	str	r3, [r7, #8]
 8004e20:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004e22:	2302      	movs	r3, #2
 8004e24:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e26:	2303      	movs	r3, #3
 8004e28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e2e:	f107 030c 	add.w	r3, r7, #12
 8004e32:	4619      	mov	r1, r3
 8004e34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e38:	f004 f856 	bl	8008ee8 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8004e3c:	bf00      	nop
 8004e3e:	3720      	adds	r7, #32
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	40010200 	.word	0x40010200
 8004e48:	40021000 	.word	0x40021000

08004e4c <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b08c      	sub	sp, #48	; 0x30
 8004e50:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8004e52:	463b      	mov	r3, r7
 8004e54:	2230      	movs	r2, #48	; 0x30
 8004e56:	2100      	movs	r1, #0
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f007 fdeb 	bl	800ca34 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8004e5e:	4b1e      	ldr	r3, [pc, #120]	; (8004ed8 <MX_DAC1_Init+0x8c>)
 8004e60:	4a1e      	ldr	r2, [pc, #120]	; (8004edc <MX_DAC1_Init+0x90>)
 8004e62:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8004e64:	481c      	ldr	r0, [pc, #112]	; (8004ed8 <MX_DAC1_Init+0x8c>)
 8004e66:	f003 f95e 	bl	8008126 <HAL_DAC_Init>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d001      	beq.n	8004e74 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8004e70:	f000 fe26 	bl	8005ac0 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8004e74:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e78:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8004e82:	2300      	movs	r3, #0
 8004e84:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8004e86:	2306      	movs	r3, #6
 8004e88:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8004e92:	2301      	movs	r3, #1
 8004e94:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8004e96:	2300      	movs	r3, #0
 8004e98:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8004e9a:	463b      	mov	r3, r7
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	480d      	ldr	r0, [pc, #52]	; (8004ed8 <MX_DAC1_Init+0x8c>)
 8004ea2:	f003 fb1f 	bl	80084e4 <HAL_DAC_ConfigChannel>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d001      	beq.n	8004eb0 <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 8004eac:	f000 fe08 	bl	8005ac0 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8004eb8:	463b      	mov	r3, r7
 8004eba:	2210      	movs	r2, #16
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	4806      	ldr	r0, [pc, #24]	; (8004ed8 <MX_DAC1_Init+0x8c>)
 8004ec0:	f003 fb10 	bl	80084e4 <HAL_DAC_ConfigChannel>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 8004eca:	f000 fdf9 	bl	8005ac0 <Error_Handler>
  }

}
 8004ece:	bf00      	nop
 8004ed0:	3730      	adds	r7, #48	; 0x30
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	200023ec 	.word	0x200023ec
 8004edc:	50000800 	.word	0x50000800

08004ee0 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b08c      	sub	sp, #48	; 0x30
 8004ee4:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8004ee6:	463b      	mov	r3, r7
 8004ee8:	2230      	movs	r2, #48	; 0x30
 8004eea:	2100      	movs	r1, #0
 8004eec:	4618      	mov	r0, r3
 8004eee:	f007 fda1 	bl	800ca34 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 8004ef2:	4b16      	ldr	r3, [pc, #88]	; (8004f4c <MX_DAC2_Init+0x6c>)
 8004ef4:	4a16      	ldr	r2, [pc, #88]	; (8004f50 <MX_DAC2_Init+0x70>)
 8004ef6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8004ef8:	4814      	ldr	r0, [pc, #80]	; (8004f4c <MX_DAC2_Init+0x6c>)
 8004efa:	f003 f914 	bl	8008126 <HAL_DAC_Init>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d001      	beq.n	8004f08 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8004f04:	f000 fddc 	bl	8005ac0 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8004f08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f0c:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8004f12:	2300      	movs	r3, #0
 8004f14:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8004f16:	2300      	movs	r3, #0
 8004f18:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8004f1a:	2306      	movs	r3, #6
 8004f1c:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8004f22:	2300      	movs	r3, #0
 8004f24:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8004f26:	2301      	movs	r3, #1
 8004f28:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8004f2e:	463b      	mov	r3, r7
 8004f30:	2200      	movs	r2, #0
 8004f32:	4619      	mov	r1, r3
 8004f34:	4805      	ldr	r0, [pc, #20]	; (8004f4c <MX_DAC2_Init+0x6c>)
 8004f36:	f003 fad5 	bl	80084e4 <HAL_DAC_ConfigChannel>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d001      	beq.n	8004f44 <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 8004f40:	f000 fdbe 	bl	8005ac0 <Error_Handler>
  }

}
 8004f44:	bf00      	nop
 8004f46:	3730      	adds	r7, #48	; 0x30
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	200023d8 	.word	0x200023d8
 8004f50:	50000c00 	.word	0x50000c00

08004f54 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b08c      	sub	sp, #48	; 0x30
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f5c:	f107 031c 	add.w	r3, r7, #28
 8004f60:	2200      	movs	r2, #0
 8004f62:	601a      	str	r2, [r3, #0]
 8004f64:	605a      	str	r2, [r3, #4]
 8004f66:	609a      	str	r2, [r3, #8]
 8004f68:	60da      	str	r2, [r3, #12]
 8004f6a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a56      	ldr	r2, [pc, #344]	; (80050cc <HAL_DAC_MspInit+0x178>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d150      	bne.n	8005018 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8004f76:	4b56      	ldr	r3, [pc, #344]	; (80050d0 <HAL_DAC_MspInit+0x17c>)
 8004f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f7a:	4a55      	ldr	r2, [pc, #340]	; (80050d0 <HAL_DAC_MspInit+0x17c>)
 8004f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f82:	4b53      	ldr	r3, [pc, #332]	; (80050d0 <HAL_DAC_MspInit+0x17c>)
 8004f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f8a:	61bb      	str	r3, [r7, #24]
 8004f8c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f8e:	4b50      	ldr	r3, [pc, #320]	; (80050d0 <HAL_DAC_MspInit+0x17c>)
 8004f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f92:	4a4f      	ldr	r2, [pc, #316]	; (80050d0 <HAL_DAC_MspInit+0x17c>)
 8004f94:	f043 0301 	orr.w	r3, r3, #1
 8004f98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f9a:	4b4d      	ldr	r3, [pc, #308]	; (80050d0 <HAL_DAC_MspInit+0x17c>)
 8004f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f9e:	f003 0301 	and.w	r3, r3, #1
 8004fa2:	617b      	str	r3, [r7, #20]
 8004fa4:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004fa6:	2330      	movs	r3, #48	; 0x30
 8004fa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004faa:	2303      	movs	r3, #3
 8004fac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fb2:	f107 031c 	add.w	r3, r7, #28
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004fbc:	f003 ff94 	bl	8008ee8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8004fc0:	4b44      	ldr	r3, [pc, #272]	; (80050d4 <HAL_DAC_MspInit+0x180>)
 8004fc2:	4a45      	ldr	r2, [pc, #276]	; (80050d8 <HAL_DAC_MspInit+0x184>)
 8004fc4:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8004fc6:	4b43      	ldr	r3, [pc, #268]	; (80050d4 <HAL_DAC_MspInit+0x180>)
 8004fc8:	2206      	movs	r2, #6
 8004fca:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004fcc:	4b41      	ldr	r3, [pc, #260]	; (80050d4 <HAL_DAC_MspInit+0x180>)
 8004fce:	2210      	movs	r2, #16
 8004fd0:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004fd2:	4b40      	ldr	r3, [pc, #256]	; (80050d4 <HAL_DAC_MspInit+0x180>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8004fd8:	4b3e      	ldr	r3, [pc, #248]	; (80050d4 <HAL_DAC_MspInit+0x180>)
 8004fda:	2280      	movs	r2, #128	; 0x80
 8004fdc:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004fde:	4b3d      	ldr	r3, [pc, #244]	; (80050d4 <HAL_DAC_MspInit+0x180>)
 8004fe0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fe4:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004fe6:	4b3b      	ldr	r3, [pc, #236]	; (80050d4 <HAL_DAC_MspInit+0x180>)
 8004fe8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fec:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8004fee:	4b39      	ldr	r3, [pc, #228]	; (80050d4 <HAL_DAC_MspInit+0x180>)
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8004ff4:	4b37      	ldr	r3, [pc, #220]	; (80050d4 <HAL_DAC_MspInit+0x180>)
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8004ffa:	4836      	ldr	r0, [pc, #216]	; (80050d4 <HAL_DAC_MspInit+0x180>)
 8004ffc:	f003 fca8 	bl	8008950 <HAL_DMA_Init>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d001      	beq.n	800500a <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8005006:	f000 fd5b 	bl	8005ac0 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a31      	ldr	r2, [pc, #196]	; (80050d4 <HAL_DAC_MspInit+0x180>)
 800500e:	609a      	str	r2, [r3, #8]
 8005010:	4a30      	ldr	r2, [pc, #192]	; (80050d4 <HAL_DAC_MspInit+0x180>)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 8005016:	e054      	b.n	80050c2 <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a2f      	ldr	r2, [pc, #188]	; (80050dc <HAL_DAC_MspInit+0x188>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d14f      	bne.n	80050c2 <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8005022:	4b2b      	ldr	r3, [pc, #172]	; (80050d0 <HAL_DAC_MspInit+0x17c>)
 8005024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005026:	4a2a      	ldr	r2, [pc, #168]	; (80050d0 <HAL_DAC_MspInit+0x17c>)
 8005028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800502c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800502e:	4b28      	ldr	r3, [pc, #160]	; (80050d0 <HAL_DAC_MspInit+0x17c>)
 8005030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005036:	613b      	str	r3, [r7, #16]
 8005038:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800503a:	4b25      	ldr	r3, [pc, #148]	; (80050d0 <HAL_DAC_MspInit+0x17c>)
 800503c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800503e:	4a24      	ldr	r2, [pc, #144]	; (80050d0 <HAL_DAC_MspInit+0x17c>)
 8005040:	f043 0301 	orr.w	r3, r3, #1
 8005044:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005046:	4b22      	ldr	r3, [pc, #136]	; (80050d0 <HAL_DAC_MspInit+0x17c>)
 8005048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	60fb      	str	r3, [r7, #12]
 8005050:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005052:	2340      	movs	r3, #64	; 0x40
 8005054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005056:	2303      	movs	r3, #3
 8005058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800505a:	2300      	movs	r3, #0
 800505c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800505e:	f107 031c 	add.w	r3, r7, #28
 8005062:	4619      	mov	r1, r3
 8005064:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005068:	f003 ff3e 	bl	8008ee8 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 800506c:	4b1c      	ldr	r3, [pc, #112]	; (80050e0 <HAL_DAC_MspInit+0x18c>)
 800506e:	4a1d      	ldr	r2, [pc, #116]	; (80050e4 <HAL_DAC_MspInit+0x190>)
 8005070:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8005072:	4b1b      	ldr	r3, [pc, #108]	; (80050e0 <HAL_DAC_MspInit+0x18c>)
 8005074:	2229      	movs	r2, #41	; 0x29
 8005076:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005078:	4b19      	ldr	r3, [pc, #100]	; (80050e0 <HAL_DAC_MspInit+0x18c>)
 800507a:	2210      	movs	r2, #16
 800507c:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800507e:	4b18      	ldr	r3, [pc, #96]	; (80050e0 <HAL_DAC_MspInit+0x18c>)
 8005080:	2200      	movs	r2, #0
 8005082:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8005084:	4b16      	ldr	r3, [pc, #88]	; (80050e0 <HAL_DAC_MspInit+0x18c>)
 8005086:	2280      	movs	r2, #128	; 0x80
 8005088:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800508a:	4b15      	ldr	r3, [pc, #84]	; (80050e0 <HAL_DAC_MspInit+0x18c>)
 800508c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005090:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005092:	4b13      	ldr	r3, [pc, #76]	; (80050e0 <HAL_DAC_MspInit+0x18c>)
 8005094:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005098:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 800509a:	4b11      	ldr	r3, [pc, #68]	; (80050e0 <HAL_DAC_MspInit+0x18c>)
 800509c:	2220      	movs	r2, #32
 800509e:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80050a0:	4b0f      	ldr	r3, [pc, #60]	; (80050e0 <HAL_DAC_MspInit+0x18c>)
 80050a2:	2200      	movs	r2, #0
 80050a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 80050a6:	480e      	ldr	r0, [pc, #56]	; (80050e0 <HAL_DAC_MspInit+0x18c>)
 80050a8:	f003 fc52 	bl	8008950 <HAL_DMA_Init>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d001      	beq.n	80050b6 <HAL_DAC_MspInit+0x162>
      Error_Handler();
 80050b2:	f000 fd05 	bl	8005ac0 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a09      	ldr	r2, [pc, #36]	; (80050e0 <HAL_DAC_MspInit+0x18c>)
 80050ba:	609a      	str	r2, [r3, #8]
 80050bc:	4a08      	ldr	r2, [pc, #32]	; (80050e0 <HAL_DAC_MspInit+0x18c>)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6293      	str	r3, [r2, #40]	; 0x28
}
 80050c2:	bf00      	nop
 80050c4:	3730      	adds	r7, #48	; 0x30
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	50000800 	.word	0x50000800
 80050d0:	40021000 	.word	0x40021000
 80050d4:	20002400 	.word	0x20002400
 80050d8:	4002001c 	.word	0x4002001c
 80050dc:	50000c00 	.word	0x50000c00
 80050e0:	20002460 	.word	0x20002460
 80050e4:	40020030 	.word	0x40020030

080050e8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80050ee:	4b1a      	ldr	r3, [pc, #104]	; (8005158 <MX_DMA_Init+0x70>)
 80050f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050f2:	4a19      	ldr	r2, [pc, #100]	; (8005158 <MX_DMA_Init+0x70>)
 80050f4:	f043 0304 	orr.w	r3, r3, #4
 80050f8:	6493      	str	r3, [r2, #72]	; 0x48
 80050fa:	4b17      	ldr	r3, [pc, #92]	; (8005158 <MX_DMA_Init+0x70>)
 80050fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050fe:	f003 0304 	and.w	r3, r3, #4
 8005102:	607b      	str	r3, [r7, #4]
 8005104:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005106:	4b14      	ldr	r3, [pc, #80]	; (8005158 <MX_DMA_Init+0x70>)
 8005108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800510a:	4a13      	ldr	r2, [pc, #76]	; (8005158 <MX_DMA_Init+0x70>)
 800510c:	f043 0301 	orr.w	r3, r3, #1
 8005110:	6493      	str	r3, [r2, #72]	; 0x48
 8005112:	4b11      	ldr	r3, [pc, #68]	; (8005158 <MX_DMA_Init+0x70>)
 8005114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	603b      	str	r3, [r7, #0]
 800511c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 800511e:	2200      	movs	r2, #0
 8005120:	2101      	movs	r1, #1
 8005122:	200b      	movs	r0, #11
 8005124:	f002 ffcb 	bl	80080be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8005128:	200b      	movs	r0, #11
 800512a:	f002 ffe2 	bl	80080f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800512e:	2200      	movs	r2, #0
 8005130:	2100      	movs	r1, #0
 8005132:	200c      	movs	r0, #12
 8005134:	f002 ffc3 	bl	80080be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8005138:	200c      	movs	r0, #12
 800513a:	f002 ffda 	bl	80080f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800513e:	2200      	movs	r2, #0
 8005140:	2100      	movs	r1, #0
 8005142:	200d      	movs	r0, #13
 8005144:	f002 ffbb 	bl	80080be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8005148:	200d      	movs	r0, #13
 800514a:	f002 ffd2 	bl	80080f2 <HAL_NVIC_EnableIRQ>

}
 800514e:	bf00      	nop
 8005150:	3708      	adds	r7, #8
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	40021000 	.word	0x40021000

0800515c <update_dc_bias_sweep>:
uint16_t dcbias = 0;
int dcbias_dir = 1;
int dcinverted = 0;

void update_dc_bias_sweep()
{
 800515c:	b580      	push	{r7, lr}
 800515e:	af00      	add	r7, sp, #0
	  // up=1, down=0
	  (dcbias_dir) ? (dcbias++) : (dcbias--);
 8005160:	4b20      	ldr	r3, [pc, #128]	; (80051e4 <update_dc_bias_sweep+0x88>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d006      	beq.n	8005176 <update_dc_bias_sweep+0x1a>
 8005168:	4b1f      	ldr	r3, [pc, #124]	; (80051e8 <update_dc_bias_sweep+0x8c>)
 800516a:	881b      	ldrh	r3, [r3, #0]
 800516c:	3301      	adds	r3, #1
 800516e:	b29a      	uxth	r2, r3
 8005170:	4b1d      	ldr	r3, [pc, #116]	; (80051e8 <update_dc_bias_sweep+0x8c>)
 8005172:	801a      	strh	r2, [r3, #0]
 8005174:	e005      	b.n	8005182 <update_dc_bias_sweep+0x26>
 8005176:	4b1c      	ldr	r3, [pc, #112]	; (80051e8 <update_dc_bias_sweep+0x8c>)
 8005178:	881b      	ldrh	r3, [r3, #0]
 800517a:	3b01      	subs	r3, #1
 800517c:	b29a      	uxth	r2, r3
 800517e:	4b1a      	ldr	r3, [pc, #104]	; (80051e8 <update_dc_bias_sweep+0x8c>)
 8005180:	801a      	strh	r2, [r3, #0]

	  // invert the bias signal at zero crossing
	  if(dcbias < 1) {
 8005182:	4b19      	ldr	r3, [pc, #100]	; (80051e8 <update_dc_bias_sweep+0x8c>)
 8005184:	881b      	ldrh	r3, [r3, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d10a      	bne.n	80051a0 <update_dc_bias_sweep+0x44>
		(dcinverted) ? (dcinverted=0) : (dcinverted=1);
 800518a:	4b18      	ldr	r3, [pc, #96]	; (80051ec <update_dc_bias_sweep+0x90>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d003      	beq.n	800519a <update_dc_bias_sweep+0x3e>
 8005192:	4b16      	ldr	r3, [pc, #88]	; (80051ec <update_dc_bias_sweep+0x90>)
 8005194:	2200      	movs	r2, #0
 8005196:	601a      	str	r2, [r3, #0]
 8005198:	e002      	b.n	80051a0 <update_dc_bias_sweep+0x44>
 800519a:	4b14      	ldr	r3, [pc, #80]	; (80051ec <update_dc_bias_sweep+0x90>)
 800519c:	2201      	movs	r2, #1
 800519e:	601a      	str	r2, [r3, #0]
	  }

	  // change direction if dac limits are reached
	  if(dcbias < 1) 	{ dcbias_dir = 1; }
 80051a0:	4b11      	ldr	r3, [pc, #68]	; (80051e8 <update_dc_bias_sweep+0x8c>)
 80051a2:	881b      	ldrh	r3, [r3, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d102      	bne.n	80051ae <update_dc_bias_sweep+0x52>
 80051a8:	4b0e      	ldr	r3, [pc, #56]	; (80051e4 <update_dc_bias_sweep+0x88>)
 80051aa:	2201      	movs	r2, #1
 80051ac:	601a      	str	r2, [r3, #0]
	  if(dcbias > 4095) { dcbias_dir = 0; }
 80051ae:	4b0e      	ldr	r3, [pc, #56]	; (80051e8 <update_dc_bias_sweep+0x8c>)
 80051b0:	881b      	ldrh	r3, [r3, #0]
 80051b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051b6:	d302      	bcc.n	80051be <update_dc_bias_sweep+0x62>
 80051b8:	4b0a      	ldr	r3, [pc, #40]	; (80051e4 <update_dc_bias_sweep+0x88>)
 80051ba:	2200      	movs	r2, #0
 80051bc:	601a      	str	r2, [r3, #0]


	  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, dcinverted);
 80051be:	4b0b      	ldr	r3, [pc, #44]	; (80051ec <update_dc_bias_sweep+0x90>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	461a      	mov	r2, r3
 80051c6:	2108      	movs	r1, #8
 80051c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80051cc:	f004 f80e 	bl	80091ec <HAL_GPIO_WritePin>
	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, dcbias);
 80051d0:	4b05      	ldr	r3, [pc, #20]	; (80051e8 <update_dc_bias_sweep+0x8c>)
 80051d2:	881b      	ldrh	r3, [r3, #0]
 80051d4:	2200      	movs	r2, #0
 80051d6:	2110      	movs	r1, #16
 80051d8:	4805      	ldr	r0, [pc, #20]	; (80051f0 <update_dc_bias_sweep+0x94>)
 80051da:	f003 f931 	bl	8008440 <HAL_DAC_SetValue>
}
 80051de:	bf00      	nop
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	20000c90 	.word	0x20000c90
 80051e8:	20001f08 	.word	0x20001f08
 80051ec:	20001f0c 	.word	0x20001f0c
 80051f0:	200023ec 	.word	0x200023ec

080051f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80051f4:	b480      	push	{r7}
 80051f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80051f8:	4b04      	ldr	r3, [pc, #16]	; (800520c <__NVIC_GetPriorityGrouping+0x18>)
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	0a1b      	lsrs	r3, r3, #8
 80051fe:	f003 0307 	and.w	r3, r3, #7
}
 8005202:	4618      	mov	r0, r3
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	e000ed00 	.word	0xe000ed00

08005210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	4603      	mov	r3, r0
 8005218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800521a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800521e:	2b00      	cmp	r3, #0
 8005220:	db0b      	blt.n	800523a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005222:	79fb      	ldrb	r3, [r7, #7]
 8005224:	f003 021f 	and.w	r2, r3, #31
 8005228:	4907      	ldr	r1, [pc, #28]	; (8005248 <__NVIC_EnableIRQ+0x38>)
 800522a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800522e:	095b      	lsrs	r3, r3, #5
 8005230:	2001      	movs	r0, #1
 8005232:	fa00 f202 	lsl.w	r2, r0, r2
 8005236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800523a:	bf00      	nop
 800523c:	370c      	adds	r7, #12
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	e000e100 	.word	0xe000e100

0800524c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	4603      	mov	r3, r0
 8005254:	6039      	str	r1, [r7, #0]
 8005256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800525c:	2b00      	cmp	r3, #0
 800525e:	db0a      	blt.n	8005276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	b2da      	uxtb	r2, r3
 8005264:	490c      	ldr	r1, [pc, #48]	; (8005298 <__NVIC_SetPriority+0x4c>)
 8005266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800526a:	0112      	lsls	r2, r2, #4
 800526c:	b2d2      	uxtb	r2, r2
 800526e:	440b      	add	r3, r1
 8005270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005274:	e00a      	b.n	800528c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	b2da      	uxtb	r2, r3
 800527a:	4908      	ldr	r1, [pc, #32]	; (800529c <__NVIC_SetPriority+0x50>)
 800527c:	79fb      	ldrb	r3, [r7, #7]
 800527e:	f003 030f 	and.w	r3, r3, #15
 8005282:	3b04      	subs	r3, #4
 8005284:	0112      	lsls	r2, r2, #4
 8005286:	b2d2      	uxtb	r2, r2
 8005288:	440b      	add	r3, r1
 800528a:	761a      	strb	r2, [r3, #24]
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	e000e100 	.word	0xe000e100
 800529c:	e000ed00 	.word	0xe000ed00

080052a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b089      	sub	sp, #36	; 0x24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f003 0307 	and.w	r3, r3, #7
 80052b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	f1c3 0307 	rsb	r3, r3, #7
 80052ba:	2b04      	cmp	r3, #4
 80052bc:	bf28      	it	cs
 80052be:	2304      	movcs	r3, #4
 80052c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	3304      	adds	r3, #4
 80052c6:	2b06      	cmp	r3, #6
 80052c8:	d902      	bls.n	80052d0 <NVIC_EncodePriority+0x30>
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	3b03      	subs	r3, #3
 80052ce:	e000      	b.n	80052d2 <NVIC_EncodePriority+0x32>
 80052d0:	2300      	movs	r3, #0
 80052d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	fa02 f303 	lsl.w	r3, r2, r3
 80052de:	43da      	mvns	r2, r3
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	401a      	ands	r2, r3
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80052e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	fa01 f303 	lsl.w	r3, r1, r3
 80052f2:	43d9      	mvns	r1, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052f8:	4313      	orrs	r3, r2
         );
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3724      	adds	r7, #36	; 0x24
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
	...

08005308 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8005308:	b480      	push	{r7}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 8005312:	4a14      	ldr	r2, [pc, #80]	; (8005364 <LL_SYSCFG_SetEXTISource+0x5c>)
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	f003 0303 	and.w	r3, r3, #3
 800531a:	3302      	adds	r3, #2
 800531c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	0c1b      	lsrs	r3, r3, #16
 8005324:	43db      	mvns	r3, r3
 8005326:	ea02 0103 	and.w	r1, r2, r3
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	0c1b      	lsrs	r3, r3, #16
 800532e:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	fa93 f3a3 	rbit	r3, r3
 8005336:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	fab3 f383 	clz	r3, r3
 800533e:	b2db      	uxtb	r3, r3
 8005340:	f003 031f 	and.w	r3, r3, #31
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	409a      	lsls	r2, r3
 8005348:	4806      	ldr	r0, [pc, #24]	; (8005364 <LL_SYSCFG_SetEXTISource+0x5c>)
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	f003 0303 	and.w	r3, r3, #3
 8005350:	430a      	orrs	r2, r1
 8005352:	3302      	adds	r3, #2
 8005354:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8005358:	bf00      	nop
 800535a:	3714      	adds	r7, #20
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr
 8005364:	40010000 	.word	0x40010000

08005368 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8005368:	b480      	push	{r7}
 800536a:	b089      	sub	sp, #36	; 0x24
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	fa93 f3a3 	rbit	r3, r3
 8005382:	613b      	str	r3, [r7, #16]
  return result;
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	fab3 f383 	clz	r3, r3
 800538a:	b2db      	uxtb	r3, r3
 800538c:	005b      	lsls	r3, r3, #1
 800538e:	2103      	movs	r1, #3
 8005390:	fa01 f303 	lsl.w	r3, r1, r3
 8005394:	43db      	mvns	r3, r3
 8005396:	401a      	ands	r2, r3
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	fa93 f3a3 	rbit	r3, r3
 80053a2:	61bb      	str	r3, [r7, #24]
  return result;
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	fab3 f383 	clz	r3, r3
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	005b      	lsls	r3, r3, #1
 80053ae:	6879      	ldr	r1, [r7, #4]
 80053b0:	fa01 f303 	lsl.w	r3, r1, r3
 80053b4:	431a      	orrs	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	601a      	str	r2, [r3, #0]
}
 80053ba:	bf00      	nop
 80053bc:	3724      	adds	r7, #36	; 0x24
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr

080053c6 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80053c6:	b480      	push	{r7}
 80053c8:	b089      	sub	sp, #36	; 0x24
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	60f8      	str	r0, [r7, #12]
 80053ce:	60b9      	str	r1, [r7, #8]
 80053d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	68da      	ldr	r2, [r3, #12]
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	fa93 f3a3 	rbit	r3, r3
 80053e0:	613b      	str	r3, [r7, #16]
  return result;
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	fab3 f383 	clz	r3, r3
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	005b      	lsls	r3, r3, #1
 80053ec:	2103      	movs	r1, #3
 80053ee:	fa01 f303 	lsl.w	r3, r1, r3
 80053f2:	43db      	mvns	r3, r3
 80053f4:	401a      	ands	r2, r3
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	fa93 f3a3 	rbit	r3, r3
 8005400:	61bb      	str	r3, [r7, #24]
  return result;
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	fab3 f383 	clz	r3, r3
 8005408:	b2db      	uxtb	r3, r3
 800540a:	005b      	lsls	r3, r3, #1
 800540c:	6879      	ldr	r1, [r7, #4]
 800540e:	fa01 f303 	lsl.w	r3, r1, r3
 8005412:	431a      	orrs	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	60da      	str	r2, [r3, #12]
}
 8005418:	bf00      	nop
 800541a:	3724      	adds	r7, #36	; 0x24
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	683a      	ldr	r2, [r7, #0]
 8005432:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005448:	4b08      	ldr	r3, [pc, #32]	; (800546c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800544a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800544c:	4907      	ldr	r1, [pc, #28]	; (800546c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4313      	orrs	r3, r2
 8005452:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005454:	4b05      	ldr	r3, [pc, #20]	; (800546c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8005456:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4013      	ands	r3, r2
 800545c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800545e:	68fb      	ldr	r3, [r7, #12]
}
 8005460:	bf00      	nop
 8005462:	3714      	adds	r7, #20
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr
 800546c:	40021000 	.word	0x40021000

08005470 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b08a      	sub	sp, #40	; 0x28
 8005474:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8005476:	f107 031c 	add.w	r3, r7, #28
 800547a:	2200      	movs	r2, #0
 800547c:	601a      	str	r2, [r3, #0]
 800547e:	605a      	str	r2, [r3, #4]
 8005480:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005482:	1d3b      	adds	r3, r7, #4
 8005484:	2200      	movs	r2, #0
 8005486:	601a      	str	r2, [r3, #0]
 8005488:	605a      	str	r2, [r3, #4]
 800548a:	609a      	str	r2, [r3, #8]
 800548c:	60da      	str	r2, [r3, #12]
 800548e:	611a      	str	r2, [r3, #16]
 8005490:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8005492:	2004      	movs	r0, #4
 8005494:	f7ff ffd4 	bl	8005440 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8005498:	2020      	movs	r0, #32
 800549a:	f7ff ffd1 	bl	8005440 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800549e:	2001      	movs	r0, #1
 80054a0:	f7ff ffce 	bl	8005440 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80054a4:	2002      	movs	r0, #2
 80054a6:	f7ff ffcb 	bl	8005440 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 80054aa:	2108      	movs	r1, #8
 80054ac:	48d3      	ldr	r0, [pc, #844]	; (80057fc <MX_GPIO_Init+0x38c>)
 80054ae:	f7ff ffb9 	bl	8005424 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 80054b2:	2108      	movs	r1, #8
 80054b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054b8:	f7ff ffb4 	bl	8005424 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 80054bc:	2110      	movs	r1, #16
 80054be:	48cf      	ldr	r0, [pc, #828]	; (80057fc <MX_GPIO_Init+0x38c>)
 80054c0:	f7ff ffb0 	bl	8005424 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 80054c4:	2120      	movs	r1, #32
 80054c6:	48cd      	ldr	r0, [pc, #820]	; (80057fc <MX_GPIO_Init+0x38c>)
 80054c8:	f7ff ffac 	bl	8005424 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 80054cc:	2101      	movs	r1, #1
 80054ce:	48cc      	ldr	r0, [pc, #816]	; (8005800 <MX_GPIO_Init+0x390>)
 80054d0:	f7ff ffa8 	bl	8005424 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 80054d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80054d8:	48c8      	ldr	r0, [pc, #800]	; (80057fc <MX_GPIO_Init+0x38c>)
 80054da:	f7ff ffa3 	bl	8005424 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 80054de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80054e2:	48c6      	ldr	r0, [pc, #792]	; (80057fc <MX_GPIO_Init+0x38c>)
 80054e4:	f7ff ff9e 	bl	8005424 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 80054e8:	2140      	movs	r1, #64	; 0x40
 80054ea:	48c5      	ldr	r0, [pc, #788]	; (8005800 <MX_GPIO_Init+0x390>)
 80054ec:	f7ff ff9a 	bl	8005424 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 80054f0:	2180      	movs	r1, #128	; 0x80
 80054f2:	48c3      	ldr	r0, [pc, #780]	; (8005800 <MX_GPIO_Init+0x390>)
 80054f4:	f7ff ff96 	bl	8005424 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 80054f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80054fc:	48c0      	ldr	r0, [pc, #768]	; (8005800 <MX_GPIO_Init+0x390>)
 80054fe:	f7ff ff91 	bl	8005424 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 8005502:	49c0      	ldr	r1, [pc, #768]	; (8005804 <MX_GPIO_Init+0x394>)
 8005504:	2002      	movs	r0, #2
 8005506:	f7ff feff 	bl	8005308 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 800550a:	49bf      	ldr	r1, [pc, #764]	; (8005808 <MX_GPIO_Init+0x398>)
 800550c:	2002      	movs	r0, #2
 800550e:	f7ff fefb 	bl	8005308 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 8005512:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8005516:	2005      	movs	r0, #5
 8005518:	f7ff fef6 	bl	8005308 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 800551c:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8005520:	2005      	movs	r0, #5
 8005522:	f7ff fef1 	bl	8005308 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 8005526:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 800552a:	2002      	movs	r0, #2
 800552c:	f7ff feec 	bl	8005308 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8005530:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005534:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8005536:	2301      	movs	r3, #1
 8005538:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800553c:	2300      	movs	r3, #0
 800553e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8005542:	2302      	movs	r3, #2
 8005544:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8005548:	f107 031c 	add.w	r3, r7, #28
 800554c:	4618      	mov	r0, r3
 800554e:	f006 f821 	bl	800b594 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8005552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005556:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8005558:	2301      	movs	r3, #1
 800555a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800555e:	2300      	movs	r3, #0
 8005560:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8005564:	2302      	movs	r3, #2
 8005566:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800556a:	f107 031c 	add.w	r3, r7, #28
 800556e:	4618      	mov	r0, r3
 8005570:	f006 f810 	bl	800b594 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8005574:	2301      	movs	r3, #1
 8005576:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8005578:	2301      	movs	r3, #1
 800557a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800557e:	2300      	movs	r3, #0
 8005580:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8005584:	2302      	movs	r3, #2
 8005586:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800558a:	f107 031c 	add.w	r3, r7, #28
 800558e:	4618      	mov	r0, r3
 8005590:	f006 f800 	bl	800b594 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8005594:	2302      	movs	r3, #2
 8005596:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8005598:	2301      	movs	r3, #1
 800559a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800559e:	2300      	movs	r3, #0
 80055a0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80055a4:	2302      	movs	r3, #2
 80055a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80055aa:	f107 031c 	add.w	r3, r7, #28
 80055ae:	4618      	mov	r0, r3
 80055b0:	f005 fff0 	bl	800b594 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 80055b4:	2304      	movs	r3, #4
 80055b6:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80055b8:	2301      	movs	r3, #1
 80055ba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80055be:	2300      	movs	r3, #0
 80055c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80055c4:	2302      	movs	r3, #2
 80055c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80055ca:	f107 031c 	add.w	r3, r7, #28
 80055ce:	4618      	mov	r0, r3
 80055d0:	f005 ffe0 	bl	800b594 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 80055d4:	2201      	movs	r2, #1
 80055d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80055da:	4888      	ldr	r0, [pc, #544]	; (80057fc <MX_GPIO_Init+0x38c>)
 80055dc:	f7ff fef3 	bl	80053c6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 80055e0:	2201      	movs	r2, #1
 80055e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80055e6:	4885      	ldr	r0, [pc, #532]	; (80057fc <MX_GPIO_Init+0x38c>)
 80055e8:	f7ff feed 	bl	80053c6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 80055ec:	2201      	movs	r2, #1
 80055ee:	2101      	movs	r1, #1
 80055f0:	4886      	ldr	r0, [pc, #536]	; (800580c <MX_GPIO_Init+0x39c>)
 80055f2:	f7ff fee8 	bl	80053c6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 80055f6:	2201      	movs	r2, #1
 80055f8:	2102      	movs	r1, #2
 80055fa:	4884      	ldr	r0, [pc, #528]	; (800580c <MX_GPIO_Init+0x39c>)
 80055fc:	f7ff fee3 	bl	80053c6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 8005600:	2201      	movs	r2, #1
 8005602:	2104      	movs	r1, #4
 8005604:	487d      	ldr	r0, [pc, #500]	; (80057fc <MX_GPIO_Init+0x38c>)
 8005606:	f7ff fede 	bl	80053c6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 800560a:	2200      	movs	r2, #0
 800560c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005610:	487a      	ldr	r0, [pc, #488]	; (80057fc <MX_GPIO_Init+0x38c>)
 8005612:	f7ff fea9 	bl	8005368 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 8005616:	2200      	movs	r2, #0
 8005618:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800561c:	4877      	ldr	r0, [pc, #476]	; (80057fc <MX_GPIO_Init+0x38c>)
 800561e:	f7ff fea3 	bl	8005368 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 8005622:	2200      	movs	r2, #0
 8005624:	2101      	movs	r1, #1
 8005626:	4879      	ldr	r0, [pc, #484]	; (800580c <MX_GPIO_Init+0x39c>)
 8005628:	f7ff fe9e 	bl	8005368 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 800562c:	2200      	movs	r2, #0
 800562e:	2102      	movs	r1, #2
 8005630:	4876      	ldr	r0, [pc, #472]	; (800580c <MX_GPIO_Init+0x39c>)
 8005632:	f7ff fe99 	bl	8005368 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 8005636:	2200      	movs	r2, #0
 8005638:	2104      	movs	r1, #4
 800563a:	4870      	ldr	r0, [pc, #448]	; (80057fc <MX_GPIO_Init+0x38c>)
 800563c:	f7ff fe94 	bl	8005368 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 8005640:	2308      	movs	r3, #8
 8005642:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8005644:	2301      	movs	r3, #1
 8005646:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005648:	2300      	movs	r3, #0
 800564a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800564c:	2300      	movs	r3, #0
 800564e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8005650:	2302      	movs	r3, #2
 8005652:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 8005654:	1d3b      	adds	r3, r7, #4
 8005656:	4619      	mov	r1, r3
 8005658:	4868      	ldr	r0, [pc, #416]	; (80057fc <MX_GPIO_Init+0x38c>)
 800565a:	f006 f98e 	bl	800b97a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 800565e:	2308      	movs	r3, #8
 8005660:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8005662:	2301      	movs	r3, #1
 8005664:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005666:	2300      	movs	r3, #0
 8005668:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800566a:	2300      	movs	r3, #0
 800566c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800566e:	2300      	movs	r3, #0
 8005670:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 8005672:	1d3b      	adds	r3, r7, #4
 8005674:	4619      	mov	r1, r3
 8005676:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800567a:	f006 f97e 	bl	800b97a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 800567e:	2310      	movs	r3, #16
 8005680:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8005682:	2301      	movs	r3, #1
 8005684:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005686:	2300      	movs	r3, #0
 8005688:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800568a:	2300      	movs	r3, #0
 800568c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800568e:	2300      	movs	r3, #0
 8005690:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 8005692:	1d3b      	adds	r3, r7, #4
 8005694:	4619      	mov	r1, r3
 8005696:	4859      	ldr	r0, [pc, #356]	; (80057fc <MX_GPIO_Init+0x38c>)
 8005698:	f006 f96f 	bl	800b97a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 800569c:	2320      	movs	r3, #32
 800569e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80056a0:	2301      	movs	r3, #1
 80056a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80056a4:	2300      	movs	r3, #0
 80056a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80056a8:	2300      	movs	r3, #0
 80056aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80056ac:	2300      	movs	r3, #0
 80056ae:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 80056b0:	1d3b      	adds	r3, r7, #4
 80056b2:	4619      	mov	r1, r3
 80056b4:	4851      	ldr	r0, [pc, #324]	; (80057fc <MX_GPIO_Init+0x38c>)
 80056b6:	f006 f960 	bl	800b97a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 80056ba:	2301      	movs	r3, #1
 80056bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80056be:	2301      	movs	r3, #1
 80056c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80056c2:	2300      	movs	r3, #0
 80056c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80056c6:	2300      	movs	r3, #0
 80056c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80056ca:	2300      	movs	r3, #0
 80056cc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 80056ce:	1d3b      	adds	r3, r7, #4
 80056d0:	4619      	mov	r1, r3
 80056d2:	484b      	ldr	r0, [pc, #300]	; (8005800 <MX_GPIO_Init+0x390>)
 80056d4:	f006 f951 	bl	800b97a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 80056d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80056de:	2301      	movs	r3, #1
 80056e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80056e2:	2300      	movs	r3, #0
 80056e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80056e6:	2300      	movs	r3, #0
 80056e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80056ea:	2300      	movs	r3, #0
 80056ec:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 80056ee:	1d3b      	adds	r3, r7, #4
 80056f0:	4619      	mov	r1, r3
 80056f2:	4842      	ldr	r0, [pc, #264]	; (80057fc <MX_GPIO_Init+0x38c>)
 80056f4:	f006 f941 	bl	800b97a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 80056f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80056fe:	2301      	movs	r3, #1
 8005700:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005702:	2300      	movs	r3, #0
 8005704:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005706:	2300      	movs	r3, #0
 8005708:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800570a:	2300      	movs	r3, #0
 800570c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 800570e:	1d3b      	adds	r3, r7, #4
 8005710:	4619      	mov	r1, r3
 8005712:	483a      	ldr	r0, [pc, #232]	; (80057fc <MX_GPIO_Init+0x38c>)
 8005714:	f006 f931 	bl	800b97a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 8005718:	2340      	movs	r3, #64	; 0x40
 800571a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800571c:	2301      	movs	r3, #1
 800571e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005720:	2303      	movs	r3, #3
 8005722:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005724:	2300      	movs	r3, #0
 8005726:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005728:	2300      	movs	r3, #0
 800572a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 800572c:	1d3b      	adds	r3, r7, #4
 800572e:	4619      	mov	r1, r3
 8005730:	4833      	ldr	r0, [pc, #204]	; (8005800 <MX_GPIO_Init+0x390>)
 8005732:	f006 f922 	bl	800b97a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 8005736:	2380      	movs	r3, #128	; 0x80
 8005738:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800573a:	2301      	movs	r3, #1
 800573c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800573e:	2303      	movs	r3, #3
 8005740:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005742:	2300      	movs	r3, #0
 8005744:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005746:	2300      	movs	r3, #0
 8005748:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800574a:	1d3b      	adds	r3, r7, #4
 800574c:	4619      	mov	r1, r3
 800574e:	482c      	ldr	r0, [pc, #176]	; (8005800 <MX_GPIO_Init+0x390>)
 8005750:	f006 f913 	bl	800b97a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 8005754:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005758:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800575a:	2301      	movs	r3, #1
 800575c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800575e:	2303      	movs	r3, #3
 8005760:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005762:	2300      	movs	r3, #0
 8005764:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005766:	2300      	movs	r3, #0
 8005768:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 800576a:	1d3b      	adds	r3, r7, #4
 800576c:	4619      	mov	r1, r3
 800576e:	4824      	ldr	r0, [pc, #144]	; (8005800 <MX_GPIO_Init+0x390>)
 8005770:	f006 f903 	bl	800b97a <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8005774:	f7ff fd3e 	bl	80051f4 <__NVIC_GetPriorityGrouping>
 8005778:	4603      	mov	r3, r0
 800577a:	2200      	movs	r2, #0
 800577c:	2100      	movs	r1, #0
 800577e:	4618      	mov	r0, r3
 8005780:	f7ff fd8e 	bl	80052a0 <NVIC_EncodePriority>
 8005784:	4603      	mov	r3, r0
 8005786:	4619      	mov	r1, r3
 8005788:	2006      	movs	r0, #6
 800578a:	f7ff fd5f 	bl	800524c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 800578e:	2006      	movs	r0, #6
 8005790:	f7ff fd3e 	bl	8005210 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8005794:	f7ff fd2e 	bl	80051f4 <__NVIC_GetPriorityGrouping>
 8005798:	4603      	mov	r3, r0
 800579a:	2200      	movs	r2, #0
 800579c:	2100      	movs	r1, #0
 800579e:	4618      	mov	r0, r3
 80057a0:	f7ff fd7e 	bl	80052a0 <NVIC_EncodePriority>
 80057a4:	4603      	mov	r3, r0
 80057a6:	4619      	mov	r1, r3
 80057a8:	2007      	movs	r0, #7
 80057aa:	f7ff fd4f 	bl	800524c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 80057ae:	2007      	movs	r0, #7
 80057b0:	f7ff fd2e 	bl	8005210 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80057b4:	f7ff fd1e 	bl	80051f4 <__NVIC_GetPriorityGrouping>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2200      	movs	r2, #0
 80057bc:	2100      	movs	r1, #0
 80057be:	4618      	mov	r0, r3
 80057c0:	f7ff fd6e 	bl	80052a0 <NVIC_EncodePriority>
 80057c4:	4603      	mov	r3, r0
 80057c6:	4619      	mov	r1, r3
 80057c8:	2008      	movs	r0, #8
 80057ca:	f7ff fd3f 	bl	800524c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 80057ce:	2008      	movs	r0, #8
 80057d0:	f7ff fd1e 	bl	8005210 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80057d4:	f7ff fd0e 	bl	80051f4 <__NVIC_GetPriorityGrouping>
 80057d8:	4603      	mov	r3, r0
 80057da:	2200      	movs	r2, #0
 80057dc:	2100      	movs	r1, #0
 80057de:	4618      	mov	r0, r3
 80057e0:	f7ff fd5e 	bl	80052a0 <NVIC_EncodePriority>
 80057e4:	4603      	mov	r3, r0
 80057e6:	4619      	mov	r1, r3
 80057e8:	2028      	movs	r0, #40	; 0x28
 80057ea:	f7ff fd2f 	bl	800524c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 80057ee:	2028      	movs	r0, #40	; 0x28
 80057f0:	f7ff fd0e 	bl	8005210 <__NVIC_EnableIRQ>

}
 80057f4:	bf00      	nop
 80057f6:	3728      	adds	r7, #40	; 0x28
 80057f8:	46bd      	mov	sp, r7
 80057fa:	e009      	b.n	8005810 <MX_GPIO_Init+0x3a0>
 80057fc:	48000800 	.word	0x48000800
 8005800:	48000400 	.word	0x48000400
 8005804:	0f000003 	.word	0x0f000003
 8005808:	f0000003 	.word	0xf0000003
 800580c:	48001400 	.word	0x48001400
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop

08005814 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800581c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005820:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8005824:	f003 0301 	and.w	r3, r3, #1
 8005828:	2b00      	cmp	r3, #0
 800582a:	d013      	beq.n	8005854 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800582c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005830:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8005834:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00b      	beq.n	8005854 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800583c:	e000      	b.n	8005840 <ITM_SendChar+0x2c>
    {
      __NOP();
 800583e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8005840:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d0f9      	beq.n	800583e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800584a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	b2d2      	uxtb	r2, r2
 8005852:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8005854:	687b      	ldr	r3, [r7, #4]
}
 8005856:	4618      	mov	r0, r3
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr

08005862 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8005862:	b580      	push	{r7, lr}
 8005864:	b086      	sub	sp, #24
 8005866:	af00      	add	r7, sp, #0
 8005868:	60f8      	str	r0, [r7, #12]
 800586a:	60b9      	str	r1, [r7, #8]
 800586c:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 800586e:	2300      	movs	r3, #0
 8005870:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8005872:	2300      	movs	r3, #0
 8005874:	617b      	str	r3, [r7, #20]
 8005876:	e009      	b.n	800588c <_write+0x2a>
    ITM_SendChar((*ptr++));
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	1c5a      	adds	r2, r3, #1
 800587c:	60ba      	str	r2, [r7, #8]
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	4618      	mov	r0, r3
 8005882:	f7ff ffc7 	bl	8005814 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	3301      	adds	r3, #1
 800588a:	617b      	str	r3, [r7, #20]
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	429a      	cmp	r2, r3
 8005892:	dbf1      	blt.n	8005878 <_write+0x16>
  return len;
 8005894:	687b      	ldr	r3, [r7, #4]
}
 8005896:	4618      	mov	r0, r3
 8005898:	3718      	adds	r7, #24
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}

0800589e <HAL_DAC_ErrorCallbackCh1>:

void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800589e:	b480      	push	{r7}
 80058a0:	b083      	sub	sp, #12
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
	// do something
}
 80058a6:	bf00      	nop
 80058a8:	370c      	adds	r7, #12
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
	...

080058b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80058ba:	f000 ff52 	bl	8006762 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80058be:	f000 f891 	bl	80059e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80058c2:	f7ff fdd5 	bl	8005470 <MX_GPIO_Init>
  MX_DMA_Init();
 80058c6:	f7ff fc0f 	bl	80050e8 <MX_DMA_Init>
  MX_DAC1_Init();
 80058ca:	f7ff fabf 	bl	8004e4c <MX_DAC1_Init>
  MX_DAC2_Init();
 80058ce:	f7ff fb07 	bl	8004ee0 <MX_DAC2_Init>
  MX_ADC1_Init();
 80058d2:	f7ff f97d 	bl	8004bd0 <MX_ADC1_Init>
  MX_COMP1_Init();
 80058d6:	f7ff fa5f 	bl	8004d98 <MX_COMP1_Init>
  MX_TIM2_Init();
 80058da:	f000 fc37 	bl	800614c <MX_TIM2_Init>
  MX_TIM17_Init();
 80058de:	f000 fdd1 	bl	8006484 <MX_TIM17_Init>
  MX_SPI3_Init();
 80058e2:	f000 f92b 	bl	8005b3c <MX_SPI3_Init>
  MX_RNG_Init();
 80058e6:	f000 f91b 	bl	8005b20 <MX_RNG_Init>
  MX_TIM1_Init();
 80058ea:	f000 fbbf 	bl	800606c <MX_TIM1_Init>
  MX_TIM8_Init();
 80058ee:	f000 fce7 	bl	80062c0 <MX_TIM8_Init>
  MX_TIM16_Init();
 80058f2:	f000 fd9f 	bl	8006434 <MX_TIM16_Init>
  MX_TIM15_Init();
 80058f6:	f000 fd4b 	bl	8006390 <MX_TIM15_Init>
  MX_TIM5_Init();
 80058fa:	f000 fc91 	bl	8006220 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  DT_InitRegister();
 80058fe:	f7fd ff6b 	bl	80037d8 <DT_InitRegister>

  // main signal function output (external)
  FuncO_Init();
 8005902:	f7fe f95d 	bl	8003bc0 <FuncO_Init>
  FuncO_ApplyPreset_Fast(eDefaultFuncPreset);
 8005906:	2000      	movs	r0, #0
 8005908:	f7fe f9d0 	bl	8003cac <FuncO_ApplyPreset_Fast>

  //TIM8->ARR = sin1_max_arr;

  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 800590c:	2110      	movs	r1, #16
 800590e:	482b      	ldr	r0, [pc, #172]	; (80059bc <main+0x108>)
 8005910:	f002 fc2b 	bl	800816a <HAL_DAC_Start>
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, square_data_table, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, unitimpulse_data_table, UNITIMPULSE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_data_table, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_rev_data_table, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
  HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, triangle_data_table_3600, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005914:	2300      	movs	r3, #0
 8005916:	9300      	str	r3, [sp, #0]
 8005918:	2378      	movs	r3, #120	; 0x78
 800591a:	4a29      	ldr	r2, [pc, #164]	; (80059c0 <main+0x10c>)
 800591c:	2100      	movs	r1, #0
 800591e:	4829      	ldr	r0, [pc, #164]	; (80059c4 <main+0x110>)
 8005920:	f002 fc76 	bl	8008210 <HAL_DAC_Start_DMA>
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);

#ifndef DISABLE_ALL_TIMERS

  // single clock to run all DAC channels. TODO add independent clocks
  HAL_TIM_Base_Start(&htim8);
 8005924:	4828      	ldr	r0, [pc, #160]	; (80059c8 <main+0x114>)
 8005926:	f004 fd5b 	bl	800a3e0 <HAL_TIM_Base_Start>
  FreqO_ApplyPreset(eDefaultFreqPreset);
 800592a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800592e:	f7fe f8d1 	bl	8003ad4 <FreqO_ApplyPreset>

#endif //DISABLE_ALL_TIMERS

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 8005932:	2201      	movs	r2, #1
 8005934:	2108      	movs	r1, #8
 8005936:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800593a:	f003 fc57 	bl	80091ec <HAL_GPIO_WritePin>

  // PGA gain
  //GO_ApplyPreset_Fast(eDefaultGainPreset);
  VPP_ApplyPreset_Fast(eDefaultVppPreset);
 800593e:	2059      	movs	r0, #89	; 0x59
 8005940:	f7fe fbd8 	bl	80040f4 <VPP_ApplyPreset_Fast>
  //HAL_TIM_Base_Start_IT(&htim17);
#endif	//DISABLE_ALL_TIMERS


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 8005944:	2200      	movs	r2, #0
 8005946:	f44f 7180 	mov.w	r1, #256	; 0x100
 800594a:	4820      	ldr	r0, [pc, #128]	; (80059cc <main+0x118>)
 800594c:	f003 fc4e 	bl	80091ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 8005950:	2200      	movs	r2, #0
 8005952:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005956:	481d      	ldr	r0, [pc, #116]	; (80059cc <main+0x118>)
 8005958:	f003 fc48 	bl	80091ec <HAL_GPIO_WritePin>

#ifdef TIM_TRIGGER_MODE
  // input capture on in TIM2 slave-mode TF1FP1

  // set HW switch to direct ext. trigger input to TIM pin
  HAL_GPIO_WritePin(TRIGMODE_GPIO_Port, TRIGMODE_Pin, GPIO_PIN_SET);
 800595c:	2201      	movs	r2, #1
 800595e:	2108      	movs	r1, #8
 8005960:	481a      	ldr	r0, [pc, #104]	; (80059cc <main+0x118>)
 8005962:	f003 fc43 	bl	80091ec <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);	// TS5A3357 Pin6
  //HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); // TS5A3357 Pin5

  // clear slave mode select reg
  TIM2->SMCR &= ~(TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2);
 8005966:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005970:	f023 0307 	bic.w	r3, r3, #7
 8005974:	6093      	str	r3, [r2, #8]

  // slave mode
  //TIM2->SMCR |= TIM_SMCR_SMS_2;						// SLAVE MODE: RESET
  TIM2->SMCR |= TIM_SMCR_SMS_0 | TIM_SMCR_SMS_2;	// SLAVE MODE: GATED
 8005976:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005980:	f043 0305 	orr.w	r3, r3, #5
 8005984:	6093      	str	r3, [r2, #8]
  //TIM2->SMCR |= TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;	// SLAVE MODE: TRIGGER

#ifndef DISABLE_ALL_TIMERS
  HAL_TIM_Base_Start_IT(&htim2);
 8005986:	4812      	ldr	r0, [pc, #72]	; (80059d0 <main+0x11c>)
 8005988:	f004 fd58 	bl	800a43c <HAL_TIM_Base_Start_IT>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 800598c:	4811      	ldr	r0, [pc, #68]	; (80059d4 <main+0x120>)
 800598e:	f004 fd27 	bl	800a3e0 <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 8005992:	4b11      	ldr	r3, [pc, #68]	; (80059d8 <main+0x124>)
 8005994:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005998:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 800599a:	4b0f      	ldr	r3, [pc, #60]	; (80059d8 <main+0x124>)
 800599c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059a0:	62da      	str	r2, [r3, #44]	; 0x2c



  // TFT lib enable
  DM_Init();
 80059a2:	f7fb f929 	bl	8000bf8 <DM_Init>
  DM_PostInit();
 80059a6:	f7fb f935 	bl	8000c14 <DM_PostInit>

  // DM_UpdateDisplay()
  HAL_TIM_Base_Start_IT(&htim15);
 80059aa:	480c      	ldr	r0, [pc, #48]	; (80059dc <main+0x128>)
 80059ac:	f004 fd46 	bl	800a43c <HAL_TIM_Base_Start_IT>

  //HAL_TIM_Base_Start_IT(&htim16);

  // debounce timer
  HAL_TIM_Base_Start(&htim5);
 80059b0:	480b      	ldr	r0, [pc, #44]	; (80059e0 <main+0x12c>)
 80059b2:	f004 fd15 	bl	800a3e0 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	EM_ProcessEvent();
 80059b6:	f7fd fa31 	bl	8002e1c <EM_ProcessEvent>
 80059ba:	e7fc      	b.n	80059b6 <main+0x102>
 80059bc:	200023ec 	.word	0x200023ec
 80059c0:	20001928 	.word	0x20001928
 80059c4:	200023d8 	.word	0x200023d8
 80059c8:	20002524 	.word	0x20002524
 80059cc:	48000800 	.word	0x48000800
 80059d0:	200026a0 	.word	0x200026a0
 80059d4:	20002654 	.word	0x20002654
 80059d8:	40001000 	.word	0x40001000
 80059dc:	20002570 	.word	0x20002570
 80059e0:	20002608 	.word	0x20002608

080059e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b0a8      	sub	sp, #160	; 0xa0
 80059e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80059ea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80059ee:	2238      	movs	r2, #56	; 0x38
 80059f0:	2100      	movs	r1, #0
 80059f2:	4618      	mov	r0, r3
 80059f4:	f007 f81e 	bl	800ca34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80059f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80059fc:	2200      	movs	r2, #0
 80059fe:	601a      	str	r2, [r3, #0]
 8005a00:	605a      	str	r2, [r3, #4]
 8005a02:	609a      	str	r2, [r3, #8]
 8005a04:	60da      	str	r2, [r3, #12]
 8005a06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005a08:	463b      	mov	r3, r7
 8005a0a:	2254      	movs	r2, #84	; 0x54
 8005a0c:	2100      	movs	r1, #0
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f007 f810 	bl	800ca34 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8005a14:	2000      	movs	r0, #0
 8005a16:	f003 fc01 	bl	800921c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8005a1a:	2322      	movs	r3, #34	; 0x22
 8005a1c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005a1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a22:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005a24:	2340      	movs	r3, #64	; 0x40
 8005a26:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005a2e:	2302      	movs	r3, #2
 8005a30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005a34:	2302      	movs	r3, #2
 8005a36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8005a3a:	2302      	movs	r3, #2
 8005a3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8005a40:	232a      	movs	r3, #42	; 0x2a
 8005a42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005a46:	2302      	movs	r3, #2
 8005a48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8005a4c:	2304      	movs	r3, #4
 8005a4e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005a52:	2302      	movs	r3, #2
 8005a54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005a58:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f003 fc81 	bl	8009364 <HAL_RCC_OscConfig>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d001      	beq.n	8005a6c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8005a68:	f000 f82a 	bl	8005ac0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005a6c:	230f      	movs	r3, #15
 8005a6e:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005a70:	2303      	movs	r3, #3
 8005a72:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005a74:	2300      	movs	r3, #0
 8005a76:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8005a80:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005a84:	2108      	movs	r1, #8
 8005a86:	4618      	mov	r0, r3
 8005a88:	f003 ff84 	bl	8009994 <HAL_RCC_ClockConfig>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d001      	beq.n	8005a96 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8005a92:	f000 f815 	bl	8005ac0 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 8005a96:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005a9a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8005aa0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005aa4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005aa6:	463b      	mov	r3, r7
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f004 f963 	bl	8009d74 <HAL_RCCEx_PeriphCLKConfig>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d001      	beq.n	8005ab8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8005ab4:	f000 f804 	bl	8005ac0 <Error_Handler>
  }
}
 8005ab8:	bf00      	nop
 8005aba:	37a0      	adds	r7, #160	; 0xa0
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005ac4:	bf00      	nop
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 8005ace:	b480      	push	{r7}
 8005ad0:	b083      	sub	sp, #12
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f043 0204 	orr.w	r2, r3, #4
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	601a      	str	r2, [r3, #0]
}
 8005ae2:	bf00      	nop
 8005ae4:	370c      	adds	r7, #12
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
	...

08005af0 <LL_AHB2_GRP1_EnableClock>:
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005af8:	4b08      	ldr	r3, [pc, #32]	; (8005b1c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8005afa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005afc:	4907      	ldr	r1, [pc, #28]	; (8005b1c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005b04:	4b05      	ldr	r3, [pc, #20]	; (8005b1c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8005b06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
}
 8005b10:	bf00      	nop
 8005b12:	3714      	adds	r7, #20
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr
 8005b1c:	40021000 	.word	0x40021000

08005b20 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 8005b24:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005b28:	f7ff ffe2 	bl	8005af0 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 8005b2c:	4802      	ldr	r0, [pc, #8]	; (8005b38 <MX_RNG_Init+0x18>)
 8005b2e:	f7ff ffce 	bl	8005ace <LL_RNG_Enable>

}
 8005b32:	bf00      	nop
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	50060800 	.word	0x50060800

08005b3c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8005b40:	4b1b      	ldr	r3, [pc, #108]	; (8005bb0 <MX_SPI3_Init+0x74>)
 8005b42:	4a1c      	ldr	r2, [pc, #112]	; (8005bb4 <MX_SPI3_Init+0x78>)
 8005b44:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8005b46:	4b1a      	ldr	r3, [pc, #104]	; (8005bb0 <MX_SPI3_Init+0x74>)
 8005b48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005b4c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8005b4e:	4b18      	ldr	r3, [pc, #96]	; (8005bb0 <MX_SPI3_Init+0x74>)
 8005b50:	2200      	movs	r2, #0
 8005b52:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8005b54:	4b16      	ldr	r3, [pc, #88]	; (8005bb0 <MX_SPI3_Init+0x74>)
 8005b56:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005b5a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b5c:	4b14      	ldr	r3, [pc, #80]	; (8005bb0 <MX_SPI3_Init+0x74>)
 8005b5e:	2200      	movs	r2, #0
 8005b60:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005b62:	4b13      	ldr	r3, [pc, #76]	; (8005bb0 <MX_SPI3_Init+0x74>)
 8005b64:	2200      	movs	r2, #0
 8005b66:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8005b68:	4b11      	ldr	r3, [pc, #68]	; (8005bb0 <MX_SPI3_Init+0x74>)
 8005b6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b6e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8005b70:	4b0f      	ldr	r3, [pc, #60]	; (8005bb0 <MX_SPI3_Init+0x74>)
 8005b72:	2210      	movs	r2, #16
 8005b74:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005b76:	4b0e      	ldr	r3, [pc, #56]	; (8005bb0 <MX_SPI3_Init+0x74>)
 8005b78:	2200      	movs	r2, #0
 8005b7a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8005b7c:	4b0c      	ldr	r3, [pc, #48]	; (8005bb0 <MX_SPI3_Init+0x74>)
 8005b7e:	2200      	movs	r2, #0
 8005b80:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b82:	4b0b      	ldr	r3, [pc, #44]	; (8005bb0 <MX_SPI3_Init+0x74>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8005b88:	4b09      	ldr	r3, [pc, #36]	; (8005bb0 <MX_SPI3_Init+0x74>)
 8005b8a:	2207      	movs	r2, #7
 8005b8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005b8e:	4b08      	ldr	r3, [pc, #32]	; (8005bb0 <MX_SPI3_Init+0x74>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005b94:	4b06      	ldr	r3, [pc, #24]	; (8005bb0 <MX_SPI3_Init+0x74>)
 8005b96:	2208      	movs	r2, #8
 8005b98:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8005b9a:	4805      	ldr	r0, [pc, #20]	; (8005bb0 <MX_SPI3_Init+0x74>)
 8005b9c:	f004 fb36 	bl	800a20c <HAL_SPI_Init>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d001      	beq.n	8005baa <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8005ba6:	f7ff ff8b 	bl	8005ac0 <Error_Handler>
  }

}
 8005baa:	bf00      	nop
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	200024c0 	.word	0x200024c0
 8005bb4:	40003c00 	.word	0x40003c00

08005bb8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b08a      	sub	sp, #40	; 0x28
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bc0:	f107 0314 	add.w	r3, r7, #20
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	601a      	str	r2, [r3, #0]
 8005bc8:	605a      	str	r2, [r3, #4]
 8005bca:	609a      	str	r2, [r3, #8]
 8005bcc:	60da      	str	r2, [r3, #12]
 8005bce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a17      	ldr	r2, [pc, #92]	; (8005c34 <HAL_SPI_MspInit+0x7c>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d128      	bne.n	8005c2c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005bda:	4b17      	ldr	r3, [pc, #92]	; (8005c38 <HAL_SPI_MspInit+0x80>)
 8005bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bde:	4a16      	ldr	r2, [pc, #88]	; (8005c38 <HAL_SPI_MspInit+0x80>)
 8005be0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005be4:	6593      	str	r3, [r2, #88]	; 0x58
 8005be6:	4b14      	ldr	r3, [pc, #80]	; (8005c38 <HAL_SPI_MspInit+0x80>)
 8005be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bee:	613b      	str	r3, [r7, #16]
 8005bf0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005bf2:	4b11      	ldr	r3, [pc, #68]	; (8005c38 <HAL_SPI_MspInit+0x80>)
 8005bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bf6:	4a10      	ldr	r2, [pc, #64]	; (8005c38 <HAL_SPI_MspInit+0x80>)
 8005bf8:	f043 0304 	orr.w	r3, r3, #4
 8005bfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005bfe:	4b0e      	ldr	r3, [pc, #56]	; (8005c38 <HAL_SPI_MspInit+0x80>)
 8005c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c02:	f003 0304 	and.w	r3, r3, #4
 8005c06:	60fb      	str	r3, [r7, #12]
 8005c08:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8005c0a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005c0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c10:	2302      	movs	r3, #2
 8005c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c14:	2300      	movs	r3, #0
 8005c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005c1c:	2306      	movs	r3, #6
 8005c1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c20:	f107 0314 	add.w	r3, r7, #20
 8005c24:	4619      	mov	r1, r3
 8005c26:	4805      	ldr	r0, [pc, #20]	; (8005c3c <HAL_SPI_MspInit+0x84>)
 8005c28:	f003 f95e 	bl	8008ee8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8005c2c:	bf00      	nop
 8005c2e:	3728      	adds	r7, #40	; 0x28
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	40003c00 	.word	0x40003c00
 8005c38:	40021000 	.word	0x40021000
 8005c3c:	48000800 	.word	0x48000800

08005c40 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8005c40:	b480      	push	{r7}
 8005c42:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005c44:	4b05      	ldr	r3, [pc, #20]	; (8005c5c <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	4a04      	ldr	r2, [pc, #16]	; (8005c5c <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8005c4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c4e:	6093      	str	r3, [r2, #8]
}
 8005c50:	bf00      	nop
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	40007000 	.word	0x40007000

08005c60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c66:	4b0f      	ldr	r3, [pc, #60]	; (8005ca4 <HAL_MspInit+0x44>)
 8005c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c6a:	4a0e      	ldr	r2, [pc, #56]	; (8005ca4 <HAL_MspInit+0x44>)
 8005c6c:	f043 0301 	orr.w	r3, r3, #1
 8005c70:	6613      	str	r3, [r2, #96]	; 0x60
 8005c72:	4b0c      	ldr	r3, [pc, #48]	; (8005ca4 <HAL_MspInit+0x44>)
 8005c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	607b      	str	r3, [r7, #4]
 8005c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c7e:	4b09      	ldr	r3, [pc, #36]	; (8005ca4 <HAL_MspInit+0x44>)
 8005c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c82:	4a08      	ldr	r2, [pc, #32]	; (8005ca4 <HAL_MspInit+0x44>)
 8005c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c88:	6593      	str	r3, [r2, #88]	; 0x58
 8005c8a:	4b06      	ldr	r3, [pc, #24]	; (8005ca4 <HAL_MspInit+0x44>)
 8005c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c92:	603b      	str	r3, [r7, #0]
 8005c94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8005c96:	f7ff ffd3 	bl	8005c40 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005c9a:	bf00      	nop
 8005c9c:	3708      	adds	r7, #8
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	40021000 	.word	0x40021000

08005ca8 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8005cb0:	4b07      	ldr	r3, [pc, #28]	; (8005cd0 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8005cb2:	695a      	ldr	r2, [r3, #20]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d101      	bne.n	8005cc2 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e000      	b.n	8005cc4 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr
 8005cd0:	40010400 	.word	0x40010400

08005cd4 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8005cdc:	4a04      	ldr	r2, [pc, #16]	; (8005cf0 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6153      	str	r3, [r2, #20]
}
 8005ce2:	bf00      	nop
 8005ce4:	370c      	adds	r7, #12
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	40010400 	.word	0x40010400

08005cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005cf8:	bf00      	nop
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr

08005d02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005d02:	b480      	push	{r7}
 8005d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005d06:	e7fe      	b.n	8005d06 <HardFault_Handler+0x4>

08005d08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005d0c:	e7fe      	b.n	8005d0c <MemManage_Handler+0x4>

08005d0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005d0e:	b480      	push	{r7}
 8005d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005d12:	e7fe      	b.n	8005d12 <BusFault_Handler+0x4>

08005d14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005d14:	b480      	push	{r7}
 8005d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005d18:	e7fe      	b.n	8005d18 <UsageFault_Handler+0x4>

08005d1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005d1a:	b480      	push	{r7}
 8005d1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005d1e:	bf00      	nop
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005d2c:	bf00      	nop
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr

08005d36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005d36:	b480      	push	{r7}
 8005d38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005d3a:	bf00      	nop
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005d48:	f000 fd5e 	bl	8006808 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005d4c:	bf00      	nop
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0))
 8005d54:	2001      	movs	r0, #1
 8005d56:	f7ff ffa7 	bl	8005ca8 <LL_EXTI_IsActiveFlag_0_31>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d005      	beq.n	8005d6c <EXTI0_IRQHandler+0x1c>
	{
		EM_SetNewEvent(evRedBtn);
 8005d60:	2004      	movs	r0, #4
 8005d62:	f7fd fcaf 	bl	80036c4 <EM_SetNewEvent>
		printf("'Red' BTN3_EXTI0_Pin\n");
 8005d66:	4807      	ldr	r0, [pc, #28]	; (8005d84 <EXTI0_IRQHandler+0x34>)
 8005d68:	f007 fb24 	bl	800d3b4 <puts>
	}

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8005d6c:	2001      	movs	r0, #1
 8005d6e:	f7ff ff9b 	bl	8005ca8 <LL_EXTI_IsActiveFlag_0_31>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d002      	beq.n	8005d7e <EXTI0_IRQHandler+0x2e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8005d78:	2001      	movs	r0, #1
 8005d7a:	f7ff ffab 	bl	8005cd4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8005d7e:	bf00      	nop
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	0800ff30 	.word	0x0800ff30

08005d88 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1))
 8005d8c:	2002      	movs	r0, #2
 8005d8e:	f7ff ff8b 	bl	8005ca8 <LL_EXTI_IsActiveFlag_0_31>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d005      	beq.n	8005da4 <EXTI1_IRQHandler+0x1c>
	{
		EM_SetNewEvent(evGreenBtn);
 8005d98:	2002      	movs	r0, #2
 8005d9a:	f7fd fc93 	bl	80036c4 <EM_SetNewEvent>
		printf("'Green' BTN4_EXTI1_Pin\n");
 8005d9e:	4807      	ldr	r0, [pc, #28]	; (8005dbc <EXTI1_IRQHandler+0x34>)
 8005da0:	f007 fb08 	bl	800d3b4 <puts>
	}


  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 8005da4:	2002      	movs	r0, #2
 8005da6:	f7ff ff7f 	bl	8005ca8 <LL_EXTI_IsActiveFlag_0_31>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d002      	beq.n	8005db6 <EXTI1_IRQHandler+0x2e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 8005db0:	2002      	movs	r0, #2
 8005db2:	f7ff ff8f 	bl	8005cd4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8005db6:	bf00      	nop
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	0800ff48 	.word	0x0800ff48

08005dc0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

	if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2))
 8005dc4:	2004      	movs	r0, #4
 8005dc6:	f7ff ff6f 	bl	8005ca8 <LL_EXTI_IsActiveFlag_0_31>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d005      	beq.n	8005ddc <EXTI2_IRQHandler+0x1c>
	{
		EM_SetNewEvent(evEncoderPush);
 8005dd0:	2006      	movs	r0, #6
 8005dd2:	f7fd fc77 	bl	80036c4 <EM_SetNewEvent>
		printf("'EncoderPush' ENC_EXTI2_Pin\n");
 8005dd6:	4807      	ldr	r0, [pc, #28]	; (8005df4 <EXTI2_IRQHandler+0x34>)
 8005dd8:	f007 faec 	bl	800d3b4 <puts>
	}


  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8005ddc:	2004      	movs	r0, #4
 8005dde:	f7ff ff63 	bl	8005ca8 <LL_EXTI_IsActiveFlag_0_31>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d002      	beq.n	8005dee <EXTI2_IRQHandler+0x2e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 8005de8:	2004      	movs	r0, #4
 8005dea:	f7ff ff73 	bl	8005cd4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8005dee:	bf00      	nop
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	0800ff60 	.word	0x0800ff60

08005df8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	//printf("Test\n");
	//printf("%lu\n", trigger_input[0]);
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005dfc:	4802      	ldr	r0, [pc, #8]	; (8005e08 <DMA1_Channel1_IRQHandler+0x10>)
 8005dfe:	f002 ff23 	bl	8008c48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005e02:	bf00      	nop
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	20002354 	.word	0x20002354

08005e0c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8005e10:	4802      	ldr	r0, [pc, #8]	; (8005e1c <DMA1_Channel2_IRQHandler+0x10>)
 8005e12:	f002 ff19 	bl	8008c48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8005e16:	bf00      	nop
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	20002400 	.word	0x20002400

08005e20 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8005e24:	4802      	ldr	r0, [pc, #8]	; (8005e30 <DMA1_Channel3_IRQHandler+0x10>)
 8005e26:	f002 ff0f 	bl	8008c48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005e2a:	bf00      	nop
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	20002460 	.word	0x20002460

08005e34 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	DM_UpdateDisplay();
 8005e38:	f7fb f810 	bl	8000e5c <DM_UpdateDisplay>
	{
		printf("Encoder turned\n");
		TIM1->SR &= ~(TIM_SR_IDXF);
	}
*/
	if((TIM1->SR & TIM_SR_DIRF) == TIM_SR_DIRF)
 8005e3c:	4b0d      	ldr	r3, [pc, #52]	; (8005e74 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e48:	d10b      	bne.n	8005e62 <TIM1_BRK_TIM15_IRQHandler+0x2e>
	{
		EM_SetNewEvent(evEncoderSet);
 8005e4a:	2005      	movs	r0, #5
 8005e4c:	f7fd fc3a 	bl	80036c4 <EM_SetNewEvent>
		printf("Encoder new direction\n");
 8005e50:	4809      	ldr	r0, [pc, #36]	; (8005e78 <TIM1_BRK_TIM15_IRQHandler+0x44>)
 8005e52:	f007 faaf 	bl	800d3b4 <puts>
		TIM1->SR &= ~(TIM_SR_DIRF);
 8005e56:	4b07      	ldr	r3, [pc, #28]	; (8005e74 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	4a06      	ldr	r2, [pc, #24]	; (8005e74 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 8005e5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e60:	6113      	str	r3, [r2, #16]

	}
  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005e62:	4806      	ldr	r0, [pc, #24]	; (8005e7c <TIM1_BRK_TIM15_IRQHandler+0x48>)
 8005e64:	f004 fbf5 	bl	800a652 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8005e68:	4805      	ldr	r0, [pc, #20]	; (8005e80 <TIM1_BRK_TIM15_IRQHandler+0x4c>)
 8005e6a:	f004 fbf2 	bl	800a652 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8005e6e:	bf00      	nop
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	40012c00 	.word	0x40012c00
 8005e78:	0800ff7c 	.word	0x0800ff7c
 8005e7c:	20002654 	.word	0x20002654
 8005e80:	20002570 	.word	0x20002570

08005e84 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	//snprintf(control_pressed, sizeof(control_pressed), " ");
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005e88:	4803      	ldr	r0, [pc, #12]	; (8005e98 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8005e8a:	f004 fbe2 	bl	800a652 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8005e8e:	4803      	ldr	r0, [pc, #12]	; (8005e9c <TIM1_UP_TIM16_IRQHandler+0x18>)
 8005e90:	f004 fbdf 	bl	800a652 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005e94:	bf00      	nop
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	20002654 	.word	0x20002654
 8005e9c:	200026ec 	.word	0x200026ec

08005ea0 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	update_dc_bias_sweep();
 8005ea4:	f7ff f95a 	bl	800515c <update_dc_bias_sweep>




  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005ea8:	4803      	ldr	r0, [pc, #12]	; (8005eb8 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8005eaa:	f004 fbd2 	bl	800a652 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8005eae:	4803      	ldr	r0, [pc, #12]	; (8005ebc <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 8005eb0:	f004 fbcf 	bl	800a652 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8005eb4:	bf00      	nop
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	20002654 	.word	0x20002654
 8005ebc:	200025bc 	.word	0x200025bc

08005ec0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005ec4:	4802      	ldr	r0, [pc, #8]	; (8005ed0 <TIM2_IRQHandler+0x10>)
 8005ec6:	f004 fbc4 	bl	800a652 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005eca:	bf00      	nop
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	200026a0 	.word	0x200026a0

08005ed4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */


	if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14))
 8005ed8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005edc:	f7ff fee4 	bl	8005ca8 <LL_EXTI_IsActiveFlag_0_31>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d005      	beq.n	8005ef2 <EXTI15_10_IRQHandler+0x1e>
	{

		EM_SetNewEvent(evBlueBtn);
 8005ee6:	2001      	movs	r0, #1
 8005ee8:	f7fd fbec 	bl	80036c4 <EM_SetNewEvent>
		printf("'Blue' BTN1_EXTI14_Pin\n");
 8005eec:	4813      	ldr	r0, [pc, #76]	; (8005f3c <EXTI15_10_IRQHandler+0x68>)
 8005eee:	f007 fa61 	bl	800d3b4 <puts>
	}
	if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15))
 8005ef2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005ef6:	f7ff fed7 	bl	8005ca8 <LL_EXTI_IsActiveFlag_0_31>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d005      	beq.n	8005f0c <EXTI15_10_IRQHandler+0x38>
	{
		EM_SetNewEvent(evYellowBtn);
 8005f00:	2003      	movs	r0, #3
 8005f02:	f7fd fbdf 	bl	80036c4 <EM_SetNewEvent>
		printf("'Yellow' BTN2_EXTI15_Pin\n");
 8005f06:	480e      	ldr	r0, [pc, #56]	; (8005f40 <EXTI15_10_IRQHandler+0x6c>)
 8005f08:	f007 fa54 	bl	800d3b4 <puts>
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8005f0c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005f10:	f7ff feca 	bl	8005ca8 <LL_EXTI_IsActiveFlag_0_31>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d003      	beq.n	8005f22 <EXTI15_10_IRQHandler+0x4e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8005f1a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005f1e:	f7ff fed9 	bl	8005cd4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8005f22:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005f26:	f7ff febf 	bl	8005ca8 <LL_EXTI_IsActiveFlag_0_31>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d003      	beq.n	8005f38 <EXTI15_10_IRQHandler+0x64>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8005f30:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005f34:	f7ff fece 	bl	8005cd4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005f38:	bf00      	nop
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	0800ff94 	.word	0x0800ff94
 8005f40:	0800ffac 	.word	0x0800ffac

08005f44 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b086      	sub	sp, #24
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f50:	2300      	movs	r3, #0
 8005f52:	617b      	str	r3, [r7, #20]
 8005f54:	e00a      	b.n	8005f6c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005f56:	f3af 8000 	nop.w
 8005f5a:	4601      	mov	r1, r0
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	1c5a      	adds	r2, r3, #1
 8005f60:	60ba      	str	r2, [r7, #8]
 8005f62:	b2ca      	uxtb	r2, r1
 8005f64:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	617b      	str	r3, [r7, #20]
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	dbf0      	blt.n	8005f56 <_read+0x12>
	}

return len;
 8005f74:	687b      	ldr	r3, [r7, #4]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3718      	adds	r7, #24
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <_close>:
	}
	return len;
}

int _close(int file)
{
 8005f7e:	b480      	push	{r7}
 8005f80:	b083      	sub	sp, #12
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
	return -1;
 8005f86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	370c      	adds	r7, #12
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr

08005f96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005f96:	b480      	push	{r7}
 8005f98:	b083      	sub	sp, #12
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
 8005f9e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005fa6:	605a      	str	r2, [r3, #4]
	return 0;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	370c      	adds	r7, #12
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <_isatty>:

int _isatty(int file)
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b083      	sub	sp, #12
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
	return 1;
 8005fbe:	2301      	movs	r3, #1
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b085      	sub	sp, #20
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	607a      	str	r2, [r7, #4]
	return 0;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3714      	adds	r7, #20
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr
	...

08005fe8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005ff0:	4b11      	ldr	r3, [pc, #68]	; (8006038 <_sbrk+0x50>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d102      	bne.n	8005ffe <_sbrk+0x16>
		heap_end = &end;
 8005ff8:	4b0f      	ldr	r3, [pc, #60]	; (8006038 <_sbrk+0x50>)
 8005ffa:	4a10      	ldr	r2, [pc, #64]	; (800603c <_sbrk+0x54>)
 8005ffc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005ffe:	4b0e      	ldr	r3, [pc, #56]	; (8006038 <_sbrk+0x50>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006004:	4b0c      	ldr	r3, [pc, #48]	; (8006038 <_sbrk+0x50>)
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4413      	add	r3, r2
 800600c:	466a      	mov	r2, sp
 800600e:	4293      	cmp	r3, r2
 8006010:	d907      	bls.n	8006022 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8006012:	f006 fce5 	bl	800c9e0 <__errno>
 8006016:	4602      	mov	r2, r0
 8006018:	230c      	movs	r3, #12
 800601a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800601c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006020:	e006      	b.n	8006030 <_sbrk+0x48>
	}

	heap_end += incr;
 8006022:	4b05      	ldr	r3, [pc, #20]	; (8006038 <_sbrk+0x50>)
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4413      	add	r3, r2
 800602a:	4a03      	ldr	r2, [pc, #12]	; (8006038 <_sbrk+0x50>)
 800602c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800602e:	68fb      	ldr	r3, [r7, #12]
}
 8006030:	4618      	mov	r0, r3
 8006032:	3710      	adds	r7, #16
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	20001f10 	.word	0x20001f10
 800603c:	20002740 	.word	0x20002740

08006040 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006040:	b480      	push	{r7}
 8006042:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006044:	4b08      	ldr	r3, [pc, #32]	; (8006068 <SystemInit+0x28>)
 8006046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800604a:	4a07      	ldr	r2, [pc, #28]	; (8006068 <SystemInit+0x28>)
 800604c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006050:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006054:	4b04      	ldr	r3, [pc, #16]	; (8006068 <SystemInit+0x28>)
 8006056:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800605a:	609a      	str	r2, [r3, #8]
#endif
}
 800605c:	bf00      	nop
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	e000ed00 	.word	0xe000ed00

0800606c <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b09a      	sub	sp, #104	; 0x68
 8006070:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8006072:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006076:	2224      	movs	r2, #36	; 0x24
 8006078:	2100      	movs	r1, #0
 800607a:	4618      	mov	r0, r3
 800607c:	f006 fcda 	bl	800ca34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006080:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006084:	2200      	movs	r2, #0
 8006086:	601a      	str	r2, [r3, #0]
 8006088:	605a      	str	r2, [r3, #4]
 800608a:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800608c:	1d3b      	adds	r3, r7, #4
 800608e:	2234      	movs	r2, #52	; 0x34
 8006090:	2100      	movs	r1, #0
 8006092:	4618      	mov	r0, r3
 8006094:	f006 fcce 	bl	800ca34 <memset>

  htim1.Instance = TIM1;
 8006098:	4b2a      	ldr	r3, [pc, #168]	; (8006144 <MX_TIM1_Init+0xd8>)
 800609a:	4a2b      	ldr	r2, [pc, #172]	; (8006148 <MX_TIM1_Init+0xdc>)
 800609c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800609e:	4b29      	ldr	r3, [pc, #164]	; (8006144 <MX_TIM1_Init+0xd8>)
 80060a0:	2200      	movs	r2, #0
 80060a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 80060a4:	4b27      	ldr	r3, [pc, #156]	; (8006144 <MX_TIM1_Init+0xd8>)
 80060a6:	2240      	movs	r2, #64	; 0x40
 80060a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 80060aa:	4b26      	ldr	r3, [pc, #152]	; (8006144 <MX_TIM1_Init+0xd8>)
 80060ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80060b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80060b2:	4b24      	ldr	r3, [pc, #144]	; (8006144 <MX_TIM1_Init+0xd8>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80060b8:	4b22      	ldr	r3, [pc, #136]	; (8006144 <MX_TIM1_Init+0xd8>)
 80060ba:	2200      	movs	r2, #0
 80060bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80060be:	4b21      	ldr	r3, [pc, #132]	; (8006144 <MX_TIM1_Init+0xd8>)
 80060c0:	2200      	movs	r2, #0
 80060c2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80060c4:	2303      	movs	r3, #3
 80060c6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80060c8:	2300      	movs	r3, #0
 80060ca:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80060cc:	2301      	movs	r3, #1
 80060ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80060d0:	2300      	movs	r3, #0
 80060d2:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80060d4:	2300      	movs	r3, #0
 80060d6:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80060d8:	2300      	movs	r3, #0
 80060da:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80060dc:	2301      	movs	r3, #1
 80060de:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80060e0:	2300      	movs	r3, #0
 80060e2:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80060e4:	2300      	movs	r3, #0
 80060e6:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80060e8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80060ec:	4619      	mov	r1, r3
 80060ee:	4815      	ldr	r0, [pc, #84]	; (8006144 <MX_TIM1_Init+0xd8>)
 80060f0:	f004 fa09 	bl	800a506 <HAL_TIM_Encoder_Init>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d001      	beq.n	80060fe <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80060fa:	f7ff fce1 	bl	8005ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80060fe:	2320      	movs	r3, #32
 8006100:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8006102:	2300      	movs	r3, #0
 8006104:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006106:	2300      	movs	r3, #0
 8006108:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800610a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800610e:	4619      	mov	r1, r3
 8006110:	480c      	ldr	r0, [pc, #48]	; (8006144 <MX_TIM1_Init+0xd8>)
 8006112:	f004 ff81 	bl	800b018 <HAL_TIMEx_MasterConfigSynchronization>
 8006116:	4603      	mov	r3, r0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d001      	beq.n	8006120 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 800611c:	f7ff fcd0 	bl	8005ac0 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8006120:	2300      	movs	r3, #0
 8006122:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8006124:	2300      	movs	r3, #0
 8006126:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006128:	1d3b      	adds	r3, r7, #4
 800612a:	4619      	mov	r1, r3
 800612c:	4805      	ldr	r0, [pc, #20]	; (8006144 <MX_TIM1_Init+0xd8>)
 800612e:	f005 f809 	bl	800b144 <HAL_TIMEx_ConfigBreakDeadTime>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d001      	beq.n	800613c <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8006138:	f7ff fcc2 	bl	8005ac0 <Error_Handler>
  }

}
 800613c:	bf00      	nop
 800613e:	3768      	adds	r7, #104	; 0x68
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	20002654 	.word	0x20002654
 8006148:	40012c00 	.word	0x40012c00

0800614c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b08c      	sub	sp, #48	; 0x30
 8006150:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006152:	f107 0320 	add.w	r3, r7, #32
 8006156:	2200      	movs	r2, #0
 8006158:	601a      	str	r2, [r3, #0]
 800615a:	605a      	str	r2, [r3, #4]
 800615c:	609a      	str	r2, [r3, #8]
 800615e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8006160:	f107 030c 	add.w	r3, r7, #12
 8006164:	2200      	movs	r2, #0
 8006166:	601a      	str	r2, [r3, #0]
 8006168:	605a      	str	r2, [r3, #4]
 800616a:	609a      	str	r2, [r3, #8]
 800616c:	60da      	str	r2, [r3, #12]
 800616e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006170:	463b      	mov	r3, r7
 8006172:	2200      	movs	r2, #0
 8006174:	601a      	str	r2, [r3, #0]
 8006176:	605a      	str	r2, [r3, #4]
 8006178:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 800617a:	4b28      	ldr	r3, [pc, #160]	; (800621c <MX_TIM2_Init+0xd0>)
 800617c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006180:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2047;
 8006182:	4b26      	ldr	r3, [pc, #152]	; (800621c <MX_TIM2_Init+0xd0>)
 8006184:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006188:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800618a:	4b24      	ldr	r3, [pc, #144]	; (800621c <MX_TIM2_Init+0xd0>)
 800618c:	2200      	movs	r2, #0
 800618e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024;
 8006190:	4b22      	ldr	r3, [pc, #136]	; (800621c <MX_TIM2_Init+0xd0>)
 8006192:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006196:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006198:	4b20      	ldr	r3, [pc, #128]	; (800621c <MX_TIM2_Init+0xd0>)
 800619a:	2200      	movs	r2, #0
 800619c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800619e:	4b1f      	ldr	r3, [pc, #124]	; (800621c <MX_TIM2_Init+0xd0>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80061a4:	481d      	ldr	r0, [pc, #116]	; (800621c <MX_TIM2_Init+0xd0>)
 80061a6:	f004 f8c3 	bl	800a330 <HAL_TIM_Base_Init>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d001      	beq.n	80061b4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80061b0:	f7ff fc86 	bl	8005ac0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80061b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80061b8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80061ba:	f107 0320 	add.w	r3, r7, #32
 80061be:	4619      	mov	r1, r3
 80061c0:	4816      	ldr	r0, [pc, #88]	; (800621c <MX_TIM2_Init+0xd0>)
 80061c2:	f004 fbc5 	bl	800a950 <HAL_TIM_ConfigClockSource>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d001      	beq.n	80061d0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80061cc:	f7ff fc78 	bl	8005ac0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 80061d0:	2305      	movs	r3, #5
 80061d2:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80061d4:	2350      	movs	r3, #80	; 0x50
 80061d6:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 80061d8:	2300      	movs	r3, #0
 80061da:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 80061dc:	2300      	movs	r3, #0
 80061de:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80061e0:	f107 030c 	add.w	r3, r7, #12
 80061e4:	4619      	mov	r1, r3
 80061e6:	480d      	ldr	r0, [pc, #52]	; (800621c <MX_TIM2_Init+0xd0>)
 80061e8:	f004 fca2 	bl	800ab30 <HAL_TIM_SlaveConfigSynchro>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d001      	beq.n	80061f6 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 80061f2:	f7ff fc65 	bl	8005ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80061f6:	2300      	movs	r3, #0
 80061f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80061fa:	2300      	movs	r3, #0
 80061fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80061fe:	463b      	mov	r3, r7
 8006200:	4619      	mov	r1, r3
 8006202:	4806      	ldr	r0, [pc, #24]	; (800621c <MX_TIM2_Init+0xd0>)
 8006204:	f004 ff08 	bl	800b018 <HAL_TIMEx_MasterConfigSynchronization>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d001      	beq.n	8006212 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 800620e:	f7ff fc57 	bl	8005ac0 <Error_Handler>
  }

}
 8006212:	bf00      	nop
 8006214:	3730      	adds	r7, #48	; 0x30
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	200026a0 	.word	0x200026a0

08006220 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b088      	sub	sp, #32
 8006224:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006226:	f107 0310 	add.w	r3, r7, #16
 800622a:	2200      	movs	r2, #0
 800622c:	601a      	str	r2, [r3, #0]
 800622e:	605a      	str	r2, [r3, #4]
 8006230:	609a      	str	r2, [r3, #8]
 8006232:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006234:	1d3b      	adds	r3, r7, #4
 8006236:	2200      	movs	r2, #0
 8006238:	601a      	str	r2, [r3, #0]
 800623a:	605a      	str	r2, [r3, #4]
 800623c:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 800623e:	4b1e      	ldr	r3, [pc, #120]	; (80062b8 <MX_TIM5_Init+0x98>)
 8006240:	4a1e      	ldr	r2, [pc, #120]	; (80062bc <MX_TIM5_Init+0x9c>)
 8006242:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 65535;
 8006244:	4b1c      	ldr	r3, [pc, #112]	; (80062b8 <MX_TIM5_Init+0x98>)
 8006246:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800624a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800624c:	4b1a      	ldr	r3, [pc, #104]	; (80062b8 <MX_TIM5_Init+0x98>)
 800624e:	2200      	movs	r2, #0
 8006250:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8006252:	4b19      	ldr	r3, [pc, #100]	; (80062b8 <MX_TIM5_Init+0x98>)
 8006254:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006258:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800625a:	4b17      	ldr	r3, [pc, #92]	; (80062b8 <MX_TIM5_Init+0x98>)
 800625c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006260:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006262:	4b15      	ldr	r3, [pc, #84]	; (80062b8 <MX_TIM5_Init+0x98>)
 8006264:	2200      	movs	r2, #0
 8006266:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8006268:	4813      	ldr	r0, [pc, #76]	; (80062b8 <MX_TIM5_Init+0x98>)
 800626a:	f004 f861 	bl	800a330 <HAL_TIM_Base_Init>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d001      	beq.n	8006278 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8006274:	f7ff fc24 	bl	8005ac0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006278:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800627c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800627e:	f107 0310 	add.w	r3, r7, #16
 8006282:	4619      	mov	r1, r3
 8006284:	480c      	ldr	r0, [pc, #48]	; (80062b8 <MX_TIM5_Init+0x98>)
 8006286:	f004 fb63 	bl	800a950 <HAL_TIM_ConfigClockSource>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d001      	beq.n	8006294 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8006290:	f7ff fc16 	bl	8005ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006294:	2300      	movs	r3, #0
 8006296:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006298:	2300      	movs	r3, #0
 800629a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800629c:	1d3b      	adds	r3, r7, #4
 800629e:	4619      	mov	r1, r3
 80062a0:	4805      	ldr	r0, [pc, #20]	; (80062b8 <MX_TIM5_Init+0x98>)
 80062a2:	f004 feb9 	bl	800b018 <HAL_TIMEx_MasterConfigSynchronization>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d001      	beq.n	80062b0 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 80062ac:	f7ff fc08 	bl	8005ac0 <Error_Handler>
  }

}
 80062b0:	bf00      	nop
 80062b2:	3720      	adds	r7, #32
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	20002608 	.word	0x20002608
 80062bc:	40000c00 	.word	0x40000c00

080062c0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b094      	sub	sp, #80	; 0x50
 80062c4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80062c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80062ca:	2200      	movs	r2, #0
 80062cc:	601a      	str	r2, [r3, #0]
 80062ce:	605a      	str	r2, [r3, #4]
 80062d0:	609a      	str	r2, [r3, #8]
 80062d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80062d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80062d8:	2200      	movs	r2, #0
 80062da:	601a      	str	r2, [r3, #0]
 80062dc:	605a      	str	r2, [r3, #4]
 80062de:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80062e0:	463b      	mov	r3, r7
 80062e2:	2234      	movs	r2, #52	; 0x34
 80062e4:	2100      	movs	r1, #0
 80062e6:	4618      	mov	r0, r3
 80062e8:	f006 fba4 	bl	800ca34 <memset>

  htim8.Instance = TIM8;
 80062ec:	4b26      	ldr	r3, [pc, #152]	; (8006388 <MX_TIM8_Init+0xc8>)
 80062ee:	4a27      	ldr	r2, [pc, #156]	; (800638c <MX_TIM8_Init+0xcc>)
 80062f0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80062f2:	4b25      	ldr	r3, [pc, #148]	; (8006388 <MX_TIM8_Init+0xc8>)
 80062f4:	2200      	movs	r2, #0
 80062f6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80062f8:	4b23      	ldr	r3, [pc, #140]	; (8006388 <MX_TIM8_Init+0xc8>)
 80062fa:	2200      	movs	r2, #0
 80062fc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 80062fe:	4b22      	ldr	r3, [pc, #136]	; (8006388 <MX_TIM8_Init+0xc8>)
 8006300:	2201      	movs	r2, #1
 8006302:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006304:	4b20      	ldr	r3, [pc, #128]	; (8006388 <MX_TIM8_Init+0xc8>)
 8006306:	2200      	movs	r2, #0
 8006308:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800630a:	4b1f      	ldr	r3, [pc, #124]	; (8006388 <MX_TIM8_Init+0xc8>)
 800630c:	2200      	movs	r2, #0
 800630e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006310:	4b1d      	ldr	r3, [pc, #116]	; (8006388 <MX_TIM8_Init+0xc8>)
 8006312:	2200      	movs	r2, #0
 8006314:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8006316:	481c      	ldr	r0, [pc, #112]	; (8006388 <MX_TIM8_Init+0xc8>)
 8006318:	f004 f80a 	bl	800a330 <HAL_TIM_Base_Init>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d001      	beq.n	8006326 <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8006322:	f7ff fbcd 	bl	8005ac0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006326:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800632a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800632c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006330:	4619      	mov	r1, r3
 8006332:	4815      	ldr	r0, [pc, #84]	; (8006388 <MX_TIM8_Init+0xc8>)
 8006334:	f004 fb0c 	bl	800a950 <HAL_TIM_ConfigClockSource>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d001      	beq.n	8006342 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800633e:	f7ff fbbf 	bl	8005ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8006342:	2320      	movs	r3, #32
 8006344:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8006346:	2300      	movs	r3, #0
 8006348:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800634a:	2300      	movs	r3, #0
 800634c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800634e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006352:	4619      	mov	r1, r3
 8006354:	480c      	ldr	r0, [pc, #48]	; (8006388 <MX_TIM8_Init+0xc8>)
 8006356:	f004 fe5f 	bl	800b018 <HAL_TIMEx_MasterConfigSynchronization>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d001      	beq.n	8006364 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8006360:	f7ff fbae 	bl	8005ac0 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8006364:	2300      	movs	r3, #0
 8006366:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8006368:	2300      	movs	r3, #0
 800636a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800636c:	463b      	mov	r3, r7
 800636e:	4619      	mov	r1, r3
 8006370:	4805      	ldr	r0, [pc, #20]	; (8006388 <MX_TIM8_Init+0xc8>)
 8006372:	f004 fee7 	bl	800b144 <HAL_TIMEx_ConfigBreakDeadTime>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d001      	beq.n	8006380 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 800637c:	f7ff fba0 	bl	8005ac0 <Error_Handler>
  }

}
 8006380:	bf00      	nop
 8006382:	3750      	adds	r7, #80	; 0x50
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	20002524 	.word	0x20002524
 800638c:	40013400 	.word	0x40013400

08006390 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b088      	sub	sp, #32
 8006394:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006396:	f107 0310 	add.w	r3, r7, #16
 800639a:	2200      	movs	r2, #0
 800639c:	601a      	str	r2, [r3, #0]
 800639e:	605a      	str	r2, [r3, #4]
 80063a0:	609a      	str	r2, [r3, #8]
 80063a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80063a4:	1d3b      	adds	r3, r7, #4
 80063a6:	2200      	movs	r2, #0
 80063a8:	601a      	str	r2, [r3, #0]
 80063aa:	605a      	str	r2, [r3, #4]
 80063ac:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 80063ae:	4b1f      	ldr	r3, [pc, #124]	; (800642c <MX_TIM15_Init+0x9c>)
 80063b0:	4a1f      	ldr	r2, [pc, #124]	; (8006430 <MX_TIM15_Init+0xa0>)
 80063b2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 80063b4:	4b1d      	ldr	r3, [pc, #116]	; (800642c <MX_TIM15_Init+0x9c>)
 80063b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80063ba:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80063bc:	4b1b      	ldr	r3, [pc, #108]	; (800642c <MX_TIM15_Init+0x9c>)
 80063be:	2200      	movs	r2, #0
 80063c0:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 80063c2:	4b1a      	ldr	r3, [pc, #104]	; (800642c <MX_TIM15_Init+0x9c>)
 80063c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80063c8:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80063ca:	4b18      	ldr	r3, [pc, #96]	; (800642c <MX_TIM15_Init+0x9c>)
 80063cc:	2200      	movs	r2, #0
 80063ce:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80063d0:	4b16      	ldr	r3, [pc, #88]	; (800642c <MX_TIM15_Init+0x9c>)
 80063d2:	2200      	movs	r2, #0
 80063d4:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80063d6:	4b15      	ldr	r3, [pc, #84]	; (800642c <MX_TIM15_Init+0x9c>)
 80063d8:	2200      	movs	r2, #0
 80063da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80063dc:	4813      	ldr	r0, [pc, #76]	; (800642c <MX_TIM15_Init+0x9c>)
 80063de:	f003 ffa7 	bl	800a330 <HAL_TIM_Base_Init>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d001      	beq.n	80063ec <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 80063e8:	f7ff fb6a 	bl	8005ac0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80063ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80063f2:	f107 0310 	add.w	r3, r7, #16
 80063f6:	4619      	mov	r1, r3
 80063f8:	480c      	ldr	r0, [pc, #48]	; (800642c <MX_TIM15_Init+0x9c>)
 80063fa:	f004 faa9 	bl	800a950 <HAL_TIM_ConfigClockSource>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d001      	beq.n	8006408 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8006404:	f7ff fb5c 	bl	8005ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006408:	2300      	movs	r3, #0
 800640a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800640c:	2300      	movs	r3, #0
 800640e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8006410:	1d3b      	adds	r3, r7, #4
 8006412:	4619      	mov	r1, r3
 8006414:	4805      	ldr	r0, [pc, #20]	; (800642c <MX_TIM15_Init+0x9c>)
 8006416:	f004 fdff 	bl	800b018 <HAL_TIMEx_MasterConfigSynchronization>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d001      	beq.n	8006424 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8006420:	f7ff fb4e 	bl	8005ac0 <Error_Handler>
  }

}
 8006424:	bf00      	nop
 8006426:	3720      	adds	r7, #32
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}
 800642c:	20002570 	.word	0x20002570
 8006430:	40014000 	.word	0x40014000

08006434 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8006438:	4b10      	ldr	r3, [pc, #64]	; (800647c <MX_TIM16_Init+0x48>)
 800643a:	4a11      	ldr	r2, [pc, #68]	; (8006480 <MX_TIM16_Init+0x4c>)
 800643c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1024;
 800643e:	4b0f      	ldr	r3, [pc, #60]	; (800647c <MX_TIM16_Init+0x48>)
 8006440:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006444:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006446:	4b0d      	ldr	r3, [pc, #52]	; (800647c <MX_TIM16_Init+0x48>)
 8006448:	2200      	movs	r2, #0
 800644a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1024;
 800644c:	4b0b      	ldr	r3, [pc, #44]	; (800647c <MX_TIM16_Init+0x48>)
 800644e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006452:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006454:	4b09      	ldr	r3, [pc, #36]	; (800647c <MX_TIM16_Init+0x48>)
 8006456:	2200      	movs	r2, #0
 8006458:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800645a:	4b08      	ldr	r3, [pc, #32]	; (800647c <MX_TIM16_Init+0x48>)
 800645c:	2200      	movs	r2, #0
 800645e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006460:	4b06      	ldr	r3, [pc, #24]	; (800647c <MX_TIM16_Init+0x48>)
 8006462:	2200      	movs	r2, #0
 8006464:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8006466:	4805      	ldr	r0, [pc, #20]	; (800647c <MX_TIM16_Init+0x48>)
 8006468:	f003 ff62 	bl	800a330 <HAL_TIM_Base_Init>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d001      	beq.n	8006476 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8006472:	f7ff fb25 	bl	8005ac0 <Error_Handler>
  }

}
 8006476:	bf00      	nop
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	200026ec 	.word	0x200026ec
 8006480:	40014400 	.word	0x40014400

08006484 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8006488:	4b0f      	ldr	r3, [pc, #60]	; (80064c8 <MX_TIM17_Init+0x44>)
 800648a:	4a10      	ldr	r2, [pc, #64]	; (80064cc <MX_TIM17_Init+0x48>)
 800648c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1023;
 800648e:	4b0e      	ldr	r3, [pc, #56]	; (80064c8 <MX_TIM17_Init+0x44>)
 8006490:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8006494:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006496:	4b0c      	ldr	r3, [pc, #48]	; (80064c8 <MX_TIM17_Init+0x44>)
 8006498:	2200      	movs	r2, #0
 800649a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 64;
 800649c:	4b0a      	ldr	r3, [pc, #40]	; (80064c8 <MX_TIM17_Init+0x44>)
 800649e:	2240      	movs	r2, #64	; 0x40
 80064a0:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80064a2:	4b09      	ldr	r3, [pc, #36]	; (80064c8 <MX_TIM17_Init+0x44>)
 80064a4:	2200      	movs	r2, #0
 80064a6:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80064a8:	4b07      	ldr	r3, [pc, #28]	; (80064c8 <MX_TIM17_Init+0x44>)
 80064aa:	2200      	movs	r2, #0
 80064ac:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80064ae:	4b06      	ldr	r3, [pc, #24]	; (80064c8 <MX_TIM17_Init+0x44>)
 80064b0:	2200      	movs	r2, #0
 80064b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80064b4:	4804      	ldr	r0, [pc, #16]	; (80064c8 <MX_TIM17_Init+0x44>)
 80064b6:	f003 ff3b 	bl	800a330 <HAL_TIM_Base_Init>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d001      	beq.n	80064c4 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80064c0:	f7ff fafe 	bl	8005ac0 <Error_Handler>
  }

}
 80064c4:	bf00      	nop
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	200025bc 	.word	0x200025bc
 80064cc:	40014800 	.word	0x40014800

080064d0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b08a      	sub	sp, #40	; 0x28
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064d8:	f107 0314 	add.w	r3, r7, #20
 80064dc:	2200      	movs	r2, #0
 80064de:	601a      	str	r2, [r3, #0]
 80064e0:	605a      	str	r2, [r3, #4]
 80064e2:	609a      	str	r2, [r3, #8]
 80064e4:	60da      	str	r2, [r3, #12]
 80064e6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a23      	ldr	r2, [pc, #140]	; (800657c <HAL_TIM_Encoder_MspInit+0xac>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d13f      	bne.n	8006572 <HAL_TIM_Encoder_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80064f2:	4b23      	ldr	r3, [pc, #140]	; (8006580 <HAL_TIM_Encoder_MspInit+0xb0>)
 80064f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064f6:	4a22      	ldr	r2, [pc, #136]	; (8006580 <HAL_TIM_Encoder_MspInit+0xb0>)
 80064f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80064fc:	6613      	str	r3, [r2, #96]	; 0x60
 80064fe:	4b20      	ldr	r3, [pc, #128]	; (8006580 <HAL_TIM_Encoder_MspInit+0xb0>)
 8006500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006502:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006506:	613b      	str	r3, [r7, #16]
 8006508:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800650a:	4b1d      	ldr	r3, [pc, #116]	; (8006580 <HAL_TIM_Encoder_MspInit+0xb0>)
 800650c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800650e:	4a1c      	ldr	r2, [pc, #112]	; (8006580 <HAL_TIM_Encoder_MspInit+0xb0>)
 8006510:	f043 0304 	orr.w	r3, r3, #4
 8006514:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006516:	4b1a      	ldr	r3, [pc, #104]	; (8006580 <HAL_TIM_Encoder_MspInit+0xb0>)
 8006518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800651a:	f003 0304 	and.w	r3, r3, #4
 800651e:	60fb      	str	r3, [r7, #12]
 8006520:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006522:	2303      	movs	r3, #3
 8006524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006526:	2302      	movs	r3, #2
 8006528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800652a:	2300      	movs	r3, #0
 800652c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800652e:	2300      	movs	r3, #0
 8006530:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8006532:	2302      	movs	r3, #2
 8006534:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006536:	f107 0314 	add.w	r3, r7, #20
 800653a:	4619      	mov	r1, r3
 800653c:	4811      	ldr	r0, [pc, #68]	; (8006584 <HAL_TIM_Encoder_MspInit+0xb4>)
 800653e:	f002 fcd3 	bl	8008ee8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8006542:	2200      	movs	r2, #0
 8006544:	2100      	movs	r1, #0
 8006546:	2018      	movs	r0, #24
 8006548:	f001 fdb9 	bl	80080be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800654c:	2018      	movs	r0, #24
 800654e:	f001 fdd0 	bl	80080f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8006552:	2200      	movs	r2, #0
 8006554:	2101      	movs	r1, #1
 8006556:	2019      	movs	r0, #25
 8006558:	f001 fdb1 	bl	80080be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800655c:	2019      	movs	r0, #25
 800655e:	f001 fdc8 	bl	80080f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8006562:	2200      	movs	r2, #0
 8006564:	2101      	movs	r1, #1
 8006566:	201a      	movs	r0, #26
 8006568:	f001 fda9 	bl	80080be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800656c:	201a      	movs	r0, #26
 800656e:	f001 fdc0 	bl	80080f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8006572:	bf00      	nop
 8006574:	3728      	adds	r7, #40	; 0x28
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	40012c00 	.word	0x40012c00
 8006580:	40021000 	.word	0x40021000
 8006584:	48000800 	.word	0x48000800

08006588 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b08e      	sub	sp, #56	; 0x38
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006590:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006594:	2200      	movs	r2, #0
 8006596:	601a      	str	r2, [r3, #0]
 8006598:	605a      	str	r2, [r3, #4]
 800659a:	609a      	str	r2, [r3, #8]
 800659c:	60da      	str	r2, [r3, #12]
 800659e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065a8:	d131      	bne.n	800660e <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80065aa:	4b53      	ldr	r3, [pc, #332]	; (80066f8 <HAL_TIM_Base_MspInit+0x170>)
 80065ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ae:	4a52      	ldr	r2, [pc, #328]	; (80066f8 <HAL_TIM_Base_MspInit+0x170>)
 80065b0:	f043 0301 	orr.w	r3, r3, #1
 80065b4:	6593      	str	r3, [r2, #88]	; 0x58
 80065b6:	4b50      	ldr	r3, [pc, #320]	; (80066f8 <HAL_TIM_Base_MspInit+0x170>)
 80065b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ba:	f003 0301 	and.w	r3, r3, #1
 80065be:	623b      	str	r3, [r7, #32]
 80065c0:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065c2:	4b4d      	ldr	r3, [pc, #308]	; (80066f8 <HAL_TIM_Base_MspInit+0x170>)
 80065c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065c6:	4a4c      	ldr	r2, [pc, #304]	; (80066f8 <HAL_TIM_Base_MspInit+0x170>)
 80065c8:	f043 0301 	orr.w	r3, r3, #1
 80065cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80065ce:	4b4a      	ldr	r3, [pc, #296]	; (80066f8 <HAL_TIM_Base_MspInit+0x170>)
 80065d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	61fb      	str	r3, [r7, #28]
 80065d8:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80065da:	2301      	movs	r3, #1
 80065dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065de:	2302      	movs	r3, #2
 80065e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065e2:	2300      	movs	r3, #0
 80065e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065e6:	2300      	movs	r3, #0
 80065e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80065ea:	2301      	movs	r3, #1
 80065ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065f2:	4619      	mov	r1, r3
 80065f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80065f8:	f002 fc76 	bl	8008ee8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80065fc:	2200      	movs	r2, #0
 80065fe:	2101      	movs	r1, #1
 8006600:	201c      	movs	r0, #28
 8006602:	f001 fd5c 	bl	80080be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006606:	201c      	movs	r0, #28
 8006608:	f001 fd73 	bl	80080f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800660c:	e070      	b.n	80066f0 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM5)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a3a      	ldr	r2, [pc, #232]	; (80066fc <HAL_TIM_Base_MspInit+0x174>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d10c      	bne.n	8006632 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006618:	4b37      	ldr	r3, [pc, #220]	; (80066f8 <HAL_TIM_Base_MspInit+0x170>)
 800661a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800661c:	4a36      	ldr	r2, [pc, #216]	; (80066f8 <HAL_TIM_Base_MspInit+0x170>)
 800661e:	f043 0308 	orr.w	r3, r3, #8
 8006622:	6593      	str	r3, [r2, #88]	; 0x58
 8006624:	4b34      	ldr	r3, [pc, #208]	; (80066f8 <HAL_TIM_Base_MspInit+0x170>)
 8006626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006628:	f003 0308 	and.w	r3, r3, #8
 800662c:	61bb      	str	r3, [r7, #24]
 800662e:	69bb      	ldr	r3, [r7, #24]
}
 8006630:	e05e      	b.n	80066f0 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM8)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a32      	ldr	r2, [pc, #200]	; (8006700 <HAL_TIM_Base_MspInit+0x178>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d10c      	bne.n	8006656 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800663c:	4b2e      	ldr	r3, [pc, #184]	; (80066f8 <HAL_TIM_Base_MspInit+0x170>)
 800663e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006640:	4a2d      	ldr	r2, [pc, #180]	; (80066f8 <HAL_TIM_Base_MspInit+0x170>)
 8006642:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006646:	6613      	str	r3, [r2, #96]	; 0x60
 8006648:	4b2b      	ldr	r3, [pc, #172]	; (80066f8 <HAL_TIM_Base_MspInit+0x170>)
 800664a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800664c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006650:	617b      	str	r3, [r7, #20]
 8006652:	697b      	ldr	r3, [r7, #20]
}
 8006654:	e04c      	b.n	80066f0 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM15)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a2a      	ldr	r2, [pc, #168]	; (8006704 <HAL_TIM_Base_MspInit+0x17c>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d114      	bne.n	800668a <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8006660:	4b25      	ldr	r3, [pc, #148]	; (80066f8 <HAL_TIM_Base_MspInit+0x170>)
 8006662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006664:	4a24      	ldr	r2, [pc, #144]	; (80066f8 <HAL_TIM_Base_MspInit+0x170>)
 8006666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800666a:	6613      	str	r3, [r2, #96]	; 0x60
 800666c:	4b22      	ldr	r3, [pc, #136]	; (80066f8 <HAL_TIM_Base_MspInit+0x170>)
 800666e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006670:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006674:	613b      	str	r3, [r7, #16]
 8006676:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8006678:	2200      	movs	r2, #0
 800667a:	2100      	movs	r1, #0
 800667c:	2018      	movs	r0, #24
 800667e:	f001 fd1e 	bl	80080be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8006682:	2018      	movs	r0, #24
 8006684:	f001 fd35 	bl	80080f2 <HAL_NVIC_EnableIRQ>
}
 8006688:	e032      	b.n	80066f0 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM16)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a1e      	ldr	r2, [pc, #120]	; (8006708 <HAL_TIM_Base_MspInit+0x180>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d114      	bne.n	80066be <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8006694:	4b18      	ldr	r3, [pc, #96]	; (80066f8 <HAL_TIM_Base_MspInit+0x170>)
 8006696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006698:	4a17      	ldr	r2, [pc, #92]	; (80066f8 <HAL_TIM_Base_MspInit+0x170>)
 800669a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800669e:	6613      	str	r3, [r2, #96]	; 0x60
 80066a0:	4b15      	ldr	r3, [pc, #84]	; (80066f8 <HAL_TIM_Base_MspInit+0x170>)
 80066a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066a8:	60fb      	str	r3, [r7, #12]
 80066aa:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 80066ac:	2200      	movs	r2, #0
 80066ae:	2101      	movs	r1, #1
 80066b0:	2019      	movs	r0, #25
 80066b2:	f001 fd04 	bl	80080be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80066b6:	2019      	movs	r0, #25
 80066b8:	f001 fd1b 	bl	80080f2 <HAL_NVIC_EnableIRQ>
}
 80066bc:	e018      	b.n	80066f0 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM17)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a12      	ldr	r2, [pc, #72]	; (800670c <HAL_TIM_Base_MspInit+0x184>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d113      	bne.n	80066f0 <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80066c8:	4b0b      	ldr	r3, [pc, #44]	; (80066f8 <HAL_TIM_Base_MspInit+0x170>)
 80066ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066cc:	4a0a      	ldr	r2, [pc, #40]	; (80066f8 <HAL_TIM_Base_MspInit+0x170>)
 80066ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80066d2:	6613      	str	r3, [r2, #96]	; 0x60
 80066d4:	4b08      	ldr	r3, [pc, #32]	; (80066f8 <HAL_TIM_Base_MspInit+0x170>)
 80066d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066dc:	60bb      	str	r3, [r7, #8]
 80066de:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 80066e0:	2200      	movs	r2, #0
 80066e2:	2101      	movs	r1, #1
 80066e4:	201a      	movs	r0, #26
 80066e6:	f001 fcea 	bl	80080be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80066ea:	201a      	movs	r0, #26
 80066ec:	f001 fd01 	bl	80080f2 <HAL_NVIC_EnableIRQ>
}
 80066f0:	bf00      	nop
 80066f2:	3738      	adds	r7, #56	; 0x38
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	40021000 	.word	0x40021000
 80066fc:	40000c00 	.word	0x40000c00
 8006700:	40013400 	.word	0x40013400
 8006704:	40014000 	.word	0x40014000
 8006708:	40014400 	.word	0x40014400
 800670c:	40014800 	.word	0x40014800

08006710 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006710:	480d      	ldr	r0, [pc, #52]	; (8006748 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006712:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006714:	480d      	ldr	r0, [pc, #52]	; (800674c <LoopForever+0x6>)
  ldr r1, =_edata
 8006716:	490e      	ldr	r1, [pc, #56]	; (8006750 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006718:	4a0e      	ldr	r2, [pc, #56]	; (8006754 <LoopForever+0xe>)
  movs r3, #0
 800671a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800671c:	e002      	b.n	8006724 <LoopCopyDataInit>

0800671e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800671e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006722:	3304      	adds	r3, #4

08006724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006728:	d3f9      	bcc.n	800671e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800672a:	4a0b      	ldr	r2, [pc, #44]	; (8006758 <LoopForever+0x12>)
  ldr r4, =_ebss
 800672c:	4c0b      	ldr	r4, [pc, #44]	; (800675c <LoopForever+0x16>)
  movs r3, #0
 800672e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006730:	e001      	b.n	8006736 <LoopFillZerobss>

08006732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006734:	3204      	adds	r2, #4

08006736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006738:	d3fb      	bcc.n	8006732 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800673a:	f7ff fc81 	bl	8006040 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800673e:	f006 f955 	bl	800c9ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006742:	f7ff f8b7 	bl	80058b4 <main>

08006746 <LoopForever>:

LoopForever:
    b LoopForever
 8006746:	e7fe      	b.n	8006746 <LoopForever>
  ldr   r0, =_estack
 8006748:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800674c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006750:	20001eb8 	.word	0x20001eb8
  ldr r2, =_sidata
 8006754:	080104e0 	.word	0x080104e0
  ldr r2, =_sbss
 8006758:	20001eb8 	.word	0x20001eb8
  ldr r4, =_ebss
 800675c:	20002740 	.word	0x20002740

08006760 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006760:	e7fe      	b.n	8006760 <ADC1_2_IRQHandler>

08006762 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006762:	b580      	push	{r7, lr}
 8006764:	b082      	sub	sp, #8
 8006766:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006768:	2300      	movs	r3, #0
 800676a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800676c:	2003      	movs	r0, #3
 800676e:	f001 fc9b 	bl	80080a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006772:	2000      	movs	r0, #0
 8006774:	f000 f80e 	bl	8006794 <HAL_InitTick>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d002      	beq.n	8006784 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	71fb      	strb	r3, [r7, #7]
 8006782:	e001      	b.n	8006788 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006784:	f7ff fa6c 	bl	8005c60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006788:	79fb      	ldrb	r3, [r7, #7]

}
 800678a:	4618      	mov	r0, r3
 800678c:	3708      	adds	r7, #8
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
	...

08006794 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800679c:	2300      	movs	r3, #0
 800679e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80067a0:	4b16      	ldr	r3, [pc, #88]	; (80067fc <HAL_InitTick+0x68>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d022      	beq.n	80067ee <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80067a8:	4b15      	ldr	r3, [pc, #84]	; (8006800 <HAL_InitTick+0x6c>)
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	4b13      	ldr	r3, [pc, #76]	; (80067fc <HAL_InitTick+0x68>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80067b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80067b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067bc:	4618      	mov	r0, r3
 80067be:	f001 fca6 	bl	800810e <HAL_SYSTICK_Config>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d10f      	bne.n	80067e8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2b0f      	cmp	r3, #15
 80067cc:	d809      	bhi.n	80067e2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80067ce:	2200      	movs	r2, #0
 80067d0:	6879      	ldr	r1, [r7, #4]
 80067d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067d6:	f001 fc72 	bl	80080be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80067da:	4a0a      	ldr	r2, [pc, #40]	; (8006804 <HAL_InitTick+0x70>)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6013      	str	r3, [r2, #0]
 80067e0:	e007      	b.n	80067f2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	73fb      	strb	r3, [r7, #15]
 80067e6:	e004      	b.n	80067f2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	73fb      	strb	r3, [r7, #15]
 80067ec:	e001      	b.n	80067f2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80067f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3710      	adds	r7, #16
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	20000c9c 	.word	0x20000c9c
 8006800:	20000c94 	.word	0x20000c94
 8006804:	20000c98 	.word	0x20000c98

08006808 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006808:	b480      	push	{r7}
 800680a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800680c:	4b05      	ldr	r3, [pc, #20]	; (8006824 <HAL_IncTick+0x1c>)
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	4b05      	ldr	r3, [pc, #20]	; (8006828 <HAL_IncTick+0x20>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4413      	add	r3, r2
 8006816:	4a03      	ldr	r2, [pc, #12]	; (8006824 <HAL_IncTick+0x1c>)
 8006818:	6013      	str	r3, [r2, #0]
}
 800681a:	bf00      	nop
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr
 8006824:	20002738 	.word	0x20002738
 8006828:	20000c9c 	.word	0x20000c9c

0800682c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800682c:	b480      	push	{r7}
 800682e:	af00      	add	r7, sp, #0
  return uwTick;
 8006830:	4b03      	ldr	r3, [pc, #12]	; (8006840 <HAL_GetTick+0x14>)
 8006832:	681b      	ldr	r3, [r3, #0]
}
 8006834:	4618      	mov	r0, r3
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	20002738 	.word	0x20002738

08006844 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800684c:	f7ff ffee 	bl	800682c <HAL_GetTick>
 8006850:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800685c:	d004      	beq.n	8006868 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800685e:	4b09      	ldr	r3, [pc, #36]	; (8006884 <HAL_Delay+0x40>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	4413      	add	r3, r2
 8006866:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006868:	bf00      	nop
 800686a:	f7ff ffdf 	bl	800682c <HAL_GetTick>
 800686e:	4602      	mov	r2, r0
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	1ad3      	subs	r3, r2, r3
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	429a      	cmp	r2, r3
 8006878:	d8f7      	bhi.n	800686a <HAL_Delay+0x26>
  {
  }
}
 800687a:	bf00      	nop
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	20000c9c 	.word	0x20000c9c

08006888 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	431a      	orrs	r2, r3
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	609a      	str	r2, [r3, #8]
}
 80068a2:	bf00      	nop
 80068a4:	370c      	adds	r7, #12
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr

080068ae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80068ae:	b480      	push	{r7}
 80068b0:	b083      	sub	sp, #12
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
 80068b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	431a      	orrs	r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	609a      	str	r2, [r3, #8]
}
 80068c8:	bf00      	nop
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80068f0:	b490      	push	{r4, r7}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	607a      	str	r2, [r7, #4]
 80068fc:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	3360      	adds	r3, #96	; 0x60
 8006902:	461a      	mov	r2, r3
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	4413      	add	r3, r2
 800690a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800690c:	6822      	ldr	r2, [r4, #0]
 800690e:	4b08      	ldr	r3, [pc, #32]	; (8006930 <LL_ADC_SetOffset+0x40>)
 8006910:	4013      	ands	r3, r2
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8006918:	683a      	ldr	r2, [r7, #0]
 800691a:	430a      	orrs	r2, r1
 800691c:	4313      	orrs	r3, r2
 800691e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006922:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006924:	bf00      	nop
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bc90      	pop	{r4, r7}
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	03fff000 	.word	0x03fff000

08006934 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006934:	b490      	push	{r4, r7}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	3360      	adds	r3, #96	; 0x60
 8006942:	461a      	mov	r2, r3
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	4413      	add	r3, r2
 800694a:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800694c:	6823      	ldr	r3, [r4, #0]
 800694e:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006952:	4618      	mov	r0, r3
 8006954:	3708      	adds	r7, #8
 8006956:	46bd      	mov	sp, r7
 8006958:	bc90      	pop	{r4, r7}
 800695a:	4770      	bx	lr

0800695c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800695c:	b490      	push	{r4, r7}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	3360      	adds	r3, #96	; 0x60
 800696c:	461a      	mov	r2, r3
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	4413      	add	r3, r2
 8006974:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8006976:	6823      	ldr	r3, [r4, #0]
 8006978:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4313      	orrs	r3, r2
 8006980:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006982:	bf00      	nop
 8006984:	3710      	adds	r7, #16
 8006986:	46bd      	mov	sp, r7
 8006988:	bc90      	pop	{r4, r7}
 800698a:	4770      	bx	lr

0800698c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800698c:	b490      	push	{r4, r7}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	3360      	adds	r3, #96	; 0x60
 800699c:	461a      	mov	r2, r3
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	4413      	add	r3, r2
 80069a4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80069a6:	6823      	ldr	r3, [r4, #0]
 80069a8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80069b2:	bf00      	nop
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bc90      	pop	{r4, r7}
 80069ba:	4770      	bx	lr

080069bc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80069bc:	b490      	push	{r4, r7}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	3360      	adds	r3, #96	; 0x60
 80069cc:	461a      	mov	r2, r3
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4413      	add	r3, r2
 80069d4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80069d6:	6823      	ldr	r3, [r4, #0]
 80069d8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4313      	orrs	r3, r2
 80069e0:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80069e2:	bf00      	nop
 80069e4:	3710      	adds	r7, #16
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bc90      	pop	{r4, r7}
 80069ea:	4770      	bx	lr

080069ec <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	431a      	orrs	r2, r3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	615a      	str	r2, [r3, #20]
}
 8006a06:	bf00      	nop
 8006a08:	370c      	adds	r7, #12
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr

08006a12 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006a12:	b490      	push	{r4, r7}
 8006a14:	b084      	sub	sp, #16
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	60f8      	str	r0, [r7, #12]
 8006a1a:	60b9      	str	r1, [r7, #8]
 8006a1c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	3330      	adds	r3, #48	; 0x30
 8006a22:	461a      	mov	r2, r3
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	0a1b      	lsrs	r3, r3, #8
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	f003 030c 	and.w	r3, r3, #12
 8006a2e:	4413      	add	r3, r2
 8006a30:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8006a32:	6822      	ldr	r2, [r4, #0]
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	f003 031f 	and.w	r3, r3, #31
 8006a3a:	211f      	movs	r1, #31
 8006a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a40:	43db      	mvns	r3, r3
 8006a42:	401a      	ands	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	0e9b      	lsrs	r3, r3, #26
 8006a48:	f003 011f 	and.w	r1, r3, #31
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	f003 031f 	and.w	r3, r3, #31
 8006a52:	fa01 f303 	lsl.w	r3, r1, r3
 8006a56:	4313      	orrs	r3, r2
 8006a58:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006a5a:	bf00      	nop
 8006a5c:	3710      	adds	r7, #16
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bc90      	pop	{r4, r7}
 8006a62:	4770      	bx	lr

08006a64 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006a64:	b490      	push	{r4, r7}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	3314      	adds	r3, #20
 8006a74:	461a      	mov	r2, r3
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	0e5b      	lsrs	r3, r3, #25
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	f003 0304 	and.w	r3, r3, #4
 8006a80:	4413      	add	r3, r2
 8006a82:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8006a84:	6822      	ldr	r2, [r4, #0]
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	0d1b      	lsrs	r3, r3, #20
 8006a8a:	f003 031f 	and.w	r3, r3, #31
 8006a8e:	2107      	movs	r1, #7
 8006a90:	fa01 f303 	lsl.w	r3, r1, r3
 8006a94:	43db      	mvns	r3, r3
 8006a96:	401a      	ands	r2, r3
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	0d1b      	lsrs	r3, r3, #20
 8006a9c:	f003 031f 	and.w	r3, r3, #31
 8006aa0:	6879      	ldr	r1, [r7, #4]
 8006aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006aaa:	bf00      	nop
 8006aac:	3710      	adds	r7, #16
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bc90      	pop	{r4, r7}
 8006ab2:	4770      	bx	lr

08006ab4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006acc:	43db      	mvns	r3, r3
 8006ace:	401a      	ands	r2, r3
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f003 0318 	and.w	r3, r3, #24
 8006ad6:	4908      	ldr	r1, [pc, #32]	; (8006af8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006ad8:	40d9      	lsrs	r1, r3
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	400b      	ands	r3, r1
 8006ade:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ae2:	431a      	orrs	r2, r3
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006aea:	bf00      	nop
 8006aec:	3714      	adds	r7, #20
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	0007ffff 	.word	0x0007ffff

08006afc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006b0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	6093      	str	r3, [r2, #8]
}
 8006b14:	bf00      	nop
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b34:	d101      	bne.n	8006b3a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006b36:	2301      	movs	r3, #1
 8006b38:	e000      	b.n	8006b3c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006b3a:	2300      	movs	r3, #0
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006b58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006b5c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006b64:	bf00      	nop
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b84:	d101      	bne.n	8006b8a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006b86:	2301      	movs	r3, #1
 8006b88:	e000      	b.n	8006b8c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	f003 0301 	and.w	r3, r3, #1
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d101      	bne.n	8006bb0 <LL_ADC_IsEnabled+0x18>
 8006bac:	2301      	movs	r3, #1
 8006bae:	e000      	b.n	8006bb2 <LL_ADC_IsEnabled+0x1a>
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	370c      	adds	r7, #12
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr

08006bbe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006bbe:	b480      	push	{r7}
 8006bc0:	b083      	sub	sp, #12
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	f003 0304 	and.w	r3, r3, #4
 8006bce:	2b04      	cmp	r3, #4
 8006bd0:	d101      	bne.n	8006bd6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e000      	b.n	8006bd8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	f003 0308 	and.w	r3, r3, #8
 8006bf4:	2b08      	cmp	r3, #8
 8006bf6:	d101      	bne.n	8006bfc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e000      	b.n	8006bfe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	370c      	adds	r7, #12
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr
	...

08006c0c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006c0c:	b590      	push	{r4, r7, lr}
 8006c0e:	b089      	sub	sp, #36	; 0x24
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006c14:	2300      	movs	r3, #0
 8006c16:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d101      	bne.n	8006c26 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e1ad      	b.n	8006f82 <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	695b      	ldr	r3, [r3, #20]
 8006c2a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d109      	bne.n	8006c48 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f7fe f843 	bl	8004cc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f7ff ff67 	bl	8006b20 <LL_ADC_IsDeepPowerDownEnabled>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d004      	beq.n	8006c62 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7ff ff4d 	bl	8006afc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4618      	mov	r0, r3
 8006c68:	f7ff ff82 	bl	8006b70 <LL_ADC_IsInternalRegulatorEnabled>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d113      	bne.n	8006c9a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7ff ff66 	bl	8006b48 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8006c7c:	4b9e      	ldr	r3, [pc, #632]	; (8006ef8 <HAL_ADC_Init+0x2ec>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	099b      	lsrs	r3, r3, #6
 8006c82:	4a9e      	ldr	r2, [pc, #632]	; (8006efc <HAL_ADC_Init+0x2f0>)
 8006c84:	fba2 2303 	umull	r2, r3, r2, r3
 8006c88:	099b      	lsrs	r3, r3, #6
 8006c8a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006c8c:	e002      	b.n	8006c94 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	3b01      	subs	r3, #1
 8006c92:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1f9      	bne.n	8006c8e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7ff ff66 	bl	8006b70 <LL_ADC_IsInternalRegulatorEnabled>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d10d      	bne.n	8006cc6 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cae:	f043 0210 	orr.w	r2, r3, #16
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cba:	f043 0201 	orr.w	r2, r3, #1
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f7ff ff77 	bl	8006bbe <LL_ADC_REG_IsConversionOngoing>
 8006cd0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cd6:	f003 0310 	and.w	r3, r3, #16
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	f040 8148 	bne.w	8006f70 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f040 8144 	bne.w	8006f70 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006cf0:	f043 0202 	orr.w	r2, r3, #2
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f7ff ff4b 	bl	8006b98 <LL_ADC_IsEnabled>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d141      	bne.n	8006d8c <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d10:	d004      	beq.n	8006d1c <HAL_ADC_Init+0x110>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a7a      	ldr	r2, [pc, #488]	; (8006f00 <HAL_ADC_Init+0x2f4>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d10f      	bne.n	8006d3c <HAL_ADC_Init+0x130>
 8006d1c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006d20:	f7ff ff3a 	bl	8006b98 <LL_ADC_IsEnabled>
 8006d24:	4604      	mov	r4, r0
 8006d26:	4876      	ldr	r0, [pc, #472]	; (8006f00 <HAL_ADC_Init+0x2f4>)
 8006d28:	f7ff ff36 	bl	8006b98 <LL_ADC_IsEnabled>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	4323      	orrs	r3, r4
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	bf0c      	ite	eq
 8006d34:	2301      	moveq	r3, #1
 8006d36:	2300      	movne	r3, #0
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	e012      	b.n	8006d62 <HAL_ADC_Init+0x156>
 8006d3c:	4871      	ldr	r0, [pc, #452]	; (8006f04 <HAL_ADC_Init+0x2f8>)
 8006d3e:	f7ff ff2b 	bl	8006b98 <LL_ADC_IsEnabled>
 8006d42:	4604      	mov	r4, r0
 8006d44:	4870      	ldr	r0, [pc, #448]	; (8006f08 <HAL_ADC_Init+0x2fc>)
 8006d46:	f7ff ff27 	bl	8006b98 <LL_ADC_IsEnabled>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	431c      	orrs	r4, r3
 8006d4e:	486f      	ldr	r0, [pc, #444]	; (8006f0c <HAL_ADC_Init+0x300>)
 8006d50:	f7ff ff22 	bl	8006b98 <LL_ADC_IsEnabled>
 8006d54:	4603      	mov	r3, r0
 8006d56:	4323      	orrs	r3, r4
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	bf0c      	ite	eq
 8006d5c:	2301      	moveq	r3, #1
 8006d5e:	2300      	movne	r3, #0
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d012      	beq.n	8006d8c <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d6e:	d004      	beq.n	8006d7a <HAL_ADC_Init+0x16e>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a62      	ldr	r2, [pc, #392]	; (8006f00 <HAL_ADC_Init+0x2f4>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d101      	bne.n	8006d7e <HAL_ADC_Init+0x172>
 8006d7a:	4a65      	ldr	r2, [pc, #404]	; (8006f10 <HAL_ADC_Init+0x304>)
 8006d7c:	e000      	b.n	8006d80 <HAL_ADC_Init+0x174>
 8006d7e:	4a65      	ldr	r2, [pc, #404]	; (8006f14 <HAL_ADC_Init+0x308>)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	4619      	mov	r1, r3
 8006d86:	4610      	mov	r0, r2
 8006d88:	f7ff fd7e 	bl	8006888 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	7f5b      	ldrb	r3, [r3, #29]
 8006d90:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006d96:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8006d9c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8006da2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006daa:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006dac:	4313      	orrs	r3, r2
 8006dae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d106      	bne.n	8006dc8 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dbe:	3b01      	subs	r3, #1
 8006dc0:	045b      	lsls	r3, r3, #17
 8006dc2:	69ba      	ldr	r2, [r7, #24]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d009      	beq.n	8006de4 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ddc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006dde:	69ba      	ldr	r2, [r7, #24]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	68da      	ldr	r2, [r3, #12]
 8006dea:	4b4b      	ldr	r3, [pc, #300]	; (8006f18 <HAL_ADC_Init+0x30c>)
 8006dec:	4013      	ands	r3, r2
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	6812      	ldr	r2, [r2, #0]
 8006df2:	69b9      	ldr	r1, [r7, #24]
 8006df4:	430b      	orrs	r3, r1
 8006df6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	430a      	orrs	r2, r1
 8006e0c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7ff fed3 	bl	8006bbe <LL_ADC_REG_IsConversionOngoing>
 8006e18:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f7ff fee0 	bl	8006be4 <LL_ADC_INJ_IsConversionOngoing>
 8006e24:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d17f      	bne.n	8006f2c <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d17c      	bne.n	8006f2c <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006e36:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006e3e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006e40:	4313      	orrs	r3, r2
 8006e42:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e4e:	f023 0302 	bic.w	r3, r3, #2
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	6812      	ldr	r2, [r2, #0]
 8006e56:	69b9      	ldr	r1, [r7, #24]
 8006e58:	430b      	orrs	r3, r1
 8006e5a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d017      	beq.n	8006e94 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	691a      	ldr	r2, [r3, #16]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006e72:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006e7c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006e80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	6911      	ldr	r1, [r2, #16]
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	6812      	ldr	r2, [r2, #0]
 8006e8c:	430b      	orrs	r3, r1
 8006e8e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8006e92:	e013      	b.n	8006ebc <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	691a      	ldr	r2, [r3, #16]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006ea2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	6812      	ldr	r2, [r2, #0]
 8006eb0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006eb4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006eb8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d12a      	bne.n	8006f1c <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	691b      	ldr	r3, [r3, #16]
 8006ecc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006ed0:	f023 0304 	bic.w	r3, r3, #4
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006edc:	4311      	orrs	r1, r2
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006ee2:	4311      	orrs	r1, r2
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006ee8:	430a      	orrs	r2, r1
 8006eea:	431a      	orrs	r2, r3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f042 0201 	orr.w	r2, r2, #1
 8006ef4:	611a      	str	r2, [r3, #16]
 8006ef6:	e019      	b.n	8006f2c <HAL_ADC_Init+0x320>
 8006ef8:	20000c94 	.word	0x20000c94
 8006efc:	053e2d63 	.word	0x053e2d63
 8006f00:	50000100 	.word	0x50000100
 8006f04:	50000400 	.word	0x50000400
 8006f08:	50000500 	.word	0x50000500
 8006f0c:	50000600 	.word	0x50000600
 8006f10:	50000300 	.word	0x50000300
 8006f14:	50000700 	.word	0x50000700
 8006f18:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	691a      	ldr	r2, [r3, #16]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f022 0201 	bic.w	r2, r2, #1
 8006f2a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	695b      	ldr	r3, [r3, #20]
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d10c      	bne.n	8006f4e <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f3a:	f023 010f 	bic.w	r1, r3, #15
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a1b      	ldr	r3, [r3, #32]
 8006f42:	1e5a      	subs	r2, r3, #1
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	430a      	orrs	r2, r1
 8006f4a:	631a      	str	r2, [r3, #48]	; 0x30
 8006f4c:	e007      	b.n	8006f5e <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f022 020f 	bic.w	r2, r2, #15
 8006f5c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f62:	f023 0303 	bic.w	r3, r3, #3
 8006f66:	f043 0201 	orr.w	r2, r3, #1
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	65da      	str	r2, [r3, #92]	; 0x5c
 8006f6e:	e007      	b.n	8006f80 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f74:	f043 0210 	orr.w	r2, r3, #16
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006f80:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3724      	adds	r7, #36	; 0x24
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd90      	pop	{r4, r7, pc}
 8006f8a:	bf00      	nop

08006f8c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b0a6      	sub	sp, #152	; 0x98
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006f96:	2300      	movs	r3, #0
 8006f98:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d101      	bne.n	8006fae <HAL_ADC_ConfigChannel+0x22>
 8006faa:	2302      	movs	r3, #2
 8006fac:	e38e      	b.n	80076cc <HAL_ADC_ConfigChannel+0x740>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7ff fdff 	bl	8006bbe <LL_ADC_REG_IsConversionOngoing>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	f040 836f 	bne.w	80076a6 <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6818      	ldr	r0, [r3, #0]
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	6859      	ldr	r1, [r3, #4]
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	f7ff fd1c 	bl	8006a12 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f7ff fded 	bl	8006bbe <LL_ADC_REG_IsConversionOngoing>
 8006fe4:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4618      	mov	r0, r3
 8006fee:	f7ff fdf9 	bl	8006be4 <LL_ADC_INJ_IsConversionOngoing>
 8006ff2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006ff6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	f040 817b 	bne.w	80072f6 <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007000:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007004:	2b00      	cmp	r3, #0
 8007006:	f040 8176 	bne.w	80072f6 <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007012:	d10f      	bne.n	8007034 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6818      	ldr	r0, [r3, #0]
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2200      	movs	r2, #0
 800701e:	4619      	mov	r1, r3
 8007020:	f7ff fd20 	bl	8006a64 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800702c:	4618      	mov	r0, r3
 800702e:	f7ff fcdd 	bl	80069ec <LL_ADC_SetSamplingTimeCommonConfig>
 8007032:	e00e      	b.n	8007052 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6818      	ldr	r0, [r3, #0]
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	6819      	ldr	r1, [r3, #0]
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	461a      	mov	r2, r3
 8007042:	f7ff fd0f 	bl	8006a64 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2100      	movs	r1, #0
 800704c:	4618      	mov	r0, r3
 800704e:	f7ff fccd 	bl	80069ec <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	695a      	ldr	r2, [r3, #20]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	08db      	lsrs	r3, r3, #3
 800705e:	f003 0303 	and.w	r3, r3, #3
 8007062:	005b      	lsls	r3, r3, #1
 8007064:	fa02 f303 	lsl.w	r3, r2, r3
 8007068:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	2b04      	cmp	r3, #4
 8007072:	d022      	beq.n	80070ba <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6818      	ldr	r0, [r3, #0]
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	6919      	ldr	r1, [r3, #16]
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007084:	f7ff fc34 	bl	80068f0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6818      	ldr	r0, [r3, #0]
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	6919      	ldr	r1, [r3, #16]
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	699b      	ldr	r3, [r3, #24]
 8007094:	461a      	mov	r2, r3
 8007096:	f7ff fc79 	bl	800698c <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6818      	ldr	r0, [r3, #0]
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	6919      	ldr	r1, [r3, #16]
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	7f1b      	ldrb	r3, [r3, #28]
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d102      	bne.n	80070b0 <HAL_ADC_ConfigChannel+0x124>
 80070aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80070ae:	e000      	b.n	80070b2 <HAL_ADC_ConfigChannel+0x126>
 80070b0:	2300      	movs	r3, #0
 80070b2:	461a      	mov	r2, r3
 80070b4:	f7ff fc82 	bl	80069bc <LL_ADC_SetOffsetSaturation>
 80070b8:	e11d      	b.n	80072f6 <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2100      	movs	r1, #0
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7ff fc37 	bl	8006934 <LL_ADC_GetOffsetChannel>
 80070c6:	4603      	mov	r3, r0
 80070c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10a      	bne.n	80070e6 <HAL_ADC_ConfigChannel+0x15a>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2100      	movs	r1, #0
 80070d6:	4618      	mov	r0, r3
 80070d8:	f7ff fc2c 	bl	8006934 <LL_ADC_GetOffsetChannel>
 80070dc:	4603      	mov	r3, r0
 80070de:	0e9b      	lsrs	r3, r3, #26
 80070e0:	f003 021f 	and.w	r2, r3, #31
 80070e4:	e012      	b.n	800710c <HAL_ADC_ConfigChannel+0x180>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2100      	movs	r1, #0
 80070ec:	4618      	mov	r0, r3
 80070ee:	f7ff fc21 	bl	8006934 <LL_ADC_GetOffsetChannel>
 80070f2:	4603      	mov	r3, r0
 80070f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80070fc:	fa93 f3a3 	rbit	r3, r3
 8007100:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8007102:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007104:	fab3 f383 	clz	r3, r3
 8007108:	b2db      	uxtb	r3, r3
 800710a:	461a      	mov	r2, r3
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007114:	2b00      	cmp	r3, #0
 8007116:	d105      	bne.n	8007124 <HAL_ADC_ConfigChannel+0x198>
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	0e9b      	lsrs	r3, r3, #26
 800711e:	f003 031f 	and.w	r3, r3, #31
 8007122:	e00a      	b.n	800713a <HAL_ADC_ConfigChannel+0x1ae>
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800712a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800712c:	fa93 f3a3 	rbit	r3, r3
 8007130:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8007132:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007134:	fab3 f383 	clz	r3, r3
 8007138:	b2db      	uxtb	r3, r3
 800713a:	429a      	cmp	r2, r3
 800713c:	d106      	bne.n	800714c <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	2200      	movs	r2, #0
 8007144:	2100      	movs	r1, #0
 8007146:	4618      	mov	r0, r3
 8007148:	f7ff fc08 	bl	800695c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2101      	movs	r1, #1
 8007152:	4618      	mov	r0, r3
 8007154:	f7ff fbee 	bl	8006934 <LL_ADC_GetOffsetChannel>
 8007158:	4603      	mov	r3, r0
 800715a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800715e:	2b00      	cmp	r3, #0
 8007160:	d10a      	bne.n	8007178 <HAL_ADC_ConfigChannel+0x1ec>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2101      	movs	r1, #1
 8007168:	4618      	mov	r0, r3
 800716a:	f7ff fbe3 	bl	8006934 <LL_ADC_GetOffsetChannel>
 800716e:	4603      	mov	r3, r0
 8007170:	0e9b      	lsrs	r3, r3, #26
 8007172:	f003 021f 	and.w	r2, r3, #31
 8007176:	e010      	b.n	800719a <HAL_ADC_ConfigChannel+0x20e>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2101      	movs	r1, #1
 800717e:	4618      	mov	r0, r3
 8007180:	f7ff fbd8 	bl	8006934 <LL_ADC_GetOffsetChannel>
 8007184:	4603      	mov	r3, r0
 8007186:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007188:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800718a:	fa93 f3a3 	rbit	r3, r3
 800718e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8007190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007192:	fab3 f383 	clz	r3, r3
 8007196:	b2db      	uxtb	r3, r3
 8007198:	461a      	mov	r2, r3
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d105      	bne.n	80071b2 <HAL_ADC_ConfigChannel+0x226>
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	0e9b      	lsrs	r3, r3, #26
 80071ac:	f003 031f 	and.w	r3, r3, #31
 80071b0:	e00a      	b.n	80071c8 <HAL_ADC_ConfigChannel+0x23c>
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80071ba:	fa93 f3a3 	rbit	r3, r3
 80071be:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80071c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071c2:	fab3 f383 	clz	r3, r3
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d106      	bne.n	80071da <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	2200      	movs	r2, #0
 80071d2:	2101      	movs	r1, #1
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7ff fbc1 	bl	800695c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	2102      	movs	r1, #2
 80071e0:	4618      	mov	r0, r3
 80071e2:	f7ff fba7 	bl	8006934 <LL_ADC_GetOffsetChannel>
 80071e6:	4603      	mov	r3, r0
 80071e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d10a      	bne.n	8007206 <HAL_ADC_ConfigChannel+0x27a>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2102      	movs	r1, #2
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7ff fb9c 	bl	8006934 <LL_ADC_GetOffsetChannel>
 80071fc:	4603      	mov	r3, r0
 80071fe:	0e9b      	lsrs	r3, r3, #26
 8007200:	f003 021f 	and.w	r2, r3, #31
 8007204:	e010      	b.n	8007228 <HAL_ADC_ConfigChannel+0x29c>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2102      	movs	r1, #2
 800720c:	4618      	mov	r0, r3
 800720e:	f7ff fb91 	bl	8006934 <LL_ADC_GetOffsetChannel>
 8007212:	4603      	mov	r3, r0
 8007214:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007216:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007218:	fa93 f3a3 	rbit	r3, r3
 800721c:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 800721e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007220:	fab3 f383 	clz	r3, r3
 8007224:	b2db      	uxtb	r3, r3
 8007226:	461a      	mov	r2, r3
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007230:	2b00      	cmp	r3, #0
 8007232:	d105      	bne.n	8007240 <HAL_ADC_ConfigChannel+0x2b4>
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	0e9b      	lsrs	r3, r3, #26
 800723a:	f003 031f 	and.w	r3, r3, #31
 800723e:	e00a      	b.n	8007256 <HAL_ADC_ConfigChannel+0x2ca>
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007246:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007248:	fa93 f3a3 	rbit	r3, r3
 800724c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800724e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007250:	fab3 f383 	clz	r3, r3
 8007254:	b2db      	uxtb	r3, r3
 8007256:	429a      	cmp	r2, r3
 8007258:	d106      	bne.n	8007268 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2200      	movs	r2, #0
 8007260:	2102      	movs	r1, #2
 8007262:	4618      	mov	r0, r3
 8007264:	f7ff fb7a 	bl	800695c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2103      	movs	r1, #3
 800726e:	4618      	mov	r0, r3
 8007270:	f7ff fb60 	bl	8006934 <LL_ADC_GetOffsetChannel>
 8007274:	4603      	mov	r3, r0
 8007276:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800727a:	2b00      	cmp	r3, #0
 800727c:	d10a      	bne.n	8007294 <HAL_ADC_ConfigChannel+0x308>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	2103      	movs	r1, #3
 8007284:	4618      	mov	r0, r3
 8007286:	f7ff fb55 	bl	8006934 <LL_ADC_GetOffsetChannel>
 800728a:	4603      	mov	r3, r0
 800728c:	0e9b      	lsrs	r3, r3, #26
 800728e:	f003 021f 	and.w	r2, r3, #31
 8007292:	e010      	b.n	80072b6 <HAL_ADC_ConfigChannel+0x32a>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2103      	movs	r1, #3
 800729a:	4618      	mov	r0, r3
 800729c:	f7ff fb4a 	bl	8006934 <LL_ADC_GetOffsetChannel>
 80072a0:	4603      	mov	r3, r0
 80072a2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072a6:	fa93 f3a3 	rbit	r3, r3
 80072aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80072ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072ae:	fab3 f383 	clz	r3, r3
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	461a      	mov	r2, r3
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d105      	bne.n	80072ce <HAL_ADC_ConfigChannel+0x342>
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	0e9b      	lsrs	r3, r3, #26
 80072c8:	f003 031f 	and.w	r3, r3, #31
 80072cc:	e00a      	b.n	80072e4 <HAL_ADC_ConfigChannel+0x358>
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072d6:	fa93 f3a3 	rbit	r3, r3
 80072da:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 80072dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072de:	fab3 f383 	clz	r3, r3
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d106      	bne.n	80072f6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	2200      	movs	r2, #0
 80072ee:	2103      	movs	r1, #3
 80072f0:	4618      	mov	r0, r3
 80072f2:	f7ff fb33 	bl	800695c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4618      	mov	r0, r3
 80072fc:	f7ff fc4c 	bl	8006b98 <LL_ADC_IsEnabled>
 8007300:	4603      	mov	r3, r0
 8007302:	2b00      	cmp	r3, #0
 8007304:	f040 810c 	bne.w	8007520 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6818      	ldr	r0, [r3, #0]
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	6819      	ldr	r1, [r3, #0]
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	461a      	mov	r2, r3
 8007316:	f7ff fbcd 	bl	8006ab4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	4aaf      	ldr	r2, [pc, #700]	; (80075dc <HAL_ADC_ConfigChannel+0x650>)
 8007320:	4293      	cmp	r3, r2
 8007322:	f040 80fd 	bne.w	8007520 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007332:	2b00      	cmp	r3, #0
 8007334:	d10b      	bne.n	800734e <HAL_ADC_ConfigChannel+0x3c2>
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	0e9b      	lsrs	r3, r3, #26
 800733c:	3301      	adds	r3, #1
 800733e:	f003 031f 	and.w	r3, r3, #31
 8007342:	2b09      	cmp	r3, #9
 8007344:	bf94      	ite	ls
 8007346:	2301      	movls	r3, #1
 8007348:	2300      	movhi	r3, #0
 800734a:	b2db      	uxtb	r3, r3
 800734c:	e012      	b.n	8007374 <HAL_ADC_ConfigChannel+0x3e8>
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007356:	fa93 f3a3 	rbit	r3, r3
 800735a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800735c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800735e:	fab3 f383 	clz	r3, r3
 8007362:	b2db      	uxtb	r3, r3
 8007364:	3301      	adds	r3, #1
 8007366:	f003 031f 	and.w	r3, r3, #31
 800736a:	2b09      	cmp	r3, #9
 800736c:	bf94      	ite	ls
 800736e:	2301      	movls	r3, #1
 8007370:	2300      	movhi	r3, #0
 8007372:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007374:	2b00      	cmp	r3, #0
 8007376:	d064      	beq.n	8007442 <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007380:	2b00      	cmp	r3, #0
 8007382:	d107      	bne.n	8007394 <HAL_ADC_ConfigChannel+0x408>
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	0e9b      	lsrs	r3, r3, #26
 800738a:	3301      	adds	r3, #1
 800738c:	069b      	lsls	r3, r3, #26
 800738e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007392:	e00e      	b.n	80073b2 <HAL_ADC_ConfigChannel+0x426>
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800739a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800739c:	fa93 f3a3 	rbit	r3, r3
 80073a0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80073a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073a4:	fab3 f383 	clz	r3, r3
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	3301      	adds	r3, #1
 80073ac:	069b      	lsls	r3, r3, #26
 80073ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d109      	bne.n	80073d2 <HAL_ADC_ConfigChannel+0x446>
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	0e9b      	lsrs	r3, r3, #26
 80073c4:	3301      	adds	r3, #1
 80073c6:	f003 031f 	and.w	r3, r3, #31
 80073ca:	2101      	movs	r1, #1
 80073cc:	fa01 f303 	lsl.w	r3, r1, r3
 80073d0:	e010      	b.n	80073f4 <HAL_ADC_ConfigChannel+0x468>
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073da:	fa93 f3a3 	rbit	r3, r3
 80073de:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80073e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e2:	fab3 f383 	clz	r3, r3
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	3301      	adds	r3, #1
 80073ea:	f003 031f 	and.w	r3, r3, #31
 80073ee:	2101      	movs	r1, #1
 80073f0:	fa01 f303 	lsl.w	r3, r1, r3
 80073f4:	ea42 0103 	orr.w	r1, r2, r3
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007400:	2b00      	cmp	r3, #0
 8007402:	d10a      	bne.n	800741a <HAL_ADC_ConfigChannel+0x48e>
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	0e9b      	lsrs	r3, r3, #26
 800740a:	3301      	adds	r3, #1
 800740c:	f003 021f 	and.w	r2, r3, #31
 8007410:	4613      	mov	r3, r2
 8007412:	005b      	lsls	r3, r3, #1
 8007414:	4413      	add	r3, r2
 8007416:	051b      	lsls	r3, r3, #20
 8007418:	e011      	b.n	800743e <HAL_ADC_ConfigChannel+0x4b2>
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007422:	fa93 f3a3 	rbit	r3, r3
 8007426:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8007428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742a:	fab3 f383 	clz	r3, r3
 800742e:	b2db      	uxtb	r3, r3
 8007430:	3301      	adds	r3, #1
 8007432:	f003 021f 	and.w	r2, r3, #31
 8007436:	4613      	mov	r3, r2
 8007438:	005b      	lsls	r3, r3, #1
 800743a:	4413      	add	r3, r2
 800743c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800743e:	430b      	orrs	r3, r1
 8007440:	e069      	b.n	8007516 <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800744a:	2b00      	cmp	r3, #0
 800744c:	d107      	bne.n	800745e <HAL_ADC_ConfigChannel+0x4d2>
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	0e9b      	lsrs	r3, r3, #26
 8007454:	3301      	adds	r3, #1
 8007456:	069b      	lsls	r3, r3, #26
 8007458:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800745c:	e00e      	b.n	800747c <HAL_ADC_ConfigChannel+0x4f0>
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007464:	6a3b      	ldr	r3, [r7, #32]
 8007466:	fa93 f3a3 	rbit	r3, r3
 800746a:	61fb      	str	r3, [r7, #28]
  return result;
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	fab3 f383 	clz	r3, r3
 8007472:	b2db      	uxtb	r3, r3
 8007474:	3301      	adds	r3, #1
 8007476:	069b      	lsls	r3, r3, #26
 8007478:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007484:	2b00      	cmp	r3, #0
 8007486:	d109      	bne.n	800749c <HAL_ADC_ConfigChannel+0x510>
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	0e9b      	lsrs	r3, r3, #26
 800748e:	3301      	adds	r3, #1
 8007490:	f003 031f 	and.w	r3, r3, #31
 8007494:	2101      	movs	r1, #1
 8007496:	fa01 f303 	lsl.w	r3, r1, r3
 800749a:	e010      	b.n	80074be <HAL_ADC_ConfigChannel+0x532>
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	fa93 f3a3 	rbit	r3, r3
 80074a8:	617b      	str	r3, [r7, #20]
  return result;
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	fab3 f383 	clz	r3, r3
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	3301      	adds	r3, #1
 80074b4:	f003 031f 	and.w	r3, r3, #31
 80074b8:	2101      	movs	r1, #1
 80074ba:	fa01 f303 	lsl.w	r3, r1, r3
 80074be:	ea42 0103 	orr.w	r1, r2, r3
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d10d      	bne.n	80074ea <HAL_ADC_ConfigChannel+0x55e>
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	0e9b      	lsrs	r3, r3, #26
 80074d4:	3301      	adds	r3, #1
 80074d6:	f003 021f 	and.w	r2, r3, #31
 80074da:	4613      	mov	r3, r2
 80074dc:	005b      	lsls	r3, r3, #1
 80074de:	4413      	add	r3, r2
 80074e0:	3b1e      	subs	r3, #30
 80074e2:	051b      	lsls	r3, r3, #20
 80074e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80074e8:	e014      	b.n	8007514 <HAL_ADC_ConfigChannel+0x588>
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	fa93 f3a3 	rbit	r3, r3
 80074f6:	60fb      	str	r3, [r7, #12]
  return result;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	fab3 f383 	clz	r3, r3
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	3301      	adds	r3, #1
 8007502:	f003 021f 	and.w	r2, r3, #31
 8007506:	4613      	mov	r3, r2
 8007508:	005b      	lsls	r3, r3, #1
 800750a:	4413      	add	r3, r2
 800750c:	3b1e      	subs	r3, #30
 800750e:	051b      	lsls	r3, r3, #20
 8007510:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007514:	430b      	orrs	r3, r1
 8007516:	683a      	ldr	r2, [r7, #0]
 8007518:	6892      	ldr	r2, [r2, #8]
 800751a:	4619      	mov	r1, r3
 800751c:	f7ff faa2 	bl	8006a64 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	4b2e      	ldr	r3, [pc, #184]	; (80075e0 <HAL_ADC_ConfigChannel+0x654>)
 8007526:	4013      	ands	r3, r2
 8007528:	2b00      	cmp	r3, #0
 800752a:	f000 80c9 	beq.w	80076c0 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007536:	d004      	beq.n	8007542 <HAL_ADC_ConfigChannel+0x5b6>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a29      	ldr	r2, [pc, #164]	; (80075e4 <HAL_ADC_ConfigChannel+0x658>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d101      	bne.n	8007546 <HAL_ADC_ConfigChannel+0x5ba>
 8007542:	4b29      	ldr	r3, [pc, #164]	; (80075e8 <HAL_ADC_ConfigChannel+0x65c>)
 8007544:	e000      	b.n	8007548 <HAL_ADC_ConfigChannel+0x5bc>
 8007546:	4b29      	ldr	r3, [pc, #164]	; (80075ec <HAL_ADC_ConfigChannel+0x660>)
 8007548:	4618      	mov	r0, r3
 800754a:	f7ff f9c3 	bl	80068d4 <LL_ADC_GetCommonPathInternalCh>
 800754e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a26      	ldr	r2, [pc, #152]	; (80075f0 <HAL_ADC_ConfigChannel+0x664>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d004      	beq.n	8007566 <HAL_ADC_ConfigChannel+0x5da>
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a24      	ldr	r2, [pc, #144]	; (80075f4 <HAL_ADC_ConfigChannel+0x668>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d14e      	bne.n	8007604 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007566:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800756a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800756e:	2b00      	cmp	r3, #0
 8007570:	d148      	bne.n	8007604 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800757a:	d005      	beq.n	8007588 <HAL_ADC_ConfigChannel+0x5fc>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a1d      	ldr	r2, [pc, #116]	; (80075f8 <HAL_ADC_ConfigChannel+0x66c>)
 8007582:	4293      	cmp	r3, r2
 8007584:	f040 8099 	bne.w	80076ba <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007590:	d004      	beq.n	800759c <HAL_ADC_ConfigChannel+0x610>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a13      	ldr	r2, [pc, #76]	; (80075e4 <HAL_ADC_ConfigChannel+0x658>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d101      	bne.n	80075a0 <HAL_ADC_ConfigChannel+0x614>
 800759c:	4a12      	ldr	r2, [pc, #72]	; (80075e8 <HAL_ADC_ConfigChannel+0x65c>)
 800759e:	e000      	b.n	80075a2 <HAL_ADC_ConfigChannel+0x616>
 80075a0:	4a12      	ldr	r2, [pc, #72]	; (80075ec <HAL_ADC_ConfigChannel+0x660>)
 80075a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80075aa:	4619      	mov	r1, r3
 80075ac:	4610      	mov	r0, r2
 80075ae:	f7ff f97e 	bl	80068ae <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80075b2:	4b12      	ldr	r3, [pc, #72]	; (80075fc <HAL_ADC_ConfigChannel+0x670>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	099b      	lsrs	r3, r3, #6
 80075b8:	4a11      	ldr	r2, [pc, #68]	; (8007600 <HAL_ADC_ConfigChannel+0x674>)
 80075ba:	fba2 2303 	umull	r2, r3, r2, r3
 80075be:	099a      	lsrs	r2, r3, #6
 80075c0:	4613      	mov	r3, r2
 80075c2:	005b      	lsls	r3, r3, #1
 80075c4:	4413      	add	r3, r2
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80075ca:	e002      	b.n	80075d2 <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	3b01      	subs	r3, #1
 80075d0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d1f9      	bne.n	80075cc <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80075d8:	e06f      	b.n	80076ba <HAL_ADC_ConfigChannel+0x72e>
 80075da:	bf00      	nop
 80075dc:	407f0000 	.word	0x407f0000
 80075e0:	80080000 	.word	0x80080000
 80075e4:	50000100 	.word	0x50000100
 80075e8:	50000300 	.word	0x50000300
 80075ec:	50000700 	.word	0x50000700
 80075f0:	c3210000 	.word	0xc3210000
 80075f4:	90c00010 	.word	0x90c00010
 80075f8:	50000600 	.word	0x50000600
 80075fc:	20000c94 	.word	0x20000c94
 8007600:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a32      	ldr	r2, [pc, #200]	; (80076d4 <HAL_ADC_ConfigChannel+0x748>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d125      	bne.n	800765a <HAL_ADC_ConfigChannel+0x6ce>
 800760e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007612:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007616:	2b00      	cmp	r3, #0
 8007618:	d11f      	bne.n	800765a <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a2e      	ldr	r2, [pc, #184]	; (80076d8 <HAL_ADC_ConfigChannel+0x74c>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d104      	bne.n	800762e <HAL_ADC_ConfigChannel+0x6a2>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a2c      	ldr	r2, [pc, #176]	; (80076dc <HAL_ADC_ConfigChannel+0x750>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d047      	beq.n	80076be <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007636:	d004      	beq.n	8007642 <HAL_ADC_ConfigChannel+0x6b6>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a26      	ldr	r2, [pc, #152]	; (80076d8 <HAL_ADC_ConfigChannel+0x74c>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d101      	bne.n	8007646 <HAL_ADC_ConfigChannel+0x6ba>
 8007642:	4a27      	ldr	r2, [pc, #156]	; (80076e0 <HAL_ADC_ConfigChannel+0x754>)
 8007644:	e000      	b.n	8007648 <HAL_ADC_ConfigChannel+0x6bc>
 8007646:	4a27      	ldr	r2, [pc, #156]	; (80076e4 <HAL_ADC_ConfigChannel+0x758>)
 8007648:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800764c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007650:	4619      	mov	r1, r3
 8007652:	4610      	mov	r0, r2
 8007654:	f7ff f92b 	bl	80068ae <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007658:	e031      	b.n	80076be <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a22      	ldr	r2, [pc, #136]	; (80076e8 <HAL_ADC_ConfigChannel+0x75c>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d12d      	bne.n	80076c0 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007664:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007668:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800766c:	2b00      	cmp	r3, #0
 800766e:	d127      	bne.n	80076c0 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a18      	ldr	r2, [pc, #96]	; (80076d8 <HAL_ADC_ConfigChannel+0x74c>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d022      	beq.n	80076c0 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007682:	d004      	beq.n	800768e <HAL_ADC_ConfigChannel+0x702>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a13      	ldr	r2, [pc, #76]	; (80076d8 <HAL_ADC_ConfigChannel+0x74c>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d101      	bne.n	8007692 <HAL_ADC_ConfigChannel+0x706>
 800768e:	4a14      	ldr	r2, [pc, #80]	; (80076e0 <HAL_ADC_ConfigChannel+0x754>)
 8007690:	e000      	b.n	8007694 <HAL_ADC_ConfigChannel+0x708>
 8007692:	4a14      	ldr	r2, [pc, #80]	; (80076e4 <HAL_ADC_ConfigChannel+0x758>)
 8007694:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007698:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800769c:	4619      	mov	r1, r3
 800769e:	4610      	mov	r0, r2
 80076a0:	f7ff f905 	bl	80068ae <LL_ADC_SetCommonPathInternalCh>
 80076a4:	e00c      	b.n	80076c0 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076aa:	f043 0220 	orr.w	r2, r3, #32
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80076b8:	e002      	b.n	80076c0 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80076ba:	bf00      	nop
 80076bc:	e000      	b.n	80076c0 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80076be:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80076c8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3798      	adds	r7, #152	; 0x98
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	c7520000 	.word	0xc7520000
 80076d8:	50000100 	.word	0x50000100
 80076dc:	50000500 	.word	0x50000500
 80076e0:	50000300 	.word	0x50000300
 80076e4:	50000700 	.word	0x50000700
 80076e8:	cb840000 	.word	0xcb840000

080076ec <LL_ADC_IsEnabled>:
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	f003 0301 	and.w	r3, r3, #1
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d101      	bne.n	8007704 <LL_ADC_IsEnabled+0x18>
 8007700:	2301      	movs	r3, #1
 8007702:	e000      	b.n	8007706 <LL_ADC_IsEnabled+0x1a>
 8007704:	2300      	movs	r3, #0
}
 8007706:	4618      	mov	r0, r3
 8007708:	370c      	adds	r7, #12
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr

08007712 <LL_ADC_REG_IsConversionOngoing>:
{
 8007712:	b480      	push	{r7}
 8007714:	b083      	sub	sp, #12
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	f003 0304 	and.w	r3, r3, #4
 8007722:	2b04      	cmp	r3, #4
 8007724:	d101      	bne.n	800772a <LL_ADC_REG_IsConversionOngoing+0x18>
 8007726:	2301      	movs	r3, #1
 8007728:	e000      	b.n	800772c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	370c      	adds	r7, #12
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr

08007738 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8007738:	b590      	push	{r4, r7, lr}
 800773a:	b0a1      	sub	sp, #132	; 0x84
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007742:	2300      	movs	r3, #0
 8007744:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800774e:	2b01      	cmp	r3, #1
 8007750:	d101      	bne.n	8007756 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8007752:	2302      	movs	r3, #2
 8007754:	e0e3      	b.n	800791e <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2201      	movs	r2, #1
 800775a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007766:	d102      	bne.n	800776e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8007768:	4b6f      	ldr	r3, [pc, #444]	; (8007928 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800776a:	60bb      	str	r3, [r7, #8]
 800776c:	e009      	b.n	8007782 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a6e      	ldr	r2, [pc, #440]	; (800792c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d102      	bne.n	800777e <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8007778:	4b6d      	ldr	r3, [pc, #436]	; (8007930 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800777a:	60bb      	str	r3, [r7, #8]
 800777c:	e001      	b.n	8007782 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800777e:	2300      	movs	r3, #0
 8007780:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d10b      	bne.n	80077a0 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800778c:	f043 0220 	orr.w	r2, r3, #32
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	e0be      	b.n	800791e <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7ff ffb5 	bl	8007712 <LL_ADC_REG_IsConversionOngoing>
 80077a8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4618      	mov	r0, r3
 80077b0:	f7ff ffaf 	bl	8007712 <LL_ADC_REG_IsConversionOngoing>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	f040 80a0 	bne.w	80078fc <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80077bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077be:	2b00      	cmp	r3, #0
 80077c0:	f040 809c 	bne.w	80078fc <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80077cc:	d004      	beq.n	80077d8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a55      	ldr	r2, [pc, #340]	; (8007928 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d101      	bne.n	80077dc <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 80077d8:	4b56      	ldr	r3, [pc, #344]	; (8007934 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80077da:	e000      	b.n	80077de <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 80077dc:	4b56      	ldr	r3, [pc, #344]	; (8007938 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80077de:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d04b      	beq.n	8007880 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80077e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	6859      	ldr	r1, [r3, #4]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80077fa:	035b      	lsls	r3, r3, #13
 80077fc:	430b      	orrs	r3, r1
 80077fe:	431a      	orrs	r2, r3
 8007800:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007802:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800780c:	d004      	beq.n	8007818 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a45      	ldr	r2, [pc, #276]	; (8007928 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d10f      	bne.n	8007838 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8007818:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800781c:	f7ff ff66 	bl	80076ec <LL_ADC_IsEnabled>
 8007820:	4604      	mov	r4, r0
 8007822:	4841      	ldr	r0, [pc, #260]	; (8007928 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8007824:	f7ff ff62 	bl	80076ec <LL_ADC_IsEnabled>
 8007828:	4603      	mov	r3, r0
 800782a:	4323      	orrs	r3, r4
 800782c:	2b00      	cmp	r3, #0
 800782e:	bf0c      	ite	eq
 8007830:	2301      	moveq	r3, #1
 8007832:	2300      	movne	r3, #0
 8007834:	b2db      	uxtb	r3, r3
 8007836:	e012      	b.n	800785e <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8007838:	483c      	ldr	r0, [pc, #240]	; (800792c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800783a:	f7ff ff57 	bl	80076ec <LL_ADC_IsEnabled>
 800783e:	4604      	mov	r4, r0
 8007840:	483b      	ldr	r0, [pc, #236]	; (8007930 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007842:	f7ff ff53 	bl	80076ec <LL_ADC_IsEnabled>
 8007846:	4603      	mov	r3, r0
 8007848:	431c      	orrs	r4, r3
 800784a:	483c      	ldr	r0, [pc, #240]	; (800793c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800784c:	f7ff ff4e 	bl	80076ec <LL_ADC_IsEnabled>
 8007850:	4603      	mov	r3, r0
 8007852:	4323      	orrs	r3, r4
 8007854:	2b00      	cmp	r3, #0
 8007856:	bf0c      	ite	eq
 8007858:	2301      	moveq	r3, #1
 800785a:	2300      	movne	r3, #0
 800785c:	b2db      	uxtb	r3, r3
 800785e:	2b00      	cmp	r3, #0
 8007860:	d056      	beq.n	8007910 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007862:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800786a:	f023 030f 	bic.w	r3, r3, #15
 800786e:	683a      	ldr	r2, [r7, #0]
 8007870:	6811      	ldr	r1, [r2, #0]
 8007872:	683a      	ldr	r2, [r7, #0]
 8007874:	6892      	ldr	r2, [r2, #8]
 8007876:	430a      	orrs	r2, r1
 8007878:	431a      	orrs	r2, r3
 800787a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800787c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800787e:	e047      	b.n	8007910 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8007880:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007888:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800788a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007894:	d004      	beq.n	80078a0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a23      	ldr	r2, [pc, #140]	; (8007928 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d10f      	bne.n	80078c0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80078a0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80078a4:	f7ff ff22 	bl	80076ec <LL_ADC_IsEnabled>
 80078a8:	4604      	mov	r4, r0
 80078aa:	481f      	ldr	r0, [pc, #124]	; (8007928 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80078ac:	f7ff ff1e 	bl	80076ec <LL_ADC_IsEnabled>
 80078b0:	4603      	mov	r3, r0
 80078b2:	4323      	orrs	r3, r4
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	bf0c      	ite	eq
 80078b8:	2301      	moveq	r3, #1
 80078ba:	2300      	movne	r3, #0
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	e012      	b.n	80078e6 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 80078c0:	481a      	ldr	r0, [pc, #104]	; (800792c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80078c2:	f7ff ff13 	bl	80076ec <LL_ADC_IsEnabled>
 80078c6:	4604      	mov	r4, r0
 80078c8:	4819      	ldr	r0, [pc, #100]	; (8007930 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80078ca:	f7ff ff0f 	bl	80076ec <LL_ADC_IsEnabled>
 80078ce:	4603      	mov	r3, r0
 80078d0:	431c      	orrs	r4, r3
 80078d2:	481a      	ldr	r0, [pc, #104]	; (800793c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80078d4:	f7ff ff0a 	bl	80076ec <LL_ADC_IsEnabled>
 80078d8:	4603      	mov	r3, r0
 80078da:	4323      	orrs	r3, r4
 80078dc:	2b00      	cmp	r3, #0
 80078de:	bf0c      	ite	eq
 80078e0:	2301      	moveq	r3, #1
 80078e2:	2300      	movne	r3, #0
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d012      	beq.n	8007910 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80078ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80078f2:	f023 030f 	bic.w	r3, r3, #15
 80078f6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80078f8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80078fa:	e009      	b.n	8007910 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007900:	f043 0220 	orr.w	r2, r3, #32
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800790e:	e000      	b.n	8007912 <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007910:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800791a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800791e:	4618      	mov	r0, r3
 8007920:	3784      	adds	r7, #132	; 0x84
 8007922:	46bd      	mov	sp, r7
 8007924:	bd90      	pop	{r4, r7, pc}
 8007926:	bf00      	nop
 8007928:	50000100 	.word	0x50000100
 800792c:	50000400 	.word	0x50000400
 8007930:	50000500 	.word	0x50000500
 8007934:	50000300 	.word	0x50000300
 8007938:	50000700 	.word	0x50000700
 800793c:	50000600 	.word	0x50000600

08007940 <LL_EXTI_EnableIT_0_31>:
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8007948:	4b05      	ldr	r3, [pc, #20]	; (8007960 <LL_EXTI_EnableIT_0_31+0x20>)
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	4904      	ldr	r1, [pc, #16]	; (8007960 <LL_EXTI_EnableIT_0_31+0x20>)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	4313      	orrs	r3, r2
 8007952:	600b      	str	r3, [r1, #0]
}
 8007954:	bf00      	nop
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr
 8007960:	40010400 	.word	0x40010400

08007964 <LL_EXTI_EnableIT_32_63>:
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800796c:	4b05      	ldr	r3, [pc, #20]	; (8007984 <LL_EXTI_EnableIT_32_63+0x20>)
 800796e:	6a1a      	ldr	r2, [r3, #32]
 8007970:	4904      	ldr	r1, [pc, #16]	; (8007984 <LL_EXTI_EnableIT_32_63+0x20>)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4313      	orrs	r3, r2
 8007976:	620b      	str	r3, [r1, #32]
}
 8007978:	bf00      	nop
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr
 8007984:	40010400 	.word	0x40010400

08007988 <LL_EXTI_DisableIT_0_31>:
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8007990:	4b06      	ldr	r3, [pc, #24]	; (80079ac <LL_EXTI_DisableIT_0_31+0x24>)
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	43db      	mvns	r3, r3
 8007998:	4904      	ldr	r1, [pc, #16]	; (80079ac <LL_EXTI_DisableIT_0_31+0x24>)
 800799a:	4013      	ands	r3, r2
 800799c:	600b      	str	r3, [r1, #0]
}
 800799e:	bf00      	nop
 80079a0:	370c      	adds	r7, #12
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr
 80079aa:	bf00      	nop
 80079ac:	40010400 	.word	0x40010400

080079b0 <LL_EXTI_DisableIT_32_63>:
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80079b8:	4b06      	ldr	r3, [pc, #24]	; (80079d4 <LL_EXTI_DisableIT_32_63+0x24>)
 80079ba:	6a1a      	ldr	r2, [r3, #32]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	43db      	mvns	r3, r3
 80079c0:	4904      	ldr	r1, [pc, #16]	; (80079d4 <LL_EXTI_DisableIT_32_63+0x24>)
 80079c2:	4013      	ands	r3, r2
 80079c4:	620b      	str	r3, [r1, #32]
}
 80079c6:	bf00      	nop
 80079c8:	370c      	adds	r7, #12
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr
 80079d2:	bf00      	nop
 80079d4:	40010400 	.word	0x40010400

080079d8 <LL_EXTI_EnableEvent_0_31>:
{
 80079d8:	b480      	push	{r7}
 80079da:	b083      	sub	sp, #12
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80079e0:	4b05      	ldr	r3, [pc, #20]	; (80079f8 <LL_EXTI_EnableEvent_0_31+0x20>)
 80079e2:	685a      	ldr	r2, [r3, #4]
 80079e4:	4904      	ldr	r1, [pc, #16]	; (80079f8 <LL_EXTI_EnableEvent_0_31+0x20>)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4313      	orrs	r3, r2
 80079ea:	604b      	str	r3, [r1, #4]
}
 80079ec:	bf00      	nop
 80079ee:	370c      	adds	r7, #12
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr
 80079f8:	40010400 	.word	0x40010400

080079fc <LL_EXTI_EnableEvent_32_63>:
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8007a04:	4b05      	ldr	r3, [pc, #20]	; (8007a1c <LL_EXTI_EnableEvent_32_63+0x20>)
 8007a06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a08:	4904      	ldr	r1, [pc, #16]	; (8007a1c <LL_EXTI_EnableEvent_32_63+0x20>)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007a10:	bf00      	nop
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr
 8007a1c:	40010400 	.word	0x40010400

08007a20 <LL_EXTI_DisableEvent_0_31>:
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8007a28:	4b06      	ldr	r3, [pc, #24]	; (8007a44 <LL_EXTI_DisableEvent_0_31+0x24>)
 8007a2a:	685a      	ldr	r2, [r3, #4]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	43db      	mvns	r3, r3
 8007a30:	4904      	ldr	r1, [pc, #16]	; (8007a44 <LL_EXTI_DisableEvent_0_31+0x24>)
 8007a32:	4013      	ands	r3, r2
 8007a34:	604b      	str	r3, [r1, #4]
}
 8007a36:	bf00      	nop
 8007a38:	370c      	adds	r7, #12
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop
 8007a44:	40010400 	.word	0x40010400

08007a48 <LL_EXTI_DisableEvent_32_63>:
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b083      	sub	sp, #12
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8007a50:	4b06      	ldr	r3, [pc, #24]	; (8007a6c <LL_EXTI_DisableEvent_32_63+0x24>)
 8007a52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	43db      	mvns	r3, r3
 8007a58:	4904      	ldr	r1, [pc, #16]	; (8007a6c <LL_EXTI_DisableEvent_32_63+0x24>)
 8007a5a:	4013      	ands	r3, r2
 8007a5c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007a5e:	bf00      	nop
 8007a60:	370c      	adds	r7, #12
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr
 8007a6a:	bf00      	nop
 8007a6c:	40010400 	.word	0x40010400

08007a70 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8007a78:	4b05      	ldr	r3, [pc, #20]	; (8007a90 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007a7a:	689a      	ldr	r2, [r3, #8]
 8007a7c:	4904      	ldr	r1, [pc, #16]	; (8007a90 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	608b      	str	r3, [r1, #8]
}
 8007a84:	bf00      	nop
 8007a86:	370c      	adds	r7, #12
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr
 8007a90:	40010400 	.word	0x40010400

08007a94 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8007a9c:	4b05      	ldr	r3, [pc, #20]	; (8007ab4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8007a9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007aa0:	4904      	ldr	r1, [pc, #16]	; (8007ab4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	628b      	str	r3, [r1, #40]	; 0x28
}
 8007aa8:	bf00      	nop
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr
 8007ab4:	40010400 	.word	0x40010400

08007ab8 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8007ac0:	4b06      	ldr	r3, [pc, #24]	; (8007adc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007ac2:	689a      	ldr	r2, [r3, #8]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	43db      	mvns	r3, r3
 8007ac8:	4904      	ldr	r1, [pc, #16]	; (8007adc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007aca:	4013      	ands	r3, r2
 8007acc:	608b      	str	r3, [r1, #8]
}
 8007ace:	bf00      	nop
 8007ad0:	370c      	adds	r7, #12
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	40010400 	.word	0x40010400

08007ae0 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8007ae8:	4b06      	ldr	r3, [pc, #24]	; (8007b04 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8007aea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	43db      	mvns	r3, r3
 8007af0:	4904      	ldr	r1, [pc, #16]	; (8007b04 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8007af2:	4013      	ands	r3, r2
 8007af4:	628b      	str	r3, [r1, #40]	; 0x28
}
 8007af6:	bf00      	nop
 8007af8:	370c      	adds	r7, #12
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	40010400 	.word	0x40010400

08007b08 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8007b10:	4b05      	ldr	r3, [pc, #20]	; (8007b28 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007b12:	68da      	ldr	r2, [r3, #12]
 8007b14:	4904      	ldr	r1, [pc, #16]	; (8007b28 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	60cb      	str	r3, [r1, #12]
}
 8007b1c:	bf00      	nop
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr
 8007b28:	40010400 	.word	0x40010400

08007b2c <LL_EXTI_EnableFallingTrig_32_63>:
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8007b34:	4b05      	ldr	r3, [pc, #20]	; (8007b4c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8007b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b38:	4904      	ldr	r1, [pc, #16]	; (8007b4c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8007b40:	bf00      	nop
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr
 8007b4c:	40010400 	.word	0x40010400

08007b50 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8007b58:	4b06      	ldr	r3, [pc, #24]	; (8007b74 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007b5a:	68da      	ldr	r2, [r3, #12]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	43db      	mvns	r3, r3
 8007b60:	4904      	ldr	r1, [pc, #16]	; (8007b74 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007b62:	4013      	ands	r3, r2
 8007b64:	60cb      	str	r3, [r1, #12]
}
 8007b66:	bf00      	nop
 8007b68:	370c      	adds	r7, #12
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr
 8007b72:	bf00      	nop
 8007b74:	40010400 	.word	0x40010400

08007b78 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8007b80:	4b06      	ldr	r3, [pc, #24]	; (8007b9c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8007b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	43db      	mvns	r3, r3
 8007b88:	4904      	ldr	r1, [pc, #16]	; (8007b9c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8007b8e:	bf00      	nop
 8007b90:	370c      	adds	r7, #12
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	40010400 	.word	0x40010400

08007ba0 <LL_EXTI_ClearFlag_0_31>:
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8007ba8:	4a04      	ldr	r2, [pc, #16]	; (8007bbc <LL_EXTI_ClearFlag_0_31+0x1c>)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6153      	str	r3, [r2, #20]
}
 8007bae:	bf00      	nop
 8007bb0:	370c      	adds	r7, #12
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr
 8007bba:	bf00      	nop
 8007bbc:	40010400 	.word	0x40010400

08007bc0 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b083      	sub	sp, #12
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8007bc8:	4a04      	ldr	r2, [pc, #16]	; (8007bdc <LL_EXTI_ClearFlag_32_63+0x1c>)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6353      	str	r3, [r2, #52]	; 0x34
}
 8007bce:	bf00      	nop
 8007bd0:	370c      	adds	r7, #12
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr
 8007bda:	bf00      	nop
 8007bdc:	40010400 	.word	0x40010400

08007be0 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b088      	sub	sp, #32
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8007be8:	2300      	movs	r3, #0
 8007bea:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007bec:	2300      	movs	r3, #0
 8007bee:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d102      	bne.n	8007bfc <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	77fb      	strb	r3, [r7, #31]
 8007bfa:	e180      	b.n	8007efe <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c0a:	d102      	bne.n	8007c12 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	77fb      	strb	r3, [r7, #31]
 8007c10:	e175      	b.n	8007efe <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	7f5b      	ldrb	r3, [r3, #29]
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d108      	bne.n	8007c2e <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f7fd f8dd 	bl	8004de8 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c38:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	695b      	ldr	r3, [r3, #20]
 8007c48:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	68db      	ldr	r3, [r3, #12]
 8007c4e:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8007c54:	4313      	orrs	r3, r2
 8007c56:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	4b98      	ldr	r3, [pc, #608]	; (8007ec0 <HAL_COMP_Init+0x2e0>)
 8007c60:	4013      	ands	r3, r2
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	6812      	ldr	r2, [r2, #0]
 8007c66:	6979      	ldr	r1, [r7, #20]
 8007c68:	430b      	orrs	r3, r1
 8007c6a:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d015      	beq.n	8007ca6 <HAL_COMP_Init+0xc6>
 8007c7a:	69bb      	ldr	r3, [r7, #24]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d112      	bne.n	8007ca6 <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8007c80:	4b90      	ldr	r3, [pc, #576]	; (8007ec4 <HAL_COMP_Init+0x2e4>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	099b      	lsrs	r3, r3, #6
 8007c86:	4a90      	ldr	r2, [pc, #576]	; (8007ec8 <HAL_COMP_Init+0x2e8>)
 8007c88:	fba2 2303 	umull	r2, r3, r2, r3
 8007c8c:	099a      	lsrs	r2, r3, #6
 8007c8e:	4613      	mov	r3, r2
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	4413      	add	r3, r2
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8007c98:	e002      	b.n	8007ca0 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	3b01      	subs	r3, #1
 8007c9e:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d1f9      	bne.n	8007c9a <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a88      	ldr	r2, [pc, #544]	; (8007ecc <HAL_COMP_Init+0x2ec>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d028      	beq.n	8007d02 <HAL_COMP_Init+0x122>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a86      	ldr	r2, [pc, #536]	; (8007ed0 <HAL_COMP_Init+0x2f0>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d020      	beq.n	8007cfc <HAL_COMP_Init+0x11c>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a85      	ldr	r2, [pc, #532]	; (8007ed4 <HAL_COMP_Init+0x2f4>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d018      	beq.n	8007cf6 <HAL_COMP_Init+0x116>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a83      	ldr	r2, [pc, #524]	; (8007ed8 <HAL_COMP_Init+0x2f8>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d010      	beq.n	8007cf0 <HAL_COMP_Init+0x110>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a82      	ldr	r2, [pc, #520]	; (8007edc <HAL_COMP_Init+0x2fc>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d008      	beq.n	8007cea <HAL_COMP_Init+0x10a>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a80      	ldr	r2, [pc, #512]	; (8007ee0 <HAL_COMP_Init+0x300>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d101      	bne.n	8007ce6 <HAL_COMP_Init+0x106>
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e00f      	b.n	8007d06 <HAL_COMP_Init+0x126>
 8007ce6:	2302      	movs	r3, #2
 8007ce8:	e00d      	b.n	8007d06 <HAL_COMP_Init+0x126>
 8007cea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007cee:	e00a      	b.n	8007d06 <HAL_COMP_Init+0x126>
 8007cf0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007cf4:	e007      	b.n	8007d06 <HAL_COMP_Init+0x126>
 8007cf6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8007cfa:	e004      	b.n	8007d06 <HAL_COMP_Init+0x126>
 8007cfc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007d00:	e001      	b.n	8007d06 <HAL_COMP_Init+0x126>
 8007d02:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007d06:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	699b      	ldr	r3, [r3, #24]
 8007d0c:	f003 0303 	and.w	r3, r3, #3
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	f000 80b6 	beq.w	8007e82 <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	699b      	ldr	r3, [r3, #24]
 8007d1a:	f003 0310 	and.w	r3, r3, #16
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d011      	beq.n	8007d46 <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a6e      	ldr	r2, [pc, #440]	; (8007ee0 <HAL_COMP_Init+0x300>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d004      	beq.n	8007d36 <HAL_COMP_Init+0x156>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a6c      	ldr	r2, [pc, #432]	; (8007ee4 <HAL_COMP_Init+0x304>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d103      	bne.n	8007d3e <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8007d36:	6938      	ldr	r0, [r7, #16]
 8007d38:	f7ff feac 	bl	8007a94 <LL_EXTI_EnableRisingTrig_32_63>
 8007d3c:	e014      	b.n	8007d68 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8007d3e:	6938      	ldr	r0, [r7, #16]
 8007d40:	f7ff fe96 	bl	8007a70 <LL_EXTI_EnableRisingTrig_0_31>
 8007d44:	e010      	b.n	8007d68 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a65      	ldr	r2, [pc, #404]	; (8007ee0 <HAL_COMP_Init+0x300>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d004      	beq.n	8007d5a <HAL_COMP_Init+0x17a>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a63      	ldr	r2, [pc, #396]	; (8007ee4 <HAL_COMP_Init+0x304>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d103      	bne.n	8007d62 <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8007d5a:	6938      	ldr	r0, [r7, #16]
 8007d5c:	f7ff fec0 	bl	8007ae0 <LL_EXTI_DisableRisingTrig_32_63>
 8007d60:	e002      	b.n	8007d68 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8007d62:	6938      	ldr	r0, [r7, #16]
 8007d64:	f7ff fea8 	bl	8007ab8 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	699b      	ldr	r3, [r3, #24]
 8007d6c:	f003 0320 	and.w	r3, r3, #32
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d011      	beq.n	8007d98 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a59      	ldr	r2, [pc, #356]	; (8007ee0 <HAL_COMP_Init+0x300>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d004      	beq.n	8007d88 <HAL_COMP_Init+0x1a8>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a58      	ldr	r2, [pc, #352]	; (8007ee4 <HAL_COMP_Init+0x304>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d103      	bne.n	8007d90 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8007d88:	6938      	ldr	r0, [r7, #16]
 8007d8a:	f7ff fecf 	bl	8007b2c <LL_EXTI_EnableFallingTrig_32_63>
 8007d8e:	e014      	b.n	8007dba <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8007d90:	6938      	ldr	r0, [r7, #16]
 8007d92:	f7ff feb9 	bl	8007b08 <LL_EXTI_EnableFallingTrig_0_31>
 8007d96:	e010      	b.n	8007dba <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a50      	ldr	r2, [pc, #320]	; (8007ee0 <HAL_COMP_Init+0x300>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d004      	beq.n	8007dac <HAL_COMP_Init+0x1cc>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a4f      	ldr	r2, [pc, #316]	; (8007ee4 <HAL_COMP_Init+0x304>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d103      	bne.n	8007db4 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8007dac:	6938      	ldr	r0, [r7, #16]
 8007dae:	f7ff fee3 	bl	8007b78 <LL_EXTI_DisableFallingTrig_32_63>
 8007db2:	e002      	b.n	8007dba <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8007db4:	6938      	ldr	r0, [r7, #16]
 8007db6:	f7ff fecb 	bl	8007b50 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a48      	ldr	r2, [pc, #288]	; (8007ee0 <HAL_COMP_Init+0x300>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d004      	beq.n	8007dce <HAL_COMP_Init+0x1ee>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a46      	ldr	r2, [pc, #280]	; (8007ee4 <HAL_COMP_Init+0x304>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d103      	bne.n	8007dd6 <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8007dce:	6938      	ldr	r0, [r7, #16]
 8007dd0:	f7ff fef6 	bl	8007bc0 <LL_EXTI_ClearFlag_32_63>
 8007dd4:	e002      	b.n	8007ddc <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8007dd6:	6938      	ldr	r0, [r7, #16]
 8007dd8:	f7ff fee2 	bl	8007ba0 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	699b      	ldr	r3, [r3, #24]
 8007de0:	f003 0302 	and.w	r3, r3, #2
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d011      	beq.n	8007e0c <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a3c      	ldr	r2, [pc, #240]	; (8007ee0 <HAL_COMP_Init+0x300>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d004      	beq.n	8007dfc <HAL_COMP_Init+0x21c>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a3b      	ldr	r2, [pc, #236]	; (8007ee4 <HAL_COMP_Init+0x304>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d103      	bne.n	8007e04 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8007dfc:	6938      	ldr	r0, [r7, #16]
 8007dfe:	f7ff fdfd 	bl	80079fc <LL_EXTI_EnableEvent_32_63>
 8007e02:	e014      	b.n	8007e2e <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8007e04:	6938      	ldr	r0, [r7, #16]
 8007e06:	f7ff fde7 	bl	80079d8 <LL_EXTI_EnableEvent_0_31>
 8007e0a:	e010      	b.n	8007e2e <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a33      	ldr	r2, [pc, #204]	; (8007ee0 <HAL_COMP_Init+0x300>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d004      	beq.n	8007e20 <HAL_COMP_Init+0x240>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a32      	ldr	r2, [pc, #200]	; (8007ee4 <HAL_COMP_Init+0x304>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d103      	bne.n	8007e28 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8007e20:	6938      	ldr	r0, [r7, #16]
 8007e22:	f7ff fe11 	bl	8007a48 <LL_EXTI_DisableEvent_32_63>
 8007e26:	e002      	b.n	8007e2e <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8007e28:	6938      	ldr	r0, [r7, #16]
 8007e2a:	f7ff fdf9 	bl	8007a20 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	699b      	ldr	r3, [r3, #24]
 8007e32:	f003 0301 	and.w	r3, r3, #1
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d011      	beq.n	8007e5e <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a28      	ldr	r2, [pc, #160]	; (8007ee0 <HAL_COMP_Init+0x300>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d004      	beq.n	8007e4e <HAL_COMP_Init+0x26e>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a26      	ldr	r2, [pc, #152]	; (8007ee4 <HAL_COMP_Init+0x304>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d103      	bne.n	8007e56 <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8007e4e:	6938      	ldr	r0, [r7, #16]
 8007e50:	f7ff fd88 	bl	8007964 <LL_EXTI_EnableIT_32_63>
 8007e54:	e04b      	b.n	8007eee <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8007e56:	6938      	ldr	r0, [r7, #16]
 8007e58:	f7ff fd72 	bl	8007940 <LL_EXTI_EnableIT_0_31>
 8007e5c:	e047      	b.n	8007eee <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a1f      	ldr	r2, [pc, #124]	; (8007ee0 <HAL_COMP_Init+0x300>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d004      	beq.n	8007e72 <HAL_COMP_Init+0x292>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a1d      	ldr	r2, [pc, #116]	; (8007ee4 <HAL_COMP_Init+0x304>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d103      	bne.n	8007e7a <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8007e72:	6938      	ldr	r0, [r7, #16]
 8007e74:	f7ff fd9c 	bl	80079b0 <LL_EXTI_DisableIT_32_63>
 8007e78:	e039      	b.n	8007eee <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8007e7a:	6938      	ldr	r0, [r7, #16]
 8007e7c:	f7ff fd84 	bl	8007988 <LL_EXTI_DisableIT_0_31>
 8007e80:	e035      	b.n	8007eee <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a16      	ldr	r2, [pc, #88]	; (8007ee0 <HAL_COMP_Init+0x300>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d004      	beq.n	8007e96 <HAL_COMP_Init+0x2b6>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a14      	ldr	r2, [pc, #80]	; (8007ee4 <HAL_COMP_Init+0x304>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d103      	bne.n	8007e9e <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8007e96:	6938      	ldr	r0, [r7, #16]
 8007e98:	f7ff fdd6 	bl	8007a48 <LL_EXTI_DisableEvent_32_63>
 8007e9c:	e002      	b.n	8007ea4 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8007e9e:	6938      	ldr	r0, [r7, #16]
 8007ea0:	f7ff fdbe 	bl	8007a20 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a0d      	ldr	r2, [pc, #52]	; (8007ee0 <HAL_COMP_Init+0x300>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d004      	beq.n	8007eb8 <HAL_COMP_Init+0x2d8>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a0c      	ldr	r2, [pc, #48]	; (8007ee4 <HAL_COMP_Init+0x304>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d117      	bne.n	8007ee8 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8007eb8:	6938      	ldr	r0, [r7, #16]
 8007eba:	f7ff fd79 	bl	80079b0 <LL_EXTI_DisableIT_32_63>
 8007ebe:	e016      	b.n	8007eee <HAL_COMP_Init+0x30e>
 8007ec0:	ff007e0f 	.word	0xff007e0f
 8007ec4:	20000c94 	.word	0x20000c94
 8007ec8:	053e2d63 	.word	0x053e2d63
 8007ecc:	40010200 	.word	0x40010200
 8007ed0:	40010204 	.word	0x40010204
 8007ed4:	40010208 	.word	0x40010208
 8007ed8:	4001020c 	.word	0x4001020c
 8007edc:	40010210 	.word	0x40010210
 8007ee0:	40010214 	.word	0x40010214
 8007ee4:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8007ee8:	6938      	ldr	r0, [r7, #16]
 8007eea:	f7ff fd4d 	bl	8007988 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	7f5b      	ldrb	r3, [r3, #29]
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d102      	bne.n	8007efe <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8007efe:	7ffb      	ldrb	r3, [r7, #31]
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3720      	adds	r7, #32
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <__NVIC_SetPriorityGrouping>:
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b085      	sub	sp, #20
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f003 0307 	and.w	r3, r3, #7
 8007f16:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007f18:	4b0c      	ldr	r3, [pc, #48]	; (8007f4c <__NVIC_SetPriorityGrouping+0x44>)
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007f1e:	68ba      	ldr	r2, [r7, #8]
 8007f20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007f24:	4013      	ands	r3, r2
 8007f26:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007f30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007f3a:	4a04      	ldr	r2, [pc, #16]	; (8007f4c <__NVIC_SetPriorityGrouping+0x44>)
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	60d3      	str	r3, [r2, #12]
}
 8007f40:	bf00      	nop
 8007f42:	3714      	adds	r7, #20
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr
 8007f4c:	e000ed00 	.word	0xe000ed00

08007f50 <__NVIC_GetPriorityGrouping>:
{
 8007f50:	b480      	push	{r7}
 8007f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007f54:	4b04      	ldr	r3, [pc, #16]	; (8007f68 <__NVIC_GetPriorityGrouping+0x18>)
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	0a1b      	lsrs	r3, r3, #8
 8007f5a:	f003 0307 	and.w	r3, r3, #7
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr
 8007f68:	e000ed00 	.word	0xe000ed00

08007f6c <__NVIC_EnableIRQ>:
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	4603      	mov	r3, r0
 8007f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	db0b      	blt.n	8007f96 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007f7e:	79fb      	ldrb	r3, [r7, #7]
 8007f80:	f003 021f 	and.w	r2, r3, #31
 8007f84:	4907      	ldr	r1, [pc, #28]	; (8007fa4 <__NVIC_EnableIRQ+0x38>)
 8007f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f8a:	095b      	lsrs	r3, r3, #5
 8007f8c:	2001      	movs	r0, #1
 8007f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8007f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007f96:	bf00      	nop
 8007f98:	370c      	adds	r7, #12
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr
 8007fa2:	bf00      	nop
 8007fa4:	e000e100 	.word	0xe000e100

08007fa8 <__NVIC_SetPriority>:
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	4603      	mov	r3, r0
 8007fb0:	6039      	str	r1, [r7, #0]
 8007fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	db0a      	blt.n	8007fd2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	b2da      	uxtb	r2, r3
 8007fc0:	490c      	ldr	r1, [pc, #48]	; (8007ff4 <__NVIC_SetPriority+0x4c>)
 8007fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fc6:	0112      	lsls	r2, r2, #4
 8007fc8:	b2d2      	uxtb	r2, r2
 8007fca:	440b      	add	r3, r1
 8007fcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007fd0:	e00a      	b.n	8007fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	b2da      	uxtb	r2, r3
 8007fd6:	4908      	ldr	r1, [pc, #32]	; (8007ff8 <__NVIC_SetPriority+0x50>)
 8007fd8:	79fb      	ldrb	r3, [r7, #7]
 8007fda:	f003 030f 	and.w	r3, r3, #15
 8007fde:	3b04      	subs	r3, #4
 8007fe0:	0112      	lsls	r2, r2, #4
 8007fe2:	b2d2      	uxtb	r2, r2
 8007fe4:	440b      	add	r3, r1
 8007fe6:	761a      	strb	r2, [r3, #24]
}
 8007fe8:	bf00      	nop
 8007fea:	370c      	adds	r7, #12
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr
 8007ff4:	e000e100 	.word	0xe000e100
 8007ff8:	e000ed00 	.word	0xe000ed00

08007ffc <NVIC_EncodePriority>:
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b089      	sub	sp, #36	; 0x24
 8008000:	af00      	add	r7, sp, #0
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f003 0307 	and.w	r3, r3, #7
 800800e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008010:	69fb      	ldr	r3, [r7, #28]
 8008012:	f1c3 0307 	rsb	r3, r3, #7
 8008016:	2b04      	cmp	r3, #4
 8008018:	bf28      	it	cs
 800801a:	2304      	movcs	r3, #4
 800801c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800801e:	69fb      	ldr	r3, [r7, #28]
 8008020:	3304      	adds	r3, #4
 8008022:	2b06      	cmp	r3, #6
 8008024:	d902      	bls.n	800802c <NVIC_EncodePriority+0x30>
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	3b03      	subs	r3, #3
 800802a:	e000      	b.n	800802e <NVIC_EncodePriority+0x32>
 800802c:	2300      	movs	r3, #0
 800802e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008030:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008034:	69bb      	ldr	r3, [r7, #24]
 8008036:	fa02 f303 	lsl.w	r3, r2, r3
 800803a:	43da      	mvns	r2, r3
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	401a      	ands	r2, r3
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008044:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	fa01 f303 	lsl.w	r3, r1, r3
 800804e:	43d9      	mvns	r1, r3
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008054:	4313      	orrs	r3, r2
}
 8008056:	4618      	mov	r0, r3
 8008058:	3724      	adds	r7, #36	; 0x24
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr
	...

08008064 <SysTick_Config>:
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b082      	sub	sp, #8
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	3b01      	subs	r3, #1
 8008070:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008074:	d301      	bcc.n	800807a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8008076:	2301      	movs	r3, #1
 8008078:	e00f      	b.n	800809a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800807a:	4a0a      	ldr	r2, [pc, #40]	; (80080a4 <SysTick_Config+0x40>)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	3b01      	subs	r3, #1
 8008080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008082:	210f      	movs	r1, #15
 8008084:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008088:	f7ff ff8e 	bl	8007fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800808c:	4b05      	ldr	r3, [pc, #20]	; (80080a4 <SysTick_Config+0x40>)
 800808e:	2200      	movs	r2, #0
 8008090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008092:	4b04      	ldr	r3, [pc, #16]	; (80080a4 <SysTick_Config+0x40>)
 8008094:	2207      	movs	r2, #7
 8008096:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8008098:	2300      	movs	r3, #0
}
 800809a:	4618      	mov	r0, r3
 800809c:	3708      	adds	r7, #8
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop
 80080a4:	e000e010 	.word	0xe000e010

080080a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f7ff ff29 	bl	8007f08 <__NVIC_SetPriorityGrouping>
}
 80080b6:	bf00      	nop
 80080b8:	3708      	adds	r7, #8
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b086      	sub	sp, #24
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	4603      	mov	r3, r0
 80080c6:	60b9      	str	r1, [r7, #8]
 80080c8:	607a      	str	r2, [r7, #4]
 80080ca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80080cc:	f7ff ff40 	bl	8007f50 <__NVIC_GetPriorityGrouping>
 80080d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	68b9      	ldr	r1, [r7, #8]
 80080d6:	6978      	ldr	r0, [r7, #20]
 80080d8:	f7ff ff90 	bl	8007ffc <NVIC_EncodePriority>
 80080dc:	4602      	mov	r2, r0
 80080de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080e2:	4611      	mov	r1, r2
 80080e4:	4618      	mov	r0, r3
 80080e6:	f7ff ff5f 	bl	8007fa8 <__NVIC_SetPriority>
}
 80080ea:	bf00      	nop
 80080ec:	3718      	adds	r7, #24
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b082      	sub	sp, #8
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	4603      	mov	r3, r0
 80080fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80080fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008100:	4618      	mov	r0, r3
 8008102:	f7ff ff33 	bl	8007f6c <__NVIC_EnableIRQ>
}
 8008106:	bf00      	nop
 8008108:	3708      	adds	r7, #8
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}

0800810e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800810e:	b580      	push	{r7, lr}
 8008110:	b082      	sub	sp, #8
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f7ff ffa4 	bl	8008064 <SysTick_Config>
 800811c:	4603      	mov	r3, r0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3708      	adds	r7, #8
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8008126:	b580      	push	{r7, lr}
 8008128:	b082      	sub	sp, #8
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d101      	bne.n	8008138 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8008134:	2301      	movs	r3, #1
 8008136:	e014      	b.n	8008162 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	791b      	ldrb	r3, [r3, #4]
 800813c:	b2db      	uxtb	r3, r3
 800813e:	2b00      	cmp	r3, #0
 8008140:	d105      	bne.n	800814e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2200      	movs	r2, #0
 8008146:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f7fc ff03 	bl	8004f54 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2202      	movs	r2, #2
 8008152:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2201      	movs	r2, #1
 800815e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b082      	sub	sp, #8
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
 8008172:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	795b      	ldrb	r3, [r3, #5]
 8008178:	2b01      	cmp	r3, #1
 800817a:	d101      	bne.n	8008180 <HAL_DAC_Start+0x16>
 800817c:	2302      	movs	r3, #2
 800817e:	e043      	b.n	8008208 <HAL_DAC_Start+0x9e>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2201      	movs	r2, #1
 8008184:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2202      	movs	r2, #2
 800818a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	6819      	ldr	r1, [r3, #0]
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	f003 0310 	and.w	r3, r3, #16
 8008198:	2201      	movs	r2, #1
 800819a:	409a      	lsls	r2, r3
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	430a      	orrs	r2, r1
 80081a2:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 80081a4:	2001      	movs	r0, #1
 80081a6:	f7fe fb4d 	bl	8006844 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d10f      	bne.n	80081d0 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80081ba:	2b02      	cmp	r3, #2
 80081bc:	d11d      	bne.n	80081fa <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	685a      	ldr	r2, [r3, #4]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f042 0201 	orr.w	r2, r2, #1
 80081cc:	605a      	str	r2, [r3, #4]
 80081ce:	e014      	b.n	80081fa <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	f003 0310 	and.w	r3, r3, #16
 80081e0:	2102      	movs	r1, #2
 80081e2:	fa01 f303 	lsl.w	r3, r1, r3
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d107      	bne.n	80081fa <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	685a      	ldr	r2, [r3, #4]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f042 0202 	orr.w	r2, r2, #2
 80081f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2201      	movs	r2, #1
 80081fe:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8008206:	2300      	movs	r3, #0
}
 8008208:	4618      	mov	r0, r3
 800820a:	3708      	adds	r7, #8
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b086      	sub	sp, #24
 8008214:	af00      	add	r7, sp, #0
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	60b9      	str	r1, [r7, #8]
 800821a:	607a      	str	r2, [r7, #4]
 800821c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800821e:	2300      	movs	r3, #0
 8008220:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	795b      	ldrb	r3, [r3, #5]
 8008226:	2b01      	cmp	r3, #1
 8008228:	d101      	bne.n	800822e <HAL_DAC_Start_DMA+0x1e>
 800822a:	2302      	movs	r3, #2
 800822c:	e0a1      	b.n	8008372 <HAL_DAC_Start_DMA+0x162>
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2201      	movs	r2, #1
 8008232:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2202      	movs	r2, #2
 8008238:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d12a      	bne.n	8008296 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	4a4d      	ldr	r2, [pc, #308]	; (800837c <HAL_DAC_Start_DMA+0x16c>)
 8008246:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	4a4c      	ldr	r2, [pc, #304]	; (8008380 <HAL_DAC_Start_DMA+0x170>)
 800824e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	4a4b      	ldr	r2, [pc, #300]	; (8008384 <HAL_DAC_Start_DMA+0x174>)
 8008256:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008266:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8008268:	6a3b      	ldr	r3, [r7, #32]
 800826a:	2b04      	cmp	r3, #4
 800826c:	d009      	beq.n	8008282 <HAL_DAC_Start_DMA+0x72>
 800826e:	2b08      	cmp	r3, #8
 8008270:	d00c      	beq.n	800828c <HAL_DAC_Start_DMA+0x7c>
 8008272:	2b00      	cmp	r3, #0
 8008274:	d000      	beq.n	8008278 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8008276:	e039      	b.n	80082ec <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	3308      	adds	r3, #8
 800827e:	613b      	str	r3, [r7, #16]
        break;
 8008280:	e034      	b.n	80082ec <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	330c      	adds	r3, #12
 8008288:	613b      	str	r3, [r7, #16]
        break;
 800828a:	e02f      	b.n	80082ec <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	3310      	adds	r3, #16
 8008292:	613b      	str	r3, [r7, #16]
        break;
 8008294:	e02a      	b.n	80082ec <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	68db      	ldr	r3, [r3, #12]
 800829a:	4a3b      	ldr	r2, [pc, #236]	; (8008388 <HAL_DAC_Start_DMA+0x178>)
 800829c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	68db      	ldr	r3, [r3, #12]
 80082a2:	4a3a      	ldr	r2, [pc, #232]	; (800838c <HAL_DAC_Start_DMA+0x17c>)
 80082a4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	68db      	ldr	r3, [r3, #12]
 80082aa:	4a39      	ldr	r2, [pc, #228]	; (8008390 <HAL_DAC_Start_DMA+0x180>)
 80082ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80082bc:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80082be:	6a3b      	ldr	r3, [r7, #32]
 80082c0:	2b04      	cmp	r3, #4
 80082c2:	d009      	beq.n	80082d8 <HAL_DAC_Start_DMA+0xc8>
 80082c4:	2b08      	cmp	r3, #8
 80082c6:	d00c      	beq.n	80082e2 <HAL_DAC_Start_DMA+0xd2>
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d000      	beq.n	80082ce <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80082cc:	e00e      	b.n	80082ec <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	3314      	adds	r3, #20
 80082d4:	613b      	str	r3, [r7, #16]
        break;
 80082d6:	e009      	b.n	80082ec <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	3318      	adds	r3, #24
 80082de:	613b      	str	r3, [r7, #16]
        break;
 80082e0:	e004      	b.n	80082ec <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	331c      	adds	r3, #28
 80082e8:	613b      	str	r3, [r7, #16]
        break;
 80082ea:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d111      	bne.n	8008316 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008300:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	6898      	ldr	r0, [r3, #8]
 8008306:	6879      	ldr	r1, [r7, #4]
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	693a      	ldr	r2, [r7, #16]
 800830c:	f000 fbc8 	bl	8008aa0 <HAL_DMA_Start_IT>
 8008310:	4603      	mov	r3, r0
 8008312:	75fb      	strb	r3, [r7, #23]
 8008314:	e010      	b.n	8008338 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8008324:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	68d8      	ldr	r0, [r3, #12]
 800832a:	6879      	ldr	r1, [r7, #4]
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	693a      	ldr	r2, [r7, #16]
 8008330:	f000 fbb6 	bl	8008aa0 <HAL_DMA_Start_IT>
 8008334:	4603      	mov	r3, r0
 8008336:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2200      	movs	r2, #0
 800833c:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800833e:	7dfb      	ldrb	r3, [r7, #23]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d10f      	bne.n	8008364 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	6819      	ldr	r1, [r3, #0]
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	f003 0310 	and.w	r3, r3, #16
 8008350:	2201      	movs	r2, #1
 8008352:	409a      	lsls	r2, r3
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	430a      	orrs	r2, r1
 800835a:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 800835c:	2001      	movs	r0, #1
 800835e:	f7fe fa71 	bl	8006844 <HAL_Delay>
 8008362:	e005      	b.n	8008370 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	691b      	ldr	r3, [r3, #16]
 8008368:	f043 0204 	orr.w	r2, r3, #4
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8008370:	7dfb      	ldrb	r3, [r7, #23]
}
 8008372:	4618      	mov	r0, r3
 8008374:	3718      	adds	r7, #24
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	0800883d 	.word	0x0800883d
 8008380:	0800885f 	.word	0x0800885f
 8008384:	0800887b 	.word	0x0800887b
 8008388:	080088e5 	.word	0x080088e5
 800838c:	08008907 	.word	0x08008907
 8008390:	08008923 	.word	0x08008923

08008394 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	6819      	ldr	r1, [r3, #0]
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	f003 0310 	and.w	r3, r3, #16
 80083aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80083ae:	fa02 f303 	lsl.w	r3, r2, r3
 80083b2:	43da      	mvns	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	400a      	ands	r2, r1
 80083ba:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	6819      	ldr	r1, [r3, #0]
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	f003 0310 	and.w	r3, r3, #16
 80083c8:	2201      	movs	r2, #1
 80083ca:	fa02 f303 	lsl.w	r3, r2, r3
 80083ce:	43da      	mvns	r2, r3
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	400a      	ands	r2, r1
 80083d6:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 80083d8:	2001      	movs	r0, #1
 80083da:	f7fe fa33 	bl	8006844 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d10f      	bne.n	8008404 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	4618      	mov	r0, r3
 80083ea:	f000 fbd4 	bl	8008b96 <HAL_DMA_Abort>
 80083ee:	4603      	mov	r3, r0
 80083f0:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008400:	601a      	str	r2, [r3, #0]
 8008402:	e00e      	b.n	8008422 <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	4618      	mov	r0, r3
 800840a:	f000 fbc4 	bl	8008b96 <HAL_DMA_Abort>
 800840e:	4603      	mov	r3, r0
 8008410:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	681a      	ldr	r2, [r3, #0]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8008420:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 8008422:	7bfb      	ldrb	r3, [r7, #15]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d003      	beq.n	8008430 <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2204      	movs	r2, #4
 800842c:	711a      	strb	r2, [r3, #4]
 800842e:	e002      	b.n	8008436 <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2201      	movs	r2, #1
 8008434:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 8008436:	7bfb      	ldrb	r3, [r7, #15]
}
 8008438:	4618      	mov	r0, r3
 800843a:	3710      	adds	r7, #16
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8008440:	b480      	push	{r7}
 8008442:	b087      	sub	sp, #28
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	607a      	str	r2, [r7, #4]
 800844c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800844e:	2300      	movs	r3, #0
 8008450:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d105      	bne.n	8008470 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8008464:	697a      	ldr	r2, [r7, #20]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4413      	add	r3, r2
 800846a:	3308      	adds	r3, #8
 800846c:	617b      	str	r3, [r7, #20]
 800846e:	e004      	b.n	800847a <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8008470:	697a      	ldr	r2, [r7, #20]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	4413      	add	r3, r2
 8008476:	3314      	adds	r3, #20
 8008478:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	461a      	mov	r2, r3
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8008482:	2300      	movs	r3, #0
}
 8008484:	4618      	mov	r0, r3
 8008486:	371c      	adds	r7, #28
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8008498:	bf00      	nop
 800849a:	370c      	adds	r7, #12
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr

080084a4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80084ac:	bf00      	nop
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d103      	bne.n	80084d0 <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ce:	e002      	b.n	80084d6 <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	370c      	adds	r7, #12
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr
	...

080084e4 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b08a      	sub	sp, #40	; 0x28
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80084f0:	2300      	movs	r3, #0
 80084f2:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	795b      	ldrb	r3, [r3, #5]
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d101      	bne.n	8008500 <HAL_DAC_ConfigChannel+0x1c>
 80084fc:	2302      	movs	r3, #2
 80084fe:	e194      	b.n	800882a <HAL_DAC_ConfigChannel+0x346>
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2201      	movs	r2, #1
 8008504:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2202      	movs	r2, #2
 800850a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	2b04      	cmp	r3, #4
 8008512:	d174      	bne.n	80085fe <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d137      	bne.n	800858a <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800851a:	f7fe f987 	bl	800682c <HAL_GetTick>
 800851e:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8008520:	e011      	b.n	8008546 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8008522:	f7fe f983 	bl	800682c <HAL_GetTick>
 8008526:	4602      	mov	r2, r0
 8008528:	69fb      	ldr	r3, [r7, #28]
 800852a:	1ad3      	subs	r3, r2, r3
 800852c:	2b01      	cmp	r3, #1
 800852e:	d90a      	bls.n	8008546 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	691b      	ldr	r3, [r3, #16]
 8008534:	f043 0208 	orr.w	r2, r3, #8
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2203      	movs	r2, #3
 8008540:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8008542:	2303      	movs	r3, #3
 8008544:	e171      	b.n	800882a <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800854c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008550:	2b00      	cmp	r3, #0
 8008552:	d1e6      	bne.n	8008522 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8008554:	2001      	movs	r0, #1
 8008556:	f7fe f975 	bl	8006844 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	68ba      	ldr	r2, [r7, #8]
 8008560:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008562:	641a      	str	r2, [r3, #64]	; 0x40
 8008564:	e01e      	b.n	80085a4 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8008566:	f7fe f961 	bl	800682c <HAL_GetTick>
 800856a:	4602      	mov	r2, r0
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	1ad3      	subs	r3, r2, r3
 8008570:	2b01      	cmp	r3, #1
 8008572:	d90a      	bls.n	800858a <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	691b      	ldr	r3, [r3, #16]
 8008578:	f043 0208 	orr.w	r2, r3, #8
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2203      	movs	r2, #3
 8008584:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8008586:	2303      	movs	r3, #3
 8008588:	e14f      	b.n	800882a <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008590:	2b00      	cmp	r3, #0
 8008592:	dbe8      	blt.n	8008566 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8008594:	2001      	movs	r0, #1
 8008596:	f7fe f955 	bl	8006844 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	68ba      	ldr	r2, [r7, #8]
 80085a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80085a2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f003 0310 	and.w	r3, r3, #16
 80085b0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80085b4:	fa01 f303 	lsl.w	r3, r1, r3
 80085b8:	43db      	mvns	r3, r3
 80085ba:	ea02 0103 	and.w	r1, r2, r3
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f003 0310 	and.w	r3, r3, #16
 80085c8:	409a      	lsls	r2, r3
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	430a      	orrs	r2, r1
 80085d0:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f003 0310 	and.w	r3, r3, #16
 80085de:	21ff      	movs	r1, #255	; 0xff
 80085e0:	fa01 f303 	lsl.w	r3, r1, r3
 80085e4:	43db      	mvns	r3, r3
 80085e6:	ea02 0103 	and.w	r1, r2, r3
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f003 0310 	and.w	r3, r3, #16
 80085f4:	409a      	lsls	r2, r3
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	430a      	orrs	r2, r1
 80085fc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	69db      	ldr	r3, [r3, #28]
 8008602:	2b01      	cmp	r3, #1
 8008604:	d11d      	bne.n	8008642 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800860c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f003 0310 	and.w	r3, r3, #16
 8008614:	221f      	movs	r2, #31
 8008616:	fa02 f303 	lsl.w	r3, r2, r3
 800861a:	43db      	mvns	r3, r3
 800861c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800861e:	4013      	ands	r3, r2
 8008620:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	6a1b      	ldr	r3, [r3, #32]
 8008626:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f003 0310 	and.w	r3, r3, #16
 800862e:	69ba      	ldr	r2, [r7, #24]
 8008630:	fa02 f303 	lsl.w	r3, r2, r3
 8008634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008636:	4313      	orrs	r3, r2
 8008638:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008640:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008648:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f003 0310 	and.w	r3, r3, #16
 8008650:	2207      	movs	r2, #7
 8008652:	fa02 f303 	lsl.w	r3, r2, r3
 8008656:	43db      	mvns	r3, r3
 8008658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800865a:	4013      	ands	r3, r2
 800865c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	699b      	ldr	r3, [r3, #24]
 8008662:	f003 0301 	and.w	r3, r3, #1
 8008666:	2b00      	cmp	r3, #0
 8008668:	d002      	beq.n	8008670 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 800866a:	2300      	movs	r3, #0
 800866c:	623b      	str	r3, [r7, #32]
 800866e:	e011      	b.n	8008694 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	699b      	ldr	r3, [r3, #24]
 8008674:	f003 0302 	and.w	r3, r3, #2
 8008678:	2b00      	cmp	r3, #0
 800867a:	d002      	beq.n	8008682 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800867c:	2301      	movs	r3, #1
 800867e:	623b      	str	r3, [r7, #32]
 8008680:	e008      	b.n	8008694 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	695b      	ldr	r3, [r3, #20]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d102      	bne.n	8008690 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800868a:	2301      	movs	r3, #1
 800868c:	623b      	str	r3, [r7, #32]
 800868e:	e001      	b.n	8008694 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8008690:	2300      	movs	r3, #0
 8008692:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	689a      	ldr	r2, [r3, #8]
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	695b      	ldr	r3, [r3, #20]
 800869c:	4313      	orrs	r3, r2
 800869e:	6a3a      	ldr	r2, [r7, #32]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f003 0310 	and.w	r3, r3, #16
 80086aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80086ae:	fa02 f303 	lsl.w	r3, r2, r3
 80086b2:	43db      	mvns	r3, r3
 80086b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086b6:	4013      	ands	r3, r2
 80086b8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	791b      	ldrb	r3, [r3, #4]
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d102      	bne.n	80086c8 <HAL_DAC_ConfigChannel+0x1e4>
 80086c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80086c6:	e000      	b.n	80086ca <HAL_DAC_ConfigChannel+0x1e6>
 80086c8:	2300      	movs	r3, #0
 80086ca:	69ba      	ldr	r2, [r7, #24]
 80086cc:	4313      	orrs	r3, r2
 80086ce:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f003 0310 	and.w	r3, r3, #16
 80086d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086da:	fa02 f303 	lsl.w	r3, r2, r3
 80086de:	43db      	mvns	r3, r3
 80086e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086e2:	4013      	ands	r3, r2
 80086e4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	795b      	ldrb	r3, [r3, #5]
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d102      	bne.n	80086f4 <HAL_DAC_ConfigChannel+0x210>
 80086ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086f2:	e000      	b.n	80086f6 <HAL_DAC_ConfigChannel+0x212>
 80086f4:	2300      	movs	r3, #0
 80086f6:	69ba      	ldr	r2, [r7, #24]
 80086f8:	4313      	orrs	r3, r2
 80086fa:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80086fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fe:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008702:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2b02      	cmp	r3, #2
 800870a:	d114      	bne.n	8008736 <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800870c:	f001 fae0 	bl	8009cd0 <HAL_RCC_GetHCLKFreq>
 8008710:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	4a47      	ldr	r2, [pc, #284]	; (8008834 <HAL_DAC_ConfigChannel+0x350>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d904      	bls.n	8008724 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800871a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008720:	627b      	str	r3, [r7, #36]	; 0x24
 8008722:	e00d      	b.n	8008740 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	4a44      	ldr	r2, [pc, #272]	; (8008838 <HAL_DAC_ConfigChannel+0x354>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d909      	bls.n	8008740 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800872c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008732:	627b      	str	r3, [r7, #36]	; 0x24
 8008734:	e004      	b.n	8008740 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800873c:	4313      	orrs	r3, r2
 800873e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f003 0310 	and.w	r3, r3, #16
 8008746:	69ba      	ldr	r2, [r7, #24]
 8008748:	fa02 f303 	lsl.w	r3, r2, r3
 800874c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800874e:	4313      	orrs	r3, r2
 8008750:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008758:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	6819      	ldr	r1, [r3, #0]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f003 0310 	and.w	r3, r3, #16
 8008766:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800876a:	fa02 f303 	lsl.w	r3, r2, r3
 800876e:	43da      	mvns	r2, r3
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	400a      	ands	r2, r1
 8008776:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f003 0310 	and.w	r3, r3, #16
 8008786:	f640 72fe 	movw	r2, #4094	; 0xffe
 800878a:	fa02 f303 	lsl.w	r3, r2, r3
 800878e:	43db      	mvns	r3, r3
 8008790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008792:	4013      	ands	r3, r2
 8008794:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	68db      	ldr	r3, [r3, #12]
 800879a:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f003 0310 	and.w	r3, r3, #16
 80087a2:	69ba      	ldr	r2, [r7, #24]
 80087a4:	fa02 f303 	lsl.w	r3, r2, r3
 80087a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087aa:	4313      	orrs	r3, r2
 80087ac:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087b4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	6819      	ldr	r1, [r3, #0]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f003 0310 	and.w	r3, r3, #16
 80087c2:	22c0      	movs	r2, #192	; 0xc0
 80087c4:	fa02 f303 	lsl.w	r3, r2, r3
 80087c8:	43da      	mvns	r2, r3
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	400a      	ands	r2, r1
 80087d0:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	68db      	ldr	r3, [r3, #12]
 80087d6:	089b      	lsrs	r3, r3, #2
 80087d8:	f003 030f 	and.w	r3, r3, #15
 80087dc:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	691b      	ldr	r3, [r3, #16]
 80087e2:	089b      	lsrs	r3, r3, #2
 80087e4:	021b      	lsls	r3, r3, #8
 80087e6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80087ea:	69ba      	ldr	r2, [r7, #24]
 80087ec:	4313      	orrs	r3, r2
 80087ee:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f003 0310 	and.w	r3, r3, #16
 80087fc:	f640 710f 	movw	r1, #3855	; 0xf0f
 8008800:	fa01 f303 	lsl.w	r3, r1, r3
 8008804:	43db      	mvns	r3, r3
 8008806:	ea02 0103 	and.w	r1, r2, r3
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f003 0310 	and.w	r3, r3, #16
 8008810:	69ba      	ldr	r2, [r7, #24]
 8008812:	409a      	lsls	r2, r3
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	430a      	orrs	r2, r1
 800881a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2201      	movs	r2, #1
 8008820:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2200      	movs	r2, #0
 8008826:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3728      	adds	r7, #40	; 0x28
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	09896800 	.word	0x09896800
 8008838:	04c4b400 	.word	0x04c4b400

0800883c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008848:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800884a:	68f8      	ldr	r0, [r7, #12]
 800884c:	f7ff fe20 	bl	8008490 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2201      	movs	r2, #1
 8008854:	711a      	strb	r2, [r3, #4]
}
 8008856:	bf00      	nop
 8008858:	3710      	adds	r7, #16
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}

0800885e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800885e:	b580      	push	{r7, lr}
 8008860:	b084      	sub	sp, #16
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800886a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800886c:	68f8      	ldr	r0, [r7, #12]
 800886e:	f7ff fe19 	bl	80084a4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8008872:	bf00      	nop
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b084      	sub	sp, #16
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008886:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	691b      	ldr	r3, [r3, #16]
 800888c:	f043 0204 	orr.w	r2, r3, #4
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8008894:	68f8      	ldr	r0, [r7, #12]
 8008896:	f7fd f802 	bl	800589e <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2201      	movs	r2, #1
 800889e:	711a      	strb	r2, [r3, #4]
}
 80088a0:	bf00      	nop
 80088a2:	3710      	adds	r7, #16
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b083      	sub	sp, #12
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80088b0:	bf00      	nop
 80088b2:	370c      	adds	r7, #12
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80088c4:	bf00      	nop
 80088c6:	370c      	adds	r7, #12
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b083      	sub	sp, #12
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80088d8:	bf00      	nop
 80088da:	370c      	adds	r7, #12
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr

080088e4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b084      	sub	sp, #16
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80088f2:	68f8      	ldr	r0, [r7, #12]
 80088f4:	f7ff ffd8 	bl	80088a8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2201      	movs	r2, #1
 80088fc:	711a      	strb	r2, [r3, #4]
}
 80088fe:	bf00      	nop
 8008900:	3710      	adds	r7, #16
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}

08008906 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8008906:	b580      	push	{r7, lr}
 8008908:	b084      	sub	sp, #16
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008912:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8008914:	68f8      	ldr	r0, [r7, #12]
 8008916:	f7ff ffd1 	bl	80088bc <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800891a:	bf00      	nop
 800891c:	3710      	adds	r7, #16
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}

08008922 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8008922:	b580      	push	{r7, lr}
 8008924:	b084      	sub	sp, #16
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800892e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	691b      	ldr	r3, [r3, #16]
 8008934:	f043 0204 	orr.w	r2, r3, #4
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800893c:	68f8      	ldr	r0, [r7, #12]
 800893e:	f7ff ffc7 	bl	80088d0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2201      	movs	r2, #1
 8008946:	711a      	strb	r2, [r3, #4]
}
 8008948:	bf00      	nop
 800894a:	3710      	adds	r7, #16
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d101      	bne.n	8008962 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800895e:	2301      	movs	r3, #1
 8008960:	e08d      	b.n	8008a7e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	461a      	mov	r2, r3
 8008968:	4b47      	ldr	r3, [pc, #284]	; (8008a88 <HAL_DMA_Init+0x138>)
 800896a:	429a      	cmp	r2, r3
 800896c:	d80f      	bhi.n	800898e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	461a      	mov	r2, r3
 8008974:	4b45      	ldr	r3, [pc, #276]	; (8008a8c <HAL_DMA_Init+0x13c>)
 8008976:	4413      	add	r3, r2
 8008978:	4a45      	ldr	r2, [pc, #276]	; (8008a90 <HAL_DMA_Init+0x140>)
 800897a:	fba2 2303 	umull	r2, r3, r2, r3
 800897e:	091b      	lsrs	r3, r3, #4
 8008980:	009a      	lsls	r2, r3, #2
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	4a42      	ldr	r2, [pc, #264]	; (8008a94 <HAL_DMA_Init+0x144>)
 800898a:	641a      	str	r2, [r3, #64]	; 0x40
 800898c:	e00e      	b.n	80089ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	461a      	mov	r2, r3
 8008994:	4b40      	ldr	r3, [pc, #256]	; (8008a98 <HAL_DMA_Init+0x148>)
 8008996:	4413      	add	r3, r2
 8008998:	4a3d      	ldr	r2, [pc, #244]	; (8008a90 <HAL_DMA_Init+0x140>)
 800899a:	fba2 2303 	umull	r2, r3, r2, r3
 800899e:	091b      	lsrs	r3, r3, #4
 80089a0:	009a      	lsls	r2, r3, #2
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	4a3c      	ldr	r2, [pc, #240]	; (8008a9c <HAL_DMA_Init+0x14c>)
 80089aa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2202      	movs	r2, #2
 80089b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80089c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80089d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80089dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	699b      	ldr	r3, [r3, #24]
 80089e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80089e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6a1b      	ldr	r3, [r3, #32]
 80089ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80089f0:	68fa      	ldr	r2, [r7, #12]
 80089f2:	4313      	orrs	r3, r2
 80089f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	68fa      	ldr	r2, [r7, #12]
 80089fc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 fa10 	bl	8008e24 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	689b      	ldr	r3, [r3, #8]
 8008a08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a0c:	d102      	bne.n	8008a14 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	685a      	ldr	r2, [r3, #4]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a1c:	b2d2      	uxtb	r2, r2
 8008a1e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a24:	687a      	ldr	r2, [r7, #4]
 8008a26:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008a28:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d010      	beq.n	8008a54 <HAL_DMA_Init+0x104>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	2b04      	cmp	r3, #4
 8008a38:	d80c      	bhi.n	8008a54 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 fa30 	bl	8008ea0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a44:	2200      	movs	r2, #0
 8008a46:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008a50:	605a      	str	r2, [r3, #4]
 8008a52:	e008      	b.n	8008a66 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2200      	movs	r2, #0
 8008a64:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008a7c:	2300      	movs	r3, #0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3710      	adds	r7, #16
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
 8008a86:	bf00      	nop
 8008a88:	40020407 	.word	0x40020407
 8008a8c:	bffdfff8 	.word	0xbffdfff8
 8008a90:	cccccccd 	.word	0xcccccccd
 8008a94:	40020000 	.word	0x40020000
 8008a98:	bffdfbf8 	.word	0xbffdfbf8
 8008a9c:	40020400 	.word	0x40020400

08008aa0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b086      	sub	sp, #24
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	607a      	str	r2, [r7, #4]
 8008aac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d101      	bne.n	8008ac0 <HAL_DMA_Start_IT+0x20>
 8008abc:	2302      	movs	r3, #2
 8008abe:	e066      	b.n	8008b8e <HAL_DMA_Start_IT+0xee>
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d155      	bne.n	8008b80 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2202      	movs	r2, #2
 8008ad8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	681a      	ldr	r2, [r3, #0]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f022 0201 	bic.w	r2, r2, #1
 8008af0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	68b9      	ldr	r1, [r7, #8]
 8008af8:	68f8      	ldr	r0, [r7, #12]
 8008afa:	f000 f954 	bl	8008da6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d008      	beq.n	8008b18 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	681a      	ldr	r2, [r3, #0]
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f042 020e 	orr.w	r2, r2, #14
 8008b14:	601a      	str	r2, [r3, #0]
 8008b16:	e00f      	b.n	8008b38 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f022 0204 	bic.w	r2, r2, #4
 8008b26:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f042 020a 	orr.w	r2, r2, #10
 8008b36:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d007      	beq.n	8008b56 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b54:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d007      	beq.n	8008b6e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b6c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f042 0201 	orr.w	r2, r2, #1
 8008b7c:	601a      	str	r2, [r3, #0]
 8008b7e:	e005      	b.n	8008b8c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2200      	movs	r2, #0
 8008b84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008b88:	2302      	movs	r3, #2
 8008b8a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008b8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3718      	adds	r7, #24
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}

08008b96 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008b96:	b480      	push	{r7}
 8008b98:	b085      	sub	sp, #20
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	2b02      	cmp	r3, #2
 8008bac:	d005      	beq.n	8008bba <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2204      	movs	r2, #4
 8008bb2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	73fb      	strb	r3, [r7, #15]
 8008bb8:	e037      	b.n	8008c2a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	681a      	ldr	r2, [r3, #0]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f022 020e 	bic.w	r2, r2, #14
 8008bc8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008bd8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f022 0201 	bic.w	r2, r2, #1
 8008be8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bee:	f003 021f 	and.w	r2, r3, #31
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bf6:	2101      	movs	r1, #1
 8008bf8:	fa01 f202 	lsl.w	r2, r1, r2
 8008bfc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c02:	687a      	ldr	r2, [r7, #4]
 8008c04:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008c06:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d00c      	beq.n	8008c2a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c1e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008c28:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2200      	movs	r2, #0
 8008c36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8008c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3714      	adds	r7, #20
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr

08008c48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c64:	f003 031f 	and.w	r3, r3, #31
 8008c68:	2204      	movs	r2, #4
 8008c6a:	409a      	lsls	r2, r3
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	4013      	ands	r3, r2
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d026      	beq.n	8008cc2 <HAL_DMA_IRQHandler+0x7a>
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	f003 0304 	and.w	r3, r3, #4
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d021      	beq.n	8008cc2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f003 0320 	and.w	r3, r3, #32
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d107      	bne.n	8008c9c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	681a      	ldr	r2, [r3, #0]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f022 0204 	bic.w	r2, r2, #4
 8008c9a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ca0:	f003 021f 	and.w	r2, r3, #31
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca8:	2104      	movs	r1, #4
 8008caa:	fa01 f202 	lsl.w	r2, r1, r2
 8008cae:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d071      	beq.n	8008d9c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8008cc0:	e06c      	b.n	8008d9c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cc6:	f003 031f 	and.w	r3, r3, #31
 8008cca:	2202      	movs	r2, #2
 8008ccc:	409a      	lsls	r2, r3
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	4013      	ands	r3, r2
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d02e      	beq.n	8008d34 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	f003 0302 	and.w	r3, r3, #2
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d029      	beq.n	8008d34 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f003 0320 	and.w	r3, r3, #32
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d10b      	bne.n	8008d06 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f022 020a 	bic.w	r2, r2, #10
 8008cfc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2201      	movs	r2, #1
 8008d02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d0a:	f003 021f 	and.w	r2, r3, #31
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d12:	2102      	movs	r1, #2
 8008d14:	fa01 f202 	lsl.w	r2, r1, r2
 8008d18:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d038      	beq.n	8008d9c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8008d32:	e033      	b.n	8008d9c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d38:	f003 031f 	and.w	r3, r3, #31
 8008d3c:	2208      	movs	r2, #8
 8008d3e:	409a      	lsls	r2, r3
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	4013      	ands	r3, r2
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d02a      	beq.n	8008d9e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	f003 0308 	and.w	r3, r3, #8
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d025      	beq.n	8008d9e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	681a      	ldr	r2, [r3, #0]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f022 020e 	bic.w	r2, r2, #14
 8008d60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d66:	f003 021f 	and.w	r2, r3, #31
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d6e:	2101      	movs	r1, #1
 8008d70:	fa01 f202 	lsl.w	r2, r1, r2
 8008d74:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2201      	movs	r2, #1
 8008d7a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2201      	movs	r2, #1
 8008d80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2200      	movs	r2, #0
 8008d88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d004      	beq.n	8008d9e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008d9c:	bf00      	nop
 8008d9e:	bf00      	nop
}
 8008da0:	3710      	adds	r7, #16
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}

08008da6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008da6:	b480      	push	{r7}
 8008da8:	b085      	sub	sp, #20
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	60f8      	str	r0, [r7, #12]
 8008dae:	60b9      	str	r1, [r7, #8]
 8008db0:	607a      	str	r2, [r7, #4]
 8008db2:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008db8:	68fa      	ldr	r2, [r7, #12]
 8008dba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008dbc:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d004      	beq.n	8008dd0 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dca:	68fa      	ldr	r2, [r7, #12]
 8008dcc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008dce:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dd4:	f003 021f 	and.w	r2, r3, #31
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ddc:	2101      	movs	r1, #1
 8008dde:	fa01 f202 	lsl.w	r2, r1, r2
 8008de2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	683a      	ldr	r2, [r7, #0]
 8008dea:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	689b      	ldr	r3, [r3, #8]
 8008df0:	2b10      	cmp	r3, #16
 8008df2:	d108      	bne.n	8008e06 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	68ba      	ldr	r2, [r7, #8]
 8008e02:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008e04:	e007      	b.n	8008e16 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	68ba      	ldr	r2, [r7, #8]
 8008e0c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	687a      	ldr	r2, [r7, #4]
 8008e14:	60da      	str	r2, [r3, #12]
}
 8008e16:	bf00      	nop
 8008e18:	3714      	adds	r7, #20
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e20:	4770      	bx	lr
	...

08008e24 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b087      	sub	sp, #28
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	461a      	mov	r2, r3
 8008e32:	4b16      	ldr	r3, [pc, #88]	; (8008e8c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d802      	bhi.n	8008e3e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8008e38:	4b15      	ldr	r3, [pc, #84]	; (8008e90 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8008e3a:	617b      	str	r3, [r7, #20]
 8008e3c:	e001      	b.n	8008e42 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8008e3e:	4b15      	ldr	r3, [pc, #84]	; (8008e94 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8008e40:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	b2db      	uxtb	r3, r3
 8008e4c:	3b08      	subs	r3, #8
 8008e4e:	4a12      	ldr	r2, [pc, #72]	; (8008e98 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008e50:	fba2 2303 	umull	r2, r3, r2, r3
 8008e54:	091b      	lsrs	r3, r3, #4
 8008e56:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e5c:	089b      	lsrs	r3, r3, #2
 8008e5e:	009a      	lsls	r2, r3, #2
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	4413      	add	r3, r2
 8008e64:	461a      	mov	r2, r3
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	4a0b      	ldr	r2, [pc, #44]	; (8008e9c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8008e6e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f003 031f 	and.w	r3, r3, #31
 8008e76:	2201      	movs	r2, #1
 8008e78:	409a      	lsls	r2, r3
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008e7e:	bf00      	nop
 8008e80:	371c      	adds	r7, #28
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr
 8008e8a:	bf00      	nop
 8008e8c:	40020407 	.word	0x40020407
 8008e90:	40020800 	.word	0x40020800
 8008e94:	40020820 	.word	0x40020820
 8008e98:	cccccccd 	.word	0xcccccccd
 8008e9c:	40020880 	.word	0x40020880

08008ea0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b085      	sub	sp, #20
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	b2db      	uxtb	r3, r3
 8008eae:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008eb0:	68fa      	ldr	r2, [r7, #12]
 8008eb2:	4b0b      	ldr	r3, [pc, #44]	; (8008ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8008eb4:	4413      	add	r3, r2
 8008eb6:	009b      	lsls	r3, r3, #2
 8008eb8:	461a      	mov	r2, r3
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	4a08      	ldr	r2, [pc, #32]	; (8008ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008ec2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	3b01      	subs	r3, #1
 8008ec8:	f003 031f 	and.w	r3, r3, #31
 8008ecc:	2201      	movs	r2, #1
 8008ece:	409a      	lsls	r2, r3
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8008ed4:	bf00      	nop
 8008ed6:	3714      	adds	r7, #20
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr
 8008ee0:	1000823f 	.word	0x1000823f
 8008ee4:	40020940 	.word	0x40020940

08008ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b087      	sub	sp, #28
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008ef6:	e15a      	b.n	80091ae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	681a      	ldr	r2, [r3, #0]
 8008efc:	2101      	movs	r1, #1
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	fa01 f303 	lsl.w	r3, r1, r3
 8008f04:	4013      	ands	r3, r2
 8008f06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	f000 814c 	beq.w	80091a8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d00b      	beq.n	8008f30 <HAL_GPIO_Init+0x48>
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	2b02      	cmp	r3, #2
 8008f1e:	d007      	beq.n	8008f30 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008f24:	2b11      	cmp	r3, #17
 8008f26:	d003      	beq.n	8008f30 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	2b12      	cmp	r3, #18
 8008f2e:	d130      	bne.n	8008f92 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	689b      	ldr	r3, [r3, #8]
 8008f34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	005b      	lsls	r3, r3, #1
 8008f3a:	2203      	movs	r2, #3
 8008f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f40:	43db      	mvns	r3, r3
 8008f42:	693a      	ldr	r2, [r7, #16]
 8008f44:	4013      	ands	r3, r2
 8008f46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	68da      	ldr	r2, [r3, #12]
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	005b      	lsls	r3, r3, #1
 8008f50:	fa02 f303 	lsl.w	r3, r2, r3
 8008f54:	693a      	ldr	r2, [r7, #16]
 8008f56:	4313      	orrs	r3, r2
 8008f58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	693a      	ldr	r2, [r7, #16]
 8008f5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	685b      	ldr	r3, [r3, #4]
 8008f64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008f66:	2201      	movs	r2, #1
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f6e:	43db      	mvns	r3, r3
 8008f70:	693a      	ldr	r2, [r7, #16]
 8008f72:	4013      	ands	r3, r2
 8008f74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	091b      	lsrs	r3, r3, #4
 8008f7c:	f003 0201 	and.w	r2, r3, #1
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	fa02 f303 	lsl.w	r3, r2, r3
 8008f86:	693a      	ldr	r2, [r7, #16]
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	693a      	ldr	r2, [r7, #16]
 8008f90:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	68db      	ldr	r3, [r3, #12]
 8008f96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	005b      	lsls	r3, r3, #1
 8008f9c:	2203      	movs	r2, #3
 8008f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008fa2:	43db      	mvns	r3, r3
 8008fa4:	693a      	ldr	r2, [r7, #16]
 8008fa6:	4013      	ands	r3, r2
 8008fa8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	689a      	ldr	r2, [r3, #8]
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	005b      	lsls	r3, r3, #1
 8008fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8008fb6:	693a      	ldr	r2, [r7, #16]
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	693a      	ldr	r2, [r7, #16]
 8008fc0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	2b02      	cmp	r3, #2
 8008fc8:	d003      	beq.n	8008fd2 <HAL_GPIO_Init+0xea>
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	2b12      	cmp	r3, #18
 8008fd0:	d123      	bne.n	800901a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	08da      	lsrs	r2, r3, #3
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	3208      	adds	r2, #8
 8008fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	f003 0307 	and.w	r3, r3, #7
 8008fe6:	009b      	lsls	r3, r3, #2
 8008fe8:	220f      	movs	r2, #15
 8008fea:	fa02 f303 	lsl.w	r3, r2, r3
 8008fee:	43db      	mvns	r3, r3
 8008ff0:	693a      	ldr	r2, [r7, #16]
 8008ff2:	4013      	ands	r3, r2
 8008ff4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	691a      	ldr	r2, [r3, #16]
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	f003 0307 	and.w	r3, r3, #7
 8009000:	009b      	lsls	r3, r3, #2
 8009002:	fa02 f303 	lsl.w	r3, r2, r3
 8009006:	693a      	ldr	r2, [r7, #16]
 8009008:	4313      	orrs	r3, r2
 800900a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	08da      	lsrs	r2, r3, #3
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	3208      	adds	r2, #8
 8009014:	6939      	ldr	r1, [r7, #16]
 8009016:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	005b      	lsls	r3, r3, #1
 8009024:	2203      	movs	r2, #3
 8009026:	fa02 f303 	lsl.w	r3, r2, r3
 800902a:	43db      	mvns	r3, r3
 800902c:	693a      	ldr	r2, [r7, #16]
 800902e:	4013      	ands	r3, r2
 8009030:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	f003 0203 	and.w	r2, r3, #3
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	005b      	lsls	r3, r3, #1
 800903e:	fa02 f303 	lsl.w	r3, r2, r3
 8009042:	693a      	ldr	r2, [r7, #16]
 8009044:	4313      	orrs	r3, r2
 8009046:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	693a      	ldr	r2, [r7, #16]
 800904c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009056:	2b00      	cmp	r3, #0
 8009058:	f000 80a6 	beq.w	80091a8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800905c:	4b5b      	ldr	r3, [pc, #364]	; (80091cc <HAL_GPIO_Init+0x2e4>)
 800905e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009060:	4a5a      	ldr	r2, [pc, #360]	; (80091cc <HAL_GPIO_Init+0x2e4>)
 8009062:	f043 0301 	orr.w	r3, r3, #1
 8009066:	6613      	str	r3, [r2, #96]	; 0x60
 8009068:	4b58      	ldr	r3, [pc, #352]	; (80091cc <HAL_GPIO_Init+0x2e4>)
 800906a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800906c:	f003 0301 	and.w	r3, r3, #1
 8009070:	60bb      	str	r3, [r7, #8]
 8009072:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009074:	4a56      	ldr	r2, [pc, #344]	; (80091d0 <HAL_GPIO_Init+0x2e8>)
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	089b      	lsrs	r3, r3, #2
 800907a:	3302      	adds	r3, #2
 800907c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009080:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	f003 0303 	and.w	r3, r3, #3
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	220f      	movs	r2, #15
 800908c:	fa02 f303 	lsl.w	r3, r2, r3
 8009090:	43db      	mvns	r3, r3
 8009092:	693a      	ldr	r2, [r7, #16]
 8009094:	4013      	ands	r3, r2
 8009096:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800909e:	d01f      	beq.n	80090e0 <HAL_GPIO_Init+0x1f8>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	4a4c      	ldr	r2, [pc, #304]	; (80091d4 <HAL_GPIO_Init+0x2ec>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d019      	beq.n	80090dc <HAL_GPIO_Init+0x1f4>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	4a4b      	ldr	r2, [pc, #300]	; (80091d8 <HAL_GPIO_Init+0x2f0>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d013      	beq.n	80090d8 <HAL_GPIO_Init+0x1f0>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	4a4a      	ldr	r2, [pc, #296]	; (80091dc <HAL_GPIO_Init+0x2f4>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d00d      	beq.n	80090d4 <HAL_GPIO_Init+0x1ec>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	4a49      	ldr	r2, [pc, #292]	; (80091e0 <HAL_GPIO_Init+0x2f8>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d007      	beq.n	80090d0 <HAL_GPIO_Init+0x1e8>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	4a48      	ldr	r2, [pc, #288]	; (80091e4 <HAL_GPIO_Init+0x2fc>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d101      	bne.n	80090cc <HAL_GPIO_Init+0x1e4>
 80090c8:	2305      	movs	r3, #5
 80090ca:	e00a      	b.n	80090e2 <HAL_GPIO_Init+0x1fa>
 80090cc:	2306      	movs	r3, #6
 80090ce:	e008      	b.n	80090e2 <HAL_GPIO_Init+0x1fa>
 80090d0:	2304      	movs	r3, #4
 80090d2:	e006      	b.n	80090e2 <HAL_GPIO_Init+0x1fa>
 80090d4:	2303      	movs	r3, #3
 80090d6:	e004      	b.n	80090e2 <HAL_GPIO_Init+0x1fa>
 80090d8:	2302      	movs	r3, #2
 80090da:	e002      	b.n	80090e2 <HAL_GPIO_Init+0x1fa>
 80090dc:	2301      	movs	r3, #1
 80090de:	e000      	b.n	80090e2 <HAL_GPIO_Init+0x1fa>
 80090e0:	2300      	movs	r3, #0
 80090e2:	697a      	ldr	r2, [r7, #20]
 80090e4:	f002 0203 	and.w	r2, r2, #3
 80090e8:	0092      	lsls	r2, r2, #2
 80090ea:	4093      	lsls	r3, r2
 80090ec:	693a      	ldr	r2, [r7, #16]
 80090ee:	4313      	orrs	r3, r2
 80090f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80090f2:	4937      	ldr	r1, [pc, #220]	; (80091d0 <HAL_GPIO_Init+0x2e8>)
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	089b      	lsrs	r3, r3, #2
 80090f8:	3302      	adds	r3, #2
 80090fa:	693a      	ldr	r2, [r7, #16]
 80090fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8009100:	4b39      	ldr	r3, [pc, #228]	; (80091e8 <HAL_GPIO_Init+0x300>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	43db      	mvns	r3, r3
 800910a:	693a      	ldr	r2, [r7, #16]
 800910c:	4013      	ands	r3, r2
 800910e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009118:	2b00      	cmp	r3, #0
 800911a:	d003      	beq.n	8009124 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800911c:	693a      	ldr	r2, [r7, #16]
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	4313      	orrs	r3, r2
 8009122:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009124:	4a30      	ldr	r2, [pc, #192]	; (80091e8 <HAL_GPIO_Init+0x300>)
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800912a:	4b2f      	ldr	r3, [pc, #188]	; (80091e8 <HAL_GPIO_Init+0x300>)
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	43db      	mvns	r3, r3
 8009134:	693a      	ldr	r2, [r7, #16]
 8009136:	4013      	ands	r3, r2
 8009138:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009142:	2b00      	cmp	r3, #0
 8009144:	d003      	beq.n	800914e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8009146:	693a      	ldr	r2, [r7, #16]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	4313      	orrs	r3, r2
 800914c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800914e:	4a26      	ldr	r2, [pc, #152]	; (80091e8 <HAL_GPIO_Init+0x300>)
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009154:	4b24      	ldr	r3, [pc, #144]	; (80091e8 <HAL_GPIO_Init+0x300>)
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	43db      	mvns	r3, r3
 800915e:	693a      	ldr	r2, [r7, #16]
 8009160:	4013      	ands	r3, r2
 8009162:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800916c:	2b00      	cmp	r3, #0
 800916e:	d003      	beq.n	8009178 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8009170:	693a      	ldr	r2, [r7, #16]
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	4313      	orrs	r3, r2
 8009176:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009178:	4a1b      	ldr	r2, [pc, #108]	; (80091e8 <HAL_GPIO_Init+0x300>)
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800917e:	4b1a      	ldr	r3, [pc, #104]	; (80091e8 <HAL_GPIO_Init+0x300>)
 8009180:	68db      	ldr	r3, [r3, #12]
 8009182:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	43db      	mvns	r3, r3
 8009188:	693a      	ldr	r2, [r7, #16]
 800918a:	4013      	ands	r3, r2
 800918c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009196:	2b00      	cmp	r3, #0
 8009198:	d003      	beq.n	80091a2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800919a:	693a      	ldr	r2, [r7, #16]
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	4313      	orrs	r3, r2
 80091a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80091a2:	4a11      	ldr	r2, [pc, #68]	; (80091e8 <HAL_GPIO_Init+0x300>)
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	3301      	adds	r3, #1
 80091ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	fa22 f303 	lsr.w	r3, r2, r3
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	f47f ae9d 	bne.w	8008ef8 <HAL_GPIO_Init+0x10>
  }
}
 80091be:	bf00      	nop
 80091c0:	371c      	adds	r7, #28
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr
 80091ca:	bf00      	nop
 80091cc:	40021000 	.word	0x40021000
 80091d0:	40010000 	.word	0x40010000
 80091d4:	48000400 	.word	0x48000400
 80091d8:	48000800 	.word	0x48000800
 80091dc:	48000c00 	.word	0x48000c00
 80091e0:	48001000 	.word	0x48001000
 80091e4:	48001400 	.word	0x48001400
 80091e8:	40010400 	.word	0x40010400

080091ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b083      	sub	sp, #12
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	460b      	mov	r3, r1
 80091f6:	807b      	strh	r3, [r7, #2]
 80091f8:	4613      	mov	r3, r2
 80091fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80091fc:	787b      	ldrb	r3, [r7, #1]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d003      	beq.n	800920a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009202:	887a      	ldrh	r2, [r7, #2]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009208:	e002      	b.n	8009210 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800920a:	887a      	ldrh	r2, [r7, #2]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009210:	bf00      	nop
 8009212:	370c      	adds	r7, #12
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr

0800921c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800921c:	b480      	push	{r7}
 800921e:	b085      	sub	sp, #20
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d141      	bne.n	80092ae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800922a:	4b4b      	ldr	r3, [pc, #300]	; (8009358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009232:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009236:	d131      	bne.n	800929c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009238:	4b47      	ldr	r3, [pc, #284]	; (8009358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800923a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800923e:	4a46      	ldr	r2, [pc, #280]	; (8009358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009240:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009244:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009248:	4b43      	ldr	r3, [pc, #268]	; (8009358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009250:	4a41      	ldr	r2, [pc, #260]	; (8009358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009252:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009256:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009258:	4b40      	ldr	r3, [pc, #256]	; (800935c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	2232      	movs	r2, #50	; 0x32
 800925e:	fb02 f303 	mul.w	r3, r2, r3
 8009262:	4a3f      	ldr	r2, [pc, #252]	; (8009360 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009264:	fba2 2303 	umull	r2, r3, r2, r3
 8009268:	0c9b      	lsrs	r3, r3, #18
 800926a:	3301      	adds	r3, #1
 800926c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800926e:	e002      	b.n	8009276 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	3b01      	subs	r3, #1
 8009274:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009276:	4b38      	ldr	r3, [pc, #224]	; (8009358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009278:	695b      	ldr	r3, [r3, #20]
 800927a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800927e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009282:	d102      	bne.n	800928a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d1f2      	bne.n	8009270 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800928a:	4b33      	ldr	r3, [pc, #204]	; (8009358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800928c:	695b      	ldr	r3, [r3, #20]
 800928e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009296:	d158      	bne.n	800934a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009298:	2303      	movs	r3, #3
 800929a:	e057      	b.n	800934c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800929c:	4b2e      	ldr	r3, [pc, #184]	; (8009358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800929e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092a2:	4a2d      	ldr	r2, [pc, #180]	; (8009358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80092a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80092ac:	e04d      	b.n	800934a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092b4:	d141      	bne.n	800933a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80092b6:	4b28      	ldr	r3, [pc, #160]	; (8009358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80092be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092c2:	d131      	bne.n	8009328 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80092c4:	4b24      	ldr	r3, [pc, #144]	; (8009358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80092c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092ca:	4a23      	ldr	r2, [pc, #140]	; (8009358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80092cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80092d4:	4b20      	ldr	r3, [pc, #128]	; (8009358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80092dc:	4a1e      	ldr	r2, [pc, #120]	; (8009358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80092de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80092e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80092e4:	4b1d      	ldr	r3, [pc, #116]	; (800935c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	2232      	movs	r2, #50	; 0x32
 80092ea:	fb02 f303 	mul.w	r3, r2, r3
 80092ee:	4a1c      	ldr	r2, [pc, #112]	; (8009360 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80092f0:	fba2 2303 	umull	r2, r3, r2, r3
 80092f4:	0c9b      	lsrs	r3, r3, #18
 80092f6:	3301      	adds	r3, #1
 80092f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80092fa:	e002      	b.n	8009302 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	3b01      	subs	r3, #1
 8009300:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009302:	4b15      	ldr	r3, [pc, #84]	; (8009358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009304:	695b      	ldr	r3, [r3, #20]
 8009306:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800930a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800930e:	d102      	bne.n	8009316 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d1f2      	bne.n	80092fc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009316:	4b10      	ldr	r3, [pc, #64]	; (8009358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009318:	695b      	ldr	r3, [r3, #20]
 800931a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800931e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009322:	d112      	bne.n	800934a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009324:	2303      	movs	r3, #3
 8009326:	e011      	b.n	800934c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009328:	4b0b      	ldr	r3, [pc, #44]	; (8009358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800932a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800932e:	4a0a      	ldr	r2, [pc, #40]	; (8009358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009334:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009338:	e007      	b.n	800934a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800933a:	4b07      	ldr	r3, [pc, #28]	; (8009358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009342:	4a05      	ldr	r2, [pc, #20]	; (8009358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009344:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009348:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800934a:	2300      	movs	r3, #0
}
 800934c:	4618      	mov	r0, r3
 800934e:	3714      	adds	r7, #20
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr
 8009358:	40007000 	.word	0x40007000
 800935c:	20000c94 	.word	0x20000c94
 8009360:	431bde83 	.word	0x431bde83

08009364 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b088      	sub	sp, #32
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d101      	bne.n	8009376 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009372:	2301      	movs	r3, #1
 8009374:	e308      	b.n	8009988 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f003 0301 	and.w	r3, r3, #1
 800937e:	2b00      	cmp	r3, #0
 8009380:	d075      	beq.n	800946e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009382:	4ba3      	ldr	r3, [pc, #652]	; (8009610 <HAL_RCC_OscConfig+0x2ac>)
 8009384:	689b      	ldr	r3, [r3, #8]
 8009386:	f003 030c 	and.w	r3, r3, #12
 800938a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800938c:	4ba0      	ldr	r3, [pc, #640]	; (8009610 <HAL_RCC_OscConfig+0x2ac>)
 800938e:	68db      	ldr	r3, [r3, #12]
 8009390:	f003 0303 	and.w	r3, r3, #3
 8009394:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8009396:	69bb      	ldr	r3, [r7, #24]
 8009398:	2b0c      	cmp	r3, #12
 800939a:	d102      	bne.n	80093a2 <HAL_RCC_OscConfig+0x3e>
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	2b03      	cmp	r3, #3
 80093a0:	d002      	beq.n	80093a8 <HAL_RCC_OscConfig+0x44>
 80093a2:	69bb      	ldr	r3, [r7, #24]
 80093a4:	2b08      	cmp	r3, #8
 80093a6:	d10b      	bne.n	80093c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80093a8:	4b99      	ldr	r3, [pc, #612]	; (8009610 <HAL_RCC_OscConfig+0x2ac>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d05b      	beq.n	800946c <HAL_RCC_OscConfig+0x108>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	685b      	ldr	r3, [r3, #4]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d157      	bne.n	800946c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80093bc:	2301      	movs	r3, #1
 80093be:	e2e3      	b.n	8009988 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093c8:	d106      	bne.n	80093d8 <HAL_RCC_OscConfig+0x74>
 80093ca:	4b91      	ldr	r3, [pc, #580]	; (8009610 <HAL_RCC_OscConfig+0x2ac>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	4a90      	ldr	r2, [pc, #576]	; (8009610 <HAL_RCC_OscConfig+0x2ac>)
 80093d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093d4:	6013      	str	r3, [r2, #0]
 80093d6:	e01d      	b.n	8009414 <HAL_RCC_OscConfig+0xb0>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80093e0:	d10c      	bne.n	80093fc <HAL_RCC_OscConfig+0x98>
 80093e2:	4b8b      	ldr	r3, [pc, #556]	; (8009610 <HAL_RCC_OscConfig+0x2ac>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a8a      	ldr	r2, [pc, #552]	; (8009610 <HAL_RCC_OscConfig+0x2ac>)
 80093e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80093ec:	6013      	str	r3, [r2, #0]
 80093ee:	4b88      	ldr	r3, [pc, #544]	; (8009610 <HAL_RCC_OscConfig+0x2ac>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4a87      	ldr	r2, [pc, #540]	; (8009610 <HAL_RCC_OscConfig+0x2ac>)
 80093f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093f8:	6013      	str	r3, [r2, #0]
 80093fa:	e00b      	b.n	8009414 <HAL_RCC_OscConfig+0xb0>
 80093fc:	4b84      	ldr	r3, [pc, #528]	; (8009610 <HAL_RCC_OscConfig+0x2ac>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a83      	ldr	r2, [pc, #524]	; (8009610 <HAL_RCC_OscConfig+0x2ac>)
 8009402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009406:	6013      	str	r3, [r2, #0]
 8009408:	4b81      	ldr	r3, [pc, #516]	; (8009610 <HAL_RCC_OscConfig+0x2ac>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a80      	ldr	r2, [pc, #512]	; (8009610 <HAL_RCC_OscConfig+0x2ac>)
 800940e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009412:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d013      	beq.n	8009444 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800941c:	f7fd fa06 	bl	800682c <HAL_GetTick>
 8009420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009422:	e008      	b.n	8009436 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009424:	f7fd fa02 	bl	800682c <HAL_GetTick>
 8009428:	4602      	mov	r2, r0
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	1ad3      	subs	r3, r2, r3
 800942e:	2b64      	cmp	r3, #100	; 0x64
 8009430:	d901      	bls.n	8009436 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009432:	2303      	movs	r3, #3
 8009434:	e2a8      	b.n	8009988 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009436:	4b76      	ldr	r3, [pc, #472]	; (8009610 <HAL_RCC_OscConfig+0x2ac>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800943e:	2b00      	cmp	r3, #0
 8009440:	d0f0      	beq.n	8009424 <HAL_RCC_OscConfig+0xc0>
 8009442:	e014      	b.n	800946e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009444:	f7fd f9f2 	bl	800682c <HAL_GetTick>
 8009448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800944a:	e008      	b.n	800945e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800944c:	f7fd f9ee 	bl	800682c <HAL_GetTick>
 8009450:	4602      	mov	r2, r0
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	1ad3      	subs	r3, r2, r3
 8009456:	2b64      	cmp	r3, #100	; 0x64
 8009458:	d901      	bls.n	800945e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800945a:	2303      	movs	r3, #3
 800945c:	e294      	b.n	8009988 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800945e:	4b6c      	ldr	r3, [pc, #432]	; (8009610 <HAL_RCC_OscConfig+0x2ac>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009466:	2b00      	cmp	r3, #0
 8009468:	d1f0      	bne.n	800944c <HAL_RCC_OscConfig+0xe8>
 800946a:	e000      	b.n	800946e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800946c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f003 0302 	and.w	r3, r3, #2
 8009476:	2b00      	cmp	r3, #0
 8009478:	d075      	beq.n	8009566 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800947a:	4b65      	ldr	r3, [pc, #404]	; (8009610 <HAL_RCC_OscConfig+0x2ac>)
 800947c:	689b      	ldr	r3, [r3, #8]
 800947e:	f003 030c 	and.w	r3, r3, #12
 8009482:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009484:	4b62      	ldr	r3, [pc, #392]	; (8009610 <HAL_RCC_OscConfig+0x2ac>)
 8009486:	68db      	ldr	r3, [r3, #12]
 8009488:	f003 0303 	and.w	r3, r3, #3
 800948c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800948e:	69bb      	ldr	r3, [r7, #24]
 8009490:	2b0c      	cmp	r3, #12
 8009492:	d102      	bne.n	800949a <HAL_RCC_OscConfig+0x136>
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	2b02      	cmp	r3, #2
 8009498:	d002      	beq.n	80094a0 <HAL_RCC_OscConfig+0x13c>
 800949a:	69bb      	ldr	r3, [r7, #24]
 800949c:	2b04      	cmp	r3, #4
 800949e:	d11f      	bne.n	80094e0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80094a0:	4b5b      	ldr	r3, [pc, #364]	; (8009610 <HAL_RCC_OscConfig+0x2ac>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d005      	beq.n	80094b8 <HAL_RCC_OscConfig+0x154>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	68db      	ldr	r3, [r3, #12]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d101      	bne.n	80094b8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80094b4:	2301      	movs	r3, #1
 80094b6:	e267      	b.n	8009988 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80094b8:	4b55      	ldr	r3, [pc, #340]	; (8009610 <HAL_RCC_OscConfig+0x2ac>)
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	691b      	ldr	r3, [r3, #16]
 80094c4:	061b      	lsls	r3, r3, #24
 80094c6:	4952      	ldr	r1, [pc, #328]	; (8009610 <HAL_RCC_OscConfig+0x2ac>)
 80094c8:	4313      	orrs	r3, r2
 80094ca:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80094cc:	4b51      	ldr	r3, [pc, #324]	; (8009614 <HAL_RCC_OscConfig+0x2b0>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4618      	mov	r0, r3
 80094d2:	f7fd f95f 	bl	8006794 <HAL_InitTick>
 80094d6:	4603      	mov	r3, r0
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d043      	beq.n	8009564 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80094dc:	2301      	movs	r3, #1
 80094de:	e253      	b.n	8009988 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d023      	beq.n	8009530 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80094e8:	4b49      	ldr	r3, [pc, #292]	; (8009610 <HAL_RCC_OscConfig+0x2ac>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4a48      	ldr	r2, [pc, #288]	; (8009610 <HAL_RCC_OscConfig+0x2ac>)
 80094ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094f4:	f7fd f99a 	bl	800682c <HAL_GetTick>
 80094f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80094fa:	e008      	b.n	800950e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80094fc:	f7fd f996 	bl	800682c <HAL_GetTick>
 8009500:	4602      	mov	r2, r0
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	1ad3      	subs	r3, r2, r3
 8009506:	2b02      	cmp	r3, #2
 8009508:	d901      	bls.n	800950e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800950a:	2303      	movs	r3, #3
 800950c:	e23c      	b.n	8009988 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800950e:	4b40      	ldr	r3, [pc, #256]	; (8009610 <HAL_RCC_OscConfig+0x2ac>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009516:	2b00      	cmp	r3, #0
 8009518:	d0f0      	beq.n	80094fc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800951a:	4b3d      	ldr	r3, [pc, #244]	; (8009610 <HAL_RCC_OscConfig+0x2ac>)
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	691b      	ldr	r3, [r3, #16]
 8009526:	061b      	lsls	r3, r3, #24
 8009528:	4939      	ldr	r1, [pc, #228]	; (8009610 <HAL_RCC_OscConfig+0x2ac>)
 800952a:	4313      	orrs	r3, r2
 800952c:	604b      	str	r3, [r1, #4]
 800952e:	e01a      	b.n	8009566 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009530:	4b37      	ldr	r3, [pc, #220]	; (8009610 <HAL_RCC_OscConfig+0x2ac>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4a36      	ldr	r2, [pc, #216]	; (8009610 <HAL_RCC_OscConfig+0x2ac>)
 8009536:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800953a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800953c:	f7fd f976 	bl	800682c <HAL_GetTick>
 8009540:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009542:	e008      	b.n	8009556 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009544:	f7fd f972 	bl	800682c <HAL_GetTick>
 8009548:	4602      	mov	r2, r0
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	1ad3      	subs	r3, r2, r3
 800954e:	2b02      	cmp	r3, #2
 8009550:	d901      	bls.n	8009556 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8009552:	2303      	movs	r3, #3
 8009554:	e218      	b.n	8009988 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009556:	4b2e      	ldr	r3, [pc, #184]	; (8009610 <HAL_RCC_OscConfig+0x2ac>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800955e:	2b00      	cmp	r3, #0
 8009560:	d1f0      	bne.n	8009544 <HAL_RCC_OscConfig+0x1e0>
 8009562:	e000      	b.n	8009566 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009564:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f003 0308 	and.w	r3, r3, #8
 800956e:	2b00      	cmp	r3, #0
 8009570:	d03c      	beq.n	80095ec <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	695b      	ldr	r3, [r3, #20]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d01c      	beq.n	80095b4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800957a:	4b25      	ldr	r3, [pc, #148]	; (8009610 <HAL_RCC_OscConfig+0x2ac>)
 800957c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009580:	4a23      	ldr	r2, [pc, #140]	; (8009610 <HAL_RCC_OscConfig+0x2ac>)
 8009582:	f043 0301 	orr.w	r3, r3, #1
 8009586:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800958a:	f7fd f94f 	bl	800682c <HAL_GetTick>
 800958e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009590:	e008      	b.n	80095a4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009592:	f7fd f94b 	bl	800682c <HAL_GetTick>
 8009596:	4602      	mov	r2, r0
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	1ad3      	subs	r3, r2, r3
 800959c:	2b02      	cmp	r3, #2
 800959e:	d901      	bls.n	80095a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80095a0:	2303      	movs	r3, #3
 80095a2:	e1f1      	b.n	8009988 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80095a4:	4b1a      	ldr	r3, [pc, #104]	; (8009610 <HAL_RCC_OscConfig+0x2ac>)
 80095a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095aa:	f003 0302 	and.w	r3, r3, #2
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d0ef      	beq.n	8009592 <HAL_RCC_OscConfig+0x22e>
 80095b2:	e01b      	b.n	80095ec <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80095b4:	4b16      	ldr	r3, [pc, #88]	; (8009610 <HAL_RCC_OscConfig+0x2ac>)
 80095b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095ba:	4a15      	ldr	r2, [pc, #84]	; (8009610 <HAL_RCC_OscConfig+0x2ac>)
 80095bc:	f023 0301 	bic.w	r3, r3, #1
 80095c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095c4:	f7fd f932 	bl	800682c <HAL_GetTick>
 80095c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80095ca:	e008      	b.n	80095de <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80095cc:	f7fd f92e 	bl	800682c <HAL_GetTick>
 80095d0:	4602      	mov	r2, r0
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	1ad3      	subs	r3, r2, r3
 80095d6:	2b02      	cmp	r3, #2
 80095d8:	d901      	bls.n	80095de <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80095da:	2303      	movs	r3, #3
 80095dc:	e1d4      	b.n	8009988 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80095de:	4b0c      	ldr	r3, [pc, #48]	; (8009610 <HAL_RCC_OscConfig+0x2ac>)
 80095e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095e4:	f003 0302 	and.w	r3, r3, #2
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d1ef      	bne.n	80095cc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f003 0304 	and.w	r3, r3, #4
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	f000 80ab 	beq.w	8009750 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80095fa:	2300      	movs	r3, #0
 80095fc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80095fe:	4b04      	ldr	r3, [pc, #16]	; (8009610 <HAL_RCC_OscConfig+0x2ac>)
 8009600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009606:	2b00      	cmp	r3, #0
 8009608:	d106      	bne.n	8009618 <HAL_RCC_OscConfig+0x2b4>
 800960a:	2301      	movs	r3, #1
 800960c:	e005      	b.n	800961a <HAL_RCC_OscConfig+0x2b6>
 800960e:	bf00      	nop
 8009610:	40021000 	.word	0x40021000
 8009614:	20000c98 	.word	0x20000c98
 8009618:	2300      	movs	r3, #0
 800961a:	2b00      	cmp	r3, #0
 800961c:	d00d      	beq.n	800963a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800961e:	4baf      	ldr	r3, [pc, #700]	; (80098dc <HAL_RCC_OscConfig+0x578>)
 8009620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009622:	4aae      	ldr	r2, [pc, #696]	; (80098dc <HAL_RCC_OscConfig+0x578>)
 8009624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009628:	6593      	str	r3, [r2, #88]	; 0x58
 800962a:	4bac      	ldr	r3, [pc, #688]	; (80098dc <HAL_RCC_OscConfig+0x578>)
 800962c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800962e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009632:	60fb      	str	r3, [r7, #12]
 8009634:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009636:	2301      	movs	r3, #1
 8009638:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800963a:	4ba9      	ldr	r3, [pc, #676]	; (80098e0 <HAL_RCC_OscConfig+0x57c>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009642:	2b00      	cmp	r3, #0
 8009644:	d118      	bne.n	8009678 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009646:	4ba6      	ldr	r3, [pc, #664]	; (80098e0 <HAL_RCC_OscConfig+0x57c>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4aa5      	ldr	r2, [pc, #660]	; (80098e0 <HAL_RCC_OscConfig+0x57c>)
 800964c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009650:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009652:	f7fd f8eb 	bl	800682c <HAL_GetTick>
 8009656:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009658:	e008      	b.n	800966c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800965a:	f7fd f8e7 	bl	800682c <HAL_GetTick>
 800965e:	4602      	mov	r2, r0
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	1ad3      	subs	r3, r2, r3
 8009664:	2b02      	cmp	r3, #2
 8009666:	d901      	bls.n	800966c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8009668:	2303      	movs	r3, #3
 800966a:	e18d      	b.n	8009988 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800966c:	4b9c      	ldr	r3, [pc, #624]	; (80098e0 <HAL_RCC_OscConfig+0x57c>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009674:	2b00      	cmp	r3, #0
 8009676:	d0f0      	beq.n	800965a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	689b      	ldr	r3, [r3, #8]
 800967c:	2b01      	cmp	r3, #1
 800967e:	d108      	bne.n	8009692 <HAL_RCC_OscConfig+0x32e>
 8009680:	4b96      	ldr	r3, [pc, #600]	; (80098dc <HAL_RCC_OscConfig+0x578>)
 8009682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009686:	4a95      	ldr	r2, [pc, #596]	; (80098dc <HAL_RCC_OscConfig+0x578>)
 8009688:	f043 0301 	orr.w	r3, r3, #1
 800968c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009690:	e024      	b.n	80096dc <HAL_RCC_OscConfig+0x378>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	689b      	ldr	r3, [r3, #8]
 8009696:	2b05      	cmp	r3, #5
 8009698:	d110      	bne.n	80096bc <HAL_RCC_OscConfig+0x358>
 800969a:	4b90      	ldr	r3, [pc, #576]	; (80098dc <HAL_RCC_OscConfig+0x578>)
 800969c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096a0:	4a8e      	ldr	r2, [pc, #568]	; (80098dc <HAL_RCC_OscConfig+0x578>)
 80096a2:	f043 0304 	orr.w	r3, r3, #4
 80096a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80096aa:	4b8c      	ldr	r3, [pc, #560]	; (80098dc <HAL_RCC_OscConfig+0x578>)
 80096ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096b0:	4a8a      	ldr	r2, [pc, #552]	; (80098dc <HAL_RCC_OscConfig+0x578>)
 80096b2:	f043 0301 	orr.w	r3, r3, #1
 80096b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80096ba:	e00f      	b.n	80096dc <HAL_RCC_OscConfig+0x378>
 80096bc:	4b87      	ldr	r3, [pc, #540]	; (80098dc <HAL_RCC_OscConfig+0x578>)
 80096be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096c2:	4a86      	ldr	r2, [pc, #536]	; (80098dc <HAL_RCC_OscConfig+0x578>)
 80096c4:	f023 0301 	bic.w	r3, r3, #1
 80096c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80096cc:	4b83      	ldr	r3, [pc, #524]	; (80098dc <HAL_RCC_OscConfig+0x578>)
 80096ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096d2:	4a82      	ldr	r2, [pc, #520]	; (80098dc <HAL_RCC_OscConfig+0x578>)
 80096d4:	f023 0304 	bic.w	r3, r3, #4
 80096d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	689b      	ldr	r3, [r3, #8]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d016      	beq.n	8009712 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096e4:	f7fd f8a2 	bl	800682c <HAL_GetTick>
 80096e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80096ea:	e00a      	b.n	8009702 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80096ec:	f7fd f89e 	bl	800682c <HAL_GetTick>
 80096f0:	4602      	mov	r2, r0
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	1ad3      	subs	r3, r2, r3
 80096f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d901      	bls.n	8009702 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80096fe:	2303      	movs	r3, #3
 8009700:	e142      	b.n	8009988 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009702:	4b76      	ldr	r3, [pc, #472]	; (80098dc <HAL_RCC_OscConfig+0x578>)
 8009704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009708:	f003 0302 	and.w	r3, r3, #2
 800970c:	2b00      	cmp	r3, #0
 800970e:	d0ed      	beq.n	80096ec <HAL_RCC_OscConfig+0x388>
 8009710:	e015      	b.n	800973e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009712:	f7fd f88b 	bl	800682c <HAL_GetTick>
 8009716:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009718:	e00a      	b.n	8009730 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800971a:	f7fd f887 	bl	800682c <HAL_GetTick>
 800971e:	4602      	mov	r2, r0
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	1ad3      	subs	r3, r2, r3
 8009724:	f241 3288 	movw	r2, #5000	; 0x1388
 8009728:	4293      	cmp	r3, r2
 800972a:	d901      	bls.n	8009730 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800972c:	2303      	movs	r3, #3
 800972e:	e12b      	b.n	8009988 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009730:	4b6a      	ldr	r3, [pc, #424]	; (80098dc <HAL_RCC_OscConfig+0x578>)
 8009732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009736:	f003 0302 	and.w	r3, r3, #2
 800973a:	2b00      	cmp	r3, #0
 800973c:	d1ed      	bne.n	800971a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800973e:	7ffb      	ldrb	r3, [r7, #31]
 8009740:	2b01      	cmp	r3, #1
 8009742:	d105      	bne.n	8009750 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009744:	4b65      	ldr	r3, [pc, #404]	; (80098dc <HAL_RCC_OscConfig+0x578>)
 8009746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009748:	4a64      	ldr	r2, [pc, #400]	; (80098dc <HAL_RCC_OscConfig+0x578>)
 800974a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800974e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f003 0320 	and.w	r3, r3, #32
 8009758:	2b00      	cmp	r3, #0
 800975a:	d03c      	beq.n	80097d6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	699b      	ldr	r3, [r3, #24]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d01c      	beq.n	800979e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009764:	4b5d      	ldr	r3, [pc, #372]	; (80098dc <HAL_RCC_OscConfig+0x578>)
 8009766:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800976a:	4a5c      	ldr	r2, [pc, #368]	; (80098dc <HAL_RCC_OscConfig+0x578>)
 800976c:	f043 0301 	orr.w	r3, r3, #1
 8009770:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009774:	f7fd f85a 	bl	800682c <HAL_GetTick>
 8009778:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800977a:	e008      	b.n	800978e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800977c:	f7fd f856 	bl	800682c <HAL_GetTick>
 8009780:	4602      	mov	r2, r0
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	1ad3      	subs	r3, r2, r3
 8009786:	2b02      	cmp	r3, #2
 8009788:	d901      	bls.n	800978e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800978a:	2303      	movs	r3, #3
 800978c:	e0fc      	b.n	8009988 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800978e:	4b53      	ldr	r3, [pc, #332]	; (80098dc <HAL_RCC_OscConfig+0x578>)
 8009790:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009794:	f003 0302 	and.w	r3, r3, #2
 8009798:	2b00      	cmp	r3, #0
 800979a:	d0ef      	beq.n	800977c <HAL_RCC_OscConfig+0x418>
 800979c:	e01b      	b.n	80097d6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800979e:	4b4f      	ldr	r3, [pc, #316]	; (80098dc <HAL_RCC_OscConfig+0x578>)
 80097a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80097a4:	4a4d      	ldr	r2, [pc, #308]	; (80098dc <HAL_RCC_OscConfig+0x578>)
 80097a6:	f023 0301 	bic.w	r3, r3, #1
 80097aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097ae:	f7fd f83d 	bl	800682c <HAL_GetTick>
 80097b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80097b4:	e008      	b.n	80097c8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80097b6:	f7fd f839 	bl	800682c <HAL_GetTick>
 80097ba:	4602      	mov	r2, r0
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	1ad3      	subs	r3, r2, r3
 80097c0:	2b02      	cmp	r3, #2
 80097c2:	d901      	bls.n	80097c8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80097c4:	2303      	movs	r3, #3
 80097c6:	e0df      	b.n	8009988 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80097c8:	4b44      	ldr	r3, [pc, #272]	; (80098dc <HAL_RCC_OscConfig+0x578>)
 80097ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80097ce:	f003 0302 	and.w	r3, r3, #2
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d1ef      	bne.n	80097b6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	69db      	ldr	r3, [r3, #28]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	f000 80d3 	beq.w	8009986 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80097e0:	4b3e      	ldr	r3, [pc, #248]	; (80098dc <HAL_RCC_OscConfig+0x578>)
 80097e2:	689b      	ldr	r3, [r3, #8]
 80097e4:	f003 030c 	and.w	r3, r3, #12
 80097e8:	2b0c      	cmp	r3, #12
 80097ea:	f000 808d 	beq.w	8009908 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	69db      	ldr	r3, [r3, #28]
 80097f2:	2b02      	cmp	r3, #2
 80097f4:	d15a      	bne.n	80098ac <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80097f6:	4b39      	ldr	r3, [pc, #228]	; (80098dc <HAL_RCC_OscConfig+0x578>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4a38      	ldr	r2, [pc, #224]	; (80098dc <HAL_RCC_OscConfig+0x578>)
 80097fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009800:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009802:	f7fd f813 	bl	800682c <HAL_GetTick>
 8009806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009808:	e008      	b.n	800981c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800980a:	f7fd f80f 	bl	800682c <HAL_GetTick>
 800980e:	4602      	mov	r2, r0
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	1ad3      	subs	r3, r2, r3
 8009814:	2b02      	cmp	r3, #2
 8009816:	d901      	bls.n	800981c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8009818:	2303      	movs	r3, #3
 800981a:	e0b5      	b.n	8009988 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800981c:	4b2f      	ldr	r3, [pc, #188]	; (80098dc <HAL_RCC_OscConfig+0x578>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009824:	2b00      	cmp	r3, #0
 8009826:	d1f0      	bne.n	800980a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009828:	4b2c      	ldr	r3, [pc, #176]	; (80098dc <HAL_RCC_OscConfig+0x578>)
 800982a:	68da      	ldr	r2, [r3, #12]
 800982c:	4b2d      	ldr	r3, [pc, #180]	; (80098e4 <HAL_RCC_OscConfig+0x580>)
 800982e:	4013      	ands	r3, r2
 8009830:	687a      	ldr	r2, [r7, #4]
 8009832:	6a11      	ldr	r1, [r2, #32]
 8009834:	687a      	ldr	r2, [r7, #4]
 8009836:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009838:	3a01      	subs	r2, #1
 800983a:	0112      	lsls	r2, r2, #4
 800983c:	4311      	orrs	r1, r2
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009842:	0212      	lsls	r2, r2, #8
 8009844:	4311      	orrs	r1, r2
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800984a:	0852      	lsrs	r2, r2, #1
 800984c:	3a01      	subs	r2, #1
 800984e:	0552      	lsls	r2, r2, #21
 8009850:	4311      	orrs	r1, r2
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009856:	0852      	lsrs	r2, r2, #1
 8009858:	3a01      	subs	r2, #1
 800985a:	0652      	lsls	r2, r2, #25
 800985c:	4311      	orrs	r1, r2
 800985e:	687a      	ldr	r2, [r7, #4]
 8009860:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009862:	06d2      	lsls	r2, r2, #27
 8009864:	430a      	orrs	r2, r1
 8009866:	491d      	ldr	r1, [pc, #116]	; (80098dc <HAL_RCC_OscConfig+0x578>)
 8009868:	4313      	orrs	r3, r2
 800986a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800986c:	4b1b      	ldr	r3, [pc, #108]	; (80098dc <HAL_RCC_OscConfig+0x578>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a1a      	ldr	r2, [pc, #104]	; (80098dc <HAL_RCC_OscConfig+0x578>)
 8009872:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009876:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009878:	4b18      	ldr	r3, [pc, #96]	; (80098dc <HAL_RCC_OscConfig+0x578>)
 800987a:	68db      	ldr	r3, [r3, #12]
 800987c:	4a17      	ldr	r2, [pc, #92]	; (80098dc <HAL_RCC_OscConfig+0x578>)
 800987e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009882:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009884:	f7fc ffd2 	bl	800682c <HAL_GetTick>
 8009888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800988a:	e008      	b.n	800989e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800988c:	f7fc ffce 	bl	800682c <HAL_GetTick>
 8009890:	4602      	mov	r2, r0
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	1ad3      	subs	r3, r2, r3
 8009896:	2b02      	cmp	r3, #2
 8009898:	d901      	bls.n	800989e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800989a:	2303      	movs	r3, #3
 800989c:	e074      	b.n	8009988 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800989e:	4b0f      	ldr	r3, [pc, #60]	; (80098dc <HAL_RCC_OscConfig+0x578>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d0f0      	beq.n	800988c <HAL_RCC_OscConfig+0x528>
 80098aa:	e06c      	b.n	8009986 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80098ac:	4b0b      	ldr	r3, [pc, #44]	; (80098dc <HAL_RCC_OscConfig+0x578>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a0a      	ldr	r2, [pc, #40]	; (80098dc <HAL_RCC_OscConfig+0x578>)
 80098b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80098b6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80098b8:	4b08      	ldr	r3, [pc, #32]	; (80098dc <HAL_RCC_OscConfig+0x578>)
 80098ba:	68db      	ldr	r3, [r3, #12]
 80098bc:	4a07      	ldr	r2, [pc, #28]	; (80098dc <HAL_RCC_OscConfig+0x578>)
 80098be:	f023 0303 	bic.w	r3, r3, #3
 80098c2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80098c4:	4b05      	ldr	r3, [pc, #20]	; (80098dc <HAL_RCC_OscConfig+0x578>)
 80098c6:	68db      	ldr	r3, [r3, #12]
 80098c8:	4a04      	ldr	r2, [pc, #16]	; (80098dc <HAL_RCC_OscConfig+0x578>)
 80098ca:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80098ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098d2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098d4:	f7fc ffaa 	bl	800682c <HAL_GetTick>
 80098d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80098da:	e00e      	b.n	80098fa <HAL_RCC_OscConfig+0x596>
 80098dc:	40021000 	.word	0x40021000
 80098e0:	40007000 	.word	0x40007000
 80098e4:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80098e8:	f7fc ffa0 	bl	800682c <HAL_GetTick>
 80098ec:	4602      	mov	r2, r0
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	1ad3      	subs	r3, r2, r3
 80098f2:	2b02      	cmp	r3, #2
 80098f4:	d901      	bls.n	80098fa <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80098f6:	2303      	movs	r3, #3
 80098f8:	e046      	b.n	8009988 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80098fa:	4b25      	ldr	r3, [pc, #148]	; (8009990 <HAL_RCC_OscConfig+0x62c>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009902:	2b00      	cmp	r3, #0
 8009904:	d1f0      	bne.n	80098e8 <HAL_RCC_OscConfig+0x584>
 8009906:	e03e      	b.n	8009986 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	69db      	ldr	r3, [r3, #28]
 800990c:	2b01      	cmp	r3, #1
 800990e:	d101      	bne.n	8009914 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8009910:	2301      	movs	r3, #1
 8009912:	e039      	b.n	8009988 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009914:	4b1e      	ldr	r3, [pc, #120]	; (8009990 <HAL_RCC_OscConfig+0x62c>)
 8009916:	68db      	ldr	r3, [r3, #12]
 8009918:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	f003 0203 	and.w	r2, r3, #3
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6a1b      	ldr	r3, [r3, #32]
 8009924:	429a      	cmp	r2, r3
 8009926:	d12c      	bne.n	8009982 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009932:	3b01      	subs	r3, #1
 8009934:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009936:	429a      	cmp	r2, r3
 8009938:	d123      	bne.n	8009982 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009944:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009946:	429a      	cmp	r2, r3
 8009948:	d11b      	bne.n	8009982 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009954:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009956:	429a      	cmp	r2, r3
 8009958:	d113      	bne.n	8009982 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009964:	085b      	lsrs	r3, r3, #1
 8009966:	3b01      	subs	r3, #1
 8009968:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800996a:	429a      	cmp	r2, r3
 800996c:	d109      	bne.n	8009982 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009978:	085b      	lsrs	r3, r3, #1
 800997a:	3b01      	subs	r3, #1
 800997c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800997e:	429a      	cmp	r2, r3
 8009980:	d001      	beq.n	8009986 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8009982:	2301      	movs	r3, #1
 8009984:	e000      	b.n	8009988 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8009986:	2300      	movs	r3, #0
}
 8009988:	4618      	mov	r0, r3
 800998a:	3720      	adds	r7, #32
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}
 8009990:	40021000 	.word	0x40021000

08009994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b086      	sub	sp, #24
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800999e:	2300      	movs	r3, #0
 80099a0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d101      	bne.n	80099ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80099a8:	2301      	movs	r3, #1
 80099aa:	e11e      	b.n	8009bea <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80099ac:	4b91      	ldr	r3, [pc, #580]	; (8009bf4 <HAL_RCC_ClockConfig+0x260>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f003 030f 	and.w	r3, r3, #15
 80099b4:	683a      	ldr	r2, [r7, #0]
 80099b6:	429a      	cmp	r2, r3
 80099b8:	d910      	bls.n	80099dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80099ba:	4b8e      	ldr	r3, [pc, #568]	; (8009bf4 <HAL_RCC_ClockConfig+0x260>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f023 020f 	bic.w	r2, r3, #15
 80099c2:	498c      	ldr	r1, [pc, #560]	; (8009bf4 <HAL_RCC_ClockConfig+0x260>)
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	4313      	orrs	r3, r2
 80099c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80099ca:	4b8a      	ldr	r3, [pc, #552]	; (8009bf4 <HAL_RCC_ClockConfig+0x260>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f003 030f 	and.w	r3, r3, #15
 80099d2:	683a      	ldr	r2, [r7, #0]
 80099d4:	429a      	cmp	r2, r3
 80099d6:	d001      	beq.n	80099dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80099d8:	2301      	movs	r3, #1
 80099da:	e106      	b.n	8009bea <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f003 0301 	and.w	r3, r3, #1
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d073      	beq.n	8009ad0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	685b      	ldr	r3, [r3, #4]
 80099ec:	2b03      	cmp	r3, #3
 80099ee:	d129      	bne.n	8009a44 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80099f0:	4b81      	ldr	r3, [pc, #516]	; (8009bf8 <HAL_RCC_ClockConfig+0x264>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d101      	bne.n	8009a00 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80099fc:	2301      	movs	r3, #1
 80099fe:	e0f4      	b.n	8009bea <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009a00:	f000 f972 	bl	8009ce8 <RCC_GetSysClockFreqFromPLLSource>
 8009a04:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	4a7c      	ldr	r2, [pc, #496]	; (8009bfc <HAL_RCC_ClockConfig+0x268>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d93f      	bls.n	8009a8e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009a0e:	4b7a      	ldr	r3, [pc, #488]	; (8009bf8 <HAL_RCC_ClockConfig+0x264>)
 8009a10:	689b      	ldr	r3, [r3, #8]
 8009a12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d009      	beq.n	8009a2e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d033      	beq.n	8009a8e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d12f      	bne.n	8009a8e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009a2e:	4b72      	ldr	r3, [pc, #456]	; (8009bf8 <HAL_RCC_ClockConfig+0x264>)
 8009a30:	689b      	ldr	r3, [r3, #8]
 8009a32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009a36:	4a70      	ldr	r2, [pc, #448]	; (8009bf8 <HAL_RCC_ClockConfig+0x264>)
 8009a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a3c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009a3e:	2380      	movs	r3, #128	; 0x80
 8009a40:	617b      	str	r3, [r7, #20]
 8009a42:	e024      	b.n	8009a8e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	2b02      	cmp	r3, #2
 8009a4a:	d107      	bne.n	8009a5c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009a4c:	4b6a      	ldr	r3, [pc, #424]	; (8009bf8 <HAL_RCC_ClockConfig+0x264>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d109      	bne.n	8009a6c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009a58:	2301      	movs	r3, #1
 8009a5a:	e0c6      	b.n	8009bea <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009a5c:	4b66      	ldr	r3, [pc, #408]	; (8009bf8 <HAL_RCC_ClockConfig+0x264>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d101      	bne.n	8009a6c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	e0be      	b.n	8009bea <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009a6c:	f000 f8ce 	bl	8009c0c <HAL_RCC_GetSysClockFreq>
 8009a70:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	4a61      	ldr	r2, [pc, #388]	; (8009bfc <HAL_RCC_ClockConfig+0x268>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d909      	bls.n	8009a8e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009a7a:	4b5f      	ldr	r3, [pc, #380]	; (8009bf8 <HAL_RCC_ClockConfig+0x264>)
 8009a7c:	689b      	ldr	r3, [r3, #8]
 8009a7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009a82:	4a5d      	ldr	r2, [pc, #372]	; (8009bf8 <HAL_RCC_ClockConfig+0x264>)
 8009a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a88:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8009a8a:	2380      	movs	r3, #128	; 0x80
 8009a8c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009a8e:	4b5a      	ldr	r3, [pc, #360]	; (8009bf8 <HAL_RCC_ClockConfig+0x264>)
 8009a90:	689b      	ldr	r3, [r3, #8]
 8009a92:	f023 0203 	bic.w	r2, r3, #3
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	685b      	ldr	r3, [r3, #4]
 8009a9a:	4957      	ldr	r1, [pc, #348]	; (8009bf8 <HAL_RCC_ClockConfig+0x264>)
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009aa0:	f7fc fec4 	bl	800682c <HAL_GetTick>
 8009aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009aa6:	e00a      	b.n	8009abe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009aa8:	f7fc fec0 	bl	800682c <HAL_GetTick>
 8009aac:	4602      	mov	r2, r0
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	1ad3      	subs	r3, r2, r3
 8009ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d901      	bls.n	8009abe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8009aba:	2303      	movs	r3, #3
 8009abc:	e095      	b.n	8009bea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009abe:	4b4e      	ldr	r3, [pc, #312]	; (8009bf8 <HAL_RCC_ClockConfig+0x264>)
 8009ac0:	689b      	ldr	r3, [r3, #8]
 8009ac2:	f003 020c 	and.w	r2, r3, #12
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	009b      	lsls	r3, r3, #2
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d1eb      	bne.n	8009aa8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f003 0302 	and.w	r3, r3, #2
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d023      	beq.n	8009b24 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f003 0304 	and.w	r3, r3, #4
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d005      	beq.n	8009af4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009ae8:	4b43      	ldr	r3, [pc, #268]	; (8009bf8 <HAL_RCC_ClockConfig+0x264>)
 8009aea:	689b      	ldr	r3, [r3, #8]
 8009aec:	4a42      	ldr	r2, [pc, #264]	; (8009bf8 <HAL_RCC_ClockConfig+0x264>)
 8009aee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009af2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f003 0308 	and.w	r3, r3, #8
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d007      	beq.n	8009b10 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009b00:	4b3d      	ldr	r3, [pc, #244]	; (8009bf8 <HAL_RCC_ClockConfig+0x264>)
 8009b02:	689b      	ldr	r3, [r3, #8]
 8009b04:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009b08:	4a3b      	ldr	r2, [pc, #236]	; (8009bf8 <HAL_RCC_ClockConfig+0x264>)
 8009b0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009b0e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009b10:	4b39      	ldr	r3, [pc, #228]	; (8009bf8 <HAL_RCC_ClockConfig+0x264>)
 8009b12:	689b      	ldr	r3, [r3, #8]
 8009b14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	4936      	ldr	r1, [pc, #216]	; (8009bf8 <HAL_RCC_ClockConfig+0x264>)
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	608b      	str	r3, [r1, #8]
 8009b22:	e008      	b.n	8009b36 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	2b80      	cmp	r3, #128	; 0x80
 8009b28:	d105      	bne.n	8009b36 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009b2a:	4b33      	ldr	r3, [pc, #204]	; (8009bf8 <HAL_RCC_ClockConfig+0x264>)
 8009b2c:	689b      	ldr	r3, [r3, #8]
 8009b2e:	4a32      	ldr	r2, [pc, #200]	; (8009bf8 <HAL_RCC_ClockConfig+0x264>)
 8009b30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b34:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009b36:	4b2f      	ldr	r3, [pc, #188]	; (8009bf4 <HAL_RCC_ClockConfig+0x260>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f003 030f 	and.w	r3, r3, #15
 8009b3e:	683a      	ldr	r2, [r7, #0]
 8009b40:	429a      	cmp	r2, r3
 8009b42:	d21d      	bcs.n	8009b80 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b44:	4b2b      	ldr	r3, [pc, #172]	; (8009bf4 <HAL_RCC_ClockConfig+0x260>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f023 020f 	bic.w	r2, r3, #15
 8009b4c:	4929      	ldr	r1, [pc, #164]	; (8009bf4 <HAL_RCC_ClockConfig+0x260>)
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	4313      	orrs	r3, r2
 8009b52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009b54:	f7fc fe6a 	bl	800682c <HAL_GetTick>
 8009b58:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b5a:	e00a      	b.n	8009b72 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009b5c:	f7fc fe66 	bl	800682c <HAL_GetTick>
 8009b60:	4602      	mov	r2, r0
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	1ad3      	subs	r3, r2, r3
 8009b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d901      	bls.n	8009b72 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009b6e:	2303      	movs	r3, #3
 8009b70:	e03b      	b.n	8009bea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b72:	4b20      	ldr	r3, [pc, #128]	; (8009bf4 <HAL_RCC_ClockConfig+0x260>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f003 030f 	and.w	r3, r3, #15
 8009b7a:	683a      	ldr	r2, [r7, #0]
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	d1ed      	bne.n	8009b5c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f003 0304 	and.w	r3, r3, #4
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d008      	beq.n	8009b9e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009b8c:	4b1a      	ldr	r3, [pc, #104]	; (8009bf8 <HAL_RCC_ClockConfig+0x264>)
 8009b8e:	689b      	ldr	r3, [r3, #8]
 8009b90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	68db      	ldr	r3, [r3, #12]
 8009b98:	4917      	ldr	r1, [pc, #92]	; (8009bf8 <HAL_RCC_ClockConfig+0x264>)
 8009b9a:	4313      	orrs	r3, r2
 8009b9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f003 0308 	and.w	r3, r3, #8
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d009      	beq.n	8009bbe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009baa:	4b13      	ldr	r3, [pc, #76]	; (8009bf8 <HAL_RCC_ClockConfig+0x264>)
 8009bac:	689b      	ldr	r3, [r3, #8]
 8009bae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	691b      	ldr	r3, [r3, #16]
 8009bb6:	00db      	lsls	r3, r3, #3
 8009bb8:	490f      	ldr	r1, [pc, #60]	; (8009bf8 <HAL_RCC_ClockConfig+0x264>)
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009bbe:	f000 f825 	bl	8009c0c <HAL_RCC_GetSysClockFreq>
 8009bc2:	4601      	mov	r1, r0
 8009bc4:	4b0c      	ldr	r3, [pc, #48]	; (8009bf8 <HAL_RCC_ClockConfig+0x264>)
 8009bc6:	689b      	ldr	r3, [r3, #8]
 8009bc8:	091b      	lsrs	r3, r3, #4
 8009bca:	f003 030f 	and.w	r3, r3, #15
 8009bce:	4a0c      	ldr	r2, [pc, #48]	; (8009c00 <HAL_RCC_ClockConfig+0x26c>)
 8009bd0:	5cd3      	ldrb	r3, [r2, r3]
 8009bd2:	f003 031f 	and.w	r3, r3, #31
 8009bd6:	fa21 f303 	lsr.w	r3, r1, r3
 8009bda:	4a0a      	ldr	r2, [pc, #40]	; (8009c04 <HAL_RCC_ClockConfig+0x270>)
 8009bdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009bde:	4b0a      	ldr	r3, [pc, #40]	; (8009c08 <HAL_RCC_ClockConfig+0x274>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7fc fdd6 	bl	8006794 <HAL_InitTick>
 8009be8:	4603      	mov	r3, r0
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3718      	adds	r7, #24
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	40022000 	.word	0x40022000
 8009bf8:	40021000 	.word	0x40021000
 8009bfc:	04c4b400 	.word	0x04c4b400
 8009c00:	0800ffc8 	.word	0x0800ffc8
 8009c04:	20000c94 	.word	0x20000c94
 8009c08:	20000c98 	.word	0x20000c98

08009c0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b087      	sub	sp, #28
 8009c10:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009c12:	4b2c      	ldr	r3, [pc, #176]	; (8009cc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009c14:	689b      	ldr	r3, [r3, #8]
 8009c16:	f003 030c 	and.w	r3, r3, #12
 8009c1a:	2b04      	cmp	r3, #4
 8009c1c:	d102      	bne.n	8009c24 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009c1e:	4b2a      	ldr	r3, [pc, #168]	; (8009cc8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009c20:	613b      	str	r3, [r7, #16]
 8009c22:	e047      	b.n	8009cb4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009c24:	4b27      	ldr	r3, [pc, #156]	; (8009cc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009c26:	689b      	ldr	r3, [r3, #8]
 8009c28:	f003 030c 	and.w	r3, r3, #12
 8009c2c:	2b08      	cmp	r3, #8
 8009c2e:	d102      	bne.n	8009c36 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009c30:	4b26      	ldr	r3, [pc, #152]	; (8009ccc <HAL_RCC_GetSysClockFreq+0xc0>)
 8009c32:	613b      	str	r3, [r7, #16]
 8009c34:	e03e      	b.n	8009cb4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8009c36:	4b23      	ldr	r3, [pc, #140]	; (8009cc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009c38:	689b      	ldr	r3, [r3, #8]
 8009c3a:	f003 030c 	and.w	r3, r3, #12
 8009c3e:	2b0c      	cmp	r3, #12
 8009c40:	d136      	bne.n	8009cb0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009c42:	4b20      	ldr	r3, [pc, #128]	; (8009cc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009c44:	68db      	ldr	r3, [r3, #12]
 8009c46:	f003 0303 	and.w	r3, r3, #3
 8009c4a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009c4c:	4b1d      	ldr	r3, [pc, #116]	; (8009cc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009c4e:	68db      	ldr	r3, [r3, #12]
 8009c50:	091b      	lsrs	r3, r3, #4
 8009c52:	f003 030f 	and.w	r3, r3, #15
 8009c56:	3301      	adds	r3, #1
 8009c58:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2b03      	cmp	r3, #3
 8009c5e:	d10c      	bne.n	8009c7a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009c60:	4a1a      	ldr	r2, [pc, #104]	; (8009ccc <HAL_RCC_GetSysClockFreq+0xc0>)
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c68:	4a16      	ldr	r2, [pc, #88]	; (8009cc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009c6a:	68d2      	ldr	r2, [r2, #12]
 8009c6c:	0a12      	lsrs	r2, r2, #8
 8009c6e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009c72:	fb02 f303 	mul.w	r3, r2, r3
 8009c76:	617b      	str	r3, [r7, #20]
      break;
 8009c78:	e00c      	b.n	8009c94 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009c7a:	4a13      	ldr	r2, [pc, #76]	; (8009cc8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c82:	4a10      	ldr	r2, [pc, #64]	; (8009cc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009c84:	68d2      	ldr	r2, [r2, #12]
 8009c86:	0a12      	lsrs	r2, r2, #8
 8009c88:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009c8c:	fb02 f303 	mul.w	r3, r2, r3
 8009c90:	617b      	str	r3, [r7, #20]
      break;
 8009c92:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009c94:	4b0b      	ldr	r3, [pc, #44]	; (8009cc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009c96:	68db      	ldr	r3, [r3, #12]
 8009c98:	0e5b      	lsrs	r3, r3, #25
 8009c9a:	f003 0303 	and.w	r3, r3, #3
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	005b      	lsls	r3, r3, #1
 8009ca2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8009ca4:	697a      	ldr	r2, [r7, #20]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cac:	613b      	str	r3, [r7, #16]
 8009cae:	e001      	b.n	8009cb4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009cb4:	693b      	ldr	r3, [r7, #16]
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	371c      	adds	r7, #28
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc0:	4770      	bx	lr
 8009cc2:	bf00      	nop
 8009cc4:	40021000 	.word	0x40021000
 8009cc8:	00f42400 	.word	0x00f42400
 8009ccc:	007a1200 	.word	0x007a1200

08009cd0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009cd4:	4b03      	ldr	r3, [pc, #12]	; (8009ce4 <HAL_RCC_GetHCLKFreq+0x14>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr
 8009ce2:	bf00      	nop
 8009ce4:	20000c94 	.word	0x20000c94

08009ce8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b087      	sub	sp, #28
 8009cec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009cee:	4b1e      	ldr	r3, [pc, #120]	; (8009d68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009cf0:	68db      	ldr	r3, [r3, #12]
 8009cf2:	f003 0303 	and.w	r3, r3, #3
 8009cf6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009cf8:	4b1b      	ldr	r3, [pc, #108]	; (8009d68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009cfa:	68db      	ldr	r3, [r3, #12]
 8009cfc:	091b      	lsrs	r3, r3, #4
 8009cfe:	f003 030f 	and.w	r3, r3, #15
 8009d02:	3301      	adds	r3, #1
 8009d04:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	2b03      	cmp	r3, #3
 8009d0a:	d10c      	bne.n	8009d26 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009d0c:	4a17      	ldr	r2, [pc, #92]	; (8009d6c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d14:	4a14      	ldr	r2, [pc, #80]	; (8009d68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009d16:	68d2      	ldr	r2, [r2, #12]
 8009d18:	0a12      	lsrs	r2, r2, #8
 8009d1a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009d1e:	fb02 f303 	mul.w	r3, r2, r3
 8009d22:	617b      	str	r3, [r7, #20]
    break;
 8009d24:	e00c      	b.n	8009d40 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009d26:	4a12      	ldr	r2, [pc, #72]	; (8009d70 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d2e:	4a0e      	ldr	r2, [pc, #56]	; (8009d68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009d30:	68d2      	ldr	r2, [r2, #12]
 8009d32:	0a12      	lsrs	r2, r2, #8
 8009d34:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009d38:	fb02 f303 	mul.w	r3, r2, r3
 8009d3c:	617b      	str	r3, [r7, #20]
    break;
 8009d3e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009d40:	4b09      	ldr	r3, [pc, #36]	; (8009d68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009d42:	68db      	ldr	r3, [r3, #12]
 8009d44:	0e5b      	lsrs	r3, r3, #25
 8009d46:	f003 0303 	and.w	r3, r3, #3
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	005b      	lsls	r3, r3, #1
 8009d4e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009d50:	697a      	ldr	r2, [r7, #20]
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d58:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8009d5a:	687b      	ldr	r3, [r7, #4]
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	371c      	adds	r7, #28
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr
 8009d68:	40021000 	.word	0x40021000
 8009d6c:	007a1200 	.word	0x007a1200
 8009d70:	00f42400 	.word	0x00f42400

08009d74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b086      	sub	sp, #24
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009d80:	2300      	movs	r3, #0
 8009d82:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	f000 8098 	beq.w	8009ec2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009d92:	2300      	movs	r3, #0
 8009d94:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009d96:	4b43      	ldr	r3, [pc, #268]	; (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d10d      	bne.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009da2:	4b40      	ldr	r3, [pc, #256]	; (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009da6:	4a3f      	ldr	r2, [pc, #252]	; (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009dac:	6593      	str	r3, [r2, #88]	; 0x58
 8009dae:	4b3d      	ldr	r3, [pc, #244]	; (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009db6:	60bb      	str	r3, [r7, #8]
 8009db8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009dba:	2301      	movs	r3, #1
 8009dbc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009dbe:	4b3a      	ldr	r3, [pc, #232]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4a39      	ldr	r2, [pc, #228]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009dc8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009dca:	f7fc fd2f 	bl	800682c <HAL_GetTick>
 8009dce:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009dd0:	e009      	b.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009dd2:	f7fc fd2b 	bl	800682c <HAL_GetTick>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	1ad3      	subs	r3, r2, r3
 8009ddc:	2b02      	cmp	r3, #2
 8009dde:	d902      	bls.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009de0:	2303      	movs	r3, #3
 8009de2:	74fb      	strb	r3, [r7, #19]
        break;
 8009de4:	e005      	b.n	8009df2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009de6:	4b30      	ldr	r3, [pc, #192]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d0ef      	beq.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009df2:	7cfb      	ldrb	r3, [r7, #19]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d159      	bne.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009df8:	4b2a      	ldr	r3, [pc, #168]	; (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e02:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d01e      	beq.n	8009e48 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e0e:	697a      	ldr	r2, [r7, #20]
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d019      	beq.n	8009e48 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009e14:	4b23      	ldr	r3, [pc, #140]	; (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009e20:	4b20      	ldr	r3, [pc, #128]	; (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e26:	4a1f      	ldr	r2, [pc, #124]	; (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009e30:	4b1c      	ldr	r3, [pc, #112]	; (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e36:	4a1b      	ldr	r2, [pc, #108]	; (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009e38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009e40:	4a18      	ldr	r2, [pc, #96]	; (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	f003 0301 	and.w	r3, r3, #1
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d016      	beq.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e52:	f7fc fceb 	bl	800682c <HAL_GetTick>
 8009e56:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009e58:	e00b      	b.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e5a:	f7fc fce7 	bl	800682c <HAL_GetTick>
 8009e5e:	4602      	mov	r2, r0
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	1ad3      	subs	r3, r2, r3
 8009e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d902      	bls.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009e6c:	2303      	movs	r3, #3
 8009e6e:	74fb      	strb	r3, [r7, #19]
            break;
 8009e70:	e006      	b.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009e72:	4b0c      	ldr	r3, [pc, #48]	; (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e78:	f003 0302 	and.w	r3, r3, #2
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d0ec      	beq.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009e80:	7cfb      	ldrb	r3, [r7, #19]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d10b      	bne.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009e86:	4b07      	ldr	r3, [pc, #28]	; (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e94:	4903      	ldr	r1, [pc, #12]	; (8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009e96:	4313      	orrs	r3, r2
 8009e98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009e9c:	e008      	b.n	8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009e9e:	7cfb      	ldrb	r3, [r7, #19]
 8009ea0:	74bb      	strb	r3, [r7, #18]
 8009ea2:	e005      	b.n	8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009ea4:	40021000 	.word	0x40021000
 8009ea8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eac:	7cfb      	ldrb	r3, [r7, #19]
 8009eae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009eb0:	7c7b      	ldrb	r3, [r7, #17]
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d105      	bne.n	8009ec2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009eb6:	4baf      	ldr	r3, [pc, #700]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009eba:	4aae      	ldr	r2, [pc, #696]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009ebc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ec0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f003 0301 	and.w	r3, r3, #1
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d00a      	beq.n	8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009ece:	4ba9      	ldr	r3, [pc, #676]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ed4:	f023 0203 	bic.w	r2, r3, #3
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	49a5      	ldr	r1, [pc, #660]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f003 0302 	and.w	r3, r3, #2
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d00a      	beq.n	8009f06 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009ef0:	4ba0      	ldr	r3, [pc, #640]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ef6:	f023 020c 	bic.w	r2, r3, #12
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	689b      	ldr	r3, [r3, #8]
 8009efe:	499d      	ldr	r1, [pc, #628]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009f00:	4313      	orrs	r3, r2
 8009f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f003 0304 	and.w	r3, r3, #4
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d00a      	beq.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009f12:	4b98      	ldr	r3, [pc, #608]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f18:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	68db      	ldr	r3, [r3, #12]
 8009f20:	4994      	ldr	r1, [pc, #592]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009f22:	4313      	orrs	r3, r2
 8009f24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f003 0308 	and.w	r3, r3, #8
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d00a      	beq.n	8009f4a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009f34:	4b8f      	ldr	r3, [pc, #572]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f3a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	691b      	ldr	r3, [r3, #16]
 8009f42:	498c      	ldr	r1, [pc, #560]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009f44:	4313      	orrs	r3, r2
 8009f46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f003 0310 	and.w	r3, r3, #16
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d00a      	beq.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009f56:	4b87      	ldr	r3, [pc, #540]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	695b      	ldr	r3, [r3, #20]
 8009f64:	4983      	ldr	r1, [pc, #524]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009f66:	4313      	orrs	r3, r2
 8009f68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f003 0320 	and.w	r3, r3, #32
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d00a      	beq.n	8009f8e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009f78:	4b7e      	ldr	r3, [pc, #504]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f7e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	699b      	ldr	r3, [r3, #24]
 8009f86:	497b      	ldr	r1, [pc, #492]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d00a      	beq.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009f9a:	4b76      	ldr	r3, [pc, #472]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fa0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	69db      	ldr	r3, [r3, #28]
 8009fa8:	4972      	ldr	r1, [pc, #456]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009faa:	4313      	orrs	r3, r2
 8009fac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d00a      	beq.n	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009fbc:	4b6d      	ldr	r3, [pc, #436]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fc2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6a1b      	ldr	r3, [r3, #32]
 8009fca:	496a      	ldr	r1, [pc, #424]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d00a      	beq.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009fde:	4b65      	ldr	r3, [pc, #404]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fe4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fec:	4961      	ldr	r1, [pc, #388]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009fee:	4313      	orrs	r3, r2
 8009ff0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d00a      	beq.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a000:	4b5c      	ldr	r3, [pc, #368]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a002:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a006:	f023 0203 	bic.w	r2, r3, #3
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a00e:	4959      	ldr	r1, [pc, #356]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a010:	4313      	orrs	r3, r2
 800a012:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d00a      	beq.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a022:	4b54      	ldr	r3, [pc, #336]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a028:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a030:	4950      	ldr	r1, [pc, #320]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a032:	4313      	orrs	r3, r2
 800a034:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a040:	2b00      	cmp	r3, #0
 800a042:	d015      	beq.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a044:	4b4b      	ldr	r3, [pc, #300]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a04a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a052:	4948      	ldr	r1, [pc, #288]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a054:	4313      	orrs	r3, r2
 800a056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a05e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a062:	d105      	bne.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a064:	4b43      	ldr	r3, [pc, #268]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a066:	68db      	ldr	r3, [r3, #12]
 800a068:	4a42      	ldr	r2, [pc, #264]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a06a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a06e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d015      	beq.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a07c:	4b3d      	ldr	r3, [pc, #244]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a07e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a082:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a08a:	493a      	ldr	r1, [pc, #232]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a08c:	4313      	orrs	r3, r2
 800a08e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a096:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a09a:	d105      	bne.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a09c:	4b35      	ldr	r3, [pc, #212]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a09e:	68db      	ldr	r3, [r3, #12]
 800a0a0:	4a34      	ldr	r2, [pc, #208]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a0a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0a6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d015      	beq.n	800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a0b4:	4b2f      	ldr	r3, [pc, #188]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a0b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0ba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0c2:	492c      	ldr	r1, [pc, #176]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a0d2:	d105      	bne.n	800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a0d4:	4b27      	ldr	r3, [pc, #156]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a0d6:	68db      	ldr	r3, [r3, #12]
 800a0d8:	4a26      	ldr	r2, [pc, #152]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a0da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0de:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d015      	beq.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a0ec:	4b21      	ldr	r3, [pc, #132]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a0ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0fa:	491e      	ldr	r1, [pc, #120]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a106:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a10a:	d105      	bne.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a10c:	4b19      	ldr	r3, [pc, #100]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a10e:	68db      	ldr	r3, [r3, #12]
 800a110:	4a18      	ldr	r2, [pc, #96]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a112:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a116:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a120:	2b00      	cmp	r3, #0
 800a122:	d015      	beq.n	800a150 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a124:	4b13      	ldr	r3, [pc, #76]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a12a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a132:	4910      	ldr	r1, [pc, #64]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a134:	4313      	orrs	r3, r2
 800a136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a13e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a142:	d105      	bne.n	800a150 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a144:	4b0b      	ldr	r3, [pc, #44]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a146:	68db      	ldr	r3, [r3, #12]
 800a148:	4a0a      	ldr	r2, [pc, #40]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a14a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a14e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d018      	beq.n	800a18e <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a15c:	4b05      	ldr	r3, [pc, #20]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a15e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a162:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a16a:	4902      	ldr	r1, [pc, #8]	; (800a174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800a16c:	4313      	orrs	r3, r2
 800a16e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800a172:	e001      	b.n	800a178 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800a174:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a17c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a180:	d105      	bne.n	800a18e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a182:	4b21      	ldr	r3, [pc, #132]	; (800a208 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800a184:	68db      	ldr	r3, [r3, #12]
 800a186:	4a20      	ldr	r2, [pc, #128]	; (800a208 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800a188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a18c:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a196:	2b00      	cmp	r3, #0
 800a198:	d015      	beq.n	800a1c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800a19a:	4b1b      	ldr	r3, [pc, #108]	; (800a208 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800a19c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1a0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1a8:	4917      	ldr	r1, [pc, #92]	; (800a208 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1b8:	d105      	bne.n	800a1c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a1ba:	4b13      	ldr	r3, [pc, #76]	; (800a208 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800a1bc:	68db      	ldr	r3, [r3, #12]
 800a1be:	4a12      	ldr	r2, [pc, #72]	; (800a208 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800a1c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a1c4:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d015      	beq.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a1d2:	4b0d      	ldr	r3, [pc, #52]	; (800a208 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800a1d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a1d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1e0:	4909      	ldr	r1, [pc, #36]	; (800a208 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a1f0:	d105      	bne.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a1f2:	4b05      	ldr	r3, [pc, #20]	; (800a208 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800a1f4:	68db      	ldr	r3, [r3, #12]
 800a1f6:	4a04      	ldr	r2, [pc, #16]	; (800a208 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800a1f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a1fc:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800a1fe:	7cbb      	ldrb	r3, [r7, #18]
}
 800a200:	4618      	mov	r0, r3
 800a202:	3718      	adds	r7, #24
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}
 800a208:	40021000 	.word	0x40021000

0800a20c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b084      	sub	sp, #16
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d101      	bne.n	800a21e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a21a:	2301      	movs	r3, #1
 800a21c:	e084      	b.n	800a328 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2200      	movs	r2, #0
 800a222:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a22a:	b2db      	uxtb	r3, r3
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d106      	bne.n	800a23e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2200      	movs	r2, #0
 800a234:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f7fb fcbd 	bl	8005bb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2202      	movs	r2, #2
 800a242:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	681a      	ldr	r2, [r3, #0]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a254:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	68db      	ldr	r3, [r3, #12]
 800a25a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a25e:	d902      	bls.n	800a266 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a260:	2300      	movs	r3, #0
 800a262:	60fb      	str	r3, [r7, #12]
 800a264:	e002      	b.n	800a26c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a266:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a26a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	68db      	ldr	r3, [r3, #12]
 800a270:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a274:	d007      	beq.n	800a286 <HAL_SPI_Init+0x7a>
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	68db      	ldr	r3, [r3, #12]
 800a27a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a27e:	d002      	beq.n	800a286 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2200      	movs	r2, #0
 800a284:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d10b      	bne.n	800a2a6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	68db      	ldr	r3, [r3, #12]
 800a292:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a296:	d903      	bls.n	800a2a0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2202      	movs	r2, #2
 800a29c:	631a      	str	r2, [r3, #48]	; 0x30
 800a29e:	e002      	b.n	800a2a6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	685a      	ldr	r2, [r3, #4]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	689b      	ldr	r3, [r3, #8]
 800a2ae:	431a      	orrs	r2, r3
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	691b      	ldr	r3, [r3, #16]
 800a2b4:	431a      	orrs	r2, r3
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	695b      	ldr	r3, [r3, #20]
 800a2ba:	431a      	orrs	r2, r3
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	699b      	ldr	r3, [r3, #24]
 800a2c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a2c4:	431a      	orrs	r2, r3
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	69db      	ldr	r3, [r3, #28]
 800a2ca:	431a      	orrs	r2, r3
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6a1b      	ldr	r3, [r3, #32]
 800a2d0:	ea42 0103 	orr.w	r1, r2, r3
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	430a      	orrs	r2, r1
 800a2de:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	699b      	ldr	r3, [r3, #24]
 800a2e4:	0c1b      	lsrs	r3, r3, #16
 800a2e6:	f003 0204 	and.w	r2, r3, #4
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ee:	431a      	orrs	r2, r3
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2f4:	431a      	orrs	r2, r3
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	68db      	ldr	r3, [r3, #12]
 800a2fa:	ea42 0103 	orr.w	r1, r2, r3
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	68fa      	ldr	r2, [r7, #12]
 800a304:	430a      	orrs	r2, r1
 800a306:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	69da      	ldr	r2, [r3, #28]
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a316:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2200      	movs	r2, #0
 800a31c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2201      	movs	r2, #1
 800a322:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a326:	2300      	movs	r3, #0
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3710      	adds	r7, #16
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b082      	sub	sp, #8
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d101      	bne.n	800a342 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a33e:	2301      	movs	r3, #1
 800a340:	e049      	b.n	800a3d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a348:	b2db      	uxtb	r3, r3
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d106      	bne.n	800a35c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2200      	movs	r2, #0
 800a352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f7fc f916 	bl	8006588 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2202      	movs	r2, #2
 800a360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681a      	ldr	r2, [r3, #0]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	3304      	adds	r3, #4
 800a36c:	4619      	mov	r1, r3
 800a36e:	4610      	mov	r0, r2
 800a370:	f000 fc52 	bl	800ac18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2201      	movs	r2, #1
 800a378:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2201      	movs	r2, #1
 800a380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2201      	movs	r2, #1
 800a388:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2201      	movs	r2, #1
 800a390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2201      	movs	r2, #1
 800a398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2201      	movs	r2, #1
 800a3a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2201      	movs	r2, #1
 800a3c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a3d4:	2300      	movs	r3, #0
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3708      	adds	r7, #8
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
	...

0800a3e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b085      	sub	sp, #20
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3ee:	b2db      	uxtb	r3, r3
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d001      	beq.n	800a3f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	e019      	b.n	800a42c <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2202      	movs	r2, #2
 800a3fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	689a      	ldr	r2, [r3, #8]
 800a406:	4b0c      	ldr	r3, [pc, #48]	; (800a438 <HAL_TIM_Base_Start+0x58>)
 800a408:	4013      	ands	r3, r2
 800a40a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2b06      	cmp	r3, #6
 800a410:	d00b      	beq.n	800a42a <HAL_TIM_Base_Start+0x4a>
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a418:	d007      	beq.n	800a42a <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	681a      	ldr	r2, [r3, #0]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f042 0201 	orr.w	r2, r2, #1
 800a428:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a42a:	2300      	movs	r3, #0
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3714      	adds	r7, #20
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr
 800a438:	00010007 	.word	0x00010007

0800a43c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b085      	sub	sp, #20
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a44a:	b2db      	uxtb	r3, r3
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	d001      	beq.n	800a454 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a450:	2301      	movs	r3, #1
 800a452:	e021      	b.n	800a498 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2202      	movs	r2, #2
 800a458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	68da      	ldr	r2, [r3, #12]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f042 0201 	orr.w	r2, r2, #1
 800a46a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	689a      	ldr	r2, [r3, #8]
 800a472:	4b0c      	ldr	r3, [pc, #48]	; (800a4a4 <HAL_TIM_Base_Start_IT+0x68>)
 800a474:	4013      	ands	r3, r2
 800a476:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	2b06      	cmp	r3, #6
 800a47c:	d00b      	beq.n	800a496 <HAL_TIM_Base_Start_IT+0x5a>
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a484:	d007      	beq.n	800a496 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	681a      	ldr	r2, [r3, #0]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f042 0201 	orr.w	r2, r2, #1
 800a494:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a496:	2300      	movs	r3, #0
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3714      	adds	r7, #20
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr
 800a4a4:	00010007 	.word	0x00010007

0800a4a8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b083      	sub	sp, #12
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	68da      	ldr	r2, [r3, #12]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f022 0201 	bic.w	r2, r2, #1
 800a4be:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	6a1a      	ldr	r2, [r3, #32]
 800a4c6:	f241 1311 	movw	r3, #4369	; 0x1111
 800a4ca:	4013      	ands	r3, r2
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d10f      	bne.n	800a4f0 <HAL_TIM_Base_Stop_IT+0x48>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	6a1a      	ldr	r2, [r3, #32]
 800a4d6:	f244 4344 	movw	r3, #17476	; 0x4444
 800a4da:	4013      	ands	r3, r2
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d107      	bne.n	800a4f0 <HAL_TIM_Base_Stop_IT+0x48>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	681a      	ldr	r2, [r3, #0]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f022 0201 	bic.w	r2, r2, #1
 800a4ee:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2201      	movs	r2, #1
 800a4f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a4f8:	2300      	movs	r3, #0
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	370c      	adds	r7, #12
 800a4fe:	46bd      	mov	sp, r7
 800a500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a504:	4770      	bx	lr

0800a506 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a506:	b580      	push	{r7, lr}
 800a508:	b086      	sub	sp, #24
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	6078      	str	r0, [r7, #4]
 800a50e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d101      	bne.n	800a51a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a516:	2301      	movs	r3, #1
 800a518:	e097      	b.n	800a64a <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a520:	b2db      	uxtb	r3, r3
 800a522:	2b00      	cmp	r3, #0
 800a524:	d106      	bne.n	800a534 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2200      	movs	r2, #0
 800a52a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f7fb ffce 	bl	80064d0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2202      	movs	r2, #2
 800a538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	689b      	ldr	r3, [r3, #8]
 800a542:	687a      	ldr	r2, [r7, #4]
 800a544:	6812      	ldr	r2, [r2, #0]
 800a546:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800a54a:	f023 0307 	bic.w	r3, r3, #7
 800a54e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681a      	ldr	r2, [r3, #0]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	3304      	adds	r3, #4
 800a558:	4619      	mov	r1, r3
 800a55a:	4610      	mov	r0, r2
 800a55c:	f000 fb5c 	bl	800ac18 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	689b      	ldr	r3, [r3, #8]
 800a566:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	699b      	ldr	r3, [r3, #24]
 800a56e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	6a1b      	ldr	r3, [r3, #32]
 800a576:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	697a      	ldr	r2, [r7, #20]
 800a57e:	4313      	orrs	r3, r2
 800a580:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a588:	f023 0303 	bic.w	r3, r3, #3
 800a58c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	689a      	ldr	r2, [r3, #8]
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	699b      	ldr	r3, [r3, #24]
 800a596:	021b      	lsls	r3, r3, #8
 800a598:	4313      	orrs	r3, r2
 800a59a:	693a      	ldr	r2, [r7, #16]
 800a59c:	4313      	orrs	r3, r2
 800a59e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800a5a6:	f023 030c 	bic.w	r3, r3, #12
 800a5aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a5b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a5b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	68da      	ldr	r2, [r3, #12]
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	69db      	ldr	r3, [r3, #28]
 800a5c0:	021b      	lsls	r3, r3, #8
 800a5c2:	4313      	orrs	r3, r2
 800a5c4:	693a      	ldr	r2, [r7, #16]
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	691b      	ldr	r3, [r3, #16]
 800a5ce:	011a      	lsls	r2, r3, #4
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	6a1b      	ldr	r3, [r3, #32]
 800a5d4:	031b      	lsls	r3, r3, #12
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	693a      	ldr	r2, [r7, #16]
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a5e4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a5ec:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	685a      	ldr	r2, [r3, #4]
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	695b      	ldr	r3, [r3, #20]
 800a5f6:	011b      	lsls	r3, r3, #4
 800a5f8:	4313      	orrs	r3, r2
 800a5fa:	68fa      	ldr	r2, [r7, #12]
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	697a      	ldr	r2, [r7, #20]
 800a606:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	693a      	ldr	r2, [r7, #16]
 800a60e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	68fa      	ldr	r2, [r7, #12]
 800a616:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2201      	movs	r2, #1
 800a61c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2201      	movs	r2, #1
 800a624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2201      	movs	r2, #1
 800a62c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2201      	movs	r2, #1
 800a634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2201      	movs	r2, #1
 800a63c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2201      	movs	r2, #1
 800a644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a648:	2300      	movs	r3, #0
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3718      	adds	r7, #24
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}

0800a652 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a652:	b580      	push	{r7, lr}
 800a654:	b082      	sub	sp, #8
 800a656:	af00      	add	r7, sp, #0
 800a658:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	691b      	ldr	r3, [r3, #16]
 800a660:	f003 0302 	and.w	r3, r3, #2
 800a664:	2b02      	cmp	r3, #2
 800a666:	d122      	bne.n	800a6ae <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	68db      	ldr	r3, [r3, #12]
 800a66e:	f003 0302 	and.w	r3, r3, #2
 800a672:	2b02      	cmp	r3, #2
 800a674:	d11b      	bne.n	800a6ae <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f06f 0202 	mvn.w	r2, #2
 800a67e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2201      	movs	r2, #1
 800a684:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	699b      	ldr	r3, [r3, #24]
 800a68c:	f003 0303 	and.w	r3, r3, #3
 800a690:	2b00      	cmp	r3, #0
 800a692:	d003      	beq.n	800a69c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f000 faa1 	bl	800abdc <HAL_TIM_IC_CaptureCallback>
 800a69a:	e005      	b.n	800a6a8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f000 fa93 	bl	800abc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f000 faa4 	bl	800abf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	691b      	ldr	r3, [r3, #16]
 800a6b4:	f003 0304 	and.w	r3, r3, #4
 800a6b8:	2b04      	cmp	r3, #4
 800a6ba:	d122      	bne.n	800a702 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	68db      	ldr	r3, [r3, #12]
 800a6c2:	f003 0304 	and.w	r3, r3, #4
 800a6c6:	2b04      	cmp	r3, #4
 800a6c8:	d11b      	bne.n	800a702 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f06f 0204 	mvn.w	r2, #4
 800a6d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2202      	movs	r2, #2
 800a6d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	699b      	ldr	r3, [r3, #24]
 800a6e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d003      	beq.n	800a6f0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 fa77 	bl	800abdc <HAL_TIM_IC_CaptureCallback>
 800a6ee:	e005      	b.n	800a6fc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f000 fa69 	bl	800abc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f000 fa7a 	bl	800abf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2200      	movs	r2, #0
 800a700:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	691b      	ldr	r3, [r3, #16]
 800a708:	f003 0308 	and.w	r3, r3, #8
 800a70c:	2b08      	cmp	r3, #8
 800a70e:	d122      	bne.n	800a756 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	68db      	ldr	r3, [r3, #12]
 800a716:	f003 0308 	and.w	r3, r3, #8
 800a71a:	2b08      	cmp	r3, #8
 800a71c:	d11b      	bne.n	800a756 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f06f 0208 	mvn.w	r2, #8
 800a726:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2204      	movs	r2, #4
 800a72c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	69db      	ldr	r3, [r3, #28]
 800a734:	f003 0303 	and.w	r3, r3, #3
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d003      	beq.n	800a744 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f000 fa4d 	bl	800abdc <HAL_TIM_IC_CaptureCallback>
 800a742:	e005      	b.n	800a750 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f000 fa3f 	bl	800abc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f000 fa50 	bl	800abf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2200      	movs	r2, #0
 800a754:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	691b      	ldr	r3, [r3, #16]
 800a75c:	f003 0310 	and.w	r3, r3, #16
 800a760:	2b10      	cmp	r3, #16
 800a762:	d122      	bne.n	800a7aa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	68db      	ldr	r3, [r3, #12]
 800a76a:	f003 0310 	and.w	r3, r3, #16
 800a76e:	2b10      	cmp	r3, #16
 800a770:	d11b      	bne.n	800a7aa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f06f 0210 	mvn.w	r2, #16
 800a77a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2208      	movs	r2, #8
 800a780:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	69db      	ldr	r3, [r3, #28]
 800a788:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d003      	beq.n	800a798 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f000 fa23 	bl	800abdc <HAL_TIM_IC_CaptureCallback>
 800a796:	e005      	b.n	800a7a4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f000 fa15 	bl	800abc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f000 fa26 	bl	800abf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	691b      	ldr	r3, [r3, #16]
 800a7b0:	f003 0301 	and.w	r3, r3, #1
 800a7b4:	2b01      	cmp	r3, #1
 800a7b6:	d10e      	bne.n	800a7d6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	68db      	ldr	r3, [r3, #12]
 800a7be:	f003 0301 	and.w	r3, r3, #1
 800a7c2:	2b01      	cmp	r3, #1
 800a7c4:	d107      	bne.n	800a7d6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f06f 0201 	mvn.w	r2, #1
 800a7ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f000 f9ef 	bl	800abb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	691b      	ldr	r3, [r3, #16]
 800a7dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7e0:	2b80      	cmp	r3, #128	; 0x80
 800a7e2:	d10e      	bne.n	800a802 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	68db      	ldr	r3, [r3, #12]
 800a7ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7ee:	2b80      	cmp	r3, #128	; 0x80
 800a7f0:	d107      	bne.n	800a802 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a7fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f000 fd5d 	bl	800b2bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	691b      	ldr	r3, [r3, #16]
 800a808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a80c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a810:	d10e      	bne.n	800a830 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	68db      	ldr	r3, [r3, #12]
 800a818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a81c:	2b80      	cmp	r3, #128	; 0x80
 800a81e:	d107      	bne.n	800a830 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f000 fd50 	bl	800b2d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	691b      	ldr	r3, [r3, #16]
 800a836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a83a:	2b40      	cmp	r3, #64	; 0x40
 800a83c:	d10e      	bne.n	800a85c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	68db      	ldr	r3, [r3, #12]
 800a844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a848:	2b40      	cmp	r3, #64	; 0x40
 800a84a:	d107      	bne.n	800a85c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f000 f9d4 	bl	800ac04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	691b      	ldr	r3, [r3, #16]
 800a862:	f003 0320 	and.w	r3, r3, #32
 800a866:	2b20      	cmp	r3, #32
 800a868:	d10e      	bne.n	800a888 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	68db      	ldr	r3, [r3, #12]
 800a870:	f003 0320 	and.w	r3, r3, #32
 800a874:	2b20      	cmp	r3, #32
 800a876:	d107      	bne.n	800a888 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f06f 0220 	mvn.w	r2, #32
 800a880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f000 fd10 	bl	800b2a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	691b      	ldr	r3, [r3, #16]
 800a88e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a892:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a896:	d10f      	bne.n	800a8b8 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	68db      	ldr	r3, [r3, #12]
 800a89e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a8a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a8a6:	d107      	bne.n	800a8b8 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800a8b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f000 fd16 	bl	800b2e4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	691b      	ldr	r3, [r3, #16]
 800a8be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a8c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a8c6:	d10f      	bne.n	800a8e8 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	68db      	ldr	r3, [r3, #12]
 800a8ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a8d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a8d6:	d107      	bne.n	800a8e8 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800a8e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f000 fd08 	bl	800b2f8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	691b      	ldr	r3, [r3, #16]
 800a8ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a8f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a8f6:	d10f      	bne.n	800a918 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	68db      	ldr	r3, [r3, #12]
 800a8fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a902:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a906:	d107      	bne.n	800a918 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800a910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f000 fcfa 	bl	800b30c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	691b      	ldr	r3, [r3, #16]
 800a91e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a922:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a926:	d10f      	bne.n	800a948 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	68db      	ldr	r3, [r3, #12]
 800a92e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a932:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a936:	d107      	bne.n	800a948 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800a940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f000 fcec 	bl	800b320 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a948:	bf00      	nop
 800a94a:	3708      	adds	r7, #8
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b084      	sub	sp, #16
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a960:	2b01      	cmp	r3, #1
 800a962:	d101      	bne.n	800a968 <HAL_TIM_ConfigClockSource+0x18>
 800a964:	2302      	movs	r3, #2
 800a966:	e0d2      	b.n	800ab0e <HAL_TIM_ConfigClockSource+0x1be>
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2201      	movs	r2, #1
 800a96c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2202      	movs	r2, #2
 800a974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	689b      	ldr	r3, [r3, #8]
 800a97e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800a986:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a98a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a992:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	68fa      	ldr	r2, [r7, #12]
 800a99a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9a4:	f000 80a9 	beq.w	800aafa <HAL_TIM_ConfigClockSource+0x1aa>
 800a9a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9ac:	d81a      	bhi.n	800a9e4 <HAL_TIM_ConfigClockSource+0x94>
 800a9ae:	2b30      	cmp	r3, #48	; 0x30
 800a9b0:	f000 809a 	beq.w	800aae8 <HAL_TIM_ConfigClockSource+0x198>
 800a9b4:	2b30      	cmp	r3, #48	; 0x30
 800a9b6:	d809      	bhi.n	800a9cc <HAL_TIM_ConfigClockSource+0x7c>
 800a9b8:	2b10      	cmp	r3, #16
 800a9ba:	f000 8095 	beq.w	800aae8 <HAL_TIM_ConfigClockSource+0x198>
 800a9be:	2b20      	cmp	r3, #32
 800a9c0:	f000 8092 	beq.w	800aae8 <HAL_TIM_ConfigClockSource+0x198>
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	f000 808f 	beq.w	800aae8 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a9ca:	e097      	b.n	800aafc <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800a9cc:	2b50      	cmp	r3, #80	; 0x50
 800a9ce:	d05b      	beq.n	800aa88 <HAL_TIM_ConfigClockSource+0x138>
 800a9d0:	2b50      	cmp	r3, #80	; 0x50
 800a9d2:	d802      	bhi.n	800a9da <HAL_TIM_ConfigClockSource+0x8a>
 800a9d4:	2b40      	cmp	r3, #64	; 0x40
 800a9d6:	d077      	beq.n	800aac8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800a9d8:	e090      	b.n	800aafc <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800a9da:	2b60      	cmp	r3, #96	; 0x60
 800a9dc:	d064      	beq.n	800aaa8 <HAL_TIM_ConfigClockSource+0x158>
 800a9de:	2b70      	cmp	r3, #112	; 0x70
 800a9e0:	d028      	beq.n	800aa34 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800a9e2:	e08b      	b.n	800aafc <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800a9e4:	4a4c      	ldr	r2, [pc, #304]	; (800ab18 <HAL_TIM_ConfigClockSource+0x1c8>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d07e      	beq.n	800aae8 <HAL_TIM_ConfigClockSource+0x198>
 800a9ea:	4a4b      	ldr	r2, [pc, #300]	; (800ab18 <HAL_TIM_ConfigClockSource+0x1c8>)
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d810      	bhi.n	800aa12 <HAL_TIM_ConfigClockSource+0xc2>
 800a9f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9f4:	d078      	beq.n	800aae8 <HAL_TIM_ConfigClockSource+0x198>
 800a9f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9fa:	d803      	bhi.n	800aa04 <HAL_TIM_ConfigClockSource+0xb4>
 800a9fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa00:	d02f      	beq.n	800aa62 <HAL_TIM_ConfigClockSource+0x112>
      break;
 800aa02:	e07b      	b.n	800aafc <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800aa04:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800aa08:	d06e      	beq.n	800aae8 <HAL_TIM_ConfigClockSource+0x198>
 800aa0a:	4a44      	ldr	r2, [pc, #272]	; (800ab1c <HAL_TIM_ConfigClockSource+0x1cc>)
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d06b      	beq.n	800aae8 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800aa10:	e074      	b.n	800aafc <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800aa12:	4a43      	ldr	r2, [pc, #268]	; (800ab20 <HAL_TIM_ConfigClockSource+0x1d0>)
 800aa14:	4293      	cmp	r3, r2
 800aa16:	d067      	beq.n	800aae8 <HAL_TIM_ConfigClockSource+0x198>
 800aa18:	4a41      	ldr	r2, [pc, #260]	; (800ab20 <HAL_TIM_ConfigClockSource+0x1d0>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d803      	bhi.n	800aa26 <HAL_TIM_ConfigClockSource+0xd6>
 800aa1e:	4a41      	ldr	r2, [pc, #260]	; (800ab24 <HAL_TIM_ConfigClockSource+0x1d4>)
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d061      	beq.n	800aae8 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800aa24:	e06a      	b.n	800aafc <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800aa26:	4a40      	ldr	r2, [pc, #256]	; (800ab28 <HAL_TIM_ConfigClockSource+0x1d8>)
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d05d      	beq.n	800aae8 <HAL_TIM_ConfigClockSource+0x198>
 800aa2c:	4a3f      	ldr	r2, [pc, #252]	; (800ab2c <HAL_TIM_ConfigClockSource+0x1dc>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d05a      	beq.n	800aae8 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800aa32:	e063      	b.n	800aafc <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6818      	ldr	r0, [r3, #0]
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	6899      	ldr	r1, [r3, #8]
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	685a      	ldr	r2, [r3, #4]
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	68db      	ldr	r3, [r3, #12]
 800aa44:	f000 fac8 	bl	800afd8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	689b      	ldr	r3, [r3, #8]
 800aa4e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800aa56:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	68fa      	ldr	r2, [r7, #12]
 800aa5e:	609a      	str	r2, [r3, #8]
      break;
 800aa60:	e04c      	b.n	800aafc <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6818      	ldr	r0, [r3, #0]
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	6899      	ldr	r1, [r3, #8]
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	685a      	ldr	r2, [r3, #4]
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	68db      	ldr	r3, [r3, #12]
 800aa72:	f000 fab1 	bl	800afd8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	689a      	ldr	r2, [r3, #8]
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aa84:	609a      	str	r2, [r3, #8]
      break;
 800aa86:	e039      	b.n	800aafc <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6818      	ldr	r0, [r3, #0]
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	6859      	ldr	r1, [r3, #4]
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	68db      	ldr	r3, [r3, #12]
 800aa94:	461a      	mov	r2, r3
 800aa96:	f000 fa23 	bl	800aee0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	2150      	movs	r1, #80	; 0x50
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f000 fa7c 	bl	800af9e <TIM_ITRx_SetConfig>
      break;
 800aaa6:	e029      	b.n	800aafc <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6818      	ldr	r0, [r3, #0]
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	6859      	ldr	r1, [r3, #4]
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	68db      	ldr	r3, [r3, #12]
 800aab4:	461a      	mov	r2, r3
 800aab6:	f000 fa42 	bl	800af3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	2160      	movs	r1, #96	; 0x60
 800aac0:	4618      	mov	r0, r3
 800aac2:	f000 fa6c 	bl	800af9e <TIM_ITRx_SetConfig>
      break;
 800aac6:	e019      	b.n	800aafc <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6818      	ldr	r0, [r3, #0]
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	6859      	ldr	r1, [r3, #4]
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	68db      	ldr	r3, [r3, #12]
 800aad4:	461a      	mov	r2, r3
 800aad6:	f000 fa03 	bl	800aee0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	2140      	movs	r1, #64	; 0x40
 800aae0:	4618      	mov	r0, r3
 800aae2:	f000 fa5c 	bl	800af9e <TIM_ITRx_SetConfig>
      break;
 800aae6:	e009      	b.n	800aafc <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681a      	ldr	r2, [r3, #0]
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4619      	mov	r1, r3
 800aaf2:	4610      	mov	r0, r2
 800aaf4:	f000 fa53 	bl	800af9e <TIM_ITRx_SetConfig>
      break;
 800aaf8:	e000      	b.n	800aafc <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800aafa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2201      	movs	r2, #1
 800ab00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2200      	movs	r2, #0
 800ab08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ab0c:	2300      	movs	r3, #0
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3710      	adds	r7, #16
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
 800ab16:	bf00      	nop
 800ab18:	00100030 	.word	0x00100030
 800ab1c:	00100020 	.word	0x00100020
 800ab20:	00100050 	.word	0x00100050
 800ab24:	00100040 	.word	0x00100040
 800ab28:	00100060 	.word	0x00100060
 800ab2c:	00100070 	.word	0x00100070

0800ab30 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b082      	sub	sp, #8
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab40:	2b01      	cmp	r3, #1
 800ab42:	d101      	bne.n	800ab48 <HAL_TIM_SlaveConfigSynchro+0x18>
 800ab44:	2302      	movs	r3, #2
 800ab46:	e031      	b.n	800abac <HAL_TIM_SlaveConfigSynchro+0x7c>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2202      	movs	r2, #2
 800ab54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800ab58:	6839      	ldr	r1, [r7, #0]
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f000 f904 	bl	800ad68 <TIM_SlaveTimer_SetConfig>
 800ab60:	4603      	mov	r3, r0
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d009      	beq.n	800ab7a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2201      	movs	r2, #1
 800ab6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2200      	movs	r2, #0
 800ab72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800ab76:	2301      	movs	r3, #1
 800ab78:	e018      	b.n	800abac <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	68da      	ldr	r2, [r3, #12]
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ab88:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	68da      	ldr	r2, [r3, #12]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ab98:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2201      	movs	r2, #1
 800ab9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2200      	movs	r2, #0
 800aba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800abaa:	2300      	movs	r3, #0
}
 800abac:	4618      	mov	r0, r3
 800abae:	3708      	adds	r7, #8
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}

0800abb4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800abb4:	b480      	push	{r7}
 800abb6:	b083      	sub	sp, #12
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800abbc:	bf00      	nop
 800abbe:	370c      	adds	r7, #12
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr

0800abc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800abc8:	b480      	push	{r7}
 800abca:	b083      	sub	sp, #12
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800abd0:	bf00      	nop
 800abd2:	370c      	adds	r7, #12
 800abd4:	46bd      	mov	sp, r7
 800abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abda:	4770      	bx	lr

0800abdc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800abdc:	b480      	push	{r7}
 800abde:	b083      	sub	sp, #12
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800abe4:	bf00      	nop
 800abe6:	370c      	adds	r7, #12
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr

0800abf0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b083      	sub	sp, #12
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800abf8:	bf00      	nop
 800abfa:	370c      	adds	r7, #12
 800abfc:	46bd      	mov	sp, r7
 800abfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac02:	4770      	bx	lr

0800ac04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b083      	sub	sp, #12
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ac0c:	bf00      	nop
 800ac0e:	370c      	adds	r7, #12
 800ac10:	46bd      	mov	sp, r7
 800ac12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac16:	4770      	bx	lr

0800ac18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b085      	sub	sp, #20
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
 800ac20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	4a46      	ldr	r2, [pc, #280]	; (800ad44 <TIM_Base_SetConfig+0x12c>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d017      	beq.n	800ac60 <TIM_Base_SetConfig+0x48>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac36:	d013      	beq.n	800ac60 <TIM_Base_SetConfig+0x48>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	4a43      	ldr	r2, [pc, #268]	; (800ad48 <TIM_Base_SetConfig+0x130>)
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d00f      	beq.n	800ac60 <TIM_Base_SetConfig+0x48>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	4a42      	ldr	r2, [pc, #264]	; (800ad4c <TIM_Base_SetConfig+0x134>)
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d00b      	beq.n	800ac60 <TIM_Base_SetConfig+0x48>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	4a41      	ldr	r2, [pc, #260]	; (800ad50 <TIM_Base_SetConfig+0x138>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d007      	beq.n	800ac60 <TIM_Base_SetConfig+0x48>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	4a40      	ldr	r2, [pc, #256]	; (800ad54 <TIM_Base_SetConfig+0x13c>)
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d003      	beq.n	800ac60 <TIM_Base_SetConfig+0x48>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	4a3f      	ldr	r2, [pc, #252]	; (800ad58 <TIM_Base_SetConfig+0x140>)
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d108      	bne.n	800ac72 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	685b      	ldr	r3, [r3, #4]
 800ac6c:	68fa      	ldr	r2, [r7, #12]
 800ac6e:	4313      	orrs	r3, r2
 800ac70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	4a33      	ldr	r2, [pc, #204]	; (800ad44 <TIM_Base_SetConfig+0x12c>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d023      	beq.n	800acc2 <TIM_Base_SetConfig+0xaa>
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac80:	d01f      	beq.n	800acc2 <TIM_Base_SetConfig+0xaa>
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	4a30      	ldr	r2, [pc, #192]	; (800ad48 <TIM_Base_SetConfig+0x130>)
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d01b      	beq.n	800acc2 <TIM_Base_SetConfig+0xaa>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	4a2f      	ldr	r2, [pc, #188]	; (800ad4c <TIM_Base_SetConfig+0x134>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d017      	beq.n	800acc2 <TIM_Base_SetConfig+0xaa>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	4a2e      	ldr	r2, [pc, #184]	; (800ad50 <TIM_Base_SetConfig+0x138>)
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d013      	beq.n	800acc2 <TIM_Base_SetConfig+0xaa>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	4a2d      	ldr	r2, [pc, #180]	; (800ad54 <TIM_Base_SetConfig+0x13c>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d00f      	beq.n	800acc2 <TIM_Base_SetConfig+0xaa>
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	4a2d      	ldr	r2, [pc, #180]	; (800ad5c <TIM_Base_SetConfig+0x144>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d00b      	beq.n	800acc2 <TIM_Base_SetConfig+0xaa>
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	4a2c      	ldr	r2, [pc, #176]	; (800ad60 <TIM_Base_SetConfig+0x148>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d007      	beq.n	800acc2 <TIM_Base_SetConfig+0xaa>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	4a2b      	ldr	r2, [pc, #172]	; (800ad64 <TIM_Base_SetConfig+0x14c>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d003      	beq.n	800acc2 <TIM_Base_SetConfig+0xaa>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	4a26      	ldr	r2, [pc, #152]	; (800ad58 <TIM_Base_SetConfig+0x140>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d108      	bne.n	800acd4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800acc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	68db      	ldr	r3, [r3, #12]
 800acce:	68fa      	ldr	r2, [r7, #12]
 800acd0:	4313      	orrs	r3, r2
 800acd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	695b      	ldr	r3, [r3, #20]
 800acde:	4313      	orrs	r3, r2
 800ace0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	68fa      	ldr	r2, [r7, #12]
 800ace6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	689a      	ldr	r2, [r3, #8]
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	681a      	ldr	r2, [r3, #0]
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	4a12      	ldr	r2, [pc, #72]	; (800ad44 <TIM_Base_SetConfig+0x12c>)
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d013      	beq.n	800ad28 <TIM_Base_SetConfig+0x110>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	4a14      	ldr	r2, [pc, #80]	; (800ad54 <TIM_Base_SetConfig+0x13c>)
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d00f      	beq.n	800ad28 <TIM_Base_SetConfig+0x110>
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	4a14      	ldr	r2, [pc, #80]	; (800ad5c <TIM_Base_SetConfig+0x144>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d00b      	beq.n	800ad28 <TIM_Base_SetConfig+0x110>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	4a13      	ldr	r2, [pc, #76]	; (800ad60 <TIM_Base_SetConfig+0x148>)
 800ad14:	4293      	cmp	r3, r2
 800ad16:	d007      	beq.n	800ad28 <TIM_Base_SetConfig+0x110>
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	4a12      	ldr	r2, [pc, #72]	; (800ad64 <TIM_Base_SetConfig+0x14c>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d003      	beq.n	800ad28 <TIM_Base_SetConfig+0x110>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	4a0d      	ldr	r2, [pc, #52]	; (800ad58 <TIM_Base_SetConfig+0x140>)
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d103      	bne.n	800ad30 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	691a      	ldr	r2, [r3, #16]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2201      	movs	r2, #1
 800ad34:	615a      	str	r2, [r3, #20]
}
 800ad36:	bf00      	nop
 800ad38:	3714      	adds	r7, #20
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad40:	4770      	bx	lr
 800ad42:	bf00      	nop
 800ad44:	40012c00 	.word	0x40012c00
 800ad48:	40000400 	.word	0x40000400
 800ad4c:	40000800 	.word	0x40000800
 800ad50:	40000c00 	.word	0x40000c00
 800ad54:	40013400 	.word	0x40013400
 800ad58:	40015000 	.word	0x40015000
 800ad5c:	40014000 	.word	0x40014000
 800ad60:	40014400 	.word	0x40014400
 800ad64:	40014800 	.word	0x40014800

0800ad68 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b086      	sub	sp, #24
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
 800ad70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	689b      	ldr	r3, [r3, #8]
 800ad78:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800ad80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad84:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	685b      	ldr	r3, [r3, #4]
 800ad8a:	697a      	ldr	r2, [r7, #20]
 800ad8c:	4313      	orrs	r3, r2
 800ad8e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad96:	f023 0307 	bic.w	r3, r3, #7
 800ad9a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	697a      	ldr	r2, [r7, #20]
 800ada2:	4313      	orrs	r3, r2
 800ada4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	697a      	ldr	r2, [r7, #20]
 800adac:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	685b      	ldr	r3, [r3, #4]
 800adb2:	2b70      	cmp	r3, #112	; 0x70
 800adb4:	d034      	beq.n	800ae20 <TIM_SlaveTimer_SetConfig+0xb8>
 800adb6:	2b70      	cmp	r3, #112	; 0x70
 800adb8:	d811      	bhi.n	800adde <TIM_SlaveTimer_SetConfig+0x76>
 800adba:	2b30      	cmp	r3, #48	; 0x30
 800adbc:	d07d      	beq.n	800aeba <TIM_SlaveTimer_SetConfig+0x152>
 800adbe:	2b30      	cmp	r3, #48	; 0x30
 800adc0:	d806      	bhi.n	800add0 <TIM_SlaveTimer_SetConfig+0x68>
 800adc2:	2b10      	cmp	r3, #16
 800adc4:	d079      	beq.n	800aeba <TIM_SlaveTimer_SetConfig+0x152>
 800adc6:	2b20      	cmp	r3, #32
 800adc8:	d077      	beq.n	800aeba <TIM_SlaveTimer_SetConfig+0x152>
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d075      	beq.n	800aeba <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 800adce:	e075      	b.n	800aebc <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800add0:	2b50      	cmp	r3, #80	; 0x50
 800add2:	d05e      	beq.n	800ae92 <TIM_SlaveTimer_SetConfig+0x12a>
 800add4:	2b60      	cmp	r3, #96	; 0x60
 800add6:	d066      	beq.n	800aea6 <TIM_SlaveTimer_SetConfig+0x13e>
 800add8:	2b40      	cmp	r3, #64	; 0x40
 800adda:	d02c      	beq.n	800ae36 <TIM_SlaveTimer_SetConfig+0xce>
      break;
 800addc:	e06e      	b.n	800aebc <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800adde:	4a3a      	ldr	r2, [pc, #232]	; (800aec8 <TIM_SlaveTimer_SetConfig+0x160>)
 800ade0:	4293      	cmp	r3, r2
 800ade2:	d06a      	beq.n	800aeba <TIM_SlaveTimer_SetConfig+0x152>
 800ade4:	4a38      	ldr	r2, [pc, #224]	; (800aec8 <TIM_SlaveTimer_SetConfig+0x160>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d809      	bhi.n	800adfe <TIM_SlaveTimer_SetConfig+0x96>
 800adea:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800adee:	d064      	beq.n	800aeba <TIM_SlaveTimer_SetConfig+0x152>
 800adf0:	4a36      	ldr	r2, [pc, #216]	; (800aecc <TIM_SlaveTimer_SetConfig+0x164>)
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d061      	beq.n	800aeba <TIM_SlaveTimer_SetConfig+0x152>
 800adf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800adfa:	d05e      	beq.n	800aeba <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800adfc:	e05e      	b.n	800aebc <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800adfe:	4a34      	ldr	r2, [pc, #208]	; (800aed0 <TIM_SlaveTimer_SetConfig+0x168>)
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d05a      	beq.n	800aeba <TIM_SlaveTimer_SetConfig+0x152>
 800ae04:	4a32      	ldr	r2, [pc, #200]	; (800aed0 <TIM_SlaveTimer_SetConfig+0x168>)
 800ae06:	4293      	cmp	r3, r2
 800ae08:	d803      	bhi.n	800ae12 <TIM_SlaveTimer_SetConfig+0xaa>
 800ae0a:	4a32      	ldr	r2, [pc, #200]	; (800aed4 <TIM_SlaveTimer_SetConfig+0x16c>)
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d054      	beq.n	800aeba <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800ae10:	e054      	b.n	800aebc <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800ae12:	4a31      	ldr	r2, [pc, #196]	; (800aed8 <TIM_SlaveTimer_SetConfig+0x170>)
 800ae14:	4293      	cmp	r3, r2
 800ae16:	d050      	beq.n	800aeba <TIM_SlaveTimer_SetConfig+0x152>
 800ae18:	4a30      	ldr	r2, [pc, #192]	; (800aedc <TIM_SlaveTimer_SetConfig+0x174>)
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d04d      	beq.n	800aeba <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800ae1e:	e04d      	b.n	800aebc <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6818      	ldr	r0, [r3, #0]
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	68d9      	ldr	r1, [r3, #12]
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	689a      	ldr	r2, [r3, #8]
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	691b      	ldr	r3, [r3, #16]
 800ae30:	f000 f8d2 	bl	800afd8 <TIM_ETR_SetConfig>
      break;
 800ae34:	e042      	b.n	800aebc <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	2b05      	cmp	r3, #5
 800ae3c:	d004      	beq.n	800ae48 <TIM_SlaveTimer_SetConfig+0xe0>
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 800ae46:	d101      	bne.n	800ae4c <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 800ae48:	2301      	movs	r3, #1
 800ae4a:	e038      	b.n	800aebe <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	6a1b      	ldr	r3, [r3, #32]
 800ae52:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	6a1a      	ldr	r2, [r3, #32]
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f022 0201 	bic.w	r2, r2, #1
 800ae62:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	699b      	ldr	r3, [r3, #24]
 800ae6a:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ae72:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	691b      	ldr	r3, [r3, #16]
 800ae78:	011b      	lsls	r3, r3, #4
 800ae7a:	68fa      	ldr	r2, [r7, #12]
 800ae7c:	4313      	orrs	r3, r2
 800ae7e:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	68fa      	ldr	r2, [r7, #12]
 800ae86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	693a      	ldr	r2, [r7, #16]
 800ae8e:	621a      	str	r2, [r3, #32]
      break;
 800ae90:	e014      	b.n	800aebc <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6818      	ldr	r0, [r3, #0]
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	6899      	ldr	r1, [r3, #8]
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	691b      	ldr	r3, [r3, #16]
 800ae9e:	461a      	mov	r2, r3
 800aea0:	f000 f81e 	bl	800aee0 <TIM_TI1_ConfigInputStage>
      break;
 800aea4:	e00a      	b.n	800aebc <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6818      	ldr	r0, [r3, #0]
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	6899      	ldr	r1, [r3, #8]
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	691b      	ldr	r3, [r3, #16]
 800aeb2:	461a      	mov	r2, r3
 800aeb4:	f000 f843 	bl	800af3e <TIM_TI2_ConfigInputStage>
      break;
 800aeb8:	e000      	b.n	800aebc <TIM_SlaveTimer_SetConfig+0x154>
      break;
 800aeba:	bf00      	nop
  }
  return HAL_OK;
 800aebc:	2300      	movs	r3, #0
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3718      	adds	r7, #24
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}
 800aec6:	bf00      	nop
 800aec8:	00100030 	.word	0x00100030
 800aecc:	00100020 	.word	0x00100020
 800aed0:	00100050 	.word	0x00100050
 800aed4:	00100040 	.word	0x00100040
 800aed8:	00100060 	.word	0x00100060
 800aedc:	00100070 	.word	0x00100070

0800aee0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b087      	sub	sp, #28
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	60f8      	str	r0, [r7, #12]
 800aee8:	60b9      	str	r1, [r7, #8]
 800aeea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	6a1b      	ldr	r3, [r3, #32]
 800aef0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	6a1b      	ldr	r3, [r3, #32]
 800aef6:	f023 0201 	bic.w	r2, r3, #1
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	699b      	ldr	r3, [r3, #24]
 800af02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800af0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	011b      	lsls	r3, r3, #4
 800af10:	693a      	ldr	r2, [r7, #16]
 800af12:	4313      	orrs	r3, r2
 800af14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	f023 030a 	bic.w	r3, r3, #10
 800af1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800af1e:	697a      	ldr	r2, [r7, #20]
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	4313      	orrs	r3, r2
 800af24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	693a      	ldr	r2, [r7, #16]
 800af2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	697a      	ldr	r2, [r7, #20]
 800af30:	621a      	str	r2, [r3, #32]
}
 800af32:	bf00      	nop
 800af34:	371c      	adds	r7, #28
 800af36:	46bd      	mov	sp, r7
 800af38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3c:	4770      	bx	lr

0800af3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af3e:	b480      	push	{r7}
 800af40:	b087      	sub	sp, #28
 800af42:	af00      	add	r7, sp, #0
 800af44:	60f8      	str	r0, [r7, #12]
 800af46:	60b9      	str	r1, [r7, #8]
 800af48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	6a1b      	ldr	r3, [r3, #32]
 800af4e:	f023 0210 	bic.w	r2, r3, #16
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	699b      	ldr	r3, [r3, #24]
 800af5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	6a1b      	ldr	r3, [r3, #32]
 800af60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800af68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	031b      	lsls	r3, r3, #12
 800af6e:	697a      	ldr	r2, [r7, #20]
 800af70:	4313      	orrs	r3, r2
 800af72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800af74:	693b      	ldr	r3, [r7, #16]
 800af76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800af7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	011b      	lsls	r3, r3, #4
 800af80:	693a      	ldr	r2, [r7, #16]
 800af82:	4313      	orrs	r3, r2
 800af84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	697a      	ldr	r2, [r7, #20]
 800af8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	693a      	ldr	r2, [r7, #16]
 800af90:	621a      	str	r2, [r3, #32]
}
 800af92:	bf00      	nop
 800af94:	371c      	adds	r7, #28
 800af96:	46bd      	mov	sp, r7
 800af98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9c:	4770      	bx	lr

0800af9e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800af9e:	b480      	push	{r7}
 800afa0:	b085      	sub	sp, #20
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	6078      	str	r0, [r7, #4]
 800afa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	689b      	ldr	r3, [r3, #8]
 800afac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800afb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800afba:	683a      	ldr	r2, [r7, #0]
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	4313      	orrs	r3, r2
 800afc0:	f043 0307 	orr.w	r3, r3, #7
 800afc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	68fa      	ldr	r2, [r7, #12]
 800afca:	609a      	str	r2, [r3, #8]
}
 800afcc:	bf00      	nop
 800afce:	3714      	adds	r7, #20
 800afd0:	46bd      	mov	sp, r7
 800afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd6:	4770      	bx	lr

0800afd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800afd8:	b480      	push	{r7}
 800afda:	b087      	sub	sp, #28
 800afdc:	af00      	add	r7, sp, #0
 800afde:	60f8      	str	r0, [r7, #12]
 800afe0:	60b9      	str	r1, [r7, #8]
 800afe2:	607a      	str	r2, [r7, #4]
 800afe4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	689b      	ldr	r3, [r3, #8]
 800afea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aff2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	021a      	lsls	r2, r3, #8
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	431a      	orrs	r2, r3
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	4313      	orrs	r3, r2
 800b000:	697a      	ldr	r2, [r7, #20]
 800b002:	4313      	orrs	r3, r2
 800b004:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	697a      	ldr	r2, [r7, #20]
 800b00a:	609a      	str	r2, [r3, #8]
}
 800b00c:	bf00      	nop
 800b00e:	371c      	adds	r7, #28
 800b010:	46bd      	mov	sp, r7
 800b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b016:	4770      	bx	lr

0800b018 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b018:	b480      	push	{r7}
 800b01a:	b085      	sub	sp, #20
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
 800b020:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b028:	2b01      	cmp	r3, #1
 800b02a:	d101      	bne.n	800b030 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b02c:	2302      	movs	r3, #2
 800b02e:	e074      	b.n	800b11a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2201      	movs	r2, #1
 800b034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2202      	movs	r2, #2
 800b03c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	685b      	ldr	r3, [r3, #4]
 800b046:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	689b      	ldr	r3, [r3, #8]
 800b04e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	4a34      	ldr	r2, [pc, #208]	; (800b128 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b056:	4293      	cmp	r3, r2
 800b058:	d009      	beq.n	800b06e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	4a33      	ldr	r2, [pc, #204]	; (800b12c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b060:	4293      	cmp	r3, r2
 800b062:	d004      	beq.n	800b06e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	4a31      	ldr	r2, [pc, #196]	; (800b130 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b06a:	4293      	cmp	r3, r2
 800b06c:	d108      	bne.n	800b080 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b074:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	685b      	ldr	r3, [r3, #4]
 800b07a:	68fa      	ldr	r2, [r7, #12]
 800b07c:	4313      	orrs	r3, r2
 800b07e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800b086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b08a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	68fa      	ldr	r2, [r7, #12]
 800b092:	4313      	orrs	r3, r2
 800b094:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	68fa      	ldr	r2, [r7, #12]
 800b09c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	4a21      	ldr	r2, [pc, #132]	; (800b128 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b0a4:	4293      	cmp	r3, r2
 800b0a6:	d022      	beq.n	800b0ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0b0:	d01d      	beq.n	800b0ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	4a1f      	ldr	r2, [pc, #124]	; (800b134 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	d018      	beq.n	800b0ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	4a1d      	ldr	r2, [pc, #116]	; (800b138 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d013      	beq.n	800b0ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	4a1c      	ldr	r2, [pc, #112]	; (800b13c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d00e      	beq.n	800b0ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	4a15      	ldr	r2, [pc, #84]	; (800b12c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	d009      	beq.n	800b0ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	4a18      	ldr	r2, [pc, #96]	; (800b140 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d004      	beq.n	800b0ee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	4a11      	ldr	r2, [pc, #68]	; (800b130 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	d10c      	bne.n	800b108 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b0f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	689b      	ldr	r3, [r3, #8]
 800b0fa:	68ba      	ldr	r2, [r7, #8]
 800b0fc:	4313      	orrs	r3, r2
 800b0fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	68ba      	ldr	r2, [r7, #8]
 800b106:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2201      	movs	r2, #1
 800b10c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2200      	movs	r2, #0
 800b114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b118:	2300      	movs	r3, #0
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3714      	adds	r7, #20
 800b11e:	46bd      	mov	sp, r7
 800b120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b124:	4770      	bx	lr
 800b126:	bf00      	nop
 800b128:	40012c00 	.word	0x40012c00
 800b12c:	40013400 	.word	0x40013400
 800b130:	40015000 	.word	0x40015000
 800b134:	40000400 	.word	0x40000400
 800b138:	40000800 	.word	0x40000800
 800b13c:	40000c00 	.word	0x40000c00
 800b140:	40014000 	.word	0x40014000

0800b144 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b144:	b480      	push	{r7}
 800b146:	b085      	sub	sp, #20
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
 800b14c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b14e:	2300      	movs	r3, #0
 800b150:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b158:	2b01      	cmp	r3, #1
 800b15a:	d101      	bne.n	800b160 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b15c:	2302      	movs	r3, #2
 800b15e:	e096      	b.n	800b28e <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2201      	movs	r2, #1
 800b164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	68db      	ldr	r3, [r3, #12]
 800b172:	4313      	orrs	r3, r2
 800b174:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	689b      	ldr	r3, [r3, #8]
 800b180:	4313      	orrs	r3, r2
 800b182:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	685b      	ldr	r3, [r3, #4]
 800b18e:	4313      	orrs	r3, r2
 800b190:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	4313      	orrs	r3, r2
 800b19e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	691b      	ldr	r3, [r3, #16]
 800b1aa:	4313      	orrs	r3, r2
 800b1ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	695b      	ldr	r3, [r3, #20]
 800b1b8:	4313      	orrs	r3, r2
 800b1ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1c6:	4313      	orrs	r3, r2
 800b1c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	699b      	ldr	r3, [r3, #24]
 800b1d4:	041b      	lsls	r3, r3, #16
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	4a2f      	ldr	r2, [pc, #188]	; (800b29c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800b1e0:	4293      	cmp	r3, r2
 800b1e2:	d009      	beq.n	800b1f8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	4a2d      	ldr	r2, [pc, #180]	; (800b2a0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	d004      	beq.n	800b1f8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	4a2c      	ldr	r2, [pc, #176]	; (800b2a4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	d106      	bne.n	800b206 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	69db      	ldr	r3, [r3, #28]
 800b202:	4313      	orrs	r3, r2
 800b204:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4a24      	ldr	r2, [pc, #144]	; (800b29c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d009      	beq.n	800b224 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	4a22      	ldr	r2, [pc, #136]	; (800b2a0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d004      	beq.n	800b224 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	4a21      	ldr	r2, [pc, #132]	; (800b2a4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800b220:	4293      	cmp	r3, r2
 800b222:	d12b      	bne.n	800b27c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b22e:	051b      	lsls	r3, r3, #20
 800b230:	4313      	orrs	r3, r2
 800b232:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	6a1b      	ldr	r3, [r3, #32]
 800b23e:	4313      	orrs	r3, r2
 800b240:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b24c:	4313      	orrs	r3, r2
 800b24e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	4a11      	ldr	r2, [pc, #68]	; (800b29c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800b256:	4293      	cmp	r3, r2
 800b258:	d009      	beq.n	800b26e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	4a10      	ldr	r2, [pc, #64]	; (800b2a0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800b260:	4293      	cmp	r3, r2
 800b262:	d004      	beq.n	800b26e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	4a0e      	ldr	r2, [pc, #56]	; (800b2a4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d106      	bne.n	800b27c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b278:	4313      	orrs	r3, r2
 800b27a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	68fa      	ldr	r2, [r7, #12]
 800b282:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2200      	movs	r2, #0
 800b288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b28c:	2300      	movs	r3, #0
}
 800b28e:	4618      	mov	r0, r3
 800b290:	3714      	adds	r7, #20
 800b292:	46bd      	mov	sp, r7
 800b294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b298:	4770      	bx	lr
 800b29a:	bf00      	nop
 800b29c:	40012c00 	.word	0x40012c00
 800b2a0:	40013400 	.word	0x40013400
 800b2a4:	40015000 	.word	0x40015000

0800b2a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b083      	sub	sp, #12
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b2b0:	bf00      	nop
 800b2b2:	370c      	adds	r7, #12
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ba:	4770      	bx	lr

0800b2bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b083      	sub	sp, #12
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b2c4:	bf00      	nop
 800b2c6:	370c      	adds	r7, #12
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ce:	4770      	bx	lr

0800b2d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b2d0:	b480      	push	{r7}
 800b2d2:	b083      	sub	sp, #12
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b2d8:	bf00      	nop
 800b2da:	370c      	adds	r7, #12
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e2:	4770      	bx	lr

0800b2e4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b083      	sub	sp, #12
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b2ec:	bf00      	nop
 800b2ee:	370c      	adds	r7, #12
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f6:	4770      	bx	lr

0800b2f8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b083      	sub	sp, #12
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b300:	bf00      	nop
 800b302:	370c      	adds	r7, #12
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr

0800b30c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b30c:	b480      	push	{r7}
 800b30e:	b083      	sub	sp, #12
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b314:	bf00      	nop
 800b316:	370c      	adds	r7, #12
 800b318:	46bd      	mov	sp, r7
 800b31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31e:	4770      	bx	lr

0800b320 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b320:	b480      	push	{r7}
 800b322:	b083      	sub	sp, #12
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b328:	bf00      	nop
 800b32a:	370c      	adds	r7, #12
 800b32c:	46bd      	mov	sp, r7
 800b32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b332:	4770      	bx	lr

0800b334 <LL_EXTI_EnableIT_0_31>:
{
 800b334:	b480      	push	{r7}
 800b336:	b083      	sub	sp, #12
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800b33c:	4b05      	ldr	r3, [pc, #20]	; (800b354 <LL_EXTI_EnableIT_0_31+0x20>)
 800b33e:	681a      	ldr	r2, [r3, #0]
 800b340:	4904      	ldr	r1, [pc, #16]	; (800b354 <LL_EXTI_EnableIT_0_31+0x20>)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	4313      	orrs	r3, r2
 800b346:	600b      	str	r3, [r1, #0]
}
 800b348:	bf00      	nop
 800b34a:	370c      	adds	r7, #12
 800b34c:	46bd      	mov	sp, r7
 800b34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b352:	4770      	bx	lr
 800b354:	40010400 	.word	0x40010400

0800b358 <LL_EXTI_EnableIT_32_63>:
{
 800b358:	b480      	push	{r7}
 800b35a:	b083      	sub	sp, #12
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800b360:	4b05      	ldr	r3, [pc, #20]	; (800b378 <LL_EXTI_EnableIT_32_63+0x20>)
 800b362:	6a1a      	ldr	r2, [r3, #32]
 800b364:	4904      	ldr	r1, [pc, #16]	; (800b378 <LL_EXTI_EnableIT_32_63+0x20>)
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	4313      	orrs	r3, r2
 800b36a:	620b      	str	r3, [r1, #32]
}
 800b36c:	bf00      	nop
 800b36e:	370c      	adds	r7, #12
 800b370:	46bd      	mov	sp, r7
 800b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b376:	4770      	bx	lr
 800b378:	40010400 	.word	0x40010400

0800b37c <LL_EXTI_DisableIT_0_31>:
{
 800b37c:	b480      	push	{r7}
 800b37e:	b083      	sub	sp, #12
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800b384:	4b06      	ldr	r3, [pc, #24]	; (800b3a0 <LL_EXTI_DisableIT_0_31+0x24>)
 800b386:	681a      	ldr	r2, [r3, #0]
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	43db      	mvns	r3, r3
 800b38c:	4904      	ldr	r1, [pc, #16]	; (800b3a0 <LL_EXTI_DisableIT_0_31+0x24>)
 800b38e:	4013      	ands	r3, r2
 800b390:	600b      	str	r3, [r1, #0]
}
 800b392:	bf00      	nop
 800b394:	370c      	adds	r7, #12
 800b396:	46bd      	mov	sp, r7
 800b398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39c:	4770      	bx	lr
 800b39e:	bf00      	nop
 800b3a0:	40010400 	.word	0x40010400

0800b3a4 <LL_EXTI_DisableIT_32_63>:
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b083      	sub	sp, #12
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800b3ac:	4b06      	ldr	r3, [pc, #24]	; (800b3c8 <LL_EXTI_DisableIT_32_63+0x24>)
 800b3ae:	6a1a      	ldr	r2, [r3, #32]
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	43db      	mvns	r3, r3
 800b3b4:	4904      	ldr	r1, [pc, #16]	; (800b3c8 <LL_EXTI_DisableIT_32_63+0x24>)
 800b3b6:	4013      	ands	r3, r2
 800b3b8:	620b      	str	r3, [r1, #32]
}
 800b3ba:	bf00      	nop
 800b3bc:	370c      	adds	r7, #12
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c4:	4770      	bx	lr
 800b3c6:	bf00      	nop
 800b3c8:	40010400 	.word	0x40010400

0800b3cc <LL_EXTI_EnableEvent_0_31>:
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b083      	sub	sp, #12
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800b3d4:	4b05      	ldr	r3, [pc, #20]	; (800b3ec <LL_EXTI_EnableEvent_0_31+0x20>)
 800b3d6:	685a      	ldr	r2, [r3, #4]
 800b3d8:	4904      	ldr	r1, [pc, #16]	; (800b3ec <LL_EXTI_EnableEvent_0_31+0x20>)
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	4313      	orrs	r3, r2
 800b3de:	604b      	str	r3, [r1, #4]
}
 800b3e0:	bf00      	nop
 800b3e2:	370c      	adds	r7, #12
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr
 800b3ec:	40010400 	.word	0x40010400

0800b3f0 <LL_EXTI_EnableEvent_32_63>:
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b083      	sub	sp, #12
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800b3f8:	4b05      	ldr	r3, [pc, #20]	; (800b410 <LL_EXTI_EnableEvent_32_63+0x20>)
 800b3fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b3fc:	4904      	ldr	r1, [pc, #16]	; (800b410 <LL_EXTI_EnableEvent_32_63+0x20>)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	4313      	orrs	r3, r2
 800b402:	624b      	str	r3, [r1, #36]	; 0x24
}
 800b404:	bf00      	nop
 800b406:	370c      	adds	r7, #12
 800b408:	46bd      	mov	sp, r7
 800b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40e:	4770      	bx	lr
 800b410:	40010400 	.word	0x40010400

0800b414 <LL_EXTI_DisableEvent_0_31>:
{
 800b414:	b480      	push	{r7}
 800b416:	b083      	sub	sp, #12
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800b41c:	4b06      	ldr	r3, [pc, #24]	; (800b438 <LL_EXTI_DisableEvent_0_31+0x24>)
 800b41e:	685a      	ldr	r2, [r3, #4]
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	43db      	mvns	r3, r3
 800b424:	4904      	ldr	r1, [pc, #16]	; (800b438 <LL_EXTI_DisableEvent_0_31+0x24>)
 800b426:	4013      	ands	r3, r2
 800b428:	604b      	str	r3, [r1, #4]
}
 800b42a:	bf00      	nop
 800b42c:	370c      	adds	r7, #12
 800b42e:	46bd      	mov	sp, r7
 800b430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b434:	4770      	bx	lr
 800b436:	bf00      	nop
 800b438:	40010400 	.word	0x40010400

0800b43c <LL_EXTI_DisableEvent_32_63>:
{
 800b43c:	b480      	push	{r7}
 800b43e:	b083      	sub	sp, #12
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800b444:	4b06      	ldr	r3, [pc, #24]	; (800b460 <LL_EXTI_DisableEvent_32_63+0x24>)
 800b446:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	43db      	mvns	r3, r3
 800b44c:	4904      	ldr	r1, [pc, #16]	; (800b460 <LL_EXTI_DisableEvent_32_63+0x24>)
 800b44e:	4013      	ands	r3, r2
 800b450:	624b      	str	r3, [r1, #36]	; 0x24
}
 800b452:	bf00      	nop
 800b454:	370c      	adds	r7, #12
 800b456:	46bd      	mov	sp, r7
 800b458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45c:	4770      	bx	lr
 800b45e:	bf00      	nop
 800b460:	40010400 	.word	0x40010400

0800b464 <LL_EXTI_EnableRisingTrig_0_31>:
{
 800b464:	b480      	push	{r7}
 800b466:	b083      	sub	sp, #12
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800b46c:	4b05      	ldr	r3, [pc, #20]	; (800b484 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800b46e:	689a      	ldr	r2, [r3, #8]
 800b470:	4904      	ldr	r1, [pc, #16]	; (800b484 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	4313      	orrs	r3, r2
 800b476:	608b      	str	r3, [r1, #8]
}
 800b478:	bf00      	nop
 800b47a:	370c      	adds	r7, #12
 800b47c:	46bd      	mov	sp, r7
 800b47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b482:	4770      	bx	lr
 800b484:	40010400 	.word	0x40010400

0800b488 <LL_EXTI_EnableRisingTrig_32_63>:
{
 800b488:	b480      	push	{r7}
 800b48a:	b083      	sub	sp, #12
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800b490:	4b05      	ldr	r3, [pc, #20]	; (800b4a8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800b492:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b494:	4904      	ldr	r1, [pc, #16]	; (800b4a8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	4313      	orrs	r3, r2
 800b49a:	628b      	str	r3, [r1, #40]	; 0x28
}
 800b49c:	bf00      	nop
 800b49e:	370c      	adds	r7, #12
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a6:	4770      	bx	lr
 800b4a8:	40010400 	.word	0x40010400

0800b4ac <LL_EXTI_DisableRisingTrig_0_31>:
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b083      	sub	sp, #12
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800b4b4:	4b06      	ldr	r3, [pc, #24]	; (800b4d0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800b4b6:	689a      	ldr	r2, [r3, #8]
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	43db      	mvns	r3, r3
 800b4bc:	4904      	ldr	r1, [pc, #16]	; (800b4d0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800b4be:	4013      	ands	r3, r2
 800b4c0:	608b      	str	r3, [r1, #8]
}
 800b4c2:	bf00      	nop
 800b4c4:	370c      	adds	r7, #12
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4cc:	4770      	bx	lr
 800b4ce:	bf00      	nop
 800b4d0:	40010400 	.word	0x40010400

0800b4d4 <LL_EXTI_DisableRisingTrig_32_63>:
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b083      	sub	sp, #12
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800b4dc:	4b06      	ldr	r3, [pc, #24]	; (800b4f8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800b4de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	43db      	mvns	r3, r3
 800b4e4:	4904      	ldr	r1, [pc, #16]	; (800b4f8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800b4e6:	4013      	ands	r3, r2
 800b4e8:	628b      	str	r3, [r1, #40]	; 0x28
}
 800b4ea:	bf00      	nop
 800b4ec:	370c      	adds	r7, #12
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f4:	4770      	bx	lr
 800b4f6:	bf00      	nop
 800b4f8:	40010400 	.word	0x40010400

0800b4fc <LL_EXTI_EnableFallingTrig_0_31>:
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	b083      	sub	sp, #12
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800b504:	4b05      	ldr	r3, [pc, #20]	; (800b51c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800b506:	68da      	ldr	r2, [r3, #12]
 800b508:	4904      	ldr	r1, [pc, #16]	; (800b51c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	4313      	orrs	r3, r2
 800b50e:	60cb      	str	r3, [r1, #12]
}
 800b510:	bf00      	nop
 800b512:	370c      	adds	r7, #12
 800b514:	46bd      	mov	sp, r7
 800b516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51a:	4770      	bx	lr
 800b51c:	40010400 	.word	0x40010400

0800b520 <LL_EXTI_EnableFallingTrig_32_63>:
{
 800b520:	b480      	push	{r7}
 800b522:	b083      	sub	sp, #12
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800b528:	4b05      	ldr	r3, [pc, #20]	; (800b540 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800b52a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b52c:	4904      	ldr	r1, [pc, #16]	; (800b540 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	4313      	orrs	r3, r2
 800b532:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800b534:	bf00      	nop
 800b536:	370c      	adds	r7, #12
 800b538:	46bd      	mov	sp, r7
 800b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53e:	4770      	bx	lr
 800b540:	40010400 	.word	0x40010400

0800b544 <LL_EXTI_DisableFallingTrig_0_31>:
{
 800b544:	b480      	push	{r7}
 800b546:	b083      	sub	sp, #12
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800b54c:	4b06      	ldr	r3, [pc, #24]	; (800b568 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800b54e:	68da      	ldr	r2, [r3, #12]
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	43db      	mvns	r3, r3
 800b554:	4904      	ldr	r1, [pc, #16]	; (800b568 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800b556:	4013      	ands	r3, r2
 800b558:	60cb      	str	r3, [r1, #12]
}
 800b55a:	bf00      	nop
 800b55c:	370c      	adds	r7, #12
 800b55e:	46bd      	mov	sp, r7
 800b560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b564:	4770      	bx	lr
 800b566:	bf00      	nop
 800b568:	40010400 	.word	0x40010400

0800b56c <LL_EXTI_DisableFallingTrig_32_63>:
{
 800b56c:	b480      	push	{r7}
 800b56e:	b083      	sub	sp, #12
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800b574:	4b06      	ldr	r3, [pc, #24]	; (800b590 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800b576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	43db      	mvns	r3, r3
 800b57c:	4904      	ldr	r1, [pc, #16]	; (800b590 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800b57e:	4013      	ands	r3, r2
 800b580:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800b582:	bf00      	nop
 800b584:	370c      	adds	r7, #12
 800b586:	46bd      	mov	sp, r7
 800b588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58c:	4770      	bx	lr
 800b58e:	bf00      	nop
 800b590:	40010400 	.word	0x40010400

0800b594 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b084      	sub	sp, #16
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 800b59c:	2300      	movs	r3, #0
 800b59e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	7a1b      	ldrb	r3, [r3, #8]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	f000 80c8 	beq.w	800b73a <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d05d      	beq.n	800b66e <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	7a5b      	ldrb	r3, [r3, #9]
 800b5b6:	2b01      	cmp	r3, #1
 800b5b8:	d00e      	beq.n	800b5d8 <LL_EXTI_Init+0x44>
 800b5ba:	2b02      	cmp	r3, #2
 800b5bc:	d017      	beq.n	800b5ee <LL_EXTI_Init+0x5a>
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d120      	bne.n	800b604 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f7ff ff24 	bl	800b414 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f7ff feaf 	bl	800b334 <LL_EXTI_EnableIT_0_31>
          break;
 800b5d6:	e018      	b.n	800b60a <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f7ff fecd 	bl	800b37c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f7ff fef0 	bl	800b3cc <LL_EXTI_EnableEvent_0_31>
          break;
 800b5ec:	e00d      	b.n	800b60a <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f7ff fe9e 	bl	800b334 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f7ff fee5 	bl	800b3cc <LL_EXTI_EnableEvent_0_31>
          break;
 800b602:	e002      	b.n	800b60a <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 800b604:	2301      	movs	r3, #1
 800b606:	60fb      	str	r3, [r7, #12]
          break;
 800b608:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	7a9b      	ldrb	r3, [r3, #10]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d02d      	beq.n	800b66e <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	7a9b      	ldrb	r3, [r3, #10]
 800b616:	2b02      	cmp	r3, #2
 800b618:	d00e      	beq.n	800b638 <LL_EXTI_Init+0xa4>
 800b61a:	2b03      	cmp	r3, #3
 800b61c:	d017      	beq.n	800b64e <LL_EXTI_Init+0xba>
 800b61e:	2b01      	cmp	r3, #1
 800b620:	d120      	bne.n	800b664 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	4618      	mov	r0, r3
 800b628:	f7ff ff8c 	bl	800b544 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	4618      	mov	r0, r3
 800b632:	f7ff ff17 	bl	800b464 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800b636:	e01b      	b.n	800b670 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	4618      	mov	r0, r3
 800b63e:	f7ff ff35 	bl	800b4ac <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	4618      	mov	r0, r3
 800b648:	f7ff ff58 	bl	800b4fc <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800b64c:	e010      	b.n	800b670 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	4618      	mov	r0, r3
 800b654:	f7ff ff06 	bl	800b464 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	4618      	mov	r0, r3
 800b65e:	f7ff ff4d 	bl	800b4fc <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800b662:	e005      	b.n	800b670 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	f043 0302 	orr.w	r3, r3, #2
 800b66a:	60fb      	str	r3, [r7, #12]
            break;
 800b66c:	e000      	b.n	800b670 <LL_EXTI_Init+0xdc>
        }
      }
 800b66e:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	685b      	ldr	r3, [r3, #4]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d075      	beq.n	800b764 <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	7a5b      	ldrb	r3, [r3, #9]
 800b67c:	2b01      	cmp	r3, #1
 800b67e:	d00e      	beq.n	800b69e <LL_EXTI_Init+0x10a>
 800b680:	2b02      	cmp	r3, #2
 800b682:	d017      	beq.n	800b6b4 <LL_EXTI_Init+0x120>
 800b684:	2b00      	cmp	r3, #0
 800b686:	d120      	bne.n	800b6ca <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	685b      	ldr	r3, [r3, #4]
 800b68c:	4618      	mov	r0, r3
 800b68e:	f7ff fed5 	bl	800b43c <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	685b      	ldr	r3, [r3, #4]
 800b696:	4618      	mov	r0, r3
 800b698:	f7ff fe5e 	bl	800b358 <LL_EXTI_EnableIT_32_63>
          break;
 800b69c:	e01a      	b.n	800b6d4 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f7ff fe7e 	bl	800b3a4 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	685b      	ldr	r3, [r3, #4]
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f7ff fe9f 	bl	800b3f0 <LL_EXTI_EnableEvent_32_63>
          break;
 800b6b2:	e00f      	b.n	800b6d4 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	685b      	ldr	r3, [r3, #4]
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f7ff fe4d 	bl	800b358 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	685b      	ldr	r3, [r3, #4]
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	f7ff fe94 	bl	800b3f0 <LL_EXTI_EnableEvent_32_63>
          break;
 800b6c8:	e004      	b.n	800b6d4 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	f043 0304 	orr.w	r3, r3, #4
 800b6d0:	60fb      	str	r3, [r7, #12]
          break;
 800b6d2:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	7a9b      	ldrb	r3, [r3, #10]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d043      	beq.n	800b764 <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	7a9b      	ldrb	r3, [r3, #10]
 800b6e0:	2b02      	cmp	r3, #2
 800b6e2:	d00e      	beq.n	800b702 <LL_EXTI_Init+0x16e>
 800b6e4:	2b03      	cmp	r3, #3
 800b6e6:	d017      	beq.n	800b718 <LL_EXTI_Init+0x184>
 800b6e8:	2b01      	cmp	r3, #1
 800b6ea:	d120      	bne.n	800b72e <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	685b      	ldr	r3, [r3, #4]
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f7ff ff3b 	bl	800b56c <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	685b      	ldr	r3, [r3, #4]
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f7ff fec4 	bl	800b488 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800b700:	e031      	b.n	800b766 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	685b      	ldr	r3, [r3, #4]
 800b706:	4618      	mov	r0, r3
 800b708:	f7ff fee4 	bl	800b4d4 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	685b      	ldr	r3, [r3, #4]
 800b710:	4618      	mov	r0, r3
 800b712:	f7ff ff05 	bl	800b520 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800b716:	e026      	b.n	800b766 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	685b      	ldr	r3, [r3, #4]
 800b71c:	4618      	mov	r0, r3
 800b71e:	f7ff feb3 	bl	800b488 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	685b      	ldr	r3, [r3, #4]
 800b726:	4618      	mov	r0, r3
 800b728:	f7ff fefa 	bl	800b520 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800b72c:	e01b      	b.n	800b766 <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	f043 0305 	orr.w	r3, r3, #5
 800b734:	60fb      	str	r3, [r7, #12]
            break;
 800b736:	bf00      	nop
 800b738:	e015      	b.n	800b766 <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	4618      	mov	r0, r3
 800b740:	f7ff fe1c 	bl	800b37c <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	4618      	mov	r0, r3
 800b74a:	f7ff fe63 	bl	800b414 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	685b      	ldr	r3, [r3, #4]
 800b752:	4618      	mov	r0, r3
 800b754:	f7ff fe26 	bl	800b3a4 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	685b      	ldr	r3, [r3, #4]
 800b75c:	4618      	mov	r0, r3
 800b75e:	f7ff fe6d 	bl	800b43c <LL_EXTI_DisableEvent_32_63>
 800b762:	e000      	b.n	800b766 <LL_EXTI_Init+0x1d2>
      }
 800b764:	bf00      	nop
  }

  return status;
 800b766:	68fb      	ldr	r3, [r7, #12]
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3710      	adds	r7, #16
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}

0800b770 <LL_GPIO_SetPinMode>:
{
 800b770:	b480      	push	{r7}
 800b772:	b089      	sub	sp, #36	; 0x24
 800b774:	af00      	add	r7, sp, #0
 800b776:	60f8      	str	r0, [r7, #12]
 800b778:	60b9      	str	r1, [r7, #8]
 800b77a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	681a      	ldr	r2, [r3, #0]
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b784:	697b      	ldr	r3, [r7, #20]
 800b786:	fa93 f3a3 	rbit	r3, r3
 800b78a:	613b      	str	r3, [r7, #16]
  return result;
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	fab3 f383 	clz	r3, r3
 800b792:	b2db      	uxtb	r3, r3
 800b794:	005b      	lsls	r3, r3, #1
 800b796:	2103      	movs	r1, #3
 800b798:	fa01 f303 	lsl.w	r3, r1, r3
 800b79c:	43db      	mvns	r3, r3
 800b79e:	401a      	ands	r2, r3
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b7a4:	69fb      	ldr	r3, [r7, #28]
 800b7a6:	fa93 f3a3 	rbit	r3, r3
 800b7aa:	61bb      	str	r3, [r7, #24]
  return result;
 800b7ac:	69bb      	ldr	r3, [r7, #24]
 800b7ae:	fab3 f383 	clz	r3, r3
 800b7b2:	b2db      	uxtb	r3, r3
 800b7b4:	005b      	lsls	r3, r3, #1
 800b7b6:	6879      	ldr	r1, [r7, #4]
 800b7b8:	fa01 f303 	lsl.w	r3, r1, r3
 800b7bc:	431a      	orrs	r2, r3
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	601a      	str	r2, [r3, #0]
}
 800b7c2:	bf00      	nop
 800b7c4:	3724      	adds	r7, #36	; 0x24
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7cc:	4770      	bx	lr

0800b7ce <LL_GPIO_SetPinOutputType>:
{
 800b7ce:	b480      	push	{r7}
 800b7d0:	b085      	sub	sp, #20
 800b7d2:	af00      	add	r7, sp, #0
 800b7d4:	60f8      	str	r0, [r7, #12]
 800b7d6:	60b9      	str	r1, [r7, #8]
 800b7d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	685a      	ldr	r2, [r3, #4]
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	43db      	mvns	r3, r3
 800b7e2:	401a      	ands	r2, r3
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	6879      	ldr	r1, [r7, #4]
 800b7e8:	fb01 f303 	mul.w	r3, r1, r3
 800b7ec:	431a      	orrs	r2, r3
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	605a      	str	r2, [r3, #4]
}
 800b7f2:	bf00      	nop
 800b7f4:	3714      	adds	r7, #20
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fc:	4770      	bx	lr

0800b7fe <LL_GPIO_SetPinSpeed>:
{
 800b7fe:	b480      	push	{r7}
 800b800:	b089      	sub	sp, #36	; 0x24
 800b802:	af00      	add	r7, sp, #0
 800b804:	60f8      	str	r0, [r7, #12]
 800b806:	60b9      	str	r1, [r7, #8]
 800b808:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	689a      	ldr	r2, [r3, #8]
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	fa93 f3a3 	rbit	r3, r3
 800b818:	613b      	str	r3, [r7, #16]
  return result;
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	fab3 f383 	clz	r3, r3
 800b820:	b2db      	uxtb	r3, r3
 800b822:	005b      	lsls	r3, r3, #1
 800b824:	2103      	movs	r1, #3
 800b826:	fa01 f303 	lsl.w	r3, r1, r3
 800b82a:	43db      	mvns	r3, r3
 800b82c:	401a      	ands	r2, r3
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b832:	69fb      	ldr	r3, [r7, #28]
 800b834:	fa93 f3a3 	rbit	r3, r3
 800b838:	61bb      	str	r3, [r7, #24]
  return result;
 800b83a:	69bb      	ldr	r3, [r7, #24]
 800b83c:	fab3 f383 	clz	r3, r3
 800b840:	b2db      	uxtb	r3, r3
 800b842:	005b      	lsls	r3, r3, #1
 800b844:	6879      	ldr	r1, [r7, #4]
 800b846:	fa01 f303 	lsl.w	r3, r1, r3
 800b84a:	431a      	orrs	r2, r3
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	609a      	str	r2, [r3, #8]
}
 800b850:	bf00      	nop
 800b852:	3724      	adds	r7, #36	; 0x24
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr

0800b85c <LL_GPIO_SetPinPull>:
{
 800b85c:	b480      	push	{r7}
 800b85e:	b089      	sub	sp, #36	; 0x24
 800b860:	af00      	add	r7, sp, #0
 800b862:	60f8      	str	r0, [r7, #12]
 800b864:	60b9      	str	r1, [r7, #8]
 800b866:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	68da      	ldr	r2, [r3, #12]
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	fa93 f3a3 	rbit	r3, r3
 800b876:	613b      	str	r3, [r7, #16]
  return result;
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	fab3 f383 	clz	r3, r3
 800b87e:	b2db      	uxtb	r3, r3
 800b880:	005b      	lsls	r3, r3, #1
 800b882:	2103      	movs	r1, #3
 800b884:	fa01 f303 	lsl.w	r3, r1, r3
 800b888:	43db      	mvns	r3, r3
 800b88a:	401a      	ands	r2, r3
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b890:	69fb      	ldr	r3, [r7, #28]
 800b892:	fa93 f3a3 	rbit	r3, r3
 800b896:	61bb      	str	r3, [r7, #24]
  return result;
 800b898:	69bb      	ldr	r3, [r7, #24]
 800b89a:	fab3 f383 	clz	r3, r3
 800b89e:	b2db      	uxtb	r3, r3
 800b8a0:	005b      	lsls	r3, r3, #1
 800b8a2:	6879      	ldr	r1, [r7, #4]
 800b8a4:	fa01 f303 	lsl.w	r3, r1, r3
 800b8a8:	431a      	orrs	r2, r3
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	60da      	str	r2, [r3, #12]
}
 800b8ae:	bf00      	nop
 800b8b0:	3724      	adds	r7, #36	; 0x24
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b8:	4770      	bx	lr

0800b8ba <LL_GPIO_SetAFPin_0_7>:
{
 800b8ba:	b480      	push	{r7}
 800b8bc:	b089      	sub	sp, #36	; 0x24
 800b8be:	af00      	add	r7, sp, #0
 800b8c0:	60f8      	str	r0, [r7, #12]
 800b8c2:	60b9      	str	r1, [r7, #8]
 800b8c4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	6a1a      	ldr	r2, [r3, #32]
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	fa93 f3a3 	rbit	r3, r3
 800b8d4:	613b      	str	r3, [r7, #16]
  return result;
 800b8d6:	693b      	ldr	r3, [r7, #16]
 800b8d8:	fab3 f383 	clz	r3, r3
 800b8dc:	b2db      	uxtb	r3, r3
 800b8de:	009b      	lsls	r3, r3, #2
 800b8e0:	210f      	movs	r1, #15
 800b8e2:	fa01 f303 	lsl.w	r3, r1, r3
 800b8e6:	43db      	mvns	r3, r3
 800b8e8:	401a      	ands	r2, r3
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b8ee:	69fb      	ldr	r3, [r7, #28]
 800b8f0:	fa93 f3a3 	rbit	r3, r3
 800b8f4:	61bb      	str	r3, [r7, #24]
  return result;
 800b8f6:	69bb      	ldr	r3, [r7, #24]
 800b8f8:	fab3 f383 	clz	r3, r3
 800b8fc:	b2db      	uxtb	r3, r3
 800b8fe:	009b      	lsls	r3, r3, #2
 800b900:	6879      	ldr	r1, [r7, #4]
 800b902:	fa01 f303 	lsl.w	r3, r1, r3
 800b906:	431a      	orrs	r2, r3
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	621a      	str	r2, [r3, #32]
}
 800b90c:	bf00      	nop
 800b90e:	3724      	adds	r7, #36	; 0x24
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr

0800b918 <LL_GPIO_SetAFPin_8_15>:
{
 800b918:	b480      	push	{r7}
 800b91a:	b089      	sub	sp, #36	; 0x24
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	60f8      	str	r0, [r7, #12]
 800b920:	60b9      	str	r1, [r7, #8]
 800b922:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	0a1b      	lsrs	r3, r3, #8
 800b92c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b92e:	697b      	ldr	r3, [r7, #20]
 800b930:	fa93 f3a3 	rbit	r3, r3
 800b934:	613b      	str	r3, [r7, #16]
  return result;
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	fab3 f383 	clz	r3, r3
 800b93c:	b2db      	uxtb	r3, r3
 800b93e:	009b      	lsls	r3, r3, #2
 800b940:	210f      	movs	r1, #15
 800b942:	fa01 f303 	lsl.w	r3, r1, r3
 800b946:	43db      	mvns	r3, r3
 800b948:	401a      	ands	r2, r3
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	0a1b      	lsrs	r3, r3, #8
 800b94e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b950:	69fb      	ldr	r3, [r7, #28]
 800b952:	fa93 f3a3 	rbit	r3, r3
 800b956:	61bb      	str	r3, [r7, #24]
  return result;
 800b958:	69bb      	ldr	r3, [r7, #24]
 800b95a:	fab3 f383 	clz	r3, r3
 800b95e:	b2db      	uxtb	r3, r3
 800b960:	009b      	lsls	r3, r3, #2
 800b962:	6879      	ldr	r1, [r7, #4]
 800b964:	fa01 f303 	lsl.w	r3, r1, r3
 800b968:	431a      	orrs	r2, r3
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800b96e:	bf00      	nop
 800b970:	3724      	adds	r7, #36	; 0x24
 800b972:	46bd      	mov	sp, r7
 800b974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b978:	4770      	bx	lr

0800b97a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800b97a:	b580      	push	{r7, lr}
 800b97c:	b086      	sub	sp, #24
 800b97e:	af00      	add	r7, sp, #0
 800b980:	6078      	str	r0, [r7, #4]
 800b982:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	fa93 f3a3 	rbit	r3, r3
 800b990:	60bb      	str	r3, [r7, #8]
  return result;
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	fab3 f383 	clz	r3, r3
 800b998:	b2db      	uxtb	r3, r3
 800b99a:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800b99c:	e040      	b.n	800ba20 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	681a      	ldr	r2, [r3, #0]
 800b9a2:	2101      	movs	r1, #1
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	fa01 f303 	lsl.w	r3, r1, r3
 800b9aa:	4013      	ands	r3, r2
 800b9ac:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d032      	beq.n	800ba1a <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	685b      	ldr	r3, [r3, #4]
 800b9b8:	461a      	mov	r2, r3
 800b9ba:	6939      	ldr	r1, [r7, #16]
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f7ff fed7 	bl	800b770 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	685b      	ldr	r3, [r3, #4]
 800b9c6:	2b01      	cmp	r3, #1
 800b9c8:	d003      	beq.n	800b9d2 <LL_GPIO_Init+0x58>
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	685b      	ldr	r3, [r3, #4]
 800b9ce:	2b02      	cmp	r3, #2
 800b9d0:	d106      	bne.n	800b9e0 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	689b      	ldr	r3, [r3, #8]
 800b9d6:	461a      	mov	r2, r3
 800b9d8:	6939      	ldr	r1, [r7, #16]
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f7ff ff0f 	bl	800b7fe <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	691b      	ldr	r3, [r3, #16]
 800b9e4:	461a      	mov	r2, r3
 800b9e6:	6939      	ldr	r1, [r7, #16]
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f7ff ff37 	bl	800b85c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	685b      	ldr	r3, [r3, #4]
 800b9f2:	2b02      	cmp	r3, #2
 800b9f4:	d111      	bne.n	800ba1a <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	2bff      	cmp	r3, #255	; 0xff
 800b9fa:	d807      	bhi.n	800ba0c <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	695b      	ldr	r3, [r3, #20]
 800ba00:	461a      	mov	r2, r3
 800ba02:	6939      	ldr	r1, [r7, #16]
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f7ff ff58 	bl	800b8ba <LL_GPIO_SetAFPin_0_7>
 800ba0a:	e006      	b.n	800ba1a <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	695b      	ldr	r3, [r3, #20]
 800ba10:	461a      	mov	r2, r3
 800ba12:	6939      	ldr	r1, [r7, #16]
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f7ff ff7f 	bl	800b918 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800ba1a:	697b      	ldr	r3, [r7, #20]
 800ba1c:	3301      	adds	r3, #1
 800ba1e:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	681a      	ldr	r2, [r3, #0]
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	fa22 f303 	lsr.w	r3, r2, r3
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d1b7      	bne.n	800b99e <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	685b      	ldr	r3, [r3, #4]
 800ba32:	2b01      	cmp	r3, #1
 800ba34:	d003      	beq.n	800ba3e <LL_GPIO_Init+0xc4>
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	685b      	ldr	r3, [r3, #4]
 800ba3a:	2b02      	cmp	r3, #2
 800ba3c:	d107      	bne.n	800ba4e <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	6819      	ldr	r1, [r3, #0]
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	68db      	ldr	r3, [r3, #12]
 800ba46:	461a      	mov	r2, r3
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f7ff fec0 	bl	800b7ce <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800ba4e:	2300      	movs	r3, #0
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3718      	adds	r7, #24
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}

0800ba58 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 */

void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint8_t border_colour)
{
 800ba58:	b590      	push	{r4, r7, lr}
 800ba5a:	b087      	sub	sp, #28
 800ba5c:	af02      	add	r7, sp, #8
 800ba5e:	4604      	mov	r4, r0
 800ba60:	4608      	mov	r0, r1
 800ba62:	4611      	mov	r1, r2
 800ba64:	461a      	mov	r2, r3
 800ba66:	4623      	mov	r3, r4
 800ba68:	80fb      	strh	r3, [r7, #6]
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	80bb      	strh	r3, [r7, #4]
 800ba6e:	460b      	mov	r3, r1
 800ba70:	807b      	strh	r3, [r7, #2]
 800ba72:	4613      	mov	r3, r2
 800ba74:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 800ba76:	2300      	movs	r3, #0
 800ba78:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 800ba7a:	7bfa      	ldrb	r2, [r7, #15]
 800ba7c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ba80:	429a      	cmp	r2, r3
 800ba82:	d93a      	bls.n	800bafa <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa2>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 800ba84:	88ba      	ldrh	r2, [r7, #4]
 800ba86:	7bfb      	ldrb	r3, [r7, #15]
 800ba88:	441a      	add	r2, r3
 800ba8a:	88b9      	ldrh	r1, [r7, #4]
 800ba8c:	883b      	ldrh	r3, [r7, #0]
 800ba8e:	4419      	add	r1, r3
 800ba90:	7bfb      	ldrb	r3, [r7, #15]
 800ba92:	1acb      	subs	r3, r1, r3
 800ba94:	429a      	cmp	r2, r3
 800ba96:	f000 8090 	beq.w	800bbba <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
 800ba9a:	88fa      	ldrh	r2, [r7, #6]
 800ba9c:	7bfb      	ldrb	r3, [r7, #15]
 800ba9e:	441a      	add	r2, r3
 800baa0:	88f9      	ldrh	r1, [r7, #6]
 800baa2:	887b      	ldrh	r3, [r7, #2]
 800baa4:	4419      	add	r1, r3
 800baa6:	7bfb      	ldrb	r3, [r7, #15]
 800baa8:	1acb      	subs	r3, r1, r3
 800baaa:	429a      	cmp	r2, r3
 800baac:	f000 8085 	beq.w	800bbba <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 800bab0:	7bfb      	ldrb	r3, [r7, #15]
 800bab2:	b29a      	uxth	r2, r3
 800bab4:	88fb      	ldrh	r3, [r7, #6]
 800bab6:	4413      	add	r3, r2
 800bab8:	b298      	uxth	r0, r3
 800baba:	7bfb      	ldrb	r3, [r7, #15]
 800babc:	b29a      	uxth	r2, r3
 800babe:	88bb      	ldrh	r3, [r7, #4]
 800bac0:	4413      	add	r3, r2
 800bac2:	b299      	uxth	r1, r3
 800bac4:	7bfb      	ldrb	r3, [r7, #15]
 800bac6:	b29b      	uxth	r3, r3
 800bac8:	005b      	lsls	r3, r3, #1
 800baca:	b29b      	uxth	r3, r3
 800bacc:	887a      	ldrh	r2, [r7, #2]
 800bace:	1ad3      	subs	r3, r2, r3
 800bad0:	b29b      	uxth	r3, r3
 800bad2:	3301      	adds	r3, #1
 800bad4:	b29c      	uxth	r4, r3
 800bad6:	7bfb      	ldrb	r3, [r7, #15]
 800bad8:	b29b      	uxth	r3, r3
 800bada:	005b      	lsls	r3, r3, #1
 800badc:	b29b      	uxth	r3, r3
 800bade:	883a      	ldrh	r2, [r7, #0]
 800bae0:	1ad3      	subs	r3, r2, r3
 800bae2:	b29b      	uxth	r3, r3
 800bae4:	3301      	adds	r3, #1
 800bae6:	b29a      	uxth	r2, r3
 800bae8:	2304      	movs	r3, #4
 800baea:	9301      	str	r3, [sp, #4]
 800baec:	8c3b      	ldrh	r3, [r7, #32]
 800baee:	9300      	str	r3, [sp, #0]
 800baf0:	4613      	mov	r3, r2
 800baf2:	4622      	mov	r2, r4
 800baf4:	f000 fcd6 	bl	800c4a4 <ILI9341_Draw_Rectangle>
				goto finish;
 800baf8:	e060      	b.n	800bbbc <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x164>
			}
		}

		// Horizontal lines
		ILI9341_Draw_Horizontal_Line(	x + b,
 800bafa:	7bfb      	ldrb	r3, [r7, #15]
 800bafc:	b29a      	uxth	r2, r3
 800bafe:	88fb      	ldrh	r3, [r7, #6]
 800bb00:	4413      	add	r3, r2
 800bb02:	b298      	uxth	r0, r3
 800bb04:	7bfb      	ldrb	r3, [r7, #15]
 800bb06:	b29a      	uxth	r2, r3
 800bb08:	88bb      	ldrh	r3, [r7, #4]
 800bb0a:	4413      	add	r3, r2
 800bb0c:	b299      	uxth	r1, r3
 800bb0e:	7bfb      	ldrb	r3, [r7, #15]
 800bb10:	b29b      	uxth	r3, r3
 800bb12:	005b      	lsls	r3, r3, #1
 800bb14:	b29b      	uxth	r3, r3
 800bb16:	887a      	ldrh	r2, [r7, #2]
 800bb18:	1ad3      	subs	r3, r2, r3
 800bb1a:	b29a      	uxth	r2, r3
 800bb1c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bb20:	b29b      	uxth	r3, r3
 800bb22:	f000 fa81 	bl	800c028 <ILI9341_Draw_Horizontal_Line>
										y + b,
										w - (2*b),
										border_colour);

		ILI9341_Draw_Horizontal_Line(	x + b,
 800bb26:	7bfb      	ldrb	r3, [r7, #15]
 800bb28:	b29a      	uxth	r2, r3
 800bb2a:	88fb      	ldrh	r3, [r7, #6]
 800bb2c:	4413      	add	r3, r2
 800bb2e:	b298      	uxth	r0, r3
										(y + h) - b,
 800bb30:	88ba      	ldrh	r2, [r7, #4]
 800bb32:	883b      	ldrh	r3, [r7, #0]
 800bb34:	4413      	add	r3, r2
 800bb36:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800bb38:	7bfb      	ldrb	r3, [r7, #15]
 800bb3a:	b29b      	uxth	r3, r3
 800bb3c:	1ad3      	subs	r3, r2, r3
 800bb3e:	b299      	uxth	r1, r3
 800bb40:	7bfb      	ldrb	r3, [r7, #15]
 800bb42:	b29b      	uxth	r3, r3
 800bb44:	887a      	ldrh	r2, [r7, #2]
 800bb46:	1ad3      	subs	r3, r2, r3
 800bb48:	b29a      	uxth	r2, r3
 800bb4a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bb4e:	b29b      	uxth	r3, r3
 800bb50:	f000 fa6a 	bl	800c028 <ILI9341_Draw_Horizontal_Line>
										w - (b),
										border_colour);


		// Vertical lines
		ILI9341_Draw_Vertical_Line(		x + b,
 800bb54:	7bfb      	ldrb	r3, [r7, #15]
 800bb56:	b29a      	uxth	r2, r3
 800bb58:	88fb      	ldrh	r3, [r7, #6]
 800bb5a:	4413      	add	r3, r2
 800bb5c:	b298      	uxth	r0, r3
 800bb5e:	7bfb      	ldrb	r3, [r7, #15]
 800bb60:	b29a      	uxth	r2, r3
 800bb62:	88bb      	ldrh	r3, [r7, #4]
 800bb64:	4413      	add	r3, r2
 800bb66:	b299      	uxth	r1, r3
 800bb68:	7bfb      	ldrb	r3, [r7, #15]
 800bb6a:	b29b      	uxth	r3, r3
 800bb6c:	005b      	lsls	r3, r3, #1
 800bb6e:	b29b      	uxth	r3, r3
 800bb70:	883a      	ldrh	r2, [r7, #0]
 800bb72:	1ad3      	subs	r3, r2, r3
 800bb74:	b29a      	uxth	r2, r3
 800bb76:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bb7a:	b29b      	uxth	r3, r3
 800bb7c:	f000 fa9c 	bl	800c0b8 <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);

		ILI9341_Draw_Vertical_Line(		(x + w) - b,
 800bb80:	88fa      	ldrh	r2, [r7, #6]
 800bb82:	887b      	ldrh	r3, [r7, #2]
 800bb84:	4413      	add	r3, r2
 800bb86:	b29a      	uxth	r2, r3
 800bb88:	7bfb      	ldrb	r3, [r7, #15]
 800bb8a:	b29b      	uxth	r3, r3
 800bb8c:	1ad3      	subs	r3, r2, r3
 800bb8e:	b298      	uxth	r0, r3
 800bb90:	7bfb      	ldrb	r3, [r7, #15]
 800bb92:	b29a      	uxth	r2, r3
 800bb94:	88bb      	ldrh	r3, [r7, #4]
 800bb96:	4413      	add	r3, r2
 800bb98:	b299      	uxth	r1, r3
 800bb9a:	7bfb      	ldrb	r3, [r7, #15]
 800bb9c:	b29b      	uxth	r3, r3
 800bb9e:	005b      	lsls	r3, r3, #1
 800bba0:	b29b      	uxth	r3, r3
 800bba2:	883a      	ldrh	r2, [r7, #0]
 800bba4:	1ad3      	subs	r3, r2, r3
 800bba6:	b29a      	uxth	r2, r3
 800bba8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bbac:	b29b      	uxth	r3, r3
 800bbae:	f000 fa83 	bl	800c0b8 <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 800bbb2:	7bfb      	ldrb	r3, [r7, #15]
 800bbb4:	3301      	adds	r3, #1
 800bbb6:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 800bbb8:	e75f      	b.n	800ba7a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 800bbba:	bf00      	nop
	// done
	return;
 800bbbc:	bf00      	nop
}
 800bbbe:	3714      	adds	r7, #20
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd90      	pop	{r4, r7, pc}

0800bbc4 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800bbc4:	b590      	push	{r4, r7, lr}
 800bbc6:	b089      	sub	sp, #36	; 0x24
 800bbc8:	af02      	add	r7, sp, #8
 800bbca:	4604      	mov	r4, r0
 800bbcc:	4608      	mov	r0, r1
 800bbce:	4611      	mov	r1, r2
 800bbd0:	461a      	mov	r2, r3
 800bbd2:	4623      	mov	r3, r4
 800bbd4:	71fb      	strb	r3, [r7, #7]
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	80bb      	strh	r3, [r7, #4]
 800bbda:	460b      	mov	r3, r1
 800bbdc:	807b      	strh	r3, [r7, #2]
 800bbde:	4613      	mov	r3, r2
 800bbe0:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 800bbe2:	79fb      	ldrb	r3, [r7, #7]
 800bbe4:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 800bbe6:	7dfb      	ldrb	r3, [r7, #23]
 800bbe8:	2b1f      	cmp	r3, #31
 800bbea:	d802      	bhi.n	800bbf2 <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 800bbec:	2300      	movs	r3, #0
 800bbee:	71fb      	strb	r3, [r7, #7]
 800bbf0:	e002      	b.n	800bbf8 <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 800bbf2:	7dfb      	ldrb	r3, [r7, #23]
 800bbf4:	3b20      	subs	r3, #32
 800bbf6:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	753b      	strb	r3, [r7, #20]
 800bbfc:	e012      	b.n	800bc24 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 800bbfe:	7dfa      	ldrb	r2, [r7, #23]
 800bc00:	7d38      	ldrb	r0, [r7, #20]
 800bc02:	7d39      	ldrb	r1, [r7, #20]
 800bc04:	4c48      	ldr	r4, [pc, #288]	; (800bd28 <ILI9341_Draw_Char+0x164>)
 800bc06:	4613      	mov	r3, r2
 800bc08:	005b      	lsls	r3, r3, #1
 800bc0a:	4413      	add	r3, r2
 800bc0c:	005b      	lsls	r3, r3, #1
 800bc0e:	4423      	add	r3, r4
 800bc10:	4403      	add	r3, r0
 800bc12:	781a      	ldrb	r2, [r3, #0]
 800bc14:	f107 0318 	add.w	r3, r7, #24
 800bc18:	440b      	add	r3, r1
 800bc1a:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800bc1e:	7d3b      	ldrb	r3, [r7, #20]
 800bc20:	3301      	adds	r3, #1
 800bc22:	753b      	strb	r3, [r7, #20]
 800bc24:	7d3b      	ldrb	r3, [r7, #20]
 800bc26:	2b05      	cmp	r3, #5
 800bc28:	d9e9      	bls.n	800bbfe <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	757b      	strb	r3, [r7, #21]
 800bc2e:	e074      	b.n	800bd1a <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 800bc30:	2300      	movs	r3, #0
 800bc32:	75bb      	strb	r3, [r7, #22]
 800bc34:	e06b      	b.n	800bd0e <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 800bc36:	7d7b      	ldrb	r3, [r7, #21]
 800bc38:	f107 0218 	add.w	r2, r7, #24
 800bc3c:	4413      	add	r3, r2
 800bc3e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800bc42:	461a      	mov	r2, r3
 800bc44:	7dbb      	ldrb	r3, [r7, #22]
 800bc46:	fa42 f303 	asr.w	r3, r2, r3
 800bc4a:	f003 0301 	and.w	r3, r3, #1
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d02d      	beq.n	800bcae <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 800bc52:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bc54:	2b01      	cmp	r3, #1
 800bc56:	d10e      	bne.n	800bc76 <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 800bc58:	7d7b      	ldrb	r3, [r7, #21]
 800bc5a:	b29a      	uxth	r2, r3
 800bc5c:	88bb      	ldrh	r3, [r7, #4]
 800bc5e:	4413      	add	r3, r2
 800bc60:	b298      	uxth	r0, r3
 800bc62:	7dbb      	ldrb	r3, [r7, #22]
 800bc64:	b29a      	uxth	r2, r3
 800bc66:	887b      	ldrh	r3, [r7, #2]
 800bc68:	4413      	add	r3, r2
 800bc6a:	b29b      	uxth	r3, r3
 800bc6c:	883a      	ldrh	r2, [r7, #0]
 800bc6e:	4619      	mov	r1, r3
 800bc70:	f000 fae0 	bl	800c234 <ILI9341_Draw_Pixel>
 800bc74:	e048      	b.n	800bd08 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 800bc76:	7d7b      	ldrb	r3, [r7, #21]
 800bc78:	b29b      	uxth	r3, r3
 800bc7a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800bc7c:	fb12 f303 	smulbb	r3, r2, r3
 800bc80:	b29a      	uxth	r2, r3
 800bc82:	88bb      	ldrh	r3, [r7, #4]
 800bc84:	4413      	add	r3, r2
 800bc86:	b298      	uxth	r0, r3
 800bc88:	7dbb      	ldrb	r3, [r7, #22]
 800bc8a:	b29b      	uxth	r3, r3
 800bc8c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800bc8e:	fb12 f303 	smulbb	r3, r2, r3
 800bc92:	b29a      	uxth	r2, r3
 800bc94:	887b      	ldrh	r3, [r7, #2]
 800bc96:	4413      	add	r3, r2
 800bc98:	b299      	uxth	r1, r3
 800bc9a:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800bc9c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800bc9e:	2301      	movs	r3, #1
 800bca0:	9301      	str	r3, [sp, #4]
 800bca2:	883b      	ldrh	r3, [r7, #0]
 800bca4:	9300      	str	r3, [sp, #0]
 800bca6:	4623      	mov	r3, r4
 800bca8:	f000 fbfc 	bl	800c4a4 <ILI9341_Draw_Rectangle>
 800bcac:	e02c      	b.n	800bd08 <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 800bcae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bcb0:	2b01      	cmp	r3, #1
 800bcb2:	d10e      	bne.n	800bcd2 <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 800bcb4:	7d7b      	ldrb	r3, [r7, #21]
 800bcb6:	b29a      	uxth	r2, r3
 800bcb8:	88bb      	ldrh	r3, [r7, #4]
 800bcba:	4413      	add	r3, r2
 800bcbc:	b298      	uxth	r0, r3
 800bcbe:	7dbb      	ldrb	r3, [r7, #22]
 800bcc0:	b29a      	uxth	r2, r3
 800bcc2:	887b      	ldrh	r3, [r7, #2]
 800bcc4:	4413      	add	r3, r2
 800bcc6:	b29b      	uxth	r3, r3
 800bcc8:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800bcca:	4619      	mov	r1, r3
 800bccc:	f000 fab2 	bl	800c234 <ILI9341_Draw_Pixel>
 800bcd0:	e01a      	b.n	800bd08 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 800bcd2:	7d7b      	ldrb	r3, [r7, #21]
 800bcd4:	b29b      	uxth	r3, r3
 800bcd6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800bcd8:	fb12 f303 	smulbb	r3, r2, r3
 800bcdc:	b29a      	uxth	r2, r3
 800bcde:	88bb      	ldrh	r3, [r7, #4]
 800bce0:	4413      	add	r3, r2
 800bce2:	b298      	uxth	r0, r3
 800bce4:	7dbb      	ldrb	r3, [r7, #22]
 800bce6:	b29b      	uxth	r3, r3
 800bce8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800bcea:	fb12 f303 	smulbb	r3, r2, r3
 800bcee:	b29a      	uxth	r2, r3
 800bcf0:	887b      	ldrh	r3, [r7, #2]
 800bcf2:	4413      	add	r3, r2
 800bcf4:	b299      	uxth	r1, r3
 800bcf6:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800bcf8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	9301      	str	r3, [sp, #4]
 800bcfe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bd00:	9300      	str	r3, [sp, #0]
 800bd02:	4623      	mov	r3, r4
 800bd04:	f000 fbce 	bl	800c4a4 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 800bd08:	7dbb      	ldrb	r3, [r7, #22]
 800bd0a:	3301      	adds	r3, #1
 800bd0c:	75bb      	strb	r3, [r7, #22]
 800bd0e:	7dbb      	ldrb	r3, [r7, #22]
 800bd10:	2b07      	cmp	r3, #7
 800bd12:	d990      	bls.n	800bc36 <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 800bd14:	7d7b      	ldrb	r3, [r7, #21]
 800bd16:	3301      	adds	r3, #1
 800bd18:	757b      	strb	r3, [r7, #21]
 800bd1a:	7d7b      	ldrb	r3, [r7, #21]
 800bd1c:	2b05      	cmp	r3, #5
 800bd1e:	d987      	bls.n	800bc30 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 800bd20:	bf00      	nop
 800bd22:	371c      	adds	r7, #28
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd90      	pop	{r4, r7, pc}
 800bd28:	0800ffd8 	.word	0x0800ffd8

0800bd2c <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800bd2c:	b590      	push	{r4, r7, lr}
 800bd2e:	b087      	sub	sp, #28
 800bd30:	af02      	add	r7, sp, #8
 800bd32:	60f8      	str	r0, [r7, #12]
 800bd34:	4608      	mov	r0, r1
 800bd36:	4611      	mov	r1, r2
 800bd38:	461a      	mov	r2, r3
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	817b      	strh	r3, [r7, #10]
 800bd3e:	460b      	mov	r3, r1
 800bd40:	813b      	strh	r3, [r7, #8]
 800bd42:	4613      	mov	r3, r2
 800bd44:	80fb      	strh	r3, [r7, #6]
    /*if(size & 1)
    {
    	size = ((size >> 1) * 2);
    }*/

    while (*Text) {
 800bd46:	e016      	b.n	800bd76 <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	1c5a      	adds	r2, r3, #1
 800bd4c:	60fa      	str	r2, [r7, #12]
 800bd4e:	7818      	ldrb	r0, [r3, #0]
 800bd50:	88fc      	ldrh	r4, [r7, #6]
 800bd52:	893a      	ldrh	r2, [r7, #8]
 800bd54:	8979      	ldrh	r1, [r7, #10]
 800bd56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd58:	9301      	str	r3, [sp, #4]
 800bd5a:	8c3b      	ldrh	r3, [r7, #32]
 800bd5c:	9300      	str	r3, [sp, #0]
 800bd5e:	4623      	mov	r3, r4
 800bd60:	f7ff ff30 	bl	800bbc4 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 800bd64:	8c3b      	ldrh	r3, [r7, #32]
 800bd66:	461a      	mov	r2, r3
 800bd68:	0052      	lsls	r2, r2, #1
 800bd6a:	4413      	add	r3, r2
 800bd6c:	005b      	lsls	r3, r3, #1
 800bd6e:	b29a      	uxth	r2, r3
 800bd70:	897b      	ldrh	r3, [r7, #10]
 800bd72:	4413      	add	r3, r2
 800bd74:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	781b      	ldrb	r3, [r3, #0]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d1e4      	bne.n	800bd48 <ILI9341_Draw_Text+0x1c>
    }


}
 800bd7e:	bf00      	nop
 800bd80:	3714      	adds	r7, #20
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd90      	pop	{r4, r7, pc}
	...

0800bd88 <ILI9341_FillScreenGradient>:
		GPIOC->ODR |= CS_Pin;
	}
}

void ILI9341_FillScreenGradient()
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b084      	sub	sp, #16
 800bd8c:	af02      	add	r7, sp, #8
	uint16_t x = 0;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	80bb      	strh	r3, [r7, #4]
	//ILI9341_Draw_Text("Colour gradient", 10, 10, BLACK, 1, WHITE);
	//ILI9341_Draw_Text("Grayscale", 10, 20, BLACK, 1, WHITE);



	for(uint16_t i = 0; i <= (320); i++)
 800bd92:	2300      	movs	r3, #0
 800bd94:	80fb      	strh	r3, [r7, #6]
 800bd96:	e010      	b.n	800bdba <ILI9341_FillScreenGradient+0x32>

		uint16_t RGB_color = Red + Green + Blue;
		ILI9341_Draw_Rectangle(i, x, 1, 240, RGB_color, AREA_CHUNK);
*/

	ILI9341_Draw_Rectangle(i, x, 1, 240, (uint16_t)fade_log_seq_data_table[i], AREA_CHUNK);
 800bd98:	88fb      	ldrh	r3, [r7, #6]
 800bd9a:	4a0c      	ldr	r2, [pc, #48]	; (800bdcc <ILI9341_FillScreenGradient+0x44>)
 800bd9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bda0:	b29b      	uxth	r3, r3
 800bda2:	88b9      	ldrh	r1, [r7, #4]
 800bda4:	88f8      	ldrh	r0, [r7, #6]
 800bda6:	2204      	movs	r2, #4
 800bda8:	9201      	str	r2, [sp, #4]
 800bdaa:	9300      	str	r3, [sp, #0]
 800bdac:	23f0      	movs	r3, #240	; 0xf0
 800bdae:	2201      	movs	r2, #1
 800bdb0:	f000 fb78 	bl	800c4a4 <ILI9341_Draw_Rectangle>
	for(uint16_t i = 0; i <= (320); i++)
 800bdb4:	88fb      	ldrh	r3, [r7, #6]
 800bdb6:	3301      	adds	r3, #1
 800bdb8:	80fb      	strh	r3, [r7, #6]
 800bdba:	88fb      	ldrh	r3, [r7, #6]
 800bdbc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800bdc0:	d9ea      	bls.n	800bd98 <ILI9341_FillScreenGradient+0x10>

	}
}
 800bdc2:	bf00      	nop
 800bdc4:	3708      	adds	r7, #8
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}
 800bdca:	bf00      	nop
 800bdcc:	20000ca8 	.word	0x20000ca8

0800bdd0 <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	af00      	add	r7, sp, #0

	_LCD_Enable();
 800bdd4:	f000 fc3a 	bl	800c64c <_LCD_Enable>
	ILI9341_SPI_Init();
 800bdd8:	f000 f908 	bl	800bfec <ILI9341_SPI_Init>
	_LCD_Reset();
 800bddc:	f000 fc46 	bl	800c66c <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 800bde0:	2001      	movs	r0, #1
 800bde2:	f000 fd11 	bl	800c808 <_LCD_SendCommand>
	HAL_Delay(2000);
 800bde6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bdea:	f7fa fd2b 	bl	8006844 <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 800bdee:	20cb      	movs	r0, #203	; 0xcb
 800bdf0:	f000 fd0a 	bl	800c808 <_LCD_SendCommand>
	_LCD_SendData(0x39);
 800bdf4:	2039      	movs	r0, #57	; 0x39
 800bdf6:	f000 fd39 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(0x2C);
 800bdfa:	202c      	movs	r0, #44	; 0x2c
 800bdfc:	f000 fd36 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(0x00);
 800be00:	2000      	movs	r0, #0
 800be02:	f000 fd33 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(0x34);
 800be06:	2034      	movs	r0, #52	; 0x34
 800be08:	f000 fd30 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(0x02);
 800be0c:	2002      	movs	r0, #2
 800be0e:	f000 fd2d 	bl	800c86c <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 800be12:	20cf      	movs	r0, #207	; 0xcf
 800be14:	f000 fcf8 	bl	800c808 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800be18:	2000      	movs	r0, #0
 800be1a:	f000 fd27 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(0xC1);
 800be1e:	20c1      	movs	r0, #193	; 0xc1
 800be20:	f000 fd24 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(0x30);
 800be24:	2030      	movs	r0, #48	; 0x30
 800be26:	f000 fd21 	bl	800c86c <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 800be2a:	20e8      	movs	r0, #232	; 0xe8
 800be2c:	f000 fcec 	bl	800c808 <_LCD_SendCommand>
	_LCD_SendData(0x85);
 800be30:	2085      	movs	r0, #133	; 0x85
 800be32:	f000 fd1b 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(0x00);
 800be36:	2000      	movs	r0, #0
 800be38:	f000 fd18 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(0x78);
 800be3c:	2078      	movs	r0, #120	; 0x78
 800be3e:	f000 fd15 	bl	800c86c <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 800be42:	20ea      	movs	r0, #234	; 0xea
 800be44:	f000 fce0 	bl	800c808 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800be48:	2000      	movs	r0, #0
 800be4a:	f000 fd0f 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(0x00);
 800be4e:	2000      	movs	r0, #0
 800be50:	f000 fd0c 	bl	800c86c <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 800be54:	20ed      	movs	r0, #237	; 0xed
 800be56:	f000 fcd7 	bl	800c808 <_LCD_SendCommand>
	_LCD_SendData(0x64);
 800be5a:	2064      	movs	r0, #100	; 0x64
 800be5c:	f000 fd06 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(0x03);
 800be60:	2003      	movs	r0, #3
 800be62:	f000 fd03 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(0x12);
 800be66:	2012      	movs	r0, #18
 800be68:	f000 fd00 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(0x81);
 800be6c:	2081      	movs	r0, #129	; 0x81
 800be6e:	f000 fcfd 	bl	800c86c <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 800be72:	20f7      	movs	r0, #247	; 0xf7
 800be74:	f000 fcc8 	bl	800c808 <_LCD_SendCommand>
	_LCD_SendData(0x20);
 800be78:	2020      	movs	r0, #32
 800be7a:	f000 fcf7 	bl	800c86c <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 800be7e:	20c0      	movs	r0, #192	; 0xc0
 800be80:	f000 fcc2 	bl	800c808 <_LCD_SendCommand>
	_LCD_SendData(0x23);
 800be84:	2023      	movs	r0, #35	; 0x23
 800be86:	f000 fcf1 	bl	800c86c <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 800be8a:	20c1      	movs	r0, #193	; 0xc1
 800be8c:	f000 fcbc 	bl	800c808 <_LCD_SendCommand>
	_LCD_SendData(0x10);
 800be90:	2010      	movs	r0, #16
 800be92:	f000 fceb 	bl	800c86c <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 800be96:	20c5      	movs	r0, #197	; 0xc5
 800be98:	f000 fcb6 	bl	800c808 <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 800be9c:	203e      	movs	r0, #62	; 0x3e
 800be9e:	f000 fce5 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(0x28);
 800bea2:	2028      	movs	r0, #40	; 0x28
 800bea4:	f000 fce2 	bl	800c86c <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 800bea8:	20c7      	movs	r0, #199	; 0xc7
 800beaa:	f000 fcad 	bl	800c808 <_LCD_SendCommand>
	_LCD_SendData(0x86);
 800beae:	2086      	movs	r0, #134	; 0x86
 800beb0:	f000 fcdc 	bl	800c86c <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 800beb4:	2036      	movs	r0, #54	; 0x36
 800beb6:	f000 fca7 	bl	800c808 <_LCD_SendCommand>
	_LCD_SendData(0x48);
 800beba:	2048      	movs	r0, #72	; 0x48
 800bebc:	f000 fcd6 	bl	800c86c <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 800bec0:	203a      	movs	r0, #58	; 0x3a
 800bec2:	f000 fca1 	bl	800c808 <_LCD_SendCommand>
	_LCD_SendData(0x55);
 800bec6:	2055      	movs	r0, #85	; 0x55
 800bec8:	f000 fcd0 	bl	800c86c <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 800becc:	20b1      	movs	r0, #177	; 0xb1
 800bece:	f000 fc9b 	bl	800c808 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800bed2:	2000      	movs	r0, #0
 800bed4:	f000 fcca 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(0x18);
 800bed8:	2018      	movs	r0, #24
 800beda:	f000 fcc7 	bl	800c86c <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 800bede:	20b6      	movs	r0, #182	; 0xb6
 800bee0:	f000 fc92 	bl	800c808 <_LCD_SendCommand>
	_LCD_SendData(0x08);
 800bee4:	2008      	movs	r0, #8
 800bee6:	f000 fcc1 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(0x82);
 800beea:	2082      	movs	r0, #130	; 0x82
 800beec:	f000 fcbe 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(0x27);
 800bef0:	2027      	movs	r0, #39	; 0x27
 800bef2:	f000 fcbb 	bl	800c86c <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 800bef6:	20f2      	movs	r0, #242	; 0xf2
 800bef8:	f000 fc86 	bl	800c808 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800befc:	2000      	movs	r0, #0
 800befe:	f000 fcb5 	bl	800c86c <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 800bf02:	2026      	movs	r0, #38	; 0x26
 800bf04:	f000 fc80 	bl	800c808 <_LCD_SendCommand>
	_LCD_SendData(0x01);
 800bf08:	2001      	movs	r0, #1
 800bf0a:	f000 fcaf 	bl	800c86c <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 800bf0e:	20e0      	movs	r0, #224	; 0xe0
 800bf10:	f000 fc7a 	bl	800c808 <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 800bf14:	200f      	movs	r0, #15
 800bf16:	f000 fca9 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(0x31);
 800bf1a:	2031      	movs	r0, #49	; 0x31
 800bf1c:	f000 fca6 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(0x2B);
 800bf20:	202b      	movs	r0, #43	; 0x2b
 800bf22:	f000 fca3 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(0x0C);
 800bf26:	200c      	movs	r0, #12
 800bf28:	f000 fca0 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(0x0E);
 800bf2c:	200e      	movs	r0, #14
 800bf2e:	f000 fc9d 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(0x08);
 800bf32:	2008      	movs	r0, #8
 800bf34:	f000 fc9a 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(0x4E);
 800bf38:	204e      	movs	r0, #78	; 0x4e
 800bf3a:	f000 fc97 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(0xF1);
 800bf3e:	20f1      	movs	r0, #241	; 0xf1
 800bf40:	f000 fc94 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(0x37);
 800bf44:	2037      	movs	r0, #55	; 0x37
 800bf46:	f000 fc91 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(0x07);
 800bf4a:	2007      	movs	r0, #7
 800bf4c:	f000 fc8e 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(0x10);
 800bf50:	2010      	movs	r0, #16
 800bf52:	f000 fc8b 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(0x03);
 800bf56:	2003      	movs	r0, #3
 800bf58:	f000 fc88 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(0x0E);
 800bf5c:	200e      	movs	r0, #14
 800bf5e:	f000 fc85 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(0x09);
 800bf62:	2009      	movs	r0, #9
 800bf64:	f000 fc82 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(0x00);
 800bf68:	2000      	movs	r0, #0
 800bf6a:	f000 fc7f 	bl	800c86c <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 800bf6e:	20e1      	movs	r0, #225	; 0xe1
 800bf70:	f000 fc4a 	bl	800c808 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800bf74:	2000      	movs	r0, #0
 800bf76:	f000 fc79 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(0x0E);
 800bf7a:	200e      	movs	r0, #14
 800bf7c:	f000 fc76 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(0x14);
 800bf80:	2014      	movs	r0, #20
 800bf82:	f000 fc73 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(0x03);
 800bf86:	2003      	movs	r0, #3
 800bf88:	f000 fc70 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(0x11);
 800bf8c:	2011      	movs	r0, #17
 800bf8e:	f000 fc6d 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(0x07);
 800bf92:	2007      	movs	r0, #7
 800bf94:	f000 fc6a 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(0x31);
 800bf98:	2031      	movs	r0, #49	; 0x31
 800bf9a:	f000 fc67 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(0xC1);
 800bf9e:	20c1      	movs	r0, #193	; 0xc1
 800bfa0:	f000 fc64 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(0x48);
 800bfa4:	2048      	movs	r0, #72	; 0x48
 800bfa6:	f000 fc61 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(0x08);
 800bfaa:	2008      	movs	r0, #8
 800bfac:	f000 fc5e 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(0x0F);
 800bfb0:	200f      	movs	r0, #15
 800bfb2:	f000 fc5b 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(0x0C);
 800bfb6:	200c      	movs	r0, #12
 800bfb8:	f000 fc58 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(0x31);
 800bfbc:	2031      	movs	r0, #49	; 0x31
 800bfbe:	f000 fc55 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(0x36);
 800bfc2:	2036      	movs	r0, #54	; 0x36
 800bfc4:	f000 fc52 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(0x0F);
 800bfc8:	200f      	movs	r0, #15
 800bfca:	f000 fc4f 	bl	800c86c <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 800bfce:	2011      	movs	r0, #17
 800bfd0:	f000 fc1a 	bl	800c808 <_LCD_SendCommand>
	HAL_Delay(240);
 800bfd4:	20f0      	movs	r0, #240	; 0xf0
 800bfd6:	f7fa fc35 	bl	8006844 <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 800bfda:	2029      	movs	r0, #41	; 0x29
 800bfdc:	f000 fc14 	bl	800c808 <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800bfe0:	2000      	movs	r0, #0
 800bfe2:	f000 fae5 	bl	800c5b0 <ILI9341_Set_Rotation>
}
 800bfe6:	bf00      	nop
 800bfe8:	bd80      	pop	{r7, pc}
	...

0800bfec <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 800bfec:	b480      	push	{r7}
 800bfee:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bff0:	4b0b      	ldr	r3, [pc, #44]	; (800c020 <ILI9341_SPI_Init+0x34>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bff8:	2b40      	cmp	r3, #64	; 0x40
 800bffa:	d005      	beq.n	800c008 <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 800bffc:	4b08      	ldr	r3, [pc, #32]	; (800c020 <ILI9341_SPI_Init+0x34>)
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	4a07      	ldr	r2, [pc, #28]	; (800c020 <ILI9341_SPI_Init+0x34>)
 800c002:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c006:	6013      	str	r3, [r2, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c008:	4b06      	ldr	r3, [pc, #24]	; (800c024 <ILI9341_SPI_Init+0x38>)
 800c00a:	695b      	ldr	r3, [r3, #20]
 800c00c:	4a05      	ldr	r2, [pc, #20]	; (800c024 <ILI9341_SPI_Init+0x38>)
 800c00e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c012:	6153      	str	r3, [r2, #20]
}
 800c014:	bf00      	nop
 800c016:	46bd      	mov	sp, r7
 800c018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01c:	4770      	bx	lr
 800c01e:	bf00      	nop
 800c020:	40003c00 	.word	0x40003c00
 800c024:	48000400 	.word	0x48000400

0800c028 <ILI9341_Draw_Horizontal_Line>:
 *	Draw horizontal line
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 800c028:	b590      	push	{r4, r7, lr}
 800c02a:	b085      	sub	sp, #20
 800c02c:	af02      	add	r7, sp, #8
 800c02e:	4604      	mov	r4, r0
 800c030:	4608      	mov	r0, r1
 800c032:	4611      	mov	r1, r2
 800c034:	461a      	mov	r2, r3
 800c036:	4623      	mov	r3, r4
 800c038:	80fb      	strh	r3, [r7, #6]
 800c03a:	4603      	mov	r3, r0
 800c03c:	80bb      	strh	r3, [r7, #4]
 800c03e:	460b      	mov	r3, r1
 800c040:	807b      	strh	r3, [r7, #2]
 800c042:	4613      	mov	r3, r2
 800c044:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800c046:	4b1a      	ldr	r3, [pc, #104]	; (800c0b0 <ILI9341_Draw_Horizontal_Line+0x88>)
 800c048:	881b      	ldrh	r3, [r3, #0]
 800c04a:	b29b      	uxth	r3, r3
 800c04c:	88fa      	ldrh	r2, [r7, #6]
 800c04e:	429a      	cmp	r2, r3
 800c050:	d229      	bcs.n	800c0a6 <ILI9341_Draw_Horizontal_Line+0x7e>
 800c052:	4b18      	ldr	r3, [pc, #96]	; (800c0b4 <ILI9341_Draw_Horizontal_Line+0x8c>)
 800c054:	881b      	ldrh	r3, [r3, #0]
 800c056:	b29b      	uxth	r3, r3
 800c058:	88ba      	ldrh	r2, [r7, #4]
 800c05a:	429a      	cmp	r2, r3
 800c05c:	d223      	bcs.n	800c0a6 <ILI9341_Draw_Horizontal_Line+0x7e>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 800c05e:	88fa      	ldrh	r2, [r7, #6]
 800c060:	887b      	ldrh	r3, [r7, #2]
 800c062:	4413      	add	r3, r2
 800c064:	3b01      	subs	r3, #1
 800c066:	4a12      	ldr	r2, [pc, #72]	; (800c0b0 <ILI9341_Draw_Horizontal_Line+0x88>)
 800c068:	8812      	ldrh	r2, [r2, #0]
 800c06a:	b292      	uxth	r2, r2
 800c06c:	4293      	cmp	r3, r2
 800c06e:	db05      	blt.n	800c07c <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 800c070:	4b0f      	ldr	r3, [pc, #60]	; (800c0b0 <ILI9341_Draw_Horizontal_Line+0x88>)
 800c072:	881b      	ldrh	r3, [r3, #0]
 800c074:	b29a      	uxth	r2, r3
 800c076:	88fb      	ldrh	r3, [r7, #6]
 800c078:	1ad3      	subs	r3, r2, r3
 800c07a:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(	xpos,
							ypos,
							(xpos + width) - 1,
 800c07c:	88fa      	ldrh	r2, [r7, #6]
 800c07e:	887b      	ldrh	r3, [r7, #2]
 800c080:	4413      	add	r3, r2
 800c082:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800c084:	3b01      	subs	r3, #1
 800c086:	b29a      	uxth	r2, r3
 800c088:	88bb      	ldrh	r3, [r7, #4]
 800c08a:	88b9      	ldrh	r1, [r7, #4]
 800c08c:	88f8      	ldrh	r0, [r7, #6]
 800c08e:	f000 f85b 	bl	800c148 <ILI9341_Set_Frame>
							ypos);

	_LCD_Write_Frame(xpos, ypos, colour, width, LINE_CHUNK);
 800c092:	887c      	ldrh	r4, [r7, #2]
 800c094:	883a      	ldrh	r2, [r7, #0]
 800c096:	88b9      	ldrh	r1, [r7, #4]
 800c098:	88f8      	ldrh	r0, [r7, #6]
 800c09a:	2303      	movs	r3, #3
 800c09c:	9300      	str	r3, [sp, #0]
 800c09e:	4623      	mov	r3, r4
 800c0a0:	f000 fb02 	bl	800c6a8 <_LCD_Write_Frame>
 800c0a4:	e000      	b.n	800c0a8 <ILI9341_Draw_Horizontal_Line+0x80>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800c0a6:	bf00      	nop
}
 800c0a8:	370c      	adds	r7, #12
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd90      	pop	{r4, r7, pc}
 800c0ae:	bf00      	nop
 800c0b0:	20000ca2 	.word	0x20000ca2
 800c0b4:	20000ca0 	.word	0x20000ca0

0800c0b8 <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 800c0b8:	b590      	push	{r4, r7, lr}
 800c0ba:	b085      	sub	sp, #20
 800c0bc:	af02      	add	r7, sp, #8
 800c0be:	4604      	mov	r4, r0
 800c0c0:	4608      	mov	r0, r1
 800c0c2:	4611      	mov	r1, r2
 800c0c4:	461a      	mov	r2, r3
 800c0c6:	4623      	mov	r3, r4
 800c0c8:	80fb      	strh	r3, [r7, #6]
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	80bb      	strh	r3, [r7, #4]
 800c0ce:	460b      	mov	r3, r1
 800c0d0:	807b      	strh	r3, [r7, #2]
 800c0d2:	4613      	mov	r3, r2
 800c0d4:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800c0d6:	4b1a      	ldr	r3, [pc, #104]	; (800c140 <ILI9341_Draw_Vertical_Line+0x88>)
 800c0d8:	881b      	ldrh	r3, [r3, #0]
 800c0da:	b29b      	uxth	r3, r3
 800c0dc:	88fa      	ldrh	r2, [r7, #6]
 800c0de:	429a      	cmp	r2, r3
 800c0e0:	d229      	bcs.n	800c136 <ILI9341_Draw_Vertical_Line+0x7e>
 800c0e2:	4b18      	ldr	r3, [pc, #96]	; (800c144 <ILI9341_Draw_Vertical_Line+0x8c>)
 800c0e4:	881b      	ldrh	r3, [r3, #0]
 800c0e6:	b29b      	uxth	r3, r3
 800c0e8:	88ba      	ldrh	r2, [r7, #4]
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	d223      	bcs.n	800c136 <ILI9341_Draw_Vertical_Line+0x7e>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 800c0ee:	88ba      	ldrh	r2, [r7, #4]
 800c0f0:	887b      	ldrh	r3, [r7, #2]
 800c0f2:	4413      	add	r3, r2
 800c0f4:	3b01      	subs	r3, #1
 800c0f6:	4a13      	ldr	r2, [pc, #76]	; (800c144 <ILI9341_Draw_Vertical_Line+0x8c>)
 800c0f8:	8812      	ldrh	r2, [r2, #0]
 800c0fa:	b292      	uxth	r2, r2
 800c0fc:	4293      	cmp	r3, r2
 800c0fe:	db05      	blt.n	800c10c <ILI9341_Draw_Vertical_Line+0x54>
		{
			height= LCD_HEIGHT - ypos;
 800c100:	4b10      	ldr	r3, [pc, #64]	; (800c144 <ILI9341_Draw_Vertical_Line+0x8c>)
 800c102:	881b      	ldrh	r3, [r3, #0]
 800c104:	b29a      	uxth	r2, r3
 800c106:	88bb      	ldrh	r3, [r7, #4]
 800c108:	1ad3      	subs	r3, r2, r3
 800c10a:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 800c10c:	88ba      	ldrh	r2, [r7, #4]
 800c10e:	887b      	ldrh	r3, [r7, #2]
 800c110:	4413      	add	r3, r2
 800c112:	b29b      	uxth	r3, r3
 800c114:	3b01      	subs	r3, #1
 800c116:	b29b      	uxth	r3, r3
 800c118:	88fa      	ldrh	r2, [r7, #6]
 800c11a:	88b9      	ldrh	r1, [r7, #4]
 800c11c:	88f8      	ldrh	r0, [r7, #6]
 800c11e:	f000 f813 	bl	800c148 <ILI9341_Set_Frame>
	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 800c122:	887c      	ldrh	r4, [r7, #2]
 800c124:	883a      	ldrh	r2, [r7, #0]
 800c126:	88b9      	ldrh	r1, [r7, #4]
 800c128:	88f8      	ldrh	r0, [r7, #6]
 800c12a:	2303      	movs	r3, #3
 800c12c:	9300      	str	r3, [sp, #0]
 800c12e:	4623      	mov	r3, r4
 800c130:	f000 faba 	bl	800c6a8 <_LCD_Write_Frame>
 800c134:	e000      	b.n	800c138 <ILI9341_Draw_Vertical_Line+0x80>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800c136:	bf00      	nop
}
 800c138:	370c      	adds	r7, #12
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd90      	pop	{r4, r7, pc}
 800c13e:	bf00      	nop
 800c140:	20000ca2 	.word	0x20000ca2
 800c144:	20000ca0 	.word	0x20000ca0

0800c148 <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 800c148:	b590      	push	{r4, r7, lr}
 800c14a:	b083      	sub	sp, #12
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	4604      	mov	r4, r0
 800c150:	4608      	mov	r0, r1
 800c152:	4611      	mov	r1, r2
 800c154:	461a      	mov	r2, r3
 800c156:	4623      	mov	r3, r4
 800c158:	80fb      	strh	r3, [r7, #6]
 800c15a:	4603      	mov	r3, r0
 800c15c:	80bb      	strh	r3, [r7, #4]
 800c15e:	460b      	mov	r3, r1
 800c160:	807b      	strh	r3, [r7, #2]
 800c162:	4613      	mov	r3, r2
 800c164:	803b      	strh	r3, [r7, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 800c166:	202a      	movs	r0, #42	; 0x2a
 800c168:	f000 fb4e 	bl	800c808 <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 800c16c:	88fb      	ldrh	r3, [r7, #6]
 800c16e:	0a1b      	lsrs	r3, r3, #8
 800c170:	b29b      	uxth	r3, r3
 800c172:	b2db      	uxtb	r3, r3
 800c174:	4618      	mov	r0, r3
 800c176:	f000 fb79 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(sc);
 800c17a:	88fb      	ldrh	r3, [r7, #6]
 800c17c:	b2db      	uxtb	r3, r3
 800c17e:	4618      	mov	r0, r3
 800c180:	f000 fb74 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 800c184:	887b      	ldrh	r3, [r7, #2]
 800c186:	0a1b      	lsrs	r3, r3, #8
 800c188:	b29b      	uxth	r3, r3
 800c18a:	b2db      	uxtb	r3, r3
 800c18c:	4618      	mov	r0, r3
 800c18e:	f000 fb6d 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(ec);
 800c192:	887b      	ldrh	r3, [r7, #2]
 800c194:	b2db      	uxtb	r3, r3
 800c196:	4618      	mov	r0, r3
 800c198:	f000 fb68 	bl	800c86c <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 800c19c:	202b      	movs	r0, #43	; 0x2b
 800c19e:	f000 fb33 	bl	800c808 <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 800c1a2:	88bb      	ldrh	r3, [r7, #4]
 800c1a4:	0a1b      	lsrs	r3, r3, #8
 800c1a6:	b29b      	uxth	r3, r3
 800c1a8:	b2db      	uxtb	r3, r3
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f000 fb5e 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(sp);
 800c1b0:	88bb      	ldrh	r3, [r7, #4]
 800c1b2:	b2db      	uxtb	r3, r3
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f000 fb59 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 800c1ba:	883b      	ldrh	r3, [r7, #0]
 800c1bc:	0a1b      	lsrs	r3, r3, #8
 800c1be:	b29b      	uxth	r3, r3
 800c1c0:	b2db      	uxtb	r3, r3
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	f000 fb52 	bl	800c86c <_LCD_SendData>
	_LCD_SendData(ep);
 800c1c8:	883b      	ldrh	r3, [r7, #0]
 800c1ca:	b2db      	uxtb	r3, r3
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	f000 fb4d 	bl	800c86c <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 800c1d2:	202c      	movs	r0, #44	; 0x2c
 800c1d4:	f000 fb18 	bl	800c808 <_LCD_SendCommand>
}
 800c1d8:	bf00      	nop
 800c1da:	370c      	adds	r7, #12
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd90      	pop	{r4, r7, pc}

0800c1e0 <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b084      	sub	sp, #16
 800c1e4:	af02      	add	r7, sp, #8
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 800c1ea:	4b10      	ldr	r3, [pc, #64]	; (800c22c <ILI9341_Fill_Screen+0x4c>)
 800c1ec:	881b      	ldrh	r3, [r3, #0]
 800c1ee:	b29a      	uxth	r2, r3
 800c1f0:	4b0f      	ldr	r3, [pc, #60]	; (800c230 <ILI9341_Fill_Screen+0x50>)
 800c1f2:	881b      	ldrh	r3, [r3, #0]
 800c1f4:	b29b      	uxth	r3, r3
 800c1f6:	2100      	movs	r1, #0
 800c1f8:	2000      	movs	r0, #0
 800c1fa:	f7ff ffa5 	bl	800c148 <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 800c1fe:	4b0b      	ldr	r3, [pc, #44]	; (800c22c <ILI9341_Fill_Screen+0x4c>)
 800c200:	881b      	ldrh	r3, [r3, #0]
 800c202:	b29b      	uxth	r3, r3
 800c204:	461a      	mov	r2, r3
 800c206:	4b0a      	ldr	r3, [pc, #40]	; (800c230 <ILI9341_Fill_Screen+0x50>)
 800c208:	881b      	ldrh	r3, [r3, #0]
 800c20a:	b29b      	uxth	r3, r3
 800c20c:	fb03 f302 	mul.w	r3, r3, r2
 800c210:	4619      	mov	r1, r3
 800c212:	88fa      	ldrh	r2, [r7, #6]
 800c214:	2304      	movs	r3, #4
 800c216:	9300      	str	r3, [sp, #0]
 800c218:	460b      	mov	r3, r1
 800c21a:	2100      	movs	r1, #0
 800c21c:	2000      	movs	r0, #0
 800c21e:	f000 fa43 	bl	800c6a8 <_LCD_Write_Frame>
}
 800c222:	bf00      	nop
 800c224:	3708      	adds	r7, #8
 800c226:	46bd      	mov	sp, r7
 800c228:	bd80      	pop	{r7, pc}
 800c22a:	bf00      	nop
 800c22c:	20000ca2 	.word	0x20000ca2
 800c230:	20000ca0 	.word	0x20000ca0

0800c234 <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b08c      	sub	sp, #48	; 0x30
 800c238:	af00      	add	r7, sp, #0
 800c23a:	4603      	mov	r3, r0
 800c23c:	80fb      	strh	r3, [r7, #6]
 800c23e:	460b      	mov	r3, r1
 800c240:	80bb      	strh	r3, [r7, #4]
 800c242:	4613      	mov	r3, r2
 800c244:	807b      	strh	r3, [r7, #2]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800c246:	4b94      	ldr	r3, [pc, #592]	; (800c498 <ILI9341_Draw_Pixel+0x264>)
 800c248:	881b      	ldrh	r3, [r3, #0]
 800c24a:	b29b      	uxth	r3, r3
 800c24c:	88fa      	ldrh	r2, [r7, #6]
 800c24e:	429a      	cmp	r2, r3
 800c250:	f080 811e 	bcs.w	800c490 <ILI9341_Draw_Pixel+0x25c>
 800c254:	4b91      	ldr	r3, [pc, #580]	; (800c49c <ILI9341_Draw_Pixel+0x268>)
 800c256:	881b      	ldrh	r3, [r3, #0]
 800c258:	b29b      	uxth	r3, r3
 800c25a:	88ba      	ldrh	r2, [r7, #4]
 800c25c:	429a      	cmp	r2, r3
 800c25e:	f080 8117 	bcs.w	800c490 <ILI9341_Draw_Pixel+0x25c>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800c262:	4b8f      	ldr	r3, [pc, #572]	; (800c4a0 <ILI9341_Draw_Pixel+0x26c>)
 800c264:	695b      	ldr	r3, [r3, #20]
 800c266:	4a8e      	ldr	r2, [pc, #568]	; (800c4a0 <ILI9341_Draw_Pixel+0x26c>)
 800c268:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c26c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c26e:	4b8c      	ldr	r3, [pc, #560]	; (800c4a0 <ILI9341_Draw_Pixel+0x26c>)
 800c270:	695b      	ldr	r3, [r3, #20]
 800c272:	4a8b      	ldr	r2, [pc, #556]	; (800c4a0 <ILI9341_Draw_Pixel+0x26c>)
 800c274:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c278:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2A, 0, 0);
 800c27a:	2200      	movs	r2, #0
 800c27c:	2100      	movs	r1, #0
 800c27e:	202a      	movs	r0, #42	; 0x2a
 800c280:	f000 fb26 	bl	800c8d0 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800c284:	2300      	movs	r3, #0
 800c286:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c288:	e008      	b.n	800c29c <ILI9341_Draw_Pixel+0x68>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c28a:	4b85      	ldr	r3, [pc, #532]	; (800c4a0 <ILI9341_Draw_Pixel+0x26c>)
 800c28c:	695b      	ldr	r3, [r3, #20]
 800c28e:	4a84      	ldr	r2, [pc, #528]	; (800c4a0 <ILI9341_Draw_Pixel+0x26c>)
 800c290:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c294:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800c296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c298:	3301      	adds	r3, #1
 800c29a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c29e:	2b02      	cmp	r3, #2
 800c2a0:	ddf3      	ble.n	800c28a <ILI9341_Draw_Pixel+0x56>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800c2a2:	4b7f      	ldr	r3, [pc, #508]	; (800c4a0 <ILI9341_Draw_Pixel+0x26c>)
 800c2a4:	695b      	ldr	r3, [r3, #20]
 800c2a6:	4a7e      	ldr	r2, [pc, #504]	; (800c4a0 <ILI9341_Draw_Pixel+0x26c>)
 800c2a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2ac:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800c2ae:	4b7c      	ldr	r3, [pc, #496]	; (800c4a0 <ILI9341_Draw_Pixel+0x26c>)
 800c2b0:	695b      	ldr	r3, [r3, #20]
 800c2b2:	4a7b      	ldr	r2, [pc, #492]	; (800c4a0 <ILI9341_Draw_Pixel+0x26c>)
 800c2b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2b8:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c2ba:	4b79      	ldr	r3, [pc, #484]	; (800c4a0 <ILI9341_Draw_Pixel+0x26c>)
 800c2bc:	695b      	ldr	r3, [r3, #20]
 800c2be:	4a78      	ldr	r2, [pc, #480]	; (800c4a0 <ILI9341_Draw_Pixel+0x26c>)
 800c2c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c2c4:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] =
 800c2c6:	88fb      	ldrh	r3, [r7, #6]
 800c2c8:	0a1b      	lsrs	r3, r3, #8
 800c2ca:	b29b      	uxth	r3, r3
 800c2cc:	b2db      	uxtb	r3, r3
 800c2ce:	753b      	strb	r3, [r7, #20]
 800c2d0:	88fb      	ldrh	r3, [r7, #6]
 800c2d2:	b2db      	uxtb	r3, r3
 800c2d4:	757b      	strb	r3, [r7, #21]
	{
			x >> 8,
			x,
			(x + 1) >> 8,
 800c2d6:	88fb      	ldrh	r3, [r7, #6]
 800c2d8:	3301      	adds	r3, #1
 800c2da:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer[4] =
 800c2dc:	b2db      	uxtb	r3, r3
 800c2de:	75bb      	strb	r3, [r7, #22]
			(x + 1)
 800c2e0:	88fb      	ldrh	r3, [r7, #6]
 800c2e2:	b2db      	uxtb	r3, r3
 800c2e4:	3301      	adds	r3, #1
 800c2e6:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer[4] =
 800c2e8:	75fb      	strb	r3, [r7, #23]
	};

	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 10);
 800c2ea:	f107 0014 	add.w	r0, r7, #20
 800c2ee:	230a      	movs	r3, #10
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	2104      	movs	r1, #4
 800c2f4:	f000 fb1e 	bl	800c934 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	62bb      	str	r3, [r7, #40]	; 0x28
 800c2fc:	e008      	b.n	800c310 <ILI9341_Draw_Pixel+0xdc>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c2fe:	4b68      	ldr	r3, [pc, #416]	; (800c4a0 <ILI9341_Draw_Pixel+0x26c>)
 800c300:	695b      	ldr	r3, [r3, #20]
 800c302:	4a67      	ldr	r2, [pc, #412]	; (800c4a0 <ILI9341_Draw_Pixel+0x26c>)
 800c304:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c308:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800c30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c30c:	3301      	adds	r3, #1
 800c30e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c312:	2b02      	cmp	r3, #2
 800c314:	ddf3      	ble.n	800c2fe <ILI9341_Draw_Pixel+0xca>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800c316:	4b62      	ldr	r3, [pc, #392]	; (800c4a0 <ILI9341_Draw_Pixel+0x26c>)
 800c318:	695b      	ldr	r3, [r3, #20]
 800c31a:	4a61      	ldr	r2, [pc, #388]	; (800c4a0 <ILI9341_Draw_Pixel+0x26c>)
 800c31c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c320:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800c322:	4b5f      	ldr	r3, [pc, #380]	; (800c4a0 <ILI9341_Draw_Pixel+0x26c>)
 800c324:	695b      	ldr	r3, [r3, #20]
 800c326:	4a5e      	ldr	r2, [pc, #376]	; (800c4a0 <ILI9341_Draw_Pixel+0x26c>)
 800c328:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c32c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c32e:	4b5c      	ldr	r3, [pc, #368]	; (800c4a0 <ILI9341_Draw_Pixel+0x26c>)
 800c330:	695b      	ldr	r3, [r3, #20]
 800c332:	4a5b      	ldr	r2, [pc, #364]	; (800c4a0 <ILI9341_Draw_Pixel+0x26c>)
 800c334:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c338:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2B, 0, 0);
 800c33a:	2200      	movs	r2, #0
 800c33c:	2100      	movs	r1, #0
 800c33e:	202b      	movs	r0, #43	; 0x2b
 800c340:	f000 fac6 	bl	800c8d0 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800c344:	2300      	movs	r3, #0
 800c346:	627b      	str	r3, [r7, #36]	; 0x24
 800c348:	e008      	b.n	800c35c <ILI9341_Draw_Pixel+0x128>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c34a:	4b55      	ldr	r3, [pc, #340]	; (800c4a0 <ILI9341_Draw_Pixel+0x26c>)
 800c34c:	695b      	ldr	r3, [r3, #20]
 800c34e:	4a54      	ldr	r2, [pc, #336]	; (800c4a0 <ILI9341_Draw_Pixel+0x26c>)
 800c350:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c354:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800c356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c358:	3301      	adds	r3, #1
 800c35a:	627b      	str	r3, [r7, #36]	; 0x24
 800c35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c35e:	2b02      	cmp	r3, #2
 800c360:	ddf3      	ble.n	800c34a <ILI9341_Draw_Pixel+0x116>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800c362:	4b4f      	ldr	r3, [pc, #316]	; (800c4a0 <ILI9341_Draw_Pixel+0x26c>)
 800c364:	695b      	ldr	r3, [r3, #20]
 800c366:	4a4e      	ldr	r2, [pc, #312]	; (800c4a0 <ILI9341_Draw_Pixel+0x26c>)
 800c368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c36c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800c36e:	4b4c      	ldr	r3, [pc, #304]	; (800c4a0 <ILI9341_Draw_Pixel+0x26c>)
 800c370:	695b      	ldr	r3, [r3, #20]
 800c372:	4a4b      	ldr	r2, [pc, #300]	; (800c4a0 <ILI9341_Draw_Pixel+0x26c>)
 800c374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c378:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c37a:	4b49      	ldr	r3, [pc, #292]	; (800c4a0 <ILI9341_Draw_Pixel+0x26c>)
 800c37c:	695b      	ldr	r3, [r3, #20]
 800c37e:	4a48      	ldr	r2, [pc, #288]	; (800c4a0 <ILI9341_Draw_Pixel+0x26c>)
 800c380:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c384:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] =
 800c386:	88bb      	ldrh	r3, [r7, #4]
 800c388:	0a1b      	lsrs	r3, r3, #8
 800c38a:	b29b      	uxth	r3, r3
 800c38c:	b2db      	uxtb	r3, r3
 800c38e:	743b      	strb	r3, [r7, #16]
 800c390:	88bb      	ldrh	r3, [r7, #4]
 800c392:	b2db      	uxtb	r3, r3
 800c394:	747b      	strb	r3, [r7, #17]
	{
			y >> 8,
			y,
			(y + 1) >> 8,
 800c396:	88bb      	ldrh	r3, [r7, #4]
 800c398:	3301      	adds	r3, #1
 800c39a:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer1[4] =
 800c39c:	b2db      	uxtb	r3, r3
 800c39e:	74bb      	strb	r3, [r7, #18]
			(y + 1)
 800c3a0:	88bb      	ldrh	r3, [r7, #4]
 800c3a2:	b2db      	uxtb	r3, r3
 800c3a4:	3301      	adds	r3, #1
 800c3a6:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer1[4] =
 800c3a8:	74fb      	strb	r3, [r7, #19]
	};

	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 10);
 800c3aa:	f107 0010 	add.w	r0, r7, #16
 800c3ae:	230a      	movs	r3, #10
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	2104      	movs	r1, #4
 800c3b4:	f000 fabe 	bl	800c934 <_SPI_SendByteMultiByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	623b      	str	r3, [r7, #32]
 800c3bc:	e008      	b.n	800c3d0 <ILI9341_Draw_Pixel+0x19c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c3be:	4b38      	ldr	r3, [pc, #224]	; (800c4a0 <ILI9341_Draw_Pixel+0x26c>)
 800c3c0:	695b      	ldr	r3, [r3, #20]
 800c3c2:	4a37      	ldr	r2, [pc, #220]	; (800c4a0 <ILI9341_Draw_Pixel+0x26c>)
 800c3c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c3c8:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800c3ca:	6a3b      	ldr	r3, [r7, #32]
 800c3cc:	3301      	adds	r3, #1
 800c3ce:	623b      	str	r3, [r7, #32]
 800c3d0:	6a3b      	ldr	r3, [r7, #32]
 800c3d2:	2b02      	cmp	r3, #2
 800c3d4:	ddf3      	ble.n	800c3be <ILI9341_Draw_Pixel+0x18a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800c3d6:	4b32      	ldr	r3, [pc, #200]	; (800c4a0 <ILI9341_Draw_Pixel+0x26c>)
 800c3d8:	695b      	ldr	r3, [r3, #20]
 800c3da:	4a31      	ldr	r2, [pc, #196]	; (800c4a0 <ILI9341_Draw_Pixel+0x26c>)
 800c3dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3e0:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800c3e2:	4b2f      	ldr	r3, [pc, #188]	; (800c4a0 <ILI9341_Draw_Pixel+0x26c>)
 800c3e4:	695b      	ldr	r3, [r3, #20]
 800c3e6:	4a2e      	ldr	r2, [pc, #184]	; (800c4a0 <ILI9341_Draw_Pixel+0x26c>)
 800c3e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3ec:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c3ee:	4b2c      	ldr	r3, [pc, #176]	; (800c4a0 <ILI9341_Draw_Pixel+0x26c>)
 800c3f0:	695b      	ldr	r3, [r3, #20]
 800c3f2:	4a2b      	ldr	r2, [pc, #172]	; (800c4a0 <ILI9341_Draw_Pixel+0x26c>)
 800c3f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c3f8:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2C, 0, 0);
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	2100      	movs	r1, #0
 800c3fe:	202c      	movs	r0, #44	; 0x2c
 800c400:	f000 fa66 	bl	800c8d0 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800c404:	2300      	movs	r3, #0
 800c406:	61fb      	str	r3, [r7, #28]
 800c408:	e008      	b.n	800c41c <ILI9341_Draw_Pixel+0x1e8>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c40a:	4b25      	ldr	r3, [pc, #148]	; (800c4a0 <ILI9341_Draw_Pixel+0x26c>)
 800c40c:	695b      	ldr	r3, [r3, #20]
 800c40e:	4a24      	ldr	r2, [pc, #144]	; (800c4a0 <ILI9341_Draw_Pixel+0x26c>)
 800c410:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c414:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800c416:	69fb      	ldr	r3, [r7, #28]
 800c418:	3301      	adds	r3, #1
 800c41a:	61fb      	str	r3, [r7, #28]
 800c41c:	69fb      	ldr	r3, [r7, #28]
 800c41e:	2b02      	cmp	r3, #2
 800c420:	ddf3      	ble.n	800c40a <ILI9341_Draw_Pixel+0x1d6>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800c422:	4b1f      	ldr	r3, [pc, #124]	; (800c4a0 <ILI9341_Draw_Pixel+0x26c>)
 800c424:	695b      	ldr	r3, [r3, #20]
 800c426:	4a1e      	ldr	r2, [pc, #120]	; (800c4a0 <ILI9341_Draw_Pixel+0x26c>)
 800c428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c42c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800c42e:	4b1c      	ldr	r3, [pc, #112]	; (800c4a0 <ILI9341_Draw_Pixel+0x26c>)
 800c430:	695b      	ldr	r3, [r3, #20]
 800c432:	4a1b      	ldr	r2, [pc, #108]	; (800c4a0 <ILI9341_Draw_Pixel+0x26c>)
 800c434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c438:	6153      	str	r3, [r2, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c43a:	4b19      	ldr	r3, [pc, #100]	; (800c4a0 <ILI9341_Draw_Pixel+0x26c>)
 800c43c:	695b      	ldr	r3, [r3, #20]
 800c43e:	4a18      	ldr	r2, [pc, #96]	; (800c4a0 <ILI9341_Draw_Pixel+0x26c>)
 800c440:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c444:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 800c446:	887b      	ldrh	r3, [r7, #2]
 800c448:	0a1b      	lsrs	r3, r3, #8
 800c44a:	b29b      	uxth	r3, r3
 800c44c:	b2db      	uxtb	r3, r3
 800c44e:	733b      	strb	r3, [r7, #12]
 800c450:	887b      	ldrh	r3, [r7, #2]
 800c452:	b2db      	uxtb	r3, r3
 800c454:	737b      	strb	r3, [r7, #13]

	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 4, 0, 10);
 800c456:	f107 000c 	add.w	r0, r7, #12
 800c45a:	230a      	movs	r3, #10
 800c45c:	2200      	movs	r2, #0
 800c45e:	2104      	movs	r1, #4
 800c460:	f000 fa68 	bl	800c934 <_SPI_SendByteMultiByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800c464:	2300      	movs	r3, #0
 800c466:	61bb      	str	r3, [r7, #24]
 800c468:	e008      	b.n	800c47c <ILI9341_Draw_Pixel+0x248>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c46a:	4b0d      	ldr	r3, [pc, #52]	; (800c4a0 <ILI9341_Draw_Pixel+0x26c>)
 800c46c:	695b      	ldr	r3, [r3, #20]
 800c46e:	4a0c      	ldr	r2, [pc, #48]	; (800c4a0 <ILI9341_Draw_Pixel+0x26c>)
 800c470:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c474:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800c476:	69bb      	ldr	r3, [r7, #24]
 800c478:	3301      	adds	r3, #1
 800c47a:	61bb      	str	r3, [r7, #24]
 800c47c:	69bb      	ldr	r3, [r7, #24]
 800c47e:	2b02      	cmp	r3, #2
 800c480:	ddf3      	ble.n	800c46a <ILI9341_Draw_Pixel+0x236>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800c482:	4b07      	ldr	r3, [pc, #28]	; (800c4a0 <ILI9341_Draw_Pixel+0x26c>)
 800c484:	695b      	ldr	r3, [r3, #20]
 800c486:	4a06      	ldr	r2, [pc, #24]	; (800c4a0 <ILI9341_Draw_Pixel+0x26c>)
 800c488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c48c:	6153      	str	r3, [r2, #20]
 800c48e:	e000      	b.n	800c492 <ILI9341_Draw_Pixel+0x25e>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800c490:	bf00      	nop


}
 800c492:	3730      	adds	r7, #48	; 0x30
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}
 800c498:	20000ca2 	.word	0x20000ca2
 800c49c:	20000ca0 	.word	0x20000ca0
 800c4a0:	48000400 	.word	0x48000400

0800c4a4 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 800c4a4:	b590      	push	{r4, r7, lr}
 800c4a6:	b087      	sub	sp, #28
 800c4a8:	af02      	add	r7, sp, #8
 800c4aa:	4604      	mov	r4, r0
 800c4ac:	4608      	mov	r0, r1
 800c4ae:	4611      	mov	r1, r2
 800c4b0:	461a      	mov	r2, r3
 800c4b2:	4623      	mov	r3, r4
 800c4b4:	80fb      	strh	r3, [r7, #6]
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	80bb      	strh	r3, [r7, #4]
 800c4ba:	460b      	mov	r3, r1
 800c4bc:	807b      	strh	r3, [r7, #2]
 800c4be:	4613      	mov	r3, r2
 800c4c0:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800c4c2:	4b39      	ldr	r3, [pc, #228]	; (800c5a8 <ILI9341_Draw_Rectangle+0x104>)
 800c4c4:	881b      	ldrh	r3, [r3, #0]
 800c4c6:	b29b      	uxth	r3, r3
 800c4c8:	88fa      	ldrh	r2, [r7, #6]
 800c4ca:	429a      	cmp	r2, r3
 800c4cc:	d268      	bcs.n	800c5a0 <ILI9341_Draw_Rectangle+0xfc>
 800c4ce:	4b37      	ldr	r3, [pc, #220]	; (800c5ac <ILI9341_Draw_Rectangle+0x108>)
 800c4d0:	881b      	ldrh	r3, [r3, #0]
 800c4d2:	b29b      	uxth	r3, r3
 800c4d4:	88ba      	ldrh	r2, [r7, #4]
 800c4d6:	429a      	cmp	r2, r3
 800c4d8:	d262      	bcs.n	800c5a0 <ILI9341_Draw_Rectangle+0xfc>
	if((xpos+width-1)>=LCD_WIDTH)
 800c4da:	88fa      	ldrh	r2, [r7, #6]
 800c4dc:	887b      	ldrh	r3, [r7, #2]
 800c4de:	4413      	add	r3, r2
 800c4e0:	3b01      	subs	r3, #1
 800c4e2:	4a31      	ldr	r2, [pc, #196]	; (800c5a8 <ILI9341_Draw_Rectangle+0x104>)
 800c4e4:	8812      	ldrh	r2, [r2, #0]
 800c4e6:	b292      	uxth	r2, r2
 800c4e8:	4293      	cmp	r3, r2
 800c4ea:	db05      	blt.n	800c4f8 <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 800c4ec:	4b2e      	ldr	r3, [pc, #184]	; (800c5a8 <ILI9341_Draw_Rectangle+0x104>)
 800c4ee:	881b      	ldrh	r3, [r3, #0]
 800c4f0:	b29a      	uxth	r2, r3
 800c4f2:	88fb      	ldrh	r3, [r7, #6]
 800c4f4:	1ad3      	subs	r3, r2, r3
 800c4f6:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 800c4f8:	88ba      	ldrh	r2, [r7, #4]
 800c4fa:	883b      	ldrh	r3, [r7, #0]
 800c4fc:	4413      	add	r3, r2
 800c4fe:	3b01      	subs	r3, #1
 800c500:	4a2a      	ldr	r2, [pc, #168]	; (800c5ac <ILI9341_Draw_Rectangle+0x108>)
 800c502:	8812      	ldrh	r2, [r2, #0]
 800c504:	b292      	uxth	r2, r2
 800c506:	4293      	cmp	r3, r2
 800c508:	db05      	blt.n	800c516 <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 800c50a:	4b28      	ldr	r3, [pc, #160]	; (800c5ac <ILI9341_Draw_Rectangle+0x108>)
 800c50c:	881b      	ldrh	r3, [r3, #0]
 800c50e:	b29a      	uxth	r2, r3
 800c510:	88bb      	ldrh	r3, [r7, #4]
 800c512:	1ad3      	subs	r3, r2, r3
 800c514:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 800c516:	88fa      	ldrh	r2, [r7, #6]
 800c518:	887b      	ldrh	r3, [r7, #2]
 800c51a:	4413      	add	r3, r2
 800c51c:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800c51e:	3b01      	subs	r3, #1
 800c520:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 800c522:	88ba      	ldrh	r2, [r7, #4]
 800c524:	883b      	ldrh	r3, [r7, #0]
 800c526:	4413      	add	r3, r2
 800c528:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800c52a:	3b01      	subs	r3, #1
 800c52c:	b29b      	uxth	r3, r3
 800c52e:	88b9      	ldrh	r1, [r7, #4]
 800c530:	88f8      	ldrh	r0, [r7, #6]
 800c532:	4622      	mov	r2, r4
 800c534:	f7ff fe08 	bl	800c148 <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 800c538:	883a      	ldrh	r2, [r7, #0]
 800c53a:	887b      	ldrh	r3, [r7, #2]
 800c53c:	fb12 f303 	smulbb	r3, r2, r3
 800c540:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 800c542:	2300      	movs	r3, #0
 800c544:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 800c546:	89fb      	ldrh	r3, [r7, #14]
 800c548:	f003 0301 	and.w	r3, r3, #1
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d009      	beq.n	800c564 <ILI9341_Draw_Rectangle+0xc0>
 800c550:	89fb      	ldrh	r3, [r7, #14]
 800c552:	2b01      	cmp	r3, #1
 800c554:	d906      	bls.n	800c564 <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 800c556:	2301      	movs	r3, #1
 800c558:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 800c55a:	89fb      	ldrh	r3, [r7, #14]
 800c55c:	085b      	lsrs	r3, r3, #1
 800c55e:	b29b      	uxth	r3, r3
 800c560:	005b      	lsls	r3, r3, #1
 800c562:	81fb      	strh	r3, [r7, #14]
	}

	_LCD_Write_Frame(	xpos,
 800c564:	89fc      	ldrh	r4, [r7, #14]
 800c566:	8c3a      	ldrh	r2, [r7, #32]
 800c568:	88b9      	ldrh	r1, [r7, #4]
 800c56a:	88f8      	ldrh	r0, [r7, #6]
 800c56c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c570:	9300      	str	r3, [sp, #0]
 800c572:	4623      	mov	r3, r4
 800c574:	f000 f898 	bl	800c6a8 <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 800c578:	7b7b      	ldrb	r3, [r7, #13]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d011      	beq.n	800c5a2 <ILI9341_Draw_Rectangle+0xfe>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800c57e:	88fa      	ldrh	r2, [r7, #6]
 800c580:	887b      	ldrh	r3, [r7, #2]
 800c582:	4413      	add	r3, r2
 800c584:	b29b      	uxth	r3, r3
 800c586:	3b01      	subs	r3, #1
 800c588:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800c58a:	88ba      	ldrh	r2, [r7, #4]
 800c58c:	883b      	ldrh	r3, [r7, #0]
 800c58e:	4413      	add	r3, r2
 800c590:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800c592:	3b01      	subs	r3, #1
 800c594:	b29b      	uxth	r3, r3
 800c596:	8c3a      	ldrh	r2, [r7, #32]
 800c598:	4619      	mov	r1, r3
 800c59a:	f7ff fe4b 	bl	800c234 <ILI9341_Draw_Pixel>
 800c59e:	e000      	b.n	800c5a2 <ILI9341_Draw_Rectangle+0xfe>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800c5a0:	bf00      	nop
							colour);
	}
}
 800c5a2:	3714      	adds	r7, #20
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd90      	pop	{r4, r7, pc}
 800c5a8:	20000ca2 	.word	0x20000ca2
 800c5ac:	20000ca0 	.word	0x20000ca0

0800c5b0 <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b084      	sub	sp, #16
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = rotation;
 800c5ba:	79fb      	ldrb	r3, [r7, #7]
 800c5bc:	73fb      	strb	r3, [r7, #15]

	_LCD_SendCommand(0x36);
 800c5be:	2036      	movs	r0, #54	; 0x36
 800c5c0:	f000 f922 	bl	800c808 <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 800c5c4:	7bfb      	ldrb	r3, [r7, #15]
 800c5c6:	2b03      	cmp	r3, #3
 800c5c8:	d836      	bhi.n	800c638 <ILI9341_Set_Rotation+0x88>
 800c5ca:	a201      	add	r2, pc, #4	; (adr r2, 800c5d0 <ILI9341_Set_Rotation+0x20>)
 800c5cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5d0:	0800c5e1 	.word	0x0800c5e1
 800c5d4:	0800c5f7 	.word	0x0800c5f7
 800c5d8:	0800c60d 	.word	0x0800c60d
 800c5dc:	0800c623 	.word	0x0800c623
	{
		case SCREEN_VERTICAL_1:
			_LCD_SendData(0x40|0x08);
 800c5e0:	2048      	movs	r0, #72	; 0x48
 800c5e2:	f000 f943 	bl	800c86c <_LCD_SendData>
			LCD_WIDTH = 240;
 800c5e6:	4b17      	ldr	r3, [pc, #92]	; (800c644 <ILI9341_Set_Rotation+0x94>)
 800c5e8:	22f0      	movs	r2, #240	; 0xf0
 800c5ea:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800c5ec:	4b16      	ldr	r3, [pc, #88]	; (800c648 <ILI9341_Set_Rotation+0x98>)
 800c5ee:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800c5f2:	801a      	strh	r2, [r3, #0]
			break;
 800c5f4:	e021      	b.n	800c63a <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			_LCD_SendData(0x20|0x08);
 800c5f6:	2028      	movs	r0, #40	; 0x28
 800c5f8:	f000 f938 	bl	800c86c <_LCD_SendData>
			LCD_WIDTH  = 320;
 800c5fc:	4b11      	ldr	r3, [pc, #68]	; (800c644 <ILI9341_Set_Rotation+0x94>)
 800c5fe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800c602:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800c604:	4b10      	ldr	r3, [pc, #64]	; (800c648 <ILI9341_Set_Rotation+0x98>)
 800c606:	22f0      	movs	r2, #240	; 0xf0
 800c608:	801a      	strh	r2, [r3, #0]
			break;
 800c60a:	e016      	b.n	800c63a <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			_LCD_SendData(0x80|0x08);
 800c60c:	2088      	movs	r0, #136	; 0x88
 800c60e:	f000 f92d 	bl	800c86c <_LCD_SendData>
			LCD_WIDTH  = 240;
 800c612:	4b0c      	ldr	r3, [pc, #48]	; (800c644 <ILI9341_Set_Rotation+0x94>)
 800c614:	22f0      	movs	r2, #240	; 0xf0
 800c616:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800c618:	4b0b      	ldr	r3, [pc, #44]	; (800c648 <ILI9341_Set_Rotation+0x98>)
 800c61a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800c61e:	801a      	strh	r2, [r3, #0]
			break;
 800c620:	e00b      	b.n	800c63a <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			_LCD_SendData(0x40|0x80|0x20|0x08);
 800c622:	20e8      	movs	r0, #232	; 0xe8
 800c624:	f000 f922 	bl	800c86c <_LCD_SendData>
			LCD_WIDTH  = 320;
 800c628:	4b06      	ldr	r3, [pc, #24]	; (800c644 <ILI9341_Set_Rotation+0x94>)
 800c62a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800c62e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800c630:	4b05      	ldr	r3, [pc, #20]	; (800c648 <ILI9341_Set_Rotation+0x98>)
 800c632:	22f0      	movs	r2, #240	; 0xf0
 800c634:	801a      	strh	r2, [r3, #0]
			break;
 800c636:	e000      	b.n	800c63a <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800c638:	bf00      	nop
	}
}
 800c63a:	bf00      	nop
 800c63c:	3710      	adds	r7, #16
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}
 800c642:	bf00      	nop
 800c644:	20000ca2 	.word	0x20000ca2
 800c648:	20000ca0 	.word	0x20000ca0

0800c64c <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 800c64c:	b480      	push	{r7}
 800c64e:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800c650:	4b05      	ldr	r3, [pc, #20]	; (800c668 <_LCD_Enable+0x1c>)
 800c652:	695b      	ldr	r3, [r3, #20]
 800c654:	4a04      	ldr	r2, [pc, #16]	; (800c668 <_LCD_Enable+0x1c>)
 800c656:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c65a:	6153      	str	r3, [r2, #20]
}
 800c65c:	bf00      	nop
 800c65e:	46bd      	mov	sp, r7
 800c660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c664:	4770      	bx	lr
 800c666:	bf00      	nop
 800c668:	48000400 	.word	0x48000400

0800c66c <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 800c670:	4b0c      	ldr	r3, [pc, #48]	; (800c6a4 <_LCD_Reset+0x38>)
 800c672:	695b      	ldr	r3, [r3, #20]
 800c674:	4a0b      	ldr	r2, [pc, #44]	; (800c6a4 <_LCD_Reset+0x38>)
 800c676:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c67a:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800c67c:	20c8      	movs	r0, #200	; 0xc8
 800c67e:	f7fa f8e1 	bl	8006844 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c682:	4b08      	ldr	r3, [pc, #32]	; (800c6a4 <_LCD_Reset+0x38>)
 800c684:	695b      	ldr	r3, [r3, #20]
 800c686:	4a07      	ldr	r2, [pc, #28]	; (800c6a4 <_LCD_Reset+0x38>)
 800c688:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c68c:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800c68e:	20c8      	movs	r0, #200	; 0xc8
 800c690:	f7fa f8d8 	bl	8006844 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800c694:	4b03      	ldr	r3, [pc, #12]	; (800c6a4 <_LCD_Reset+0x38>)
 800c696:	695b      	ldr	r3, [r3, #20]
 800c698:	4a02      	ldr	r2, [pc, #8]	; (800c6a4 <_LCD_Reset+0x38>)
 800c69a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c69e:	6153      	str	r3, [r2, #20]
}
 800c6a0:	bf00      	nop
 800c6a2:	bd80      	pop	{r7, pc}
 800c6a4:	48000400 	.word	0x48000400

0800c6a8 <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 800c6a8:	b5b0      	push	{r4, r5, r7, lr}
 800c6aa:	b08e      	sub	sp, #56	; 0x38
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	607b      	str	r3, [r7, #4]
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	81fb      	strh	r3, [r7, #14]
 800c6b4:	460b      	mov	r3, r1
 800c6b6:	81bb      	strh	r3, [r7, #12]
 800c6b8:	4613      	mov	r3, r2
 800c6ba:	817b      	strh	r3, [r7, #10]
 800c6bc:	466b      	mov	r3, sp
 800c6be:	461d      	mov	r5, r3

	uint32_t buffer_size = 0;
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	005b      	lsls	r3, r3, #1
 800c6c8:	4a4d      	ldr	r2, [pc, #308]	; (800c800 <_LCD_Write_Frame+0x158>)
 800c6ca:	8812      	ldrh	r2, [r2, #0]
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d202      	bcs.n	800c6d6 <_LCD_Write_Frame+0x2e>
	{
		buffer_size = chunk_size;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c6d4:	e002      	b.n	800c6dc <_LCD_Write_Frame+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 800c6d6:	4b4a      	ldr	r3, [pc, #296]	; (800c800 <_LCD_Write_Frame+0x158>)
 800c6d8:	881b      	ldrh	r3, [r3, #0]
 800c6da:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	unsigned char chifted = 	colour>>8;;
 800c6dc:	897b      	ldrh	r3, [r7, #10]
 800c6de:	0a1b      	lsrs	r3, r3, #8
 800c6e0:	b29b      	uxth	r3, r3
 800c6e2:	77fb      	strb	r3, [r7, #31]
	unsigned char burst_buffer[buffer_size];
 800c6e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	3b01      	subs	r3, #1
 800c6ea:	61bb      	str	r3, [r7, #24]
 800c6ec:	4601      	mov	r1, r0
 800c6ee:	f04f 0200 	mov.w	r2, #0
 800c6f2:	f04f 0300 	mov.w	r3, #0
 800c6f6:	f04f 0400 	mov.w	r4, #0
 800c6fa:	00d4      	lsls	r4, r2, #3
 800c6fc:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800c700:	00cb      	lsls	r3, r1, #3
 800c702:	4601      	mov	r1, r0
 800c704:	f04f 0200 	mov.w	r2, #0
 800c708:	f04f 0300 	mov.w	r3, #0
 800c70c:	f04f 0400 	mov.w	r4, #0
 800c710:	00d4      	lsls	r4, r2, #3
 800c712:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800c716:	00cb      	lsls	r3, r1, #3
 800c718:	1dc3      	adds	r3, r0, #7
 800c71a:	08db      	lsrs	r3, r3, #3
 800c71c:	00db      	lsls	r3, r3, #3
 800c71e:	ebad 0d03 	sub.w	sp, sp, r3
 800c722:	466b      	mov	r3, sp
 800c724:	3300      	adds	r3, #0
 800c726:	617b      	str	r3, [r7, #20]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800c728:	2300      	movs	r3, #0
 800c72a:	633b      	str	r3, [r7, #48]	; 0x30
 800c72c:	e00d      	b.n	800c74a <_LCD_Write_Frame+0xa2>
	{
			burst_buffer[j] = 	chifted;
 800c72e:	697a      	ldr	r2, [r7, #20]
 800c730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c732:	4413      	add	r3, r2
 800c734:	7ffa      	ldrb	r2, [r7, #31]
 800c736:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 800c738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c73a:	3301      	adds	r3, #1
 800c73c:	897a      	ldrh	r2, [r7, #10]
 800c73e:	b2d1      	uxtb	r1, r2
 800c740:	697a      	ldr	r2, [r7, #20]
 800c742:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800c744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c746:	3302      	adds	r3, #2
 800c748:	633b      	str	r3, [r7, #48]	; 0x30
 800c74a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c74e:	429a      	cmp	r2, r3
 800c750:	d3ed      	bcc.n	800c72e <_LCD_Write_Frame+0x86>
	}
	
	uint32_t Sending_size = chunk_size*2;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	005b      	lsls	r3, r3, #1
 800c756:	613b      	str	r3, [r7, #16]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 800c758:	2301      	movs	r3, #1
 800c75a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 800c75c:	2300      	movs	r3, #0
 800c75e:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d00d      	beq.n	800c782 <_LCD_Write_Frame+0xda>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 800c766:	693a      	ldr	r2, [r7, #16]
 800c768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c76a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c76e:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 800c770:	693b      	ldr	r3, [r7, #16]
 800c772:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c774:	fbb3 f2f2 	udiv	r2, r3, r2
 800c778:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c77a:	fb01 f202 	mul.w	r2, r1, r2
 800c77e:	1a9b      	subs	r3, r3, r2
 800c780:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800c782:	4b20      	ldr	r3, [pc, #128]	; (800c804 <_LCD_Write_Frame+0x15c>)
 800c784:	695b      	ldr	r3, [r3, #20]
 800c786:	4a1f      	ldr	r2, [pc, #124]	; (800c804 <_LCD_Write_Frame+0x15c>)
 800c788:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c78c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c78e:	4b1d      	ldr	r3, [pc, #116]	; (800c804 <_LCD_Write_Frame+0x15c>)
 800c790:	695b      	ldr	r3, [r3, #20]
 800c792:	4a1c      	ldr	r2, [pc, #112]	; (800c804 <_LCD_Write_Frame+0x15c>)
 800c794:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c798:	6153      	str	r3, [r2, #20]

	if(Sending_in_Block != 0)
 800c79a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d00f      	beq.n	800c7c0 <_LCD_Write_Frame+0x118>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	627b      	str	r3, [r7, #36]	; 0x24
 800c7a4:	e008      	b.n	800c7b8 <_LCD_Write_Frame+0x110>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 10);
 800c7a6:	6978      	ldr	r0, [r7, #20]
 800c7a8:	230a      	movs	r3, #10
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c7ae:	f000 f8c1 	bl	800c934 <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800c7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7b4:	3301      	adds	r3, #1
 800c7b6:	627b      	str	r3, [r7, #36]	; 0x24
 800c7b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7bc:	429a      	cmp	r2, r3
 800c7be:	d3f2      	bcc.n	800c7a6 <_LCD_Write_Frame+0xfe>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 10);
 800c7c0:	6978      	ldr	r0, [r7, #20]
 800c7c2:	230a      	movs	r3, #10
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c7c8:	f000 f8b4 	bl	800c934 <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	623b      	str	r3, [r7, #32]
 800c7d0:	e008      	b.n	800c7e4 <_LCD_Write_Frame+0x13c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c7d2:	4b0c      	ldr	r3, [pc, #48]	; (800c804 <_LCD_Write_Frame+0x15c>)
 800c7d4:	695b      	ldr	r3, [r3, #20]
 800c7d6:	4a0b      	ldr	r2, [pc, #44]	; (800c804 <_LCD_Write_Frame+0x15c>)
 800c7d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c7dc:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800c7de:	6a3b      	ldr	r3, [r7, #32]
 800c7e0:	3301      	adds	r3, #1
 800c7e2:	623b      	str	r3, [r7, #32]
 800c7e4:	6a3b      	ldr	r3, [r7, #32]
 800c7e6:	2b02      	cmp	r3, #2
 800c7e8:	ddf3      	ble.n	800c7d2 <_LCD_Write_Frame+0x12a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800c7ea:	4b06      	ldr	r3, [pc, #24]	; (800c804 <_LCD_Write_Frame+0x15c>)
 800c7ec:	695b      	ldr	r3, [r3, #20]
 800c7ee:	4a05      	ldr	r2, [pc, #20]	; (800c804 <_LCD_Write_Frame+0x15c>)
 800c7f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7f4:	6153      	str	r3, [r2, #20]
 800c7f6:	46ad      	mov	sp, r5

}
 800c7f8:	bf00      	nop
 800c7fa:	3738      	adds	r7, #56	; 0x38
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bdb0      	pop	{r4, r5, r7, pc}
 800c800:	20000ca4 	.word	0x20000ca4
 800c804:	48000400 	.word	0x48000400

0800c808 <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b084      	sub	sp, #16
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	4603      	mov	r3, r0
 800c810:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c812:	4b15      	ldr	r3, [pc, #84]	; (800c868 <_LCD_SendCommand+0x60>)
 800c814:	695b      	ldr	r3, [r3, #20]
 800c816:	4a14      	ldr	r2, [pc, #80]	; (800c868 <_LCD_SendCommand+0x60>)
 800c818:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c81c:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800c81e:	4b12      	ldr	r3, [pc, #72]	; (800c868 <_LCD_SendCommand+0x60>)
 800c820:	695b      	ldr	r3, [r3, #20]
 800c822:	4a11      	ldr	r2, [pc, #68]	; (800c868 <_LCD_SendCommand+0x60>)
 800c824:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c828:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(command, 0 , 0);
 800c82a:	79fb      	ldrb	r3, [r7, #7]
 800c82c:	2200      	movs	r2, #0
 800c82e:	2100      	movs	r1, #0
 800c830:	4618      	mov	r0, r3
 800c832:	f000 f84d 	bl	800c8d0 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800c836:	2300      	movs	r3, #0
 800c838:	60fb      	str	r3, [r7, #12]
 800c83a:	e008      	b.n	800c84e <_LCD_SendCommand+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c83c:	4b0a      	ldr	r3, [pc, #40]	; (800c868 <_LCD_SendCommand+0x60>)
 800c83e:	695b      	ldr	r3, [r3, #20]
 800c840:	4a09      	ldr	r2, [pc, #36]	; (800c868 <_LCD_SendCommand+0x60>)
 800c842:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c846:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	3301      	adds	r3, #1
 800c84c:	60fb      	str	r3, [r7, #12]
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	2b02      	cmp	r3, #2
 800c852:	ddf3      	ble.n	800c83c <_LCD_SendCommand+0x34>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800c854:	4b04      	ldr	r3, [pc, #16]	; (800c868 <_LCD_SendCommand+0x60>)
 800c856:	695b      	ldr	r3, [r3, #20]
 800c858:	4a03      	ldr	r2, [pc, #12]	; (800c868 <_LCD_SendCommand+0x60>)
 800c85a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c85e:	6153      	str	r3, [r2, #20]
}
 800c860:	bf00      	nop
 800c862:	3710      	adds	r7, #16
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}
 800c868:	48000400 	.word	0x48000400

0800c86c <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b084      	sub	sp, #16
 800c870:	af00      	add	r7, sp, #0
 800c872:	4603      	mov	r3, r0
 800c874:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800c876:	4b15      	ldr	r3, [pc, #84]	; (800c8cc <_LCD_SendData+0x60>)
 800c878:	695b      	ldr	r3, [r3, #20]
 800c87a:	4a14      	ldr	r2, [pc, #80]	; (800c8cc <_LCD_SendData+0x60>)
 800c87c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c880:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c882:	4b12      	ldr	r3, [pc, #72]	; (800c8cc <_LCD_SendData+0x60>)
 800c884:	695b      	ldr	r3, [r3, #20]
 800c886:	4a11      	ldr	r2, [pc, #68]	; (800c8cc <_LCD_SendData+0x60>)
 800c888:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c88c:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(data, 0 , 0);
 800c88e:	79fb      	ldrb	r3, [r7, #7]
 800c890:	2200      	movs	r2, #0
 800c892:	2100      	movs	r1, #0
 800c894:	4618      	mov	r0, r3
 800c896:	f000 f81b 	bl	800c8d0 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800c89a:	2300      	movs	r3, #0
 800c89c:	60fb      	str	r3, [r7, #12]
 800c89e:	e008      	b.n	800c8b2 <_LCD_SendData+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c8a0:	4b0a      	ldr	r3, [pc, #40]	; (800c8cc <_LCD_SendData+0x60>)
 800c8a2:	695b      	ldr	r3, [r3, #20]
 800c8a4:	4a09      	ldr	r2, [pc, #36]	; (800c8cc <_LCD_SendData+0x60>)
 800c8a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c8aa:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	3301      	adds	r3, #1
 800c8b0:	60fb      	str	r3, [r7, #12]
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	2b02      	cmp	r3, #2
 800c8b6:	ddf3      	ble.n	800c8a0 <_LCD_SendData+0x34>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c8b8:	4b04      	ldr	r3, [pc, #16]	; (800c8cc <_LCD_SendData+0x60>)
 800c8ba:	695b      	ldr	r3, [r3, #20]
 800c8bc:	4a03      	ldr	r2, [pc, #12]	; (800c8cc <_LCD_SendData+0x60>)
 800c8be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c8c2:	6153      	str	r3, [r2, #20]
}
 800c8c4:	bf00      	nop
 800c8c6:	3710      	adds	r7, #16
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}
 800c8cc:	48000400 	.word	0x48000400

0800c8d0 <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800c8d0:	b480      	push	{r7}
 800c8d2:	b085      	sub	sp, #20
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	71fb      	strb	r3, [r7, #7]
 800c8da:	460b      	mov	r3, r1
 800c8dc:	71bb      	strb	r3, [r7, #6]
 800c8de:	4613      	mov	r3, r2
 800c8e0:	717b      	strb	r3, [r7, #5]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	60fb      	str	r3, [r7, #12]
 800c8e6:	e003      	b.n	800c8f0 <_SPI_SendByte+0x20>
   		asm("nop");
 800c8e8:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	3301      	adds	r3, #1
 800c8ee:	60fb      	str	r3, [r7, #12]
 800c8f0:	79bb      	ldrb	r3, [r7, #6]
 800c8f2:	68fa      	ldr	r2, [r7, #12]
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	dbf7      	blt.n	800c8e8 <_SPI_SendByte+0x18>

	// check transmit buffer empty
	if((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800c8f8:	4b0c      	ldr	r3, [pc, #48]	; (800c92c <_SPI_SendByte+0x5c>)
 800c8fa:	689b      	ldr	r3, [r3, #8]
 800c8fc:	f003 0302 	and.w	r3, r3, #2
 800c900:	2b02      	cmp	r3, #2
 800c902:	d102      	bne.n	800c90a <_SPI_SendByte+0x3a>
	{
		*(volatile uint8_t *)&SPI_PERIPH->DR = data_buffer;
 800c904:	4a0a      	ldr	r2, [pc, #40]	; (800c930 <_SPI_SendByte+0x60>)
 800c906:	79fb      	ldrb	r3, [r7, #7]
 800c908:	7013      	strb	r3, [r2, #0]
	}

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800c90a:	2300      	movs	r3, #0
 800c90c:	60bb      	str	r3, [r7, #8]
 800c90e:	e003      	b.n	800c918 <_SPI_SendByte+0x48>
   		asm("nop");
 800c910:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	3301      	adds	r3, #1
 800c916:	60bb      	str	r3, [r7, #8]
 800c918:	797b      	ldrb	r3, [r7, #5]
 800c91a:	68ba      	ldr	r2, [r7, #8]
 800c91c:	429a      	cmp	r2, r3
 800c91e:	dbf7      	blt.n	800c910 <_SPI_SendByte+0x40>

#endif

}
 800c920:	bf00      	nop
 800c922:	3714      	adds	r7, #20
 800c924:	46bd      	mov	sp, r7
 800c926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92a:	4770      	bx	lr
 800c92c:	40003c00 	.word	0x40003c00
 800c930:	40003c0c 	.word	0x40003c0c

0800c934 <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800c934:	b480      	push	{r7}
 800c936:	b089      	sub	sp, #36	; 0x24
 800c938:	af00      	add	r7, sp, #0
 800c93a:	60f8      	str	r0, [r7, #12]
 800c93c:	60b9      	str	r1, [r7, #8]
 800c93e:	4611      	mov	r1, r2
 800c940:	461a      	mov	r2, r3
 800c942:	460b      	mov	r3, r1
 800c944:	71fb      	strb	r3, [r7, #7]
 800c946:	4613      	mov	r3, r2
 800c948:	71bb      	strb	r3, [r7, #6]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800c94a:	2300      	movs	r3, #0
 800c94c:	61fb      	str	r3, [r7, #28]
 800c94e:	e003      	b.n	800c958 <_SPI_SendByteMultiByte+0x24>
   		asm("nop");
 800c950:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800c952:	69fb      	ldr	r3, [r7, #28]
 800c954:	3301      	adds	r3, #1
 800c956:	61fb      	str	r3, [r7, #28]
 800c958:	79fb      	ldrb	r3, [r7, #7]
 800c95a:	69fa      	ldr	r2, [r7, #28]
 800c95c:	429a      	cmp	r2, r3
 800c95e:	dbf7      	blt.n	800c950 <_SPI_SendByteMultiByte+0x1c>

	uint8_t *p_data_buffer = (uint8_t *)data_buffer;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	61bb      	str	r3, [r7, #24]
	//volatile uint16_t TxXferCount = (uint16_t)buffer_size;

	while (buffer_size > 0U)
 800c964:	e01d      	b.n	800c9a2 <_SPI_SendByteMultiByte+0x6e>
	{
		// check transmit buffer empty
		if ((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800c966:	4b1c      	ldr	r3, [pc, #112]	; (800c9d8 <_SPI_SendByteMultiByte+0xa4>)
 800c968:	689b      	ldr	r3, [r3, #8]
 800c96a:	f003 0302 	and.w	r3, r3, #2
 800c96e:	2b02      	cmp	r3, #2
 800c970:	d117      	bne.n	800c9a2 <_SPI_SendByteMultiByte+0x6e>
		{
			if (buffer_size > 1U)
 800c972:	68bb      	ldr	r3, [r7, #8]
 800c974:	2b01      	cmp	r3, #1
 800c976:	d90a      	bls.n	800c98e <_SPI_SendByteMultiByte+0x5a>
			{
				// write on the data register in packing mode
				SPI_PERIPH->DR = *((uint16_t *)p_data_buffer);
 800c978:	69bb      	ldr	r3, [r7, #24]
 800c97a:	881a      	ldrh	r2, [r3, #0]
 800c97c:	4b16      	ldr	r3, [pc, #88]	; (800c9d8 <_SPI_SendByteMultiByte+0xa4>)
 800c97e:	60da      	str	r2, [r3, #12]
				p_data_buffer += sizeof(uint16_t);
 800c980:	69bb      	ldr	r3, [r7, #24]
 800c982:	3302      	adds	r3, #2
 800c984:	61bb      	str	r3, [r7, #24]
				buffer_size -= 2U;
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	3b02      	subs	r3, #2
 800c98a:	60bb      	str	r3, [r7, #8]
 800c98c:	e009      	b.n	800c9a2 <_SPI_SendByteMultiByte+0x6e>
			}
			else
			{
				*((volatile uint8_t *)&SPI_PERIPH->DR) = (*p_data_buffer);
 800c98e:	4a13      	ldr	r2, [pc, #76]	; (800c9dc <_SPI_SendByteMultiByte+0xa8>)
 800c990:	69bb      	ldr	r3, [r7, #24]
 800c992:	781b      	ldrb	r3, [r3, #0]
 800c994:	7013      	strb	r3, [r2, #0]
				p_data_buffer++;
 800c996:	69bb      	ldr	r3, [r7, #24]
 800c998:	3301      	adds	r3, #1
 800c99a:	61bb      	str	r3, [r7, #24]
				buffer_size--;
 800c99c:	68bb      	ldr	r3, [r7, #8]
 800c99e:	3b01      	subs	r3, #1
 800c9a0:	60bb      	str	r3, [r7, #8]
	while (buffer_size > 0U)
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d1de      	bne.n	800c966 <_SPI_SendByteMultiByte+0x32>
			}
		}
	}

	// clear SPI overrun flag
	SPI_PERIPH->SR &= ~(SPI_SR_OVR);
 800c9a8:	4b0b      	ldr	r3, [pc, #44]	; (800c9d8 <_SPI_SendByteMultiByte+0xa4>)
 800c9aa:	689b      	ldr	r3, [r3, #8]
 800c9ac:	4a0a      	ldr	r2, [pc, #40]	; (800c9d8 <_SPI_SendByteMultiByte+0xa4>)
 800c9ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c9b2:	6093      	str	r3, [r2, #8]

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	617b      	str	r3, [r7, #20]
 800c9b8:	e003      	b.n	800c9c2 <_SPI_SendByteMultiByte+0x8e>
   		asm("nop");
 800c9ba:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	3301      	adds	r3, #1
 800c9c0:	617b      	str	r3, [r7, #20]
 800c9c2:	79bb      	ldrb	r3, [r7, #6]
 800c9c4:	697a      	ldr	r2, [r7, #20]
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	dbf7      	blt.n	800c9ba <_SPI_SendByteMultiByte+0x86>

#endif

}
 800c9ca:	bf00      	nop
 800c9cc:	3724      	adds	r7, #36	; 0x24
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d4:	4770      	bx	lr
 800c9d6:	bf00      	nop
 800c9d8:	40003c00 	.word	0x40003c00
 800c9dc:	40003c0c 	.word	0x40003c0c

0800c9e0 <__errno>:
 800c9e0:	4b01      	ldr	r3, [pc, #4]	; (800c9e8 <__errno+0x8>)
 800c9e2:	6818      	ldr	r0, [r3, #0]
 800c9e4:	4770      	bx	lr
 800c9e6:	bf00      	nop
 800c9e8:	20001ce8 	.word	0x20001ce8

0800c9ec <__libc_init_array>:
 800c9ec:	b570      	push	{r4, r5, r6, lr}
 800c9ee:	4e0d      	ldr	r6, [pc, #52]	; (800ca24 <__libc_init_array+0x38>)
 800c9f0:	4c0d      	ldr	r4, [pc, #52]	; (800ca28 <__libc_init_array+0x3c>)
 800c9f2:	1ba4      	subs	r4, r4, r6
 800c9f4:	10a4      	asrs	r4, r4, #2
 800c9f6:	2500      	movs	r5, #0
 800c9f8:	42a5      	cmp	r5, r4
 800c9fa:	d109      	bne.n	800ca10 <__libc_init_array+0x24>
 800c9fc:	4e0b      	ldr	r6, [pc, #44]	; (800ca2c <__libc_init_array+0x40>)
 800c9fe:	4c0c      	ldr	r4, [pc, #48]	; (800ca30 <__libc_init_array+0x44>)
 800ca00:	f002 fc32 	bl	800f268 <_init>
 800ca04:	1ba4      	subs	r4, r4, r6
 800ca06:	10a4      	asrs	r4, r4, #2
 800ca08:	2500      	movs	r5, #0
 800ca0a:	42a5      	cmp	r5, r4
 800ca0c:	d105      	bne.n	800ca1a <__libc_init_array+0x2e>
 800ca0e:	bd70      	pop	{r4, r5, r6, pc}
 800ca10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ca14:	4798      	blx	r3
 800ca16:	3501      	adds	r5, #1
 800ca18:	e7ee      	b.n	800c9f8 <__libc_init_array+0xc>
 800ca1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ca1e:	4798      	blx	r3
 800ca20:	3501      	adds	r5, #1
 800ca22:	e7f2      	b.n	800ca0a <__libc_init_array+0x1e>
 800ca24:	080104d8 	.word	0x080104d8
 800ca28:	080104d8 	.word	0x080104d8
 800ca2c:	080104d8 	.word	0x080104d8
 800ca30:	080104dc 	.word	0x080104dc

0800ca34 <memset>:
 800ca34:	4402      	add	r2, r0
 800ca36:	4603      	mov	r3, r0
 800ca38:	4293      	cmp	r3, r2
 800ca3a:	d100      	bne.n	800ca3e <memset+0xa>
 800ca3c:	4770      	bx	lr
 800ca3e:	f803 1b01 	strb.w	r1, [r3], #1
 800ca42:	e7f9      	b.n	800ca38 <memset+0x4>

0800ca44 <__cvt>:
 800ca44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca48:	ec55 4b10 	vmov	r4, r5, d0
 800ca4c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800ca4e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ca52:	2d00      	cmp	r5, #0
 800ca54:	460e      	mov	r6, r1
 800ca56:	4691      	mov	r9, r2
 800ca58:	4619      	mov	r1, r3
 800ca5a:	bfb8      	it	lt
 800ca5c:	4622      	movlt	r2, r4
 800ca5e:	462b      	mov	r3, r5
 800ca60:	f027 0720 	bic.w	r7, r7, #32
 800ca64:	bfbb      	ittet	lt
 800ca66:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ca6a:	461d      	movlt	r5, r3
 800ca6c:	2300      	movge	r3, #0
 800ca6e:	232d      	movlt	r3, #45	; 0x2d
 800ca70:	bfb8      	it	lt
 800ca72:	4614      	movlt	r4, r2
 800ca74:	2f46      	cmp	r7, #70	; 0x46
 800ca76:	700b      	strb	r3, [r1, #0]
 800ca78:	d004      	beq.n	800ca84 <__cvt+0x40>
 800ca7a:	2f45      	cmp	r7, #69	; 0x45
 800ca7c:	d100      	bne.n	800ca80 <__cvt+0x3c>
 800ca7e:	3601      	adds	r6, #1
 800ca80:	2102      	movs	r1, #2
 800ca82:	e000      	b.n	800ca86 <__cvt+0x42>
 800ca84:	2103      	movs	r1, #3
 800ca86:	ab03      	add	r3, sp, #12
 800ca88:	9301      	str	r3, [sp, #4]
 800ca8a:	ab02      	add	r3, sp, #8
 800ca8c:	9300      	str	r3, [sp, #0]
 800ca8e:	4632      	mov	r2, r6
 800ca90:	4653      	mov	r3, sl
 800ca92:	ec45 4b10 	vmov	d0, r4, r5
 800ca96:	f000 fe27 	bl	800d6e8 <_dtoa_r>
 800ca9a:	2f47      	cmp	r7, #71	; 0x47
 800ca9c:	4680      	mov	r8, r0
 800ca9e:	d102      	bne.n	800caa6 <__cvt+0x62>
 800caa0:	f019 0f01 	tst.w	r9, #1
 800caa4:	d026      	beq.n	800caf4 <__cvt+0xb0>
 800caa6:	2f46      	cmp	r7, #70	; 0x46
 800caa8:	eb08 0906 	add.w	r9, r8, r6
 800caac:	d111      	bne.n	800cad2 <__cvt+0x8e>
 800caae:	f898 3000 	ldrb.w	r3, [r8]
 800cab2:	2b30      	cmp	r3, #48	; 0x30
 800cab4:	d10a      	bne.n	800cacc <__cvt+0x88>
 800cab6:	2200      	movs	r2, #0
 800cab8:	2300      	movs	r3, #0
 800caba:	4620      	mov	r0, r4
 800cabc:	4629      	mov	r1, r5
 800cabe:	f7f4 f82b 	bl	8000b18 <__aeabi_dcmpeq>
 800cac2:	b918      	cbnz	r0, 800cacc <__cvt+0x88>
 800cac4:	f1c6 0601 	rsb	r6, r6, #1
 800cac8:	f8ca 6000 	str.w	r6, [sl]
 800cacc:	f8da 3000 	ldr.w	r3, [sl]
 800cad0:	4499      	add	r9, r3
 800cad2:	2200      	movs	r2, #0
 800cad4:	2300      	movs	r3, #0
 800cad6:	4620      	mov	r0, r4
 800cad8:	4629      	mov	r1, r5
 800cada:	f7f4 f81d 	bl	8000b18 <__aeabi_dcmpeq>
 800cade:	b938      	cbnz	r0, 800caf0 <__cvt+0xac>
 800cae0:	2230      	movs	r2, #48	; 0x30
 800cae2:	9b03      	ldr	r3, [sp, #12]
 800cae4:	454b      	cmp	r3, r9
 800cae6:	d205      	bcs.n	800caf4 <__cvt+0xb0>
 800cae8:	1c59      	adds	r1, r3, #1
 800caea:	9103      	str	r1, [sp, #12]
 800caec:	701a      	strb	r2, [r3, #0]
 800caee:	e7f8      	b.n	800cae2 <__cvt+0x9e>
 800caf0:	f8cd 900c 	str.w	r9, [sp, #12]
 800caf4:	9b03      	ldr	r3, [sp, #12]
 800caf6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800caf8:	eba3 0308 	sub.w	r3, r3, r8
 800cafc:	4640      	mov	r0, r8
 800cafe:	6013      	str	r3, [r2, #0]
 800cb00:	b004      	add	sp, #16
 800cb02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800cb06 <__exponent>:
 800cb06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb08:	2900      	cmp	r1, #0
 800cb0a:	4604      	mov	r4, r0
 800cb0c:	bfba      	itte	lt
 800cb0e:	4249      	neglt	r1, r1
 800cb10:	232d      	movlt	r3, #45	; 0x2d
 800cb12:	232b      	movge	r3, #43	; 0x2b
 800cb14:	2909      	cmp	r1, #9
 800cb16:	f804 2b02 	strb.w	r2, [r4], #2
 800cb1a:	7043      	strb	r3, [r0, #1]
 800cb1c:	dd20      	ble.n	800cb60 <__exponent+0x5a>
 800cb1e:	f10d 0307 	add.w	r3, sp, #7
 800cb22:	461f      	mov	r7, r3
 800cb24:	260a      	movs	r6, #10
 800cb26:	fb91 f5f6 	sdiv	r5, r1, r6
 800cb2a:	fb06 1115 	mls	r1, r6, r5, r1
 800cb2e:	3130      	adds	r1, #48	; 0x30
 800cb30:	2d09      	cmp	r5, #9
 800cb32:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cb36:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800cb3a:	4629      	mov	r1, r5
 800cb3c:	dc09      	bgt.n	800cb52 <__exponent+0x4c>
 800cb3e:	3130      	adds	r1, #48	; 0x30
 800cb40:	3b02      	subs	r3, #2
 800cb42:	f802 1c01 	strb.w	r1, [r2, #-1]
 800cb46:	42bb      	cmp	r3, r7
 800cb48:	4622      	mov	r2, r4
 800cb4a:	d304      	bcc.n	800cb56 <__exponent+0x50>
 800cb4c:	1a10      	subs	r0, r2, r0
 800cb4e:	b003      	add	sp, #12
 800cb50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb52:	4613      	mov	r3, r2
 800cb54:	e7e7      	b.n	800cb26 <__exponent+0x20>
 800cb56:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb5a:	f804 2b01 	strb.w	r2, [r4], #1
 800cb5e:	e7f2      	b.n	800cb46 <__exponent+0x40>
 800cb60:	2330      	movs	r3, #48	; 0x30
 800cb62:	4419      	add	r1, r3
 800cb64:	7083      	strb	r3, [r0, #2]
 800cb66:	1d02      	adds	r2, r0, #4
 800cb68:	70c1      	strb	r1, [r0, #3]
 800cb6a:	e7ef      	b.n	800cb4c <__exponent+0x46>

0800cb6c <_printf_float>:
 800cb6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb70:	b08d      	sub	sp, #52	; 0x34
 800cb72:	460c      	mov	r4, r1
 800cb74:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800cb78:	4616      	mov	r6, r2
 800cb7a:	461f      	mov	r7, r3
 800cb7c:	4605      	mov	r5, r0
 800cb7e:	f001 fce5 	bl	800e54c <_localeconv_r>
 800cb82:	6803      	ldr	r3, [r0, #0]
 800cb84:	9304      	str	r3, [sp, #16]
 800cb86:	4618      	mov	r0, r3
 800cb88:	f7f3 fb4a 	bl	8000220 <strlen>
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	930a      	str	r3, [sp, #40]	; 0x28
 800cb90:	f8d8 3000 	ldr.w	r3, [r8]
 800cb94:	9005      	str	r0, [sp, #20]
 800cb96:	3307      	adds	r3, #7
 800cb98:	f023 0307 	bic.w	r3, r3, #7
 800cb9c:	f103 0208 	add.w	r2, r3, #8
 800cba0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800cba4:	f8d4 b000 	ldr.w	fp, [r4]
 800cba8:	f8c8 2000 	str.w	r2, [r8]
 800cbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800cbb4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800cbb8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cbbc:	9307      	str	r3, [sp, #28]
 800cbbe:	f8cd 8018 	str.w	r8, [sp, #24]
 800cbc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cbc6:	4ba7      	ldr	r3, [pc, #668]	; (800ce64 <_printf_float+0x2f8>)
 800cbc8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cbcc:	f7f3 ffd6 	bl	8000b7c <__aeabi_dcmpun>
 800cbd0:	bb70      	cbnz	r0, 800cc30 <_printf_float+0xc4>
 800cbd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cbd6:	4ba3      	ldr	r3, [pc, #652]	; (800ce64 <_printf_float+0x2f8>)
 800cbd8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cbdc:	f7f3 ffb0 	bl	8000b40 <__aeabi_dcmple>
 800cbe0:	bb30      	cbnz	r0, 800cc30 <_printf_float+0xc4>
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	4640      	mov	r0, r8
 800cbe8:	4649      	mov	r1, r9
 800cbea:	f7f3 ff9f 	bl	8000b2c <__aeabi_dcmplt>
 800cbee:	b110      	cbz	r0, 800cbf6 <_printf_float+0x8a>
 800cbf0:	232d      	movs	r3, #45	; 0x2d
 800cbf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbf6:	4a9c      	ldr	r2, [pc, #624]	; (800ce68 <_printf_float+0x2fc>)
 800cbf8:	4b9c      	ldr	r3, [pc, #624]	; (800ce6c <_printf_float+0x300>)
 800cbfa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800cbfe:	bf8c      	ite	hi
 800cc00:	4690      	movhi	r8, r2
 800cc02:	4698      	movls	r8, r3
 800cc04:	2303      	movs	r3, #3
 800cc06:	f02b 0204 	bic.w	r2, fp, #4
 800cc0a:	6123      	str	r3, [r4, #16]
 800cc0c:	6022      	str	r2, [r4, #0]
 800cc0e:	f04f 0900 	mov.w	r9, #0
 800cc12:	9700      	str	r7, [sp, #0]
 800cc14:	4633      	mov	r3, r6
 800cc16:	aa0b      	add	r2, sp, #44	; 0x2c
 800cc18:	4621      	mov	r1, r4
 800cc1a:	4628      	mov	r0, r5
 800cc1c:	f000 f9e6 	bl	800cfec <_printf_common>
 800cc20:	3001      	adds	r0, #1
 800cc22:	f040 808d 	bne.w	800cd40 <_printf_float+0x1d4>
 800cc26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc2a:	b00d      	add	sp, #52	; 0x34
 800cc2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc30:	4642      	mov	r2, r8
 800cc32:	464b      	mov	r3, r9
 800cc34:	4640      	mov	r0, r8
 800cc36:	4649      	mov	r1, r9
 800cc38:	f7f3 ffa0 	bl	8000b7c <__aeabi_dcmpun>
 800cc3c:	b110      	cbz	r0, 800cc44 <_printf_float+0xd8>
 800cc3e:	4a8c      	ldr	r2, [pc, #560]	; (800ce70 <_printf_float+0x304>)
 800cc40:	4b8c      	ldr	r3, [pc, #560]	; (800ce74 <_printf_float+0x308>)
 800cc42:	e7da      	b.n	800cbfa <_printf_float+0x8e>
 800cc44:	6861      	ldr	r1, [r4, #4]
 800cc46:	1c4b      	adds	r3, r1, #1
 800cc48:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800cc4c:	a80a      	add	r0, sp, #40	; 0x28
 800cc4e:	d13e      	bne.n	800ccce <_printf_float+0x162>
 800cc50:	2306      	movs	r3, #6
 800cc52:	6063      	str	r3, [r4, #4]
 800cc54:	2300      	movs	r3, #0
 800cc56:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800cc5a:	ab09      	add	r3, sp, #36	; 0x24
 800cc5c:	9300      	str	r3, [sp, #0]
 800cc5e:	ec49 8b10 	vmov	d0, r8, r9
 800cc62:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cc66:	6022      	str	r2, [r4, #0]
 800cc68:	f8cd a004 	str.w	sl, [sp, #4]
 800cc6c:	6861      	ldr	r1, [r4, #4]
 800cc6e:	4628      	mov	r0, r5
 800cc70:	f7ff fee8 	bl	800ca44 <__cvt>
 800cc74:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800cc78:	2b47      	cmp	r3, #71	; 0x47
 800cc7a:	4680      	mov	r8, r0
 800cc7c:	d109      	bne.n	800cc92 <_printf_float+0x126>
 800cc7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc80:	1cd8      	adds	r0, r3, #3
 800cc82:	db02      	blt.n	800cc8a <_printf_float+0x11e>
 800cc84:	6862      	ldr	r2, [r4, #4]
 800cc86:	4293      	cmp	r3, r2
 800cc88:	dd47      	ble.n	800cd1a <_printf_float+0x1ae>
 800cc8a:	f1aa 0a02 	sub.w	sl, sl, #2
 800cc8e:	fa5f fa8a 	uxtb.w	sl, sl
 800cc92:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800cc96:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cc98:	d824      	bhi.n	800cce4 <_printf_float+0x178>
 800cc9a:	3901      	subs	r1, #1
 800cc9c:	4652      	mov	r2, sl
 800cc9e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cca2:	9109      	str	r1, [sp, #36]	; 0x24
 800cca4:	f7ff ff2f 	bl	800cb06 <__exponent>
 800cca8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ccaa:	1813      	adds	r3, r2, r0
 800ccac:	2a01      	cmp	r2, #1
 800ccae:	4681      	mov	r9, r0
 800ccb0:	6123      	str	r3, [r4, #16]
 800ccb2:	dc02      	bgt.n	800ccba <_printf_float+0x14e>
 800ccb4:	6822      	ldr	r2, [r4, #0]
 800ccb6:	07d1      	lsls	r1, r2, #31
 800ccb8:	d501      	bpl.n	800ccbe <_printf_float+0x152>
 800ccba:	3301      	adds	r3, #1
 800ccbc:	6123      	str	r3, [r4, #16]
 800ccbe:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d0a5      	beq.n	800cc12 <_printf_float+0xa6>
 800ccc6:	232d      	movs	r3, #45	; 0x2d
 800ccc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cccc:	e7a1      	b.n	800cc12 <_printf_float+0xa6>
 800ccce:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800ccd2:	f000 8177 	beq.w	800cfc4 <_printf_float+0x458>
 800ccd6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ccda:	d1bb      	bne.n	800cc54 <_printf_float+0xe8>
 800ccdc:	2900      	cmp	r1, #0
 800ccde:	d1b9      	bne.n	800cc54 <_printf_float+0xe8>
 800cce0:	2301      	movs	r3, #1
 800cce2:	e7b6      	b.n	800cc52 <_printf_float+0xe6>
 800cce4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800cce8:	d119      	bne.n	800cd1e <_printf_float+0x1b2>
 800ccea:	2900      	cmp	r1, #0
 800ccec:	6863      	ldr	r3, [r4, #4]
 800ccee:	dd0c      	ble.n	800cd0a <_printf_float+0x19e>
 800ccf0:	6121      	str	r1, [r4, #16]
 800ccf2:	b913      	cbnz	r3, 800ccfa <_printf_float+0x18e>
 800ccf4:	6822      	ldr	r2, [r4, #0]
 800ccf6:	07d2      	lsls	r2, r2, #31
 800ccf8:	d502      	bpl.n	800cd00 <_printf_float+0x194>
 800ccfa:	3301      	adds	r3, #1
 800ccfc:	440b      	add	r3, r1
 800ccfe:	6123      	str	r3, [r4, #16]
 800cd00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd02:	65a3      	str	r3, [r4, #88]	; 0x58
 800cd04:	f04f 0900 	mov.w	r9, #0
 800cd08:	e7d9      	b.n	800ccbe <_printf_float+0x152>
 800cd0a:	b913      	cbnz	r3, 800cd12 <_printf_float+0x1a6>
 800cd0c:	6822      	ldr	r2, [r4, #0]
 800cd0e:	07d0      	lsls	r0, r2, #31
 800cd10:	d501      	bpl.n	800cd16 <_printf_float+0x1aa>
 800cd12:	3302      	adds	r3, #2
 800cd14:	e7f3      	b.n	800ccfe <_printf_float+0x192>
 800cd16:	2301      	movs	r3, #1
 800cd18:	e7f1      	b.n	800ccfe <_printf_float+0x192>
 800cd1a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800cd1e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800cd22:	4293      	cmp	r3, r2
 800cd24:	db05      	blt.n	800cd32 <_printf_float+0x1c6>
 800cd26:	6822      	ldr	r2, [r4, #0]
 800cd28:	6123      	str	r3, [r4, #16]
 800cd2a:	07d1      	lsls	r1, r2, #31
 800cd2c:	d5e8      	bpl.n	800cd00 <_printf_float+0x194>
 800cd2e:	3301      	adds	r3, #1
 800cd30:	e7e5      	b.n	800ccfe <_printf_float+0x192>
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	bfd4      	ite	le
 800cd36:	f1c3 0302 	rsble	r3, r3, #2
 800cd3a:	2301      	movgt	r3, #1
 800cd3c:	4413      	add	r3, r2
 800cd3e:	e7de      	b.n	800ccfe <_printf_float+0x192>
 800cd40:	6823      	ldr	r3, [r4, #0]
 800cd42:	055a      	lsls	r2, r3, #21
 800cd44:	d407      	bmi.n	800cd56 <_printf_float+0x1ea>
 800cd46:	6923      	ldr	r3, [r4, #16]
 800cd48:	4642      	mov	r2, r8
 800cd4a:	4631      	mov	r1, r6
 800cd4c:	4628      	mov	r0, r5
 800cd4e:	47b8      	blx	r7
 800cd50:	3001      	adds	r0, #1
 800cd52:	d12b      	bne.n	800cdac <_printf_float+0x240>
 800cd54:	e767      	b.n	800cc26 <_printf_float+0xba>
 800cd56:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800cd5a:	f240 80dc 	bls.w	800cf16 <_printf_float+0x3aa>
 800cd5e:	2200      	movs	r2, #0
 800cd60:	2300      	movs	r3, #0
 800cd62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cd66:	f7f3 fed7 	bl	8000b18 <__aeabi_dcmpeq>
 800cd6a:	2800      	cmp	r0, #0
 800cd6c:	d033      	beq.n	800cdd6 <_printf_float+0x26a>
 800cd6e:	2301      	movs	r3, #1
 800cd70:	4a41      	ldr	r2, [pc, #260]	; (800ce78 <_printf_float+0x30c>)
 800cd72:	4631      	mov	r1, r6
 800cd74:	4628      	mov	r0, r5
 800cd76:	47b8      	blx	r7
 800cd78:	3001      	adds	r0, #1
 800cd7a:	f43f af54 	beq.w	800cc26 <_printf_float+0xba>
 800cd7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cd82:	429a      	cmp	r2, r3
 800cd84:	db02      	blt.n	800cd8c <_printf_float+0x220>
 800cd86:	6823      	ldr	r3, [r4, #0]
 800cd88:	07d8      	lsls	r0, r3, #31
 800cd8a:	d50f      	bpl.n	800cdac <_printf_float+0x240>
 800cd8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cd90:	4631      	mov	r1, r6
 800cd92:	4628      	mov	r0, r5
 800cd94:	47b8      	blx	r7
 800cd96:	3001      	adds	r0, #1
 800cd98:	f43f af45 	beq.w	800cc26 <_printf_float+0xba>
 800cd9c:	f04f 0800 	mov.w	r8, #0
 800cda0:	f104 091a 	add.w	r9, r4, #26
 800cda4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cda6:	3b01      	subs	r3, #1
 800cda8:	4543      	cmp	r3, r8
 800cdaa:	dc09      	bgt.n	800cdc0 <_printf_float+0x254>
 800cdac:	6823      	ldr	r3, [r4, #0]
 800cdae:	079b      	lsls	r3, r3, #30
 800cdb0:	f100 8103 	bmi.w	800cfba <_printf_float+0x44e>
 800cdb4:	68e0      	ldr	r0, [r4, #12]
 800cdb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cdb8:	4298      	cmp	r0, r3
 800cdba:	bfb8      	it	lt
 800cdbc:	4618      	movlt	r0, r3
 800cdbe:	e734      	b.n	800cc2a <_printf_float+0xbe>
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	464a      	mov	r2, r9
 800cdc4:	4631      	mov	r1, r6
 800cdc6:	4628      	mov	r0, r5
 800cdc8:	47b8      	blx	r7
 800cdca:	3001      	adds	r0, #1
 800cdcc:	f43f af2b 	beq.w	800cc26 <_printf_float+0xba>
 800cdd0:	f108 0801 	add.w	r8, r8, #1
 800cdd4:	e7e6      	b.n	800cda4 <_printf_float+0x238>
 800cdd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	dc2b      	bgt.n	800ce34 <_printf_float+0x2c8>
 800cddc:	2301      	movs	r3, #1
 800cdde:	4a26      	ldr	r2, [pc, #152]	; (800ce78 <_printf_float+0x30c>)
 800cde0:	4631      	mov	r1, r6
 800cde2:	4628      	mov	r0, r5
 800cde4:	47b8      	blx	r7
 800cde6:	3001      	adds	r0, #1
 800cde8:	f43f af1d 	beq.w	800cc26 <_printf_float+0xba>
 800cdec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdee:	b923      	cbnz	r3, 800cdfa <_printf_float+0x28e>
 800cdf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdf2:	b913      	cbnz	r3, 800cdfa <_printf_float+0x28e>
 800cdf4:	6823      	ldr	r3, [r4, #0]
 800cdf6:	07d9      	lsls	r1, r3, #31
 800cdf8:	d5d8      	bpl.n	800cdac <_printf_float+0x240>
 800cdfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cdfe:	4631      	mov	r1, r6
 800ce00:	4628      	mov	r0, r5
 800ce02:	47b8      	blx	r7
 800ce04:	3001      	adds	r0, #1
 800ce06:	f43f af0e 	beq.w	800cc26 <_printf_float+0xba>
 800ce0a:	f04f 0900 	mov.w	r9, #0
 800ce0e:	f104 0a1a 	add.w	sl, r4, #26
 800ce12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce14:	425b      	negs	r3, r3
 800ce16:	454b      	cmp	r3, r9
 800ce18:	dc01      	bgt.n	800ce1e <_printf_float+0x2b2>
 800ce1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce1c:	e794      	b.n	800cd48 <_printf_float+0x1dc>
 800ce1e:	2301      	movs	r3, #1
 800ce20:	4652      	mov	r2, sl
 800ce22:	4631      	mov	r1, r6
 800ce24:	4628      	mov	r0, r5
 800ce26:	47b8      	blx	r7
 800ce28:	3001      	adds	r0, #1
 800ce2a:	f43f aefc 	beq.w	800cc26 <_printf_float+0xba>
 800ce2e:	f109 0901 	add.w	r9, r9, #1
 800ce32:	e7ee      	b.n	800ce12 <_printf_float+0x2a6>
 800ce34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ce38:	429a      	cmp	r2, r3
 800ce3a:	bfa8      	it	ge
 800ce3c:	461a      	movge	r2, r3
 800ce3e:	2a00      	cmp	r2, #0
 800ce40:	4691      	mov	r9, r2
 800ce42:	dd07      	ble.n	800ce54 <_printf_float+0x2e8>
 800ce44:	4613      	mov	r3, r2
 800ce46:	4631      	mov	r1, r6
 800ce48:	4642      	mov	r2, r8
 800ce4a:	4628      	mov	r0, r5
 800ce4c:	47b8      	blx	r7
 800ce4e:	3001      	adds	r0, #1
 800ce50:	f43f aee9 	beq.w	800cc26 <_printf_float+0xba>
 800ce54:	f104 031a 	add.w	r3, r4, #26
 800ce58:	f04f 0b00 	mov.w	fp, #0
 800ce5c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ce60:	9306      	str	r3, [sp, #24]
 800ce62:	e015      	b.n	800ce90 <_printf_float+0x324>
 800ce64:	7fefffff 	.word	0x7fefffff
 800ce68:	08010220 	.word	0x08010220
 800ce6c:	0801021c 	.word	0x0801021c
 800ce70:	08010228 	.word	0x08010228
 800ce74:	08010224 	.word	0x08010224
 800ce78:	0801022c 	.word	0x0801022c
 800ce7c:	2301      	movs	r3, #1
 800ce7e:	9a06      	ldr	r2, [sp, #24]
 800ce80:	4631      	mov	r1, r6
 800ce82:	4628      	mov	r0, r5
 800ce84:	47b8      	blx	r7
 800ce86:	3001      	adds	r0, #1
 800ce88:	f43f aecd 	beq.w	800cc26 <_printf_float+0xba>
 800ce8c:	f10b 0b01 	add.w	fp, fp, #1
 800ce90:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800ce94:	ebaa 0309 	sub.w	r3, sl, r9
 800ce98:	455b      	cmp	r3, fp
 800ce9a:	dcef      	bgt.n	800ce7c <_printf_float+0x310>
 800ce9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cea0:	429a      	cmp	r2, r3
 800cea2:	44d0      	add	r8, sl
 800cea4:	db15      	blt.n	800ced2 <_printf_float+0x366>
 800cea6:	6823      	ldr	r3, [r4, #0]
 800cea8:	07da      	lsls	r2, r3, #31
 800ceaa:	d412      	bmi.n	800ced2 <_printf_float+0x366>
 800ceac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ceae:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ceb0:	eba3 020a 	sub.w	r2, r3, sl
 800ceb4:	eba3 0a01 	sub.w	sl, r3, r1
 800ceb8:	4592      	cmp	sl, r2
 800ceba:	bfa8      	it	ge
 800cebc:	4692      	movge	sl, r2
 800cebe:	f1ba 0f00 	cmp.w	sl, #0
 800cec2:	dc0e      	bgt.n	800cee2 <_printf_float+0x376>
 800cec4:	f04f 0800 	mov.w	r8, #0
 800cec8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cecc:	f104 091a 	add.w	r9, r4, #26
 800ced0:	e019      	b.n	800cf06 <_printf_float+0x39a>
 800ced2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ced6:	4631      	mov	r1, r6
 800ced8:	4628      	mov	r0, r5
 800ceda:	47b8      	blx	r7
 800cedc:	3001      	adds	r0, #1
 800cede:	d1e5      	bne.n	800ceac <_printf_float+0x340>
 800cee0:	e6a1      	b.n	800cc26 <_printf_float+0xba>
 800cee2:	4653      	mov	r3, sl
 800cee4:	4642      	mov	r2, r8
 800cee6:	4631      	mov	r1, r6
 800cee8:	4628      	mov	r0, r5
 800ceea:	47b8      	blx	r7
 800ceec:	3001      	adds	r0, #1
 800ceee:	d1e9      	bne.n	800cec4 <_printf_float+0x358>
 800cef0:	e699      	b.n	800cc26 <_printf_float+0xba>
 800cef2:	2301      	movs	r3, #1
 800cef4:	464a      	mov	r2, r9
 800cef6:	4631      	mov	r1, r6
 800cef8:	4628      	mov	r0, r5
 800cefa:	47b8      	blx	r7
 800cefc:	3001      	adds	r0, #1
 800cefe:	f43f ae92 	beq.w	800cc26 <_printf_float+0xba>
 800cf02:	f108 0801 	add.w	r8, r8, #1
 800cf06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cf0a:	1a9b      	subs	r3, r3, r2
 800cf0c:	eba3 030a 	sub.w	r3, r3, sl
 800cf10:	4543      	cmp	r3, r8
 800cf12:	dcee      	bgt.n	800cef2 <_printf_float+0x386>
 800cf14:	e74a      	b.n	800cdac <_printf_float+0x240>
 800cf16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf18:	2a01      	cmp	r2, #1
 800cf1a:	dc01      	bgt.n	800cf20 <_printf_float+0x3b4>
 800cf1c:	07db      	lsls	r3, r3, #31
 800cf1e:	d53a      	bpl.n	800cf96 <_printf_float+0x42a>
 800cf20:	2301      	movs	r3, #1
 800cf22:	4642      	mov	r2, r8
 800cf24:	4631      	mov	r1, r6
 800cf26:	4628      	mov	r0, r5
 800cf28:	47b8      	blx	r7
 800cf2a:	3001      	adds	r0, #1
 800cf2c:	f43f ae7b 	beq.w	800cc26 <_printf_float+0xba>
 800cf30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf34:	4631      	mov	r1, r6
 800cf36:	4628      	mov	r0, r5
 800cf38:	47b8      	blx	r7
 800cf3a:	3001      	adds	r0, #1
 800cf3c:	f108 0801 	add.w	r8, r8, #1
 800cf40:	f43f ae71 	beq.w	800cc26 <_printf_float+0xba>
 800cf44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf46:	2200      	movs	r2, #0
 800cf48:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800cf4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cf50:	2300      	movs	r3, #0
 800cf52:	f7f3 fde1 	bl	8000b18 <__aeabi_dcmpeq>
 800cf56:	b9c8      	cbnz	r0, 800cf8c <_printf_float+0x420>
 800cf58:	4653      	mov	r3, sl
 800cf5a:	4642      	mov	r2, r8
 800cf5c:	4631      	mov	r1, r6
 800cf5e:	4628      	mov	r0, r5
 800cf60:	47b8      	blx	r7
 800cf62:	3001      	adds	r0, #1
 800cf64:	d10e      	bne.n	800cf84 <_printf_float+0x418>
 800cf66:	e65e      	b.n	800cc26 <_printf_float+0xba>
 800cf68:	2301      	movs	r3, #1
 800cf6a:	4652      	mov	r2, sl
 800cf6c:	4631      	mov	r1, r6
 800cf6e:	4628      	mov	r0, r5
 800cf70:	47b8      	blx	r7
 800cf72:	3001      	adds	r0, #1
 800cf74:	f43f ae57 	beq.w	800cc26 <_printf_float+0xba>
 800cf78:	f108 0801 	add.w	r8, r8, #1
 800cf7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf7e:	3b01      	subs	r3, #1
 800cf80:	4543      	cmp	r3, r8
 800cf82:	dcf1      	bgt.n	800cf68 <_printf_float+0x3fc>
 800cf84:	464b      	mov	r3, r9
 800cf86:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cf8a:	e6de      	b.n	800cd4a <_printf_float+0x1de>
 800cf8c:	f04f 0800 	mov.w	r8, #0
 800cf90:	f104 0a1a 	add.w	sl, r4, #26
 800cf94:	e7f2      	b.n	800cf7c <_printf_float+0x410>
 800cf96:	2301      	movs	r3, #1
 800cf98:	e7df      	b.n	800cf5a <_printf_float+0x3ee>
 800cf9a:	2301      	movs	r3, #1
 800cf9c:	464a      	mov	r2, r9
 800cf9e:	4631      	mov	r1, r6
 800cfa0:	4628      	mov	r0, r5
 800cfa2:	47b8      	blx	r7
 800cfa4:	3001      	adds	r0, #1
 800cfa6:	f43f ae3e 	beq.w	800cc26 <_printf_float+0xba>
 800cfaa:	f108 0801 	add.w	r8, r8, #1
 800cfae:	68e3      	ldr	r3, [r4, #12]
 800cfb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cfb2:	1a9b      	subs	r3, r3, r2
 800cfb4:	4543      	cmp	r3, r8
 800cfb6:	dcf0      	bgt.n	800cf9a <_printf_float+0x42e>
 800cfb8:	e6fc      	b.n	800cdb4 <_printf_float+0x248>
 800cfba:	f04f 0800 	mov.w	r8, #0
 800cfbe:	f104 0919 	add.w	r9, r4, #25
 800cfc2:	e7f4      	b.n	800cfae <_printf_float+0x442>
 800cfc4:	2900      	cmp	r1, #0
 800cfc6:	f43f ae8b 	beq.w	800cce0 <_printf_float+0x174>
 800cfca:	2300      	movs	r3, #0
 800cfcc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800cfd0:	ab09      	add	r3, sp, #36	; 0x24
 800cfd2:	9300      	str	r3, [sp, #0]
 800cfd4:	ec49 8b10 	vmov	d0, r8, r9
 800cfd8:	6022      	str	r2, [r4, #0]
 800cfda:	f8cd a004 	str.w	sl, [sp, #4]
 800cfde:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cfe2:	4628      	mov	r0, r5
 800cfe4:	f7ff fd2e 	bl	800ca44 <__cvt>
 800cfe8:	4680      	mov	r8, r0
 800cfea:	e648      	b.n	800cc7e <_printf_float+0x112>

0800cfec <_printf_common>:
 800cfec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cff0:	4691      	mov	r9, r2
 800cff2:	461f      	mov	r7, r3
 800cff4:	688a      	ldr	r2, [r1, #8]
 800cff6:	690b      	ldr	r3, [r1, #16]
 800cff8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cffc:	4293      	cmp	r3, r2
 800cffe:	bfb8      	it	lt
 800d000:	4613      	movlt	r3, r2
 800d002:	f8c9 3000 	str.w	r3, [r9]
 800d006:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d00a:	4606      	mov	r6, r0
 800d00c:	460c      	mov	r4, r1
 800d00e:	b112      	cbz	r2, 800d016 <_printf_common+0x2a>
 800d010:	3301      	adds	r3, #1
 800d012:	f8c9 3000 	str.w	r3, [r9]
 800d016:	6823      	ldr	r3, [r4, #0]
 800d018:	0699      	lsls	r1, r3, #26
 800d01a:	bf42      	ittt	mi
 800d01c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d020:	3302      	addmi	r3, #2
 800d022:	f8c9 3000 	strmi.w	r3, [r9]
 800d026:	6825      	ldr	r5, [r4, #0]
 800d028:	f015 0506 	ands.w	r5, r5, #6
 800d02c:	d107      	bne.n	800d03e <_printf_common+0x52>
 800d02e:	f104 0a19 	add.w	sl, r4, #25
 800d032:	68e3      	ldr	r3, [r4, #12]
 800d034:	f8d9 2000 	ldr.w	r2, [r9]
 800d038:	1a9b      	subs	r3, r3, r2
 800d03a:	42ab      	cmp	r3, r5
 800d03c:	dc28      	bgt.n	800d090 <_printf_common+0xa4>
 800d03e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d042:	6822      	ldr	r2, [r4, #0]
 800d044:	3300      	adds	r3, #0
 800d046:	bf18      	it	ne
 800d048:	2301      	movne	r3, #1
 800d04a:	0692      	lsls	r2, r2, #26
 800d04c:	d42d      	bmi.n	800d0aa <_printf_common+0xbe>
 800d04e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d052:	4639      	mov	r1, r7
 800d054:	4630      	mov	r0, r6
 800d056:	47c0      	blx	r8
 800d058:	3001      	adds	r0, #1
 800d05a:	d020      	beq.n	800d09e <_printf_common+0xb2>
 800d05c:	6823      	ldr	r3, [r4, #0]
 800d05e:	68e5      	ldr	r5, [r4, #12]
 800d060:	f8d9 2000 	ldr.w	r2, [r9]
 800d064:	f003 0306 	and.w	r3, r3, #6
 800d068:	2b04      	cmp	r3, #4
 800d06a:	bf08      	it	eq
 800d06c:	1aad      	subeq	r5, r5, r2
 800d06e:	68a3      	ldr	r3, [r4, #8]
 800d070:	6922      	ldr	r2, [r4, #16]
 800d072:	bf0c      	ite	eq
 800d074:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d078:	2500      	movne	r5, #0
 800d07a:	4293      	cmp	r3, r2
 800d07c:	bfc4      	itt	gt
 800d07e:	1a9b      	subgt	r3, r3, r2
 800d080:	18ed      	addgt	r5, r5, r3
 800d082:	f04f 0900 	mov.w	r9, #0
 800d086:	341a      	adds	r4, #26
 800d088:	454d      	cmp	r5, r9
 800d08a:	d11a      	bne.n	800d0c2 <_printf_common+0xd6>
 800d08c:	2000      	movs	r0, #0
 800d08e:	e008      	b.n	800d0a2 <_printf_common+0xb6>
 800d090:	2301      	movs	r3, #1
 800d092:	4652      	mov	r2, sl
 800d094:	4639      	mov	r1, r7
 800d096:	4630      	mov	r0, r6
 800d098:	47c0      	blx	r8
 800d09a:	3001      	adds	r0, #1
 800d09c:	d103      	bne.n	800d0a6 <_printf_common+0xba>
 800d09e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d0a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0a6:	3501      	adds	r5, #1
 800d0a8:	e7c3      	b.n	800d032 <_printf_common+0x46>
 800d0aa:	18e1      	adds	r1, r4, r3
 800d0ac:	1c5a      	adds	r2, r3, #1
 800d0ae:	2030      	movs	r0, #48	; 0x30
 800d0b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d0b4:	4422      	add	r2, r4
 800d0b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d0ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d0be:	3302      	adds	r3, #2
 800d0c0:	e7c5      	b.n	800d04e <_printf_common+0x62>
 800d0c2:	2301      	movs	r3, #1
 800d0c4:	4622      	mov	r2, r4
 800d0c6:	4639      	mov	r1, r7
 800d0c8:	4630      	mov	r0, r6
 800d0ca:	47c0      	blx	r8
 800d0cc:	3001      	adds	r0, #1
 800d0ce:	d0e6      	beq.n	800d09e <_printf_common+0xb2>
 800d0d0:	f109 0901 	add.w	r9, r9, #1
 800d0d4:	e7d8      	b.n	800d088 <_printf_common+0x9c>
	...

0800d0d8 <_printf_i>:
 800d0d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d0dc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d0e0:	460c      	mov	r4, r1
 800d0e2:	7e09      	ldrb	r1, [r1, #24]
 800d0e4:	b085      	sub	sp, #20
 800d0e6:	296e      	cmp	r1, #110	; 0x6e
 800d0e8:	4617      	mov	r7, r2
 800d0ea:	4606      	mov	r6, r0
 800d0ec:	4698      	mov	r8, r3
 800d0ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d0f0:	f000 80b3 	beq.w	800d25a <_printf_i+0x182>
 800d0f4:	d822      	bhi.n	800d13c <_printf_i+0x64>
 800d0f6:	2963      	cmp	r1, #99	; 0x63
 800d0f8:	d036      	beq.n	800d168 <_printf_i+0x90>
 800d0fa:	d80a      	bhi.n	800d112 <_printf_i+0x3a>
 800d0fc:	2900      	cmp	r1, #0
 800d0fe:	f000 80b9 	beq.w	800d274 <_printf_i+0x19c>
 800d102:	2958      	cmp	r1, #88	; 0x58
 800d104:	f000 8083 	beq.w	800d20e <_printf_i+0x136>
 800d108:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d10c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d110:	e032      	b.n	800d178 <_printf_i+0xa0>
 800d112:	2964      	cmp	r1, #100	; 0x64
 800d114:	d001      	beq.n	800d11a <_printf_i+0x42>
 800d116:	2969      	cmp	r1, #105	; 0x69
 800d118:	d1f6      	bne.n	800d108 <_printf_i+0x30>
 800d11a:	6820      	ldr	r0, [r4, #0]
 800d11c:	6813      	ldr	r3, [r2, #0]
 800d11e:	0605      	lsls	r5, r0, #24
 800d120:	f103 0104 	add.w	r1, r3, #4
 800d124:	d52a      	bpl.n	800d17c <_printf_i+0xa4>
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	6011      	str	r1, [r2, #0]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	da03      	bge.n	800d136 <_printf_i+0x5e>
 800d12e:	222d      	movs	r2, #45	; 0x2d
 800d130:	425b      	negs	r3, r3
 800d132:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d136:	486f      	ldr	r0, [pc, #444]	; (800d2f4 <_printf_i+0x21c>)
 800d138:	220a      	movs	r2, #10
 800d13a:	e039      	b.n	800d1b0 <_printf_i+0xd8>
 800d13c:	2973      	cmp	r1, #115	; 0x73
 800d13e:	f000 809d 	beq.w	800d27c <_printf_i+0x1a4>
 800d142:	d808      	bhi.n	800d156 <_printf_i+0x7e>
 800d144:	296f      	cmp	r1, #111	; 0x6f
 800d146:	d020      	beq.n	800d18a <_printf_i+0xb2>
 800d148:	2970      	cmp	r1, #112	; 0x70
 800d14a:	d1dd      	bne.n	800d108 <_printf_i+0x30>
 800d14c:	6823      	ldr	r3, [r4, #0]
 800d14e:	f043 0320 	orr.w	r3, r3, #32
 800d152:	6023      	str	r3, [r4, #0]
 800d154:	e003      	b.n	800d15e <_printf_i+0x86>
 800d156:	2975      	cmp	r1, #117	; 0x75
 800d158:	d017      	beq.n	800d18a <_printf_i+0xb2>
 800d15a:	2978      	cmp	r1, #120	; 0x78
 800d15c:	d1d4      	bne.n	800d108 <_printf_i+0x30>
 800d15e:	2378      	movs	r3, #120	; 0x78
 800d160:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d164:	4864      	ldr	r0, [pc, #400]	; (800d2f8 <_printf_i+0x220>)
 800d166:	e055      	b.n	800d214 <_printf_i+0x13c>
 800d168:	6813      	ldr	r3, [r2, #0]
 800d16a:	1d19      	adds	r1, r3, #4
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	6011      	str	r1, [r2, #0]
 800d170:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d174:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d178:	2301      	movs	r3, #1
 800d17a:	e08c      	b.n	800d296 <_printf_i+0x1be>
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	6011      	str	r1, [r2, #0]
 800d180:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d184:	bf18      	it	ne
 800d186:	b21b      	sxthne	r3, r3
 800d188:	e7cf      	b.n	800d12a <_printf_i+0x52>
 800d18a:	6813      	ldr	r3, [r2, #0]
 800d18c:	6825      	ldr	r5, [r4, #0]
 800d18e:	1d18      	adds	r0, r3, #4
 800d190:	6010      	str	r0, [r2, #0]
 800d192:	0628      	lsls	r0, r5, #24
 800d194:	d501      	bpl.n	800d19a <_printf_i+0xc2>
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	e002      	b.n	800d1a0 <_printf_i+0xc8>
 800d19a:	0668      	lsls	r0, r5, #25
 800d19c:	d5fb      	bpl.n	800d196 <_printf_i+0xbe>
 800d19e:	881b      	ldrh	r3, [r3, #0]
 800d1a0:	4854      	ldr	r0, [pc, #336]	; (800d2f4 <_printf_i+0x21c>)
 800d1a2:	296f      	cmp	r1, #111	; 0x6f
 800d1a4:	bf14      	ite	ne
 800d1a6:	220a      	movne	r2, #10
 800d1a8:	2208      	moveq	r2, #8
 800d1aa:	2100      	movs	r1, #0
 800d1ac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d1b0:	6865      	ldr	r5, [r4, #4]
 800d1b2:	60a5      	str	r5, [r4, #8]
 800d1b4:	2d00      	cmp	r5, #0
 800d1b6:	f2c0 8095 	blt.w	800d2e4 <_printf_i+0x20c>
 800d1ba:	6821      	ldr	r1, [r4, #0]
 800d1bc:	f021 0104 	bic.w	r1, r1, #4
 800d1c0:	6021      	str	r1, [r4, #0]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d13d      	bne.n	800d242 <_printf_i+0x16a>
 800d1c6:	2d00      	cmp	r5, #0
 800d1c8:	f040 808e 	bne.w	800d2e8 <_printf_i+0x210>
 800d1cc:	4665      	mov	r5, ip
 800d1ce:	2a08      	cmp	r2, #8
 800d1d0:	d10b      	bne.n	800d1ea <_printf_i+0x112>
 800d1d2:	6823      	ldr	r3, [r4, #0]
 800d1d4:	07db      	lsls	r3, r3, #31
 800d1d6:	d508      	bpl.n	800d1ea <_printf_i+0x112>
 800d1d8:	6923      	ldr	r3, [r4, #16]
 800d1da:	6862      	ldr	r2, [r4, #4]
 800d1dc:	429a      	cmp	r2, r3
 800d1de:	bfde      	ittt	le
 800d1e0:	2330      	movle	r3, #48	; 0x30
 800d1e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d1e6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d1ea:	ebac 0305 	sub.w	r3, ip, r5
 800d1ee:	6123      	str	r3, [r4, #16]
 800d1f0:	f8cd 8000 	str.w	r8, [sp]
 800d1f4:	463b      	mov	r3, r7
 800d1f6:	aa03      	add	r2, sp, #12
 800d1f8:	4621      	mov	r1, r4
 800d1fa:	4630      	mov	r0, r6
 800d1fc:	f7ff fef6 	bl	800cfec <_printf_common>
 800d200:	3001      	adds	r0, #1
 800d202:	d14d      	bne.n	800d2a0 <_printf_i+0x1c8>
 800d204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d208:	b005      	add	sp, #20
 800d20a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d20e:	4839      	ldr	r0, [pc, #228]	; (800d2f4 <_printf_i+0x21c>)
 800d210:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d214:	6813      	ldr	r3, [r2, #0]
 800d216:	6821      	ldr	r1, [r4, #0]
 800d218:	1d1d      	adds	r5, r3, #4
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	6015      	str	r5, [r2, #0]
 800d21e:	060a      	lsls	r2, r1, #24
 800d220:	d50b      	bpl.n	800d23a <_printf_i+0x162>
 800d222:	07ca      	lsls	r2, r1, #31
 800d224:	bf44      	itt	mi
 800d226:	f041 0120 	orrmi.w	r1, r1, #32
 800d22a:	6021      	strmi	r1, [r4, #0]
 800d22c:	b91b      	cbnz	r3, 800d236 <_printf_i+0x15e>
 800d22e:	6822      	ldr	r2, [r4, #0]
 800d230:	f022 0220 	bic.w	r2, r2, #32
 800d234:	6022      	str	r2, [r4, #0]
 800d236:	2210      	movs	r2, #16
 800d238:	e7b7      	b.n	800d1aa <_printf_i+0xd2>
 800d23a:	064d      	lsls	r5, r1, #25
 800d23c:	bf48      	it	mi
 800d23e:	b29b      	uxthmi	r3, r3
 800d240:	e7ef      	b.n	800d222 <_printf_i+0x14a>
 800d242:	4665      	mov	r5, ip
 800d244:	fbb3 f1f2 	udiv	r1, r3, r2
 800d248:	fb02 3311 	mls	r3, r2, r1, r3
 800d24c:	5cc3      	ldrb	r3, [r0, r3]
 800d24e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d252:	460b      	mov	r3, r1
 800d254:	2900      	cmp	r1, #0
 800d256:	d1f5      	bne.n	800d244 <_printf_i+0x16c>
 800d258:	e7b9      	b.n	800d1ce <_printf_i+0xf6>
 800d25a:	6813      	ldr	r3, [r2, #0]
 800d25c:	6825      	ldr	r5, [r4, #0]
 800d25e:	6961      	ldr	r1, [r4, #20]
 800d260:	1d18      	adds	r0, r3, #4
 800d262:	6010      	str	r0, [r2, #0]
 800d264:	0628      	lsls	r0, r5, #24
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	d501      	bpl.n	800d26e <_printf_i+0x196>
 800d26a:	6019      	str	r1, [r3, #0]
 800d26c:	e002      	b.n	800d274 <_printf_i+0x19c>
 800d26e:	066a      	lsls	r2, r5, #25
 800d270:	d5fb      	bpl.n	800d26a <_printf_i+0x192>
 800d272:	8019      	strh	r1, [r3, #0]
 800d274:	2300      	movs	r3, #0
 800d276:	6123      	str	r3, [r4, #16]
 800d278:	4665      	mov	r5, ip
 800d27a:	e7b9      	b.n	800d1f0 <_printf_i+0x118>
 800d27c:	6813      	ldr	r3, [r2, #0]
 800d27e:	1d19      	adds	r1, r3, #4
 800d280:	6011      	str	r1, [r2, #0]
 800d282:	681d      	ldr	r5, [r3, #0]
 800d284:	6862      	ldr	r2, [r4, #4]
 800d286:	2100      	movs	r1, #0
 800d288:	4628      	mov	r0, r5
 800d28a:	f7f2 ffd1 	bl	8000230 <memchr>
 800d28e:	b108      	cbz	r0, 800d294 <_printf_i+0x1bc>
 800d290:	1b40      	subs	r0, r0, r5
 800d292:	6060      	str	r0, [r4, #4]
 800d294:	6863      	ldr	r3, [r4, #4]
 800d296:	6123      	str	r3, [r4, #16]
 800d298:	2300      	movs	r3, #0
 800d29a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d29e:	e7a7      	b.n	800d1f0 <_printf_i+0x118>
 800d2a0:	6923      	ldr	r3, [r4, #16]
 800d2a2:	462a      	mov	r2, r5
 800d2a4:	4639      	mov	r1, r7
 800d2a6:	4630      	mov	r0, r6
 800d2a8:	47c0      	blx	r8
 800d2aa:	3001      	adds	r0, #1
 800d2ac:	d0aa      	beq.n	800d204 <_printf_i+0x12c>
 800d2ae:	6823      	ldr	r3, [r4, #0]
 800d2b0:	079b      	lsls	r3, r3, #30
 800d2b2:	d413      	bmi.n	800d2dc <_printf_i+0x204>
 800d2b4:	68e0      	ldr	r0, [r4, #12]
 800d2b6:	9b03      	ldr	r3, [sp, #12]
 800d2b8:	4298      	cmp	r0, r3
 800d2ba:	bfb8      	it	lt
 800d2bc:	4618      	movlt	r0, r3
 800d2be:	e7a3      	b.n	800d208 <_printf_i+0x130>
 800d2c0:	2301      	movs	r3, #1
 800d2c2:	464a      	mov	r2, r9
 800d2c4:	4639      	mov	r1, r7
 800d2c6:	4630      	mov	r0, r6
 800d2c8:	47c0      	blx	r8
 800d2ca:	3001      	adds	r0, #1
 800d2cc:	d09a      	beq.n	800d204 <_printf_i+0x12c>
 800d2ce:	3501      	adds	r5, #1
 800d2d0:	68e3      	ldr	r3, [r4, #12]
 800d2d2:	9a03      	ldr	r2, [sp, #12]
 800d2d4:	1a9b      	subs	r3, r3, r2
 800d2d6:	42ab      	cmp	r3, r5
 800d2d8:	dcf2      	bgt.n	800d2c0 <_printf_i+0x1e8>
 800d2da:	e7eb      	b.n	800d2b4 <_printf_i+0x1dc>
 800d2dc:	2500      	movs	r5, #0
 800d2de:	f104 0919 	add.w	r9, r4, #25
 800d2e2:	e7f5      	b.n	800d2d0 <_printf_i+0x1f8>
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d1ac      	bne.n	800d242 <_printf_i+0x16a>
 800d2e8:	7803      	ldrb	r3, [r0, #0]
 800d2ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d2ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d2f2:	e76c      	b.n	800d1ce <_printf_i+0xf6>
 800d2f4:	0801022e 	.word	0x0801022e
 800d2f8:	0801023f 	.word	0x0801023f

0800d2fc <_puts_r>:
 800d2fc:	b570      	push	{r4, r5, r6, lr}
 800d2fe:	460e      	mov	r6, r1
 800d300:	4605      	mov	r5, r0
 800d302:	b118      	cbz	r0, 800d30c <_puts_r+0x10>
 800d304:	6983      	ldr	r3, [r0, #24]
 800d306:	b90b      	cbnz	r3, 800d30c <_puts_r+0x10>
 800d308:	f001 f896 	bl	800e438 <__sinit>
 800d30c:	69ab      	ldr	r3, [r5, #24]
 800d30e:	68ac      	ldr	r4, [r5, #8]
 800d310:	b913      	cbnz	r3, 800d318 <_puts_r+0x1c>
 800d312:	4628      	mov	r0, r5
 800d314:	f001 f890 	bl	800e438 <__sinit>
 800d318:	4b23      	ldr	r3, [pc, #140]	; (800d3a8 <_puts_r+0xac>)
 800d31a:	429c      	cmp	r4, r3
 800d31c:	d117      	bne.n	800d34e <_puts_r+0x52>
 800d31e:	686c      	ldr	r4, [r5, #4]
 800d320:	89a3      	ldrh	r3, [r4, #12]
 800d322:	071b      	lsls	r3, r3, #28
 800d324:	d51d      	bpl.n	800d362 <_puts_r+0x66>
 800d326:	6923      	ldr	r3, [r4, #16]
 800d328:	b1db      	cbz	r3, 800d362 <_puts_r+0x66>
 800d32a:	3e01      	subs	r6, #1
 800d32c:	68a3      	ldr	r3, [r4, #8]
 800d32e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d332:	3b01      	subs	r3, #1
 800d334:	60a3      	str	r3, [r4, #8]
 800d336:	b9e9      	cbnz	r1, 800d374 <_puts_r+0x78>
 800d338:	2b00      	cmp	r3, #0
 800d33a:	da2e      	bge.n	800d39a <_puts_r+0x9e>
 800d33c:	4622      	mov	r2, r4
 800d33e:	210a      	movs	r1, #10
 800d340:	4628      	mov	r0, r5
 800d342:	f000 f883 	bl	800d44c <__swbuf_r>
 800d346:	3001      	adds	r0, #1
 800d348:	d011      	beq.n	800d36e <_puts_r+0x72>
 800d34a:	200a      	movs	r0, #10
 800d34c:	e011      	b.n	800d372 <_puts_r+0x76>
 800d34e:	4b17      	ldr	r3, [pc, #92]	; (800d3ac <_puts_r+0xb0>)
 800d350:	429c      	cmp	r4, r3
 800d352:	d101      	bne.n	800d358 <_puts_r+0x5c>
 800d354:	68ac      	ldr	r4, [r5, #8]
 800d356:	e7e3      	b.n	800d320 <_puts_r+0x24>
 800d358:	4b15      	ldr	r3, [pc, #84]	; (800d3b0 <_puts_r+0xb4>)
 800d35a:	429c      	cmp	r4, r3
 800d35c:	bf08      	it	eq
 800d35e:	68ec      	ldreq	r4, [r5, #12]
 800d360:	e7de      	b.n	800d320 <_puts_r+0x24>
 800d362:	4621      	mov	r1, r4
 800d364:	4628      	mov	r0, r5
 800d366:	f000 f8c3 	bl	800d4f0 <__swsetup_r>
 800d36a:	2800      	cmp	r0, #0
 800d36c:	d0dd      	beq.n	800d32a <_puts_r+0x2e>
 800d36e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d372:	bd70      	pop	{r4, r5, r6, pc}
 800d374:	2b00      	cmp	r3, #0
 800d376:	da04      	bge.n	800d382 <_puts_r+0x86>
 800d378:	69a2      	ldr	r2, [r4, #24]
 800d37a:	429a      	cmp	r2, r3
 800d37c:	dc06      	bgt.n	800d38c <_puts_r+0x90>
 800d37e:	290a      	cmp	r1, #10
 800d380:	d004      	beq.n	800d38c <_puts_r+0x90>
 800d382:	6823      	ldr	r3, [r4, #0]
 800d384:	1c5a      	adds	r2, r3, #1
 800d386:	6022      	str	r2, [r4, #0]
 800d388:	7019      	strb	r1, [r3, #0]
 800d38a:	e7cf      	b.n	800d32c <_puts_r+0x30>
 800d38c:	4622      	mov	r2, r4
 800d38e:	4628      	mov	r0, r5
 800d390:	f000 f85c 	bl	800d44c <__swbuf_r>
 800d394:	3001      	adds	r0, #1
 800d396:	d1c9      	bne.n	800d32c <_puts_r+0x30>
 800d398:	e7e9      	b.n	800d36e <_puts_r+0x72>
 800d39a:	6823      	ldr	r3, [r4, #0]
 800d39c:	200a      	movs	r0, #10
 800d39e:	1c5a      	adds	r2, r3, #1
 800d3a0:	6022      	str	r2, [r4, #0]
 800d3a2:	7018      	strb	r0, [r3, #0]
 800d3a4:	e7e5      	b.n	800d372 <_puts_r+0x76>
 800d3a6:	bf00      	nop
 800d3a8:	08010280 	.word	0x08010280
 800d3ac:	080102a0 	.word	0x080102a0
 800d3b0:	08010260 	.word	0x08010260

0800d3b4 <puts>:
 800d3b4:	4b02      	ldr	r3, [pc, #8]	; (800d3c0 <puts+0xc>)
 800d3b6:	4601      	mov	r1, r0
 800d3b8:	6818      	ldr	r0, [r3, #0]
 800d3ba:	f7ff bf9f 	b.w	800d2fc <_puts_r>
 800d3be:	bf00      	nop
 800d3c0:	20001ce8 	.word	0x20001ce8

0800d3c4 <sniprintf>:
 800d3c4:	b40c      	push	{r2, r3}
 800d3c6:	b530      	push	{r4, r5, lr}
 800d3c8:	4b17      	ldr	r3, [pc, #92]	; (800d428 <sniprintf+0x64>)
 800d3ca:	1e0c      	subs	r4, r1, #0
 800d3cc:	b09d      	sub	sp, #116	; 0x74
 800d3ce:	681d      	ldr	r5, [r3, #0]
 800d3d0:	da08      	bge.n	800d3e4 <sniprintf+0x20>
 800d3d2:	238b      	movs	r3, #139	; 0x8b
 800d3d4:	602b      	str	r3, [r5, #0]
 800d3d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d3da:	b01d      	add	sp, #116	; 0x74
 800d3dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d3e0:	b002      	add	sp, #8
 800d3e2:	4770      	bx	lr
 800d3e4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d3e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d3ec:	bf14      	ite	ne
 800d3ee:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800d3f2:	4623      	moveq	r3, r4
 800d3f4:	9304      	str	r3, [sp, #16]
 800d3f6:	9307      	str	r3, [sp, #28]
 800d3f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d3fc:	9002      	str	r0, [sp, #8]
 800d3fe:	9006      	str	r0, [sp, #24]
 800d400:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d404:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d406:	ab21      	add	r3, sp, #132	; 0x84
 800d408:	a902      	add	r1, sp, #8
 800d40a:	4628      	mov	r0, r5
 800d40c:	9301      	str	r3, [sp, #4]
 800d40e:	f001 fd0d 	bl	800ee2c <_svfiprintf_r>
 800d412:	1c43      	adds	r3, r0, #1
 800d414:	bfbc      	itt	lt
 800d416:	238b      	movlt	r3, #139	; 0x8b
 800d418:	602b      	strlt	r3, [r5, #0]
 800d41a:	2c00      	cmp	r4, #0
 800d41c:	d0dd      	beq.n	800d3da <sniprintf+0x16>
 800d41e:	9b02      	ldr	r3, [sp, #8]
 800d420:	2200      	movs	r2, #0
 800d422:	701a      	strb	r2, [r3, #0]
 800d424:	e7d9      	b.n	800d3da <sniprintf+0x16>
 800d426:	bf00      	nop
 800d428:	20001ce8 	.word	0x20001ce8

0800d42c <strcat>:
 800d42c:	b510      	push	{r4, lr}
 800d42e:	4603      	mov	r3, r0
 800d430:	781a      	ldrb	r2, [r3, #0]
 800d432:	1c5c      	adds	r4, r3, #1
 800d434:	b93a      	cbnz	r2, 800d446 <strcat+0x1a>
 800d436:	3b01      	subs	r3, #1
 800d438:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d43c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d440:	2a00      	cmp	r2, #0
 800d442:	d1f9      	bne.n	800d438 <strcat+0xc>
 800d444:	bd10      	pop	{r4, pc}
 800d446:	4623      	mov	r3, r4
 800d448:	e7f2      	b.n	800d430 <strcat+0x4>
	...

0800d44c <__swbuf_r>:
 800d44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d44e:	460e      	mov	r6, r1
 800d450:	4614      	mov	r4, r2
 800d452:	4605      	mov	r5, r0
 800d454:	b118      	cbz	r0, 800d45e <__swbuf_r+0x12>
 800d456:	6983      	ldr	r3, [r0, #24]
 800d458:	b90b      	cbnz	r3, 800d45e <__swbuf_r+0x12>
 800d45a:	f000 ffed 	bl	800e438 <__sinit>
 800d45e:	4b21      	ldr	r3, [pc, #132]	; (800d4e4 <__swbuf_r+0x98>)
 800d460:	429c      	cmp	r4, r3
 800d462:	d12a      	bne.n	800d4ba <__swbuf_r+0x6e>
 800d464:	686c      	ldr	r4, [r5, #4]
 800d466:	69a3      	ldr	r3, [r4, #24]
 800d468:	60a3      	str	r3, [r4, #8]
 800d46a:	89a3      	ldrh	r3, [r4, #12]
 800d46c:	071a      	lsls	r2, r3, #28
 800d46e:	d52e      	bpl.n	800d4ce <__swbuf_r+0x82>
 800d470:	6923      	ldr	r3, [r4, #16]
 800d472:	b363      	cbz	r3, 800d4ce <__swbuf_r+0x82>
 800d474:	6923      	ldr	r3, [r4, #16]
 800d476:	6820      	ldr	r0, [r4, #0]
 800d478:	1ac0      	subs	r0, r0, r3
 800d47a:	6963      	ldr	r3, [r4, #20]
 800d47c:	b2f6      	uxtb	r6, r6
 800d47e:	4283      	cmp	r3, r0
 800d480:	4637      	mov	r7, r6
 800d482:	dc04      	bgt.n	800d48e <__swbuf_r+0x42>
 800d484:	4621      	mov	r1, r4
 800d486:	4628      	mov	r0, r5
 800d488:	f000 ff6c 	bl	800e364 <_fflush_r>
 800d48c:	bb28      	cbnz	r0, 800d4da <__swbuf_r+0x8e>
 800d48e:	68a3      	ldr	r3, [r4, #8]
 800d490:	3b01      	subs	r3, #1
 800d492:	60a3      	str	r3, [r4, #8]
 800d494:	6823      	ldr	r3, [r4, #0]
 800d496:	1c5a      	adds	r2, r3, #1
 800d498:	6022      	str	r2, [r4, #0]
 800d49a:	701e      	strb	r6, [r3, #0]
 800d49c:	6963      	ldr	r3, [r4, #20]
 800d49e:	3001      	adds	r0, #1
 800d4a0:	4283      	cmp	r3, r0
 800d4a2:	d004      	beq.n	800d4ae <__swbuf_r+0x62>
 800d4a4:	89a3      	ldrh	r3, [r4, #12]
 800d4a6:	07db      	lsls	r3, r3, #31
 800d4a8:	d519      	bpl.n	800d4de <__swbuf_r+0x92>
 800d4aa:	2e0a      	cmp	r6, #10
 800d4ac:	d117      	bne.n	800d4de <__swbuf_r+0x92>
 800d4ae:	4621      	mov	r1, r4
 800d4b0:	4628      	mov	r0, r5
 800d4b2:	f000 ff57 	bl	800e364 <_fflush_r>
 800d4b6:	b190      	cbz	r0, 800d4de <__swbuf_r+0x92>
 800d4b8:	e00f      	b.n	800d4da <__swbuf_r+0x8e>
 800d4ba:	4b0b      	ldr	r3, [pc, #44]	; (800d4e8 <__swbuf_r+0x9c>)
 800d4bc:	429c      	cmp	r4, r3
 800d4be:	d101      	bne.n	800d4c4 <__swbuf_r+0x78>
 800d4c0:	68ac      	ldr	r4, [r5, #8]
 800d4c2:	e7d0      	b.n	800d466 <__swbuf_r+0x1a>
 800d4c4:	4b09      	ldr	r3, [pc, #36]	; (800d4ec <__swbuf_r+0xa0>)
 800d4c6:	429c      	cmp	r4, r3
 800d4c8:	bf08      	it	eq
 800d4ca:	68ec      	ldreq	r4, [r5, #12]
 800d4cc:	e7cb      	b.n	800d466 <__swbuf_r+0x1a>
 800d4ce:	4621      	mov	r1, r4
 800d4d0:	4628      	mov	r0, r5
 800d4d2:	f000 f80d 	bl	800d4f0 <__swsetup_r>
 800d4d6:	2800      	cmp	r0, #0
 800d4d8:	d0cc      	beq.n	800d474 <__swbuf_r+0x28>
 800d4da:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d4de:	4638      	mov	r0, r7
 800d4e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4e2:	bf00      	nop
 800d4e4:	08010280 	.word	0x08010280
 800d4e8:	080102a0 	.word	0x080102a0
 800d4ec:	08010260 	.word	0x08010260

0800d4f0 <__swsetup_r>:
 800d4f0:	4b32      	ldr	r3, [pc, #200]	; (800d5bc <__swsetup_r+0xcc>)
 800d4f2:	b570      	push	{r4, r5, r6, lr}
 800d4f4:	681d      	ldr	r5, [r3, #0]
 800d4f6:	4606      	mov	r6, r0
 800d4f8:	460c      	mov	r4, r1
 800d4fa:	b125      	cbz	r5, 800d506 <__swsetup_r+0x16>
 800d4fc:	69ab      	ldr	r3, [r5, #24]
 800d4fe:	b913      	cbnz	r3, 800d506 <__swsetup_r+0x16>
 800d500:	4628      	mov	r0, r5
 800d502:	f000 ff99 	bl	800e438 <__sinit>
 800d506:	4b2e      	ldr	r3, [pc, #184]	; (800d5c0 <__swsetup_r+0xd0>)
 800d508:	429c      	cmp	r4, r3
 800d50a:	d10f      	bne.n	800d52c <__swsetup_r+0x3c>
 800d50c:	686c      	ldr	r4, [r5, #4]
 800d50e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d512:	b29a      	uxth	r2, r3
 800d514:	0715      	lsls	r5, r2, #28
 800d516:	d42c      	bmi.n	800d572 <__swsetup_r+0x82>
 800d518:	06d0      	lsls	r0, r2, #27
 800d51a:	d411      	bmi.n	800d540 <__swsetup_r+0x50>
 800d51c:	2209      	movs	r2, #9
 800d51e:	6032      	str	r2, [r6, #0]
 800d520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d524:	81a3      	strh	r3, [r4, #12]
 800d526:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d52a:	e03e      	b.n	800d5aa <__swsetup_r+0xba>
 800d52c:	4b25      	ldr	r3, [pc, #148]	; (800d5c4 <__swsetup_r+0xd4>)
 800d52e:	429c      	cmp	r4, r3
 800d530:	d101      	bne.n	800d536 <__swsetup_r+0x46>
 800d532:	68ac      	ldr	r4, [r5, #8]
 800d534:	e7eb      	b.n	800d50e <__swsetup_r+0x1e>
 800d536:	4b24      	ldr	r3, [pc, #144]	; (800d5c8 <__swsetup_r+0xd8>)
 800d538:	429c      	cmp	r4, r3
 800d53a:	bf08      	it	eq
 800d53c:	68ec      	ldreq	r4, [r5, #12]
 800d53e:	e7e6      	b.n	800d50e <__swsetup_r+0x1e>
 800d540:	0751      	lsls	r1, r2, #29
 800d542:	d512      	bpl.n	800d56a <__swsetup_r+0x7a>
 800d544:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d546:	b141      	cbz	r1, 800d55a <__swsetup_r+0x6a>
 800d548:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d54c:	4299      	cmp	r1, r3
 800d54e:	d002      	beq.n	800d556 <__swsetup_r+0x66>
 800d550:	4630      	mov	r0, r6
 800d552:	f001 fb69 	bl	800ec28 <_free_r>
 800d556:	2300      	movs	r3, #0
 800d558:	6363      	str	r3, [r4, #52]	; 0x34
 800d55a:	89a3      	ldrh	r3, [r4, #12]
 800d55c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d560:	81a3      	strh	r3, [r4, #12]
 800d562:	2300      	movs	r3, #0
 800d564:	6063      	str	r3, [r4, #4]
 800d566:	6923      	ldr	r3, [r4, #16]
 800d568:	6023      	str	r3, [r4, #0]
 800d56a:	89a3      	ldrh	r3, [r4, #12]
 800d56c:	f043 0308 	orr.w	r3, r3, #8
 800d570:	81a3      	strh	r3, [r4, #12]
 800d572:	6923      	ldr	r3, [r4, #16]
 800d574:	b94b      	cbnz	r3, 800d58a <__swsetup_r+0x9a>
 800d576:	89a3      	ldrh	r3, [r4, #12]
 800d578:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d57c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d580:	d003      	beq.n	800d58a <__swsetup_r+0x9a>
 800d582:	4621      	mov	r1, r4
 800d584:	4630      	mov	r0, r6
 800d586:	f001 f813 	bl	800e5b0 <__smakebuf_r>
 800d58a:	89a2      	ldrh	r2, [r4, #12]
 800d58c:	f012 0301 	ands.w	r3, r2, #1
 800d590:	d00c      	beq.n	800d5ac <__swsetup_r+0xbc>
 800d592:	2300      	movs	r3, #0
 800d594:	60a3      	str	r3, [r4, #8]
 800d596:	6963      	ldr	r3, [r4, #20]
 800d598:	425b      	negs	r3, r3
 800d59a:	61a3      	str	r3, [r4, #24]
 800d59c:	6923      	ldr	r3, [r4, #16]
 800d59e:	b953      	cbnz	r3, 800d5b6 <__swsetup_r+0xc6>
 800d5a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5a4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800d5a8:	d1ba      	bne.n	800d520 <__swsetup_r+0x30>
 800d5aa:	bd70      	pop	{r4, r5, r6, pc}
 800d5ac:	0792      	lsls	r2, r2, #30
 800d5ae:	bf58      	it	pl
 800d5b0:	6963      	ldrpl	r3, [r4, #20]
 800d5b2:	60a3      	str	r3, [r4, #8]
 800d5b4:	e7f2      	b.n	800d59c <__swsetup_r+0xac>
 800d5b6:	2000      	movs	r0, #0
 800d5b8:	e7f7      	b.n	800d5aa <__swsetup_r+0xba>
 800d5ba:	bf00      	nop
 800d5bc:	20001ce8 	.word	0x20001ce8
 800d5c0:	08010280 	.word	0x08010280
 800d5c4:	080102a0 	.word	0x080102a0
 800d5c8:	08010260 	.word	0x08010260

0800d5cc <quorem>:
 800d5cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5d0:	6903      	ldr	r3, [r0, #16]
 800d5d2:	690c      	ldr	r4, [r1, #16]
 800d5d4:	42a3      	cmp	r3, r4
 800d5d6:	4680      	mov	r8, r0
 800d5d8:	f2c0 8082 	blt.w	800d6e0 <quorem+0x114>
 800d5dc:	3c01      	subs	r4, #1
 800d5de:	f101 0714 	add.w	r7, r1, #20
 800d5e2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800d5e6:	f100 0614 	add.w	r6, r0, #20
 800d5ea:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800d5ee:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800d5f2:	eb06 030c 	add.w	r3, r6, ip
 800d5f6:	3501      	adds	r5, #1
 800d5f8:	eb07 090c 	add.w	r9, r7, ip
 800d5fc:	9301      	str	r3, [sp, #4]
 800d5fe:	fbb0 f5f5 	udiv	r5, r0, r5
 800d602:	b395      	cbz	r5, 800d66a <quorem+0x9e>
 800d604:	f04f 0a00 	mov.w	sl, #0
 800d608:	4638      	mov	r0, r7
 800d60a:	46b6      	mov	lr, r6
 800d60c:	46d3      	mov	fp, sl
 800d60e:	f850 2b04 	ldr.w	r2, [r0], #4
 800d612:	b293      	uxth	r3, r2
 800d614:	fb05 a303 	mla	r3, r5, r3, sl
 800d618:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d61c:	b29b      	uxth	r3, r3
 800d61e:	ebab 0303 	sub.w	r3, fp, r3
 800d622:	0c12      	lsrs	r2, r2, #16
 800d624:	f8de b000 	ldr.w	fp, [lr]
 800d628:	fb05 a202 	mla	r2, r5, r2, sl
 800d62c:	fa13 f38b 	uxtah	r3, r3, fp
 800d630:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800d634:	fa1f fb82 	uxth.w	fp, r2
 800d638:	f8de 2000 	ldr.w	r2, [lr]
 800d63c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800d640:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d644:	b29b      	uxth	r3, r3
 800d646:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d64a:	4581      	cmp	r9, r0
 800d64c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800d650:	f84e 3b04 	str.w	r3, [lr], #4
 800d654:	d2db      	bcs.n	800d60e <quorem+0x42>
 800d656:	f856 300c 	ldr.w	r3, [r6, ip]
 800d65a:	b933      	cbnz	r3, 800d66a <quorem+0x9e>
 800d65c:	9b01      	ldr	r3, [sp, #4]
 800d65e:	3b04      	subs	r3, #4
 800d660:	429e      	cmp	r6, r3
 800d662:	461a      	mov	r2, r3
 800d664:	d330      	bcc.n	800d6c8 <quorem+0xfc>
 800d666:	f8c8 4010 	str.w	r4, [r8, #16]
 800d66a:	4640      	mov	r0, r8
 800d66c:	f001 fa08 	bl	800ea80 <__mcmp>
 800d670:	2800      	cmp	r0, #0
 800d672:	db25      	blt.n	800d6c0 <quorem+0xf4>
 800d674:	3501      	adds	r5, #1
 800d676:	4630      	mov	r0, r6
 800d678:	f04f 0c00 	mov.w	ip, #0
 800d67c:	f857 2b04 	ldr.w	r2, [r7], #4
 800d680:	f8d0 e000 	ldr.w	lr, [r0]
 800d684:	b293      	uxth	r3, r2
 800d686:	ebac 0303 	sub.w	r3, ip, r3
 800d68a:	0c12      	lsrs	r2, r2, #16
 800d68c:	fa13 f38e 	uxtah	r3, r3, lr
 800d690:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d694:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d698:	b29b      	uxth	r3, r3
 800d69a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d69e:	45b9      	cmp	r9, r7
 800d6a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d6a4:	f840 3b04 	str.w	r3, [r0], #4
 800d6a8:	d2e8      	bcs.n	800d67c <quorem+0xb0>
 800d6aa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800d6ae:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800d6b2:	b92a      	cbnz	r2, 800d6c0 <quorem+0xf4>
 800d6b4:	3b04      	subs	r3, #4
 800d6b6:	429e      	cmp	r6, r3
 800d6b8:	461a      	mov	r2, r3
 800d6ba:	d30b      	bcc.n	800d6d4 <quorem+0x108>
 800d6bc:	f8c8 4010 	str.w	r4, [r8, #16]
 800d6c0:	4628      	mov	r0, r5
 800d6c2:	b003      	add	sp, #12
 800d6c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6c8:	6812      	ldr	r2, [r2, #0]
 800d6ca:	3b04      	subs	r3, #4
 800d6cc:	2a00      	cmp	r2, #0
 800d6ce:	d1ca      	bne.n	800d666 <quorem+0x9a>
 800d6d0:	3c01      	subs	r4, #1
 800d6d2:	e7c5      	b.n	800d660 <quorem+0x94>
 800d6d4:	6812      	ldr	r2, [r2, #0]
 800d6d6:	3b04      	subs	r3, #4
 800d6d8:	2a00      	cmp	r2, #0
 800d6da:	d1ef      	bne.n	800d6bc <quorem+0xf0>
 800d6dc:	3c01      	subs	r4, #1
 800d6de:	e7ea      	b.n	800d6b6 <quorem+0xea>
 800d6e0:	2000      	movs	r0, #0
 800d6e2:	e7ee      	b.n	800d6c2 <quorem+0xf6>
 800d6e4:	0000      	movs	r0, r0
	...

0800d6e8 <_dtoa_r>:
 800d6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6ec:	ec57 6b10 	vmov	r6, r7, d0
 800d6f0:	b097      	sub	sp, #92	; 0x5c
 800d6f2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d6f4:	9106      	str	r1, [sp, #24]
 800d6f6:	4604      	mov	r4, r0
 800d6f8:	920b      	str	r2, [sp, #44]	; 0x2c
 800d6fa:	9312      	str	r3, [sp, #72]	; 0x48
 800d6fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d700:	e9cd 6700 	strd	r6, r7, [sp]
 800d704:	b93d      	cbnz	r5, 800d716 <_dtoa_r+0x2e>
 800d706:	2010      	movs	r0, #16
 800d708:	f000 ff92 	bl	800e630 <malloc>
 800d70c:	6260      	str	r0, [r4, #36]	; 0x24
 800d70e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d712:	6005      	str	r5, [r0, #0]
 800d714:	60c5      	str	r5, [r0, #12]
 800d716:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d718:	6819      	ldr	r1, [r3, #0]
 800d71a:	b151      	cbz	r1, 800d732 <_dtoa_r+0x4a>
 800d71c:	685a      	ldr	r2, [r3, #4]
 800d71e:	604a      	str	r2, [r1, #4]
 800d720:	2301      	movs	r3, #1
 800d722:	4093      	lsls	r3, r2
 800d724:	608b      	str	r3, [r1, #8]
 800d726:	4620      	mov	r0, r4
 800d728:	f000 ffc9 	bl	800e6be <_Bfree>
 800d72c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d72e:	2200      	movs	r2, #0
 800d730:	601a      	str	r2, [r3, #0]
 800d732:	1e3b      	subs	r3, r7, #0
 800d734:	bfbb      	ittet	lt
 800d736:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d73a:	9301      	strlt	r3, [sp, #4]
 800d73c:	2300      	movge	r3, #0
 800d73e:	2201      	movlt	r2, #1
 800d740:	bfac      	ite	ge
 800d742:	f8c8 3000 	strge.w	r3, [r8]
 800d746:	f8c8 2000 	strlt.w	r2, [r8]
 800d74a:	4baf      	ldr	r3, [pc, #700]	; (800da08 <_dtoa_r+0x320>)
 800d74c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d750:	ea33 0308 	bics.w	r3, r3, r8
 800d754:	d114      	bne.n	800d780 <_dtoa_r+0x98>
 800d756:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d758:	f242 730f 	movw	r3, #9999	; 0x270f
 800d75c:	6013      	str	r3, [r2, #0]
 800d75e:	9b00      	ldr	r3, [sp, #0]
 800d760:	b923      	cbnz	r3, 800d76c <_dtoa_r+0x84>
 800d762:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800d766:	2800      	cmp	r0, #0
 800d768:	f000 8542 	beq.w	800e1f0 <_dtoa_r+0xb08>
 800d76c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d76e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800da1c <_dtoa_r+0x334>
 800d772:	2b00      	cmp	r3, #0
 800d774:	f000 8544 	beq.w	800e200 <_dtoa_r+0xb18>
 800d778:	f10b 0303 	add.w	r3, fp, #3
 800d77c:	f000 bd3e 	b.w	800e1fc <_dtoa_r+0xb14>
 800d780:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d784:	2200      	movs	r2, #0
 800d786:	2300      	movs	r3, #0
 800d788:	4630      	mov	r0, r6
 800d78a:	4639      	mov	r1, r7
 800d78c:	f7f3 f9c4 	bl	8000b18 <__aeabi_dcmpeq>
 800d790:	4681      	mov	r9, r0
 800d792:	b168      	cbz	r0, 800d7b0 <_dtoa_r+0xc8>
 800d794:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d796:	2301      	movs	r3, #1
 800d798:	6013      	str	r3, [r2, #0]
 800d79a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	f000 8524 	beq.w	800e1ea <_dtoa_r+0xb02>
 800d7a2:	4b9a      	ldr	r3, [pc, #616]	; (800da0c <_dtoa_r+0x324>)
 800d7a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d7a6:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800d7aa:	6013      	str	r3, [r2, #0]
 800d7ac:	f000 bd28 	b.w	800e200 <_dtoa_r+0xb18>
 800d7b0:	aa14      	add	r2, sp, #80	; 0x50
 800d7b2:	a915      	add	r1, sp, #84	; 0x54
 800d7b4:	ec47 6b10 	vmov	d0, r6, r7
 800d7b8:	4620      	mov	r0, r4
 800d7ba:	f001 f9d8 	bl	800eb6e <__d2b>
 800d7be:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d7c2:	9004      	str	r0, [sp, #16]
 800d7c4:	2d00      	cmp	r5, #0
 800d7c6:	d07c      	beq.n	800d8c2 <_dtoa_r+0x1da>
 800d7c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d7cc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800d7d0:	46b2      	mov	sl, r6
 800d7d2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800d7d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d7da:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800d7de:	2200      	movs	r2, #0
 800d7e0:	4b8b      	ldr	r3, [pc, #556]	; (800da10 <_dtoa_r+0x328>)
 800d7e2:	4650      	mov	r0, sl
 800d7e4:	4659      	mov	r1, fp
 800d7e6:	f7f2 fd77 	bl	80002d8 <__aeabi_dsub>
 800d7ea:	a381      	add	r3, pc, #516	; (adr r3, 800d9f0 <_dtoa_r+0x308>)
 800d7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7f0:	f7f2 ff2a 	bl	8000648 <__aeabi_dmul>
 800d7f4:	a380      	add	r3, pc, #512	; (adr r3, 800d9f8 <_dtoa_r+0x310>)
 800d7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7fa:	f7f2 fd6f 	bl	80002dc <__adddf3>
 800d7fe:	4606      	mov	r6, r0
 800d800:	4628      	mov	r0, r5
 800d802:	460f      	mov	r7, r1
 800d804:	f7f2 feb6 	bl	8000574 <__aeabi_i2d>
 800d808:	a37d      	add	r3, pc, #500	; (adr r3, 800da00 <_dtoa_r+0x318>)
 800d80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d80e:	f7f2 ff1b 	bl	8000648 <__aeabi_dmul>
 800d812:	4602      	mov	r2, r0
 800d814:	460b      	mov	r3, r1
 800d816:	4630      	mov	r0, r6
 800d818:	4639      	mov	r1, r7
 800d81a:	f7f2 fd5f 	bl	80002dc <__adddf3>
 800d81e:	4606      	mov	r6, r0
 800d820:	460f      	mov	r7, r1
 800d822:	f7f3 f9c1 	bl	8000ba8 <__aeabi_d2iz>
 800d826:	2200      	movs	r2, #0
 800d828:	4682      	mov	sl, r0
 800d82a:	2300      	movs	r3, #0
 800d82c:	4630      	mov	r0, r6
 800d82e:	4639      	mov	r1, r7
 800d830:	f7f3 f97c 	bl	8000b2c <__aeabi_dcmplt>
 800d834:	b148      	cbz	r0, 800d84a <_dtoa_r+0x162>
 800d836:	4650      	mov	r0, sl
 800d838:	f7f2 fe9c 	bl	8000574 <__aeabi_i2d>
 800d83c:	4632      	mov	r2, r6
 800d83e:	463b      	mov	r3, r7
 800d840:	f7f3 f96a 	bl	8000b18 <__aeabi_dcmpeq>
 800d844:	b908      	cbnz	r0, 800d84a <_dtoa_r+0x162>
 800d846:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d84a:	f1ba 0f16 	cmp.w	sl, #22
 800d84e:	d859      	bhi.n	800d904 <_dtoa_r+0x21c>
 800d850:	4970      	ldr	r1, [pc, #448]	; (800da14 <_dtoa_r+0x32c>)
 800d852:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800d856:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d85a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d85e:	f7f3 f983 	bl	8000b68 <__aeabi_dcmpgt>
 800d862:	2800      	cmp	r0, #0
 800d864:	d050      	beq.n	800d908 <_dtoa_r+0x220>
 800d866:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d86a:	2300      	movs	r3, #0
 800d86c:	930f      	str	r3, [sp, #60]	; 0x3c
 800d86e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d870:	1b5d      	subs	r5, r3, r5
 800d872:	f1b5 0801 	subs.w	r8, r5, #1
 800d876:	bf49      	itett	mi
 800d878:	f1c5 0301 	rsbmi	r3, r5, #1
 800d87c:	2300      	movpl	r3, #0
 800d87e:	9305      	strmi	r3, [sp, #20]
 800d880:	f04f 0800 	movmi.w	r8, #0
 800d884:	bf58      	it	pl
 800d886:	9305      	strpl	r3, [sp, #20]
 800d888:	f1ba 0f00 	cmp.w	sl, #0
 800d88c:	db3e      	blt.n	800d90c <_dtoa_r+0x224>
 800d88e:	2300      	movs	r3, #0
 800d890:	44d0      	add	r8, sl
 800d892:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800d896:	9307      	str	r3, [sp, #28]
 800d898:	9b06      	ldr	r3, [sp, #24]
 800d89a:	2b09      	cmp	r3, #9
 800d89c:	f200 8090 	bhi.w	800d9c0 <_dtoa_r+0x2d8>
 800d8a0:	2b05      	cmp	r3, #5
 800d8a2:	bfc4      	itt	gt
 800d8a4:	3b04      	subgt	r3, #4
 800d8a6:	9306      	strgt	r3, [sp, #24]
 800d8a8:	9b06      	ldr	r3, [sp, #24]
 800d8aa:	f1a3 0302 	sub.w	r3, r3, #2
 800d8ae:	bfcc      	ite	gt
 800d8b0:	2500      	movgt	r5, #0
 800d8b2:	2501      	movle	r5, #1
 800d8b4:	2b03      	cmp	r3, #3
 800d8b6:	f200 808f 	bhi.w	800d9d8 <_dtoa_r+0x2f0>
 800d8ba:	e8df f003 	tbb	[pc, r3]
 800d8be:	7f7d      	.short	0x7f7d
 800d8c0:	7131      	.short	0x7131
 800d8c2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800d8c6:	441d      	add	r5, r3
 800d8c8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800d8cc:	2820      	cmp	r0, #32
 800d8ce:	dd13      	ble.n	800d8f8 <_dtoa_r+0x210>
 800d8d0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800d8d4:	9b00      	ldr	r3, [sp, #0]
 800d8d6:	fa08 f800 	lsl.w	r8, r8, r0
 800d8da:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800d8de:	fa23 f000 	lsr.w	r0, r3, r0
 800d8e2:	ea48 0000 	orr.w	r0, r8, r0
 800d8e6:	f7f2 fe35 	bl	8000554 <__aeabi_ui2d>
 800d8ea:	2301      	movs	r3, #1
 800d8ec:	4682      	mov	sl, r0
 800d8ee:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800d8f2:	3d01      	subs	r5, #1
 800d8f4:	9313      	str	r3, [sp, #76]	; 0x4c
 800d8f6:	e772      	b.n	800d7de <_dtoa_r+0xf6>
 800d8f8:	9b00      	ldr	r3, [sp, #0]
 800d8fa:	f1c0 0020 	rsb	r0, r0, #32
 800d8fe:	fa03 f000 	lsl.w	r0, r3, r0
 800d902:	e7f0      	b.n	800d8e6 <_dtoa_r+0x1fe>
 800d904:	2301      	movs	r3, #1
 800d906:	e7b1      	b.n	800d86c <_dtoa_r+0x184>
 800d908:	900f      	str	r0, [sp, #60]	; 0x3c
 800d90a:	e7b0      	b.n	800d86e <_dtoa_r+0x186>
 800d90c:	9b05      	ldr	r3, [sp, #20]
 800d90e:	eba3 030a 	sub.w	r3, r3, sl
 800d912:	9305      	str	r3, [sp, #20]
 800d914:	f1ca 0300 	rsb	r3, sl, #0
 800d918:	9307      	str	r3, [sp, #28]
 800d91a:	2300      	movs	r3, #0
 800d91c:	930e      	str	r3, [sp, #56]	; 0x38
 800d91e:	e7bb      	b.n	800d898 <_dtoa_r+0x1b0>
 800d920:	2301      	movs	r3, #1
 800d922:	930a      	str	r3, [sp, #40]	; 0x28
 800d924:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d926:	2b00      	cmp	r3, #0
 800d928:	dd59      	ble.n	800d9de <_dtoa_r+0x2f6>
 800d92a:	9302      	str	r3, [sp, #8]
 800d92c:	4699      	mov	r9, r3
 800d92e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d930:	2200      	movs	r2, #0
 800d932:	6072      	str	r2, [r6, #4]
 800d934:	2204      	movs	r2, #4
 800d936:	f102 0014 	add.w	r0, r2, #20
 800d93a:	4298      	cmp	r0, r3
 800d93c:	6871      	ldr	r1, [r6, #4]
 800d93e:	d953      	bls.n	800d9e8 <_dtoa_r+0x300>
 800d940:	4620      	mov	r0, r4
 800d942:	f000 fe88 	bl	800e656 <_Balloc>
 800d946:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d948:	6030      	str	r0, [r6, #0]
 800d94a:	f1b9 0f0e 	cmp.w	r9, #14
 800d94e:	f8d3 b000 	ldr.w	fp, [r3]
 800d952:	f200 80e6 	bhi.w	800db22 <_dtoa_r+0x43a>
 800d956:	2d00      	cmp	r5, #0
 800d958:	f000 80e3 	beq.w	800db22 <_dtoa_r+0x43a>
 800d95c:	ed9d 7b00 	vldr	d7, [sp]
 800d960:	f1ba 0f00 	cmp.w	sl, #0
 800d964:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800d968:	dd74      	ble.n	800da54 <_dtoa_r+0x36c>
 800d96a:	4a2a      	ldr	r2, [pc, #168]	; (800da14 <_dtoa_r+0x32c>)
 800d96c:	f00a 030f 	and.w	r3, sl, #15
 800d970:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d974:	ed93 7b00 	vldr	d7, [r3]
 800d978:	ea4f 162a 	mov.w	r6, sl, asr #4
 800d97c:	06f0      	lsls	r0, r6, #27
 800d97e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800d982:	d565      	bpl.n	800da50 <_dtoa_r+0x368>
 800d984:	4b24      	ldr	r3, [pc, #144]	; (800da18 <_dtoa_r+0x330>)
 800d986:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d98a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d98e:	f7f2 ff85 	bl	800089c <__aeabi_ddiv>
 800d992:	e9cd 0100 	strd	r0, r1, [sp]
 800d996:	f006 060f 	and.w	r6, r6, #15
 800d99a:	2503      	movs	r5, #3
 800d99c:	4f1e      	ldr	r7, [pc, #120]	; (800da18 <_dtoa_r+0x330>)
 800d99e:	e04c      	b.n	800da3a <_dtoa_r+0x352>
 800d9a0:	2301      	movs	r3, #1
 800d9a2:	930a      	str	r3, [sp, #40]	; 0x28
 800d9a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9a6:	4453      	add	r3, sl
 800d9a8:	f103 0901 	add.w	r9, r3, #1
 800d9ac:	9302      	str	r3, [sp, #8]
 800d9ae:	464b      	mov	r3, r9
 800d9b0:	2b01      	cmp	r3, #1
 800d9b2:	bfb8      	it	lt
 800d9b4:	2301      	movlt	r3, #1
 800d9b6:	e7ba      	b.n	800d92e <_dtoa_r+0x246>
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	e7b2      	b.n	800d922 <_dtoa_r+0x23a>
 800d9bc:	2300      	movs	r3, #0
 800d9be:	e7f0      	b.n	800d9a2 <_dtoa_r+0x2ba>
 800d9c0:	2501      	movs	r5, #1
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	9306      	str	r3, [sp, #24]
 800d9c6:	950a      	str	r5, [sp, #40]	; 0x28
 800d9c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d9cc:	9302      	str	r3, [sp, #8]
 800d9ce:	4699      	mov	r9, r3
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	2312      	movs	r3, #18
 800d9d4:	920b      	str	r2, [sp, #44]	; 0x2c
 800d9d6:	e7aa      	b.n	800d92e <_dtoa_r+0x246>
 800d9d8:	2301      	movs	r3, #1
 800d9da:	930a      	str	r3, [sp, #40]	; 0x28
 800d9dc:	e7f4      	b.n	800d9c8 <_dtoa_r+0x2e0>
 800d9de:	2301      	movs	r3, #1
 800d9e0:	9302      	str	r3, [sp, #8]
 800d9e2:	4699      	mov	r9, r3
 800d9e4:	461a      	mov	r2, r3
 800d9e6:	e7f5      	b.n	800d9d4 <_dtoa_r+0x2ec>
 800d9e8:	3101      	adds	r1, #1
 800d9ea:	6071      	str	r1, [r6, #4]
 800d9ec:	0052      	lsls	r2, r2, #1
 800d9ee:	e7a2      	b.n	800d936 <_dtoa_r+0x24e>
 800d9f0:	636f4361 	.word	0x636f4361
 800d9f4:	3fd287a7 	.word	0x3fd287a7
 800d9f8:	8b60c8b3 	.word	0x8b60c8b3
 800d9fc:	3fc68a28 	.word	0x3fc68a28
 800da00:	509f79fb 	.word	0x509f79fb
 800da04:	3fd34413 	.word	0x3fd34413
 800da08:	7ff00000 	.word	0x7ff00000
 800da0c:	0801022d 	.word	0x0801022d
 800da10:	3ff80000 	.word	0x3ff80000
 800da14:	080102e8 	.word	0x080102e8
 800da18:	080102c0 	.word	0x080102c0
 800da1c:	08010259 	.word	0x08010259
 800da20:	07f1      	lsls	r1, r6, #31
 800da22:	d508      	bpl.n	800da36 <_dtoa_r+0x34e>
 800da24:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800da28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800da2c:	f7f2 fe0c 	bl	8000648 <__aeabi_dmul>
 800da30:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800da34:	3501      	adds	r5, #1
 800da36:	1076      	asrs	r6, r6, #1
 800da38:	3708      	adds	r7, #8
 800da3a:	2e00      	cmp	r6, #0
 800da3c:	d1f0      	bne.n	800da20 <_dtoa_r+0x338>
 800da3e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800da42:	e9dd 0100 	ldrd	r0, r1, [sp]
 800da46:	f7f2 ff29 	bl	800089c <__aeabi_ddiv>
 800da4a:	e9cd 0100 	strd	r0, r1, [sp]
 800da4e:	e01a      	b.n	800da86 <_dtoa_r+0x39e>
 800da50:	2502      	movs	r5, #2
 800da52:	e7a3      	b.n	800d99c <_dtoa_r+0x2b4>
 800da54:	f000 80a0 	beq.w	800db98 <_dtoa_r+0x4b0>
 800da58:	f1ca 0600 	rsb	r6, sl, #0
 800da5c:	4b9f      	ldr	r3, [pc, #636]	; (800dcdc <_dtoa_r+0x5f4>)
 800da5e:	4fa0      	ldr	r7, [pc, #640]	; (800dce0 <_dtoa_r+0x5f8>)
 800da60:	f006 020f 	and.w	r2, r6, #15
 800da64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800da68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da6c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800da70:	f7f2 fdea 	bl	8000648 <__aeabi_dmul>
 800da74:	e9cd 0100 	strd	r0, r1, [sp]
 800da78:	1136      	asrs	r6, r6, #4
 800da7a:	2300      	movs	r3, #0
 800da7c:	2502      	movs	r5, #2
 800da7e:	2e00      	cmp	r6, #0
 800da80:	d17f      	bne.n	800db82 <_dtoa_r+0x49a>
 800da82:	2b00      	cmp	r3, #0
 800da84:	d1e1      	bne.n	800da4a <_dtoa_r+0x362>
 800da86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800da88:	2b00      	cmp	r3, #0
 800da8a:	f000 8087 	beq.w	800db9c <_dtoa_r+0x4b4>
 800da8e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800da92:	2200      	movs	r2, #0
 800da94:	4b93      	ldr	r3, [pc, #588]	; (800dce4 <_dtoa_r+0x5fc>)
 800da96:	4630      	mov	r0, r6
 800da98:	4639      	mov	r1, r7
 800da9a:	f7f3 f847 	bl	8000b2c <__aeabi_dcmplt>
 800da9e:	2800      	cmp	r0, #0
 800daa0:	d07c      	beq.n	800db9c <_dtoa_r+0x4b4>
 800daa2:	f1b9 0f00 	cmp.w	r9, #0
 800daa6:	d079      	beq.n	800db9c <_dtoa_r+0x4b4>
 800daa8:	9b02      	ldr	r3, [sp, #8]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	dd35      	ble.n	800db1a <_dtoa_r+0x432>
 800daae:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800dab2:	9308      	str	r3, [sp, #32]
 800dab4:	4639      	mov	r1, r7
 800dab6:	2200      	movs	r2, #0
 800dab8:	4b8b      	ldr	r3, [pc, #556]	; (800dce8 <_dtoa_r+0x600>)
 800daba:	4630      	mov	r0, r6
 800dabc:	f7f2 fdc4 	bl	8000648 <__aeabi_dmul>
 800dac0:	e9cd 0100 	strd	r0, r1, [sp]
 800dac4:	9f02      	ldr	r7, [sp, #8]
 800dac6:	3501      	adds	r5, #1
 800dac8:	4628      	mov	r0, r5
 800daca:	f7f2 fd53 	bl	8000574 <__aeabi_i2d>
 800dace:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dad2:	f7f2 fdb9 	bl	8000648 <__aeabi_dmul>
 800dad6:	2200      	movs	r2, #0
 800dad8:	4b84      	ldr	r3, [pc, #528]	; (800dcec <_dtoa_r+0x604>)
 800dada:	f7f2 fbff 	bl	80002dc <__adddf3>
 800dade:	4605      	mov	r5, r0
 800dae0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800dae4:	2f00      	cmp	r7, #0
 800dae6:	d15d      	bne.n	800dba4 <_dtoa_r+0x4bc>
 800dae8:	2200      	movs	r2, #0
 800daea:	4b81      	ldr	r3, [pc, #516]	; (800dcf0 <_dtoa_r+0x608>)
 800daec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800daf0:	f7f2 fbf2 	bl	80002d8 <__aeabi_dsub>
 800daf4:	462a      	mov	r2, r5
 800daf6:	4633      	mov	r3, r6
 800daf8:	e9cd 0100 	strd	r0, r1, [sp]
 800dafc:	f7f3 f834 	bl	8000b68 <__aeabi_dcmpgt>
 800db00:	2800      	cmp	r0, #0
 800db02:	f040 8288 	bne.w	800e016 <_dtoa_r+0x92e>
 800db06:	462a      	mov	r2, r5
 800db08:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800db0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800db10:	f7f3 f80c 	bl	8000b2c <__aeabi_dcmplt>
 800db14:	2800      	cmp	r0, #0
 800db16:	f040 827c 	bne.w	800e012 <_dtoa_r+0x92a>
 800db1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800db1e:	e9cd 2300 	strd	r2, r3, [sp]
 800db22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db24:	2b00      	cmp	r3, #0
 800db26:	f2c0 8150 	blt.w	800ddca <_dtoa_r+0x6e2>
 800db2a:	f1ba 0f0e 	cmp.w	sl, #14
 800db2e:	f300 814c 	bgt.w	800ddca <_dtoa_r+0x6e2>
 800db32:	4b6a      	ldr	r3, [pc, #424]	; (800dcdc <_dtoa_r+0x5f4>)
 800db34:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800db38:	ed93 7b00 	vldr	d7, [r3]
 800db3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db3e:	2b00      	cmp	r3, #0
 800db40:	ed8d 7b02 	vstr	d7, [sp, #8]
 800db44:	f280 80d8 	bge.w	800dcf8 <_dtoa_r+0x610>
 800db48:	f1b9 0f00 	cmp.w	r9, #0
 800db4c:	f300 80d4 	bgt.w	800dcf8 <_dtoa_r+0x610>
 800db50:	f040 825e 	bne.w	800e010 <_dtoa_r+0x928>
 800db54:	2200      	movs	r2, #0
 800db56:	4b66      	ldr	r3, [pc, #408]	; (800dcf0 <_dtoa_r+0x608>)
 800db58:	ec51 0b17 	vmov	r0, r1, d7
 800db5c:	f7f2 fd74 	bl	8000648 <__aeabi_dmul>
 800db60:	e9dd 2300 	ldrd	r2, r3, [sp]
 800db64:	f7f2 fff6 	bl	8000b54 <__aeabi_dcmpge>
 800db68:	464f      	mov	r7, r9
 800db6a:	464e      	mov	r6, r9
 800db6c:	2800      	cmp	r0, #0
 800db6e:	f040 8234 	bne.w	800dfda <_dtoa_r+0x8f2>
 800db72:	2331      	movs	r3, #49	; 0x31
 800db74:	f10b 0501 	add.w	r5, fp, #1
 800db78:	f88b 3000 	strb.w	r3, [fp]
 800db7c:	f10a 0a01 	add.w	sl, sl, #1
 800db80:	e22f      	b.n	800dfe2 <_dtoa_r+0x8fa>
 800db82:	07f2      	lsls	r2, r6, #31
 800db84:	d505      	bpl.n	800db92 <_dtoa_r+0x4aa>
 800db86:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db8a:	f7f2 fd5d 	bl	8000648 <__aeabi_dmul>
 800db8e:	3501      	adds	r5, #1
 800db90:	2301      	movs	r3, #1
 800db92:	1076      	asrs	r6, r6, #1
 800db94:	3708      	adds	r7, #8
 800db96:	e772      	b.n	800da7e <_dtoa_r+0x396>
 800db98:	2502      	movs	r5, #2
 800db9a:	e774      	b.n	800da86 <_dtoa_r+0x39e>
 800db9c:	f8cd a020 	str.w	sl, [sp, #32]
 800dba0:	464f      	mov	r7, r9
 800dba2:	e791      	b.n	800dac8 <_dtoa_r+0x3e0>
 800dba4:	4b4d      	ldr	r3, [pc, #308]	; (800dcdc <_dtoa_r+0x5f4>)
 800dba6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dbaa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800dbae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d047      	beq.n	800dc44 <_dtoa_r+0x55c>
 800dbb4:	4602      	mov	r2, r0
 800dbb6:	460b      	mov	r3, r1
 800dbb8:	2000      	movs	r0, #0
 800dbba:	494e      	ldr	r1, [pc, #312]	; (800dcf4 <_dtoa_r+0x60c>)
 800dbbc:	f7f2 fe6e 	bl	800089c <__aeabi_ddiv>
 800dbc0:	462a      	mov	r2, r5
 800dbc2:	4633      	mov	r3, r6
 800dbc4:	f7f2 fb88 	bl	80002d8 <__aeabi_dsub>
 800dbc8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800dbcc:	465d      	mov	r5, fp
 800dbce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dbd2:	f7f2 ffe9 	bl	8000ba8 <__aeabi_d2iz>
 800dbd6:	4606      	mov	r6, r0
 800dbd8:	f7f2 fccc 	bl	8000574 <__aeabi_i2d>
 800dbdc:	4602      	mov	r2, r0
 800dbde:	460b      	mov	r3, r1
 800dbe0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dbe4:	f7f2 fb78 	bl	80002d8 <__aeabi_dsub>
 800dbe8:	3630      	adds	r6, #48	; 0x30
 800dbea:	f805 6b01 	strb.w	r6, [r5], #1
 800dbee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800dbf2:	e9cd 0100 	strd	r0, r1, [sp]
 800dbf6:	f7f2 ff99 	bl	8000b2c <__aeabi_dcmplt>
 800dbfa:	2800      	cmp	r0, #0
 800dbfc:	d163      	bne.n	800dcc6 <_dtoa_r+0x5de>
 800dbfe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dc02:	2000      	movs	r0, #0
 800dc04:	4937      	ldr	r1, [pc, #220]	; (800dce4 <_dtoa_r+0x5fc>)
 800dc06:	f7f2 fb67 	bl	80002d8 <__aeabi_dsub>
 800dc0a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800dc0e:	f7f2 ff8d 	bl	8000b2c <__aeabi_dcmplt>
 800dc12:	2800      	cmp	r0, #0
 800dc14:	f040 80b7 	bne.w	800dd86 <_dtoa_r+0x69e>
 800dc18:	eba5 030b 	sub.w	r3, r5, fp
 800dc1c:	429f      	cmp	r7, r3
 800dc1e:	f77f af7c 	ble.w	800db1a <_dtoa_r+0x432>
 800dc22:	2200      	movs	r2, #0
 800dc24:	4b30      	ldr	r3, [pc, #192]	; (800dce8 <_dtoa_r+0x600>)
 800dc26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800dc2a:	f7f2 fd0d 	bl	8000648 <__aeabi_dmul>
 800dc2e:	2200      	movs	r2, #0
 800dc30:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800dc34:	4b2c      	ldr	r3, [pc, #176]	; (800dce8 <_dtoa_r+0x600>)
 800dc36:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dc3a:	f7f2 fd05 	bl	8000648 <__aeabi_dmul>
 800dc3e:	e9cd 0100 	strd	r0, r1, [sp]
 800dc42:	e7c4      	b.n	800dbce <_dtoa_r+0x4e6>
 800dc44:	462a      	mov	r2, r5
 800dc46:	4633      	mov	r3, r6
 800dc48:	f7f2 fcfe 	bl	8000648 <__aeabi_dmul>
 800dc4c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800dc50:	eb0b 0507 	add.w	r5, fp, r7
 800dc54:	465e      	mov	r6, fp
 800dc56:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dc5a:	f7f2 ffa5 	bl	8000ba8 <__aeabi_d2iz>
 800dc5e:	4607      	mov	r7, r0
 800dc60:	f7f2 fc88 	bl	8000574 <__aeabi_i2d>
 800dc64:	3730      	adds	r7, #48	; 0x30
 800dc66:	4602      	mov	r2, r0
 800dc68:	460b      	mov	r3, r1
 800dc6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dc6e:	f7f2 fb33 	bl	80002d8 <__aeabi_dsub>
 800dc72:	f806 7b01 	strb.w	r7, [r6], #1
 800dc76:	42ae      	cmp	r6, r5
 800dc78:	e9cd 0100 	strd	r0, r1, [sp]
 800dc7c:	f04f 0200 	mov.w	r2, #0
 800dc80:	d126      	bne.n	800dcd0 <_dtoa_r+0x5e8>
 800dc82:	4b1c      	ldr	r3, [pc, #112]	; (800dcf4 <_dtoa_r+0x60c>)
 800dc84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800dc88:	f7f2 fb28 	bl	80002dc <__adddf3>
 800dc8c:	4602      	mov	r2, r0
 800dc8e:	460b      	mov	r3, r1
 800dc90:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dc94:	f7f2 ff68 	bl	8000b68 <__aeabi_dcmpgt>
 800dc98:	2800      	cmp	r0, #0
 800dc9a:	d174      	bne.n	800dd86 <_dtoa_r+0x69e>
 800dc9c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800dca0:	2000      	movs	r0, #0
 800dca2:	4914      	ldr	r1, [pc, #80]	; (800dcf4 <_dtoa_r+0x60c>)
 800dca4:	f7f2 fb18 	bl	80002d8 <__aeabi_dsub>
 800dca8:	4602      	mov	r2, r0
 800dcaa:	460b      	mov	r3, r1
 800dcac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dcb0:	f7f2 ff3c 	bl	8000b2c <__aeabi_dcmplt>
 800dcb4:	2800      	cmp	r0, #0
 800dcb6:	f43f af30 	beq.w	800db1a <_dtoa_r+0x432>
 800dcba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dcbe:	2b30      	cmp	r3, #48	; 0x30
 800dcc0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800dcc4:	d002      	beq.n	800dccc <_dtoa_r+0x5e4>
 800dcc6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800dcca:	e04a      	b.n	800dd62 <_dtoa_r+0x67a>
 800dccc:	4615      	mov	r5, r2
 800dcce:	e7f4      	b.n	800dcba <_dtoa_r+0x5d2>
 800dcd0:	4b05      	ldr	r3, [pc, #20]	; (800dce8 <_dtoa_r+0x600>)
 800dcd2:	f7f2 fcb9 	bl	8000648 <__aeabi_dmul>
 800dcd6:	e9cd 0100 	strd	r0, r1, [sp]
 800dcda:	e7bc      	b.n	800dc56 <_dtoa_r+0x56e>
 800dcdc:	080102e8 	.word	0x080102e8
 800dce0:	080102c0 	.word	0x080102c0
 800dce4:	3ff00000 	.word	0x3ff00000
 800dce8:	40240000 	.word	0x40240000
 800dcec:	401c0000 	.word	0x401c0000
 800dcf0:	40140000 	.word	0x40140000
 800dcf4:	3fe00000 	.word	0x3fe00000
 800dcf8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800dcfc:	465d      	mov	r5, fp
 800dcfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dd02:	4630      	mov	r0, r6
 800dd04:	4639      	mov	r1, r7
 800dd06:	f7f2 fdc9 	bl	800089c <__aeabi_ddiv>
 800dd0a:	f7f2 ff4d 	bl	8000ba8 <__aeabi_d2iz>
 800dd0e:	4680      	mov	r8, r0
 800dd10:	f7f2 fc30 	bl	8000574 <__aeabi_i2d>
 800dd14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dd18:	f7f2 fc96 	bl	8000648 <__aeabi_dmul>
 800dd1c:	4602      	mov	r2, r0
 800dd1e:	460b      	mov	r3, r1
 800dd20:	4630      	mov	r0, r6
 800dd22:	4639      	mov	r1, r7
 800dd24:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800dd28:	f7f2 fad6 	bl	80002d8 <__aeabi_dsub>
 800dd2c:	f805 6b01 	strb.w	r6, [r5], #1
 800dd30:	eba5 060b 	sub.w	r6, r5, fp
 800dd34:	45b1      	cmp	r9, r6
 800dd36:	4602      	mov	r2, r0
 800dd38:	460b      	mov	r3, r1
 800dd3a:	d139      	bne.n	800ddb0 <_dtoa_r+0x6c8>
 800dd3c:	f7f2 face 	bl	80002dc <__adddf3>
 800dd40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dd44:	4606      	mov	r6, r0
 800dd46:	460f      	mov	r7, r1
 800dd48:	f7f2 ff0e 	bl	8000b68 <__aeabi_dcmpgt>
 800dd4c:	b9c8      	cbnz	r0, 800dd82 <_dtoa_r+0x69a>
 800dd4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dd52:	4630      	mov	r0, r6
 800dd54:	4639      	mov	r1, r7
 800dd56:	f7f2 fedf 	bl	8000b18 <__aeabi_dcmpeq>
 800dd5a:	b110      	cbz	r0, 800dd62 <_dtoa_r+0x67a>
 800dd5c:	f018 0f01 	tst.w	r8, #1
 800dd60:	d10f      	bne.n	800dd82 <_dtoa_r+0x69a>
 800dd62:	9904      	ldr	r1, [sp, #16]
 800dd64:	4620      	mov	r0, r4
 800dd66:	f000 fcaa 	bl	800e6be <_Bfree>
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dd6e:	702b      	strb	r3, [r5, #0]
 800dd70:	f10a 0301 	add.w	r3, sl, #1
 800dd74:	6013      	str	r3, [r2, #0]
 800dd76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	f000 8241 	beq.w	800e200 <_dtoa_r+0xb18>
 800dd7e:	601d      	str	r5, [r3, #0]
 800dd80:	e23e      	b.n	800e200 <_dtoa_r+0xb18>
 800dd82:	f8cd a020 	str.w	sl, [sp, #32]
 800dd86:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800dd8a:	2a39      	cmp	r2, #57	; 0x39
 800dd8c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800dd90:	d108      	bne.n	800dda4 <_dtoa_r+0x6bc>
 800dd92:	459b      	cmp	fp, r3
 800dd94:	d10a      	bne.n	800ddac <_dtoa_r+0x6c4>
 800dd96:	9b08      	ldr	r3, [sp, #32]
 800dd98:	3301      	adds	r3, #1
 800dd9a:	9308      	str	r3, [sp, #32]
 800dd9c:	2330      	movs	r3, #48	; 0x30
 800dd9e:	f88b 3000 	strb.w	r3, [fp]
 800dda2:	465b      	mov	r3, fp
 800dda4:	781a      	ldrb	r2, [r3, #0]
 800dda6:	3201      	adds	r2, #1
 800dda8:	701a      	strb	r2, [r3, #0]
 800ddaa:	e78c      	b.n	800dcc6 <_dtoa_r+0x5de>
 800ddac:	461d      	mov	r5, r3
 800ddae:	e7ea      	b.n	800dd86 <_dtoa_r+0x69e>
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	4b9b      	ldr	r3, [pc, #620]	; (800e020 <_dtoa_r+0x938>)
 800ddb4:	f7f2 fc48 	bl	8000648 <__aeabi_dmul>
 800ddb8:	2200      	movs	r2, #0
 800ddba:	2300      	movs	r3, #0
 800ddbc:	4606      	mov	r6, r0
 800ddbe:	460f      	mov	r7, r1
 800ddc0:	f7f2 feaa 	bl	8000b18 <__aeabi_dcmpeq>
 800ddc4:	2800      	cmp	r0, #0
 800ddc6:	d09a      	beq.n	800dcfe <_dtoa_r+0x616>
 800ddc8:	e7cb      	b.n	800dd62 <_dtoa_r+0x67a>
 800ddca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ddcc:	2a00      	cmp	r2, #0
 800ddce:	f000 808b 	beq.w	800dee8 <_dtoa_r+0x800>
 800ddd2:	9a06      	ldr	r2, [sp, #24]
 800ddd4:	2a01      	cmp	r2, #1
 800ddd6:	dc6e      	bgt.n	800deb6 <_dtoa_r+0x7ce>
 800ddd8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ddda:	2a00      	cmp	r2, #0
 800dddc:	d067      	beq.n	800deae <_dtoa_r+0x7c6>
 800ddde:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dde2:	9f07      	ldr	r7, [sp, #28]
 800dde4:	9d05      	ldr	r5, [sp, #20]
 800dde6:	9a05      	ldr	r2, [sp, #20]
 800dde8:	2101      	movs	r1, #1
 800ddea:	441a      	add	r2, r3
 800ddec:	4620      	mov	r0, r4
 800ddee:	9205      	str	r2, [sp, #20]
 800ddf0:	4498      	add	r8, r3
 800ddf2:	f000 fd04 	bl	800e7fe <__i2b>
 800ddf6:	4606      	mov	r6, r0
 800ddf8:	2d00      	cmp	r5, #0
 800ddfa:	dd0c      	ble.n	800de16 <_dtoa_r+0x72e>
 800ddfc:	f1b8 0f00 	cmp.w	r8, #0
 800de00:	dd09      	ble.n	800de16 <_dtoa_r+0x72e>
 800de02:	4545      	cmp	r5, r8
 800de04:	9a05      	ldr	r2, [sp, #20]
 800de06:	462b      	mov	r3, r5
 800de08:	bfa8      	it	ge
 800de0a:	4643      	movge	r3, r8
 800de0c:	1ad2      	subs	r2, r2, r3
 800de0e:	9205      	str	r2, [sp, #20]
 800de10:	1aed      	subs	r5, r5, r3
 800de12:	eba8 0803 	sub.w	r8, r8, r3
 800de16:	9b07      	ldr	r3, [sp, #28]
 800de18:	b1eb      	cbz	r3, 800de56 <_dtoa_r+0x76e>
 800de1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d067      	beq.n	800def0 <_dtoa_r+0x808>
 800de20:	b18f      	cbz	r7, 800de46 <_dtoa_r+0x75e>
 800de22:	4631      	mov	r1, r6
 800de24:	463a      	mov	r2, r7
 800de26:	4620      	mov	r0, r4
 800de28:	f000 fd88 	bl	800e93c <__pow5mult>
 800de2c:	9a04      	ldr	r2, [sp, #16]
 800de2e:	4601      	mov	r1, r0
 800de30:	4606      	mov	r6, r0
 800de32:	4620      	mov	r0, r4
 800de34:	f000 fcec 	bl	800e810 <__multiply>
 800de38:	9904      	ldr	r1, [sp, #16]
 800de3a:	9008      	str	r0, [sp, #32]
 800de3c:	4620      	mov	r0, r4
 800de3e:	f000 fc3e 	bl	800e6be <_Bfree>
 800de42:	9b08      	ldr	r3, [sp, #32]
 800de44:	9304      	str	r3, [sp, #16]
 800de46:	9b07      	ldr	r3, [sp, #28]
 800de48:	1bda      	subs	r2, r3, r7
 800de4a:	d004      	beq.n	800de56 <_dtoa_r+0x76e>
 800de4c:	9904      	ldr	r1, [sp, #16]
 800de4e:	4620      	mov	r0, r4
 800de50:	f000 fd74 	bl	800e93c <__pow5mult>
 800de54:	9004      	str	r0, [sp, #16]
 800de56:	2101      	movs	r1, #1
 800de58:	4620      	mov	r0, r4
 800de5a:	f000 fcd0 	bl	800e7fe <__i2b>
 800de5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800de60:	4607      	mov	r7, r0
 800de62:	2b00      	cmp	r3, #0
 800de64:	f000 81d0 	beq.w	800e208 <_dtoa_r+0xb20>
 800de68:	461a      	mov	r2, r3
 800de6a:	4601      	mov	r1, r0
 800de6c:	4620      	mov	r0, r4
 800de6e:	f000 fd65 	bl	800e93c <__pow5mult>
 800de72:	9b06      	ldr	r3, [sp, #24]
 800de74:	2b01      	cmp	r3, #1
 800de76:	4607      	mov	r7, r0
 800de78:	dc40      	bgt.n	800defc <_dtoa_r+0x814>
 800de7a:	9b00      	ldr	r3, [sp, #0]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d139      	bne.n	800def4 <_dtoa_r+0x80c>
 800de80:	9b01      	ldr	r3, [sp, #4]
 800de82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800de86:	2b00      	cmp	r3, #0
 800de88:	d136      	bne.n	800def8 <_dtoa_r+0x810>
 800de8a:	9b01      	ldr	r3, [sp, #4]
 800de8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800de90:	0d1b      	lsrs	r3, r3, #20
 800de92:	051b      	lsls	r3, r3, #20
 800de94:	b12b      	cbz	r3, 800dea2 <_dtoa_r+0x7ba>
 800de96:	9b05      	ldr	r3, [sp, #20]
 800de98:	3301      	adds	r3, #1
 800de9a:	9305      	str	r3, [sp, #20]
 800de9c:	f108 0801 	add.w	r8, r8, #1
 800dea0:	2301      	movs	r3, #1
 800dea2:	9307      	str	r3, [sp, #28]
 800dea4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d12a      	bne.n	800df00 <_dtoa_r+0x818>
 800deaa:	2001      	movs	r0, #1
 800deac:	e030      	b.n	800df10 <_dtoa_r+0x828>
 800deae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800deb0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800deb4:	e795      	b.n	800dde2 <_dtoa_r+0x6fa>
 800deb6:	9b07      	ldr	r3, [sp, #28]
 800deb8:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800debc:	42bb      	cmp	r3, r7
 800debe:	bfbf      	itttt	lt
 800dec0:	9b07      	ldrlt	r3, [sp, #28]
 800dec2:	9707      	strlt	r7, [sp, #28]
 800dec4:	1afa      	sublt	r2, r7, r3
 800dec6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800dec8:	bfbb      	ittet	lt
 800deca:	189b      	addlt	r3, r3, r2
 800decc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800dece:	1bdf      	subge	r7, r3, r7
 800ded0:	2700      	movlt	r7, #0
 800ded2:	f1b9 0f00 	cmp.w	r9, #0
 800ded6:	bfb5      	itete	lt
 800ded8:	9b05      	ldrlt	r3, [sp, #20]
 800deda:	9d05      	ldrge	r5, [sp, #20]
 800dedc:	eba3 0509 	sublt.w	r5, r3, r9
 800dee0:	464b      	movge	r3, r9
 800dee2:	bfb8      	it	lt
 800dee4:	2300      	movlt	r3, #0
 800dee6:	e77e      	b.n	800dde6 <_dtoa_r+0x6fe>
 800dee8:	9f07      	ldr	r7, [sp, #28]
 800deea:	9d05      	ldr	r5, [sp, #20]
 800deec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800deee:	e783      	b.n	800ddf8 <_dtoa_r+0x710>
 800def0:	9a07      	ldr	r2, [sp, #28]
 800def2:	e7ab      	b.n	800de4c <_dtoa_r+0x764>
 800def4:	2300      	movs	r3, #0
 800def6:	e7d4      	b.n	800dea2 <_dtoa_r+0x7ba>
 800def8:	9b00      	ldr	r3, [sp, #0]
 800defa:	e7d2      	b.n	800dea2 <_dtoa_r+0x7ba>
 800defc:	2300      	movs	r3, #0
 800defe:	9307      	str	r3, [sp, #28]
 800df00:	693b      	ldr	r3, [r7, #16]
 800df02:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800df06:	6918      	ldr	r0, [r3, #16]
 800df08:	f000 fc2b 	bl	800e762 <__hi0bits>
 800df0c:	f1c0 0020 	rsb	r0, r0, #32
 800df10:	4440      	add	r0, r8
 800df12:	f010 001f 	ands.w	r0, r0, #31
 800df16:	d047      	beq.n	800dfa8 <_dtoa_r+0x8c0>
 800df18:	f1c0 0320 	rsb	r3, r0, #32
 800df1c:	2b04      	cmp	r3, #4
 800df1e:	dd3b      	ble.n	800df98 <_dtoa_r+0x8b0>
 800df20:	9b05      	ldr	r3, [sp, #20]
 800df22:	f1c0 001c 	rsb	r0, r0, #28
 800df26:	4403      	add	r3, r0
 800df28:	9305      	str	r3, [sp, #20]
 800df2a:	4405      	add	r5, r0
 800df2c:	4480      	add	r8, r0
 800df2e:	9b05      	ldr	r3, [sp, #20]
 800df30:	2b00      	cmp	r3, #0
 800df32:	dd05      	ble.n	800df40 <_dtoa_r+0x858>
 800df34:	461a      	mov	r2, r3
 800df36:	9904      	ldr	r1, [sp, #16]
 800df38:	4620      	mov	r0, r4
 800df3a:	f000 fd4d 	bl	800e9d8 <__lshift>
 800df3e:	9004      	str	r0, [sp, #16]
 800df40:	f1b8 0f00 	cmp.w	r8, #0
 800df44:	dd05      	ble.n	800df52 <_dtoa_r+0x86a>
 800df46:	4639      	mov	r1, r7
 800df48:	4642      	mov	r2, r8
 800df4a:	4620      	mov	r0, r4
 800df4c:	f000 fd44 	bl	800e9d8 <__lshift>
 800df50:	4607      	mov	r7, r0
 800df52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800df54:	b353      	cbz	r3, 800dfac <_dtoa_r+0x8c4>
 800df56:	4639      	mov	r1, r7
 800df58:	9804      	ldr	r0, [sp, #16]
 800df5a:	f000 fd91 	bl	800ea80 <__mcmp>
 800df5e:	2800      	cmp	r0, #0
 800df60:	da24      	bge.n	800dfac <_dtoa_r+0x8c4>
 800df62:	2300      	movs	r3, #0
 800df64:	220a      	movs	r2, #10
 800df66:	9904      	ldr	r1, [sp, #16]
 800df68:	4620      	mov	r0, r4
 800df6a:	f000 fbbf 	bl	800e6ec <__multadd>
 800df6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df70:	9004      	str	r0, [sp, #16]
 800df72:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800df76:	2b00      	cmp	r3, #0
 800df78:	f000 814d 	beq.w	800e216 <_dtoa_r+0xb2e>
 800df7c:	2300      	movs	r3, #0
 800df7e:	4631      	mov	r1, r6
 800df80:	220a      	movs	r2, #10
 800df82:	4620      	mov	r0, r4
 800df84:	f000 fbb2 	bl	800e6ec <__multadd>
 800df88:	9b02      	ldr	r3, [sp, #8]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	4606      	mov	r6, r0
 800df8e:	dc4f      	bgt.n	800e030 <_dtoa_r+0x948>
 800df90:	9b06      	ldr	r3, [sp, #24]
 800df92:	2b02      	cmp	r3, #2
 800df94:	dd4c      	ble.n	800e030 <_dtoa_r+0x948>
 800df96:	e011      	b.n	800dfbc <_dtoa_r+0x8d4>
 800df98:	d0c9      	beq.n	800df2e <_dtoa_r+0x846>
 800df9a:	9a05      	ldr	r2, [sp, #20]
 800df9c:	331c      	adds	r3, #28
 800df9e:	441a      	add	r2, r3
 800dfa0:	9205      	str	r2, [sp, #20]
 800dfa2:	441d      	add	r5, r3
 800dfa4:	4498      	add	r8, r3
 800dfa6:	e7c2      	b.n	800df2e <_dtoa_r+0x846>
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	e7f6      	b.n	800df9a <_dtoa_r+0x8b2>
 800dfac:	f1b9 0f00 	cmp.w	r9, #0
 800dfb0:	dc38      	bgt.n	800e024 <_dtoa_r+0x93c>
 800dfb2:	9b06      	ldr	r3, [sp, #24]
 800dfb4:	2b02      	cmp	r3, #2
 800dfb6:	dd35      	ble.n	800e024 <_dtoa_r+0x93c>
 800dfb8:	f8cd 9008 	str.w	r9, [sp, #8]
 800dfbc:	9b02      	ldr	r3, [sp, #8]
 800dfbe:	b963      	cbnz	r3, 800dfda <_dtoa_r+0x8f2>
 800dfc0:	4639      	mov	r1, r7
 800dfc2:	2205      	movs	r2, #5
 800dfc4:	4620      	mov	r0, r4
 800dfc6:	f000 fb91 	bl	800e6ec <__multadd>
 800dfca:	4601      	mov	r1, r0
 800dfcc:	4607      	mov	r7, r0
 800dfce:	9804      	ldr	r0, [sp, #16]
 800dfd0:	f000 fd56 	bl	800ea80 <__mcmp>
 800dfd4:	2800      	cmp	r0, #0
 800dfd6:	f73f adcc 	bgt.w	800db72 <_dtoa_r+0x48a>
 800dfda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dfdc:	465d      	mov	r5, fp
 800dfde:	ea6f 0a03 	mvn.w	sl, r3
 800dfe2:	f04f 0900 	mov.w	r9, #0
 800dfe6:	4639      	mov	r1, r7
 800dfe8:	4620      	mov	r0, r4
 800dfea:	f000 fb68 	bl	800e6be <_Bfree>
 800dfee:	2e00      	cmp	r6, #0
 800dff0:	f43f aeb7 	beq.w	800dd62 <_dtoa_r+0x67a>
 800dff4:	f1b9 0f00 	cmp.w	r9, #0
 800dff8:	d005      	beq.n	800e006 <_dtoa_r+0x91e>
 800dffa:	45b1      	cmp	r9, r6
 800dffc:	d003      	beq.n	800e006 <_dtoa_r+0x91e>
 800dffe:	4649      	mov	r1, r9
 800e000:	4620      	mov	r0, r4
 800e002:	f000 fb5c 	bl	800e6be <_Bfree>
 800e006:	4631      	mov	r1, r6
 800e008:	4620      	mov	r0, r4
 800e00a:	f000 fb58 	bl	800e6be <_Bfree>
 800e00e:	e6a8      	b.n	800dd62 <_dtoa_r+0x67a>
 800e010:	2700      	movs	r7, #0
 800e012:	463e      	mov	r6, r7
 800e014:	e7e1      	b.n	800dfda <_dtoa_r+0x8f2>
 800e016:	f8dd a020 	ldr.w	sl, [sp, #32]
 800e01a:	463e      	mov	r6, r7
 800e01c:	e5a9      	b.n	800db72 <_dtoa_r+0x48a>
 800e01e:	bf00      	nop
 800e020:	40240000 	.word	0x40240000
 800e024:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e026:	f8cd 9008 	str.w	r9, [sp, #8]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	f000 80fa 	beq.w	800e224 <_dtoa_r+0xb3c>
 800e030:	2d00      	cmp	r5, #0
 800e032:	dd05      	ble.n	800e040 <_dtoa_r+0x958>
 800e034:	4631      	mov	r1, r6
 800e036:	462a      	mov	r2, r5
 800e038:	4620      	mov	r0, r4
 800e03a:	f000 fccd 	bl	800e9d8 <__lshift>
 800e03e:	4606      	mov	r6, r0
 800e040:	9b07      	ldr	r3, [sp, #28]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d04c      	beq.n	800e0e0 <_dtoa_r+0x9f8>
 800e046:	6871      	ldr	r1, [r6, #4]
 800e048:	4620      	mov	r0, r4
 800e04a:	f000 fb04 	bl	800e656 <_Balloc>
 800e04e:	6932      	ldr	r2, [r6, #16]
 800e050:	3202      	adds	r2, #2
 800e052:	4605      	mov	r5, r0
 800e054:	0092      	lsls	r2, r2, #2
 800e056:	f106 010c 	add.w	r1, r6, #12
 800e05a:	300c      	adds	r0, #12
 800e05c:	f000 faf0 	bl	800e640 <memcpy>
 800e060:	2201      	movs	r2, #1
 800e062:	4629      	mov	r1, r5
 800e064:	4620      	mov	r0, r4
 800e066:	f000 fcb7 	bl	800e9d8 <__lshift>
 800e06a:	9b00      	ldr	r3, [sp, #0]
 800e06c:	f8cd b014 	str.w	fp, [sp, #20]
 800e070:	f003 0301 	and.w	r3, r3, #1
 800e074:	46b1      	mov	r9, r6
 800e076:	9307      	str	r3, [sp, #28]
 800e078:	4606      	mov	r6, r0
 800e07a:	4639      	mov	r1, r7
 800e07c:	9804      	ldr	r0, [sp, #16]
 800e07e:	f7ff faa5 	bl	800d5cc <quorem>
 800e082:	4649      	mov	r1, r9
 800e084:	4605      	mov	r5, r0
 800e086:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e08a:	9804      	ldr	r0, [sp, #16]
 800e08c:	f000 fcf8 	bl	800ea80 <__mcmp>
 800e090:	4632      	mov	r2, r6
 800e092:	9000      	str	r0, [sp, #0]
 800e094:	4639      	mov	r1, r7
 800e096:	4620      	mov	r0, r4
 800e098:	f000 fd0c 	bl	800eab4 <__mdiff>
 800e09c:	68c3      	ldr	r3, [r0, #12]
 800e09e:	4602      	mov	r2, r0
 800e0a0:	bb03      	cbnz	r3, 800e0e4 <_dtoa_r+0x9fc>
 800e0a2:	4601      	mov	r1, r0
 800e0a4:	9008      	str	r0, [sp, #32]
 800e0a6:	9804      	ldr	r0, [sp, #16]
 800e0a8:	f000 fcea 	bl	800ea80 <__mcmp>
 800e0ac:	9a08      	ldr	r2, [sp, #32]
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	4611      	mov	r1, r2
 800e0b2:	4620      	mov	r0, r4
 800e0b4:	9308      	str	r3, [sp, #32]
 800e0b6:	f000 fb02 	bl	800e6be <_Bfree>
 800e0ba:	9b08      	ldr	r3, [sp, #32]
 800e0bc:	b9a3      	cbnz	r3, 800e0e8 <_dtoa_r+0xa00>
 800e0be:	9a06      	ldr	r2, [sp, #24]
 800e0c0:	b992      	cbnz	r2, 800e0e8 <_dtoa_r+0xa00>
 800e0c2:	9a07      	ldr	r2, [sp, #28]
 800e0c4:	b982      	cbnz	r2, 800e0e8 <_dtoa_r+0xa00>
 800e0c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e0ca:	d029      	beq.n	800e120 <_dtoa_r+0xa38>
 800e0cc:	9b00      	ldr	r3, [sp, #0]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	dd01      	ble.n	800e0d6 <_dtoa_r+0x9ee>
 800e0d2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800e0d6:	9b05      	ldr	r3, [sp, #20]
 800e0d8:	1c5d      	adds	r5, r3, #1
 800e0da:	f883 8000 	strb.w	r8, [r3]
 800e0de:	e782      	b.n	800dfe6 <_dtoa_r+0x8fe>
 800e0e0:	4630      	mov	r0, r6
 800e0e2:	e7c2      	b.n	800e06a <_dtoa_r+0x982>
 800e0e4:	2301      	movs	r3, #1
 800e0e6:	e7e3      	b.n	800e0b0 <_dtoa_r+0x9c8>
 800e0e8:	9a00      	ldr	r2, [sp, #0]
 800e0ea:	2a00      	cmp	r2, #0
 800e0ec:	db04      	blt.n	800e0f8 <_dtoa_r+0xa10>
 800e0ee:	d125      	bne.n	800e13c <_dtoa_r+0xa54>
 800e0f0:	9a06      	ldr	r2, [sp, #24]
 800e0f2:	bb1a      	cbnz	r2, 800e13c <_dtoa_r+0xa54>
 800e0f4:	9a07      	ldr	r2, [sp, #28]
 800e0f6:	bb0a      	cbnz	r2, 800e13c <_dtoa_r+0xa54>
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	ddec      	ble.n	800e0d6 <_dtoa_r+0x9ee>
 800e0fc:	2201      	movs	r2, #1
 800e0fe:	9904      	ldr	r1, [sp, #16]
 800e100:	4620      	mov	r0, r4
 800e102:	f000 fc69 	bl	800e9d8 <__lshift>
 800e106:	4639      	mov	r1, r7
 800e108:	9004      	str	r0, [sp, #16]
 800e10a:	f000 fcb9 	bl	800ea80 <__mcmp>
 800e10e:	2800      	cmp	r0, #0
 800e110:	dc03      	bgt.n	800e11a <_dtoa_r+0xa32>
 800e112:	d1e0      	bne.n	800e0d6 <_dtoa_r+0x9ee>
 800e114:	f018 0f01 	tst.w	r8, #1
 800e118:	d0dd      	beq.n	800e0d6 <_dtoa_r+0x9ee>
 800e11a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e11e:	d1d8      	bne.n	800e0d2 <_dtoa_r+0x9ea>
 800e120:	9b05      	ldr	r3, [sp, #20]
 800e122:	9a05      	ldr	r2, [sp, #20]
 800e124:	1c5d      	adds	r5, r3, #1
 800e126:	2339      	movs	r3, #57	; 0x39
 800e128:	7013      	strb	r3, [r2, #0]
 800e12a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e12e:	2b39      	cmp	r3, #57	; 0x39
 800e130:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800e134:	d04f      	beq.n	800e1d6 <_dtoa_r+0xaee>
 800e136:	3301      	adds	r3, #1
 800e138:	7013      	strb	r3, [r2, #0]
 800e13a:	e754      	b.n	800dfe6 <_dtoa_r+0x8fe>
 800e13c:	9a05      	ldr	r2, [sp, #20]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	f102 0501 	add.w	r5, r2, #1
 800e144:	dd06      	ble.n	800e154 <_dtoa_r+0xa6c>
 800e146:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e14a:	d0e9      	beq.n	800e120 <_dtoa_r+0xa38>
 800e14c:	f108 0801 	add.w	r8, r8, #1
 800e150:	9b05      	ldr	r3, [sp, #20]
 800e152:	e7c2      	b.n	800e0da <_dtoa_r+0x9f2>
 800e154:	9a02      	ldr	r2, [sp, #8]
 800e156:	f805 8c01 	strb.w	r8, [r5, #-1]
 800e15a:	eba5 030b 	sub.w	r3, r5, fp
 800e15e:	4293      	cmp	r3, r2
 800e160:	d021      	beq.n	800e1a6 <_dtoa_r+0xabe>
 800e162:	2300      	movs	r3, #0
 800e164:	220a      	movs	r2, #10
 800e166:	9904      	ldr	r1, [sp, #16]
 800e168:	4620      	mov	r0, r4
 800e16a:	f000 fabf 	bl	800e6ec <__multadd>
 800e16e:	45b1      	cmp	r9, r6
 800e170:	9004      	str	r0, [sp, #16]
 800e172:	f04f 0300 	mov.w	r3, #0
 800e176:	f04f 020a 	mov.w	r2, #10
 800e17a:	4649      	mov	r1, r9
 800e17c:	4620      	mov	r0, r4
 800e17e:	d105      	bne.n	800e18c <_dtoa_r+0xaa4>
 800e180:	f000 fab4 	bl	800e6ec <__multadd>
 800e184:	4681      	mov	r9, r0
 800e186:	4606      	mov	r6, r0
 800e188:	9505      	str	r5, [sp, #20]
 800e18a:	e776      	b.n	800e07a <_dtoa_r+0x992>
 800e18c:	f000 faae 	bl	800e6ec <__multadd>
 800e190:	4631      	mov	r1, r6
 800e192:	4681      	mov	r9, r0
 800e194:	2300      	movs	r3, #0
 800e196:	220a      	movs	r2, #10
 800e198:	4620      	mov	r0, r4
 800e19a:	f000 faa7 	bl	800e6ec <__multadd>
 800e19e:	4606      	mov	r6, r0
 800e1a0:	e7f2      	b.n	800e188 <_dtoa_r+0xaa0>
 800e1a2:	f04f 0900 	mov.w	r9, #0
 800e1a6:	2201      	movs	r2, #1
 800e1a8:	9904      	ldr	r1, [sp, #16]
 800e1aa:	4620      	mov	r0, r4
 800e1ac:	f000 fc14 	bl	800e9d8 <__lshift>
 800e1b0:	4639      	mov	r1, r7
 800e1b2:	9004      	str	r0, [sp, #16]
 800e1b4:	f000 fc64 	bl	800ea80 <__mcmp>
 800e1b8:	2800      	cmp	r0, #0
 800e1ba:	dcb6      	bgt.n	800e12a <_dtoa_r+0xa42>
 800e1bc:	d102      	bne.n	800e1c4 <_dtoa_r+0xadc>
 800e1be:	f018 0f01 	tst.w	r8, #1
 800e1c2:	d1b2      	bne.n	800e12a <_dtoa_r+0xa42>
 800e1c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e1c8:	2b30      	cmp	r3, #48	; 0x30
 800e1ca:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800e1ce:	f47f af0a 	bne.w	800dfe6 <_dtoa_r+0x8fe>
 800e1d2:	4615      	mov	r5, r2
 800e1d4:	e7f6      	b.n	800e1c4 <_dtoa_r+0xadc>
 800e1d6:	4593      	cmp	fp, r2
 800e1d8:	d105      	bne.n	800e1e6 <_dtoa_r+0xafe>
 800e1da:	2331      	movs	r3, #49	; 0x31
 800e1dc:	f10a 0a01 	add.w	sl, sl, #1
 800e1e0:	f88b 3000 	strb.w	r3, [fp]
 800e1e4:	e6ff      	b.n	800dfe6 <_dtoa_r+0x8fe>
 800e1e6:	4615      	mov	r5, r2
 800e1e8:	e79f      	b.n	800e12a <_dtoa_r+0xa42>
 800e1ea:	f8df b064 	ldr.w	fp, [pc, #100]	; 800e250 <_dtoa_r+0xb68>
 800e1ee:	e007      	b.n	800e200 <_dtoa_r+0xb18>
 800e1f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e1f2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800e254 <_dtoa_r+0xb6c>
 800e1f6:	b11b      	cbz	r3, 800e200 <_dtoa_r+0xb18>
 800e1f8:	f10b 0308 	add.w	r3, fp, #8
 800e1fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e1fe:	6013      	str	r3, [r2, #0]
 800e200:	4658      	mov	r0, fp
 800e202:	b017      	add	sp, #92	; 0x5c
 800e204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e208:	9b06      	ldr	r3, [sp, #24]
 800e20a:	2b01      	cmp	r3, #1
 800e20c:	f77f ae35 	ble.w	800de7a <_dtoa_r+0x792>
 800e210:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e212:	9307      	str	r3, [sp, #28]
 800e214:	e649      	b.n	800deaa <_dtoa_r+0x7c2>
 800e216:	9b02      	ldr	r3, [sp, #8]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	dc03      	bgt.n	800e224 <_dtoa_r+0xb3c>
 800e21c:	9b06      	ldr	r3, [sp, #24]
 800e21e:	2b02      	cmp	r3, #2
 800e220:	f73f aecc 	bgt.w	800dfbc <_dtoa_r+0x8d4>
 800e224:	465d      	mov	r5, fp
 800e226:	4639      	mov	r1, r7
 800e228:	9804      	ldr	r0, [sp, #16]
 800e22a:	f7ff f9cf 	bl	800d5cc <quorem>
 800e22e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e232:	f805 8b01 	strb.w	r8, [r5], #1
 800e236:	9a02      	ldr	r2, [sp, #8]
 800e238:	eba5 030b 	sub.w	r3, r5, fp
 800e23c:	429a      	cmp	r2, r3
 800e23e:	ddb0      	ble.n	800e1a2 <_dtoa_r+0xaba>
 800e240:	2300      	movs	r3, #0
 800e242:	220a      	movs	r2, #10
 800e244:	9904      	ldr	r1, [sp, #16]
 800e246:	4620      	mov	r0, r4
 800e248:	f000 fa50 	bl	800e6ec <__multadd>
 800e24c:	9004      	str	r0, [sp, #16]
 800e24e:	e7ea      	b.n	800e226 <_dtoa_r+0xb3e>
 800e250:	0801022c 	.word	0x0801022c
 800e254:	08010250 	.word	0x08010250

0800e258 <__sflush_r>:
 800e258:	898a      	ldrh	r2, [r1, #12]
 800e25a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e25e:	4605      	mov	r5, r0
 800e260:	0710      	lsls	r0, r2, #28
 800e262:	460c      	mov	r4, r1
 800e264:	d458      	bmi.n	800e318 <__sflush_r+0xc0>
 800e266:	684b      	ldr	r3, [r1, #4]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	dc05      	bgt.n	800e278 <__sflush_r+0x20>
 800e26c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e26e:	2b00      	cmp	r3, #0
 800e270:	dc02      	bgt.n	800e278 <__sflush_r+0x20>
 800e272:	2000      	movs	r0, #0
 800e274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e278:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e27a:	2e00      	cmp	r6, #0
 800e27c:	d0f9      	beq.n	800e272 <__sflush_r+0x1a>
 800e27e:	2300      	movs	r3, #0
 800e280:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e284:	682f      	ldr	r7, [r5, #0]
 800e286:	6a21      	ldr	r1, [r4, #32]
 800e288:	602b      	str	r3, [r5, #0]
 800e28a:	d032      	beq.n	800e2f2 <__sflush_r+0x9a>
 800e28c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e28e:	89a3      	ldrh	r3, [r4, #12]
 800e290:	075a      	lsls	r2, r3, #29
 800e292:	d505      	bpl.n	800e2a0 <__sflush_r+0x48>
 800e294:	6863      	ldr	r3, [r4, #4]
 800e296:	1ac0      	subs	r0, r0, r3
 800e298:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e29a:	b10b      	cbz	r3, 800e2a0 <__sflush_r+0x48>
 800e29c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e29e:	1ac0      	subs	r0, r0, r3
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	4602      	mov	r2, r0
 800e2a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e2a6:	6a21      	ldr	r1, [r4, #32]
 800e2a8:	4628      	mov	r0, r5
 800e2aa:	47b0      	blx	r6
 800e2ac:	1c43      	adds	r3, r0, #1
 800e2ae:	89a3      	ldrh	r3, [r4, #12]
 800e2b0:	d106      	bne.n	800e2c0 <__sflush_r+0x68>
 800e2b2:	6829      	ldr	r1, [r5, #0]
 800e2b4:	291d      	cmp	r1, #29
 800e2b6:	d848      	bhi.n	800e34a <__sflush_r+0xf2>
 800e2b8:	4a29      	ldr	r2, [pc, #164]	; (800e360 <__sflush_r+0x108>)
 800e2ba:	40ca      	lsrs	r2, r1
 800e2bc:	07d6      	lsls	r6, r2, #31
 800e2be:	d544      	bpl.n	800e34a <__sflush_r+0xf2>
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	6062      	str	r2, [r4, #4]
 800e2c4:	04d9      	lsls	r1, r3, #19
 800e2c6:	6922      	ldr	r2, [r4, #16]
 800e2c8:	6022      	str	r2, [r4, #0]
 800e2ca:	d504      	bpl.n	800e2d6 <__sflush_r+0x7e>
 800e2cc:	1c42      	adds	r2, r0, #1
 800e2ce:	d101      	bne.n	800e2d4 <__sflush_r+0x7c>
 800e2d0:	682b      	ldr	r3, [r5, #0]
 800e2d2:	b903      	cbnz	r3, 800e2d6 <__sflush_r+0x7e>
 800e2d4:	6560      	str	r0, [r4, #84]	; 0x54
 800e2d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e2d8:	602f      	str	r7, [r5, #0]
 800e2da:	2900      	cmp	r1, #0
 800e2dc:	d0c9      	beq.n	800e272 <__sflush_r+0x1a>
 800e2de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e2e2:	4299      	cmp	r1, r3
 800e2e4:	d002      	beq.n	800e2ec <__sflush_r+0x94>
 800e2e6:	4628      	mov	r0, r5
 800e2e8:	f000 fc9e 	bl	800ec28 <_free_r>
 800e2ec:	2000      	movs	r0, #0
 800e2ee:	6360      	str	r0, [r4, #52]	; 0x34
 800e2f0:	e7c0      	b.n	800e274 <__sflush_r+0x1c>
 800e2f2:	2301      	movs	r3, #1
 800e2f4:	4628      	mov	r0, r5
 800e2f6:	47b0      	blx	r6
 800e2f8:	1c41      	adds	r1, r0, #1
 800e2fa:	d1c8      	bne.n	800e28e <__sflush_r+0x36>
 800e2fc:	682b      	ldr	r3, [r5, #0]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d0c5      	beq.n	800e28e <__sflush_r+0x36>
 800e302:	2b1d      	cmp	r3, #29
 800e304:	d001      	beq.n	800e30a <__sflush_r+0xb2>
 800e306:	2b16      	cmp	r3, #22
 800e308:	d101      	bne.n	800e30e <__sflush_r+0xb6>
 800e30a:	602f      	str	r7, [r5, #0]
 800e30c:	e7b1      	b.n	800e272 <__sflush_r+0x1a>
 800e30e:	89a3      	ldrh	r3, [r4, #12]
 800e310:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e314:	81a3      	strh	r3, [r4, #12]
 800e316:	e7ad      	b.n	800e274 <__sflush_r+0x1c>
 800e318:	690f      	ldr	r7, [r1, #16]
 800e31a:	2f00      	cmp	r7, #0
 800e31c:	d0a9      	beq.n	800e272 <__sflush_r+0x1a>
 800e31e:	0793      	lsls	r3, r2, #30
 800e320:	680e      	ldr	r6, [r1, #0]
 800e322:	bf08      	it	eq
 800e324:	694b      	ldreq	r3, [r1, #20]
 800e326:	600f      	str	r7, [r1, #0]
 800e328:	bf18      	it	ne
 800e32a:	2300      	movne	r3, #0
 800e32c:	eba6 0807 	sub.w	r8, r6, r7
 800e330:	608b      	str	r3, [r1, #8]
 800e332:	f1b8 0f00 	cmp.w	r8, #0
 800e336:	dd9c      	ble.n	800e272 <__sflush_r+0x1a>
 800e338:	4643      	mov	r3, r8
 800e33a:	463a      	mov	r2, r7
 800e33c:	6a21      	ldr	r1, [r4, #32]
 800e33e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e340:	4628      	mov	r0, r5
 800e342:	47b0      	blx	r6
 800e344:	2800      	cmp	r0, #0
 800e346:	dc06      	bgt.n	800e356 <__sflush_r+0xfe>
 800e348:	89a3      	ldrh	r3, [r4, #12]
 800e34a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e34e:	81a3      	strh	r3, [r4, #12]
 800e350:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e354:	e78e      	b.n	800e274 <__sflush_r+0x1c>
 800e356:	4407      	add	r7, r0
 800e358:	eba8 0800 	sub.w	r8, r8, r0
 800e35c:	e7e9      	b.n	800e332 <__sflush_r+0xda>
 800e35e:	bf00      	nop
 800e360:	20400001 	.word	0x20400001

0800e364 <_fflush_r>:
 800e364:	b538      	push	{r3, r4, r5, lr}
 800e366:	690b      	ldr	r3, [r1, #16]
 800e368:	4605      	mov	r5, r0
 800e36a:	460c      	mov	r4, r1
 800e36c:	b1db      	cbz	r3, 800e3a6 <_fflush_r+0x42>
 800e36e:	b118      	cbz	r0, 800e378 <_fflush_r+0x14>
 800e370:	6983      	ldr	r3, [r0, #24]
 800e372:	b90b      	cbnz	r3, 800e378 <_fflush_r+0x14>
 800e374:	f000 f860 	bl	800e438 <__sinit>
 800e378:	4b0c      	ldr	r3, [pc, #48]	; (800e3ac <_fflush_r+0x48>)
 800e37a:	429c      	cmp	r4, r3
 800e37c:	d109      	bne.n	800e392 <_fflush_r+0x2e>
 800e37e:	686c      	ldr	r4, [r5, #4]
 800e380:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e384:	b17b      	cbz	r3, 800e3a6 <_fflush_r+0x42>
 800e386:	4621      	mov	r1, r4
 800e388:	4628      	mov	r0, r5
 800e38a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e38e:	f7ff bf63 	b.w	800e258 <__sflush_r>
 800e392:	4b07      	ldr	r3, [pc, #28]	; (800e3b0 <_fflush_r+0x4c>)
 800e394:	429c      	cmp	r4, r3
 800e396:	d101      	bne.n	800e39c <_fflush_r+0x38>
 800e398:	68ac      	ldr	r4, [r5, #8]
 800e39a:	e7f1      	b.n	800e380 <_fflush_r+0x1c>
 800e39c:	4b05      	ldr	r3, [pc, #20]	; (800e3b4 <_fflush_r+0x50>)
 800e39e:	429c      	cmp	r4, r3
 800e3a0:	bf08      	it	eq
 800e3a2:	68ec      	ldreq	r4, [r5, #12]
 800e3a4:	e7ec      	b.n	800e380 <_fflush_r+0x1c>
 800e3a6:	2000      	movs	r0, #0
 800e3a8:	bd38      	pop	{r3, r4, r5, pc}
 800e3aa:	bf00      	nop
 800e3ac:	08010280 	.word	0x08010280
 800e3b0:	080102a0 	.word	0x080102a0
 800e3b4:	08010260 	.word	0x08010260

0800e3b8 <std>:
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	b510      	push	{r4, lr}
 800e3bc:	4604      	mov	r4, r0
 800e3be:	e9c0 3300 	strd	r3, r3, [r0]
 800e3c2:	6083      	str	r3, [r0, #8]
 800e3c4:	8181      	strh	r1, [r0, #12]
 800e3c6:	6643      	str	r3, [r0, #100]	; 0x64
 800e3c8:	81c2      	strh	r2, [r0, #14]
 800e3ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e3ce:	6183      	str	r3, [r0, #24]
 800e3d0:	4619      	mov	r1, r3
 800e3d2:	2208      	movs	r2, #8
 800e3d4:	305c      	adds	r0, #92	; 0x5c
 800e3d6:	f7fe fb2d 	bl	800ca34 <memset>
 800e3da:	4b05      	ldr	r3, [pc, #20]	; (800e3f0 <std+0x38>)
 800e3dc:	6263      	str	r3, [r4, #36]	; 0x24
 800e3de:	4b05      	ldr	r3, [pc, #20]	; (800e3f4 <std+0x3c>)
 800e3e0:	62a3      	str	r3, [r4, #40]	; 0x28
 800e3e2:	4b05      	ldr	r3, [pc, #20]	; (800e3f8 <std+0x40>)
 800e3e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e3e6:	4b05      	ldr	r3, [pc, #20]	; (800e3fc <std+0x44>)
 800e3e8:	6224      	str	r4, [r4, #32]
 800e3ea:	6323      	str	r3, [r4, #48]	; 0x30
 800e3ec:	bd10      	pop	{r4, pc}
 800e3ee:	bf00      	nop
 800e3f0:	0800f03d 	.word	0x0800f03d
 800e3f4:	0800f05f 	.word	0x0800f05f
 800e3f8:	0800f097 	.word	0x0800f097
 800e3fc:	0800f0bb 	.word	0x0800f0bb

0800e400 <_cleanup_r>:
 800e400:	4901      	ldr	r1, [pc, #4]	; (800e408 <_cleanup_r+0x8>)
 800e402:	f000 b885 	b.w	800e510 <_fwalk_reent>
 800e406:	bf00      	nop
 800e408:	0800e365 	.word	0x0800e365

0800e40c <__sfmoreglue>:
 800e40c:	b570      	push	{r4, r5, r6, lr}
 800e40e:	1e4a      	subs	r2, r1, #1
 800e410:	2568      	movs	r5, #104	; 0x68
 800e412:	4355      	muls	r5, r2
 800e414:	460e      	mov	r6, r1
 800e416:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e41a:	f000 fc53 	bl	800ecc4 <_malloc_r>
 800e41e:	4604      	mov	r4, r0
 800e420:	b140      	cbz	r0, 800e434 <__sfmoreglue+0x28>
 800e422:	2100      	movs	r1, #0
 800e424:	e9c0 1600 	strd	r1, r6, [r0]
 800e428:	300c      	adds	r0, #12
 800e42a:	60a0      	str	r0, [r4, #8]
 800e42c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e430:	f7fe fb00 	bl	800ca34 <memset>
 800e434:	4620      	mov	r0, r4
 800e436:	bd70      	pop	{r4, r5, r6, pc}

0800e438 <__sinit>:
 800e438:	6983      	ldr	r3, [r0, #24]
 800e43a:	b510      	push	{r4, lr}
 800e43c:	4604      	mov	r4, r0
 800e43e:	bb33      	cbnz	r3, 800e48e <__sinit+0x56>
 800e440:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800e444:	6503      	str	r3, [r0, #80]	; 0x50
 800e446:	4b12      	ldr	r3, [pc, #72]	; (800e490 <__sinit+0x58>)
 800e448:	4a12      	ldr	r2, [pc, #72]	; (800e494 <__sinit+0x5c>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	6282      	str	r2, [r0, #40]	; 0x28
 800e44e:	4298      	cmp	r0, r3
 800e450:	bf04      	itt	eq
 800e452:	2301      	moveq	r3, #1
 800e454:	6183      	streq	r3, [r0, #24]
 800e456:	f000 f81f 	bl	800e498 <__sfp>
 800e45a:	6060      	str	r0, [r4, #4]
 800e45c:	4620      	mov	r0, r4
 800e45e:	f000 f81b 	bl	800e498 <__sfp>
 800e462:	60a0      	str	r0, [r4, #8]
 800e464:	4620      	mov	r0, r4
 800e466:	f000 f817 	bl	800e498 <__sfp>
 800e46a:	2200      	movs	r2, #0
 800e46c:	60e0      	str	r0, [r4, #12]
 800e46e:	2104      	movs	r1, #4
 800e470:	6860      	ldr	r0, [r4, #4]
 800e472:	f7ff ffa1 	bl	800e3b8 <std>
 800e476:	2201      	movs	r2, #1
 800e478:	2109      	movs	r1, #9
 800e47a:	68a0      	ldr	r0, [r4, #8]
 800e47c:	f7ff ff9c 	bl	800e3b8 <std>
 800e480:	2202      	movs	r2, #2
 800e482:	2112      	movs	r1, #18
 800e484:	68e0      	ldr	r0, [r4, #12]
 800e486:	f7ff ff97 	bl	800e3b8 <std>
 800e48a:	2301      	movs	r3, #1
 800e48c:	61a3      	str	r3, [r4, #24]
 800e48e:	bd10      	pop	{r4, pc}
 800e490:	08010218 	.word	0x08010218
 800e494:	0800e401 	.word	0x0800e401

0800e498 <__sfp>:
 800e498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e49a:	4b1b      	ldr	r3, [pc, #108]	; (800e508 <__sfp+0x70>)
 800e49c:	681e      	ldr	r6, [r3, #0]
 800e49e:	69b3      	ldr	r3, [r6, #24]
 800e4a0:	4607      	mov	r7, r0
 800e4a2:	b913      	cbnz	r3, 800e4aa <__sfp+0x12>
 800e4a4:	4630      	mov	r0, r6
 800e4a6:	f7ff ffc7 	bl	800e438 <__sinit>
 800e4aa:	3648      	adds	r6, #72	; 0x48
 800e4ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e4b0:	3b01      	subs	r3, #1
 800e4b2:	d503      	bpl.n	800e4bc <__sfp+0x24>
 800e4b4:	6833      	ldr	r3, [r6, #0]
 800e4b6:	b133      	cbz	r3, 800e4c6 <__sfp+0x2e>
 800e4b8:	6836      	ldr	r6, [r6, #0]
 800e4ba:	e7f7      	b.n	800e4ac <__sfp+0x14>
 800e4bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e4c0:	b16d      	cbz	r5, 800e4de <__sfp+0x46>
 800e4c2:	3468      	adds	r4, #104	; 0x68
 800e4c4:	e7f4      	b.n	800e4b0 <__sfp+0x18>
 800e4c6:	2104      	movs	r1, #4
 800e4c8:	4638      	mov	r0, r7
 800e4ca:	f7ff ff9f 	bl	800e40c <__sfmoreglue>
 800e4ce:	6030      	str	r0, [r6, #0]
 800e4d0:	2800      	cmp	r0, #0
 800e4d2:	d1f1      	bne.n	800e4b8 <__sfp+0x20>
 800e4d4:	230c      	movs	r3, #12
 800e4d6:	603b      	str	r3, [r7, #0]
 800e4d8:	4604      	mov	r4, r0
 800e4da:	4620      	mov	r0, r4
 800e4dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4de:	4b0b      	ldr	r3, [pc, #44]	; (800e50c <__sfp+0x74>)
 800e4e0:	6665      	str	r5, [r4, #100]	; 0x64
 800e4e2:	e9c4 5500 	strd	r5, r5, [r4]
 800e4e6:	60a5      	str	r5, [r4, #8]
 800e4e8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800e4ec:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800e4f0:	2208      	movs	r2, #8
 800e4f2:	4629      	mov	r1, r5
 800e4f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e4f8:	f7fe fa9c 	bl	800ca34 <memset>
 800e4fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e500:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e504:	e7e9      	b.n	800e4da <__sfp+0x42>
 800e506:	bf00      	nop
 800e508:	08010218 	.word	0x08010218
 800e50c:	ffff0001 	.word	0xffff0001

0800e510 <_fwalk_reent>:
 800e510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e514:	4680      	mov	r8, r0
 800e516:	4689      	mov	r9, r1
 800e518:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e51c:	2600      	movs	r6, #0
 800e51e:	b914      	cbnz	r4, 800e526 <_fwalk_reent+0x16>
 800e520:	4630      	mov	r0, r6
 800e522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e526:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800e52a:	3f01      	subs	r7, #1
 800e52c:	d501      	bpl.n	800e532 <_fwalk_reent+0x22>
 800e52e:	6824      	ldr	r4, [r4, #0]
 800e530:	e7f5      	b.n	800e51e <_fwalk_reent+0xe>
 800e532:	89ab      	ldrh	r3, [r5, #12]
 800e534:	2b01      	cmp	r3, #1
 800e536:	d907      	bls.n	800e548 <_fwalk_reent+0x38>
 800e538:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e53c:	3301      	adds	r3, #1
 800e53e:	d003      	beq.n	800e548 <_fwalk_reent+0x38>
 800e540:	4629      	mov	r1, r5
 800e542:	4640      	mov	r0, r8
 800e544:	47c8      	blx	r9
 800e546:	4306      	orrs	r6, r0
 800e548:	3568      	adds	r5, #104	; 0x68
 800e54a:	e7ee      	b.n	800e52a <_fwalk_reent+0x1a>

0800e54c <_localeconv_r>:
 800e54c:	4b04      	ldr	r3, [pc, #16]	; (800e560 <_localeconv_r+0x14>)
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	6a18      	ldr	r0, [r3, #32]
 800e552:	4b04      	ldr	r3, [pc, #16]	; (800e564 <_localeconv_r+0x18>)
 800e554:	2800      	cmp	r0, #0
 800e556:	bf08      	it	eq
 800e558:	4618      	moveq	r0, r3
 800e55a:	30f0      	adds	r0, #240	; 0xf0
 800e55c:	4770      	bx	lr
 800e55e:	bf00      	nop
 800e560:	20001ce8 	.word	0x20001ce8
 800e564:	20001d4c 	.word	0x20001d4c

0800e568 <__swhatbuf_r>:
 800e568:	b570      	push	{r4, r5, r6, lr}
 800e56a:	460e      	mov	r6, r1
 800e56c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e570:	2900      	cmp	r1, #0
 800e572:	b096      	sub	sp, #88	; 0x58
 800e574:	4614      	mov	r4, r2
 800e576:	461d      	mov	r5, r3
 800e578:	da07      	bge.n	800e58a <__swhatbuf_r+0x22>
 800e57a:	2300      	movs	r3, #0
 800e57c:	602b      	str	r3, [r5, #0]
 800e57e:	89b3      	ldrh	r3, [r6, #12]
 800e580:	061a      	lsls	r2, r3, #24
 800e582:	d410      	bmi.n	800e5a6 <__swhatbuf_r+0x3e>
 800e584:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e588:	e00e      	b.n	800e5a8 <__swhatbuf_r+0x40>
 800e58a:	466a      	mov	r2, sp
 800e58c:	f000 fdbc 	bl	800f108 <_fstat_r>
 800e590:	2800      	cmp	r0, #0
 800e592:	dbf2      	blt.n	800e57a <__swhatbuf_r+0x12>
 800e594:	9a01      	ldr	r2, [sp, #4]
 800e596:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e59a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e59e:	425a      	negs	r2, r3
 800e5a0:	415a      	adcs	r2, r3
 800e5a2:	602a      	str	r2, [r5, #0]
 800e5a4:	e7ee      	b.n	800e584 <__swhatbuf_r+0x1c>
 800e5a6:	2340      	movs	r3, #64	; 0x40
 800e5a8:	2000      	movs	r0, #0
 800e5aa:	6023      	str	r3, [r4, #0]
 800e5ac:	b016      	add	sp, #88	; 0x58
 800e5ae:	bd70      	pop	{r4, r5, r6, pc}

0800e5b0 <__smakebuf_r>:
 800e5b0:	898b      	ldrh	r3, [r1, #12]
 800e5b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e5b4:	079d      	lsls	r5, r3, #30
 800e5b6:	4606      	mov	r6, r0
 800e5b8:	460c      	mov	r4, r1
 800e5ba:	d507      	bpl.n	800e5cc <__smakebuf_r+0x1c>
 800e5bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e5c0:	6023      	str	r3, [r4, #0]
 800e5c2:	6123      	str	r3, [r4, #16]
 800e5c4:	2301      	movs	r3, #1
 800e5c6:	6163      	str	r3, [r4, #20]
 800e5c8:	b002      	add	sp, #8
 800e5ca:	bd70      	pop	{r4, r5, r6, pc}
 800e5cc:	ab01      	add	r3, sp, #4
 800e5ce:	466a      	mov	r2, sp
 800e5d0:	f7ff ffca 	bl	800e568 <__swhatbuf_r>
 800e5d4:	9900      	ldr	r1, [sp, #0]
 800e5d6:	4605      	mov	r5, r0
 800e5d8:	4630      	mov	r0, r6
 800e5da:	f000 fb73 	bl	800ecc4 <_malloc_r>
 800e5de:	b948      	cbnz	r0, 800e5f4 <__smakebuf_r+0x44>
 800e5e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5e4:	059a      	lsls	r2, r3, #22
 800e5e6:	d4ef      	bmi.n	800e5c8 <__smakebuf_r+0x18>
 800e5e8:	f023 0303 	bic.w	r3, r3, #3
 800e5ec:	f043 0302 	orr.w	r3, r3, #2
 800e5f0:	81a3      	strh	r3, [r4, #12]
 800e5f2:	e7e3      	b.n	800e5bc <__smakebuf_r+0xc>
 800e5f4:	4b0d      	ldr	r3, [pc, #52]	; (800e62c <__smakebuf_r+0x7c>)
 800e5f6:	62b3      	str	r3, [r6, #40]	; 0x28
 800e5f8:	89a3      	ldrh	r3, [r4, #12]
 800e5fa:	6020      	str	r0, [r4, #0]
 800e5fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e600:	81a3      	strh	r3, [r4, #12]
 800e602:	9b00      	ldr	r3, [sp, #0]
 800e604:	6163      	str	r3, [r4, #20]
 800e606:	9b01      	ldr	r3, [sp, #4]
 800e608:	6120      	str	r0, [r4, #16]
 800e60a:	b15b      	cbz	r3, 800e624 <__smakebuf_r+0x74>
 800e60c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e610:	4630      	mov	r0, r6
 800e612:	f000 fd8b 	bl	800f12c <_isatty_r>
 800e616:	b128      	cbz	r0, 800e624 <__smakebuf_r+0x74>
 800e618:	89a3      	ldrh	r3, [r4, #12]
 800e61a:	f023 0303 	bic.w	r3, r3, #3
 800e61e:	f043 0301 	orr.w	r3, r3, #1
 800e622:	81a3      	strh	r3, [r4, #12]
 800e624:	89a3      	ldrh	r3, [r4, #12]
 800e626:	431d      	orrs	r5, r3
 800e628:	81a5      	strh	r5, [r4, #12]
 800e62a:	e7cd      	b.n	800e5c8 <__smakebuf_r+0x18>
 800e62c:	0800e401 	.word	0x0800e401

0800e630 <malloc>:
 800e630:	4b02      	ldr	r3, [pc, #8]	; (800e63c <malloc+0xc>)
 800e632:	4601      	mov	r1, r0
 800e634:	6818      	ldr	r0, [r3, #0]
 800e636:	f000 bb45 	b.w	800ecc4 <_malloc_r>
 800e63a:	bf00      	nop
 800e63c:	20001ce8 	.word	0x20001ce8

0800e640 <memcpy>:
 800e640:	b510      	push	{r4, lr}
 800e642:	1e43      	subs	r3, r0, #1
 800e644:	440a      	add	r2, r1
 800e646:	4291      	cmp	r1, r2
 800e648:	d100      	bne.n	800e64c <memcpy+0xc>
 800e64a:	bd10      	pop	{r4, pc}
 800e64c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e650:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e654:	e7f7      	b.n	800e646 <memcpy+0x6>

0800e656 <_Balloc>:
 800e656:	b570      	push	{r4, r5, r6, lr}
 800e658:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e65a:	4604      	mov	r4, r0
 800e65c:	460e      	mov	r6, r1
 800e65e:	b93d      	cbnz	r5, 800e670 <_Balloc+0x1a>
 800e660:	2010      	movs	r0, #16
 800e662:	f7ff ffe5 	bl	800e630 <malloc>
 800e666:	6260      	str	r0, [r4, #36]	; 0x24
 800e668:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e66c:	6005      	str	r5, [r0, #0]
 800e66e:	60c5      	str	r5, [r0, #12]
 800e670:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800e672:	68eb      	ldr	r3, [r5, #12]
 800e674:	b183      	cbz	r3, 800e698 <_Balloc+0x42>
 800e676:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e678:	68db      	ldr	r3, [r3, #12]
 800e67a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e67e:	b9b8      	cbnz	r0, 800e6b0 <_Balloc+0x5a>
 800e680:	2101      	movs	r1, #1
 800e682:	fa01 f506 	lsl.w	r5, r1, r6
 800e686:	1d6a      	adds	r2, r5, #5
 800e688:	0092      	lsls	r2, r2, #2
 800e68a:	4620      	mov	r0, r4
 800e68c:	f000 fabe 	bl	800ec0c <_calloc_r>
 800e690:	b160      	cbz	r0, 800e6ac <_Balloc+0x56>
 800e692:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800e696:	e00e      	b.n	800e6b6 <_Balloc+0x60>
 800e698:	2221      	movs	r2, #33	; 0x21
 800e69a:	2104      	movs	r1, #4
 800e69c:	4620      	mov	r0, r4
 800e69e:	f000 fab5 	bl	800ec0c <_calloc_r>
 800e6a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e6a4:	60e8      	str	r0, [r5, #12]
 800e6a6:	68db      	ldr	r3, [r3, #12]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d1e4      	bne.n	800e676 <_Balloc+0x20>
 800e6ac:	2000      	movs	r0, #0
 800e6ae:	bd70      	pop	{r4, r5, r6, pc}
 800e6b0:	6802      	ldr	r2, [r0, #0]
 800e6b2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e6bc:	e7f7      	b.n	800e6ae <_Balloc+0x58>

0800e6be <_Bfree>:
 800e6be:	b570      	push	{r4, r5, r6, lr}
 800e6c0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800e6c2:	4606      	mov	r6, r0
 800e6c4:	460d      	mov	r5, r1
 800e6c6:	b93c      	cbnz	r4, 800e6d8 <_Bfree+0x1a>
 800e6c8:	2010      	movs	r0, #16
 800e6ca:	f7ff ffb1 	bl	800e630 <malloc>
 800e6ce:	6270      	str	r0, [r6, #36]	; 0x24
 800e6d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e6d4:	6004      	str	r4, [r0, #0]
 800e6d6:	60c4      	str	r4, [r0, #12]
 800e6d8:	b13d      	cbz	r5, 800e6ea <_Bfree+0x2c>
 800e6da:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e6dc:	686a      	ldr	r2, [r5, #4]
 800e6de:	68db      	ldr	r3, [r3, #12]
 800e6e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e6e4:	6029      	str	r1, [r5, #0]
 800e6e6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800e6ea:	bd70      	pop	{r4, r5, r6, pc}

0800e6ec <__multadd>:
 800e6ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6f0:	690d      	ldr	r5, [r1, #16]
 800e6f2:	461f      	mov	r7, r3
 800e6f4:	4606      	mov	r6, r0
 800e6f6:	460c      	mov	r4, r1
 800e6f8:	f101 0c14 	add.w	ip, r1, #20
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	f8dc 0000 	ldr.w	r0, [ip]
 800e702:	b281      	uxth	r1, r0
 800e704:	fb02 7101 	mla	r1, r2, r1, r7
 800e708:	0c0f      	lsrs	r7, r1, #16
 800e70a:	0c00      	lsrs	r0, r0, #16
 800e70c:	fb02 7000 	mla	r0, r2, r0, r7
 800e710:	b289      	uxth	r1, r1
 800e712:	3301      	adds	r3, #1
 800e714:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800e718:	429d      	cmp	r5, r3
 800e71a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800e71e:	f84c 1b04 	str.w	r1, [ip], #4
 800e722:	dcec      	bgt.n	800e6fe <__multadd+0x12>
 800e724:	b1d7      	cbz	r7, 800e75c <__multadd+0x70>
 800e726:	68a3      	ldr	r3, [r4, #8]
 800e728:	42ab      	cmp	r3, r5
 800e72a:	dc12      	bgt.n	800e752 <__multadd+0x66>
 800e72c:	6861      	ldr	r1, [r4, #4]
 800e72e:	4630      	mov	r0, r6
 800e730:	3101      	adds	r1, #1
 800e732:	f7ff ff90 	bl	800e656 <_Balloc>
 800e736:	6922      	ldr	r2, [r4, #16]
 800e738:	3202      	adds	r2, #2
 800e73a:	f104 010c 	add.w	r1, r4, #12
 800e73e:	4680      	mov	r8, r0
 800e740:	0092      	lsls	r2, r2, #2
 800e742:	300c      	adds	r0, #12
 800e744:	f7ff ff7c 	bl	800e640 <memcpy>
 800e748:	4621      	mov	r1, r4
 800e74a:	4630      	mov	r0, r6
 800e74c:	f7ff ffb7 	bl	800e6be <_Bfree>
 800e750:	4644      	mov	r4, r8
 800e752:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e756:	3501      	adds	r5, #1
 800e758:	615f      	str	r7, [r3, #20]
 800e75a:	6125      	str	r5, [r4, #16]
 800e75c:	4620      	mov	r0, r4
 800e75e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e762 <__hi0bits>:
 800e762:	0c02      	lsrs	r2, r0, #16
 800e764:	0412      	lsls	r2, r2, #16
 800e766:	4603      	mov	r3, r0
 800e768:	b9b2      	cbnz	r2, 800e798 <__hi0bits+0x36>
 800e76a:	0403      	lsls	r3, r0, #16
 800e76c:	2010      	movs	r0, #16
 800e76e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e772:	bf04      	itt	eq
 800e774:	021b      	lsleq	r3, r3, #8
 800e776:	3008      	addeq	r0, #8
 800e778:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e77c:	bf04      	itt	eq
 800e77e:	011b      	lsleq	r3, r3, #4
 800e780:	3004      	addeq	r0, #4
 800e782:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e786:	bf04      	itt	eq
 800e788:	009b      	lsleq	r3, r3, #2
 800e78a:	3002      	addeq	r0, #2
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	db06      	blt.n	800e79e <__hi0bits+0x3c>
 800e790:	005b      	lsls	r3, r3, #1
 800e792:	d503      	bpl.n	800e79c <__hi0bits+0x3a>
 800e794:	3001      	adds	r0, #1
 800e796:	4770      	bx	lr
 800e798:	2000      	movs	r0, #0
 800e79a:	e7e8      	b.n	800e76e <__hi0bits+0xc>
 800e79c:	2020      	movs	r0, #32
 800e79e:	4770      	bx	lr

0800e7a0 <__lo0bits>:
 800e7a0:	6803      	ldr	r3, [r0, #0]
 800e7a2:	f013 0207 	ands.w	r2, r3, #7
 800e7a6:	4601      	mov	r1, r0
 800e7a8:	d00b      	beq.n	800e7c2 <__lo0bits+0x22>
 800e7aa:	07da      	lsls	r2, r3, #31
 800e7ac:	d423      	bmi.n	800e7f6 <__lo0bits+0x56>
 800e7ae:	0798      	lsls	r0, r3, #30
 800e7b0:	bf49      	itett	mi
 800e7b2:	085b      	lsrmi	r3, r3, #1
 800e7b4:	089b      	lsrpl	r3, r3, #2
 800e7b6:	2001      	movmi	r0, #1
 800e7b8:	600b      	strmi	r3, [r1, #0]
 800e7ba:	bf5c      	itt	pl
 800e7bc:	600b      	strpl	r3, [r1, #0]
 800e7be:	2002      	movpl	r0, #2
 800e7c0:	4770      	bx	lr
 800e7c2:	b298      	uxth	r0, r3
 800e7c4:	b9a8      	cbnz	r0, 800e7f2 <__lo0bits+0x52>
 800e7c6:	0c1b      	lsrs	r3, r3, #16
 800e7c8:	2010      	movs	r0, #16
 800e7ca:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e7ce:	bf04      	itt	eq
 800e7d0:	0a1b      	lsreq	r3, r3, #8
 800e7d2:	3008      	addeq	r0, #8
 800e7d4:	071a      	lsls	r2, r3, #28
 800e7d6:	bf04      	itt	eq
 800e7d8:	091b      	lsreq	r3, r3, #4
 800e7da:	3004      	addeq	r0, #4
 800e7dc:	079a      	lsls	r2, r3, #30
 800e7de:	bf04      	itt	eq
 800e7e0:	089b      	lsreq	r3, r3, #2
 800e7e2:	3002      	addeq	r0, #2
 800e7e4:	07da      	lsls	r2, r3, #31
 800e7e6:	d402      	bmi.n	800e7ee <__lo0bits+0x4e>
 800e7e8:	085b      	lsrs	r3, r3, #1
 800e7ea:	d006      	beq.n	800e7fa <__lo0bits+0x5a>
 800e7ec:	3001      	adds	r0, #1
 800e7ee:	600b      	str	r3, [r1, #0]
 800e7f0:	4770      	bx	lr
 800e7f2:	4610      	mov	r0, r2
 800e7f4:	e7e9      	b.n	800e7ca <__lo0bits+0x2a>
 800e7f6:	2000      	movs	r0, #0
 800e7f8:	4770      	bx	lr
 800e7fa:	2020      	movs	r0, #32
 800e7fc:	4770      	bx	lr

0800e7fe <__i2b>:
 800e7fe:	b510      	push	{r4, lr}
 800e800:	460c      	mov	r4, r1
 800e802:	2101      	movs	r1, #1
 800e804:	f7ff ff27 	bl	800e656 <_Balloc>
 800e808:	2201      	movs	r2, #1
 800e80a:	6144      	str	r4, [r0, #20]
 800e80c:	6102      	str	r2, [r0, #16]
 800e80e:	bd10      	pop	{r4, pc}

0800e810 <__multiply>:
 800e810:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e814:	4614      	mov	r4, r2
 800e816:	690a      	ldr	r2, [r1, #16]
 800e818:	6923      	ldr	r3, [r4, #16]
 800e81a:	429a      	cmp	r2, r3
 800e81c:	bfb8      	it	lt
 800e81e:	460b      	movlt	r3, r1
 800e820:	4688      	mov	r8, r1
 800e822:	bfbc      	itt	lt
 800e824:	46a0      	movlt	r8, r4
 800e826:	461c      	movlt	r4, r3
 800e828:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e82c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e830:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e834:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e838:	eb07 0609 	add.w	r6, r7, r9
 800e83c:	42b3      	cmp	r3, r6
 800e83e:	bfb8      	it	lt
 800e840:	3101      	addlt	r1, #1
 800e842:	f7ff ff08 	bl	800e656 <_Balloc>
 800e846:	f100 0514 	add.w	r5, r0, #20
 800e84a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800e84e:	462b      	mov	r3, r5
 800e850:	2200      	movs	r2, #0
 800e852:	4573      	cmp	r3, lr
 800e854:	d316      	bcc.n	800e884 <__multiply+0x74>
 800e856:	f104 0214 	add.w	r2, r4, #20
 800e85a:	f108 0114 	add.w	r1, r8, #20
 800e85e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800e862:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800e866:	9300      	str	r3, [sp, #0]
 800e868:	9b00      	ldr	r3, [sp, #0]
 800e86a:	9201      	str	r2, [sp, #4]
 800e86c:	4293      	cmp	r3, r2
 800e86e:	d80c      	bhi.n	800e88a <__multiply+0x7a>
 800e870:	2e00      	cmp	r6, #0
 800e872:	dd03      	ble.n	800e87c <__multiply+0x6c>
 800e874:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d05d      	beq.n	800e938 <__multiply+0x128>
 800e87c:	6106      	str	r6, [r0, #16]
 800e87e:	b003      	add	sp, #12
 800e880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e884:	f843 2b04 	str.w	r2, [r3], #4
 800e888:	e7e3      	b.n	800e852 <__multiply+0x42>
 800e88a:	f8b2 b000 	ldrh.w	fp, [r2]
 800e88e:	f1bb 0f00 	cmp.w	fp, #0
 800e892:	d023      	beq.n	800e8dc <__multiply+0xcc>
 800e894:	4689      	mov	r9, r1
 800e896:	46ac      	mov	ip, r5
 800e898:	f04f 0800 	mov.w	r8, #0
 800e89c:	f859 4b04 	ldr.w	r4, [r9], #4
 800e8a0:	f8dc a000 	ldr.w	sl, [ip]
 800e8a4:	b2a3      	uxth	r3, r4
 800e8a6:	fa1f fa8a 	uxth.w	sl, sl
 800e8aa:	fb0b a303 	mla	r3, fp, r3, sl
 800e8ae:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e8b2:	f8dc 4000 	ldr.w	r4, [ip]
 800e8b6:	4443      	add	r3, r8
 800e8b8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e8bc:	fb0b 840a 	mla	r4, fp, sl, r8
 800e8c0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800e8c4:	46e2      	mov	sl, ip
 800e8c6:	b29b      	uxth	r3, r3
 800e8c8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e8cc:	454f      	cmp	r7, r9
 800e8ce:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e8d2:	f84a 3b04 	str.w	r3, [sl], #4
 800e8d6:	d82b      	bhi.n	800e930 <__multiply+0x120>
 800e8d8:	f8cc 8004 	str.w	r8, [ip, #4]
 800e8dc:	9b01      	ldr	r3, [sp, #4]
 800e8de:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800e8e2:	3204      	adds	r2, #4
 800e8e4:	f1ba 0f00 	cmp.w	sl, #0
 800e8e8:	d020      	beq.n	800e92c <__multiply+0x11c>
 800e8ea:	682b      	ldr	r3, [r5, #0]
 800e8ec:	4689      	mov	r9, r1
 800e8ee:	46a8      	mov	r8, r5
 800e8f0:	f04f 0b00 	mov.w	fp, #0
 800e8f4:	f8b9 c000 	ldrh.w	ip, [r9]
 800e8f8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800e8fc:	fb0a 440c 	mla	r4, sl, ip, r4
 800e900:	445c      	add	r4, fp
 800e902:	46c4      	mov	ip, r8
 800e904:	b29b      	uxth	r3, r3
 800e906:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e90a:	f84c 3b04 	str.w	r3, [ip], #4
 800e90e:	f859 3b04 	ldr.w	r3, [r9], #4
 800e912:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800e916:	0c1b      	lsrs	r3, r3, #16
 800e918:	fb0a b303 	mla	r3, sl, r3, fp
 800e91c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800e920:	454f      	cmp	r7, r9
 800e922:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800e926:	d805      	bhi.n	800e934 <__multiply+0x124>
 800e928:	f8c8 3004 	str.w	r3, [r8, #4]
 800e92c:	3504      	adds	r5, #4
 800e92e:	e79b      	b.n	800e868 <__multiply+0x58>
 800e930:	46d4      	mov	ip, sl
 800e932:	e7b3      	b.n	800e89c <__multiply+0x8c>
 800e934:	46e0      	mov	r8, ip
 800e936:	e7dd      	b.n	800e8f4 <__multiply+0xe4>
 800e938:	3e01      	subs	r6, #1
 800e93a:	e799      	b.n	800e870 <__multiply+0x60>

0800e93c <__pow5mult>:
 800e93c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e940:	4615      	mov	r5, r2
 800e942:	f012 0203 	ands.w	r2, r2, #3
 800e946:	4606      	mov	r6, r0
 800e948:	460f      	mov	r7, r1
 800e94a:	d007      	beq.n	800e95c <__pow5mult+0x20>
 800e94c:	3a01      	subs	r2, #1
 800e94e:	4c21      	ldr	r4, [pc, #132]	; (800e9d4 <__pow5mult+0x98>)
 800e950:	2300      	movs	r3, #0
 800e952:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e956:	f7ff fec9 	bl	800e6ec <__multadd>
 800e95a:	4607      	mov	r7, r0
 800e95c:	10ad      	asrs	r5, r5, #2
 800e95e:	d035      	beq.n	800e9cc <__pow5mult+0x90>
 800e960:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e962:	b93c      	cbnz	r4, 800e974 <__pow5mult+0x38>
 800e964:	2010      	movs	r0, #16
 800e966:	f7ff fe63 	bl	800e630 <malloc>
 800e96a:	6270      	str	r0, [r6, #36]	; 0x24
 800e96c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e970:	6004      	str	r4, [r0, #0]
 800e972:	60c4      	str	r4, [r0, #12]
 800e974:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e978:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e97c:	b94c      	cbnz	r4, 800e992 <__pow5mult+0x56>
 800e97e:	f240 2171 	movw	r1, #625	; 0x271
 800e982:	4630      	mov	r0, r6
 800e984:	f7ff ff3b 	bl	800e7fe <__i2b>
 800e988:	2300      	movs	r3, #0
 800e98a:	f8c8 0008 	str.w	r0, [r8, #8]
 800e98e:	4604      	mov	r4, r0
 800e990:	6003      	str	r3, [r0, #0]
 800e992:	f04f 0800 	mov.w	r8, #0
 800e996:	07eb      	lsls	r3, r5, #31
 800e998:	d50a      	bpl.n	800e9b0 <__pow5mult+0x74>
 800e99a:	4639      	mov	r1, r7
 800e99c:	4622      	mov	r2, r4
 800e99e:	4630      	mov	r0, r6
 800e9a0:	f7ff ff36 	bl	800e810 <__multiply>
 800e9a4:	4639      	mov	r1, r7
 800e9a6:	4681      	mov	r9, r0
 800e9a8:	4630      	mov	r0, r6
 800e9aa:	f7ff fe88 	bl	800e6be <_Bfree>
 800e9ae:	464f      	mov	r7, r9
 800e9b0:	106d      	asrs	r5, r5, #1
 800e9b2:	d00b      	beq.n	800e9cc <__pow5mult+0x90>
 800e9b4:	6820      	ldr	r0, [r4, #0]
 800e9b6:	b938      	cbnz	r0, 800e9c8 <__pow5mult+0x8c>
 800e9b8:	4622      	mov	r2, r4
 800e9ba:	4621      	mov	r1, r4
 800e9bc:	4630      	mov	r0, r6
 800e9be:	f7ff ff27 	bl	800e810 <__multiply>
 800e9c2:	6020      	str	r0, [r4, #0]
 800e9c4:	f8c0 8000 	str.w	r8, [r0]
 800e9c8:	4604      	mov	r4, r0
 800e9ca:	e7e4      	b.n	800e996 <__pow5mult+0x5a>
 800e9cc:	4638      	mov	r0, r7
 800e9ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9d2:	bf00      	nop
 800e9d4:	080103b0 	.word	0x080103b0

0800e9d8 <__lshift>:
 800e9d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9dc:	460c      	mov	r4, r1
 800e9de:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e9e2:	6923      	ldr	r3, [r4, #16]
 800e9e4:	6849      	ldr	r1, [r1, #4]
 800e9e6:	eb0a 0903 	add.w	r9, sl, r3
 800e9ea:	68a3      	ldr	r3, [r4, #8]
 800e9ec:	4607      	mov	r7, r0
 800e9ee:	4616      	mov	r6, r2
 800e9f0:	f109 0501 	add.w	r5, r9, #1
 800e9f4:	42ab      	cmp	r3, r5
 800e9f6:	db32      	blt.n	800ea5e <__lshift+0x86>
 800e9f8:	4638      	mov	r0, r7
 800e9fa:	f7ff fe2c 	bl	800e656 <_Balloc>
 800e9fe:	2300      	movs	r3, #0
 800ea00:	4680      	mov	r8, r0
 800ea02:	f100 0114 	add.w	r1, r0, #20
 800ea06:	461a      	mov	r2, r3
 800ea08:	4553      	cmp	r3, sl
 800ea0a:	db2b      	blt.n	800ea64 <__lshift+0x8c>
 800ea0c:	6920      	ldr	r0, [r4, #16]
 800ea0e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ea12:	f104 0314 	add.w	r3, r4, #20
 800ea16:	f016 021f 	ands.w	r2, r6, #31
 800ea1a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ea1e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ea22:	d025      	beq.n	800ea70 <__lshift+0x98>
 800ea24:	f1c2 0e20 	rsb	lr, r2, #32
 800ea28:	2000      	movs	r0, #0
 800ea2a:	681e      	ldr	r6, [r3, #0]
 800ea2c:	468a      	mov	sl, r1
 800ea2e:	4096      	lsls	r6, r2
 800ea30:	4330      	orrs	r0, r6
 800ea32:	f84a 0b04 	str.w	r0, [sl], #4
 800ea36:	f853 0b04 	ldr.w	r0, [r3], #4
 800ea3a:	459c      	cmp	ip, r3
 800ea3c:	fa20 f00e 	lsr.w	r0, r0, lr
 800ea40:	d814      	bhi.n	800ea6c <__lshift+0x94>
 800ea42:	6048      	str	r0, [r1, #4]
 800ea44:	b108      	cbz	r0, 800ea4a <__lshift+0x72>
 800ea46:	f109 0502 	add.w	r5, r9, #2
 800ea4a:	3d01      	subs	r5, #1
 800ea4c:	4638      	mov	r0, r7
 800ea4e:	f8c8 5010 	str.w	r5, [r8, #16]
 800ea52:	4621      	mov	r1, r4
 800ea54:	f7ff fe33 	bl	800e6be <_Bfree>
 800ea58:	4640      	mov	r0, r8
 800ea5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea5e:	3101      	adds	r1, #1
 800ea60:	005b      	lsls	r3, r3, #1
 800ea62:	e7c7      	b.n	800e9f4 <__lshift+0x1c>
 800ea64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ea68:	3301      	adds	r3, #1
 800ea6a:	e7cd      	b.n	800ea08 <__lshift+0x30>
 800ea6c:	4651      	mov	r1, sl
 800ea6e:	e7dc      	b.n	800ea2a <__lshift+0x52>
 800ea70:	3904      	subs	r1, #4
 800ea72:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea76:	f841 2f04 	str.w	r2, [r1, #4]!
 800ea7a:	459c      	cmp	ip, r3
 800ea7c:	d8f9      	bhi.n	800ea72 <__lshift+0x9a>
 800ea7e:	e7e4      	b.n	800ea4a <__lshift+0x72>

0800ea80 <__mcmp>:
 800ea80:	6903      	ldr	r3, [r0, #16]
 800ea82:	690a      	ldr	r2, [r1, #16]
 800ea84:	1a9b      	subs	r3, r3, r2
 800ea86:	b530      	push	{r4, r5, lr}
 800ea88:	d10c      	bne.n	800eaa4 <__mcmp+0x24>
 800ea8a:	0092      	lsls	r2, r2, #2
 800ea8c:	3014      	adds	r0, #20
 800ea8e:	3114      	adds	r1, #20
 800ea90:	1884      	adds	r4, r0, r2
 800ea92:	4411      	add	r1, r2
 800ea94:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ea98:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ea9c:	4295      	cmp	r5, r2
 800ea9e:	d003      	beq.n	800eaa8 <__mcmp+0x28>
 800eaa0:	d305      	bcc.n	800eaae <__mcmp+0x2e>
 800eaa2:	2301      	movs	r3, #1
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	bd30      	pop	{r4, r5, pc}
 800eaa8:	42a0      	cmp	r0, r4
 800eaaa:	d3f3      	bcc.n	800ea94 <__mcmp+0x14>
 800eaac:	e7fa      	b.n	800eaa4 <__mcmp+0x24>
 800eaae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eab2:	e7f7      	b.n	800eaa4 <__mcmp+0x24>

0800eab4 <__mdiff>:
 800eab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eab8:	460d      	mov	r5, r1
 800eaba:	4607      	mov	r7, r0
 800eabc:	4611      	mov	r1, r2
 800eabe:	4628      	mov	r0, r5
 800eac0:	4614      	mov	r4, r2
 800eac2:	f7ff ffdd 	bl	800ea80 <__mcmp>
 800eac6:	1e06      	subs	r6, r0, #0
 800eac8:	d108      	bne.n	800eadc <__mdiff+0x28>
 800eaca:	4631      	mov	r1, r6
 800eacc:	4638      	mov	r0, r7
 800eace:	f7ff fdc2 	bl	800e656 <_Balloc>
 800ead2:	2301      	movs	r3, #1
 800ead4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ead8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eadc:	bfa4      	itt	ge
 800eade:	4623      	movge	r3, r4
 800eae0:	462c      	movge	r4, r5
 800eae2:	4638      	mov	r0, r7
 800eae4:	6861      	ldr	r1, [r4, #4]
 800eae6:	bfa6      	itte	ge
 800eae8:	461d      	movge	r5, r3
 800eaea:	2600      	movge	r6, #0
 800eaec:	2601      	movlt	r6, #1
 800eaee:	f7ff fdb2 	bl	800e656 <_Balloc>
 800eaf2:	692b      	ldr	r3, [r5, #16]
 800eaf4:	60c6      	str	r6, [r0, #12]
 800eaf6:	6926      	ldr	r6, [r4, #16]
 800eaf8:	f105 0914 	add.w	r9, r5, #20
 800eafc:	f104 0214 	add.w	r2, r4, #20
 800eb00:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800eb04:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800eb08:	f100 0514 	add.w	r5, r0, #20
 800eb0c:	f04f 0e00 	mov.w	lr, #0
 800eb10:	f852 ab04 	ldr.w	sl, [r2], #4
 800eb14:	f859 4b04 	ldr.w	r4, [r9], #4
 800eb18:	fa1e f18a 	uxtah	r1, lr, sl
 800eb1c:	b2a3      	uxth	r3, r4
 800eb1e:	1ac9      	subs	r1, r1, r3
 800eb20:	0c23      	lsrs	r3, r4, #16
 800eb22:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800eb26:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800eb2a:	b289      	uxth	r1, r1
 800eb2c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800eb30:	45c8      	cmp	r8, r9
 800eb32:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800eb36:	4694      	mov	ip, r2
 800eb38:	f845 3b04 	str.w	r3, [r5], #4
 800eb3c:	d8e8      	bhi.n	800eb10 <__mdiff+0x5c>
 800eb3e:	45bc      	cmp	ip, r7
 800eb40:	d304      	bcc.n	800eb4c <__mdiff+0x98>
 800eb42:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800eb46:	b183      	cbz	r3, 800eb6a <__mdiff+0xb6>
 800eb48:	6106      	str	r6, [r0, #16]
 800eb4a:	e7c5      	b.n	800ead8 <__mdiff+0x24>
 800eb4c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800eb50:	fa1e f381 	uxtah	r3, lr, r1
 800eb54:	141a      	asrs	r2, r3, #16
 800eb56:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800eb5a:	b29b      	uxth	r3, r3
 800eb5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eb60:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800eb64:	f845 3b04 	str.w	r3, [r5], #4
 800eb68:	e7e9      	b.n	800eb3e <__mdiff+0x8a>
 800eb6a:	3e01      	subs	r6, #1
 800eb6c:	e7e9      	b.n	800eb42 <__mdiff+0x8e>

0800eb6e <__d2b>:
 800eb6e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800eb72:	460e      	mov	r6, r1
 800eb74:	2101      	movs	r1, #1
 800eb76:	ec59 8b10 	vmov	r8, r9, d0
 800eb7a:	4615      	mov	r5, r2
 800eb7c:	f7ff fd6b 	bl	800e656 <_Balloc>
 800eb80:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800eb84:	4607      	mov	r7, r0
 800eb86:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800eb8a:	bb34      	cbnz	r4, 800ebda <__d2b+0x6c>
 800eb8c:	9301      	str	r3, [sp, #4]
 800eb8e:	f1b8 0300 	subs.w	r3, r8, #0
 800eb92:	d027      	beq.n	800ebe4 <__d2b+0x76>
 800eb94:	a802      	add	r0, sp, #8
 800eb96:	f840 3d08 	str.w	r3, [r0, #-8]!
 800eb9a:	f7ff fe01 	bl	800e7a0 <__lo0bits>
 800eb9e:	9900      	ldr	r1, [sp, #0]
 800eba0:	b1f0      	cbz	r0, 800ebe0 <__d2b+0x72>
 800eba2:	9a01      	ldr	r2, [sp, #4]
 800eba4:	f1c0 0320 	rsb	r3, r0, #32
 800eba8:	fa02 f303 	lsl.w	r3, r2, r3
 800ebac:	430b      	orrs	r3, r1
 800ebae:	40c2      	lsrs	r2, r0
 800ebb0:	617b      	str	r3, [r7, #20]
 800ebb2:	9201      	str	r2, [sp, #4]
 800ebb4:	9b01      	ldr	r3, [sp, #4]
 800ebb6:	61bb      	str	r3, [r7, #24]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	bf14      	ite	ne
 800ebbc:	2102      	movne	r1, #2
 800ebbe:	2101      	moveq	r1, #1
 800ebc0:	6139      	str	r1, [r7, #16]
 800ebc2:	b1c4      	cbz	r4, 800ebf6 <__d2b+0x88>
 800ebc4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ebc8:	4404      	add	r4, r0
 800ebca:	6034      	str	r4, [r6, #0]
 800ebcc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ebd0:	6028      	str	r0, [r5, #0]
 800ebd2:	4638      	mov	r0, r7
 800ebd4:	b003      	add	sp, #12
 800ebd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ebde:	e7d5      	b.n	800eb8c <__d2b+0x1e>
 800ebe0:	6179      	str	r1, [r7, #20]
 800ebe2:	e7e7      	b.n	800ebb4 <__d2b+0x46>
 800ebe4:	a801      	add	r0, sp, #4
 800ebe6:	f7ff fddb 	bl	800e7a0 <__lo0bits>
 800ebea:	9b01      	ldr	r3, [sp, #4]
 800ebec:	617b      	str	r3, [r7, #20]
 800ebee:	2101      	movs	r1, #1
 800ebf0:	6139      	str	r1, [r7, #16]
 800ebf2:	3020      	adds	r0, #32
 800ebf4:	e7e5      	b.n	800ebc2 <__d2b+0x54>
 800ebf6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800ebfa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ebfe:	6030      	str	r0, [r6, #0]
 800ec00:	6918      	ldr	r0, [r3, #16]
 800ec02:	f7ff fdae 	bl	800e762 <__hi0bits>
 800ec06:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ec0a:	e7e1      	b.n	800ebd0 <__d2b+0x62>

0800ec0c <_calloc_r>:
 800ec0c:	b538      	push	{r3, r4, r5, lr}
 800ec0e:	fb02 f401 	mul.w	r4, r2, r1
 800ec12:	4621      	mov	r1, r4
 800ec14:	f000 f856 	bl	800ecc4 <_malloc_r>
 800ec18:	4605      	mov	r5, r0
 800ec1a:	b118      	cbz	r0, 800ec24 <_calloc_r+0x18>
 800ec1c:	4622      	mov	r2, r4
 800ec1e:	2100      	movs	r1, #0
 800ec20:	f7fd ff08 	bl	800ca34 <memset>
 800ec24:	4628      	mov	r0, r5
 800ec26:	bd38      	pop	{r3, r4, r5, pc}

0800ec28 <_free_r>:
 800ec28:	b538      	push	{r3, r4, r5, lr}
 800ec2a:	4605      	mov	r5, r0
 800ec2c:	2900      	cmp	r1, #0
 800ec2e:	d045      	beq.n	800ecbc <_free_r+0x94>
 800ec30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec34:	1f0c      	subs	r4, r1, #4
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	bfb8      	it	lt
 800ec3a:	18e4      	addlt	r4, r4, r3
 800ec3c:	f000 fac3 	bl	800f1c6 <__malloc_lock>
 800ec40:	4a1f      	ldr	r2, [pc, #124]	; (800ecc0 <_free_r+0x98>)
 800ec42:	6813      	ldr	r3, [r2, #0]
 800ec44:	4610      	mov	r0, r2
 800ec46:	b933      	cbnz	r3, 800ec56 <_free_r+0x2e>
 800ec48:	6063      	str	r3, [r4, #4]
 800ec4a:	6014      	str	r4, [r2, #0]
 800ec4c:	4628      	mov	r0, r5
 800ec4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec52:	f000 bab9 	b.w	800f1c8 <__malloc_unlock>
 800ec56:	42a3      	cmp	r3, r4
 800ec58:	d90c      	bls.n	800ec74 <_free_r+0x4c>
 800ec5a:	6821      	ldr	r1, [r4, #0]
 800ec5c:	1862      	adds	r2, r4, r1
 800ec5e:	4293      	cmp	r3, r2
 800ec60:	bf04      	itt	eq
 800ec62:	681a      	ldreq	r2, [r3, #0]
 800ec64:	685b      	ldreq	r3, [r3, #4]
 800ec66:	6063      	str	r3, [r4, #4]
 800ec68:	bf04      	itt	eq
 800ec6a:	1852      	addeq	r2, r2, r1
 800ec6c:	6022      	streq	r2, [r4, #0]
 800ec6e:	6004      	str	r4, [r0, #0]
 800ec70:	e7ec      	b.n	800ec4c <_free_r+0x24>
 800ec72:	4613      	mov	r3, r2
 800ec74:	685a      	ldr	r2, [r3, #4]
 800ec76:	b10a      	cbz	r2, 800ec7c <_free_r+0x54>
 800ec78:	42a2      	cmp	r2, r4
 800ec7a:	d9fa      	bls.n	800ec72 <_free_r+0x4a>
 800ec7c:	6819      	ldr	r1, [r3, #0]
 800ec7e:	1858      	adds	r0, r3, r1
 800ec80:	42a0      	cmp	r0, r4
 800ec82:	d10b      	bne.n	800ec9c <_free_r+0x74>
 800ec84:	6820      	ldr	r0, [r4, #0]
 800ec86:	4401      	add	r1, r0
 800ec88:	1858      	adds	r0, r3, r1
 800ec8a:	4282      	cmp	r2, r0
 800ec8c:	6019      	str	r1, [r3, #0]
 800ec8e:	d1dd      	bne.n	800ec4c <_free_r+0x24>
 800ec90:	6810      	ldr	r0, [r2, #0]
 800ec92:	6852      	ldr	r2, [r2, #4]
 800ec94:	605a      	str	r2, [r3, #4]
 800ec96:	4401      	add	r1, r0
 800ec98:	6019      	str	r1, [r3, #0]
 800ec9a:	e7d7      	b.n	800ec4c <_free_r+0x24>
 800ec9c:	d902      	bls.n	800eca4 <_free_r+0x7c>
 800ec9e:	230c      	movs	r3, #12
 800eca0:	602b      	str	r3, [r5, #0]
 800eca2:	e7d3      	b.n	800ec4c <_free_r+0x24>
 800eca4:	6820      	ldr	r0, [r4, #0]
 800eca6:	1821      	adds	r1, r4, r0
 800eca8:	428a      	cmp	r2, r1
 800ecaa:	bf04      	itt	eq
 800ecac:	6811      	ldreq	r1, [r2, #0]
 800ecae:	6852      	ldreq	r2, [r2, #4]
 800ecb0:	6062      	str	r2, [r4, #4]
 800ecb2:	bf04      	itt	eq
 800ecb4:	1809      	addeq	r1, r1, r0
 800ecb6:	6021      	streq	r1, [r4, #0]
 800ecb8:	605c      	str	r4, [r3, #4]
 800ecba:	e7c7      	b.n	800ec4c <_free_r+0x24>
 800ecbc:	bd38      	pop	{r3, r4, r5, pc}
 800ecbe:	bf00      	nop
 800ecc0:	20001f14 	.word	0x20001f14

0800ecc4 <_malloc_r>:
 800ecc4:	b570      	push	{r4, r5, r6, lr}
 800ecc6:	1ccd      	adds	r5, r1, #3
 800ecc8:	f025 0503 	bic.w	r5, r5, #3
 800eccc:	3508      	adds	r5, #8
 800ecce:	2d0c      	cmp	r5, #12
 800ecd0:	bf38      	it	cc
 800ecd2:	250c      	movcc	r5, #12
 800ecd4:	2d00      	cmp	r5, #0
 800ecd6:	4606      	mov	r6, r0
 800ecd8:	db01      	blt.n	800ecde <_malloc_r+0x1a>
 800ecda:	42a9      	cmp	r1, r5
 800ecdc:	d903      	bls.n	800ece6 <_malloc_r+0x22>
 800ecde:	230c      	movs	r3, #12
 800ece0:	6033      	str	r3, [r6, #0]
 800ece2:	2000      	movs	r0, #0
 800ece4:	bd70      	pop	{r4, r5, r6, pc}
 800ece6:	f000 fa6e 	bl	800f1c6 <__malloc_lock>
 800ecea:	4a21      	ldr	r2, [pc, #132]	; (800ed70 <_malloc_r+0xac>)
 800ecec:	6814      	ldr	r4, [r2, #0]
 800ecee:	4621      	mov	r1, r4
 800ecf0:	b991      	cbnz	r1, 800ed18 <_malloc_r+0x54>
 800ecf2:	4c20      	ldr	r4, [pc, #128]	; (800ed74 <_malloc_r+0xb0>)
 800ecf4:	6823      	ldr	r3, [r4, #0]
 800ecf6:	b91b      	cbnz	r3, 800ed00 <_malloc_r+0x3c>
 800ecf8:	4630      	mov	r0, r6
 800ecfa:	f000 f98f 	bl	800f01c <_sbrk_r>
 800ecfe:	6020      	str	r0, [r4, #0]
 800ed00:	4629      	mov	r1, r5
 800ed02:	4630      	mov	r0, r6
 800ed04:	f000 f98a 	bl	800f01c <_sbrk_r>
 800ed08:	1c43      	adds	r3, r0, #1
 800ed0a:	d124      	bne.n	800ed56 <_malloc_r+0x92>
 800ed0c:	230c      	movs	r3, #12
 800ed0e:	6033      	str	r3, [r6, #0]
 800ed10:	4630      	mov	r0, r6
 800ed12:	f000 fa59 	bl	800f1c8 <__malloc_unlock>
 800ed16:	e7e4      	b.n	800ece2 <_malloc_r+0x1e>
 800ed18:	680b      	ldr	r3, [r1, #0]
 800ed1a:	1b5b      	subs	r3, r3, r5
 800ed1c:	d418      	bmi.n	800ed50 <_malloc_r+0x8c>
 800ed1e:	2b0b      	cmp	r3, #11
 800ed20:	d90f      	bls.n	800ed42 <_malloc_r+0x7e>
 800ed22:	600b      	str	r3, [r1, #0]
 800ed24:	50cd      	str	r5, [r1, r3]
 800ed26:	18cc      	adds	r4, r1, r3
 800ed28:	4630      	mov	r0, r6
 800ed2a:	f000 fa4d 	bl	800f1c8 <__malloc_unlock>
 800ed2e:	f104 000b 	add.w	r0, r4, #11
 800ed32:	1d23      	adds	r3, r4, #4
 800ed34:	f020 0007 	bic.w	r0, r0, #7
 800ed38:	1ac3      	subs	r3, r0, r3
 800ed3a:	d0d3      	beq.n	800ece4 <_malloc_r+0x20>
 800ed3c:	425a      	negs	r2, r3
 800ed3e:	50e2      	str	r2, [r4, r3]
 800ed40:	e7d0      	b.n	800ece4 <_malloc_r+0x20>
 800ed42:	428c      	cmp	r4, r1
 800ed44:	684b      	ldr	r3, [r1, #4]
 800ed46:	bf16      	itet	ne
 800ed48:	6063      	strne	r3, [r4, #4]
 800ed4a:	6013      	streq	r3, [r2, #0]
 800ed4c:	460c      	movne	r4, r1
 800ed4e:	e7eb      	b.n	800ed28 <_malloc_r+0x64>
 800ed50:	460c      	mov	r4, r1
 800ed52:	6849      	ldr	r1, [r1, #4]
 800ed54:	e7cc      	b.n	800ecf0 <_malloc_r+0x2c>
 800ed56:	1cc4      	adds	r4, r0, #3
 800ed58:	f024 0403 	bic.w	r4, r4, #3
 800ed5c:	42a0      	cmp	r0, r4
 800ed5e:	d005      	beq.n	800ed6c <_malloc_r+0xa8>
 800ed60:	1a21      	subs	r1, r4, r0
 800ed62:	4630      	mov	r0, r6
 800ed64:	f000 f95a 	bl	800f01c <_sbrk_r>
 800ed68:	3001      	adds	r0, #1
 800ed6a:	d0cf      	beq.n	800ed0c <_malloc_r+0x48>
 800ed6c:	6025      	str	r5, [r4, #0]
 800ed6e:	e7db      	b.n	800ed28 <_malloc_r+0x64>
 800ed70:	20001f14 	.word	0x20001f14
 800ed74:	20001f18 	.word	0x20001f18

0800ed78 <__ssputs_r>:
 800ed78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed7c:	688e      	ldr	r6, [r1, #8]
 800ed7e:	429e      	cmp	r6, r3
 800ed80:	4682      	mov	sl, r0
 800ed82:	460c      	mov	r4, r1
 800ed84:	4690      	mov	r8, r2
 800ed86:	4699      	mov	r9, r3
 800ed88:	d837      	bhi.n	800edfa <__ssputs_r+0x82>
 800ed8a:	898a      	ldrh	r2, [r1, #12]
 800ed8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ed90:	d031      	beq.n	800edf6 <__ssputs_r+0x7e>
 800ed92:	6825      	ldr	r5, [r4, #0]
 800ed94:	6909      	ldr	r1, [r1, #16]
 800ed96:	1a6f      	subs	r7, r5, r1
 800ed98:	6965      	ldr	r5, [r4, #20]
 800ed9a:	2302      	movs	r3, #2
 800ed9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eda0:	fb95 f5f3 	sdiv	r5, r5, r3
 800eda4:	f109 0301 	add.w	r3, r9, #1
 800eda8:	443b      	add	r3, r7
 800edaa:	429d      	cmp	r5, r3
 800edac:	bf38      	it	cc
 800edae:	461d      	movcc	r5, r3
 800edb0:	0553      	lsls	r3, r2, #21
 800edb2:	d530      	bpl.n	800ee16 <__ssputs_r+0x9e>
 800edb4:	4629      	mov	r1, r5
 800edb6:	f7ff ff85 	bl	800ecc4 <_malloc_r>
 800edba:	4606      	mov	r6, r0
 800edbc:	b950      	cbnz	r0, 800edd4 <__ssputs_r+0x5c>
 800edbe:	230c      	movs	r3, #12
 800edc0:	f8ca 3000 	str.w	r3, [sl]
 800edc4:	89a3      	ldrh	r3, [r4, #12]
 800edc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800edca:	81a3      	strh	r3, [r4, #12]
 800edcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800edd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edd4:	463a      	mov	r2, r7
 800edd6:	6921      	ldr	r1, [r4, #16]
 800edd8:	f7ff fc32 	bl	800e640 <memcpy>
 800eddc:	89a3      	ldrh	r3, [r4, #12]
 800edde:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ede2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ede6:	81a3      	strh	r3, [r4, #12]
 800ede8:	6126      	str	r6, [r4, #16]
 800edea:	6165      	str	r5, [r4, #20]
 800edec:	443e      	add	r6, r7
 800edee:	1bed      	subs	r5, r5, r7
 800edf0:	6026      	str	r6, [r4, #0]
 800edf2:	60a5      	str	r5, [r4, #8]
 800edf4:	464e      	mov	r6, r9
 800edf6:	454e      	cmp	r6, r9
 800edf8:	d900      	bls.n	800edfc <__ssputs_r+0x84>
 800edfa:	464e      	mov	r6, r9
 800edfc:	4632      	mov	r2, r6
 800edfe:	4641      	mov	r1, r8
 800ee00:	6820      	ldr	r0, [r4, #0]
 800ee02:	f000 f9c7 	bl	800f194 <memmove>
 800ee06:	68a3      	ldr	r3, [r4, #8]
 800ee08:	1b9b      	subs	r3, r3, r6
 800ee0a:	60a3      	str	r3, [r4, #8]
 800ee0c:	6823      	ldr	r3, [r4, #0]
 800ee0e:	441e      	add	r6, r3
 800ee10:	6026      	str	r6, [r4, #0]
 800ee12:	2000      	movs	r0, #0
 800ee14:	e7dc      	b.n	800edd0 <__ssputs_r+0x58>
 800ee16:	462a      	mov	r2, r5
 800ee18:	f000 f9d7 	bl	800f1ca <_realloc_r>
 800ee1c:	4606      	mov	r6, r0
 800ee1e:	2800      	cmp	r0, #0
 800ee20:	d1e2      	bne.n	800ede8 <__ssputs_r+0x70>
 800ee22:	6921      	ldr	r1, [r4, #16]
 800ee24:	4650      	mov	r0, sl
 800ee26:	f7ff feff 	bl	800ec28 <_free_r>
 800ee2a:	e7c8      	b.n	800edbe <__ssputs_r+0x46>

0800ee2c <_svfiprintf_r>:
 800ee2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee30:	461d      	mov	r5, r3
 800ee32:	898b      	ldrh	r3, [r1, #12]
 800ee34:	061f      	lsls	r7, r3, #24
 800ee36:	b09d      	sub	sp, #116	; 0x74
 800ee38:	4680      	mov	r8, r0
 800ee3a:	460c      	mov	r4, r1
 800ee3c:	4616      	mov	r6, r2
 800ee3e:	d50f      	bpl.n	800ee60 <_svfiprintf_r+0x34>
 800ee40:	690b      	ldr	r3, [r1, #16]
 800ee42:	b96b      	cbnz	r3, 800ee60 <_svfiprintf_r+0x34>
 800ee44:	2140      	movs	r1, #64	; 0x40
 800ee46:	f7ff ff3d 	bl	800ecc4 <_malloc_r>
 800ee4a:	6020      	str	r0, [r4, #0]
 800ee4c:	6120      	str	r0, [r4, #16]
 800ee4e:	b928      	cbnz	r0, 800ee5c <_svfiprintf_r+0x30>
 800ee50:	230c      	movs	r3, #12
 800ee52:	f8c8 3000 	str.w	r3, [r8]
 800ee56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ee5a:	e0c8      	b.n	800efee <_svfiprintf_r+0x1c2>
 800ee5c:	2340      	movs	r3, #64	; 0x40
 800ee5e:	6163      	str	r3, [r4, #20]
 800ee60:	2300      	movs	r3, #0
 800ee62:	9309      	str	r3, [sp, #36]	; 0x24
 800ee64:	2320      	movs	r3, #32
 800ee66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ee6a:	2330      	movs	r3, #48	; 0x30
 800ee6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ee70:	9503      	str	r5, [sp, #12]
 800ee72:	f04f 0b01 	mov.w	fp, #1
 800ee76:	4637      	mov	r7, r6
 800ee78:	463d      	mov	r5, r7
 800ee7a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ee7e:	b10b      	cbz	r3, 800ee84 <_svfiprintf_r+0x58>
 800ee80:	2b25      	cmp	r3, #37	; 0x25
 800ee82:	d13e      	bne.n	800ef02 <_svfiprintf_r+0xd6>
 800ee84:	ebb7 0a06 	subs.w	sl, r7, r6
 800ee88:	d00b      	beq.n	800eea2 <_svfiprintf_r+0x76>
 800ee8a:	4653      	mov	r3, sl
 800ee8c:	4632      	mov	r2, r6
 800ee8e:	4621      	mov	r1, r4
 800ee90:	4640      	mov	r0, r8
 800ee92:	f7ff ff71 	bl	800ed78 <__ssputs_r>
 800ee96:	3001      	adds	r0, #1
 800ee98:	f000 80a4 	beq.w	800efe4 <_svfiprintf_r+0x1b8>
 800ee9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee9e:	4453      	add	r3, sl
 800eea0:	9309      	str	r3, [sp, #36]	; 0x24
 800eea2:	783b      	ldrb	r3, [r7, #0]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	f000 809d 	beq.w	800efe4 <_svfiprintf_r+0x1b8>
 800eeaa:	2300      	movs	r3, #0
 800eeac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eeb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eeb4:	9304      	str	r3, [sp, #16]
 800eeb6:	9307      	str	r3, [sp, #28]
 800eeb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eebc:	931a      	str	r3, [sp, #104]	; 0x68
 800eebe:	462f      	mov	r7, r5
 800eec0:	2205      	movs	r2, #5
 800eec2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800eec6:	4850      	ldr	r0, [pc, #320]	; (800f008 <_svfiprintf_r+0x1dc>)
 800eec8:	f7f1 f9b2 	bl	8000230 <memchr>
 800eecc:	9b04      	ldr	r3, [sp, #16]
 800eece:	b9d0      	cbnz	r0, 800ef06 <_svfiprintf_r+0xda>
 800eed0:	06d9      	lsls	r1, r3, #27
 800eed2:	bf44      	itt	mi
 800eed4:	2220      	movmi	r2, #32
 800eed6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800eeda:	071a      	lsls	r2, r3, #28
 800eedc:	bf44      	itt	mi
 800eede:	222b      	movmi	r2, #43	; 0x2b
 800eee0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800eee4:	782a      	ldrb	r2, [r5, #0]
 800eee6:	2a2a      	cmp	r2, #42	; 0x2a
 800eee8:	d015      	beq.n	800ef16 <_svfiprintf_r+0xea>
 800eeea:	9a07      	ldr	r2, [sp, #28]
 800eeec:	462f      	mov	r7, r5
 800eeee:	2000      	movs	r0, #0
 800eef0:	250a      	movs	r5, #10
 800eef2:	4639      	mov	r1, r7
 800eef4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eef8:	3b30      	subs	r3, #48	; 0x30
 800eefa:	2b09      	cmp	r3, #9
 800eefc:	d94d      	bls.n	800ef9a <_svfiprintf_r+0x16e>
 800eefe:	b1b8      	cbz	r0, 800ef30 <_svfiprintf_r+0x104>
 800ef00:	e00f      	b.n	800ef22 <_svfiprintf_r+0xf6>
 800ef02:	462f      	mov	r7, r5
 800ef04:	e7b8      	b.n	800ee78 <_svfiprintf_r+0x4c>
 800ef06:	4a40      	ldr	r2, [pc, #256]	; (800f008 <_svfiprintf_r+0x1dc>)
 800ef08:	1a80      	subs	r0, r0, r2
 800ef0a:	fa0b f000 	lsl.w	r0, fp, r0
 800ef0e:	4318      	orrs	r0, r3
 800ef10:	9004      	str	r0, [sp, #16]
 800ef12:	463d      	mov	r5, r7
 800ef14:	e7d3      	b.n	800eebe <_svfiprintf_r+0x92>
 800ef16:	9a03      	ldr	r2, [sp, #12]
 800ef18:	1d11      	adds	r1, r2, #4
 800ef1a:	6812      	ldr	r2, [r2, #0]
 800ef1c:	9103      	str	r1, [sp, #12]
 800ef1e:	2a00      	cmp	r2, #0
 800ef20:	db01      	blt.n	800ef26 <_svfiprintf_r+0xfa>
 800ef22:	9207      	str	r2, [sp, #28]
 800ef24:	e004      	b.n	800ef30 <_svfiprintf_r+0x104>
 800ef26:	4252      	negs	r2, r2
 800ef28:	f043 0302 	orr.w	r3, r3, #2
 800ef2c:	9207      	str	r2, [sp, #28]
 800ef2e:	9304      	str	r3, [sp, #16]
 800ef30:	783b      	ldrb	r3, [r7, #0]
 800ef32:	2b2e      	cmp	r3, #46	; 0x2e
 800ef34:	d10c      	bne.n	800ef50 <_svfiprintf_r+0x124>
 800ef36:	787b      	ldrb	r3, [r7, #1]
 800ef38:	2b2a      	cmp	r3, #42	; 0x2a
 800ef3a:	d133      	bne.n	800efa4 <_svfiprintf_r+0x178>
 800ef3c:	9b03      	ldr	r3, [sp, #12]
 800ef3e:	1d1a      	adds	r2, r3, #4
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	9203      	str	r2, [sp, #12]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	bfb8      	it	lt
 800ef48:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ef4c:	3702      	adds	r7, #2
 800ef4e:	9305      	str	r3, [sp, #20]
 800ef50:	4d2e      	ldr	r5, [pc, #184]	; (800f00c <_svfiprintf_r+0x1e0>)
 800ef52:	7839      	ldrb	r1, [r7, #0]
 800ef54:	2203      	movs	r2, #3
 800ef56:	4628      	mov	r0, r5
 800ef58:	f7f1 f96a 	bl	8000230 <memchr>
 800ef5c:	b138      	cbz	r0, 800ef6e <_svfiprintf_r+0x142>
 800ef5e:	2340      	movs	r3, #64	; 0x40
 800ef60:	1b40      	subs	r0, r0, r5
 800ef62:	fa03 f000 	lsl.w	r0, r3, r0
 800ef66:	9b04      	ldr	r3, [sp, #16]
 800ef68:	4303      	orrs	r3, r0
 800ef6a:	3701      	adds	r7, #1
 800ef6c:	9304      	str	r3, [sp, #16]
 800ef6e:	7839      	ldrb	r1, [r7, #0]
 800ef70:	4827      	ldr	r0, [pc, #156]	; (800f010 <_svfiprintf_r+0x1e4>)
 800ef72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ef76:	2206      	movs	r2, #6
 800ef78:	1c7e      	adds	r6, r7, #1
 800ef7a:	f7f1 f959 	bl	8000230 <memchr>
 800ef7e:	2800      	cmp	r0, #0
 800ef80:	d038      	beq.n	800eff4 <_svfiprintf_r+0x1c8>
 800ef82:	4b24      	ldr	r3, [pc, #144]	; (800f014 <_svfiprintf_r+0x1e8>)
 800ef84:	bb13      	cbnz	r3, 800efcc <_svfiprintf_r+0x1a0>
 800ef86:	9b03      	ldr	r3, [sp, #12]
 800ef88:	3307      	adds	r3, #7
 800ef8a:	f023 0307 	bic.w	r3, r3, #7
 800ef8e:	3308      	adds	r3, #8
 800ef90:	9303      	str	r3, [sp, #12]
 800ef92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef94:	444b      	add	r3, r9
 800ef96:	9309      	str	r3, [sp, #36]	; 0x24
 800ef98:	e76d      	b.n	800ee76 <_svfiprintf_r+0x4a>
 800ef9a:	fb05 3202 	mla	r2, r5, r2, r3
 800ef9e:	2001      	movs	r0, #1
 800efa0:	460f      	mov	r7, r1
 800efa2:	e7a6      	b.n	800eef2 <_svfiprintf_r+0xc6>
 800efa4:	2300      	movs	r3, #0
 800efa6:	3701      	adds	r7, #1
 800efa8:	9305      	str	r3, [sp, #20]
 800efaa:	4619      	mov	r1, r3
 800efac:	250a      	movs	r5, #10
 800efae:	4638      	mov	r0, r7
 800efb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800efb4:	3a30      	subs	r2, #48	; 0x30
 800efb6:	2a09      	cmp	r2, #9
 800efb8:	d903      	bls.n	800efc2 <_svfiprintf_r+0x196>
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d0c8      	beq.n	800ef50 <_svfiprintf_r+0x124>
 800efbe:	9105      	str	r1, [sp, #20]
 800efc0:	e7c6      	b.n	800ef50 <_svfiprintf_r+0x124>
 800efc2:	fb05 2101 	mla	r1, r5, r1, r2
 800efc6:	2301      	movs	r3, #1
 800efc8:	4607      	mov	r7, r0
 800efca:	e7f0      	b.n	800efae <_svfiprintf_r+0x182>
 800efcc:	ab03      	add	r3, sp, #12
 800efce:	9300      	str	r3, [sp, #0]
 800efd0:	4622      	mov	r2, r4
 800efd2:	4b11      	ldr	r3, [pc, #68]	; (800f018 <_svfiprintf_r+0x1ec>)
 800efd4:	a904      	add	r1, sp, #16
 800efd6:	4640      	mov	r0, r8
 800efd8:	f7fd fdc8 	bl	800cb6c <_printf_float>
 800efdc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800efe0:	4681      	mov	r9, r0
 800efe2:	d1d6      	bne.n	800ef92 <_svfiprintf_r+0x166>
 800efe4:	89a3      	ldrh	r3, [r4, #12]
 800efe6:	065b      	lsls	r3, r3, #25
 800efe8:	f53f af35 	bmi.w	800ee56 <_svfiprintf_r+0x2a>
 800efec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800efee:	b01d      	add	sp, #116	; 0x74
 800eff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eff4:	ab03      	add	r3, sp, #12
 800eff6:	9300      	str	r3, [sp, #0]
 800eff8:	4622      	mov	r2, r4
 800effa:	4b07      	ldr	r3, [pc, #28]	; (800f018 <_svfiprintf_r+0x1ec>)
 800effc:	a904      	add	r1, sp, #16
 800effe:	4640      	mov	r0, r8
 800f000:	f7fe f86a 	bl	800d0d8 <_printf_i>
 800f004:	e7ea      	b.n	800efdc <_svfiprintf_r+0x1b0>
 800f006:	bf00      	nop
 800f008:	080103bc 	.word	0x080103bc
 800f00c:	080103c2 	.word	0x080103c2
 800f010:	080103c6 	.word	0x080103c6
 800f014:	0800cb6d 	.word	0x0800cb6d
 800f018:	0800ed79 	.word	0x0800ed79

0800f01c <_sbrk_r>:
 800f01c:	b538      	push	{r3, r4, r5, lr}
 800f01e:	4c06      	ldr	r4, [pc, #24]	; (800f038 <_sbrk_r+0x1c>)
 800f020:	2300      	movs	r3, #0
 800f022:	4605      	mov	r5, r0
 800f024:	4608      	mov	r0, r1
 800f026:	6023      	str	r3, [r4, #0]
 800f028:	f7f6 ffde 	bl	8005fe8 <_sbrk>
 800f02c:	1c43      	adds	r3, r0, #1
 800f02e:	d102      	bne.n	800f036 <_sbrk_r+0x1a>
 800f030:	6823      	ldr	r3, [r4, #0]
 800f032:	b103      	cbz	r3, 800f036 <_sbrk_r+0x1a>
 800f034:	602b      	str	r3, [r5, #0]
 800f036:	bd38      	pop	{r3, r4, r5, pc}
 800f038:	2000273c 	.word	0x2000273c

0800f03c <__sread>:
 800f03c:	b510      	push	{r4, lr}
 800f03e:	460c      	mov	r4, r1
 800f040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f044:	f000 f8e8 	bl	800f218 <_read_r>
 800f048:	2800      	cmp	r0, #0
 800f04a:	bfab      	itete	ge
 800f04c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f04e:	89a3      	ldrhlt	r3, [r4, #12]
 800f050:	181b      	addge	r3, r3, r0
 800f052:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f056:	bfac      	ite	ge
 800f058:	6563      	strge	r3, [r4, #84]	; 0x54
 800f05a:	81a3      	strhlt	r3, [r4, #12]
 800f05c:	bd10      	pop	{r4, pc}

0800f05e <__swrite>:
 800f05e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f062:	461f      	mov	r7, r3
 800f064:	898b      	ldrh	r3, [r1, #12]
 800f066:	05db      	lsls	r3, r3, #23
 800f068:	4605      	mov	r5, r0
 800f06a:	460c      	mov	r4, r1
 800f06c:	4616      	mov	r6, r2
 800f06e:	d505      	bpl.n	800f07c <__swrite+0x1e>
 800f070:	2302      	movs	r3, #2
 800f072:	2200      	movs	r2, #0
 800f074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f078:	f000 f868 	bl	800f14c <_lseek_r>
 800f07c:	89a3      	ldrh	r3, [r4, #12]
 800f07e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f082:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f086:	81a3      	strh	r3, [r4, #12]
 800f088:	4632      	mov	r2, r6
 800f08a:	463b      	mov	r3, r7
 800f08c:	4628      	mov	r0, r5
 800f08e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f092:	f000 b817 	b.w	800f0c4 <_write_r>

0800f096 <__sseek>:
 800f096:	b510      	push	{r4, lr}
 800f098:	460c      	mov	r4, r1
 800f09a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f09e:	f000 f855 	bl	800f14c <_lseek_r>
 800f0a2:	1c43      	adds	r3, r0, #1
 800f0a4:	89a3      	ldrh	r3, [r4, #12]
 800f0a6:	bf15      	itete	ne
 800f0a8:	6560      	strne	r0, [r4, #84]	; 0x54
 800f0aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f0ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f0b2:	81a3      	strheq	r3, [r4, #12]
 800f0b4:	bf18      	it	ne
 800f0b6:	81a3      	strhne	r3, [r4, #12]
 800f0b8:	bd10      	pop	{r4, pc}

0800f0ba <__sclose>:
 800f0ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0be:	f000 b813 	b.w	800f0e8 <_close_r>
	...

0800f0c4 <_write_r>:
 800f0c4:	b538      	push	{r3, r4, r5, lr}
 800f0c6:	4c07      	ldr	r4, [pc, #28]	; (800f0e4 <_write_r+0x20>)
 800f0c8:	4605      	mov	r5, r0
 800f0ca:	4608      	mov	r0, r1
 800f0cc:	4611      	mov	r1, r2
 800f0ce:	2200      	movs	r2, #0
 800f0d0:	6022      	str	r2, [r4, #0]
 800f0d2:	461a      	mov	r2, r3
 800f0d4:	f7f6 fbc5 	bl	8005862 <_write>
 800f0d8:	1c43      	adds	r3, r0, #1
 800f0da:	d102      	bne.n	800f0e2 <_write_r+0x1e>
 800f0dc:	6823      	ldr	r3, [r4, #0]
 800f0de:	b103      	cbz	r3, 800f0e2 <_write_r+0x1e>
 800f0e0:	602b      	str	r3, [r5, #0]
 800f0e2:	bd38      	pop	{r3, r4, r5, pc}
 800f0e4:	2000273c 	.word	0x2000273c

0800f0e8 <_close_r>:
 800f0e8:	b538      	push	{r3, r4, r5, lr}
 800f0ea:	4c06      	ldr	r4, [pc, #24]	; (800f104 <_close_r+0x1c>)
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	4605      	mov	r5, r0
 800f0f0:	4608      	mov	r0, r1
 800f0f2:	6023      	str	r3, [r4, #0]
 800f0f4:	f7f6 ff43 	bl	8005f7e <_close>
 800f0f8:	1c43      	adds	r3, r0, #1
 800f0fa:	d102      	bne.n	800f102 <_close_r+0x1a>
 800f0fc:	6823      	ldr	r3, [r4, #0]
 800f0fe:	b103      	cbz	r3, 800f102 <_close_r+0x1a>
 800f100:	602b      	str	r3, [r5, #0]
 800f102:	bd38      	pop	{r3, r4, r5, pc}
 800f104:	2000273c 	.word	0x2000273c

0800f108 <_fstat_r>:
 800f108:	b538      	push	{r3, r4, r5, lr}
 800f10a:	4c07      	ldr	r4, [pc, #28]	; (800f128 <_fstat_r+0x20>)
 800f10c:	2300      	movs	r3, #0
 800f10e:	4605      	mov	r5, r0
 800f110:	4608      	mov	r0, r1
 800f112:	4611      	mov	r1, r2
 800f114:	6023      	str	r3, [r4, #0]
 800f116:	f7f6 ff3e 	bl	8005f96 <_fstat>
 800f11a:	1c43      	adds	r3, r0, #1
 800f11c:	d102      	bne.n	800f124 <_fstat_r+0x1c>
 800f11e:	6823      	ldr	r3, [r4, #0]
 800f120:	b103      	cbz	r3, 800f124 <_fstat_r+0x1c>
 800f122:	602b      	str	r3, [r5, #0]
 800f124:	bd38      	pop	{r3, r4, r5, pc}
 800f126:	bf00      	nop
 800f128:	2000273c 	.word	0x2000273c

0800f12c <_isatty_r>:
 800f12c:	b538      	push	{r3, r4, r5, lr}
 800f12e:	4c06      	ldr	r4, [pc, #24]	; (800f148 <_isatty_r+0x1c>)
 800f130:	2300      	movs	r3, #0
 800f132:	4605      	mov	r5, r0
 800f134:	4608      	mov	r0, r1
 800f136:	6023      	str	r3, [r4, #0]
 800f138:	f7f6 ff3d 	bl	8005fb6 <_isatty>
 800f13c:	1c43      	adds	r3, r0, #1
 800f13e:	d102      	bne.n	800f146 <_isatty_r+0x1a>
 800f140:	6823      	ldr	r3, [r4, #0]
 800f142:	b103      	cbz	r3, 800f146 <_isatty_r+0x1a>
 800f144:	602b      	str	r3, [r5, #0]
 800f146:	bd38      	pop	{r3, r4, r5, pc}
 800f148:	2000273c 	.word	0x2000273c

0800f14c <_lseek_r>:
 800f14c:	b538      	push	{r3, r4, r5, lr}
 800f14e:	4c07      	ldr	r4, [pc, #28]	; (800f16c <_lseek_r+0x20>)
 800f150:	4605      	mov	r5, r0
 800f152:	4608      	mov	r0, r1
 800f154:	4611      	mov	r1, r2
 800f156:	2200      	movs	r2, #0
 800f158:	6022      	str	r2, [r4, #0]
 800f15a:	461a      	mov	r2, r3
 800f15c:	f7f6 ff36 	bl	8005fcc <_lseek>
 800f160:	1c43      	adds	r3, r0, #1
 800f162:	d102      	bne.n	800f16a <_lseek_r+0x1e>
 800f164:	6823      	ldr	r3, [r4, #0]
 800f166:	b103      	cbz	r3, 800f16a <_lseek_r+0x1e>
 800f168:	602b      	str	r3, [r5, #0]
 800f16a:	bd38      	pop	{r3, r4, r5, pc}
 800f16c:	2000273c 	.word	0x2000273c

0800f170 <__ascii_mbtowc>:
 800f170:	b082      	sub	sp, #8
 800f172:	b901      	cbnz	r1, 800f176 <__ascii_mbtowc+0x6>
 800f174:	a901      	add	r1, sp, #4
 800f176:	b142      	cbz	r2, 800f18a <__ascii_mbtowc+0x1a>
 800f178:	b14b      	cbz	r3, 800f18e <__ascii_mbtowc+0x1e>
 800f17a:	7813      	ldrb	r3, [r2, #0]
 800f17c:	600b      	str	r3, [r1, #0]
 800f17e:	7812      	ldrb	r2, [r2, #0]
 800f180:	1c10      	adds	r0, r2, #0
 800f182:	bf18      	it	ne
 800f184:	2001      	movne	r0, #1
 800f186:	b002      	add	sp, #8
 800f188:	4770      	bx	lr
 800f18a:	4610      	mov	r0, r2
 800f18c:	e7fb      	b.n	800f186 <__ascii_mbtowc+0x16>
 800f18e:	f06f 0001 	mvn.w	r0, #1
 800f192:	e7f8      	b.n	800f186 <__ascii_mbtowc+0x16>

0800f194 <memmove>:
 800f194:	4288      	cmp	r0, r1
 800f196:	b510      	push	{r4, lr}
 800f198:	eb01 0302 	add.w	r3, r1, r2
 800f19c:	d807      	bhi.n	800f1ae <memmove+0x1a>
 800f19e:	1e42      	subs	r2, r0, #1
 800f1a0:	4299      	cmp	r1, r3
 800f1a2:	d00a      	beq.n	800f1ba <memmove+0x26>
 800f1a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f1a8:	f802 4f01 	strb.w	r4, [r2, #1]!
 800f1ac:	e7f8      	b.n	800f1a0 <memmove+0xc>
 800f1ae:	4283      	cmp	r3, r0
 800f1b0:	d9f5      	bls.n	800f19e <memmove+0xa>
 800f1b2:	1881      	adds	r1, r0, r2
 800f1b4:	1ad2      	subs	r2, r2, r3
 800f1b6:	42d3      	cmn	r3, r2
 800f1b8:	d100      	bne.n	800f1bc <memmove+0x28>
 800f1ba:	bd10      	pop	{r4, pc}
 800f1bc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f1c0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800f1c4:	e7f7      	b.n	800f1b6 <memmove+0x22>

0800f1c6 <__malloc_lock>:
 800f1c6:	4770      	bx	lr

0800f1c8 <__malloc_unlock>:
 800f1c8:	4770      	bx	lr

0800f1ca <_realloc_r>:
 800f1ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1cc:	4607      	mov	r7, r0
 800f1ce:	4614      	mov	r4, r2
 800f1d0:	460e      	mov	r6, r1
 800f1d2:	b921      	cbnz	r1, 800f1de <_realloc_r+0x14>
 800f1d4:	4611      	mov	r1, r2
 800f1d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f1da:	f7ff bd73 	b.w	800ecc4 <_malloc_r>
 800f1de:	b922      	cbnz	r2, 800f1ea <_realloc_r+0x20>
 800f1e0:	f7ff fd22 	bl	800ec28 <_free_r>
 800f1e4:	4625      	mov	r5, r4
 800f1e6:	4628      	mov	r0, r5
 800f1e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1ea:	f000 f834 	bl	800f256 <_malloc_usable_size_r>
 800f1ee:	42a0      	cmp	r0, r4
 800f1f0:	d20f      	bcs.n	800f212 <_realloc_r+0x48>
 800f1f2:	4621      	mov	r1, r4
 800f1f4:	4638      	mov	r0, r7
 800f1f6:	f7ff fd65 	bl	800ecc4 <_malloc_r>
 800f1fa:	4605      	mov	r5, r0
 800f1fc:	2800      	cmp	r0, #0
 800f1fe:	d0f2      	beq.n	800f1e6 <_realloc_r+0x1c>
 800f200:	4631      	mov	r1, r6
 800f202:	4622      	mov	r2, r4
 800f204:	f7ff fa1c 	bl	800e640 <memcpy>
 800f208:	4631      	mov	r1, r6
 800f20a:	4638      	mov	r0, r7
 800f20c:	f7ff fd0c 	bl	800ec28 <_free_r>
 800f210:	e7e9      	b.n	800f1e6 <_realloc_r+0x1c>
 800f212:	4635      	mov	r5, r6
 800f214:	e7e7      	b.n	800f1e6 <_realloc_r+0x1c>
	...

0800f218 <_read_r>:
 800f218:	b538      	push	{r3, r4, r5, lr}
 800f21a:	4c07      	ldr	r4, [pc, #28]	; (800f238 <_read_r+0x20>)
 800f21c:	4605      	mov	r5, r0
 800f21e:	4608      	mov	r0, r1
 800f220:	4611      	mov	r1, r2
 800f222:	2200      	movs	r2, #0
 800f224:	6022      	str	r2, [r4, #0]
 800f226:	461a      	mov	r2, r3
 800f228:	f7f6 fe8c 	bl	8005f44 <_read>
 800f22c:	1c43      	adds	r3, r0, #1
 800f22e:	d102      	bne.n	800f236 <_read_r+0x1e>
 800f230:	6823      	ldr	r3, [r4, #0]
 800f232:	b103      	cbz	r3, 800f236 <_read_r+0x1e>
 800f234:	602b      	str	r3, [r5, #0]
 800f236:	bd38      	pop	{r3, r4, r5, pc}
 800f238:	2000273c 	.word	0x2000273c

0800f23c <__ascii_wctomb>:
 800f23c:	b149      	cbz	r1, 800f252 <__ascii_wctomb+0x16>
 800f23e:	2aff      	cmp	r2, #255	; 0xff
 800f240:	bf85      	ittet	hi
 800f242:	238a      	movhi	r3, #138	; 0x8a
 800f244:	6003      	strhi	r3, [r0, #0]
 800f246:	700a      	strbls	r2, [r1, #0]
 800f248:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800f24c:	bf98      	it	ls
 800f24e:	2001      	movls	r0, #1
 800f250:	4770      	bx	lr
 800f252:	4608      	mov	r0, r1
 800f254:	4770      	bx	lr

0800f256 <_malloc_usable_size_r>:
 800f256:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f25a:	1f18      	subs	r0, r3, #4
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	bfbc      	itt	lt
 800f260:	580b      	ldrlt	r3, [r1, r0]
 800f262:	18c0      	addlt	r0, r0, r3
 800f264:	4770      	bx	lr
	...

0800f268 <_init>:
 800f268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f26a:	bf00      	nop
 800f26c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f26e:	bc08      	pop	{r3}
 800f270:	469e      	mov	lr, r3
 800f272:	4770      	bx	lr

0800f274 <_fini>:
 800f274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f276:	bf00      	nop
 800f278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f27a:	bc08      	pop	{r3}
 800f27c:	469e      	mov	lr, r3
 800f27e:	4770      	bx	lr
