
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093a8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  08009588  08009588  00019588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009924  08009924  00021fb8  2**0
                  CONTENTS
  4 .ARM          00000000  08009924  08009924  00021fb8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009924  08009924  00021fb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009924  08009924  00019924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009928  08009928  00019928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001fb8  20000000  0800992c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000460  20001fb8  0800b8e4  00021fb8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002418  0800b8e4  00022418  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00021fb8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020c19  00000000  00000000  00021fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000043a9  00000000  00000000  00042c01  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ab8  00000000  00000000  00046fb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001890  00000000  00000000  00048a68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002e183  00000000  00000000  0004a2f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001962b  00000000  00000000  0007847b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00122c00  00000000  00000000  00091aa6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b46a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007860  00000000  00000000  001b4724  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001fb8 	.word	0x20001fb8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009570 	.word	0x08009570

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001fbc 	.word	0x20001fbc
 800021c:	08009570 	.word	0x08009570

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b08c      	sub	sp, #48	; 0x30
 80002c4:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80002c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	605a      	str	r2, [r3, #4]
 80002d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	2220      	movs	r2, #32
 80002d6:	2100      	movs	r1, #0
 80002d8:	4618      	mov	r0, r3
 80002da:	f008 f821 	bl	8008320 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80002de:	4b32      	ldr	r3, [pc, #200]	; (80003a8 <MX_ADC1_Init+0xe8>)
 80002e0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002e6:	4b30      	ldr	r3, [pc, #192]	; (80003a8 <MX_ADC1_Init+0xe8>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002ec:	4b2e      	ldr	r3, [pc, #184]	; (80003a8 <MX_ADC1_Init+0xe8>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002f2:	4b2d      	ldr	r3, [pc, #180]	; (80003a8 <MX_ADC1_Init+0xe8>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80002f8:	4b2b      	ldr	r3, [pc, #172]	; (80003a8 <MX_ADC1_Init+0xe8>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002fe:	4b2a      	ldr	r3, [pc, #168]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000300:	2200      	movs	r2, #0
 8000302:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000304:	4b28      	ldr	r3, [pc, #160]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000306:	2204      	movs	r2, #4
 8000308:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800030a:	4b27      	ldr	r3, [pc, #156]	; (80003a8 <MX_ADC1_Init+0xe8>)
 800030c:	2200      	movs	r2, #0
 800030e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000310:	4b25      	ldr	r3, [pc, #148]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000312:	2201      	movs	r2, #1
 8000314:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000316:	4b24      	ldr	r3, [pc, #144]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000318:	2201      	movs	r2, #1
 800031a:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800031c:	4b22      	ldr	r3, [pc, #136]	; (80003a8 <MX_ADC1_Init+0xe8>)
 800031e:	2200      	movs	r2, #0
 8000320:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000324:	4b20      	ldr	r3, [pc, #128]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000326:	2200      	movs	r2, #0
 8000328:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800032a:	4b1f      	ldr	r3, [pc, #124]	; (80003a8 <MX_ADC1_Init+0xe8>)
 800032c:	2200      	movs	r2, #0
 800032e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000330:	4b1d      	ldr	r3, [pc, #116]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000332:	2201      	movs	r2, #1
 8000334:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000338:	4b1b      	ldr	r3, [pc, #108]	; (80003a8 <MX_ADC1_Init+0xe8>)
 800033a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800033e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000340:	4b19      	ldr	r3, [pc, #100]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000342:	2200      	movs	r2, #0
 8000344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000348:	4817      	ldr	r0, [pc, #92]	; (80003a8 <MX_ADC1_Init+0xe8>)
 800034a:	f001 ffd7 	bl	80022fc <HAL_ADC_Init>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000354:	f000 ffbd 	bl	80012d2 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000358:	2300      	movs	r3, #0
 800035a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800035c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000360:	4619      	mov	r1, r3
 8000362:	4811      	ldr	r0, [pc, #68]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000364:	f002 fd60 	bl	8002e28 <HAL_ADCEx_MultiModeConfigChannel>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800036e:	f000 ffb0 	bl	80012d2 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000372:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <MX_ADC1_Init+0xec>)
 8000374:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000376:	2306      	movs	r3, #6
 8000378:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800037a:	2300      	movs	r3, #0
 800037c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800037e:	237f      	movs	r3, #127	; 0x7f
 8000380:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000382:	2304      	movs	r3, #4
 8000384:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000386:	2300      	movs	r3, #0
 8000388:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	4619      	mov	r1, r3
 800038e:	4806      	ldr	r0, [pc, #24]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000390:	f002 f974 	bl	800267c <HAL_ADC_ConfigChannel>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800039a:	f000 ff9a 	bl	80012d2 <Error_Handler>
  }

}
 800039e:	bf00      	nop
 80003a0:	3730      	adds	r7, #48	; 0x30
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	20001ff8 	.word	0x20001ff8
 80003ac:	0c900008 	.word	0x0c900008

080003b0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b08a      	sub	sp, #40	; 0x28
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b8:	f107 0314 	add.w	r3, r7, #20
 80003bc:	2200      	movs	r2, #0
 80003be:	601a      	str	r2, [r3, #0]
 80003c0:	605a      	str	r2, [r3, #4]
 80003c2:	609a      	str	r2, [r3, #8]
 80003c4:	60da      	str	r2, [r3, #12]
 80003c6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80003d0:	d14f      	bne.n	8000472 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80003d2:	4b2a      	ldr	r3, [pc, #168]	; (800047c <HAL_ADC_MspInit+0xcc>)
 80003d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d6:	4a29      	ldr	r2, [pc, #164]	; (800047c <HAL_ADC_MspInit+0xcc>)
 80003d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003de:	4b27      	ldr	r3, [pc, #156]	; (800047c <HAL_ADC_MspInit+0xcc>)
 80003e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003e6:	613b      	str	r3, [r7, #16]
 80003e8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ea:	4b24      	ldr	r3, [pc, #144]	; (800047c <HAL_ADC_MspInit+0xcc>)
 80003ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ee:	4a23      	ldr	r2, [pc, #140]	; (800047c <HAL_ADC_MspInit+0xcc>)
 80003f0:	f043 0301 	orr.w	r3, r3, #1
 80003f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003f6:	4b21      	ldr	r3, [pc, #132]	; (800047c <HAL_ADC_MspInit+0xcc>)
 80003f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003fa:	f003 0301 	and.w	r3, r3, #1
 80003fe:	60fb      	str	r3, [r7, #12]
 8000400:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000402:	2304      	movs	r3, #4
 8000404:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000406:	2303      	movs	r3, #3
 8000408:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040a:	2300      	movs	r3, #0
 800040c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800040e:	f107 0314 	add.w	r3, r7, #20
 8000412:	4619      	mov	r1, r3
 8000414:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000418:	f004 f822 	bl	8004460 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800041c:	4b18      	ldr	r3, [pc, #96]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 800041e:	4a19      	ldr	r2, [pc, #100]	; (8000484 <HAL_ADC_MspInit+0xd4>)
 8000420:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000422:	4b17      	ldr	r3, [pc, #92]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 8000424:	2205      	movs	r2, #5
 8000426:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000428:	4b15      	ldr	r3, [pc, #84]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 800042a:	2200      	movs	r2, #0
 800042c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800042e:	4b14      	ldr	r3, [pc, #80]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 8000430:	2200      	movs	r2, #0
 8000432:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000434:	4b12      	ldr	r3, [pc, #72]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 8000436:	2280      	movs	r2, #128	; 0x80
 8000438:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800043a:	4b11      	ldr	r3, [pc, #68]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 800043c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000440:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000442:	4b0f      	ldr	r3, [pc, #60]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 8000444:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000448:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800044a:	4b0d      	ldr	r3, [pc, #52]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 800044c:	2220      	movs	r2, #32
 800044e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000450:	4b0b      	ldr	r3, [pc, #44]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 8000452:	2200      	movs	r2, #0
 8000454:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000456:	480a      	ldr	r0, [pc, #40]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 8000458:	f003 fd90 	bl	8003f7c <HAL_DMA_Init>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8000462:	f000 ff36 	bl	80012d2 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4a05      	ldr	r2, [pc, #20]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 800046a:	655a      	str	r2, [r3, #84]	; 0x54
 800046c:	4a04      	ldr	r2, [pc, #16]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000472:	bf00      	nop
 8000474:	3728      	adds	r7, #40	; 0x28
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	40021000 	.word	0x40021000
 8000480:	20002064 	.word	0x20002064
 8000484:	40020008 	.word	0x40020008

08000488 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 800048c:	4b0f      	ldr	r3, [pc, #60]	; (80004cc <MX_COMP1_Init+0x44>)
 800048e:	4a10      	ldr	r2, [pc, #64]	; (80004d0 <MX_COMP1_Init+0x48>)
 8000490:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000492:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <MX_COMP1_Init+0x44>)
 8000494:	2200      	movs	r2, #0
 8000496:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8000498:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <MX_COMP1_Init+0x44>)
 800049a:	4a0e      	ldr	r2, [pc, #56]	; (80004d4 <MX_COMP1_Init+0x4c>)
 800049c:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800049e:	4b0b      	ldr	r3, [pc, #44]	; (80004cc <MX_COMP1_Init+0x44>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80004a4:	4b09      	ldr	r3, [pc, #36]	; (80004cc <MX_COMP1_Init+0x44>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80004aa:	4b08      	ldr	r3, [pc, #32]	; (80004cc <MX_COMP1_Init+0x44>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <MX_COMP1_Init+0x44>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80004b6:	4805      	ldr	r0, [pc, #20]	; (80004cc <MX_COMP1_Init+0x44>)
 80004b8:	f002 ff0a 	bl	80032d0 <HAL_COMP_Init>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 80004c2:	f000 ff06 	bl	80012d2 <Error_Handler>
  }

}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	200020c4 	.word	0x200020c4
 80004d0:	40010200 	.word	0x40010200
 80004d4:	00800030 	.word	0x00800030

080004d8 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e0:	f107 030c 	add.w	r3, r7, #12
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	609a      	str	r2, [r3, #8]
 80004ec:	60da      	str	r2, [r3, #12]
 80004ee:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a0f      	ldr	r2, [pc, #60]	; (8000534 <HAL_COMP_MspInit+0x5c>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d118      	bne.n	800052c <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fa:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <HAL_COMP_MspInit+0x60>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	4a0e      	ldr	r2, [pc, #56]	; (8000538 <HAL_COMP_MspInit+0x60>)
 8000500:	f043 0301 	orr.w	r3, r3, #1
 8000504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000506:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <HAL_COMP_MspInit+0x60>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	60bb      	str	r3, [r7, #8]
 8000510:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000512:	2302      	movs	r3, #2
 8000514:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000516:	2303      	movs	r3, #3
 8000518:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051a:	2300      	movs	r3, #0
 800051c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051e:	f107 030c 	add.w	r3, r7, #12
 8000522:	4619      	mov	r1, r3
 8000524:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000528:	f003 ff9a 	bl	8004460 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 800052c:	bf00      	nop
 800052e:	3720      	adds	r7, #32
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	40010200 	.word	0x40010200
 8000538:	40021000 	.word	0x40021000

0800053c <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b08c      	sub	sp, #48	; 0x30
 8000540:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000542:	463b      	mov	r3, r7
 8000544:	2230      	movs	r2, #48	; 0x30
 8000546:	2100      	movs	r1, #0
 8000548:	4618      	mov	r0, r3
 800054a:	f007 fee9 	bl	8008320 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 800054e:	4b1d      	ldr	r3, [pc, #116]	; (80005c4 <MX_DAC1_Init+0x88>)
 8000550:	4a1d      	ldr	r2, [pc, #116]	; (80005c8 <MX_DAC1_Init+0x8c>)
 8000552:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000554:	481b      	ldr	r0, [pc, #108]	; (80005c4 <MX_DAC1_Init+0x88>)
 8000556:	f003 f95e 	bl	8003816 <HAL_DAC_Init>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000560:	f000 feb7 	bl	80012d2 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000564:	2302      	movs	r3, #2
 8000566:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000568:	2300      	movs	r3, #0
 800056a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800056c:	2300      	movs	r3, #0
 800056e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000570:	2300      	movs	r3, #0
 8000572:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8000574:	2306      	movs	r3, #6
 8000576:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000578:	2300      	movs	r3, #0
 800057a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800057c:	2300      	movs	r3, #0
 800057e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000580:	2301      	movs	r3, #1
 8000582:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000584:	2300      	movs	r3, #0
 8000586:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000588:	463b      	mov	r3, r7
 800058a:	2200      	movs	r2, #0
 800058c:	4619      	mov	r1, r3
 800058e:	480d      	ldr	r0, [pc, #52]	; (80005c4 <MX_DAC1_Init+0x88>)
 8000590:	f003 fabe 	bl	8003b10 <HAL_DAC_ConfigChannel>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800059a:	f000 fe9a 	bl	80012d2 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80005a2:	2301      	movs	r3, #1
 80005a4:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80005a6:	463b      	mov	r3, r7
 80005a8:	2210      	movs	r2, #16
 80005aa:	4619      	mov	r1, r3
 80005ac:	4805      	ldr	r0, [pc, #20]	; (80005c4 <MX_DAC1_Init+0x88>)
 80005ae:	f003 faaf 	bl	8003b10 <HAL_DAC_ConfigChannel>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <MX_DAC1_Init+0x80>
  {
    Error_Handler();
 80005b8:	f000 fe8b 	bl	80012d2 <Error_Handler>
  }

}
 80005bc:	bf00      	nop
 80005be:	3730      	adds	r7, #48	; 0x30
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	200020fc 	.word	0x200020fc
 80005c8:	50000800 	.word	0x50000800

080005cc <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b08c      	sub	sp, #48	; 0x30
 80005d0:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80005d2:	463b      	mov	r3, r7
 80005d4:	2230      	movs	r2, #48	; 0x30
 80005d6:	2100      	movs	r1, #0
 80005d8:	4618      	mov	r0, r3
 80005da:	f007 fea1 	bl	8008320 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 80005de:	4b16      	ldr	r3, [pc, #88]	; (8000638 <MX_DAC2_Init+0x6c>)
 80005e0:	4a16      	ldr	r2, [pc, #88]	; (800063c <MX_DAC2_Init+0x70>)
 80005e2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 80005e4:	4814      	ldr	r0, [pc, #80]	; (8000638 <MX_DAC2_Init+0x6c>)
 80005e6:	f003 f916 	bl	8003816 <HAL_DAC_Init>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 80005f0:	f000 fe6f 	bl	80012d2 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80005f4:	2302      	movs	r3, #2
 80005f6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80005f8:	2300      	movs	r3, #0
 80005fa:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80005fc:	2300      	movs	r3, #0
 80005fe:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000600:	2300      	movs	r3, #0
 8000602:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8000604:	2306      	movs	r3, #6
 8000606:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000608:	2300      	movs	r3, #0
 800060a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800060c:	2300      	movs	r3, #0
 800060e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000610:	2301      	movs	r3, #1
 8000612:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000614:	2300      	movs	r3, #0
 8000616:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000618:	463b      	mov	r3, r7
 800061a:	2200      	movs	r2, #0
 800061c:	4619      	mov	r1, r3
 800061e:	4806      	ldr	r0, [pc, #24]	; (8000638 <MX_DAC2_Init+0x6c>)
 8000620:	f003 fa76 	bl	8003b10 <HAL_DAC_ConfigChannel>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 800062a:	f000 fe52 	bl	80012d2 <Error_Handler>
  }

}
 800062e:	bf00      	nop
 8000630:	3730      	adds	r7, #48	; 0x30
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	200020e8 	.word	0x200020e8
 800063c:	50000c00 	.word	0x50000c00

08000640 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08c      	sub	sp, #48	; 0x30
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a56      	ldr	r2, [pc, #344]	; (80007b8 <HAL_DAC_MspInit+0x178>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d150      	bne.n	8000704 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000662:	4b56      	ldr	r3, [pc, #344]	; (80007bc <HAL_DAC_MspInit+0x17c>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000666:	4a55      	ldr	r2, [pc, #340]	; (80007bc <HAL_DAC_MspInit+0x17c>)
 8000668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800066c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800066e:	4b53      	ldr	r3, [pc, #332]	; (80007bc <HAL_DAC_MspInit+0x17c>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000676:	61bb      	str	r3, [r7, #24]
 8000678:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067a:	4b50      	ldr	r3, [pc, #320]	; (80007bc <HAL_DAC_MspInit+0x17c>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067e:	4a4f      	ldr	r2, [pc, #316]	; (80007bc <HAL_DAC_MspInit+0x17c>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000686:	4b4d      	ldr	r3, [pc, #308]	; (80007bc <HAL_DAC_MspInit+0x17c>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	617b      	str	r3, [r7, #20]
 8000690:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000692:	2330      	movs	r3, #48	; 0x30
 8000694:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000696:	2303      	movs	r3, #3
 8000698:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069e:	f107 031c 	add.w	r3, r7, #28
 80006a2:	4619      	mov	r1, r3
 80006a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a8:	f003 feda 	bl	8004460 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 80006ac:	4b44      	ldr	r3, [pc, #272]	; (80007c0 <HAL_DAC_MspInit+0x180>)
 80006ae:	4a45      	ldr	r2, [pc, #276]	; (80007c4 <HAL_DAC_MspInit+0x184>)
 80006b0:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 80006b2:	4b43      	ldr	r3, [pc, #268]	; (80007c0 <HAL_DAC_MspInit+0x180>)
 80006b4:	2206      	movs	r2, #6
 80006b6:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80006b8:	4b41      	ldr	r3, [pc, #260]	; (80007c0 <HAL_DAC_MspInit+0x180>)
 80006ba:	2210      	movs	r2, #16
 80006bc:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006be:	4b40      	ldr	r3, [pc, #256]	; (80007c0 <HAL_DAC_MspInit+0x180>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80006c4:	4b3e      	ldr	r3, [pc, #248]	; (80007c0 <HAL_DAC_MspInit+0x180>)
 80006c6:	2280      	movs	r2, #128	; 0x80
 80006c8:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80006ca:	4b3d      	ldr	r3, [pc, #244]	; (80007c0 <HAL_DAC_MspInit+0x180>)
 80006cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006d0:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80006d2:	4b3b      	ldr	r3, [pc, #236]	; (80007c0 <HAL_DAC_MspInit+0x180>)
 80006d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006d8:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80006da:	4b39      	ldr	r3, [pc, #228]	; (80007c0 <HAL_DAC_MspInit+0x180>)
 80006dc:	2220      	movs	r2, #32
 80006de:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80006e0:	4b37      	ldr	r3, [pc, #220]	; (80007c0 <HAL_DAC_MspInit+0x180>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80006e6:	4836      	ldr	r0, [pc, #216]	; (80007c0 <HAL_DAC_MspInit+0x180>)
 80006e8:	f003 fc48 	bl	8003f7c <HAL_DMA_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80006f2:	f000 fdee 	bl	80012d2 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4a31      	ldr	r2, [pc, #196]	; (80007c0 <HAL_DAC_MspInit+0x180>)
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	4a30      	ldr	r2, [pc, #192]	; (80007c0 <HAL_DAC_MspInit+0x180>)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 8000702:	e054      	b.n	80007ae <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a2f      	ldr	r2, [pc, #188]	; (80007c8 <HAL_DAC_MspInit+0x188>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d14f      	bne.n	80007ae <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 800070e:	4b2b      	ldr	r3, [pc, #172]	; (80007bc <HAL_DAC_MspInit+0x17c>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	4a2a      	ldr	r2, [pc, #168]	; (80007bc <HAL_DAC_MspInit+0x17c>)
 8000714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071a:	4b28      	ldr	r3, [pc, #160]	; (80007bc <HAL_DAC_MspInit+0x17c>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000722:	613b      	str	r3, [r7, #16]
 8000724:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000726:	4b25      	ldr	r3, [pc, #148]	; (80007bc <HAL_DAC_MspInit+0x17c>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	4a24      	ldr	r2, [pc, #144]	; (80007bc <HAL_DAC_MspInit+0x17c>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000732:	4b22      	ldr	r3, [pc, #136]	; (80007bc <HAL_DAC_MspInit+0x17c>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800073e:	2340      	movs	r3, #64	; 0x40
 8000740:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000742:	2303      	movs	r3, #3
 8000744:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	4619      	mov	r1, r3
 8000750:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000754:	f003 fe84 	bl	8004460 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 8000758:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <HAL_DAC_MspInit+0x18c>)
 800075a:	4a1d      	ldr	r2, [pc, #116]	; (80007d0 <HAL_DAC_MspInit+0x190>)
 800075c:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 800075e:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <HAL_DAC_MspInit+0x18c>)
 8000760:	2229      	movs	r2, #41	; 0x29
 8000762:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000764:	4b19      	ldr	r3, [pc, #100]	; (80007cc <HAL_DAC_MspInit+0x18c>)
 8000766:	2210      	movs	r2, #16
 8000768:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800076a:	4b18      	ldr	r3, [pc, #96]	; (80007cc <HAL_DAC_MspInit+0x18c>)
 800076c:	2200      	movs	r2, #0
 800076e:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000770:	4b16      	ldr	r3, [pc, #88]	; (80007cc <HAL_DAC_MspInit+0x18c>)
 8000772:	2280      	movs	r2, #128	; 0x80
 8000774:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000776:	4b15      	ldr	r3, [pc, #84]	; (80007cc <HAL_DAC_MspInit+0x18c>)
 8000778:	f44f 7200 	mov.w	r2, #512	; 0x200
 800077c:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800077e:	4b13      	ldr	r3, [pc, #76]	; (80007cc <HAL_DAC_MspInit+0x18c>)
 8000780:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000784:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <HAL_DAC_MspInit+0x18c>)
 8000788:	2220      	movs	r2, #32
 800078a:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <HAL_DAC_MspInit+0x18c>)
 800078e:	2200      	movs	r2, #0
 8000790:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8000792:	480e      	ldr	r0, [pc, #56]	; (80007cc <HAL_DAC_MspInit+0x18c>)
 8000794:	f003 fbf2 	bl	8003f7c <HAL_DMA_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <HAL_DAC_MspInit+0x162>
      Error_Handler();
 800079e:	f000 fd98 	bl	80012d2 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4a09      	ldr	r2, [pc, #36]	; (80007cc <HAL_DAC_MspInit+0x18c>)
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	4a08      	ldr	r2, [pc, #32]	; (80007cc <HAL_DAC_MspInit+0x18c>)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	6293      	str	r3, [r2, #40]	; 0x28
}
 80007ae:	bf00      	nop
 80007b0:	3730      	adds	r7, #48	; 0x30
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	50000800 	.word	0x50000800
 80007bc:	40021000 	.word	0x40021000
 80007c0:	20002110 	.word	0x20002110
 80007c4:	4002001c 	.word	0x4002001c
 80007c8:	50000c00 	.word	0x50000c00
 80007cc:	20002170 	.word	0x20002170
 80007d0:	40020030 	.word	0x40020030

080007d4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80007da:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <MX_DMA_Init+0x80>)
 80007dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007de:	4a1d      	ldr	r2, [pc, #116]	; (8000854 <MX_DMA_Init+0x80>)
 80007e0:	f043 0304 	orr.w	r3, r3, #4
 80007e4:	6493      	str	r3, [r2, #72]	; 0x48
 80007e6:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <MX_DMA_Init+0x80>)
 80007e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007ea:	f003 0304 	and.w	r3, r3, #4
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007f2:	4b18      	ldr	r3, [pc, #96]	; (8000854 <MX_DMA_Init+0x80>)
 80007f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007f6:	4a17      	ldr	r2, [pc, #92]	; (8000854 <MX_DMA_Init+0x80>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6493      	str	r3, [r2, #72]	; 0x48
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <MX_DMA_Init+0x80>)
 8000800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	2101      	movs	r1, #1
 800080e:	200b      	movs	r0, #11
 8000810:	f002 ffcd 	bl	80037ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000814:	200b      	movs	r0, #11
 8000816:	f002 ffe4 	bl	80037e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	2100      	movs	r1, #0
 800081e:	200c      	movs	r0, #12
 8000820:	f002 ffc5 	bl	80037ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000824:	200c      	movs	r0, #12
 8000826:	f002 ffdc 	bl	80037e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	2100      	movs	r1, #0
 800082e:	200d      	movs	r0, #13
 8000830:	f002 ffbd 	bl	80037ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000834:	200d      	movs	r0, #13
 8000836:	f002 ffd4 	bl	80037e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800083a:	2200      	movs	r2, #0
 800083c:	2100      	movs	r1, #0
 800083e:	200e      	movs	r0, #14
 8000840:	f002 ffb5 	bl	80037ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000844:	200e      	movs	r0, #14
 8000846:	f002 ffcc 	bl	80037e2 <HAL_NVIC_EnableIRQ>

}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40021000 	.word	0x40021000

08000858 <update_dc_bias_sweep>:
uint16_t dcbias = 0;
int dcbias_dir = 1;
int dcinverted = 0;

void update_dc_bias_sweep()
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	  // up=1, down=0
	  (dcbias_dir) ? (dcbias++) : (dcbias--);
 800085c:	4b20      	ldr	r3, [pc, #128]	; (80008e0 <update_dc_bias_sweep+0x88>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d006      	beq.n	8000872 <update_dc_bias_sweep+0x1a>
 8000864:	4b1f      	ldr	r3, [pc, #124]	; (80008e4 <update_dc_bias_sweep+0x8c>)
 8000866:	881b      	ldrh	r3, [r3, #0]
 8000868:	3301      	adds	r3, #1
 800086a:	b29a      	uxth	r2, r3
 800086c:	4b1d      	ldr	r3, [pc, #116]	; (80008e4 <update_dc_bias_sweep+0x8c>)
 800086e:	801a      	strh	r2, [r3, #0]
 8000870:	e005      	b.n	800087e <update_dc_bias_sweep+0x26>
 8000872:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <update_dc_bias_sweep+0x8c>)
 8000874:	881b      	ldrh	r3, [r3, #0]
 8000876:	3b01      	subs	r3, #1
 8000878:	b29a      	uxth	r2, r3
 800087a:	4b1a      	ldr	r3, [pc, #104]	; (80008e4 <update_dc_bias_sweep+0x8c>)
 800087c:	801a      	strh	r2, [r3, #0]

	  // invert the bias signal at zero crossing
	  if(dcbias < 1) {
 800087e:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <update_dc_bias_sweep+0x8c>)
 8000880:	881b      	ldrh	r3, [r3, #0]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d10a      	bne.n	800089c <update_dc_bias_sweep+0x44>
		(dcinverted) ? (dcinverted=0) : (dcinverted=1);
 8000886:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <update_dc_bias_sweep+0x90>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d003      	beq.n	8000896 <update_dc_bias_sweep+0x3e>
 800088e:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <update_dc_bias_sweep+0x90>)
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	e002      	b.n	800089c <update_dc_bias_sweep+0x44>
 8000896:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <update_dc_bias_sweep+0x90>)
 8000898:	2201      	movs	r2, #1
 800089a:	601a      	str	r2, [r3, #0]
	  }

	  // change direction if dac limits are reached
	  if(dcbias < 1) 	{ dcbias_dir = 1; }
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <update_dc_bias_sweep+0x8c>)
 800089e:	881b      	ldrh	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d102      	bne.n	80008aa <update_dc_bias_sweep+0x52>
 80008a4:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <update_dc_bias_sweep+0x88>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	601a      	str	r2, [r3, #0]
	  if(dcbias > 4095) { dcbias_dir = 0; }
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <update_dc_bias_sweep+0x8c>)
 80008ac:	881b      	ldrh	r3, [r3, #0]
 80008ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008b2:	d302      	bcc.n	80008ba <update_dc_bias_sweep+0x62>
 80008b4:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <update_dc_bias_sweep+0x88>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]


	  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, dcinverted);
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <update_dc_bias_sweep+0x90>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	461a      	mov	r2, r3
 80008c2:	2108      	movs	r1, #8
 80008c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c8:	f003 ff64 	bl	8004794 <HAL_GPIO_WritePin>
	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, dcbias);
 80008cc:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <update_dc_bias_sweep+0x8c>)
 80008ce:	881b      	ldrh	r3, [r3, #0]
 80008d0:	2200      	movs	r2, #0
 80008d2:	2110      	movs	r1, #16
 80008d4:	4805      	ldr	r0, [pc, #20]	; (80008ec <update_dc_bias_sweep+0x94>)
 80008d6:	f003 f8d5 	bl	8003a84 <HAL_DAC_SetValue>
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000000 	.word	0x20000000
 80008e4:	20001fd4 	.word	0x20001fd4
 80008e8:	20001fd8 	.word	0x20001fd8
 80008ec:	200020fc 	.word	0x200020fc

080008f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008f4:	4b04      	ldr	r3, [pc, #16]	; (8000908 <__NVIC_GetPriorityGrouping+0x18>)
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	0a1b      	lsrs	r3, r3, #8
 80008fa:	f003 0307 	and.w	r3, r3, #7
}
 80008fe:	4618      	mov	r0, r3
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091a:	2b00      	cmp	r3, #0
 800091c:	db0b      	blt.n	8000936 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	f003 021f 	and.w	r2, r3, #31
 8000924:	4907      	ldr	r1, [pc, #28]	; (8000944 <__NVIC_EnableIRQ+0x38>)
 8000926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092a:	095b      	lsrs	r3, r3, #5
 800092c:	2001      	movs	r0, #1
 800092e:	fa00 f202 	lsl.w	r2, r0, r2
 8000932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000936:	bf00      	nop
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	e000e100 	.word	0xe000e100

08000948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	6039      	str	r1, [r7, #0]
 8000952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000958:	2b00      	cmp	r3, #0
 800095a:	db0a      	blt.n	8000972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	b2da      	uxtb	r2, r3
 8000960:	490c      	ldr	r1, [pc, #48]	; (8000994 <__NVIC_SetPriority+0x4c>)
 8000962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000966:	0112      	lsls	r2, r2, #4
 8000968:	b2d2      	uxtb	r2, r2
 800096a:	440b      	add	r3, r1
 800096c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000970:	e00a      	b.n	8000988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	b2da      	uxtb	r2, r3
 8000976:	4908      	ldr	r1, [pc, #32]	; (8000998 <__NVIC_SetPriority+0x50>)
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	f003 030f 	and.w	r3, r3, #15
 800097e:	3b04      	subs	r3, #4
 8000980:	0112      	lsls	r2, r2, #4
 8000982:	b2d2      	uxtb	r2, r2
 8000984:	440b      	add	r3, r1
 8000986:	761a      	strb	r2, [r3, #24]
}
 8000988:	bf00      	nop
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr
 8000994:	e000e100 	.word	0xe000e100
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800099c:	b480      	push	{r7}
 800099e:	b089      	sub	sp, #36	; 0x24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	f003 0307 	and.w	r3, r3, #7
 80009ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	f1c3 0307 	rsb	r3, r3, #7
 80009b6:	2b04      	cmp	r3, #4
 80009b8:	bf28      	it	cs
 80009ba:	2304      	movcs	r3, #4
 80009bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	3304      	adds	r3, #4
 80009c2:	2b06      	cmp	r3, #6
 80009c4:	d902      	bls.n	80009cc <NVIC_EncodePriority+0x30>
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	3b03      	subs	r3, #3
 80009ca:	e000      	b.n	80009ce <NVIC_EncodePriority+0x32>
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009d4:	69bb      	ldr	r3, [r7, #24]
 80009d6:	fa02 f303 	lsl.w	r3, r2, r3
 80009da:	43da      	mvns	r2, r3
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	401a      	ands	r2, r3
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	fa01 f303 	lsl.w	r3, r1, r3
 80009ee:	43d9      	mvns	r1, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f4:	4313      	orrs	r3, r2
         );
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3724      	adds	r7, #36	; 0x24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
	...

08000a04 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 8000a0e:	4a14      	ldr	r2, [pc, #80]	; (8000a60 <LL_SYSCFG_SetEXTISource+0x5c>)
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	f003 0303 	and.w	r3, r3, #3
 8000a16:	3302      	adds	r3, #2
 8000a18:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	0c1b      	lsrs	r3, r3, #16
 8000a20:	43db      	mvns	r3, r3
 8000a22:	ea02 0103 	and.w	r1, r2, r3
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	0c1b      	lsrs	r3, r3, #16
 8000a2a:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	fa93 f3a3 	rbit	r3, r3
 8000a32:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	fab3 f383 	clz	r3, r3
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	f003 031f 	and.w	r3, r3, #31
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	409a      	lsls	r2, r3
 8000a44:	4806      	ldr	r0, [pc, #24]	; (8000a60 <LL_SYSCFG_SetEXTISource+0x5c>)
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	f003 0303 	and.w	r3, r3, #3
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	3302      	adds	r3, #2
 8000a50:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000a54:	bf00      	nop
 8000a56:	3714      	adds	r7, #20
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	40010000 	.word	0x40010000

08000a64 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b089      	sub	sp, #36	; 0x24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	fa93 f3a3 	rbit	r3, r3
 8000a7e:	613b      	str	r3, [r7, #16]
  return result;
 8000a80:	693b      	ldr	r3, [r7, #16]
 8000a82:	fab3 f383 	clz	r3, r3
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	2103      	movs	r1, #3
 8000a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a90:	43db      	mvns	r3, r3
 8000a92:	401a      	ands	r2, r3
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a98:	69fb      	ldr	r3, [r7, #28]
 8000a9a:	fa93 f3a3 	rbit	r3, r3
 8000a9e:	61bb      	str	r3, [r7, #24]
  return result;
 8000aa0:	69bb      	ldr	r3, [r7, #24]
 8000aa2:	fab3 f383 	clz	r3, r3
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	6879      	ldr	r1, [r7, #4]
 8000aac:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab0:	431a      	orrs	r2, r3
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	601a      	str	r2, [r3, #0]
}
 8000ab6:	bf00      	nop
 8000ab8:	3724      	adds	r7, #36	; 0x24
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr

08000ac2 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	b089      	sub	sp, #36	; 0x24
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	60f8      	str	r0, [r7, #12]
 8000aca:	60b9      	str	r1, [r7, #8]
 8000acc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	68da      	ldr	r2, [r3, #12]
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	fa93 f3a3 	rbit	r3, r3
 8000adc:	613b      	str	r3, [r7, #16]
  return result;
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	fab3 f383 	clz	r3, r3
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	2103      	movs	r1, #3
 8000aea:	fa01 f303 	lsl.w	r3, r1, r3
 8000aee:	43db      	mvns	r3, r3
 8000af0:	401a      	ands	r2, r3
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	fa93 f3a3 	rbit	r3, r3
 8000afc:	61bb      	str	r3, [r7, #24]
  return result;
 8000afe:	69bb      	ldr	r3, [r7, #24]
 8000b00:	fab3 f383 	clz	r3, r3
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	6879      	ldr	r1, [r7, #4]
 8000b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0e:	431a      	orrs	r2, r3
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	60da      	str	r2, [r3, #12]
}
 8000b14:	bf00      	nop
 8000b16:	3724      	adds	r7, #36	; 0x24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	683a      	ldr	r2, [r7, #0]
 8000b2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b44:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000b46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b48:	4907      	ldr	r1, [pc, #28]	; (8000b68 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b50:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000b52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4013      	ands	r3, r2
 8000b58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
}
 8000b5c:	bf00      	nop
 8000b5e:	3714      	adds	r7, #20
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	40021000 	.word	0x40021000

08000b6c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	; 0x28
 8000b70:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
 8000b8c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000b8e:	2004      	movs	r0, #4
 8000b90:	f7ff ffd4 	bl	8000b3c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8000b94:	2020      	movs	r0, #32
 8000b96:	f7ff ffd1 	bl	8000b3c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	f7ff ffce 	bl	8000b3c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000ba0:	2002      	movs	r0, #2
 8000ba2:	f7ff ffcb 	bl	8000b3c <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 8000ba6:	2108      	movs	r1, #8
 8000ba8:	48d3      	ldr	r0, [pc, #844]	; (8000ef8 <MX_GPIO_Init+0x38c>)
 8000baa:	f7ff ffb9 	bl	8000b20 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 8000bae:	2108      	movs	r1, #8
 8000bb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb4:	f7ff ffb4 	bl	8000b20 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 8000bb8:	2110      	movs	r1, #16
 8000bba:	48cf      	ldr	r0, [pc, #828]	; (8000ef8 <MX_GPIO_Init+0x38c>)
 8000bbc:	f7ff ffb0 	bl	8000b20 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 8000bc0:	2120      	movs	r1, #32
 8000bc2:	48cd      	ldr	r0, [pc, #820]	; (8000ef8 <MX_GPIO_Init+0x38c>)
 8000bc4:	f7ff ffac 	bl	8000b20 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 8000bc8:	2101      	movs	r1, #1
 8000bca:	48cc      	ldr	r0, [pc, #816]	; (8000efc <MX_GPIO_Init+0x390>)
 8000bcc:	f7ff ffa8 	bl	8000b20 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 8000bd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bd4:	48c8      	ldr	r0, [pc, #800]	; (8000ef8 <MX_GPIO_Init+0x38c>)
 8000bd6:	f7ff ffa3 	bl	8000b20 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 8000bda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bde:	48c6      	ldr	r0, [pc, #792]	; (8000ef8 <MX_GPIO_Init+0x38c>)
 8000be0:	f7ff ff9e 	bl	8000b20 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 8000be4:	2140      	movs	r1, #64	; 0x40
 8000be6:	48c5      	ldr	r0, [pc, #788]	; (8000efc <MX_GPIO_Init+0x390>)
 8000be8:	f7ff ff9a 	bl	8000b20 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 8000bec:	2180      	movs	r1, #128	; 0x80
 8000bee:	48c3      	ldr	r0, [pc, #780]	; (8000efc <MX_GPIO_Init+0x390>)
 8000bf0:	f7ff ff96 	bl	8000b20 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 8000bf4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bf8:	48c0      	ldr	r0, [pc, #768]	; (8000efc <MX_GPIO_Init+0x390>)
 8000bfa:	f7ff ff91 	bl	8000b20 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 8000bfe:	49c0      	ldr	r1, [pc, #768]	; (8000f00 <MX_GPIO_Init+0x394>)
 8000c00:	2002      	movs	r0, #2
 8000c02:	f7ff feff 	bl	8000a04 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 8000c06:	49bf      	ldr	r1, [pc, #764]	; (8000f04 <MX_GPIO_Init+0x398>)
 8000c08:	2002      	movs	r0, #2
 8000c0a:	f7ff fefb 	bl	8000a04 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 8000c0e:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8000c12:	2005      	movs	r0, #5
 8000c14:	f7ff fef6 	bl	8000a04 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 8000c18:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8000c1c:	2005      	movs	r0, #5
 8000c1e:	f7ff fef1 	bl	8000a04 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 8000c22:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8000c26:	2002      	movs	r0, #2
 8000c28:	f7ff feec 	bl	8000a04 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8000c2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c30:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000c32:	2301      	movs	r3, #1
 8000c34:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000c44:	f107 031c 	add.w	r3, r7, #28
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f006 fb57 	bl	80072fc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8000c4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c52:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000c54:	2301      	movs	r3, #1
 8000c56:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000c60:	2302      	movs	r3, #2
 8000c62:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000c66:	f107 031c 	add.w	r3, r7, #28
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f006 fb46 	bl	80072fc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8000c70:	2301      	movs	r3, #1
 8000c72:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000c74:	2301      	movs	r3, #1
 8000c76:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000c80:	2302      	movs	r3, #2
 8000c82:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000c86:	f107 031c 	add.w	r3, r7, #28
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f006 fb36 	bl	80072fc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8000c90:	2302      	movs	r3, #2
 8000c92:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000c94:	2301      	movs	r3, #1
 8000c96:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000ca6:	f107 031c 	add.w	r3, r7, #28
 8000caa:	4618      	mov	r0, r3
 8000cac:	f006 fb26 	bl	80072fc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8000cb0:	2304      	movs	r3, #4
 8000cb2:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000cc6:	f107 031c 	add.w	r3, r7, #28
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f006 fb16 	bl	80072fc <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cd6:	4888      	ldr	r0, [pc, #544]	; (8000ef8 <MX_GPIO_Init+0x38c>)
 8000cd8:	f7ff fef3 	bl	8000ac2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 8000cdc:	2201      	movs	r2, #1
 8000cde:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ce2:	4885      	ldr	r0, [pc, #532]	; (8000ef8 <MX_GPIO_Init+0x38c>)
 8000ce4:	f7ff feed 	bl	8000ac2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 8000ce8:	2201      	movs	r2, #1
 8000cea:	2101      	movs	r1, #1
 8000cec:	4886      	ldr	r0, [pc, #536]	; (8000f08 <MX_GPIO_Init+0x39c>)
 8000cee:	f7ff fee8 	bl	8000ac2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	2102      	movs	r1, #2
 8000cf6:	4884      	ldr	r0, [pc, #528]	; (8000f08 <MX_GPIO_Init+0x39c>)
 8000cf8:	f7ff fee3 	bl	8000ac2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	2104      	movs	r1, #4
 8000d00:	487d      	ldr	r0, [pc, #500]	; (8000ef8 <MX_GPIO_Init+0x38c>)
 8000d02:	f7ff fede 	bl	8000ac2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 8000d06:	2200      	movs	r2, #0
 8000d08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d0c:	487a      	ldr	r0, [pc, #488]	; (8000ef8 <MX_GPIO_Init+0x38c>)
 8000d0e:	f7ff fea9 	bl	8000a64 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d18:	4877      	ldr	r0, [pc, #476]	; (8000ef8 <MX_GPIO_Init+0x38c>)
 8000d1a:	f7ff fea3 	bl	8000a64 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2101      	movs	r1, #1
 8000d22:	4879      	ldr	r0, [pc, #484]	; (8000f08 <MX_GPIO_Init+0x39c>)
 8000d24:	f7ff fe9e 	bl	8000a64 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2102      	movs	r1, #2
 8000d2c:	4876      	ldr	r0, [pc, #472]	; (8000f08 <MX_GPIO_Init+0x39c>)
 8000d2e:	f7ff fe99 	bl	8000a64 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2104      	movs	r1, #4
 8000d36:	4870      	ldr	r0, [pc, #448]	; (8000ef8 <MX_GPIO_Init+0x38c>)
 8000d38:	f7ff fe94 	bl	8000a64 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 8000d3c:	2308      	movs	r3, #8
 8000d3e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d40:	2301      	movs	r3, #1
 8000d42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d44:	2300      	movs	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 8000d50:	1d3b      	adds	r3, r7, #4
 8000d52:	4619      	mov	r1, r3
 8000d54:	4868      	ldr	r0, [pc, #416]	; (8000ef8 <MX_GPIO_Init+0x38c>)
 8000d56:	f006 fcc4 	bl	80076e2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 8000d5a:	2308      	movs	r3, #8
 8000d5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	4619      	mov	r1, r3
 8000d72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d76:	f006 fcb4 	bl	80076e2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 8000d7a:	2310      	movs	r3, #16
 8000d7c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	4619      	mov	r1, r3
 8000d92:	4859      	ldr	r0, [pc, #356]	; (8000ef8 <MX_GPIO_Init+0x38c>)
 8000d94:	f006 fca5 	bl	80076e2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 8000d98:	2320      	movs	r3, #32
 8000d9a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 8000dac:	1d3b      	adds	r3, r7, #4
 8000dae:	4619      	mov	r1, r3
 8000db0:	4851      	ldr	r0, [pc, #324]	; (8000ef8 <MX_GPIO_Init+0x38c>)
 8000db2:	f006 fc96 	bl	80076e2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 8000db6:	2301      	movs	r3, #1
 8000db8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	4619      	mov	r1, r3
 8000dce:	484b      	ldr	r0, [pc, #300]	; (8000efc <MX_GPIO_Init+0x390>)
 8000dd0:	f006 fc87 	bl	80076e2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 8000dd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dd8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	4619      	mov	r1, r3
 8000dee:	4842      	ldr	r0, [pc, #264]	; (8000ef8 <MX_GPIO_Init+0x38c>)
 8000df0:	f006 fc77 	bl	80076e2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 8000df4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000df8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	483a      	ldr	r0, [pc, #232]	; (8000ef8 <MX_GPIO_Init+0x38c>)
 8000e10:	f006 fc67 	bl	80076e2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 8000e14:	2340      	movs	r3, #64	; 0x40
 8000e16:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8000e28:	1d3b      	adds	r3, r7, #4
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4833      	ldr	r0, [pc, #204]	; (8000efc <MX_GPIO_Init+0x390>)
 8000e2e:	f006 fc58 	bl	80076e2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 8000e32:	2380      	movs	r3, #128	; 0x80
 8000e34:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e36:	2301      	movs	r3, #1
 8000e38:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	4619      	mov	r1, r3
 8000e4a:	482c      	ldr	r0, [pc, #176]	; (8000efc <MX_GPIO_Init+0x390>)
 8000e4c:	f006 fc49 	bl	80076e2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 8000e50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e54:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e56:	2301      	movs	r3, #1
 8000e58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4824      	ldr	r0, [pc, #144]	; (8000efc <MX_GPIO_Init+0x390>)
 8000e6c:	f006 fc39 	bl	80076e2 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000e70:	f7ff fd3e 	bl	80008f0 <__NVIC_GetPriorityGrouping>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2200      	movs	r2, #0
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff fd8e 	bl	800099c <NVIC_EncodePriority>
 8000e80:	4603      	mov	r3, r0
 8000e82:	4619      	mov	r1, r3
 8000e84:	2006      	movs	r0, #6
 8000e86:	f7ff fd5f 	bl	8000948 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8000e8a:	2006      	movs	r0, #6
 8000e8c:	f7ff fd3e 	bl	800090c <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000e90:	f7ff fd2e 	bl	80008f0 <__NVIC_GetPriorityGrouping>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2200      	movs	r2, #0
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fd7e 	bl	800099c <NVIC_EncodePriority>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	2007      	movs	r0, #7
 8000ea6:	f7ff fd4f 	bl	8000948 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 8000eaa:	2007      	movs	r0, #7
 8000eac:	f7ff fd2e 	bl	800090c <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000eb0:	f7ff fd1e 	bl	80008f0 <__NVIC_GetPriorityGrouping>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fd6e 	bl	800099c <NVIC_EncodePriority>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	2008      	movs	r0, #8
 8000ec6:	f7ff fd3f 	bl	8000948 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 8000eca:	2008      	movs	r0, #8
 8000ecc:	f7ff fd1e 	bl	800090c <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000ed0:	f7ff fd0e 	bl	80008f0 <__NVIC_GetPriorityGrouping>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fd5e 	bl	800099c <NVIC_EncodePriority>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	2028      	movs	r0, #40	; 0x28
 8000ee6:	f7ff fd2f 	bl	8000948 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000eea:	2028      	movs	r0, #40	; 0x28
 8000eec:	f7ff fd0e 	bl	800090c <__NVIC_EnableIRQ>

}
 8000ef0:	bf00      	nop
 8000ef2:	3728      	adds	r7, #40	; 0x28
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	e009      	b.n	8000f0c <MX_GPIO_Init+0x3a0>
 8000ef8:	48000800 	.word	0x48000800
 8000efc:	48000400 	.word	0x48000400
 8000f00:	0f000003 	.word	0x0f000003
 8000f04:	f0000003 	.word	0xf0000003
 8000f08:	48001400 	.word	0x48001400
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop

08000f10 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f18:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f1c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d013      	beq.n	8000f50 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f28:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f2c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000f30:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d00b      	beq.n	8000f50 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f38:	e000      	b.n	8000f3c <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f3a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f3c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d0f9      	beq.n	8000f3a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f46:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	b2d2      	uxtb	r2, r2
 8000f4e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f50:	687b      	ldr	r3, [r7, #4]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <LL_RNG_ReadRandData32>:
  * @rmtoll DR           RNDATA        LL_RNG_ReadRandData32
  * @param  RNGx RNG Instance
  * @retval Generated 32-bit random value
  */
__STATIC_INLINE uint32_t LL_RNG_ReadRandData32(RNG_TypeDef *RNGx)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b083      	sub	sp, #12
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(RNGx->DR));
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	689b      	ldr	r3, [r3, #8]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b086      	sub	sp, #24
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	60f8      	str	r0, [r7, #12]
 8000f7e:	60b9      	str	r1, [r7, #8]
 8000f80:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
 8000f8a:	e009      	b.n	8000fa0 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	1c5a      	adds	r2, r3, #1
 8000f90:	60ba      	str	r2, [r7, #8]
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff ffbb 	bl	8000f10 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	617b      	str	r3, [r7, #20]
 8000fa0:	697a      	ldr	r2, [r7, #20]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	dbf1      	blt.n	8000f8c <_write+0x16>
  return len;
 8000fa8:	687b      	ldr	r3, [r7, #4]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <update_tft>:

void update_tft()
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af02      	add	r7, sp, #8
	  //----------------------------------------------------------FILLED CIRCLES EXAMPLE

	  			uint16_t xr = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	82fb      	strh	r3, [r7, #22]
	  			uint16_t yr = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	82bb      	strh	r3, [r7, #20]
	  			uint16_t radiusr = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	827b      	strh	r3, [r7, #18]
	  			uint16_t colourr = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	823b      	strh	r3, [r7, #16]
	  			xr = LL_RNG_ReadRandData32(RNG);
 8000fca:	4828      	ldr	r0, [pc, #160]	; (800106c <update_tft+0xb8>)
 8000fcc:	f7ff ffc7 	bl	8000f5e <LL_RNG_ReadRandData32>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	82fb      	strh	r3, [r7, #22]
	  			yr = LL_RNG_ReadRandData32(RNG);
 8000fd4:	4825      	ldr	r0, [pc, #148]	; (800106c <update_tft+0xb8>)
 8000fd6:	f7ff ffc2 	bl	8000f5e <LL_RNG_ReadRandData32>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	82bb      	strh	r3, [r7, #20]
	  			radiusr = LL_RNG_ReadRandData32(RNG);
 8000fde:	4823      	ldr	r0, [pc, #140]	; (800106c <update_tft+0xb8>)
 8000fe0:	f7ff ffbd 	bl	8000f5e <LL_RNG_ReadRandData32>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	827b      	strh	r3, [r7, #18]
	  			colourr = LL_RNG_ReadRandData32(RNG);
 8000fe8:	4820      	ldr	r0, [pc, #128]	; (800106c <update_tft+0xb8>)
 8000fea:	f7ff ffb8 	bl	8000f5e <LL_RNG_ReadRandData32>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	823b      	strh	r3, [r7, #16]

	  			xr &= 0x01FF;
 8000ff2:	8afb      	ldrh	r3, [r7, #22]
 8000ff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000ff8:	82fb      	strh	r3, [r7, #22]
	  			yr &= 0x01FF;
 8000ffa:	8abb      	ldrh	r3, [r7, #20]
 8000ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001000:	82bb      	strh	r3, [r7, #20]
	  			radiusr &= 0x001F;
 8001002:	8a7b      	ldrh	r3, [r7, #18]
 8001004:	f003 031f 	and.w	r3, r3, #31
 8001008:	827b      	strh	r3, [r7, #18]

	  			ILI9341_Draw_Filled_Circle(xr, yr, radiusr/2, colourr);
 800100a:	8a7b      	ldrh	r3, [r7, #18]
 800100c:	085b      	lsrs	r3, r3, #1
 800100e:	b29a      	uxth	r2, r3
 8001010:	8a3b      	ldrh	r3, [r7, #16]
 8001012:	8ab9      	ldrh	r1, [r7, #20]
 8001014:	8af8      	ldrh	r0, [r7, #22]
 8001016:	f006 fbd3 	bl	80077c0 <ILI9341_Draw_Filled_Circle>

	  			char enc_buff[13] = "";
 800101a:	2300      	movs	r3, #0
 800101c:	603b      	str	r3, [r7, #0]
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	721a      	strb	r2, [r3, #8]
	  			snprintf(enc_buff, sizeof(enc_buff), "%d\n", new_enc_value);
 8001028:	4b11      	ldr	r3, [pc, #68]	; (8001070 <update_tft+0xbc>)
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	4638      	mov	r0, r7
 800102e:	4a11      	ldr	r2, [pc, #68]	; (8001074 <update_tft+0xc0>)
 8001030:	210d      	movs	r1, #13
 8001032:	f007 f9f9 	bl	8008428 <sniprintf>
	  			ILI9341_Draw_Text(enc_buff, 10, 20, BLACK, 5, WHITE);
 8001036:	4638      	mov	r0, r7
 8001038:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800103c:	9301      	str	r3, [sp, #4]
 800103e:	2305      	movs	r3, #5
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	2300      	movs	r3, #0
 8001044:	2214      	movs	r2, #20
 8001046:	210a      	movs	r1, #10
 8001048:	f006 fcdc 	bl	8007a04 <ILI9341_Draw_Text>

	  			ILI9341_Draw_Text(control_pressed, 10, 60, BLACK, 5, WHITE);
 800104c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001050:	9301      	str	r3, [sp, #4]
 8001052:	2305      	movs	r3, #5
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	2300      	movs	r3, #0
 8001058:	223c      	movs	r2, #60	; 0x3c
 800105a:	210a      	movs	r1, #10
 800105c:	4806      	ldr	r0, [pc, #24]	; (8001078 <update_tft+0xc4>)
 800105e:	f006 fcd1 	bl	8007a04 <ILI9341_Draw_Text>
	  		//HAL_Delay(1);
}
 8001062:	bf00      	nop
 8001064:	3718      	adds	r7, #24
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	50060800 	.word	0x50060800
 8001070:	20001fde 	.word	0x20001fde
 8001074:	08009588 	.word	0x08009588
 8001078:	20001fec 	.word	0x20001fec

0800107c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001082:	f000 fee6 	bl	8001e52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001086:	f000 f8b5 	bl	80011f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800108a:	f7ff fd6f 	bl	8000b6c <MX_GPIO_Init>
  MX_DMA_Init();
 800108e:	f7ff fba1 	bl	80007d4 <MX_DMA_Init>
  MX_DAC1_Init();
 8001092:	f7ff fa53 	bl	800053c <MX_DAC1_Init>
  MX_DAC2_Init();
 8001096:	f7ff fa99 	bl	80005cc <MX_DAC2_Init>
  MX_ADC1_Init();
 800109a:	f7ff f911 	bl	80002c0 <MX_ADC1_Init>
  MX_COMP1_Init();
 800109e:	f7ff f9f3 	bl	8000488 <MX_COMP1_Init>
  MX_TIM2_Init();
 80010a2:	f000 fca7 	bl	80019f4 <MX_TIM2_Init>
  MX_TIM17_Init();
 80010a6:	f000 fd9d 	bl	8001be4 <MX_TIM17_Init>
  MX_SPI3_Init();
 80010aa:	f000 f94f 	bl	800134c <MX_SPI3_Init>
  MX_RNG_Init();
 80010ae:	f000 f93f 	bl	8001330 <MX_RNG_Init>
  MX_TIM1_Init();
 80010b2:	f000 fc2f 	bl	8001914 <MX_TIM1_Init>
  MX_TIM8_Init();
 80010b6:	f000 fd07 	bl	8001ac8 <MX_TIM8_Init>
  MX_TIM16_Init();
 80010ba:	f000 fd6d 	bl	8001b98 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  // main signal function output (external)
  HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80010be:	2300      	movs	r3, #0
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c6:	4a3f      	ldr	r2, [pc, #252]	; (80011c4 <main+0x148>)
 80010c8:	2100      	movs	r1, #0
 80010ca:	483f      	ldr	r0, [pc, #252]	; (80011c8 <main+0x14c>)
 80010cc:	f002 fc18 	bl	8003900 <HAL_DAC_Start_DMA>
  //TIM8->ARR = sin1_max_arr;

  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 80010d0:	2110      	movs	r1, #16
 80010d2:	483d      	ldr	r0, [pc, #244]	; (80011c8 <main+0x14c>)
 80010d4:	f002 fbc1 	bl	800385a <HAL_DAC_Start>
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, square_data_table, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, unitimpulse_data_table, UNITIMPULSE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_data_table, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_rev_data_table, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
  HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, triangle_data_table, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 80010d8:	2300      	movs	r3, #0
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e0:	4a3a      	ldr	r2, [pc, #232]	; (80011cc <main+0x150>)
 80010e2:	2100      	movs	r1, #0
 80010e4:	483a      	ldr	r0, [pc, #232]	; (80011d0 <main+0x154>)
 80010e6:	f002 fc0b 	bl	8003900 <HAL_DAC_Start_DMA>

  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);
#ifndef DISABLE_ALL_TIMERS
  // single clock to run all DAC channels. TODO add independent clocks
  HAL_TIM_Base_Start(&htim8);
 80010ea:	483a      	ldr	r0, [pc, #232]	; (80011d4 <main+0x158>)
 80010ec:	f005 f85a 	bl	80061a4 <HAL_TIM_Base_Start>
#endif //DISABLE_ALL_TIMERS

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 80010f0:	2201      	movs	r2, #1
 80010f2:	2108      	movs	r1, #8
 80010f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f8:	f003 fb4c 	bl	8004794 <HAL_GPIO_WritePin>

  // PGA gain
  HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80010fc:	2201      	movs	r2, #1
 80010fe:	2101      	movs	r1, #1
 8001100:	4835      	ldr	r0, [pc, #212]	; (80011d8 <main+0x15c>)
 8001102:	f003 fb47 	bl	8004794 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8001106:	2201      	movs	r2, #1
 8001108:	2120      	movs	r1, #32
 800110a:	4834      	ldr	r0, [pc, #208]	; (80011dc <main+0x160>)
 800110c:	f003 fb42 	bl	8004794 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8001110:	2201      	movs	r2, #1
 8001112:	2110      	movs	r1, #16
 8001114:	4831      	ldr	r0, [pc, #196]	; (80011dc <main+0x160>)
 8001116:	f003 fb3d 	bl	8004794 <HAL_GPIO_WritePin>

#ifndef DISABLE_ALL_TIMERS
  // start test routine (update_dc_bias_sweep())
  HAL_TIM_Base_Start_IT(&htim17);
 800111a:	4831      	ldr	r0, [pc, #196]	; (80011e0 <main+0x164>)
 800111c:	f005 f870 	bl	8006200 <HAL_TIM_Base_Start_IT>
#endif	//DISABLE_ALL_TIMERS


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 8001120:	2200      	movs	r2, #0
 8001122:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001126:	482d      	ldr	r0, [pc, #180]	; (80011dc <main+0x160>)
 8001128:	f003 fb34 	bl	8004794 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 800112c:	2200      	movs	r2, #0
 800112e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001132:	482a      	ldr	r0, [pc, #168]	; (80011dc <main+0x160>)
 8001134:	f003 fb2e 	bl	8004794 <HAL_GPIO_WritePin>

#ifdef TIM_TRIGGER_MODE
  // input capture on in TIM2 slave-mode TF1FP1

  // set HW switch to direct ext. trigger input to TIM pin
  HAL_GPIO_WritePin(TRIGMODE_GPIO_Port, TRIGMODE_Pin, GPIO_PIN_SET);
 8001138:	2201      	movs	r2, #1
 800113a:	2108      	movs	r1, #8
 800113c:	4827      	ldr	r0, [pc, #156]	; (80011dc <main+0x160>)
 800113e:	f003 fb29 	bl	8004794 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);	// TS5A3357 Pin6
  //HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); // TS5A3357 Pin5

  // clear slave mode select reg
  TIM2->SMCR &= ~(TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2);
 8001142:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800114c:	f023 0307 	bic.w	r3, r3, #7
 8001150:	6093      	str	r3, [r2, #8]

  // slave mode
  //TIM2->SMCR |= TIM_SMCR_SMS_2;						// SLAVE MODE: RESET
  TIM2->SMCR |= TIM_SMCR_SMS_0 | TIM_SMCR_SMS_2;	// SLAVE MODE: GATED
 8001152:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800115c:	f043 0305 	orr.w	r3, r3, #5
 8001160:	6093      	str	r3, [r2, #8]
  //TIM2->SMCR |= TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;	// SLAVE MODE: TRIGGER

#ifndef DISABLE_ALL_TIMERS
  HAL_TIM_Base_Start_IT(&htim2);
 8001162:	4820      	ldr	r0, [pc, #128]	; (80011e4 <main+0x168>)
 8001164:	f005 f84c 	bl	8006200 <HAL_TIM_Base_Start_IT>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);
 8001168:	481f      	ldr	r0, [pc, #124]	; (80011e8 <main+0x16c>)
 800116a:	f005 f81b 	bl	80061a4 <HAL_TIM_Base_Start>
  //HAL_TIM_Base_Start_IT(&htim16);
#endif	//DISABLE_ALL_TIMERS

  // TFT lib enable
  ILI9341_Init();
 800116e:	f006 fda7 	bl	8007cc0 <ILI9341_Init>


	ILI9341_Fill_Screen(WHITE);
 8001172:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001176:	f006 ff4b 	bl	8008010 <ILI9341_Fill_Screen>
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 800117a:	2003      	movs	r0, #3
 800117c:	f006 fd42 	bl	8007c04 <ILI9341_Set_Rotation>
	ILI9341_Draw_Text("Randomly placed and sized", 10, 10, BLACK, 1, WHITE);
 8001180:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001184:	9301      	str	r3, [sp, #4]
 8001186:	2301      	movs	r3, #1
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2300      	movs	r3, #0
 800118c:	220a      	movs	r2, #10
 800118e:	210a      	movs	r1, #10
 8001190:	4816      	ldr	r0, [pc, #88]	; (80011ec <main+0x170>)
 8001192:	f006 fc37 	bl	8007a04 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("Filled Circles", 10, 20, BLACK, 1, WHITE);
 8001196:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800119a:	9301      	str	r3, [sp, #4]
 800119c:	2301      	movs	r3, #1
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	2300      	movs	r3, #0
 80011a2:	2214      	movs	r2, #20
 80011a4:	210a      	movs	r1, #10
 80011a6:	4812      	ldr	r0, [pc, #72]	; (80011f0 <main+0x174>)
 80011a8:	f006 fc2c 	bl	8007a04 <ILI9341_Draw_Text>
	HAL_Delay(2000);
 80011ac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80011b0:	f000 fec0 	bl	8001f34 <HAL_Delay>
	ILI9341_Fill_Screen(WHITE);
 80011b4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80011b8:	f006 ff2a 	bl	8008010 <ILI9341_Fill_Screen>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	//printf("TFT\n");
	update_tft();
 80011bc:	f7ff fefa 	bl	8000fb4 <update_tft>
 80011c0:	e7fc      	b.n	80011bc <main+0x140>
 80011c2:	bf00      	nop
 80011c4:	20000004 	.word	0x20000004
 80011c8:	200020fc 	.word	0x200020fc
 80011cc:	20000fa4 	.word	0x20000fa4
 80011d0:	200020e8 	.word	0x200020e8
 80011d4:	20002294 	.word	0x20002294
 80011d8:	48000400 	.word	0x48000400
 80011dc:	48000800 	.word	0x48000800
 80011e0:	200022e0 	.word	0x200022e0
 80011e4:	20002378 	.word	0x20002378
 80011e8:	2000232c 	.word	0x2000232c
 80011ec:	0800958c 	.word	0x0800958c
 80011f0:	080095a8 	.word	0x080095a8

080011f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b0a8      	sub	sp, #160	; 0xa0
 80011f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80011fe:	2238      	movs	r2, #56	; 0x38
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f007 f88c 	bl	8008320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001208:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001218:	463b      	mov	r3, r7
 800121a:	2254      	movs	r2, #84	; 0x54
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f007 f87e 	bl	8008320 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001224:	2000      	movs	r0, #0
 8001226:	f003 facd 	bl	80047c4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800122a:	2322      	movs	r3, #34	; 0x22
 800122c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800122e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001232:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001234:	2340      	movs	r3, #64	; 0x40
 8001236:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001238:	2301      	movs	r3, #1
 800123a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800123e:	2302      	movs	r3, #2
 8001240:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001244:	2302      	movs	r3, #2
 8001246:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800124a:	2302      	movs	r3, #2
 800124c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8001250:	232a      	movs	r3, #42	; 0x2a
 8001252:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001256:	2302      	movs	r3, #2
 8001258:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 800125c:	2304      	movs	r3, #4
 800125e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001262:	2302      	movs	r3, #2
 8001264:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001268:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800126c:	4618      	mov	r0, r3
 800126e:	f003 fb4d 	bl	800490c <HAL_RCC_OscConfig>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001278:	f000 f82b 	bl	80012d2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800127c:	230f      	movs	r3, #15
 800127e:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001280:	2303      	movs	r3, #3
 8001282:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001284:	2300      	movs	r3, #0
 8001286:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001288:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800128c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800128e:	2300      	movs	r3, #0
 8001290:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8001292:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001296:	2108      	movs	r1, #8
 8001298:	4618      	mov	r0, r3
 800129a:	f003 fe4f 	bl	8004f3c <HAL_RCC_ClockConfig>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80012a4:	f000 f815 	bl	80012d2 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 80012a8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80012ac:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80012ae:	2300      	movs	r3, #0
 80012b0:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80012b2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80012b6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012b8:	463b      	mov	r3, r7
 80012ba:	4618      	mov	r0, r3
 80012bc:	f004 f82e 	bl	800531c <HAL_RCCEx_PeriphCLKConfig>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80012c6:	f000 f804 	bl	80012d2 <Error_Handler>
  }
}
 80012ca:	bf00      	nop
 80012cc:	37a0      	adds	r7, #160	; 0xa0
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <LL_RNG_Enable>:
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f043 0204 	orr.w	r2, r3, #4
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	601a      	str	r2, [r3, #0]
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <LL_AHB2_GRP1_EnableClock>:
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001308:	4b08      	ldr	r3, [pc, #32]	; (800132c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800130a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800130c:	4907      	ldr	r1, [pc, #28]	; (800132c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4313      	orrs	r3, r2
 8001312:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001314:	4b05      	ldr	r3, [pc, #20]	; (800132c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001316:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4013      	ands	r3, r2
 800131c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800131e:	68fb      	ldr	r3, [r7, #12]
}
 8001320:	bf00      	nop
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	40021000 	.word	0x40021000

08001330 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 8001334:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001338:	f7ff ffe2 	bl	8001300 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 800133c:	4802      	ldr	r0, [pc, #8]	; (8001348 <MX_RNG_Init+0x18>)
 800133e:	f7ff ffcf 	bl	80012e0 <LL_RNG_Enable>

}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	50060800 	.word	0x50060800

0800134c <MX_SPI3_Init>:
SPI_HandleTypeDef hspi3;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8001350:	4b1b      	ldr	r3, [pc, #108]	; (80013c0 <MX_SPI3_Init+0x74>)
 8001352:	4a1c      	ldr	r2, [pc, #112]	; (80013c4 <MX_SPI3_Init+0x78>)
 8001354:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001356:	4b1a      	ldr	r3, [pc, #104]	; (80013c0 <MX_SPI3_Init+0x74>)
 8001358:	f44f 7282 	mov.w	r2, #260	; 0x104
 800135c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800135e:	4b18      	ldr	r3, [pc, #96]	; (80013c0 <MX_SPI3_Init+0x74>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001364:	4b16      	ldr	r3, [pc, #88]	; (80013c0 <MX_SPI3_Init+0x74>)
 8001366:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800136a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800136c:	4b14      	ldr	r3, [pc, #80]	; (80013c0 <MX_SPI3_Init+0x74>)
 800136e:	2200      	movs	r2, #0
 8001370:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001372:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <MX_SPI3_Init+0x74>)
 8001374:	2200      	movs	r2, #0
 8001376:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <MX_SPI3_Init+0x74>)
 800137a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800137e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001380:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <MX_SPI3_Init+0x74>)
 8001382:	2200      	movs	r2, #0
 8001384:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001386:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <MX_SPI3_Init+0x74>)
 8001388:	2200      	movs	r2, #0
 800138a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <MX_SPI3_Init+0x74>)
 800138e:	2200      	movs	r2, #0
 8001390:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001392:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <MX_SPI3_Init+0x74>)
 8001394:	2200      	movs	r2, #0
 8001396:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001398:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <MX_SPI3_Init+0x74>)
 800139a:	2207      	movs	r2, #7
 800139c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800139e:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <MX_SPI3_Init+0x74>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <MX_SPI3_Init+0x74>)
 80013a6:	2208      	movs	r2, #8
 80013a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80013aa:	4805      	ldr	r0, [pc, #20]	; (80013c0 <MX_SPI3_Init+0x74>)
 80013ac:	f004 fa02 	bl	80057b4 <HAL_SPI_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80013b6:	f7ff ff8c 	bl	80012d2 <Error_Handler>
  }

}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	200021d0 	.word	0x200021d0
 80013c4:	40003c00 	.word	0x40003c00

080013c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08a      	sub	sp, #40	; 0x28
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a2c      	ldr	r2, [pc, #176]	; (8001498 <HAL_SPI_MspInit+0xd0>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d151      	bne.n	800148e <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80013ea:	4b2c      	ldr	r3, [pc, #176]	; (800149c <HAL_SPI_MspInit+0xd4>)
 80013ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ee:	4a2b      	ldr	r2, [pc, #172]	; (800149c <HAL_SPI_MspInit+0xd4>)
 80013f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013f4:	6593      	str	r3, [r2, #88]	; 0x58
 80013f6:	4b29      	ldr	r3, [pc, #164]	; (800149c <HAL_SPI_MspInit+0xd4>)
 80013f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013fe:	613b      	str	r3, [r7, #16]
 8001400:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001402:	4b26      	ldr	r3, [pc, #152]	; (800149c <HAL_SPI_MspInit+0xd4>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001406:	4a25      	ldr	r2, [pc, #148]	; (800149c <HAL_SPI_MspInit+0xd4>)
 8001408:	f043 0304 	orr.w	r3, r3, #4
 800140c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800140e:	4b23      	ldr	r3, [pc, #140]	; (800149c <HAL_SPI_MspInit+0xd4>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001412:	f003 0304 	and.w	r3, r3, #4
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800141a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800141e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001420:	2302      	movs	r3, #2
 8001422:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001428:	2300      	movs	r3, #0
 800142a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800142c:	2306      	movs	r3, #6
 800142e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	4619      	mov	r1, r3
 8001436:	481a      	ldr	r0, [pc, #104]	; (80014a0 <HAL_SPI_MspInit+0xd8>)
 8001438:	f003 f812 	bl	8004460 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Channel4;
 800143c:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <HAL_SPI_MspInit+0xdc>)
 800143e:	4a1a      	ldr	r2, [pc, #104]	; (80014a8 <HAL_SPI_MspInit+0xe0>)
 8001440:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8001442:	4b18      	ldr	r3, [pc, #96]	; (80014a4 <HAL_SPI_MspInit+0xdc>)
 8001444:	220f      	movs	r2, #15
 8001446:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001448:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <HAL_SPI_MspInit+0xdc>)
 800144a:	2210      	movs	r2, #16
 800144c:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800144e:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <HAL_SPI_MspInit+0xdc>)
 8001450:	2200      	movs	r2, #0
 8001452:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001454:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <HAL_SPI_MspInit+0xdc>)
 8001456:	2280      	movs	r2, #128	; 0x80
 8001458:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800145a:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <HAL_SPI_MspInit+0xdc>)
 800145c:	2200      	movs	r2, #0
 800145e:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001460:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <HAL_SPI_MspInit+0xdc>)
 8001462:	2200      	movs	r2, #0
 8001464:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8001466:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <HAL_SPI_MspInit+0xdc>)
 8001468:	2200      	movs	r2, #0
 800146a:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800146c:	4b0d      	ldr	r3, [pc, #52]	; (80014a4 <HAL_SPI_MspInit+0xdc>)
 800146e:	2200      	movs	r2, #0
 8001470:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001472:	480c      	ldr	r0, [pc, #48]	; (80014a4 <HAL_SPI_MspInit+0xdc>)
 8001474:	f002 fd82 	bl	8003f7c <HAL_DMA_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 800147e:	f7ff ff28 	bl	80012d2 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a07      	ldr	r2, [pc, #28]	; (80014a4 <HAL_SPI_MspInit+0xdc>)
 8001486:	655a      	str	r2, [r3, #84]	; 0x54
 8001488:	4a06      	ldr	r2, [pc, #24]	; (80014a4 <HAL_SPI_MspInit+0xdc>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800148e:	bf00      	nop
 8001490:	3728      	adds	r7, #40	; 0x28
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40003c00 	.word	0x40003c00
 800149c:	40021000 	.word	0x40021000
 80014a0:	48000800 	.word	0x48000800
 80014a4:	20002234 	.word	0x20002234
 80014a8:	40020044 	.word	0x40020044

080014ac <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80014b0:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	4a04      	ldr	r2, [pc, #16]	; (80014c8 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80014b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ba:	6093      	str	r3, [r2, #8]
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	40007000 	.word	0x40007000

080014cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d2:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <HAL_MspInit+0x44>)
 80014d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014d6:	4a0e      	ldr	r2, [pc, #56]	; (8001510 <HAL_MspInit+0x44>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6613      	str	r3, [r2, #96]	; 0x60
 80014de:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <HAL_MspInit+0x44>)
 80014e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ea:	4b09      	ldr	r3, [pc, #36]	; (8001510 <HAL_MspInit+0x44>)
 80014ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ee:	4a08      	ldr	r2, [pc, #32]	; (8001510 <HAL_MspInit+0x44>)
 80014f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f4:	6593      	str	r3, [r2, #88]	; 0x58
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <HAL_MspInit+0x44>)
 80014f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fe:	603b      	str	r3, [r7, #0]
 8001500:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8001502:	f7ff ffd3 	bl	80014ac <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40021000 	.word	0x40021000

08001514 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800151c:	4b07      	ldr	r3, [pc, #28]	; (800153c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800151e:	695a      	ldr	r2, [r3, #20]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4013      	ands	r3, r2
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	429a      	cmp	r2, r3
 8001528:	d101      	bne.n	800152e <LL_EXTI_IsActiveFlag_0_31+0x1a>
 800152a:	2301      	movs	r3, #1
 800152c:	e000      	b.n	8001530 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	40010400 	.word	0x40010400

08001540 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8001548:	4a04      	ldr	r2, [pc, #16]	; (800155c <LL_EXTI_ClearFlag_0_31+0x1c>)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6153      	str	r3, [r2, #20]
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	40010400 	.word	0x40010400

08001560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001572:	e7fe      	b.n	8001572 <HardFault_Handler+0x4>

08001574 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001578:	e7fe      	b.n	8001578 <MemManage_Handler+0x4>

0800157a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800157e:	e7fe      	b.n	800157e <BusFault_Handler+0x4>

08001580 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001584:	e7fe      	b.n	8001584 <UsageFault_Handler+0x4>

08001586 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015b4:	f000 fca0 	bl	8001ef8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}

080015bc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

//	if(HAL_GPIO_ReadPin(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin))
//	{
		snprintf(control_pressed, sizeof(control_pressed), "BTN3");
 80015c0:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <EXTI0_IRQHandler+0x2c>)
 80015c2:	4a0a      	ldr	r2, [pc, #40]	; (80015ec <EXTI0_IRQHandler+0x30>)
 80015c4:	6810      	ldr	r0, [r2, #0]
 80015c6:	6018      	str	r0, [r3, #0]
 80015c8:	7912      	ldrb	r2, [r2, #4]
 80015ca:	711a      	strb	r2, [r3, #4]
 		printf("BTN3_EXTI0_Pin\n");
 80015cc:	4808      	ldr	r0, [pc, #32]	; (80015f0 <EXTI0_IRQHandler+0x34>)
 80015ce:	f006 ff23 	bl	8008418 <puts>
//	}

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 80015d2:	2001      	movs	r0, #1
 80015d4:	f7ff ff9e 	bl	8001514 <LL_EXTI_IsActiveFlag_0_31>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d002      	beq.n	80015e4 <EXTI0_IRQHandler+0x28>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 80015de:	2001      	movs	r0, #1
 80015e0:	f7ff ffae 	bl	8001540 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20001fec 	.word	0x20001fec
 80015ec:	080095b8 	.word	0x080095b8
 80015f0:	080095c0 	.word	0x080095c0

080015f4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

//	if(HAL_GPIO_ReadPin(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin))
//	{
		snprintf(control_pressed, sizeof(control_pressed), "BTN4");
 80015f8:	4b09      	ldr	r3, [pc, #36]	; (8001620 <EXTI1_IRQHandler+0x2c>)
 80015fa:	4a0a      	ldr	r2, [pc, #40]	; (8001624 <EXTI1_IRQHandler+0x30>)
 80015fc:	6810      	ldr	r0, [r2, #0]
 80015fe:	6018      	str	r0, [r3, #0]
 8001600:	7912      	ldrb	r2, [r2, #4]
 8001602:	711a      	strb	r2, [r3, #4]
		printf("BTN4_EXTI1_Pin\n");
 8001604:	4808      	ldr	r0, [pc, #32]	; (8001628 <EXTI1_IRQHandler+0x34>)
 8001606:	f006 ff07 	bl	8008418 <puts>
//	}

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 800160a:	2002      	movs	r0, #2
 800160c:	f7ff ff82 	bl	8001514 <LL_EXTI_IsActiveFlag_0_31>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d002      	beq.n	800161c <EXTI1_IRQHandler+0x28>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 8001616:	2002      	movs	r0, #2
 8001618:	f7ff ff92 	bl	8001540 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800161c:	bf00      	nop
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20001fec 	.word	0x20001fec
 8001624:	080095d0 	.word	0x080095d0
 8001628:	080095d8 	.word	0x080095d8

0800162c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */


		snprintf(control_pressed, sizeof(control_pressed), "ENC_BTN");
 8001630:	4a09      	ldr	r2, [pc, #36]	; (8001658 <EXTI2_IRQHandler+0x2c>)
 8001632:	4b0a      	ldr	r3, [pc, #40]	; (800165c <EXTI2_IRQHandler+0x30>)
 8001634:	cb03      	ldmia	r3!, {r0, r1}
 8001636:	6010      	str	r0, [r2, #0]
 8001638:	6051      	str	r1, [r2, #4]
		printf("ENC_EXTI2_Pin\n");
 800163a:	4809      	ldr	r0, [pc, #36]	; (8001660 <EXTI2_IRQHandler+0x34>)
 800163c:	f006 feec 	bl	8008418 <puts>


  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8001640:	2004      	movs	r0, #4
 8001642:	f7ff ff67 	bl	8001514 <LL_EXTI_IsActiveFlag_0_31>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d002      	beq.n	8001652 <EXTI2_IRQHandler+0x26>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 800164c:	2004      	movs	r0, #4
 800164e:	f7ff ff77 	bl	8001540 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20001fec 	.word	0x20001fec
 800165c:	080095e8 	.word	0x080095e8
 8001660:	080095f0 	.word	0x080095f0

08001664 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	//printf("Test\n");
	//printf("%lu\n", trigger_input[0]);
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001668:	4802      	ldr	r0, [pc, #8]	; (8001674 <DMA1_Channel1_IRQHandler+0x10>)
 800166a:	f002 fdaa 	bl	80041c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20002064 	.word	0x20002064

08001678 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800167c:	4802      	ldr	r0, [pc, #8]	; (8001688 <DMA1_Channel2_IRQHandler+0x10>)
 800167e:	f002 fda0 	bl	80041c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20002110 	.word	0x20002110

0800168c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8001690:	4802      	ldr	r0, [pc, #8]	; (800169c <DMA1_Channel3_IRQHandler+0x10>)
 8001692:	f002 fd96 	bl	80041c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20002170 	.word	0x20002170

080016a0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80016a4:	4802      	ldr	r0, [pc, #8]	; (80016b0 <DMA1_Channel4_IRQHandler+0x10>)
 80016a6:	f002 fd8c 	bl	80041c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20002234 	.word	0x20002234

080016b4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	snprintf(control_pressed, sizeof(control_pressed), " ");
 80016b8:	4a05      	ldr	r2, [pc, #20]	; (80016d0 <TIM1_UP_TIM16_IRQHandler+0x1c>)
 80016ba:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <TIM1_UP_TIM16_IRQHandler+0x20>)
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	8013      	strh	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016c0:	4805      	ldr	r0, [pc, #20]	; (80016d8 <TIM1_UP_TIM16_IRQHandler+0x24>)
 80016c2:	f004 fe79 	bl	80063b8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80016c6:	4805      	ldr	r0, [pc, #20]	; (80016dc <TIM1_UP_TIM16_IRQHandler+0x28>)
 80016c8:	f004 fe76 	bl	80063b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20001fec 	.word	0x20001fec
 80016d4:	08009600 	.word	0x08009600
 80016d8:	2000232c 	.word	0x2000232c
 80016dc:	200023c4 	.word	0x200023c4

080016e0 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	update_dc_bias_sweep();
 80016e4:	f7ff f8b8 	bl	8000858 <update_dc_bias_sweep>
	if((TIM1->CNT < last_enc_value) || (TIM1->CNT > last_enc_value))
 80016e8:	4b11      	ldr	r3, [pc, #68]	; (8001730 <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 80016ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ec:	4a11      	ldr	r2, [pc, #68]	; (8001734 <TIM1_TRG_COM_TIM17_IRQHandler+0x54>)
 80016ee:	8812      	ldrh	r2, [r2, #0]
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d305      	bcc.n	8001700 <TIM1_TRG_COM_TIM17_IRQHandler+0x20>
 80016f4:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 80016f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f8:	4a0e      	ldr	r2, [pc, #56]	; (8001734 <TIM1_TRG_COM_TIM17_IRQHandler+0x54>)
 80016fa:	8812      	ldrh	r2, [r2, #0]
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d90a      	bls.n	8001716 <TIM1_TRG_COM_TIM17_IRQHandler+0x36>
	{
		printf("%lu\n",TIM1->CNT);
 8001700:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 8001702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001704:	4619      	mov	r1, r3
 8001706:	480c      	ldr	r0, [pc, #48]	; (8001738 <TIM1_TRG_COM_TIM17_IRQHandler+0x58>)
 8001708:	f006 fe12 	bl	8008330 <iprintf>
		new_enc_value = TIM1->CNT;
 800170c:	4b08      	ldr	r3, [pc, #32]	; (8001730 <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 800170e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001710:	b29a      	uxth	r2, r3
 8001712:	4b0a      	ldr	r3, [pc, #40]	; (800173c <TIM1_TRG_COM_TIM17_IRQHandler+0x5c>)
 8001714:	801a      	strh	r2, [r3, #0]
	}


	last_enc_value = TIM1->CNT;
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 8001718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171a:	b29a      	uxth	r2, r3
 800171c:	4b05      	ldr	r3, [pc, #20]	; (8001734 <TIM1_TRG_COM_TIM17_IRQHandler+0x54>)
 800171e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001720:	4807      	ldr	r0, [pc, #28]	; (8001740 <TIM1_TRG_COM_TIM17_IRQHandler+0x60>)
 8001722:	f004 fe49 	bl	80063b8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8001726:	4807      	ldr	r0, [pc, #28]	; (8001744 <TIM1_TRG_COM_TIM17_IRQHandler+0x64>)
 8001728:	f004 fe46 	bl	80063b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40012c00 	.word	0x40012c00
 8001734:	20001fdc 	.word	0x20001fdc
 8001738:	08009604 	.word	0x08009604
 800173c:	20001fde 	.word	0x20001fde
 8001740:	2000232c 	.word	0x2000232c
 8001744:	200022e0 	.word	0x200022e0

08001748 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800174c:	4802      	ldr	r0, [pc, #8]	; (8001758 <TIM2_IRQHandler+0x10>)
 800174e:	f004 fe33 	bl	80063b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20002378 	.word	0x20002378

0800175c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	if(HAL_GPIO_ReadPin(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin))
 8001760:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001764:	481b      	ldr	r0, [pc, #108]	; (80017d4 <EXTI15_10_IRQHandler+0x78>)
 8001766:	f002 fffd 	bl	8004764 <HAL_GPIO_ReadPin>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d008      	beq.n	8001782 <EXTI15_10_IRQHandler+0x26>
	{
		snprintf(control_pressed, sizeof(control_pressed), "BTN1");
 8001770:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <EXTI15_10_IRQHandler+0x7c>)
 8001772:	4a1a      	ldr	r2, [pc, #104]	; (80017dc <EXTI15_10_IRQHandler+0x80>)
 8001774:	6810      	ldr	r0, [r2, #0]
 8001776:	6018      	str	r0, [r3, #0]
 8001778:	7912      	ldrb	r2, [r2, #4]
 800177a:	711a      	strb	r2, [r3, #4]
		printf("BTN1_EXTI14_Pin\n");
 800177c:	4818      	ldr	r0, [pc, #96]	; (80017e0 <EXTI15_10_IRQHandler+0x84>)
 800177e:	f006 fe4b 	bl	8008418 <puts>
	}
	if(HAL_GPIO_ReadPin(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin))
 8001782:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001786:	4813      	ldr	r0, [pc, #76]	; (80017d4 <EXTI15_10_IRQHandler+0x78>)
 8001788:	f002 ffec 	bl	8004764 <HAL_GPIO_ReadPin>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d008      	beq.n	80017a4 <EXTI15_10_IRQHandler+0x48>
	{
		snprintf(control_pressed, sizeof(control_pressed), "BTN2");
 8001792:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <EXTI15_10_IRQHandler+0x7c>)
 8001794:	4a13      	ldr	r2, [pc, #76]	; (80017e4 <EXTI15_10_IRQHandler+0x88>)
 8001796:	6810      	ldr	r0, [r2, #0]
 8001798:	6018      	str	r0, [r3, #0]
 800179a:	7912      	ldrb	r2, [r2, #4]
 800179c:	711a      	strb	r2, [r3, #4]
		printf("BTN2_EXTI15_Pin\n");
 800179e:	4812      	ldr	r0, [pc, #72]	; (80017e8 <EXTI15_10_IRQHandler+0x8c>)
 80017a0:	f006 fe3a 	bl	8008418 <puts>
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 80017a4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80017a8:	f7ff feb4 	bl	8001514 <LL_EXTI_IsActiveFlag_0_31>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <EXTI15_10_IRQHandler+0x5e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 80017b2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80017b6:	f7ff fec3 	bl	8001540 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 80017ba:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80017be:	f7ff fea9 	bl	8001514 <LL_EXTI_IsActiveFlag_0_31>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d003      	beq.n	80017d0 <EXTI15_10_IRQHandler+0x74>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 80017c8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80017cc:	f7ff feb8 	bl	8001540 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	48000800 	.word	0x48000800
 80017d8:	20001fec 	.word	0x20001fec
 80017dc:	0800960c 	.word	0x0800960c
 80017e0:	08009614 	.word	0x08009614
 80017e4:	08009624 	.word	0x08009624
 80017e8:	0800962c 	.word	0x0800962c

080017ec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	e00a      	b.n	8001814 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017fe:	f3af 8000 	nop.w
 8001802:	4601      	mov	r1, r0
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	1c5a      	adds	r2, r3, #1
 8001808:	60ba      	str	r2, [r7, #8]
 800180a:	b2ca      	uxtb	r2, r1
 800180c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	3301      	adds	r3, #1
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	429a      	cmp	r2, r3
 800181a:	dbf0      	blt.n	80017fe <_read+0x12>
	}

return len;
 800181c:	687b      	ldr	r3, [r7, #4]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001826:	b480      	push	{r7}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
	return -1;
 800182e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001832:	4618      	mov	r0, r3
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800183e:	b480      	push	{r7}
 8001840:	b083      	sub	sp, #12
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
 8001846:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800184e:	605a      	str	r2, [r3, #4]
	return 0;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <_isatty>:

int _isatty(int file)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
	return 1;
 8001866:	2301      	movs	r3, #1
}
 8001868:	4618      	mov	r0, r3
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
	return 0;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3714      	adds	r7, #20
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
	...

08001890 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001898:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <_sbrk+0x50>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d102      	bne.n	80018a6 <_sbrk+0x16>
		heap_end = &end;
 80018a0:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <_sbrk+0x50>)
 80018a2:	4a10      	ldr	r2, [pc, #64]	; (80018e4 <_sbrk+0x54>)
 80018a4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80018a6:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <_sbrk+0x50>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <_sbrk+0x50>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4413      	add	r3, r2
 80018b4:	466a      	mov	r2, sp
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d907      	bls.n	80018ca <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80018ba:	f006 fd07 	bl	80082cc <__errno>
 80018be:	4602      	mov	r2, r0
 80018c0:	230c      	movs	r3, #12
 80018c2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80018c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018c8:	e006      	b.n	80018d8 <_sbrk+0x48>
	}

	heap_end += incr;
 80018ca:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <_sbrk+0x50>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4413      	add	r3, r2
 80018d2:	4a03      	ldr	r2, [pc, #12]	; (80018e0 <_sbrk+0x50>)
 80018d4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80018d6:	68fb      	ldr	r3, [r7, #12]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20001fe0 	.word	0x20001fe0
 80018e4:	20002418 	.word	0x20002418

080018e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018ec:	4b08      	ldr	r3, [pc, #32]	; (8001910 <SystemInit+0x28>)
 80018ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018f2:	4a07      	ldr	r2, [pc, #28]	; (8001910 <SystemInit+0x28>)
 80018f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018fc:	4b04      	ldr	r3, [pc, #16]	; (8001910 <SystemInit+0x28>)
 80018fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001902:	609a      	str	r2, [r3, #8]
#endif
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b09a      	sub	sp, #104	; 0x68
 8001918:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800191a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800191e:	2224      	movs	r2, #36	; 0x24
 8001920:	2100      	movs	r1, #0
 8001922:	4618      	mov	r0, r3
 8001924:	f006 fcfc 	bl	8008320 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001928:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001934:	1d3b      	adds	r3, r7, #4
 8001936:	2234      	movs	r2, #52	; 0x34
 8001938:	2100      	movs	r1, #0
 800193a:	4618      	mov	r0, r3
 800193c:	f006 fcf0 	bl	8008320 <memset>

  htim1.Instance = TIM1;
 8001940:	4b2a      	ldr	r3, [pc, #168]	; (80019ec <MX_TIM1_Init+0xd8>)
 8001942:	4a2b      	ldr	r2, [pc, #172]	; (80019f0 <MX_TIM1_Init+0xdc>)
 8001944:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001946:	4b29      	ldr	r3, [pc, #164]	; (80019ec <MX_TIM1_Init+0xd8>)
 8001948:	2200      	movs	r2, #0
 800194a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 800194c:	4b27      	ldr	r3, [pc, #156]	; (80019ec <MX_TIM1_Init+0xd8>)
 800194e:	2240      	movs	r2, #64	; 0x40
 8001950:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 8001952:	4b26      	ldr	r3, [pc, #152]	; (80019ec <MX_TIM1_Init+0xd8>)
 8001954:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001958:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800195a:	4b24      	ldr	r3, [pc, #144]	; (80019ec <MX_TIM1_Init+0xd8>)
 800195c:	2200      	movs	r2, #0
 800195e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001960:	4b22      	ldr	r3, [pc, #136]	; (80019ec <MX_TIM1_Init+0xd8>)
 8001962:	2200      	movs	r2, #0
 8001964:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001966:	4b21      	ldr	r3, [pc, #132]	; (80019ec <MX_TIM1_Init+0xd8>)
 8001968:	2200      	movs	r2, #0
 800196a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800196c:	2303      	movs	r3, #3
 800196e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001970:	2300      	movs	r3, #0
 8001972:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001974:	2301      	movs	r3, #1
 8001976:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001978:	2300      	movs	r3, #0
 800197a:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 800197c:	2300      	movs	r3, #0
 800197e:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001980:	2300      	movs	r3, #0
 8001982:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001984:	2301      	movs	r3, #1
 8001986:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001988:	2300      	movs	r3, #0
 800198a:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 800198c:	2300      	movs	r3, #0
 800198e:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001990:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001994:	4619      	mov	r1, r3
 8001996:	4815      	ldr	r0, [pc, #84]	; (80019ec <MX_TIM1_Init+0xd8>)
 8001998:	f004 fc68 	bl	800626c <HAL_TIM_Encoder_Init>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80019a2:	f7ff fc96 	bl	80012d2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019a6:	2300      	movs	r3, #0
 80019a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019aa:	2300      	movs	r3, #0
 80019ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ae:	2300      	movs	r3, #0
 80019b0:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019b6:	4619      	mov	r1, r3
 80019b8:	480c      	ldr	r0, [pc, #48]	; (80019ec <MX_TIM1_Init+0xd8>)
 80019ba:	f005 f9e1 	bl	8006d80 <HAL_TIMEx_MasterConfigSynchronization>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80019c4:	f7ff fc85 	bl	80012d2 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80019c8:	2300      	movs	r3, #0
 80019ca:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80019cc:	2300      	movs	r3, #0
 80019ce:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	4619      	mov	r1, r3
 80019d4:	4805      	ldr	r0, [pc, #20]	; (80019ec <MX_TIM1_Init+0xd8>)
 80019d6:	f005 fa69 	bl	8006eac <HAL_TIMEx_ConfigBreakDeadTime>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 80019e0:	f7ff fc77 	bl	80012d2 <Error_Handler>
  }

}
 80019e4:	bf00      	nop
 80019e6:	3768      	adds	r7, #104	; 0x68
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	2000232c 	.word	0x2000232c
 80019f0:	40012c00 	.word	0x40012c00

080019f4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08c      	sub	sp, #48	; 0x30
 80019f8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019fa:	f107 0320 	add.w	r3, r7, #32
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	605a      	str	r2, [r3, #4]
 8001a04:	609a      	str	r2, [r3, #8]
 8001a06:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001a08:	f107 030c 	add.w	r3, r7, #12
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a18:	463b      	mov	r3, r7
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	605a      	str	r2, [r3, #4]
 8001a20:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8001a22:	4b28      	ldr	r3, [pc, #160]	; (8001ac4 <MX_TIM2_Init+0xd0>)
 8001a24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a28:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2047;
 8001a2a:	4b26      	ldr	r3, [pc, #152]	; (8001ac4 <MX_TIM2_Init+0xd0>)
 8001a2c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001a30:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a32:	4b24      	ldr	r3, [pc, #144]	; (8001ac4 <MX_TIM2_Init+0xd0>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024;
 8001a38:	4b22      	ldr	r3, [pc, #136]	; (8001ac4 <MX_TIM2_Init+0xd0>)
 8001a3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a3e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a40:	4b20      	ldr	r3, [pc, #128]	; (8001ac4 <MX_TIM2_Init+0xd0>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a46:	4b1f      	ldr	r3, [pc, #124]	; (8001ac4 <MX_TIM2_Init+0xd0>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a4c:	481d      	ldr	r0, [pc, #116]	; (8001ac4 <MX_TIM2_Init+0xd0>)
 8001a4e:	f004 fb51 	bl	80060f4 <HAL_TIM_Base_Init>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001a58:	f7ff fc3b 	bl	80012d2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a60:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a62:	f107 0320 	add.w	r3, r7, #32
 8001a66:	4619      	mov	r1, r3
 8001a68:	4816      	ldr	r0, [pc, #88]	; (8001ac4 <MX_TIM2_Init+0xd0>)
 8001a6a:	f004 fe25 	bl	80066b8 <HAL_TIM_ConfigClockSource>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001a74:	f7ff fc2d 	bl	80012d2 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8001a78:	2305      	movs	r3, #5
 8001a7a:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001a7c:	2350      	movs	r3, #80	; 0x50
 8001a7e:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001a88:	f107 030c 	add.w	r3, r7, #12
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	480d      	ldr	r0, [pc, #52]	; (8001ac4 <MX_TIM2_Init+0xd0>)
 8001a90:	f004 ff02 	bl	8006898 <HAL_TIM_SlaveConfigSynchro>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8001a9a:	f7ff fc1a 	bl	80012d2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001aa6:	463b      	mov	r3, r7
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4806      	ldr	r0, [pc, #24]	; (8001ac4 <MX_TIM2_Init+0xd0>)
 8001aac:	f005 f968 	bl	8006d80 <HAL_TIMEx_MasterConfigSynchronization>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8001ab6:	f7ff fc0c 	bl	80012d2 <Error_Handler>
  }

}
 8001aba:	bf00      	nop
 8001abc:	3730      	adds	r7, #48	; 0x30
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20002378 	.word	0x20002378

08001ac8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b094      	sub	sp, #80	; 0x50
 8001acc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ace:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
 8001ada:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001adc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ae8:	463b      	mov	r3, r7
 8001aea:	2234      	movs	r2, #52	; 0x34
 8001aec:	2100      	movs	r1, #0
 8001aee:	4618      	mov	r0, r3
 8001af0:	f006 fc16 	bl	8008320 <memset>

  htim8.Instance = TIM8;
 8001af4:	4b26      	ldr	r3, [pc, #152]	; (8001b90 <MX_TIM8_Init+0xc8>)
 8001af6:	4a27      	ldr	r2, [pc, #156]	; (8001b94 <MX_TIM8_Init+0xcc>)
 8001af8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001afa:	4b25      	ldr	r3, [pc, #148]	; (8001b90 <MX_TIM8_Init+0xc8>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b00:	4b23      	ldr	r3, [pc, #140]	; (8001b90 <MX_TIM8_Init+0xc8>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 8001b06:	4b22      	ldr	r3, [pc, #136]	; (8001b90 <MX_TIM8_Init+0xc8>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b0c:	4b20      	ldr	r3, [pc, #128]	; (8001b90 <MX_TIM8_Init+0xc8>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001b12:	4b1f      	ldr	r3, [pc, #124]	; (8001b90 <MX_TIM8_Init+0xc8>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b18:	4b1d      	ldr	r3, [pc, #116]	; (8001b90 <MX_TIM8_Init+0xc8>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001b1e:	481c      	ldr	r0, [pc, #112]	; (8001b90 <MX_TIM8_Init+0xc8>)
 8001b20:	f004 fae8 	bl	80060f4 <HAL_TIM_Base_Init>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8001b2a:	f7ff fbd2 	bl	80012d2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b32:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001b34:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4815      	ldr	r0, [pc, #84]	; (8001b90 <MX_TIM8_Init+0xc8>)
 8001b3c:	f004 fdbc 	bl	80066b8 <HAL_TIM_ConfigClockSource>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001b46:	f7ff fbc4 	bl	80012d2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b4a:	2320      	movs	r3, #32
 8001b4c:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b52:	2300      	movs	r3, #0
 8001b54:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001b56:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	480c      	ldr	r0, [pc, #48]	; (8001b90 <MX_TIM8_Init+0xc8>)
 8001b5e:	f005 f90f 	bl	8006d80 <HAL_TIMEx_MasterConfigSynchronization>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001b68:	f7ff fbb3 	bl	80012d2 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001b70:	2300      	movs	r3, #0
 8001b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001b74:	463b      	mov	r3, r7
 8001b76:	4619      	mov	r1, r3
 8001b78:	4805      	ldr	r0, [pc, #20]	; (8001b90 <MX_TIM8_Init+0xc8>)
 8001b7a:	f005 f997 	bl	8006eac <HAL_TIMEx_ConfigBreakDeadTime>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8001b84:	f7ff fba5 	bl	80012d2 <Error_Handler>
  }

}
 8001b88:	bf00      	nop
 8001b8a:	3750      	adds	r7, #80	; 0x50
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20002294 	.word	0x20002294
 8001b94:	40013400 	.word	0x40013400

08001b98 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <MX_TIM16_Init+0x44>)
 8001b9e:	4a10      	ldr	r2, [pc, #64]	; (8001be0 <MX_TIM16_Init+0x48>)
 8001ba0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001ba2:	4b0e      	ldr	r3, [pc, #56]	; (8001bdc <MX_TIM16_Init+0x44>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <MX_TIM16_Init+0x44>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 8191;
 8001bae:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <MX_TIM16_Init+0x44>)
 8001bb0:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8001bb4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb6:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <MX_TIM16_Init+0x44>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001bbc:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <MX_TIM16_Init+0x44>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc2:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <MX_TIM16_Init+0x44>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001bc8:	4804      	ldr	r0, [pc, #16]	; (8001bdc <MX_TIM16_Init+0x44>)
 8001bca:	f004 fa93 	bl	80060f4 <HAL_TIM_Base_Init>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001bd4:	f7ff fb7d 	bl	80012d2 <Error_Handler>
  }

}
 8001bd8:	bf00      	nop
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	200023c4 	.word	0x200023c4
 8001be0:	40014400 	.word	0x40014400

08001be4 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8001be8:	4b0f      	ldr	r3, [pc, #60]	; (8001c28 <MX_TIM17_Init+0x44>)
 8001bea:	4a10      	ldr	r2, [pc, #64]	; (8001c2c <MX_TIM17_Init+0x48>)
 8001bec:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 2047;
 8001bee:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <MX_TIM17_Init+0x44>)
 8001bf0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001bf4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf6:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <MX_TIM17_Init+0x44>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 64;
 8001bfc:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <MX_TIM17_Init+0x44>)
 8001bfe:	2240      	movs	r2, #64	; 0x40
 8001c00:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c02:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <MX_TIM17_Init+0x44>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001c08:	4b07      	ldr	r3, [pc, #28]	; (8001c28 <MX_TIM17_Init+0x44>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c0e:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <MX_TIM17_Init+0x44>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001c14:	4804      	ldr	r0, [pc, #16]	; (8001c28 <MX_TIM17_Init+0x44>)
 8001c16:	f004 fa6d 	bl	80060f4 <HAL_TIM_Base_Init>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8001c20:	f7ff fb57 	bl	80012d2 <Error_Handler>
  }

}
 8001c24:	bf00      	nop
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	200022e0 	.word	0x200022e0
 8001c2c:	40014800 	.word	0x40014800

08001c30 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08a      	sub	sp, #40	; 0x28
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c38:	f107 0314 	add.w	r3, r7, #20
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a1f      	ldr	r2, [pc, #124]	; (8001ccc <HAL_TIM_Encoder_MspInit+0x9c>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d137      	bne.n	8001cc2 <HAL_TIM_Encoder_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c52:	4b1f      	ldr	r3, [pc, #124]	; (8001cd0 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c56:	4a1e      	ldr	r2, [pc, #120]	; (8001cd0 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001c58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c5c:	6613      	str	r3, [r2, #96]	; 0x60
 8001c5e:	4b1c      	ldr	r3, [pc, #112]	; (8001cd0 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c66:	613b      	str	r3, [r7, #16]
 8001c68:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c6a:	4b19      	ldr	r3, [pc, #100]	; (8001cd0 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6e:	4a18      	ldr	r2, [pc, #96]	; (8001cd0 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001c70:	f043 0304 	orr.w	r3, r3, #4
 8001c74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c76:	4b16      	ldr	r3, [pc, #88]	; (8001cd0 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7a:	f003 0304 	and.w	r3, r3, #4
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c82:	2303      	movs	r3, #3
 8001c84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c86:	2302      	movs	r3, #2
 8001c88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001c92:	2302      	movs	r3, #2
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c96:	f107 0314 	add.w	r3, r7, #20
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	480d      	ldr	r0, [pc, #52]	; (8001cd4 <HAL_TIM_Encoder_MspInit+0xa4>)
 8001c9e:	f002 fbdf 	bl	8004460 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	2019      	movs	r0, #25
 8001ca8:	f001 fd81 	bl	80037ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001cac:	2019      	movs	r0, #25
 8001cae:	f001 fd98 	bl	80037e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	201a      	movs	r0, #26
 8001cb8:	f001 fd79 	bl	80037ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001cbc:	201a      	movs	r0, #26
 8001cbe:	f001 fd90 	bl	80037e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001cc2:	bf00      	nop
 8001cc4:	3728      	adds	r7, #40	; 0x28
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40012c00 	.word	0x40012c00
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	48000800 	.word	0x48000800

08001cd8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08c      	sub	sp, #48	; 0x30
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce0:	f107 031c 	add.w	r3, r7, #28
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	60da      	str	r2, [r3, #12]
 8001cee:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cf8:	d131      	bne.n	8001d5e <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cfa:	4b3d      	ldr	r3, [pc, #244]	; (8001df0 <HAL_TIM_Base_MspInit+0x118>)
 8001cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfe:	4a3c      	ldr	r2, [pc, #240]	; (8001df0 <HAL_TIM_Base_MspInit+0x118>)
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	6593      	str	r3, [r2, #88]	; 0x58
 8001d06:	4b3a      	ldr	r3, [pc, #232]	; (8001df0 <HAL_TIM_Base_MspInit+0x118>)
 8001d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	61bb      	str	r3, [r7, #24]
 8001d10:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d12:	4b37      	ldr	r3, [pc, #220]	; (8001df0 <HAL_TIM_Base_MspInit+0x118>)
 8001d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d16:	4a36      	ldr	r2, [pc, #216]	; (8001df0 <HAL_TIM_Base_MspInit+0x118>)
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d1e:	4b34      	ldr	r3, [pc, #208]	; (8001df0 <HAL_TIM_Base_MspInit+0x118>)
 8001d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	617b      	str	r3, [r7, #20]
 8001d28:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d36:	2300      	movs	r3, #0
 8001d38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3e:	f107 031c 	add.w	r3, r7, #28
 8001d42:	4619      	mov	r1, r3
 8001d44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d48:	f002 fb8a 	bl	8004460 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	2101      	movs	r1, #1
 8001d50:	201c      	movs	r0, #28
 8001d52:	f001 fd2c 	bl	80037ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d56:	201c      	movs	r0, #28
 8001d58:	f001 fd43 	bl	80037e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001d5c:	e044      	b.n	8001de8 <HAL_TIM_Base_MspInit+0x110>
  else if(tim_baseHandle->Instance==TIM8)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a24      	ldr	r2, [pc, #144]	; (8001df4 <HAL_TIM_Base_MspInit+0x11c>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d10c      	bne.n	8001d82 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001d68:	4b21      	ldr	r3, [pc, #132]	; (8001df0 <HAL_TIM_Base_MspInit+0x118>)
 8001d6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d6c:	4a20      	ldr	r2, [pc, #128]	; (8001df0 <HAL_TIM_Base_MspInit+0x118>)
 8001d6e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d72:	6613      	str	r3, [r2, #96]	; 0x60
 8001d74:	4b1e      	ldr	r3, [pc, #120]	; (8001df0 <HAL_TIM_Base_MspInit+0x118>)
 8001d76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d7c:	613b      	str	r3, [r7, #16]
 8001d7e:	693b      	ldr	r3, [r7, #16]
}
 8001d80:	e032      	b.n	8001de8 <HAL_TIM_Base_MspInit+0x110>
  else if(tim_baseHandle->Instance==TIM16)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a1c      	ldr	r2, [pc, #112]	; (8001df8 <HAL_TIM_Base_MspInit+0x120>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d114      	bne.n	8001db6 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001d8c:	4b18      	ldr	r3, [pc, #96]	; (8001df0 <HAL_TIM_Base_MspInit+0x118>)
 8001d8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d90:	4a17      	ldr	r2, [pc, #92]	; (8001df0 <HAL_TIM_Base_MspInit+0x118>)
 8001d92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d96:	6613      	str	r3, [r2, #96]	; 0x60
 8001d98:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <HAL_TIM_Base_MspInit+0x118>)
 8001d9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8001da4:	2200      	movs	r2, #0
 8001da6:	2101      	movs	r1, #1
 8001da8:	2019      	movs	r0, #25
 8001daa:	f001 fd00 	bl	80037ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001dae:	2019      	movs	r0, #25
 8001db0:	f001 fd17 	bl	80037e2 <HAL_NVIC_EnableIRQ>
}
 8001db4:	e018      	b.n	8001de8 <HAL_TIM_Base_MspInit+0x110>
  else if(tim_baseHandle->Instance==TIM17)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a10      	ldr	r2, [pc, #64]	; (8001dfc <HAL_TIM_Base_MspInit+0x124>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d113      	bne.n	8001de8 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001dc0:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <HAL_TIM_Base_MspInit+0x118>)
 8001dc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dc4:	4a0a      	ldr	r2, [pc, #40]	; (8001df0 <HAL_TIM_Base_MspInit+0x118>)
 8001dc6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dca:	6613      	str	r3, [r2, #96]	; 0x60
 8001dcc:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <HAL_TIM_Base_MspInit+0x118>)
 8001dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dd4:	60bb      	str	r3, [r7, #8]
 8001dd6:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	2101      	movs	r1, #1
 8001ddc:	201a      	movs	r0, #26
 8001dde:	f001 fce6 	bl	80037ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001de2:	201a      	movs	r0, #26
 8001de4:	f001 fcfd 	bl	80037e2 <HAL_NVIC_EnableIRQ>
}
 8001de8:	bf00      	nop
 8001dea:	3730      	adds	r7, #48	; 0x30
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40021000 	.word	0x40021000
 8001df4:	40013400 	.word	0x40013400
 8001df8:	40014400 	.word	0x40014400
 8001dfc:	40014800 	.word	0x40014800

08001e00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e00:	480d      	ldr	r0, [pc, #52]	; (8001e38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e02:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e04:	480d      	ldr	r0, [pc, #52]	; (8001e3c <LoopForever+0x6>)
  ldr r1, =_edata
 8001e06:	490e      	ldr	r1, [pc, #56]	; (8001e40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e08:	4a0e      	ldr	r2, [pc, #56]	; (8001e44 <LoopForever+0xe>)
  movs r3, #0
 8001e0a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001e0c:	e002      	b.n	8001e14 <LoopCopyDataInit>

08001e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e12:	3304      	adds	r3, #4

08001e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e18:	d3f9      	bcc.n	8001e0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e1a:	4a0b      	ldr	r2, [pc, #44]	; (8001e48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e1c:	4c0b      	ldr	r4, [pc, #44]	; (8001e4c <LoopForever+0x16>)
  movs r3, #0
 8001e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e20:	e001      	b.n	8001e26 <LoopFillZerobss>

08001e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e24:	3204      	adds	r2, #4

08001e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e28:	d3fb      	bcc.n	8001e22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e2a:	f7ff fd5d 	bl	80018e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e2e:	f006 fa53 	bl	80082d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e32:	f7ff f923 	bl	800107c <main>

08001e36 <LoopForever>:

LoopForever:
    b LoopForever
 8001e36:	e7fe      	b.n	8001e36 <LoopForever>
  ldr   r0, =_estack
 8001e38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e40:	20001fb8 	.word	0x20001fb8
  ldr r2, =_sidata
 8001e44:	0800992c 	.word	0x0800992c
  ldr r2, =_sbss
 8001e48:	20001fb8 	.word	0x20001fb8
  ldr r4, =_ebss
 8001e4c:	20002418 	.word	0x20002418

08001e50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e50:	e7fe      	b.n	8001e50 <ADC1_2_IRQHandler>

08001e52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e5c:	2003      	movs	r0, #3
 8001e5e:	f001 fc9b 	bl	8003798 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e62:	2000      	movs	r0, #0
 8001e64:	f000 f80e 	bl	8001e84 <HAL_InitTick>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d002      	beq.n	8001e74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	71fb      	strb	r3, [r7, #7]
 8001e72:	e001      	b.n	8001e78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e74:	f7ff fb2a 	bl	80014cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e78:	79fb      	ldrb	r3, [r7, #7]

}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
	...

08001e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001e90:	4b16      	ldr	r3, [pc, #88]	; (8001eec <HAL_InitTick+0x68>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d022      	beq.n	8001ede <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001e98:	4b15      	ldr	r3, [pc, #84]	; (8001ef0 <HAL_InitTick+0x6c>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	4b13      	ldr	r3, [pc, #76]	; (8001eec <HAL_InitTick+0x68>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ea4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eac:	4618      	mov	r0, r3
 8001eae:	f001 fca6 	bl	80037fe <HAL_SYSTICK_Config>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d10f      	bne.n	8001ed8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b0f      	cmp	r3, #15
 8001ebc:	d809      	bhi.n	8001ed2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ec6:	f001 fc72 	bl	80037ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001eca:	4a0a      	ldr	r2, [pc, #40]	; (8001ef4 <HAL_InitTick+0x70>)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6013      	str	r3, [r2, #0]
 8001ed0:	e007      	b.n	8001ee2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	73fb      	strb	r3, [r7, #15]
 8001ed6:	e004      	b.n	8001ee2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	73fb      	strb	r3, [r7, #15]
 8001edc:	e001      	b.n	8001ee2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	20001f4c 	.word	0x20001f4c
 8001ef0:	20001f44 	.word	0x20001f44
 8001ef4:	20001f48 	.word	0x20001f48

08001ef8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001efc:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <HAL_IncTick+0x1c>)
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <HAL_IncTick+0x20>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4413      	add	r3, r2
 8001f06:	4a03      	ldr	r2, [pc, #12]	; (8001f14 <HAL_IncTick+0x1c>)
 8001f08:	6013      	str	r3, [r2, #0]
}
 8001f0a:	bf00      	nop
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	20002410 	.word	0x20002410
 8001f18:	20001f4c 	.word	0x20001f4c

08001f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f20:	4b03      	ldr	r3, [pc, #12]	; (8001f30 <HAL_GetTick+0x14>)
 8001f22:	681b      	ldr	r3, [r3, #0]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	20002410 	.word	0x20002410

08001f34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f3c:	f7ff ffee 	bl	8001f1c <HAL_GetTick>
 8001f40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f4c:	d004      	beq.n	8001f58 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f4e:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <HAL_Delay+0x40>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	4413      	add	r3, r2
 8001f56:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f58:	bf00      	nop
 8001f5a:	f7ff ffdf 	bl	8001f1c <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d8f7      	bhi.n	8001f5a <HAL_Delay+0x26>
  {
  }
}
 8001f6a:	bf00      	nop
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20001f4c 	.word	0x20001f4c

08001f78 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	609a      	str	r2, [r3, #8]
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
 8001fa6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001fe0:	b490      	push	{r4, r7}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
 8001fec:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	3360      	adds	r3, #96	; 0x60
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001ffc:	6822      	ldr	r2, [r4, #0]
 8001ffe:	4b08      	ldr	r3, [pc, #32]	; (8002020 <LL_ADC_SetOffset+0x40>)
 8002000:	4013      	ands	r3, r2
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	430a      	orrs	r2, r1
 800200c:	4313      	orrs	r3, r2
 800200e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002012:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002014:	bf00      	nop
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bc90      	pop	{r4, r7}
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	03fff000 	.word	0x03fff000

08002024 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002024:	b490      	push	{r4, r7}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	3360      	adds	r3, #96	; 0x60
 8002032:	461a      	mov	r2, r3
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800203c:	6823      	ldr	r3, [r4, #0]
 800203e:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bc90      	pop	{r4, r7}
 800204a:	4770      	bx	lr

0800204c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800204c:	b490      	push	{r4, r7}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	3360      	adds	r3, #96	; 0x60
 800205c:	461a      	mov	r2, r3
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002066:	6823      	ldr	r3, [r4, #0]
 8002068:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4313      	orrs	r3, r2
 8002070:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002072:	bf00      	nop
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bc90      	pop	{r4, r7}
 800207a:	4770      	bx	lr

0800207c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800207c:	b490      	push	{r4, r7}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	3360      	adds	r3, #96	; 0x60
 800208c:	461a      	mov	r2, r3
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002096:	6823      	ldr	r3, [r4, #0]
 8002098:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4313      	orrs	r3, r2
 80020a0:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80020a2:	bf00      	nop
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc90      	pop	{r4, r7}
 80020aa:	4770      	bx	lr

080020ac <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80020ac:	b490      	push	{r4, r7}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	3360      	adds	r3, #96	; 0x60
 80020bc:	461a      	mov	r2, r3
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80020c6:	6823      	ldr	r3, [r4, #0]
 80020c8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80020d2:	bf00      	nop
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc90      	pop	{r4, r7}
 80020da:	4770      	bx	lr

080020dc <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	431a      	orrs	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	615a      	str	r2, [r3, #20]
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002102:	b490      	push	{r4, r7}
 8002104:	b084      	sub	sp, #16
 8002106:	af00      	add	r7, sp, #0
 8002108:	60f8      	str	r0, [r7, #12]
 800210a:	60b9      	str	r1, [r7, #8]
 800210c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	3330      	adds	r3, #48	; 0x30
 8002112:	461a      	mov	r2, r3
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	0a1b      	lsrs	r3, r3, #8
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	f003 030c 	and.w	r3, r3, #12
 800211e:	4413      	add	r3, r2
 8002120:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002122:	6822      	ldr	r2, [r4, #0]
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	f003 031f 	and.w	r3, r3, #31
 800212a:	211f      	movs	r1, #31
 800212c:	fa01 f303 	lsl.w	r3, r1, r3
 8002130:	43db      	mvns	r3, r3
 8002132:	401a      	ands	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	0e9b      	lsrs	r3, r3, #26
 8002138:	f003 011f 	and.w	r1, r3, #31
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	f003 031f 	and.w	r3, r3, #31
 8002142:	fa01 f303 	lsl.w	r3, r1, r3
 8002146:	4313      	orrs	r3, r2
 8002148:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800214a:	bf00      	nop
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bc90      	pop	{r4, r7}
 8002152:	4770      	bx	lr

08002154 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002154:	b490      	push	{r4, r7}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	3314      	adds	r3, #20
 8002164:	461a      	mov	r2, r3
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	0e5b      	lsrs	r3, r3, #25
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	4413      	add	r3, r2
 8002172:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002174:	6822      	ldr	r2, [r4, #0]
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	0d1b      	lsrs	r3, r3, #20
 800217a:	f003 031f 	and.w	r3, r3, #31
 800217e:	2107      	movs	r1, #7
 8002180:	fa01 f303 	lsl.w	r3, r1, r3
 8002184:	43db      	mvns	r3, r3
 8002186:	401a      	ands	r2, r3
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	0d1b      	lsrs	r3, r3, #20
 800218c:	f003 031f 	and.w	r3, r3, #31
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	fa01 f303 	lsl.w	r3, r1, r3
 8002196:	4313      	orrs	r3, r2
 8002198:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800219a:	bf00      	nop
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc90      	pop	{r4, r7}
 80021a2:	4770      	bx	lr

080021a4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021bc:	43db      	mvns	r3, r3
 80021be:	401a      	ands	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f003 0318 	and.w	r3, r3, #24
 80021c6:	4908      	ldr	r1, [pc, #32]	; (80021e8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80021c8:	40d9      	lsrs	r1, r3
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	400b      	ands	r3, r1
 80021ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021d2:	431a      	orrs	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80021da:	bf00      	nop
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	0007ffff 	.word	0x0007ffff

080021ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80021fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	6093      	str	r3, [r2, #8]
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002220:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002224:	d101      	bne.n	800222a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002226:	2301      	movs	r3, #1
 8002228:	e000      	b.n	800222c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002248:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800224c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002270:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002274:	d101      	bne.n	800227a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002276:	2301      	movs	r3, #1
 8002278:	e000      	b.n	800227c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	2b01      	cmp	r3, #1
 800229a:	d101      	bne.n	80022a0 <LL_ADC_IsEnabled+0x18>
 800229c:	2301      	movs	r3, #1
 800229e:	e000      	b.n	80022a2 <LL_ADC_IsEnabled+0x1a>
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 0304 	and.w	r3, r3, #4
 80022be:	2b04      	cmp	r3, #4
 80022c0:	d101      	bne.n	80022c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80022c2:	2301      	movs	r3, #1
 80022c4:	e000      	b.n	80022c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 0308 	and.w	r3, r3, #8
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d101      	bne.n	80022ec <LL_ADC_INJ_IsConversionOngoing+0x18>
 80022e8:	2301      	movs	r3, #1
 80022ea:	e000      	b.n	80022ee <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
	...

080022fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022fc:	b590      	push	{r4, r7, lr}
 80022fe:	b089      	sub	sp, #36	; 0x24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002304:	2300      	movs	r3, #0
 8002306:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002308:	2300      	movs	r3, #0
 800230a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e1ad      	b.n	8002672 <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002320:	2b00      	cmp	r3, #0
 8002322:	d109      	bne.n	8002338 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f7fe f843 	bl	80003b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff ff67 	bl	8002210 <LL_ADC_IsDeepPowerDownEnabled>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d004      	beq.n	8002352 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff ff4d 	bl	80021ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff ff82 	bl	8002260 <LL_ADC_IsInternalRegulatorEnabled>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d113      	bne.n	800238a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff ff66 	bl	8002238 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800236c:	4b9e      	ldr	r3, [pc, #632]	; (80025e8 <HAL_ADC_Init+0x2ec>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	099b      	lsrs	r3, r3, #6
 8002372:	4a9e      	ldr	r2, [pc, #632]	; (80025ec <HAL_ADC_Init+0x2f0>)
 8002374:	fba2 2303 	umull	r2, r3, r2, r3
 8002378:	099b      	lsrs	r3, r3, #6
 800237a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800237c:	e002      	b.n	8002384 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	3b01      	subs	r3, #1
 8002382:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1f9      	bne.n	800237e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff ff66 	bl	8002260 <LL_ADC_IsInternalRegulatorEnabled>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10d      	bne.n	80023b6 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800239e:	f043 0210 	orr.w	r2, r3, #16
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023aa:	f043 0201 	orr.w	r2, r3, #1
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff ff77 	bl	80022ae <LL_ADC_REG_IsConversionOngoing>
 80023c0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c6:	f003 0310 	and.w	r3, r3, #16
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f040 8148 	bne.w	8002660 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f040 8144 	bne.w	8002660 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023dc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80023e0:	f043 0202 	orr.w	r2, r3, #2
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff ff4b 	bl	8002288 <LL_ADC_IsEnabled>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d141      	bne.n	800247c <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002400:	d004      	beq.n	800240c <HAL_ADC_Init+0x110>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a7a      	ldr	r2, [pc, #488]	; (80025f0 <HAL_ADC_Init+0x2f4>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d10f      	bne.n	800242c <HAL_ADC_Init+0x130>
 800240c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002410:	f7ff ff3a 	bl	8002288 <LL_ADC_IsEnabled>
 8002414:	4604      	mov	r4, r0
 8002416:	4876      	ldr	r0, [pc, #472]	; (80025f0 <HAL_ADC_Init+0x2f4>)
 8002418:	f7ff ff36 	bl	8002288 <LL_ADC_IsEnabled>
 800241c:	4603      	mov	r3, r0
 800241e:	4323      	orrs	r3, r4
 8002420:	2b00      	cmp	r3, #0
 8002422:	bf0c      	ite	eq
 8002424:	2301      	moveq	r3, #1
 8002426:	2300      	movne	r3, #0
 8002428:	b2db      	uxtb	r3, r3
 800242a:	e012      	b.n	8002452 <HAL_ADC_Init+0x156>
 800242c:	4871      	ldr	r0, [pc, #452]	; (80025f4 <HAL_ADC_Init+0x2f8>)
 800242e:	f7ff ff2b 	bl	8002288 <LL_ADC_IsEnabled>
 8002432:	4604      	mov	r4, r0
 8002434:	4870      	ldr	r0, [pc, #448]	; (80025f8 <HAL_ADC_Init+0x2fc>)
 8002436:	f7ff ff27 	bl	8002288 <LL_ADC_IsEnabled>
 800243a:	4603      	mov	r3, r0
 800243c:	431c      	orrs	r4, r3
 800243e:	486f      	ldr	r0, [pc, #444]	; (80025fc <HAL_ADC_Init+0x300>)
 8002440:	f7ff ff22 	bl	8002288 <LL_ADC_IsEnabled>
 8002444:	4603      	mov	r3, r0
 8002446:	4323      	orrs	r3, r4
 8002448:	2b00      	cmp	r3, #0
 800244a:	bf0c      	ite	eq
 800244c:	2301      	moveq	r3, #1
 800244e:	2300      	movne	r3, #0
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d012      	beq.n	800247c <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800245e:	d004      	beq.n	800246a <HAL_ADC_Init+0x16e>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a62      	ldr	r2, [pc, #392]	; (80025f0 <HAL_ADC_Init+0x2f4>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d101      	bne.n	800246e <HAL_ADC_Init+0x172>
 800246a:	4a65      	ldr	r2, [pc, #404]	; (8002600 <HAL_ADC_Init+0x304>)
 800246c:	e000      	b.n	8002470 <HAL_ADC_Init+0x174>
 800246e:	4a65      	ldr	r2, [pc, #404]	; (8002604 <HAL_ADC_Init+0x308>)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	4619      	mov	r1, r3
 8002476:	4610      	mov	r0, r2
 8002478:	f7ff fd7e 	bl	8001f78 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	7f5b      	ldrb	r3, [r3, #29]
 8002480:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002486:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800248c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002492:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800249a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800249c:	4313      	orrs	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d106      	bne.n	80024b8 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ae:	3b01      	subs	r3, #1
 80024b0:	045b      	lsls	r3, r3, #17
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d009      	beq.n	80024d4 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024cc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68da      	ldr	r2, [r3, #12]
 80024da:	4b4b      	ldr	r3, [pc, #300]	; (8002608 <HAL_ADC_Init+0x30c>)
 80024dc:	4013      	ands	r3, r2
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	6812      	ldr	r2, [r2, #0]
 80024e2:	69b9      	ldr	r1, [r7, #24]
 80024e4:	430b      	orrs	r3, r1
 80024e6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	430a      	orrs	r2, r1
 80024fc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff fed3 	bl	80022ae <LL_ADC_REG_IsConversionOngoing>
 8002508:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff fee0 	bl	80022d4 <LL_ADC_INJ_IsConversionOngoing>
 8002514:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d17f      	bne.n	800261c <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d17c      	bne.n	800261c <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002526:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800252e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002530:	4313      	orrs	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800253e:	f023 0302 	bic.w	r3, r3, #2
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	6812      	ldr	r2, [r2, #0]
 8002546:	69b9      	ldr	r1, [r7, #24]
 8002548:	430b      	orrs	r3, r1
 800254a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d017      	beq.n	8002584 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	691a      	ldr	r2, [r3, #16]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002562:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800256c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002570:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	6911      	ldr	r1, [r2, #16]
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	6812      	ldr	r2, [r2, #0]
 800257c:	430b      	orrs	r3, r1
 800257e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002582:	e013      	b.n	80025ac <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	691a      	ldr	r2, [r3, #16]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002592:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6812      	ldr	r2, [r2, #0]
 80025a0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80025a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025a8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d12a      	bne.n	800260c <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80025c0:	f023 0304 	bic.w	r3, r3, #4
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80025cc:	4311      	orrs	r1, r2
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80025d2:	4311      	orrs	r1, r2
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80025d8:	430a      	orrs	r2, r1
 80025da:	431a      	orrs	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f042 0201 	orr.w	r2, r2, #1
 80025e4:	611a      	str	r2, [r3, #16]
 80025e6:	e019      	b.n	800261c <HAL_ADC_Init+0x320>
 80025e8:	20001f44 	.word	0x20001f44
 80025ec:	053e2d63 	.word	0x053e2d63
 80025f0:	50000100 	.word	0x50000100
 80025f4:	50000400 	.word	0x50000400
 80025f8:	50000500 	.word	0x50000500
 80025fc:	50000600 	.word	0x50000600
 8002600:	50000300 	.word	0x50000300
 8002604:	50000700 	.word	0x50000700
 8002608:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	691a      	ldr	r2, [r3, #16]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 0201 	bic.w	r2, r2, #1
 800261a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d10c      	bne.n	800263e <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	f023 010f 	bic.w	r1, r3, #15
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	1e5a      	subs	r2, r3, #1
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	430a      	orrs	r2, r1
 800263a:	631a      	str	r2, [r3, #48]	; 0x30
 800263c:	e007      	b.n	800264e <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 020f 	bic.w	r2, r2, #15
 800264c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002652:	f023 0303 	bic.w	r3, r3, #3
 8002656:	f043 0201 	orr.w	r2, r3, #1
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	65da      	str	r2, [r3, #92]	; 0x5c
 800265e:	e007      	b.n	8002670 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002664:	f043 0210 	orr.w	r2, r3, #16
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002670:	7ffb      	ldrb	r3, [r7, #31]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3724      	adds	r7, #36	; 0x24
 8002676:	46bd      	mov	sp, r7
 8002678:	bd90      	pop	{r4, r7, pc}
 800267a:	bf00      	nop

0800267c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b0a6      	sub	sp, #152	; 0x98
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002686:	2300      	movs	r3, #0
 8002688:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800268c:	2300      	movs	r3, #0
 800268e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002696:	2b01      	cmp	r3, #1
 8002698:	d101      	bne.n	800269e <HAL_ADC_ConfigChannel+0x22>
 800269a:	2302      	movs	r3, #2
 800269c:	e38e      	b.n	8002dbc <HAL_ADC_ConfigChannel+0x740>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff fdff 	bl	80022ae <LL_ADC_REG_IsConversionOngoing>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f040 836f 	bne.w	8002d96 <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6818      	ldr	r0, [r3, #0]
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	6859      	ldr	r1, [r3, #4]
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	461a      	mov	r2, r3
 80026c6:	f7ff fd1c 	bl	8002102 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff fded 	bl	80022ae <LL_ADC_REG_IsConversionOngoing>
 80026d4:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff fdf9 	bl	80022d4 <LL_ADC_INJ_IsConversionOngoing>
 80026e2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f040 817b 	bne.w	80029e6 <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f040 8176 	bne.w	80029e6 <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002702:	d10f      	bne.n	8002724 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6818      	ldr	r0, [r3, #0]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2200      	movs	r2, #0
 800270e:	4619      	mov	r1, r3
 8002710:	f7ff fd20 	bl	8002154 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff fcdd 	bl	80020dc <LL_ADC_SetSamplingTimeCommonConfig>
 8002722:	e00e      	b.n	8002742 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6818      	ldr	r0, [r3, #0]
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	6819      	ldr	r1, [r3, #0]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	461a      	mov	r2, r3
 8002732:	f7ff fd0f 	bl	8002154 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2100      	movs	r1, #0
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff fccd 	bl	80020dc <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	695a      	ldr	r2, [r3, #20]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	08db      	lsrs	r3, r3, #3
 800274e:	f003 0303 	and.w	r3, r3, #3
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	2b04      	cmp	r3, #4
 8002762:	d022      	beq.n	80027aa <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6818      	ldr	r0, [r3, #0]
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	6919      	ldr	r1, [r3, #16]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002774:	f7ff fc34 	bl	8001fe0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6818      	ldr	r0, [r3, #0]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	6919      	ldr	r1, [r3, #16]
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	461a      	mov	r2, r3
 8002786:	f7ff fc79 	bl	800207c <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6818      	ldr	r0, [r3, #0]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	6919      	ldr	r1, [r3, #16]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	7f1b      	ldrb	r3, [r3, #28]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d102      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x124>
 800279a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800279e:	e000      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x126>
 80027a0:	2300      	movs	r3, #0
 80027a2:	461a      	mov	r2, r3
 80027a4:	f7ff fc82 	bl	80020ac <LL_ADC_SetOffsetSaturation>
 80027a8:	e11d      	b.n	80029e6 <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2100      	movs	r1, #0
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff fc37 	bl	8002024 <LL_ADC_GetOffsetChannel>
 80027b6:	4603      	mov	r3, r0
 80027b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10a      	bne.n	80027d6 <HAL_ADC_ConfigChannel+0x15a>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2100      	movs	r1, #0
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff fc2c 	bl	8002024 <LL_ADC_GetOffsetChannel>
 80027cc:	4603      	mov	r3, r0
 80027ce:	0e9b      	lsrs	r3, r3, #26
 80027d0:	f003 021f 	and.w	r2, r3, #31
 80027d4:	e012      	b.n	80027fc <HAL_ADC_ConfigChannel+0x180>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2100      	movs	r1, #0
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff fc21 	bl	8002024 <LL_ADC_GetOffsetChannel>
 80027e2:	4603      	mov	r3, r0
 80027e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80027ec:	fa93 f3a3 	rbit	r3, r3
 80027f0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80027f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027f4:	fab3 f383 	clz	r3, r3
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	461a      	mov	r2, r3
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002804:	2b00      	cmp	r3, #0
 8002806:	d105      	bne.n	8002814 <HAL_ADC_ConfigChannel+0x198>
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	0e9b      	lsrs	r3, r3, #26
 800280e:	f003 031f 	and.w	r3, r3, #31
 8002812:	e00a      	b.n	800282a <HAL_ADC_ConfigChannel+0x1ae>
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800281c:	fa93 f3a3 	rbit	r3, r3
 8002820:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8002822:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002824:	fab3 f383 	clz	r3, r3
 8002828:	b2db      	uxtb	r3, r3
 800282a:	429a      	cmp	r2, r3
 800282c:	d106      	bne.n	800283c <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2200      	movs	r2, #0
 8002834:	2100      	movs	r1, #0
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff fc08 	bl	800204c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2101      	movs	r1, #1
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff fbee 	bl	8002024 <LL_ADC_GetOffsetChannel>
 8002848:	4603      	mov	r3, r0
 800284a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10a      	bne.n	8002868 <HAL_ADC_ConfigChannel+0x1ec>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2101      	movs	r1, #1
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff fbe3 	bl	8002024 <LL_ADC_GetOffsetChannel>
 800285e:	4603      	mov	r3, r0
 8002860:	0e9b      	lsrs	r3, r3, #26
 8002862:	f003 021f 	and.w	r2, r3, #31
 8002866:	e010      	b.n	800288a <HAL_ADC_ConfigChannel+0x20e>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2101      	movs	r1, #1
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff fbd8 	bl	8002024 <LL_ADC_GetOffsetChannel>
 8002874:	4603      	mov	r3, r0
 8002876:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002878:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800287a:	fa93 f3a3 	rbit	r3, r3
 800287e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002882:	fab3 f383 	clz	r3, r3
 8002886:	b2db      	uxtb	r3, r3
 8002888:	461a      	mov	r2, r3
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002892:	2b00      	cmp	r3, #0
 8002894:	d105      	bne.n	80028a2 <HAL_ADC_ConfigChannel+0x226>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	0e9b      	lsrs	r3, r3, #26
 800289c:	f003 031f 	and.w	r3, r3, #31
 80028a0:	e00a      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x23c>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028aa:	fa93 f3a3 	rbit	r3, r3
 80028ae:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80028b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028b2:	fab3 f383 	clz	r3, r3
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d106      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2200      	movs	r2, #0
 80028c2:	2101      	movs	r1, #1
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff fbc1 	bl	800204c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2102      	movs	r1, #2
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff fba7 	bl	8002024 <LL_ADC_GetOffsetChannel>
 80028d6:	4603      	mov	r3, r0
 80028d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10a      	bne.n	80028f6 <HAL_ADC_ConfigChannel+0x27a>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2102      	movs	r1, #2
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7ff fb9c 	bl	8002024 <LL_ADC_GetOffsetChannel>
 80028ec:	4603      	mov	r3, r0
 80028ee:	0e9b      	lsrs	r3, r3, #26
 80028f0:	f003 021f 	and.w	r2, r3, #31
 80028f4:	e010      	b.n	8002918 <HAL_ADC_ConfigChannel+0x29c>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2102      	movs	r1, #2
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff fb91 	bl	8002024 <LL_ADC_GetOffsetChannel>
 8002902:	4603      	mov	r3, r0
 8002904:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002906:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002908:	fa93 f3a3 	rbit	r3, r3
 800290c:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 800290e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002910:	fab3 f383 	clz	r3, r3
 8002914:	b2db      	uxtb	r3, r3
 8002916:	461a      	mov	r2, r3
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002920:	2b00      	cmp	r3, #0
 8002922:	d105      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x2b4>
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	0e9b      	lsrs	r3, r3, #26
 800292a:	f003 031f 	and.w	r3, r3, #31
 800292e:	e00a      	b.n	8002946 <HAL_ADC_ConfigChannel+0x2ca>
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002936:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002938:	fa93 f3a3 	rbit	r3, r3
 800293c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800293e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002940:	fab3 f383 	clz	r3, r3
 8002944:	b2db      	uxtb	r3, r3
 8002946:	429a      	cmp	r2, r3
 8002948:	d106      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2200      	movs	r2, #0
 8002950:	2102      	movs	r1, #2
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff fb7a 	bl	800204c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2103      	movs	r1, #3
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff fb60 	bl	8002024 <LL_ADC_GetOffsetChannel>
 8002964:	4603      	mov	r3, r0
 8002966:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10a      	bne.n	8002984 <HAL_ADC_ConfigChannel+0x308>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2103      	movs	r1, #3
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff fb55 	bl	8002024 <LL_ADC_GetOffsetChannel>
 800297a:	4603      	mov	r3, r0
 800297c:	0e9b      	lsrs	r3, r3, #26
 800297e:	f003 021f 	and.w	r2, r3, #31
 8002982:	e010      	b.n	80029a6 <HAL_ADC_ConfigChannel+0x32a>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2103      	movs	r1, #3
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff fb4a 	bl	8002024 <LL_ADC_GetOffsetChannel>
 8002990:	4603      	mov	r3, r0
 8002992:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002994:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002996:	fa93 f3a3 	rbit	r3, r3
 800299a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800299c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800299e:	fab3 f383 	clz	r3, r3
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	461a      	mov	r2, r3
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d105      	bne.n	80029be <HAL_ADC_ConfigChannel+0x342>
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	0e9b      	lsrs	r3, r3, #26
 80029b8:	f003 031f 	and.w	r3, r3, #31
 80029bc:	e00a      	b.n	80029d4 <HAL_ADC_ConfigChannel+0x358>
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029c6:	fa93 f3a3 	rbit	r3, r3
 80029ca:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 80029cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029ce:	fab3 f383 	clz	r3, r3
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d106      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2200      	movs	r2, #0
 80029de:	2103      	movs	r1, #3
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff fb33 	bl	800204c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff fc4c 	bl	8002288 <LL_ADC_IsEnabled>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f040 810c 	bne.w	8002c10 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6818      	ldr	r0, [r3, #0]
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	6819      	ldr	r1, [r3, #0]
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	461a      	mov	r2, r3
 8002a06:	f7ff fbcd 	bl	80021a4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	4aaf      	ldr	r2, [pc, #700]	; (8002ccc <HAL_ADC_ConfigChannel+0x650>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	f040 80fd 	bne.w	8002c10 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10b      	bne.n	8002a3e <HAL_ADC_ConfigChannel+0x3c2>
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	0e9b      	lsrs	r3, r3, #26
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	f003 031f 	and.w	r3, r3, #31
 8002a32:	2b09      	cmp	r3, #9
 8002a34:	bf94      	ite	ls
 8002a36:	2301      	movls	r3, #1
 8002a38:	2300      	movhi	r3, #0
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	e012      	b.n	8002a64 <HAL_ADC_ConfigChannel+0x3e8>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a46:	fa93 f3a3 	rbit	r3, r3
 8002a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a4e:	fab3 f383 	clz	r3, r3
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	3301      	adds	r3, #1
 8002a56:	f003 031f 	and.w	r3, r3, #31
 8002a5a:	2b09      	cmp	r3, #9
 8002a5c:	bf94      	ite	ls
 8002a5e:	2301      	movls	r3, #1
 8002a60:	2300      	movhi	r3, #0
 8002a62:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d064      	beq.n	8002b32 <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d107      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x408>
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	0e9b      	lsrs	r3, r3, #26
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	069b      	lsls	r3, r3, #26
 8002a7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a82:	e00e      	b.n	8002aa2 <HAL_ADC_ConfigChannel+0x426>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a8c:	fa93 f3a3 	rbit	r3, r3
 8002a90:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a94:	fab3 f383 	clz	r3, r3
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	069b      	lsls	r3, r3, #26
 8002a9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d109      	bne.n	8002ac2 <HAL_ADC_ConfigChannel+0x446>
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	0e9b      	lsrs	r3, r3, #26
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	f003 031f 	and.w	r3, r3, #31
 8002aba:	2101      	movs	r1, #1
 8002abc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac0:	e010      	b.n	8002ae4 <HAL_ADC_ConfigChannel+0x468>
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aca:	fa93 f3a3 	rbit	r3, r3
 8002ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad2:	fab3 f383 	clz	r3, r3
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	3301      	adds	r3, #1
 8002ada:	f003 031f 	and.w	r3, r3, #31
 8002ade:	2101      	movs	r1, #1
 8002ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae4:	ea42 0103 	orr.w	r1, r2, r3
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10a      	bne.n	8002b0a <HAL_ADC_ConfigChannel+0x48e>
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	0e9b      	lsrs	r3, r3, #26
 8002afa:	3301      	adds	r3, #1
 8002afc:	f003 021f 	and.w	r2, r3, #31
 8002b00:	4613      	mov	r3, r2
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	4413      	add	r3, r2
 8002b06:	051b      	lsls	r3, r3, #20
 8002b08:	e011      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x4b2>
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b12:	fa93 f3a3 	rbit	r3, r3
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1a:	fab3 f383 	clz	r3, r3
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	3301      	adds	r3, #1
 8002b22:	f003 021f 	and.w	r2, r3, #31
 8002b26:	4613      	mov	r3, r2
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	4413      	add	r3, r2
 8002b2c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b2e:	430b      	orrs	r3, r1
 8002b30:	e069      	b.n	8002c06 <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d107      	bne.n	8002b4e <HAL_ADC_ConfigChannel+0x4d2>
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	0e9b      	lsrs	r3, r3, #26
 8002b44:	3301      	adds	r3, #1
 8002b46:	069b      	lsls	r3, r3, #26
 8002b48:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b4c:	e00e      	b.n	8002b6c <HAL_ADC_ConfigChannel+0x4f0>
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b54:	6a3b      	ldr	r3, [r7, #32]
 8002b56:	fa93 f3a3 	rbit	r3, r3
 8002b5a:	61fb      	str	r3, [r7, #28]
  return result;
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	fab3 f383 	clz	r3, r3
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	3301      	adds	r3, #1
 8002b66:	069b      	lsls	r3, r3, #26
 8002b68:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d109      	bne.n	8002b8c <HAL_ADC_ConfigChannel+0x510>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	0e9b      	lsrs	r3, r3, #26
 8002b7e:	3301      	adds	r3, #1
 8002b80:	f003 031f 	and.w	r3, r3, #31
 8002b84:	2101      	movs	r1, #1
 8002b86:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8a:	e010      	b.n	8002bae <HAL_ADC_ConfigChannel+0x532>
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	fa93 f3a3 	rbit	r3, r3
 8002b98:	617b      	str	r3, [r7, #20]
  return result;
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	fab3 f383 	clz	r3, r3
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	f003 031f 	and.w	r3, r3, #31
 8002ba8:	2101      	movs	r1, #1
 8002baa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bae:	ea42 0103 	orr.w	r1, r2, r3
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d10d      	bne.n	8002bda <HAL_ADC_ConfigChannel+0x55e>
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	0e9b      	lsrs	r3, r3, #26
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	f003 021f 	and.w	r2, r3, #31
 8002bca:	4613      	mov	r3, r2
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	4413      	add	r3, r2
 8002bd0:	3b1e      	subs	r3, #30
 8002bd2:	051b      	lsls	r3, r3, #20
 8002bd4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bd8:	e014      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x588>
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	fa93 f3a3 	rbit	r3, r3
 8002be6:	60fb      	str	r3, [r7, #12]
  return result;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	fab3 f383 	clz	r3, r3
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	f003 021f 	and.w	r2, r3, #31
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3b1e      	subs	r3, #30
 8002bfe:	051b      	lsls	r3, r3, #20
 8002c00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c04:	430b      	orrs	r3, r1
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	6892      	ldr	r2, [r2, #8]
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	f7ff faa2 	bl	8002154 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	4b2e      	ldr	r3, [pc, #184]	; (8002cd0 <HAL_ADC_ConfigChannel+0x654>)
 8002c16:	4013      	ands	r3, r2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 80c9 	beq.w	8002db0 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c26:	d004      	beq.n	8002c32 <HAL_ADC_ConfigChannel+0x5b6>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a29      	ldr	r2, [pc, #164]	; (8002cd4 <HAL_ADC_ConfigChannel+0x658>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d101      	bne.n	8002c36 <HAL_ADC_ConfigChannel+0x5ba>
 8002c32:	4b29      	ldr	r3, [pc, #164]	; (8002cd8 <HAL_ADC_ConfigChannel+0x65c>)
 8002c34:	e000      	b.n	8002c38 <HAL_ADC_ConfigChannel+0x5bc>
 8002c36:	4b29      	ldr	r3, [pc, #164]	; (8002cdc <HAL_ADC_ConfigChannel+0x660>)
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff f9c3 	bl	8001fc4 <LL_ADC_GetCommonPathInternalCh>
 8002c3e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a26      	ldr	r2, [pc, #152]	; (8002ce0 <HAL_ADC_ConfigChannel+0x664>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d004      	beq.n	8002c56 <HAL_ADC_ConfigChannel+0x5da>
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a24      	ldr	r2, [pc, #144]	; (8002ce4 <HAL_ADC_ConfigChannel+0x668>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d14e      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d148      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c6a:	d005      	beq.n	8002c78 <HAL_ADC_ConfigChannel+0x5fc>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a1d      	ldr	r2, [pc, #116]	; (8002ce8 <HAL_ADC_ConfigChannel+0x66c>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	f040 8099 	bne.w	8002daa <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c80:	d004      	beq.n	8002c8c <HAL_ADC_ConfigChannel+0x610>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a13      	ldr	r2, [pc, #76]	; (8002cd4 <HAL_ADC_ConfigChannel+0x658>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d101      	bne.n	8002c90 <HAL_ADC_ConfigChannel+0x614>
 8002c8c:	4a12      	ldr	r2, [pc, #72]	; (8002cd8 <HAL_ADC_ConfigChannel+0x65c>)
 8002c8e:	e000      	b.n	8002c92 <HAL_ADC_ConfigChannel+0x616>
 8002c90:	4a12      	ldr	r2, [pc, #72]	; (8002cdc <HAL_ADC_ConfigChannel+0x660>)
 8002c92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c96:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	4610      	mov	r0, r2
 8002c9e:	f7ff f97e 	bl	8001f9e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002ca2:	4b12      	ldr	r3, [pc, #72]	; (8002cec <HAL_ADC_ConfigChannel+0x670>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	099b      	lsrs	r3, r3, #6
 8002ca8:	4a11      	ldr	r2, [pc, #68]	; (8002cf0 <HAL_ADC_ConfigChannel+0x674>)
 8002caa:	fba2 2303 	umull	r2, r3, r2, r3
 8002cae:	099a      	lsrs	r2, r3, #6
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	4413      	add	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002cba:	e002      	b.n	8002cc2 <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1f9      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cc8:	e06f      	b.n	8002daa <HAL_ADC_ConfigChannel+0x72e>
 8002cca:	bf00      	nop
 8002ccc:	407f0000 	.word	0x407f0000
 8002cd0:	80080000 	.word	0x80080000
 8002cd4:	50000100 	.word	0x50000100
 8002cd8:	50000300 	.word	0x50000300
 8002cdc:	50000700 	.word	0x50000700
 8002ce0:	c3210000 	.word	0xc3210000
 8002ce4:	90c00010 	.word	0x90c00010
 8002ce8:	50000600 	.word	0x50000600
 8002cec:	20001f44 	.word	0x20001f44
 8002cf0:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a32      	ldr	r2, [pc, #200]	; (8002dc4 <HAL_ADC_ConfigChannel+0x748>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d125      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x6ce>
 8002cfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d11f      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a2e      	ldr	r2, [pc, #184]	; (8002dc8 <HAL_ADC_ConfigChannel+0x74c>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d104      	bne.n	8002d1e <HAL_ADC_ConfigChannel+0x6a2>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a2c      	ldr	r2, [pc, #176]	; (8002dcc <HAL_ADC_ConfigChannel+0x750>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d047      	beq.n	8002dae <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d26:	d004      	beq.n	8002d32 <HAL_ADC_ConfigChannel+0x6b6>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a26      	ldr	r2, [pc, #152]	; (8002dc8 <HAL_ADC_ConfigChannel+0x74c>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d101      	bne.n	8002d36 <HAL_ADC_ConfigChannel+0x6ba>
 8002d32:	4a27      	ldr	r2, [pc, #156]	; (8002dd0 <HAL_ADC_ConfigChannel+0x754>)
 8002d34:	e000      	b.n	8002d38 <HAL_ADC_ConfigChannel+0x6bc>
 8002d36:	4a27      	ldr	r2, [pc, #156]	; (8002dd4 <HAL_ADC_ConfigChannel+0x758>)
 8002d38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d40:	4619      	mov	r1, r3
 8002d42:	4610      	mov	r0, r2
 8002d44:	f7ff f92b 	bl	8001f9e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d48:	e031      	b.n	8002dae <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a22      	ldr	r2, [pc, #136]	; (8002dd8 <HAL_ADC_ConfigChannel+0x75c>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d12d      	bne.n	8002db0 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d127      	bne.n	8002db0 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a18      	ldr	r2, [pc, #96]	; (8002dc8 <HAL_ADC_ConfigChannel+0x74c>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d022      	beq.n	8002db0 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d72:	d004      	beq.n	8002d7e <HAL_ADC_ConfigChannel+0x702>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a13      	ldr	r2, [pc, #76]	; (8002dc8 <HAL_ADC_ConfigChannel+0x74c>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d101      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x706>
 8002d7e:	4a14      	ldr	r2, [pc, #80]	; (8002dd0 <HAL_ADC_ConfigChannel+0x754>)
 8002d80:	e000      	b.n	8002d84 <HAL_ADC_ConfigChannel+0x708>
 8002d82:	4a14      	ldr	r2, [pc, #80]	; (8002dd4 <HAL_ADC_ConfigChannel+0x758>)
 8002d84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4610      	mov	r0, r2
 8002d90:	f7ff f905 	bl	8001f9e <LL_ADC_SetCommonPathInternalCh>
 8002d94:	e00c      	b.n	8002db0 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d9a:	f043 0220 	orr.w	r2, r3, #32
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8002da8:	e002      	b.n	8002db0 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002daa:	bf00      	nop
 8002dac:	e000      	b.n	8002db0 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002dae:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002db8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3798      	adds	r7, #152	; 0x98
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	c7520000 	.word	0xc7520000
 8002dc8:	50000100 	.word	0x50000100
 8002dcc:	50000500 	.word	0x50000500
 8002dd0:	50000300 	.word	0x50000300
 8002dd4:	50000700 	.word	0x50000700
 8002dd8:	cb840000 	.word	0xcb840000

08002ddc <LL_ADC_IsEnabled>:
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d101      	bne.n	8002df4 <LL_ADC_IsEnabled+0x18>
 8002df0:	2301      	movs	r3, #1
 8002df2:	e000      	b.n	8002df6 <LL_ADC_IsEnabled+0x1a>
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <LL_ADC_REG_IsConversionOngoing>:
{
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 0304 	and.w	r3, r3, #4
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	d101      	bne.n	8002e1a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e16:	2301      	movs	r3, #1
 8002e18:	e000      	b.n	8002e1c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002e28:	b590      	push	{r4, r7, lr}
 8002e2a:	b0a1      	sub	sp, #132	; 0x84
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e32:	2300      	movs	r3, #0
 8002e34:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d101      	bne.n	8002e46 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002e42:	2302      	movs	r3, #2
 8002e44:	e0e3      	b.n	800300e <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e56:	d102      	bne.n	8002e5e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002e58:	4b6f      	ldr	r3, [pc, #444]	; (8003018 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002e5a:	60bb      	str	r3, [r7, #8]
 8002e5c:	e009      	b.n	8002e72 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a6e      	ldr	r2, [pc, #440]	; (800301c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d102      	bne.n	8002e6e <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8002e68:	4b6d      	ldr	r3, [pc, #436]	; (8003020 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002e6a:	60bb      	str	r3, [r7, #8]
 8002e6c:	e001      	b.n	8002e72 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10b      	bne.n	8002e90 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e7c:	f043 0220 	orr.w	r2, r3, #32
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e0be      	b.n	800300e <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff ffb5 	bl	8002e02 <LL_ADC_REG_IsConversionOngoing>
 8002e98:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7ff ffaf 	bl	8002e02 <LL_ADC_REG_IsConversionOngoing>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f040 80a0 	bne.w	8002fec <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002eac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f040 809c 	bne.w	8002fec <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ebc:	d004      	beq.n	8002ec8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a55      	ldr	r2, [pc, #340]	; (8003018 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d101      	bne.n	8002ecc <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8002ec8:	4b56      	ldr	r3, [pc, #344]	; (8003024 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002eca:	e000      	b.n	8002ece <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8002ecc:	4b56      	ldr	r3, [pc, #344]	; (8003028 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002ece:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d04b      	beq.n	8002f70 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002ed8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	6859      	ldr	r1, [r3, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002eea:	035b      	lsls	r3, r3, #13
 8002eec:	430b      	orrs	r3, r1
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ef2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002efc:	d004      	beq.n	8002f08 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a45      	ldr	r2, [pc, #276]	; (8003018 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d10f      	bne.n	8002f28 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8002f08:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002f0c:	f7ff ff66 	bl	8002ddc <LL_ADC_IsEnabled>
 8002f10:	4604      	mov	r4, r0
 8002f12:	4841      	ldr	r0, [pc, #260]	; (8003018 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002f14:	f7ff ff62 	bl	8002ddc <LL_ADC_IsEnabled>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	4323      	orrs	r3, r4
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	bf0c      	ite	eq
 8002f20:	2301      	moveq	r3, #1
 8002f22:	2300      	movne	r3, #0
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	e012      	b.n	8002f4e <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8002f28:	483c      	ldr	r0, [pc, #240]	; (800301c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8002f2a:	f7ff ff57 	bl	8002ddc <LL_ADC_IsEnabled>
 8002f2e:	4604      	mov	r4, r0
 8002f30:	483b      	ldr	r0, [pc, #236]	; (8003020 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002f32:	f7ff ff53 	bl	8002ddc <LL_ADC_IsEnabled>
 8002f36:	4603      	mov	r3, r0
 8002f38:	431c      	orrs	r4, r3
 8002f3a:	483c      	ldr	r0, [pc, #240]	; (800302c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002f3c:	f7ff ff4e 	bl	8002ddc <LL_ADC_IsEnabled>
 8002f40:	4603      	mov	r3, r0
 8002f42:	4323      	orrs	r3, r4
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	bf0c      	ite	eq
 8002f48:	2301      	moveq	r3, #1
 8002f4a:	2300      	movne	r3, #0
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d056      	beq.n	8003000 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f5a:	f023 030f 	bic.w	r3, r3, #15
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	6811      	ldr	r1, [r2, #0]
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	6892      	ldr	r2, [r2, #8]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f6c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f6e:	e047      	b.n	8003000 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002f70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f7a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f84:	d004      	beq.n	8002f90 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a23      	ldr	r2, [pc, #140]	; (8003018 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d10f      	bne.n	8002fb0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002f90:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002f94:	f7ff ff22 	bl	8002ddc <LL_ADC_IsEnabled>
 8002f98:	4604      	mov	r4, r0
 8002f9a:	481f      	ldr	r0, [pc, #124]	; (8003018 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002f9c:	f7ff ff1e 	bl	8002ddc <LL_ADC_IsEnabled>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	4323      	orrs	r3, r4
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	bf0c      	ite	eq
 8002fa8:	2301      	moveq	r3, #1
 8002faa:	2300      	movne	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	e012      	b.n	8002fd6 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8002fb0:	481a      	ldr	r0, [pc, #104]	; (800301c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8002fb2:	f7ff ff13 	bl	8002ddc <LL_ADC_IsEnabled>
 8002fb6:	4604      	mov	r4, r0
 8002fb8:	4819      	ldr	r0, [pc, #100]	; (8003020 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002fba:	f7ff ff0f 	bl	8002ddc <LL_ADC_IsEnabled>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	431c      	orrs	r4, r3
 8002fc2:	481a      	ldr	r0, [pc, #104]	; (800302c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002fc4:	f7ff ff0a 	bl	8002ddc <LL_ADC_IsEnabled>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	4323      	orrs	r3, r4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	bf0c      	ite	eq
 8002fd0:	2301      	moveq	r3, #1
 8002fd2:	2300      	movne	r3, #0
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d012      	beq.n	8003000 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002fda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002fe2:	f023 030f 	bic.w	r3, r3, #15
 8002fe6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002fe8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fea:	e009      	b.n	8003000 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff0:	f043 0220 	orr.w	r2, r3, #32
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002ffe:	e000      	b.n	8003002 <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003000:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800300a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800300e:	4618      	mov	r0, r3
 8003010:	3784      	adds	r7, #132	; 0x84
 8003012:	46bd      	mov	sp, r7
 8003014:	bd90      	pop	{r4, r7, pc}
 8003016:	bf00      	nop
 8003018:	50000100 	.word	0x50000100
 800301c:	50000400 	.word	0x50000400
 8003020:	50000500 	.word	0x50000500
 8003024:	50000300 	.word	0x50000300
 8003028:	50000700 	.word	0x50000700
 800302c:	50000600 	.word	0x50000600

08003030 <LL_EXTI_EnableIT_0_31>:
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003038:	4b05      	ldr	r3, [pc, #20]	; (8003050 <LL_EXTI_EnableIT_0_31+0x20>)
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	4904      	ldr	r1, [pc, #16]	; (8003050 <LL_EXTI_EnableIT_0_31+0x20>)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4313      	orrs	r3, r2
 8003042:	600b      	str	r3, [r1, #0]
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	40010400 	.word	0x40010400

08003054 <LL_EXTI_EnableIT_32_63>:
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800305c:	4b05      	ldr	r3, [pc, #20]	; (8003074 <LL_EXTI_EnableIT_32_63+0x20>)
 800305e:	6a1a      	ldr	r2, [r3, #32]
 8003060:	4904      	ldr	r1, [pc, #16]	; (8003074 <LL_EXTI_EnableIT_32_63+0x20>)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4313      	orrs	r3, r2
 8003066:	620b      	str	r3, [r1, #32]
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	40010400 	.word	0x40010400

08003078 <LL_EXTI_DisableIT_0_31>:
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8003080:	4b06      	ldr	r3, [pc, #24]	; (800309c <LL_EXTI_DisableIT_0_31+0x24>)
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	43db      	mvns	r3, r3
 8003088:	4904      	ldr	r1, [pc, #16]	; (800309c <LL_EXTI_DisableIT_0_31+0x24>)
 800308a:	4013      	ands	r3, r2
 800308c:	600b      	str	r3, [r1, #0]
}
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	40010400 	.word	0x40010400

080030a0 <LL_EXTI_DisableIT_32_63>:
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80030a8:	4b06      	ldr	r3, [pc, #24]	; (80030c4 <LL_EXTI_DisableIT_32_63+0x24>)
 80030aa:	6a1a      	ldr	r2, [r3, #32]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	43db      	mvns	r3, r3
 80030b0:	4904      	ldr	r1, [pc, #16]	; (80030c4 <LL_EXTI_DisableIT_32_63+0x24>)
 80030b2:	4013      	ands	r3, r2
 80030b4:	620b      	str	r3, [r1, #32]
}
 80030b6:	bf00      	nop
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	40010400 	.word	0x40010400

080030c8 <LL_EXTI_EnableEvent_0_31>:
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80030d0:	4b05      	ldr	r3, [pc, #20]	; (80030e8 <LL_EXTI_EnableEvent_0_31+0x20>)
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	4904      	ldr	r1, [pc, #16]	; (80030e8 <LL_EXTI_EnableEvent_0_31+0x20>)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4313      	orrs	r3, r2
 80030da:	604b      	str	r3, [r1, #4]
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	40010400 	.word	0x40010400

080030ec <LL_EXTI_EnableEvent_32_63>:
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80030f4:	4b05      	ldr	r3, [pc, #20]	; (800310c <LL_EXTI_EnableEvent_32_63+0x20>)
 80030f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030f8:	4904      	ldr	r1, [pc, #16]	; (800310c <LL_EXTI_EnableEvent_32_63+0x20>)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	40010400 	.word	0x40010400

08003110 <LL_EXTI_DisableEvent_0_31>:
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8003118:	4b06      	ldr	r3, [pc, #24]	; (8003134 <LL_EXTI_DisableEvent_0_31+0x24>)
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	43db      	mvns	r3, r3
 8003120:	4904      	ldr	r1, [pc, #16]	; (8003134 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003122:	4013      	ands	r3, r2
 8003124:	604b      	str	r3, [r1, #4]
}
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	40010400 	.word	0x40010400

08003138 <LL_EXTI_DisableEvent_32_63>:
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8003140:	4b06      	ldr	r3, [pc, #24]	; (800315c <LL_EXTI_DisableEvent_32_63+0x24>)
 8003142:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	43db      	mvns	r3, r3
 8003148:	4904      	ldr	r1, [pc, #16]	; (800315c <LL_EXTI_DisableEvent_32_63+0x24>)
 800314a:	4013      	ands	r3, r2
 800314c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	40010400 	.word	0x40010400

08003160 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8003168:	4b05      	ldr	r3, [pc, #20]	; (8003180 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	4904      	ldr	r1, [pc, #16]	; (8003180 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4313      	orrs	r3, r2
 8003172:	608b      	str	r3, [r1, #8]
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	40010400 	.word	0x40010400

08003184 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800318c:	4b05      	ldr	r3, [pc, #20]	; (80031a4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800318e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003190:	4904      	ldr	r1, [pc, #16]	; (80031a4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4313      	orrs	r3, r2
 8003196:	628b      	str	r3, [r1, #40]	; 0x28
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	40010400 	.word	0x40010400

080031a8 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80031b0:	4b06      	ldr	r3, [pc, #24]	; (80031cc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	43db      	mvns	r3, r3
 80031b8:	4904      	ldr	r1, [pc, #16]	; (80031cc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80031ba:	4013      	ands	r3, r2
 80031bc:	608b      	str	r3, [r1, #8]
}
 80031be:	bf00      	nop
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	40010400 	.word	0x40010400

080031d0 <LL_EXTI_DisableRisingTrig_32_63>:
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80031d8:	4b06      	ldr	r3, [pc, #24]	; (80031f4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80031da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	43db      	mvns	r3, r3
 80031e0:	4904      	ldr	r1, [pc, #16]	; (80031f4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80031e2:	4013      	ands	r3, r2
 80031e4:	628b      	str	r3, [r1, #40]	; 0x28
}
 80031e6:	bf00      	nop
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	40010400 	.word	0x40010400

080031f8 <LL_EXTI_EnableFallingTrig_0_31>:
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8003200:	4b05      	ldr	r3, [pc, #20]	; (8003218 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003202:	68da      	ldr	r2, [r3, #12]
 8003204:	4904      	ldr	r1, [pc, #16]	; (8003218 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4313      	orrs	r3, r2
 800320a:	60cb      	str	r3, [r1, #12]
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	40010400 	.word	0x40010400

0800321c <LL_EXTI_EnableFallingTrig_32_63>:
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8003224:	4b05      	ldr	r3, [pc, #20]	; (800323c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8003226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003228:	4904      	ldr	r1, [pc, #16]	; (800323c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4313      	orrs	r3, r2
 800322e:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	40010400 	.word	0x40010400

08003240 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8003248:	4b06      	ldr	r3, [pc, #24]	; (8003264 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800324a:	68da      	ldr	r2, [r3, #12]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	43db      	mvns	r3, r3
 8003250:	4904      	ldr	r1, [pc, #16]	; (8003264 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003252:	4013      	ands	r3, r2
 8003254:	60cb      	str	r3, [r1, #12]
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	40010400 	.word	0x40010400

08003268 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8003270:	4b06      	ldr	r3, [pc, #24]	; (800328c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8003272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	43db      	mvns	r3, r3
 8003278:	4904      	ldr	r1, [pc, #16]	; (800328c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800327a:	4013      	ands	r3, r2
 800327c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	40010400 	.word	0x40010400

08003290 <LL_EXTI_ClearFlag_0_31>:
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8003298:	4a04      	ldr	r2, [pc, #16]	; (80032ac <LL_EXTI_ClearFlag_0_31+0x1c>)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6153      	str	r3, [r2, #20]
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	40010400 	.word	0x40010400

080032b0 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 80032b8:	4a04      	ldr	r2, [pc, #16]	; (80032cc <LL_EXTI_ClearFlag_32_63+0x1c>)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6353      	str	r3, [r2, #52]	; 0x34
}
 80032be:	bf00      	nop
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	40010400 	.word	0x40010400

080032d0 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b088      	sub	sp, #32
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80032d8:	2300      	movs	r3, #0
 80032da:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80032dc:	2300      	movs	r3, #0
 80032de:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d102      	bne.n	80032ec <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	77fb      	strb	r3, [r7, #31]
 80032ea:	e180      	b.n	80035ee <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032fa:	d102      	bne.n	8003302 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	77fb      	strb	r3, [r7, #31]
 8003300:	e175      	b.n	80035ee <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	7f5b      	ldrb	r3, [r3, #29]
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b00      	cmp	r3, #0
 800330a:	d108      	bne.n	800331e <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f7fd f8dd 	bl	80004d8 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003328:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8003344:	4313      	orrs	r3, r2
 8003346:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	4b98      	ldr	r3, [pc, #608]	; (80035b0 <HAL_COMP_Init+0x2e0>)
 8003350:	4013      	ands	r3, r2
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	6812      	ldr	r2, [r2, #0]
 8003356:	6979      	ldr	r1, [r7, #20]
 8003358:	430b      	orrs	r3, r1
 800335a:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d015      	beq.n	8003396 <HAL_COMP_Init+0xc6>
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d112      	bne.n	8003396 <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003370:	4b90      	ldr	r3, [pc, #576]	; (80035b4 <HAL_COMP_Init+0x2e4>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	099b      	lsrs	r3, r3, #6
 8003376:	4a90      	ldr	r2, [pc, #576]	; (80035b8 <HAL_COMP_Init+0x2e8>)
 8003378:	fba2 2303 	umull	r2, r3, r2, r3
 800337c:	099a      	lsrs	r2, r3, #6
 800337e:	4613      	mov	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003388:	e002      	b.n	8003390 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	3b01      	subs	r3, #1
 800338e:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1f9      	bne.n	800338a <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a88      	ldr	r2, [pc, #544]	; (80035bc <HAL_COMP_Init+0x2ec>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d028      	beq.n	80033f2 <HAL_COMP_Init+0x122>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a86      	ldr	r2, [pc, #536]	; (80035c0 <HAL_COMP_Init+0x2f0>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d020      	beq.n	80033ec <HAL_COMP_Init+0x11c>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a85      	ldr	r2, [pc, #532]	; (80035c4 <HAL_COMP_Init+0x2f4>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d018      	beq.n	80033e6 <HAL_COMP_Init+0x116>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a83      	ldr	r2, [pc, #524]	; (80035c8 <HAL_COMP_Init+0x2f8>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d010      	beq.n	80033e0 <HAL_COMP_Init+0x110>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a82      	ldr	r2, [pc, #520]	; (80035cc <HAL_COMP_Init+0x2fc>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d008      	beq.n	80033da <HAL_COMP_Init+0x10a>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a80      	ldr	r2, [pc, #512]	; (80035d0 <HAL_COMP_Init+0x300>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d101      	bne.n	80033d6 <HAL_COMP_Init+0x106>
 80033d2:	2301      	movs	r3, #1
 80033d4:	e00f      	b.n	80033f6 <HAL_COMP_Init+0x126>
 80033d6:	2302      	movs	r3, #2
 80033d8:	e00d      	b.n	80033f6 <HAL_COMP_Init+0x126>
 80033da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80033de:	e00a      	b.n	80033f6 <HAL_COMP_Init+0x126>
 80033e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033e4:	e007      	b.n	80033f6 <HAL_COMP_Init+0x126>
 80033e6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80033ea:	e004      	b.n	80033f6 <HAL_COMP_Init+0x126>
 80033ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80033f0:	e001      	b.n	80033f6 <HAL_COMP_Init+0x126>
 80033f2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80033f6:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	f003 0303 	and.w	r3, r3, #3
 8003400:	2b00      	cmp	r3, #0
 8003402:	f000 80b6 	beq.w	8003572 <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	f003 0310 	and.w	r3, r3, #16
 800340e:	2b00      	cmp	r3, #0
 8003410:	d011      	beq.n	8003436 <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a6e      	ldr	r2, [pc, #440]	; (80035d0 <HAL_COMP_Init+0x300>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d004      	beq.n	8003426 <HAL_COMP_Init+0x156>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a6c      	ldr	r2, [pc, #432]	; (80035d4 <HAL_COMP_Init+0x304>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d103      	bne.n	800342e <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8003426:	6938      	ldr	r0, [r7, #16]
 8003428:	f7ff feac 	bl	8003184 <LL_EXTI_EnableRisingTrig_32_63>
 800342c:	e014      	b.n	8003458 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800342e:	6938      	ldr	r0, [r7, #16]
 8003430:	f7ff fe96 	bl	8003160 <LL_EXTI_EnableRisingTrig_0_31>
 8003434:	e010      	b.n	8003458 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a65      	ldr	r2, [pc, #404]	; (80035d0 <HAL_COMP_Init+0x300>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d004      	beq.n	800344a <HAL_COMP_Init+0x17a>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a63      	ldr	r2, [pc, #396]	; (80035d4 <HAL_COMP_Init+0x304>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d103      	bne.n	8003452 <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 800344a:	6938      	ldr	r0, [r7, #16]
 800344c:	f7ff fec0 	bl	80031d0 <LL_EXTI_DisableRisingTrig_32_63>
 8003450:	e002      	b.n	8003458 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8003452:	6938      	ldr	r0, [r7, #16]
 8003454:	f7ff fea8 	bl	80031a8 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	f003 0320 	and.w	r3, r3, #32
 8003460:	2b00      	cmp	r3, #0
 8003462:	d011      	beq.n	8003488 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a59      	ldr	r2, [pc, #356]	; (80035d0 <HAL_COMP_Init+0x300>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d004      	beq.n	8003478 <HAL_COMP_Init+0x1a8>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a58      	ldr	r2, [pc, #352]	; (80035d4 <HAL_COMP_Init+0x304>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d103      	bne.n	8003480 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8003478:	6938      	ldr	r0, [r7, #16]
 800347a:	f7ff fecf 	bl	800321c <LL_EXTI_EnableFallingTrig_32_63>
 800347e:	e014      	b.n	80034aa <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8003480:	6938      	ldr	r0, [r7, #16]
 8003482:	f7ff feb9 	bl	80031f8 <LL_EXTI_EnableFallingTrig_0_31>
 8003486:	e010      	b.n	80034aa <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a50      	ldr	r2, [pc, #320]	; (80035d0 <HAL_COMP_Init+0x300>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d004      	beq.n	800349c <HAL_COMP_Init+0x1cc>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a4f      	ldr	r2, [pc, #316]	; (80035d4 <HAL_COMP_Init+0x304>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d103      	bne.n	80034a4 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 800349c:	6938      	ldr	r0, [r7, #16]
 800349e:	f7ff fee3 	bl	8003268 <LL_EXTI_DisableFallingTrig_32_63>
 80034a2:	e002      	b.n	80034aa <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80034a4:	6938      	ldr	r0, [r7, #16]
 80034a6:	f7ff fecb 	bl	8003240 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a48      	ldr	r2, [pc, #288]	; (80035d0 <HAL_COMP_Init+0x300>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d004      	beq.n	80034be <HAL_COMP_Init+0x1ee>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a46      	ldr	r2, [pc, #280]	; (80035d4 <HAL_COMP_Init+0x304>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d103      	bne.n	80034c6 <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 80034be:	6938      	ldr	r0, [r7, #16]
 80034c0:	f7ff fef6 	bl	80032b0 <LL_EXTI_ClearFlag_32_63>
 80034c4:	e002      	b.n	80034cc <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 80034c6:	6938      	ldr	r0, [r7, #16]
 80034c8:	f7ff fee2 	bl	8003290 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d011      	beq.n	80034fc <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a3c      	ldr	r2, [pc, #240]	; (80035d0 <HAL_COMP_Init+0x300>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d004      	beq.n	80034ec <HAL_COMP_Init+0x21c>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a3b      	ldr	r2, [pc, #236]	; (80035d4 <HAL_COMP_Init+0x304>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d103      	bne.n	80034f4 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 80034ec:	6938      	ldr	r0, [r7, #16]
 80034ee:	f7ff fdfd 	bl	80030ec <LL_EXTI_EnableEvent_32_63>
 80034f2:	e014      	b.n	800351e <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 80034f4:	6938      	ldr	r0, [r7, #16]
 80034f6:	f7ff fde7 	bl	80030c8 <LL_EXTI_EnableEvent_0_31>
 80034fa:	e010      	b.n	800351e <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a33      	ldr	r2, [pc, #204]	; (80035d0 <HAL_COMP_Init+0x300>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d004      	beq.n	8003510 <HAL_COMP_Init+0x240>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a32      	ldr	r2, [pc, #200]	; (80035d4 <HAL_COMP_Init+0x304>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d103      	bne.n	8003518 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8003510:	6938      	ldr	r0, [r7, #16]
 8003512:	f7ff fe11 	bl	8003138 <LL_EXTI_DisableEvent_32_63>
 8003516:	e002      	b.n	800351e <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8003518:	6938      	ldr	r0, [r7, #16]
 800351a:	f7ff fdf9 	bl	8003110 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b00      	cmp	r3, #0
 8003528:	d011      	beq.n	800354e <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a28      	ldr	r2, [pc, #160]	; (80035d0 <HAL_COMP_Init+0x300>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d004      	beq.n	800353e <HAL_COMP_Init+0x26e>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a26      	ldr	r2, [pc, #152]	; (80035d4 <HAL_COMP_Init+0x304>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d103      	bne.n	8003546 <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 800353e:	6938      	ldr	r0, [r7, #16]
 8003540:	f7ff fd88 	bl	8003054 <LL_EXTI_EnableIT_32_63>
 8003544:	e04b      	b.n	80035de <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8003546:	6938      	ldr	r0, [r7, #16]
 8003548:	f7ff fd72 	bl	8003030 <LL_EXTI_EnableIT_0_31>
 800354c:	e047      	b.n	80035de <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a1f      	ldr	r2, [pc, #124]	; (80035d0 <HAL_COMP_Init+0x300>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d004      	beq.n	8003562 <HAL_COMP_Init+0x292>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a1d      	ldr	r2, [pc, #116]	; (80035d4 <HAL_COMP_Init+0x304>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d103      	bne.n	800356a <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8003562:	6938      	ldr	r0, [r7, #16]
 8003564:	f7ff fd9c 	bl	80030a0 <LL_EXTI_DisableIT_32_63>
 8003568:	e039      	b.n	80035de <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 800356a:	6938      	ldr	r0, [r7, #16]
 800356c:	f7ff fd84 	bl	8003078 <LL_EXTI_DisableIT_0_31>
 8003570:	e035      	b.n	80035de <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a16      	ldr	r2, [pc, #88]	; (80035d0 <HAL_COMP_Init+0x300>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d004      	beq.n	8003586 <HAL_COMP_Init+0x2b6>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a14      	ldr	r2, [pc, #80]	; (80035d4 <HAL_COMP_Init+0x304>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d103      	bne.n	800358e <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8003586:	6938      	ldr	r0, [r7, #16]
 8003588:	f7ff fdd6 	bl	8003138 <LL_EXTI_DisableEvent_32_63>
 800358c:	e002      	b.n	8003594 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 800358e:	6938      	ldr	r0, [r7, #16]
 8003590:	f7ff fdbe 	bl	8003110 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a0d      	ldr	r2, [pc, #52]	; (80035d0 <HAL_COMP_Init+0x300>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d004      	beq.n	80035a8 <HAL_COMP_Init+0x2d8>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a0c      	ldr	r2, [pc, #48]	; (80035d4 <HAL_COMP_Init+0x304>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d117      	bne.n	80035d8 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 80035a8:	6938      	ldr	r0, [r7, #16]
 80035aa:	f7ff fd79 	bl	80030a0 <LL_EXTI_DisableIT_32_63>
 80035ae:	e016      	b.n	80035de <HAL_COMP_Init+0x30e>
 80035b0:	ff007e0f 	.word	0xff007e0f
 80035b4:	20001f44 	.word	0x20001f44
 80035b8:	053e2d63 	.word	0x053e2d63
 80035bc:	40010200 	.word	0x40010200
 80035c0:	40010204 	.word	0x40010204
 80035c4:	40010208 	.word	0x40010208
 80035c8:	4001020c 	.word	0x4001020c
 80035cc:	40010210 	.word	0x40010210
 80035d0:	40010214 	.word	0x40010214
 80035d4:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80035d8:	6938      	ldr	r0, [r7, #16]
 80035da:	f7ff fd4d 	bl	8003078 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	7f5b      	ldrb	r3, [r3, #29]
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d102      	bne.n	80035ee <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 80035ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3720      	adds	r7, #32
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <__NVIC_SetPriorityGrouping>:
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f003 0307 	and.w	r3, r3, #7
 8003606:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003608:	4b0c      	ldr	r3, [pc, #48]	; (800363c <__NVIC_SetPriorityGrouping+0x44>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800360e:	68ba      	ldr	r2, [r7, #8]
 8003610:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003614:	4013      	ands	r3, r2
 8003616:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003620:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800362a:	4a04      	ldr	r2, [pc, #16]	; (800363c <__NVIC_SetPriorityGrouping+0x44>)
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	60d3      	str	r3, [r2, #12]
}
 8003630:	bf00      	nop
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	e000ed00 	.word	0xe000ed00

08003640 <__NVIC_GetPriorityGrouping>:
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003644:	4b04      	ldr	r3, [pc, #16]	; (8003658 <__NVIC_GetPriorityGrouping+0x18>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	0a1b      	lsrs	r3, r3, #8
 800364a:	f003 0307 	and.w	r3, r3, #7
}
 800364e:	4618      	mov	r0, r3
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr
 8003658:	e000ed00 	.word	0xe000ed00

0800365c <__NVIC_EnableIRQ>:
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	4603      	mov	r3, r0
 8003664:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800366a:	2b00      	cmp	r3, #0
 800366c:	db0b      	blt.n	8003686 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800366e:	79fb      	ldrb	r3, [r7, #7]
 8003670:	f003 021f 	and.w	r2, r3, #31
 8003674:	4907      	ldr	r1, [pc, #28]	; (8003694 <__NVIC_EnableIRQ+0x38>)
 8003676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800367a:	095b      	lsrs	r3, r3, #5
 800367c:	2001      	movs	r0, #1
 800367e:	fa00 f202 	lsl.w	r2, r0, r2
 8003682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003686:	bf00      	nop
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	e000e100 	.word	0xe000e100

08003698 <__NVIC_SetPriority>:
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	4603      	mov	r3, r0
 80036a0:	6039      	str	r1, [r7, #0]
 80036a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	db0a      	blt.n	80036c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	b2da      	uxtb	r2, r3
 80036b0:	490c      	ldr	r1, [pc, #48]	; (80036e4 <__NVIC_SetPriority+0x4c>)
 80036b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b6:	0112      	lsls	r2, r2, #4
 80036b8:	b2d2      	uxtb	r2, r2
 80036ba:	440b      	add	r3, r1
 80036bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80036c0:	e00a      	b.n	80036d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	b2da      	uxtb	r2, r3
 80036c6:	4908      	ldr	r1, [pc, #32]	; (80036e8 <__NVIC_SetPriority+0x50>)
 80036c8:	79fb      	ldrb	r3, [r7, #7]
 80036ca:	f003 030f 	and.w	r3, r3, #15
 80036ce:	3b04      	subs	r3, #4
 80036d0:	0112      	lsls	r2, r2, #4
 80036d2:	b2d2      	uxtb	r2, r2
 80036d4:	440b      	add	r3, r1
 80036d6:	761a      	strb	r2, [r3, #24]
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr
 80036e4:	e000e100 	.word	0xe000e100
 80036e8:	e000ed00 	.word	0xe000ed00

080036ec <NVIC_EncodePriority>:
{
 80036ec:	b480      	push	{r7}
 80036ee:	b089      	sub	sp, #36	; 0x24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f003 0307 	and.w	r3, r3, #7
 80036fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	f1c3 0307 	rsb	r3, r3, #7
 8003706:	2b04      	cmp	r3, #4
 8003708:	bf28      	it	cs
 800370a:	2304      	movcs	r3, #4
 800370c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	3304      	adds	r3, #4
 8003712:	2b06      	cmp	r3, #6
 8003714:	d902      	bls.n	800371c <NVIC_EncodePriority+0x30>
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	3b03      	subs	r3, #3
 800371a:	e000      	b.n	800371e <NVIC_EncodePriority+0x32>
 800371c:	2300      	movs	r3, #0
 800371e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003720:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	fa02 f303 	lsl.w	r3, r2, r3
 800372a:	43da      	mvns	r2, r3
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	401a      	ands	r2, r3
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003734:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	fa01 f303 	lsl.w	r3, r1, r3
 800373e:	43d9      	mvns	r1, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003744:	4313      	orrs	r3, r2
}
 8003746:	4618      	mov	r0, r3
 8003748:	3724      	adds	r7, #36	; 0x24
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
	...

08003754 <SysTick_Config>:
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	3b01      	subs	r3, #1
 8003760:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003764:	d301      	bcc.n	800376a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003766:	2301      	movs	r3, #1
 8003768:	e00f      	b.n	800378a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800376a:	4a0a      	ldr	r2, [pc, #40]	; (8003794 <SysTick_Config+0x40>)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	3b01      	subs	r3, #1
 8003770:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003772:	210f      	movs	r1, #15
 8003774:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003778:	f7ff ff8e 	bl	8003698 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800377c:	4b05      	ldr	r3, [pc, #20]	; (8003794 <SysTick_Config+0x40>)
 800377e:	2200      	movs	r2, #0
 8003780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003782:	4b04      	ldr	r3, [pc, #16]	; (8003794 <SysTick_Config+0x40>)
 8003784:	2207      	movs	r2, #7
 8003786:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	e000e010 	.word	0xe000e010

08003798 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f7ff ff29 	bl	80035f8 <__NVIC_SetPriorityGrouping>
}
 80037a6:	bf00      	nop
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b086      	sub	sp, #24
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	4603      	mov	r3, r0
 80037b6:	60b9      	str	r1, [r7, #8]
 80037b8:	607a      	str	r2, [r7, #4]
 80037ba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80037bc:	f7ff ff40 	bl	8003640 <__NVIC_GetPriorityGrouping>
 80037c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	68b9      	ldr	r1, [r7, #8]
 80037c6:	6978      	ldr	r0, [r7, #20]
 80037c8:	f7ff ff90 	bl	80036ec <NVIC_EncodePriority>
 80037cc:	4602      	mov	r2, r0
 80037ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037d2:	4611      	mov	r1, r2
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7ff ff5f 	bl	8003698 <__NVIC_SetPriority>
}
 80037da:	bf00      	nop
 80037dc:	3718      	adds	r7, #24
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b082      	sub	sp, #8
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	4603      	mov	r3, r0
 80037ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7ff ff33 	bl	800365c <__NVIC_EnableIRQ>
}
 80037f6:	bf00      	nop
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b082      	sub	sp, #8
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7ff ffa4 	bl	8003754 <SysTick_Config>
 800380c:	4603      	mov	r3, r0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b082      	sub	sp, #8
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d101      	bne.n	8003828 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e014      	b.n	8003852 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	791b      	ldrb	r3, [r3, #4]
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d105      	bne.n	800383e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f7fc ff01 	bl	8000640 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2202      	movs	r2, #2
 8003842:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3708      	adds	r7, #8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b082      	sub	sp, #8
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
 8003862:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	795b      	ldrb	r3, [r3, #5]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d101      	bne.n	8003870 <HAL_DAC_Start+0x16>
 800386c:	2302      	movs	r3, #2
 800386e:	e043      	b.n	80038f8 <HAL_DAC_Start+0x9e>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2202      	movs	r2, #2
 800387a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6819      	ldr	r1, [r3, #0]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	f003 0310 	and.w	r3, r3, #16
 8003888:	2201      	movs	r2, #1
 800388a:	409a      	lsls	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	430a      	orrs	r2, r1
 8003892:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8003894:	2001      	movs	r0, #1
 8003896:	f7fe fb4d 	bl	8001f34 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10f      	bne.n	80038c0 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d11d      	bne.n	80038ea <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f042 0201 	orr.w	r2, r2, #1
 80038bc:	605a      	str	r2, [r3, #4]
 80038be:	e014      	b.n	80038ea <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	f003 0310 	and.w	r3, r3, #16
 80038d0:	2102      	movs	r1, #2
 80038d2:	fa01 f303 	lsl.w	r3, r1, r3
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d107      	bne.n	80038ea <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f042 0202 	orr.w	r2, r2, #2
 80038e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
 800390c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800390e:	2300      	movs	r3, #0
 8003910:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	795b      	ldrb	r3, [r3, #5]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d101      	bne.n	800391e <HAL_DAC_Start_DMA+0x1e>
 800391a:	2302      	movs	r3, #2
 800391c:	e0a1      	b.n	8003a62 <HAL_DAC_Start_DMA+0x162>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2201      	movs	r2, #1
 8003922:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2202      	movs	r2, #2
 8003928:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d12a      	bne.n	8003986 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	4a4d      	ldr	r2, [pc, #308]	; (8003a6c <HAL_DAC_Start_DMA+0x16c>)
 8003936:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	4a4c      	ldr	r2, [pc, #304]	; (8003a70 <HAL_DAC_Start_DMA+0x170>)
 800393e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	4a4b      	ldr	r2, [pc, #300]	; (8003a74 <HAL_DAC_Start_DMA+0x174>)
 8003946:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003956:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003958:	6a3b      	ldr	r3, [r7, #32]
 800395a:	2b04      	cmp	r3, #4
 800395c:	d009      	beq.n	8003972 <HAL_DAC_Start_DMA+0x72>
 800395e:	2b08      	cmp	r3, #8
 8003960:	d00c      	beq.n	800397c <HAL_DAC_Start_DMA+0x7c>
 8003962:	2b00      	cmp	r3, #0
 8003964:	d000      	beq.n	8003968 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003966:	e039      	b.n	80039dc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	3308      	adds	r3, #8
 800396e:	613b      	str	r3, [r7, #16]
        break;
 8003970:	e034      	b.n	80039dc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	330c      	adds	r3, #12
 8003978:	613b      	str	r3, [r7, #16]
        break;
 800397a:	e02f      	b.n	80039dc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	3310      	adds	r3, #16
 8003982:	613b      	str	r3, [r7, #16]
        break;
 8003984:	e02a      	b.n	80039dc <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	4a3b      	ldr	r2, [pc, #236]	; (8003a78 <HAL_DAC_Start_DMA+0x178>)
 800398c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	4a3a      	ldr	r2, [pc, #232]	; (8003a7c <HAL_DAC_Start_DMA+0x17c>)
 8003994:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	4a39      	ldr	r2, [pc, #228]	; (8003a80 <HAL_DAC_Start_DMA+0x180>)
 800399c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80039ac:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80039ae:	6a3b      	ldr	r3, [r7, #32]
 80039b0:	2b04      	cmp	r3, #4
 80039b2:	d009      	beq.n	80039c8 <HAL_DAC_Start_DMA+0xc8>
 80039b4:	2b08      	cmp	r3, #8
 80039b6:	d00c      	beq.n	80039d2 <HAL_DAC_Start_DMA+0xd2>
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d000      	beq.n	80039be <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80039bc:	e00e      	b.n	80039dc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	3314      	adds	r3, #20
 80039c4:	613b      	str	r3, [r7, #16]
        break;
 80039c6:	e009      	b.n	80039dc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	3318      	adds	r3, #24
 80039ce:	613b      	str	r3, [r7, #16]
        break;
 80039d0:	e004      	b.n	80039dc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	331c      	adds	r3, #28
 80039d8:	613b      	str	r3, [r7, #16]
        break;
 80039da:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d111      	bne.n	8003a06 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039f0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6898      	ldr	r0, [r3, #8]
 80039f6:	6879      	ldr	r1, [r7, #4]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	f000 fb66 	bl	80040cc <HAL_DMA_Start_IT>
 8003a00:	4603      	mov	r3, r0
 8003a02:	75fb      	strb	r3, [r7, #23]
 8003a04:	e010      	b.n	8003a28 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003a14:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	68d8      	ldr	r0, [r3, #12]
 8003a1a:	6879      	ldr	r1, [r7, #4]
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	f000 fb54 	bl	80040cc <HAL_DMA_Start_IT>
 8003a24:	4603      	mov	r3, r0
 8003a26:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003a2e:	7dfb      	ldrb	r3, [r7, #23]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10f      	bne.n	8003a54 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6819      	ldr	r1, [r3, #0]
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	f003 0310 	and.w	r3, r3, #16
 8003a40:	2201      	movs	r2, #1
 8003a42:	409a      	lsls	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8003a4c:	2001      	movs	r0, #1
 8003a4e:	f7fe fa71 	bl	8001f34 <HAL_Delay>
 8003a52:	e005      	b.n	8003a60 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	f043 0204 	orr.w	r2, r3, #4
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003a60:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3718      	adds	r7, #24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	08003e69 	.word	0x08003e69
 8003a70:	08003e8b 	.word	0x08003e8b
 8003a74:	08003ea7 	.word	0x08003ea7
 8003a78:	08003f11 	.word	0x08003f11
 8003a7c:	08003f33 	.word	0x08003f33
 8003a80:	08003f4f 	.word	0x08003f4f

08003a84 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b087      	sub	sp, #28
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
 8003a90:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8003a92:	2300      	movs	r3, #0
 8003a94:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d105      	bne.n	8003ab4 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4413      	add	r3, r2
 8003aae:	3308      	adds	r3, #8
 8003ab0:	617b      	str	r3, [r7, #20]
 8003ab2:	e004      	b.n	8003abe <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4413      	add	r3, r2
 8003aba:	3314      	adds	r3, #20
 8003abc:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	371c      	adds	r7, #28
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b08a      	sub	sp, #40	; 0x28
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	795b      	ldrb	r3, [r3, #5]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d101      	bne.n	8003b2c <HAL_DAC_ConfigChannel+0x1c>
 8003b28:	2302      	movs	r3, #2
 8003b2a:	e194      	b.n	8003e56 <HAL_DAC_ConfigChannel+0x346>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2202      	movs	r2, #2
 8003b36:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	2b04      	cmp	r3, #4
 8003b3e:	d174      	bne.n	8003c2a <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d137      	bne.n	8003bb6 <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8003b46:	f7fe f9e9 	bl	8001f1c <HAL_GetTick>
 8003b4a:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003b4c:	e011      	b.n	8003b72 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003b4e:	f7fe f9e5 	bl	8001f1c <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d90a      	bls.n	8003b72 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	f043 0208 	orr.w	r2, r3, #8
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2203      	movs	r2, #3
 8003b6c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e171      	b.n	8003e56 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1e6      	bne.n	8003b4e <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8003b80:	2001      	movs	r0, #1
 8003b82:	f7fe f9d7 	bl	8001f34 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b8e:	641a      	str	r2, [r3, #64]	; 0x40
 8003b90:	e01e      	b.n	8003bd0 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003b92:	f7fe f9c3 	bl	8001f1c <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d90a      	bls.n	8003bb6 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	f043 0208 	orr.w	r2, r3, #8
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2203      	movs	r2, #3
 8003bb0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e14f      	b.n	8003e56 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	dbe8      	blt.n	8003b92 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8003bc0:	2001      	movs	r0, #1
 8003bc2:	f7fe f9b7 	bl	8001f34 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68ba      	ldr	r2, [r7, #8]
 8003bcc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bce:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f003 0310 	and.w	r3, r3, #16
 8003bdc:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003be0:	fa01 f303 	lsl.w	r3, r1, r3
 8003be4:	43db      	mvns	r3, r3
 8003be6:	ea02 0103 	and.w	r1, r2, r3
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f003 0310 	and.w	r3, r3, #16
 8003bf4:	409a      	lsls	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f003 0310 	and.w	r3, r3, #16
 8003c0a:	21ff      	movs	r1, #255	; 0xff
 8003c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c10:	43db      	mvns	r3, r3
 8003c12:	ea02 0103 	and.w	r1, r2, r3
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f003 0310 	and.w	r3, r3, #16
 8003c20:	409a      	lsls	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	69db      	ldr	r3, [r3, #28]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d11d      	bne.n	8003c6e <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c38:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f003 0310 	and.w	r3, r3, #16
 8003c40:	221f      	movs	r2, #31
 8003c42:	fa02 f303 	lsl.w	r3, r2, r3
 8003c46:	43db      	mvns	r3, r3
 8003c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f003 0310 	and.w	r3, r3, #16
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c62:	4313      	orrs	r3, r2
 8003c64:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c6c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c74:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f003 0310 	and.w	r3, r3, #16
 8003c7c:	2207      	movs	r2, #7
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	43db      	mvns	r3, r3
 8003c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c86:	4013      	ands	r3, r2
 8003c88:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d002      	beq.n	8003c9c <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 8003c96:	2300      	movs	r3, #0
 8003c98:	623b      	str	r3, [r7, #32]
 8003c9a:	e011      	b.n	8003cc0 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d002      	beq.n	8003cae <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	623b      	str	r3, [r7, #32]
 8003cac:	e008      	b.n	8003cc0 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d102      	bne.n	8003cbc <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	623b      	str	r3, [r7, #32]
 8003cba:	e001      	b.n	8003cc0 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	689a      	ldr	r2, [r3, #8]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	6a3a      	ldr	r2, [r7, #32]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f003 0310 	and.w	r3, r3, #16
 8003cd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	43db      	mvns	r3, r3
 8003ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	791b      	ldrb	r3, [r3, #4]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d102      	bne.n	8003cf4 <HAL_DAC_ConfigChannel+0x1e4>
 8003cee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cf2:	e000      	b.n	8003cf6 <HAL_DAC_ConfigChannel+0x1e6>
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f003 0310 	and.w	r3, r3, #16
 8003d02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d06:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0a:	43db      	mvns	r3, r3
 8003d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d0e:	4013      	ands	r3, r2
 8003d10:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	795b      	ldrb	r3, [r3, #5]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d102      	bne.n	8003d20 <HAL_DAC_ConfigChannel+0x210>
 8003d1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d1e:	e000      	b.n	8003d22 <HAL_DAC_ConfigChannel+0x212>
 8003d20:	2300      	movs	r3, #0
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003d2e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d114      	bne.n	8003d62 <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003d38:	f001 fa9e 	bl	8005278 <HAL_RCC_GetHCLKFreq>
 8003d3c:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	4a47      	ldr	r2, [pc, #284]	; (8003e60 <HAL_DAC_ConfigChannel+0x350>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d904      	bls.n	8003d50 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d4e:	e00d      	b.n	8003d6c <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	4a44      	ldr	r2, [pc, #272]	; (8003e64 <HAL_DAC_ConfigChannel+0x354>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d909      	bls.n	8003d6c <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d60:	e004      	b.n	8003d6c <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f003 0310 	and.w	r3, r3, #16
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	fa02 f303 	lsl.w	r3, r2, r3
 8003d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	6819      	ldr	r1, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f003 0310 	and.w	r3, r3, #16
 8003d92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d96:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9a:	43da      	mvns	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	400a      	ands	r2, r1
 8003da2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f003 0310 	and.w	r3, r3, #16
 8003db2:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003db6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dba:	43db      	mvns	r3, r3
 8003dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f003 0310 	and.w	r3, r3, #16
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003de0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	6819      	ldr	r1, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f003 0310 	and.w	r3, r3, #16
 8003dee:	22c0      	movs	r2, #192	; 0xc0
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	43da      	mvns	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	400a      	ands	r2, r1
 8003dfc:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	089b      	lsrs	r3, r3, #2
 8003e04:	f003 030f 	and.w	r3, r3, #15
 8003e08:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	089b      	lsrs	r3, r3, #2
 8003e10:	021b      	lsls	r3, r3, #8
 8003e12:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f003 0310 	and.w	r3, r3, #16
 8003e28:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e30:	43db      	mvns	r3, r3
 8003e32:	ea02 0103 	and.w	r1, r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f003 0310 	and.w	r3, r3, #16
 8003e3c:	69ba      	ldr	r2, [r7, #24]
 8003e3e:	409a      	lsls	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	430a      	orrs	r2, r1
 8003e46:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3728      	adds	r7, #40	; 0x28
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	09896800 	.word	0x09896800
 8003e64:	04c4b400 	.word	0x04c4b400

08003e68 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e74:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f7ff fe2c 	bl	8003ad4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	711a      	strb	r2, [r3, #4]
}
 8003e82:	bf00      	nop
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b084      	sub	sp, #16
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e96:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f7ff fe25 	bl	8003ae8 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003e9e:	bf00      	nop
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b084      	sub	sp, #16
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	f043 0204 	orr.w	r2, r3, #4
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f7ff fe1b 	bl	8003afc <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	711a      	strb	r2, [r3, #4]
}
 8003ecc:	bf00      	nop
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f7ff ffd8 	bl	8003ed4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2201      	movs	r2, #1
 8003f28:	711a      	strb	r2, [r3, #4]
}
 8003f2a:	bf00      	nop
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b084      	sub	sp, #16
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f7ff ffd1 	bl	8003ee8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003f46:	bf00      	nop
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b084      	sub	sp, #16
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	f043 0204 	orr.w	r2, r3, #4
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f7ff ffc7 	bl	8003efc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2201      	movs	r2, #1
 8003f72:	711a      	strb	r2, [r3, #4]
}
 8003f74:	bf00      	nop
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e08d      	b.n	80040aa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	461a      	mov	r2, r3
 8003f94:	4b47      	ldr	r3, [pc, #284]	; (80040b4 <HAL_DMA_Init+0x138>)
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d80f      	bhi.n	8003fba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	4b45      	ldr	r3, [pc, #276]	; (80040b8 <HAL_DMA_Init+0x13c>)
 8003fa2:	4413      	add	r3, r2
 8003fa4:	4a45      	ldr	r2, [pc, #276]	; (80040bc <HAL_DMA_Init+0x140>)
 8003fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8003faa:	091b      	lsrs	r3, r3, #4
 8003fac:	009a      	lsls	r2, r3, #2
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a42      	ldr	r2, [pc, #264]	; (80040c0 <HAL_DMA_Init+0x144>)
 8003fb6:	641a      	str	r2, [r3, #64]	; 0x40
 8003fb8:	e00e      	b.n	8003fd8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	4b40      	ldr	r3, [pc, #256]	; (80040c4 <HAL_DMA_Init+0x148>)
 8003fc2:	4413      	add	r3, r2
 8003fc4:	4a3d      	ldr	r2, [pc, #244]	; (80040bc <HAL_DMA_Init+0x140>)
 8003fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fca:	091b      	lsrs	r3, r3, #4
 8003fcc:	009a      	lsls	r2, r3, #2
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a3c      	ldr	r2, [pc, #240]	; (80040c8 <HAL_DMA_Init+0x14c>)
 8003fd6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2202      	movs	r2, #2
 8003fdc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ff2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003ffc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004008:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004014:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	4313      	orrs	r3, r2
 8004020:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 f9b6 	bl	800439c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004038:	d102      	bne.n	8004040 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685a      	ldr	r2, [r3, #4]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004048:	b2d2      	uxtb	r2, r2
 800404a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004054:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d010      	beq.n	8004080 <HAL_DMA_Init+0x104>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	2b04      	cmp	r3, #4
 8004064:	d80c      	bhi.n	8004080 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f9d6 	bl	8004418 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004070:	2200      	movs	r2, #0
 8004072:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800407c:	605a      	str	r2, [r3, #4]
 800407e:	e008      	b.n	8004092 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	40020407 	.word	0x40020407
 80040b8:	bffdfff8 	.word	0xbffdfff8
 80040bc:	cccccccd 	.word	0xcccccccd
 80040c0:	40020000 	.word	0x40020000
 80040c4:	bffdfbf8 	.word	0xbffdfbf8
 80040c8:	40020400 	.word	0x40020400

080040cc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b086      	sub	sp, #24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
 80040d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040da:	2300      	movs	r3, #0
 80040dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d101      	bne.n	80040ec <HAL_DMA_Start_IT+0x20>
 80040e8:	2302      	movs	r3, #2
 80040ea:	e066      	b.n	80041ba <HAL_DMA_Start_IT+0xee>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d155      	bne.n	80041ac <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2202      	movs	r2, #2
 8004104:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f022 0201 	bic.w	r2, r2, #1
 800411c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	68b9      	ldr	r1, [r7, #8]
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f000 f8fb 	bl	8004320 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412e:	2b00      	cmp	r3, #0
 8004130:	d008      	beq.n	8004144 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f042 020e 	orr.w	r2, r2, #14
 8004140:	601a      	str	r2, [r3, #0]
 8004142:	e00f      	b.n	8004164 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f022 0204 	bic.w	r2, r2, #4
 8004152:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f042 020a 	orr.w	r2, r2, #10
 8004162:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d007      	beq.n	8004182 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800417c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004180:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004186:	2b00      	cmp	r3, #0
 8004188:	d007      	beq.n	800419a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004194:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004198:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f042 0201 	orr.w	r2, r2, #1
 80041a8:	601a      	str	r2, [r3, #0]
 80041aa:	e005      	b.n	80041b8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80041b4:	2302      	movs	r3, #2
 80041b6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80041b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3718      	adds	r7, #24
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b084      	sub	sp, #16
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041de:	f003 031f 	and.w	r3, r3, #31
 80041e2:	2204      	movs	r2, #4
 80041e4:	409a      	lsls	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	4013      	ands	r3, r2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d026      	beq.n	800423c <HAL_DMA_IRQHandler+0x7a>
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	f003 0304 	and.w	r3, r3, #4
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d021      	beq.n	800423c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0320 	and.w	r3, r3, #32
 8004202:	2b00      	cmp	r3, #0
 8004204:	d107      	bne.n	8004216 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 0204 	bic.w	r2, r2, #4
 8004214:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421a:	f003 021f 	and.w	r2, r3, #31
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004222:	2104      	movs	r1, #4
 8004224:	fa01 f202 	lsl.w	r2, r1, r2
 8004228:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422e:	2b00      	cmp	r3, #0
 8004230:	d071      	beq.n	8004316 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800423a:	e06c      	b.n	8004316 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004240:	f003 031f 	and.w	r3, r3, #31
 8004244:	2202      	movs	r2, #2
 8004246:	409a      	lsls	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	4013      	ands	r3, r2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d02e      	beq.n	80042ae <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d029      	beq.n	80042ae <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0320 	and.w	r3, r3, #32
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10b      	bne.n	8004280 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 020a 	bic.w	r2, r2, #10
 8004276:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004284:	f003 021f 	and.w	r2, r3, #31
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428c:	2102      	movs	r1, #2
 800428e:	fa01 f202 	lsl.w	r2, r1, r2
 8004292:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d038      	beq.n	8004316 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80042ac:	e033      	b.n	8004316 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b2:	f003 031f 	and.w	r3, r3, #31
 80042b6:	2208      	movs	r2, #8
 80042b8:	409a      	lsls	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	4013      	ands	r3, r2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d02a      	beq.n	8004318 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	f003 0308 	and.w	r3, r3, #8
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d025      	beq.n	8004318 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 020e 	bic.w	r2, r2, #14
 80042da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e0:	f003 021f 	and.w	r2, r3, #31
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e8:	2101      	movs	r1, #1
 80042ea:	fa01 f202 	lsl.w	r2, r1, r2
 80042ee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800430a:	2b00      	cmp	r3, #0
 800430c:	d004      	beq.n	8004318 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004316:	bf00      	nop
 8004318:	bf00      	nop
}
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
 800432c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004336:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433c:	2b00      	cmp	r3, #0
 800433e:	d004      	beq.n	800434a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004348:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434e:	f003 021f 	and.w	r2, r3, #31
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004356:	2101      	movs	r1, #1
 8004358:	fa01 f202 	lsl.w	r2, r1, r2
 800435c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	683a      	ldr	r2, [r7, #0]
 8004364:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	2b10      	cmp	r3, #16
 800436c:	d108      	bne.n	8004380 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800437e:	e007      	b.n	8004390 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68ba      	ldr	r2, [r7, #8]
 8004386:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	60da      	str	r2, [r3, #12]
}
 8004390:	bf00      	nop
 8004392:	3714      	adds	r7, #20
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800439c:	b480      	push	{r7}
 800439e:	b087      	sub	sp, #28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	461a      	mov	r2, r3
 80043aa:	4b16      	ldr	r3, [pc, #88]	; (8004404 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d802      	bhi.n	80043b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80043b0:	4b15      	ldr	r3, [pc, #84]	; (8004408 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80043b2:	617b      	str	r3, [r7, #20]
 80043b4:	e001      	b.n	80043ba <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80043b6:	4b15      	ldr	r3, [pc, #84]	; (800440c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80043b8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	3b08      	subs	r3, #8
 80043c6:	4a12      	ldr	r2, [pc, #72]	; (8004410 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80043c8:	fba2 2303 	umull	r2, r3, r2, r3
 80043cc:	091b      	lsrs	r3, r3, #4
 80043ce:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d4:	089b      	lsrs	r3, r3, #2
 80043d6:	009a      	lsls	r2, r3, #2
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	4413      	add	r3, r2
 80043dc:	461a      	mov	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a0b      	ldr	r2, [pc, #44]	; (8004414 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80043e6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f003 031f 	and.w	r3, r3, #31
 80043ee:	2201      	movs	r2, #1
 80043f0:	409a      	lsls	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80043f6:	bf00      	nop
 80043f8:	371c      	adds	r7, #28
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	40020407 	.word	0x40020407
 8004408:	40020800 	.word	0x40020800
 800440c:	40020820 	.word	0x40020820
 8004410:	cccccccd 	.word	0xcccccccd
 8004414:	40020880 	.word	0x40020880

08004418 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	b2db      	uxtb	r3, r3
 8004426:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	4b0b      	ldr	r3, [pc, #44]	; (8004458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800442c:	4413      	add	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	461a      	mov	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a08      	ldr	r2, [pc, #32]	; (800445c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800443a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	3b01      	subs	r3, #1
 8004440:	f003 031f 	and.w	r3, r3, #31
 8004444:	2201      	movs	r2, #1
 8004446:	409a      	lsls	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800444c:	bf00      	nop
 800444e:	3714      	adds	r7, #20
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	1000823f 	.word	0x1000823f
 800445c:	40020940 	.word	0x40020940

08004460 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004460:	b480      	push	{r7}
 8004462:	b087      	sub	sp, #28
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800446a:	2300      	movs	r3, #0
 800446c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800446e:	e15a      	b.n	8004726 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	2101      	movs	r1, #1
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	fa01 f303 	lsl.w	r3, r1, r3
 800447c:	4013      	ands	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2b00      	cmp	r3, #0
 8004484:	f000 814c 	beq.w	8004720 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d00b      	beq.n	80044a8 <HAL_GPIO_Init+0x48>
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	2b02      	cmp	r3, #2
 8004496:	d007      	beq.n	80044a8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800449c:	2b11      	cmp	r3, #17
 800449e:	d003      	beq.n	80044a8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	2b12      	cmp	r3, #18
 80044a6:	d130      	bne.n	800450a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	005b      	lsls	r3, r3, #1
 80044b2:	2203      	movs	r2, #3
 80044b4:	fa02 f303 	lsl.w	r3, r2, r3
 80044b8:	43db      	mvns	r3, r3
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	4013      	ands	r3, r2
 80044be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	68da      	ldr	r2, [r3, #12]
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	005b      	lsls	r3, r3, #1
 80044c8:	fa02 f303 	lsl.w	r3, r2, r3
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044de:	2201      	movs	r2, #1
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	fa02 f303 	lsl.w	r3, r2, r3
 80044e6:	43db      	mvns	r3, r3
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	4013      	ands	r3, r2
 80044ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	091b      	lsrs	r3, r3, #4
 80044f4:	f003 0201 	and.w	r2, r3, #1
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	fa02 f303 	lsl.w	r3, r2, r3
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	4313      	orrs	r3, r2
 8004502:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	005b      	lsls	r3, r3, #1
 8004514:	2203      	movs	r2, #3
 8004516:	fa02 f303 	lsl.w	r3, r2, r3
 800451a:	43db      	mvns	r3, r3
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	4013      	ands	r3, r2
 8004520:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	689a      	ldr	r2, [r3, #8]
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	fa02 f303 	lsl.w	r3, r2, r3
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	4313      	orrs	r3, r2
 8004532:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	2b02      	cmp	r3, #2
 8004540:	d003      	beq.n	800454a <HAL_GPIO_Init+0xea>
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	2b12      	cmp	r3, #18
 8004548:	d123      	bne.n	8004592 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	08da      	lsrs	r2, r3, #3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	3208      	adds	r2, #8
 8004552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004556:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	f003 0307 	and.w	r3, r3, #7
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	220f      	movs	r2, #15
 8004562:	fa02 f303 	lsl.w	r3, r2, r3
 8004566:	43db      	mvns	r3, r3
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	4013      	ands	r3, r2
 800456c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	691a      	ldr	r2, [r3, #16]
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f003 0307 	and.w	r3, r3, #7
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	fa02 f303 	lsl.w	r3, r2, r3
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	4313      	orrs	r3, r2
 8004582:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	08da      	lsrs	r2, r3, #3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	3208      	adds	r2, #8
 800458c:	6939      	ldr	r1, [r7, #16]
 800458e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	005b      	lsls	r3, r3, #1
 800459c:	2203      	movs	r2, #3
 800459e:	fa02 f303 	lsl.w	r3, r2, r3
 80045a2:	43db      	mvns	r3, r3
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	4013      	ands	r3, r2
 80045a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f003 0203 	and.w	r2, r3, #3
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	005b      	lsls	r3, r3, #1
 80045b6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	4313      	orrs	r3, r2
 80045be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f000 80a6 	beq.w	8004720 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045d4:	4b5b      	ldr	r3, [pc, #364]	; (8004744 <HAL_GPIO_Init+0x2e4>)
 80045d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045d8:	4a5a      	ldr	r2, [pc, #360]	; (8004744 <HAL_GPIO_Init+0x2e4>)
 80045da:	f043 0301 	orr.w	r3, r3, #1
 80045de:	6613      	str	r3, [r2, #96]	; 0x60
 80045e0:	4b58      	ldr	r3, [pc, #352]	; (8004744 <HAL_GPIO_Init+0x2e4>)
 80045e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	60bb      	str	r3, [r7, #8]
 80045ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045ec:	4a56      	ldr	r2, [pc, #344]	; (8004748 <HAL_GPIO_Init+0x2e8>)
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	089b      	lsrs	r3, r3, #2
 80045f2:	3302      	adds	r3, #2
 80045f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f003 0303 	and.w	r3, r3, #3
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	220f      	movs	r2, #15
 8004604:	fa02 f303 	lsl.w	r3, r2, r3
 8004608:	43db      	mvns	r3, r3
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	4013      	ands	r3, r2
 800460e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004616:	d01f      	beq.n	8004658 <HAL_GPIO_Init+0x1f8>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a4c      	ldr	r2, [pc, #304]	; (800474c <HAL_GPIO_Init+0x2ec>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d019      	beq.n	8004654 <HAL_GPIO_Init+0x1f4>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a4b      	ldr	r2, [pc, #300]	; (8004750 <HAL_GPIO_Init+0x2f0>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d013      	beq.n	8004650 <HAL_GPIO_Init+0x1f0>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a4a      	ldr	r2, [pc, #296]	; (8004754 <HAL_GPIO_Init+0x2f4>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d00d      	beq.n	800464c <HAL_GPIO_Init+0x1ec>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a49      	ldr	r2, [pc, #292]	; (8004758 <HAL_GPIO_Init+0x2f8>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d007      	beq.n	8004648 <HAL_GPIO_Init+0x1e8>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a48      	ldr	r2, [pc, #288]	; (800475c <HAL_GPIO_Init+0x2fc>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d101      	bne.n	8004644 <HAL_GPIO_Init+0x1e4>
 8004640:	2305      	movs	r3, #5
 8004642:	e00a      	b.n	800465a <HAL_GPIO_Init+0x1fa>
 8004644:	2306      	movs	r3, #6
 8004646:	e008      	b.n	800465a <HAL_GPIO_Init+0x1fa>
 8004648:	2304      	movs	r3, #4
 800464a:	e006      	b.n	800465a <HAL_GPIO_Init+0x1fa>
 800464c:	2303      	movs	r3, #3
 800464e:	e004      	b.n	800465a <HAL_GPIO_Init+0x1fa>
 8004650:	2302      	movs	r3, #2
 8004652:	e002      	b.n	800465a <HAL_GPIO_Init+0x1fa>
 8004654:	2301      	movs	r3, #1
 8004656:	e000      	b.n	800465a <HAL_GPIO_Init+0x1fa>
 8004658:	2300      	movs	r3, #0
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	f002 0203 	and.w	r2, r2, #3
 8004660:	0092      	lsls	r2, r2, #2
 8004662:	4093      	lsls	r3, r2
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	4313      	orrs	r3, r2
 8004668:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800466a:	4937      	ldr	r1, [pc, #220]	; (8004748 <HAL_GPIO_Init+0x2e8>)
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	089b      	lsrs	r3, r3, #2
 8004670:	3302      	adds	r3, #2
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004678:	4b39      	ldr	r3, [pc, #228]	; (8004760 <HAL_GPIO_Init+0x300>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	43db      	mvns	r3, r3
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	4013      	ands	r3, r2
 8004686:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d003      	beq.n	800469c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	4313      	orrs	r3, r2
 800469a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800469c:	4a30      	ldr	r2, [pc, #192]	; (8004760 <HAL_GPIO_Init+0x300>)
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80046a2:	4b2f      	ldr	r3, [pc, #188]	; (8004760 <HAL_GPIO_Init+0x300>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	43db      	mvns	r3, r3
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	4013      	ands	r3, r2
 80046b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d003      	beq.n	80046c6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80046c6:	4a26      	ldr	r2, [pc, #152]	; (8004760 <HAL_GPIO_Init+0x300>)
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046cc:	4b24      	ldr	r3, [pc, #144]	; (8004760 <HAL_GPIO_Init+0x300>)
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	43db      	mvns	r3, r3
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	4013      	ands	r3, r2
 80046da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d003      	beq.n	80046f0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80046f0:	4a1b      	ldr	r2, [pc, #108]	; (8004760 <HAL_GPIO_Init+0x300>)
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80046f6:	4b1a      	ldr	r3, [pc, #104]	; (8004760 <HAL_GPIO_Init+0x300>)
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	43db      	mvns	r3, r3
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	4013      	ands	r3, r2
 8004704:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	4313      	orrs	r3, r2
 8004718:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800471a:	4a11      	ldr	r2, [pc, #68]	; (8004760 <HAL_GPIO_Init+0x300>)
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	3301      	adds	r3, #1
 8004724:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	fa22 f303 	lsr.w	r3, r2, r3
 8004730:	2b00      	cmp	r3, #0
 8004732:	f47f ae9d 	bne.w	8004470 <HAL_GPIO_Init+0x10>
  }
}
 8004736:	bf00      	nop
 8004738:	371c      	adds	r7, #28
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	40021000 	.word	0x40021000
 8004748:	40010000 	.word	0x40010000
 800474c:	48000400 	.word	0x48000400
 8004750:	48000800 	.word	0x48000800
 8004754:	48000c00 	.word	0x48000c00
 8004758:	48001000 	.word	0x48001000
 800475c:	48001400 	.word	0x48001400
 8004760:	40010400 	.word	0x40010400

08004764 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	460b      	mov	r3, r1
 800476e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	691a      	ldr	r2, [r3, #16]
 8004774:	887b      	ldrh	r3, [r7, #2]
 8004776:	4013      	ands	r3, r2
 8004778:	2b00      	cmp	r3, #0
 800477a:	d002      	beq.n	8004782 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800477c:	2301      	movs	r3, #1
 800477e:	73fb      	strb	r3, [r7, #15]
 8004780:	e001      	b.n	8004786 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004782:	2300      	movs	r3, #0
 8004784:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004786:	7bfb      	ldrb	r3, [r7, #15]
}
 8004788:	4618      	mov	r0, r3
 800478a:	3714      	adds	r7, #20
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	460b      	mov	r3, r1
 800479e:	807b      	strh	r3, [r7, #2]
 80047a0:	4613      	mov	r3, r2
 80047a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047a4:	787b      	ldrb	r3, [r7, #1]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80047aa:	887a      	ldrh	r2, [r7, #2]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80047b0:	e002      	b.n	80047b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80047b2:	887a      	ldrh	r2, [r7, #2]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d141      	bne.n	8004856 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80047d2:	4b4b      	ldr	r3, [pc, #300]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80047da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047de:	d131      	bne.n	8004844 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047e0:	4b47      	ldr	r3, [pc, #284]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047e6:	4a46      	ldr	r2, [pc, #280]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80047f0:	4b43      	ldr	r3, [pc, #268]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80047f8:	4a41      	ldr	r2, [pc, #260]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004800:	4b40      	ldr	r3, [pc, #256]	; (8004904 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2232      	movs	r2, #50	; 0x32
 8004806:	fb02 f303 	mul.w	r3, r2, r3
 800480a:	4a3f      	ldr	r2, [pc, #252]	; (8004908 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800480c:	fba2 2303 	umull	r2, r3, r2, r3
 8004810:	0c9b      	lsrs	r3, r3, #18
 8004812:	3301      	adds	r3, #1
 8004814:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004816:	e002      	b.n	800481e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	3b01      	subs	r3, #1
 800481c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800481e:	4b38      	ldr	r3, [pc, #224]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800482a:	d102      	bne.n	8004832 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1f2      	bne.n	8004818 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004832:	4b33      	ldr	r3, [pc, #204]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800483a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800483e:	d158      	bne.n	80048f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e057      	b.n	80048f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004844:	4b2e      	ldr	r3, [pc, #184]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004846:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800484a:	4a2d      	ldr	r2, [pc, #180]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800484c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004850:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004854:	e04d      	b.n	80048f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800485c:	d141      	bne.n	80048e2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800485e:	4b28      	ldr	r3, [pc, #160]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800486a:	d131      	bne.n	80048d0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800486c:	4b24      	ldr	r3, [pc, #144]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800486e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004872:	4a23      	ldr	r2, [pc, #140]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004878:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800487c:	4b20      	ldr	r3, [pc, #128]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004884:	4a1e      	ldr	r2, [pc, #120]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004886:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800488a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800488c:	4b1d      	ldr	r3, [pc, #116]	; (8004904 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2232      	movs	r2, #50	; 0x32
 8004892:	fb02 f303 	mul.w	r3, r2, r3
 8004896:	4a1c      	ldr	r2, [pc, #112]	; (8004908 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004898:	fba2 2303 	umull	r2, r3, r2, r3
 800489c:	0c9b      	lsrs	r3, r3, #18
 800489e:	3301      	adds	r3, #1
 80048a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048a2:	e002      	b.n	80048aa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	3b01      	subs	r3, #1
 80048a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048aa:	4b15      	ldr	r3, [pc, #84]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048b6:	d102      	bne.n	80048be <HAL_PWREx_ControlVoltageScaling+0xfa>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1f2      	bne.n	80048a4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048be:	4b10      	ldr	r3, [pc, #64]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048ca:	d112      	bne.n	80048f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e011      	b.n	80048f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048d0:	4b0b      	ldr	r3, [pc, #44]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048d6:	4a0a      	ldr	r2, [pc, #40]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80048e0:	e007      	b.n	80048f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80048e2:	4b07      	ldr	r3, [pc, #28]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80048ea:	4a05      	ldr	r2, [pc, #20]	; (8004900 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048f0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3714      	adds	r7, #20
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr
 8004900:	40007000 	.word	0x40007000
 8004904:	20001f44 	.word	0x20001f44
 8004908:	431bde83 	.word	0x431bde83

0800490c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b088      	sub	sp, #32
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e308      	b.n	8004f30 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b00      	cmp	r3, #0
 8004928:	d075      	beq.n	8004a16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800492a:	4ba3      	ldr	r3, [pc, #652]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f003 030c 	and.w	r3, r3, #12
 8004932:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004934:	4ba0      	ldr	r3, [pc, #640]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	f003 0303 	and.w	r3, r3, #3
 800493c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	2b0c      	cmp	r3, #12
 8004942:	d102      	bne.n	800494a <HAL_RCC_OscConfig+0x3e>
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	2b03      	cmp	r3, #3
 8004948:	d002      	beq.n	8004950 <HAL_RCC_OscConfig+0x44>
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	2b08      	cmp	r3, #8
 800494e:	d10b      	bne.n	8004968 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004950:	4b99      	ldr	r3, [pc, #612]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d05b      	beq.n	8004a14 <HAL_RCC_OscConfig+0x108>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d157      	bne.n	8004a14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e2e3      	b.n	8004f30 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004970:	d106      	bne.n	8004980 <HAL_RCC_OscConfig+0x74>
 8004972:	4b91      	ldr	r3, [pc, #580]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a90      	ldr	r2, [pc, #576]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800497c:	6013      	str	r3, [r2, #0]
 800497e:	e01d      	b.n	80049bc <HAL_RCC_OscConfig+0xb0>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004988:	d10c      	bne.n	80049a4 <HAL_RCC_OscConfig+0x98>
 800498a:	4b8b      	ldr	r3, [pc, #556]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a8a      	ldr	r2, [pc, #552]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004990:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004994:	6013      	str	r3, [r2, #0]
 8004996:	4b88      	ldr	r3, [pc, #544]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a87      	ldr	r2, [pc, #540]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 800499c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049a0:	6013      	str	r3, [r2, #0]
 80049a2:	e00b      	b.n	80049bc <HAL_RCC_OscConfig+0xb0>
 80049a4:	4b84      	ldr	r3, [pc, #528]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a83      	ldr	r2, [pc, #524]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 80049aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ae:	6013      	str	r3, [r2, #0]
 80049b0:	4b81      	ldr	r3, [pc, #516]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a80      	ldr	r2, [pc, #512]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 80049b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d013      	beq.n	80049ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c4:	f7fd faaa 	bl	8001f1c <HAL_GetTick>
 80049c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049ca:	e008      	b.n	80049de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049cc:	f7fd faa6 	bl	8001f1c <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b64      	cmp	r3, #100	; 0x64
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e2a8      	b.n	8004f30 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049de:	4b76      	ldr	r3, [pc, #472]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0f0      	beq.n	80049cc <HAL_RCC_OscConfig+0xc0>
 80049ea:	e014      	b.n	8004a16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ec:	f7fd fa96 	bl	8001f1c <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049f2:	e008      	b.n	8004a06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049f4:	f7fd fa92 	bl	8001f1c <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b64      	cmp	r3, #100	; 0x64
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e294      	b.n	8004f30 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a06:	4b6c      	ldr	r3, [pc, #432]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1f0      	bne.n	80049f4 <HAL_RCC_OscConfig+0xe8>
 8004a12:	e000      	b.n	8004a16 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d075      	beq.n	8004b0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a22:	4b65      	ldr	r3, [pc, #404]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f003 030c 	and.w	r3, r3, #12
 8004a2a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a2c:	4b62      	ldr	r3, [pc, #392]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	f003 0303 	and.w	r3, r3, #3
 8004a34:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	2b0c      	cmp	r3, #12
 8004a3a:	d102      	bne.n	8004a42 <HAL_RCC_OscConfig+0x136>
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d002      	beq.n	8004a48 <HAL_RCC_OscConfig+0x13c>
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	2b04      	cmp	r3, #4
 8004a46:	d11f      	bne.n	8004a88 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a48:	4b5b      	ldr	r3, [pc, #364]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d005      	beq.n	8004a60 <HAL_RCC_OscConfig+0x154>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d101      	bne.n	8004a60 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e267      	b.n	8004f30 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a60:	4b55      	ldr	r3, [pc, #340]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	061b      	lsls	r3, r3, #24
 8004a6e:	4952      	ldr	r1, [pc, #328]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004a74:	4b51      	ldr	r3, [pc, #324]	; (8004bbc <HAL_RCC_OscConfig+0x2b0>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7fd fa03 	bl	8001e84 <HAL_InitTick>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d043      	beq.n	8004b0c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e253      	b.n	8004f30 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d023      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a90:	4b49      	ldr	r3, [pc, #292]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a48      	ldr	r2, [pc, #288]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a9c:	f7fd fa3e 	bl	8001f1c <HAL_GetTick>
 8004aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004aa2:	e008      	b.n	8004ab6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aa4:	f7fd fa3a 	bl	8001f1c <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e23c      	b.n	8004f30 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ab6:	4b40      	ldr	r3, [pc, #256]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d0f0      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ac2:	4b3d      	ldr	r3, [pc, #244]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	061b      	lsls	r3, r3, #24
 8004ad0:	4939      	ldr	r1, [pc, #228]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	604b      	str	r3, [r1, #4]
 8004ad6:	e01a      	b.n	8004b0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ad8:	4b37      	ldr	r3, [pc, #220]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a36      	ldr	r2, [pc, #216]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004ade:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ae2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae4:	f7fd fa1a 	bl	8001f1c <HAL_GetTick>
 8004ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004aea:	e008      	b.n	8004afe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aec:	f7fd fa16 	bl	8001f1c <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e218      	b.n	8004f30 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004afe:	4b2e      	ldr	r3, [pc, #184]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1f0      	bne.n	8004aec <HAL_RCC_OscConfig+0x1e0>
 8004b0a:	e000      	b.n	8004b0e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b0c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0308 	and.w	r3, r3, #8
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d03c      	beq.n	8004b94 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d01c      	beq.n	8004b5c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b22:	4b25      	ldr	r3, [pc, #148]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004b24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b28:	4a23      	ldr	r2, [pc, #140]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004b2a:	f043 0301 	orr.w	r3, r3, #1
 8004b2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b32:	f7fd f9f3 	bl	8001f1c <HAL_GetTick>
 8004b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b38:	e008      	b.n	8004b4c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b3a:	f7fd f9ef 	bl	8001f1c <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d901      	bls.n	8004b4c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e1f1      	b.n	8004f30 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b4c:	4b1a      	ldr	r3, [pc, #104]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0ef      	beq.n	8004b3a <HAL_RCC_OscConfig+0x22e>
 8004b5a:	e01b      	b.n	8004b94 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b5c:	4b16      	ldr	r3, [pc, #88]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b62:	4a15      	ldr	r2, [pc, #84]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004b64:	f023 0301 	bic.w	r3, r3, #1
 8004b68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b6c:	f7fd f9d6 	bl	8001f1c <HAL_GetTick>
 8004b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b72:	e008      	b.n	8004b86 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b74:	f7fd f9d2 	bl	8001f1c <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e1d4      	b.n	8004f30 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b86:	4b0c      	ldr	r3, [pc, #48]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004b88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1ef      	bne.n	8004b74 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0304 	and.w	r3, r3, #4
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f000 80ab 	beq.w	8004cf8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ba6:	4b04      	ldr	r3, [pc, #16]	; (8004bb8 <HAL_RCC_OscConfig+0x2ac>)
 8004ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d106      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x2b4>
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e005      	b.n	8004bc2 <HAL_RCC_OscConfig+0x2b6>
 8004bb6:	bf00      	nop
 8004bb8:	40021000 	.word	0x40021000
 8004bbc:	20001f48 	.word	0x20001f48
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00d      	beq.n	8004be2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bc6:	4baf      	ldr	r3, [pc, #700]	; (8004e84 <HAL_RCC_OscConfig+0x578>)
 8004bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bca:	4aae      	ldr	r2, [pc, #696]	; (8004e84 <HAL_RCC_OscConfig+0x578>)
 8004bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bd0:	6593      	str	r3, [r2, #88]	; 0x58
 8004bd2:	4bac      	ldr	r3, [pc, #688]	; (8004e84 <HAL_RCC_OscConfig+0x578>)
 8004bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bda:	60fb      	str	r3, [r7, #12]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004bde:	2301      	movs	r3, #1
 8004be0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004be2:	4ba9      	ldr	r3, [pc, #676]	; (8004e88 <HAL_RCC_OscConfig+0x57c>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d118      	bne.n	8004c20 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bee:	4ba6      	ldr	r3, [pc, #664]	; (8004e88 <HAL_RCC_OscConfig+0x57c>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4aa5      	ldr	r2, [pc, #660]	; (8004e88 <HAL_RCC_OscConfig+0x57c>)
 8004bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bfa:	f7fd f98f 	bl	8001f1c <HAL_GetTick>
 8004bfe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c00:	e008      	b.n	8004c14 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c02:	f7fd f98b 	bl	8001f1c <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d901      	bls.n	8004c14 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e18d      	b.n	8004f30 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c14:	4b9c      	ldr	r3, [pc, #624]	; (8004e88 <HAL_RCC_OscConfig+0x57c>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d0f0      	beq.n	8004c02 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d108      	bne.n	8004c3a <HAL_RCC_OscConfig+0x32e>
 8004c28:	4b96      	ldr	r3, [pc, #600]	; (8004e84 <HAL_RCC_OscConfig+0x578>)
 8004c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c2e:	4a95      	ldr	r2, [pc, #596]	; (8004e84 <HAL_RCC_OscConfig+0x578>)
 8004c30:	f043 0301 	orr.w	r3, r3, #1
 8004c34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c38:	e024      	b.n	8004c84 <HAL_RCC_OscConfig+0x378>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	2b05      	cmp	r3, #5
 8004c40:	d110      	bne.n	8004c64 <HAL_RCC_OscConfig+0x358>
 8004c42:	4b90      	ldr	r3, [pc, #576]	; (8004e84 <HAL_RCC_OscConfig+0x578>)
 8004c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c48:	4a8e      	ldr	r2, [pc, #568]	; (8004e84 <HAL_RCC_OscConfig+0x578>)
 8004c4a:	f043 0304 	orr.w	r3, r3, #4
 8004c4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c52:	4b8c      	ldr	r3, [pc, #560]	; (8004e84 <HAL_RCC_OscConfig+0x578>)
 8004c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c58:	4a8a      	ldr	r2, [pc, #552]	; (8004e84 <HAL_RCC_OscConfig+0x578>)
 8004c5a:	f043 0301 	orr.w	r3, r3, #1
 8004c5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c62:	e00f      	b.n	8004c84 <HAL_RCC_OscConfig+0x378>
 8004c64:	4b87      	ldr	r3, [pc, #540]	; (8004e84 <HAL_RCC_OscConfig+0x578>)
 8004c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c6a:	4a86      	ldr	r2, [pc, #536]	; (8004e84 <HAL_RCC_OscConfig+0x578>)
 8004c6c:	f023 0301 	bic.w	r3, r3, #1
 8004c70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c74:	4b83      	ldr	r3, [pc, #524]	; (8004e84 <HAL_RCC_OscConfig+0x578>)
 8004c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c7a:	4a82      	ldr	r2, [pc, #520]	; (8004e84 <HAL_RCC_OscConfig+0x578>)
 8004c7c:	f023 0304 	bic.w	r3, r3, #4
 8004c80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d016      	beq.n	8004cba <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c8c:	f7fd f946 	bl	8001f1c <HAL_GetTick>
 8004c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c92:	e00a      	b.n	8004caa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c94:	f7fd f942 	bl	8001f1c <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d901      	bls.n	8004caa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e142      	b.n	8004f30 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004caa:	4b76      	ldr	r3, [pc, #472]	; (8004e84 <HAL_RCC_OscConfig+0x578>)
 8004cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d0ed      	beq.n	8004c94 <HAL_RCC_OscConfig+0x388>
 8004cb8:	e015      	b.n	8004ce6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cba:	f7fd f92f 	bl	8001f1c <HAL_GetTick>
 8004cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cc0:	e00a      	b.n	8004cd8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cc2:	f7fd f92b 	bl	8001f1c <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d901      	bls.n	8004cd8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e12b      	b.n	8004f30 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cd8:	4b6a      	ldr	r3, [pc, #424]	; (8004e84 <HAL_RCC_OscConfig+0x578>)
 8004cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1ed      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ce6:	7ffb      	ldrb	r3, [r7, #31]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d105      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cec:	4b65      	ldr	r3, [pc, #404]	; (8004e84 <HAL_RCC_OscConfig+0x578>)
 8004cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cf0:	4a64      	ldr	r2, [pc, #400]	; (8004e84 <HAL_RCC_OscConfig+0x578>)
 8004cf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cf6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0320 	and.w	r3, r3, #32
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d03c      	beq.n	8004d7e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d01c      	beq.n	8004d46 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d0c:	4b5d      	ldr	r3, [pc, #372]	; (8004e84 <HAL_RCC_OscConfig+0x578>)
 8004d0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d12:	4a5c      	ldr	r2, [pc, #368]	; (8004e84 <HAL_RCC_OscConfig+0x578>)
 8004d14:	f043 0301 	orr.w	r3, r3, #1
 8004d18:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d1c:	f7fd f8fe 	bl	8001f1c <HAL_GetTick>
 8004d20:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d22:	e008      	b.n	8004d36 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d24:	f7fd f8fa 	bl	8001f1c <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e0fc      	b.n	8004f30 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d36:	4b53      	ldr	r3, [pc, #332]	; (8004e84 <HAL_RCC_OscConfig+0x578>)
 8004d38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d0ef      	beq.n	8004d24 <HAL_RCC_OscConfig+0x418>
 8004d44:	e01b      	b.n	8004d7e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d46:	4b4f      	ldr	r3, [pc, #316]	; (8004e84 <HAL_RCC_OscConfig+0x578>)
 8004d48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d4c:	4a4d      	ldr	r2, [pc, #308]	; (8004e84 <HAL_RCC_OscConfig+0x578>)
 8004d4e:	f023 0301 	bic.w	r3, r3, #1
 8004d52:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d56:	f7fd f8e1 	bl	8001f1c <HAL_GetTick>
 8004d5a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d5c:	e008      	b.n	8004d70 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d5e:	f7fd f8dd 	bl	8001f1c <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d901      	bls.n	8004d70 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e0df      	b.n	8004f30 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d70:	4b44      	ldr	r3, [pc, #272]	; (8004e84 <HAL_RCC_OscConfig+0x578>)
 8004d72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1ef      	bne.n	8004d5e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	69db      	ldr	r3, [r3, #28]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f000 80d3 	beq.w	8004f2e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d88:	4b3e      	ldr	r3, [pc, #248]	; (8004e84 <HAL_RCC_OscConfig+0x578>)
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	f003 030c 	and.w	r3, r3, #12
 8004d90:	2b0c      	cmp	r3, #12
 8004d92:	f000 808d 	beq.w	8004eb0 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	69db      	ldr	r3, [r3, #28]
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d15a      	bne.n	8004e54 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d9e:	4b39      	ldr	r3, [pc, #228]	; (8004e84 <HAL_RCC_OscConfig+0x578>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a38      	ldr	r2, [pc, #224]	; (8004e84 <HAL_RCC_OscConfig+0x578>)
 8004da4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004da8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004daa:	f7fd f8b7 	bl	8001f1c <HAL_GetTick>
 8004dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004db0:	e008      	b.n	8004dc4 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004db2:	f7fd f8b3 	bl	8001f1c <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d901      	bls.n	8004dc4 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e0b5      	b.n	8004f30 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dc4:	4b2f      	ldr	r3, [pc, #188]	; (8004e84 <HAL_RCC_OscConfig+0x578>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1f0      	bne.n	8004db2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dd0:	4b2c      	ldr	r3, [pc, #176]	; (8004e84 <HAL_RCC_OscConfig+0x578>)
 8004dd2:	68da      	ldr	r2, [r3, #12]
 8004dd4:	4b2d      	ldr	r3, [pc, #180]	; (8004e8c <HAL_RCC_OscConfig+0x580>)
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	6a11      	ldr	r1, [r2, #32]
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004de0:	3a01      	subs	r2, #1
 8004de2:	0112      	lsls	r2, r2, #4
 8004de4:	4311      	orrs	r1, r2
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004dea:	0212      	lsls	r2, r2, #8
 8004dec:	4311      	orrs	r1, r2
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004df2:	0852      	lsrs	r2, r2, #1
 8004df4:	3a01      	subs	r2, #1
 8004df6:	0552      	lsls	r2, r2, #21
 8004df8:	4311      	orrs	r1, r2
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004dfe:	0852      	lsrs	r2, r2, #1
 8004e00:	3a01      	subs	r2, #1
 8004e02:	0652      	lsls	r2, r2, #25
 8004e04:	4311      	orrs	r1, r2
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004e0a:	06d2      	lsls	r2, r2, #27
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	491d      	ldr	r1, [pc, #116]	; (8004e84 <HAL_RCC_OscConfig+0x578>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e14:	4b1b      	ldr	r3, [pc, #108]	; (8004e84 <HAL_RCC_OscConfig+0x578>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a1a      	ldr	r2, [pc, #104]	; (8004e84 <HAL_RCC_OscConfig+0x578>)
 8004e1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e1e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e20:	4b18      	ldr	r3, [pc, #96]	; (8004e84 <HAL_RCC_OscConfig+0x578>)
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	4a17      	ldr	r2, [pc, #92]	; (8004e84 <HAL_RCC_OscConfig+0x578>)
 8004e26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e2a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e2c:	f7fd f876 	bl	8001f1c <HAL_GetTick>
 8004e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e32:	e008      	b.n	8004e46 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e34:	f7fd f872 	bl	8001f1c <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e074      	b.n	8004f30 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e46:	4b0f      	ldr	r3, [pc, #60]	; (8004e84 <HAL_RCC_OscConfig+0x578>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d0f0      	beq.n	8004e34 <HAL_RCC_OscConfig+0x528>
 8004e52:	e06c      	b.n	8004f2e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e54:	4b0b      	ldr	r3, [pc, #44]	; (8004e84 <HAL_RCC_OscConfig+0x578>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a0a      	ldr	r2, [pc, #40]	; (8004e84 <HAL_RCC_OscConfig+0x578>)
 8004e5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e5e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004e60:	4b08      	ldr	r3, [pc, #32]	; (8004e84 <HAL_RCC_OscConfig+0x578>)
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	4a07      	ldr	r2, [pc, #28]	; (8004e84 <HAL_RCC_OscConfig+0x578>)
 8004e66:	f023 0303 	bic.w	r3, r3, #3
 8004e6a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004e6c:	4b05      	ldr	r3, [pc, #20]	; (8004e84 <HAL_RCC_OscConfig+0x578>)
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	4a04      	ldr	r2, [pc, #16]	; (8004e84 <HAL_RCC_OscConfig+0x578>)
 8004e72:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e7a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e7c:	f7fd f84e 	bl	8001f1c <HAL_GetTick>
 8004e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e82:	e00e      	b.n	8004ea2 <HAL_RCC_OscConfig+0x596>
 8004e84:	40021000 	.word	0x40021000
 8004e88:	40007000 	.word	0x40007000
 8004e8c:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e90:	f7fd f844 	bl	8001f1c <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e046      	b.n	8004f30 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ea2:	4b25      	ldr	r3, [pc, #148]	; (8004f38 <HAL_RCC_OscConfig+0x62c>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1f0      	bne.n	8004e90 <HAL_RCC_OscConfig+0x584>
 8004eae:	e03e      	b.n	8004f2e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	69db      	ldr	r3, [r3, #28]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d101      	bne.n	8004ebc <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e039      	b.n	8004f30 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004ebc:	4b1e      	ldr	r3, [pc, #120]	; (8004f38 <HAL_RCC_OscConfig+0x62c>)
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f003 0203 	and.w	r2, r3, #3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d12c      	bne.n	8004f2a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eda:	3b01      	subs	r3, #1
 8004edc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d123      	bne.n	8004f2a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eec:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d11b      	bne.n	8004f2a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d113      	bne.n	8004f2a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0c:	085b      	lsrs	r3, r3, #1
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d109      	bne.n	8004f2a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f20:	085b      	lsrs	r3, r3, #1
 8004f22:	3b01      	subs	r3, #1
 8004f24:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d001      	beq.n	8004f2e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e000      	b.n	8004f30 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3720      	adds	r7, #32
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	40021000 	.word	0x40021000

08004f3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b086      	sub	sp, #24
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004f46:	2300      	movs	r3, #0
 8004f48:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d101      	bne.n	8004f54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e11e      	b.n	8005192 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f54:	4b91      	ldr	r3, [pc, #580]	; (800519c <HAL_RCC_ClockConfig+0x260>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 030f 	and.w	r3, r3, #15
 8004f5c:	683a      	ldr	r2, [r7, #0]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d910      	bls.n	8004f84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f62:	4b8e      	ldr	r3, [pc, #568]	; (800519c <HAL_RCC_ClockConfig+0x260>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f023 020f 	bic.w	r2, r3, #15
 8004f6a:	498c      	ldr	r1, [pc, #560]	; (800519c <HAL_RCC_ClockConfig+0x260>)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f72:	4b8a      	ldr	r3, [pc, #552]	; (800519c <HAL_RCC_ClockConfig+0x260>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 030f 	and.w	r3, r3, #15
 8004f7a:	683a      	ldr	r2, [r7, #0]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d001      	beq.n	8004f84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e106      	b.n	8005192 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0301 	and.w	r3, r3, #1
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d073      	beq.n	8005078 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	2b03      	cmp	r3, #3
 8004f96:	d129      	bne.n	8004fec <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f98:	4b81      	ldr	r3, [pc, #516]	; (80051a0 <HAL_RCC_ClockConfig+0x264>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d101      	bne.n	8004fa8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e0f4      	b.n	8005192 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004fa8:	f000 f972 	bl	8005290 <RCC_GetSysClockFreqFromPLLSource>
 8004fac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	4a7c      	ldr	r2, [pc, #496]	; (80051a4 <HAL_RCC_ClockConfig+0x268>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d93f      	bls.n	8005036 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004fb6:	4b7a      	ldr	r3, [pc, #488]	; (80051a0 <HAL_RCC_ClockConfig+0x264>)
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d009      	beq.n	8004fd6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d033      	beq.n	8005036 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d12f      	bne.n	8005036 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004fd6:	4b72      	ldr	r3, [pc, #456]	; (80051a0 <HAL_RCC_ClockConfig+0x264>)
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fde:	4a70      	ldr	r2, [pc, #448]	; (80051a0 <HAL_RCC_ClockConfig+0x264>)
 8004fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fe4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004fe6:	2380      	movs	r3, #128	; 0x80
 8004fe8:	617b      	str	r3, [r7, #20]
 8004fea:	e024      	b.n	8005036 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d107      	bne.n	8005004 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ff4:	4b6a      	ldr	r3, [pc, #424]	; (80051a0 <HAL_RCC_ClockConfig+0x264>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d109      	bne.n	8005014 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e0c6      	b.n	8005192 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005004:	4b66      	ldr	r3, [pc, #408]	; (80051a0 <HAL_RCC_ClockConfig+0x264>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800500c:	2b00      	cmp	r3, #0
 800500e:	d101      	bne.n	8005014 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e0be      	b.n	8005192 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005014:	f000 f8ce 	bl	80051b4 <HAL_RCC_GetSysClockFreq>
 8005018:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	4a61      	ldr	r2, [pc, #388]	; (80051a4 <HAL_RCC_ClockConfig+0x268>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d909      	bls.n	8005036 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005022:	4b5f      	ldr	r3, [pc, #380]	; (80051a0 <HAL_RCC_ClockConfig+0x264>)
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800502a:	4a5d      	ldr	r2, [pc, #372]	; (80051a0 <HAL_RCC_ClockConfig+0x264>)
 800502c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005030:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005032:	2380      	movs	r3, #128	; 0x80
 8005034:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005036:	4b5a      	ldr	r3, [pc, #360]	; (80051a0 <HAL_RCC_ClockConfig+0x264>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f023 0203 	bic.w	r2, r3, #3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	4957      	ldr	r1, [pc, #348]	; (80051a0 <HAL_RCC_ClockConfig+0x264>)
 8005044:	4313      	orrs	r3, r2
 8005046:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005048:	f7fc ff68 	bl	8001f1c <HAL_GetTick>
 800504c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800504e:	e00a      	b.n	8005066 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005050:	f7fc ff64 	bl	8001f1c <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	f241 3288 	movw	r2, #5000	; 0x1388
 800505e:	4293      	cmp	r3, r2
 8005060:	d901      	bls.n	8005066 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e095      	b.n	8005192 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005066:	4b4e      	ldr	r3, [pc, #312]	; (80051a0 <HAL_RCC_ClockConfig+0x264>)
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f003 020c 	and.w	r2, r3, #12
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	429a      	cmp	r2, r3
 8005076:	d1eb      	bne.n	8005050 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0302 	and.w	r3, r3, #2
 8005080:	2b00      	cmp	r3, #0
 8005082:	d023      	beq.n	80050cc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0304 	and.w	r3, r3, #4
 800508c:	2b00      	cmp	r3, #0
 800508e:	d005      	beq.n	800509c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005090:	4b43      	ldr	r3, [pc, #268]	; (80051a0 <HAL_RCC_ClockConfig+0x264>)
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	4a42      	ldr	r2, [pc, #264]	; (80051a0 <HAL_RCC_ClockConfig+0x264>)
 8005096:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800509a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0308 	and.w	r3, r3, #8
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d007      	beq.n	80050b8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80050a8:	4b3d      	ldr	r3, [pc, #244]	; (80051a0 <HAL_RCC_ClockConfig+0x264>)
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80050b0:	4a3b      	ldr	r2, [pc, #236]	; (80051a0 <HAL_RCC_ClockConfig+0x264>)
 80050b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80050b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050b8:	4b39      	ldr	r3, [pc, #228]	; (80051a0 <HAL_RCC_ClockConfig+0x264>)
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	4936      	ldr	r1, [pc, #216]	; (80051a0 <HAL_RCC_ClockConfig+0x264>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	608b      	str	r3, [r1, #8]
 80050ca:	e008      	b.n	80050de <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	2b80      	cmp	r3, #128	; 0x80
 80050d0:	d105      	bne.n	80050de <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80050d2:	4b33      	ldr	r3, [pc, #204]	; (80051a0 <HAL_RCC_ClockConfig+0x264>)
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	4a32      	ldr	r2, [pc, #200]	; (80051a0 <HAL_RCC_ClockConfig+0x264>)
 80050d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050dc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050de:	4b2f      	ldr	r3, [pc, #188]	; (800519c <HAL_RCC_ClockConfig+0x260>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 030f 	and.w	r3, r3, #15
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d21d      	bcs.n	8005128 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ec:	4b2b      	ldr	r3, [pc, #172]	; (800519c <HAL_RCC_ClockConfig+0x260>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f023 020f 	bic.w	r2, r3, #15
 80050f4:	4929      	ldr	r1, [pc, #164]	; (800519c <HAL_RCC_ClockConfig+0x260>)
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80050fc:	f7fc ff0e 	bl	8001f1c <HAL_GetTick>
 8005100:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005102:	e00a      	b.n	800511a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005104:	f7fc ff0a 	bl	8001f1c <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005112:	4293      	cmp	r3, r2
 8005114:	d901      	bls.n	800511a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e03b      	b.n	8005192 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800511a:	4b20      	ldr	r3, [pc, #128]	; (800519c <HAL_RCC_ClockConfig+0x260>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 030f 	and.w	r3, r3, #15
 8005122:	683a      	ldr	r2, [r7, #0]
 8005124:	429a      	cmp	r2, r3
 8005126:	d1ed      	bne.n	8005104 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0304 	and.w	r3, r3, #4
 8005130:	2b00      	cmp	r3, #0
 8005132:	d008      	beq.n	8005146 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005134:	4b1a      	ldr	r3, [pc, #104]	; (80051a0 <HAL_RCC_ClockConfig+0x264>)
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	4917      	ldr	r1, [pc, #92]	; (80051a0 <HAL_RCC_ClockConfig+0x264>)
 8005142:	4313      	orrs	r3, r2
 8005144:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0308 	and.w	r3, r3, #8
 800514e:	2b00      	cmp	r3, #0
 8005150:	d009      	beq.n	8005166 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005152:	4b13      	ldr	r3, [pc, #76]	; (80051a0 <HAL_RCC_ClockConfig+0x264>)
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	00db      	lsls	r3, r3, #3
 8005160:	490f      	ldr	r1, [pc, #60]	; (80051a0 <HAL_RCC_ClockConfig+0x264>)
 8005162:	4313      	orrs	r3, r2
 8005164:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005166:	f000 f825 	bl	80051b4 <HAL_RCC_GetSysClockFreq>
 800516a:	4601      	mov	r1, r0
 800516c:	4b0c      	ldr	r3, [pc, #48]	; (80051a0 <HAL_RCC_ClockConfig+0x264>)
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	091b      	lsrs	r3, r3, #4
 8005172:	f003 030f 	and.w	r3, r3, #15
 8005176:	4a0c      	ldr	r2, [pc, #48]	; (80051a8 <HAL_RCC_ClockConfig+0x26c>)
 8005178:	5cd3      	ldrb	r3, [r2, r3]
 800517a:	f003 031f 	and.w	r3, r3, #31
 800517e:	fa21 f303 	lsr.w	r3, r1, r3
 8005182:	4a0a      	ldr	r2, [pc, #40]	; (80051ac <HAL_RCC_ClockConfig+0x270>)
 8005184:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005186:	4b0a      	ldr	r3, [pc, #40]	; (80051b0 <HAL_RCC_ClockConfig+0x274>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4618      	mov	r0, r3
 800518c:	f7fc fe7a 	bl	8001e84 <HAL_InitTick>
 8005190:	4603      	mov	r3, r0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3718      	adds	r7, #24
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	40022000 	.word	0x40022000
 80051a0:	40021000 	.word	0x40021000
 80051a4:	04c4b400 	.word	0x04c4b400
 80051a8:	0800963c 	.word	0x0800963c
 80051ac:	20001f44 	.word	0x20001f44
 80051b0:	20001f48 	.word	0x20001f48

080051b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b087      	sub	sp, #28
 80051b8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80051ba:	4b2c      	ldr	r3, [pc, #176]	; (800526c <HAL_RCC_GetSysClockFreq+0xb8>)
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f003 030c 	and.w	r3, r3, #12
 80051c2:	2b04      	cmp	r3, #4
 80051c4:	d102      	bne.n	80051cc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80051c6:	4b2a      	ldr	r3, [pc, #168]	; (8005270 <HAL_RCC_GetSysClockFreq+0xbc>)
 80051c8:	613b      	str	r3, [r7, #16]
 80051ca:	e047      	b.n	800525c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80051cc:	4b27      	ldr	r3, [pc, #156]	; (800526c <HAL_RCC_GetSysClockFreq+0xb8>)
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f003 030c 	and.w	r3, r3, #12
 80051d4:	2b08      	cmp	r3, #8
 80051d6:	d102      	bne.n	80051de <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80051d8:	4b26      	ldr	r3, [pc, #152]	; (8005274 <HAL_RCC_GetSysClockFreq+0xc0>)
 80051da:	613b      	str	r3, [r7, #16]
 80051dc:	e03e      	b.n	800525c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80051de:	4b23      	ldr	r3, [pc, #140]	; (800526c <HAL_RCC_GetSysClockFreq+0xb8>)
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f003 030c 	and.w	r3, r3, #12
 80051e6:	2b0c      	cmp	r3, #12
 80051e8:	d136      	bne.n	8005258 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80051ea:	4b20      	ldr	r3, [pc, #128]	; (800526c <HAL_RCC_GetSysClockFreq+0xb8>)
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	f003 0303 	and.w	r3, r3, #3
 80051f2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051f4:	4b1d      	ldr	r3, [pc, #116]	; (800526c <HAL_RCC_GetSysClockFreq+0xb8>)
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	091b      	lsrs	r3, r3, #4
 80051fa:	f003 030f 	and.w	r3, r3, #15
 80051fe:	3301      	adds	r3, #1
 8005200:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2b03      	cmp	r3, #3
 8005206:	d10c      	bne.n	8005222 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005208:	4a1a      	ldr	r2, [pc, #104]	; (8005274 <HAL_RCC_GetSysClockFreq+0xc0>)
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005210:	4a16      	ldr	r2, [pc, #88]	; (800526c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005212:	68d2      	ldr	r2, [r2, #12]
 8005214:	0a12      	lsrs	r2, r2, #8
 8005216:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800521a:	fb02 f303 	mul.w	r3, r2, r3
 800521e:	617b      	str	r3, [r7, #20]
      break;
 8005220:	e00c      	b.n	800523c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005222:	4a13      	ldr	r2, [pc, #76]	; (8005270 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	fbb2 f3f3 	udiv	r3, r2, r3
 800522a:	4a10      	ldr	r2, [pc, #64]	; (800526c <HAL_RCC_GetSysClockFreq+0xb8>)
 800522c:	68d2      	ldr	r2, [r2, #12]
 800522e:	0a12      	lsrs	r2, r2, #8
 8005230:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005234:	fb02 f303 	mul.w	r3, r2, r3
 8005238:	617b      	str	r3, [r7, #20]
      break;
 800523a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800523c:	4b0b      	ldr	r3, [pc, #44]	; (800526c <HAL_RCC_GetSysClockFreq+0xb8>)
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	0e5b      	lsrs	r3, r3, #25
 8005242:	f003 0303 	and.w	r3, r3, #3
 8005246:	3301      	adds	r3, #1
 8005248:	005b      	lsls	r3, r3, #1
 800524a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800524c:	697a      	ldr	r2, [r7, #20]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	fbb2 f3f3 	udiv	r3, r2, r3
 8005254:	613b      	str	r3, [r7, #16]
 8005256:	e001      	b.n	800525c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005258:	2300      	movs	r3, #0
 800525a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800525c:	693b      	ldr	r3, [r7, #16]
}
 800525e:	4618      	mov	r0, r3
 8005260:	371c      	adds	r7, #28
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	40021000 	.word	0x40021000
 8005270:	00f42400 	.word	0x00f42400
 8005274:	007a1200 	.word	0x007a1200

08005278 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005278:	b480      	push	{r7}
 800527a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800527c:	4b03      	ldr	r3, [pc, #12]	; (800528c <HAL_RCC_GetHCLKFreq+0x14>)
 800527e:	681b      	ldr	r3, [r3, #0]
}
 8005280:	4618      	mov	r0, r3
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	20001f44 	.word	0x20001f44

08005290 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005290:	b480      	push	{r7}
 8005292:	b087      	sub	sp, #28
 8005294:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005296:	4b1e      	ldr	r3, [pc, #120]	; (8005310 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	f003 0303 	and.w	r3, r3, #3
 800529e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052a0:	4b1b      	ldr	r3, [pc, #108]	; (8005310 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	091b      	lsrs	r3, r3, #4
 80052a6:	f003 030f 	and.w	r3, r3, #15
 80052aa:	3301      	adds	r3, #1
 80052ac:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	2b03      	cmp	r3, #3
 80052b2:	d10c      	bne.n	80052ce <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052b4:	4a17      	ldr	r2, [pc, #92]	; (8005314 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052bc:	4a14      	ldr	r2, [pc, #80]	; (8005310 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052be:	68d2      	ldr	r2, [r2, #12]
 80052c0:	0a12      	lsrs	r2, r2, #8
 80052c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80052c6:	fb02 f303 	mul.w	r3, r2, r3
 80052ca:	617b      	str	r3, [r7, #20]
    break;
 80052cc:	e00c      	b.n	80052e8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052ce:	4a12      	ldr	r2, [pc, #72]	; (8005318 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d6:	4a0e      	ldr	r2, [pc, #56]	; (8005310 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052d8:	68d2      	ldr	r2, [r2, #12]
 80052da:	0a12      	lsrs	r2, r2, #8
 80052dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80052e0:	fb02 f303 	mul.w	r3, r2, r3
 80052e4:	617b      	str	r3, [r7, #20]
    break;
 80052e6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052e8:	4b09      	ldr	r3, [pc, #36]	; (8005310 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	0e5b      	lsrs	r3, r3, #25
 80052ee:	f003 0303 	and.w	r3, r3, #3
 80052f2:	3301      	adds	r3, #1
 80052f4:	005b      	lsls	r3, r3, #1
 80052f6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005300:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005302:	687b      	ldr	r3, [r7, #4]
}
 8005304:	4618      	mov	r0, r3
 8005306:	371c      	adds	r7, #28
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr
 8005310:	40021000 	.word	0x40021000
 8005314:	007a1200 	.word	0x007a1200
 8005318:	00f42400 	.word	0x00f42400

0800531c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005324:	2300      	movs	r3, #0
 8005326:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005328:	2300      	movs	r3, #0
 800532a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005334:	2b00      	cmp	r3, #0
 8005336:	f000 8098 	beq.w	800546a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800533a:	2300      	movs	r3, #0
 800533c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800533e:	4b43      	ldr	r3, [pc, #268]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d10d      	bne.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800534a:	4b40      	ldr	r3, [pc, #256]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800534c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800534e:	4a3f      	ldr	r2, [pc, #252]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005354:	6593      	str	r3, [r2, #88]	; 0x58
 8005356:	4b3d      	ldr	r3, [pc, #244]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800535a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800535e:	60bb      	str	r3, [r7, #8]
 8005360:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005362:	2301      	movs	r3, #1
 8005364:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005366:	4b3a      	ldr	r3, [pc, #232]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a39      	ldr	r2, [pc, #228]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800536c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005370:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005372:	f7fc fdd3 	bl	8001f1c <HAL_GetTick>
 8005376:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005378:	e009      	b.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800537a:	f7fc fdcf 	bl	8001f1c <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	2b02      	cmp	r3, #2
 8005386:	d902      	bls.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	74fb      	strb	r3, [r7, #19]
        break;
 800538c:	e005      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800538e:	4b30      	ldr	r3, [pc, #192]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005396:	2b00      	cmp	r3, #0
 8005398:	d0ef      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800539a:	7cfb      	ldrb	r3, [r7, #19]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d159      	bne.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80053a0:	4b2a      	ldr	r3, [pc, #168]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053aa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d01e      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d019      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80053bc:	4b23      	ldr	r3, [pc, #140]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80053c8:	4b20      	ldr	r3, [pc, #128]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ce:	4a1f      	ldr	r2, [pc, #124]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053d8:	4b1c      	ldr	r3, [pc, #112]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053de:	4a1b      	ldr	r2, [pc, #108]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80053e8:	4a18      	ldr	r2, [pc, #96]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d016      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053fa:	f7fc fd8f 	bl	8001f1c <HAL_GetTick>
 80053fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005400:	e00b      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005402:	f7fc fd8b 	bl	8001f1c <HAL_GetTick>
 8005406:	4602      	mov	r2, r0
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005410:	4293      	cmp	r3, r2
 8005412:	d902      	bls.n	800541a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	74fb      	strb	r3, [r7, #19]
            break;
 8005418:	e006      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800541a:	4b0c      	ldr	r3, [pc, #48]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800541c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005420:	f003 0302 	and.w	r3, r3, #2
 8005424:	2b00      	cmp	r3, #0
 8005426:	d0ec      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005428:	7cfb      	ldrb	r3, [r7, #19]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10b      	bne.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800542e:	4b07      	ldr	r3, [pc, #28]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005434:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800543c:	4903      	ldr	r1, [pc, #12]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800543e:	4313      	orrs	r3, r2
 8005440:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005444:	e008      	b.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005446:	7cfb      	ldrb	r3, [r7, #19]
 8005448:	74bb      	strb	r3, [r7, #18]
 800544a:	e005      	b.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800544c:	40021000 	.word	0x40021000
 8005450:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005454:	7cfb      	ldrb	r3, [r7, #19]
 8005456:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005458:	7c7b      	ldrb	r3, [r7, #17]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d105      	bne.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800545e:	4baf      	ldr	r3, [pc, #700]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005462:	4aae      	ldr	r2, [pc, #696]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005464:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005468:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00a      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005476:	4ba9      	ldr	r3, [pc, #676]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800547c:	f023 0203 	bic.w	r2, r3, #3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	49a5      	ldr	r1, [pc, #660]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005486:	4313      	orrs	r3, r2
 8005488:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0302 	and.w	r3, r3, #2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00a      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005498:	4ba0      	ldr	r3, [pc, #640]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800549a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800549e:	f023 020c 	bic.w	r2, r3, #12
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	499d      	ldr	r1, [pc, #628]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0304 	and.w	r3, r3, #4
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00a      	beq.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80054ba:	4b98      	ldr	r3, [pc, #608]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80054bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	4994      	ldr	r1, [pc, #592]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0308 	and.w	r3, r3, #8
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00a      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80054dc:	4b8f      	ldr	r3, [pc, #572]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80054de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	498c      	ldr	r1, [pc, #560]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80054ec:	4313      	orrs	r3, r2
 80054ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0310 	and.w	r3, r3, #16
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00a      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80054fe:	4b87      	ldr	r3, [pc, #540]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005504:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	695b      	ldr	r3, [r3, #20]
 800550c:	4983      	ldr	r1, [pc, #524]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800550e:	4313      	orrs	r3, r2
 8005510:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0320 	and.w	r3, r3, #32
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00a      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005520:	4b7e      	ldr	r3, [pc, #504]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005526:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	497b      	ldr	r1, [pc, #492]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005530:	4313      	orrs	r3, r2
 8005532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00a      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005542:	4b76      	ldr	r3, [pc, #472]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005548:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	69db      	ldr	r3, [r3, #28]
 8005550:	4972      	ldr	r1, [pc, #456]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005552:	4313      	orrs	r3, r2
 8005554:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00a      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005564:	4b6d      	ldr	r3, [pc, #436]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800556a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	496a      	ldr	r1, [pc, #424]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005574:	4313      	orrs	r3, r2
 8005576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00a      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005586:	4b65      	ldr	r3, [pc, #404]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800558c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005594:	4961      	ldr	r1, [pc, #388]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005596:	4313      	orrs	r3, r2
 8005598:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00a      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80055a8:	4b5c      	ldr	r3, [pc, #368]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055ae:	f023 0203 	bic.w	r2, r3, #3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b6:	4959      	ldr	r1, [pc, #356]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055b8:	4313      	orrs	r3, r2
 80055ba:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00a      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055ca:	4b54      	ldr	r3, [pc, #336]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d8:	4950      	ldr	r1, [pc, #320]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d015      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055ec:	4b4b      	ldr	r3, [pc, #300]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fa:	4948      	ldr	r1, [pc, #288]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005606:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800560a:	d105      	bne.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800560c:	4b43      	ldr	r3, [pc, #268]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	4a42      	ldr	r2, [pc, #264]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005612:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005616:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005620:	2b00      	cmp	r3, #0
 8005622:	d015      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005624:	4b3d      	ldr	r3, [pc, #244]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800562a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005632:	493a      	ldr	r1, [pc, #232]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005634:	4313      	orrs	r3, r2
 8005636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800563e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005642:	d105      	bne.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005644:	4b35      	ldr	r3, [pc, #212]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	4a34      	ldr	r2, [pc, #208]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800564a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800564e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d015      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800565c:	4b2f      	ldr	r3, [pc, #188]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800565e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005662:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566a:	492c      	ldr	r1, [pc, #176]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800566c:	4313      	orrs	r3, r2
 800566e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005676:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800567a:	d105      	bne.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800567c:	4b27      	ldr	r3, [pc, #156]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	4a26      	ldr	r2, [pc, #152]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005682:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005686:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d015      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005694:	4b21      	ldr	r3, [pc, #132]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800569a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056a2:	491e      	ldr	r1, [pc, #120]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056b2:	d105      	bne.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056b4:	4b19      	ldr	r3, [pc, #100]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	4a18      	ldr	r2, [pc, #96]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056be:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d015      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80056cc:	4b13      	ldr	r3, [pc, #76]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056da:	4910      	ldr	r1, [pc, #64]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056dc:	4313      	orrs	r3, r2
 80056de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056ea:	d105      	bne.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056ec:	4b0b      	ldr	r3, [pc, #44]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	4a0a      	ldr	r2, [pc, #40]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056f6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d018      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005704:	4b05      	ldr	r3, [pc, #20]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800570a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005712:	4902      	ldr	r1, [pc, #8]	; (800571c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005714:	4313      	orrs	r3, r2
 8005716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800571a:	e001      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800571c:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005724:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005728:	d105      	bne.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800572a:	4b21      	ldr	r3, [pc, #132]	; (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	4a20      	ldr	r2, [pc, #128]	; (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005734:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d015      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005742:	4b1b      	ldr	r3, [pc, #108]	; (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005748:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005750:	4917      	ldr	r1, [pc, #92]	; (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005752:	4313      	orrs	r3, r2
 8005754:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800575c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005760:	d105      	bne.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005762:	4b13      	ldr	r3, [pc, #76]	; (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	4a12      	ldr	r2, [pc, #72]	; (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800576c:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d015      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800577a:	4b0d      	ldr	r3, [pc, #52]	; (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800577c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005780:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005788:	4909      	ldr	r1, [pc, #36]	; (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800578a:	4313      	orrs	r3, r2
 800578c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005794:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005798:	d105      	bne.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800579a:	4b05      	ldr	r3, [pc, #20]	; (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	4a04      	ldr	r2, [pc, #16]	; (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80057a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057a4:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80057a6:	7cbb      	ldrb	r3, [r7, #18]
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3718      	adds	r7, #24
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	40021000 	.word	0x40021000

080057b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e084      	b.n	80058d0 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d106      	bne.n	80057e6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f7fb fdf1 	bl	80013c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2202      	movs	r2, #2
 80057ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057fc:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005806:	d902      	bls.n	800580e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005808:	2300      	movs	r3, #0
 800580a:	60fb      	str	r3, [r7, #12]
 800580c:	e002      	b.n	8005814 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800580e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005812:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800581c:	d007      	beq.n	800582e <HAL_SPI_Init+0x7a>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005826:	d002      	beq.n	800582e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10b      	bne.n	800584e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800583e:	d903      	bls.n	8005848 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2202      	movs	r2, #2
 8005844:	631a      	str	r2, [r3, #48]	; 0x30
 8005846:	e002      	b.n	800584e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685a      	ldr	r2, [r3, #4]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	431a      	orrs	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	431a      	orrs	r2, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	431a      	orrs	r2, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800586c:	431a      	orrs	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	69db      	ldr	r3, [r3, #28]
 8005872:	431a      	orrs	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a1b      	ldr	r3, [r3, #32]
 8005878:	ea42 0103 	orr.w	r1, r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	430a      	orrs	r2, r1
 8005886:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	0c1b      	lsrs	r3, r3, #16
 800588e:	f003 0204 	and.w	r2, r3, #4
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005896:	431a      	orrs	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800589c:	431a      	orrs	r2, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	ea42 0103 	orr.w	r1, r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	430a      	orrs	r2, r1
 80058ae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	69da      	ldr	r2, [r3, #28]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b088      	sub	sp, #32
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	603b      	str	r3, [r7, #0]
 80058e4:	4613      	mov	r3, r2
 80058e6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80058e8:	2300      	movs	r3, #0
 80058ea:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d101      	bne.n	80058fa <HAL_SPI_Transmit+0x22>
 80058f6:	2302      	movs	r3, #2
 80058f8:	e150      	b.n	8005b9c <HAL_SPI_Transmit+0x2c4>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005902:	f7fc fb0b 	bl	8001f1c <HAL_GetTick>
 8005906:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005908:	88fb      	ldrh	r3, [r7, #6]
 800590a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005912:	b2db      	uxtb	r3, r3
 8005914:	2b01      	cmp	r3, #1
 8005916:	d002      	beq.n	800591e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005918:	2302      	movs	r3, #2
 800591a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800591c:	e135      	b.n	8005b8a <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d002      	beq.n	800592a <HAL_SPI_Transmit+0x52>
 8005924:	88fb      	ldrh	r3, [r7, #6]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d102      	bne.n	8005930 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800592e:	e12c      	b.n	8005b8a <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2203      	movs	r2, #3
 8005934:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	68ba      	ldr	r2, [r7, #8]
 8005942:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	88fa      	ldrh	r2, [r7, #6]
 8005948:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	88fa      	ldrh	r2, [r7, #6]
 800594e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800597a:	d107      	bne.n	800598c <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800598a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005996:	2b40      	cmp	r3, #64	; 0x40
 8005998:	d007      	beq.n	80059aa <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059b2:	d94b      	bls.n	8005a4c <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d002      	beq.n	80059c2 <HAL_SPI_Transmit+0xea>
 80059bc:	8afb      	ldrh	r3, [r7, #22]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d13e      	bne.n	8005a40 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c6:	881a      	ldrh	r2, [r3, #0]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d2:	1c9a      	adds	r2, r3, #2
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059dc:	b29b      	uxth	r3, r3
 80059de:	3b01      	subs	r3, #1
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80059e6:	e02b      	b.n	8005a40 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f003 0302 	and.w	r3, r3, #2
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d112      	bne.n	8005a1c <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fa:	881a      	ldrh	r2, [r3, #0]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a06:	1c9a      	adds	r2, r3, #2
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	3b01      	subs	r3, #1
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a1a:	e011      	b.n	8005a40 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a1c:	f7fc fa7e 	bl	8001f1c <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	683a      	ldr	r2, [r7, #0]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d803      	bhi.n	8005a34 <HAL_SPI_Transmit+0x15c>
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a32:	d102      	bne.n	8005a3a <HAL_SPI_Transmit+0x162>
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d102      	bne.n	8005a40 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a3e:	e0a4      	b.n	8005b8a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d1ce      	bne.n	80059e8 <HAL_SPI_Transmit+0x110>
 8005a4a:	e07c      	b.n	8005b46 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d002      	beq.n	8005a5a <HAL_SPI_Transmit+0x182>
 8005a54:	8afb      	ldrh	r3, [r7, #22]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d170      	bne.n	8005b3c <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d912      	bls.n	8005a8a <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a68:	881a      	ldrh	r2, [r3, #0]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a74:	1c9a      	adds	r2, r3, #2
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	3b02      	subs	r3, #2
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a88:	e058      	b.n	8005b3c <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	330c      	adds	r3, #12
 8005a94:	7812      	ldrb	r2, [r2, #0]
 8005a96:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9c:	1c5a      	adds	r2, r3, #1
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005ab0:	e044      	b.n	8005b3c <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f003 0302 	and.w	r3, r3, #2
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d12b      	bne.n	8005b18 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d912      	bls.n	8005af0 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ace:	881a      	ldrh	r2, [r3, #0]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ada:	1c9a      	adds	r2, r3, #2
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	3b02      	subs	r3, #2
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005aee:	e025      	b.n	8005b3c <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	330c      	adds	r3, #12
 8005afa:	7812      	ldrb	r2, [r2, #0]
 8005afc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b02:	1c5a      	adds	r2, r3, #1
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	b29a      	uxth	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b16:	e011      	b.n	8005b3c <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b18:	f7fc fa00 	bl	8001f1c <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	683a      	ldr	r2, [r7, #0]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d803      	bhi.n	8005b30 <HAL_SPI_Transmit+0x258>
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b2e:	d102      	bne.n	8005b36 <HAL_SPI_Transmit+0x25e>
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d102      	bne.n	8005b3c <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b3a:	e026      	b.n	8005b8a <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1b5      	bne.n	8005ab2 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b46:	69ba      	ldr	r2, [r7, #24]
 8005b48:	6839      	ldr	r1, [r7, #0]
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f000 fa8c 	bl	8006068 <SPI_EndRxTxTransaction>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d002      	beq.n	8005b5c <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2220      	movs	r2, #32
 8005b5a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d10a      	bne.n	8005b7a <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b64:	2300      	movs	r3, #0
 8005b66:	613b      	str	r3, [r7, #16]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	613b      	str	r3, [r7, #16]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	613b      	str	r3, [r7, #16]
 8005b78:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d002      	beq.n	8005b88 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	77fb      	strb	r3, [r7, #31]
 8005b86:	e000      	b.n	8005b8a <HAL_SPI_Transmit+0x2b2>
  }

error:
 8005b88:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005b9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3720      	adds	r7, #32
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b086      	sub	sp, #24
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	4613      	mov	r3, r2
 8005bb0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d101      	bne.n	8005bc4 <HAL_SPI_Transmit_DMA+0x20>
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	e0d0      	b.n	8005d66 <HAL_SPI_Transmit_DMA+0x1c2>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d002      	beq.n	8005bde <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8005bd8:	2302      	movs	r3, #2
 8005bda:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005bdc:	e0be      	b.n	8005d5c <HAL_SPI_Transmit_DMA+0x1b8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d002      	beq.n	8005bea <HAL_SPI_Transmit_DMA+0x46>
 8005be4:	88fb      	ldrh	r3, [r7, #6]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d102      	bne.n	8005bf0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005bee:	e0b5      	b.n	8005d5c <HAL_SPI_Transmit_DMA+0x1b8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2203      	movs	r2, #3
 8005bf4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	68ba      	ldr	r2, [r7, #8]
 8005c02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	88fa      	ldrh	r2, [r7, #6]
 8005c08:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	88fa      	ldrh	r2, [r7, #6]
 8005c0e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2200      	movs	r2, #0
 8005c14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c3a:	d107      	bne.n	8005c4c <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c4a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c50:	4a47      	ldr	r2, [pc, #284]	; (8005d70 <HAL_SPI_Transmit_DMA+0x1cc>)
 8005c52:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c58:	4a46      	ldr	r2, [pc, #280]	; (8005d74 <HAL_SPI_Transmit_DMA+0x1d0>)
 8005c5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c60:	4a45      	ldr	r2, [pc, #276]	; (8005d78 <HAL_SPI_Transmit_DMA+0x1d4>)
 8005c62:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c68:	2200      	movs	r2, #0
 8005c6a:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	685a      	ldr	r2, [r3, #4]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005c7a:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c84:	d82d      	bhi.n	8005ce2 <HAL_SPI_Transmit_DMA+0x13e>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c90:	d127      	bne.n	8005ce2 <HAL_SPI_Transmit_DMA+0x13e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	f003 0301 	and.w	r3, r3, #1
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d10f      	bne.n	8005cc0 <HAL_SPI_Transmit_DMA+0x11c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	685a      	ldr	r2, [r3, #4]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005cae:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	085b      	lsrs	r3, r3, #1
 8005cb8:	b29a      	uxth	r2, r3
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005cbe:	e010      	b.n	8005ce2 <HAL_SPI_Transmit_DMA+0x13e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	685a      	ldr	r2, [r3, #4]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cce:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	085b      	lsrs	r3, r3, #1
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	3301      	adds	r3, #1
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cea:	4619      	mov	r1, r3
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	330c      	adds	r3, #12
 8005cf2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cf8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005cfa:	f7fe f9e7 	bl	80040cc <HAL_DMA_Start_IT>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00c      	beq.n	8005d1e <HAL_SPI_Transmit_DMA+0x17a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d08:	f043 0210 	orr.w	r2, r3, #16
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8005d1c:	e01e      	b.n	8005d5c <HAL_SPI_Transmit_DMA+0x1b8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d28:	2b40      	cmp	r3, #64	; 0x40
 8005d2a:	d007      	beq.n	8005d3c <HAL_SPI_Transmit_DMA+0x198>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d3a:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	685a      	ldr	r2, [r3, #4]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f042 0220 	orr.w	r2, r2, #32
 8005d4a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	685a      	ldr	r2, [r3, #4]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f042 0202 	orr.w	r2, r2, #2
 8005d5a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3718      	adds	r7, #24
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	08005e5f 	.word	0x08005e5f
 8005d74:	08005db9 	.word	0x08005db9
 8005d78:	08005e7b 	.word	0x08005e7b

08005d7c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8005d84:	bf00      	nop
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005d98:	bf00      	nop
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005dac:	bf00      	nop
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b086      	sub	sp, #24
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005dc6:	f7fc f8a9 	bl	8001f1c <HAL_GetTick>
 8005dca:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 0320 	and.w	r3, r3, #32
 8005dd6:	2b20      	cmp	r3, #32
 8005dd8:	d03b      	beq.n	8005e52 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	685a      	ldr	r2, [r3, #4]
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 0220 	bic.w	r2, r2, #32
 8005de8:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	685a      	ldr	r2, [r3, #4]
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f022 0202 	bic.w	r2, r2, #2
 8005df8:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	2164      	movs	r1, #100	; 0x64
 8005dfe:	6978      	ldr	r0, [r7, #20]
 8005e00:	f000 f932 	bl	8006068 <SPI_EndRxTxTransaction>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d005      	beq.n	8005e16 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e0e:	f043 0220 	orr.w	r2, r3, #32
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d10a      	bne.n	8005e34 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e1e:	2300      	movs	r3, #0
 8005e20:	60fb      	str	r3, [r7, #12]
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	60fb      	str	r3, [r7, #12]
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	60fb      	str	r3, [r7, #12]
 8005e32:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	2200      	movs	r2, #0
 8005e38:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d003      	beq.n	8005e52 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005e4a:	6978      	ldr	r0, [r7, #20]
 8005e4c:	f7ff ffaa 	bl	8005da4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005e50:	e002      	b.n	8005e58 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005e52:	6978      	ldr	r0, [r7, #20]
 8005e54:	f7ff ff92 	bl	8005d7c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005e58:	3718      	adds	r7, #24
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b084      	sub	sp, #16
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e6a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005e6c:	68f8      	ldr	r0, [r7, #12]
 8005e6e:	f7ff ff8f 	bl	8005d90 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005e72:	bf00      	nop
 8005e74:	3710      	adds	r7, #16
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b084      	sub	sp, #16
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e86:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	685a      	ldr	r2, [r3, #4]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f022 0203 	bic.w	r2, r2, #3
 8005e96:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e9c:	f043 0210 	orr.w	r2, r3, #16
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f7ff ff79 	bl	8005da4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005eb2:	bf00      	nop
 8005eb4:	3710      	adds	r7, #16
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}

08005eba <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b084      	sub	sp, #16
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	60f8      	str	r0, [r7, #12]
 8005ec2:	60b9      	str	r1, [r7, #8]
 8005ec4:	603b      	str	r3, [r7, #0]
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005eca:	e04c      	b.n	8005f66 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ed2:	d048      	beq.n	8005f66 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005ed4:	f7fc f822 	bl	8001f1c <HAL_GetTick>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	683a      	ldr	r2, [r7, #0]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d902      	bls.n	8005eea <SPI_WaitFlagStateUntilTimeout+0x30>
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d13d      	bne.n	8005f66 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	685a      	ldr	r2, [r3, #4]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ef8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f02:	d111      	bne.n	8005f28 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f0c:	d004      	beq.n	8005f18 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f16:	d107      	bne.n	8005f28 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f30:	d10f      	bne.n	8005f52 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f40:	601a      	str	r2, [r3, #0]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2201      	movs	r2, #1
 8005f56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	e00f      	b.n	8005f86 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	689a      	ldr	r2, [r3, #8]
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	4013      	ands	r3, r2
 8005f70:	68ba      	ldr	r2, [r7, #8]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	bf0c      	ite	eq
 8005f76:	2301      	moveq	r3, #1
 8005f78:	2300      	movne	r3, #0
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	79fb      	ldrb	r3, [r7, #7]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d1a3      	bne.n	8005ecc <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b084      	sub	sp, #16
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	60f8      	str	r0, [r7, #12]
 8005f96:	60b9      	str	r1, [r7, #8]
 8005f98:	607a      	str	r2, [r7, #4]
 8005f9a:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8005f9c:	e057      	b.n	800604e <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005fa4:	d106      	bne.n	8005fb4 <SPI_WaitFifoStateUntilTimeout+0x26>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d103      	bne.n	8005fb4 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	330c      	adds	r3, #12
 8005fb2:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fba:	d048      	beq.n	800604e <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005fbc:	f7fb ffae 	bl	8001f1c <HAL_GetTick>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	683a      	ldr	r2, [r7, #0]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d902      	bls.n	8005fd2 <SPI_WaitFifoStateUntilTimeout+0x44>
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d13d      	bne.n	800604e <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	685a      	ldr	r2, [r3, #4]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005fe0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fea:	d111      	bne.n	8006010 <SPI_WaitFifoStateUntilTimeout+0x82>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ff4:	d004      	beq.n	8006000 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ffe:	d107      	bne.n	8006010 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800600e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006014:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006018:	d10f      	bne.n	800603a <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006028:	601a      	str	r2, [r3, #0]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006038:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2201      	movs	r2, #1
 800603e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800604a:	2303      	movs	r3, #3
 800604c:	e008      	b.n	8006060 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	689a      	ldr	r2, [r3, #8]
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	4013      	ands	r3, r2
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	429a      	cmp	r2, r3
 800605c:	d19f      	bne.n	8005f9e <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	3710      	adds	r7, #16
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b086      	sub	sp, #24
 800606c:	af02      	add	r7, sp, #8
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	9300      	str	r3, [sp, #0]
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	2200      	movs	r2, #0
 800607c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f7ff ff84 	bl	8005f8e <SPI_WaitFifoStateUntilTimeout>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d007      	beq.n	800609c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006090:	f043 0220 	orr.w	r2, r3, #32
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006098:	2303      	movs	r3, #3
 800609a:	e027      	b.n	80060ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	9300      	str	r3, [sp, #0]
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	2200      	movs	r2, #0
 80060a4:	2180      	movs	r1, #128	; 0x80
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f7ff ff07 	bl	8005eba <SPI_WaitFlagStateUntilTimeout>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d007      	beq.n	80060c2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060b6:	f043 0220 	orr.w	r2, r3, #32
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e014      	b.n	80060ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	9300      	str	r3, [sp, #0]
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80060ce:	68f8      	ldr	r0, [r7, #12]
 80060d0:	f7ff ff5d 	bl	8005f8e <SPI_WaitFifoStateUntilTimeout>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d007      	beq.n	80060ea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060de:	f043 0220 	orr.w	r2, r3, #32
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e000      	b.n	80060ec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3710      	adds	r7, #16
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d101      	bne.n	8006106 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e049      	b.n	800619a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800610c:	b2db      	uxtb	r3, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	d106      	bne.n	8006120 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f7fb fddc 	bl	8001cd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2202      	movs	r2, #2
 8006124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	3304      	adds	r3, #4
 8006130:	4619      	mov	r1, r3
 8006132:	4610      	mov	r0, r2
 8006134:	f000 fc24 	bl	8006980 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3708      	adds	r7, #8
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
	...

080061a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d001      	beq.n	80061bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e019      	b.n	80061f0 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2202      	movs	r2, #2
 80061c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	689a      	ldr	r2, [r3, #8]
 80061ca:	4b0c      	ldr	r3, [pc, #48]	; (80061fc <HAL_TIM_Base_Start+0x58>)
 80061cc:	4013      	ands	r3, r2
 80061ce:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2b06      	cmp	r3, #6
 80061d4:	d00b      	beq.n	80061ee <HAL_TIM_Base_Start+0x4a>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061dc:	d007      	beq.n	80061ee <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f042 0201 	orr.w	r2, r2, #1
 80061ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3714      	adds	r7, #20
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr
 80061fc:	00010007 	.word	0x00010007

08006200 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800620e:	b2db      	uxtb	r3, r3
 8006210:	2b01      	cmp	r3, #1
 8006212:	d001      	beq.n	8006218 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	e021      	b.n	800625c <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2202      	movs	r2, #2
 800621c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68da      	ldr	r2, [r3, #12]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f042 0201 	orr.w	r2, r2, #1
 800622e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	689a      	ldr	r2, [r3, #8]
 8006236:	4b0c      	ldr	r3, [pc, #48]	; (8006268 <HAL_TIM_Base_Start_IT+0x68>)
 8006238:	4013      	ands	r3, r2
 800623a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2b06      	cmp	r3, #6
 8006240:	d00b      	beq.n	800625a <HAL_TIM_Base_Start_IT+0x5a>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006248:	d007      	beq.n	800625a <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f042 0201 	orr.w	r2, r2, #1
 8006258:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3714      	adds	r7, #20
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr
 8006268:	00010007 	.word	0x00010007

0800626c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b086      	sub	sp, #24
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d101      	bne.n	8006280 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e097      	b.n	80063b0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006286:	b2db      	uxtb	r3, r3
 8006288:	2b00      	cmp	r3, #0
 800628a:	d106      	bne.n	800629a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f7fb fccb 	bl	8001c30 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2202      	movs	r2, #2
 800629e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	6812      	ldr	r2, [r2, #0]
 80062ac:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80062b0:	f023 0307 	bic.w	r3, r3, #7
 80062b4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	3304      	adds	r3, #4
 80062be:	4619      	mov	r1, r3
 80062c0:	4610      	mov	r0, r2
 80062c2:	f000 fb5d 	bl	8006980 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	699b      	ldr	r3, [r3, #24]
 80062d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	6a1b      	ldr	r3, [r3, #32]
 80062dc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062ee:	f023 0303 	bic.w	r3, r3, #3
 80062f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	689a      	ldr	r2, [r3, #8]
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	021b      	lsls	r3, r3, #8
 80062fe:	4313      	orrs	r3, r2
 8006300:	693a      	ldr	r2, [r7, #16]
 8006302:	4313      	orrs	r3, r2
 8006304:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800630c:	f023 030c 	bic.w	r3, r3, #12
 8006310:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006318:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800631c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	68da      	ldr	r2, [r3, #12]
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	69db      	ldr	r3, [r3, #28]
 8006326:	021b      	lsls	r3, r3, #8
 8006328:	4313      	orrs	r3, r2
 800632a:	693a      	ldr	r2, [r7, #16]
 800632c:	4313      	orrs	r3, r2
 800632e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	011a      	lsls	r2, r3, #4
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	031b      	lsls	r3, r3, #12
 800633c:	4313      	orrs	r3, r2
 800633e:	693a      	ldr	r2, [r7, #16]
 8006340:	4313      	orrs	r3, r2
 8006342:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800634a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006352:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	685a      	ldr	r2, [r3, #4]
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	695b      	ldr	r3, [r3, #20]
 800635c:	011b      	lsls	r3, r3, #4
 800635e:	4313      	orrs	r3, r2
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	4313      	orrs	r3, r2
 8006364:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	693a      	ldr	r2, [r7, #16]
 8006374:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2201      	movs	r2, #1
 8006392:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2201      	movs	r2, #1
 80063aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3718      	adds	r7, #24
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	f003 0302 	and.w	r3, r3, #2
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d122      	bne.n	8006414 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	f003 0302 	and.w	r3, r3, #2
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d11b      	bne.n	8006414 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f06f 0202 	mvn.w	r2, #2
 80063e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2201      	movs	r2, #1
 80063ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	f003 0303 	and.w	r3, r3, #3
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d003      	beq.n	8006402 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 faa2 	bl	8006944 <HAL_TIM_IC_CaptureCallback>
 8006400:	e005      	b.n	800640e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 fa94 	bl	8006930 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 faa5 	bl	8006958 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	f003 0304 	and.w	r3, r3, #4
 800641e:	2b04      	cmp	r3, #4
 8006420:	d122      	bne.n	8006468 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	f003 0304 	and.w	r3, r3, #4
 800642c:	2b04      	cmp	r3, #4
 800642e:	d11b      	bne.n	8006468 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f06f 0204 	mvn.w	r2, #4
 8006438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2202      	movs	r2, #2
 800643e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	699b      	ldr	r3, [r3, #24]
 8006446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800644a:	2b00      	cmp	r3, #0
 800644c:	d003      	beq.n	8006456 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 fa78 	bl	8006944 <HAL_TIM_IC_CaptureCallback>
 8006454:	e005      	b.n	8006462 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 fa6a 	bl	8006930 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 fa7b 	bl	8006958 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	f003 0308 	and.w	r3, r3, #8
 8006472:	2b08      	cmp	r3, #8
 8006474:	d122      	bne.n	80064bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	f003 0308 	and.w	r3, r3, #8
 8006480:	2b08      	cmp	r3, #8
 8006482:	d11b      	bne.n	80064bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f06f 0208 	mvn.w	r2, #8
 800648c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2204      	movs	r2, #4
 8006492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	69db      	ldr	r3, [r3, #28]
 800649a:	f003 0303 	and.w	r3, r3, #3
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d003      	beq.n	80064aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fa4e 	bl	8006944 <HAL_TIM_IC_CaptureCallback>
 80064a8:	e005      	b.n	80064b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 fa40 	bl	8006930 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 fa51 	bl	8006958 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	f003 0310 	and.w	r3, r3, #16
 80064c6:	2b10      	cmp	r3, #16
 80064c8:	d122      	bne.n	8006510 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	f003 0310 	and.w	r3, r3, #16
 80064d4:	2b10      	cmp	r3, #16
 80064d6:	d11b      	bne.n	8006510 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f06f 0210 	mvn.w	r2, #16
 80064e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2208      	movs	r2, #8
 80064e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	69db      	ldr	r3, [r3, #28]
 80064ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d003      	beq.n	80064fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 fa24 	bl	8006944 <HAL_TIM_IC_CaptureCallback>
 80064fc:	e005      	b.n	800650a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 fa16 	bl	8006930 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 fa27 	bl	8006958 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	f003 0301 	and.w	r3, r3, #1
 800651a:	2b01      	cmp	r3, #1
 800651c:	d10e      	bne.n	800653c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	f003 0301 	and.w	r3, r3, #1
 8006528:	2b01      	cmp	r3, #1
 800652a:	d107      	bne.n	800653c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f06f 0201 	mvn.w	r2, #1
 8006534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 f9f0 	bl	800691c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006546:	2b80      	cmp	r3, #128	; 0x80
 8006548:	d10e      	bne.n	8006568 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006554:	2b80      	cmp	r3, #128	; 0x80
 8006556:	d107      	bne.n	8006568 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 fd5e 	bl	8007024 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006572:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006576:	d10e      	bne.n	8006596 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006582:	2b80      	cmp	r3, #128	; 0x80
 8006584:	d107      	bne.n	8006596 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800658e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 fd51 	bl	8007038 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a0:	2b40      	cmp	r3, #64	; 0x40
 80065a2:	d10e      	bne.n	80065c2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ae:	2b40      	cmp	r3, #64	; 0x40
 80065b0:	d107      	bne.n	80065c2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80065ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 f9d5 	bl	800696c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	f003 0320 	and.w	r3, r3, #32
 80065cc:	2b20      	cmp	r3, #32
 80065ce:	d10e      	bne.n	80065ee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	f003 0320 	and.w	r3, r3, #32
 80065da:	2b20      	cmp	r3, #32
 80065dc:	d107      	bne.n	80065ee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f06f 0220 	mvn.w	r2, #32
 80065e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 fd11 	bl	8007010 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065fc:	d10f      	bne.n	800661e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006608:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800660c:	d107      	bne.n	800661e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 fd17 	bl	800704c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	691b      	ldr	r3, [r3, #16]
 8006624:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006628:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800662c:	d10f      	bne.n	800664e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006638:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800663c:	d107      	bne.n	800664e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006646:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 fd09 	bl	8007060 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006658:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800665c:	d10f      	bne.n	800667e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006668:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800666c:	d107      	bne.n	800667e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 fcfb 	bl	8007074 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006688:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800668c:	d10f      	bne.n	80066ae <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006698:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800669c:	d107      	bne.n	80066ae <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80066a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 fced 	bl	8007088 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066ae:	bf00      	nop
 80066b0:	3708      	adds	r7, #8
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
	...

080066b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d101      	bne.n	80066d0 <HAL_TIM_ConfigClockSource+0x18>
 80066cc:	2302      	movs	r3, #2
 80066ce:	e0d2      	b.n	8006876 <HAL_TIM_ConfigClockSource+0x1be>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2202      	movs	r2, #2
 80066dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80066ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80066f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800670c:	f000 80a9 	beq.w	8006862 <HAL_TIM_ConfigClockSource+0x1aa>
 8006710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006714:	d81a      	bhi.n	800674c <HAL_TIM_ConfigClockSource+0x94>
 8006716:	2b30      	cmp	r3, #48	; 0x30
 8006718:	f000 809a 	beq.w	8006850 <HAL_TIM_ConfigClockSource+0x198>
 800671c:	2b30      	cmp	r3, #48	; 0x30
 800671e:	d809      	bhi.n	8006734 <HAL_TIM_ConfigClockSource+0x7c>
 8006720:	2b10      	cmp	r3, #16
 8006722:	f000 8095 	beq.w	8006850 <HAL_TIM_ConfigClockSource+0x198>
 8006726:	2b20      	cmp	r3, #32
 8006728:	f000 8092 	beq.w	8006850 <HAL_TIM_ConfigClockSource+0x198>
 800672c:	2b00      	cmp	r3, #0
 800672e:	f000 808f 	beq.w	8006850 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006732:	e097      	b.n	8006864 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8006734:	2b50      	cmp	r3, #80	; 0x50
 8006736:	d05b      	beq.n	80067f0 <HAL_TIM_ConfigClockSource+0x138>
 8006738:	2b50      	cmp	r3, #80	; 0x50
 800673a:	d802      	bhi.n	8006742 <HAL_TIM_ConfigClockSource+0x8a>
 800673c:	2b40      	cmp	r3, #64	; 0x40
 800673e:	d077      	beq.n	8006830 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006740:	e090      	b.n	8006864 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8006742:	2b60      	cmp	r3, #96	; 0x60
 8006744:	d064      	beq.n	8006810 <HAL_TIM_ConfigClockSource+0x158>
 8006746:	2b70      	cmp	r3, #112	; 0x70
 8006748:	d028      	beq.n	800679c <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800674a:	e08b      	b.n	8006864 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800674c:	4a4c      	ldr	r2, [pc, #304]	; (8006880 <HAL_TIM_ConfigClockSource+0x1c8>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d07e      	beq.n	8006850 <HAL_TIM_ConfigClockSource+0x198>
 8006752:	4a4b      	ldr	r2, [pc, #300]	; (8006880 <HAL_TIM_ConfigClockSource+0x1c8>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d810      	bhi.n	800677a <HAL_TIM_ConfigClockSource+0xc2>
 8006758:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800675c:	d078      	beq.n	8006850 <HAL_TIM_ConfigClockSource+0x198>
 800675e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006762:	d803      	bhi.n	800676c <HAL_TIM_ConfigClockSource+0xb4>
 8006764:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006768:	d02f      	beq.n	80067ca <HAL_TIM_ConfigClockSource+0x112>
      break;
 800676a:	e07b      	b.n	8006864 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800676c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006770:	d06e      	beq.n	8006850 <HAL_TIM_ConfigClockSource+0x198>
 8006772:	4a44      	ldr	r2, [pc, #272]	; (8006884 <HAL_TIM_ConfigClockSource+0x1cc>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d06b      	beq.n	8006850 <HAL_TIM_ConfigClockSource+0x198>
      break;
 8006778:	e074      	b.n	8006864 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800677a:	4a43      	ldr	r2, [pc, #268]	; (8006888 <HAL_TIM_ConfigClockSource+0x1d0>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d067      	beq.n	8006850 <HAL_TIM_ConfigClockSource+0x198>
 8006780:	4a41      	ldr	r2, [pc, #260]	; (8006888 <HAL_TIM_ConfigClockSource+0x1d0>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d803      	bhi.n	800678e <HAL_TIM_ConfigClockSource+0xd6>
 8006786:	4a41      	ldr	r2, [pc, #260]	; (800688c <HAL_TIM_ConfigClockSource+0x1d4>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d061      	beq.n	8006850 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800678c:	e06a      	b.n	8006864 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800678e:	4a40      	ldr	r2, [pc, #256]	; (8006890 <HAL_TIM_ConfigClockSource+0x1d8>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d05d      	beq.n	8006850 <HAL_TIM_ConfigClockSource+0x198>
 8006794:	4a3f      	ldr	r2, [pc, #252]	; (8006894 <HAL_TIM_ConfigClockSource+0x1dc>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d05a      	beq.n	8006850 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800679a:	e063      	b.n	8006864 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6818      	ldr	r0, [r3, #0]
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	6899      	ldr	r1, [r3, #8]
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	685a      	ldr	r2, [r3, #4]
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	f000 fac8 	bl	8006d40 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80067be:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	609a      	str	r2, [r3, #8]
      break;
 80067c8:	e04c      	b.n	8006864 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6818      	ldr	r0, [r3, #0]
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	6899      	ldr	r1, [r3, #8]
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	685a      	ldr	r2, [r3, #4]
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	f000 fab1 	bl	8006d40 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	689a      	ldr	r2, [r3, #8]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067ec:	609a      	str	r2, [r3, #8]
      break;
 80067ee:	e039      	b.n	8006864 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6818      	ldr	r0, [r3, #0]
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	6859      	ldr	r1, [r3, #4]
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	461a      	mov	r2, r3
 80067fe:	f000 fa23 	bl	8006c48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2150      	movs	r1, #80	; 0x50
 8006808:	4618      	mov	r0, r3
 800680a:	f000 fa7c 	bl	8006d06 <TIM_ITRx_SetConfig>
      break;
 800680e:	e029      	b.n	8006864 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6818      	ldr	r0, [r3, #0]
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	6859      	ldr	r1, [r3, #4]
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	461a      	mov	r2, r3
 800681e:	f000 fa42 	bl	8006ca6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2160      	movs	r1, #96	; 0x60
 8006828:	4618      	mov	r0, r3
 800682a:	f000 fa6c 	bl	8006d06 <TIM_ITRx_SetConfig>
      break;
 800682e:	e019      	b.n	8006864 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6818      	ldr	r0, [r3, #0]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	6859      	ldr	r1, [r3, #4]
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	461a      	mov	r2, r3
 800683e:	f000 fa03 	bl	8006c48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2140      	movs	r1, #64	; 0x40
 8006848:	4618      	mov	r0, r3
 800684a:	f000 fa5c 	bl	8006d06 <TIM_ITRx_SetConfig>
      break;
 800684e:	e009      	b.n	8006864 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4619      	mov	r1, r3
 800685a:	4610      	mov	r0, r2
 800685c:	f000 fa53 	bl	8006d06 <TIM_ITRx_SetConfig>
      break;
 8006860:	e000      	b.n	8006864 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 8006862:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	00100030 	.word	0x00100030
 8006884:	00100020 	.word	0x00100020
 8006888:	00100050 	.word	0x00100050
 800688c:	00100040 	.word	0x00100040
 8006890:	00100060 	.word	0x00100060
 8006894:	00100070 	.word	0x00100070

08006898 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d101      	bne.n	80068b0 <HAL_TIM_SlaveConfigSynchro+0x18>
 80068ac:	2302      	movs	r3, #2
 80068ae:	e031      	b.n	8006914 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2202      	movs	r2, #2
 80068bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80068c0:	6839      	ldr	r1, [r7, #0]
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 f904 	bl	8006ad0 <TIM_SlaveTimer_SetConfig>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d009      	beq.n	80068e2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2201      	movs	r2, #1
 80068d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e018      	b.n	8006914 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	68da      	ldr	r2, [r3, #12]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068f0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	68da      	ldr	r2, [r3, #12]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006900:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2201      	movs	r2, #1
 8006906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3708      	adds	r7, #8
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006924:	bf00      	nop
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006938:	bf00      	nop
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800694c:	bf00      	nop
 800694e:	370c      	adds	r7, #12
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006974:	bf00      	nop
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006980:	b480      	push	{r7}
 8006982:	b085      	sub	sp, #20
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	4a46      	ldr	r2, [pc, #280]	; (8006aac <TIM_Base_SetConfig+0x12c>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d017      	beq.n	80069c8 <TIM_Base_SetConfig+0x48>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800699e:	d013      	beq.n	80069c8 <TIM_Base_SetConfig+0x48>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a43      	ldr	r2, [pc, #268]	; (8006ab0 <TIM_Base_SetConfig+0x130>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d00f      	beq.n	80069c8 <TIM_Base_SetConfig+0x48>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a42      	ldr	r2, [pc, #264]	; (8006ab4 <TIM_Base_SetConfig+0x134>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d00b      	beq.n	80069c8 <TIM_Base_SetConfig+0x48>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a41      	ldr	r2, [pc, #260]	; (8006ab8 <TIM_Base_SetConfig+0x138>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d007      	beq.n	80069c8 <TIM_Base_SetConfig+0x48>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a40      	ldr	r2, [pc, #256]	; (8006abc <TIM_Base_SetConfig+0x13c>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d003      	beq.n	80069c8 <TIM_Base_SetConfig+0x48>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a3f      	ldr	r2, [pc, #252]	; (8006ac0 <TIM_Base_SetConfig+0x140>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d108      	bne.n	80069da <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4a33      	ldr	r2, [pc, #204]	; (8006aac <TIM_Base_SetConfig+0x12c>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d023      	beq.n	8006a2a <TIM_Base_SetConfig+0xaa>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069e8:	d01f      	beq.n	8006a2a <TIM_Base_SetConfig+0xaa>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4a30      	ldr	r2, [pc, #192]	; (8006ab0 <TIM_Base_SetConfig+0x130>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d01b      	beq.n	8006a2a <TIM_Base_SetConfig+0xaa>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a2f      	ldr	r2, [pc, #188]	; (8006ab4 <TIM_Base_SetConfig+0x134>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d017      	beq.n	8006a2a <TIM_Base_SetConfig+0xaa>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a2e      	ldr	r2, [pc, #184]	; (8006ab8 <TIM_Base_SetConfig+0x138>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d013      	beq.n	8006a2a <TIM_Base_SetConfig+0xaa>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a2d      	ldr	r2, [pc, #180]	; (8006abc <TIM_Base_SetConfig+0x13c>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d00f      	beq.n	8006a2a <TIM_Base_SetConfig+0xaa>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a2d      	ldr	r2, [pc, #180]	; (8006ac4 <TIM_Base_SetConfig+0x144>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d00b      	beq.n	8006a2a <TIM_Base_SetConfig+0xaa>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a2c      	ldr	r2, [pc, #176]	; (8006ac8 <TIM_Base_SetConfig+0x148>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d007      	beq.n	8006a2a <TIM_Base_SetConfig+0xaa>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a2b      	ldr	r2, [pc, #172]	; (8006acc <TIM_Base_SetConfig+0x14c>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d003      	beq.n	8006a2a <TIM_Base_SetConfig+0xaa>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4a26      	ldr	r2, [pc, #152]	; (8006ac0 <TIM_Base_SetConfig+0x140>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d108      	bne.n	8006a3c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	695b      	ldr	r3, [r3, #20]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	689a      	ldr	r2, [r3, #8]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a12      	ldr	r2, [pc, #72]	; (8006aac <TIM_Base_SetConfig+0x12c>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d013      	beq.n	8006a90 <TIM_Base_SetConfig+0x110>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a14      	ldr	r2, [pc, #80]	; (8006abc <TIM_Base_SetConfig+0x13c>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d00f      	beq.n	8006a90 <TIM_Base_SetConfig+0x110>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a14      	ldr	r2, [pc, #80]	; (8006ac4 <TIM_Base_SetConfig+0x144>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d00b      	beq.n	8006a90 <TIM_Base_SetConfig+0x110>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a13      	ldr	r2, [pc, #76]	; (8006ac8 <TIM_Base_SetConfig+0x148>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d007      	beq.n	8006a90 <TIM_Base_SetConfig+0x110>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4a12      	ldr	r2, [pc, #72]	; (8006acc <TIM_Base_SetConfig+0x14c>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d003      	beq.n	8006a90 <TIM_Base_SetConfig+0x110>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4a0d      	ldr	r2, [pc, #52]	; (8006ac0 <TIM_Base_SetConfig+0x140>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d103      	bne.n	8006a98 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	691a      	ldr	r2, [r3, #16]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	615a      	str	r2, [r3, #20]
}
 8006a9e:	bf00      	nop
 8006aa0:	3714      	adds	r7, #20
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop
 8006aac:	40012c00 	.word	0x40012c00
 8006ab0:	40000400 	.word	0x40000400
 8006ab4:	40000800 	.word	0x40000800
 8006ab8:	40000c00 	.word	0x40000c00
 8006abc:	40013400 	.word	0x40013400
 8006ac0:	40015000 	.word	0x40015000
 8006ac4:	40014000 	.word	0x40014000
 8006ac8:	40014400 	.word	0x40014400
 8006acc:	40014800 	.word	0x40014800

08006ad0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b086      	sub	sp, #24
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006ae8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aec:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	697a      	ldr	r2, [r7, #20]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006afe:	f023 0307 	bic.w	r3, r3, #7
 8006b02:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	697a      	ldr	r2, [r7, #20]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	697a      	ldr	r2, [r7, #20]
 8006b14:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	2b70      	cmp	r3, #112	; 0x70
 8006b1c:	d034      	beq.n	8006b88 <TIM_SlaveTimer_SetConfig+0xb8>
 8006b1e:	2b70      	cmp	r3, #112	; 0x70
 8006b20:	d811      	bhi.n	8006b46 <TIM_SlaveTimer_SetConfig+0x76>
 8006b22:	2b30      	cmp	r3, #48	; 0x30
 8006b24:	d07d      	beq.n	8006c22 <TIM_SlaveTimer_SetConfig+0x152>
 8006b26:	2b30      	cmp	r3, #48	; 0x30
 8006b28:	d806      	bhi.n	8006b38 <TIM_SlaveTimer_SetConfig+0x68>
 8006b2a:	2b10      	cmp	r3, #16
 8006b2c:	d079      	beq.n	8006c22 <TIM_SlaveTimer_SetConfig+0x152>
 8006b2e:	2b20      	cmp	r3, #32
 8006b30:	d077      	beq.n	8006c22 <TIM_SlaveTimer_SetConfig+0x152>
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d075      	beq.n	8006c22 <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 8006b36:	e075      	b.n	8006c24 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8006b38:	2b50      	cmp	r3, #80	; 0x50
 8006b3a:	d05e      	beq.n	8006bfa <TIM_SlaveTimer_SetConfig+0x12a>
 8006b3c:	2b60      	cmp	r3, #96	; 0x60
 8006b3e:	d066      	beq.n	8006c0e <TIM_SlaveTimer_SetConfig+0x13e>
 8006b40:	2b40      	cmp	r3, #64	; 0x40
 8006b42:	d02c      	beq.n	8006b9e <TIM_SlaveTimer_SetConfig+0xce>
      break;
 8006b44:	e06e      	b.n	8006c24 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8006b46:	4a3a      	ldr	r2, [pc, #232]	; (8006c30 <TIM_SlaveTimer_SetConfig+0x160>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d06a      	beq.n	8006c22 <TIM_SlaveTimer_SetConfig+0x152>
 8006b4c:	4a38      	ldr	r2, [pc, #224]	; (8006c30 <TIM_SlaveTimer_SetConfig+0x160>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d809      	bhi.n	8006b66 <TIM_SlaveTimer_SetConfig+0x96>
 8006b52:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006b56:	d064      	beq.n	8006c22 <TIM_SlaveTimer_SetConfig+0x152>
 8006b58:	4a36      	ldr	r2, [pc, #216]	; (8006c34 <TIM_SlaveTimer_SetConfig+0x164>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d061      	beq.n	8006c22 <TIM_SlaveTimer_SetConfig+0x152>
 8006b5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b62:	d05e      	beq.n	8006c22 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8006b64:	e05e      	b.n	8006c24 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8006b66:	4a34      	ldr	r2, [pc, #208]	; (8006c38 <TIM_SlaveTimer_SetConfig+0x168>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d05a      	beq.n	8006c22 <TIM_SlaveTimer_SetConfig+0x152>
 8006b6c:	4a32      	ldr	r2, [pc, #200]	; (8006c38 <TIM_SlaveTimer_SetConfig+0x168>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d803      	bhi.n	8006b7a <TIM_SlaveTimer_SetConfig+0xaa>
 8006b72:	4a32      	ldr	r2, [pc, #200]	; (8006c3c <TIM_SlaveTimer_SetConfig+0x16c>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d054      	beq.n	8006c22 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8006b78:	e054      	b.n	8006c24 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8006b7a:	4a31      	ldr	r2, [pc, #196]	; (8006c40 <TIM_SlaveTimer_SetConfig+0x170>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d050      	beq.n	8006c22 <TIM_SlaveTimer_SetConfig+0x152>
 8006b80:	4a30      	ldr	r2, [pc, #192]	; (8006c44 <TIM_SlaveTimer_SetConfig+0x174>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d04d      	beq.n	8006c22 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8006b86:	e04d      	b.n	8006c24 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6818      	ldr	r0, [r3, #0]
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	68d9      	ldr	r1, [r3, #12]
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	689a      	ldr	r2, [r3, #8]
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	f000 f8d2 	bl	8006d40 <TIM_ETR_SetConfig>
      break;
 8006b9c:	e042      	b.n	8006c24 <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2b05      	cmp	r3, #5
 8006ba4:	d004      	beq.n	8006bb0 <TIM_SlaveTimer_SetConfig+0xe0>
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8006bae:	d101      	bne.n	8006bb4 <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e038      	b.n	8006c26 <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	6a1b      	ldr	r3, [r3, #32]
 8006bba:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	6a1a      	ldr	r2, [r3, #32]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f022 0201 	bic.w	r2, r2, #1
 8006bca:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	699b      	ldr	r3, [r3, #24]
 8006bd2:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bda:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	691b      	ldr	r3, [r3, #16]
 8006be0:	011b      	lsls	r3, r3, #4
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	621a      	str	r2, [r3, #32]
      break;
 8006bf8:	e014      	b.n	8006c24 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6818      	ldr	r0, [r3, #0]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	6899      	ldr	r1, [r3, #8]
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	461a      	mov	r2, r3
 8006c08:	f000 f81e 	bl	8006c48 <TIM_TI1_ConfigInputStage>
      break;
 8006c0c:	e00a      	b.n	8006c24 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6818      	ldr	r0, [r3, #0]
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	6899      	ldr	r1, [r3, #8]
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	f000 f843 	bl	8006ca6 <TIM_TI2_ConfigInputStage>
      break;
 8006c20:	e000      	b.n	8006c24 <TIM_SlaveTimer_SetConfig+0x154>
      break;
 8006c22:	bf00      	nop
  }
  return HAL_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3718      	adds	r7, #24
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	00100030 	.word	0x00100030
 8006c34:	00100020 	.word	0x00100020
 8006c38:	00100050 	.word	0x00100050
 8006c3c:	00100040 	.word	0x00100040
 8006c40:	00100060 	.word	0x00100060
 8006c44:	00100070 	.word	0x00100070

08006c48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b087      	sub	sp, #28
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6a1b      	ldr	r3, [r3, #32]
 8006c58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6a1b      	ldr	r3, [r3, #32]
 8006c5e:	f023 0201 	bic.w	r2, r3, #1
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	699b      	ldr	r3, [r3, #24]
 8006c6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	011b      	lsls	r3, r3, #4
 8006c78:	693a      	ldr	r2, [r7, #16]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	f023 030a 	bic.w	r3, r3, #10
 8006c84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c86:	697a      	ldr	r2, [r7, #20]
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	693a      	ldr	r2, [r7, #16]
 8006c92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	621a      	str	r2, [r3, #32]
}
 8006c9a:	bf00      	nop
 8006c9c:	371c      	adds	r7, #28
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr

08006ca6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b087      	sub	sp, #28
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	60f8      	str	r0, [r7, #12]
 8006cae:	60b9      	str	r1, [r7, #8]
 8006cb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6a1b      	ldr	r3, [r3, #32]
 8006cb6:	f023 0210 	bic.w	r2, r3, #16
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6a1b      	ldr	r3, [r3, #32]
 8006cc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006cd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	031b      	lsls	r3, r3, #12
 8006cd6:	697a      	ldr	r2, [r7, #20]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ce2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	011b      	lsls	r3, r3, #4
 8006ce8:	693a      	ldr	r2, [r7, #16]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	697a      	ldr	r2, [r7, #20]
 8006cf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	693a      	ldr	r2, [r7, #16]
 8006cf8:	621a      	str	r2, [r3, #32]
}
 8006cfa:	bf00      	nop
 8006cfc:	371c      	adds	r7, #28
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr

08006d06 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d06:	b480      	push	{r7}
 8006d08:	b085      	sub	sp, #20
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
 8006d0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006d1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d22:	683a      	ldr	r2, [r7, #0]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	f043 0307 	orr.w	r3, r3, #7
 8006d2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	609a      	str	r2, [r3, #8]
}
 8006d34:	bf00      	nop
 8006d36:	3714      	adds	r7, #20
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b087      	sub	sp, #28
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	607a      	str	r2, [r7, #4]
 8006d4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	021a      	lsls	r2, r3, #8
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	431a      	orrs	r2, r3
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	697a      	ldr	r2, [r7, #20]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	697a      	ldr	r2, [r7, #20]
 8006d72:	609a      	str	r2, [r3, #8]
}
 8006d74:	bf00      	nop
 8006d76:	371c      	adds	r7, #28
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d101      	bne.n	8006d98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d94:	2302      	movs	r3, #2
 8006d96:	e074      	b.n	8006e82 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2202      	movs	r2, #2
 8006da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a34      	ldr	r2, [pc, #208]	; (8006e90 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d009      	beq.n	8006dd6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a33      	ldr	r2, [pc, #204]	; (8006e94 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d004      	beq.n	8006dd6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a31      	ldr	r2, [pc, #196]	; (8006e98 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d108      	bne.n	8006de8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006ddc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006df2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	68fa      	ldr	r2, [r7, #12]
 8006e04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a21      	ldr	r2, [pc, #132]	; (8006e90 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d022      	beq.n	8006e56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e18:	d01d      	beq.n	8006e56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a1f      	ldr	r2, [pc, #124]	; (8006e9c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d018      	beq.n	8006e56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a1d      	ldr	r2, [pc, #116]	; (8006ea0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d013      	beq.n	8006e56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a1c      	ldr	r2, [pc, #112]	; (8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d00e      	beq.n	8006e56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a15      	ldr	r2, [pc, #84]	; (8006e94 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d009      	beq.n	8006e56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a18      	ldr	r2, [pc, #96]	; (8006ea8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d004      	beq.n	8006e56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a11      	ldr	r2, [pc, #68]	; (8006e98 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d10c      	bne.n	8006e70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	68ba      	ldr	r2, [r7, #8]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68ba      	ldr	r2, [r7, #8]
 8006e6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3714      	adds	r7, #20
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop
 8006e90:	40012c00 	.word	0x40012c00
 8006e94:	40013400 	.word	0x40013400
 8006e98:	40015000 	.word	0x40015000
 8006e9c:	40000400 	.word	0x40000400
 8006ea0:	40000800 	.word	0x40000800
 8006ea4:	40000c00 	.word	0x40000c00
 8006ea8:	40014000 	.word	0x40014000

08006eac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b085      	sub	sp, #20
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d101      	bne.n	8006ec8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006ec4:	2302      	movs	r3, #2
 8006ec6:	e096      	b.n	8006ff6 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4313      	orrs	r3, r2
 8006f06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	695b      	ldr	r3, [r3, #20]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	699b      	ldr	r3, [r3, #24]
 8006f3c:	041b      	lsls	r3, r3, #16
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a2f      	ldr	r2, [pc, #188]	; (8007004 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d009      	beq.n	8006f60 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a2d      	ldr	r2, [pc, #180]	; (8007008 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d004      	beq.n	8006f60 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a2c      	ldr	r2, [pc, #176]	; (800700c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d106      	bne.n	8006f6e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	69db      	ldr	r3, [r3, #28]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a24      	ldr	r2, [pc, #144]	; (8007004 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d009      	beq.n	8006f8c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a22      	ldr	r2, [pc, #136]	; (8007008 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d004      	beq.n	8006f8c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a21      	ldr	r2, [pc, #132]	; (800700c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d12b      	bne.n	8006fe4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f96:	051b      	lsls	r3, r3, #20
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	6a1b      	ldr	r3, [r3, #32]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a11      	ldr	r2, [pc, #68]	; (8007004 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d009      	beq.n	8006fd6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a10      	ldr	r2, [pc, #64]	; (8007008 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d004      	beq.n	8006fd6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a0e      	ldr	r2, [pc, #56]	; (800700c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d106      	bne.n	8006fe4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3714      	adds	r7, #20
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	40012c00 	.word	0x40012c00
 8007008:	40013400 	.word	0x40013400
 800700c:	40015000 	.word	0x40015000

08007010 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007018:	bf00      	nop
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800702c:	bf00      	nop
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007040:	bf00      	nop
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007054:	bf00      	nop
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007068:	bf00      	nop
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800707c:	bf00      	nop
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007090:	bf00      	nop
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <LL_EXTI_EnableIT_0_31>:
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80070a4:	4b05      	ldr	r3, [pc, #20]	; (80070bc <LL_EXTI_EnableIT_0_31+0x20>)
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	4904      	ldr	r1, [pc, #16]	; (80070bc <LL_EXTI_EnableIT_0_31+0x20>)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	600b      	str	r3, [r1, #0]
}
 80070b0:	bf00      	nop
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr
 80070bc:	40010400 	.word	0x40010400

080070c0 <LL_EXTI_EnableIT_32_63>:
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80070c8:	4b05      	ldr	r3, [pc, #20]	; (80070e0 <LL_EXTI_EnableIT_32_63+0x20>)
 80070ca:	6a1a      	ldr	r2, [r3, #32]
 80070cc:	4904      	ldr	r1, [pc, #16]	; (80070e0 <LL_EXTI_EnableIT_32_63+0x20>)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	620b      	str	r3, [r1, #32]
}
 80070d4:	bf00      	nop
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr
 80070e0:	40010400 	.word	0x40010400

080070e4 <LL_EXTI_DisableIT_0_31>:
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80070ec:	4b06      	ldr	r3, [pc, #24]	; (8007108 <LL_EXTI_DisableIT_0_31+0x24>)
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	43db      	mvns	r3, r3
 80070f4:	4904      	ldr	r1, [pc, #16]	; (8007108 <LL_EXTI_DisableIT_0_31+0x24>)
 80070f6:	4013      	ands	r3, r2
 80070f8:	600b      	str	r3, [r1, #0]
}
 80070fa:	bf00      	nop
 80070fc:	370c      	adds	r7, #12
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr
 8007106:	bf00      	nop
 8007108:	40010400 	.word	0x40010400

0800710c <LL_EXTI_DisableIT_32_63>:
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8007114:	4b06      	ldr	r3, [pc, #24]	; (8007130 <LL_EXTI_DisableIT_32_63+0x24>)
 8007116:	6a1a      	ldr	r2, [r3, #32]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	43db      	mvns	r3, r3
 800711c:	4904      	ldr	r1, [pc, #16]	; (8007130 <LL_EXTI_DisableIT_32_63+0x24>)
 800711e:	4013      	ands	r3, r2
 8007120:	620b      	str	r3, [r1, #32]
}
 8007122:	bf00      	nop
 8007124:	370c      	adds	r7, #12
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr
 800712e:	bf00      	nop
 8007130:	40010400 	.word	0x40010400

08007134 <LL_EXTI_EnableEvent_0_31>:
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800713c:	4b05      	ldr	r3, [pc, #20]	; (8007154 <LL_EXTI_EnableEvent_0_31+0x20>)
 800713e:	685a      	ldr	r2, [r3, #4]
 8007140:	4904      	ldr	r1, [pc, #16]	; (8007154 <LL_EXTI_EnableEvent_0_31+0x20>)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4313      	orrs	r3, r2
 8007146:	604b      	str	r3, [r1, #4]
}
 8007148:	bf00      	nop
 800714a:	370c      	adds	r7, #12
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr
 8007154:	40010400 	.word	0x40010400

08007158 <LL_EXTI_EnableEvent_32_63>:
{
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8007160:	4b05      	ldr	r3, [pc, #20]	; (8007178 <LL_EXTI_EnableEvent_32_63+0x20>)
 8007162:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007164:	4904      	ldr	r1, [pc, #16]	; (8007178 <LL_EXTI_EnableEvent_32_63+0x20>)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4313      	orrs	r3, r2
 800716a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800716c:	bf00      	nop
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr
 8007178:	40010400 	.word	0x40010400

0800717c <LL_EXTI_DisableEvent_0_31>:
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8007184:	4b06      	ldr	r3, [pc, #24]	; (80071a0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8007186:	685a      	ldr	r2, [r3, #4]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	43db      	mvns	r3, r3
 800718c:	4904      	ldr	r1, [pc, #16]	; (80071a0 <LL_EXTI_DisableEvent_0_31+0x24>)
 800718e:	4013      	ands	r3, r2
 8007190:	604b      	str	r3, [r1, #4]
}
 8007192:	bf00      	nop
 8007194:	370c      	adds	r7, #12
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	40010400 	.word	0x40010400

080071a4 <LL_EXTI_DisableEvent_32_63>:
{
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80071ac:	4b06      	ldr	r3, [pc, #24]	; (80071c8 <LL_EXTI_DisableEvent_32_63+0x24>)
 80071ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	43db      	mvns	r3, r3
 80071b4:	4904      	ldr	r1, [pc, #16]	; (80071c8 <LL_EXTI_DisableEvent_32_63+0x24>)
 80071b6:	4013      	ands	r3, r2
 80071b8:	624b      	str	r3, [r1, #36]	; 0x24
}
 80071ba:	bf00      	nop
 80071bc:	370c      	adds	r7, #12
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	40010400 	.word	0x40010400

080071cc <LL_EXTI_EnableRisingTrig_0_31>:
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80071d4:	4b05      	ldr	r3, [pc, #20]	; (80071ec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80071d6:	689a      	ldr	r2, [r3, #8]
 80071d8:	4904      	ldr	r1, [pc, #16]	; (80071ec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4313      	orrs	r3, r2
 80071de:	608b      	str	r3, [r1, #8]
}
 80071e0:	bf00      	nop
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr
 80071ec:	40010400 	.word	0x40010400

080071f0 <LL_EXTI_EnableRisingTrig_32_63>:
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80071f8:	4b05      	ldr	r3, [pc, #20]	; (8007210 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80071fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071fc:	4904      	ldr	r1, [pc, #16]	; (8007210 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4313      	orrs	r3, r2
 8007202:	628b      	str	r3, [r1, #40]	; 0x28
}
 8007204:	bf00      	nop
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr
 8007210:	40010400 	.word	0x40010400

08007214 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800721c:	4b06      	ldr	r3, [pc, #24]	; (8007238 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800721e:	689a      	ldr	r2, [r3, #8]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	43db      	mvns	r3, r3
 8007224:	4904      	ldr	r1, [pc, #16]	; (8007238 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007226:	4013      	ands	r3, r2
 8007228:	608b      	str	r3, [r1, #8]
}
 800722a:	bf00      	nop
 800722c:	370c      	adds	r7, #12
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr
 8007236:	bf00      	nop
 8007238:	40010400 	.word	0x40010400

0800723c <LL_EXTI_DisableRisingTrig_32_63>:
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8007244:	4b06      	ldr	r3, [pc, #24]	; (8007260 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8007246:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	43db      	mvns	r3, r3
 800724c:	4904      	ldr	r1, [pc, #16]	; (8007260 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800724e:	4013      	ands	r3, r2
 8007250:	628b      	str	r3, [r1, #40]	; 0x28
}
 8007252:	bf00      	nop
 8007254:	370c      	adds	r7, #12
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr
 800725e:	bf00      	nop
 8007260:	40010400 	.word	0x40010400

08007264 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800726c:	4b05      	ldr	r3, [pc, #20]	; (8007284 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800726e:	68da      	ldr	r2, [r3, #12]
 8007270:	4904      	ldr	r1, [pc, #16]	; (8007284 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4313      	orrs	r3, r2
 8007276:	60cb      	str	r3, [r1, #12]
}
 8007278:	bf00      	nop
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr
 8007284:	40010400 	.word	0x40010400

08007288 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8007288:	b480      	push	{r7}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8007290:	4b05      	ldr	r3, [pc, #20]	; (80072a8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8007292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007294:	4904      	ldr	r1, [pc, #16]	; (80072a8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	4313      	orrs	r3, r2
 800729a:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800729c:	bf00      	nop
 800729e:	370c      	adds	r7, #12
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr
 80072a8:	40010400 	.word	0x40010400

080072ac <LL_EXTI_DisableFallingTrig_0_31>:
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80072b4:	4b06      	ldr	r3, [pc, #24]	; (80072d0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80072b6:	68da      	ldr	r2, [r3, #12]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	43db      	mvns	r3, r3
 80072bc:	4904      	ldr	r1, [pc, #16]	; (80072d0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80072be:	4013      	ands	r3, r2
 80072c0:	60cb      	str	r3, [r1, #12]
}
 80072c2:	bf00      	nop
 80072c4:	370c      	adds	r7, #12
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr
 80072ce:	bf00      	nop
 80072d0:	40010400 	.word	0x40010400

080072d4 <LL_EXTI_DisableFallingTrig_32_63>:
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80072dc:	4b06      	ldr	r3, [pc, #24]	; (80072f8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80072de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	43db      	mvns	r3, r3
 80072e4:	4904      	ldr	r1, [pc, #16]	; (80072f8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80072e6:	4013      	ands	r3, r2
 80072e8:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80072ea:	bf00      	nop
 80072ec:	370c      	adds	r7, #12
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr
 80072f6:	bf00      	nop
 80072f8:	40010400 	.word	0x40010400

080072fc <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8007304:	2300      	movs	r3, #0
 8007306:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	7a1b      	ldrb	r3, [r3, #8]
 800730c:	2b00      	cmp	r3, #0
 800730e:	f000 80c8 	beq.w	80074a2 <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d05d      	beq.n	80073d6 <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	7a5b      	ldrb	r3, [r3, #9]
 800731e:	2b01      	cmp	r3, #1
 8007320:	d00e      	beq.n	8007340 <LL_EXTI_Init+0x44>
 8007322:	2b02      	cmp	r3, #2
 8007324:	d017      	beq.n	8007356 <LL_EXTI_Init+0x5a>
 8007326:	2b00      	cmp	r3, #0
 8007328:	d120      	bne.n	800736c <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4618      	mov	r0, r3
 8007330:	f7ff ff24 	bl	800717c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4618      	mov	r0, r3
 800733a:	f7ff feaf 	bl	800709c <LL_EXTI_EnableIT_0_31>
          break;
 800733e:	e018      	b.n	8007372 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4618      	mov	r0, r3
 8007346:	f7ff fecd 	bl	80070e4 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4618      	mov	r0, r3
 8007350:	f7ff fef0 	bl	8007134 <LL_EXTI_EnableEvent_0_31>
          break;
 8007354:	e00d      	b.n	8007372 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4618      	mov	r0, r3
 800735c:	f7ff fe9e 	bl	800709c <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4618      	mov	r0, r3
 8007366:	f7ff fee5 	bl	8007134 <LL_EXTI_EnableEvent_0_31>
          break;
 800736a:	e002      	b.n	8007372 <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 800736c:	2301      	movs	r3, #1
 800736e:	60fb      	str	r3, [r7, #12]
          break;
 8007370:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	7a9b      	ldrb	r3, [r3, #10]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d02d      	beq.n	80073d6 <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	7a9b      	ldrb	r3, [r3, #10]
 800737e:	2b02      	cmp	r3, #2
 8007380:	d00e      	beq.n	80073a0 <LL_EXTI_Init+0xa4>
 8007382:	2b03      	cmp	r3, #3
 8007384:	d017      	beq.n	80073b6 <LL_EXTI_Init+0xba>
 8007386:	2b01      	cmp	r3, #1
 8007388:	d120      	bne.n	80073cc <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4618      	mov	r0, r3
 8007390:	f7ff ff8c 	bl	80072ac <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4618      	mov	r0, r3
 800739a:	f7ff ff17 	bl	80071cc <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800739e:	e01b      	b.n	80073d8 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4618      	mov	r0, r3
 80073a6:	f7ff ff35 	bl	8007214 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4618      	mov	r0, r3
 80073b0:	f7ff ff58 	bl	8007264 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80073b4:	e010      	b.n	80073d8 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4618      	mov	r0, r3
 80073bc:	f7ff ff06 	bl	80071cc <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4618      	mov	r0, r3
 80073c6:	f7ff ff4d 	bl	8007264 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80073ca:	e005      	b.n	80073d8 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f043 0302 	orr.w	r3, r3, #2
 80073d2:	60fb      	str	r3, [r7, #12]
            break;
 80073d4:	e000      	b.n	80073d8 <LL_EXTI_Init+0xdc>
        }
      }
 80073d6:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d075      	beq.n	80074cc <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	7a5b      	ldrb	r3, [r3, #9]
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d00e      	beq.n	8007406 <LL_EXTI_Init+0x10a>
 80073e8:	2b02      	cmp	r3, #2
 80073ea:	d017      	beq.n	800741c <LL_EXTI_Init+0x120>
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d120      	bne.n	8007432 <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7ff fed5 	bl	80071a4 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	4618      	mov	r0, r3
 8007400:	f7ff fe5e 	bl	80070c0 <LL_EXTI_EnableIT_32_63>
          break;
 8007404:	e01a      	b.n	800743c <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	4618      	mov	r0, r3
 800740c:	f7ff fe7e 	bl	800710c <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	4618      	mov	r0, r3
 8007416:	f7ff fe9f 	bl	8007158 <LL_EXTI_EnableEvent_32_63>
          break;
 800741a:	e00f      	b.n	800743c <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	4618      	mov	r0, r3
 8007422:	f7ff fe4d 	bl	80070c0 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	4618      	mov	r0, r3
 800742c:	f7ff fe94 	bl	8007158 <LL_EXTI_EnableEvent_32_63>
          break;
 8007430:	e004      	b.n	800743c <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f043 0304 	orr.w	r3, r3, #4
 8007438:	60fb      	str	r3, [r7, #12]
          break;
 800743a:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	7a9b      	ldrb	r3, [r3, #10]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d043      	beq.n	80074cc <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	7a9b      	ldrb	r3, [r3, #10]
 8007448:	2b02      	cmp	r3, #2
 800744a:	d00e      	beq.n	800746a <LL_EXTI_Init+0x16e>
 800744c:	2b03      	cmp	r3, #3
 800744e:	d017      	beq.n	8007480 <LL_EXTI_Init+0x184>
 8007450:	2b01      	cmp	r3, #1
 8007452:	d120      	bne.n	8007496 <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	4618      	mov	r0, r3
 800745a:	f7ff ff3b 	bl	80072d4 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	4618      	mov	r0, r3
 8007464:	f7ff fec4 	bl	80071f0 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8007468:	e031      	b.n	80074ce <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	4618      	mov	r0, r3
 8007470:	f7ff fee4 	bl	800723c <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	4618      	mov	r0, r3
 800747a:	f7ff ff05 	bl	8007288 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800747e:	e026      	b.n	80074ce <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	4618      	mov	r0, r3
 8007486:	f7ff feb3 	bl	80071f0 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	4618      	mov	r0, r3
 8007490:	f7ff fefa 	bl	8007288 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8007494:	e01b      	b.n	80074ce <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f043 0305 	orr.w	r3, r3, #5
 800749c:	60fb      	str	r3, [r7, #12]
            break;
 800749e:	bf00      	nop
 80074a0:	e015      	b.n	80074ce <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4618      	mov	r0, r3
 80074a8:	f7ff fe1c 	bl	80070e4 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4618      	mov	r0, r3
 80074b2:	f7ff fe63 	bl	800717c <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	4618      	mov	r0, r3
 80074bc:	f7ff fe26 	bl	800710c <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7ff fe6d 	bl	80071a4 <LL_EXTI_DisableEvent_32_63>
 80074ca:	e000      	b.n	80074ce <LL_EXTI_Init+0x1d2>
      }
 80074cc:	bf00      	nop
  }

  return status;
 80074ce:	68fb      	ldr	r3, [r7, #12]
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3710      	adds	r7, #16
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <LL_GPIO_SetPinMode>:
{
 80074d8:	b480      	push	{r7}
 80074da:	b089      	sub	sp, #36	; 0x24
 80074dc:	af00      	add	r7, sp, #0
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	60b9      	str	r1, [r7, #8]
 80074e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	fa93 f3a3 	rbit	r3, r3
 80074f2:	613b      	str	r3, [r7, #16]
  return result;
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	fab3 f383 	clz	r3, r3
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	005b      	lsls	r3, r3, #1
 80074fe:	2103      	movs	r1, #3
 8007500:	fa01 f303 	lsl.w	r3, r1, r3
 8007504:	43db      	mvns	r3, r3
 8007506:	401a      	ands	r2, r3
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	fa93 f3a3 	rbit	r3, r3
 8007512:	61bb      	str	r3, [r7, #24]
  return result;
 8007514:	69bb      	ldr	r3, [r7, #24]
 8007516:	fab3 f383 	clz	r3, r3
 800751a:	b2db      	uxtb	r3, r3
 800751c:	005b      	lsls	r3, r3, #1
 800751e:	6879      	ldr	r1, [r7, #4]
 8007520:	fa01 f303 	lsl.w	r3, r1, r3
 8007524:	431a      	orrs	r2, r3
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	601a      	str	r2, [r3, #0]
}
 800752a:	bf00      	nop
 800752c:	3724      	adds	r7, #36	; 0x24
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr

08007536 <LL_GPIO_SetPinOutputType>:
{
 8007536:	b480      	push	{r7}
 8007538:	b085      	sub	sp, #20
 800753a:	af00      	add	r7, sp, #0
 800753c:	60f8      	str	r0, [r7, #12]
 800753e:	60b9      	str	r1, [r7, #8]
 8007540:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	685a      	ldr	r2, [r3, #4]
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	43db      	mvns	r3, r3
 800754a:	401a      	ands	r2, r3
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	6879      	ldr	r1, [r7, #4]
 8007550:	fb01 f303 	mul.w	r3, r1, r3
 8007554:	431a      	orrs	r2, r3
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	605a      	str	r2, [r3, #4]
}
 800755a:	bf00      	nop
 800755c:	3714      	adds	r7, #20
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr

08007566 <LL_GPIO_SetPinSpeed>:
{
 8007566:	b480      	push	{r7}
 8007568:	b089      	sub	sp, #36	; 0x24
 800756a:	af00      	add	r7, sp, #0
 800756c:	60f8      	str	r0, [r7, #12]
 800756e:	60b9      	str	r1, [r7, #8]
 8007570:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	689a      	ldr	r2, [r3, #8]
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	fa93 f3a3 	rbit	r3, r3
 8007580:	613b      	str	r3, [r7, #16]
  return result;
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	fab3 f383 	clz	r3, r3
 8007588:	b2db      	uxtb	r3, r3
 800758a:	005b      	lsls	r3, r3, #1
 800758c:	2103      	movs	r1, #3
 800758e:	fa01 f303 	lsl.w	r3, r1, r3
 8007592:	43db      	mvns	r3, r3
 8007594:	401a      	ands	r2, r3
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	fa93 f3a3 	rbit	r3, r3
 80075a0:	61bb      	str	r3, [r7, #24]
  return result;
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	fab3 f383 	clz	r3, r3
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	005b      	lsls	r3, r3, #1
 80075ac:	6879      	ldr	r1, [r7, #4]
 80075ae:	fa01 f303 	lsl.w	r3, r1, r3
 80075b2:	431a      	orrs	r2, r3
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	609a      	str	r2, [r3, #8]
}
 80075b8:	bf00      	nop
 80075ba:	3724      	adds	r7, #36	; 0x24
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <LL_GPIO_SetPinPull>:
{
 80075c4:	b480      	push	{r7}
 80075c6:	b089      	sub	sp, #36	; 0x24
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	68da      	ldr	r2, [r3, #12]
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	fa93 f3a3 	rbit	r3, r3
 80075de:	613b      	str	r3, [r7, #16]
  return result;
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	fab3 f383 	clz	r3, r3
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	005b      	lsls	r3, r3, #1
 80075ea:	2103      	movs	r1, #3
 80075ec:	fa01 f303 	lsl.w	r3, r1, r3
 80075f0:	43db      	mvns	r3, r3
 80075f2:	401a      	ands	r2, r3
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	fa93 f3a3 	rbit	r3, r3
 80075fe:	61bb      	str	r3, [r7, #24]
  return result;
 8007600:	69bb      	ldr	r3, [r7, #24]
 8007602:	fab3 f383 	clz	r3, r3
 8007606:	b2db      	uxtb	r3, r3
 8007608:	005b      	lsls	r3, r3, #1
 800760a:	6879      	ldr	r1, [r7, #4]
 800760c:	fa01 f303 	lsl.w	r3, r1, r3
 8007610:	431a      	orrs	r2, r3
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	60da      	str	r2, [r3, #12]
}
 8007616:	bf00      	nop
 8007618:	3724      	adds	r7, #36	; 0x24
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr

08007622 <LL_GPIO_SetAFPin_0_7>:
{
 8007622:	b480      	push	{r7}
 8007624:	b089      	sub	sp, #36	; 0x24
 8007626:	af00      	add	r7, sp, #0
 8007628:	60f8      	str	r0, [r7, #12]
 800762a:	60b9      	str	r1, [r7, #8]
 800762c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	6a1a      	ldr	r2, [r3, #32]
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	fa93 f3a3 	rbit	r3, r3
 800763c:	613b      	str	r3, [r7, #16]
  return result;
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	fab3 f383 	clz	r3, r3
 8007644:	b2db      	uxtb	r3, r3
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	210f      	movs	r1, #15
 800764a:	fa01 f303 	lsl.w	r3, r1, r3
 800764e:	43db      	mvns	r3, r3
 8007650:	401a      	ands	r2, r3
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007656:	69fb      	ldr	r3, [r7, #28]
 8007658:	fa93 f3a3 	rbit	r3, r3
 800765c:	61bb      	str	r3, [r7, #24]
  return result;
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	fab3 f383 	clz	r3, r3
 8007664:	b2db      	uxtb	r3, r3
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	6879      	ldr	r1, [r7, #4]
 800766a:	fa01 f303 	lsl.w	r3, r1, r3
 800766e:	431a      	orrs	r2, r3
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	621a      	str	r2, [r3, #32]
}
 8007674:	bf00      	nop
 8007676:	3724      	adds	r7, #36	; 0x24
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <LL_GPIO_SetAFPin_8_15>:
{
 8007680:	b480      	push	{r7}
 8007682:	b089      	sub	sp, #36	; 0x24
 8007684:	af00      	add	r7, sp, #0
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	60b9      	str	r1, [r7, #8]
 800768a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	0a1b      	lsrs	r3, r3, #8
 8007694:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	fa93 f3a3 	rbit	r3, r3
 800769c:	613b      	str	r3, [r7, #16]
  return result;
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	fab3 f383 	clz	r3, r3
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	210f      	movs	r1, #15
 80076aa:	fa01 f303 	lsl.w	r3, r1, r3
 80076ae:	43db      	mvns	r3, r3
 80076b0:	401a      	ands	r2, r3
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	0a1b      	lsrs	r3, r3, #8
 80076b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	fa93 f3a3 	rbit	r3, r3
 80076be:	61bb      	str	r3, [r7, #24]
  return result;
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	fab3 f383 	clz	r3, r3
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	6879      	ldr	r1, [r7, #4]
 80076cc:	fa01 f303 	lsl.w	r3, r1, r3
 80076d0:	431a      	orrs	r2, r3
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80076d6:	bf00      	nop
 80076d8:	3724      	adds	r7, #36	; 0x24
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr

080076e2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b086      	sub	sp, #24
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
 80076ea:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	fa93 f3a3 	rbit	r3, r3
 80076f8:	60bb      	str	r3, [r7, #8]
  return result;
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	fab3 f383 	clz	r3, r3
 8007700:	b2db      	uxtb	r3, r3
 8007702:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007704:	e040      	b.n	8007788 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	2101      	movs	r1, #1
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	fa01 f303 	lsl.w	r3, r1, r3
 8007712:	4013      	ands	r3, r2
 8007714:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d032      	beq.n	8007782 <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	461a      	mov	r2, r3
 8007722:	6939      	ldr	r1, [r7, #16]
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f7ff fed7 	bl	80074d8 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	2b01      	cmp	r3, #1
 8007730:	d003      	beq.n	800773a <LL_GPIO_Init+0x58>
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	2b02      	cmp	r3, #2
 8007738:	d106      	bne.n	8007748 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	461a      	mov	r2, r3
 8007740:	6939      	ldr	r1, [r7, #16]
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f7ff ff0f 	bl	8007566 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	691b      	ldr	r3, [r3, #16]
 800774c:	461a      	mov	r2, r3
 800774e:	6939      	ldr	r1, [r7, #16]
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f7ff ff37 	bl	80075c4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	2b02      	cmp	r3, #2
 800775c:	d111      	bne.n	8007782 <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	2bff      	cmp	r3, #255	; 0xff
 8007762:	d807      	bhi.n	8007774 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	695b      	ldr	r3, [r3, #20]
 8007768:	461a      	mov	r2, r3
 800776a:	6939      	ldr	r1, [r7, #16]
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f7ff ff58 	bl	8007622 <LL_GPIO_SetAFPin_0_7>
 8007772:	e006      	b.n	8007782 <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	695b      	ldr	r3, [r3, #20]
 8007778:	461a      	mov	r2, r3
 800777a:	6939      	ldr	r1, [r7, #16]
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f7ff ff7f 	bl	8007680 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	3301      	adds	r3, #1
 8007786:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	fa22 f303 	lsr.w	r3, r2, r3
 8007792:	2b00      	cmp	r3, #0
 8007794:	d1b7      	bne.n	8007706 <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	2b01      	cmp	r3, #1
 800779c:	d003      	beq.n	80077a6 <LL_GPIO_Init+0xc4>
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	2b02      	cmp	r3, #2
 80077a4:	d107      	bne.n	80077b6 <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	6819      	ldr	r1, [r3, #0]
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	461a      	mov	r2, r3
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f7ff fec0 	bl	8007536 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3718      	adds	r7, #24
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 80077c0:	b590      	push	{r4, r7, lr}
 80077c2:	b08b      	sub	sp, #44	; 0x2c
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	4604      	mov	r4, r0
 80077c8:	4608      	mov	r0, r1
 80077ca:	4611      	mov	r1, r2
 80077cc:	461a      	mov	r2, r3
 80077ce:	4623      	mov	r3, r4
 80077d0:	80fb      	strh	r3, [r7, #6]
 80077d2:	4603      	mov	r3, r0
 80077d4:	80bb      	strh	r3, [r7, #4]
 80077d6:	460b      	mov	r3, r1
 80077d8:	807b      	strh	r3, [r7, #2]
 80077da:	4613      	mov	r3, r2
 80077dc:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 80077de:	887b      	ldrh	r3, [r7, #2]
 80077e0:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 80077e2:	2300      	movs	r3, #0
 80077e4:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 80077e6:	887b      	ldrh	r3, [r7, #2]
 80077e8:	005b      	lsls	r3, r3, #1
 80077ea:	f1c3 0301 	rsb	r3, r3, #1
 80077ee:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 80077f0:	2300      	movs	r3, #0
 80077f2:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 80077f4:	2300      	movs	r3, #0
 80077f6:	617b      	str	r3, [r7, #20]

    while (x >= y)
 80077f8:	e061      	b.n	80078be <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 80077fa:	88fa      	ldrh	r2, [r7, #6]
 80077fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fe:	1ad3      	subs	r3, r2, r3
 8007800:	613b      	str	r3, [r7, #16]
 8007802:	e018      	b.n	8007836 <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	b298      	uxth	r0, r3
 8007808:	6a3b      	ldr	r3, [r7, #32]
 800780a:	b29a      	uxth	r2, r3
 800780c:	88bb      	ldrh	r3, [r7, #4]
 800780e:	4413      	add	r3, r2
 8007810:	b29b      	uxth	r3, r3
 8007812:	883a      	ldrh	r2, [r7, #0]
 8007814:	4619      	mov	r1, r3
 8007816:	f000 fc21 	bl	800805c <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	b298      	uxth	r0, r3
 800781e:	6a3b      	ldr	r3, [r7, #32]
 8007820:	b29b      	uxth	r3, r3
 8007822:	88ba      	ldrh	r2, [r7, #4]
 8007824:	1ad3      	subs	r3, r2, r3
 8007826:	b29b      	uxth	r3, r3
 8007828:	883a      	ldrh	r2, [r7, #0]
 800782a:	4619      	mov	r1, r3
 800782c:	f000 fc16 	bl	800805c <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	3301      	adds	r3, #1
 8007834:	613b      	str	r3, [r7, #16]
 8007836:	88fa      	ldrh	r2, [r7, #6]
 8007838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783a:	4413      	add	r3, r2
 800783c:	693a      	ldr	r2, [r7, #16]
 800783e:	429a      	cmp	r2, r3
 8007840:	dde0      	ble.n	8007804 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 8007842:	88fa      	ldrh	r2, [r7, #6]
 8007844:	6a3b      	ldr	r3, [r7, #32]
 8007846:	1ad3      	subs	r3, r2, r3
 8007848:	60fb      	str	r3, [r7, #12]
 800784a:	e018      	b.n	800787e <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	b298      	uxth	r0, r3
 8007850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007852:	b29a      	uxth	r2, r3
 8007854:	88bb      	ldrh	r3, [r7, #4]
 8007856:	4413      	add	r3, r2
 8007858:	b29b      	uxth	r3, r3
 800785a:	883a      	ldrh	r2, [r7, #0]
 800785c:	4619      	mov	r1, r3
 800785e:	f000 fbfd 	bl	800805c <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	b298      	uxth	r0, r3
 8007866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007868:	b29b      	uxth	r3, r3
 800786a:	88ba      	ldrh	r2, [r7, #4]
 800786c:	1ad3      	subs	r3, r2, r3
 800786e:	b29b      	uxth	r3, r3
 8007870:	883a      	ldrh	r2, [r7, #0]
 8007872:	4619      	mov	r1, r3
 8007874:	f000 fbf2 	bl	800805c <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	3301      	adds	r3, #1
 800787c:	60fb      	str	r3, [r7, #12]
 800787e:	88fa      	ldrh	r2, [r7, #6]
 8007880:	6a3b      	ldr	r3, [r7, #32]
 8007882:	4413      	add	r3, r2
 8007884:	68fa      	ldr	r2, [r7, #12]
 8007886:	429a      	cmp	r2, r3
 8007888:	dde0      	ble.n	800784c <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 800788a:	6a3b      	ldr	r3, [r7, #32]
 800788c:	3301      	adds	r3, #1
 800788e:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 8007890:	697a      	ldr	r2, [r7, #20]
 8007892:	69bb      	ldr	r3, [r7, #24]
 8007894:	4413      	add	r3, r2
 8007896:	617b      	str	r3, [r7, #20]
        yChange += 2;
 8007898:	69bb      	ldr	r3, [r7, #24]
 800789a:	3302      	adds	r3, #2
 800789c:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	005a      	lsls	r2, r3, #1
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	4413      	add	r3, r2
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	dd09      	ble.n	80078be <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 80078aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ac:	3b01      	subs	r3, #1
 80078ae:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 80078b0:	697a      	ldr	r2, [r7, #20]
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	4413      	add	r3, r2
 80078b6:	617b      	str	r3, [r7, #20]
            xChange += 2;
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	3302      	adds	r3, #2
 80078bc:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 80078be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078c0:	6a3b      	ldr	r3, [r7, #32]
 80078c2:	429a      	cmp	r2, r3
 80078c4:	da99      	bge.n	80077fa <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 80078c6:	bf00      	nop
 80078c8:	372c      	adds	r7, #44	; 0x2c
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd90      	pop	{r4, r7, pc}
	...

080078d0 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 80078d0:	b590      	push	{r4, r7, lr}
 80078d2:	b089      	sub	sp, #36	; 0x24
 80078d4:	af02      	add	r7, sp, #8
 80078d6:	4604      	mov	r4, r0
 80078d8:	4608      	mov	r0, r1
 80078da:	4611      	mov	r1, r2
 80078dc:	461a      	mov	r2, r3
 80078de:	4623      	mov	r3, r4
 80078e0:	71fb      	strb	r3, [r7, #7]
 80078e2:	4603      	mov	r3, r0
 80078e4:	71bb      	strb	r3, [r7, #6]
 80078e6:	460b      	mov	r3, r1
 80078e8:	717b      	strb	r3, [r7, #5]
 80078ea:	4613      	mov	r3, r2
 80078ec:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 80078ee:	79fb      	ldrb	r3, [r7, #7]
 80078f0:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 80078f2:	7dfb      	ldrb	r3, [r7, #23]
 80078f4:	2b1f      	cmp	r3, #31
 80078f6:	d802      	bhi.n	80078fe <ILI9341_Draw_Char+0x2e>
        Character = 0;
 80078f8:	2300      	movs	r3, #0
 80078fa:	71fb      	strb	r3, [r7, #7]
 80078fc:	e002      	b.n	8007904 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 80078fe:	7dfb      	ldrb	r3, [r7, #23]
 8007900:	3b20      	subs	r3, #32
 8007902:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8007904:	2300      	movs	r3, #0
 8007906:	753b      	strb	r3, [r7, #20]
 8007908:	e012      	b.n	8007930 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 800790a:	7dfa      	ldrb	r2, [r7, #23]
 800790c:	7d38      	ldrb	r0, [r7, #20]
 800790e:	7d39      	ldrb	r1, [r7, #20]
 8007910:	4c3b      	ldr	r4, [pc, #236]	; (8007a00 <ILI9341_Draw_Char+0x130>)
 8007912:	4613      	mov	r3, r2
 8007914:	005b      	lsls	r3, r3, #1
 8007916:	4413      	add	r3, r2
 8007918:	005b      	lsls	r3, r3, #1
 800791a:	4423      	add	r3, r4
 800791c:	4403      	add	r3, r0
 800791e:	781a      	ldrb	r2, [r3, #0]
 8007920:	f107 0318 	add.w	r3, r7, #24
 8007924:	440b      	add	r3, r1
 8007926:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800792a:	7d3b      	ldrb	r3, [r7, #20]
 800792c:	3301      	adds	r3, #1
 800792e:	753b      	strb	r3, [r7, #20]
 8007930:	7d3b      	ldrb	r3, [r7, #20]
 8007932:	2b05      	cmp	r3, #5
 8007934:	d9e9      	bls.n	800790a <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8007936:	79bb      	ldrb	r3, [r7, #6]
 8007938:	b298      	uxth	r0, r3
 800793a:	797b      	ldrb	r3, [r7, #5]
 800793c:	b299      	uxth	r1, r3
 800793e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007940:	461a      	mov	r2, r3
 8007942:	0052      	lsls	r2, r2, #1
 8007944:	4413      	add	r3, r2
 8007946:	005b      	lsls	r3, r3, #1
 8007948:	b29a      	uxth	r2, r3
 800794a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800794c:	00db      	lsls	r3, r3, #3
 800794e:	b29c      	uxth	r4, r3
 8007950:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007952:	9300      	str	r3, [sp, #0]
 8007954:	4623      	mov	r3, r4
 8007956:	f000 fc5b 	bl	8008210 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 800795a:	2300      	movs	r3, #0
 800795c:	757b      	strb	r3, [r7, #21]
 800795e:	e048      	b.n	80079f2 <ILI9341_Draw_Char+0x122>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8007960:	2300      	movs	r3, #0
 8007962:	75bb      	strb	r3, [r7, #22]
 8007964:	e03f      	b.n	80079e6 <ILI9341_Draw_Char+0x116>
            if (temp[j] & (1<<i)) {			
 8007966:	7d7b      	ldrb	r3, [r7, #21]
 8007968:	f107 0218 	add.w	r2, r7, #24
 800796c:	4413      	add	r3, r2
 800796e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8007972:	461a      	mov	r2, r3
 8007974:	7dbb      	ldrb	r3, [r7, #22]
 8007976:	fa42 f303 	asr.w	r3, r2, r3
 800797a:	f003 0301 	and.w	r3, r3, #1
 800797e:	2b00      	cmp	r3, #0
 8007980:	d02e      	beq.n	80079e0 <ILI9341_Draw_Char+0x110>
							if(Size == 1)
 8007982:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007984:	2b01      	cmp	r3, #1
 8007986:	d110      	bne.n	80079aa <ILI9341_Draw_Char+0xda>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8007988:	79bb      	ldrb	r3, [r7, #6]
 800798a:	b29a      	uxth	r2, r3
 800798c:	7d7b      	ldrb	r3, [r7, #21]
 800798e:	b29b      	uxth	r3, r3
 8007990:	4413      	add	r3, r2
 8007992:	b298      	uxth	r0, r3
 8007994:	797b      	ldrb	r3, [r7, #5]
 8007996:	b29a      	uxth	r2, r3
 8007998:	7dbb      	ldrb	r3, [r7, #22]
 800799a:	b29b      	uxth	r3, r3
 800799c:	4413      	add	r3, r2
 800799e:	b29b      	uxth	r3, r3
 80079a0:	887a      	ldrh	r2, [r7, #2]
 80079a2:	4619      	mov	r1, r3
 80079a4:	f000 fb5a 	bl	800805c <ILI9341_Draw_Pixel>
 80079a8:	e01a      	b.n	80079e0 <ILI9341_Draw_Char+0x110>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 80079aa:	79bb      	ldrb	r3, [r7, #6]
 80079ac:	b29a      	uxth	r2, r3
 80079ae:	7d7b      	ldrb	r3, [r7, #21]
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80079b4:	fb11 f303 	smulbb	r3, r1, r3
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	4413      	add	r3, r2
 80079bc:	b298      	uxth	r0, r3
 80079be:	797b      	ldrb	r3, [r7, #5]
 80079c0:	b29a      	uxth	r2, r3
 80079c2:	7dbb      	ldrb	r3, [r7, #22]
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80079c8:	fb11 f303 	smulbb	r3, r1, r3
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	4413      	add	r3, r2
 80079d0:	b299      	uxth	r1, r3
 80079d2:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 80079d4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80079d6:	887b      	ldrh	r3, [r7, #2]
 80079d8:	9300      	str	r3, [sp, #0]
 80079da:	4623      	mov	r3, r4
 80079dc:	f000 fc18 	bl	8008210 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 80079e0:	7dbb      	ldrb	r3, [r7, #22]
 80079e2:	3301      	adds	r3, #1
 80079e4:	75bb      	strb	r3, [r7, #22]
 80079e6:	7dbb      	ldrb	r3, [r7, #22]
 80079e8:	2b07      	cmp	r3, #7
 80079ea:	d9bc      	bls.n	8007966 <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 80079ec:	7d7b      	ldrb	r3, [r7, #21]
 80079ee:	3301      	adds	r3, #1
 80079f0:	757b      	strb	r3, [r7, #21]
 80079f2:	7d7b      	ldrb	r3, [r7, #21]
 80079f4:	2b05      	cmp	r3, #5
 80079f6:	d9b3      	bls.n	8007960 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 80079f8:	bf00      	nop
 80079fa:	371c      	adds	r7, #28
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd90      	pop	{r4, r7, pc}
 8007a00:	0800964c 	.word	0x0800964c

08007a04 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8007a04:	b590      	push	{r4, r7, lr}
 8007a06:	b085      	sub	sp, #20
 8007a08:	af02      	add	r7, sp, #8
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	4608      	mov	r0, r1
 8007a0e:	4611      	mov	r1, r2
 8007a10:	461a      	mov	r2, r3
 8007a12:	4603      	mov	r3, r0
 8007a14:	70fb      	strb	r3, [r7, #3]
 8007a16:	460b      	mov	r3, r1
 8007a18:	70bb      	strb	r3, [r7, #2]
 8007a1a:	4613      	mov	r3, r2
 8007a1c:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8007a1e:	e017      	b.n	8007a50 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	1c5a      	adds	r2, r3, #1
 8007a24:	607a      	str	r2, [r7, #4]
 8007a26:	7818      	ldrb	r0, [r3, #0]
 8007a28:	883c      	ldrh	r4, [r7, #0]
 8007a2a:	78ba      	ldrb	r2, [r7, #2]
 8007a2c:	78f9      	ldrb	r1, [r7, #3]
 8007a2e:	8bbb      	ldrh	r3, [r7, #28]
 8007a30:	9301      	str	r3, [sp, #4]
 8007a32:	8b3b      	ldrh	r3, [r7, #24]
 8007a34:	9300      	str	r3, [sp, #0]
 8007a36:	4623      	mov	r3, r4
 8007a38:	f7ff ff4a 	bl	80078d0 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8007a3c:	8b3b      	ldrh	r3, [r7, #24]
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	461a      	mov	r2, r3
 8007a42:	0052      	lsls	r2, r2, #1
 8007a44:	4413      	add	r3, r2
 8007a46:	005b      	lsls	r3, r3, #1
 8007a48:	b2da      	uxtb	r2, r3
 8007a4a:	78fb      	ldrb	r3, [r7, #3]
 8007a4c:	4413      	add	r3, r2
 8007a4e:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d1e3      	bne.n	8007a20 <ILI9341_Draw_Text+0x1c>
    }
}
 8007a58:	bf00      	nop
 8007a5a:	370c      	adds	r7, #12
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd90      	pop	{r4, r7, pc}

08007a60 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8007a60:	b480      	push	{r7}
 8007a62:	af00      	add	r7, sp, #0

	//GPIO INIT
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007a64:	4b05      	ldr	r3, [pc, #20]	; (8007a7c <ILI9341_SPI_Init+0x1c>)
 8007a66:	695b      	ldr	r3, [r3, #20]
 8007a68:	4a04      	ldr	r2, [pc, #16]	; (8007a7c <ILI9341_SPI_Init+0x1c>)
 8007a6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a6e:	6153      	str	r3, [r2, #20]
}
 8007a70:	bf00      	nop
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr
 8007a7a:	bf00      	nop
 8007a7c:	48000400 	.word	0x48000400

08007a80 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	4603      	mov	r3, r0
 8007a88:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef res;
	#ifdef USE_ILI9341_SPIDMA
		if( ((res = HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &SPI_Data, 1)) != HAL_OK) )
 8007a8a:	1dfb      	adds	r3, r7, #7
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	4619      	mov	r1, r3
 8007a90:	4804      	ldr	r0, [pc, #16]	; (8007aa4 <ILI9341_SPI_Send+0x24>)
 8007a92:	f7fe f887 	bl	8005ba4 <HAL_SPI_Transmit_DMA>
 8007a96:	4603      	mov	r3, r0
 8007a98:	73fb      	strb	r3, [r7, #15]
		{
			//printf("HAL_SPI_Transmit Error #%u, ", res);
		}
	#endif

}
 8007a9a:	bf00      	nop
 8007a9c:	3710      	adds	r7, #16
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	200021d0 	.word	0x200021d0

08007aa8 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	4603      	mov	r3, r0
 8007ab0:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007ab2:	4b0d      	ldr	r3, [pc, #52]	; (8007ae8 <ILI9341_Write_Command+0x40>)
 8007ab4:	695b      	ldr	r3, [r3, #20]
 8007ab6:	4a0c      	ldr	r2, [pc, #48]	; (8007ae8 <ILI9341_Write_Command+0x40>)
 8007ab8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007abc:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8007abe:	4b0a      	ldr	r3, [pc, #40]	; (8007ae8 <ILI9341_Write_Command+0x40>)
 8007ac0:	695b      	ldr	r3, [r3, #20]
 8007ac2:	4a09      	ldr	r2, [pc, #36]	; (8007ae8 <ILI9341_Write_Command+0x40>)
 8007ac4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ac8:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(Command);
 8007aca:	79fb      	ldrb	r3, [r7, #7]
 8007acc:	4618      	mov	r0, r3
 8007ace:	f7ff ffd7 	bl	8007a80 <ILI9341_SPI_Send>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8007ad2:	4b05      	ldr	r3, [pc, #20]	; (8007ae8 <ILI9341_Write_Command+0x40>)
 8007ad4:	695b      	ldr	r3, [r3, #20]
 8007ad6:	4a04      	ldr	r2, [pc, #16]	; (8007ae8 <ILI9341_Write_Command+0x40>)
 8007ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007adc:	6153      	str	r3, [r2, #20]
}
 8007ade:	bf00      	nop
 8007ae0:	3708      	adds	r7, #8
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	48000400 	.word	0x48000400

08007aec <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	4603      	mov	r3, r0
 8007af4:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8007af6:	4b0d      	ldr	r3, [pc, #52]	; (8007b2c <ILI9341_Write_Data+0x40>)
 8007af8:	695b      	ldr	r3, [r3, #20]
 8007afa:	4a0c      	ldr	r2, [pc, #48]	; (8007b2c <ILI9341_Write_Data+0x40>)
 8007afc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b00:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007b02:	4b0a      	ldr	r3, [pc, #40]	; (8007b2c <ILI9341_Write_Data+0x40>)
 8007b04:	695b      	ldr	r3, [r3, #20]
 8007b06:	4a09      	ldr	r2, [pc, #36]	; (8007b2c <ILI9341_Write_Data+0x40>)
 8007b08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b0c:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(Data);
 8007b0e:	79fb      	ldrb	r3, [r7, #7]
 8007b10:	4618      	mov	r0, r3
 8007b12:	f7ff ffb5 	bl	8007a80 <ILI9341_SPI_Send>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007b16:	4b05      	ldr	r3, [pc, #20]	; (8007b2c <ILI9341_Write_Data+0x40>)
 8007b18:	695b      	ldr	r3, [r3, #20]
 8007b1a:	4a04      	ldr	r2, [pc, #16]	; (8007b2c <ILI9341_Write_Data+0x40>)
 8007b1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b20:	6153      	str	r3, [r2, #20]
}
 8007b22:	bf00      	nop
 8007b24:	3708      	adds	r7, #8
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}
 8007b2a:	bf00      	nop
 8007b2c:	48000400 	.word	0x48000400

08007b30 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8007b30:	b590      	push	{r4, r7, lr}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	4604      	mov	r4, r0
 8007b38:	4608      	mov	r0, r1
 8007b3a:	4611      	mov	r1, r2
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	4623      	mov	r3, r4
 8007b40:	80fb      	strh	r3, [r7, #6]
 8007b42:	4603      	mov	r3, r0
 8007b44:	80bb      	strh	r3, [r7, #4]
 8007b46:	460b      	mov	r3, r1
 8007b48:	807b      	strh	r3, [r7, #2]
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	803b      	strh	r3, [r7, #0]
	ILI9341_Write_Command(0x2A);
 8007b4e:	202a      	movs	r0, #42	; 0x2a
 8007b50:	f7ff ffaa 	bl	8007aa8 <ILI9341_Write_Command>
	ILI9341_Write_Data(X1>>8);
 8007b54:	88fb      	ldrh	r3, [r7, #6]
 8007b56:	0a1b      	lsrs	r3, r3, #8
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f7ff ffc5 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(X1);
 8007b62:	88fb      	ldrh	r3, [r7, #6]
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7ff ffc0 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(X2>>8);
 8007b6c:	887b      	ldrh	r3, [r7, #2]
 8007b6e:	0a1b      	lsrs	r3, r3, #8
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	4618      	mov	r0, r3
 8007b76:	f7ff ffb9 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(X2);
 8007b7a:	887b      	ldrh	r3, [r7, #2]
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f7ff ffb4 	bl	8007aec <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2B);
 8007b84:	202b      	movs	r0, #43	; 0x2b
 8007b86:	f7ff ff8f 	bl	8007aa8 <ILI9341_Write_Command>
	ILI9341_Write_Data(Y1>>8);
 8007b8a:	88bb      	ldrh	r3, [r7, #4]
 8007b8c:	0a1b      	lsrs	r3, r3, #8
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	4618      	mov	r0, r3
 8007b94:	f7ff ffaa 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(Y1);
 8007b98:	88bb      	ldrh	r3, [r7, #4]
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f7ff ffa5 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2>>8);
 8007ba2:	883b      	ldrh	r3, [r7, #0]
 8007ba4:	0a1b      	lsrs	r3, r3, #8
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	4618      	mov	r0, r3
 8007bac:	f7ff ff9e 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2);
 8007bb0:	883b      	ldrh	r3, [r7, #0]
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f7ff ff99 	bl	8007aec <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2C);
 8007bba:	202c      	movs	r0, #44	; 0x2c
 8007bbc:	f7ff ff74 	bl	8007aa8 <ILI9341_Write_Command>
}
 8007bc0:	bf00      	nop
 8007bc2:	370c      	adds	r7, #12
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd90      	pop	{r4, r7, pc}

08007bc8 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 8007bcc:	4b0c      	ldr	r3, [pc, #48]	; (8007c00 <ILI9341_Reset+0x38>)
 8007bce:	695b      	ldr	r3, [r3, #20]
 8007bd0:	4a0b      	ldr	r2, [pc, #44]	; (8007c00 <ILI9341_Reset+0x38>)
 8007bd2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007bd6:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 8007bd8:	20c8      	movs	r0, #200	; 0xc8
 8007bda:	f7fa f9ab 	bl	8001f34 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007bde:	4b08      	ldr	r3, [pc, #32]	; (8007c00 <ILI9341_Reset+0x38>)
 8007be0:	695b      	ldr	r3, [r3, #20]
 8007be2:	4a07      	ldr	r2, [pc, #28]	; (8007c00 <ILI9341_Reset+0x38>)
 8007be4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007be8:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 8007bea:	20c8      	movs	r0, #200	; 0xc8
 8007bec:	f7fa f9a2 	bl	8001f34 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8007bf0:	4b03      	ldr	r3, [pc, #12]	; (8007c00 <ILI9341_Reset+0x38>)
 8007bf2:	695b      	ldr	r3, [r3, #20]
 8007bf4:	4a02      	ldr	r2, [pc, #8]	; (8007c00 <ILI9341_Reset+0x38>)
 8007bf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007bfa:	6153      	str	r3, [r2, #20]
}
 8007bfc:	bf00      	nop
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	48000400 	.word	0x48000400

08007c04 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	71fb      	strb	r3, [r7, #7]
	
	uint8_t screen_rotation = Rotation;
 8007c0e:	79fb      	ldrb	r3, [r7, #7]
 8007c10:	73fb      	strb	r3, [r7, #15]
	
	ILI9341_Write_Command(0x36);
 8007c12:	2036      	movs	r0, #54	; 0x36
 8007c14:	f7ff ff48 	bl	8007aa8 <ILI9341_Write_Command>
	//HAL_Delay(1);

	switch(screen_rotation)
 8007c18:	7bfb      	ldrb	r3, [r7, #15]
 8007c1a:	2b03      	cmp	r3, #3
 8007c1c:	d836      	bhi.n	8007c8c <ILI9341_Set_Rotation+0x88>
 8007c1e:	a201      	add	r2, pc, #4	; (adr r2, 8007c24 <ILI9341_Set_Rotation+0x20>)
 8007c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c24:	08007c35 	.word	0x08007c35
 8007c28:	08007c4b 	.word	0x08007c4b
 8007c2c:	08007c61 	.word	0x08007c61
 8007c30:	08007c77 	.word	0x08007c77
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8007c34:	2048      	movs	r0, #72	; 0x48
 8007c36:	f7ff ff59 	bl	8007aec <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8007c3a:	4b17      	ldr	r3, [pc, #92]	; (8007c98 <ILI9341_Set_Rotation+0x94>)
 8007c3c:	22f0      	movs	r2, #240	; 0xf0
 8007c3e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8007c40:	4b16      	ldr	r3, [pc, #88]	; (8007c9c <ILI9341_Set_Rotation+0x98>)
 8007c42:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007c46:	801a      	strh	r2, [r3, #0]
			break;
 8007c48:	e021      	b.n	8007c8e <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8007c4a:	2028      	movs	r0, #40	; 0x28
 8007c4c:	f7ff ff4e 	bl	8007aec <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8007c50:	4b11      	ldr	r3, [pc, #68]	; (8007c98 <ILI9341_Set_Rotation+0x94>)
 8007c52:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007c56:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8007c58:	4b10      	ldr	r3, [pc, #64]	; (8007c9c <ILI9341_Set_Rotation+0x98>)
 8007c5a:	22f0      	movs	r2, #240	; 0xf0
 8007c5c:	801a      	strh	r2, [r3, #0]
			break;
 8007c5e:	e016      	b.n	8007c8e <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8007c60:	2088      	movs	r0, #136	; 0x88
 8007c62:	f7ff ff43 	bl	8007aec <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8007c66:	4b0c      	ldr	r3, [pc, #48]	; (8007c98 <ILI9341_Set_Rotation+0x94>)
 8007c68:	22f0      	movs	r2, #240	; 0xf0
 8007c6a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8007c6c:	4b0b      	ldr	r3, [pc, #44]	; (8007c9c <ILI9341_Set_Rotation+0x98>)
 8007c6e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007c72:	801a      	strh	r2, [r3, #0]
			break;
 8007c74:	e00b      	b.n	8007c8e <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8007c76:	20e8      	movs	r0, #232	; 0xe8
 8007c78:	f7ff ff38 	bl	8007aec <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8007c7c:	4b06      	ldr	r3, [pc, #24]	; (8007c98 <ILI9341_Set_Rotation+0x94>)
 8007c7e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007c82:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8007c84:	4b05      	ldr	r3, [pc, #20]	; (8007c9c <ILI9341_Set_Rotation+0x98>)
 8007c86:	22f0      	movs	r2, #240	; 0xf0
 8007c88:	801a      	strh	r2, [r3, #0]
			break;
 8007c8a:	e000      	b.n	8007c8e <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8007c8c:	bf00      	nop
	}
}
 8007c8e:	bf00      	nop
 8007c90:	3710      	adds	r7, #16
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	20001f52 	.word	0x20001f52
 8007c9c:	20001f50 	.word	0x20001f50

08007ca0 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8007ca4:	4b05      	ldr	r3, [pc, #20]	; (8007cbc <ILI9341_Enable+0x1c>)
 8007ca6:	695b      	ldr	r3, [r3, #20]
 8007ca8:	4a04      	ldr	r2, [pc, #16]	; (8007cbc <ILI9341_Enable+0x1c>)
 8007caa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007cae:	6153      	str	r3, [r2, #20]
}
 8007cb0:	bf00      	nop
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr
 8007cba:	bf00      	nop
 8007cbc:	48000400 	.word	0x48000400

08007cc0 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	af00      	add	r7, sp, #0

	ILI9341_Enable();
 8007cc4:	f7ff ffec 	bl	8007ca0 <ILI9341_Enable>
	ILI9341_SPI_Init();
 8007cc8:	f7ff feca 	bl	8007a60 <ILI9341_SPI_Init>
	ILI9341_Reset();
 8007ccc:	f7ff ff7c 	bl	8007bc8 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_Write_Command(0x01);
 8007cd0:	2001      	movs	r0, #1
 8007cd2:	f7ff fee9 	bl	8007aa8 <ILI9341_Write_Command>
	HAL_Delay(2000);
 8007cd6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007cda:	f7fa f92b 	bl	8001f34 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_Write_Command(0xCB);
 8007cde:	20cb      	movs	r0, #203	; 0xcb
 8007ce0:	f7ff fee2 	bl	8007aa8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x39);
 8007ce4:	2039      	movs	r0, #57	; 0x39
 8007ce6:	f7ff ff01 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2C);
 8007cea:	202c      	movs	r0, #44	; 0x2c
 8007cec:	f7ff fefe 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8007cf0:	2000      	movs	r0, #0
 8007cf2:	f7ff fefb 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(0x34);
 8007cf6:	2034      	movs	r0, #52	; 0x34
 8007cf8:	f7ff fef8 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(0x02);
 8007cfc:	2002      	movs	r0, #2
 8007cfe:	f7ff fef5 	bl	8007aec <ILI9341_Write_Data>

	//POWER CONTROL B
	ILI9341_Write_Command(0xCF);
 8007d02:	20cf      	movs	r0, #207	; 0xcf
 8007d04:	f7ff fed0 	bl	8007aa8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8007d08:	2000      	movs	r0, #0
 8007d0a:	f7ff feef 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 8007d0e:	20c1      	movs	r0, #193	; 0xc1
 8007d10:	f7ff feec 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(0x30);
 8007d14:	2030      	movs	r0, #48	; 0x30
 8007d16:	f7ff fee9 	bl	8007aec <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL A
	ILI9341_Write_Command(0xE8);
 8007d1a:	20e8      	movs	r0, #232	; 0xe8
 8007d1c:	f7ff fec4 	bl	8007aa8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x85);
 8007d20:	2085      	movs	r0, #133	; 0x85
 8007d22:	f7ff fee3 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8007d26:	2000      	movs	r0, #0
 8007d28:	f7ff fee0 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(0x78);
 8007d2c:	2078      	movs	r0, #120	; 0x78
 8007d2e:	f7ff fedd 	bl	8007aec <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL B
	ILI9341_Write_Command(0xEA);
 8007d32:	20ea      	movs	r0, #234	; 0xea
 8007d34:	f7ff feb8 	bl	8007aa8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8007d38:	2000      	movs	r0, #0
 8007d3a:	f7ff fed7 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8007d3e:	2000      	movs	r0, #0
 8007d40:	f7ff fed4 	bl	8007aec <ILI9341_Write_Data>

	//POWER ON SEQUENCE CONTROL
	ILI9341_Write_Command(0xED);
 8007d44:	20ed      	movs	r0, #237	; 0xed
 8007d46:	f7ff feaf 	bl	8007aa8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x64);
 8007d4a:	2064      	movs	r0, #100	; 0x64
 8007d4c:	f7ff fece 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8007d50:	2003      	movs	r0, #3
 8007d52:	f7ff fecb 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(0x12);
 8007d56:	2012      	movs	r0, #18
 8007d58:	f7ff fec8 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(0x81);
 8007d5c:	2081      	movs	r0, #129	; 0x81
 8007d5e:	f7ff fec5 	bl	8007aec <ILI9341_Write_Data>

	//PUMP RATIO CONTROL
	ILI9341_Write_Command(0xF7);
 8007d62:	20f7      	movs	r0, #247	; 0xf7
 8007d64:	f7ff fea0 	bl	8007aa8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x20);
 8007d68:	2020      	movs	r0, #32
 8007d6a:	f7ff febf 	bl	8007aec <ILI9341_Write_Data>

	//POWER CONTROL,VRH[5:0]
	ILI9341_Write_Command(0xC0);
 8007d6e:	20c0      	movs	r0, #192	; 0xc0
 8007d70:	f7ff fe9a 	bl	8007aa8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x23);
 8007d74:	2023      	movs	r0, #35	; 0x23
 8007d76:	f7ff feb9 	bl	8007aec <ILI9341_Write_Data>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_Write_Command(0xC1);
 8007d7a:	20c1      	movs	r0, #193	; 0xc1
 8007d7c:	f7ff fe94 	bl	8007aa8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x10);
 8007d80:	2010      	movs	r0, #16
 8007d82:	f7ff feb3 	bl	8007aec <ILI9341_Write_Data>

	//VCM CONTROL
	ILI9341_Write_Command(0xC5);
 8007d86:	20c5      	movs	r0, #197	; 0xc5
 8007d88:	f7ff fe8e 	bl	8007aa8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x3E);
 8007d8c:	203e      	movs	r0, #62	; 0x3e
 8007d8e:	f7ff fead 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(0x28);
 8007d92:	2028      	movs	r0, #40	; 0x28
 8007d94:	f7ff feaa 	bl	8007aec <ILI9341_Write_Data>

	//VCM CONTROL 2
	ILI9341_Write_Command(0xC7);
 8007d98:	20c7      	movs	r0, #199	; 0xc7
 8007d9a:	f7ff fe85 	bl	8007aa8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x86);
 8007d9e:	2086      	movs	r0, #134	; 0x86
 8007da0:	f7ff fea4 	bl	8007aec <ILI9341_Write_Data>

	//MEMORY ACCESS CONTROL
	ILI9341_Write_Command(0x36);
 8007da4:	2036      	movs	r0, #54	; 0x36
 8007da6:	f7ff fe7f 	bl	8007aa8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x48);
 8007daa:	2048      	movs	r0, #72	; 0x48
 8007dac:	f7ff fe9e 	bl	8007aec <ILI9341_Write_Data>

	//PIXEL FORMAT
	ILI9341_Write_Command(0x3A);
 8007db0:	203a      	movs	r0, #58	; 0x3a
 8007db2:	f7ff fe79 	bl	8007aa8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x55);
 8007db6:	2055      	movs	r0, #85	; 0x55
 8007db8:	f7ff fe98 	bl	8007aec <ILI9341_Write_Data>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_Write_Command(0xB1);
 8007dbc:	20b1      	movs	r0, #177	; 0xb1
 8007dbe:	f7ff fe73 	bl	8007aa8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8007dc2:	2000      	movs	r0, #0
 8007dc4:	f7ff fe92 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(0x18);
 8007dc8:	2018      	movs	r0, #24
 8007dca:	f7ff fe8f 	bl	8007aec <ILI9341_Write_Data>

	//DISPLAY FUNCTION CONTROL
	ILI9341_Write_Command(0xB6);
 8007dce:	20b6      	movs	r0, #182	; 0xb6
 8007dd0:	f7ff fe6a 	bl	8007aa8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x08);
 8007dd4:	2008      	movs	r0, #8
 8007dd6:	f7ff fe89 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(0x82);
 8007dda:	2082      	movs	r0, #130	; 0x82
 8007ddc:	f7ff fe86 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(0x27);
 8007de0:	2027      	movs	r0, #39	; 0x27
 8007de2:	f7ff fe83 	bl	8007aec <ILI9341_Write_Data>

	//3GAMMA FUNCTION DISABLE
	ILI9341_Write_Command(0xF2);
 8007de6:	20f2      	movs	r0, #242	; 0xf2
 8007de8:	f7ff fe5e 	bl	8007aa8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8007dec:	2000      	movs	r0, #0
 8007dee:	f7ff fe7d 	bl	8007aec <ILI9341_Write_Data>

	//GAMMA CURVE SELECTED
	ILI9341_Write_Command(0x26);
 8007df2:	2026      	movs	r0, #38	; 0x26
 8007df4:	f7ff fe58 	bl	8007aa8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x01);
 8007df8:	2001      	movs	r0, #1
 8007dfa:	f7ff fe77 	bl	8007aec <ILI9341_Write_Data>

	//POSITIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE0);
 8007dfe:	20e0      	movs	r0, #224	; 0xe0
 8007e00:	f7ff fe52 	bl	8007aa8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x0F);
 8007e04:	200f      	movs	r0, #15
 8007e06:	f7ff fe71 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8007e0a:	2031      	movs	r0, #49	; 0x31
 8007e0c:	f7ff fe6e 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2B);
 8007e10:	202b      	movs	r0, #43	; 0x2b
 8007e12:	f7ff fe6b 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 8007e16:	200c      	movs	r0, #12
 8007e18:	f7ff fe68 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8007e1c:	200e      	movs	r0, #14
 8007e1e:	f7ff fe65 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 8007e22:	2008      	movs	r0, #8
 8007e24:	f7ff fe62 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(0x4E);
 8007e28:	204e      	movs	r0, #78	; 0x4e
 8007e2a:	f7ff fe5f 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(0xF1);
 8007e2e:	20f1      	movs	r0, #241	; 0xf1
 8007e30:	f7ff fe5c 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(0x37);
 8007e34:	2037      	movs	r0, #55	; 0x37
 8007e36:	f7ff fe59 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 8007e3a:	2007      	movs	r0, #7
 8007e3c:	f7ff fe56 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(0x10);
 8007e40:	2010      	movs	r0, #16
 8007e42:	f7ff fe53 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8007e46:	2003      	movs	r0, #3
 8007e48:	f7ff fe50 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8007e4c:	200e      	movs	r0, #14
 8007e4e:	f7ff fe4d 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(0x09);
 8007e52:	2009      	movs	r0, #9
 8007e54:	f7ff fe4a 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8007e58:	2000      	movs	r0, #0
 8007e5a:	f7ff fe47 	bl	8007aec <ILI9341_Write_Data>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE1);
 8007e5e:	20e1      	movs	r0, #225	; 0xe1
 8007e60:	f7ff fe22 	bl	8007aa8 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8007e64:	2000      	movs	r0, #0
 8007e66:	f7ff fe41 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8007e6a:	200e      	movs	r0, #14
 8007e6c:	f7ff fe3e 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(0x14);
 8007e70:	2014      	movs	r0, #20
 8007e72:	f7ff fe3b 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8007e76:	2003      	movs	r0, #3
 8007e78:	f7ff fe38 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(0x11);
 8007e7c:	2011      	movs	r0, #17
 8007e7e:	f7ff fe35 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 8007e82:	2007      	movs	r0, #7
 8007e84:	f7ff fe32 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8007e88:	2031      	movs	r0, #49	; 0x31
 8007e8a:	f7ff fe2f 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 8007e8e:	20c1      	movs	r0, #193	; 0xc1
 8007e90:	f7ff fe2c 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(0x48);
 8007e94:	2048      	movs	r0, #72	; 0x48
 8007e96:	f7ff fe29 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 8007e9a:	2008      	movs	r0, #8
 8007e9c:	f7ff fe26 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8007ea0:	200f      	movs	r0, #15
 8007ea2:	f7ff fe23 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 8007ea6:	200c      	movs	r0, #12
 8007ea8:	f7ff fe20 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8007eac:	2031      	movs	r0, #49	; 0x31
 8007eae:	f7ff fe1d 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(0x36);
 8007eb2:	2036      	movs	r0, #54	; 0x36
 8007eb4:	f7ff fe1a 	bl	8007aec <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8007eb8:	200f      	movs	r0, #15
 8007eba:	f7ff fe17 	bl	8007aec <ILI9341_Write_Data>

	//EXIT SLEEP
	ILI9341_Write_Command(0x11);
 8007ebe:	2011      	movs	r0, #17
 8007ec0:	f7ff fdf2 	bl	8007aa8 <ILI9341_Write_Command>
	HAL_Delay(240);
 8007ec4:	20f0      	movs	r0, #240	; 0xf0
 8007ec6:	f7fa f835 	bl	8001f34 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_Write_Command(0x29);
 8007eca:	2029      	movs	r0, #41	; 0x29
 8007ecc:	f7ff fdec 	bl	8007aa8 <ILI9341_Write_Command>
	
	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8007ed0:	2000      	movs	r0, #0
 8007ed2:	f7ff fe97 	bl	8007c04 <ILI9341_Set_Rotation>
}
 8007ed6:	bf00      	nop
 8007ed8:	bd80      	pop	{r7, pc}
	...

08007edc <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8007edc:	b5b0      	push	{r4, r5, r7, lr}
 8007ede:	b08c      	sub	sp, #48	; 0x30
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	6039      	str	r1, [r7, #0]
 8007ee6:	80fb      	strh	r3, [r7, #6]
 8007ee8:	466b      	mov	r3, sp
 8007eea:	461d      	mov	r5, r3
	//SENDS COLOUR
	uint32_t Buffer_Size = 0;
 8007eec:	2300      	movs	r3, #0
 8007eee:	627b      	str	r3, [r7, #36]	; 0x24
	if((Size*2) < BURST_MAX_SIZE)
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	005b      	lsls	r3, r3, #1
 8007ef4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007ef8:	d202      	bcs.n	8007f00 <ILI9341_Draw_Colour_Burst+0x24>
	{
		Buffer_Size = Size;
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	627b      	str	r3, [r7, #36]	; 0x24
 8007efe:	e002      	b.n	8007f06 <ILI9341_Draw_Colour_Burst+0x2a>
	}
	else
	{
		Buffer_Size = BURST_MAX_SIZE;
 8007f00:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007f04:	627b      	str	r3, [r7, #36]	; 0x24
	}

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8007f06:	4b40      	ldr	r3, [pc, #256]	; (8008008 <ILI9341_Draw_Colour_Burst+0x12c>)
 8007f08:	695b      	ldr	r3, [r3, #20]
 8007f0a:	4a3f      	ldr	r2, [pc, #252]	; (8008008 <ILI9341_Draw_Colour_Burst+0x12c>)
 8007f0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f10:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007f12:	4b3d      	ldr	r3, [pc, #244]	; (8008008 <ILI9341_Draw_Colour_Burst+0x12c>)
 8007f14:	695b      	ldr	r3, [r3, #20]
 8007f16:	4a3c      	ldr	r2, [pc, #240]	; (8008008 <ILI9341_Draw_Colour_Burst+0x12c>)
 8007f18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f1c:	6153      	str	r3, [r2, #20]

	unsigned char chifted = 	Colour>>8;;
 8007f1e:	88fb      	ldrh	r3, [r7, #6]
 8007f20:	0a1b      	lsrs	r3, r3, #8
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	unsigned char burst_buffer[Buffer_Size];
 8007f28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	3b01      	subs	r3, #1
 8007f2e:	61fb      	str	r3, [r7, #28]
 8007f30:	4601      	mov	r1, r0
 8007f32:	f04f 0200 	mov.w	r2, #0
 8007f36:	f04f 0300 	mov.w	r3, #0
 8007f3a:	f04f 0400 	mov.w	r4, #0
 8007f3e:	00d4      	lsls	r4, r2, #3
 8007f40:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8007f44:	00cb      	lsls	r3, r1, #3
 8007f46:	4601      	mov	r1, r0
 8007f48:	f04f 0200 	mov.w	r2, #0
 8007f4c:	f04f 0300 	mov.w	r3, #0
 8007f50:	f04f 0400 	mov.w	r4, #0
 8007f54:	00d4      	lsls	r4, r2, #3
 8007f56:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8007f5a:	00cb      	lsls	r3, r1, #3
 8007f5c:	1dc3      	adds	r3, r0, #7
 8007f5e:	08db      	lsrs	r3, r3, #3
 8007f60:	00db      	lsls	r3, r3, #3
 8007f62:	ebad 0d03 	sub.w	sp, sp, r3
 8007f66:	466b      	mov	r3, sp
 8007f68:	3300      	adds	r3, #0
 8007f6a:	61bb      	str	r3, [r7, #24]
	for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f70:	e00e      	b.n	8007f90 <ILI9341_Draw_Colour_Burst+0xb4>
		{
			burst_buffer[j] = 	chifted;
 8007f72:	69ba      	ldr	r2, [r7, #24]
 8007f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f76:	4413      	add	r3, r2
 8007f78:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8007f7c:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = Colour;
 8007f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f80:	3301      	adds	r3, #1
 8007f82:	88fa      	ldrh	r2, [r7, #6]
 8007f84:	b2d1      	uxtb	r1, r2
 8007f86:	69ba      	ldr	r2, [r7, #24]
 8007f88:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8007f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8c:	3302      	adds	r3, #2
 8007f8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d3ec      	bcc.n	8007f72 <ILI9341_Draw_Colour_Burst+0x96>
		}
	
	uint32_t Sending_Size = Size*2;
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	005b      	lsls	r3, r3, #1
 8007f9c:	617b      	str	r3, [r7, #20]
	uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8007f9e:	697a      	ldr	r2, [r7, #20]
 8007fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fa6:	613b      	str	r3, [r7, #16]
	uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fac:	fbb3 f2f2 	udiv	r2, r3, r2
 8007fb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007fb2:	fb01 f202 	mul.w	r2, r1, r2
 8007fb6:	1a9b      	subs	r3, r3, r2
 8007fb8:	60fb      	str	r3, [r7, #12]

	if(Sending_in_Block != 0)
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d010      	beq.n	8007fe2 <ILI9341_Draw_Colour_Burst+0x106>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fc4:	e009      	b.n	8007fda <ILI9341_Draw_Colour_Burst+0xfe>
			{
			HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);
 8007fc6:	69b9      	ldr	r1, [r7, #24]
 8007fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fca:	b29a      	uxth	r2, r3
 8007fcc:	230a      	movs	r3, #10
 8007fce:	480f      	ldr	r0, [pc, #60]	; (800800c <ILI9341_Draw_Colour_Burst+0x130>)
 8007fd0:	f7fd fc82 	bl	80058d8 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8007fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d3f1      	bcc.n	8007fc6 <ILI9341_Draw_Colour_Burst+0xea>
			}
	}

	//REMAINDER!
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);
 8007fe2:	69b9      	ldr	r1, [r7, #24]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	b29a      	uxth	r2, r3
 8007fe8:	230a      	movs	r3, #10
 8007fea:	4808      	ldr	r0, [pc, #32]	; (800800c <ILI9341_Draw_Colour_Burst+0x130>)
 8007fec:	f7fd fc74 	bl	80058d8 <HAL_SPI_Transmit>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8007ff0:	4b05      	ldr	r3, [pc, #20]	; (8008008 <ILI9341_Draw_Colour_Burst+0x12c>)
 8007ff2:	695b      	ldr	r3, [r3, #20]
 8007ff4:	4a04      	ldr	r2, [pc, #16]	; (8008008 <ILI9341_Draw_Colour_Burst+0x12c>)
 8007ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ffa:	6153      	str	r3, [r2, #20]
 8007ffc:	46ad      	mov	sp, r5
}
 8007ffe:	bf00      	nop
 8008000:	3730      	adds	r7, #48	; 0x30
 8008002:	46bd      	mov	sp, r7
 8008004:	bdb0      	pop	{r4, r5, r7, pc}
 8008006:	bf00      	nop
 8008008:	48000400 	.word	0x48000400
 800800c:	200021d0 	.word	0x200021d0

08008010 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
 8008016:	4603      	mov	r3, r0
 8008018:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);
 800801a:	4b0e      	ldr	r3, [pc, #56]	; (8008054 <ILI9341_Fill_Screen+0x44>)
 800801c:	881b      	ldrh	r3, [r3, #0]
 800801e:	b29a      	uxth	r2, r3
 8008020:	4b0d      	ldr	r3, [pc, #52]	; (8008058 <ILI9341_Fill_Screen+0x48>)
 8008022:	881b      	ldrh	r3, [r3, #0]
 8008024:	b29b      	uxth	r3, r3
 8008026:	2100      	movs	r1, #0
 8008028:	2000      	movs	r0, #0
 800802a:	f7ff fd81 	bl	8007b30 <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);
 800802e:	4b09      	ldr	r3, [pc, #36]	; (8008054 <ILI9341_Fill_Screen+0x44>)
 8008030:	881b      	ldrh	r3, [r3, #0]
 8008032:	b29b      	uxth	r3, r3
 8008034:	461a      	mov	r2, r3
 8008036:	4b08      	ldr	r3, [pc, #32]	; (8008058 <ILI9341_Fill_Screen+0x48>)
 8008038:	881b      	ldrh	r3, [r3, #0]
 800803a:	b29b      	uxth	r3, r3
 800803c:	fb03 f302 	mul.w	r3, r3, r2
 8008040:	461a      	mov	r2, r3
 8008042:	88fb      	ldrh	r3, [r7, #6]
 8008044:	4611      	mov	r1, r2
 8008046:	4618      	mov	r0, r3
 8008048:	f7ff ff48 	bl	8007edc <ILI9341_Draw_Colour_Burst>
}
 800804c:	bf00      	nop
 800804e:	3708      	adds	r7, #8
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}
 8008054:	20001f52 	.word	0x20001f52
 8008058:	20001f50 	.word	0x20001f50

0800805c <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b086      	sub	sp, #24
 8008060:	af00      	add	r7, sp, #0
 8008062:	4603      	mov	r3, r0
 8008064:	80fb      	strh	r3, [r7, #6]
 8008066:	460b      	mov	r3, r1
 8008068:	80bb      	strh	r3, [r7, #4]
 800806a:	4613      	mov	r3, r2
 800806c:	807b      	strh	r3, [r7, #2]
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800806e:	4b64      	ldr	r3, [pc, #400]	; (8008200 <ILI9341_Draw_Pixel+0x1a4>)
 8008070:	881b      	ldrh	r3, [r3, #0]
 8008072:	b29b      	uxth	r3, r3
 8008074:	88fa      	ldrh	r2, [r7, #6]
 8008076:	429a      	cmp	r2, r3
 8008078:	f080 80be 	bcs.w	80081f8 <ILI9341_Draw_Pixel+0x19c>
 800807c:	4b61      	ldr	r3, [pc, #388]	; (8008204 <ILI9341_Draw_Pixel+0x1a8>)
 800807e:	881b      	ldrh	r3, [r3, #0]
 8008080:	b29b      	uxth	r3, r3
 8008082:	88ba      	ldrh	r2, [r7, #4]
 8008084:	429a      	cmp	r2, r3
 8008086:	f080 80b7 	bcs.w	80081f8 <ILI9341_Draw_Pixel+0x19c>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800808a:	4b5f      	ldr	r3, [pc, #380]	; (8008208 <ILI9341_Draw_Pixel+0x1ac>)
 800808c:	695b      	ldr	r3, [r3, #20]
 800808e:	4a5e      	ldr	r2, [pc, #376]	; (8008208 <ILI9341_Draw_Pixel+0x1ac>)
 8008090:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008094:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008096:	4b5c      	ldr	r3, [pc, #368]	; (8008208 <ILI9341_Draw_Pixel+0x1ac>)
 8008098:	695b      	ldr	r3, [r3, #20]
 800809a:	4a5b      	ldr	r2, [pc, #364]	; (8008208 <ILI9341_Draw_Pixel+0x1ac>)
 800809c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080a0:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(0x2A);
 80080a2:	202a      	movs	r0, #42	; 0x2a
 80080a4:	f7ff fcec 	bl	8007a80 <ILI9341_SPI_Send>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 80080a8:	4b57      	ldr	r3, [pc, #348]	; (8008208 <ILI9341_Draw_Pixel+0x1ac>)
 80080aa:	695b      	ldr	r3, [r3, #20]
 80080ac:	4a56      	ldr	r2, [pc, #344]	; (8008208 <ILI9341_Draw_Pixel+0x1ac>)
 80080ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080b2:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80080b4:	4b54      	ldr	r3, [pc, #336]	; (8008208 <ILI9341_Draw_Pixel+0x1ac>)
 80080b6:	695b      	ldr	r3, [r3, #20]
 80080b8:	4a53      	ldr	r2, [pc, #332]	; (8008208 <ILI9341_Draw_Pixel+0x1ac>)
 80080ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080be:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80080c0:	4b51      	ldr	r3, [pc, #324]	; (8008208 <ILI9341_Draw_Pixel+0x1ac>)
 80080c2:	695b      	ldr	r3, [r3, #20]
 80080c4:	4a50      	ldr	r2, [pc, #320]	; (8008208 <ILI9341_Draw_Pixel+0x1ac>)
 80080c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080ca:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 80080cc:	88fb      	ldrh	r3, [r7, #6]
 80080ce:	0a1b      	lsrs	r3, r3, #8
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	753b      	strb	r3, [r7, #20]
 80080d6:	88fb      	ldrh	r3, [r7, #6]
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	757b      	strb	r3, [r7, #21]
 80080dc:	88fb      	ldrh	r3, [r7, #6]
 80080de:	3301      	adds	r3, #1
 80080e0:	121b      	asrs	r3, r3, #8
 80080e2:	b2db      	uxtb	r3, r3
 80080e4:	75bb      	strb	r3, [r7, #22]
 80080e6:	88fb      	ldrh	r3, [r7, #6]
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	3301      	adds	r3, #1
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 80080f0:	f107 0114 	add.w	r1, r7, #20
 80080f4:	2301      	movs	r3, #1
 80080f6:	2204      	movs	r2, #4
 80080f8:	4844      	ldr	r0, [pc, #272]	; (800820c <ILI9341_Draw_Pixel+0x1b0>)
 80080fa:	f7fd fbed 	bl	80058d8 <HAL_SPI_Transmit>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80080fe:	4b42      	ldr	r3, [pc, #264]	; (8008208 <ILI9341_Draw_Pixel+0x1ac>)
 8008100:	695b      	ldr	r3, [r3, #20]
 8008102:	4a41      	ldr	r2, [pc, #260]	; (8008208 <ILI9341_Draw_Pixel+0x1ac>)
 8008104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008108:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800810a:	4b3f      	ldr	r3, [pc, #252]	; (8008208 <ILI9341_Draw_Pixel+0x1ac>)
 800810c:	695b      	ldr	r3, [r3, #20]
 800810e:	4a3e      	ldr	r2, [pc, #248]	; (8008208 <ILI9341_Draw_Pixel+0x1ac>)
 8008110:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008114:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008116:	4b3c      	ldr	r3, [pc, #240]	; (8008208 <ILI9341_Draw_Pixel+0x1ac>)
 8008118:	695b      	ldr	r3, [r3, #20]
 800811a:	4a3b      	ldr	r2, [pc, #236]	; (8008208 <ILI9341_Draw_Pixel+0x1ac>)
 800811c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008120:	6153      	str	r3, [r2, #20]

	ILI9341_SPI_Send(0x2B);
 8008122:	202b      	movs	r0, #43	; 0x2b
 8008124:	f7ff fcac 	bl	8007a80 <ILI9341_SPI_Send>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8008128:	4b37      	ldr	r3, [pc, #220]	; (8008208 <ILI9341_Draw_Pixel+0x1ac>)
 800812a:	695b      	ldr	r3, [r3, #20]
 800812c:	4a36      	ldr	r2, [pc, #216]	; (8008208 <ILI9341_Draw_Pixel+0x1ac>)
 800812e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008132:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008134:	4b34      	ldr	r3, [pc, #208]	; (8008208 <ILI9341_Draw_Pixel+0x1ac>)
 8008136:	695b      	ldr	r3, [r3, #20]
 8008138:	4a33      	ldr	r2, [pc, #204]	; (8008208 <ILI9341_Draw_Pixel+0x1ac>)
 800813a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800813e:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008140:	4b31      	ldr	r3, [pc, #196]	; (8008208 <ILI9341_Draw_Pixel+0x1ac>)
 8008142:	695b      	ldr	r3, [r3, #20]
 8008144:	4a30      	ldr	r2, [pc, #192]	; (8008208 <ILI9341_Draw_Pixel+0x1ac>)
 8008146:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800814a:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 800814c:	88bb      	ldrh	r3, [r7, #4]
 800814e:	0a1b      	lsrs	r3, r3, #8
 8008150:	b29b      	uxth	r3, r3
 8008152:	b2db      	uxtb	r3, r3
 8008154:	743b      	strb	r3, [r7, #16]
 8008156:	88bb      	ldrh	r3, [r7, #4]
 8008158:	b2db      	uxtb	r3, r3
 800815a:	747b      	strb	r3, [r7, #17]
 800815c:	88bb      	ldrh	r3, [r7, #4]
 800815e:	3301      	adds	r3, #1
 8008160:	121b      	asrs	r3, r3, #8
 8008162:	b2db      	uxtb	r3, r3
 8008164:	74bb      	strb	r3, [r7, #18]
 8008166:	88bb      	ldrh	r3, [r7, #4]
 8008168:	b2db      	uxtb	r3, r3
 800816a:	3301      	adds	r3, #1
 800816c:	b2db      	uxtb	r3, r3
 800816e:	74fb      	strb	r3, [r7, #19]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8008170:	f107 0110 	add.w	r1, r7, #16
 8008174:	2301      	movs	r3, #1
 8008176:	2204      	movs	r2, #4
 8008178:	4824      	ldr	r0, [pc, #144]	; (800820c <ILI9341_Draw_Pixel+0x1b0>)
 800817a:	f7fd fbad 	bl	80058d8 <HAL_SPI_Transmit>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800817e:	4b22      	ldr	r3, [pc, #136]	; (8008208 <ILI9341_Draw_Pixel+0x1ac>)
 8008180:	695b      	ldr	r3, [r3, #20]
 8008182:	4a21      	ldr	r2, [pc, #132]	; (8008208 <ILI9341_Draw_Pixel+0x1ac>)
 8008184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008188:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800818a:	4b1f      	ldr	r3, [pc, #124]	; (8008208 <ILI9341_Draw_Pixel+0x1ac>)
 800818c:	695b      	ldr	r3, [r3, #20]
 800818e:	4a1e      	ldr	r2, [pc, #120]	; (8008208 <ILI9341_Draw_Pixel+0x1ac>)
 8008190:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008194:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008196:	4b1c      	ldr	r3, [pc, #112]	; (8008208 <ILI9341_Draw_Pixel+0x1ac>)
 8008198:	695b      	ldr	r3, [r3, #20]
 800819a:	4a1b      	ldr	r2, [pc, #108]	; (8008208 <ILI9341_Draw_Pixel+0x1ac>)
 800819c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081a0:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(0x2C);
 80081a2:	202c      	movs	r0, #44	; 0x2c
 80081a4:	f7ff fc6c 	bl	8007a80 <ILI9341_SPI_Send>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 80081a8:	4b17      	ldr	r3, [pc, #92]	; (8008208 <ILI9341_Draw_Pixel+0x1ac>)
 80081aa:	695b      	ldr	r3, [r3, #20]
 80081ac:	4a16      	ldr	r2, [pc, #88]	; (8008208 <ILI9341_Draw_Pixel+0x1ac>)
 80081ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081b2:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80081b4:	4b14      	ldr	r3, [pc, #80]	; (8008208 <ILI9341_Draw_Pixel+0x1ac>)
 80081b6:	695b      	ldr	r3, [r3, #20]
 80081b8:	4a13      	ldr	r2, [pc, #76]	; (8008208 <ILI9341_Draw_Pixel+0x1ac>)
 80081ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081be:	6153      	str	r3, [r2, #20]
	
	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80081c0:	4b11      	ldr	r3, [pc, #68]	; (8008208 <ILI9341_Draw_Pixel+0x1ac>)
 80081c2:	695b      	ldr	r3, [r3, #20]
 80081c4:	4a10      	ldr	r2, [pc, #64]	; (8008208 <ILI9341_Draw_Pixel+0x1ac>)
 80081c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081ca:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 80081cc:	887b      	ldrh	r3, [r7, #2]
 80081ce:	0a1b      	lsrs	r3, r3, #8
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	733b      	strb	r3, [r7, #12]
 80081d6:	887b      	ldrh	r3, [r7, #2]
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 80081dc:	f107 010c 	add.w	r1, r7, #12
 80081e0:	2301      	movs	r3, #1
 80081e2:	2202      	movs	r2, #2
 80081e4:	4809      	ldr	r0, [pc, #36]	; (800820c <ILI9341_Draw_Pixel+0x1b0>)
 80081e6:	f7fd fb77 	bl	80058d8 <HAL_SPI_Transmit>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80081ea:	4b07      	ldr	r3, [pc, #28]	; (8008208 <ILI9341_Draw_Pixel+0x1ac>)
 80081ec:	695b      	ldr	r3, [r3, #20]
 80081ee:	4a06      	ldr	r2, [pc, #24]	; (8008208 <ILI9341_Draw_Pixel+0x1ac>)
 80081f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081f4:	6153      	str	r3, [r2, #20]
 80081f6:	e000      	b.n	80081fa <ILI9341_Draw_Pixel+0x19e>
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80081f8:	bf00      	nop

	
}
 80081fa:	3718      	adds	r7, #24
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}
 8008200:	20001f52 	.word	0x20001f52
 8008204:	20001f50 	.word	0x20001f50
 8008208:	48000400 	.word	0x48000400
 800820c:	200021d0 	.word	0x200021d0

08008210 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8008210:	b590      	push	{r4, r7, lr}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	4604      	mov	r4, r0
 8008218:	4608      	mov	r0, r1
 800821a:	4611      	mov	r1, r2
 800821c:	461a      	mov	r2, r3
 800821e:	4623      	mov	r3, r4
 8008220:	80fb      	strh	r3, [r7, #6]
 8008222:	4603      	mov	r3, r0
 8008224:	80bb      	strh	r3, [r7, #4]
 8008226:	460b      	mov	r3, r1
 8008228:	807b      	strh	r3, [r7, #2]
 800822a:	4613      	mov	r3, r2
 800822c:	803b      	strh	r3, [r7, #0]
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800822e:	4b25      	ldr	r3, [pc, #148]	; (80082c4 <ILI9341_Draw_Rectangle+0xb4>)
 8008230:	881b      	ldrh	r3, [r3, #0]
 8008232:	b29b      	uxth	r3, r3
 8008234:	88fa      	ldrh	r2, [r7, #6]
 8008236:	429a      	cmp	r2, r3
 8008238:	d23f      	bcs.n	80082ba <ILI9341_Draw_Rectangle+0xaa>
 800823a:	4b23      	ldr	r3, [pc, #140]	; (80082c8 <ILI9341_Draw_Rectangle+0xb8>)
 800823c:	881b      	ldrh	r3, [r3, #0]
 800823e:	b29b      	uxth	r3, r3
 8008240:	88ba      	ldrh	r2, [r7, #4]
 8008242:	429a      	cmp	r2, r3
 8008244:	d239      	bcs.n	80082ba <ILI9341_Draw_Rectangle+0xaa>
	if((X+Width-1)>=LCD_WIDTH)
 8008246:	88fa      	ldrh	r2, [r7, #6]
 8008248:	887b      	ldrh	r3, [r7, #2]
 800824a:	4413      	add	r3, r2
 800824c:	3b01      	subs	r3, #1
 800824e:	4a1d      	ldr	r2, [pc, #116]	; (80082c4 <ILI9341_Draw_Rectangle+0xb4>)
 8008250:	8812      	ldrh	r2, [r2, #0]
 8008252:	b292      	uxth	r2, r2
 8008254:	4293      	cmp	r3, r2
 8008256:	db05      	blt.n	8008264 <ILI9341_Draw_Rectangle+0x54>
		{
			Width=LCD_WIDTH-X;
 8008258:	4b1a      	ldr	r3, [pc, #104]	; (80082c4 <ILI9341_Draw_Rectangle+0xb4>)
 800825a:	881b      	ldrh	r3, [r3, #0]
 800825c:	b29a      	uxth	r2, r3
 800825e:	88fb      	ldrh	r3, [r7, #6]
 8008260:	1ad3      	subs	r3, r2, r3
 8008262:	807b      	strh	r3, [r7, #2]
		}
	if((Y+Height-1)>=LCD_HEIGHT)
 8008264:	88ba      	ldrh	r2, [r7, #4]
 8008266:	883b      	ldrh	r3, [r7, #0]
 8008268:	4413      	add	r3, r2
 800826a:	3b01      	subs	r3, #1
 800826c:	4a16      	ldr	r2, [pc, #88]	; (80082c8 <ILI9341_Draw_Rectangle+0xb8>)
 800826e:	8812      	ldrh	r2, [r2, #0]
 8008270:	b292      	uxth	r2, r2
 8008272:	4293      	cmp	r3, r2
 8008274:	db05      	blt.n	8008282 <ILI9341_Draw_Rectangle+0x72>
		{
			Height=LCD_HEIGHT-Y;
 8008276:	4b14      	ldr	r3, [pc, #80]	; (80082c8 <ILI9341_Draw_Rectangle+0xb8>)
 8008278:	881b      	ldrh	r3, [r3, #0]
 800827a:	b29a      	uxth	r2, r3
 800827c:	88bb      	ldrh	r3, [r7, #4]
 800827e:	1ad3      	subs	r3, r2, r3
 8008280:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8008282:	88fa      	ldrh	r2, [r7, #6]
 8008284:	887b      	ldrh	r3, [r7, #2]
 8008286:	4413      	add	r3, r2
 8008288:	b29b      	uxth	r3, r3
 800828a:	3b01      	subs	r3, #1
 800828c:	b29c      	uxth	r4, r3
 800828e:	88ba      	ldrh	r2, [r7, #4]
 8008290:	883b      	ldrh	r3, [r7, #0]
 8008292:	4413      	add	r3, r2
 8008294:	b29b      	uxth	r3, r3
 8008296:	3b01      	subs	r3, #1
 8008298:	b29b      	uxth	r3, r3
 800829a:	88b9      	ldrh	r1, [r7, #4]
 800829c:	88f8      	ldrh	r0, [r7, #6]
 800829e:	4622      	mov	r2, r4
 80082a0:	f7ff fc46 	bl	8007b30 <ILI9341_Set_Address>
	ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 80082a4:	883b      	ldrh	r3, [r7, #0]
 80082a6:	887a      	ldrh	r2, [r7, #2]
 80082a8:	fb02 f303 	mul.w	r3, r2, r3
 80082ac:	461a      	mov	r2, r3
 80082ae:	8b3b      	ldrh	r3, [r7, #24]
 80082b0:	4611      	mov	r1, r2
 80082b2:	4618      	mov	r0, r3
 80082b4:	f7ff fe12 	bl	8007edc <ILI9341_Draw_Colour_Burst>
 80082b8:	e000      	b.n	80082bc <ILI9341_Draw_Rectangle+0xac>
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80082ba:	bf00      	nop
}
 80082bc:	370c      	adds	r7, #12
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd90      	pop	{r4, r7, pc}
 80082c2:	bf00      	nop
 80082c4:	20001f52 	.word	0x20001f52
 80082c8:	20001f50 	.word	0x20001f50

080082cc <__errno>:
 80082cc:	4b01      	ldr	r3, [pc, #4]	; (80082d4 <__errno+0x8>)
 80082ce:	6818      	ldr	r0, [r3, #0]
 80082d0:	4770      	bx	lr
 80082d2:	bf00      	nop
 80082d4:	20001f54 	.word	0x20001f54

080082d8 <__libc_init_array>:
 80082d8:	b570      	push	{r4, r5, r6, lr}
 80082da:	4e0d      	ldr	r6, [pc, #52]	; (8008310 <__libc_init_array+0x38>)
 80082dc:	4c0d      	ldr	r4, [pc, #52]	; (8008314 <__libc_init_array+0x3c>)
 80082de:	1ba4      	subs	r4, r4, r6
 80082e0:	10a4      	asrs	r4, r4, #2
 80082e2:	2500      	movs	r5, #0
 80082e4:	42a5      	cmp	r5, r4
 80082e6:	d109      	bne.n	80082fc <__libc_init_array+0x24>
 80082e8:	4e0b      	ldr	r6, [pc, #44]	; (8008318 <__libc_init_array+0x40>)
 80082ea:	4c0c      	ldr	r4, [pc, #48]	; (800831c <__libc_init_array+0x44>)
 80082ec:	f001 f940 	bl	8009570 <_init>
 80082f0:	1ba4      	subs	r4, r4, r6
 80082f2:	10a4      	asrs	r4, r4, #2
 80082f4:	2500      	movs	r5, #0
 80082f6:	42a5      	cmp	r5, r4
 80082f8:	d105      	bne.n	8008306 <__libc_init_array+0x2e>
 80082fa:	bd70      	pop	{r4, r5, r6, pc}
 80082fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008300:	4798      	blx	r3
 8008302:	3501      	adds	r5, #1
 8008304:	e7ee      	b.n	80082e4 <__libc_init_array+0xc>
 8008306:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800830a:	4798      	blx	r3
 800830c:	3501      	adds	r5, #1
 800830e:	e7f2      	b.n	80082f6 <__libc_init_array+0x1e>
 8008310:	08009924 	.word	0x08009924
 8008314:	08009924 	.word	0x08009924
 8008318:	08009924 	.word	0x08009924
 800831c:	08009928 	.word	0x08009928

08008320 <memset>:
 8008320:	4402      	add	r2, r0
 8008322:	4603      	mov	r3, r0
 8008324:	4293      	cmp	r3, r2
 8008326:	d100      	bne.n	800832a <memset+0xa>
 8008328:	4770      	bx	lr
 800832a:	f803 1b01 	strb.w	r1, [r3], #1
 800832e:	e7f9      	b.n	8008324 <memset+0x4>

08008330 <iprintf>:
 8008330:	b40f      	push	{r0, r1, r2, r3}
 8008332:	4b0a      	ldr	r3, [pc, #40]	; (800835c <iprintf+0x2c>)
 8008334:	b513      	push	{r0, r1, r4, lr}
 8008336:	681c      	ldr	r4, [r3, #0]
 8008338:	b124      	cbz	r4, 8008344 <iprintf+0x14>
 800833a:	69a3      	ldr	r3, [r4, #24]
 800833c:	b913      	cbnz	r3, 8008344 <iprintf+0x14>
 800833e:	4620      	mov	r0, r4
 8008340:	f000 fa56 	bl	80087f0 <__sinit>
 8008344:	ab05      	add	r3, sp, #20
 8008346:	9a04      	ldr	r2, [sp, #16]
 8008348:	68a1      	ldr	r1, [r4, #8]
 800834a:	9301      	str	r3, [sp, #4]
 800834c:	4620      	mov	r0, r4
 800834e:	f000 fd61 	bl	8008e14 <_vfiprintf_r>
 8008352:	b002      	add	sp, #8
 8008354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008358:	b004      	add	sp, #16
 800835a:	4770      	bx	lr
 800835c:	20001f54 	.word	0x20001f54

08008360 <_puts_r>:
 8008360:	b570      	push	{r4, r5, r6, lr}
 8008362:	460e      	mov	r6, r1
 8008364:	4605      	mov	r5, r0
 8008366:	b118      	cbz	r0, 8008370 <_puts_r+0x10>
 8008368:	6983      	ldr	r3, [r0, #24]
 800836a:	b90b      	cbnz	r3, 8008370 <_puts_r+0x10>
 800836c:	f000 fa40 	bl	80087f0 <__sinit>
 8008370:	69ab      	ldr	r3, [r5, #24]
 8008372:	68ac      	ldr	r4, [r5, #8]
 8008374:	b913      	cbnz	r3, 800837c <_puts_r+0x1c>
 8008376:	4628      	mov	r0, r5
 8008378:	f000 fa3a 	bl	80087f0 <__sinit>
 800837c:	4b23      	ldr	r3, [pc, #140]	; (800840c <_puts_r+0xac>)
 800837e:	429c      	cmp	r4, r3
 8008380:	d117      	bne.n	80083b2 <_puts_r+0x52>
 8008382:	686c      	ldr	r4, [r5, #4]
 8008384:	89a3      	ldrh	r3, [r4, #12]
 8008386:	071b      	lsls	r3, r3, #28
 8008388:	d51d      	bpl.n	80083c6 <_puts_r+0x66>
 800838a:	6923      	ldr	r3, [r4, #16]
 800838c:	b1db      	cbz	r3, 80083c6 <_puts_r+0x66>
 800838e:	3e01      	subs	r6, #1
 8008390:	68a3      	ldr	r3, [r4, #8]
 8008392:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008396:	3b01      	subs	r3, #1
 8008398:	60a3      	str	r3, [r4, #8]
 800839a:	b9e9      	cbnz	r1, 80083d8 <_puts_r+0x78>
 800839c:	2b00      	cmp	r3, #0
 800839e:	da2e      	bge.n	80083fe <_puts_r+0x9e>
 80083a0:	4622      	mov	r2, r4
 80083a2:	210a      	movs	r1, #10
 80083a4:	4628      	mov	r0, r5
 80083a6:	f000 f873 	bl	8008490 <__swbuf_r>
 80083aa:	3001      	adds	r0, #1
 80083ac:	d011      	beq.n	80083d2 <_puts_r+0x72>
 80083ae:	200a      	movs	r0, #10
 80083b0:	e011      	b.n	80083d6 <_puts_r+0x76>
 80083b2:	4b17      	ldr	r3, [pc, #92]	; (8008410 <_puts_r+0xb0>)
 80083b4:	429c      	cmp	r4, r3
 80083b6:	d101      	bne.n	80083bc <_puts_r+0x5c>
 80083b8:	68ac      	ldr	r4, [r5, #8]
 80083ba:	e7e3      	b.n	8008384 <_puts_r+0x24>
 80083bc:	4b15      	ldr	r3, [pc, #84]	; (8008414 <_puts_r+0xb4>)
 80083be:	429c      	cmp	r4, r3
 80083c0:	bf08      	it	eq
 80083c2:	68ec      	ldreq	r4, [r5, #12]
 80083c4:	e7de      	b.n	8008384 <_puts_r+0x24>
 80083c6:	4621      	mov	r1, r4
 80083c8:	4628      	mov	r0, r5
 80083ca:	f000 f8b3 	bl	8008534 <__swsetup_r>
 80083ce:	2800      	cmp	r0, #0
 80083d0:	d0dd      	beq.n	800838e <_puts_r+0x2e>
 80083d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083d6:	bd70      	pop	{r4, r5, r6, pc}
 80083d8:	2b00      	cmp	r3, #0
 80083da:	da04      	bge.n	80083e6 <_puts_r+0x86>
 80083dc:	69a2      	ldr	r2, [r4, #24]
 80083de:	429a      	cmp	r2, r3
 80083e0:	dc06      	bgt.n	80083f0 <_puts_r+0x90>
 80083e2:	290a      	cmp	r1, #10
 80083e4:	d004      	beq.n	80083f0 <_puts_r+0x90>
 80083e6:	6823      	ldr	r3, [r4, #0]
 80083e8:	1c5a      	adds	r2, r3, #1
 80083ea:	6022      	str	r2, [r4, #0]
 80083ec:	7019      	strb	r1, [r3, #0]
 80083ee:	e7cf      	b.n	8008390 <_puts_r+0x30>
 80083f0:	4622      	mov	r2, r4
 80083f2:	4628      	mov	r0, r5
 80083f4:	f000 f84c 	bl	8008490 <__swbuf_r>
 80083f8:	3001      	adds	r0, #1
 80083fa:	d1c9      	bne.n	8008390 <_puts_r+0x30>
 80083fc:	e7e9      	b.n	80083d2 <_puts_r+0x72>
 80083fe:	6823      	ldr	r3, [r4, #0]
 8008400:	200a      	movs	r0, #10
 8008402:	1c5a      	adds	r2, r3, #1
 8008404:	6022      	str	r2, [r4, #0]
 8008406:	7018      	strb	r0, [r3, #0]
 8008408:	e7e5      	b.n	80083d6 <_puts_r+0x76>
 800840a:	bf00      	nop
 800840c:	080098b0 	.word	0x080098b0
 8008410:	080098d0 	.word	0x080098d0
 8008414:	08009890 	.word	0x08009890

08008418 <puts>:
 8008418:	4b02      	ldr	r3, [pc, #8]	; (8008424 <puts+0xc>)
 800841a:	4601      	mov	r1, r0
 800841c:	6818      	ldr	r0, [r3, #0]
 800841e:	f7ff bf9f 	b.w	8008360 <_puts_r>
 8008422:	bf00      	nop
 8008424:	20001f54 	.word	0x20001f54

08008428 <sniprintf>:
 8008428:	b40c      	push	{r2, r3}
 800842a:	b530      	push	{r4, r5, lr}
 800842c:	4b17      	ldr	r3, [pc, #92]	; (800848c <sniprintf+0x64>)
 800842e:	1e0c      	subs	r4, r1, #0
 8008430:	b09d      	sub	sp, #116	; 0x74
 8008432:	681d      	ldr	r5, [r3, #0]
 8008434:	da08      	bge.n	8008448 <sniprintf+0x20>
 8008436:	238b      	movs	r3, #139	; 0x8b
 8008438:	602b      	str	r3, [r5, #0]
 800843a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800843e:	b01d      	add	sp, #116	; 0x74
 8008440:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008444:	b002      	add	sp, #8
 8008446:	4770      	bx	lr
 8008448:	f44f 7302 	mov.w	r3, #520	; 0x208
 800844c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008450:	bf14      	ite	ne
 8008452:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8008456:	4623      	moveq	r3, r4
 8008458:	9304      	str	r3, [sp, #16]
 800845a:	9307      	str	r3, [sp, #28]
 800845c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008460:	9002      	str	r0, [sp, #8]
 8008462:	9006      	str	r0, [sp, #24]
 8008464:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008468:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800846a:	ab21      	add	r3, sp, #132	; 0x84
 800846c:	a902      	add	r1, sp, #8
 800846e:	4628      	mov	r0, r5
 8008470:	9301      	str	r3, [sp, #4]
 8008472:	f000 fbad 	bl	8008bd0 <_svfiprintf_r>
 8008476:	1c43      	adds	r3, r0, #1
 8008478:	bfbc      	itt	lt
 800847a:	238b      	movlt	r3, #139	; 0x8b
 800847c:	602b      	strlt	r3, [r5, #0]
 800847e:	2c00      	cmp	r4, #0
 8008480:	d0dd      	beq.n	800843e <sniprintf+0x16>
 8008482:	9b02      	ldr	r3, [sp, #8]
 8008484:	2200      	movs	r2, #0
 8008486:	701a      	strb	r2, [r3, #0]
 8008488:	e7d9      	b.n	800843e <sniprintf+0x16>
 800848a:	bf00      	nop
 800848c:	20001f54 	.word	0x20001f54

08008490 <__swbuf_r>:
 8008490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008492:	460e      	mov	r6, r1
 8008494:	4614      	mov	r4, r2
 8008496:	4605      	mov	r5, r0
 8008498:	b118      	cbz	r0, 80084a2 <__swbuf_r+0x12>
 800849a:	6983      	ldr	r3, [r0, #24]
 800849c:	b90b      	cbnz	r3, 80084a2 <__swbuf_r+0x12>
 800849e:	f000 f9a7 	bl	80087f0 <__sinit>
 80084a2:	4b21      	ldr	r3, [pc, #132]	; (8008528 <__swbuf_r+0x98>)
 80084a4:	429c      	cmp	r4, r3
 80084a6:	d12a      	bne.n	80084fe <__swbuf_r+0x6e>
 80084a8:	686c      	ldr	r4, [r5, #4]
 80084aa:	69a3      	ldr	r3, [r4, #24]
 80084ac:	60a3      	str	r3, [r4, #8]
 80084ae:	89a3      	ldrh	r3, [r4, #12]
 80084b0:	071a      	lsls	r2, r3, #28
 80084b2:	d52e      	bpl.n	8008512 <__swbuf_r+0x82>
 80084b4:	6923      	ldr	r3, [r4, #16]
 80084b6:	b363      	cbz	r3, 8008512 <__swbuf_r+0x82>
 80084b8:	6923      	ldr	r3, [r4, #16]
 80084ba:	6820      	ldr	r0, [r4, #0]
 80084bc:	1ac0      	subs	r0, r0, r3
 80084be:	6963      	ldr	r3, [r4, #20]
 80084c0:	b2f6      	uxtb	r6, r6
 80084c2:	4283      	cmp	r3, r0
 80084c4:	4637      	mov	r7, r6
 80084c6:	dc04      	bgt.n	80084d2 <__swbuf_r+0x42>
 80084c8:	4621      	mov	r1, r4
 80084ca:	4628      	mov	r0, r5
 80084cc:	f000 f926 	bl	800871c <_fflush_r>
 80084d0:	bb28      	cbnz	r0, 800851e <__swbuf_r+0x8e>
 80084d2:	68a3      	ldr	r3, [r4, #8]
 80084d4:	3b01      	subs	r3, #1
 80084d6:	60a3      	str	r3, [r4, #8]
 80084d8:	6823      	ldr	r3, [r4, #0]
 80084da:	1c5a      	adds	r2, r3, #1
 80084dc:	6022      	str	r2, [r4, #0]
 80084de:	701e      	strb	r6, [r3, #0]
 80084e0:	6963      	ldr	r3, [r4, #20]
 80084e2:	3001      	adds	r0, #1
 80084e4:	4283      	cmp	r3, r0
 80084e6:	d004      	beq.n	80084f2 <__swbuf_r+0x62>
 80084e8:	89a3      	ldrh	r3, [r4, #12]
 80084ea:	07db      	lsls	r3, r3, #31
 80084ec:	d519      	bpl.n	8008522 <__swbuf_r+0x92>
 80084ee:	2e0a      	cmp	r6, #10
 80084f0:	d117      	bne.n	8008522 <__swbuf_r+0x92>
 80084f2:	4621      	mov	r1, r4
 80084f4:	4628      	mov	r0, r5
 80084f6:	f000 f911 	bl	800871c <_fflush_r>
 80084fa:	b190      	cbz	r0, 8008522 <__swbuf_r+0x92>
 80084fc:	e00f      	b.n	800851e <__swbuf_r+0x8e>
 80084fe:	4b0b      	ldr	r3, [pc, #44]	; (800852c <__swbuf_r+0x9c>)
 8008500:	429c      	cmp	r4, r3
 8008502:	d101      	bne.n	8008508 <__swbuf_r+0x78>
 8008504:	68ac      	ldr	r4, [r5, #8]
 8008506:	e7d0      	b.n	80084aa <__swbuf_r+0x1a>
 8008508:	4b09      	ldr	r3, [pc, #36]	; (8008530 <__swbuf_r+0xa0>)
 800850a:	429c      	cmp	r4, r3
 800850c:	bf08      	it	eq
 800850e:	68ec      	ldreq	r4, [r5, #12]
 8008510:	e7cb      	b.n	80084aa <__swbuf_r+0x1a>
 8008512:	4621      	mov	r1, r4
 8008514:	4628      	mov	r0, r5
 8008516:	f000 f80d 	bl	8008534 <__swsetup_r>
 800851a:	2800      	cmp	r0, #0
 800851c:	d0cc      	beq.n	80084b8 <__swbuf_r+0x28>
 800851e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008522:	4638      	mov	r0, r7
 8008524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008526:	bf00      	nop
 8008528:	080098b0 	.word	0x080098b0
 800852c:	080098d0 	.word	0x080098d0
 8008530:	08009890 	.word	0x08009890

08008534 <__swsetup_r>:
 8008534:	4b32      	ldr	r3, [pc, #200]	; (8008600 <__swsetup_r+0xcc>)
 8008536:	b570      	push	{r4, r5, r6, lr}
 8008538:	681d      	ldr	r5, [r3, #0]
 800853a:	4606      	mov	r6, r0
 800853c:	460c      	mov	r4, r1
 800853e:	b125      	cbz	r5, 800854a <__swsetup_r+0x16>
 8008540:	69ab      	ldr	r3, [r5, #24]
 8008542:	b913      	cbnz	r3, 800854a <__swsetup_r+0x16>
 8008544:	4628      	mov	r0, r5
 8008546:	f000 f953 	bl	80087f0 <__sinit>
 800854a:	4b2e      	ldr	r3, [pc, #184]	; (8008604 <__swsetup_r+0xd0>)
 800854c:	429c      	cmp	r4, r3
 800854e:	d10f      	bne.n	8008570 <__swsetup_r+0x3c>
 8008550:	686c      	ldr	r4, [r5, #4]
 8008552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008556:	b29a      	uxth	r2, r3
 8008558:	0715      	lsls	r5, r2, #28
 800855a:	d42c      	bmi.n	80085b6 <__swsetup_r+0x82>
 800855c:	06d0      	lsls	r0, r2, #27
 800855e:	d411      	bmi.n	8008584 <__swsetup_r+0x50>
 8008560:	2209      	movs	r2, #9
 8008562:	6032      	str	r2, [r6, #0]
 8008564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008568:	81a3      	strh	r3, [r4, #12]
 800856a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800856e:	e03e      	b.n	80085ee <__swsetup_r+0xba>
 8008570:	4b25      	ldr	r3, [pc, #148]	; (8008608 <__swsetup_r+0xd4>)
 8008572:	429c      	cmp	r4, r3
 8008574:	d101      	bne.n	800857a <__swsetup_r+0x46>
 8008576:	68ac      	ldr	r4, [r5, #8]
 8008578:	e7eb      	b.n	8008552 <__swsetup_r+0x1e>
 800857a:	4b24      	ldr	r3, [pc, #144]	; (800860c <__swsetup_r+0xd8>)
 800857c:	429c      	cmp	r4, r3
 800857e:	bf08      	it	eq
 8008580:	68ec      	ldreq	r4, [r5, #12]
 8008582:	e7e6      	b.n	8008552 <__swsetup_r+0x1e>
 8008584:	0751      	lsls	r1, r2, #29
 8008586:	d512      	bpl.n	80085ae <__swsetup_r+0x7a>
 8008588:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800858a:	b141      	cbz	r1, 800859e <__swsetup_r+0x6a>
 800858c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008590:	4299      	cmp	r1, r3
 8008592:	d002      	beq.n	800859a <__swsetup_r+0x66>
 8008594:	4630      	mov	r0, r6
 8008596:	f000 fa19 	bl	80089cc <_free_r>
 800859a:	2300      	movs	r3, #0
 800859c:	6363      	str	r3, [r4, #52]	; 0x34
 800859e:	89a3      	ldrh	r3, [r4, #12]
 80085a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80085a4:	81a3      	strh	r3, [r4, #12]
 80085a6:	2300      	movs	r3, #0
 80085a8:	6063      	str	r3, [r4, #4]
 80085aa:	6923      	ldr	r3, [r4, #16]
 80085ac:	6023      	str	r3, [r4, #0]
 80085ae:	89a3      	ldrh	r3, [r4, #12]
 80085b0:	f043 0308 	orr.w	r3, r3, #8
 80085b4:	81a3      	strh	r3, [r4, #12]
 80085b6:	6923      	ldr	r3, [r4, #16]
 80085b8:	b94b      	cbnz	r3, 80085ce <__swsetup_r+0x9a>
 80085ba:	89a3      	ldrh	r3, [r4, #12]
 80085bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80085c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085c4:	d003      	beq.n	80085ce <__swsetup_r+0x9a>
 80085c6:	4621      	mov	r1, r4
 80085c8:	4630      	mov	r0, r6
 80085ca:	f000 f9bf 	bl	800894c <__smakebuf_r>
 80085ce:	89a2      	ldrh	r2, [r4, #12]
 80085d0:	f012 0301 	ands.w	r3, r2, #1
 80085d4:	d00c      	beq.n	80085f0 <__swsetup_r+0xbc>
 80085d6:	2300      	movs	r3, #0
 80085d8:	60a3      	str	r3, [r4, #8]
 80085da:	6963      	ldr	r3, [r4, #20]
 80085dc:	425b      	negs	r3, r3
 80085de:	61a3      	str	r3, [r4, #24]
 80085e0:	6923      	ldr	r3, [r4, #16]
 80085e2:	b953      	cbnz	r3, 80085fa <__swsetup_r+0xc6>
 80085e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085e8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80085ec:	d1ba      	bne.n	8008564 <__swsetup_r+0x30>
 80085ee:	bd70      	pop	{r4, r5, r6, pc}
 80085f0:	0792      	lsls	r2, r2, #30
 80085f2:	bf58      	it	pl
 80085f4:	6963      	ldrpl	r3, [r4, #20]
 80085f6:	60a3      	str	r3, [r4, #8]
 80085f8:	e7f2      	b.n	80085e0 <__swsetup_r+0xac>
 80085fa:	2000      	movs	r0, #0
 80085fc:	e7f7      	b.n	80085ee <__swsetup_r+0xba>
 80085fe:	bf00      	nop
 8008600:	20001f54 	.word	0x20001f54
 8008604:	080098b0 	.word	0x080098b0
 8008608:	080098d0 	.word	0x080098d0
 800860c:	08009890 	.word	0x08009890

08008610 <__sflush_r>:
 8008610:	898a      	ldrh	r2, [r1, #12]
 8008612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008616:	4605      	mov	r5, r0
 8008618:	0710      	lsls	r0, r2, #28
 800861a:	460c      	mov	r4, r1
 800861c:	d458      	bmi.n	80086d0 <__sflush_r+0xc0>
 800861e:	684b      	ldr	r3, [r1, #4]
 8008620:	2b00      	cmp	r3, #0
 8008622:	dc05      	bgt.n	8008630 <__sflush_r+0x20>
 8008624:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008626:	2b00      	cmp	r3, #0
 8008628:	dc02      	bgt.n	8008630 <__sflush_r+0x20>
 800862a:	2000      	movs	r0, #0
 800862c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008630:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008632:	2e00      	cmp	r6, #0
 8008634:	d0f9      	beq.n	800862a <__sflush_r+0x1a>
 8008636:	2300      	movs	r3, #0
 8008638:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800863c:	682f      	ldr	r7, [r5, #0]
 800863e:	6a21      	ldr	r1, [r4, #32]
 8008640:	602b      	str	r3, [r5, #0]
 8008642:	d032      	beq.n	80086aa <__sflush_r+0x9a>
 8008644:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008646:	89a3      	ldrh	r3, [r4, #12]
 8008648:	075a      	lsls	r2, r3, #29
 800864a:	d505      	bpl.n	8008658 <__sflush_r+0x48>
 800864c:	6863      	ldr	r3, [r4, #4]
 800864e:	1ac0      	subs	r0, r0, r3
 8008650:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008652:	b10b      	cbz	r3, 8008658 <__sflush_r+0x48>
 8008654:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008656:	1ac0      	subs	r0, r0, r3
 8008658:	2300      	movs	r3, #0
 800865a:	4602      	mov	r2, r0
 800865c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800865e:	6a21      	ldr	r1, [r4, #32]
 8008660:	4628      	mov	r0, r5
 8008662:	47b0      	blx	r6
 8008664:	1c43      	adds	r3, r0, #1
 8008666:	89a3      	ldrh	r3, [r4, #12]
 8008668:	d106      	bne.n	8008678 <__sflush_r+0x68>
 800866a:	6829      	ldr	r1, [r5, #0]
 800866c:	291d      	cmp	r1, #29
 800866e:	d848      	bhi.n	8008702 <__sflush_r+0xf2>
 8008670:	4a29      	ldr	r2, [pc, #164]	; (8008718 <__sflush_r+0x108>)
 8008672:	40ca      	lsrs	r2, r1
 8008674:	07d6      	lsls	r6, r2, #31
 8008676:	d544      	bpl.n	8008702 <__sflush_r+0xf2>
 8008678:	2200      	movs	r2, #0
 800867a:	6062      	str	r2, [r4, #4]
 800867c:	04d9      	lsls	r1, r3, #19
 800867e:	6922      	ldr	r2, [r4, #16]
 8008680:	6022      	str	r2, [r4, #0]
 8008682:	d504      	bpl.n	800868e <__sflush_r+0x7e>
 8008684:	1c42      	adds	r2, r0, #1
 8008686:	d101      	bne.n	800868c <__sflush_r+0x7c>
 8008688:	682b      	ldr	r3, [r5, #0]
 800868a:	b903      	cbnz	r3, 800868e <__sflush_r+0x7e>
 800868c:	6560      	str	r0, [r4, #84]	; 0x54
 800868e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008690:	602f      	str	r7, [r5, #0]
 8008692:	2900      	cmp	r1, #0
 8008694:	d0c9      	beq.n	800862a <__sflush_r+0x1a>
 8008696:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800869a:	4299      	cmp	r1, r3
 800869c:	d002      	beq.n	80086a4 <__sflush_r+0x94>
 800869e:	4628      	mov	r0, r5
 80086a0:	f000 f994 	bl	80089cc <_free_r>
 80086a4:	2000      	movs	r0, #0
 80086a6:	6360      	str	r0, [r4, #52]	; 0x34
 80086a8:	e7c0      	b.n	800862c <__sflush_r+0x1c>
 80086aa:	2301      	movs	r3, #1
 80086ac:	4628      	mov	r0, r5
 80086ae:	47b0      	blx	r6
 80086b0:	1c41      	adds	r1, r0, #1
 80086b2:	d1c8      	bne.n	8008646 <__sflush_r+0x36>
 80086b4:	682b      	ldr	r3, [r5, #0]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d0c5      	beq.n	8008646 <__sflush_r+0x36>
 80086ba:	2b1d      	cmp	r3, #29
 80086bc:	d001      	beq.n	80086c2 <__sflush_r+0xb2>
 80086be:	2b16      	cmp	r3, #22
 80086c0:	d101      	bne.n	80086c6 <__sflush_r+0xb6>
 80086c2:	602f      	str	r7, [r5, #0]
 80086c4:	e7b1      	b.n	800862a <__sflush_r+0x1a>
 80086c6:	89a3      	ldrh	r3, [r4, #12]
 80086c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086cc:	81a3      	strh	r3, [r4, #12]
 80086ce:	e7ad      	b.n	800862c <__sflush_r+0x1c>
 80086d0:	690f      	ldr	r7, [r1, #16]
 80086d2:	2f00      	cmp	r7, #0
 80086d4:	d0a9      	beq.n	800862a <__sflush_r+0x1a>
 80086d6:	0793      	lsls	r3, r2, #30
 80086d8:	680e      	ldr	r6, [r1, #0]
 80086da:	bf08      	it	eq
 80086dc:	694b      	ldreq	r3, [r1, #20]
 80086de:	600f      	str	r7, [r1, #0]
 80086e0:	bf18      	it	ne
 80086e2:	2300      	movne	r3, #0
 80086e4:	eba6 0807 	sub.w	r8, r6, r7
 80086e8:	608b      	str	r3, [r1, #8]
 80086ea:	f1b8 0f00 	cmp.w	r8, #0
 80086ee:	dd9c      	ble.n	800862a <__sflush_r+0x1a>
 80086f0:	4643      	mov	r3, r8
 80086f2:	463a      	mov	r2, r7
 80086f4:	6a21      	ldr	r1, [r4, #32]
 80086f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80086f8:	4628      	mov	r0, r5
 80086fa:	47b0      	blx	r6
 80086fc:	2800      	cmp	r0, #0
 80086fe:	dc06      	bgt.n	800870e <__sflush_r+0xfe>
 8008700:	89a3      	ldrh	r3, [r4, #12]
 8008702:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008706:	81a3      	strh	r3, [r4, #12]
 8008708:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800870c:	e78e      	b.n	800862c <__sflush_r+0x1c>
 800870e:	4407      	add	r7, r0
 8008710:	eba8 0800 	sub.w	r8, r8, r0
 8008714:	e7e9      	b.n	80086ea <__sflush_r+0xda>
 8008716:	bf00      	nop
 8008718:	20400001 	.word	0x20400001

0800871c <_fflush_r>:
 800871c:	b538      	push	{r3, r4, r5, lr}
 800871e:	690b      	ldr	r3, [r1, #16]
 8008720:	4605      	mov	r5, r0
 8008722:	460c      	mov	r4, r1
 8008724:	b1db      	cbz	r3, 800875e <_fflush_r+0x42>
 8008726:	b118      	cbz	r0, 8008730 <_fflush_r+0x14>
 8008728:	6983      	ldr	r3, [r0, #24]
 800872a:	b90b      	cbnz	r3, 8008730 <_fflush_r+0x14>
 800872c:	f000 f860 	bl	80087f0 <__sinit>
 8008730:	4b0c      	ldr	r3, [pc, #48]	; (8008764 <_fflush_r+0x48>)
 8008732:	429c      	cmp	r4, r3
 8008734:	d109      	bne.n	800874a <_fflush_r+0x2e>
 8008736:	686c      	ldr	r4, [r5, #4]
 8008738:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800873c:	b17b      	cbz	r3, 800875e <_fflush_r+0x42>
 800873e:	4621      	mov	r1, r4
 8008740:	4628      	mov	r0, r5
 8008742:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008746:	f7ff bf63 	b.w	8008610 <__sflush_r>
 800874a:	4b07      	ldr	r3, [pc, #28]	; (8008768 <_fflush_r+0x4c>)
 800874c:	429c      	cmp	r4, r3
 800874e:	d101      	bne.n	8008754 <_fflush_r+0x38>
 8008750:	68ac      	ldr	r4, [r5, #8]
 8008752:	e7f1      	b.n	8008738 <_fflush_r+0x1c>
 8008754:	4b05      	ldr	r3, [pc, #20]	; (800876c <_fflush_r+0x50>)
 8008756:	429c      	cmp	r4, r3
 8008758:	bf08      	it	eq
 800875a:	68ec      	ldreq	r4, [r5, #12]
 800875c:	e7ec      	b.n	8008738 <_fflush_r+0x1c>
 800875e:	2000      	movs	r0, #0
 8008760:	bd38      	pop	{r3, r4, r5, pc}
 8008762:	bf00      	nop
 8008764:	080098b0 	.word	0x080098b0
 8008768:	080098d0 	.word	0x080098d0
 800876c:	08009890 	.word	0x08009890

08008770 <std>:
 8008770:	2300      	movs	r3, #0
 8008772:	b510      	push	{r4, lr}
 8008774:	4604      	mov	r4, r0
 8008776:	e9c0 3300 	strd	r3, r3, [r0]
 800877a:	6083      	str	r3, [r0, #8]
 800877c:	8181      	strh	r1, [r0, #12]
 800877e:	6643      	str	r3, [r0, #100]	; 0x64
 8008780:	81c2      	strh	r2, [r0, #14]
 8008782:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008786:	6183      	str	r3, [r0, #24]
 8008788:	4619      	mov	r1, r3
 800878a:	2208      	movs	r2, #8
 800878c:	305c      	adds	r0, #92	; 0x5c
 800878e:	f7ff fdc7 	bl	8008320 <memset>
 8008792:	4b05      	ldr	r3, [pc, #20]	; (80087a8 <std+0x38>)
 8008794:	6263      	str	r3, [r4, #36]	; 0x24
 8008796:	4b05      	ldr	r3, [pc, #20]	; (80087ac <std+0x3c>)
 8008798:	62a3      	str	r3, [r4, #40]	; 0x28
 800879a:	4b05      	ldr	r3, [pc, #20]	; (80087b0 <std+0x40>)
 800879c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800879e:	4b05      	ldr	r3, [pc, #20]	; (80087b4 <std+0x44>)
 80087a0:	6224      	str	r4, [r4, #32]
 80087a2:	6323      	str	r3, [r4, #48]	; 0x30
 80087a4:	bd10      	pop	{r4, pc}
 80087a6:	bf00      	nop
 80087a8:	08009371 	.word	0x08009371
 80087ac:	08009393 	.word	0x08009393
 80087b0:	080093cb 	.word	0x080093cb
 80087b4:	080093ef 	.word	0x080093ef

080087b8 <_cleanup_r>:
 80087b8:	4901      	ldr	r1, [pc, #4]	; (80087c0 <_cleanup_r+0x8>)
 80087ba:	f000 b885 	b.w	80088c8 <_fwalk_reent>
 80087be:	bf00      	nop
 80087c0:	0800871d 	.word	0x0800871d

080087c4 <__sfmoreglue>:
 80087c4:	b570      	push	{r4, r5, r6, lr}
 80087c6:	1e4a      	subs	r2, r1, #1
 80087c8:	2568      	movs	r5, #104	; 0x68
 80087ca:	4355      	muls	r5, r2
 80087cc:	460e      	mov	r6, r1
 80087ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80087d2:	f000 f949 	bl	8008a68 <_malloc_r>
 80087d6:	4604      	mov	r4, r0
 80087d8:	b140      	cbz	r0, 80087ec <__sfmoreglue+0x28>
 80087da:	2100      	movs	r1, #0
 80087dc:	e9c0 1600 	strd	r1, r6, [r0]
 80087e0:	300c      	adds	r0, #12
 80087e2:	60a0      	str	r0, [r4, #8]
 80087e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80087e8:	f7ff fd9a 	bl	8008320 <memset>
 80087ec:	4620      	mov	r0, r4
 80087ee:	bd70      	pop	{r4, r5, r6, pc}

080087f0 <__sinit>:
 80087f0:	6983      	ldr	r3, [r0, #24]
 80087f2:	b510      	push	{r4, lr}
 80087f4:	4604      	mov	r4, r0
 80087f6:	bb33      	cbnz	r3, 8008846 <__sinit+0x56>
 80087f8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80087fc:	6503      	str	r3, [r0, #80]	; 0x50
 80087fe:	4b12      	ldr	r3, [pc, #72]	; (8008848 <__sinit+0x58>)
 8008800:	4a12      	ldr	r2, [pc, #72]	; (800884c <__sinit+0x5c>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	6282      	str	r2, [r0, #40]	; 0x28
 8008806:	4298      	cmp	r0, r3
 8008808:	bf04      	itt	eq
 800880a:	2301      	moveq	r3, #1
 800880c:	6183      	streq	r3, [r0, #24]
 800880e:	f000 f81f 	bl	8008850 <__sfp>
 8008812:	6060      	str	r0, [r4, #4]
 8008814:	4620      	mov	r0, r4
 8008816:	f000 f81b 	bl	8008850 <__sfp>
 800881a:	60a0      	str	r0, [r4, #8]
 800881c:	4620      	mov	r0, r4
 800881e:	f000 f817 	bl	8008850 <__sfp>
 8008822:	2200      	movs	r2, #0
 8008824:	60e0      	str	r0, [r4, #12]
 8008826:	2104      	movs	r1, #4
 8008828:	6860      	ldr	r0, [r4, #4]
 800882a:	f7ff ffa1 	bl	8008770 <std>
 800882e:	2201      	movs	r2, #1
 8008830:	2109      	movs	r1, #9
 8008832:	68a0      	ldr	r0, [r4, #8]
 8008834:	f7ff ff9c 	bl	8008770 <std>
 8008838:	2202      	movs	r2, #2
 800883a:	2112      	movs	r1, #18
 800883c:	68e0      	ldr	r0, [r4, #12]
 800883e:	f7ff ff97 	bl	8008770 <std>
 8008842:	2301      	movs	r3, #1
 8008844:	61a3      	str	r3, [r4, #24]
 8008846:	bd10      	pop	{r4, pc}
 8008848:	0800988c 	.word	0x0800988c
 800884c:	080087b9 	.word	0x080087b9

08008850 <__sfp>:
 8008850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008852:	4b1b      	ldr	r3, [pc, #108]	; (80088c0 <__sfp+0x70>)
 8008854:	681e      	ldr	r6, [r3, #0]
 8008856:	69b3      	ldr	r3, [r6, #24]
 8008858:	4607      	mov	r7, r0
 800885a:	b913      	cbnz	r3, 8008862 <__sfp+0x12>
 800885c:	4630      	mov	r0, r6
 800885e:	f7ff ffc7 	bl	80087f0 <__sinit>
 8008862:	3648      	adds	r6, #72	; 0x48
 8008864:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008868:	3b01      	subs	r3, #1
 800886a:	d503      	bpl.n	8008874 <__sfp+0x24>
 800886c:	6833      	ldr	r3, [r6, #0]
 800886e:	b133      	cbz	r3, 800887e <__sfp+0x2e>
 8008870:	6836      	ldr	r6, [r6, #0]
 8008872:	e7f7      	b.n	8008864 <__sfp+0x14>
 8008874:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008878:	b16d      	cbz	r5, 8008896 <__sfp+0x46>
 800887a:	3468      	adds	r4, #104	; 0x68
 800887c:	e7f4      	b.n	8008868 <__sfp+0x18>
 800887e:	2104      	movs	r1, #4
 8008880:	4638      	mov	r0, r7
 8008882:	f7ff ff9f 	bl	80087c4 <__sfmoreglue>
 8008886:	6030      	str	r0, [r6, #0]
 8008888:	2800      	cmp	r0, #0
 800888a:	d1f1      	bne.n	8008870 <__sfp+0x20>
 800888c:	230c      	movs	r3, #12
 800888e:	603b      	str	r3, [r7, #0]
 8008890:	4604      	mov	r4, r0
 8008892:	4620      	mov	r0, r4
 8008894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008896:	4b0b      	ldr	r3, [pc, #44]	; (80088c4 <__sfp+0x74>)
 8008898:	6665      	str	r5, [r4, #100]	; 0x64
 800889a:	e9c4 5500 	strd	r5, r5, [r4]
 800889e:	60a5      	str	r5, [r4, #8]
 80088a0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80088a4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80088a8:	2208      	movs	r2, #8
 80088aa:	4629      	mov	r1, r5
 80088ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80088b0:	f7ff fd36 	bl	8008320 <memset>
 80088b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80088b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80088bc:	e7e9      	b.n	8008892 <__sfp+0x42>
 80088be:	bf00      	nop
 80088c0:	0800988c 	.word	0x0800988c
 80088c4:	ffff0001 	.word	0xffff0001

080088c8 <_fwalk_reent>:
 80088c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088cc:	4680      	mov	r8, r0
 80088ce:	4689      	mov	r9, r1
 80088d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80088d4:	2600      	movs	r6, #0
 80088d6:	b914      	cbnz	r4, 80088de <_fwalk_reent+0x16>
 80088d8:	4630      	mov	r0, r6
 80088da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088de:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80088e2:	3f01      	subs	r7, #1
 80088e4:	d501      	bpl.n	80088ea <_fwalk_reent+0x22>
 80088e6:	6824      	ldr	r4, [r4, #0]
 80088e8:	e7f5      	b.n	80088d6 <_fwalk_reent+0xe>
 80088ea:	89ab      	ldrh	r3, [r5, #12]
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d907      	bls.n	8008900 <_fwalk_reent+0x38>
 80088f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80088f4:	3301      	adds	r3, #1
 80088f6:	d003      	beq.n	8008900 <_fwalk_reent+0x38>
 80088f8:	4629      	mov	r1, r5
 80088fa:	4640      	mov	r0, r8
 80088fc:	47c8      	blx	r9
 80088fe:	4306      	orrs	r6, r0
 8008900:	3568      	adds	r5, #104	; 0x68
 8008902:	e7ee      	b.n	80088e2 <_fwalk_reent+0x1a>

08008904 <__swhatbuf_r>:
 8008904:	b570      	push	{r4, r5, r6, lr}
 8008906:	460e      	mov	r6, r1
 8008908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800890c:	2900      	cmp	r1, #0
 800890e:	b096      	sub	sp, #88	; 0x58
 8008910:	4614      	mov	r4, r2
 8008912:	461d      	mov	r5, r3
 8008914:	da07      	bge.n	8008926 <__swhatbuf_r+0x22>
 8008916:	2300      	movs	r3, #0
 8008918:	602b      	str	r3, [r5, #0]
 800891a:	89b3      	ldrh	r3, [r6, #12]
 800891c:	061a      	lsls	r2, r3, #24
 800891e:	d410      	bmi.n	8008942 <__swhatbuf_r+0x3e>
 8008920:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008924:	e00e      	b.n	8008944 <__swhatbuf_r+0x40>
 8008926:	466a      	mov	r2, sp
 8008928:	f000 fd88 	bl	800943c <_fstat_r>
 800892c:	2800      	cmp	r0, #0
 800892e:	dbf2      	blt.n	8008916 <__swhatbuf_r+0x12>
 8008930:	9a01      	ldr	r2, [sp, #4]
 8008932:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008936:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800893a:	425a      	negs	r2, r3
 800893c:	415a      	adcs	r2, r3
 800893e:	602a      	str	r2, [r5, #0]
 8008940:	e7ee      	b.n	8008920 <__swhatbuf_r+0x1c>
 8008942:	2340      	movs	r3, #64	; 0x40
 8008944:	2000      	movs	r0, #0
 8008946:	6023      	str	r3, [r4, #0]
 8008948:	b016      	add	sp, #88	; 0x58
 800894a:	bd70      	pop	{r4, r5, r6, pc}

0800894c <__smakebuf_r>:
 800894c:	898b      	ldrh	r3, [r1, #12]
 800894e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008950:	079d      	lsls	r5, r3, #30
 8008952:	4606      	mov	r6, r0
 8008954:	460c      	mov	r4, r1
 8008956:	d507      	bpl.n	8008968 <__smakebuf_r+0x1c>
 8008958:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800895c:	6023      	str	r3, [r4, #0]
 800895e:	6123      	str	r3, [r4, #16]
 8008960:	2301      	movs	r3, #1
 8008962:	6163      	str	r3, [r4, #20]
 8008964:	b002      	add	sp, #8
 8008966:	bd70      	pop	{r4, r5, r6, pc}
 8008968:	ab01      	add	r3, sp, #4
 800896a:	466a      	mov	r2, sp
 800896c:	f7ff ffca 	bl	8008904 <__swhatbuf_r>
 8008970:	9900      	ldr	r1, [sp, #0]
 8008972:	4605      	mov	r5, r0
 8008974:	4630      	mov	r0, r6
 8008976:	f000 f877 	bl	8008a68 <_malloc_r>
 800897a:	b948      	cbnz	r0, 8008990 <__smakebuf_r+0x44>
 800897c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008980:	059a      	lsls	r2, r3, #22
 8008982:	d4ef      	bmi.n	8008964 <__smakebuf_r+0x18>
 8008984:	f023 0303 	bic.w	r3, r3, #3
 8008988:	f043 0302 	orr.w	r3, r3, #2
 800898c:	81a3      	strh	r3, [r4, #12]
 800898e:	e7e3      	b.n	8008958 <__smakebuf_r+0xc>
 8008990:	4b0d      	ldr	r3, [pc, #52]	; (80089c8 <__smakebuf_r+0x7c>)
 8008992:	62b3      	str	r3, [r6, #40]	; 0x28
 8008994:	89a3      	ldrh	r3, [r4, #12]
 8008996:	6020      	str	r0, [r4, #0]
 8008998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800899c:	81a3      	strh	r3, [r4, #12]
 800899e:	9b00      	ldr	r3, [sp, #0]
 80089a0:	6163      	str	r3, [r4, #20]
 80089a2:	9b01      	ldr	r3, [sp, #4]
 80089a4:	6120      	str	r0, [r4, #16]
 80089a6:	b15b      	cbz	r3, 80089c0 <__smakebuf_r+0x74>
 80089a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089ac:	4630      	mov	r0, r6
 80089ae:	f000 fd57 	bl	8009460 <_isatty_r>
 80089b2:	b128      	cbz	r0, 80089c0 <__smakebuf_r+0x74>
 80089b4:	89a3      	ldrh	r3, [r4, #12]
 80089b6:	f023 0303 	bic.w	r3, r3, #3
 80089ba:	f043 0301 	orr.w	r3, r3, #1
 80089be:	81a3      	strh	r3, [r4, #12]
 80089c0:	89a3      	ldrh	r3, [r4, #12]
 80089c2:	431d      	orrs	r5, r3
 80089c4:	81a5      	strh	r5, [r4, #12]
 80089c6:	e7cd      	b.n	8008964 <__smakebuf_r+0x18>
 80089c8:	080087b9 	.word	0x080087b9

080089cc <_free_r>:
 80089cc:	b538      	push	{r3, r4, r5, lr}
 80089ce:	4605      	mov	r5, r0
 80089d0:	2900      	cmp	r1, #0
 80089d2:	d045      	beq.n	8008a60 <_free_r+0x94>
 80089d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089d8:	1f0c      	subs	r4, r1, #4
 80089da:	2b00      	cmp	r3, #0
 80089dc:	bfb8      	it	lt
 80089de:	18e4      	addlt	r4, r4, r3
 80089e0:	f000 fd84 	bl	80094ec <__malloc_lock>
 80089e4:	4a1f      	ldr	r2, [pc, #124]	; (8008a64 <_free_r+0x98>)
 80089e6:	6813      	ldr	r3, [r2, #0]
 80089e8:	4610      	mov	r0, r2
 80089ea:	b933      	cbnz	r3, 80089fa <_free_r+0x2e>
 80089ec:	6063      	str	r3, [r4, #4]
 80089ee:	6014      	str	r4, [r2, #0]
 80089f0:	4628      	mov	r0, r5
 80089f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089f6:	f000 bd7a 	b.w	80094ee <__malloc_unlock>
 80089fa:	42a3      	cmp	r3, r4
 80089fc:	d90c      	bls.n	8008a18 <_free_r+0x4c>
 80089fe:	6821      	ldr	r1, [r4, #0]
 8008a00:	1862      	adds	r2, r4, r1
 8008a02:	4293      	cmp	r3, r2
 8008a04:	bf04      	itt	eq
 8008a06:	681a      	ldreq	r2, [r3, #0]
 8008a08:	685b      	ldreq	r3, [r3, #4]
 8008a0a:	6063      	str	r3, [r4, #4]
 8008a0c:	bf04      	itt	eq
 8008a0e:	1852      	addeq	r2, r2, r1
 8008a10:	6022      	streq	r2, [r4, #0]
 8008a12:	6004      	str	r4, [r0, #0]
 8008a14:	e7ec      	b.n	80089f0 <_free_r+0x24>
 8008a16:	4613      	mov	r3, r2
 8008a18:	685a      	ldr	r2, [r3, #4]
 8008a1a:	b10a      	cbz	r2, 8008a20 <_free_r+0x54>
 8008a1c:	42a2      	cmp	r2, r4
 8008a1e:	d9fa      	bls.n	8008a16 <_free_r+0x4a>
 8008a20:	6819      	ldr	r1, [r3, #0]
 8008a22:	1858      	adds	r0, r3, r1
 8008a24:	42a0      	cmp	r0, r4
 8008a26:	d10b      	bne.n	8008a40 <_free_r+0x74>
 8008a28:	6820      	ldr	r0, [r4, #0]
 8008a2a:	4401      	add	r1, r0
 8008a2c:	1858      	adds	r0, r3, r1
 8008a2e:	4282      	cmp	r2, r0
 8008a30:	6019      	str	r1, [r3, #0]
 8008a32:	d1dd      	bne.n	80089f0 <_free_r+0x24>
 8008a34:	6810      	ldr	r0, [r2, #0]
 8008a36:	6852      	ldr	r2, [r2, #4]
 8008a38:	605a      	str	r2, [r3, #4]
 8008a3a:	4401      	add	r1, r0
 8008a3c:	6019      	str	r1, [r3, #0]
 8008a3e:	e7d7      	b.n	80089f0 <_free_r+0x24>
 8008a40:	d902      	bls.n	8008a48 <_free_r+0x7c>
 8008a42:	230c      	movs	r3, #12
 8008a44:	602b      	str	r3, [r5, #0]
 8008a46:	e7d3      	b.n	80089f0 <_free_r+0x24>
 8008a48:	6820      	ldr	r0, [r4, #0]
 8008a4a:	1821      	adds	r1, r4, r0
 8008a4c:	428a      	cmp	r2, r1
 8008a4e:	bf04      	itt	eq
 8008a50:	6811      	ldreq	r1, [r2, #0]
 8008a52:	6852      	ldreq	r2, [r2, #4]
 8008a54:	6062      	str	r2, [r4, #4]
 8008a56:	bf04      	itt	eq
 8008a58:	1809      	addeq	r1, r1, r0
 8008a5a:	6021      	streq	r1, [r4, #0]
 8008a5c:	605c      	str	r4, [r3, #4]
 8008a5e:	e7c7      	b.n	80089f0 <_free_r+0x24>
 8008a60:	bd38      	pop	{r3, r4, r5, pc}
 8008a62:	bf00      	nop
 8008a64:	20001fe4 	.word	0x20001fe4

08008a68 <_malloc_r>:
 8008a68:	b570      	push	{r4, r5, r6, lr}
 8008a6a:	1ccd      	adds	r5, r1, #3
 8008a6c:	f025 0503 	bic.w	r5, r5, #3
 8008a70:	3508      	adds	r5, #8
 8008a72:	2d0c      	cmp	r5, #12
 8008a74:	bf38      	it	cc
 8008a76:	250c      	movcc	r5, #12
 8008a78:	2d00      	cmp	r5, #0
 8008a7a:	4606      	mov	r6, r0
 8008a7c:	db01      	blt.n	8008a82 <_malloc_r+0x1a>
 8008a7e:	42a9      	cmp	r1, r5
 8008a80:	d903      	bls.n	8008a8a <_malloc_r+0x22>
 8008a82:	230c      	movs	r3, #12
 8008a84:	6033      	str	r3, [r6, #0]
 8008a86:	2000      	movs	r0, #0
 8008a88:	bd70      	pop	{r4, r5, r6, pc}
 8008a8a:	f000 fd2f 	bl	80094ec <__malloc_lock>
 8008a8e:	4a21      	ldr	r2, [pc, #132]	; (8008b14 <_malloc_r+0xac>)
 8008a90:	6814      	ldr	r4, [r2, #0]
 8008a92:	4621      	mov	r1, r4
 8008a94:	b991      	cbnz	r1, 8008abc <_malloc_r+0x54>
 8008a96:	4c20      	ldr	r4, [pc, #128]	; (8008b18 <_malloc_r+0xb0>)
 8008a98:	6823      	ldr	r3, [r4, #0]
 8008a9a:	b91b      	cbnz	r3, 8008aa4 <_malloc_r+0x3c>
 8008a9c:	4630      	mov	r0, r6
 8008a9e:	f000 fc57 	bl	8009350 <_sbrk_r>
 8008aa2:	6020      	str	r0, [r4, #0]
 8008aa4:	4629      	mov	r1, r5
 8008aa6:	4630      	mov	r0, r6
 8008aa8:	f000 fc52 	bl	8009350 <_sbrk_r>
 8008aac:	1c43      	adds	r3, r0, #1
 8008aae:	d124      	bne.n	8008afa <_malloc_r+0x92>
 8008ab0:	230c      	movs	r3, #12
 8008ab2:	6033      	str	r3, [r6, #0]
 8008ab4:	4630      	mov	r0, r6
 8008ab6:	f000 fd1a 	bl	80094ee <__malloc_unlock>
 8008aba:	e7e4      	b.n	8008a86 <_malloc_r+0x1e>
 8008abc:	680b      	ldr	r3, [r1, #0]
 8008abe:	1b5b      	subs	r3, r3, r5
 8008ac0:	d418      	bmi.n	8008af4 <_malloc_r+0x8c>
 8008ac2:	2b0b      	cmp	r3, #11
 8008ac4:	d90f      	bls.n	8008ae6 <_malloc_r+0x7e>
 8008ac6:	600b      	str	r3, [r1, #0]
 8008ac8:	50cd      	str	r5, [r1, r3]
 8008aca:	18cc      	adds	r4, r1, r3
 8008acc:	4630      	mov	r0, r6
 8008ace:	f000 fd0e 	bl	80094ee <__malloc_unlock>
 8008ad2:	f104 000b 	add.w	r0, r4, #11
 8008ad6:	1d23      	adds	r3, r4, #4
 8008ad8:	f020 0007 	bic.w	r0, r0, #7
 8008adc:	1ac3      	subs	r3, r0, r3
 8008ade:	d0d3      	beq.n	8008a88 <_malloc_r+0x20>
 8008ae0:	425a      	negs	r2, r3
 8008ae2:	50e2      	str	r2, [r4, r3]
 8008ae4:	e7d0      	b.n	8008a88 <_malloc_r+0x20>
 8008ae6:	428c      	cmp	r4, r1
 8008ae8:	684b      	ldr	r3, [r1, #4]
 8008aea:	bf16      	itet	ne
 8008aec:	6063      	strne	r3, [r4, #4]
 8008aee:	6013      	streq	r3, [r2, #0]
 8008af0:	460c      	movne	r4, r1
 8008af2:	e7eb      	b.n	8008acc <_malloc_r+0x64>
 8008af4:	460c      	mov	r4, r1
 8008af6:	6849      	ldr	r1, [r1, #4]
 8008af8:	e7cc      	b.n	8008a94 <_malloc_r+0x2c>
 8008afa:	1cc4      	adds	r4, r0, #3
 8008afc:	f024 0403 	bic.w	r4, r4, #3
 8008b00:	42a0      	cmp	r0, r4
 8008b02:	d005      	beq.n	8008b10 <_malloc_r+0xa8>
 8008b04:	1a21      	subs	r1, r4, r0
 8008b06:	4630      	mov	r0, r6
 8008b08:	f000 fc22 	bl	8009350 <_sbrk_r>
 8008b0c:	3001      	adds	r0, #1
 8008b0e:	d0cf      	beq.n	8008ab0 <_malloc_r+0x48>
 8008b10:	6025      	str	r5, [r4, #0]
 8008b12:	e7db      	b.n	8008acc <_malloc_r+0x64>
 8008b14:	20001fe4 	.word	0x20001fe4
 8008b18:	20001fe8 	.word	0x20001fe8

08008b1c <__ssputs_r>:
 8008b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b20:	688e      	ldr	r6, [r1, #8]
 8008b22:	429e      	cmp	r6, r3
 8008b24:	4682      	mov	sl, r0
 8008b26:	460c      	mov	r4, r1
 8008b28:	4690      	mov	r8, r2
 8008b2a:	4699      	mov	r9, r3
 8008b2c:	d837      	bhi.n	8008b9e <__ssputs_r+0x82>
 8008b2e:	898a      	ldrh	r2, [r1, #12]
 8008b30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008b34:	d031      	beq.n	8008b9a <__ssputs_r+0x7e>
 8008b36:	6825      	ldr	r5, [r4, #0]
 8008b38:	6909      	ldr	r1, [r1, #16]
 8008b3a:	1a6f      	subs	r7, r5, r1
 8008b3c:	6965      	ldr	r5, [r4, #20]
 8008b3e:	2302      	movs	r3, #2
 8008b40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b44:	fb95 f5f3 	sdiv	r5, r5, r3
 8008b48:	f109 0301 	add.w	r3, r9, #1
 8008b4c:	443b      	add	r3, r7
 8008b4e:	429d      	cmp	r5, r3
 8008b50:	bf38      	it	cc
 8008b52:	461d      	movcc	r5, r3
 8008b54:	0553      	lsls	r3, r2, #21
 8008b56:	d530      	bpl.n	8008bba <__ssputs_r+0x9e>
 8008b58:	4629      	mov	r1, r5
 8008b5a:	f7ff ff85 	bl	8008a68 <_malloc_r>
 8008b5e:	4606      	mov	r6, r0
 8008b60:	b950      	cbnz	r0, 8008b78 <__ssputs_r+0x5c>
 8008b62:	230c      	movs	r3, #12
 8008b64:	f8ca 3000 	str.w	r3, [sl]
 8008b68:	89a3      	ldrh	r3, [r4, #12]
 8008b6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b6e:	81a3      	strh	r3, [r4, #12]
 8008b70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b78:	463a      	mov	r2, r7
 8008b7a:	6921      	ldr	r1, [r4, #16]
 8008b7c:	f000 fc92 	bl	80094a4 <memcpy>
 8008b80:	89a3      	ldrh	r3, [r4, #12]
 8008b82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b8a:	81a3      	strh	r3, [r4, #12]
 8008b8c:	6126      	str	r6, [r4, #16]
 8008b8e:	6165      	str	r5, [r4, #20]
 8008b90:	443e      	add	r6, r7
 8008b92:	1bed      	subs	r5, r5, r7
 8008b94:	6026      	str	r6, [r4, #0]
 8008b96:	60a5      	str	r5, [r4, #8]
 8008b98:	464e      	mov	r6, r9
 8008b9a:	454e      	cmp	r6, r9
 8008b9c:	d900      	bls.n	8008ba0 <__ssputs_r+0x84>
 8008b9e:	464e      	mov	r6, r9
 8008ba0:	4632      	mov	r2, r6
 8008ba2:	4641      	mov	r1, r8
 8008ba4:	6820      	ldr	r0, [r4, #0]
 8008ba6:	f000 fc88 	bl	80094ba <memmove>
 8008baa:	68a3      	ldr	r3, [r4, #8]
 8008bac:	1b9b      	subs	r3, r3, r6
 8008bae:	60a3      	str	r3, [r4, #8]
 8008bb0:	6823      	ldr	r3, [r4, #0]
 8008bb2:	441e      	add	r6, r3
 8008bb4:	6026      	str	r6, [r4, #0]
 8008bb6:	2000      	movs	r0, #0
 8008bb8:	e7dc      	b.n	8008b74 <__ssputs_r+0x58>
 8008bba:	462a      	mov	r2, r5
 8008bbc:	f000 fc98 	bl	80094f0 <_realloc_r>
 8008bc0:	4606      	mov	r6, r0
 8008bc2:	2800      	cmp	r0, #0
 8008bc4:	d1e2      	bne.n	8008b8c <__ssputs_r+0x70>
 8008bc6:	6921      	ldr	r1, [r4, #16]
 8008bc8:	4650      	mov	r0, sl
 8008bca:	f7ff feff 	bl	80089cc <_free_r>
 8008bce:	e7c8      	b.n	8008b62 <__ssputs_r+0x46>

08008bd0 <_svfiprintf_r>:
 8008bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bd4:	461d      	mov	r5, r3
 8008bd6:	898b      	ldrh	r3, [r1, #12]
 8008bd8:	061f      	lsls	r7, r3, #24
 8008bda:	b09d      	sub	sp, #116	; 0x74
 8008bdc:	4680      	mov	r8, r0
 8008bde:	460c      	mov	r4, r1
 8008be0:	4616      	mov	r6, r2
 8008be2:	d50f      	bpl.n	8008c04 <_svfiprintf_r+0x34>
 8008be4:	690b      	ldr	r3, [r1, #16]
 8008be6:	b96b      	cbnz	r3, 8008c04 <_svfiprintf_r+0x34>
 8008be8:	2140      	movs	r1, #64	; 0x40
 8008bea:	f7ff ff3d 	bl	8008a68 <_malloc_r>
 8008bee:	6020      	str	r0, [r4, #0]
 8008bf0:	6120      	str	r0, [r4, #16]
 8008bf2:	b928      	cbnz	r0, 8008c00 <_svfiprintf_r+0x30>
 8008bf4:	230c      	movs	r3, #12
 8008bf6:	f8c8 3000 	str.w	r3, [r8]
 8008bfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bfe:	e0c8      	b.n	8008d92 <_svfiprintf_r+0x1c2>
 8008c00:	2340      	movs	r3, #64	; 0x40
 8008c02:	6163      	str	r3, [r4, #20]
 8008c04:	2300      	movs	r3, #0
 8008c06:	9309      	str	r3, [sp, #36]	; 0x24
 8008c08:	2320      	movs	r3, #32
 8008c0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c0e:	2330      	movs	r3, #48	; 0x30
 8008c10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c14:	9503      	str	r5, [sp, #12]
 8008c16:	f04f 0b01 	mov.w	fp, #1
 8008c1a:	4637      	mov	r7, r6
 8008c1c:	463d      	mov	r5, r7
 8008c1e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008c22:	b10b      	cbz	r3, 8008c28 <_svfiprintf_r+0x58>
 8008c24:	2b25      	cmp	r3, #37	; 0x25
 8008c26:	d13e      	bne.n	8008ca6 <_svfiprintf_r+0xd6>
 8008c28:	ebb7 0a06 	subs.w	sl, r7, r6
 8008c2c:	d00b      	beq.n	8008c46 <_svfiprintf_r+0x76>
 8008c2e:	4653      	mov	r3, sl
 8008c30:	4632      	mov	r2, r6
 8008c32:	4621      	mov	r1, r4
 8008c34:	4640      	mov	r0, r8
 8008c36:	f7ff ff71 	bl	8008b1c <__ssputs_r>
 8008c3a:	3001      	adds	r0, #1
 8008c3c:	f000 80a4 	beq.w	8008d88 <_svfiprintf_r+0x1b8>
 8008c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c42:	4453      	add	r3, sl
 8008c44:	9309      	str	r3, [sp, #36]	; 0x24
 8008c46:	783b      	ldrb	r3, [r7, #0]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	f000 809d 	beq.w	8008d88 <_svfiprintf_r+0x1b8>
 8008c4e:	2300      	movs	r3, #0
 8008c50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c58:	9304      	str	r3, [sp, #16]
 8008c5a:	9307      	str	r3, [sp, #28]
 8008c5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c60:	931a      	str	r3, [sp, #104]	; 0x68
 8008c62:	462f      	mov	r7, r5
 8008c64:	2205      	movs	r2, #5
 8008c66:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008c6a:	4850      	ldr	r0, [pc, #320]	; (8008dac <_svfiprintf_r+0x1dc>)
 8008c6c:	f7f7 fad8 	bl	8000220 <memchr>
 8008c70:	9b04      	ldr	r3, [sp, #16]
 8008c72:	b9d0      	cbnz	r0, 8008caa <_svfiprintf_r+0xda>
 8008c74:	06d9      	lsls	r1, r3, #27
 8008c76:	bf44      	itt	mi
 8008c78:	2220      	movmi	r2, #32
 8008c7a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008c7e:	071a      	lsls	r2, r3, #28
 8008c80:	bf44      	itt	mi
 8008c82:	222b      	movmi	r2, #43	; 0x2b
 8008c84:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008c88:	782a      	ldrb	r2, [r5, #0]
 8008c8a:	2a2a      	cmp	r2, #42	; 0x2a
 8008c8c:	d015      	beq.n	8008cba <_svfiprintf_r+0xea>
 8008c8e:	9a07      	ldr	r2, [sp, #28]
 8008c90:	462f      	mov	r7, r5
 8008c92:	2000      	movs	r0, #0
 8008c94:	250a      	movs	r5, #10
 8008c96:	4639      	mov	r1, r7
 8008c98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c9c:	3b30      	subs	r3, #48	; 0x30
 8008c9e:	2b09      	cmp	r3, #9
 8008ca0:	d94d      	bls.n	8008d3e <_svfiprintf_r+0x16e>
 8008ca2:	b1b8      	cbz	r0, 8008cd4 <_svfiprintf_r+0x104>
 8008ca4:	e00f      	b.n	8008cc6 <_svfiprintf_r+0xf6>
 8008ca6:	462f      	mov	r7, r5
 8008ca8:	e7b8      	b.n	8008c1c <_svfiprintf_r+0x4c>
 8008caa:	4a40      	ldr	r2, [pc, #256]	; (8008dac <_svfiprintf_r+0x1dc>)
 8008cac:	1a80      	subs	r0, r0, r2
 8008cae:	fa0b f000 	lsl.w	r0, fp, r0
 8008cb2:	4318      	orrs	r0, r3
 8008cb4:	9004      	str	r0, [sp, #16]
 8008cb6:	463d      	mov	r5, r7
 8008cb8:	e7d3      	b.n	8008c62 <_svfiprintf_r+0x92>
 8008cba:	9a03      	ldr	r2, [sp, #12]
 8008cbc:	1d11      	adds	r1, r2, #4
 8008cbe:	6812      	ldr	r2, [r2, #0]
 8008cc0:	9103      	str	r1, [sp, #12]
 8008cc2:	2a00      	cmp	r2, #0
 8008cc4:	db01      	blt.n	8008cca <_svfiprintf_r+0xfa>
 8008cc6:	9207      	str	r2, [sp, #28]
 8008cc8:	e004      	b.n	8008cd4 <_svfiprintf_r+0x104>
 8008cca:	4252      	negs	r2, r2
 8008ccc:	f043 0302 	orr.w	r3, r3, #2
 8008cd0:	9207      	str	r2, [sp, #28]
 8008cd2:	9304      	str	r3, [sp, #16]
 8008cd4:	783b      	ldrb	r3, [r7, #0]
 8008cd6:	2b2e      	cmp	r3, #46	; 0x2e
 8008cd8:	d10c      	bne.n	8008cf4 <_svfiprintf_r+0x124>
 8008cda:	787b      	ldrb	r3, [r7, #1]
 8008cdc:	2b2a      	cmp	r3, #42	; 0x2a
 8008cde:	d133      	bne.n	8008d48 <_svfiprintf_r+0x178>
 8008ce0:	9b03      	ldr	r3, [sp, #12]
 8008ce2:	1d1a      	adds	r2, r3, #4
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	9203      	str	r2, [sp, #12]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	bfb8      	it	lt
 8008cec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008cf0:	3702      	adds	r7, #2
 8008cf2:	9305      	str	r3, [sp, #20]
 8008cf4:	4d2e      	ldr	r5, [pc, #184]	; (8008db0 <_svfiprintf_r+0x1e0>)
 8008cf6:	7839      	ldrb	r1, [r7, #0]
 8008cf8:	2203      	movs	r2, #3
 8008cfa:	4628      	mov	r0, r5
 8008cfc:	f7f7 fa90 	bl	8000220 <memchr>
 8008d00:	b138      	cbz	r0, 8008d12 <_svfiprintf_r+0x142>
 8008d02:	2340      	movs	r3, #64	; 0x40
 8008d04:	1b40      	subs	r0, r0, r5
 8008d06:	fa03 f000 	lsl.w	r0, r3, r0
 8008d0a:	9b04      	ldr	r3, [sp, #16]
 8008d0c:	4303      	orrs	r3, r0
 8008d0e:	3701      	adds	r7, #1
 8008d10:	9304      	str	r3, [sp, #16]
 8008d12:	7839      	ldrb	r1, [r7, #0]
 8008d14:	4827      	ldr	r0, [pc, #156]	; (8008db4 <_svfiprintf_r+0x1e4>)
 8008d16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d1a:	2206      	movs	r2, #6
 8008d1c:	1c7e      	adds	r6, r7, #1
 8008d1e:	f7f7 fa7f 	bl	8000220 <memchr>
 8008d22:	2800      	cmp	r0, #0
 8008d24:	d038      	beq.n	8008d98 <_svfiprintf_r+0x1c8>
 8008d26:	4b24      	ldr	r3, [pc, #144]	; (8008db8 <_svfiprintf_r+0x1e8>)
 8008d28:	bb13      	cbnz	r3, 8008d70 <_svfiprintf_r+0x1a0>
 8008d2a:	9b03      	ldr	r3, [sp, #12]
 8008d2c:	3307      	adds	r3, #7
 8008d2e:	f023 0307 	bic.w	r3, r3, #7
 8008d32:	3308      	adds	r3, #8
 8008d34:	9303      	str	r3, [sp, #12]
 8008d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d38:	444b      	add	r3, r9
 8008d3a:	9309      	str	r3, [sp, #36]	; 0x24
 8008d3c:	e76d      	b.n	8008c1a <_svfiprintf_r+0x4a>
 8008d3e:	fb05 3202 	mla	r2, r5, r2, r3
 8008d42:	2001      	movs	r0, #1
 8008d44:	460f      	mov	r7, r1
 8008d46:	e7a6      	b.n	8008c96 <_svfiprintf_r+0xc6>
 8008d48:	2300      	movs	r3, #0
 8008d4a:	3701      	adds	r7, #1
 8008d4c:	9305      	str	r3, [sp, #20]
 8008d4e:	4619      	mov	r1, r3
 8008d50:	250a      	movs	r5, #10
 8008d52:	4638      	mov	r0, r7
 8008d54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d58:	3a30      	subs	r2, #48	; 0x30
 8008d5a:	2a09      	cmp	r2, #9
 8008d5c:	d903      	bls.n	8008d66 <_svfiprintf_r+0x196>
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d0c8      	beq.n	8008cf4 <_svfiprintf_r+0x124>
 8008d62:	9105      	str	r1, [sp, #20]
 8008d64:	e7c6      	b.n	8008cf4 <_svfiprintf_r+0x124>
 8008d66:	fb05 2101 	mla	r1, r5, r1, r2
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	4607      	mov	r7, r0
 8008d6e:	e7f0      	b.n	8008d52 <_svfiprintf_r+0x182>
 8008d70:	ab03      	add	r3, sp, #12
 8008d72:	9300      	str	r3, [sp, #0]
 8008d74:	4622      	mov	r2, r4
 8008d76:	4b11      	ldr	r3, [pc, #68]	; (8008dbc <_svfiprintf_r+0x1ec>)
 8008d78:	a904      	add	r1, sp, #16
 8008d7a:	4640      	mov	r0, r8
 8008d7c:	f3af 8000 	nop.w
 8008d80:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008d84:	4681      	mov	r9, r0
 8008d86:	d1d6      	bne.n	8008d36 <_svfiprintf_r+0x166>
 8008d88:	89a3      	ldrh	r3, [r4, #12]
 8008d8a:	065b      	lsls	r3, r3, #25
 8008d8c:	f53f af35 	bmi.w	8008bfa <_svfiprintf_r+0x2a>
 8008d90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d92:	b01d      	add	sp, #116	; 0x74
 8008d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d98:	ab03      	add	r3, sp, #12
 8008d9a:	9300      	str	r3, [sp, #0]
 8008d9c:	4622      	mov	r2, r4
 8008d9e:	4b07      	ldr	r3, [pc, #28]	; (8008dbc <_svfiprintf_r+0x1ec>)
 8008da0:	a904      	add	r1, sp, #16
 8008da2:	4640      	mov	r0, r8
 8008da4:	f000 f9c2 	bl	800912c <_printf_i>
 8008da8:	e7ea      	b.n	8008d80 <_svfiprintf_r+0x1b0>
 8008daa:	bf00      	nop
 8008dac:	080098f0 	.word	0x080098f0
 8008db0:	080098f6 	.word	0x080098f6
 8008db4:	080098fa 	.word	0x080098fa
 8008db8:	00000000 	.word	0x00000000
 8008dbc:	08008b1d 	.word	0x08008b1d

08008dc0 <__sfputc_r>:
 8008dc0:	6893      	ldr	r3, [r2, #8]
 8008dc2:	3b01      	subs	r3, #1
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	b410      	push	{r4}
 8008dc8:	6093      	str	r3, [r2, #8]
 8008dca:	da08      	bge.n	8008dde <__sfputc_r+0x1e>
 8008dcc:	6994      	ldr	r4, [r2, #24]
 8008dce:	42a3      	cmp	r3, r4
 8008dd0:	db01      	blt.n	8008dd6 <__sfputc_r+0x16>
 8008dd2:	290a      	cmp	r1, #10
 8008dd4:	d103      	bne.n	8008dde <__sfputc_r+0x1e>
 8008dd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008dda:	f7ff bb59 	b.w	8008490 <__swbuf_r>
 8008dde:	6813      	ldr	r3, [r2, #0]
 8008de0:	1c58      	adds	r0, r3, #1
 8008de2:	6010      	str	r0, [r2, #0]
 8008de4:	7019      	strb	r1, [r3, #0]
 8008de6:	4608      	mov	r0, r1
 8008de8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008dec:	4770      	bx	lr

08008dee <__sfputs_r>:
 8008dee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008df0:	4606      	mov	r6, r0
 8008df2:	460f      	mov	r7, r1
 8008df4:	4614      	mov	r4, r2
 8008df6:	18d5      	adds	r5, r2, r3
 8008df8:	42ac      	cmp	r4, r5
 8008dfa:	d101      	bne.n	8008e00 <__sfputs_r+0x12>
 8008dfc:	2000      	movs	r0, #0
 8008dfe:	e007      	b.n	8008e10 <__sfputs_r+0x22>
 8008e00:	463a      	mov	r2, r7
 8008e02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e06:	4630      	mov	r0, r6
 8008e08:	f7ff ffda 	bl	8008dc0 <__sfputc_r>
 8008e0c:	1c43      	adds	r3, r0, #1
 8008e0e:	d1f3      	bne.n	8008df8 <__sfputs_r+0xa>
 8008e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008e14 <_vfiprintf_r>:
 8008e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e18:	460c      	mov	r4, r1
 8008e1a:	b09d      	sub	sp, #116	; 0x74
 8008e1c:	4617      	mov	r7, r2
 8008e1e:	461d      	mov	r5, r3
 8008e20:	4606      	mov	r6, r0
 8008e22:	b118      	cbz	r0, 8008e2c <_vfiprintf_r+0x18>
 8008e24:	6983      	ldr	r3, [r0, #24]
 8008e26:	b90b      	cbnz	r3, 8008e2c <_vfiprintf_r+0x18>
 8008e28:	f7ff fce2 	bl	80087f0 <__sinit>
 8008e2c:	4b7c      	ldr	r3, [pc, #496]	; (8009020 <_vfiprintf_r+0x20c>)
 8008e2e:	429c      	cmp	r4, r3
 8008e30:	d158      	bne.n	8008ee4 <_vfiprintf_r+0xd0>
 8008e32:	6874      	ldr	r4, [r6, #4]
 8008e34:	89a3      	ldrh	r3, [r4, #12]
 8008e36:	0718      	lsls	r0, r3, #28
 8008e38:	d55e      	bpl.n	8008ef8 <_vfiprintf_r+0xe4>
 8008e3a:	6923      	ldr	r3, [r4, #16]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d05b      	beq.n	8008ef8 <_vfiprintf_r+0xe4>
 8008e40:	2300      	movs	r3, #0
 8008e42:	9309      	str	r3, [sp, #36]	; 0x24
 8008e44:	2320      	movs	r3, #32
 8008e46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e4a:	2330      	movs	r3, #48	; 0x30
 8008e4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e50:	9503      	str	r5, [sp, #12]
 8008e52:	f04f 0b01 	mov.w	fp, #1
 8008e56:	46b8      	mov	r8, r7
 8008e58:	4645      	mov	r5, r8
 8008e5a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008e5e:	b10b      	cbz	r3, 8008e64 <_vfiprintf_r+0x50>
 8008e60:	2b25      	cmp	r3, #37	; 0x25
 8008e62:	d154      	bne.n	8008f0e <_vfiprintf_r+0xfa>
 8008e64:	ebb8 0a07 	subs.w	sl, r8, r7
 8008e68:	d00b      	beq.n	8008e82 <_vfiprintf_r+0x6e>
 8008e6a:	4653      	mov	r3, sl
 8008e6c:	463a      	mov	r2, r7
 8008e6e:	4621      	mov	r1, r4
 8008e70:	4630      	mov	r0, r6
 8008e72:	f7ff ffbc 	bl	8008dee <__sfputs_r>
 8008e76:	3001      	adds	r0, #1
 8008e78:	f000 80c2 	beq.w	8009000 <_vfiprintf_r+0x1ec>
 8008e7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e7e:	4453      	add	r3, sl
 8008e80:	9309      	str	r3, [sp, #36]	; 0x24
 8008e82:	f898 3000 	ldrb.w	r3, [r8]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	f000 80ba 	beq.w	8009000 <_vfiprintf_r+0x1ec>
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e96:	9304      	str	r3, [sp, #16]
 8008e98:	9307      	str	r3, [sp, #28]
 8008e9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e9e:	931a      	str	r3, [sp, #104]	; 0x68
 8008ea0:	46a8      	mov	r8, r5
 8008ea2:	2205      	movs	r2, #5
 8008ea4:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008ea8:	485e      	ldr	r0, [pc, #376]	; (8009024 <_vfiprintf_r+0x210>)
 8008eaa:	f7f7 f9b9 	bl	8000220 <memchr>
 8008eae:	9b04      	ldr	r3, [sp, #16]
 8008eb0:	bb78      	cbnz	r0, 8008f12 <_vfiprintf_r+0xfe>
 8008eb2:	06d9      	lsls	r1, r3, #27
 8008eb4:	bf44      	itt	mi
 8008eb6:	2220      	movmi	r2, #32
 8008eb8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008ebc:	071a      	lsls	r2, r3, #28
 8008ebe:	bf44      	itt	mi
 8008ec0:	222b      	movmi	r2, #43	; 0x2b
 8008ec2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008ec6:	782a      	ldrb	r2, [r5, #0]
 8008ec8:	2a2a      	cmp	r2, #42	; 0x2a
 8008eca:	d02a      	beq.n	8008f22 <_vfiprintf_r+0x10e>
 8008ecc:	9a07      	ldr	r2, [sp, #28]
 8008ece:	46a8      	mov	r8, r5
 8008ed0:	2000      	movs	r0, #0
 8008ed2:	250a      	movs	r5, #10
 8008ed4:	4641      	mov	r1, r8
 8008ed6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008eda:	3b30      	subs	r3, #48	; 0x30
 8008edc:	2b09      	cmp	r3, #9
 8008ede:	d969      	bls.n	8008fb4 <_vfiprintf_r+0x1a0>
 8008ee0:	b360      	cbz	r0, 8008f3c <_vfiprintf_r+0x128>
 8008ee2:	e024      	b.n	8008f2e <_vfiprintf_r+0x11a>
 8008ee4:	4b50      	ldr	r3, [pc, #320]	; (8009028 <_vfiprintf_r+0x214>)
 8008ee6:	429c      	cmp	r4, r3
 8008ee8:	d101      	bne.n	8008eee <_vfiprintf_r+0xda>
 8008eea:	68b4      	ldr	r4, [r6, #8]
 8008eec:	e7a2      	b.n	8008e34 <_vfiprintf_r+0x20>
 8008eee:	4b4f      	ldr	r3, [pc, #316]	; (800902c <_vfiprintf_r+0x218>)
 8008ef0:	429c      	cmp	r4, r3
 8008ef2:	bf08      	it	eq
 8008ef4:	68f4      	ldreq	r4, [r6, #12]
 8008ef6:	e79d      	b.n	8008e34 <_vfiprintf_r+0x20>
 8008ef8:	4621      	mov	r1, r4
 8008efa:	4630      	mov	r0, r6
 8008efc:	f7ff fb1a 	bl	8008534 <__swsetup_r>
 8008f00:	2800      	cmp	r0, #0
 8008f02:	d09d      	beq.n	8008e40 <_vfiprintf_r+0x2c>
 8008f04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f08:	b01d      	add	sp, #116	; 0x74
 8008f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f0e:	46a8      	mov	r8, r5
 8008f10:	e7a2      	b.n	8008e58 <_vfiprintf_r+0x44>
 8008f12:	4a44      	ldr	r2, [pc, #272]	; (8009024 <_vfiprintf_r+0x210>)
 8008f14:	1a80      	subs	r0, r0, r2
 8008f16:	fa0b f000 	lsl.w	r0, fp, r0
 8008f1a:	4318      	orrs	r0, r3
 8008f1c:	9004      	str	r0, [sp, #16]
 8008f1e:	4645      	mov	r5, r8
 8008f20:	e7be      	b.n	8008ea0 <_vfiprintf_r+0x8c>
 8008f22:	9a03      	ldr	r2, [sp, #12]
 8008f24:	1d11      	adds	r1, r2, #4
 8008f26:	6812      	ldr	r2, [r2, #0]
 8008f28:	9103      	str	r1, [sp, #12]
 8008f2a:	2a00      	cmp	r2, #0
 8008f2c:	db01      	blt.n	8008f32 <_vfiprintf_r+0x11e>
 8008f2e:	9207      	str	r2, [sp, #28]
 8008f30:	e004      	b.n	8008f3c <_vfiprintf_r+0x128>
 8008f32:	4252      	negs	r2, r2
 8008f34:	f043 0302 	orr.w	r3, r3, #2
 8008f38:	9207      	str	r2, [sp, #28]
 8008f3a:	9304      	str	r3, [sp, #16]
 8008f3c:	f898 3000 	ldrb.w	r3, [r8]
 8008f40:	2b2e      	cmp	r3, #46	; 0x2e
 8008f42:	d10e      	bne.n	8008f62 <_vfiprintf_r+0x14e>
 8008f44:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008f48:	2b2a      	cmp	r3, #42	; 0x2a
 8008f4a:	d138      	bne.n	8008fbe <_vfiprintf_r+0x1aa>
 8008f4c:	9b03      	ldr	r3, [sp, #12]
 8008f4e:	1d1a      	adds	r2, r3, #4
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	9203      	str	r2, [sp, #12]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	bfb8      	it	lt
 8008f58:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008f5c:	f108 0802 	add.w	r8, r8, #2
 8008f60:	9305      	str	r3, [sp, #20]
 8008f62:	4d33      	ldr	r5, [pc, #204]	; (8009030 <_vfiprintf_r+0x21c>)
 8008f64:	f898 1000 	ldrb.w	r1, [r8]
 8008f68:	2203      	movs	r2, #3
 8008f6a:	4628      	mov	r0, r5
 8008f6c:	f7f7 f958 	bl	8000220 <memchr>
 8008f70:	b140      	cbz	r0, 8008f84 <_vfiprintf_r+0x170>
 8008f72:	2340      	movs	r3, #64	; 0x40
 8008f74:	1b40      	subs	r0, r0, r5
 8008f76:	fa03 f000 	lsl.w	r0, r3, r0
 8008f7a:	9b04      	ldr	r3, [sp, #16]
 8008f7c:	4303      	orrs	r3, r0
 8008f7e:	f108 0801 	add.w	r8, r8, #1
 8008f82:	9304      	str	r3, [sp, #16]
 8008f84:	f898 1000 	ldrb.w	r1, [r8]
 8008f88:	482a      	ldr	r0, [pc, #168]	; (8009034 <_vfiprintf_r+0x220>)
 8008f8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f8e:	2206      	movs	r2, #6
 8008f90:	f108 0701 	add.w	r7, r8, #1
 8008f94:	f7f7 f944 	bl	8000220 <memchr>
 8008f98:	2800      	cmp	r0, #0
 8008f9a:	d037      	beq.n	800900c <_vfiprintf_r+0x1f8>
 8008f9c:	4b26      	ldr	r3, [pc, #152]	; (8009038 <_vfiprintf_r+0x224>)
 8008f9e:	bb1b      	cbnz	r3, 8008fe8 <_vfiprintf_r+0x1d4>
 8008fa0:	9b03      	ldr	r3, [sp, #12]
 8008fa2:	3307      	adds	r3, #7
 8008fa4:	f023 0307 	bic.w	r3, r3, #7
 8008fa8:	3308      	adds	r3, #8
 8008faa:	9303      	str	r3, [sp, #12]
 8008fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fae:	444b      	add	r3, r9
 8008fb0:	9309      	str	r3, [sp, #36]	; 0x24
 8008fb2:	e750      	b.n	8008e56 <_vfiprintf_r+0x42>
 8008fb4:	fb05 3202 	mla	r2, r5, r2, r3
 8008fb8:	2001      	movs	r0, #1
 8008fba:	4688      	mov	r8, r1
 8008fbc:	e78a      	b.n	8008ed4 <_vfiprintf_r+0xc0>
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	f108 0801 	add.w	r8, r8, #1
 8008fc4:	9305      	str	r3, [sp, #20]
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	250a      	movs	r5, #10
 8008fca:	4640      	mov	r0, r8
 8008fcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fd0:	3a30      	subs	r2, #48	; 0x30
 8008fd2:	2a09      	cmp	r2, #9
 8008fd4:	d903      	bls.n	8008fde <_vfiprintf_r+0x1ca>
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d0c3      	beq.n	8008f62 <_vfiprintf_r+0x14e>
 8008fda:	9105      	str	r1, [sp, #20]
 8008fdc:	e7c1      	b.n	8008f62 <_vfiprintf_r+0x14e>
 8008fde:	fb05 2101 	mla	r1, r5, r1, r2
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	4680      	mov	r8, r0
 8008fe6:	e7f0      	b.n	8008fca <_vfiprintf_r+0x1b6>
 8008fe8:	ab03      	add	r3, sp, #12
 8008fea:	9300      	str	r3, [sp, #0]
 8008fec:	4622      	mov	r2, r4
 8008fee:	4b13      	ldr	r3, [pc, #76]	; (800903c <_vfiprintf_r+0x228>)
 8008ff0:	a904      	add	r1, sp, #16
 8008ff2:	4630      	mov	r0, r6
 8008ff4:	f3af 8000 	nop.w
 8008ff8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008ffc:	4681      	mov	r9, r0
 8008ffe:	d1d5      	bne.n	8008fac <_vfiprintf_r+0x198>
 8009000:	89a3      	ldrh	r3, [r4, #12]
 8009002:	065b      	lsls	r3, r3, #25
 8009004:	f53f af7e 	bmi.w	8008f04 <_vfiprintf_r+0xf0>
 8009008:	9809      	ldr	r0, [sp, #36]	; 0x24
 800900a:	e77d      	b.n	8008f08 <_vfiprintf_r+0xf4>
 800900c:	ab03      	add	r3, sp, #12
 800900e:	9300      	str	r3, [sp, #0]
 8009010:	4622      	mov	r2, r4
 8009012:	4b0a      	ldr	r3, [pc, #40]	; (800903c <_vfiprintf_r+0x228>)
 8009014:	a904      	add	r1, sp, #16
 8009016:	4630      	mov	r0, r6
 8009018:	f000 f888 	bl	800912c <_printf_i>
 800901c:	e7ec      	b.n	8008ff8 <_vfiprintf_r+0x1e4>
 800901e:	bf00      	nop
 8009020:	080098b0 	.word	0x080098b0
 8009024:	080098f0 	.word	0x080098f0
 8009028:	080098d0 	.word	0x080098d0
 800902c:	08009890 	.word	0x08009890
 8009030:	080098f6 	.word	0x080098f6
 8009034:	080098fa 	.word	0x080098fa
 8009038:	00000000 	.word	0x00000000
 800903c:	08008def 	.word	0x08008def

08009040 <_printf_common>:
 8009040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009044:	4691      	mov	r9, r2
 8009046:	461f      	mov	r7, r3
 8009048:	688a      	ldr	r2, [r1, #8]
 800904a:	690b      	ldr	r3, [r1, #16]
 800904c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009050:	4293      	cmp	r3, r2
 8009052:	bfb8      	it	lt
 8009054:	4613      	movlt	r3, r2
 8009056:	f8c9 3000 	str.w	r3, [r9]
 800905a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800905e:	4606      	mov	r6, r0
 8009060:	460c      	mov	r4, r1
 8009062:	b112      	cbz	r2, 800906a <_printf_common+0x2a>
 8009064:	3301      	adds	r3, #1
 8009066:	f8c9 3000 	str.w	r3, [r9]
 800906a:	6823      	ldr	r3, [r4, #0]
 800906c:	0699      	lsls	r1, r3, #26
 800906e:	bf42      	ittt	mi
 8009070:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009074:	3302      	addmi	r3, #2
 8009076:	f8c9 3000 	strmi.w	r3, [r9]
 800907a:	6825      	ldr	r5, [r4, #0]
 800907c:	f015 0506 	ands.w	r5, r5, #6
 8009080:	d107      	bne.n	8009092 <_printf_common+0x52>
 8009082:	f104 0a19 	add.w	sl, r4, #25
 8009086:	68e3      	ldr	r3, [r4, #12]
 8009088:	f8d9 2000 	ldr.w	r2, [r9]
 800908c:	1a9b      	subs	r3, r3, r2
 800908e:	42ab      	cmp	r3, r5
 8009090:	dc28      	bgt.n	80090e4 <_printf_common+0xa4>
 8009092:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009096:	6822      	ldr	r2, [r4, #0]
 8009098:	3300      	adds	r3, #0
 800909a:	bf18      	it	ne
 800909c:	2301      	movne	r3, #1
 800909e:	0692      	lsls	r2, r2, #26
 80090a0:	d42d      	bmi.n	80090fe <_printf_common+0xbe>
 80090a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80090a6:	4639      	mov	r1, r7
 80090a8:	4630      	mov	r0, r6
 80090aa:	47c0      	blx	r8
 80090ac:	3001      	adds	r0, #1
 80090ae:	d020      	beq.n	80090f2 <_printf_common+0xb2>
 80090b0:	6823      	ldr	r3, [r4, #0]
 80090b2:	68e5      	ldr	r5, [r4, #12]
 80090b4:	f8d9 2000 	ldr.w	r2, [r9]
 80090b8:	f003 0306 	and.w	r3, r3, #6
 80090bc:	2b04      	cmp	r3, #4
 80090be:	bf08      	it	eq
 80090c0:	1aad      	subeq	r5, r5, r2
 80090c2:	68a3      	ldr	r3, [r4, #8]
 80090c4:	6922      	ldr	r2, [r4, #16]
 80090c6:	bf0c      	ite	eq
 80090c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090cc:	2500      	movne	r5, #0
 80090ce:	4293      	cmp	r3, r2
 80090d0:	bfc4      	itt	gt
 80090d2:	1a9b      	subgt	r3, r3, r2
 80090d4:	18ed      	addgt	r5, r5, r3
 80090d6:	f04f 0900 	mov.w	r9, #0
 80090da:	341a      	adds	r4, #26
 80090dc:	454d      	cmp	r5, r9
 80090de:	d11a      	bne.n	8009116 <_printf_common+0xd6>
 80090e0:	2000      	movs	r0, #0
 80090e2:	e008      	b.n	80090f6 <_printf_common+0xb6>
 80090e4:	2301      	movs	r3, #1
 80090e6:	4652      	mov	r2, sl
 80090e8:	4639      	mov	r1, r7
 80090ea:	4630      	mov	r0, r6
 80090ec:	47c0      	blx	r8
 80090ee:	3001      	adds	r0, #1
 80090f0:	d103      	bne.n	80090fa <_printf_common+0xba>
 80090f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090fa:	3501      	adds	r5, #1
 80090fc:	e7c3      	b.n	8009086 <_printf_common+0x46>
 80090fe:	18e1      	adds	r1, r4, r3
 8009100:	1c5a      	adds	r2, r3, #1
 8009102:	2030      	movs	r0, #48	; 0x30
 8009104:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009108:	4422      	add	r2, r4
 800910a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800910e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009112:	3302      	adds	r3, #2
 8009114:	e7c5      	b.n	80090a2 <_printf_common+0x62>
 8009116:	2301      	movs	r3, #1
 8009118:	4622      	mov	r2, r4
 800911a:	4639      	mov	r1, r7
 800911c:	4630      	mov	r0, r6
 800911e:	47c0      	blx	r8
 8009120:	3001      	adds	r0, #1
 8009122:	d0e6      	beq.n	80090f2 <_printf_common+0xb2>
 8009124:	f109 0901 	add.w	r9, r9, #1
 8009128:	e7d8      	b.n	80090dc <_printf_common+0x9c>
	...

0800912c <_printf_i>:
 800912c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009130:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009134:	460c      	mov	r4, r1
 8009136:	7e09      	ldrb	r1, [r1, #24]
 8009138:	b085      	sub	sp, #20
 800913a:	296e      	cmp	r1, #110	; 0x6e
 800913c:	4617      	mov	r7, r2
 800913e:	4606      	mov	r6, r0
 8009140:	4698      	mov	r8, r3
 8009142:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009144:	f000 80b3 	beq.w	80092ae <_printf_i+0x182>
 8009148:	d822      	bhi.n	8009190 <_printf_i+0x64>
 800914a:	2963      	cmp	r1, #99	; 0x63
 800914c:	d036      	beq.n	80091bc <_printf_i+0x90>
 800914e:	d80a      	bhi.n	8009166 <_printf_i+0x3a>
 8009150:	2900      	cmp	r1, #0
 8009152:	f000 80b9 	beq.w	80092c8 <_printf_i+0x19c>
 8009156:	2958      	cmp	r1, #88	; 0x58
 8009158:	f000 8083 	beq.w	8009262 <_printf_i+0x136>
 800915c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009160:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009164:	e032      	b.n	80091cc <_printf_i+0xa0>
 8009166:	2964      	cmp	r1, #100	; 0x64
 8009168:	d001      	beq.n	800916e <_printf_i+0x42>
 800916a:	2969      	cmp	r1, #105	; 0x69
 800916c:	d1f6      	bne.n	800915c <_printf_i+0x30>
 800916e:	6820      	ldr	r0, [r4, #0]
 8009170:	6813      	ldr	r3, [r2, #0]
 8009172:	0605      	lsls	r5, r0, #24
 8009174:	f103 0104 	add.w	r1, r3, #4
 8009178:	d52a      	bpl.n	80091d0 <_printf_i+0xa4>
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	6011      	str	r1, [r2, #0]
 800917e:	2b00      	cmp	r3, #0
 8009180:	da03      	bge.n	800918a <_printf_i+0x5e>
 8009182:	222d      	movs	r2, #45	; 0x2d
 8009184:	425b      	negs	r3, r3
 8009186:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800918a:	486f      	ldr	r0, [pc, #444]	; (8009348 <_printf_i+0x21c>)
 800918c:	220a      	movs	r2, #10
 800918e:	e039      	b.n	8009204 <_printf_i+0xd8>
 8009190:	2973      	cmp	r1, #115	; 0x73
 8009192:	f000 809d 	beq.w	80092d0 <_printf_i+0x1a4>
 8009196:	d808      	bhi.n	80091aa <_printf_i+0x7e>
 8009198:	296f      	cmp	r1, #111	; 0x6f
 800919a:	d020      	beq.n	80091de <_printf_i+0xb2>
 800919c:	2970      	cmp	r1, #112	; 0x70
 800919e:	d1dd      	bne.n	800915c <_printf_i+0x30>
 80091a0:	6823      	ldr	r3, [r4, #0]
 80091a2:	f043 0320 	orr.w	r3, r3, #32
 80091a6:	6023      	str	r3, [r4, #0]
 80091a8:	e003      	b.n	80091b2 <_printf_i+0x86>
 80091aa:	2975      	cmp	r1, #117	; 0x75
 80091ac:	d017      	beq.n	80091de <_printf_i+0xb2>
 80091ae:	2978      	cmp	r1, #120	; 0x78
 80091b0:	d1d4      	bne.n	800915c <_printf_i+0x30>
 80091b2:	2378      	movs	r3, #120	; 0x78
 80091b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80091b8:	4864      	ldr	r0, [pc, #400]	; (800934c <_printf_i+0x220>)
 80091ba:	e055      	b.n	8009268 <_printf_i+0x13c>
 80091bc:	6813      	ldr	r3, [r2, #0]
 80091be:	1d19      	adds	r1, r3, #4
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	6011      	str	r1, [r2, #0]
 80091c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80091cc:	2301      	movs	r3, #1
 80091ce:	e08c      	b.n	80092ea <_printf_i+0x1be>
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	6011      	str	r1, [r2, #0]
 80091d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80091d8:	bf18      	it	ne
 80091da:	b21b      	sxthne	r3, r3
 80091dc:	e7cf      	b.n	800917e <_printf_i+0x52>
 80091de:	6813      	ldr	r3, [r2, #0]
 80091e0:	6825      	ldr	r5, [r4, #0]
 80091e2:	1d18      	adds	r0, r3, #4
 80091e4:	6010      	str	r0, [r2, #0]
 80091e6:	0628      	lsls	r0, r5, #24
 80091e8:	d501      	bpl.n	80091ee <_printf_i+0xc2>
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	e002      	b.n	80091f4 <_printf_i+0xc8>
 80091ee:	0668      	lsls	r0, r5, #25
 80091f0:	d5fb      	bpl.n	80091ea <_printf_i+0xbe>
 80091f2:	881b      	ldrh	r3, [r3, #0]
 80091f4:	4854      	ldr	r0, [pc, #336]	; (8009348 <_printf_i+0x21c>)
 80091f6:	296f      	cmp	r1, #111	; 0x6f
 80091f8:	bf14      	ite	ne
 80091fa:	220a      	movne	r2, #10
 80091fc:	2208      	moveq	r2, #8
 80091fe:	2100      	movs	r1, #0
 8009200:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009204:	6865      	ldr	r5, [r4, #4]
 8009206:	60a5      	str	r5, [r4, #8]
 8009208:	2d00      	cmp	r5, #0
 800920a:	f2c0 8095 	blt.w	8009338 <_printf_i+0x20c>
 800920e:	6821      	ldr	r1, [r4, #0]
 8009210:	f021 0104 	bic.w	r1, r1, #4
 8009214:	6021      	str	r1, [r4, #0]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d13d      	bne.n	8009296 <_printf_i+0x16a>
 800921a:	2d00      	cmp	r5, #0
 800921c:	f040 808e 	bne.w	800933c <_printf_i+0x210>
 8009220:	4665      	mov	r5, ip
 8009222:	2a08      	cmp	r2, #8
 8009224:	d10b      	bne.n	800923e <_printf_i+0x112>
 8009226:	6823      	ldr	r3, [r4, #0]
 8009228:	07db      	lsls	r3, r3, #31
 800922a:	d508      	bpl.n	800923e <_printf_i+0x112>
 800922c:	6923      	ldr	r3, [r4, #16]
 800922e:	6862      	ldr	r2, [r4, #4]
 8009230:	429a      	cmp	r2, r3
 8009232:	bfde      	ittt	le
 8009234:	2330      	movle	r3, #48	; 0x30
 8009236:	f805 3c01 	strble.w	r3, [r5, #-1]
 800923a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800923e:	ebac 0305 	sub.w	r3, ip, r5
 8009242:	6123      	str	r3, [r4, #16]
 8009244:	f8cd 8000 	str.w	r8, [sp]
 8009248:	463b      	mov	r3, r7
 800924a:	aa03      	add	r2, sp, #12
 800924c:	4621      	mov	r1, r4
 800924e:	4630      	mov	r0, r6
 8009250:	f7ff fef6 	bl	8009040 <_printf_common>
 8009254:	3001      	adds	r0, #1
 8009256:	d14d      	bne.n	80092f4 <_printf_i+0x1c8>
 8009258:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800925c:	b005      	add	sp, #20
 800925e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009262:	4839      	ldr	r0, [pc, #228]	; (8009348 <_printf_i+0x21c>)
 8009264:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009268:	6813      	ldr	r3, [r2, #0]
 800926a:	6821      	ldr	r1, [r4, #0]
 800926c:	1d1d      	adds	r5, r3, #4
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	6015      	str	r5, [r2, #0]
 8009272:	060a      	lsls	r2, r1, #24
 8009274:	d50b      	bpl.n	800928e <_printf_i+0x162>
 8009276:	07ca      	lsls	r2, r1, #31
 8009278:	bf44      	itt	mi
 800927a:	f041 0120 	orrmi.w	r1, r1, #32
 800927e:	6021      	strmi	r1, [r4, #0]
 8009280:	b91b      	cbnz	r3, 800928a <_printf_i+0x15e>
 8009282:	6822      	ldr	r2, [r4, #0]
 8009284:	f022 0220 	bic.w	r2, r2, #32
 8009288:	6022      	str	r2, [r4, #0]
 800928a:	2210      	movs	r2, #16
 800928c:	e7b7      	b.n	80091fe <_printf_i+0xd2>
 800928e:	064d      	lsls	r5, r1, #25
 8009290:	bf48      	it	mi
 8009292:	b29b      	uxthmi	r3, r3
 8009294:	e7ef      	b.n	8009276 <_printf_i+0x14a>
 8009296:	4665      	mov	r5, ip
 8009298:	fbb3 f1f2 	udiv	r1, r3, r2
 800929c:	fb02 3311 	mls	r3, r2, r1, r3
 80092a0:	5cc3      	ldrb	r3, [r0, r3]
 80092a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80092a6:	460b      	mov	r3, r1
 80092a8:	2900      	cmp	r1, #0
 80092aa:	d1f5      	bne.n	8009298 <_printf_i+0x16c>
 80092ac:	e7b9      	b.n	8009222 <_printf_i+0xf6>
 80092ae:	6813      	ldr	r3, [r2, #0]
 80092b0:	6825      	ldr	r5, [r4, #0]
 80092b2:	6961      	ldr	r1, [r4, #20]
 80092b4:	1d18      	adds	r0, r3, #4
 80092b6:	6010      	str	r0, [r2, #0]
 80092b8:	0628      	lsls	r0, r5, #24
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	d501      	bpl.n	80092c2 <_printf_i+0x196>
 80092be:	6019      	str	r1, [r3, #0]
 80092c0:	e002      	b.n	80092c8 <_printf_i+0x19c>
 80092c2:	066a      	lsls	r2, r5, #25
 80092c4:	d5fb      	bpl.n	80092be <_printf_i+0x192>
 80092c6:	8019      	strh	r1, [r3, #0]
 80092c8:	2300      	movs	r3, #0
 80092ca:	6123      	str	r3, [r4, #16]
 80092cc:	4665      	mov	r5, ip
 80092ce:	e7b9      	b.n	8009244 <_printf_i+0x118>
 80092d0:	6813      	ldr	r3, [r2, #0]
 80092d2:	1d19      	adds	r1, r3, #4
 80092d4:	6011      	str	r1, [r2, #0]
 80092d6:	681d      	ldr	r5, [r3, #0]
 80092d8:	6862      	ldr	r2, [r4, #4]
 80092da:	2100      	movs	r1, #0
 80092dc:	4628      	mov	r0, r5
 80092de:	f7f6 ff9f 	bl	8000220 <memchr>
 80092e2:	b108      	cbz	r0, 80092e8 <_printf_i+0x1bc>
 80092e4:	1b40      	subs	r0, r0, r5
 80092e6:	6060      	str	r0, [r4, #4]
 80092e8:	6863      	ldr	r3, [r4, #4]
 80092ea:	6123      	str	r3, [r4, #16]
 80092ec:	2300      	movs	r3, #0
 80092ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092f2:	e7a7      	b.n	8009244 <_printf_i+0x118>
 80092f4:	6923      	ldr	r3, [r4, #16]
 80092f6:	462a      	mov	r2, r5
 80092f8:	4639      	mov	r1, r7
 80092fa:	4630      	mov	r0, r6
 80092fc:	47c0      	blx	r8
 80092fe:	3001      	adds	r0, #1
 8009300:	d0aa      	beq.n	8009258 <_printf_i+0x12c>
 8009302:	6823      	ldr	r3, [r4, #0]
 8009304:	079b      	lsls	r3, r3, #30
 8009306:	d413      	bmi.n	8009330 <_printf_i+0x204>
 8009308:	68e0      	ldr	r0, [r4, #12]
 800930a:	9b03      	ldr	r3, [sp, #12]
 800930c:	4298      	cmp	r0, r3
 800930e:	bfb8      	it	lt
 8009310:	4618      	movlt	r0, r3
 8009312:	e7a3      	b.n	800925c <_printf_i+0x130>
 8009314:	2301      	movs	r3, #1
 8009316:	464a      	mov	r2, r9
 8009318:	4639      	mov	r1, r7
 800931a:	4630      	mov	r0, r6
 800931c:	47c0      	blx	r8
 800931e:	3001      	adds	r0, #1
 8009320:	d09a      	beq.n	8009258 <_printf_i+0x12c>
 8009322:	3501      	adds	r5, #1
 8009324:	68e3      	ldr	r3, [r4, #12]
 8009326:	9a03      	ldr	r2, [sp, #12]
 8009328:	1a9b      	subs	r3, r3, r2
 800932a:	42ab      	cmp	r3, r5
 800932c:	dcf2      	bgt.n	8009314 <_printf_i+0x1e8>
 800932e:	e7eb      	b.n	8009308 <_printf_i+0x1dc>
 8009330:	2500      	movs	r5, #0
 8009332:	f104 0919 	add.w	r9, r4, #25
 8009336:	e7f5      	b.n	8009324 <_printf_i+0x1f8>
 8009338:	2b00      	cmp	r3, #0
 800933a:	d1ac      	bne.n	8009296 <_printf_i+0x16a>
 800933c:	7803      	ldrb	r3, [r0, #0]
 800933e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009342:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009346:	e76c      	b.n	8009222 <_printf_i+0xf6>
 8009348:	08009901 	.word	0x08009901
 800934c:	08009912 	.word	0x08009912

08009350 <_sbrk_r>:
 8009350:	b538      	push	{r3, r4, r5, lr}
 8009352:	4c06      	ldr	r4, [pc, #24]	; (800936c <_sbrk_r+0x1c>)
 8009354:	2300      	movs	r3, #0
 8009356:	4605      	mov	r5, r0
 8009358:	4608      	mov	r0, r1
 800935a:	6023      	str	r3, [r4, #0]
 800935c:	f7f8 fa98 	bl	8001890 <_sbrk>
 8009360:	1c43      	adds	r3, r0, #1
 8009362:	d102      	bne.n	800936a <_sbrk_r+0x1a>
 8009364:	6823      	ldr	r3, [r4, #0]
 8009366:	b103      	cbz	r3, 800936a <_sbrk_r+0x1a>
 8009368:	602b      	str	r3, [r5, #0]
 800936a:	bd38      	pop	{r3, r4, r5, pc}
 800936c:	20002414 	.word	0x20002414

08009370 <__sread>:
 8009370:	b510      	push	{r4, lr}
 8009372:	460c      	mov	r4, r1
 8009374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009378:	f000 f8e0 	bl	800953c <_read_r>
 800937c:	2800      	cmp	r0, #0
 800937e:	bfab      	itete	ge
 8009380:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009382:	89a3      	ldrhlt	r3, [r4, #12]
 8009384:	181b      	addge	r3, r3, r0
 8009386:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800938a:	bfac      	ite	ge
 800938c:	6563      	strge	r3, [r4, #84]	; 0x54
 800938e:	81a3      	strhlt	r3, [r4, #12]
 8009390:	bd10      	pop	{r4, pc}

08009392 <__swrite>:
 8009392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009396:	461f      	mov	r7, r3
 8009398:	898b      	ldrh	r3, [r1, #12]
 800939a:	05db      	lsls	r3, r3, #23
 800939c:	4605      	mov	r5, r0
 800939e:	460c      	mov	r4, r1
 80093a0:	4616      	mov	r6, r2
 80093a2:	d505      	bpl.n	80093b0 <__swrite+0x1e>
 80093a4:	2302      	movs	r3, #2
 80093a6:	2200      	movs	r2, #0
 80093a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093ac:	f000 f868 	bl	8009480 <_lseek_r>
 80093b0:	89a3      	ldrh	r3, [r4, #12]
 80093b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80093ba:	81a3      	strh	r3, [r4, #12]
 80093bc:	4632      	mov	r2, r6
 80093be:	463b      	mov	r3, r7
 80093c0:	4628      	mov	r0, r5
 80093c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093c6:	f000 b817 	b.w	80093f8 <_write_r>

080093ca <__sseek>:
 80093ca:	b510      	push	{r4, lr}
 80093cc:	460c      	mov	r4, r1
 80093ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093d2:	f000 f855 	bl	8009480 <_lseek_r>
 80093d6:	1c43      	adds	r3, r0, #1
 80093d8:	89a3      	ldrh	r3, [r4, #12]
 80093da:	bf15      	itete	ne
 80093dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80093de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80093e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80093e6:	81a3      	strheq	r3, [r4, #12]
 80093e8:	bf18      	it	ne
 80093ea:	81a3      	strhne	r3, [r4, #12]
 80093ec:	bd10      	pop	{r4, pc}

080093ee <__sclose>:
 80093ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093f2:	f000 b813 	b.w	800941c <_close_r>
	...

080093f8 <_write_r>:
 80093f8:	b538      	push	{r3, r4, r5, lr}
 80093fa:	4c07      	ldr	r4, [pc, #28]	; (8009418 <_write_r+0x20>)
 80093fc:	4605      	mov	r5, r0
 80093fe:	4608      	mov	r0, r1
 8009400:	4611      	mov	r1, r2
 8009402:	2200      	movs	r2, #0
 8009404:	6022      	str	r2, [r4, #0]
 8009406:	461a      	mov	r2, r3
 8009408:	f7f7 fdb5 	bl	8000f76 <_write>
 800940c:	1c43      	adds	r3, r0, #1
 800940e:	d102      	bne.n	8009416 <_write_r+0x1e>
 8009410:	6823      	ldr	r3, [r4, #0]
 8009412:	b103      	cbz	r3, 8009416 <_write_r+0x1e>
 8009414:	602b      	str	r3, [r5, #0]
 8009416:	bd38      	pop	{r3, r4, r5, pc}
 8009418:	20002414 	.word	0x20002414

0800941c <_close_r>:
 800941c:	b538      	push	{r3, r4, r5, lr}
 800941e:	4c06      	ldr	r4, [pc, #24]	; (8009438 <_close_r+0x1c>)
 8009420:	2300      	movs	r3, #0
 8009422:	4605      	mov	r5, r0
 8009424:	4608      	mov	r0, r1
 8009426:	6023      	str	r3, [r4, #0]
 8009428:	f7f8 f9fd 	bl	8001826 <_close>
 800942c:	1c43      	adds	r3, r0, #1
 800942e:	d102      	bne.n	8009436 <_close_r+0x1a>
 8009430:	6823      	ldr	r3, [r4, #0]
 8009432:	b103      	cbz	r3, 8009436 <_close_r+0x1a>
 8009434:	602b      	str	r3, [r5, #0]
 8009436:	bd38      	pop	{r3, r4, r5, pc}
 8009438:	20002414 	.word	0x20002414

0800943c <_fstat_r>:
 800943c:	b538      	push	{r3, r4, r5, lr}
 800943e:	4c07      	ldr	r4, [pc, #28]	; (800945c <_fstat_r+0x20>)
 8009440:	2300      	movs	r3, #0
 8009442:	4605      	mov	r5, r0
 8009444:	4608      	mov	r0, r1
 8009446:	4611      	mov	r1, r2
 8009448:	6023      	str	r3, [r4, #0]
 800944a:	f7f8 f9f8 	bl	800183e <_fstat>
 800944e:	1c43      	adds	r3, r0, #1
 8009450:	d102      	bne.n	8009458 <_fstat_r+0x1c>
 8009452:	6823      	ldr	r3, [r4, #0]
 8009454:	b103      	cbz	r3, 8009458 <_fstat_r+0x1c>
 8009456:	602b      	str	r3, [r5, #0]
 8009458:	bd38      	pop	{r3, r4, r5, pc}
 800945a:	bf00      	nop
 800945c:	20002414 	.word	0x20002414

08009460 <_isatty_r>:
 8009460:	b538      	push	{r3, r4, r5, lr}
 8009462:	4c06      	ldr	r4, [pc, #24]	; (800947c <_isatty_r+0x1c>)
 8009464:	2300      	movs	r3, #0
 8009466:	4605      	mov	r5, r0
 8009468:	4608      	mov	r0, r1
 800946a:	6023      	str	r3, [r4, #0]
 800946c:	f7f8 f9f7 	bl	800185e <_isatty>
 8009470:	1c43      	adds	r3, r0, #1
 8009472:	d102      	bne.n	800947a <_isatty_r+0x1a>
 8009474:	6823      	ldr	r3, [r4, #0]
 8009476:	b103      	cbz	r3, 800947a <_isatty_r+0x1a>
 8009478:	602b      	str	r3, [r5, #0]
 800947a:	bd38      	pop	{r3, r4, r5, pc}
 800947c:	20002414 	.word	0x20002414

08009480 <_lseek_r>:
 8009480:	b538      	push	{r3, r4, r5, lr}
 8009482:	4c07      	ldr	r4, [pc, #28]	; (80094a0 <_lseek_r+0x20>)
 8009484:	4605      	mov	r5, r0
 8009486:	4608      	mov	r0, r1
 8009488:	4611      	mov	r1, r2
 800948a:	2200      	movs	r2, #0
 800948c:	6022      	str	r2, [r4, #0]
 800948e:	461a      	mov	r2, r3
 8009490:	f7f8 f9f0 	bl	8001874 <_lseek>
 8009494:	1c43      	adds	r3, r0, #1
 8009496:	d102      	bne.n	800949e <_lseek_r+0x1e>
 8009498:	6823      	ldr	r3, [r4, #0]
 800949a:	b103      	cbz	r3, 800949e <_lseek_r+0x1e>
 800949c:	602b      	str	r3, [r5, #0]
 800949e:	bd38      	pop	{r3, r4, r5, pc}
 80094a0:	20002414 	.word	0x20002414

080094a4 <memcpy>:
 80094a4:	b510      	push	{r4, lr}
 80094a6:	1e43      	subs	r3, r0, #1
 80094a8:	440a      	add	r2, r1
 80094aa:	4291      	cmp	r1, r2
 80094ac:	d100      	bne.n	80094b0 <memcpy+0xc>
 80094ae:	bd10      	pop	{r4, pc}
 80094b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094b8:	e7f7      	b.n	80094aa <memcpy+0x6>

080094ba <memmove>:
 80094ba:	4288      	cmp	r0, r1
 80094bc:	b510      	push	{r4, lr}
 80094be:	eb01 0302 	add.w	r3, r1, r2
 80094c2:	d807      	bhi.n	80094d4 <memmove+0x1a>
 80094c4:	1e42      	subs	r2, r0, #1
 80094c6:	4299      	cmp	r1, r3
 80094c8:	d00a      	beq.n	80094e0 <memmove+0x26>
 80094ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094ce:	f802 4f01 	strb.w	r4, [r2, #1]!
 80094d2:	e7f8      	b.n	80094c6 <memmove+0xc>
 80094d4:	4283      	cmp	r3, r0
 80094d6:	d9f5      	bls.n	80094c4 <memmove+0xa>
 80094d8:	1881      	adds	r1, r0, r2
 80094da:	1ad2      	subs	r2, r2, r3
 80094dc:	42d3      	cmn	r3, r2
 80094de:	d100      	bne.n	80094e2 <memmove+0x28>
 80094e0:	bd10      	pop	{r4, pc}
 80094e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094e6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80094ea:	e7f7      	b.n	80094dc <memmove+0x22>

080094ec <__malloc_lock>:
 80094ec:	4770      	bx	lr

080094ee <__malloc_unlock>:
 80094ee:	4770      	bx	lr

080094f0 <_realloc_r>:
 80094f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094f2:	4607      	mov	r7, r0
 80094f4:	4614      	mov	r4, r2
 80094f6:	460e      	mov	r6, r1
 80094f8:	b921      	cbnz	r1, 8009504 <_realloc_r+0x14>
 80094fa:	4611      	mov	r1, r2
 80094fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009500:	f7ff bab2 	b.w	8008a68 <_malloc_r>
 8009504:	b922      	cbnz	r2, 8009510 <_realloc_r+0x20>
 8009506:	f7ff fa61 	bl	80089cc <_free_r>
 800950a:	4625      	mov	r5, r4
 800950c:	4628      	mov	r0, r5
 800950e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009510:	f000 f826 	bl	8009560 <_malloc_usable_size_r>
 8009514:	42a0      	cmp	r0, r4
 8009516:	d20f      	bcs.n	8009538 <_realloc_r+0x48>
 8009518:	4621      	mov	r1, r4
 800951a:	4638      	mov	r0, r7
 800951c:	f7ff faa4 	bl	8008a68 <_malloc_r>
 8009520:	4605      	mov	r5, r0
 8009522:	2800      	cmp	r0, #0
 8009524:	d0f2      	beq.n	800950c <_realloc_r+0x1c>
 8009526:	4631      	mov	r1, r6
 8009528:	4622      	mov	r2, r4
 800952a:	f7ff ffbb 	bl	80094a4 <memcpy>
 800952e:	4631      	mov	r1, r6
 8009530:	4638      	mov	r0, r7
 8009532:	f7ff fa4b 	bl	80089cc <_free_r>
 8009536:	e7e9      	b.n	800950c <_realloc_r+0x1c>
 8009538:	4635      	mov	r5, r6
 800953a:	e7e7      	b.n	800950c <_realloc_r+0x1c>

0800953c <_read_r>:
 800953c:	b538      	push	{r3, r4, r5, lr}
 800953e:	4c07      	ldr	r4, [pc, #28]	; (800955c <_read_r+0x20>)
 8009540:	4605      	mov	r5, r0
 8009542:	4608      	mov	r0, r1
 8009544:	4611      	mov	r1, r2
 8009546:	2200      	movs	r2, #0
 8009548:	6022      	str	r2, [r4, #0]
 800954a:	461a      	mov	r2, r3
 800954c:	f7f8 f94e 	bl	80017ec <_read>
 8009550:	1c43      	adds	r3, r0, #1
 8009552:	d102      	bne.n	800955a <_read_r+0x1e>
 8009554:	6823      	ldr	r3, [r4, #0]
 8009556:	b103      	cbz	r3, 800955a <_read_r+0x1e>
 8009558:	602b      	str	r3, [r5, #0]
 800955a:	bd38      	pop	{r3, r4, r5, pc}
 800955c:	20002414 	.word	0x20002414

08009560 <_malloc_usable_size_r>:
 8009560:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009564:	1f18      	subs	r0, r3, #4
 8009566:	2b00      	cmp	r3, #0
 8009568:	bfbc      	itt	lt
 800956a:	580b      	ldrlt	r3, [r1, r0]
 800956c:	18c0      	addlt	r0, r0, r3
 800956e:	4770      	bx	lr

08009570 <_init>:
 8009570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009572:	bf00      	nop
 8009574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009576:	bc08      	pop	{r3}
 8009578:	469e      	mov	lr, r3
 800957a:	4770      	bx	lr

0800957c <_fini>:
 800957c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800957e:	bf00      	nop
 8009580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009582:	bc08      	pop	{r3}
 8009584:	469e      	mov	lr, r3
 8009586:	4770      	bx	lr
