
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001450c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013f8  080146f0  080146f0  000246f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015ae8  08015ae8  00031e0c  2**0
                  CONTENTS
  4 .ARM          00000000  08015ae8  08015ae8  00031e0c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08015ae8  08015ae8  00031e0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015ae8  08015ae8  00025ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015aec  08015aec  00025aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001e0c  20000000  08015af0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ee8  20001e0c  080178fc  00031e0c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002cf4  080178fc  00032cf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031e0c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00049734  00000000  00000000  00031e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007e6b  00000000  00000000  0007b570  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002378  00000000  00000000  000833e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f08  00000000  00000000  00085758  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035bfc  00000000  00000000  00087660  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00030340  00000000  00000000  000bd25c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00126c9f  00000000  00000000  000ed59c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0021423b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009c34  00000000  00000000  002142b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001e0c 	.word	0x20001e0c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080146d4 	.word	0x080146d4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001e10 	.word	0x20001e10
 800021c:	080146d4 	.word	0x080146d4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <BiasMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMenu(eBiasMenu_Status pMenu)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d000      	beq.n	8000cea <BiasMenu_DrawMenu+0x12>
		case ENABLE_BIAS_MENU:
			BiasMenu_DrawMainMenu();
			break;

		default:
			break;
 8000ce8:	e002      	b.n	8000cf0 <BiasMenu_DrawMenu+0x18>
			BiasMenu_DrawMainMenu();
 8000cea:	f000 f805 	bl	8000cf8 <BiasMenu_DrawMainMenu>
			break;
 8000cee:	bf00      	nop

	}
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <BiasMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMainMenu()
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->BIAS", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8000cfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d02:	9301      	str	r3, [sp, #4]
 8000d04:	2302      	movs	r3, #2
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2300      	movs	r3, #0
 8000d0a:	220a      	movs	r2, #10
 8000d0c:	210a      	movs	r1, #10
 8000d0e:	4814      	ldr	r0, [pc, #80]	; (8000d60 <BiasMenu_DrawMainMenu+0x68>)
 8000d10:	f00e fd7c 	bl	800f80c <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8000d14:	f000 f8f0 	bl	8000ef8 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("POS", 15,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8000d18:	f240 23fd 	movw	r3, #765	; 0x2fd
 8000d1c:	9301      	str	r3, [sp, #4]
 8000d1e:	2302      	movs	r3, #2
 8000d20:	9300      	str	r3, [sp, #0]
 8000d22:	2300      	movs	r3, #0
 8000d24:	22d2      	movs	r2, #210	; 0xd2
 8000d26:	210f      	movs	r1, #15
 8000d28:	480e      	ldr	r0, [pc, #56]	; (8000d64 <BiasMenu_DrawMainMenu+0x6c>)
 8000d2a:	f00e fd6f 	bl	800f80c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("NEG", 97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8000d2e:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8000d32:	9301      	str	r3, [sp, #4]
 8000d34:	2302      	movs	r3, #2
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	2300      	movs	r3, #0
 8000d3a:	22d2      	movs	r2, #210	; 0xd2
 8000d3c:	2161      	movs	r1, #97	; 0x61
 8000d3e:	480a      	ldr	r0, [pc, #40]	; (8000d68 <BiasMenu_DrawMainMenu+0x70>)
 8000d40:	f00e fd64 	bl	800f80c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("GND",  190, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8000d44:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000d48:	9301      	str	r3, [sp, #4]
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	2300      	movs	r3, #0
 8000d50:	22d2      	movs	r2, #210	; 0xd2
 8000d52:	21be      	movs	r1, #190	; 0xbe
 8000d54:	4805      	ldr	r0, [pc, #20]	; (8000d6c <BiasMenu_DrawMainMenu+0x74>)
 8000d56:	f00e fd59 	bl	800f80c <ILI9341_Draw_Text>

}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	080146f0 	.word	0x080146f0
 8000d64:	080146fc 	.word	0x080146fc
 8000d68:	08014700 	.word	0x08014700
 8000d6c:	08014704 	.word	0x08014704

08000d70 <DM_Init>:
 *	@param None
 *	@retval None
 *
 */
void DM_Init()
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 8000d74:	f00e fd8b 	bl	800f88e <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000d78:	2003      	movs	r0, #3
 8000d7a:	f00f f9e1 	bl	8010140 <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 8000d7e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d82:	f00e ffc3 	bl	800fd0c <ILI9341_Fill_Screen>

}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <DM_PostInit>:
 *	@param None
 *	@retval None
 *
 */
void DM_PostInit()
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("Initialising", 10, 10, NORMAL_TEXT_FGCOLOUR, 1, NORMAL_TEXT_BGCOLOUR);
 8000d92:	2300      	movs	r3, #0
 8000d94:	9301      	str	r3, [sp, #4]
 8000d96:	2301      	movs	r3, #1
 8000d98:	9300      	str	r3, [sp, #0]
 8000d9a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000d9e:	220a      	movs	r2, #10
 8000da0:	210a      	movs	r1, #10
 8000da2:	4806      	ldr	r0, [pc, #24]	; (8000dbc <DM_PostInit+0x30>)
 8000da4:	f00e fd32 	bl	800f80c <ILI9341_Draw_Text>
	HAL_Delay(500);
 8000da8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dac:	f007 ff4a 	bl	8008c44 <HAL_Delay>

	DM_RefreshScreen();
 8000db0:	f000 fbdc 	bl	800156c <DM_RefreshScreen>
	#ifdef EVENT_MENU_DEBUG
		  printf("Init Completed\n");
	#endif


}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	08014708 	.word	0x08014708

08000dc0 <DM_UpdateDisplay>:
 *	@param None
 *	@retval None
 *
 */
void DM_UpdateDisplay()
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af02      	add	r7, sp, #8
	/*
	 * 	Top level menu
	 */
	if(ToplevelMenu_getStatus())
 8000dc6:	f004 f947 	bl	8005058 <ToplevelMenu_getStatus>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d015      	beq.n	8000dfc <DM_UpdateDisplay+0x3c>

		#ifdef EVENT_MENU_DEBUG
			  printf("FuncMenu_DrawMenu\n");
		#endif

		switch(ToplevelMenu_getStatus())
 8000dd0:	f004 f942 	bl	8005058 <ToplevelMenu_getStatus>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d008      	beq.n	8000dec <DM_UpdateDisplay+0x2c>
 8000dda:	2b03      	cmp	r3, #3
 8000ddc:	d00a      	beq.n	8000df4 <DM_UpdateDisplay+0x34>
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d000      	beq.n	8000de4 <DM_UpdateDisplay+0x24>

				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
				break;

			default:
				break;
 8000de2:	e083      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_MAIN_MENU);
 8000de4:	2001      	movs	r0, #1
 8000de6:	f002 ff53 	bl	8003c90 <ToplevelMenu_DrawMenu>
				break;
 8000dea:	e07f      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8000dec:	2002      	movs	r0, #2
 8000dee:	f002 ff4f 	bl	8003c90 <ToplevelMenu_DrawMenu>
				break;
 8000df2:	e07b      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
 8000df4:	2003      	movs	r0, #3
 8000df6:	f002 ff4b 	bl	8003c90 <ToplevelMenu_DrawMenu>
				break;
 8000dfa:	e077      	b.n	8000eec <DM_UpdateDisplay+0x12c>
	}

	/*
	 * 	Function menus
	 */
	else if(FuncMenu_getStatus())		//  != DISABLE_FUNC_MENU
 8000dfc:	f003 ff1c 	bl	8004c38 <FuncMenu_getStatus>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d015      	beq.n	8000e32 <DM_UpdateDisplay+0x72>

		#ifdef EVENT_MENU_DEBUG
			  printf("FuncMenu_DrawMenu\n");
		#endif

		switch(FuncMenu_getStatus())
 8000e06:	f003 ff17 	bl	8004c38 <FuncMenu_getStatus>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d008      	beq.n	8000e22 <DM_UpdateDisplay+0x62>
 8000e10:	2b03      	cmp	r3, #3
 8000e12:	d00a      	beq.n	8000e2a <DM_UpdateDisplay+0x6a>
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d000      	beq.n	8000e1a <DM_UpdateDisplay+0x5a>
				FuncMenu_DrawMenu(ENABLE_FUNC_Aux_MENU);

				break;

			default:
				break;
 8000e18:	e068      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				FuncMenu_DrawMenu(ENABLE_FUNC_MAIN_MENU);
 8000e1a:	2001      	movs	r0, #1
 8000e1c:	f002 f98a 	bl	8003134 <FuncMenu_DrawMenu>
				break;
 8000e20:	e064      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				FuncMenu_DrawMenu(ENABLE_FUNC_SIGNAL_MENU);
 8000e22:	2002      	movs	r0, #2
 8000e24:	f002 f986 	bl	8003134 <FuncMenu_DrawMenu>
				break;
 8000e28:	e060      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				FuncMenu_DrawMenu(ENABLE_FUNC_Aux_MENU);
 8000e2a:	2003      	movs	r0, #3
 8000e2c:	f002 f982 	bl	8003134 <FuncMenu_DrawMenu>
				break;
 8000e30:	e05c      	b.n	8000eec <DM_UpdateDisplay+0x12c>

	}
	/*
	 * 	Gain menus
	 */
	else if(GainMenu_getStatus())		//  != DISABLE_GAIN_MENU
 8000e32:	f003 fff7 	bl	8004e24 <GainMenu_getStatus>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d015      	beq.n	8000e68 <DM_UpdateDisplay+0xa8>

		#ifdef EVENT_MENU_DEBUG
			  printf("GainMenu_DrawMenu\n");
		#endif

		switch(GainMenu_getStatus())
 8000e3c:	f003 fff2 	bl	8004e24 <GainMenu_getStatus>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d008      	beq.n	8000e58 <DM_UpdateDisplay+0x98>
 8000e46:	2b03      	cmp	r3, #3
 8000e48:	d00a      	beq.n	8000e60 <DM_UpdateDisplay+0xa0>
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d000      	beq.n	8000e50 <DM_UpdateDisplay+0x90>
				GainMenu_DrawMenu(ENABLE_GAIN_Aux_MENU);

				break;

			default:
				break;
 8000e4e:	e04d      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				GainMenu_DrawMenu(ENABLE_GAIN_MAIN_MENU);
 8000e50:	2001      	movs	r0, #1
 8000e52:	f002 fe43 	bl	8003adc <GainMenu_DrawMenu>
				break;
 8000e56:	e049      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				GainMenu_DrawMenu(ENABLE_GAIN_SIGNAL_MENU);
 8000e58:	2002      	movs	r0, #2
 8000e5a:	f002 fe3f 	bl	8003adc <GainMenu_DrawMenu>
				break;
 8000e5e:	e045      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				GainMenu_DrawMenu(ENABLE_GAIN_Aux_MENU);
 8000e60:	2003      	movs	r0, #3
 8000e62:	f002 fe3b 	bl	8003adc <GainMenu_DrawMenu>
				break;
 8000e66:	e041      	b.n	8000eec <DM_UpdateDisplay+0x12c>
	}

	/*
	 * 	 Frequency menus
	 */
	else if(FreqMenu_getStatus())		//  != DISABLE_FREQ_MENU
 8000e68:	f003 feda 	bl	8004c20 <FreqMenu_getStatus>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d026      	beq.n	8000ec0 <DM_UpdateDisplay+0x100>
			  printf("FreqMenu_DrawMenu\n");
		#endif

		//ILI9341_Draw_Text("FREQUENCY MENU", 	30, 10, WHITE, 3, BLACK);

		switch(FreqMenu_getStatus())
 8000e72:	f003 fed5 	bl	8004c20 <FreqMenu_getStatus>
 8000e76:	4603      	mov	r3, r0
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	2b04      	cmp	r3, #4
 8000e7c:	d835      	bhi.n	8000eea <DM_UpdateDisplay+0x12a>
 8000e7e:	a201      	add	r2, pc, #4	; (adr r2, 8000e84 <DM_UpdateDisplay+0xc4>)
 8000e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e84:	08000e99 	.word	0x08000e99
 8000e88:	08000ea1 	.word	0x08000ea1
 8000e8c:	08000ea9 	.word	0x08000ea9
 8000e90:	08000eb1 	.word	0x08000eb1
 8000e94:	08000eb9 	.word	0x08000eb9
		{
			case ENABLE_FREQ_MAIN_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_MAIN_MENU);
 8000e98:	2001      	movs	r0, #1
 8000e9a:	f000 fbcb 	bl	8001634 <FreqMenu_DrawMenu>

				break;
 8000e9e:	e025      	b.n	8000eec <DM_UpdateDisplay+0x12c>

			case ENABLE_FREQ_PRESET_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_PRESET_MENU);
 8000ea0:	2002      	movs	r0, #2
 8000ea2:	f000 fbc7 	bl	8001634 <FreqMenu_DrawMenu>
				break;
 8000ea6:	e021      	b.n	8000eec <DM_UpdateDisplay+0x12c>

			case ENABLE_FREQ_ADJUST_MENU:


				FreqMenu_DrawMenu(ENABLE_FREQ_ADJUST_MENU);
 8000ea8:	2003      	movs	r0, #3
 8000eaa:	f000 fbc3 	bl	8001634 <FreqMenu_DrawMenu>

				break;
 8000eae:	e01d      	b.n	8000eec <DM_UpdateDisplay+0x12c>

			case ENABLE_FREQ_SWEEP_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_SWEEP_MENU);
 8000eb0:	2004      	movs	r0, #4
 8000eb2:	f000 fbbf 	bl	8001634 <FreqMenu_DrawMenu>
				break;
 8000eb6:	e019      	b.n	8000eec <DM_UpdateDisplay+0x12c>

			case ENABLE_FREQ_PRESCALER_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_PRESCALER_MENU);
 8000eb8:	2005      	movs	r0, #5
 8000eba:	f000 fbbb 	bl	8001634 <FreqMenu_DrawMenu>
				break;
 8000ebe:	e015      	b.n	8000eec <DM_UpdateDisplay+0x12c>
	}

	/*
	 * 	Bias menu
	 */
	else if(BiasMenu_getStatus())		//  != DISABLE_BIAS_MENU
 8000ec0:	f003 f8d6 	bl	8004070 <BiasMenu_getStatus>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d003      	beq.n	8000ed2 <DM_UpdateDisplay+0x112>

		#ifdef EVENT_MENU_DEBUG
			  printf("BiasMenu_DrawMenu\n");
		#endif

		BiasMenu_DrawMenu(ENABLE_BIAS_MENU);
 8000eca:	2001      	movs	r0, #1
 8000ecc:	f7ff ff04 	bl	8000cd8 <BiasMenu_DrawMenu>
		ILI9341_Draw_Text(encoder_value, 220, 20, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
	#endif //ENCODER_DEBUG



}
 8000ed0:	e00c      	b.n	8000eec <DM_UpdateDisplay+0x12c>
		ILI9341_Draw_Text("DisplayManager: no menu status set!", 10, 50, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000ed2:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000ed6:	9301      	str	r3, [sp, #4]
 8000ed8:	2301      	movs	r3, #1
 8000eda:	9300      	str	r3, [sp, #0]
 8000edc:	2300      	movs	r3, #0
 8000ede:	2232      	movs	r2, #50	; 0x32
 8000ee0:	210a      	movs	r1, #10
 8000ee2:	4804      	ldr	r0, [pc, #16]	; (8000ef4 <DM_UpdateDisplay+0x134>)
 8000ee4:	f00e fc92 	bl	800f80c <ILI9341_Draw_Text>
}
 8000ee8:	e000      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				break;
 8000eea:	bf00      	nop
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	08014718 	.word	0x08014718

08000ef8 <DM_DisplayFormattedOutput>:
 *	@param None
 *	@retval None
 *
 */
void DM_DisplayFormattedOutput()
{
 8000ef8:	b590      	push	{r4, r7, lr}
 8000efa:	b09f      	sub	sp, #124	; 0x7c
 8000efc:	af04      	add	r7, sp, #16
	uint8_t text_size = 2;
 8000efe:	2302      	movs	r3, #2
 8000f00:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	char out_hertz[15] = "";
 8000f04:	2300      	movs	r3, #0
 8000f06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f08:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	f8c3 2007 	str.w	r2, [r3, #7]
	uint8_t out_hertz_x = 140;
 8000f16:	238c      	movs	r3, #140	; 0x8c
 8000f18:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	uint8_t out_hertz_y = 40;
 8000f1c:	2328      	movs	r3, #40	; 0x28
 8000f1e:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

	char out_vpp[18] = "";
 8000f22:	2300      	movs	r3, #0
 8000f24:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	819a      	strh	r2, [r3, #12]
	uint8_t out_vpp_x = 175;
 8000f34:	23af      	movs	r3, #175	; 0xaf
 8000f36:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	uint8_t out_vpp_y = 70;
 8000f3a:	2346      	movs	r3, #70	; 0x46
 8000f3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	char out_decibels[20] = "";
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	f107 0318 	add.w	r3, r7, #24
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
	uint8_t out_decibels_x = 138;
 8000f52:	238a      	movs	r3, #138	; 0x8a
 8000f54:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t out_decibels_y = 100;
 8000f58:	2364      	movs	r3, #100	; 0x64
 8000f5a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d


	float volts_per_thou = 0.00075;
 8000f5e:	4bc4      	ldr	r3, [pc, #784]	; (8001270 <DM_DisplayFormattedOutput+0x378>)
 8000f60:	65bb      	str	r3, [r7, #88]	; 0x58
	char out_dcvolts[12] = "";
 8000f62:	2300      	movs	r3, #0
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	f107 030c 	add.w	r3, r7, #12
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
	uint8_t out_dcvolts_x = 161;
 8000f70:	23a1      	movs	r3, #161	; 0xa1
 8000f72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t out_dcvolts_y = 130;
 8000f76:	2382      	movs	r3, #130	; 0x82
 8000f78:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

	ILI9341_Draw_Text("FREQ   ....", 2, out_hertz_y , NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000f7c:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8000f80:	b299      	uxth	r1, r3
 8000f82:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	2200      	movs	r2, #0
 8000f8a:	9201      	str	r2, [sp, #4]
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000f92:	460a      	mov	r2, r1
 8000f94:	2102      	movs	r1, #2
 8000f96:	48b7      	ldr	r0, [pc, #732]	; (8001274 <DM_DisplayFormattedOutput+0x37c>)
 8000f98:	f00e fc38 	bl	800f80c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("VPP    ....", 2, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000f9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000fa0:	b299      	uxth	r1, r3
 8000fa2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	2200      	movs	r2, #0
 8000faa:	9201      	str	r2, [sp, #4]
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000fb2:	460a      	mov	r2, r1
 8000fb4:	2102      	movs	r1, #2
 8000fb6:	48b0      	ldr	r0, [pc, #704]	; (8001278 <DM_DisplayFormattedOutput+0x380>)
 8000fb8:	f00e fc28 	bl	800f80c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("GAIN   ....", 2, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000fbc:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8000fc0:	b299      	uxth	r1, r3
 8000fc2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	2200      	movs	r2, #0
 8000fca:	9201      	str	r2, [sp, #4]
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000fd2:	460a      	mov	r2, r1
 8000fd4:	2102      	movs	r1, #2
 8000fd6:	48a9      	ldr	r0, [pc, #676]	; (800127c <DM_DisplayFormattedOutput+0x384>)
 8000fd8:	f00e fc18 	bl	800f80c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("OFFSET ....", 2, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000fdc:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000fe0:	b299      	uxth	r1, r3
 8000fe2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	2200      	movs	r2, #0
 8000fea:	9201      	str	r2, [sp, #4]
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000ff2:	460a      	mov	r2, r1
 8000ff4:	2102      	movs	r1, #2
 8000ff6:	48a2      	ldr	r0, [pc, #648]	; (8001280 <DM_DisplayFormattedOutput+0x388>)
 8000ff8:	f00e fc08 	bl	800f80c <ILI9341_Draw_Text>

	// display output in hertz
	snprintf(out_hertz, sizeof(out_hertz), " %4.2f   Hz ", SM_GetOutputInHertz());
 8000ffc:	f005 fe12 	bl	8006c24 <SM_GetOutputInHertz>
 8001000:	ee10 3a10 	vmov	r3, s0
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff fac7 	bl	8000598 <__aeabi_f2d>
 800100a:	4603      	mov	r3, r0
 800100c:	460c      	mov	r4, r1
 800100e:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001012:	e9cd 3400 	strd	r3, r4, [sp]
 8001016:	4a9b      	ldr	r2, [pc, #620]	; (8001284 <DM_DisplayFormattedOutput+0x38c>)
 8001018:	210f      	movs	r1, #15
 800101a:	f00f ffb3 	bl	8010f84 <sniprintf>
	ILI9341_Draw_Text(out_hertz, out_hertz_x, out_hertz_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800101e:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8001022:	b299      	uxth	r1, r3
 8001024:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8001028:	b29c      	uxth	r4, r3
 800102a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800102e:	b29b      	uxth	r3, r3
 8001030:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001034:	2200      	movs	r2, #0
 8001036:	9201      	str	r2, [sp, #4]
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800103e:	4622      	mov	r2, r4
 8001040:	f00e fbe4 	bl	800f80c <ILI9341_Draw_Text>

	// display output in volts peak-to-peak and decibels
	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 8001044:	2000      	movs	r0, #0
 8001046:	f005 fb55 	bl	80066f4 <SM_GetOutputChannel>
 800104a:	4603      	mov	r3, r0
 800104c:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8001050:	653b      	str	r3, [r7, #80]	; 0x50

	if(pTmpVppPreset)
 8001052:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001054:	2b00      	cmp	r3, #0
 8001056:	d01d      	beq.n	8001094 <DM_DisplayFormattedOutput+0x19c>
	{
		snprintf(out_vpp, sizeof(out_vpp), " %2.2f   V ", pTmpVppPreset->amp_value);
 8001058:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fa9b 	bl	8000598 <__aeabi_f2d>
 8001062:	4603      	mov	r3, r0
 8001064:	460c      	mov	r4, r1
 8001066:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800106a:	e9cd 3400 	strd	r3, r4, [sp]
 800106e:	4a86      	ldr	r2, [pc, #536]	; (8001288 <DM_DisplayFormattedOutput+0x390>)
 8001070:	2112      	movs	r1, #18
 8001072:	f00f ff87 	bl	8010f84 <sniprintf>
		snprintf(out_decibels, sizeof(out_decibels), " %+7.2f ", pTmpVppPreset->gain_decibels);
 8001076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fa8c 	bl	8000598 <__aeabi_f2d>
 8001080:	4603      	mov	r3, r0
 8001082:	460c      	mov	r4, r1
 8001084:	f107 0014 	add.w	r0, r7, #20
 8001088:	e9cd 3400 	strd	r3, r4, [sp]
 800108c:	4a7f      	ldr	r2, [pc, #508]	; (800128c <DM_DisplayFormattedOutput+0x394>)
 800108e:	2114      	movs	r1, #20
 8001090:	f00f ff78 	bl	8010f84 <sniprintf>
	}
	ILI9341_Draw_Text(out_vpp, out_vpp_x, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001094:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001098:	b299      	uxth	r1, r3
 800109a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800109e:	b29c      	uxth	r4, r3
 80010a0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80010aa:	2200      	movs	r2, #0
 80010ac:	9201      	str	r2, [sp, #4]
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80010b4:	4622      	mov	r2, r4
 80010b6:	f00e fba9 	bl	800f80c <ILI9341_Draw_Text>
	ILI9341_Draw_Text(out_decibels, out_decibels_x, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80010ba:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80010be:	b299      	uxth	r1, r3
 80010c0:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80010c4:	b29c      	uxth	r4, r3
 80010c6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	f107 0014 	add.w	r0, r7, #20
 80010d0:	2200      	movs	r2, #0
 80010d2:	9201      	str	r2, [sp, #4]
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80010da:	4622      	mov	r2, r4
 80010dc:	f00e fb96 	bl	800f80c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("dBmV", out_decibels_x + 128, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80010e0:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	3380      	adds	r3, #128	; 0x80
 80010e8:	b299      	uxth	r1, r3
 80010ea:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80010ee:	b298      	uxth	r0, r3
 80010f0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	2200      	movs	r2, #0
 80010f8:	9201      	str	r2, [sp, #4]
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001100:	4602      	mov	r2, r0
 8001102:	4863      	ldr	r0, [pc, #396]	; (8001290 <DM_DisplayFormattedOutput+0x398>)
 8001104:	f00e fb82 	bl	800f80c <ILI9341_Draw_Text>


	// display output bias in +/- Volts
	float dc_volts;
	(BO_GetOutputBias() == 0) ? (dc_volts = 0) : (dc_volts = volts_per_thou * (float)BO_GetOutputBias());
 8001108:	f004 fa00 	bl	800550c <BO_GetOutputBias>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d103      	bne.n	800111a <DM_DisplayFormattedOutput+0x222>
 8001112:	f04f 0300 	mov.w	r3, #0
 8001116:	667b      	str	r3, [r7, #100]	; 0x64
 8001118:	e00b      	b.n	8001132 <DM_DisplayFormattedOutput+0x23a>
 800111a:	f004 f9f7 	bl	800550c <BO_GetOutputBias>
 800111e:	ee07 0a90 	vmov	s15, r0
 8001122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001126:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800112a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800112e:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

	snprintf(out_dcvolts, sizeof(out_dcvolts), "%05.2f   v ", dc_volts);
 8001132:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001134:	f7ff fa30 	bl	8000598 <__aeabi_f2d>
 8001138:	4603      	mov	r3, r0
 800113a:	460c      	mov	r4, r1
 800113c:	f107 0008 	add.w	r0, r7, #8
 8001140:	e9cd 3400 	strd	r3, r4, [sp]
 8001144:	4a53      	ldr	r2, [pc, #332]	; (8001294 <DM_DisplayFormattedOutput+0x39c>)
 8001146:	210c      	movs	r1, #12
 8001148:	f00f ff1c 	bl	8010f84 <sniprintf>
	if(BO_GetBiasPolarity())
 800114c:	f004 f97e 	bl	800544c <BO_GetBiasPolarity>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d022      	beq.n	800119c <DM_DisplayFormattedOutput+0x2a4>
	{
		char symbol[3] = "+\0";
 8001156:	4a50      	ldr	r2, [pc, #320]	; (8001298 <DM_DisplayFormattedOutput+0x3a0>)
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	6812      	ldr	r2, [r2, #0]
 800115c:	4611      	mov	r1, r2
 800115e:	8019      	strh	r1, [r3, #0]
 8001160:	3302      	adds	r3, #2
 8001162:	0c12      	lsrs	r2, r2, #16
 8001164:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001166:	f107 0208 	add.w	r2, r7, #8
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	4611      	mov	r1, r2
 800116e:	4618      	mov	r0, r3
 8001170:	f00f ff3c 	bl	8010fec <strcat>
 8001174:	4604      	mov	r4, r0
 8001176:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800117a:	b299      	uxth	r1, r3
 800117c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001180:	b298      	uxth	r0, r3
 8001182:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001186:	b29b      	uxth	r3, r3
 8001188:	2200      	movs	r2, #0
 800118a:	9201      	str	r2, [sp, #4]
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001192:	4602      	mov	r2, r0
 8001194:	4620      	mov	r0, r4
 8001196:	f00e fb39 	bl	800f80c <ILI9341_Draw_Text>
 800119a:	e021      	b.n	80011e0 <DM_DisplayFormattedOutput+0x2e8>
	}
	else
	{
		char symbol[3] = "-\0";
 800119c:	4a3f      	ldr	r2, [pc, #252]	; (800129c <DM_DisplayFormattedOutput+0x3a4>)
 800119e:	463b      	mov	r3, r7
 80011a0:	6812      	ldr	r2, [r2, #0]
 80011a2:	4611      	mov	r1, r2
 80011a4:	8019      	strh	r1, [r3, #0]
 80011a6:	3302      	adds	r3, #2
 80011a8:	0c12      	lsrs	r2, r2, #16
 80011aa:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80011ac:	f107 0208 	add.w	r2, r7, #8
 80011b0:	463b      	mov	r3, r7
 80011b2:	4611      	mov	r1, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f00f ff19 	bl	8010fec <strcat>
 80011ba:	4604      	mov	r4, r0
 80011bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80011c0:	b299      	uxth	r1, r3
 80011c2:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80011c6:	b298      	uxth	r0, r3
 80011c8:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	2200      	movs	r2, #0
 80011d0:	9201      	str	r2, [sp, #4]
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80011d8:	4602      	mov	r2, r0
 80011da:	4620      	mov	r0, r4
 80011dc:	f00e fb16 	bl	800f80c <ILI9341_Draw_Text>
	}

	ILI9341_Draw_Text(" OUT:", 3, 170, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80011e0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	2200      	movs	r2, #0
 80011e8:	9201      	str	r2, [sp, #4]
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80011f0:	22aa      	movs	r2, #170	; 0xaa
 80011f2:	2103      	movs	r1, #3
 80011f4:	482a      	ldr	r0, [pc, #168]	; (80012a0 <DM_DisplayFormattedOutput+0x3a8>)
 80011f6:	f00e fb09 	bl	800f80c <ILI9341_Draw_Text>
	eOutput_mode signal_output_func = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 80011fa:	2000      	movs	r0, #0
 80011fc:	f005 fa7a 	bl	80066f4 <SM_GetOutputChannel>
 8001200:	4603      	mov	r3, r0
 8001202:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	switch(signal_output_func)
 800120c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001210:	2b06      	cmp	r3, #6
 8001212:	f200 8091 	bhi.w	8001338 <DM_DisplayFormattedOutput+0x440>
 8001216:	a201      	add	r2, pc, #4	; (adr r2, 800121c <DM_DisplayFormattedOutput+0x324>)
 8001218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800121c:	08001239 	.word	0x08001239
 8001220:	08001255 	.word	0x08001255
 8001224:	080012ad 	.word	0x080012ad
 8001228:	080012c9 	.word	0x080012c9
 800122c:	080012e5 	.word	0x080012e5
 8001230:	08001301 	.word	0x08001301
 8001234:	0800131d 	.word	0x0800131d
	{
		case SINE_FUNC_MODE:

			ILI9341_Draw_Wave(80, 140, 3, SIGNAL_OUTPUT_ICON, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 8001238:	233c      	movs	r3, #60	; 0x3c
 800123a:	9302      	str	r3, [sp, #8]
 800123c:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <DM_DisplayFormattedOutput+0x3ac>)
 800123e:	9301      	str	r3, [sp, #4]
 8001240:	2364      	movs	r3, #100	; 0x64
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001248:	2203      	movs	r2, #3
 800124a:	218c      	movs	r1, #140	; 0x8c
 800124c:	2050      	movs	r0, #80	; 0x50
 800124e:	f00e f939 	bl	800f4c4 <ILI9341_Draw_Wave>
			break;
 8001252:	e071      	b.n	8001338 <DM_DisplayFormattedOutput+0x440>
		case SQUARE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, squareicon_data_table_3600, SQUAREICON_DATA_SIZE);
 8001254:	233c      	movs	r3, #60	; 0x3c
 8001256:	9302      	str	r3, [sp, #8]
 8001258:	4b13      	ldr	r3, [pc, #76]	; (80012a8 <DM_DisplayFormattedOutput+0x3b0>)
 800125a:	9301      	str	r3, [sp, #4]
 800125c:	23c8      	movs	r3, #200	; 0xc8
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001264:	2203      	movs	r2, #3
 8001266:	21a0      	movs	r1, #160	; 0xa0
 8001268:	2050      	movs	r0, #80	; 0x50
 800126a:	f00e f92b 	bl	800f4c4 <ILI9341_Draw_Wave>
			break;
 800126e:	e063      	b.n	8001338 <DM_DisplayFormattedOutput+0x440>
 8001270:	3a449ba6 	.word	0x3a449ba6
 8001274:	0801473c 	.word	0x0801473c
 8001278:	08014748 	.word	0x08014748
 800127c:	08014754 	.word	0x08014754
 8001280:	08014760 	.word	0x08014760
 8001284:	0801476c 	.word	0x0801476c
 8001288:	0801477c 	.word	0x0801477c
 800128c:	08014788 	.word	0x08014788
 8001290:	08014794 	.word	0x08014794
 8001294:	0801479c 	.word	0x0801479c
 8001298:	080147bc 	.word	0x080147bc
 800129c:	080147c0 	.word	0x080147c0
 80012a0:	080147a8 	.word	0x080147a8
 80012a4:	20000e28 	.word	0x20000e28
 80012a8:	20000f18 	.word	0x20000f18
		case SAW_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, sawicon_data_table_3600, SAWICON_DATA_SIZE);
 80012ac:	233c      	movs	r3, #60	; 0x3c
 80012ae:	9302      	str	r3, [sp, #8]
 80012b0:	4b6b      	ldr	r3, [pc, #428]	; (8001460 <DM_DisplayFormattedOutput+0x568>)
 80012b2:	9301      	str	r3, [sp, #4]
 80012b4:	23c8      	movs	r3, #200	; 0xc8
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	f240 23fd 	movw	r3, #765	; 0x2fd
 80012bc:	2203      	movs	r2, #3
 80012be:	21a0      	movs	r1, #160	; 0xa0
 80012c0:	2050      	movs	r0, #80	; 0x50
 80012c2:	f00e f8ff 	bl	800f4c4 <ILI9341_Draw_Wave>
			break;
 80012c6:	e037      	b.n	8001338 <DM_DisplayFormattedOutput+0x440>
		case REV_SAW_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, sawicon_rev_data_table_3600, SAWICON_REV_DATA_SIZE);
 80012c8:	233c      	movs	r3, #60	; 0x3c
 80012ca:	9302      	str	r3, [sp, #8]
 80012cc:	4b65      	ldr	r3, [pc, #404]	; (8001464 <DM_DisplayFormattedOutput+0x56c>)
 80012ce:	9301      	str	r3, [sp, #4]
 80012d0:	23c8      	movs	r3, #200	; 0xc8
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	f240 23fd 	movw	r3, #765	; 0x2fd
 80012d8:	2203      	movs	r2, #3
 80012da:	21a0      	movs	r1, #160	; 0xa0
 80012dc:	2050      	movs	r0, #80	; 0x50
 80012de:	f00e f8f1 	bl	800f4c4 <ILI9341_Draw_Wave>
			break;
 80012e2:	e029      	b.n	8001338 <DM_DisplayFormattedOutput+0x440>
		case TRIANGLE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 80012e4:	233c      	movs	r3, #60	; 0x3c
 80012e6:	9302      	str	r3, [sp, #8]
 80012e8:	4b5f      	ldr	r3, [pc, #380]	; (8001468 <DM_DisplayFormattedOutput+0x570>)
 80012ea:	9301      	str	r3, [sp, #4]
 80012ec:	23c8      	movs	r3, #200	; 0xc8
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	f240 23fd 	movw	r3, #765	; 0x2fd
 80012f4:	2203      	movs	r2, #3
 80012f6:	21a0      	movs	r1, #160	; 0xa0
 80012f8:	2050      	movs	r0, #80	; 0x50
 80012fa:	f00e f8e3 	bl	800f4c4 <ILI9341_Draw_Wave>
			break;
 80012fe:	e01b      	b.n	8001338 <DM_DisplayFormattedOutput+0x440>
		case IMPULSE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001300:	233c      	movs	r3, #60	; 0x3c
 8001302:	9302      	str	r3, [sp, #8]
 8001304:	4b58      	ldr	r3, [pc, #352]	; (8001468 <DM_DisplayFormattedOutput+0x570>)
 8001306:	9301      	str	r3, [sp, #4]
 8001308:	23c8      	movs	r3, #200	; 0xc8
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001310:	2203      	movs	r2, #3
 8001312:	21a0      	movs	r1, #160	; 0xa0
 8001314:	2050      	movs	r0, #80	; 0x50
 8001316:	f00e f8d5 	bl	800f4c4 <ILI9341_Draw_Wave>
			break;
 800131a:	e00d      	b.n	8001338 <DM_DisplayFormattedOutput+0x440>
		case PWM_FUNC_MODE:
			ILI9341_Draw_Text("PWM", 80, 170, SIGNAL_OUTPUT_ICON, text_size, NORMAL_TEXT_BGCOLOUR);
 800131c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001320:	b29b      	uxth	r3, r3
 8001322:	2200      	movs	r2, #0
 8001324:	9201      	str	r2, [sp, #4]
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	f240 23fd 	movw	r3, #765	; 0x2fd
 800132c:	22aa      	movs	r2, #170	; 0xaa
 800132e:	2150      	movs	r1, #80	; 0x50
 8001330:	484e      	ldr	r0, [pc, #312]	; (800146c <DM_DisplayFormattedOutput+0x574>)
 8001332:	f00e fa6b 	bl	800f80c <ILI9341_Draw_Text>
			break;
 8001336:	bf00      	nop
	}

	ILI9341_Draw_Text("AUX:", 180, 170, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001338:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800133c:	b29b      	uxth	r3, r3
 800133e:	2200      	movs	r2, #0
 8001340:	9201      	str	r2, [sp, #4]
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001348:	22aa      	movs	r2, #170	; 0xaa
 800134a:	21b4      	movs	r1, #180	; 0xb4
 800134c:	4848      	ldr	r0, [pc, #288]	; (8001470 <DM_DisplayFormattedOutput+0x578>)
 800134e:	f00e fa5d 	bl	800f80c <ILI9341_Draw_Text>
	eOutput_mode Aux_output_func = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8001352:	2001      	movs	r0, #1
 8001354:	f005 f9ce 	bl	80066f4 <SM_GetOutputChannel>
 8001358:	4603      	mov	r3, r0
 800135a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	switch(Aux_output_func)
 8001364:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001368:	2b06      	cmp	r3, #6
 800136a:	d873      	bhi.n	8001454 <DM_DisplayFormattedOutput+0x55c>
 800136c:	a201      	add	r2, pc, #4	; (adr r2, 8001374 <DM_DisplayFormattedOutput+0x47c>)
 800136e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001372:	bf00      	nop
 8001374:	08001391 	.word	0x08001391
 8001378:	080013ad 	.word	0x080013ad
 800137c:	080013c9 	.word	0x080013c9
 8001380:	080013e5 	.word	0x080013e5
 8001384:	08001401 	.word	0x08001401
 8001388:	0800141d 	.word	0x0800141d
 800138c:	08001439 	.word	0x08001439
	{
		case SINE_FUNC_MODE:

			ILI9341_Draw_Wave(245, 140, 3, Aux_OUTPUT_ICON, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 8001390:	233c      	movs	r3, #60	; 0x3c
 8001392:	9302      	str	r3, [sp, #8]
 8001394:	4b37      	ldr	r3, [pc, #220]	; (8001474 <DM_DisplayFormattedOutput+0x57c>)
 8001396:	9301      	str	r3, [sp, #4]
 8001398:	2364      	movs	r3, #100	; 0x64
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80013a0:	2203      	movs	r2, #3
 80013a2:	218c      	movs	r1, #140	; 0x8c
 80013a4:	20f5      	movs	r0, #245	; 0xf5
 80013a6:	f00e f88d 	bl	800f4c4 <ILI9341_Draw_Wave>
			break;
 80013aa:	e053      	b.n	8001454 <DM_DisplayFormattedOutput+0x55c>
		case SQUARE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, squareicon_data_table_3600, SQUAREICON_DATA_SIZE);
 80013ac:	233c      	movs	r3, #60	; 0x3c
 80013ae:	9302      	str	r3, [sp, #8]
 80013b0:	4b31      	ldr	r3, [pc, #196]	; (8001478 <DM_DisplayFormattedOutput+0x580>)
 80013b2:	9301      	str	r3, [sp, #4]
 80013b4:	23c8      	movs	r3, #200	; 0xc8
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80013bc:	2203      	movs	r2, #3
 80013be:	21a0      	movs	r1, #160	; 0xa0
 80013c0:	20f5      	movs	r0, #245	; 0xf5
 80013c2:	f00e f87f 	bl	800f4c4 <ILI9341_Draw_Wave>
			break;
 80013c6:	e045      	b.n	8001454 <DM_DisplayFormattedOutput+0x55c>
		case SAW_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, sawicon_data_table_3600, SAWICON_DATA_SIZE);
 80013c8:	233c      	movs	r3, #60	; 0x3c
 80013ca:	9302      	str	r3, [sp, #8]
 80013cc:	4b24      	ldr	r3, [pc, #144]	; (8001460 <DM_DisplayFormattedOutput+0x568>)
 80013ce:	9301      	str	r3, [sp, #4]
 80013d0:	23c8      	movs	r3, #200	; 0xc8
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80013d8:	2203      	movs	r2, #3
 80013da:	21a0      	movs	r1, #160	; 0xa0
 80013dc:	20f5      	movs	r0, #245	; 0xf5
 80013de:	f00e f871 	bl	800f4c4 <ILI9341_Draw_Wave>
			break;
 80013e2:	e037      	b.n	8001454 <DM_DisplayFormattedOutput+0x55c>
		case REV_SAW_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, sawicon_rev_data_table_3600, SAWICON_REV_DATA_SIZE);
 80013e4:	233c      	movs	r3, #60	; 0x3c
 80013e6:	9302      	str	r3, [sp, #8]
 80013e8:	4b1e      	ldr	r3, [pc, #120]	; (8001464 <DM_DisplayFormattedOutput+0x56c>)
 80013ea:	9301      	str	r3, [sp, #4]
 80013ec:	23c8      	movs	r3, #200	; 0xc8
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80013f4:	2203      	movs	r2, #3
 80013f6:	21a0      	movs	r1, #160	; 0xa0
 80013f8:	20f5      	movs	r0, #245	; 0xf5
 80013fa:	f00e f863 	bl	800f4c4 <ILI9341_Draw_Wave>
			break;
 80013fe:	e029      	b.n	8001454 <DM_DisplayFormattedOutput+0x55c>
		case TRIANGLE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001400:	233c      	movs	r3, #60	; 0x3c
 8001402:	9302      	str	r3, [sp, #8]
 8001404:	4b18      	ldr	r3, [pc, #96]	; (8001468 <DM_DisplayFormattedOutput+0x570>)
 8001406:	9301      	str	r3, [sp, #4]
 8001408:	23c8      	movs	r3, #200	; 0xc8
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001410:	2203      	movs	r2, #3
 8001412:	21a0      	movs	r1, #160	; 0xa0
 8001414:	20f5      	movs	r0, #245	; 0xf5
 8001416:	f00e f855 	bl	800f4c4 <ILI9341_Draw_Wave>
			break;
 800141a:	e01b      	b.n	8001454 <DM_DisplayFormattedOutput+0x55c>
		case IMPULSE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 800141c:	233c      	movs	r3, #60	; 0x3c
 800141e:	9302      	str	r3, [sp, #8]
 8001420:	4b11      	ldr	r3, [pc, #68]	; (8001468 <DM_DisplayFormattedOutput+0x570>)
 8001422:	9301      	str	r3, [sp, #4]
 8001424:	23c8      	movs	r3, #200	; 0xc8
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800142c:	2203      	movs	r2, #3
 800142e:	21a0      	movs	r1, #160	; 0xa0
 8001430:	20f5      	movs	r0, #245	; 0xf5
 8001432:	f00e f847 	bl	800f4c4 <ILI9341_Draw_Wave>
			break;
 8001436:	e00d      	b.n	8001454 <DM_DisplayFormattedOutput+0x55c>
		case PWM_FUNC_MODE:
			ILI9341_Draw_Text("PWM", 245, 170, Aux_OUTPUT_ICON, text_size, NORMAL_TEXT_BGCOLOUR);
 8001438:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800143c:	b29b      	uxth	r3, r3
 800143e:	2200      	movs	r2, #0
 8001440:	9201      	str	r2, [sp, #4]
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001448:	22aa      	movs	r2, #170	; 0xaa
 800144a:	21f5      	movs	r1, #245	; 0xf5
 800144c:	4807      	ldr	r0, [pc, #28]	; (800146c <DM_DisplayFormattedOutput+0x574>)
 800144e:	f00e f9dd 	bl	800f80c <ILI9341_Draw_Text>
			break;
 8001452:	bf00      	nop
	}

	DM_DisplayInputTriggerStatus();
 8001454:	f000 f812 	bl	800147c <DM_DisplayInputTriggerStatus>

}
 8001458:	bf00      	nop
 800145a:	376c      	adds	r7, #108	; 0x6c
 800145c:	46bd      	mov	sp, r7
 800145e:	bd90      	pop	{r4, r7, pc}
 8001460:	20000c48 	.word	0x20000c48
 8001464:	20000d38 	.word	0x20000d38
 8001468:	20001008 	.word	0x20001008
 800146c:	080147b0 	.word	0x080147b0
 8001470:	080147b4 	.word	0x080147b4
 8001474:	20000e28 	.word	0x20000e28
 8001478:	20000f18 	.word	0x20000f18

0800147c <DM_DisplayInputTriggerStatus>:

void DM_DisplayInputTriggerStatus()
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af02      	add	r7, sp, #8
	uint8_t text_size = 2;
 8001482:	2302      	movs	r3, #2
 8001484:	71fb      	strb	r3, [r7, #7]
	uint16_t text_x_pos = 230;
 8001486:	23e6      	movs	r3, #230	; 0xe6
 8001488:	80bb      	strh	r3, [r7, #4]
	// eTriggerInputMode
	switch(IT_GetActiveTriggerMode())
 800148a:	f004 ffad 	bl	80063e8 <IT_GetActiveTriggerMode>
 800148e:	4603      	mov	r3, r0
 8001490:	2b01      	cmp	r3, #1
 8001492:	d023      	beq.n	80014dc <DM_DisplayInputTriggerStatus+0x60>
 8001494:	2b02      	cmp	r3, #2
 8001496:	d040      	beq.n	800151a <DM_DisplayInputTriggerStatus+0x9e>
 8001498:	2b00      	cmp	r3, #0
 800149a:	d000      	beq.n	800149e <DM_DisplayInputTriggerStatus+0x22>
			else
				ILI9341_Draw_Text("T: ADC", text_x_pos, 10, HIGHLIGHT_TEXT_BGCOLOUR , text_size, HIGHLIGHT_TEXT_FGCOLOUR);
			break;

	}
}
 800149c:	e05c      	b.n	8001558 <DM_DisplayInputTriggerStatus+0xdc>
			if(IT_GetTriggerStatus())
 800149e:	f004 ffbf 	bl	8006420 <IT_GetTriggerStatus>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d00c      	beq.n	80014c2 <DM_DisplayInputTriggerStatus+0x46>
				ILI9341_Draw_Text("T: TIM", text_x_pos, 10, HIGHLIGHT_TEXT_FGCOLOUR , text_size, HIGHLIGHT_TEXT_BGCOLOUR);
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	88b9      	ldrh	r1, [r7, #4]
 80014ae:	f644 42f6 	movw	r2, #19702	; 0x4cf6
 80014b2:	9201      	str	r2, [sp, #4]
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	2300      	movs	r3, #0
 80014b8:	220a      	movs	r2, #10
 80014ba:	4829      	ldr	r0, [pc, #164]	; (8001560 <DM_DisplayInputTriggerStatus+0xe4>)
 80014bc:	f00e f9a6 	bl	800f80c <ILI9341_Draw_Text>
			break;
 80014c0:	e04a      	b.n	8001558 <DM_DisplayInputTriggerStatus+0xdc>
				ILI9341_Draw_Text("T: TIM", text_x_pos, 10, HIGHLIGHT_TEXT_BGCOLOUR , text_size, HIGHLIGHT_TEXT_FGCOLOUR);
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	88b9      	ldrh	r1, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	9201      	str	r2, [sp, #4]
 80014cc:	9300      	str	r3, [sp, #0]
 80014ce:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80014d2:	220a      	movs	r2, #10
 80014d4:	4822      	ldr	r0, [pc, #136]	; (8001560 <DM_DisplayInputTriggerStatus+0xe4>)
 80014d6:	f00e f999 	bl	800f80c <ILI9341_Draw_Text>
			break;
 80014da:	e03d      	b.n	8001558 <DM_DisplayInputTriggerStatus+0xdc>
			if(IT_GetTriggerStatus())
 80014dc:	f004 ffa0 	bl	8006420 <IT_GetTriggerStatus>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d00c      	beq.n	8001500 <DM_DisplayInputTriggerStatus+0x84>
				ILI9341_Draw_Text("T: COMP", text_x_pos, 10, HIGHLIGHT_TEXT_FGCOLOUR , text_size, HIGHLIGHT_TEXT_BGCOLOUR);
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	88b9      	ldrh	r1, [r7, #4]
 80014ec:	f644 42f6 	movw	r2, #19702	; 0x4cf6
 80014f0:	9201      	str	r2, [sp, #4]
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	2300      	movs	r3, #0
 80014f6:	220a      	movs	r2, #10
 80014f8:	481a      	ldr	r0, [pc, #104]	; (8001564 <DM_DisplayInputTriggerStatus+0xe8>)
 80014fa:	f00e f987 	bl	800f80c <ILI9341_Draw_Text>
			break;
 80014fe:	e02b      	b.n	8001558 <DM_DisplayInputTriggerStatus+0xdc>
				ILI9341_Draw_Text("T: COMP", text_x_pos, 10, HIGHLIGHT_TEXT_BGCOLOUR , text_size, HIGHLIGHT_TEXT_FGCOLOUR);
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	b29b      	uxth	r3, r3
 8001504:	88b9      	ldrh	r1, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	9201      	str	r2, [sp, #4]
 800150a:	9300      	str	r3, [sp, #0]
 800150c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001510:	220a      	movs	r2, #10
 8001512:	4814      	ldr	r0, [pc, #80]	; (8001564 <DM_DisplayInputTriggerStatus+0xe8>)
 8001514:	f00e f97a 	bl	800f80c <ILI9341_Draw_Text>
			break;
 8001518:	e01e      	b.n	8001558 <DM_DisplayInputTriggerStatus+0xdc>
			if(IT_GetTriggerStatus())
 800151a:	f004 ff81 	bl	8006420 <IT_GetTriggerStatus>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d00c      	beq.n	800153e <DM_DisplayInputTriggerStatus+0xc2>
				ILI9341_Draw_Text("T: ADC", text_x_pos, 10, HIGHLIGHT_TEXT_FGCOLOUR , text_size, HIGHLIGHT_TEXT_BGCOLOUR);
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	b29b      	uxth	r3, r3
 8001528:	88b9      	ldrh	r1, [r7, #4]
 800152a:	f644 42f6 	movw	r2, #19702	; 0x4cf6
 800152e:	9201      	str	r2, [sp, #4]
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	2300      	movs	r3, #0
 8001534:	220a      	movs	r2, #10
 8001536:	480c      	ldr	r0, [pc, #48]	; (8001568 <DM_DisplayInputTriggerStatus+0xec>)
 8001538:	f00e f968 	bl	800f80c <ILI9341_Draw_Text>
			break;
 800153c:	e00b      	b.n	8001556 <DM_DisplayInputTriggerStatus+0xda>
				ILI9341_Draw_Text("T: ADC", text_x_pos, 10, HIGHLIGHT_TEXT_BGCOLOUR , text_size, HIGHLIGHT_TEXT_FGCOLOUR);
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	b29b      	uxth	r3, r3
 8001542:	88b9      	ldrh	r1, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	9201      	str	r2, [sp, #4]
 8001548:	9300      	str	r3, [sp, #0]
 800154a:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800154e:	220a      	movs	r2, #10
 8001550:	4805      	ldr	r0, [pc, #20]	; (8001568 <DM_DisplayInputTriggerStatus+0xec>)
 8001552:	f00e f95b 	bl	800f80c <ILI9341_Draw_Text>
			break;
 8001556:	bf00      	nop
}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	080147c4 	.word	0x080147c4
 8001564:	080147cc 	.word	0x080147cc
 8001568:	080147d4 	.word	0x080147d4

0800156c <DM_RefreshScreen>:
 *	@param None
 *	@retval None
 *
 */
void DM_RefreshScreen()
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af04      	add	r7, sp, #16



	// pause display interrupts
	HAL_TIM_Base_Stop_IT(&htim15);
 8001572:	4820      	ldr	r0, [pc, #128]	; (80015f4 <DM_RefreshScreen+0x88>)
 8001574:	f00b ff94 	bl	800d4a0 <HAL_TIM_Base_Stop_IT>


	ILI9341_Fill_Screen(SCREEN_BGCOLOUR);
 8001578:	2000      	movs	r0, #0
 800157a:	f00e fbc7 	bl	800fd0c <ILI9341_Fill_Screen>
	GUI_DrawPolygon(Points, 3, RED);
	GUI_FillPolygon(Points2, 3, BLUE);
	GUI_DrawEllipse(250, 110, 20, 30, GREEN);
	GUI_FillEllipse(250, 110, 20, 30, WHITE);
*/
	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	0,
 800157e:	2300      	movs	r3, #0
 8001580:	9302      	str	r3, [sp, #8]
 8001582:	2302      	movs	r3, #2
 8001584:	9301      	str	r3, [sp, #4]
 8001586:	f240 23fd 	movw	r3, #765	; 0x2fd
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	2328      	movs	r3, #40	; 0x28
 800158e:	2250      	movs	r2, #80	; 0x50
 8001590:	21c8      	movs	r1, #200	; 0xc8
 8001592:	2000      	movs	r0, #0
 8001594:	f00d ffd7 	bl	800f546 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN1_FILL_COLOUR,
													BTN1_BORDER_WEIGHT,
													BTN1_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH,
 8001598:	2300      	movs	r3, #0
 800159a:	9302      	str	r3, [sp, #8]
 800159c:	2302      	movs	r3, #2
 800159e:	9301      	str	r3, [sp, #4]
 80015a0:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	2328      	movs	r3, #40	; 0x28
 80015a8:	2250      	movs	r2, #80	; 0x50
 80015aa:	21c8      	movs	r1, #200	; 0xc8
 80015ac:	2050      	movs	r0, #80	; 0x50
 80015ae:	f00d ffca 	bl	800f546 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN2_FILL_COLOUR,
													BTN2_BORDER_WEIGHT,
													BTN2_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*2,
 80015b2:	2300      	movs	r3, #0
 80015b4:	9302      	str	r3, [sp, #8]
 80015b6:	2302      	movs	r3, #2
 80015b8:	9301      	str	r3, [sp, #4]
 80015ba:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	2328      	movs	r3, #40	; 0x28
 80015c2:	2250      	movs	r2, #80	; 0x50
 80015c4:	21c8      	movs	r1, #200	; 0xc8
 80015c6:	20a0      	movs	r0, #160	; 0xa0
 80015c8:	f00d ffbd 	bl	800f546 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN3_FILL_COLOUR,
													BTN3_BORDER_WEIGHT,
													BTN3_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*3,
 80015cc:	2300      	movs	r3, #0
 80015ce:	9302      	str	r3, [sp, #8]
 80015d0:	2302      	movs	r3, #2
 80015d2:	9301      	str	r3, [sp, #4]
 80015d4:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80015d8:	9300      	str	r3, [sp, #0]
 80015da:	2328      	movs	r3, #40	; 0x28
 80015dc:	2250      	movs	r2, #80	; 0x50
 80015de:	21c8      	movs	r1, #200	; 0xc8
 80015e0:	20f0      	movs	r0, #240	; 0xf0
 80015e2:	f00d ffb0 	bl	800f546 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN4_FILL_COLOUR,
													BTN4_BORDER_WEIGHT,
													BTN4_BORDER_COLOUR);

	// resume diaplay interrupts
	HAL_TIM_Base_Start_IT(&htim15);
 80015e6:	4803      	ldr	r0, [pc, #12]	; (80015f4 <DM_RefreshScreen+0x88>)
 80015e8:	f00b ff24 	bl	800d434 <HAL_TIM_Base_Start_IT>


}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20002b24 	.word	0x20002b24

080015f8 <DM_SetErrorDebugMsg>:
	ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
	*/
}

void DM_SetErrorDebugMsg(char* msg)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af02      	add	r7, sp, #8
 80015fe:	6078      	str	r0, [r7, #4]
	snprintf(ErrorDebugMsg, sizeof(ErrorDebugMsg), "%s", msg);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a0a      	ldr	r2, [pc, #40]	; (800162c <DM_SetErrorDebugMsg+0x34>)
 8001604:	212d      	movs	r1, #45	; 0x2d
 8001606:	480a      	ldr	r0, [pc, #40]	; (8001630 <DM_SetErrorDebugMsg+0x38>)
 8001608:	f00f fcbc 	bl	8010f84 <sniprintf>
	ILI9341_Draw_Text(ErrorDebugMsg, 10, 190, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 800160c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001610:	9301      	str	r3, [sp, #4]
 8001612:	2301      	movs	r3, #1
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	2300      	movs	r3, #0
 8001618:	22be      	movs	r2, #190	; 0xbe
 800161a:	210a      	movs	r1, #10
 800161c:	4804      	ldr	r0, [pc, #16]	; (8001630 <DM_SetErrorDebugMsg+0x38>)
 800161e:	f00e f8f5 	bl	800f80c <ILI9341_Draw_Text>
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	08014858 	.word	0x08014858
 8001630:	20001e28 	.word	0x20001e28

08001634 <FreqMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMenu(eFreqMenu_Status pMenu)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	3b01      	subs	r3, #1
 8001642:	2b04      	cmp	r3, #4
 8001644:	d81b      	bhi.n	800167e <FreqMenu_DrawMenu+0x4a>
 8001646:	a201      	add	r2, pc, #4	; (adr r2, 800164c <FreqMenu_DrawMenu+0x18>)
 8001648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800164c:	08001661 	.word	0x08001661
 8001650:	08001667 	.word	0x08001667
 8001654:	0800166d 	.word	0x0800166d
 8001658:	08001673 	.word	0x08001673
 800165c:	08001679 	.word	0x08001679
	{
		case ENABLE_FREQ_MAIN_MENU:
			FreqMenu_DrawMainMenu();
 8001660:	f000 f812 	bl	8001688 <FreqMenu_DrawMainMenu>
			break;
 8001664:	e00c      	b.n	8001680 <FreqMenu_DrawMenu+0x4c>
		case ENABLE_FREQ_PRESET_MENU:
			FreqMenu_DrawPresetMenu();
 8001666:	f000 f859 	bl	800171c <FreqMenu_DrawPresetMenu>
			break;
 800166a:	e009      	b.n	8001680 <FreqMenu_DrawMenu+0x4c>
		case ENABLE_FREQ_ADJUST_MENU:
			FreqMenu_DrawAdjustMenu();
 800166c:	f001 fb06 	bl	8002c7c <FreqMenu_DrawAdjustMenu>
			break;
 8001670:	e006      	b.n	8001680 <FreqMenu_DrawMenu+0x4c>
		case ENABLE_FREQ_SWEEP_MENU:
			FreqMenu_DrawSweepMenu();
 8001672:	f001 fb19 	bl	8002ca8 <FreqMenu_DrawSweepMenu>
			break;
 8001676:	e003      	b.n	8001680 <FreqMenu_DrawMenu+0x4c>
		case ENABLE_FREQ_PRESCALER_MENU:
			FreqMenu_DrawPrescalerMenu();
 8001678:	f001 fd46 	bl	8003108 <FreqMenu_DrawPrescalerMenu>
			break;
 800167c:	e000      	b.n	8001680 <FreqMenu_DrawMenu+0x4c>
		default:
			break;
 800167e:	bf00      	nop

	}
}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <FreqMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMainMenu()
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af02      	add	r7, sp, #8
	// main
	ILI9341_Draw_Text("OUT->FREQ", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 800168e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001692:	9301      	str	r3, [sp, #4]
 8001694:	2302      	movs	r3, #2
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	2300      	movs	r3, #0
 800169a:	220a      	movs	r2, #10
 800169c:	2105      	movs	r1, #5
 800169e:	481a      	ldr	r0, [pc, #104]	; (8001708 <FreqMenu_DrawMainMenu+0x80>)
 80016a0:	f00e f8b4 	bl	800f80c <ILI9341_Draw_Text>
//	ILI9341_Draw_Text("Select an option below", 	30, 165, BLACK, 2, WHITE);

	DM_DisplayFormattedOutput();
 80016a4:	f7ff fc28 	bl	8000ef8 <DM_DisplayFormattedOutput>

	// buttons
	ILI9341_Draw_Text("COARSE", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80016a8:	f240 23fd 	movw	r3, #765	; 0x2fd
 80016ac:	9301      	str	r3, [sp, #4]
 80016ae:	2302      	movs	r3, #2
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	2300      	movs	r3, #0
 80016b4:	22d2      	movs	r2, #210	; 0xd2
 80016b6:	2105      	movs	r1, #5
 80016b8:	4814      	ldr	r0, [pc, #80]	; (800170c <FreqMenu_DrawMainMenu+0x84>)
 80016ba:	f00e f8a7 	bl	800f80c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FINE", 97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80016be:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80016c2:	9301      	str	r3, [sp, #4]
 80016c4:	2302      	movs	r3, #2
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	2300      	movs	r3, #0
 80016ca:	22d2      	movs	r2, #210	; 0xd2
 80016cc:	2161      	movs	r1, #97	; 0x61
 80016ce:	4810      	ldr	r0, [pc, #64]	; (8001710 <FreqMenu_DrawMainMenu+0x88>)
 80016d0:	f00e f89c 	bl	800f80c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SWEEP",  172, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80016d4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80016d8:	9301      	str	r3, [sp, #4]
 80016da:	2302      	movs	r3, #2
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	2300      	movs	r3, #0
 80016e0:	22d2      	movs	r2, #210	; 0xd2
 80016e2:	21ac      	movs	r1, #172	; 0xac
 80016e4:	480b      	ldr	r0, [pc, #44]	; (8001714 <FreqMenu_DrawMainMenu+0x8c>)
 80016e6:	f00e f891 	bl	800f80c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("PSC", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80016ea:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	2302      	movs	r3, #2
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	2300      	movs	r3, #0
 80016f6:	22d2      	movs	r2, #210	; 0xd2
 80016f8:	f44f 7182 	mov.w	r1, #260	; 0x104
 80016fc:	4806      	ldr	r0, [pc, #24]	; (8001718 <FreqMenu_DrawMainMenu+0x90>)
 80016fe:	f00e f885 	bl	800f80c <ILI9341_Draw_Text>
}
 8001702:	bf00      	nop
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	0801485c 	.word	0x0801485c
 800170c:	08014868 	.word	0x08014868
 8001710:	08014870 	.word	0x08014870
 8001714:	08014878 	.word	0x08014878
 8001718:	08014880 	.word	0x08014880

0800171c <FreqMenu_DrawPresetMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawPresetMenu()
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af02      	add	r7, sp, #8



	ILI9341_Draw_Text("OUT->FREQ->PRESET", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8001722:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001726:	9301      	str	r3, [sp, #4]
 8001728:	2302      	movs	r3, #2
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	2300      	movs	r3, #0
 800172e:	220a      	movs	r2, #10
 8001730:	2105      	movs	r1, #5
 8001732:	4887      	ldr	r0, [pc, #540]	; (8001950 <FreqMenu_DrawPresetMenu+0x234>)
 8001734:	f00e f86a 	bl	800f80c <ILI9341_Draw_Text>

	DM_DisplayInputTriggerStatus();
 8001738:	f7ff fea0 	bl	800147c <DM_DisplayInputTriggerStatus>

	uint8_t menu_pos_y1 = 40;
 800173c:	2328      	movs	r3, #40	; 0x28
 800173e:	73fb      	strb	r3, [r7, #15]
	uint8_t menu_pos_y2 = 60;
 8001740:	233c      	movs	r3, #60	; 0x3c
 8001742:	73bb      	strb	r3, [r7, #14]
	uint8_t menu_pos_y3 = 80;
 8001744:	2350      	movs	r3, #80	; 0x50
 8001746:	737b      	strb	r3, [r7, #13]
	uint8_t menu_pos_y4 = 100;
 8001748:	2364      	movs	r3, #100	; 0x64
 800174a:	733b      	strb	r3, [r7, #12]
	uint8_t menu_pos_y5 = 120;
 800174c:	2378      	movs	r3, #120	; 0x78
 800174e:	72fb      	strb	r3, [r7, #11]
	uint8_t menu_pos_y6 = 140;
 8001750:	238c      	movs	r3, #140	; 0x8c
 8001752:	72bb      	strb	r3, [r7, #10]
	uint8_t menu_pos_y7 = 160;
 8001754:	23a0      	movs	r3, #160	; 0xa0
 8001756:	727b      	strb	r3, [r7, #9]
	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8001758:	f004 f888 	bl	800586c <FreqO_GetFPresetObject>
 800175c:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	f001 825d 	beq.w	8002c20 <FreqMenu_DrawPresetMenu+0x1504>
	{
		switch(pFreqPresetTmp->hertz)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f240 22ee 	movw	r2, #750	; 0x2ee
 800176e:	4293      	cmp	r3, r2
 8001770:	f000 849a 	beq.w	80020a8 <FreqMenu_DrawPresetMenu+0x98c>
 8001774:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001778:	4293      	cmp	r3, r2
 800177a:	d817      	bhi.n	80017ac <FreqMenu_DrawPresetMenu+0x90>
 800177c:	2b32      	cmp	r3, #50	; 0x32
 800177e:	f000 81b3 	beq.w	8001ae8 <FreqMenu_DrawPresetMenu+0x3cc>
 8001782:	2b32      	cmp	r3, #50	; 0x32
 8001784:	d806      	bhi.n	8001794 <FreqMenu_DrawPresetMenu+0x78>
 8001786:	2b01      	cmp	r3, #1
 8001788:	d038      	beq.n	80017fc <FreqMenu_DrawPresetMenu+0xe0>
 800178a:	2b0a      	cmp	r3, #10
 800178c:	f000 8102 	beq.w	8001994 <FreqMenu_DrawPresetMenu+0x278>
	else
	{
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
	}

}
 8001790:	f001 ba52 	b.w	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
		switch(pFreqPresetTmp->hertz)
 8001794:	2bfa      	cmp	r3, #250	; 0xfa
 8001796:	f000 8317 	beq.w	8001dc8 <FreqMenu_DrawPresetMenu+0x6ac>
 800179a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800179e:	f000 83d9 	beq.w	8001f54 <FreqMenu_DrawPresetMenu+0x838>
 80017a2:	2b64      	cmp	r3, #100	; 0x64
 80017a4:	f000 8266 	beq.w	8001c74 <FreqMenu_DrawPresetMenu+0x558>
}
 80017a8:	f001 ba46 	b.w	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
		switch(pFreqPresetTmp->hertz)
 80017ac:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80017b0:	4293      	cmp	r3, r2
 80017b2:	f000 8758 	beq.w	8002666 <FreqMenu_DrawPresetMenu+0xf4a>
 80017b6:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d80f      	bhi.n	80017de <FreqMenu_DrawPresetMenu+0xc2>
 80017be:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c2:	4293      	cmp	r3, r2
 80017c4:	f000 85e0 	beq.w	8002388 <FreqMenu_DrawPresetMenu+0xc6c>
 80017c8:	f242 7210 	movw	r2, #10000	; 0x2710
 80017cc:	4293      	cmp	r3, r2
 80017ce:	f000 86a1 	beq.w	8002514 <FreqMenu_DrawPresetMenu+0xdf8>
 80017d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017d6:	f000 852d 	beq.w	8002234 <FreqMenu_DrawPresetMenu+0xb18>
}
 80017da:	f001 ba2d 	b.w	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
		switch(pFreqPresetTmp->hertz)
 80017de:	4a5d      	ldr	r2, [pc, #372]	; (8001954 <FreqMenu_DrawPresetMenu+0x238>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	f001 80ae 	beq.w	8002942 <FreqMenu_DrawPresetMenu+0x1226>
 80017e6:	4a5c      	ldr	r2, [pc, #368]	; (8001958 <FreqMenu_DrawPresetMenu+0x23c>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	f001 816f 	beq.w	8002acc <FreqMenu_DrawPresetMenu+0x13b0>
 80017ee:	f24c 3250 	movw	r2, #50000	; 0xc350
 80017f2:	4293      	cmp	r3, r2
 80017f4:	f000 87fc 	beq.w	80027f0 <FreqMenu_DrawPresetMenu+0x10d4>
}
 80017f8:	f001 ba1e 	b.w	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
 80017fe:	b29a      	uxth	r2, r3
 8001800:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001804:	9301      	str	r3, [sp, #4]
 8001806:	2302      	movs	r3, #2
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	2300      	movs	r3, #0
 800180c:	2105      	movs	r1, #5
 800180e:	4853      	ldr	r0, [pc, #332]	; (800195c <FreqMenu_DrawPresetMenu+0x240>)
 8001810:	f00d fffc 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001814:	7bbb      	ldrb	r3, [r7, #14]
 8001816:	b29a      	uxth	r2, r3
 8001818:	2300      	movs	r3, #0
 800181a:	9301      	str	r3, [sp, #4]
 800181c:	2302      	movs	r3, #2
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001824:	2105      	movs	r1, #5
 8001826:	484e      	ldr	r0, [pc, #312]	; (8001960 <FreqMenu_DrawPresetMenu+0x244>)
 8001828:	f00d fff0 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800182c:	7b7b      	ldrb	r3, [r7, #13]
 800182e:	b29a      	uxth	r2, r3
 8001830:	2300      	movs	r3, #0
 8001832:	9301      	str	r3, [sp, #4]
 8001834:	2302      	movs	r3, #2
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800183c:	2105      	movs	r1, #5
 800183e:	4849      	ldr	r0, [pc, #292]	; (8001964 <FreqMenu_DrawPresetMenu+0x248>)
 8001840:	f00d ffe4 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001844:	7b3b      	ldrb	r3, [r7, #12]
 8001846:	b29a      	uxth	r2, r3
 8001848:	2300      	movs	r3, #0
 800184a:	9301      	str	r3, [sp, #4]
 800184c:	2302      	movs	r3, #2
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001854:	2105      	movs	r1, #5
 8001856:	4844      	ldr	r0, [pc, #272]	; (8001968 <FreqMenu_DrawPresetMenu+0x24c>)
 8001858:	f00d ffd8 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800185c:	7afb      	ldrb	r3, [r7, #11]
 800185e:	b29a      	uxth	r2, r3
 8001860:	2300      	movs	r3, #0
 8001862:	9301      	str	r3, [sp, #4]
 8001864:	2302      	movs	r3, #2
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800186c:	2105      	movs	r1, #5
 800186e:	483f      	ldr	r0, [pc, #252]	; (800196c <FreqMenu_DrawPresetMenu+0x250>)
 8001870:	f00d ffcc 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001874:	7abb      	ldrb	r3, [r7, #10]
 8001876:	b29a      	uxth	r2, r3
 8001878:	2300      	movs	r3, #0
 800187a:	9301      	str	r3, [sp, #4]
 800187c:	2302      	movs	r3, #2
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001884:	2105      	movs	r1, #5
 8001886:	483a      	ldr	r0, [pc, #232]	; (8001970 <FreqMenu_DrawPresetMenu+0x254>)
 8001888:	f00d ffc0 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800188c:	7a7b      	ldrb	r3, [r7, #9]
 800188e:	b29a      	uxth	r2, r3
 8001890:	2300      	movs	r3, #0
 8001892:	9301      	str	r3, [sp, #4]
 8001894:	2302      	movs	r3, #2
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800189c:	2105      	movs	r1, #5
 800189e:	4835      	ldr	r0, [pc, #212]	; (8001974 <FreqMenu_DrawPresetMenu+0x258>)
 80018a0:	f00d ffb4 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	2300      	movs	r3, #0
 80018aa:	9301      	str	r3, [sp, #4]
 80018ac:	2302      	movs	r3, #2
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018b4:	2178      	movs	r1, #120	; 0x78
 80018b6:	4830      	ldr	r0, [pc, #192]	; (8001978 <FreqMenu_DrawPresetMenu+0x25c>)
 80018b8:	f00d ffa8 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018bc:	7bbb      	ldrb	r3, [r7, #14]
 80018be:	b29a      	uxth	r2, r3
 80018c0:	2300      	movs	r3, #0
 80018c2:	9301      	str	r3, [sp, #4]
 80018c4:	2302      	movs	r3, #2
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018cc:	2178      	movs	r1, #120	; 0x78
 80018ce:	482b      	ldr	r0, [pc, #172]	; (800197c <FreqMenu_DrawPresetMenu+0x260>)
 80018d0:	f00d ff9c 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018d4:	7b7b      	ldrb	r3, [r7, #13]
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	2300      	movs	r3, #0
 80018da:	9301      	str	r3, [sp, #4]
 80018dc:	2302      	movs	r3, #2
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018e4:	2178      	movs	r1, #120	; 0x78
 80018e6:	4826      	ldr	r0, [pc, #152]	; (8001980 <FreqMenu_DrawPresetMenu+0x264>)
 80018e8:	f00d ff90 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018ec:	7b3b      	ldrb	r3, [r7, #12]
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	2300      	movs	r3, #0
 80018f2:	9301      	str	r3, [sp, #4]
 80018f4:	2302      	movs	r3, #2
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018fc:	2178      	movs	r1, #120	; 0x78
 80018fe:	4821      	ldr	r0, [pc, #132]	; (8001984 <FreqMenu_DrawPresetMenu+0x268>)
 8001900:	f00d ff84 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001904:	7afb      	ldrb	r3, [r7, #11]
 8001906:	b29a      	uxth	r2, r3
 8001908:	2300      	movs	r3, #0
 800190a:	9301      	str	r3, [sp, #4]
 800190c:	2302      	movs	r3, #2
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001914:	2178      	movs	r1, #120	; 0x78
 8001916:	481c      	ldr	r0, [pc, #112]	; (8001988 <FreqMenu_DrawPresetMenu+0x26c>)
 8001918:	f00d ff78 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800191c:	7abb      	ldrb	r3, [r7, #10]
 800191e:	b29a      	uxth	r2, r3
 8001920:	2300      	movs	r3, #0
 8001922:	9301      	str	r3, [sp, #4]
 8001924:	2302      	movs	r3, #2
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800192c:	2178      	movs	r1, #120	; 0x78
 800192e:	4817      	ldr	r0, [pc, #92]	; (800198c <FreqMenu_DrawPresetMenu+0x270>)
 8001930:	f00d ff6c 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001934:	7a7b      	ldrb	r3, [r7, #9]
 8001936:	b29a      	uxth	r2, r3
 8001938:	2300      	movs	r3, #0
 800193a:	9301      	str	r3, [sp, #4]
 800193c:	2302      	movs	r3, #2
 800193e:	9300      	str	r3, [sp, #0]
 8001940:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001944:	2178      	movs	r1, #120	; 0x78
 8001946:	4812      	ldr	r0, [pc, #72]	; (8001990 <FreqMenu_DrawPresetMenu+0x274>)
 8001948:	f00d ff60 	bl	800f80c <ILI9341_Draw_Text>
				break;
 800194c:	f001 b974 	b.w	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
 8001950:	08014884 	.word	0x08014884
 8001954:	000124f8 	.word	0x000124f8
 8001958:	000186a0 	.word	0x000186a0
 800195c:	08014898 	.word	0x08014898
 8001960:	080148a0 	.word	0x080148a0
 8001964:	080148a8 	.word	0x080148a8
 8001968:	080148b0 	.word	0x080148b0
 800196c:	080148b8 	.word	0x080148b8
 8001970:	080148c0 	.word	0x080148c0
 8001974:	080148c8 	.word	0x080148c8
 8001978:	080148d0 	.word	0x080148d0
 800197c:	080148d8 	.word	0x080148d8
 8001980:	080148e0 	.word	0x080148e0
 8001984:	080148e8 	.word	0x080148e8
 8001988:	080148f0 	.word	0x080148f0
 800198c:	080148f8 	.word	0x080148f8
 8001990:	08014900 	.word	0x08014900
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001994:	7bfb      	ldrb	r3, [r7, #15]
 8001996:	b29a      	uxth	r2, r3
 8001998:	2300      	movs	r3, #0
 800199a:	9301      	str	r3, [sp, #4]
 800199c:	2302      	movs	r3, #2
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019a4:	2105      	movs	r1, #5
 80019a6:	48a5      	ldr	r0, [pc, #660]	; (8001c3c <FreqMenu_DrawPresetMenu+0x520>)
 80019a8:	f00d ff30 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80019ac:	7bbb      	ldrb	r3, [r7, #14]
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80019b4:	9301      	str	r3, [sp, #4]
 80019b6:	2302      	movs	r3, #2
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	2300      	movs	r3, #0
 80019bc:	2105      	movs	r1, #5
 80019be:	48a0      	ldr	r0, [pc, #640]	; (8001c40 <FreqMenu_DrawPresetMenu+0x524>)
 80019c0:	f00d ff24 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019c4:	7b7b      	ldrb	r3, [r7, #13]
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	2300      	movs	r3, #0
 80019ca:	9301      	str	r3, [sp, #4]
 80019cc:	2302      	movs	r3, #2
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019d4:	2105      	movs	r1, #5
 80019d6:	489b      	ldr	r0, [pc, #620]	; (8001c44 <FreqMenu_DrawPresetMenu+0x528>)
 80019d8:	f00d ff18 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019dc:	7b3b      	ldrb	r3, [r7, #12]
 80019de:	b29a      	uxth	r2, r3
 80019e0:	2300      	movs	r3, #0
 80019e2:	9301      	str	r3, [sp, #4]
 80019e4:	2302      	movs	r3, #2
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019ec:	2105      	movs	r1, #5
 80019ee:	4896      	ldr	r0, [pc, #600]	; (8001c48 <FreqMenu_DrawPresetMenu+0x52c>)
 80019f0:	f00d ff0c 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019f4:	7afb      	ldrb	r3, [r7, #11]
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	2300      	movs	r3, #0
 80019fa:	9301      	str	r3, [sp, #4]
 80019fc:	2302      	movs	r3, #2
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a04:	2105      	movs	r1, #5
 8001a06:	4891      	ldr	r0, [pc, #580]	; (8001c4c <FreqMenu_DrawPresetMenu+0x530>)
 8001a08:	f00d ff00 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a0c:	7abb      	ldrb	r3, [r7, #10]
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	2300      	movs	r3, #0
 8001a12:	9301      	str	r3, [sp, #4]
 8001a14:	2302      	movs	r3, #2
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a1c:	2105      	movs	r1, #5
 8001a1e:	488c      	ldr	r0, [pc, #560]	; (8001c50 <FreqMenu_DrawPresetMenu+0x534>)
 8001a20:	f00d fef4 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a24:	7a7b      	ldrb	r3, [r7, #9]
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	2300      	movs	r3, #0
 8001a2a:	9301      	str	r3, [sp, #4]
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a34:	2105      	movs	r1, #5
 8001a36:	4887      	ldr	r0, [pc, #540]	; (8001c54 <FreqMenu_DrawPresetMenu+0x538>)
 8001a38:	f00d fee8 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	2300      	movs	r3, #0
 8001a42:	9301      	str	r3, [sp, #4]
 8001a44:	2302      	movs	r3, #2
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a4c:	2178      	movs	r1, #120	; 0x78
 8001a4e:	4882      	ldr	r0, [pc, #520]	; (8001c58 <FreqMenu_DrawPresetMenu+0x53c>)
 8001a50:	f00d fedc 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a54:	7bbb      	ldrb	r3, [r7, #14]
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	2300      	movs	r3, #0
 8001a5a:	9301      	str	r3, [sp, #4]
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a64:	2178      	movs	r1, #120	; 0x78
 8001a66:	487d      	ldr	r0, [pc, #500]	; (8001c5c <FreqMenu_DrawPresetMenu+0x540>)
 8001a68:	f00d fed0 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a6c:	7b7b      	ldrb	r3, [r7, #13]
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	2300      	movs	r3, #0
 8001a72:	9301      	str	r3, [sp, #4]
 8001a74:	2302      	movs	r3, #2
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a7c:	2178      	movs	r1, #120	; 0x78
 8001a7e:	4878      	ldr	r0, [pc, #480]	; (8001c60 <FreqMenu_DrawPresetMenu+0x544>)
 8001a80:	f00d fec4 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a84:	7b3b      	ldrb	r3, [r7, #12]
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	2300      	movs	r3, #0
 8001a8a:	9301      	str	r3, [sp, #4]
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a94:	2178      	movs	r1, #120	; 0x78
 8001a96:	4873      	ldr	r0, [pc, #460]	; (8001c64 <FreqMenu_DrawPresetMenu+0x548>)
 8001a98:	f00d feb8 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a9c:	7afb      	ldrb	r3, [r7, #11]
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	9301      	str	r3, [sp, #4]
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	9300      	str	r3, [sp, #0]
 8001aa8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001aac:	2178      	movs	r1, #120	; 0x78
 8001aae:	486e      	ldr	r0, [pc, #440]	; (8001c68 <FreqMenu_DrawPresetMenu+0x54c>)
 8001ab0:	f00d feac 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ab4:	7abb      	ldrb	r3, [r7, #10]
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	2300      	movs	r3, #0
 8001aba:	9301      	str	r3, [sp, #4]
 8001abc:	2302      	movs	r3, #2
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ac4:	2178      	movs	r1, #120	; 0x78
 8001ac6:	4869      	ldr	r0, [pc, #420]	; (8001c6c <FreqMenu_DrawPresetMenu+0x550>)
 8001ac8:	f00d fea0 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001acc:	7a7b      	ldrb	r3, [r7, #9]
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	9301      	str	r3, [sp, #4]
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001adc:	2178      	movs	r1, #120	; 0x78
 8001ade:	4864      	ldr	r0, [pc, #400]	; (8001c70 <FreqMenu_DrawPresetMenu+0x554>)
 8001ae0:	f00d fe94 	bl	800f80c <ILI9341_Draw_Text>
				break;
 8001ae4:	f001 b8a8 	b.w	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ae8:	7bfb      	ldrb	r3, [r7, #15]
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	2300      	movs	r3, #0
 8001aee:	9301      	str	r3, [sp, #4]
 8001af0:	2302      	movs	r3, #2
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001af8:	2105      	movs	r1, #5
 8001afa:	4850      	ldr	r0, [pc, #320]	; (8001c3c <FreqMenu_DrawPresetMenu+0x520>)
 8001afc:	f00d fe86 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b00:	7bbb      	ldrb	r3, [r7, #14]
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	2300      	movs	r3, #0
 8001b06:	9301      	str	r3, [sp, #4]
 8001b08:	2302      	movs	r3, #2
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b10:	2105      	movs	r1, #5
 8001b12:	484b      	ldr	r0, [pc, #300]	; (8001c40 <FreqMenu_DrawPresetMenu+0x524>)
 8001b14:	f00d fe7a 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001b18:	7b7b      	ldrb	r3, [r7, #13]
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001b20:	9301      	str	r3, [sp, #4]
 8001b22:	2302      	movs	r3, #2
 8001b24:	9300      	str	r3, [sp, #0]
 8001b26:	2300      	movs	r3, #0
 8001b28:	2105      	movs	r1, #5
 8001b2a:	4846      	ldr	r0, [pc, #280]	; (8001c44 <FreqMenu_DrawPresetMenu+0x528>)
 8001b2c:	f00d fe6e 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b30:	7b3b      	ldrb	r3, [r7, #12]
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	2300      	movs	r3, #0
 8001b36:	9301      	str	r3, [sp, #4]
 8001b38:	2302      	movs	r3, #2
 8001b3a:	9300      	str	r3, [sp, #0]
 8001b3c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b40:	2105      	movs	r1, #5
 8001b42:	4841      	ldr	r0, [pc, #260]	; (8001c48 <FreqMenu_DrawPresetMenu+0x52c>)
 8001b44:	f00d fe62 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b48:	7afb      	ldrb	r3, [r7, #11]
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	9301      	str	r3, [sp, #4]
 8001b50:	2302      	movs	r3, #2
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b58:	2105      	movs	r1, #5
 8001b5a:	483c      	ldr	r0, [pc, #240]	; (8001c4c <FreqMenu_DrawPresetMenu+0x530>)
 8001b5c:	f00d fe56 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b60:	7abb      	ldrb	r3, [r7, #10]
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	2300      	movs	r3, #0
 8001b66:	9301      	str	r3, [sp, #4]
 8001b68:	2302      	movs	r3, #2
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b70:	2105      	movs	r1, #5
 8001b72:	4837      	ldr	r0, [pc, #220]	; (8001c50 <FreqMenu_DrawPresetMenu+0x534>)
 8001b74:	f00d fe4a 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b78:	7a7b      	ldrb	r3, [r7, #9]
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	9301      	str	r3, [sp, #4]
 8001b80:	2302      	movs	r3, #2
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b88:	2105      	movs	r1, #5
 8001b8a:	4832      	ldr	r0, [pc, #200]	; (8001c54 <FreqMenu_DrawPresetMenu+0x538>)
 8001b8c:	f00d fe3e 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	2300      	movs	r3, #0
 8001b96:	9301      	str	r3, [sp, #4]
 8001b98:	2302      	movs	r3, #2
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ba0:	2178      	movs	r1, #120	; 0x78
 8001ba2:	482d      	ldr	r0, [pc, #180]	; (8001c58 <FreqMenu_DrawPresetMenu+0x53c>)
 8001ba4:	f00d fe32 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ba8:	7bbb      	ldrb	r3, [r7, #14]
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	2300      	movs	r3, #0
 8001bae:	9301      	str	r3, [sp, #4]
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bb8:	2178      	movs	r1, #120	; 0x78
 8001bba:	4828      	ldr	r0, [pc, #160]	; (8001c5c <FreqMenu_DrawPresetMenu+0x540>)
 8001bbc:	f00d fe26 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bc0:	7b7b      	ldrb	r3, [r7, #13]
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	9301      	str	r3, [sp, #4]
 8001bc8:	2302      	movs	r3, #2
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bd0:	2178      	movs	r1, #120	; 0x78
 8001bd2:	4823      	ldr	r0, [pc, #140]	; (8001c60 <FreqMenu_DrawPresetMenu+0x544>)
 8001bd4:	f00d fe1a 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bd8:	7b3b      	ldrb	r3, [r7, #12]
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	2300      	movs	r3, #0
 8001bde:	9301      	str	r3, [sp, #4]
 8001be0:	2302      	movs	r3, #2
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001be8:	2178      	movs	r1, #120	; 0x78
 8001bea:	481e      	ldr	r0, [pc, #120]	; (8001c64 <FreqMenu_DrawPresetMenu+0x548>)
 8001bec:	f00d fe0e 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bf0:	7afb      	ldrb	r3, [r7, #11]
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	9301      	str	r3, [sp, #4]
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	9300      	str	r3, [sp, #0]
 8001bfc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c00:	2178      	movs	r1, #120	; 0x78
 8001c02:	4819      	ldr	r0, [pc, #100]	; (8001c68 <FreqMenu_DrawPresetMenu+0x54c>)
 8001c04:	f00d fe02 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c08:	7abb      	ldrb	r3, [r7, #10]
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	9301      	str	r3, [sp, #4]
 8001c10:	2302      	movs	r3, #2
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c18:	2178      	movs	r1, #120	; 0x78
 8001c1a:	4814      	ldr	r0, [pc, #80]	; (8001c6c <FreqMenu_DrawPresetMenu+0x550>)
 8001c1c:	f00d fdf6 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c20:	7a7b      	ldrb	r3, [r7, #9]
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	2300      	movs	r3, #0
 8001c26:	9301      	str	r3, [sp, #4]
 8001c28:	2302      	movs	r3, #2
 8001c2a:	9300      	str	r3, [sp, #0]
 8001c2c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c30:	2178      	movs	r1, #120	; 0x78
 8001c32:	480f      	ldr	r0, [pc, #60]	; (8001c70 <FreqMenu_DrawPresetMenu+0x554>)
 8001c34:	f00d fdea 	bl	800f80c <ILI9341_Draw_Text>
				break;
 8001c38:	f000 bffe 	b.w	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
 8001c3c:	08014898 	.word	0x08014898
 8001c40:	080148a0 	.word	0x080148a0
 8001c44:	080148a8 	.word	0x080148a8
 8001c48:	080148b0 	.word	0x080148b0
 8001c4c:	080148b8 	.word	0x080148b8
 8001c50:	080148c0 	.word	0x080148c0
 8001c54:	080148c8 	.word	0x080148c8
 8001c58:	080148d0 	.word	0x080148d0
 8001c5c:	080148d8 	.word	0x080148d8
 8001c60:	080148e0 	.word	0x080148e0
 8001c64:	080148e8 	.word	0x080148e8
 8001c68:	080148f0 	.word	0x080148f0
 8001c6c:	080148f8 	.word	0x080148f8
 8001c70:	08014900 	.word	0x08014900
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	2300      	movs	r3, #0
 8001c7a:	9301      	str	r3, [sp, #4]
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c84:	2105      	movs	r1, #5
 8001c86:	48a5      	ldr	r0, [pc, #660]	; (8001f1c <FreqMenu_DrawPresetMenu+0x800>)
 8001c88:	f00d fdc0 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c8c:	7bbb      	ldrb	r3, [r7, #14]
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	2300      	movs	r3, #0
 8001c92:	9301      	str	r3, [sp, #4]
 8001c94:	2302      	movs	r3, #2
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c9c:	2105      	movs	r1, #5
 8001c9e:	48a0      	ldr	r0, [pc, #640]	; (8001f20 <FreqMenu_DrawPresetMenu+0x804>)
 8001ca0:	f00d fdb4 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ca4:	7b7b      	ldrb	r3, [r7, #13]
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	2300      	movs	r3, #0
 8001caa:	9301      	str	r3, [sp, #4]
 8001cac:	2302      	movs	r3, #2
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cb4:	2105      	movs	r1, #5
 8001cb6:	489b      	ldr	r0, [pc, #620]	; (8001f24 <FreqMenu_DrawPresetMenu+0x808>)
 8001cb8:	f00d fda8 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001cbc:	7b3b      	ldrb	r3, [r7, #12]
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001cc4:	9301      	str	r3, [sp, #4]
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	2300      	movs	r3, #0
 8001ccc:	2105      	movs	r1, #5
 8001cce:	4896      	ldr	r0, [pc, #600]	; (8001f28 <FreqMenu_DrawPresetMenu+0x80c>)
 8001cd0:	f00d fd9c 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cd4:	7afb      	ldrb	r3, [r7, #11]
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	2300      	movs	r3, #0
 8001cda:	9301      	str	r3, [sp, #4]
 8001cdc:	2302      	movs	r3, #2
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ce4:	2105      	movs	r1, #5
 8001ce6:	4891      	ldr	r0, [pc, #580]	; (8001f2c <FreqMenu_DrawPresetMenu+0x810>)
 8001ce8:	f00d fd90 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cec:	7abb      	ldrb	r3, [r7, #10]
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	9301      	str	r3, [sp, #4]
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	9300      	str	r3, [sp, #0]
 8001cf8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cfc:	2105      	movs	r1, #5
 8001cfe:	488c      	ldr	r0, [pc, #560]	; (8001f30 <FreqMenu_DrawPresetMenu+0x814>)
 8001d00:	f00d fd84 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d04:	7a7b      	ldrb	r3, [r7, #9]
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	2300      	movs	r3, #0
 8001d0a:	9301      	str	r3, [sp, #4]
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d14:	2105      	movs	r1, #5
 8001d16:	4887      	ldr	r0, [pc, #540]	; (8001f34 <FreqMenu_DrawPresetMenu+0x818>)
 8001d18:	f00d fd78 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	2300      	movs	r3, #0
 8001d22:	9301      	str	r3, [sp, #4]
 8001d24:	2302      	movs	r3, #2
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d2c:	2178      	movs	r1, #120	; 0x78
 8001d2e:	4882      	ldr	r0, [pc, #520]	; (8001f38 <FreqMenu_DrawPresetMenu+0x81c>)
 8001d30:	f00d fd6c 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d34:	7bbb      	ldrb	r3, [r7, #14]
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	2300      	movs	r3, #0
 8001d3a:	9301      	str	r3, [sp, #4]
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d44:	2178      	movs	r1, #120	; 0x78
 8001d46:	487d      	ldr	r0, [pc, #500]	; (8001f3c <FreqMenu_DrawPresetMenu+0x820>)
 8001d48:	f00d fd60 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d4c:	7b7b      	ldrb	r3, [r7, #13]
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	2300      	movs	r3, #0
 8001d52:	9301      	str	r3, [sp, #4]
 8001d54:	2302      	movs	r3, #2
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d5c:	2178      	movs	r1, #120	; 0x78
 8001d5e:	4878      	ldr	r0, [pc, #480]	; (8001f40 <FreqMenu_DrawPresetMenu+0x824>)
 8001d60:	f00d fd54 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d64:	7b3b      	ldrb	r3, [r7, #12]
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	2300      	movs	r3, #0
 8001d6a:	9301      	str	r3, [sp, #4]
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d74:	2178      	movs	r1, #120	; 0x78
 8001d76:	4873      	ldr	r0, [pc, #460]	; (8001f44 <FreqMenu_DrawPresetMenu+0x828>)
 8001d78:	f00d fd48 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d7c:	7afb      	ldrb	r3, [r7, #11]
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	2300      	movs	r3, #0
 8001d82:	9301      	str	r3, [sp, #4]
 8001d84:	2302      	movs	r3, #2
 8001d86:	9300      	str	r3, [sp, #0]
 8001d88:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d8c:	2178      	movs	r1, #120	; 0x78
 8001d8e:	486e      	ldr	r0, [pc, #440]	; (8001f48 <FreqMenu_DrawPresetMenu+0x82c>)
 8001d90:	f00d fd3c 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d94:	7abb      	ldrb	r3, [r7, #10]
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	2300      	movs	r3, #0
 8001d9a:	9301      	str	r3, [sp, #4]
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001da4:	2178      	movs	r1, #120	; 0x78
 8001da6:	4869      	ldr	r0, [pc, #420]	; (8001f4c <FreqMenu_DrawPresetMenu+0x830>)
 8001da8:	f00d fd30 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001dac:	7a7b      	ldrb	r3, [r7, #9]
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	2300      	movs	r3, #0
 8001db2:	9301      	str	r3, [sp, #4]
 8001db4:	2302      	movs	r3, #2
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001dbc:	2178      	movs	r1, #120	; 0x78
 8001dbe:	4864      	ldr	r0, [pc, #400]	; (8001f50 <FreqMenu_DrawPresetMenu+0x834>)
 8001dc0:	f00d fd24 	bl	800f80c <ILI9341_Draw_Text>
				break;
 8001dc4:	f000 bf38 	b.w	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	2300      	movs	r3, #0
 8001dce:	9301      	str	r3, [sp, #4]
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001dd8:	2105      	movs	r1, #5
 8001dda:	4850      	ldr	r0, [pc, #320]	; (8001f1c <FreqMenu_DrawPresetMenu+0x800>)
 8001ddc:	f00d fd16 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001de0:	7bbb      	ldrb	r3, [r7, #14]
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	2300      	movs	r3, #0
 8001de6:	9301      	str	r3, [sp, #4]
 8001de8:	2302      	movs	r3, #2
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001df0:	2105      	movs	r1, #5
 8001df2:	484b      	ldr	r0, [pc, #300]	; (8001f20 <FreqMenu_DrawPresetMenu+0x804>)
 8001df4:	f00d fd0a 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001df8:	7b7b      	ldrb	r3, [r7, #13]
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	9301      	str	r3, [sp, #4]
 8001e00:	2302      	movs	r3, #2
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e08:	2105      	movs	r1, #5
 8001e0a:	4846      	ldr	r0, [pc, #280]	; (8001f24 <FreqMenu_DrawPresetMenu+0x808>)
 8001e0c:	f00d fcfe 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e10:	7b3b      	ldrb	r3, [r7, #12]
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	2300      	movs	r3, #0
 8001e16:	9301      	str	r3, [sp, #4]
 8001e18:	2302      	movs	r3, #2
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e20:	2105      	movs	r1, #5
 8001e22:	4841      	ldr	r0, [pc, #260]	; (8001f28 <FreqMenu_DrawPresetMenu+0x80c>)
 8001e24:	f00d fcf2 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001e28:	7afb      	ldrb	r3, [r7, #11]
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001e30:	9301      	str	r3, [sp, #4]
 8001e32:	2302      	movs	r3, #2
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	2300      	movs	r3, #0
 8001e38:	2105      	movs	r1, #5
 8001e3a:	483c      	ldr	r0, [pc, #240]	; (8001f2c <FreqMenu_DrawPresetMenu+0x810>)
 8001e3c:	f00d fce6 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e40:	7abb      	ldrb	r3, [r7, #10]
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	2300      	movs	r3, #0
 8001e46:	9301      	str	r3, [sp, #4]
 8001e48:	2302      	movs	r3, #2
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e50:	2105      	movs	r1, #5
 8001e52:	4837      	ldr	r0, [pc, #220]	; (8001f30 <FreqMenu_DrawPresetMenu+0x814>)
 8001e54:	f00d fcda 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e58:	7a7b      	ldrb	r3, [r7, #9]
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	9301      	str	r3, [sp, #4]
 8001e60:	2302      	movs	r3, #2
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e68:	2105      	movs	r1, #5
 8001e6a:	4832      	ldr	r0, [pc, #200]	; (8001f34 <FreqMenu_DrawPresetMenu+0x818>)
 8001e6c:	f00d fcce 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e70:	7bfb      	ldrb	r3, [r7, #15]
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	2300      	movs	r3, #0
 8001e76:	9301      	str	r3, [sp, #4]
 8001e78:	2302      	movs	r3, #2
 8001e7a:	9300      	str	r3, [sp, #0]
 8001e7c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e80:	2178      	movs	r1, #120	; 0x78
 8001e82:	482d      	ldr	r0, [pc, #180]	; (8001f38 <FreqMenu_DrawPresetMenu+0x81c>)
 8001e84:	f00d fcc2 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e88:	7bbb      	ldrb	r3, [r7, #14]
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	9301      	str	r3, [sp, #4]
 8001e90:	2302      	movs	r3, #2
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e98:	2178      	movs	r1, #120	; 0x78
 8001e9a:	4828      	ldr	r0, [pc, #160]	; (8001f3c <FreqMenu_DrawPresetMenu+0x820>)
 8001e9c:	f00d fcb6 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ea0:	7b7b      	ldrb	r3, [r7, #13]
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	9301      	str	r3, [sp, #4]
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	9300      	str	r3, [sp, #0]
 8001eac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001eb0:	2178      	movs	r1, #120	; 0x78
 8001eb2:	4823      	ldr	r0, [pc, #140]	; (8001f40 <FreqMenu_DrawPresetMenu+0x824>)
 8001eb4:	f00d fcaa 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001eb8:	7b3b      	ldrb	r3, [r7, #12]
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	9301      	str	r3, [sp, #4]
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ec8:	2178      	movs	r1, #120	; 0x78
 8001eca:	481e      	ldr	r0, [pc, #120]	; (8001f44 <FreqMenu_DrawPresetMenu+0x828>)
 8001ecc:	f00d fc9e 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ed0:	7afb      	ldrb	r3, [r7, #11]
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	9301      	str	r3, [sp, #4]
 8001ed8:	2302      	movs	r3, #2
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ee0:	2178      	movs	r1, #120	; 0x78
 8001ee2:	4819      	ldr	r0, [pc, #100]	; (8001f48 <FreqMenu_DrawPresetMenu+0x82c>)
 8001ee4:	f00d fc92 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ee8:	7abb      	ldrb	r3, [r7, #10]
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	2300      	movs	r3, #0
 8001eee:	9301      	str	r3, [sp, #4]
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ef8:	2178      	movs	r1, #120	; 0x78
 8001efa:	4814      	ldr	r0, [pc, #80]	; (8001f4c <FreqMenu_DrawPresetMenu+0x830>)
 8001efc:	f00d fc86 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f00:	7a7b      	ldrb	r3, [r7, #9]
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	2300      	movs	r3, #0
 8001f06:	9301      	str	r3, [sp, #4]
 8001f08:	2302      	movs	r3, #2
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f10:	2178      	movs	r1, #120	; 0x78
 8001f12:	480f      	ldr	r0, [pc, #60]	; (8001f50 <FreqMenu_DrawPresetMenu+0x834>)
 8001f14:	f00d fc7a 	bl	800f80c <ILI9341_Draw_Text>
				break;
 8001f18:	f000 be8e 	b.w	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
 8001f1c:	08014898 	.word	0x08014898
 8001f20:	080148a0 	.word	0x080148a0
 8001f24:	080148a8 	.word	0x080148a8
 8001f28:	080148b0 	.word	0x080148b0
 8001f2c:	080148b8 	.word	0x080148b8
 8001f30:	080148c0 	.word	0x080148c0
 8001f34:	080148c8 	.word	0x080148c8
 8001f38:	080148d0 	.word	0x080148d0
 8001f3c:	080148d8 	.word	0x080148d8
 8001f40:	080148e0 	.word	0x080148e0
 8001f44:	080148e8 	.word	0x080148e8
 8001f48:	080148f0 	.word	0x080148f0
 8001f4c:	080148f8 	.word	0x080148f8
 8001f50:	08014900 	.word	0x08014900
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f54:	7bfb      	ldrb	r3, [r7, #15]
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	2300      	movs	r3, #0
 8001f5a:	9301      	str	r3, [sp, #4]
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f64:	2105      	movs	r1, #5
 8001f66:	48a5      	ldr	r0, [pc, #660]	; (80021fc <FreqMenu_DrawPresetMenu+0xae0>)
 8001f68:	f00d fc50 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f6c:	7bbb      	ldrb	r3, [r7, #14]
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	2300      	movs	r3, #0
 8001f72:	9301      	str	r3, [sp, #4]
 8001f74:	2302      	movs	r3, #2
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f7c:	2105      	movs	r1, #5
 8001f7e:	48a0      	ldr	r0, [pc, #640]	; (8002200 <FreqMenu_DrawPresetMenu+0xae4>)
 8001f80:	f00d fc44 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f84:	7b7b      	ldrb	r3, [r7, #13]
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	2300      	movs	r3, #0
 8001f8a:	9301      	str	r3, [sp, #4]
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f94:	2105      	movs	r1, #5
 8001f96:	489b      	ldr	r0, [pc, #620]	; (8002204 <FreqMenu_DrawPresetMenu+0xae8>)
 8001f98:	f00d fc38 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f9c:	7b3b      	ldrb	r3, [r7, #12]
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	9301      	str	r3, [sp, #4]
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fac:	2105      	movs	r1, #5
 8001fae:	4896      	ldr	r0, [pc, #600]	; (8002208 <FreqMenu_DrawPresetMenu+0xaec>)
 8001fb0:	f00d fc2c 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fb4:	7afb      	ldrb	r3, [r7, #11]
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	2300      	movs	r3, #0
 8001fba:	9301      	str	r3, [sp, #4]
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fc4:	2105      	movs	r1, #5
 8001fc6:	4891      	ldr	r0, [pc, #580]	; (800220c <FreqMenu_DrawPresetMenu+0xaf0>)
 8001fc8:	f00d fc20 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001fcc:	7abb      	ldrb	r3, [r7, #10]
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001fd4:	9301      	str	r3, [sp, #4]
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	2300      	movs	r3, #0
 8001fdc:	2105      	movs	r1, #5
 8001fde:	488c      	ldr	r0, [pc, #560]	; (8002210 <FreqMenu_DrawPresetMenu+0xaf4>)
 8001fe0:	f00d fc14 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fe4:	7a7b      	ldrb	r3, [r7, #9]
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	2300      	movs	r3, #0
 8001fea:	9301      	str	r3, [sp, #4]
 8001fec:	2302      	movs	r3, #2
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ff4:	2105      	movs	r1, #5
 8001ff6:	4887      	ldr	r0, [pc, #540]	; (8002214 <FreqMenu_DrawPresetMenu+0xaf8>)
 8001ff8:	f00d fc08 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	2300      	movs	r3, #0
 8002002:	9301      	str	r3, [sp, #4]
 8002004:	2302      	movs	r3, #2
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800200c:	2178      	movs	r1, #120	; 0x78
 800200e:	4882      	ldr	r0, [pc, #520]	; (8002218 <FreqMenu_DrawPresetMenu+0xafc>)
 8002010:	f00d fbfc 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002014:	7bbb      	ldrb	r3, [r7, #14]
 8002016:	b29a      	uxth	r2, r3
 8002018:	2300      	movs	r3, #0
 800201a:	9301      	str	r3, [sp, #4]
 800201c:	2302      	movs	r3, #2
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002024:	2178      	movs	r1, #120	; 0x78
 8002026:	487d      	ldr	r0, [pc, #500]	; (800221c <FreqMenu_DrawPresetMenu+0xb00>)
 8002028:	f00d fbf0 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800202c:	7b7b      	ldrb	r3, [r7, #13]
 800202e:	b29a      	uxth	r2, r3
 8002030:	2300      	movs	r3, #0
 8002032:	9301      	str	r3, [sp, #4]
 8002034:	2302      	movs	r3, #2
 8002036:	9300      	str	r3, [sp, #0]
 8002038:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800203c:	2178      	movs	r1, #120	; 0x78
 800203e:	4878      	ldr	r0, [pc, #480]	; (8002220 <FreqMenu_DrawPresetMenu+0xb04>)
 8002040:	f00d fbe4 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002044:	7b3b      	ldrb	r3, [r7, #12]
 8002046:	b29a      	uxth	r2, r3
 8002048:	2300      	movs	r3, #0
 800204a:	9301      	str	r3, [sp, #4]
 800204c:	2302      	movs	r3, #2
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002054:	2178      	movs	r1, #120	; 0x78
 8002056:	4873      	ldr	r0, [pc, #460]	; (8002224 <FreqMenu_DrawPresetMenu+0xb08>)
 8002058:	f00d fbd8 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800205c:	7afb      	ldrb	r3, [r7, #11]
 800205e:	b29a      	uxth	r2, r3
 8002060:	2300      	movs	r3, #0
 8002062:	9301      	str	r3, [sp, #4]
 8002064:	2302      	movs	r3, #2
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800206c:	2178      	movs	r1, #120	; 0x78
 800206e:	486e      	ldr	r0, [pc, #440]	; (8002228 <FreqMenu_DrawPresetMenu+0xb0c>)
 8002070:	f00d fbcc 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002074:	7abb      	ldrb	r3, [r7, #10]
 8002076:	b29a      	uxth	r2, r3
 8002078:	2300      	movs	r3, #0
 800207a:	9301      	str	r3, [sp, #4]
 800207c:	2302      	movs	r3, #2
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002084:	2178      	movs	r1, #120	; 0x78
 8002086:	4869      	ldr	r0, [pc, #420]	; (800222c <FreqMenu_DrawPresetMenu+0xb10>)
 8002088:	f00d fbc0 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800208c:	7a7b      	ldrb	r3, [r7, #9]
 800208e:	b29a      	uxth	r2, r3
 8002090:	2300      	movs	r3, #0
 8002092:	9301      	str	r3, [sp, #4]
 8002094:	2302      	movs	r3, #2
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800209c:	2178      	movs	r1, #120	; 0x78
 800209e:	4864      	ldr	r0, [pc, #400]	; (8002230 <FreqMenu_DrawPresetMenu+0xb14>)
 80020a0:	f00d fbb4 	bl	800f80c <ILI9341_Draw_Text>
				break;
 80020a4:	f000 bdc8 	b.w	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020a8:	7bfb      	ldrb	r3, [r7, #15]
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	2300      	movs	r3, #0
 80020ae:	9301      	str	r3, [sp, #4]
 80020b0:	2302      	movs	r3, #2
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020b8:	2105      	movs	r1, #5
 80020ba:	4850      	ldr	r0, [pc, #320]	; (80021fc <FreqMenu_DrawPresetMenu+0xae0>)
 80020bc:	f00d fba6 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020c0:	7bbb      	ldrb	r3, [r7, #14]
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	2300      	movs	r3, #0
 80020c6:	9301      	str	r3, [sp, #4]
 80020c8:	2302      	movs	r3, #2
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020d0:	2105      	movs	r1, #5
 80020d2:	484b      	ldr	r0, [pc, #300]	; (8002200 <FreqMenu_DrawPresetMenu+0xae4>)
 80020d4:	f00d fb9a 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020d8:	7b7b      	ldrb	r3, [r7, #13]
 80020da:	b29a      	uxth	r2, r3
 80020dc:	2300      	movs	r3, #0
 80020de:	9301      	str	r3, [sp, #4]
 80020e0:	2302      	movs	r3, #2
 80020e2:	9300      	str	r3, [sp, #0]
 80020e4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020e8:	2105      	movs	r1, #5
 80020ea:	4846      	ldr	r0, [pc, #280]	; (8002204 <FreqMenu_DrawPresetMenu+0xae8>)
 80020ec:	f00d fb8e 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020f0:	7b3b      	ldrb	r3, [r7, #12]
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	2300      	movs	r3, #0
 80020f6:	9301      	str	r3, [sp, #4]
 80020f8:	2302      	movs	r3, #2
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002100:	2105      	movs	r1, #5
 8002102:	4841      	ldr	r0, [pc, #260]	; (8002208 <FreqMenu_DrawPresetMenu+0xaec>)
 8002104:	f00d fb82 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002108:	7afb      	ldrb	r3, [r7, #11]
 800210a:	b29a      	uxth	r2, r3
 800210c:	2300      	movs	r3, #0
 800210e:	9301      	str	r3, [sp, #4]
 8002110:	2302      	movs	r3, #2
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002118:	2105      	movs	r1, #5
 800211a:	483c      	ldr	r0, [pc, #240]	; (800220c <FreqMenu_DrawPresetMenu+0xaf0>)
 800211c:	f00d fb76 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002120:	7abb      	ldrb	r3, [r7, #10]
 8002122:	b29a      	uxth	r2, r3
 8002124:	2300      	movs	r3, #0
 8002126:	9301      	str	r3, [sp, #4]
 8002128:	2302      	movs	r3, #2
 800212a:	9300      	str	r3, [sp, #0]
 800212c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002130:	2105      	movs	r1, #5
 8002132:	4837      	ldr	r0, [pc, #220]	; (8002210 <FreqMenu_DrawPresetMenu+0xaf4>)
 8002134:	f00d fb6a 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002138:	7a7b      	ldrb	r3, [r7, #9]
 800213a:	b29a      	uxth	r2, r3
 800213c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002140:	9301      	str	r3, [sp, #4]
 8002142:	2302      	movs	r3, #2
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	2300      	movs	r3, #0
 8002148:	2105      	movs	r1, #5
 800214a:	4832      	ldr	r0, [pc, #200]	; (8002214 <FreqMenu_DrawPresetMenu+0xaf8>)
 800214c:	f00d fb5e 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002150:	7bfb      	ldrb	r3, [r7, #15]
 8002152:	b29a      	uxth	r2, r3
 8002154:	2300      	movs	r3, #0
 8002156:	9301      	str	r3, [sp, #4]
 8002158:	2302      	movs	r3, #2
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002160:	2178      	movs	r1, #120	; 0x78
 8002162:	482d      	ldr	r0, [pc, #180]	; (8002218 <FreqMenu_DrawPresetMenu+0xafc>)
 8002164:	f00d fb52 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002168:	7bbb      	ldrb	r3, [r7, #14]
 800216a:	b29a      	uxth	r2, r3
 800216c:	2300      	movs	r3, #0
 800216e:	9301      	str	r3, [sp, #4]
 8002170:	2302      	movs	r3, #2
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002178:	2178      	movs	r1, #120	; 0x78
 800217a:	4828      	ldr	r0, [pc, #160]	; (800221c <FreqMenu_DrawPresetMenu+0xb00>)
 800217c:	f00d fb46 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002180:	7b7b      	ldrb	r3, [r7, #13]
 8002182:	b29a      	uxth	r2, r3
 8002184:	2300      	movs	r3, #0
 8002186:	9301      	str	r3, [sp, #4]
 8002188:	2302      	movs	r3, #2
 800218a:	9300      	str	r3, [sp, #0]
 800218c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002190:	2178      	movs	r1, #120	; 0x78
 8002192:	4823      	ldr	r0, [pc, #140]	; (8002220 <FreqMenu_DrawPresetMenu+0xb04>)
 8002194:	f00d fb3a 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002198:	7b3b      	ldrb	r3, [r7, #12]
 800219a:	b29a      	uxth	r2, r3
 800219c:	2300      	movs	r3, #0
 800219e:	9301      	str	r3, [sp, #4]
 80021a0:	2302      	movs	r3, #2
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021a8:	2178      	movs	r1, #120	; 0x78
 80021aa:	481e      	ldr	r0, [pc, #120]	; (8002224 <FreqMenu_DrawPresetMenu+0xb08>)
 80021ac:	f00d fb2e 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021b0:	7afb      	ldrb	r3, [r7, #11]
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	2300      	movs	r3, #0
 80021b6:	9301      	str	r3, [sp, #4]
 80021b8:	2302      	movs	r3, #2
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021c0:	2178      	movs	r1, #120	; 0x78
 80021c2:	4819      	ldr	r0, [pc, #100]	; (8002228 <FreqMenu_DrawPresetMenu+0xb0c>)
 80021c4:	f00d fb22 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021c8:	7abb      	ldrb	r3, [r7, #10]
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	2300      	movs	r3, #0
 80021ce:	9301      	str	r3, [sp, #4]
 80021d0:	2302      	movs	r3, #2
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021d8:	2178      	movs	r1, #120	; 0x78
 80021da:	4814      	ldr	r0, [pc, #80]	; (800222c <FreqMenu_DrawPresetMenu+0xb10>)
 80021dc:	f00d fb16 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021e0:	7a7b      	ldrb	r3, [r7, #9]
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	2300      	movs	r3, #0
 80021e6:	9301      	str	r3, [sp, #4]
 80021e8:	2302      	movs	r3, #2
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021f0:	2178      	movs	r1, #120	; 0x78
 80021f2:	480f      	ldr	r0, [pc, #60]	; (8002230 <FreqMenu_DrawPresetMenu+0xb14>)
 80021f4:	f00d fb0a 	bl	800f80c <ILI9341_Draw_Text>
				break;
 80021f8:	f000 bd1e 	b.w	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
 80021fc:	08014898 	.word	0x08014898
 8002200:	080148a0 	.word	0x080148a0
 8002204:	080148a8 	.word	0x080148a8
 8002208:	080148b0 	.word	0x080148b0
 800220c:	080148b8 	.word	0x080148b8
 8002210:	080148c0 	.word	0x080148c0
 8002214:	080148c8 	.word	0x080148c8
 8002218:	080148d0 	.word	0x080148d0
 800221c:	080148d8 	.word	0x080148d8
 8002220:	080148e0 	.word	0x080148e0
 8002224:	080148e8 	.word	0x080148e8
 8002228:	080148f0 	.word	0x080148f0
 800222c:	080148f8 	.word	0x080148f8
 8002230:	08014900 	.word	0x08014900
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002234:	7bfb      	ldrb	r3, [r7, #15]
 8002236:	b29a      	uxth	r2, r3
 8002238:	2300      	movs	r3, #0
 800223a:	9301      	str	r3, [sp, #4]
 800223c:	2302      	movs	r3, #2
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002244:	2105      	movs	r1, #5
 8002246:	48a5      	ldr	r0, [pc, #660]	; (80024dc <FreqMenu_DrawPresetMenu+0xdc0>)
 8002248:	f00d fae0 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800224c:	7bbb      	ldrb	r3, [r7, #14]
 800224e:	b29a      	uxth	r2, r3
 8002250:	2300      	movs	r3, #0
 8002252:	9301      	str	r3, [sp, #4]
 8002254:	2302      	movs	r3, #2
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800225c:	2105      	movs	r1, #5
 800225e:	48a0      	ldr	r0, [pc, #640]	; (80024e0 <FreqMenu_DrawPresetMenu+0xdc4>)
 8002260:	f00d fad4 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002264:	7b7b      	ldrb	r3, [r7, #13]
 8002266:	b29a      	uxth	r2, r3
 8002268:	2300      	movs	r3, #0
 800226a:	9301      	str	r3, [sp, #4]
 800226c:	2302      	movs	r3, #2
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002274:	2105      	movs	r1, #5
 8002276:	489b      	ldr	r0, [pc, #620]	; (80024e4 <FreqMenu_DrawPresetMenu+0xdc8>)
 8002278:	f00d fac8 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800227c:	7b3b      	ldrb	r3, [r7, #12]
 800227e:	b29a      	uxth	r2, r3
 8002280:	2300      	movs	r3, #0
 8002282:	9301      	str	r3, [sp, #4]
 8002284:	2302      	movs	r3, #2
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800228c:	2105      	movs	r1, #5
 800228e:	4896      	ldr	r0, [pc, #600]	; (80024e8 <FreqMenu_DrawPresetMenu+0xdcc>)
 8002290:	f00d fabc 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002294:	7afb      	ldrb	r3, [r7, #11]
 8002296:	b29a      	uxth	r2, r3
 8002298:	2300      	movs	r3, #0
 800229a:	9301      	str	r3, [sp, #4]
 800229c:	2302      	movs	r3, #2
 800229e:	9300      	str	r3, [sp, #0]
 80022a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022a4:	2105      	movs	r1, #5
 80022a6:	4891      	ldr	r0, [pc, #580]	; (80024ec <FreqMenu_DrawPresetMenu+0xdd0>)
 80022a8:	f00d fab0 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022ac:	7abb      	ldrb	r3, [r7, #10]
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	2300      	movs	r3, #0
 80022b2:	9301      	str	r3, [sp, #4]
 80022b4:	2302      	movs	r3, #2
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022bc:	2105      	movs	r1, #5
 80022be:	488c      	ldr	r0, [pc, #560]	; (80024f0 <FreqMenu_DrawPresetMenu+0xdd4>)
 80022c0:	f00d faa4 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022c4:	7a7b      	ldrb	r3, [r7, #9]
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	2300      	movs	r3, #0
 80022ca:	9301      	str	r3, [sp, #4]
 80022cc:	2302      	movs	r3, #2
 80022ce:	9300      	str	r3, [sp, #0]
 80022d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022d4:	2105      	movs	r1, #5
 80022d6:	4887      	ldr	r0, [pc, #540]	; (80024f4 <FreqMenu_DrawPresetMenu+0xdd8>)
 80022d8:	f00d fa98 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80022dc:	7bfb      	ldrb	r3, [r7, #15]
 80022de:	b29a      	uxth	r2, r3
 80022e0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80022e4:	9301      	str	r3, [sp, #4]
 80022e6:	2302      	movs	r3, #2
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	2300      	movs	r3, #0
 80022ec:	2178      	movs	r1, #120	; 0x78
 80022ee:	4882      	ldr	r0, [pc, #520]	; (80024f8 <FreqMenu_DrawPresetMenu+0xddc>)
 80022f0:	f00d fa8c 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022f4:	7bbb      	ldrb	r3, [r7, #14]
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	2300      	movs	r3, #0
 80022fa:	9301      	str	r3, [sp, #4]
 80022fc:	2302      	movs	r3, #2
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002304:	2178      	movs	r1, #120	; 0x78
 8002306:	487d      	ldr	r0, [pc, #500]	; (80024fc <FreqMenu_DrawPresetMenu+0xde0>)
 8002308:	f00d fa80 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800230c:	7b7b      	ldrb	r3, [r7, #13]
 800230e:	b29a      	uxth	r2, r3
 8002310:	2300      	movs	r3, #0
 8002312:	9301      	str	r3, [sp, #4]
 8002314:	2302      	movs	r3, #2
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800231c:	2178      	movs	r1, #120	; 0x78
 800231e:	4878      	ldr	r0, [pc, #480]	; (8002500 <FreqMenu_DrawPresetMenu+0xde4>)
 8002320:	f00d fa74 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002324:	7b3b      	ldrb	r3, [r7, #12]
 8002326:	b29a      	uxth	r2, r3
 8002328:	2300      	movs	r3, #0
 800232a:	9301      	str	r3, [sp, #4]
 800232c:	2302      	movs	r3, #2
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002334:	2178      	movs	r1, #120	; 0x78
 8002336:	4873      	ldr	r0, [pc, #460]	; (8002504 <FreqMenu_DrawPresetMenu+0xde8>)
 8002338:	f00d fa68 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800233c:	7afb      	ldrb	r3, [r7, #11]
 800233e:	b29a      	uxth	r2, r3
 8002340:	2300      	movs	r3, #0
 8002342:	9301      	str	r3, [sp, #4]
 8002344:	2302      	movs	r3, #2
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800234c:	2178      	movs	r1, #120	; 0x78
 800234e:	486e      	ldr	r0, [pc, #440]	; (8002508 <FreqMenu_DrawPresetMenu+0xdec>)
 8002350:	f00d fa5c 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002354:	7abb      	ldrb	r3, [r7, #10]
 8002356:	b29a      	uxth	r2, r3
 8002358:	2300      	movs	r3, #0
 800235a:	9301      	str	r3, [sp, #4]
 800235c:	2302      	movs	r3, #2
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002364:	2178      	movs	r1, #120	; 0x78
 8002366:	4869      	ldr	r0, [pc, #420]	; (800250c <FreqMenu_DrawPresetMenu+0xdf0>)
 8002368:	f00d fa50 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800236c:	7a7b      	ldrb	r3, [r7, #9]
 800236e:	b29a      	uxth	r2, r3
 8002370:	2300      	movs	r3, #0
 8002372:	9301      	str	r3, [sp, #4]
 8002374:	2302      	movs	r3, #2
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800237c:	2178      	movs	r1, #120	; 0x78
 800237e:	4864      	ldr	r0, [pc, #400]	; (8002510 <FreqMenu_DrawPresetMenu+0xdf4>)
 8002380:	f00d fa44 	bl	800f80c <ILI9341_Draw_Text>
				break;
 8002384:	f000 bc58 	b.w	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002388:	7bfb      	ldrb	r3, [r7, #15]
 800238a:	b29a      	uxth	r2, r3
 800238c:	2300      	movs	r3, #0
 800238e:	9301      	str	r3, [sp, #4]
 8002390:	2302      	movs	r3, #2
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002398:	2105      	movs	r1, #5
 800239a:	4850      	ldr	r0, [pc, #320]	; (80024dc <FreqMenu_DrawPresetMenu+0xdc0>)
 800239c:	f00d fa36 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023a0:	7bbb      	ldrb	r3, [r7, #14]
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	2300      	movs	r3, #0
 80023a6:	9301      	str	r3, [sp, #4]
 80023a8:	2302      	movs	r3, #2
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023b0:	2105      	movs	r1, #5
 80023b2:	484b      	ldr	r0, [pc, #300]	; (80024e0 <FreqMenu_DrawPresetMenu+0xdc4>)
 80023b4:	f00d fa2a 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023b8:	7b7b      	ldrb	r3, [r7, #13]
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	2300      	movs	r3, #0
 80023be:	9301      	str	r3, [sp, #4]
 80023c0:	2302      	movs	r3, #2
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023c8:	2105      	movs	r1, #5
 80023ca:	4846      	ldr	r0, [pc, #280]	; (80024e4 <FreqMenu_DrawPresetMenu+0xdc8>)
 80023cc:	f00d fa1e 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023d0:	7b3b      	ldrb	r3, [r7, #12]
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	2300      	movs	r3, #0
 80023d6:	9301      	str	r3, [sp, #4]
 80023d8:	2302      	movs	r3, #2
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023e0:	2105      	movs	r1, #5
 80023e2:	4841      	ldr	r0, [pc, #260]	; (80024e8 <FreqMenu_DrawPresetMenu+0xdcc>)
 80023e4:	f00d fa12 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023e8:	7afb      	ldrb	r3, [r7, #11]
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	2300      	movs	r3, #0
 80023ee:	9301      	str	r3, [sp, #4]
 80023f0:	2302      	movs	r3, #2
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023f8:	2105      	movs	r1, #5
 80023fa:	483c      	ldr	r0, [pc, #240]	; (80024ec <FreqMenu_DrawPresetMenu+0xdd0>)
 80023fc:	f00d fa06 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002400:	7abb      	ldrb	r3, [r7, #10]
 8002402:	b29a      	uxth	r2, r3
 8002404:	2300      	movs	r3, #0
 8002406:	9301      	str	r3, [sp, #4]
 8002408:	2302      	movs	r3, #2
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002410:	2105      	movs	r1, #5
 8002412:	4837      	ldr	r0, [pc, #220]	; (80024f0 <FreqMenu_DrawPresetMenu+0xdd4>)
 8002414:	f00d f9fa 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002418:	7a7b      	ldrb	r3, [r7, #9]
 800241a:	b29a      	uxth	r2, r3
 800241c:	2300      	movs	r3, #0
 800241e:	9301      	str	r3, [sp, #4]
 8002420:	2302      	movs	r3, #2
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002428:	2105      	movs	r1, #5
 800242a:	4832      	ldr	r0, [pc, #200]	; (80024f4 <FreqMenu_DrawPresetMenu+0xdd8>)
 800242c:	f00d f9ee 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002430:	7bfb      	ldrb	r3, [r7, #15]
 8002432:	b29a      	uxth	r2, r3
 8002434:	2300      	movs	r3, #0
 8002436:	9301      	str	r3, [sp, #4]
 8002438:	2302      	movs	r3, #2
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002440:	2178      	movs	r1, #120	; 0x78
 8002442:	482d      	ldr	r0, [pc, #180]	; (80024f8 <FreqMenu_DrawPresetMenu+0xddc>)
 8002444:	f00d f9e2 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002448:	7bbb      	ldrb	r3, [r7, #14]
 800244a:	b29a      	uxth	r2, r3
 800244c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002450:	9301      	str	r3, [sp, #4]
 8002452:	2302      	movs	r3, #2
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	2300      	movs	r3, #0
 8002458:	2178      	movs	r1, #120	; 0x78
 800245a:	4828      	ldr	r0, [pc, #160]	; (80024fc <FreqMenu_DrawPresetMenu+0xde0>)
 800245c:	f00d f9d6 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002460:	7b7b      	ldrb	r3, [r7, #13]
 8002462:	b29a      	uxth	r2, r3
 8002464:	2300      	movs	r3, #0
 8002466:	9301      	str	r3, [sp, #4]
 8002468:	2302      	movs	r3, #2
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002470:	2178      	movs	r1, #120	; 0x78
 8002472:	4823      	ldr	r0, [pc, #140]	; (8002500 <FreqMenu_DrawPresetMenu+0xde4>)
 8002474:	f00d f9ca 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002478:	7b3b      	ldrb	r3, [r7, #12]
 800247a:	b29a      	uxth	r2, r3
 800247c:	2300      	movs	r3, #0
 800247e:	9301      	str	r3, [sp, #4]
 8002480:	2302      	movs	r3, #2
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002488:	2178      	movs	r1, #120	; 0x78
 800248a:	481e      	ldr	r0, [pc, #120]	; (8002504 <FreqMenu_DrawPresetMenu+0xde8>)
 800248c:	f00d f9be 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002490:	7afb      	ldrb	r3, [r7, #11]
 8002492:	b29a      	uxth	r2, r3
 8002494:	2300      	movs	r3, #0
 8002496:	9301      	str	r3, [sp, #4]
 8002498:	2302      	movs	r3, #2
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024a0:	2178      	movs	r1, #120	; 0x78
 80024a2:	4819      	ldr	r0, [pc, #100]	; (8002508 <FreqMenu_DrawPresetMenu+0xdec>)
 80024a4:	f00d f9b2 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024a8:	7abb      	ldrb	r3, [r7, #10]
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	2300      	movs	r3, #0
 80024ae:	9301      	str	r3, [sp, #4]
 80024b0:	2302      	movs	r3, #2
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024b8:	2178      	movs	r1, #120	; 0x78
 80024ba:	4814      	ldr	r0, [pc, #80]	; (800250c <FreqMenu_DrawPresetMenu+0xdf0>)
 80024bc:	f00d f9a6 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024c0:	7a7b      	ldrb	r3, [r7, #9]
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	2300      	movs	r3, #0
 80024c6:	9301      	str	r3, [sp, #4]
 80024c8:	2302      	movs	r3, #2
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024d0:	2178      	movs	r1, #120	; 0x78
 80024d2:	480f      	ldr	r0, [pc, #60]	; (8002510 <FreqMenu_DrawPresetMenu+0xdf4>)
 80024d4:	f00d f99a 	bl	800f80c <ILI9341_Draw_Text>
				break;
 80024d8:	e3ae      	b.n	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
 80024da:	bf00      	nop
 80024dc:	08014898 	.word	0x08014898
 80024e0:	080148a0 	.word	0x080148a0
 80024e4:	080148a8 	.word	0x080148a8
 80024e8:	080148b0 	.word	0x080148b0
 80024ec:	080148b8 	.word	0x080148b8
 80024f0:	080148c0 	.word	0x080148c0
 80024f4:	080148c8 	.word	0x080148c8
 80024f8:	080148d0 	.word	0x080148d0
 80024fc:	080148d8 	.word	0x080148d8
 8002500:	080148e0 	.word	0x080148e0
 8002504:	080148e8 	.word	0x080148e8
 8002508:	080148f0 	.word	0x080148f0
 800250c:	080148f8 	.word	0x080148f8
 8002510:	08014900 	.word	0x08014900
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002514:	7bfb      	ldrb	r3, [r7, #15]
 8002516:	b29a      	uxth	r2, r3
 8002518:	2300      	movs	r3, #0
 800251a:	9301      	str	r3, [sp, #4]
 800251c:	2302      	movs	r3, #2
 800251e:	9300      	str	r3, [sp, #0]
 8002520:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002524:	2105      	movs	r1, #5
 8002526:	48a4      	ldr	r0, [pc, #656]	; (80027b8 <FreqMenu_DrawPresetMenu+0x109c>)
 8002528:	f00d f970 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800252c:	7bbb      	ldrb	r3, [r7, #14]
 800252e:	b29a      	uxth	r2, r3
 8002530:	2300      	movs	r3, #0
 8002532:	9301      	str	r3, [sp, #4]
 8002534:	2302      	movs	r3, #2
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800253c:	2105      	movs	r1, #5
 800253e:	489f      	ldr	r0, [pc, #636]	; (80027bc <FreqMenu_DrawPresetMenu+0x10a0>)
 8002540:	f00d f964 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002544:	7b7b      	ldrb	r3, [r7, #13]
 8002546:	b29a      	uxth	r2, r3
 8002548:	2300      	movs	r3, #0
 800254a:	9301      	str	r3, [sp, #4]
 800254c:	2302      	movs	r3, #2
 800254e:	9300      	str	r3, [sp, #0]
 8002550:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002554:	2105      	movs	r1, #5
 8002556:	489a      	ldr	r0, [pc, #616]	; (80027c0 <FreqMenu_DrawPresetMenu+0x10a4>)
 8002558:	f00d f958 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800255c:	7b3b      	ldrb	r3, [r7, #12]
 800255e:	b29a      	uxth	r2, r3
 8002560:	2300      	movs	r3, #0
 8002562:	9301      	str	r3, [sp, #4]
 8002564:	2302      	movs	r3, #2
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800256c:	2105      	movs	r1, #5
 800256e:	4895      	ldr	r0, [pc, #596]	; (80027c4 <FreqMenu_DrawPresetMenu+0x10a8>)
 8002570:	f00d f94c 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002574:	7afb      	ldrb	r3, [r7, #11]
 8002576:	b29a      	uxth	r2, r3
 8002578:	2300      	movs	r3, #0
 800257a:	9301      	str	r3, [sp, #4]
 800257c:	2302      	movs	r3, #2
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002584:	2105      	movs	r1, #5
 8002586:	4890      	ldr	r0, [pc, #576]	; (80027c8 <FreqMenu_DrawPresetMenu+0x10ac>)
 8002588:	f00d f940 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800258c:	7abb      	ldrb	r3, [r7, #10]
 800258e:	b29a      	uxth	r2, r3
 8002590:	2300      	movs	r3, #0
 8002592:	9301      	str	r3, [sp, #4]
 8002594:	2302      	movs	r3, #2
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800259c:	2105      	movs	r1, #5
 800259e:	488b      	ldr	r0, [pc, #556]	; (80027cc <FreqMenu_DrawPresetMenu+0x10b0>)
 80025a0:	f00d f934 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025a4:	7a7b      	ldrb	r3, [r7, #9]
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	2300      	movs	r3, #0
 80025aa:	9301      	str	r3, [sp, #4]
 80025ac:	2302      	movs	r3, #2
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025b4:	2105      	movs	r1, #5
 80025b6:	4886      	ldr	r0, [pc, #536]	; (80027d0 <FreqMenu_DrawPresetMenu+0x10b4>)
 80025b8:	f00d f928 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
 80025be:	b29a      	uxth	r2, r3
 80025c0:	2300      	movs	r3, #0
 80025c2:	9301      	str	r3, [sp, #4]
 80025c4:	2302      	movs	r3, #2
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025cc:	2178      	movs	r1, #120	; 0x78
 80025ce:	4881      	ldr	r0, [pc, #516]	; (80027d4 <FreqMenu_DrawPresetMenu+0x10b8>)
 80025d0:	f00d f91c 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025d4:	7bbb      	ldrb	r3, [r7, #14]
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	2300      	movs	r3, #0
 80025da:	9301      	str	r3, [sp, #4]
 80025dc:	2302      	movs	r3, #2
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025e4:	2178      	movs	r1, #120	; 0x78
 80025e6:	487c      	ldr	r0, [pc, #496]	; (80027d8 <FreqMenu_DrawPresetMenu+0x10bc>)
 80025e8:	f00d f910 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80025ec:	7b7b      	ldrb	r3, [r7, #13]
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80025f4:	9301      	str	r3, [sp, #4]
 80025f6:	2302      	movs	r3, #2
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	2300      	movs	r3, #0
 80025fc:	2178      	movs	r1, #120	; 0x78
 80025fe:	4877      	ldr	r0, [pc, #476]	; (80027dc <FreqMenu_DrawPresetMenu+0x10c0>)
 8002600:	f00d f904 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002604:	7b3b      	ldrb	r3, [r7, #12]
 8002606:	b29a      	uxth	r2, r3
 8002608:	2300      	movs	r3, #0
 800260a:	9301      	str	r3, [sp, #4]
 800260c:	2302      	movs	r3, #2
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002614:	2178      	movs	r1, #120	; 0x78
 8002616:	4872      	ldr	r0, [pc, #456]	; (80027e0 <FreqMenu_DrawPresetMenu+0x10c4>)
 8002618:	f00d f8f8 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800261c:	7afb      	ldrb	r3, [r7, #11]
 800261e:	b29a      	uxth	r2, r3
 8002620:	2300      	movs	r3, #0
 8002622:	9301      	str	r3, [sp, #4]
 8002624:	2302      	movs	r3, #2
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800262c:	2178      	movs	r1, #120	; 0x78
 800262e:	486d      	ldr	r0, [pc, #436]	; (80027e4 <FreqMenu_DrawPresetMenu+0x10c8>)
 8002630:	f00d f8ec 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002634:	7abb      	ldrb	r3, [r7, #10]
 8002636:	b29a      	uxth	r2, r3
 8002638:	2300      	movs	r3, #0
 800263a:	9301      	str	r3, [sp, #4]
 800263c:	2302      	movs	r3, #2
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002644:	2178      	movs	r1, #120	; 0x78
 8002646:	4868      	ldr	r0, [pc, #416]	; (80027e8 <FreqMenu_DrawPresetMenu+0x10cc>)
 8002648:	f00d f8e0 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800264c:	7a7b      	ldrb	r3, [r7, #9]
 800264e:	b29a      	uxth	r2, r3
 8002650:	2300      	movs	r3, #0
 8002652:	9301      	str	r3, [sp, #4]
 8002654:	2302      	movs	r3, #2
 8002656:	9300      	str	r3, [sp, #0]
 8002658:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800265c:	2178      	movs	r1, #120	; 0x78
 800265e:	4863      	ldr	r0, [pc, #396]	; (80027ec <FreqMenu_DrawPresetMenu+0x10d0>)
 8002660:	f00d f8d4 	bl	800f80c <ILI9341_Draw_Text>
				break;
 8002664:	e2e8      	b.n	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002666:	7bfb      	ldrb	r3, [r7, #15]
 8002668:	b29a      	uxth	r2, r3
 800266a:	2300      	movs	r3, #0
 800266c:	9301      	str	r3, [sp, #4]
 800266e:	2302      	movs	r3, #2
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002676:	2105      	movs	r1, #5
 8002678:	484f      	ldr	r0, [pc, #316]	; (80027b8 <FreqMenu_DrawPresetMenu+0x109c>)
 800267a:	f00d f8c7 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800267e:	7bbb      	ldrb	r3, [r7, #14]
 8002680:	b29a      	uxth	r2, r3
 8002682:	2300      	movs	r3, #0
 8002684:	9301      	str	r3, [sp, #4]
 8002686:	2302      	movs	r3, #2
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800268e:	2105      	movs	r1, #5
 8002690:	484a      	ldr	r0, [pc, #296]	; (80027bc <FreqMenu_DrawPresetMenu+0x10a0>)
 8002692:	f00d f8bb 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002696:	7b7b      	ldrb	r3, [r7, #13]
 8002698:	b29a      	uxth	r2, r3
 800269a:	2300      	movs	r3, #0
 800269c:	9301      	str	r3, [sp, #4]
 800269e:	2302      	movs	r3, #2
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026a6:	2105      	movs	r1, #5
 80026a8:	4845      	ldr	r0, [pc, #276]	; (80027c0 <FreqMenu_DrawPresetMenu+0x10a4>)
 80026aa:	f00d f8af 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026ae:	7b3b      	ldrb	r3, [r7, #12]
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	2300      	movs	r3, #0
 80026b4:	9301      	str	r3, [sp, #4]
 80026b6:	2302      	movs	r3, #2
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026be:	2105      	movs	r1, #5
 80026c0:	4840      	ldr	r0, [pc, #256]	; (80027c4 <FreqMenu_DrawPresetMenu+0x10a8>)
 80026c2:	f00d f8a3 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026c6:	7afb      	ldrb	r3, [r7, #11]
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	2300      	movs	r3, #0
 80026cc:	9301      	str	r3, [sp, #4]
 80026ce:	2302      	movs	r3, #2
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026d6:	2105      	movs	r1, #5
 80026d8:	483b      	ldr	r0, [pc, #236]	; (80027c8 <FreqMenu_DrawPresetMenu+0x10ac>)
 80026da:	f00d f897 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026de:	7abb      	ldrb	r3, [r7, #10]
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	2300      	movs	r3, #0
 80026e4:	9301      	str	r3, [sp, #4]
 80026e6:	2302      	movs	r3, #2
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026ee:	2105      	movs	r1, #5
 80026f0:	4836      	ldr	r0, [pc, #216]	; (80027cc <FreqMenu_DrawPresetMenu+0x10b0>)
 80026f2:	f00d f88b 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026f6:	7a7b      	ldrb	r3, [r7, #9]
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	2300      	movs	r3, #0
 80026fc:	9301      	str	r3, [sp, #4]
 80026fe:	2302      	movs	r3, #2
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002706:	2105      	movs	r1, #5
 8002708:	4831      	ldr	r0, [pc, #196]	; (80027d0 <FreqMenu_DrawPresetMenu+0x10b4>)
 800270a:	f00d f87f 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800270e:	7bfb      	ldrb	r3, [r7, #15]
 8002710:	b29a      	uxth	r2, r3
 8002712:	2300      	movs	r3, #0
 8002714:	9301      	str	r3, [sp, #4]
 8002716:	2302      	movs	r3, #2
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800271e:	2178      	movs	r1, #120	; 0x78
 8002720:	482c      	ldr	r0, [pc, #176]	; (80027d4 <FreqMenu_DrawPresetMenu+0x10b8>)
 8002722:	f00d f873 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002726:	7bbb      	ldrb	r3, [r7, #14]
 8002728:	b29a      	uxth	r2, r3
 800272a:	2300      	movs	r3, #0
 800272c:	9301      	str	r3, [sp, #4]
 800272e:	2302      	movs	r3, #2
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002736:	2178      	movs	r1, #120	; 0x78
 8002738:	4827      	ldr	r0, [pc, #156]	; (80027d8 <FreqMenu_DrawPresetMenu+0x10bc>)
 800273a:	f00d f867 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800273e:	7b7b      	ldrb	r3, [r7, #13]
 8002740:	b29a      	uxth	r2, r3
 8002742:	2300      	movs	r3, #0
 8002744:	9301      	str	r3, [sp, #4]
 8002746:	2302      	movs	r3, #2
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800274e:	2178      	movs	r1, #120	; 0x78
 8002750:	4822      	ldr	r0, [pc, #136]	; (80027dc <FreqMenu_DrawPresetMenu+0x10c0>)
 8002752:	f00d f85b 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002756:	7b3b      	ldrb	r3, [r7, #12]
 8002758:	b29a      	uxth	r2, r3
 800275a:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800275e:	9301      	str	r3, [sp, #4]
 8002760:	2302      	movs	r3, #2
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	2300      	movs	r3, #0
 8002766:	2178      	movs	r1, #120	; 0x78
 8002768:	481d      	ldr	r0, [pc, #116]	; (80027e0 <FreqMenu_DrawPresetMenu+0x10c4>)
 800276a:	f00d f84f 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800276e:	7afb      	ldrb	r3, [r7, #11]
 8002770:	b29a      	uxth	r2, r3
 8002772:	2300      	movs	r3, #0
 8002774:	9301      	str	r3, [sp, #4]
 8002776:	2302      	movs	r3, #2
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800277e:	2178      	movs	r1, #120	; 0x78
 8002780:	4818      	ldr	r0, [pc, #96]	; (80027e4 <FreqMenu_DrawPresetMenu+0x10c8>)
 8002782:	f00d f843 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002786:	7abb      	ldrb	r3, [r7, #10]
 8002788:	b29a      	uxth	r2, r3
 800278a:	2300      	movs	r3, #0
 800278c:	9301      	str	r3, [sp, #4]
 800278e:	2302      	movs	r3, #2
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002796:	2178      	movs	r1, #120	; 0x78
 8002798:	4813      	ldr	r0, [pc, #76]	; (80027e8 <FreqMenu_DrawPresetMenu+0x10cc>)
 800279a:	f00d f837 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800279e:	7a7b      	ldrb	r3, [r7, #9]
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	2300      	movs	r3, #0
 80027a4:	9301      	str	r3, [sp, #4]
 80027a6:	2302      	movs	r3, #2
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027ae:	2178      	movs	r1, #120	; 0x78
 80027b0:	480e      	ldr	r0, [pc, #56]	; (80027ec <FreqMenu_DrawPresetMenu+0x10d0>)
 80027b2:	f00d f82b 	bl	800f80c <ILI9341_Draw_Text>
				break;
 80027b6:	e23f      	b.n	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
 80027b8:	08014898 	.word	0x08014898
 80027bc:	080148a0 	.word	0x080148a0
 80027c0:	080148a8 	.word	0x080148a8
 80027c4:	080148b0 	.word	0x080148b0
 80027c8:	080148b8 	.word	0x080148b8
 80027cc:	080148c0 	.word	0x080148c0
 80027d0:	080148c8 	.word	0x080148c8
 80027d4:	080148d0 	.word	0x080148d0
 80027d8:	080148d8 	.word	0x080148d8
 80027dc:	080148e0 	.word	0x080148e0
 80027e0:	080148e8 	.word	0x080148e8
 80027e4:	080148f0 	.word	0x080148f0
 80027e8:	080148f8 	.word	0x080148f8
 80027ec:	08014900 	.word	0x08014900
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027f0:	7bfb      	ldrb	r3, [r7, #15]
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	2300      	movs	r3, #0
 80027f6:	9301      	str	r3, [sp, #4]
 80027f8:	2302      	movs	r3, #2
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002800:	2105      	movs	r1, #5
 8002802:	48a4      	ldr	r0, [pc, #656]	; (8002a94 <FreqMenu_DrawPresetMenu+0x1378>)
 8002804:	f00d f802 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002808:	7bbb      	ldrb	r3, [r7, #14]
 800280a:	b29a      	uxth	r2, r3
 800280c:	2300      	movs	r3, #0
 800280e:	9301      	str	r3, [sp, #4]
 8002810:	2302      	movs	r3, #2
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002818:	2105      	movs	r1, #5
 800281a:	489f      	ldr	r0, [pc, #636]	; (8002a98 <FreqMenu_DrawPresetMenu+0x137c>)
 800281c:	f00c fff6 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002820:	7b7b      	ldrb	r3, [r7, #13]
 8002822:	b29a      	uxth	r2, r3
 8002824:	2300      	movs	r3, #0
 8002826:	9301      	str	r3, [sp, #4]
 8002828:	2302      	movs	r3, #2
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002830:	2105      	movs	r1, #5
 8002832:	489a      	ldr	r0, [pc, #616]	; (8002a9c <FreqMenu_DrawPresetMenu+0x1380>)
 8002834:	f00c ffea 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002838:	7b3b      	ldrb	r3, [r7, #12]
 800283a:	b29a      	uxth	r2, r3
 800283c:	2300      	movs	r3, #0
 800283e:	9301      	str	r3, [sp, #4]
 8002840:	2302      	movs	r3, #2
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002848:	2105      	movs	r1, #5
 800284a:	4895      	ldr	r0, [pc, #596]	; (8002aa0 <FreqMenu_DrawPresetMenu+0x1384>)
 800284c:	f00c ffde 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002850:	7afb      	ldrb	r3, [r7, #11]
 8002852:	b29a      	uxth	r2, r3
 8002854:	2300      	movs	r3, #0
 8002856:	9301      	str	r3, [sp, #4]
 8002858:	2302      	movs	r3, #2
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002860:	2105      	movs	r1, #5
 8002862:	4890      	ldr	r0, [pc, #576]	; (8002aa4 <FreqMenu_DrawPresetMenu+0x1388>)
 8002864:	f00c ffd2 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002868:	7abb      	ldrb	r3, [r7, #10]
 800286a:	b29a      	uxth	r2, r3
 800286c:	2300      	movs	r3, #0
 800286e:	9301      	str	r3, [sp, #4]
 8002870:	2302      	movs	r3, #2
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002878:	2105      	movs	r1, #5
 800287a:	488b      	ldr	r0, [pc, #556]	; (8002aa8 <FreqMenu_DrawPresetMenu+0x138c>)
 800287c:	f00c ffc6 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002880:	7a7b      	ldrb	r3, [r7, #9]
 8002882:	b29a      	uxth	r2, r3
 8002884:	2300      	movs	r3, #0
 8002886:	9301      	str	r3, [sp, #4]
 8002888:	2302      	movs	r3, #2
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002890:	2105      	movs	r1, #5
 8002892:	4886      	ldr	r0, [pc, #536]	; (8002aac <FreqMenu_DrawPresetMenu+0x1390>)
 8002894:	f00c ffba 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002898:	7bfb      	ldrb	r3, [r7, #15]
 800289a:	b29a      	uxth	r2, r3
 800289c:	2300      	movs	r3, #0
 800289e:	9301      	str	r3, [sp, #4]
 80028a0:	2302      	movs	r3, #2
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028a8:	2178      	movs	r1, #120	; 0x78
 80028aa:	4881      	ldr	r0, [pc, #516]	; (8002ab0 <FreqMenu_DrawPresetMenu+0x1394>)
 80028ac:	f00c ffae 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028b0:	7bbb      	ldrb	r3, [r7, #14]
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	2300      	movs	r3, #0
 80028b6:	9301      	str	r3, [sp, #4]
 80028b8:	2302      	movs	r3, #2
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028c0:	2178      	movs	r1, #120	; 0x78
 80028c2:	487c      	ldr	r0, [pc, #496]	; (8002ab4 <FreqMenu_DrawPresetMenu+0x1398>)
 80028c4:	f00c ffa2 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028c8:	7b7b      	ldrb	r3, [r7, #13]
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	2300      	movs	r3, #0
 80028ce:	9301      	str	r3, [sp, #4]
 80028d0:	2302      	movs	r3, #2
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028d8:	2178      	movs	r1, #120	; 0x78
 80028da:	4877      	ldr	r0, [pc, #476]	; (8002ab8 <FreqMenu_DrawPresetMenu+0x139c>)
 80028dc:	f00c ff96 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028e0:	7b3b      	ldrb	r3, [r7, #12]
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	2300      	movs	r3, #0
 80028e6:	9301      	str	r3, [sp, #4]
 80028e8:	2302      	movs	r3, #2
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028f0:	2178      	movs	r1, #120	; 0x78
 80028f2:	4872      	ldr	r0, [pc, #456]	; (8002abc <FreqMenu_DrawPresetMenu+0x13a0>)
 80028f4:	f00c ff8a 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80028f8:	7afb      	ldrb	r3, [r7, #11]
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002900:	9301      	str	r3, [sp, #4]
 8002902:	2302      	movs	r3, #2
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	2300      	movs	r3, #0
 8002908:	2178      	movs	r1, #120	; 0x78
 800290a:	486d      	ldr	r0, [pc, #436]	; (8002ac0 <FreqMenu_DrawPresetMenu+0x13a4>)
 800290c:	f00c ff7e 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002910:	7abb      	ldrb	r3, [r7, #10]
 8002912:	b29a      	uxth	r2, r3
 8002914:	2300      	movs	r3, #0
 8002916:	9301      	str	r3, [sp, #4]
 8002918:	2302      	movs	r3, #2
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002920:	2178      	movs	r1, #120	; 0x78
 8002922:	4868      	ldr	r0, [pc, #416]	; (8002ac4 <FreqMenu_DrawPresetMenu+0x13a8>)
 8002924:	f00c ff72 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002928:	7a7b      	ldrb	r3, [r7, #9]
 800292a:	b29a      	uxth	r2, r3
 800292c:	2300      	movs	r3, #0
 800292e:	9301      	str	r3, [sp, #4]
 8002930:	2302      	movs	r3, #2
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002938:	2178      	movs	r1, #120	; 0x78
 800293a:	4863      	ldr	r0, [pc, #396]	; (8002ac8 <FreqMenu_DrawPresetMenu+0x13ac>)
 800293c:	f00c ff66 	bl	800f80c <ILI9341_Draw_Text>
			break;
 8002940:	e17a      	b.n	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002942:	7bfb      	ldrb	r3, [r7, #15]
 8002944:	b29a      	uxth	r2, r3
 8002946:	2300      	movs	r3, #0
 8002948:	9301      	str	r3, [sp, #4]
 800294a:	2302      	movs	r3, #2
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002952:	2105      	movs	r1, #5
 8002954:	484f      	ldr	r0, [pc, #316]	; (8002a94 <FreqMenu_DrawPresetMenu+0x1378>)
 8002956:	f00c ff59 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800295a:	7bbb      	ldrb	r3, [r7, #14]
 800295c:	b29a      	uxth	r2, r3
 800295e:	2300      	movs	r3, #0
 8002960:	9301      	str	r3, [sp, #4]
 8002962:	2302      	movs	r3, #2
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800296a:	2105      	movs	r1, #5
 800296c:	484a      	ldr	r0, [pc, #296]	; (8002a98 <FreqMenu_DrawPresetMenu+0x137c>)
 800296e:	f00c ff4d 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002972:	7b7b      	ldrb	r3, [r7, #13]
 8002974:	b29a      	uxth	r2, r3
 8002976:	2300      	movs	r3, #0
 8002978:	9301      	str	r3, [sp, #4]
 800297a:	2302      	movs	r3, #2
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002982:	2105      	movs	r1, #5
 8002984:	4845      	ldr	r0, [pc, #276]	; (8002a9c <FreqMenu_DrawPresetMenu+0x1380>)
 8002986:	f00c ff41 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800298a:	7b3b      	ldrb	r3, [r7, #12]
 800298c:	b29a      	uxth	r2, r3
 800298e:	2300      	movs	r3, #0
 8002990:	9301      	str	r3, [sp, #4]
 8002992:	2302      	movs	r3, #2
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800299a:	2105      	movs	r1, #5
 800299c:	4840      	ldr	r0, [pc, #256]	; (8002aa0 <FreqMenu_DrawPresetMenu+0x1384>)
 800299e:	f00c ff35 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029a2:	7afb      	ldrb	r3, [r7, #11]
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	2300      	movs	r3, #0
 80029a8:	9301      	str	r3, [sp, #4]
 80029aa:	2302      	movs	r3, #2
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029b2:	2105      	movs	r1, #5
 80029b4:	483b      	ldr	r0, [pc, #236]	; (8002aa4 <FreqMenu_DrawPresetMenu+0x1388>)
 80029b6:	f00c ff29 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029ba:	7abb      	ldrb	r3, [r7, #10]
 80029bc:	b29a      	uxth	r2, r3
 80029be:	2300      	movs	r3, #0
 80029c0:	9301      	str	r3, [sp, #4]
 80029c2:	2302      	movs	r3, #2
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029ca:	2105      	movs	r1, #5
 80029cc:	4836      	ldr	r0, [pc, #216]	; (8002aa8 <FreqMenu_DrawPresetMenu+0x138c>)
 80029ce:	f00c ff1d 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029d2:	7a7b      	ldrb	r3, [r7, #9]
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	2300      	movs	r3, #0
 80029d8:	9301      	str	r3, [sp, #4]
 80029da:	2302      	movs	r3, #2
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029e2:	2105      	movs	r1, #5
 80029e4:	4831      	ldr	r0, [pc, #196]	; (8002aac <FreqMenu_DrawPresetMenu+0x1390>)
 80029e6:	f00c ff11 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029ea:	7bfb      	ldrb	r3, [r7, #15]
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	2300      	movs	r3, #0
 80029f0:	9301      	str	r3, [sp, #4]
 80029f2:	2302      	movs	r3, #2
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029fa:	2178      	movs	r1, #120	; 0x78
 80029fc:	482c      	ldr	r0, [pc, #176]	; (8002ab0 <FreqMenu_DrawPresetMenu+0x1394>)
 80029fe:	f00c ff05 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a02:	7bbb      	ldrb	r3, [r7, #14]
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	2300      	movs	r3, #0
 8002a08:	9301      	str	r3, [sp, #4]
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a12:	2178      	movs	r1, #120	; 0x78
 8002a14:	4827      	ldr	r0, [pc, #156]	; (8002ab4 <FreqMenu_DrawPresetMenu+0x1398>)
 8002a16:	f00c fef9 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a1a:	7b7b      	ldrb	r3, [r7, #13]
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	2300      	movs	r3, #0
 8002a20:	9301      	str	r3, [sp, #4]
 8002a22:	2302      	movs	r3, #2
 8002a24:	9300      	str	r3, [sp, #0]
 8002a26:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a2a:	2178      	movs	r1, #120	; 0x78
 8002a2c:	4822      	ldr	r0, [pc, #136]	; (8002ab8 <FreqMenu_DrawPresetMenu+0x139c>)
 8002a2e:	f00c feed 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a32:	7b3b      	ldrb	r3, [r7, #12]
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	2300      	movs	r3, #0
 8002a38:	9301      	str	r3, [sp, #4]
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a42:	2178      	movs	r1, #120	; 0x78
 8002a44:	481d      	ldr	r0, [pc, #116]	; (8002abc <FreqMenu_DrawPresetMenu+0x13a0>)
 8002a46:	f00c fee1 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a4a:	7afb      	ldrb	r3, [r7, #11]
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	2300      	movs	r3, #0
 8002a50:	9301      	str	r3, [sp, #4]
 8002a52:	2302      	movs	r3, #2
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a5a:	2178      	movs	r1, #120	; 0x78
 8002a5c:	4818      	ldr	r0, [pc, #96]	; (8002ac0 <FreqMenu_DrawPresetMenu+0x13a4>)
 8002a5e:	f00c fed5 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002a62:	7abb      	ldrb	r3, [r7, #10]
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002a6a:	9301      	str	r3, [sp, #4]
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	2300      	movs	r3, #0
 8002a72:	2178      	movs	r1, #120	; 0x78
 8002a74:	4813      	ldr	r0, [pc, #76]	; (8002ac4 <FreqMenu_DrawPresetMenu+0x13a8>)
 8002a76:	f00c fec9 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a7a:	7a7b      	ldrb	r3, [r7, #9]
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	2300      	movs	r3, #0
 8002a80:	9301      	str	r3, [sp, #4]
 8002a82:	2302      	movs	r3, #2
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a8a:	2178      	movs	r1, #120	; 0x78
 8002a8c:	480e      	ldr	r0, [pc, #56]	; (8002ac8 <FreqMenu_DrawPresetMenu+0x13ac>)
 8002a8e:	f00c febd 	bl	800f80c <ILI9341_Draw_Text>
			break;
 8002a92:	e0d1      	b.n	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
 8002a94:	08014898 	.word	0x08014898
 8002a98:	080148a0 	.word	0x080148a0
 8002a9c:	080148a8 	.word	0x080148a8
 8002aa0:	080148b0 	.word	0x080148b0
 8002aa4:	080148b8 	.word	0x080148b8
 8002aa8:	080148c0 	.word	0x080148c0
 8002aac:	080148c8 	.word	0x080148c8
 8002ab0:	080148d0 	.word	0x080148d0
 8002ab4:	080148d8 	.word	0x080148d8
 8002ab8:	080148e0 	.word	0x080148e0
 8002abc:	080148e8 	.word	0x080148e8
 8002ac0:	080148f0 	.word	0x080148f0
 8002ac4:	080148f8 	.word	0x080148f8
 8002ac8:	08014900 	.word	0x08014900
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	9301      	str	r3, [sp, #4]
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002adc:	2105      	movs	r1, #5
 8002ade:	4858      	ldr	r0, [pc, #352]	; (8002c40 <FreqMenu_DrawPresetMenu+0x1524>)
 8002ae0:	f00c fe94 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ae4:	7bbb      	ldrb	r3, [r7, #14]
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	2300      	movs	r3, #0
 8002aea:	9301      	str	r3, [sp, #4]
 8002aec:	2302      	movs	r3, #2
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002af4:	2105      	movs	r1, #5
 8002af6:	4853      	ldr	r0, [pc, #332]	; (8002c44 <FreqMenu_DrawPresetMenu+0x1528>)
 8002af8:	f00c fe88 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002afc:	7b7b      	ldrb	r3, [r7, #13]
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	2300      	movs	r3, #0
 8002b02:	9301      	str	r3, [sp, #4]
 8002b04:	2302      	movs	r3, #2
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b0c:	2105      	movs	r1, #5
 8002b0e:	484e      	ldr	r0, [pc, #312]	; (8002c48 <FreqMenu_DrawPresetMenu+0x152c>)
 8002b10:	f00c fe7c 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b14:	7b3b      	ldrb	r3, [r7, #12]
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	2300      	movs	r3, #0
 8002b1a:	9301      	str	r3, [sp, #4]
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b24:	2105      	movs	r1, #5
 8002b26:	4849      	ldr	r0, [pc, #292]	; (8002c4c <FreqMenu_DrawPresetMenu+0x1530>)
 8002b28:	f00c fe70 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b2c:	7afb      	ldrb	r3, [r7, #11]
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	2300      	movs	r3, #0
 8002b32:	9301      	str	r3, [sp, #4]
 8002b34:	2302      	movs	r3, #2
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b3c:	2105      	movs	r1, #5
 8002b3e:	4844      	ldr	r0, [pc, #272]	; (8002c50 <FreqMenu_DrawPresetMenu+0x1534>)
 8002b40:	f00c fe64 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b44:	7abb      	ldrb	r3, [r7, #10]
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	2300      	movs	r3, #0
 8002b4a:	9301      	str	r3, [sp, #4]
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b54:	2105      	movs	r1, #5
 8002b56:	483f      	ldr	r0, [pc, #252]	; (8002c54 <FreqMenu_DrawPresetMenu+0x1538>)
 8002b58:	f00c fe58 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b5c:	7a7b      	ldrb	r3, [r7, #9]
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	2300      	movs	r3, #0
 8002b62:	9301      	str	r3, [sp, #4]
 8002b64:	2302      	movs	r3, #2
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b6c:	2105      	movs	r1, #5
 8002b6e:	483a      	ldr	r0, [pc, #232]	; (8002c58 <FreqMenu_DrawPresetMenu+0x153c>)
 8002b70:	f00c fe4c 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b74:	7bfb      	ldrb	r3, [r7, #15]
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	2300      	movs	r3, #0
 8002b7a:	9301      	str	r3, [sp, #4]
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b84:	2178      	movs	r1, #120	; 0x78
 8002b86:	4835      	ldr	r0, [pc, #212]	; (8002c5c <FreqMenu_DrawPresetMenu+0x1540>)
 8002b88:	f00c fe40 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b8c:	7bbb      	ldrb	r3, [r7, #14]
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	2300      	movs	r3, #0
 8002b92:	9301      	str	r3, [sp, #4]
 8002b94:	2302      	movs	r3, #2
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b9c:	2178      	movs	r1, #120	; 0x78
 8002b9e:	4830      	ldr	r0, [pc, #192]	; (8002c60 <FreqMenu_DrawPresetMenu+0x1544>)
 8002ba0:	f00c fe34 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ba4:	7b7b      	ldrb	r3, [r7, #13]
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	2300      	movs	r3, #0
 8002baa:	9301      	str	r3, [sp, #4]
 8002bac:	2302      	movs	r3, #2
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002bb4:	2178      	movs	r1, #120	; 0x78
 8002bb6:	482b      	ldr	r0, [pc, #172]	; (8002c64 <FreqMenu_DrawPresetMenu+0x1548>)
 8002bb8:	f00c fe28 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002bbc:	7b3b      	ldrb	r3, [r7, #12]
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	9301      	str	r3, [sp, #4]
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002bcc:	2178      	movs	r1, #120	; 0x78
 8002bce:	4826      	ldr	r0, [pc, #152]	; (8002c68 <FreqMenu_DrawPresetMenu+0x154c>)
 8002bd0:	f00c fe1c 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002bd4:	7afb      	ldrb	r3, [r7, #11]
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	2300      	movs	r3, #0
 8002bda:	9301      	str	r3, [sp, #4]
 8002bdc:	2302      	movs	r3, #2
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002be4:	2178      	movs	r1, #120	; 0x78
 8002be6:	4821      	ldr	r0, [pc, #132]	; (8002c6c <FreqMenu_DrawPresetMenu+0x1550>)
 8002be8:	f00c fe10 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002bec:	7abb      	ldrb	r3, [r7, #10]
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	9301      	str	r3, [sp, #4]
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	9300      	str	r3, [sp, #0]
 8002bf8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002bfc:	2178      	movs	r1, #120	; 0x78
 8002bfe:	481c      	ldr	r0, [pc, #112]	; (8002c70 <FreqMenu_DrawPresetMenu+0x1554>)
 8002c00:	f00c fe04 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002c04:	7a7b      	ldrb	r3, [r7, #9]
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002c0c:	9301      	str	r3, [sp, #4]
 8002c0e:	2302      	movs	r3, #2
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	2300      	movs	r3, #0
 8002c14:	2178      	movs	r1, #120	; 0x78
 8002c16:	4817      	ldr	r0, [pc, #92]	; (8002c74 <FreqMenu_DrawPresetMenu+0x1558>)
 8002c18:	f00c fdf8 	bl	800f80c <ILI9341_Draw_Text>
			break;
 8002c1c:	bf00      	nop
 8002c1e:	e00b      	b.n	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8002c20:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002c24:	9301      	str	r3, [sp, #4]
 8002c26:	2301      	movs	r3, #1
 8002c28:	9300      	str	r3, [sp, #0]
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	22b4      	movs	r2, #180	; 0xb4
 8002c2e:	2105      	movs	r1, #5
 8002c30:	4811      	ldr	r0, [pc, #68]	; (8002c78 <FreqMenu_DrawPresetMenu+0x155c>)
 8002c32:	f00c fdeb 	bl	800f80c <ILI9341_Draw_Text>
}
 8002c36:	e7ff      	b.n	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
 8002c38:	bf00      	nop
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	08014898 	.word	0x08014898
 8002c44:	080148a0 	.word	0x080148a0
 8002c48:	080148a8 	.word	0x080148a8
 8002c4c:	080148b0 	.word	0x080148b0
 8002c50:	080148b8 	.word	0x080148b8
 8002c54:	080148c0 	.word	0x080148c0
 8002c58:	080148c8 	.word	0x080148c8
 8002c5c:	080148d0 	.word	0x080148d0
 8002c60:	080148d8 	.word	0x080148d8
 8002c64:	080148e0 	.word	0x080148e0
 8002c68:	080148e8 	.word	0x080148e8
 8002c6c:	080148f0 	.word	0x080148f0
 8002c70:	080148f8 	.word	0x080148f8
 8002c74:	08014900 	.word	0x08014900
 8002c78:	0801490c 	.word	0x0801490c

08002c7c <FreqMenu_DrawAdjustMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawAdjustMenu()
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->ADJUST", 5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002c82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c86:	9301      	str	r3, [sp, #4]
 8002c88:	2302      	movs	r3, #2
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	220a      	movs	r2, #10
 8002c90:	2105      	movs	r1, #5
 8002c92:	4804      	ldr	r0, [pc, #16]	; (8002ca4 <FreqMenu_DrawAdjustMenu+0x28>)
 8002c94:	f00c fdba 	bl	800f80c <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8002c98:	f7fe f92e 	bl	8000ef8 <DM_DisplayFormattedOutput>
	//snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
	if(DM_AddDigitPadding((uint16_t)FreqO_GetOutputFreq(), freq, sizeof(freq)) == 0)
		ILI9341_Draw_Text(freq, 250, 150, WHITE, 1, BLACK);
*/

}
 8002c9c:	bf00      	nop
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	0801493c 	.word	0x0801493c

08002ca8 <FreqMenu_DrawSweepMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawSweepMenu()
{
 8002ca8:	b5b0      	push	{r4, r5, r7, lr}
 8002caa:	b0a0      	sub	sp, #128	; 0x80
 8002cac:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->SWEEP", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002cae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cb2:	9301      	str	r3, [sp, #4]
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	2300      	movs	r3, #0
 8002cba:	220a      	movs	r2, #10
 8002cbc:	2105      	movs	r1, #5
 8002cbe:	48a3      	ldr	r0, [pc, #652]	; (8002f4c <FreqMenu_DrawSweepMenu+0x2a4>)
 8002cc0:	f00c fda4 	bl	800f80c <ILI9341_Draw_Text>
	DM_DisplayInputTriggerStatus();
 8002cc4:	f7fe fbda 	bl	800147c <DM_DisplayInputTriggerStatus>

	// draw enabled status


	char enabled_text[20] = "";
 8002cc8:	2300      	movs	r3, #0
 8002cca:	667b      	str	r3, [r7, #100]	; 0x64
 8002ccc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	605a      	str	r2, [r3, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
 8002cd8:	60da      	str	r2, [r3, #12]
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8002cda:	4b9d      	ldr	r3, [pc, #628]	; (8002f50 <FreqMenu_DrawSweepMenu+0x2a8>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d109      	bne.n	8002cfa <FreqMenu_DrawSweepMenu+0x52>
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  RUNNING");
 8002ce6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002cea:	4a9a      	ldr	r2, [pc, #616]	; (8002f54 <FreqMenu_DrawSweepMenu+0x2ac>)
 8002cec:	461c      	mov	r4, r3
 8002cee:	4615      	mov	r5, r2
 8002cf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cf4:	682b      	ldr	r3, [r5, #0]
 8002cf6:	7023      	strb	r3, [r4, #0]
 8002cf8:	e008      	b.n	8002d0c <FreqMenu_DrawSweepMenu+0x64>
	}
	else
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  STOPPED");
 8002cfa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002cfe:	4a96      	ldr	r2, [pc, #600]	; (8002f58 <FreqMenu_DrawSweepMenu+0x2b0>)
 8002d00:	461c      	mov	r4, r3
 8002d02:	4615      	mov	r5, r2
 8002d04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d08:	682b      	ldr	r3, [r5, #0]
 8002d0a:	7023      	strb	r3, [r4, #0]
	}

	ILI9341_Draw_Text(enabled_text, 5, 40, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d0c:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8002d10:	2300      	movs	r3, #0
 8002d12:	9301      	str	r3, [sp, #4]
 8002d14:	2302      	movs	r3, #2
 8002d16:	9300      	str	r3, [sp, #0]
 8002d18:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d1c:	2228      	movs	r2, #40	; 0x28
 8002d1e:	2105      	movs	r1, #5
 8002d20:	f00c fd74 	bl	800f80c <ILI9341_Draw_Text>

	// draw output freq status
	char out_hertz[25] = "";
 8002d24:	2300      	movs	r3, #0
 8002d26:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d28:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	605a      	str	r2, [r3, #4]
 8002d32:	609a      	str	r2, [r3, #8]
 8002d34:	60da      	str	r2, [r3, #12]
 8002d36:	611a      	str	r2, [r3, #16]
 8002d38:	751a      	strb	r2, [r3, #20]
	snprintf(out_hertz, sizeof(out_hertz), "OUTPUT: %7.2f Hz", SM_GetOutputInHertz());
 8002d3a:	f003 ff73 	bl	8006c24 <SM_GetOutputInHertz>
 8002d3e:	ee10 3a10 	vmov	r3, s0
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7fd fc28 	bl	8000598 <__aeabi_f2d>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	460c      	mov	r4, r1
 8002d4c:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002d50:	e9cd 3400 	strd	r3, r4, [sp]
 8002d54:	4a81      	ldr	r2, [pc, #516]	; (8002f5c <FreqMenu_DrawSweepMenu+0x2b4>)
 8002d56:	2119      	movs	r1, #25
 8002d58:	f00e f914 	bl	8010f84 <sniprintf>
	ILI9341_Draw_Text(out_hertz, 5, 60, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d5c:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002d60:	2300      	movs	r3, #0
 8002d62:	9301      	str	r3, [sp, #4]
 8002d64:	2302      	movs	r3, #2
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d6c:	223c      	movs	r2, #60	; 0x3c
 8002d6e:	2105      	movs	r1, #5
 8002d70:	f00c fd4c 	bl	800f80c <ILI9341_Draw_Text>
		//snprintf(dir_text, sizeof(dir_text), "DIRECTION:  N/A");
	}
	else
	{
*/
		ILI9341_Draw_Text("SWEEP MODE:", 5, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d74:	2300      	movs	r3, #0
 8002d76:	9301      	str	r3, [sp, #4]
 8002d78:	2302      	movs	r3, #2
 8002d7a:	9300      	str	r3, [sp, #0]
 8002d7c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d80:	2264      	movs	r2, #100	; 0x64
 8002d82:	2105      	movs	r1, #5
 8002d84:	4876      	ldr	r0, [pc, #472]	; (8002f60 <FreqMenu_DrawSweepMenu+0x2b8>)
 8002d86:	f00c fd41 	bl	800f80c <ILI9341_Draw_Text>

		// get direction
		if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 8002d8a:	4b71      	ldr	r3, [pc, #452]	; (8002f50 <FreqMenu_DrawSweepMenu+0x2a8>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0310 	and.w	r3, r3, #16
 8002d92:	2b10      	cmp	r3, #16
 8002d94:	d117      	bne.n	8002dc6 <FreqMenu_DrawSweepMenu+0x11e>
		{
			ILI9341_Draw_Text("UP", 235, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d96:	2300      	movs	r3, #0
 8002d98:	9301      	str	r3, [sp, #4]
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002da2:	2264      	movs	r2, #100	; 0x64
 8002da4:	21eb      	movs	r1, #235	; 0xeb
 8002da6:	486f      	ldr	r0, [pc, #444]	; (8002f64 <FreqMenu_DrawSweepMenu+0x2bc>)
 8002da8:	f00c fd30 	bl	800f80c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("DOWN", 265, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002dac:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002db0:	9301      	str	r3, [sp, #4]
 8002db2:	2302      	movs	r3, #2
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	2300      	movs	r3, #0
 8002db8:	2264      	movs	r2, #100	; 0x64
 8002dba:	f240 1109 	movw	r1, #265	; 0x109
 8002dbe:	486a      	ldr	r0, [pc, #424]	; (8002f68 <FreqMenu_DrawSweepMenu+0x2c0>)
 8002dc0:	f00c fd24 	bl	800f80c <ILI9341_Draw_Text>
 8002dc4:	e016      	b.n	8002df4 <FreqMenu_DrawSweepMenu+0x14c>
		}
		else
		{
			ILI9341_Draw_Text("DOWN", 265, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	9301      	str	r3, [sp, #4]
 8002dca:	2302      	movs	r3, #2
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002dd2:	2264      	movs	r2, #100	; 0x64
 8002dd4:	f240 1109 	movw	r1, #265	; 0x109
 8002dd8:	4863      	ldr	r0, [pc, #396]	; (8002f68 <FreqMenu_DrawSweepMenu+0x2c0>)
 8002dda:	f00c fd17 	bl	800f80c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("UP", 235, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002dde:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002de2:	9301      	str	r3, [sp, #4]
 8002de4:	2302      	movs	r3, #2
 8002de6:	9300      	str	r3, [sp, #0]
 8002de8:	2300      	movs	r3, #0
 8002dea:	2264      	movs	r2, #100	; 0x64
 8002dec:	21eb      	movs	r1, #235	; 0xeb
 8002dee:	485d      	ldr	r0, [pc, #372]	; (8002f64 <FreqMenu_DrawSweepMenu+0x2bc>)
 8002df0:	f00c fd0c 	bl	800f80c <ILI9341_Draw_Text>




	// draw rate status
	if(theCurrentEncoderSweepFunction == ENCODER_SWEEP_SPEED_FUNCTION)
 8002df4:	4b5d      	ldr	r3, [pc, #372]	; (8002f6c <FreqMenu_DrawSweepMenu+0x2c4>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d10b      	bne.n	8002e14 <FreqMenu_DrawSweepMenu+0x16c>
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002dfc:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002e00:	9301      	str	r3, [sp, #4]
 8002e02:	2302      	movs	r3, #2
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	2300      	movs	r3, #0
 8002e08:	2278      	movs	r2, #120	; 0x78
 8002e0a:	2105      	movs	r1, #5
 8002e0c:	4858      	ldr	r0, [pc, #352]	; (8002f70 <FreqMenu_DrawSweepMenu+0x2c8>)
 8002e0e:	f00c fcfd 	bl	800f80c <ILI9341_Draw_Text>
 8002e12:	e00a      	b.n	8002e2a <FreqMenu_DrawSweepMenu+0x182>
	}
	else
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e14:	2300      	movs	r3, #0
 8002e16:	9301      	str	r3, [sp, #4]
 8002e18:	2302      	movs	r3, #2
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e20:	2278      	movs	r2, #120	; 0x78
 8002e22:	2105      	movs	r1, #5
 8002e24:	4852      	ldr	r0, [pc, #328]	; (8002f70 <FreqMenu_DrawSweepMenu+0x2c8>)
 8002e26:	f00c fcf1 	bl	800f80c <ILI9341_Draw_Text>
	}
	char arr_text[25] = "";
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002e32:	2200      	movs	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]
 8002e36:	605a      	str	r2, [r3, #4]
 8002e38:	609a      	str	r2, [r3, #8]
 8002e3a:	60da      	str	r2, [r3, #12]
 8002e3c:	611a      	str	r2, [r3, #16]
 8002e3e:	751a      	strb	r2, [r3, #20]
	snprintf(arr_text, sizeof(arr_text), "%8.3f Hz", calculated_sweep_in_hertz);
 8002e40:	4b4c      	ldr	r3, [pc, #304]	; (8002f74 <FreqMenu_DrawSweepMenu+0x2cc>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7fd fba7 	bl	8000598 <__aeabi_f2d>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	460c      	mov	r4, r1
 8002e4e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002e52:	e9cd 3400 	strd	r3, r4, [sp]
 8002e56:	4a48      	ldr	r2, [pc, #288]	; (8002f78 <FreqMenu_DrawSweepMenu+0x2d0>)
 8002e58:	2119      	movs	r1, #25
 8002e5a:	f00e f893 	bl	8010f84 <sniprintf>
	ILI9341_Draw_Text(arr_text, 182, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e5e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002e62:	2300      	movs	r3, #0
 8002e64:	9301      	str	r3, [sp, #4]
 8002e66:	2302      	movs	r3, #2
 8002e68:	9300      	str	r3, [sp, #0]
 8002e6a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e6e:	2278      	movs	r2, #120	; 0x78
 8002e70:	21b6      	movs	r1, #182	; 0xb6
 8002e72:	f00c fccb 	bl	800f80c <ILI9341_Draw_Text>


	// draw upper sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_UP) )
 8002e76:	4b3d      	ldr	r3, [pc, #244]	; (8002f6c <FreqMenu_DrawSweepMenu+0x2c4>)
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d10f      	bne.n	8002e9e <FreqMenu_DrawSweepMenu+0x1f6>
 8002e7e:	4b3f      	ldr	r3, [pc, #252]	; (8002f7c <FreqMenu_DrawSweepMenu+0x2d4>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10b      	bne.n	8002e9e <FreqMenu_DrawSweepMenu+0x1f6>
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);	// highlighted
 8002e86:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002e8a:	9301      	str	r3, [sp, #4]
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	2300      	movs	r3, #0
 8002e92:	228c      	movs	r2, #140	; 0x8c
 8002e94:	2105      	movs	r1, #5
 8002e96:	483a      	ldr	r0, [pc, #232]	; (8002f80 <FreqMenu_DrawSweepMenu+0x2d8>)
 8002e98:	f00c fcb8 	bl	800f80c <ILI9341_Draw_Text>
 8002e9c:	e00a      	b.n	8002eb4 <FreqMenu_DrawSweepMenu+0x20c>
		//ILI9341_Draw_Arrow(ARROW_UP, 280, 120, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	9301      	str	r3, [sp, #4]
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002eaa:	228c      	movs	r2, #140	; 0x8c
 8002eac:	2105      	movs	r1, #5
 8002eae:	4834      	ldr	r0, [pc, #208]	; (8002f80 <FreqMenu_DrawSweepMenu+0x2d8>)
 8002eb0:	f00c fcac 	bl	800f80c <ILI9341_Draw_Text>
	}
	char sweep_lower_text[20] = "";
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	61bb      	str	r3, [r7, #24]
 8002eb8:	f107 031c 	add.w	r3, r7, #28
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	605a      	str	r2, [r3, #4]
 8002ec2:	609a      	str	r2, [r3, #8]
 8002ec4:	60da      	str	r2, [r3, #12]
	snprintf(sweep_lower_text, sizeof(sweep_lower_text), "%9.2f  Hz", SM_ConvertPeriodToHertz(sweep_lower_bounds_shortest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP);
 8002ec6:	4b2f      	ldr	r3, [pc, #188]	; (8002f84 <FreqMenu_DrawSweepMenu+0x2dc>)
 8002ec8:	edd3 7a00 	vldr	s15, [r3]
 8002ecc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ed0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	4619      	mov	r1, r3
 8002eda:	ee17 0a90 	vmov	r0, s15
 8002ede:	f003 fee7 	bl	8006cb0 <SM_ConvertPeriodToHertz>
 8002ee2:	eeb0 7a40 	vmov.f32	s14, s0
 8002ee6:	eddf 7a28 	vldr	s15, [pc, #160]	; 8002f88 <FreqMenu_DrawSweepMenu+0x2e0>
 8002eea:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002eee:	ee16 0a90 	vmov	r0, s13
 8002ef2:	f7fd fb51 	bl	8000598 <__aeabi_f2d>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	460c      	mov	r4, r1
 8002efa:	f107 0018 	add.w	r0, r7, #24
 8002efe:	e9cd 3400 	strd	r3, r4, [sp]
 8002f02:	4a22      	ldr	r2, [pc, #136]	; (8002f8c <FreqMenu_DrawSweepMenu+0x2e4>)
 8002f04:	2114      	movs	r1, #20
 8002f06:	f00e f83d 	bl	8010f84 <sniprintf>
	ILI9341_Draw_Text(sweep_lower_text, 158, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002f0a:	f107 0018 	add.w	r0, r7, #24
 8002f0e:	2300      	movs	r3, #0
 8002f10:	9301      	str	r3, [sp, #4]
 8002f12:	2302      	movs	r3, #2
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002f1a:	228c      	movs	r2, #140	; 0x8c
 8002f1c:	219e      	movs	r1, #158	; 0x9e
 8002f1e:	f00c fc75 	bl	800f80c <ILI9341_Draw_Text>


	// draw lower sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_DOWN) )
 8002f22:	4b12      	ldr	r3, [pc, #72]	; (8002f6c <FreqMenu_DrawSweepMenu+0x2c4>)
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d134      	bne.n	8002f94 <FreqMenu_DrawSweepMenu+0x2ec>
 8002f2a:	4b14      	ldr	r3, [pc, #80]	; (8002f7c <FreqMenu_DrawSweepMenu+0x2d4>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d130      	bne.n	8002f94 <FreqMenu_DrawSweepMenu+0x2ec>
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR); 	// highlighted
 8002f32:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002f36:	9301      	str	r3, [sp, #4]
 8002f38:	2302      	movs	r3, #2
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	22a0      	movs	r2, #160	; 0xa0
 8002f40:	2105      	movs	r1, #5
 8002f42:	4813      	ldr	r0, [pc, #76]	; (8002f90 <FreqMenu_DrawSweepMenu+0x2e8>)
 8002f44:	f00c fc62 	bl	800f80c <ILI9341_Draw_Text>
 8002f48:	e02f      	b.n	8002faa <FreqMenu_DrawSweepMenu+0x302>
 8002f4a:	bf00      	nop
 8002f4c:	08014950 	.word	0x08014950
 8002f50:	40000c00 	.word	0x40000c00
 8002f54:	08014964 	.word	0x08014964
 8002f58:	08014978 	.word	0x08014978
 8002f5c:	0801498c 	.word	0x0801498c
 8002f60:	080149a0 	.word	0x080149a0
 8002f64:	080149ac 	.word	0x080149ac
 8002f68:	080149b0 	.word	0x080149b0
 8002f6c:	20001e59 	.word	0x20001e59
 8002f70:	080149b8 	.word	0x080149b8
 8002f74:	2000226c 	.word	0x2000226c
 8002f78:	080149c8 	.word	0x080149c8
 8002f7c:	20001e58 	.word	0x20001e58
 8002f80:	080149d4 	.word	0x080149d4
 8002f84:	20000120 	.word	0x20000120
 8002f88:	42f00000 	.word	0x42f00000
 8002f8c:	080149e4 	.word	0x080149e4
 8002f90:	080149f0 	.word	0x080149f0
		//ILI9341_Draw_Arrow(ARROW_DOWN, 280, 130, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002f94:	2300      	movs	r3, #0
 8002f96:	9301      	str	r3, [sp, #4]
 8002f98:	2302      	movs	r3, #2
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002fa0:	22a0      	movs	r2, #160	; 0xa0
 8002fa2:	2105      	movs	r1, #5
 8002fa4:	484d      	ldr	r0, [pc, #308]	; (80030dc <FreqMenu_DrawSweepMenu+0x434>)
 8002fa6:	f00c fc31 	bl	800f80c <ILI9341_Draw_Text>
	}
	char sweep_upper_text[20] = "";
 8002faa:	2300      	movs	r3, #0
 8002fac:	607b      	str	r3, [r7, #4]
 8002fae:	f107 0308 	add.w	r3, r7, #8
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	605a      	str	r2, [r3, #4]
 8002fb8:	609a      	str	r2, [r3, #8]
 8002fba:	60da      	str	r2, [r3, #12]
	snprintf(sweep_upper_text, sizeof(sweep_upper_text), "%8.2f  Hz", SM_ConvertPeriodToHertz(sweep_upper_bounds_longest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP );
 8002fbc:	4b48      	ldr	r3, [pc, #288]	; (80030e0 <FreqMenu_DrawSweepMenu+0x438>)
 8002fbe:	edd3 7a00 	vldr	s15, [r3]
 8002fc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	4619      	mov	r1, r3
 8002fd0:	ee17 0a90 	vmov	r0, s15
 8002fd4:	f003 fe6c 	bl	8006cb0 <SM_ConvertPeriodToHertz>
 8002fd8:	eeb0 7a40 	vmov.f32	s14, s0
 8002fdc:	eddf 7a41 	vldr	s15, [pc, #260]	; 80030e4 <FreqMenu_DrawSweepMenu+0x43c>
 8002fe0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002fe4:	ee16 0a90 	vmov	r0, s13
 8002fe8:	f7fd fad6 	bl	8000598 <__aeabi_f2d>
 8002fec:	4603      	mov	r3, r0
 8002fee:	460c      	mov	r4, r1
 8002ff0:	1d38      	adds	r0, r7, #4
 8002ff2:	e9cd 3400 	strd	r3, r4, [sp]
 8002ff6:	4a3c      	ldr	r2, [pc, #240]	; (80030e8 <FreqMenu_DrawSweepMenu+0x440>)
 8002ff8:	2114      	movs	r1, #20
 8002ffa:	f00d ffc3 	bl	8010f84 <sniprintf>
	ILI9341_Draw_Text(sweep_upper_text, 170, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ffe:	1d38      	adds	r0, r7, #4
 8003000:	2300      	movs	r3, #0
 8003002:	9301      	str	r3, [sp, #4]
 8003004:	2302      	movs	r3, #2
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800300c:	22a0      	movs	r2, #160	; 0xa0
 800300e:	21aa      	movs	r1, #170	; 0xaa
 8003010:	f00c fbfc 	bl	800f80c <ILI9341_Draw_Text>


	// draw bottom menu button text
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8003014:	4b35      	ldr	r3, [pc, #212]	; (80030ec <FreqMenu_DrawSweepMenu+0x444>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	2b01      	cmp	r3, #1
 800301e:	d10b      	bne.n	8003038 <FreqMenu_DrawSweepMenu+0x390>
		ILI9341_Draw_Text("PAUSE ", 6, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003020:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003024:	9301      	str	r3, [sp, #4]
 8003026:	2302      	movs	r3, #2
 8003028:	9300      	str	r3, [sp, #0]
 800302a:	2300      	movs	r3, #0
 800302c:	22d5      	movs	r2, #213	; 0xd5
 800302e:	2106      	movs	r1, #6
 8003030:	482f      	ldr	r0, [pc, #188]	; (80030f0 <FreqMenu_DrawSweepMenu+0x448>)
 8003032:	f00c fbeb 	bl	800f80c <ILI9341_Draw_Text>
 8003036:	e00a      	b.n	800304e <FreqMenu_DrawSweepMenu+0x3a6>
	else
		ILI9341_Draw_Text("RESUME", 5, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003038:	f240 23fd 	movw	r3, #765	; 0x2fd
 800303c:	9301      	str	r3, [sp, #4]
 800303e:	2302      	movs	r3, #2
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	2300      	movs	r3, #0
 8003044:	22d5      	movs	r2, #213	; 0xd5
 8003046:	2105      	movs	r1, #5
 8003048:	482a      	ldr	r0, [pc, #168]	; (80030f4 <FreqMenu_DrawSweepMenu+0x44c>)
 800304a:	f00c fbdf 	bl	800f80c <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	104,	204, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800304e:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003052:	9301      	str	r3, [sp, #4]
 8003054:	2302      	movs	r3, #2
 8003056:	9300      	str	r3, [sp, #0]
 8003058:	2300      	movs	r3, #0
 800305a:	22cc      	movs	r2, #204	; 0xcc
 800305c:	2168      	movs	r1, #104	; 0x68
 800305e:	4826      	ldr	r0, [pc, #152]	; (80030f8 <FreqMenu_DrawSweepMenu+0x450>)
 8003060:	f00c fbd4 	bl	800f80c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("MODE",	97, 	222, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003064:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003068:	9301      	str	r3, [sp, #4]
 800306a:	2302      	movs	r3, #2
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	2300      	movs	r3, #0
 8003070:	22de      	movs	r2, #222	; 0xde
 8003072:	2161      	movs	r1, #97	; 0x61
 8003074:	4821      	ldr	r0, [pc, #132]	; (80030fc <FreqMenu_DrawSweepMenu+0x454>)
 8003076:	f00c fbc9 	bl	800f80c <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	183,	204, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 800307a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800307e:	9301      	str	r3, [sp, #4]
 8003080:	2302      	movs	r3, #2
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	2300      	movs	r3, #0
 8003086:	22cc      	movs	r2, #204	; 0xcc
 8003088:	21b7      	movs	r1, #183	; 0xb7
 800308a:	481b      	ldr	r0, [pc, #108]	; (80030f8 <FreqMenu_DrawSweepMenu+0x450>)
 800308c:	f00c fbbe 	bl	800f80c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SPEED",	173, 	222, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003090:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003094:	9301      	str	r3, [sp, #4]
 8003096:	2302      	movs	r3, #2
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	2300      	movs	r3, #0
 800309c:	22de      	movs	r2, #222	; 0xde
 800309e:	21ad      	movs	r1, #173	; 0xad
 80030a0:	4817      	ldr	r0, [pc, #92]	; (8003100 <FreqMenu_DrawSweepMenu+0x458>)
 80030a2:	f00c fbb3 	bl	800f80c <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	263, 	204, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80030a6:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80030aa:	9301      	str	r3, [sp, #4]
 80030ac:	2302      	movs	r3, #2
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	2300      	movs	r3, #0
 80030b2:	22cc      	movs	r2, #204	; 0xcc
 80030b4:	f240 1107 	movw	r1, #263	; 0x107
 80030b8:	480f      	ldr	r0, [pc, #60]	; (80030f8 <FreqMenu_DrawSweepMenu+0x450>)
 80030ba:	f00c fba7 	bl	800f80c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("LIMIT", 	252, 	222, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80030be:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80030c2:	9301      	str	r3, [sp, #4]
 80030c4:	2302      	movs	r3, #2
 80030c6:	9300      	str	r3, [sp, #0]
 80030c8:	2300      	movs	r3, #0
 80030ca:	22de      	movs	r2, #222	; 0xde
 80030cc:	21fc      	movs	r1, #252	; 0xfc
 80030ce:	480d      	ldr	r0, [pc, #52]	; (8003104 <FreqMenu_DrawSweepMenu+0x45c>)
 80030d0:	f00c fb9c 	bl	800f80c <ILI9341_Draw_Text>
}
 80030d4:	bf00      	nop
 80030d6:	3778      	adds	r7, #120	; 0x78
 80030d8:	46bd      	mov	sp, r7
 80030da:	bdb0      	pop	{r4, r5, r7, pc}
 80030dc:	080149f0 	.word	0x080149f0
 80030e0:	20000124 	.word	0x20000124
 80030e4:	42f00000 	.word	0x42f00000
 80030e8:	08014a00 	.word	0x08014a00
 80030ec:	40000c00 	.word	0x40000c00
 80030f0:	08014a0c 	.word	0x08014a0c
 80030f4:	08014a14 	.word	0x08014a14
 80030f8:	08014a1c 	.word	0x08014a1c
 80030fc:	08014a20 	.word	0x08014a20
 8003100:	08014a28 	.word	0x08014a28
 8003104:	08014a30 	.word	0x08014a30

08003108 <FreqMenu_DrawPrescalerMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawPrescalerMenu()
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->PSC", 5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 800310e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003112:	9301      	str	r3, [sp, #4]
 8003114:	2302      	movs	r3, #2
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	2300      	movs	r3, #0
 800311a:	220a      	movs	r2, #10
 800311c:	2105      	movs	r1, #5
 800311e:	4804      	ldr	r0, [pc, #16]	; (8003130 <FreqMenu_DrawPrescalerMenu+0x28>)
 8003120:	f00c fb74 	bl	800f80c <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003124:	f7fd fee8 	bl	8000ef8 <DM_DisplayFormattedOutput>

}
 8003128:	bf00      	nop
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	08014a38 	.word	0x08014a38

08003134 <FuncMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMenu(eFuncMenu_Status pMenu)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	4603      	mov	r3, r0
 800313c:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 800313e:	79fb      	ldrb	r3, [r7, #7]
 8003140:	2b02      	cmp	r3, #2
 8003142:	d007      	beq.n	8003154 <FuncMenu_DrawMenu+0x20>
 8003144:	2b03      	cmp	r3, #3
 8003146:	d009      	beq.n	800315c <FuncMenu_DrawMenu+0x28>
 8003148:	2b01      	cmp	r3, #1
 800314a:	d000      	beq.n	800314e <FuncMenu_DrawMenu+0x1a>
		case ENABLE_FUNC_Aux_MENU:
			FuncMenu_DrawOutputMenu(AUX_CHANNEL);
			break;

		default:
			break;
 800314c:	e00a      	b.n	8003164 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawMainMenu();
 800314e:	f000 f80d 	bl	800316c <FuncMenu_DrawMainMenu>
			break;
 8003152:	e007      	b.n	8003164 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(SIGNAL_CHANNEL);
 8003154:	2000      	movs	r0, #0
 8003156:	f000 f851 	bl	80031fc <FuncMenu_DrawOutputMenu>
			break;
 800315a:	e003      	b.n	8003164 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(AUX_CHANNEL);
 800315c:	2001      	movs	r0, #1
 800315e:	f000 f84d 	bl	80031fc <FuncMenu_DrawOutputMenu>
			break;
 8003162:	bf00      	nop

	}
}
 8003164:	bf00      	nop
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <FuncMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMainMenu()
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FUNC", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003172:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003176:	9301      	str	r3, [sp, #4]
 8003178:	2302      	movs	r3, #2
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	2300      	movs	r3, #0
 800317e:	220a      	movs	r2, #10
 8003180:	210a      	movs	r1, #10
 8003182:	481a      	ldr	r0, [pc, #104]	; (80031ec <FuncMenu_DrawMainMenu+0x80>)
 8003184:	f00c fb42 	bl	800f80c <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003188:	f7fd feb6 	bl	8000ef8 <DM_DisplayFormattedOutput>

 	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800318c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003190:	9301      	str	r3, [sp, #4]
 8003192:	2302      	movs	r3, #2
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	2300      	movs	r3, #0
 8003198:	22d2      	movs	r2, #210	; 0xd2
 800319a:	2105      	movs	r1, #5
 800319c:	4814      	ldr	r0, [pc, #80]	; (80031f0 <FuncMenu_DrawMainMenu+0x84>)
 800319e:	f00c fb35 	bl	800f80c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("AUX", 	100,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80031a2:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80031a6:	9301      	str	r3, [sp, #4]
 80031a8:	2302      	movs	r3, #2
 80031aa:	9300      	str	r3, [sp, #0]
 80031ac:	2300      	movs	r3, #0
 80031ae:	22d2      	movs	r2, #210	; 0xd2
 80031b0:	2164      	movs	r1, #100	; 0x64
 80031b2:	4810      	ldr	r0, [pc, #64]	; (80031f4 <FuncMenu_DrawMainMenu+0x88>)
 80031b4:	f00c fb2a 	bl	800f80c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80031b8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80031bc:	9301      	str	r3, [sp, #4]
 80031be:	2302      	movs	r3, #2
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	2300      	movs	r3, #0
 80031c4:	22d2      	movs	r2, #210	; 0xd2
 80031c6:	21af      	movs	r1, #175	; 0xaf
 80031c8:	480b      	ldr	r0, [pc, #44]	; (80031f8 <FuncMenu_DrawMainMenu+0x8c>)
 80031ca:	f00c fb1f 	bl	800f80c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80031ce:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80031d2:	9301      	str	r3, [sp, #4]
 80031d4:	2302      	movs	r3, #2
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	2300      	movs	r3, #0
 80031da:	22d2      	movs	r2, #210	; 0xd2
 80031dc:	f44f 7182 	mov.w	r1, #260	; 0x104
 80031e0:	4805      	ldr	r0, [pc, #20]	; (80031f8 <FuncMenu_DrawMainMenu+0x8c>)
 80031e2:	f00c fb13 	bl	800f80c <ILI9341_Draw_Text>
}
 80031e6:	bf00      	nop
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	08014a48 	.word	0x08014a48
 80031f0:	08014a54 	.word	0x08014a54
 80031f4:	08014a5c 	.word	0x08014a5c
 80031f8:	08014a60 	.word	0x08014a60

080031fc <FuncMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawOutputMenu(eOutputChannel_t pOutChan)
{
 80031fc:	b590      	push	{r4, r7, lr}
 80031fe:	b089      	sub	sp, #36	; 0x24
 8003200:	af02      	add	r7, sp, #8
 8003202:	4603      	mov	r3, r0
 8003204:	71fb      	strb	r3, [r7, #7]
	if(pOutChan)
 8003206:	79fb      	ldrb	r3, [r7, #7]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00b      	beq.n	8003224 <FuncMenu_DrawOutputMenu+0x28>
		ILI9341_Draw_Text("OUT->FUNC->AUX", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 800320c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003210:	9301      	str	r3, [sp, #4]
 8003212:	2302      	movs	r3, #2
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	2300      	movs	r3, #0
 8003218:	220a      	movs	r2, #10
 800321a:	210a      	movs	r1, #10
 800321c:	4896      	ldr	r0, [pc, #600]	; (8003478 <FuncMenu_DrawOutputMenu+0x27c>)
 800321e:	f00c faf5 	bl	800f80c <ILI9341_Draw_Text>
 8003222:	e00a      	b.n	800323a <FuncMenu_DrawOutputMenu+0x3e>
	else
		ILI9341_Draw_Text("OUT->FUNC->SIG", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003224:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003228:	9301      	str	r3, [sp, #4]
 800322a:	2302      	movs	r3, #2
 800322c:	9300      	str	r3, [sp, #0]
 800322e:	2300      	movs	r3, #0
 8003230:	220a      	movs	r2, #10
 8003232:	210a      	movs	r1, #10
 8003234:	4891      	ldr	r0, [pc, #580]	; (800347c <FuncMenu_DrawOutputMenu+0x280>)
 8003236:	f00c fae9 	bl	800f80c <ILI9341_Draw_Text>

	//FunctionProfile_t *func_profileTmp = FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(pOutChan)->func_profile;
 800323a:	79fb      	ldrb	r3, [r7, #7]
 800323c:	4618      	mov	r0, r3
 800323e:	f003 fa59 	bl	80066f4 <SM_GetOutputChannel>
 8003242:	4603      	mov	r3, r0
 8003244:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003248:	617b      	str	r3, [r7, #20]
	if(func_profileTmp)
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 8424 	beq.w	8003a9a <FuncMenu_DrawOutputMenu+0x89e>
	{
		switch(func_profileTmp->func)
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	2b06      	cmp	r3, #6
 8003258:	f200 841f 	bhi.w	8003a9a <FuncMenu_DrawOutputMenu+0x89e>
 800325c:	a201      	add	r2, pc, #4	; (adr r2, 8003264 <FuncMenu_DrawOutputMenu+0x68>)
 800325e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003262:	bf00      	nop
 8003264:	08003281 	.word	0x08003281
 8003268:	0800337d 	.word	0x0800337d
 800326c:	080034a1 	.word	0x080034a1
 8003270:	0800359d 	.word	0x0800359d
 8003274:	08003699 	.word	0x08003699
 8003278:	080037d1 	.word	0x080037d1
 800327c:	080038e3 	.word	0x080038e3
		{
			case SINE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003280:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003284:	9301      	str	r3, [sp, #4]
 8003286:	2302      	movs	r3, #2
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	2300      	movs	r3, #0
 800328c:	2232      	movs	r2, #50	; 0x32
 800328e:	210a      	movs	r1, #10
 8003290:	487b      	ldr	r0, [pc, #492]	; (8003480 <FuncMenu_DrawOutputMenu+0x284>)
 8003292:	f00c fabb 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003296:	2300      	movs	r3, #0
 8003298:	9301      	str	r3, [sp, #4]
 800329a:	2302      	movs	r3, #2
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032a2:	2246      	movs	r2, #70	; 0x46
 80032a4:	210a      	movs	r1, #10
 80032a6:	4877      	ldr	r0, [pc, #476]	; (8003484 <FuncMenu_DrawOutputMenu+0x288>)
 80032a8:	f00c fab0 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80032ac:	2300      	movs	r3, #0
 80032ae:	9301      	str	r3, [sp, #4]
 80032b0:	2302      	movs	r3, #2
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032b8:	225a      	movs	r2, #90	; 0x5a
 80032ba:	210a      	movs	r1, #10
 80032bc:	4872      	ldr	r0, [pc, #456]	; (8003488 <FuncMenu_DrawOutputMenu+0x28c>)
 80032be:	f00c faa5 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80032c2:	2300      	movs	r3, #0
 80032c4:	9301      	str	r3, [sp, #4]
 80032c6:	2302      	movs	r3, #2
 80032c8:	9300      	str	r3, [sp, #0]
 80032ca:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032ce:	226e      	movs	r2, #110	; 0x6e
 80032d0:	210a      	movs	r1, #10
 80032d2:	486e      	ldr	r0, [pc, #440]	; (800348c <FuncMenu_DrawOutputMenu+0x290>)
 80032d4:	f00c fa9a 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80032d8:	2300      	movs	r3, #0
 80032da:	9301      	str	r3, [sp, #4]
 80032dc:	2302      	movs	r3, #2
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032e4:	2282      	movs	r2, #130	; 0x82
 80032e6:	210a      	movs	r1, #10
 80032e8:	4869      	ldr	r0, [pc, #420]	; (8003490 <FuncMenu_DrawOutputMenu+0x294>)
 80032ea:	f00c fa8f 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80032ee:	2300      	movs	r3, #0
 80032f0:	9301      	str	r3, [sp, #4]
 80032f2:	2302      	movs	r3, #2
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032fa:	2296      	movs	r2, #150	; 0x96
 80032fc:	210a      	movs	r1, #10
 80032fe:	4865      	ldr	r0, [pc, #404]	; (8003494 <FuncMenu_DrawOutputMenu+0x298>)
 8003300:	f00c fa84 	bl	800f80c <ILI9341_Draw_Text>

				if(pOutChan)
 8003304:	79fb      	ldrb	r3, [r7, #7]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00a      	beq.n	8003320 <FuncMenu_DrawOutputMenu+0x124>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800330a:	2300      	movs	r3, #0
 800330c:	9301      	str	r3, [sp, #4]
 800330e:	2302      	movs	r3, #2
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003316:	22aa      	movs	r2, #170	; 0xaa
 8003318:	210a      	movs	r1, #10
 800331a:	485f      	ldr	r0, [pc, #380]	; (8003498 <FuncMenu_DrawOutputMenu+0x29c>)
 800331c:	f00c fa76 	bl	800f80c <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003320:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003324:	9301      	str	r3, [sp, #4]
 8003326:	2302      	movs	r3, #2
 8003328:	9300      	str	r3, [sp, #0]
 800332a:	2300      	movs	r3, #0
 800332c:	22d2      	movs	r2, #210	; 0xd2
 800332e:	2105      	movs	r1, #5
 8003330:	485a      	ldr	r0, [pc, #360]	; (800349c <FuncMenu_DrawOutputMenu+0x2a0>)
 8003332:	f00c fa6b 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003336:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800333a:	9301      	str	r3, [sp, #4]
 800333c:	2302      	movs	r3, #2
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	2300      	movs	r3, #0
 8003342:	22d2      	movs	r2, #210	; 0xd2
 8003344:	2161      	movs	r1, #97	; 0x61
 8003346:	4855      	ldr	r0, [pc, #340]	; (800349c <FuncMenu_DrawOutputMenu+0x2a0>)
 8003348:	f00c fa60 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 800334c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003350:	9301      	str	r3, [sp, #4]
 8003352:	2302      	movs	r3, #2
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	2300      	movs	r3, #0
 8003358:	22d2      	movs	r2, #210	; 0xd2
 800335a:	21af      	movs	r1, #175	; 0xaf
 800335c:	484f      	ldr	r0, [pc, #316]	; (800349c <FuncMenu_DrawOutputMenu+0x2a0>)
 800335e:	f00c fa55 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003362:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003366:	9301      	str	r3, [sp, #4]
 8003368:	2302      	movs	r3, #2
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	2300      	movs	r3, #0
 800336e:	22d2      	movs	r2, #210	; 0xd2
 8003370:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003374:	4849      	ldr	r0, [pc, #292]	; (800349c <FuncMenu_DrawOutputMenu+0x2a0>)
 8003376:	f00c fa49 	bl	800f80c <ILI9341_Draw_Text>
				break;
 800337a:	e38e      	b.n	8003a9a <FuncMenu_DrawOutputMenu+0x89e>
			case SQUARE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800337c:	2300      	movs	r3, #0
 800337e:	9301      	str	r3, [sp, #4]
 8003380:	2302      	movs	r3, #2
 8003382:	9300      	str	r3, [sp, #0]
 8003384:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003388:	2232      	movs	r2, #50	; 0x32
 800338a:	210a      	movs	r1, #10
 800338c:	483c      	ldr	r0, [pc, #240]	; (8003480 <FuncMenu_DrawOutputMenu+0x284>)
 800338e:	f00c fa3d 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003392:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003396:	9301      	str	r3, [sp, #4]
 8003398:	2302      	movs	r3, #2
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	2300      	movs	r3, #0
 800339e:	2246      	movs	r2, #70	; 0x46
 80033a0:	210a      	movs	r1, #10
 80033a2:	4838      	ldr	r0, [pc, #224]	; (8003484 <FuncMenu_DrawOutputMenu+0x288>)
 80033a4:	f00c fa32 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80033a8:	2300      	movs	r3, #0
 80033aa:	9301      	str	r3, [sp, #4]
 80033ac:	2302      	movs	r3, #2
 80033ae:	9300      	str	r3, [sp, #0]
 80033b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80033b4:	225a      	movs	r2, #90	; 0x5a
 80033b6:	210a      	movs	r1, #10
 80033b8:	4833      	ldr	r0, [pc, #204]	; (8003488 <FuncMenu_DrawOutputMenu+0x28c>)
 80033ba:	f00c fa27 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80033be:	2300      	movs	r3, #0
 80033c0:	9301      	str	r3, [sp, #4]
 80033c2:	2302      	movs	r3, #2
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80033ca:	226e      	movs	r2, #110	; 0x6e
 80033cc:	210a      	movs	r1, #10
 80033ce:	482f      	ldr	r0, [pc, #188]	; (800348c <FuncMenu_DrawOutputMenu+0x290>)
 80033d0:	f00c fa1c 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80033d4:	2300      	movs	r3, #0
 80033d6:	9301      	str	r3, [sp, #4]
 80033d8:	2302      	movs	r3, #2
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80033e0:	2282      	movs	r2, #130	; 0x82
 80033e2:	210a      	movs	r1, #10
 80033e4:	482a      	ldr	r0, [pc, #168]	; (8003490 <FuncMenu_DrawOutputMenu+0x294>)
 80033e6:	f00c fa11 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80033ea:	2300      	movs	r3, #0
 80033ec:	9301      	str	r3, [sp, #4]
 80033ee:	2302      	movs	r3, #2
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80033f6:	2296      	movs	r2, #150	; 0x96
 80033f8:	210a      	movs	r1, #10
 80033fa:	4826      	ldr	r0, [pc, #152]	; (8003494 <FuncMenu_DrawOutputMenu+0x298>)
 80033fc:	f00c fa06 	bl	800f80c <ILI9341_Draw_Text>

				if(pOutChan)
 8003400:	79fb      	ldrb	r3, [r7, #7]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00a      	beq.n	800341c <FuncMenu_DrawOutputMenu+0x220>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003406:	2300      	movs	r3, #0
 8003408:	9301      	str	r3, [sp, #4]
 800340a:	2302      	movs	r3, #2
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003412:	22aa      	movs	r2, #170	; 0xaa
 8003414:	210a      	movs	r1, #10
 8003416:	4820      	ldr	r0, [pc, #128]	; (8003498 <FuncMenu_DrawOutputMenu+0x29c>)
 8003418:	f00c f9f8 	bl	800f80c <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800341c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003420:	9301      	str	r3, [sp, #4]
 8003422:	2302      	movs	r3, #2
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	2300      	movs	r3, #0
 8003428:	22d2      	movs	r2, #210	; 0xd2
 800342a:	2105      	movs	r1, #5
 800342c:	481b      	ldr	r0, [pc, #108]	; (800349c <FuncMenu_DrawOutputMenu+0x2a0>)
 800342e:	f00c f9ed 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003432:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003436:	9301      	str	r3, [sp, #4]
 8003438:	2302      	movs	r3, #2
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	2300      	movs	r3, #0
 800343e:	22d2      	movs	r2, #210	; 0xd2
 8003440:	2161      	movs	r1, #97	; 0x61
 8003442:	4816      	ldr	r0, [pc, #88]	; (800349c <FuncMenu_DrawOutputMenu+0x2a0>)
 8003444:	f00c f9e2 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003448:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800344c:	9301      	str	r3, [sp, #4]
 800344e:	2302      	movs	r3, #2
 8003450:	9300      	str	r3, [sp, #0]
 8003452:	2300      	movs	r3, #0
 8003454:	22d2      	movs	r2, #210	; 0xd2
 8003456:	21af      	movs	r1, #175	; 0xaf
 8003458:	4810      	ldr	r0, [pc, #64]	; (800349c <FuncMenu_DrawOutputMenu+0x2a0>)
 800345a:	f00c f9d7 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800345e:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003462:	9301      	str	r3, [sp, #4]
 8003464:	2302      	movs	r3, #2
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	2300      	movs	r3, #0
 800346a:	22d2      	movs	r2, #210	; 0xd2
 800346c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003470:	480a      	ldr	r0, [pc, #40]	; (800349c <FuncMenu_DrawOutputMenu+0x2a0>)
 8003472:	f00c f9cb 	bl	800f80c <ILI9341_Draw_Text>
				break;
 8003476:	e310      	b.n	8003a9a <FuncMenu_DrawOutputMenu+0x89e>
 8003478:	08014a68 	.word	0x08014a68
 800347c:	08014a78 	.word	0x08014a78
 8003480:	08014a88 	.word	0x08014a88
 8003484:	08014a90 	.word	0x08014a90
 8003488:	08014a9c 	.word	0x08014a9c
 800348c:	08014aa4 	.word	0x08014aa4
 8003490:	08014ab0 	.word	0x08014ab0
 8003494:	08014abc 	.word	0x08014abc
 8003498:	08014ac4 	.word	0x08014ac4
 800349c:	08014a60 	.word	0x08014a60
			case SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034a0:	2300      	movs	r3, #0
 80034a2:	9301      	str	r3, [sp, #4]
 80034a4:	2302      	movs	r3, #2
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80034ac:	2232      	movs	r2, #50	; 0x32
 80034ae:	210a      	movs	r1, #10
 80034b0:	48be      	ldr	r0, [pc, #760]	; (80037ac <FuncMenu_DrawOutputMenu+0x5b0>)
 80034b2:	f00c f9ab 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034b6:	2300      	movs	r3, #0
 80034b8:	9301      	str	r3, [sp, #4]
 80034ba:	2302      	movs	r3, #2
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80034c2:	2246      	movs	r2, #70	; 0x46
 80034c4:	210a      	movs	r1, #10
 80034c6:	48ba      	ldr	r0, [pc, #744]	; (80037b0 <FuncMenu_DrawOutputMenu+0x5b4>)
 80034c8:	f00c f9a0 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80034cc:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80034d0:	9301      	str	r3, [sp, #4]
 80034d2:	2302      	movs	r3, #2
 80034d4:	9300      	str	r3, [sp, #0]
 80034d6:	2300      	movs	r3, #0
 80034d8:	225a      	movs	r2, #90	; 0x5a
 80034da:	210a      	movs	r1, #10
 80034dc:	48b5      	ldr	r0, [pc, #724]	; (80037b4 <FuncMenu_DrawOutputMenu+0x5b8>)
 80034de:	f00c f995 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034e2:	2300      	movs	r3, #0
 80034e4:	9301      	str	r3, [sp, #4]
 80034e6:	2302      	movs	r3, #2
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80034ee:	226e      	movs	r2, #110	; 0x6e
 80034f0:	210a      	movs	r1, #10
 80034f2:	48b1      	ldr	r0, [pc, #708]	; (80037b8 <FuncMenu_DrawOutputMenu+0x5bc>)
 80034f4:	f00c f98a 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034f8:	2300      	movs	r3, #0
 80034fa:	9301      	str	r3, [sp, #4]
 80034fc:	2302      	movs	r3, #2
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003504:	2282      	movs	r2, #130	; 0x82
 8003506:	210a      	movs	r1, #10
 8003508:	48ac      	ldr	r0, [pc, #688]	; (80037bc <FuncMenu_DrawOutputMenu+0x5c0>)
 800350a:	f00c f97f 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800350e:	2300      	movs	r3, #0
 8003510:	9301      	str	r3, [sp, #4]
 8003512:	2302      	movs	r3, #2
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800351a:	2296      	movs	r2, #150	; 0x96
 800351c:	210a      	movs	r1, #10
 800351e:	48a8      	ldr	r0, [pc, #672]	; (80037c0 <FuncMenu_DrawOutputMenu+0x5c4>)
 8003520:	f00c f974 	bl	800f80c <ILI9341_Draw_Text>
				if(pOutChan)
 8003524:	79fb      	ldrb	r3, [r7, #7]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00a      	beq.n	8003540 <FuncMenu_DrawOutputMenu+0x344>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800352a:	2300      	movs	r3, #0
 800352c:	9301      	str	r3, [sp, #4]
 800352e:	2302      	movs	r3, #2
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003536:	22aa      	movs	r2, #170	; 0xaa
 8003538:	210a      	movs	r1, #10
 800353a:	48a2      	ldr	r0, [pc, #648]	; (80037c4 <FuncMenu_DrawOutputMenu+0x5c8>)
 800353c:	f00c f966 	bl	800f80c <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003540:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003544:	9301      	str	r3, [sp, #4]
 8003546:	2302      	movs	r3, #2
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	2300      	movs	r3, #0
 800354c:	22d2      	movs	r2, #210	; 0xd2
 800354e:	2105      	movs	r1, #5
 8003550:	489d      	ldr	r0, [pc, #628]	; (80037c8 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003552:	f00c f95b 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003556:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800355a:	9301      	str	r3, [sp, #4]
 800355c:	2302      	movs	r3, #2
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	2300      	movs	r3, #0
 8003562:	22d2      	movs	r2, #210	; 0xd2
 8003564:	2161      	movs	r1, #97	; 0x61
 8003566:	4898      	ldr	r0, [pc, #608]	; (80037c8 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003568:	f00c f950 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 800356c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003570:	9301      	str	r3, [sp, #4]
 8003572:	2302      	movs	r3, #2
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	2300      	movs	r3, #0
 8003578:	22d2      	movs	r2, #210	; 0xd2
 800357a:	21af      	movs	r1, #175	; 0xaf
 800357c:	4892      	ldr	r0, [pc, #584]	; (80037c8 <FuncMenu_DrawOutputMenu+0x5cc>)
 800357e:	f00c f945 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003582:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003586:	9301      	str	r3, [sp, #4]
 8003588:	2302      	movs	r3, #2
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	2300      	movs	r3, #0
 800358e:	22d2      	movs	r2, #210	; 0xd2
 8003590:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003594:	488c      	ldr	r0, [pc, #560]	; (80037c8 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003596:	f00c f939 	bl	800f80c <ILI9341_Draw_Text>
				break;
 800359a:	e27e      	b.n	8003a9a <FuncMenu_DrawOutputMenu+0x89e>
			case REV_SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800359c:	2300      	movs	r3, #0
 800359e:	9301      	str	r3, [sp, #4]
 80035a0:	2302      	movs	r3, #2
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035a8:	2232      	movs	r2, #50	; 0x32
 80035aa:	210a      	movs	r1, #10
 80035ac:	487f      	ldr	r0, [pc, #508]	; (80037ac <FuncMenu_DrawOutputMenu+0x5b0>)
 80035ae:	f00c f92d 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035b2:	2300      	movs	r3, #0
 80035b4:	9301      	str	r3, [sp, #4]
 80035b6:	2302      	movs	r3, #2
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035be:	2246      	movs	r2, #70	; 0x46
 80035c0:	210a      	movs	r1, #10
 80035c2:	487b      	ldr	r0, [pc, #492]	; (80037b0 <FuncMenu_DrawOutputMenu+0x5b4>)
 80035c4:	f00c f922 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035c8:	2300      	movs	r3, #0
 80035ca:	9301      	str	r3, [sp, #4]
 80035cc:	2302      	movs	r3, #2
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035d4:	225a      	movs	r2, #90	; 0x5a
 80035d6:	210a      	movs	r1, #10
 80035d8:	4876      	ldr	r0, [pc, #472]	; (80037b4 <FuncMenu_DrawOutputMenu+0x5b8>)
 80035da:	f00c f917 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80035de:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80035e2:	9301      	str	r3, [sp, #4]
 80035e4:	2302      	movs	r3, #2
 80035e6:	9300      	str	r3, [sp, #0]
 80035e8:	2300      	movs	r3, #0
 80035ea:	226e      	movs	r2, #110	; 0x6e
 80035ec:	210a      	movs	r1, #10
 80035ee:	4872      	ldr	r0, [pc, #456]	; (80037b8 <FuncMenu_DrawOutputMenu+0x5bc>)
 80035f0:	f00c f90c 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035f4:	2300      	movs	r3, #0
 80035f6:	9301      	str	r3, [sp, #4]
 80035f8:	2302      	movs	r3, #2
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003600:	2282      	movs	r2, #130	; 0x82
 8003602:	210a      	movs	r1, #10
 8003604:	486d      	ldr	r0, [pc, #436]	; (80037bc <FuncMenu_DrawOutputMenu+0x5c0>)
 8003606:	f00c f901 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800360a:	2300      	movs	r3, #0
 800360c:	9301      	str	r3, [sp, #4]
 800360e:	2302      	movs	r3, #2
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003616:	2296      	movs	r2, #150	; 0x96
 8003618:	210a      	movs	r1, #10
 800361a:	4869      	ldr	r0, [pc, #420]	; (80037c0 <FuncMenu_DrawOutputMenu+0x5c4>)
 800361c:	f00c f8f6 	bl	800f80c <ILI9341_Draw_Text>

				if(pOutChan)
 8003620:	79fb      	ldrb	r3, [r7, #7]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00a      	beq.n	800363c <FuncMenu_DrawOutputMenu+0x440>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003626:	2300      	movs	r3, #0
 8003628:	9301      	str	r3, [sp, #4]
 800362a:	2302      	movs	r3, #2
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003632:	22aa      	movs	r2, #170	; 0xaa
 8003634:	210a      	movs	r1, #10
 8003636:	4863      	ldr	r0, [pc, #396]	; (80037c4 <FuncMenu_DrawOutputMenu+0x5c8>)
 8003638:	f00c f8e8 	bl	800f80c <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800363c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003640:	9301      	str	r3, [sp, #4]
 8003642:	2302      	movs	r3, #2
 8003644:	9300      	str	r3, [sp, #0]
 8003646:	2300      	movs	r3, #0
 8003648:	22d2      	movs	r2, #210	; 0xd2
 800364a:	2105      	movs	r1, #5
 800364c:	485e      	ldr	r0, [pc, #376]	; (80037c8 <FuncMenu_DrawOutputMenu+0x5cc>)
 800364e:	f00c f8dd 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003652:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003656:	9301      	str	r3, [sp, #4]
 8003658:	2302      	movs	r3, #2
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	2300      	movs	r3, #0
 800365e:	22d2      	movs	r2, #210	; 0xd2
 8003660:	2161      	movs	r1, #97	; 0x61
 8003662:	4859      	ldr	r0, [pc, #356]	; (80037c8 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003664:	f00c f8d2 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003668:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800366c:	9301      	str	r3, [sp, #4]
 800366e:	2302      	movs	r3, #2
 8003670:	9300      	str	r3, [sp, #0]
 8003672:	2300      	movs	r3, #0
 8003674:	22d2      	movs	r2, #210	; 0xd2
 8003676:	21af      	movs	r1, #175	; 0xaf
 8003678:	4853      	ldr	r0, [pc, #332]	; (80037c8 <FuncMenu_DrawOutputMenu+0x5cc>)
 800367a:	f00c f8c7 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800367e:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003682:	9301      	str	r3, [sp, #4]
 8003684:	2302      	movs	r3, #2
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	2300      	movs	r3, #0
 800368a:	22d2      	movs	r2, #210	; 0xd2
 800368c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003690:	484d      	ldr	r0, [pc, #308]	; (80037c8 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003692:	f00c f8bb 	bl	800f80c <ILI9341_Draw_Text>
				break;
 8003696:	e200      	b.n	8003a9a <FuncMenu_DrawOutputMenu+0x89e>
			case TRIANGLE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003698:	2300      	movs	r3, #0
 800369a:	9301      	str	r3, [sp, #4]
 800369c:	2302      	movs	r3, #2
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036a4:	2232      	movs	r2, #50	; 0x32
 80036a6:	210a      	movs	r1, #10
 80036a8:	4840      	ldr	r0, [pc, #256]	; (80037ac <FuncMenu_DrawOutputMenu+0x5b0>)
 80036aa:	f00c f8af 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036ae:	2300      	movs	r3, #0
 80036b0:	9301      	str	r3, [sp, #4]
 80036b2:	2302      	movs	r3, #2
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036ba:	2246      	movs	r2, #70	; 0x46
 80036bc:	210a      	movs	r1, #10
 80036be:	483c      	ldr	r0, [pc, #240]	; (80037b0 <FuncMenu_DrawOutputMenu+0x5b4>)
 80036c0:	f00c f8a4 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036c4:	2300      	movs	r3, #0
 80036c6:	9301      	str	r3, [sp, #4]
 80036c8:	2302      	movs	r3, #2
 80036ca:	9300      	str	r3, [sp, #0]
 80036cc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036d0:	225a      	movs	r2, #90	; 0x5a
 80036d2:	210a      	movs	r1, #10
 80036d4:	4837      	ldr	r0, [pc, #220]	; (80037b4 <FuncMenu_DrawOutputMenu+0x5b8>)
 80036d6:	f00c f899 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036da:	2300      	movs	r3, #0
 80036dc:	9301      	str	r3, [sp, #4]
 80036de:	2302      	movs	r3, #2
 80036e0:	9300      	str	r3, [sp, #0]
 80036e2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036e6:	226e      	movs	r2, #110	; 0x6e
 80036e8:	210a      	movs	r1, #10
 80036ea:	4833      	ldr	r0, [pc, #204]	; (80037b8 <FuncMenu_DrawOutputMenu+0x5bc>)
 80036ec:	f00c f88e 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80036f0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80036f4:	9301      	str	r3, [sp, #4]
 80036f6:	2302      	movs	r3, #2
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	2300      	movs	r3, #0
 80036fc:	2282      	movs	r2, #130	; 0x82
 80036fe:	210a      	movs	r1, #10
 8003700:	482e      	ldr	r0, [pc, #184]	; (80037bc <FuncMenu_DrawOutputMenu+0x5c0>)
 8003702:	f00c f883 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003706:	2300      	movs	r3, #0
 8003708:	9301      	str	r3, [sp, #4]
 800370a:	2302      	movs	r3, #2
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003712:	2296      	movs	r2, #150	; 0x96
 8003714:	210a      	movs	r1, #10
 8003716:	482a      	ldr	r0, [pc, #168]	; (80037c0 <FuncMenu_DrawOutputMenu+0x5c4>)
 8003718:	f00c f878 	bl	800f80c <ILI9341_Draw_Text>

				if(pOutChan)
 800371c:	79fb      	ldrb	r3, [r7, #7]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00a      	beq.n	8003738 <FuncMenu_DrawOutputMenu+0x53c>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003722:	2300      	movs	r3, #0
 8003724:	9301      	str	r3, [sp, #4]
 8003726:	2302      	movs	r3, #2
 8003728:	9300      	str	r3, [sp, #0]
 800372a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800372e:	22aa      	movs	r2, #170	; 0xaa
 8003730:	210a      	movs	r1, #10
 8003732:	4824      	ldr	r0, [pc, #144]	; (80037c4 <FuncMenu_DrawOutputMenu+0x5c8>)
 8003734:	f00c f86a 	bl	800f80c <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003738:	f240 23fd 	movw	r3, #765	; 0x2fd
 800373c:	9301      	str	r3, [sp, #4]
 800373e:	2302      	movs	r3, #2
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	2300      	movs	r3, #0
 8003744:	22d2      	movs	r2, #210	; 0xd2
 8003746:	2105      	movs	r1, #5
 8003748:	481f      	ldr	r0, [pc, #124]	; (80037c8 <FuncMenu_DrawOutputMenu+0x5cc>)
 800374a:	f00c f85f 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800374e:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003752:	9301      	str	r3, [sp, #4]
 8003754:	2302      	movs	r3, #2
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	2300      	movs	r3, #0
 800375a:	22d2      	movs	r2, #210	; 0xd2
 800375c:	2161      	movs	r1, #97	; 0x61
 800375e:	481a      	ldr	r0, [pc, #104]	; (80037c8 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003760:	f00c f854 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003764:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003768:	9301      	str	r3, [sp, #4]
 800376a:	2302      	movs	r3, #2
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	2300      	movs	r3, #0
 8003770:	22d2      	movs	r2, #210	; 0xd2
 8003772:	21af      	movs	r1, #175	; 0xaf
 8003774:	4814      	ldr	r0, [pc, #80]	; (80037c8 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003776:	f00c f849 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800377a:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800377e:	9301      	str	r3, [sp, #4]
 8003780:	2302      	movs	r3, #2
 8003782:	9300      	str	r3, [sp, #0]
 8003784:	2300      	movs	r3, #0
 8003786:	22d2      	movs	r2, #210	; 0xd2
 8003788:	f44f 7182 	mov.w	r1, #260	; 0x104
 800378c:	480e      	ldr	r0, [pc, #56]	; (80037c8 <FuncMenu_DrawOutputMenu+0x5cc>)
 800378e:	f00c f83d 	bl	800f80c <ILI9341_Draw_Text>

				ILI9341_Draw_Text("               ", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003792:	2300      	movs	r3, #0
 8003794:	9301      	str	r3, [sp, #4]
 8003796:	2302      	movs	r3, #2
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800379e:	2232      	movs	r2, #50	; 0x32
 80037a0:	2196      	movs	r1, #150	; 0x96
 80037a2:	480a      	ldr	r0, [pc, #40]	; (80037cc <FuncMenu_DrawOutputMenu+0x5d0>)
 80037a4:	f00c f832 	bl	800f80c <ILI9341_Draw_Text>
				break;
 80037a8:	e177      	b.n	8003a9a <FuncMenu_DrawOutputMenu+0x89e>
 80037aa:	bf00      	nop
 80037ac:	08014a88 	.word	0x08014a88
 80037b0:	08014a90 	.word	0x08014a90
 80037b4:	08014a9c 	.word	0x08014a9c
 80037b8:	08014aa4 	.word	0x08014aa4
 80037bc:	08014ab0 	.word	0x08014ab0
 80037c0:	08014abc 	.word	0x08014abc
 80037c4:	08014ac4 	.word	0x08014ac4
 80037c8:	08014a60 	.word	0x08014a60
 80037cc:	08014acc 	.word	0x08014acc
			case IMPULSE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037d0:	2300      	movs	r3, #0
 80037d2:	9301      	str	r3, [sp, #4]
 80037d4:	2302      	movs	r3, #2
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037dc:	2232      	movs	r2, #50	; 0x32
 80037de:	210a      	movs	r1, #10
 80037e0:	48b0      	ldr	r0, [pc, #704]	; (8003aa4 <FuncMenu_DrawOutputMenu+0x8a8>)
 80037e2:	f00c f813 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037e6:	2300      	movs	r3, #0
 80037e8:	9301      	str	r3, [sp, #4]
 80037ea:	2302      	movs	r3, #2
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037f2:	2246      	movs	r2, #70	; 0x46
 80037f4:	210a      	movs	r1, #10
 80037f6:	48ac      	ldr	r0, [pc, #688]	; (8003aa8 <FuncMenu_DrawOutputMenu+0x8ac>)
 80037f8:	f00c f808 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037fc:	2300      	movs	r3, #0
 80037fe:	9301      	str	r3, [sp, #4]
 8003800:	2302      	movs	r3, #2
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003808:	225a      	movs	r2, #90	; 0x5a
 800380a:	210a      	movs	r1, #10
 800380c:	48a7      	ldr	r0, [pc, #668]	; (8003aac <FuncMenu_DrawOutputMenu+0x8b0>)
 800380e:	f00b fffd 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003812:	2300      	movs	r3, #0
 8003814:	9301      	str	r3, [sp, #4]
 8003816:	2302      	movs	r3, #2
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800381e:	226e      	movs	r2, #110	; 0x6e
 8003820:	210a      	movs	r1, #10
 8003822:	48a3      	ldr	r0, [pc, #652]	; (8003ab0 <FuncMenu_DrawOutputMenu+0x8b4>)
 8003824:	f00b fff2 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003828:	2300      	movs	r3, #0
 800382a:	9301      	str	r3, [sp, #4]
 800382c:	2302      	movs	r3, #2
 800382e:	9300      	str	r3, [sp, #0]
 8003830:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003834:	2282      	movs	r2, #130	; 0x82
 8003836:	210a      	movs	r1, #10
 8003838:	489e      	ldr	r0, [pc, #632]	; (8003ab4 <FuncMenu_DrawOutputMenu+0x8b8>)
 800383a:	f00b ffe7 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800383e:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003842:	9301      	str	r3, [sp, #4]
 8003844:	2302      	movs	r3, #2
 8003846:	9300      	str	r3, [sp, #0]
 8003848:	2300      	movs	r3, #0
 800384a:	2296      	movs	r2, #150	; 0x96
 800384c:	210a      	movs	r1, #10
 800384e:	489a      	ldr	r0, [pc, #616]	; (8003ab8 <FuncMenu_DrawOutputMenu+0x8bc>)
 8003850:	f00b ffdc 	bl	800f80c <ILI9341_Draw_Text>

				if(pOutChan)
 8003854:	79fb      	ldrb	r3, [r7, #7]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00a      	beq.n	8003870 <FuncMenu_DrawOutputMenu+0x674>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800385a:	2300      	movs	r3, #0
 800385c:	9301      	str	r3, [sp, #4]
 800385e:	2302      	movs	r3, #2
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003866:	22aa      	movs	r2, #170	; 0xaa
 8003868:	210a      	movs	r1, #10
 800386a:	4894      	ldr	r0, [pc, #592]	; (8003abc <FuncMenu_DrawOutputMenu+0x8c0>)
 800386c:	f00b ffce 	bl	800f80c <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003870:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003874:	9301      	str	r3, [sp, #4]
 8003876:	2302      	movs	r3, #2
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	2300      	movs	r3, #0
 800387c:	22d2      	movs	r2, #210	; 0xd2
 800387e:	2105      	movs	r1, #5
 8003880:	488f      	ldr	r0, [pc, #572]	; (8003ac0 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003882:	f00b ffc3 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003886:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800388a:	9301      	str	r3, [sp, #4]
 800388c:	2302      	movs	r3, #2
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	2300      	movs	r3, #0
 8003892:	22d2      	movs	r2, #210	; 0xd2
 8003894:	2161      	movs	r1, #97	; 0x61
 8003896:	488a      	ldr	r0, [pc, #552]	; (8003ac0 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003898:	f00b ffb8 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 800389c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80038a0:	9301      	str	r3, [sp, #4]
 80038a2:	2302      	movs	r3, #2
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	2300      	movs	r3, #0
 80038a8:	22d2      	movs	r2, #210	; 0xd2
 80038aa:	21af      	movs	r1, #175	; 0xaf
 80038ac:	4884      	ldr	r0, [pc, #528]	; (8003ac0 <FuncMenu_DrawOutputMenu+0x8c4>)
 80038ae:	f00b ffad 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80038b2:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80038b6:	9301      	str	r3, [sp, #4]
 80038b8:	2302      	movs	r3, #2
 80038ba:	9300      	str	r3, [sp, #0]
 80038bc:	2300      	movs	r3, #0
 80038be:	22d2      	movs	r2, #210	; 0xd2
 80038c0:	f44f 7182 	mov.w	r1, #260	; 0x104
 80038c4:	487e      	ldr	r0, [pc, #504]	; (8003ac0 <FuncMenu_DrawOutputMenu+0x8c4>)
 80038c6:	f00b ffa1 	bl	800f80c <ILI9341_Draw_Text>

				ILI9341_Draw_Text("               ", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80038ca:	2300      	movs	r3, #0
 80038cc:	9301      	str	r3, [sp, #4]
 80038ce:	2302      	movs	r3, #2
 80038d0:	9300      	str	r3, [sp, #0]
 80038d2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80038d6:	2232      	movs	r2, #50	; 0x32
 80038d8:	2196      	movs	r1, #150	; 0x96
 80038da:	487a      	ldr	r0, [pc, #488]	; (8003ac4 <FuncMenu_DrawOutputMenu+0x8c8>)
 80038dc:	f00b ff96 	bl	800f80c <ILI9341_Draw_Text>
				break;
 80038e0:	e0db      	b.n	8003a9a <FuncMenu_DrawOutputMenu+0x89e>
			case PWM_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80038e2:	2300      	movs	r3, #0
 80038e4:	9301      	str	r3, [sp, #4]
 80038e6:	2302      	movs	r3, #2
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80038ee:	2232      	movs	r2, #50	; 0x32
 80038f0:	210a      	movs	r1, #10
 80038f2:	486c      	ldr	r0, [pc, #432]	; (8003aa4 <FuncMenu_DrawOutputMenu+0x8a8>)
 80038f4:	f00b ff8a 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80038f8:	2300      	movs	r3, #0
 80038fa:	9301      	str	r3, [sp, #4]
 80038fc:	2302      	movs	r3, #2
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003904:	2246      	movs	r2, #70	; 0x46
 8003906:	210a      	movs	r1, #10
 8003908:	4867      	ldr	r0, [pc, #412]	; (8003aa8 <FuncMenu_DrawOutputMenu+0x8ac>)
 800390a:	f00b ff7f 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800390e:	2300      	movs	r3, #0
 8003910:	9301      	str	r3, [sp, #4]
 8003912:	2302      	movs	r3, #2
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800391a:	225a      	movs	r2, #90	; 0x5a
 800391c:	210a      	movs	r1, #10
 800391e:	4863      	ldr	r0, [pc, #396]	; (8003aac <FuncMenu_DrawOutputMenu+0x8b0>)
 8003920:	f00b ff74 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003924:	2300      	movs	r3, #0
 8003926:	9301      	str	r3, [sp, #4]
 8003928:	2302      	movs	r3, #2
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003930:	226e      	movs	r2, #110	; 0x6e
 8003932:	210a      	movs	r1, #10
 8003934:	485e      	ldr	r0, [pc, #376]	; (8003ab0 <FuncMenu_DrawOutputMenu+0x8b4>)
 8003936:	f00b ff69 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800393a:	2300      	movs	r3, #0
 800393c:	9301      	str	r3, [sp, #4]
 800393e:	2302      	movs	r3, #2
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003946:	2282      	movs	r2, #130	; 0x82
 8003948:	210a      	movs	r1, #10
 800394a:	485a      	ldr	r0, [pc, #360]	; (8003ab4 <FuncMenu_DrawOutputMenu+0x8b8>)
 800394c:	f00b ff5e 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003950:	2300      	movs	r3, #0
 8003952:	9301      	str	r3, [sp, #4]
 8003954:	2302      	movs	r3, #2
 8003956:	9300      	str	r3, [sp, #0]
 8003958:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800395c:	2296      	movs	r2, #150	; 0x96
 800395e:	210a      	movs	r1, #10
 8003960:	4855      	ldr	r0, [pc, #340]	; (8003ab8 <FuncMenu_DrawOutputMenu+0x8bc>)
 8003962:	f00b ff53 	bl	800f80c <ILI9341_Draw_Text>

				if(pOutChan)
 8003966:	79fb      	ldrb	r3, [r7, #7]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00a      	beq.n	8003982 <FuncMenu_DrawOutputMenu+0x786>
					ILI9341_Draw_Text("- PWM", 		10, 170, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800396c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003970:	9301      	str	r3, [sp, #4]
 8003972:	2302      	movs	r3, #2
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	2300      	movs	r3, #0
 8003978:	22aa      	movs	r2, #170	; 0xaa
 800397a:	210a      	movs	r1, #10
 800397c:	484f      	ldr	r0, [pc, #316]	; (8003abc <FuncMenu_DrawOutputMenu+0x8c0>)
 800397e:	f00b ff45 	bl	800f80c <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003982:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003986:	9301      	str	r3, [sp, #4]
 8003988:	2302      	movs	r3, #2
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	2300      	movs	r3, #0
 800398e:	22d2      	movs	r2, #210	; 0xd2
 8003990:	2105      	movs	r1, #5
 8003992:	484b      	ldr	r0, [pc, #300]	; (8003ac0 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003994:	f00b ff3a 	bl	800f80c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003998:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800399c:	9301      	str	r3, [sp, #4]
 800399e:	2302      	movs	r3, #2
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	2300      	movs	r3, #0
 80039a4:	22d2      	movs	r2, #210	; 0xd2
 80039a6:	2161      	movs	r1, #97	; 0x61
 80039a8:	4845      	ldr	r0, [pc, #276]	; (8003ac0 <FuncMenu_DrawOutputMenu+0x8c4>)
 80039aa:	f00b ff2f 	bl	800f80c <ILI9341_Draw_Text>

				if(pOutChan)
 80039ae:	79fb      	ldrb	r3, [r7, #7]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d05a      	beq.n	8003a6a <FuncMenu_DrawOutputMenu+0x86e>
				{
					ILI9341_Draw_Text("DUTY", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80039b4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80039b8:	9301      	str	r3, [sp, #4]
 80039ba:	2302      	movs	r3, #2
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	2300      	movs	r3, #0
 80039c0:	22d2      	movs	r2, #210	; 0xd2
 80039c2:	21af      	movs	r1, #175	; 0xaf
 80039c4:	4840      	ldr	r0, [pc, #256]	; (8003ac8 <FuncMenu_DrawOutputMenu+0x8cc>)
 80039c6:	f00b ff21 	bl	800f80c <ILI9341_Draw_Text>
					char duty[10] = "";
 80039ca:	2300      	movs	r3, #0
 80039cc:	60bb      	str	r3, [r7, #8]
 80039ce:	f107 030c 	add.w	r3, r7, #12
 80039d2:	2200      	movs	r2, #0
 80039d4:	601a      	str	r2, [r3, #0]
 80039d6:	809a      	strh	r2, [r3, #4]
					snprintf(duty, sizeof(duty), "%0.2f%%", ((float)PWM_AUX_OUT_TIM->CCR1 / (float)PWM_AUX_OUT_TIM->ARR) * 100);
 80039d8:	4b3c      	ldr	r3, [pc, #240]	; (8003acc <FuncMenu_DrawOutputMenu+0x8d0>)
 80039da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039dc:	ee07 3a90 	vmov	s15, r3
 80039e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039e4:	4b39      	ldr	r3, [pc, #228]	; (8003acc <FuncMenu_DrawOutputMenu+0x8d0>)
 80039e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e8:	ee07 3a90 	vmov	s15, r3
 80039ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80039f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039f4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003ad0 <FuncMenu_DrawOutputMenu+0x8d4>
 80039f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039fc:	ee17 0a90 	vmov	r0, s15
 8003a00:	f7fc fdca 	bl	8000598 <__aeabi_f2d>
 8003a04:	4603      	mov	r3, r0
 8003a06:	460c      	mov	r4, r1
 8003a08:	f107 0008 	add.w	r0, r7, #8
 8003a0c:	e9cd 3400 	strd	r3, r4, [sp]
 8003a10:	4a30      	ldr	r2, [pc, #192]	; (8003ad4 <FuncMenu_DrawOutputMenu+0x8d8>)
 8003a12:	210a      	movs	r1, #10
 8003a14:	f00d fab6 	bl	8010f84 <sniprintf>
					ILI9341_Draw_Text(duty, 	220, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003a18:	f107 0008 	add.w	r0, r7, #8
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	9301      	str	r3, [sp, #4]
 8003a20:	2302      	movs	r3, #2
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003a28:	2232      	movs	r2, #50	; 0x32
 8003a2a:	21dc      	movs	r1, #220	; 0xdc
 8003a2c:	f00b feee 	bl	800f80c <ILI9341_Draw_Text>
					if(SM_IsFuncPwmDutyMode())
 8003a30:	f003 f964 	bl	8006cfc <SM_IsFuncPwmDutyMode>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00b      	beq.n	8003a52 <FuncMenu_DrawOutputMenu+0x856>
					{
						ILI9341_Draw_Text("DUTY:", 	150, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003a3a:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003a3e:	9301      	str	r3, [sp, #4]
 8003a40:	2302      	movs	r3, #2
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	2300      	movs	r3, #0
 8003a46:	2232      	movs	r2, #50	; 0x32
 8003a48:	2196      	movs	r1, #150	; 0x96
 8003a4a:	4823      	ldr	r0, [pc, #140]	; (8003ad8 <FuncMenu_DrawOutputMenu+0x8dc>)
 8003a4c:	f00b fede 	bl	800f80c <ILI9341_Draw_Text>
 8003a50:	e016      	b.n	8003a80 <FuncMenu_DrawOutputMenu+0x884>

					}
					else
					{
						ILI9341_Draw_Text("DUTY:", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003a52:	2300      	movs	r3, #0
 8003a54:	9301      	str	r3, [sp, #4]
 8003a56:	2302      	movs	r3, #2
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003a5e:	2232      	movs	r2, #50	; 0x32
 8003a60:	2196      	movs	r1, #150	; 0x96
 8003a62:	481d      	ldr	r0, [pc, #116]	; (8003ad8 <FuncMenu_DrawOutputMenu+0x8dc>)
 8003a64:	f00b fed2 	bl	800f80c <ILI9341_Draw_Text>
 8003a68:	e00a      	b.n	8003a80 <FuncMenu_DrawOutputMenu+0x884>
					}
				}
				else
				{
					ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003a6a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003a6e:	9301      	str	r3, [sp, #4]
 8003a70:	2302      	movs	r3, #2
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	2300      	movs	r3, #0
 8003a76:	22d2      	movs	r2, #210	; 0xd2
 8003a78:	21af      	movs	r1, #175	; 0xaf
 8003a7a:	4811      	ldr	r0, [pc, #68]	; (8003ac0 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003a7c:	f00b fec6 	bl	800f80c <ILI9341_Draw_Text>
				}

				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003a80:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003a84:	9301      	str	r3, [sp, #4]
 8003a86:	2302      	movs	r3, #2
 8003a88:	9300      	str	r3, [sp, #0]
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	22d2      	movs	r2, #210	; 0xd2
 8003a8e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003a92:	480b      	ldr	r0, [pc, #44]	; (8003ac0 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003a94:	f00b feba 	bl	800f80c <ILI9341_Draw_Text>

				break;
 8003a98:	bf00      	nop
				//
		}
	}
}
 8003a9a:	bf00      	nop
 8003a9c:	371c      	adds	r7, #28
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd90      	pop	{r4, r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	08014a88 	.word	0x08014a88
 8003aa8:	08014a90 	.word	0x08014a90
 8003aac:	08014a9c 	.word	0x08014a9c
 8003ab0:	08014aa4 	.word	0x08014aa4
 8003ab4:	08014ab0 	.word	0x08014ab0
 8003ab8:	08014abc 	.word	0x08014abc
 8003abc:	08014ac4 	.word	0x08014ac4
 8003ac0:	08014a60 	.word	0x08014a60
 8003ac4:	08014acc 	.word	0x08014acc
 8003ac8:	08014adc 	.word	0x08014adc
 8003acc:	40000400 	.word	0x40000400
 8003ad0:	42c80000 	.word	0x42c80000
 8003ad4:	08014ae4 	.word	0x08014ae4
 8003ad8:	08014aec 	.word	0x08014aec

08003adc <GainMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMenu(eGainMenu_Status pMenu)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003ae6:	79fb      	ldrb	r3, [r7, #7]
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d007      	beq.n	8003afc <GainMenu_DrawMenu+0x20>
 8003aec:	2b03      	cmp	r3, #3
 8003aee:	d008      	beq.n	8003b02 <GainMenu_DrawMenu+0x26>
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d000      	beq.n	8003af6 <GainMenu_DrawMenu+0x1a>
		case ENABLE_GAIN_Aux_MENU:
			GainMenu_DrawAuxMenu();
			break;

		default:
			break;
 8003af4:	e008      	b.n	8003b08 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawMainMenu();
 8003af6:	f000 f80b 	bl	8003b10 <GainMenu_DrawMainMenu>
			break;
 8003afa:	e005      	b.n	8003b08 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSignalMenu();
 8003afc:	f000 f868 	bl	8003bd0 <GainMenu_DrawSignalMenu>
			break;
 8003b00:	e002      	b.n	8003b08 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawAuxMenu();
 8003b02:	f000 f8af 	bl	8003c64 <GainMenu_DrawAuxMenu>
			break;
 8003b06:	bf00      	nop

	}
}
 8003b08:	bf00      	nop
 8003b0a:	3708      	adds	r7, #8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <GainMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMainMenu()
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->GAIN", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003b16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b1a:	9301      	str	r3, [sp, #4]
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	2300      	movs	r3, #0
 8003b22:	220a      	movs	r2, #10
 8003b24:	210a      	movs	r1, #10
 8003b26:	4826      	ldr	r0, [pc, #152]	; (8003bc0 <GainMenu_DrawMainMenu+0xb0>)
 8003b28:	f00b fe70 	bl	800f80c <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003b2c:	f7fd f9e4 	bl	8000ef8 <DM_DisplayFormattedOutput>

	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5, 	 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003b30:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003b34:	9301      	str	r3, [sp, #4]
 8003b36:	2302      	movs	r3, #2
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	22d2      	movs	r2, #210	; 0xd2
 8003b3e:	2105      	movs	r1, #5
 8003b40:	4820      	ldr	r0, [pc, #128]	; (8003bc4 <GainMenu_DrawMainMenu+0xb4>)
 8003b42:	f00b fe63 	bl	800f80c <ILI9341_Draw_Text>

	eOutput_mode aux_output_func = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8003b46:	2001      	movs	r0, #1
 8003b48:	f002 fdd4 	bl	80066f4 <SM_GetOutputChannel>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	71fb      	strb	r3, [r7, #7]
	if(aux_output_func == PWM_FUNC_MODE)
 8003b56:	79fb      	ldrb	r3, [r7, #7]
 8003b58:	2b06      	cmp	r3, #6
 8003b5a:	d10b      	bne.n	8003b74 <GainMenu_DrawMainMenu+0x64>
	{
		ILI9341_Draw_Text("    ",	100,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003b5c:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003b60:	9301      	str	r3, [sp, #4]
 8003b62:	2302      	movs	r3, #2
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	2300      	movs	r3, #0
 8003b68:	22d2      	movs	r2, #210	; 0xd2
 8003b6a:	2164      	movs	r1, #100	; 0x64
 8003b6c:	4816      	ldr	r0, [pc, #88]	; (8003bc8 <GainMenu_DrawMainMenu+0xb8>)
 8003b6e:	f00b fe4d 	bl	800f80c <ILI9341_Draw_Text>
 8003b72:	e00a      	b.n	8003b8a <GainMenu_DrawMainMenu+0x7a>
	}
	else
	{
		ILI9341_Draw_Text("AUX",	100,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003b74:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003b78:	9301      	str	r3, [sp, #4]
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	2300      	movs	r3, #0
 8003b80:	22d2      	movs	r2, #210	; 0xd2
 8003b82:	2164      	movs	r1, #100	; 0x64
 8003b84:	4811      	ldr	r0, [pc, #68]	; (8003bcc <GainMenu_DrawMainMenu+0xbc>)
 8003b86:	f00b fe41 	bl	800f80c <ILI9341_Draw_Text>
	}

	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003b8a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003b8e:	9301      	str	r3, [sp, #4]
 8003b90:	2302      	movs	r3, #2
 8003b92:	9300      	str	r3, [sp, #0]
 8003b94:	2300      	movs	r3, #0
 8003b96:	22d2      	movs	r2, #210	; 0xd2
 8003b98:	21af      	movs	r1, #175	; 0xaf
 8003b9a:	480b      	ldr	r0, [pc, #44]	; (8003bc8 <GainMenu_DrawMainMenu+0xb8>)
 8003b9c:	f00b fe36 	bl	800f80c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003ba0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003ba4:	9301      	str	r3, [sp, #4]
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	2300      	movs	r3, #0
 8003bac:	22d2      	movs	r2, #210	; 0xd2
 8003bae:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003bb2:	4805      	ldr	r0, [pc, #20]	; (8003bc8 <GainMenu_DrawMainMenu+0xb8>)
 8003bb4:	f00b fe2a 	bl	800f80c <ILI9341_Draw_Text>
}
 8003bb8:	bf00      	nop
 8003bba:	3708      	adds	r7, #8
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	08014af4 	.word	0x08014af4
 8003bc4:	08014b00 	.word	0x08014b00
 8003bc8:	08014b08 	.word	0x08014b08
 8003bcc:	08014b10 	.word	0x08014b10

08003bd0 <GainMenu_DrawSignalMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSignalMenu()
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->SIG", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003bd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bda:	9301      	str	r3, [sp, #4]
 8003bdc:	2302      	movs	r3, #2
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	2300      	movs	r3, #0
 8003be2:	220a      	movs	r2, #10
 8003be4:	210a      	movs	r1, #10
 8003be6:	481a      	ldr	r0, [pc, #104]	; (8003c50 <GainMenu_DrawSignalMenu+0x80>)
 8003be8:	f00b fe10 	bl	800f80c <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003bec:	f7fd f984 	bl	8000ef8 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("1.8V", 15,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003bf0:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003bf4:	9301      	str	r3, [sp, #4]
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	22d2      	movs	r2, #210	; 0xd2
 8003bfe:	210f      	movs	r1, #15
 8003c00:	4814      	ldr	r0, [pc, #80]	; (8003c54 <GainMenu_DrawSignalMenu+0x84>)
 8003c02:	f00b fe03 	bl	800f80c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("3.3V", 97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003c06:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003c0a:	9301      	str	r3, [sp, #4]
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	9300      	str	r3, [sp, #0]
 8003c10:	2300      	movs	r3, #0
 8003c12:	22d2      	movs	r2, #210	; 0xd2
 8003c14:	2161      	movs	r1, #97	; 0x61
 8003c16:	4810      	ldr	r0, [pc, #64]	; (8003c58 <GainMenu_DrawSignalMenu+0x88>)
 8003c18:	f00b fdf8 	bl	800f80c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("5V",  190, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003c1c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003c20:	9301      	str	r3, [sp, #4]
 8003c22:	2302      	movs	r3, #2
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	2300      	movs	r3, #0
 8003c28:	22d2      	movs	r2, #210	; 0xd2
 8003c2a:	21be      	movs	r1, #190	; 0xbe
 8003c2c:	480b      	ldr	r0, [pc, #44]	; (8003c5c <GainMenu_DrawSignalMenu+0x8c>)
 8003c2e:	f00b fded 	bl	800f80c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("9V", 265, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003c32:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003c36:	9301      	str	r3, [sp, #4]
 8003c38:	2302      	movs	r3, #2
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	22d2      	movs	r2, #210	; 0xd2
 8003c40:	f240 1109 	movw	r1, #265	; 0x109
 8003c44:	4806      	ldr	r0, [pc, #24]	; (8003c60 <GainMenu_DrawSignalMenu+0x90>)
 8003c46:	f00b fde1 	bl	800f80c <ILI9341_Draw_Text>
}
 8003c4a:	bf00      	nop
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	08014b14 	.word	0x08014b14
 8003c54:	08014b24 	.word	0x08014b24
 8003c58:	08014b2c 	.word	0x08014b2c
 8003c5c:	08014b34 	.word	0x08014b34
 8003c60:	08014b38 	.word	0x08014b38

08003c64 <GainMenu_DrawAuxMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawAuxMenu()
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->Aux", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003c6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c6e:	9301      	str	r3, [sp, #4]
 8003c70:	2302      	movs	r3, #2
 8003c72:	9300      	str	r3, [sp, #0]
 8003c74:	2300      	movs	r3, #0
 8003c76:	220a      	movs	r2, #10
 8003c78:	210a      	movs	r1, #10
 8003c7a:	4804      	ldr	r0, [pc, #16]	; (8003c8c <GainMenu_DrawAuxMenu+0x28>)
 8003c7c:	f00b fdc6 	bl	800f80c <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003c80:	f7fd f93a 	bl	8000ef8 <DM_DisplayFormattedOutput>
}
 8003c84:	bf00      	nop
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	08014b3c 	.word	0x08014b3c

08003c90 <ToplevelMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMenu(eToplevelMenu_Status pMenu)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	4603      	mov	r3, r0
 8003c98:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003c9a:	79fb      	ldrb	r3, [r7, #7]
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d007      	beq.n	8003cb0 <ToplevelMenu_DrawMenu+0x20>
 8003ca0:	2b03      	cmp	r3, #3
 8003ca2:	d008      	beq.n	8003cb6 <ToplevelMenu_DrawMenu+0x26>
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d000      	beq.n	8003caa <ToplevelMenu_DrawMenu+0x1a>
		case ENABLE_TOPLEVEL_INPUT_MENU:
			ToplevelMenu_DrawInputMenu();
			break;

		default:
			break;
 8003ca8:	e008      	b.n	8003cbc <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawMainMenu();
 8003caa:	f000 f80b 	bl	8003cc4 <ToplevelMenu_DrawMainMenu>
			break;
 8003cae:	e005      	b.n	8003cbc <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawOutputMenu();
 8003cb0:	f000 f844 	bl	8003d3c <ToplevelMenu_DrawOutputMenu>
			break;
 8003cb4:	e002      	b.n	8003cbc <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawInputMenu();
 8003cb6:	f000 f88b 	bl	8003dd0 <ToplevelMenu_DrawInputMenu>
			break;
 8003cba:	bf00      	nop

	}
}
 8003cbc:	bf00      	nop
 8003cbe:	3708      	adds	r7, #8
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <ToplevelMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMainMenu()
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af02      	add	r7, sp, #8
	#endif

	// Main screen
	//ILI9341_Draw_Text("SIGNAL GENERATOR", 	10, 10, WHITE, 2, BLACK);

	DM_DisplayFormattedOutput();
 8003cca:	f7fd f915 	bl	8000ef8 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("OUTPUT", 6, 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003cce:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003cd2:	9301      	str	r3, [sp, #4]
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	9300      	str	r3, [sp, #0]
 8003cd8:	2300      	movs	r3, #0
 8003cda:	22d2      	movs	r2, #210	; 0xd2
 8003cdc:	2106      	movs	r1, #6
 8003cde:	4814      	ldr	r0, [pc, #80]	; (8003d30 <ToplevelMenu_DrawMainMenu+0x6c>)
 8003ce0:	f00b fd94 	bl	800f80c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("INPUT", 93, 210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003ce4:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003ce8:	9301      	str	r3, [sp, #4]
 8003cea:	2302      	movs	r3, #2
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	2300      	movs	r3, #0
 8003cf0:	22d2      	movs	r2, #210	; 0xd2
 8003cf2:	215d      	movs	r1, #93	; 0x5d
 8003cf4:	480f      	ldr	r0, [pc, #60]	; (8003d34 <ToplevelMenu_DrawMainMenu+0x70>)
 8003cf6:	f00b fd89 	bl	800f80c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003cfa:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003cfe:	9301      	str	r3, [sp, #4]
 8003d00:	2302      	movs	r3, #2
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	2300      	movs	r3, #0
 8003d06:	22d2      	movs	r2, #210	; 0xd2
 8003d08:	21af      	movs	r1, #175	; 0xaf
 8003d0a:	480b      	ldr	r0, [pc, #44]	; (8003d38 <ToplevelMenu_DrawMainMenu+0x74>)
 8003d0c:	f00b fd7e 	bl	800f80c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003d10:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003d14:	9301      	str	r3, [sp, #4]
 8003d16:	2302      	movs	r3, #2
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	22d2      	movs	r2, #210	; 0xd2
 8003d1e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003d22:	4805      	ldr	r0, [pc, #20]	; (8003d38 <ToplevelMenu_DrawMainMenu+0x74>)
 8003d24:	f00b fd72 	bl	800f80c <ILI9341_Draw_Text>


}
 8003d28:	bf00      	nop
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	08014b4c 	.word	0x08014b4c
 8003d34:	08014b54 	.word	0x08014b54
 8003d38:	08014b5c 	.word	0x08014b5c

08003d3c <ToplevelMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawOutputMenu()
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003d42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d46:	9301      	str	r3, [sp, #4]
 8003d48:	2302      	movs	r3, #2
 8003d4a:	9300      	str	r3, [sp, #0]
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	220a      	movs	r2, #10
 8003d50:	210a      	movs	r1, #10
 8003d52:	481a      	ldr	r0, [pc, #104]	; (8003dbc <ToplevelMenu_DrawOutputMenu+0x80>)
 8003d54:	f00b fd5a 	bl	800f80c <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003d58:	f7fd f8ce 	bl	8000ef8 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("FUNC", 15,  210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003d5c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003d60:	9301      	str	r3, [sp, #4]
 8003d62:	2302      	movs	r3, #2
 8003d64:	9300      	str	r3, [sp, #0]
 8003d66:	2300      	movs	r3, #0
 8003d68:	22d2      	movs	r2, #210	; 0xd2
 8003d6a:	210f      	movs	r1, #15
 8003d6c:	4814      	ldr	r0, [pc, #80]	; (8003dc0 <ToplevelMenu_DrawOutputMenu+0x84>)
 8003d6e:	f00b fd4d 	bl	800f80c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FREQ", 98,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003d72:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003d76:	9301      	str	r3, [sp, #4]
 8003d78:	2302      	movs	r3, #2
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	22d2      	movs	r2, #210	; 0xd2
 8003d80:	2162      	movs	r1, #98	; 0x62
 8003d82:	4810      	ldr	r0, [pc, #64]	; (8003dc4 <ToplevelMenu_DrawOutputMenu+0x88>)
 8003d84:	f00b fd42 	bl	800f80c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("GAIN", 176, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003d88:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003d8c:	9301      	str	r3, [sp, #4]
 8003d8e:	2302      	movs	r3, #2
 8003d90:	9300      	str	r3, [sp, #0]
 8003d92:	2300      	movs	r3, #0
 8003d94:	22d2      	movs	r2, #210	; 0xd2
 8003d96:	21b0      	movs	r1, #176	; 0xb0
 8003d98:	480b      	ldr	r0, [pc, #44]	; (8003dc8 <ToplevelMenu_DrawOutputMenu+0x8c>)
 8003d9a:	f00b fd37 	bl	800f80c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("OFFSET", 245, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003d9e:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003da2:	9301      	str	r3, [sp, #4]
 8003da4:	2302      	movs	r3, #2
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	2300      	movs	r3, #0
 8003daa:	22d2      	movs	r2, #210	; 0xd2
 8003dac:	21f5      	movs	r1, #245	; 0xf5
 8003dae:	4807      	ldr	r0, [pc, #28]	; (8003dcc <ToplevelMenu_DrawOutputMenu+0x90>)
 8003db0:	f00b fd2c 	bl	800f80c <ILI9341_Draw_Text>
}
 8003db4:	bf00      	nop
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	08014b64 	.word	0x08014b64
 8003dc0:	08014b6c 	.word	0x08014b6c
 8003dc4:	08014b74 	.word	0x08014b74
 8003dc8:	08014b7c 	.word	0x08014b7c
 8003dcc:	08014b84 	.word	0x08014b84

08003dd0 <ToplevelMenu_DrawInputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawInputMenu()
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b088      	sub	sp, #32
 8003dd4:	af02      	add	r7, sp, #8

	DM_DisplayInputTriggerStatus();
 8003dd6:	f7fd fb51 	bl	800147c <DM_DisplayInputTriggerStatus>

	ILI9341_Draw_Text("IN->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003dda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003dde:	9301      	str	r3, [sp, #4]
 8003de0:	2302      	movs	r3, #2
 8003de2:	9300      	str	r3, [sp, #0]
 8003de4:	2300      	movs	r3, #0
 8003de6:	220a      	movs	r2, #10
 8003de8:	210a      	movs	r1, #10
 8003dea:	4892      	ldr	r0, [pc, #584]	; (8004034 <ToplevelMenu_DrawInputMenu+0x264>)
 8003dec:	f00b fd0e 	bl	800f80c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("TRIGGER:", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003df0:	2300      	movs	r3, #0
 8003df2:	9301      	str	r3, [sp, #4]
 8003df4:	2302      	movs	r3, #2
 8003df6:	9300      	str	r3, [sp, #0]
 8003df8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003dfc:	2232      	movs	r2, #50	; 0x32
 8003dfe:	210a      	movs	r1, #10
 8003e00:	488d      	ldr	r0, [pc, #564]	; (8004038 <ToplevelMenu_DrawInputMenu+0x268>)
 8003e02:	f00b fd03 	bl	800f80c <ILI9341_Draw_Text>
	if(IT_GetTriggerStatus())
 8003e06:	f002 fb0b 	bl	8006420 <IT_GetTriggerStatus>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d016      	beq.n	8003e3e <ToplevelMenu_DrawInputMenu+0x6e>
	{
		ILI9341_Draw_Text("ON", 	150, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003e10:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003e14:	9301      	str	r3, [sp, #4]
 8003e16:	2302      	movs	r3, #2
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	2232      	movs	r2, #50	; 0x32
 8003e1e:	2196      	movs	r1, #150	; 0x96
 8003e20:	4886      	ldr	r0, [pc, #536]	; (800403c <ToplevelMenu_DrawInputMenu+0x26c>)
 8003e22:	f00b fcf3 	bl	800f80c <ILI9341_Draw_Text>
		ILI9341_Draw_Text("OFF", 	200, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003e26:	2300      	movs	r3, #0
 8003e28:	9301      	str	r3, [sp, #4]
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003e32:	2232      	movs	r2, #50	; 0x32
 8003e34:	21c8      	movs	r1, #200	; 0xc8
 8003e36:	4882      	ldr	r0, [pc, #520]	; (8004040 <ToplevelMenu_DrawInputMenu+0x270>)
 8003e38:	f00b fce8 	bl	800f80c <ILI9341_Draw_Text>
 8003e3c:	e015      	b.n	8003e6a <ToplevelMenu_DrawInputMenu+0x9a>
	}
	else
	{
		ILI9341_Draw_Text("ON", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003e3e:	2300      	movs	r3, #0
 8003e40:	9301      	str	r3, [sp, #4]
 8003e42:	2302      	movs	r3, #2
 8003e44:	9300      	str	r3, [sp, #0]
 8003e46:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003e4a:	2232      	movs	r2, #50	; 0x32
 8003e4c:	2196      	movs	r1, #150	; 0x96
 8003e4e:	487b      	ldr	r0, [pc, #492]	; (800403c <ToplevelMenu_DrawInputMenu+0x26c>)
 8003e50:	f00b fcdc 	bl	800f80c <ILI9341_Draw_Text>
		ILI9341_Draw_Text("OFF", 	200, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003e54:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003e58:	9301      	str	r3, [sp, #4]
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	2300      	movs	r3, #0
 8003e60:	2232      	movs	r2, #50	; 0x32
 8003e62:	21c8      	movs	r1, #200	; 0xc8
 8003e64:	4876      	ldr	r0, [pc, #472]	; (8004040 <ToplevelMenu_DrawInputMenu+0x270>)
 8003e66:	f00b fcd1 	bl	800f80c <ILI9341_Draw_Text>
	}


	ILI9341_Draw_Text("MODE:", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	9301      	str	r3, [sp, #4]
 8003e6e:	2302      	movs	r3, #2
 8003e70:	9300      	str	r3, [sp, #0]
 8003e72:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003e76:	2246      	movs	r2, #70	; 0x46
 8003e78:	210a      	movs	r1, #10
 8003e7a:	4872      	ldr	r0, [pc, #456]	; (8004044 <ToplevelMenu_DrawInputMenu+0x274>)
 8003e7c:	f00b fcc6 	bl	800f80c <ILI9341_Draw_Text>
	if(IT_GetActiveTriggerMode() == INPUT_TRIGGER_TIM)
 8003e80:	f002 fab2 	bl	80063e8 <IT_GetActiveTriggerMode>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d12d      	bne.n	8003ee6 <ToplevelMenu_DrawInputMenu+0x116>
	{
		ILI9341_Draw_Text("TIM", 	150, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003e8a:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003e8e:	9301      	str	r3, [sp, #4]
 8003e90:	2302      	movs	r3, #2
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	2300      	movs	r3, #0
 8003e96:	2246      	movs	r2, #70	; 0x46
 8003e98:	2196      	movs	r1, #150	; 0x96
 8003e9a:	486b      	ldr	r0, [pc, #428]	; (8004048 <ToplevelMenu_DrawInputMenu+0x278>)
 8003e9c:	f00b fcb6 	bl	800f80c <ILI9341_Draw_Text>
		ILI9341_Draw_Text("COMP", 	200, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	9301      	str	r3, [sp, #4]
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	9300      	str	r3, [sp, #0]
 8003ea8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003eac:	2246      	movs	r2, #70	; 0x46
 8003eae:	21c8      	movs	r1, #200	; 0xc8
 8003eb0:	4866      	ldr	r0, [pc, #408]	; (800404c <ToplevelMenu_DrawInputMenu+0x27c>)
 8003eb2:	f00b fcab 	bl	800f80c <ILI9341_Draw_Text>
		ILI9341_Draw_Text("ADC", 	270, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	9301      	str	r3, [sp, #4]
 8003eba:	2302      	movs	r3, #2
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003ec2:	2246      	movs	r2, #70	; 0x46
 8003ec4:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8003ec8:	4861      	ldr	r0, [pc, #388]	; (8004050 <ToplevelMenu_DrawInputMenu+0x280>)
 8003eca:	f00b fc9f 	bl	800f80c <ILI9341_Draw_Text>

		ILI9341_Draw_Text("     ", 150, 100,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003ece:	2300      	movs	r3, #0
 8003ed0:	9301      	str	r3, [sp, #4]
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	9300      	str	r3, [sp, #0]
 8003ed6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003eda:	2264      	movs	r2, #100	; 0x64
 8003edc:	2196      	movs	r1, #150	; 0x96
 8003ede:	485d      	ldr	r0, [pc, #372]	; (8004054 <ToplevelMenu_DrawInputMenu+0x284>)
 8003ee0:	f00b fc94 	bl	800f80c <ILI9341_Draw_Text>
 8003ee4:	e076      	b.n	8003fd4 <ToplevelMenu_DrawInputMenu+0x204>
	}
	else if(IT_GetActiveTriggerMode() == INPUT_TRIGGER_COMP)
 8003ee6:	f002 fa7f 	bl	80063e8 <IT_GetActiveTriggerMode>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d13f      	bne.n	8003f70 <ToplevelMenu_DrawInputMenu+0x1a0>
	{
		ILI9341_Draw_Text("TIM", 	150, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	9301      	str	r3, [sp, #4]
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	9300      	str	r3, [sp, #0]
 8003ef8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003efc:	2246      	movs	r2, #70	; 0x46
 8003efe:	2196      	movs	r1, #150	; 0x96
 8003f00:	4851      	ldr	r0, [pc, #324]	; (8004048 <ToplevelMenu_DrawInputMenu+0x278>)
 8003f02:	f00b fc83 	bl	800f80c <ILI9341_Draw_Text>
		ILI9341_Draw_Text("COMP", 	200, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003f06:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003f0a:	9301      	str	r3, [sp, #4]
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	2300      	movs	r3, #0
 8003f12:	2246      	movs	r2, #70	; 0x46
 8003f14:	21c8      	movs	r1, #200	; 0xc8
 8003f16:	484d      	ldr	r0, [pc, #308]	; (800404c <ToplevelMenu_DrawInputMenu+0x27c>)
 8003f18:	f00b fc78 	bl	800f80c <ILI9341_Draw_Text>
		ILI9341_Draw_Text("ADC", 	270, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	9301      	str	r3, [sp, #4]
 8003f20:	2302      	movs	r3, #2
 8003f22:	9300      	str	r3, [sp, #0]
 8003f24:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003f28:	2246      	movs	r2, #70	; 0x46
 8003f2a:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8003f2e:	4848      	ldr	r0, [pc, #288]	; (8004050 <ToplevelMenu_DrawInputMenu+0x280>)
 8003f30:	f00b fc6c 	bl	800f80c <ILI9341_Draw_Text>

		char comp_text[20] = "";
 8003f34:	2300      	movs	r3, #0
 8003f36:	607b      	str	r3, [r7, #4]
 8003f38:	f107 0308 	add.w	r3, r7, #8
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	605a      	str	r2, [r3, #4]
 8003f42:	609a      	str	r2, [r3, #8]
 8003f44:	60da      	str	r2, [r3, #12]
		snprintf(comp_text, sizeof(comp_text), "%lu V", HAL_COMP_GetOutputLevel(&hcomp1));
 8003f46:	4844      	ldr	r0, [pc, #272]	; (8004058 <ToplevelMenu_DrawInputMenu+0x288>)
 8003f48:	f006 fe86 	bl	800ac58 <HAL_COMP_GetOutputLevel>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	1d38      	adds	r0, r7, #4
 8003f50:	4a42      	ldr	r2, [pc, #264]	; (800405c <ToplevelMenu_DrawInputMenu+0x28c>)
 8003f52:	2114      	movs	r1, #20
 8003f54:	f00d f816 	bl	8010f84 <sniprintf>


		ILI9341_Draw_Text(comp_text, 150, 100,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003f58:	1d38      	adds	r0, r7, #4
 8003f5a:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003f5e:	9301      	str	r3, [sp, #4]
 8003f60:	2302      	movs	r3, #2
 8003f62:	9300      	str	r3, [sp, #0]
 8003f64:	2300      	movs	r3, #0
 8003f66:	2264      	movs	r2, #100	; 0x64
 8003f68:	2196      	movs	r1, #150	; 0x96
 8003f6a:	f00b fc4f 	bl	800f80c <ILI9341_Draw_Text>
 8003f6e:	e031      	b.n	8003fd4 <ToplevelMenu_DrawInputMenu+0x204>
	}
	else if(IT_GetActiveTriggerMode() == INPUT_TRIGGER_ADC)
 8003f70:	f002 fa3a 	bl	80063e8 <IT_GetActiveTriggerMode>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d12c      	bne.n	8003fd4 <ToplevelMenu_DrawInputMenu+0x204>
	{
		ILI9341_Draw_Text("TIM", 	150, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	9301      	str	r3, [sp, #4]
 8003f7e:	2302      	movs	r3, #2
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003f86:	2246      	movs	r2, #70	; 0x46
 8003f88:	2196      	movs	r1, #150	; 0x96
 8003f8a:	482f      	ldr	r0, [pc, #188]	; (8004048 <ToplevelMenu_DrawInputMenu+0x278>)
 8003f8c:	f00b fc3e 	bl	800f80c <ILI9341_Draw_Text>
		ILI9341_Draw_Text("COMP", 	200, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003f90:	2300      	movs	r3, #0
 8003f92:	9301      	str	r3, [sp, #4]
 8003f94:	2302      	movs	r3, #2
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003f9c:	2246      	movs	r2, #70	; 0x46
 8003f9e:	21c8      	movs	r1, #200	; 0xc8
 8003fa0:	482a      	ldr	r0, [pc, #168]	; (800404c <ToplevelMenu_DrawInputMenu+0x27c>)
 8003fa2:	f00b fc33 	bl	800f80c <ILI9341_Draw_Text>
		ILI9341_Draw_Text("ADC", 	270, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003fa6:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003faa:	9301      	str	r3, [sp, #4]
 8003fac:	2302      	movs	r3, #2
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	2246      	movs	r2, #70	; 0x46
 8003fb4:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8003fb8:	4825      	ldr	r0, [pc, #148]	; (8004050 <ToplevelMenu_DrawInputMenu+0x280>)
 8003fba:	f00b fc27 	bl	800f80c <ILI9341_Draw_Text>

		ILI9341_Draw_Text("     ", 150, 100,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	9301      	str	r3, [sp, #4]
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	9300      	str	r3, [sp, #0]
 8003fc6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003fca:	2264      	movs	r2, #100	; 0x64
 8003fcc:	2196      	movs	r1, #150	; 0x96
 8003fce:	4821      	ldr	r0, [pc, #132]	; (8004054 <ToplevelMenu_DrawInputMenu+0x284>)
 8003fd0:	f00b fc1c 	bl	800f80c <ILI9341_Draw_Text>
	}


	ILI9341_Draw_Text("ON/", 	20, 	204, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003fd4:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003fd8:	9301      	str	r3, [sp, #4]
 8003fda:	2302      	movs	r3, #2
 8003fdc:	9300      	str	r3, [sp, #0]
 8003fde:	2300      	movs	r3, #0
 8003fe0:	22cc      	movs	r2, #204	; 0xcc
 8003fe2:	2114      	movs	r1, #20
 8003fe4:	481e      	ldr	r0, [pc, #120]	; (8004060 <ToplevelMenu_DrawInputMenu+0x290>)
 8003fe6:	f00b fc11 	bl	800f80c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("OFF ",	20, 	222, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003fea:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003fee:	9301      	str	r3, [sp, #4]
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	22de      	movs	r2, #222	; 0xde
 8003ff8:	2114      	movs	r1, #20
 8003ffa:	481a      	ldr	r0, [pc, #104]	; (8004064 <ToplevelMenu_DrawInputMenu+0x294>)
 8003ffc:	f00b fc06 	bl	800f80c <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	104,	204, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8004000:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8004004:	9301      	str	r3, [sp, #4]
 8004006:	2302      	movs	r3, #2
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	2300      	movs	r3, #0
 800400c:	22cc      	movs	r2, #204	; 0xcc
 800400e:	2168      	movs	r1, #104	; 0x68
 8004010:	4815      	ldr	r0, [pc, #84]	; (8004068 <ToplevelMenu_DrawInputMenu+0x298>)
 8004012:	f00b fbfb 	bl	800f80c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("MODE",	97, 	222, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8004016:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800401a:	9301      	str	r3, [sp, #4]
 800401c:	2302      	movs	r3, #2
 800401e:	9300      	str	r3, [sp, #0]
 8004020:	2300      	movs	r3, #0
 8004022:	22de      	movs	r2, #222	; 0xde
 8004024:	2161      	movs	r1, #97	; 0x61
 8004026:	4811      	ldr	r0, [pc, #68]	; (800406c <ToplevelMenu_DrawInputMenu+0x29c>)
 8004028:	f00b fbf0 	bl	800f80c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SPEED",	173, 	222, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);

	ILI9341_Draw_Text("SET", 	263, 	204, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
	ILI9341_Draw_Text("LIMIT", 	252, 	222, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
*/
}
 800402c:	bf00      	nop
 800402e:	3718      	adds	r7, #24
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	08014b8c 	.word	0x08014b8c
 8004038:	08014b94 	.word	0x08014b94
 800403c:	08014ba0 	.word	0x08014ba0
 8004040:	08014ba4 	.word	0x08014ba4
 8004044:	08014ba8 	.word	0x08014ba8
 8004048:	08014bb0 	.word	0x08014bb0
 800404c:	08014bb4 	.word	0x08014bb4
 8004050:	08014bbc 	.word	0x08014bbc
 8004054:	08014bc0 	.word	0x08014bc0
 8004058:	200029c8 	.word	0x200029c8
 800405c:	08014bc8 	.word	0x08014bc8
 8004060:	08014bd0 	.word	0x08014bd0
 8004064:	08014bd4 	.word	0x08014bd4
 8004068:	08014bdc 	.word	0x08014bdc
 800406c:	08014be0 	.word	0x08014be0

08004070 <BiasMenu_getStatus>:
 *	@param None
 *	@retval None
 *
 */
eBiasMenu_Status BiasMenu_getStatus()
{
 8004070:	b480      	push	{r7}
 8004072:	af00      	add	r7, sp, #0
	return eNextBiasMenuStatus;
 8004074:	4b03      	ldr	r3, [pc, #12]	; (8004084 <BiasMenu_getStatus+0x14>)
 8004076:	781b      	ldrb	r3, [r3, #0]
}
 8004078:	4618      	mov	r0, r3
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	20001e55 	.word	0x20001e55

08004088 <BiasMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuEntryHandler()
{
 8004088:	b580      	push	{r7, lr}
 800408a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("BiasMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 800408c:	f7fd fa6e 	bl	800156c <DM_RefreshScreen>

	eNextBiasMenuStatus = ENABLE_BIAS_MENU;
 8004090:	4b09      	ldr	r3, [pc, #36]	; (80040b8 <BiasMenuEntryHandler+0x30>)
 8004092:	2201      	movs	r2, #1
 8004094:	701a      	strb	r2, [r3, #0]

	ENCODER_TIMER->ARR = BIAS_MAX;
 8004096:	4b09      	ldr	r3, [pc, #36]	; (80040bc <BiasMenuEntryHandler+0x34>)
 8004098:	f44f 7248 	mov.w	r2, #800	; 0x320
 800409c:	62da      	str	r2, [r3, #44]	; 0x2c
	ENCODER_TIMER->CNT = BO_GetDcBiasEncoderValue();
 800409e:	f001 f9e1 	bl	8005464 <BO_GetDcBiasEncoderValue>
 80040a2:	4603      	mov	r3, r0
 80040a4:	461a      	mov	r2, r3
 80040a6:	4b05      	ldr	r3, [pc, #20]	; (80040bc <BiasMenuEntryHandler+0x34>)
 80040a8:	625a      	str	r2, [r3, #36]	; 0x24

	eNewEvent = evIdle;
 80040aa:	4b05      	ldr	r3, [pc, #20]	; (80040c0 <BiasMenuEntryHandler+0x38>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 80040b0:	230f      	movs	r3, #15
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	20001e55 	.word	0x20001e55
 80040bc:	40012c00 	.word	0x40012c00
 80040c0:	20001e57 	.word	0x20001e57

080040c4 <BiasMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuInputHandler(eSystemEvent pEvent)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	4603      	mov	r3, r0
 80040cc:	71fb      	strb	r3, [r7, #7]
	#ifdef EVENT_MENU_DEBUG
		printf("BiasMenuInputHandler Event captured\n");
	#endif


	switch(pEvent)
 80040ce:	79fb      	ldrb	r3, [r7, #7]
 80040d0:	3b01      	subs	r3, #1
 80040d2:	2b04      	cmp	r3, #4
 80040d4:	d82d      	bhi.n	8004132 <BiasMenuInputHandler+0x6e>
 80040d6:	a201      	add	r2, pc, #4	; (adr r2, 80040dc <BiasMenuInputHandler+0x18>)
 80040d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040dc:	08004101 	.word	0x08004101
 80040e0:	08004113 	.word	0x08004113
 80040e4:	08004121 	.word	0x08004121
 80040e8:	08004133 	.word	0x08004133
 80040ec:	080040f1 	.word	0x080040f1
	{
		case evEncoderSet:
			BO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 80040f0:	2000      	movs	r0, #0
 80040f2:	f002 fd7b 	bl	8006bec <SM_GetEncoderValue>
 80040f6:	4603      	mov	r3, r0
 80040f8:	4618      	mov	r0, r3
 80040fa:	f001 f9bf 	bl	800547c <BO_MapEncoderPositionToSignalOutput>
			break;
 80040fe:	e019      	b.n	8004134 <BiasMenuInputHandler+0x70>
		case evBlueBtn:
			BO_MapEncoderPositionToSignalOutput(BIAS_MAX);
 8004100:	f44f 7048 	mov.w	r0, #800	; 0x320
 8004104:	f001 f9ba 	bl	800547c <BO_MapEncoderPositionToSignalOutput>
			ENCODER_TIMER->CNT = BIAS_MAX;
 8004108:	4b0e      	ldr	r3, [pc, #56]	; (8004144 <BiasMenuInputHandler+0x80>)
 800410a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800410e:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8004110:	e010      	b.n	8004134 <BiasMenuInputHandler+0x70>
		case evGreenBtn:
			BO_MapEncoderPositionToSignalOutput(10);
 8004112:	200a      	movs	r0, #10
 8004114:	f001 f9b2 	bl	800547c <BO_MapEncoderPositionToSignalOutput>
			ENCODER_TIMER->CNT = 10;
 8004118:	4b0a      	ldr	r3, [pc, #40]	; (8004144 <BiasMenuInputHandler+0x80>)
 800411a:	220a      	movs	r2, #10
 800411c:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 800411e:	e009      	b.n	8004134 <BiasMenuInputHandler+0x70>
		case evYellowBtn:
			// jump to zero crossing point
			BO_MapEncoderPositionToSignalOutput(BIAS_CENTER);
 8004120:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004124:	f001 f9aa 	bl	800547c <BO_MapEncoderPositionToSignalOutput>
			ENCODER_TIMER->CNT = BIAS_CENTER;
 8004128:	4b06      	ldr	r3, [pc, #24]	; (8004144 <BiasMenuInputHandler+0x80>)
 800412a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800412e:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8004130:	e000      	b.n	8004134 <BiasMenuInputHandler+0x70>

		default:
			break;
 8004132:	bf00      	nop
	}


	eNewEvent = evIdle;
 8004134:	4b04      	ldr	r3, [pc, #16]	; (8004148 <BiasMenuInputHandler+0x84>)
 8004136:	2200      	movs	r2, #0
 8004138:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 800413a:	230f      	movs	r3, #15
}
 800413c:	4618      	mov	r0, r3
 800413e:	3708      	adds	r7, #8
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	40012c00 	.word	0x40012c00
 8004148:	20001e57 	.word	0x20001e57

0800414c <BiasMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuExitHandler()
{
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
		printf("BiasMenuExitHandler Event captured\n");
	#endif


	// disable the menu
	eNextBiasMenuStatus = DISABLE_BIAS_MENU;
 8004150:	4b05      	ldr	r3, [pc, #20]	; (8004168 <BiasMenuExitHandler+0x1c>)
 8004152:	2200      	movs	r2, #0
 8004154:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8004156:	f7fd fa09 	bl	800156c <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 800415a:	4b04      	ldr	r3, [pc, #16]	; (800416c <BiasMenuExitHandler+0x20>)
 800415c:	2200      	movs	r2, #0
 800415e:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004160:	2301      	movs	r3, #1
}
 8004162:	4618      	mov	r0, r3
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	20001e55 	.word	0x20001e55
 800416c:	20001e57 	.word	0x20001e57

08004170 <EM_ProcessEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_ProcessEvent()
{
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0

	switch(eNextState)
 8004174:	4b2b      	ldr	r3, [pc, #172]	; (8004224 <EM_ProcessEvent+0xb4>)
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	2b0f      	cmp	r3, #15
 800417a:	d850      	bhi.n	800421e <EM_ProcessEvent+0xae>
 800417c:	a201      	add	r2, pc, #4	; (adr r2, 8004184 <EM_ProcessEvent+0x14>)
 800417e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004182:	bf00      	nop
 8004184:	080041c5 	.word	0x080041c5
 8004188:	080041cb 	.word	0x080041cb
 800418c:	080041d1 	.word	0x080041d1
 8004190:	080041d7 	.word	0x080041d7
 8004194:	080041dd 	.word	0x080041dd
 8004198:	080041e3 	.word	0x080041e3
 800419c:	080041e9 	.word	0x080041e9
 80041a0:	080041ef 	.word	0x080041ef
 80041a4:	080041f5 	.word	0x080041f5
 80041a8:	0800421f 	.word	0x0800421f
 80041ac:	080041fb 	.word	0x080041fb
 80041b0:	08004201 	.word	0x08004201
 80041b4:	08004207 	.word	0x08004207
 80041b8:	08004213 	.word	0x08004213
 80041bc:	0800420d 	.word	0x0800420d
 80041c0:	08004219 	.word	0x08004219
	{

// MAIN MENU
		case Idle_State:

			_ProcessIdleStateEvents();
 80041c4:	f000 f830 	bl	8004228 <_ProcessIdleStateEvents>
			break;
 80041c8:	e02a      	b.n	8004220 <EM_ProcessEvent+0xb0>

		case Toplevel_Output_Menu_State:

			_ProcessTopLevelOutputMenuStateEvents();
 80041ca:	f000 f849 	bl	8004260 <_ProcessTopLevelOutputMenuStateEvents>
			break;
 80041ce:	e027      	b.n	8004220 <EM_ProcessEvent+0xb0>

		case Toplevel_Input_Menu_State:

			_ProcessTopLevelInputMenuStateEvents();
 80041d0:	f000 f88c 	bl	80042ec <_ProcessTopLevelInputMenuStateEvents>
			break;
 80041d4:	e024      	b.n	8004220 <EM_ProcessEvent+0xb0>

// FUNC MENUS

		case Func_Main_Menu_State:

			_ProcessFuncMainMenuStateEvents();
 80041d6:	f000 f8b5 	bl	8004344 <_ProcessFuncMainMenuStateEvents>
			break;
 80041da:	e021      	b.n	8004220 <EM_ProcessEvent+0xb0>

		case Func_Signal_Menu_State:

			_ProcessFuncSignalMenuStateEvents();
 80041dc:	f000 f8d8 	bl	8004390 <_ProcessFuncSignalMenuStateEvents>
			break;
 80041e0:	e01e      	b.n	8004220 <EM_ProcessEvent+0xb0>

		case Func_Aux_Menu_State:

			_ProcessFuncAuxMenuStateEvents();
 80041e2:	f000 f8f1 	bl	80043c8 <_ProcessFuncAuxMenuStateEvents>
			break;
 80041e6:	e01b      	b.n	8004220 <EM_ProcessEvent+0xb0>

// GAIN MENUS

		case Gain_Main_Menu_State:

			_ProcessGainMainMenuStateEvents();
 80041e8:	f000 f914 	bl	8004414 <_ProcessGainMainMenuStateEvents>
			break;
 80041ec:	e018      	b.n	8004220 <EM_ProcessEvent+0xb0>

		case Gain_Signal_Menu_State:

			_ProcessGainSignalMenuStateEvents();
 80041ee:	f000 f949 	bl	8004484 <_ProcessGainSignalMenuStateEvents>
			break;
 80041f2:	e015      	b.n	8004220 <EM_ProcessEvent+0xb0>

		case Gain_Aux_Menu_State:

			_ProcessGainAuxMenuStateEvents();
 80041f4:	f000 f990 	bl	8004518 <_ProcessGainAuxMenuStateEvents>
			break;
 80041f8:	e012      	b.n	8004220 <EM_ProcessEvent+0xb0>

// FREQ MENUS

		case Freq_Main_Menu_State:

			_ProcessFreqMainMenuStateEvents();
 80041fa:	f000 f9a9 	bl	8004550 <_ProcessFreqMainMenuStateEvents>
			break;
 80041fe:	e00f      	b.n	8004220 <EM_ProcessEvent+0xb0>

		case Freq_Preset_Menu_State:

			_ProcessFreqPresetMenuStateEvents();
 8004200:	f000 f9e4 	bl	80045cc <_ProcessFreqPresetMenuStateEvents>
			break;
 8004204:	e00c      	b.n	8004220 <EM_ProcessEvent+0xb0>

		case Freq_Adjust_Menu_State:

			_ProcessFreqAdjustMenuState();
 8004206:	f000 f9fd 	bl	8004604 <_ProcessFreqAdjustMenuState>
			break;
 800420a:	e009      	b.n	8004220 <EM_ProcessEvent+0xb0>

		case Freq_Prescaler_Menu_State:

			_ProcessFreqPrescalerMenuStateEvents();
 800420c:	f000 fa16 	bl	800463c <_ProcessFreqPrescalerMenuStateEvents>
			break;
 8004210:	e006      	b.n	8004220 <EM_ProcessEvent+0xb0>


		case Freq_Sweep_Menu_State:

			_ProcessFreqSweepMenuStateEvents();
 8004212:	f000 fa2f 	bl	8004674 <_ProcessFreqSweepMenuStateEvents>
			break;
 8004216:	e003      	b.n	8004220 <EM_ProcessEvent+0xb0>

// BIAS MENUS

		case Bias_Menu_State:

			_ProcessBiasMainMenuEvents();
 8004218:	f000 fa76 	bl	8004708 <_ProcessBiasMainMenuEvents>
			break;
 800421c:	e000      	b.n	8004220 <EM_ProcessEvent+0xb0>

		default:
			break;
 800421e:	bf00      	nop
	}

}
 8004220:	bf00      	nop
 8004222:	bd80      	pop	{r7, pc}
 8004224:	20001e56 	.word	0x20001e56

08004228 <_ProcessIdleStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessIdleStateEvents()
{
 8004228:	b580      	push	{r7, lr}
 800422a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
	  printf("Idle_State\n");
	#endif

	if(eNewEvent == evBlueBtn)
 800422c:	4b0a      	ldr	r3, [pc, #40]	; (8004258 <_ProcessIdleStateEvents+0x30>)
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d105      	bne.n	8004240 <_ProcessIdleStateEvents+0x18>
	{
		eNextState = ToplevelOutputMenuEntryHandler();
 8004234:	f000 ff2c 	bl	8005090 <ToplevelOutputMenuEntryHandler>
 8004238:	4603      	mov	r3, r0
 800423a:	461a      	mov	r2, r3
 800423c:	4b07      	ldr	r3, [pc, #28]	; (800425c <_ProcessIdleStateEvents+0x34>)
 800423e:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 8004240:	4b05      	ldr	r3, [pc, #20]	; (8004258 <_ProcessIdleStateEvents+0x30>)
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	2b02      	cmp	r3, #2
 8004246:	d105      	bne.n	8004254 <_ProcessIdleStateEvents+0x2c>
	{
		eNextState = ToplevelInputMenuEntryHandler();
 8004248:	f000 ff46 	bl	80050d8 <ToplevelInputMenuEntryHandler>
 800424c:	4603      	mov	r3, r0
 800424e:	461a      	mov	r2, r3
 8004250:	4b02      	ldr	r3, [pc, #8]	; (800425c <_ProcessIdleStateEvents+0x34>)
 8004252:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
	{
		// no menu action
	}
}
 8004254:	bf00      	nop
 8004256:	bd80      	pop	{r7, pc}
 8004258:	20001e57 	.word	0x20001e57
 800425c:	20001e56 	.word	0x20001e56

08004260 <_ProcessTopLevelOutputMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessTopLevelOutputMenuStateEvents()
{
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
	  printf("Toplevel_Output_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderPush)
 8004264:	4b1f      	ldr	r3, [pc, #124]	; (80042e4 <_ProcessTopLevelOutputMenuStateEvents+0x84>)
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	2b06      	cmp	r3, #6
 800426a:	d105      	bne.n	8004278 <_ProcessTopLevelOutputMenuStateEvents+0x18>
	{
		eNextState = ToplevelOutputMenuExitHandler();
 800426c:	f000 ff22 	bl	80050b4 <ToplevelOutputMenuExitHandler>
 8004270:	4603      	mov	r3, r0
 8004272:	461a      	mov	r2, r3
 8004274:	4b1c      	ldr	r3, [pc, #112]	; (80042e8 <_ProcessTopLevelOutputMenuStateEvents+0x88>)
 8004276:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evBlueBtn)
 8004278:	4b1a      	ldr	r3, [pc, #104]	; (80042e4 <_ProcessTopLevelOutputMenuStateEvents+0x84>)
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d108      	bne.n	8004292 <_ProcessTopLevelOutputMenuStateEvents+0x32>
	{
		ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8004280:	2000      	movs	r0, #0
 8004282:	f000 fef5 	bl	8005070 <ToplevelMenu_setStatus>
		eNextState = FuncMainMenuEntryHandler();
 8004286:	f000 fce3 	bl	8004c50 <FuncMainMenuEntryHandler>
 800428a:	4603      	mov	r3, r0
 800428c:	461a      	mov	r2, r3
 800428e:	4b16      	ldr	r3, [pc, #88]	; (80042e8 <_ProcessTopLevelOutputMenuStateEvents+0x88>)
 8004290:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 8004292:	4b14      	ldr	r3, [pc, #80]	; (80042e4 <_ProcessTopLevelOutputMenuStateEvents+0x84>)
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	2b02      	cmp	r3, #2
 8004298:	d108      	bne.n	80042ac <_ProcessTopLevelOutputMenuStateEvents+0x4c>
	{
		ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 800429a:	2000      	movs	r0, #0
 800429c:	f000 fee8 	bl	8005070 <ToplevelMenu_setStatus>
		eNextState = FreqMainMenuEntryHandler();
 80042a0:	f000 fbd0 	bl	8004a44 <FreqMainMenuEntryHandler>
 80042a4:	4603      	mov	r3, r0
 80042a6:	461a      	mov	r2, r3
 80042a8:	4b0f      	ldr	r3, [pc, #60]	; (80042e8 <_ProcessTopLevelOutputMenuStateEvents+0x88>)
 80042aa:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 80042ac:	4b0d      	ldr	r3, [pc, #52]	; (80042e4 <_ProcessTopLevelOutputMenuStateEvents+0x84>)
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	2b03      	cmp	r3, #3
 80042b2:	d108      	bne.n	80042c6 <_ProcessTopLevelOutputMenuStateEvents+0x66>
	{
		ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 80042b4:	2000      	movs	r0, #0
 80042b6:	f000 fedb 	bl	8005070 <ToplevelMenu_setStatus>
		eNextState = GainMainMenuEntryHandler();
 80042ba:	f000 fdbf 	bl	8004e3c <GainMainMenuEntryHandler>
 80042be:	4603      	mov	r3, r0
 80042c0:	461a      	mov	r2, r3
 80042c2:	4b09      	ldr	r3, [pc, #36]	; (80042e8 <_ProcessTopLevelOutputMenuStateEvents+0x88>)
 80042c4:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
 80042c6:	4b07      	ldr	r3, [pc, #28]	; (80042e4 <_ProcessTopLevelOutputMenuStateEvents+0x84>)
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	2b04      	cmp	r3, #4
 80042cc:	d108      	bne.n	80042e0 <_ProcessTopLevelOutputMenuStateEvents+0x80>
	{
		ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 80042ce:	2000      	movs	r0, #0
 80042d0:	f000 fece 	bl	8005070 <ToplevelMenu_setStatus>
		eNextState = BiasMenuEntryHandler();
 80042d4:	f7ff fed8 	bl	8004088 <BiasMenuEntryHandler>
 80042d8:	4603      	mov	r3, r0
 80042da:	461a      	mov	r2, r3
 80042dc:	4b02      	ldr	r3, [pc, #8]	; (80042e8 <_ProcessTopLevelOutputMenuStateEvents+0x88>)
 80042de:	701a      	strb	r2, [r3, #0]
	}
}
 80042e0:	bf00      	nop
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	20001e57 	.word	0x20001e57
 80042e8:	20001e56 	.word	0x20001e56

080042ec <_ProcessTopLevelInputMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessTopLevelInputMenuStateEvents()
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
	  printf("Toplevel_Input_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderPush)
 80042f0:	4b12      	ldr	r3, [pc, #72]	; (800433c <_ProcessTopLevelInputMenuStateEvents+0x50>)
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	2b06      	cmp	r3, #6
 80042f6:	d105      	bne.n	8004304 <_ProcessTopLevelInputMenuStateEvents+0x18>
	{
		eNextState = ToplevelInputMenuExitHandler();
 80042f8:	f000 ff22 	bl	8005140 <ToplevelInputMenuExitHandler>
 80042fc:	4603      	mov	r3, r0
 80042fe:	461a      	mov	r2, r3
 8004300:	4b0f      	ldr	r3, [pc, #60]	; (8004340 <_ProcessTopLevelInputMenuStateEvents+0x54>)
 8004302:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evBlueBtn)
 8004304:	4b0d      	ldr	r3, [pc, #52]	; (800433c <_ProcessTopLevelInputMenuStateEvents+0x50>)
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d108      	bne.n	800431e <_ProcessTopLevelInputMenuStateEvents+0x32>
	{
		eNextState = ToplevelInputMenuInputHandler(eNewEvent);
 800430c:	4b0b      	ldr	r3, [pc, #44]	; (800433c <_ProcessTopLevelInputMenuStateEvents+0x50>)
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	4618      	mov	r0, r3
 8004312:	f000 fef3 	bl	80050fc <ToplevelInputMenuInputHandler>
 8004316:	4603      	mov	r3, r0
 8004318:	461a      	mov	r2, r3
 800431a:	4b09      	ldr	r3, [pc, #36]	; (8004340 <_ProcessTopLevelInputMenuStateEvents+0x54>)
 800431c:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 800431e:	4b07      	ldr	r3, [pc, #28]	; (800433c <_ProcessTopLevelInputMenuStateEvents+0x50>)
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	2b02      	cmp	r3, #2
 8004324:	d108      	bne.n	8004338 <_ProcessTopLevelInputMenuStateEvents+0x4c>
	{

		eNextState = ToplevelInputMenuInputHandler(eNewEvent);
 8004326:	4b05      	ldr	r3, [pc, #20]	; (800433c <_ProcessTopLevelInputMenuStateEvents+0x50>)
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	f000 fee6 	bl	80050fc <ToplevelInputMenuInputHandler>
 8004330:	4603      	mov	r3, r0
 8004332:	461a      	mov	r2, r3
 8004334:	4b02      	ldr	r3, [pc, #8]	; (8004340 <_ProcessTopLevelInputMenuStateEvents+0x54>)
 8004336:	701a      	strb	r2, [r3, #0]
	}
}
 8004338:	bf00      	nop
 800433a:	bd80      	pop	{r7, pc}
 800433c:	20001e57 	.word	0x20001e57
 8004340:	20001e56 	.word	0x20001e56

08004344 <_ProcessFuncMainMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFuncMainMenuStateEvents()
{
 8004344:	b580      	push	{r7, lr}
 8004346:	af00      	add	r7, sp, #0

	if(eNewEvent == evEncoderSet)
	{
		// No menu action
	}
	if(eNewEvent == evEncoderPush)
 8004348:	4b0f      	ldr	r3, [pc, #60]	; (8004388 <_ProcessFuncMainMenuStateEvents+0x44>)
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	2b06      	cmp	r3, #6
 800434e:	d105      	bne.n	800435c <_ProcessFuncMainMenuStateEvents+0x18>
	{
		eNextState = FuncMainMenuExitHandler();
 8004350:	f000 fc90 	bl	8004c74 <FuncMainMenuExitHandler>
 8004354:	4603      	mov	r3, r0
 8004356:	461a      	mov	r2, r3
 8004358:	4b0c      	ldr	r3, [pc, #48]	; (800438c <_ProcessFuncMainMenuStateEvents+0x48>)
 800435a:	701a      	strb	r2, [r3, #0]

	}
	if(eNewEvent == evBlueBtn)
 800435c:	4b0a      	ldr	r3, [pc, #40]	; (8004388 <_ProcessFuncMainMenuStateEvents+0x44>)
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d105      	bne.n	8004370 <_ProcessFuncMainMenuStateEvents+0x2c>
	{
		eNextState = FuncSignalMenuEntryHandler();
 8004364:	f000 fc9a 	bl	8004c9c <FuncSignalMenuEntryHandler>
 8004368:	4603      	mov	r3, r0
 800436a:	461a      	mov	r2, r3
 800436c:	4b07      	ldr	r3, [pc, #28]	; (800438c <_ProcessFuncMainMenuStateEvents+0x48>)
 800436e:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 8004370:	4b05      	ldr	r3, [pc, #20]	; (8004388 <_ProcessFuncMainMenuStateEvents+0x44>)
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	2b02      	cmp	r3, #2
 8004376:	d105      	bne.n	8004384 <_ProcessFuncMainMenuStateEvents+0x40>
	{
		eNextState = FuncAuxMenuEntryHandler();
 8004378:	f000 fcd4 	bl	8004d24 <FuncAuxMenuEntryHandler>
 800437c:	4603      	mov	r3, r0
 800437e:	461a      	mov	r2, r3
 8004380:	4b02      	ldr	r3, [pc, #8]	; (800438c <_ProcessFuncMainMenuStateEvents+0x48>)
 8004382:	701a      	strb	r2, [r3, #0]
	}
}
 8004384:	bf00      	nop
 8004386:	bd80      	pop	{r7, pc}
 8004388:	20001e57 	.word	0x20001e57
 800438c:	20001e56 	.word	0x20001e56

08004390 <_ProcessFuncSignalMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFuncSignalMenuStateEvents()
{
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Func_Signal_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 8004394:	4b0a      	ldr	r3, [pc, #40]	; (80043c0 <_ProcessFuncSignalMenuStateEvents+0x30>)
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	2b05      	cmp	r3, #5
 800439a:	d105      	bne.n	80043a8 <_ProcessFuncSignalMenuStateEvents+0x18>
	{
		eNextState = FuncSignalMenuInputHandler();
 800439c:	f000 fc9c 	bl	8004cd8 <FuncSignalMenuInputHandler>
 80043a0:	4603      	mov	r3, r0
 80043a2:	461a      	mov	r2, r3
 80043a4:	4b07      	ldr	r3, [pc, #28]	; (80043c4 <_ProcessFuncSignalMenuStateEvents+0x34>)
 80043a6:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 80043a8:	4b05      	ldr	r3, [pc, #20]	; (80043c0 <_ProcessFuncSignalMenuStateEvents+0x30>)
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	2b06      	cmp	r3, #6
 80043ae:	d105      	bne.n	80043bc <_ProcessFuncSignalMenuStateEvents+0x2c>
	{
		eNextState = FuncSignalMenuExitHandler();
 80043b0:	f000 fca4 	bl	8004cfc <FuncSignalMenuExitHandler>
 80043b4:	4603      	mov	r3, r0
 80043b6:	461a      	mov	r2, r3
 80043b8:	4b02      	ldr	r3, [pc, #8]	; (80043c4 <_ProcessFuncSignalMenuStateEvents+0x34>)
 80043ba:	701a      	strb	r2, [r3, #0]
	}
}
 80043bc:	bf00      	nop
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	20001e57 	.word	0x20001e57
 80043c4:	20001e56 	.word	0x20001e56

080043c8 <_ProcessFuncAuxMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFuncAuxMenuStateEvents()
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Func_Aux_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 80043cc:	4b0f      	ldr	r3, [pc, #60]	; (800440c <_ProcessFuncAuxMenuStateEvents+0x44>)
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	2b05      	cmp	r3, #5
 80043d2:	d105      	bne.n	80043e0 <_ProcessFuncAuxMenuStateEvents+0x18>
	{
		eNextState = FuncAuxMenuInputHandler();
 80043d4:	f000 fcc4 	bl	8004d60 <FuncAuxMenuInputHandler>
 80043d8:	4603      	mov	r3, r0
 80043da:	461a      	mov	r2, r3
 80043dc:	4b0c      	ldr	r3, [pc, #48]	; (8004410 <_ProcessFuncAuxMenuStateEvents+0x48>)
 80043de:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 80043e0:	4b0a      	ldr	r3, [pc, #40]	; (800440c <_ProcessFuncAuxMenuStateEvents+0x44>)
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	2b06      	cmp	r3, #6
 80043e6:	d105      	bne.n	80043f4 <_ProcessFuncAuxMenuStateEvents+0x2c>
	{
		eNextState = FuncAuxMenuExitHandler();
 80043e8:	f000 fd08 	bl	8004dfc <FuncAuxMenuExitHandler>
 80043ec:	4603      	mov	r3, r0
 80043ee:	461a      	mov	r2, r3
 80043f0:	4b07      	ldr	r3, [pc, #28]	; (8004410 <_ProcessFuncAuxMenuStateEvents+0x48>)
 80043f2:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 80043f4:	4b05      	ldr	r3, [pc, #20]	; (800440c <_ProcessFuncAuxMenuStateEvents+0x44>)
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	2b03      	cmp	r3, #3
 80043fa:	d105      	bne.n	8004408 <_ProcessFuncAuxMenuStateEvents+0x40>
	{
		eNextState = FuncAuxToggleDutyMode();
 80043fc:	f000 fcec 	bl	8004dd8 <FuncAuxToggleDutyMode>
 8004400:	4603      	mov	r3, r0
 8004402:	461a      	mov	r2, r3
 8004404:	4b02      	ldr	r3, [pc, #8]	; (8004410 <_ProcessFuncAuxMenuStateEvents+0x48>)
 8004406:	701a      	strb	r2, [r3, #0]
	}

}
 8004408:	bf00      	nop
 800440a:	bd80      	pop	{r7, pc}
 800440c:	20001e57 	.word	0x20001e57
 8004410:	20001e56 	.word	0x20001e56

08004414 <_ProcessGainMainMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessGainMainMenuStateEvents()
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
	#endif
	if(eNewEvent == evEncoderSet)
	{
		// No menu action
	}
	if(eNewEvent == evEncoderPush)
 800441a:	4b18      	ldr	r3, [pc, #96]	; (800447c <_ProcessGainMainMenuStateEvents+0x68>)
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	2b06      	cmp	r3, #6
 8004420:	d108      	bne.n	8004434 <_ProcessGainMainMenuStateEvents+0x20>
	{
		eNextState = GainMainMenuExitHandler();
 8004422:	f000 fd1d 	bl	8004e60 <GainMainMenuExitHandler>
 8004426:	4603      	mov	r3, r0
 8004428:	461a      	mov	r2, r3
 800442a:	4b15      	ldr	r3, [pc, #84]	; (8004480 <_ProcessGainMainMenuStateEvents+0x6c>)
 800442c:	701a      	strb	r2, [r3, #0]
		ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 800442e:	2002      	movs	r0, #2
 8004430:	f000 fe1e 	bl	8005070 <ToplevelMenu_setStatus>
	}
	if(eNewEvent == evBlueBtn)
 8004434:	4b11      	ldr	r3, [pc, #68]	; (800447c <_ProcessGainMainMenuStateEvents+0x68>)
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d105      	bne.n	8004448 <_ProcessGainMainMenuStateEvents+0x34>
	{
		eNextState = GainSignalMenuEntryHandler();
 800443c:	f000 fd22 	bl	8004e84 <GainSignalMenuEntryHandler>
 8004440:	4603      	mov	r3, r0
 8004442:	461a      	mov	r2, r3
 8004444:	4b0e      	ldr	r3, [pc, #56]	; (8004480 <_ProcessGainMainMenuStateEvents+0x6c>)
 8004446:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 8004448:	4b0c      	ldr	r3, [pc, #48]	; (800447c <_ProcessGainMainMenuStateEvents+0x68>)
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	2b02      	cmp	r3, #2
 800444e:	d110      	bne.n	8004472 <_ProcessGainMainMenuStateEvents+0x5e>
	{
		eOutput_mode aux_output_func = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8004450:	2001      	movs	r0, #1
 8004452:	f002 f94f 	bl	80066f4 <SM_GetOutputChannel>
 8004456:	4603      	mov	r3, r0
 8004458:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	71fb      	strb	r3, [r7, #7]
		if(aux_output_func != PWM_FUNC_MODE)
 8004460:	79fb      	ldrb	r3, [r7, #7]
 8004462:	2b06      	cmp	r3, #6
 8004464:	d005      	beq.n	8004472 <_ProcessGainMainMenuStateEvents+0x5e>
			eNextState = GainAuxMenuEntryHandler();
 8004466:	f000 fda3 	bl	8004fb0 <GainAuxMenuEntryHandler>
 800446a:	4603      	mov	r3, r0
 800446c:	461a      	mov	r2, r3
 800446e:	4b04      	ldr	r3, [pc, #16]	; (8004480 <_ProcessGainMainMenuStateEvents+0x6c>)
 8004470:	701a      	strb	r2, [r3, #0]
	}
}
 8004472:	bf00      	nop
 8004474:	3708      	adds	r7, #8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	20001e57 	.word	0x20001e57
 8004480:	20001e56 	.word	0x20001e56

08004484 <_ProcessGainSignalMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessGainSignalMenuStateEvents()
{
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Gain_Signal_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 8004488:	4b21      	ldr	r3, [pc, #132]	; (8004510 <_ProcessGainSignalMenuStateEvents+0x8c>)
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	2b05      	cmp	r3, #5
 800448e:	d106      	bne.n	800449e <_ProcessGainSignalMenuStateEvents+0x1a>
	{
		eNextState = GainSignalMenuInputHandler(evEncoderSet);
 8004490:	2005      	movs	r0, #5
 8004492:	f000 fd29 	bl	8004ee8 <GainSignalMenuInputHandler>
 8004496:	4603      	mov	r3, r0
 8004498:	461a      	mov	r2, r3
 800449a:	4b1e      	ldr	r3, [pc, #120]	; (8004514 <_ProcessGainSignalMenuStateEvents+0x90>)
 800449c:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 800449e:	4b1c      	ldr	r3, [pc, #112]	; (8004510 <_ProcessGainSignalMenuStateEvents+0x8c>)
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	2b06      	cmp	r3, #6
 80044a4:	d105      	bne.n	80044b2 <_ProcessGainSignalMenuStateEvents+0x2e>
	{
		eNextState = GainSignalMenuExitHandler();
 80044a6:	f000 fd71 	bl	8004f8c <GainSignalMenuExitHandler>
 80044aa:	4603      	mov	r3, r0
 80044ac:	461a      	mov	r2, r3
 80044ae:	4b19      	ldr	r3, [pc, #100]	; (8004514 <_ProcessGainSignalMenuStateEvents+0x90>)
 80044b0:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evBlueBtn)
 80044b2:	4b17      	ldr	r3, [pc, #92]	; (8004510 <_ProcessGainSignalMenuStateEvents+0x8c>)
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d106      	bne.n	80044c8 <_ProcessGainSignalMenuStateEvents+0x44>
	{
		eNextState = GainSignalMenuInputHandler(evBlueBtn);
 80044ba:	2001      	movs	r0, #1
 80044bc:	f000 fd14 	bl	8004ee8 <GainSignalMenuInputHandler>
 80044c0:	4603      	mov	r3, r0
 80044c2:	461a      	mov	r2, r3
 80044c4:	4b13      	ldr	r3, [pc, #76]	; (8004514 <_ProcessGainSignalMenuStateEvents+0x90>)
 80044c6:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 80044c8:	4b11      	ldr	r3, [pc, #68]	; (8004510 <_ProcessGainSignalMenuStateEvents+0x8c>)
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d106      	bne.n	80044de <_ProcessGainSignalMenuStateEvents+0x5a>
	{
		eNextState = GainSignalMenuInputHandler(evGreenBtn);
 80044d0:	2002      	movs	r0, #2
 80044d2:	f000 fd09 	bl	8004ee8 <GainSignalMenuInputHandler>
 80044d6:	4603      	mov	r3, r0
 80044d8:	461a      	mov	r2, r3
 80044da:	4b0e      	ldr	r3, [pc, #56]	; (8004514 <_ProcessGainSignalMenuStateEvents+0x90>)
 80044dc:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 80044de:	4b0c      	ldr	r3, [pc, #48]	; (8004510 <_ProcessGainSignalMenuStateEvents+0x8c>)
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	2b03      	cmp	r3, #3
 80044e4:	d106      	bne.n	80044f4 <_ProcessGainSignalMenuStateEvents+0x70>
	{
		eNextState = GainSignalMenuInputHandler(evYellowBtn);
 80044e6:	2003      	movs	r0, #3
 80044e8:	f000 fcfe 	bl	8004ee8 <GainSignalMenuInputHandler>
 80044ec:	4603      	mov	r3, r0
 80044ee:	461a      	mov	r2, r3
 80044f0:	4b08      	ldr	r3, [pc, #32]	; (8004514 <_ProcessGainSignalMenuStateEvents+0x90>)
 80044f2:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
 80044f4:	4b06      	ldr	r3, [pc, #24]	; (8004510 <_ProcessGainSignalMenuStateEvents+0x8c>)
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	2b04      	cmp	r3, #4
 80044fa:	d106      	bne.n	800450a <_ProcessGainSignalMenuStateEvents+0x86>
	{
		eNextState = GainSignalMenuInputHandler(evRedBtn);
 80044fc:	2004      	movs	r0, #4
 80044fe:	f000 fcf3 	bl	8004ee8 <GainSignalMenuInputHandler>
 8004502:	4603      	mov	r3, r0
 8004504:	461a      	mov	r2, r3
 8004506:	4b03      	ldr	r3, [pc, #12]	; (8004514 <_ProcessGainSignalMenuStateEvents+0x90>)
 8004508:	701a      	strb	r2, [r3, #0]
	}

}
 800450a:	bf00      	nop
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	20001e57 	.word	0x20001e57
 8004514:	20001e56 	.word	0x20001e56

08004518 <_ProcessGainAuxMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessGainAuxMenuStateEvents()
{
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Gain_Aux_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 800451c:	4b0a      	ldr	r3, [pc, #40]	; (8004548 <_ProcessGainAuxMenuStateEvents+0x30>)
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	2b05      	cmp	r3, #5
 8004522:	d105      	bne.n	8004530 <_ProcessGainAuxMenuStateEvents+0x18>
	{
		eNextState = GainAuxMenuInputHandler();
 8004524:	f000 fd74 	bl	8005010 <GainAuxMenuInputHandler>
 8004528:	4603      	mov	r3, r0
 800452a:	461a      	mov	r2, r3
 800452c:	4b07      	ldr	r3, [pc, #28]	; (800454c <_ProcessGainAuxMenuStateEvents+0x34>)
 800452e:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 8004530:	4b05      	ldr	r3, [pc, #20]	; (8004548 <_ProcessGainAuxMenuStateEvents+0x30>)
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	2b06      	cmp	r3, #6
 8004536:	d105      	bne.n	8004544 <_ProcessGainAuxMenuStateEvents+0x2c>
	{
		eNextState = GainAuxMenuExitHandler();
 8004538:	f000 fd7c 	bl	8005034 <GainAuxMenuExitHandler>
 800453c:	4603      	mov	r3, r0
 800453e:	461a      	mov	r2, r3
 8004540:	4b02      	ldr	r3, [pc, #8]	; (800454c <_ProcessGainAuxMenuStateEvents+0x34>)
 8004542:	701a      	strb	r2, [r3, #0]
	}
}
 8004544:	bf00      	nop
 8004546:	bd80      	pop	{r7, pc}
 8004548:	20001e57 	.word	0x20001e57
 800454c:	20001e56 	.word	0x20001e56

08004550 <_ProcessFreqMainMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqMainMenuStateEvents()
{
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Main_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderPush)
 8004554:	4b1b      	ldr	r3, [pc, #108]	; (80045c4 <_ProcessFreqMainMenuStateEvents+0x74>)
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	2b06      	cmp	r3, #6
 800455a:	d108      	bne.n	800456e <_ProcessFreqMainMenuStateEvents+0x1e>
	{
		eNextState = FreqMainMenuExitHandler();
 800455c:	f000 fa84 	bl	8004a68 <FreqMainMenuExitHandler>
 8004560:	4603      	mov	r3, r0
 8004562:	461a      	mov	r2, r3
 8004564:	4b18      	ldr	r3, [pc, #96]	; (80045c8 <_ProcessFreqMainMenuStateEvents+0x78>)
 8004566:	701a      	strb	r2, [r3, #0]
		ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8004568:	2002      	movs	r0, #2
 800456a:	f000 fd81 	bl	8005070 <ToplevelMenu_setStatus>
	}
	if(eNewEvent == evBlueBtn)
 800456e:	4b15      	ldr	r3, [pc, #84]	; (80045c4 <_ProcessFreqMainMenuStateEvents+0x74>)
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d105      	bne.n	8004582 <_ProcessFreqMainMenuStateEvents+0x32>
	{
		eNextState = FreqPresetMenuEntryHandler();
 8004576:	f000 fa8f 	bl	8004a98 <FreqPresetMenuEntryHandler>
 800457a:	4603      	mov	r3, r0
 800457c:	461a      	mov	r2, r3
 800457e:	4b12      	ldr	r3, [pc, #72]	; (80045c8 <_ProcessFreqMainMenuStateEvents+0x78>)
 8004580:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 8004582:	4b10      	ldr	r3, [pc, #64]	; (80045c4 <_ProcessFreqMainMenuStateEvents+0x74>)
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	2b02      	cmp	r3, #2
 8004588:	d105      	bne.n	8004596 <_ProcessFreqMainMenuStateEvents+0x46>
	{
		eNextState = FreqAdjustMenuEntryHandler();
 800458a:	f000 fad5 	bl	8004b38 <FreqAdjustMenuEntryHandler>
 800458e:	4603      	mov	r3, r0
 8004590:	461a      	mov	r2, r3
 8004592:	4b0d      	ldr	r3, [pc, #52]	; (80045c8 <_ProcessFreqMainMenuStateEvents+0x78>)
 8004594:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 8004596:	4b0b      	ldr	r3, [pc, #44]	; (80045c4 <_ProcessFreqMainMenuStateEvents+0x74>)
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	2b03      	cmp	r3, #3
 800459c:	d105      	bne.n	80045aa <_ProcessFreqMainMenuStateEvents+0x5a>
	{
		eNextState = FreqSweepMenuEntryHandler();
 800459e:	f000 f905 	bl	80047ac <FreqSweepMenuEntryHandler>
 80045a2:	4603      	mov	r3, r0
 80045a4:	461a      	mov	r2, r3
 80045a6:	4b08      	ldr	r3, [pc, #32]	; (80045c8 <_ProcessFreqMainMenuStateEvents+0x78>)
 80045a8:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
 80045aa:	4b06      	ldr	r3, [pc, #24]	; (80045c4 <_ProcessFreqMainMenuStateEvents+0x74>)
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	2b04      	cmp	r3, #4
 80045b0:	d105      	bne.n	80045be <_ProcessFreqMainMenuStateEvents+0x6e>
	{
		eNextState = FreqPrescalerMenuEntryHandler();
 80045b2:	f000 fafb 	bl	8004bac <FreqPrescalerMenuEntryHandler>
 80045b6:	4603      	mov	r3, r0
 80045b8:	461a      	mov	r2, r3
 80045ba:	4b03      	ldr	r3, [pc, #12]	; (80045c8 <_ProcessFreqMainMenuStateEvents+0x78>)
 80045bc:	701a      	strb	r2, [r3, #0]
	}
}
 80045be:	bf00      	nop
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	20001e57 	.word	0x20001e57
 80045c8:	20001e56 	.word	0x20001e56

080045cc <_ProcessFreqPresetMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqPresetMenuStateEvents()
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Preset_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 80045d0:	4b0a      	ldr	r3, [pc, #40]	; (80045fc <_ProcessFreqPresetMenuStateEvents+0x30>)
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	2b05      	cmp	r3, #5
 80045d6:	d105      	bne.n	80045e4 <_ProcessFreqPresetMenuStateEvents+0x18>
	{
		eNextState = FreqPresetMenuInputHandler();
 80045d8:	f000 fa8a 	bl	8004af0 <FreqPresetMenuInputHandler>
 80045dc:	4603      	mov	r3, r0
 80045de:	461a      	mov	r2, r3
 80045e0:	4b07      	ldr	r3, [pc, #28]	; (8004600 <_ProcessFreqPresetMenuStateEvents+0x34>)
 80045e2:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 80045e4:	4b05      	ldr	r3, [pc, #20]	; (80045fc <_ProcessFreqPresetMenuStateEvents+0x30>)
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	2b06      	cmp	r3, #6
 80045ea:	d105      	bne.n	80045f8 <_ProcessFreqPresetMenuStateEvents+0x2c>
	{
		eNextState = FreqPresetMenuExitHandler();
 80045ec:	f000 fa92 	bl	8004b14 <FreqPresetMenuExitHandler>
 80045f0:	4603      	mov	r3, r0
 80045f2:	461a      	mov	r2, r3
 80045f4:	4b02      	ldr	r3, [pc, #8]	; (8004600 <_ProcessFreqPresetMenuStateEvents+0x34>)
 80045f6:	701a      	strb	r2, [r3, #0]
	}
}
 80045f8:	bf00      	nop
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	20001e57 	.word	0x20001e57
 8004600:	20001e56 	.word	0x20001e56

08004604 <_ProcessFreqAdjustMenuState>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqAdjustMenuState()
{
 8004604:	b580      	push	{r7, lr}
 8004606:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Adjust_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 8004608:	4b0a      	ldr	r3, [pc, #40]	; (8004634 <_ProcessFreqAdjustMenuState+0x30>)
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	2b05      	cmp	r3, #5
 800460e:	d105      	bne.n	800461c <_ProcessFreqAdjustMenuState+0x18>
	{
		eNextState = FreqAdjustMenuInputHandler();
 8004610:	f000 faae 	bl	8004b70 <FreqAdjustMenuInputHandler>
 8004614:	4603      	mov	r3, r0
 8004616:	461a      	mov	r2, r3
 8004618:	4b07      	ldr	r3, [pc, #28]	; (8004638 <_ProcessFreqAdjustMenuState+0x34>)
 800461a:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 800461c:	4b05      	ldr	r3, [pc, #20]	; (8004634 <_ProcessFreqAdjustMenuState+0x30>)
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	2b06      	cmp	r3, #6
 8004622:	d105      	bne.n	8004630 <_ProcessFreqAdjustMenuState+0x2c>
	{
		eNextState = FreqAdjustMenuExitHandler();
 8004624:	f000 fab0 	bl	8004b88 <FreqAdjustMenuExitHandler>
 8004628:	4603      	mov	r3, r0
 800462a:	461a      	mov	r2, r3
 800462c:	4b02      	ldr	r3, [pc, #8]	; (8004638 <_ProcessFreqAdjustMenuState+0x34>)
 800462e:	701a      	strb	r2, [r3, #0]
	}
}
 8004630:	bf00      	nop
 8004632:	bd80      	pop	{r7, pc}
 8004634:	20001e57 	.word	0x20001e57
 8004638:	20001e56 	.word	0x20001e56

0800463c <_ProcessFreqPrescalerMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqPrescalerMenuStateEvents()
{
 800463c:	b580      	push	{r7, lr}
 800463e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Prescaler_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 8004640:	4b0a      	ldr	r3, [pc, #40]	; (800466c <_ProcessFreqPrescalerMenuStateEvents+0x30>)
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	2b05      	cmp	r3, #5
 8004646:	d105      	bne.n	8004654 <_ProcessFreqPrescalerMenuStateEvents+0x18>
	{
		eNextState = FreqPrescalerMenuInputHandler();
 8004648:	f000 facc 	bl	8004be4 <FreqPrescalerMenuInputHandler>
 800464c:	4603      	mov	r3, r0
 800464e:	461a      	mov	r2, r3
 8004650:	4b07      	ldr	r3, [pc, #28]	; (8004670 <_ProcessFreqPrescalerMenuStateEvents+0x34>)
 8004652:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 8004654:	4b05      	ldr	r3, [pc, #20]	; (800466c <_ProcessFreqPrescalerMenuStateEvents+0x30>)
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	2b06      	cmp	r3, #6
 800465a:	d105      	bne.n	8004668 <_ProcessFreqPrescalerMenuStateEvents+0x2c>
	{
		eNextState = FreqPrescalerMenuExitHandler();
 800465c:	f000 face 	bl	8004bfc <FreqPrescalerMenuExitHandler>
 8004660:	4603      	mov	r3, r0
 8004662:	461a      	mov	r2, r3
 8004664:	4b02      	ldr	r3, [pc, #8]	; (8004670 <_ProcessFreqPrescalerMenuStateEvents+0x34>)
 8004666:	701a      	strb	r2, [r3, #0]
	}
}
 8004668:	bf00      	nop
 800466a:	bd80      	pop	{r7, pc}
 800466c:	20001e57 	.word	0x20001e57
 8004670:	20001e56 	.word	0x20001e56

08004674 <_ProcessFreqSweepMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqSweepMenuStateEvents()
{
 8004674:	b580      	push	{r7, lr}
 8004676:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Sweep_Menu_State\n");
	#endif

	if(eNewEvent == evBlueBtn)
 8004678:	4b21      	ldr	r3, [pc, #132]	; (8004700 <_ProcessFreqSweepMenuStateEvents+0x8c>)
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d106      	bne.n	800468e <_ProcessFreqSweepMenuStateEvents+0x1a>
	{
		// enable
		eNextState = FreqSweepMenuInputHandler(evSweepEnableBtn);
 8004680:	2007      	movs	r0, #7
 8004682:	f000 f8e9 	bl	8004858 <FreqSweepMenuInputHandler>
 8004686:	4603      	mov	r3, r0
 8004688:	461a      	mov	r2, r3
 800468a:	4b1e      	ldr	r3, [pc, #120]	; (8004704 <_ProcessFreqSweepMenuStateEvents+0x90>)
 800468c:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 800468e:	4b1c      	ldr	r3, [pc, #112]	; (8004700 <_ProcessFreqSweepMenuStateEvents+0x8c>)
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	2b02      	cmp	r3, #2
 8004694:	d106      	bne.n	80046a4 <_ProcessFreqSweepMenuStateEvents+0x30>
	{
		// direction
		eNextState = FreqSweepMenuInputHandler(evSweepModeBtn);
 8004696:	2008      	movs	r0, #8
 8004698:	f000 f8de 	bl	8004858 <FreqSweepMenuInputHandler>
 800469c:	4603      	mov	r3, r0
 800469e:	461a      	mov	r2, r3
 80046a0:	4b18      	ldr	r3, [pc, #96]	; (8004704 <_ProcessFreqSweepMenuStateEvents+0x90>)
 80046a2:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 80046a4:	4b16      	ldr	r3, [pc, #88]	; (8004700 <_ProcessFreqSweepMenuStateEvents+0x8c>)
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	2b03      	cmp	r3, #3
 80046aa:	d106      	bne.n	80046ba <_ProcessFreqSweepMenuStateEvents+0x46>
	{
		// set sweep speed
		eNextState = FreqSweepMenuInputHandler(evSweepSpeedBtn);
 80046ac:	2009      	movs	r0, #9
 80046ae:	f000 f8d3 	bl	8004858 <FreqSweepMenuInputHandler>
 80046b2:	4603      	mov	r3, r0
 80046b4:	461a      	mov	r2, r3
 80046b6:	4b13      	ldr	r3, [pc, #76]	; (8004704 <_ProcessFreqSweepMenuStateEvents+0x90>)
 80046b8:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
 80046ba:	4b11      	ldr	r3, [pc, #68]	; (8004700 <_ProcessFreqSweepMenuStateEvents+0x8c>)
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	2b04      	cmp	r3, #4
 80046c0:	d106      	bne.n	80046d0 <_ProcessFreqSweepMenuStateEvents+0x5c>
	{
		// set lower/upper sweep limit
		eNextState = FreqSweepMenuInputHandler(evSweepLimitBtn);
 80046c2:	200a      	movs	r0, #10
 80046c4:	f000 f8c8 	bl	8004858 <FreqSweepMenuInputHandler>
 80046c8:	4603      	mov	r3, r0
 80046ca:	461a      	mov	r2, r3
 80046cc:	4b0d      	ldr	r3, [pc, #52]	; (8004704 <_ProcessFreqSweepMenuStateEvents+0x90>)
 80046ce:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderSet)
 80046d0:	4b0b      	ldr	r3, [pc, #44]	; (8004700 <_ProcessFreqSweepMenuStateEvents+0x8c>)
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	2b05      	cmp	r3, #5
 80046d6:	d106      	bne.n	80046e6 <_ProcessFreqSweepMenuStateEvents+0x72>
	{
		eNextState = FreqSweepMenuInputHandler(evEncoderSweep);
 80046d8:	200b      	movs	r0, #11
 80046da:	f000 f8bd 	bl	8004858 <FreqSweepMenuInputHandler>
 80046de:	4603      	mov	r3, r0
 80046e0:	461a      	mov	r2, r3
 80046e2:	4b08      	ldr	r3, [pc, #32]	; (8004704 <_ProcessFreqSweepMenuStateEvents+0x90>)
 80046e4:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 80046e6:	4b06      	ldr	r3, [pc, #24]	; (8004700 <_ProcessFreqSweepMenuStateEvents+0x8c>)
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	2b06      	cmp	r3, #6
 80046ec:	d105      	bne.n	80046fa <_ProcessFreqSweepMenuStateEvents+0x86>
	{
		eNextState = FreqSweepMenuExitHandler();
 80046ee:	f000 f989 	bl	8004a04 <FreqSweepMenuExitHandler>
 80046f2:	4603      	mov	r3, r0
 80046f4:	461a      	mov	r2, r3
 80046f6:	4b03      	ldr	r3, [pc, #12]	; (8004704 <_ProcessFreqSweepMenuStateEvents+0x90>)
 80046f8:	701a      	strb	r2, [r3, #0]
	}

}
 80046fa:	bf00      	nop
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	20001e57 	.word	0x20001e57
 8004704:	20001e56 	.word	0x20001e56

08004708 <_ProcessBiasMainMenuEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessBiasMainMenuEvents()
{
 8004708:	b580      	push	{r7, lr}
 800470a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Bias_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 800470c:	4b1d      	ldr	r3, [pc, #116]	; (8004784 <_ProcessBiasMainMenuEvents+0x7c>)
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	2b05      	cmp	r3, #5
 8004712:	d106      	bne.n	8004722 <_ProcessBiasMainMenuEvents+0x1a>
	{
		eNextState = BiasMenuInputHandler(evEncoderSet);
 8004714:	2005      	movs	r0, #5
 8004716:	f7ff fcd5 	bl	80040c4 <BiasMenuInputHandler>
 800471a:	4603      	mov	r3, r0
 800471c:	461a      	mov	r2, r3
 800471e:	4b1a      	ldr	r3, [pc, #104]	; (8004788 <_ProcessBiasMainMenuEvents+0x80>)
 8004720:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 8004722:	4b18      	ldr	r3, [pc, #96]	; (8004784 <_ProcessBiasMainMenuEvents+0x7c>)
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	2b06      	cmp	r3, #6
 8004728:	d108      	bne.n	800473c <_ProcessBiasMainMenuEvents+0x34>
	{
		eNextState = BiasMenuExitHandler();
 800472a:	f7ff fd0f 	bl	800414c <BiasMenuExitHandler>
 800472e:	4603      	mov	r3, r0
 8004730:	461a      	mov	r2, r3
 8004732:	4b15      	ldr	r3, [pc, #84]	; (8004788 <_ProcessBiasMainMenuEvents+0x80>)
 8004734:	701a      	strb	r2, [r3, #0]
		ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8004736:	2002      	movs	r0, #2
 8004738:	f000 fc9a 	bl	8005070 <ToplevelMenu_setStatus>
	}
	if(eNewEvent == evBlueBtn)
 800473c:	4b11      	ldr	r3, [pc, #68]	; (8004784 <_ProcessBiasMainMenuEvents+0x7c>)
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d106      	bne.n	8004752 <_ProcessBiasMainMenuEvents+0x4a>
	{
		// enable
		eNextState = BiasMenuInputHandler(evBlueBtn);
 8004744:	2001      	movs	r0, #1
 8004746:	f7ff fcbd 	bl	80040c4 <BiasMenuInputHandler>
 800474a:	4603      	mov	r3, r0
 800474c:	461a      	mov	r2, r3
 800474e:	4b0e      	ldr	r3, [pc, #56]	; (8004788 <_ProcessBiasMainMenuEvents+0x80>)
 8004750:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 8004752:	4b0c      	ldr	r3, [pc, #48]	; (8004784 <_ProcessBiasMainMenuEvents+0x7c>)
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	2b02      	cmp	r3, #2
 8004758:	d106      	bne.n	8004768 <_ProcessBiasMainMenuEvents+0x60>
	{
		// direction
		eNextState = BiasMenuInputHandler(evGreenBtn);
 800475a:	2002      	movs	r0, #2
 800475c:	f7ff fcb2 	bl	80040c4 <BiasMenuInputHandler>
 8004760:	4603      	mov	r3, r0
 8004762:	461a      	mov	r2, r3
 8004764:	4b08      	ldr	r3, [pc, #32]	; (8004788 <_ProcessBiasMainMenuEvents+0x80>)
 8004766:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 8004768:	4b06      	ldr	r3, [pc, #24]	; (8004784 <_ProcessBiasMainMenuEvents+0x7c>)
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	2b03      	cmp	r3, #3
 800476e:	d106      	bne.n	800477e <_ProcessBiasMainMenuEvents+0x76>
	{
		// set sweep speed
		eNextState = BiasMenuInputHandler(evYellowBtn);
 8004770:	2003      	movs	r0, #3
 8004772:	f7ff fca7 	bl	80040c4 <BiasMenuInputHandler>
 8004776:	4603      	mov	r3, r0
 8004778:	461a      	mov	r2, r3
 800477a:	4b03      	ldr	r3, [pc, #12]	; (8004788 <_ProcessBiasMainMenuEvents+0x80>)
 800477c:	701a      	strb	r2, [r3, #0]
	}
}
 800477e:	bf00      	nop
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	20001e57 	.word	0x20001e57
 8004788:	20001e56 	.word	0x20001e56

0800478c <EM_SetNewEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	4603      	mov	r3, r0
 8004794:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 8004796:	4a04      	ldr	r2, [pc, #16]	; (80047a8 <EM_SetNewEvent+0x1c>)
 8004798:	79fb      	ldrb	r3, [r7, #7]
 800479a:	7013      	strb	r3, [r2, #0]
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	20001e57 	.word	0x20001e57

080047ac <FreqSweepMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuEntryHandler()
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqSweepMenuEntryHandler captured\n");
	#endif

	DM_RefreshScreen();
 80047b0:	f7fc fedc 	bl	800156c <DM_RefreshScreen>

	if( sweep_upper_bounds_longest_output_arr != OUTPUT_TIMER->ARR)
 80047b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80047b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ba:	ee07 3a90 	vmov	s15, r3
 80047be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80047c2:	4b20      	ldr	r3, [pc, #128]	; (8004844 <FreqSweepMenuEntryHandler+0x98>)
 80047c4:	edd3 7a00 	vldr	s15, [r3]
 80047c8:	eeb4 7a67 	vcmp.f32	s14, s15
 80047cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047d0:	d009      	beq.n	80047e6 <FreqSweepMenuEntryHandler+0x3a>
		sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 80047d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80047d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d8:	ee07 3a90 	vmov	s15, r3
 80047dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047e0:	4b18      	ldr	r3, [pc, #96]	; (8004844 <FreqSweepMenuEntryHandler+0x98>)
 80047e2:	edc3 7a00 	vstr	s15, [r3]

	if( sweep_upper_bounds_longest_output_arr == MIN_OUTPUT_ARR)
 80047e6:	4b17      	ldr	r3, [pc, #92]	; (8004844 <FreqSweepMenuEntryHandler+0x98>)
 80047e8:	edd3 7a00 	vldr	s15, [r3]
 80047ec:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 80047f0:	eef4 7a47 	vcmp.f32	s15, s14
 80047f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047f8:	d101      	bne.n	80047fe <FreqSweepMenuEntryHandler+0x52>
	{
		FS_SetSweepModeDown();
 80047fa:	f001 f891 	bl	8005920 <FS_SetSweepModeDown>
	}

	FS_SetEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 80047fe:	2000      	movs	r0, #0
 8004800:	f001 f8e4 	bl	80059cc <FS_SetEncoderControlMode>
	FS_SetSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 8004804:	2000      	movs	r0, #0
 8004806:	f001 f93f 	bl	8005a88 <FS_SetSweepTimerAutoReloadForEncoderControl>
	calculated_sweep_in_hertz = FS_GetCalculatedSweepFrequencyInHertz();
 800480a:	f001 f979 	bl	8005b00 <FS_GetCalculatedSweepFrequencyInHertz>
 800480e:	eef0 7a40 	vmov.f32	s15, s0
 8004812:	4b0d      	ldr	r3, [pc, #52]	; (8004848 <FreqSweepMenuEntryHandler+0x9c>)
 8004814:	edc3 7a00 	vstr	s15, [r3]

	// reset sweep start value
	SWEEP_TIMER->CNT = 0;
 8004818:	4b0c      	ldr	r3, [pc, #48]	; (800484c <FreqSweepMenuEntryHandler+0xa0>)
 800481a:	2200      	movs	r2, #0
 800481c:	625a      	str	r2, [r3, #36]	; 0x24

	// set default mode to sweep speed control
	FreqSweepMenuInputHandler(evSweepSpeedBtn);
 800481e:	2009      	movs	r0, #9
 8004820:	f000 f81a 	bl	8004858 <FreqSweepMenuInputHandler>

	// sweep start speed
	SWEEP_TIMER->ARR = MIN_SWEEP_ARR;
 8004824:	4b09      	ldr	r3, [pc, #36]	; (800484c <FreqSweepMenuEntryHandler+0xa0>)
 8004826:	f244 12a0 	movw	r2, #16800	; 0x41a0
 800482a:	62da      	str	r2, [r3, #44]	; 0x2c
	SWEEP_TIMER->PSC = 0;
 800482c:	4b07      	ldr	r3, [pc, #28]	; (800484c <FreqSweepMenuEntryHandler+0xa0>)
 800482e:	2200      	movs	r2, #0
 8004830:	629a      	str	r2, [r3, #40]	; 0x28



	// get ready to load menu
	eNextFreqMenuStatus = ENABLE_FREQ_SWEEP_MENU;
 8004832:	4b07      	ldr	r3, [pc, #28]	; (8004850 <FreqSweepMenuEntryHandler+0xa4>)
 8004834:	2204      	movs	r2, #4
 8004836:	701a      	strb	r2, [r3, #0]


	// stay in this state
	eNewEvent = evIdle;
 8004838:	4b06      	ldr	r3, [pc, #24]	; (8004854 <FreqSweepMenuEntryHandler+0xa8>)
 800483a:	2200      	movs	r2, #0
 800483c:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 800483e:	230d      	movs	r3, #13
}
 8004840:	4618      	mov	r0, r3
 8004842:	bd80      	pop	{r7, pc}
 8004844:	20000124 	.word	0x20000124
 8004848:	2000226c 	.word	0x2000226c
 800484c:	40000c00 	.word	0x40000c00
 8004850:	20001e5a 	.word	0x20001e5a
 8004854:	20001e57 	.word	0x20001e57

08004858 <FreqSweepMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuInputHandler(eSystemEvent pEvent)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	4603      	mov	r3, r0
 8004860:	71fb      	strb	r3, [r7, #7]
		printf("FreqAdjustMenuInputHandler Event captured\n");
	#endif



	switch(pEvent)
 8004862:	79fb      	ldrb	r3, [r7, #7]
 8004864:	3b07      	subs	r3, #7
 8004866:	2b04      	cmp	r3, #4
 8004868:	f200 80b2 	bhi.w	80049d0 <FreqSweepMenuInputHandler+0x178>
 800486c:	a201      	add	r2, pc, #4	; (adr r2, 8004874 <FreqSweepMenuInputHandler+0x1c>)
 800486e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004872:	bf00      	nop
 8004874:	08004889 	.word	0x08004889
 8004878:	080048a3 	.word	0x080048a3
 800487c:	080049c1 	.word	0x080049c1
 8004880:	080049c9 	.word	0x080049c9
 8004884:	080048dd 	.word	0x080048dd
			#ifdef EVENT_MENU_DEBUG
				printf("evSweepEnable captured\n");
			#endif

			// toggle enable/disable
			SWEEP_TIMER->DIER 	^= TIM_DIER_UIE;
 8004888:	4b56      	ldr	r3, [pc, #344]	; (80049e4 <FreqSweepMenuInputHandler+0x18c>)
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	4a55      	ldr	r2, [pc, #340]	; (80049e4 <FreqSweepMenuInputHandler+0x18c>)
 800488e:	f083 0301 	eor.w	r3, r3, #1
 8004892:	60d3      	str	r3, [r2, #12]
			SWEEP_TIMER->CR1	^= TIM_CR1_CEN;
 8004894:	4b53      	ldr	r3, [pc, #332]	; (80049e4 <FreqSweepMenuInputHandler+0x18c>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a52      	ldr	r2, [pc, #328]	; (80049e4 <FreqSweepMenuInputHandler+0x18c>)
 800489a:	f083 0301 	eor.w	r3, r3, #1
 800489e:	6013      	str	r3, [r2, #0]
			break;
 80048a0:	e097      	b.n	80049d2 <FreqSweepMenuInputHandler+0x17a>
			#ifdef EVENT_MENU_DEBUG
				printf("evSweepMode captured\n");
			#endif

			// flip between 0:Upcounter and 1:Downcounter
			active_sweep_mode ^= 1U;
 80048a2:	4b51      	ldr	r3, [pc, #324]	; (80049e8 <FreqSweepMenuInputHandler+0x190>)
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	f083 0301 	eor.w	r3, r3, #1
 80048aa:	b2da      	uxtb	r2, r3
 80048ac:	4b4e      	ldr	r3, [pc, #312]	; (80049e8 <FreqSweepMenuInputHandler+0x190>)
 80048ae:	701a      	strb	r2, [r3, #0]

			switch(active_sweep_mode)
 80048b0:	4b4d      	ldr	r3, [pc, #308]	; (80049e8 <FreqSweepMenuInputHandler+0x190>)
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d004      	beq.n	80048c2 <FreqSweepMenuInputHandler+0x6a>
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d008      	beq.n	80048ce <FreqSweepMenuInputHandler+0x76>
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d003      	beq.n	80048c8 <FreqSweepMenuInputHandler+0x70>
 80048c0:	e006      	b.n	80048d0 <FreqSweepMenuInputHandler+0x78>
			{
				case SWEEP_MODE_DOWN:
					FS_SetSweepModeDown();
 80048c2:	f001 f82d 	bl	8005920 <FS_SetSweepModeDown>
					break;
 80048c6:	e003      	b.n	80048d0 <FreqSweepMenuInputHandler+0x78>

				case SWEEP_MODE_UP:
					FS_SetSweepModeUp();
 80048c8:	f001 f858 	bl	800597c <FS_SetSweepModeUp>
					break;
 80048cc:	e000      	b.n	80048d0 <FreqSweepMenuInputHandler+0x78>

				case SWEEP_MODE_BIDIR:	// not used
					//SWEEP_TIMER->CR1 |= (TIM_CR1_CMS_0);
					break;
 80048ce:	bf00      	nop
			}
			// switch(active_sweep_mode)
			// TODO
			FS_SetEncoderControlMode(theCurrentEncoderSweepFunction);
 80048d0:	4b46      	ldr	r3, [pc, #280]	; (80049ec <FreqSweepMenuInputHandler+0x194>)
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	4618      	mov	r0, r3
 80048d6:	f001 f879 	bl	80059cc <FS_SetEncoderControlMode>

			break;
 80048da:	e07a      	b.n	80049d2 <FreqSweepMenuInputHandler+0x17a>

			#ifdef EVENT_MENU_DEBUG
				printf("evEncoderSweep captured\n");
			#endif

			switch(theCurrentEncoderSweepFunction)
 80048dc:	4b43      	ldr	r3, [pc, #268]	; (80049ec <FreqSweepMenuInputHandler+0x194>)
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d002      	beq.n	80048ea <FreqSweepMenuInputHandler+0x92>
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d00b      	beq.n	8004900 <FreqSweepMenuInputHandler+0xa8>
					break;

			}
			// switch(theCurrentEncoderSweepFunction)

			break;
 80048e8:	e073      	b.n	80049d2 <FreqSweepMenuInputHandler+0x17a>
					FS_SetSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 80048ea:	2000      	movs	r0, #0
 80048ec:	f001 f8cc 	bl	8005a88 <FS_SetSweepTimerAutoReloadForEncoderControl>
					calculated_sweep_in_hertz = FS_GetCalculatedSweepFrequencyInHertz();
 80048f0:	f001 f906 	bl	8005b00 <FS_GetCalculatedSweepFrequencyInHertz>
 80048f4:	eef0 7a40 	vmov.f32	s15, s0
 80048f8:	4b3d      	ldr	r3, [pc, #244]	; (80049f0 <FreqSweepMenuInputHandler+0x198>)
 80048fa:	edc3 7a00 	vstr	s15, [r3]
					break;
 80048fe:	e05e      	b.n	80049be <FreqSweepMenuInputHandler+0x166>
					switch(active_sweep_mode)
 8004900:	4b39      	ldr	r3, [pc, #228]	; (80049e8 <FreqSweepMenuInputHandler+0x190>)
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d002      	beq.n	800490e <FreqSweepMenuInputHandler+0xb6>
 8004908:	2b01      	cmp	r3, #1
 800490a:	d02a      	beq.n	8004962 <FreqSweepMenuInputHandler+0x10a>
							break;
 800490c:	e056      	b.n	80049bc <FreqSweepMenuInputHandler+0x164>
							if(ENCODER_TIMER->CNT < MIN_OUTPUT_ARR)
 800490e:	4b39      	ldr	r3, [pc, #228]	; (80049f4 <FreqSweepMenuInputHandler+0x19c>)
 8004910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004912:	2b0c      	cmp	r3, #12
 8004914:	d803      	bhi.n	800491e <FreqSweepMenuInputHandler+0xc6>
								ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 8004916:	4b37      	ldr	r3, [pc, #220]	; (80049f4 <FreqSweepMenuInputHandler+0x19c>)
 8004918:	220d      	movs	r2, #13
 800491a:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 800491c:	e04e      	b.n	80049bc <FreqSweepMenuInputHandler+0x164>
							else if (ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 800491e:	4b35      	ldr	r3, [pc, #212]	; (80049f4 <FreqSweepMenuInputHandler+0x19c>)
 8004920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004922:	ee07 3a90 	vmov	s15, r3
 8004926:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800492a:	4b33      	ldr	r3, [pc, #204]	; (80049f8 <FreqSweepMenuInputHandler+0x1a0>)
 800492c:	edd3 7a00 	vldr	s15, [r3]
 8004930:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004938:	dd09      	ble.n	800494e <FreqSweepMenuInputHandler+0xf6>
								ENCODER_TIMER->CNT = sweep_upper_bounds_longest_output_arr;
 800493a:	4b2f      	ldr	r3, [pc, #188]	; (80049f8 <FreqSweepMenuInputHandler+0x1a0>)
 800493c:	edd3 7a00 	vldr	s15, [r3]
 8004940:	4b2c      	ldr	r3, [pc, #176]	; (80049f4 <FreqSweepMenuInputHandler+0x19c>)
 8004942:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004946:	ee17 2a90 	vmov	r2, s15
 800494a:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 800494c:	e036      	b.n	80049bc <FreqSweepMenuInputHandler+0x164>
								sweep_lower_bounds_shortest_output_arr = ENCODER_TIMER->CNT;
 800494e:	4b29      	ldr	r3, [pc, #164]	; (80049f4 <FreqSweepMenuInputHandler+0x19c>)
 8004950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004952:	ee07 3a90 	vmov	s15, r3
 8004956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800495a:	4b28      	ldr	r3, [pc, #160]	; (80049fc <FreqSweepMenuInputHandler+0x1a4>)
 800495c:	edc3 7a00 	vstr	s15, [r3]
							break;
 8004960:	e02c      	b.n	80049bc <FreqSweepMenuInputHandler+0x164>
							if(ENCODER_TIMER->CNT >= MAX_OUTPUT_ARR)
 8004962:	4b24      	ldr	r3, [pc, #144]	; (80049f4 <FreqSweepMenuInputHandler+0x19c>)
 8004964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004966:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800496a:	4293      	cmp	r3, r2
 800496c:	d904      	bls.n	8004978 <FreqSweepMenuInputHandler+0x120>
								ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 800496e:	4b21      	ldr	r3, [pc, #132]	; (80049f4 <FreqSweepMenuInputHandler+0x19c>)
 8004970:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004974:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8004976:	e020      	b.n	80049ba <FreqSweepMenuInputHandler+0x162>
							else if (ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 8004978:	4b1e      	ldr	r3, [pc, #120]	; (80049f4 <FreqSweepMenuInputHandler+0x19c>)
 800497a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497c:	ee07 3a90 	vmov	s15, r3
 8004980:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004984:	4b1d      	ldr	r3, [pc, #116]	; (80049fc <FreqSweepMenuInputHandler+0x1a4>)
 8004986:	edd3 7a00 	vldr	s15, [r3]
 800498a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800498e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004992:	d509      	bpl.n	80049a8 <FreqSweepMenuInputHandler+0x150>
								ENCODER_TIMER->CNT = sweep_lower_bounds_shortest_output_arr;
 8004994:	4b19      	ldr	r3, [pc, #100]	; (80049fc <FreqSweepMenuInputHandler+0x1a4>)
 8004996:	edd3 7a00 	vldr	s15, [r3]
 800499a:	4b16      	ldr	r3, [pc, #88]	; (80049f4 <FreqSweepMenuInputHandler+0x19c>)
 800499c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049a0:	ee17 2a90 	vmov	r2, s15
 80049a4:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 80049a6:	e008      	b.n	80049ba <FreqSweepMenuInputHandler+0x162>
								sweep_upper_bounds_longest_output_arr = ENCODER_TIMER->CNT;
 80049a8:	4b12      	ldr	r3, [pc, #72]	; (80049f4 <FreqSweepMenuInputHandler+0x19c>)
 80049aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ac:	ee07 3a90 	vmov	s15, r3
 80049b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049b4:	4b10      	ldr	r3, [pc, #64]	; (80049f8 <FreqSweepMenuInputHandler+0x1a0>)
 80049b6:	edc3 7a00 	vstr	s15, [r3]
							break;
 80049ba:	bf00      	nop
					break;
 80049bc:	bf00      	nop
			break;
 80049be:	e008      	b.n	80049d2 <FreqSweepMenuInputHandler+0x17a>

		// set sweep speed button
		case evSweepSpeedBtn:
			FS_SetEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 80049c0:	2000      	movs	r0, #0
 80049c2:	f001 f803 	bl	80059cc <FS_SetEncoderControlMode>

			break;
 80049c6:	e004      	b.n	80049d2 <FreqSweepMenuInputHandler+0x17a>

		// set sweep limit button
		case evSweepLimitBtn:
			FS_SetEncoderControlMode(ENCODER_SWEEP_LIMIT_FUNCTION);
 80049c8:	2001      	movs	r0, #1
 80049ca:	f000 ffff 	bl	80059cc <FS_SetEncoderControlMode>
					break;
			}
			*/
			// switch(active_sweep_mode)

			break;
 80049ce:	e000      	b.n	80049d2 <FreqSweepMenuInputHandler+0x17a>

		default:
			break;
 80049d0:	bf00      	nop
	}
	// switch(pEvent)


	// stay in this state
	eNewEvent = evIdle;
 80049d2:	4b0b      	ldr	r3, [pc, #44]	; (8004a00 <FreqSweepMenuInputHandler+0x1a8>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 80049d8:	230d      	movs	r3, #13
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3708      	adds	r7, #8
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	40000c00 	.word	0x40000c00
 80049e8:	20001e58 	.word	0x20001e58
 80049ec:	20001e59 	.word	0x20001e59
 80049f0:	2000226c 	.word	0x2000226c
 80049f4:	40012c00 	.word	0x40012c00
 80049f8:	20000124 	.word	0x20000124
 80049fc:	20000120 	.word	0x20000120
 8004a00:	20001e57 	.word	0x20001e57

08004a04 <FreqSweepMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuExitHandler()
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqSweepMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004a08:	f7fc fdb0 	bl	800156c <DM_RefreshScreen>

	// disable sweep timer and interrupts
	SWEEP_TIMER->DIER 	&= ~(TIM_DIER_UIE);
 8004a0c:	4b0a      	ldr	r3, [pc, #40]	; (8004a38 <FreqSweepMenuExitHandler+0x34>)
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	4a09      	ldr	r2, [pc, #36]	; (8004a38 <FreqSweepMenuExitHandler+0x34>)
 8004a12:	f023 0301 	bic.w	r3, r3, #1
 8004a16:	60d3      	str	r3, [r2, #12]
	SWEEP_TIMER->CR1 	&= ~(TIM_CR1_CEN);
 8004a18:	4b07      	ldr	r3, [pc, #28]	; (8004a38 <FreqSweepMenuExitHandler+0x34>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a06      	ldr	r2, [pc, #24]	; (8004a38 <FreqSweepMenuExitHandler+0x34>)
 8004a1e:	f023 0301 	bic.w	r3, r3, #1
 8004a22:	6013      	str	r3, [r2, #0]



	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8004a24:	4b05      	ldr	r3, [pc, #20]	; (8004a3c <FreqSweepMenuExitHandler+0x38>)
 8004a26:	2201      	movs	r2, #1
 8004a28:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004a2a:	4b05      	ldr	r3, [pc, #20]	; (8004a40 <FreqSweepMenuExitHandler+0x3c>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004a30:	230a      	movs	r3, #10
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	40000c00 	.word	0x40000c00
 8004a3c:	20001e5a 	.word	0x20001e5a
 8004a40:	20001e57 	.word	0x20001e57

08004a44 <FreqMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuEntryHandler()
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqMainMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004a48:	f7fc fd90 	bl	800156c <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8004a4c:	4b04      	ldr	r3, [pc, #16]	; (8004a60 <FreqMainMenuEntryHandler+0x1c>)
 8004a4e:	2201      	movs	r2, #1
 8004a50:	701a      	strb	r2, [r3, #0]

	// stay in this state
	eNewEvent = evIdle;
 8004a52:	4b04      	ldr	r3, [pc, #16]	; (8004a64 <FreqMainMenuEntryHandler+0x20>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004a58:	230a      	movs	r3, #10
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	20001e5a 	.word	0x20001e5a
 8004a64:	20001e57 	.word	0x20001e57

08004a68 <FreqMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuExitHandler()
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	af00      	add	r7, sp, #0
		printf("FreqMainMenuExitHandler Event captured\n");
	#endif


	// disable the menu
	eNextFreqMenuStatus = DISABLE_FREQ_MENU;
 8004a6c:	4b07      	ldr	r3, [pc, #28]	; (8004a8c <FreqMainMenuExitHandler+0x24>)
 8004a6e:	2200      	movs	r2, #0
 8004a70:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8004a72:	4b07      	ldr	r3, [pc, #28]	; (8004a90 <FreqMainMenuExitHandler+0x28>)
 8004a74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a78:	62da      	str	r2, [r3, #44]	; 0x2c

	DM_RefreshScreen();
 8004a7a:	f7fc fd77 	bl	800156c <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 8004a7e:	4b05      	ldr	r3, [pc, #20]	; (8004a94 <FreqMainMenuExitHandler+0x2c>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004a84:	2301      	movs	r3, #1
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	20001e5a 	.word	0x20001e5a
 8004a90:	40012c00 	.word	0x40012c00
 8004a94:	20001e57 	.word	0x20001e57

08004a98 <FreqPresetMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuEntryHandler()
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPresetMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004a9e:	f7fc fd65 	bl	800156c <DM_RefreshScreen>
	FreqO_ResetLastEncoderValue();
 8004aa2:	f000 ff31 	bl	8005908 <FreqO_ResetLastEncoderValue>

	eNextFreqMenuStatus = ENABLE_FREQ_PRESET_MENU;
 8004aa6:	4b0e      	ldr	r3, [pc, #56]	; (8004ae0 <FreqPresetMenuEntryHandler+0x48>)
 8004aa8:	2202      	movs	r2, #2
 8004aaa:	701a      	strb	r2, [r3, #0]

	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8004aac:	f000 fede 	bl	800586c <FreqO_GetFPresetObject>
 8004ab0:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d008      	beq.n	8004aca <FreqPresetMenuEntryHandler+0x32>
	{
		// set rotary encoder limit to full scale and set centre starting position
		ENCODER_TIMER->CNT = 32768;
 8004ab8:	4b0a      	ldr	r3, [pc, #40]	; (8004ae4 <FreqPresetMenuEntryHandler+0x4c>)
 8004aba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004abe:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = 65535;
 8004ac0:	4b08      	ldr	r3, [pc, #32]	; (8004ae4 <FreqPresetMenuEntryHandler+0x4c>)
 8004ac2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ac6:	62da      	str	r2, [r3, #44]	; 0x2c
 8004ac8:	e002      	b.n	8004ad0 <FreqPresetMenuEntryHandler+0x38>
	}
	else
	{
		DM_SetErrorDebugMsg("_FreqPresetMenuEntryHandler: pFreqPresetTmp null pointer");
 8004aca:	4807      	ldr	r0, [pc, #28]	; (8004ae8 <FreqPresetMenuEntryHandler+0x50>)
 8004acc:	f7fc fd94 	bl	80015f8 <DM_SetErrorDebugMsg>
	}


	// stay in this state
	eNewEvent = evIdle;
 8004ad0:	4b06      	ldr	r3, [pc, #24]	; (8004aec <FreqPresetMenuEntryHandler+0x54>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8004ad6:	230b      	movs	r3, #11
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3708      	adds	r7, #8
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	20001e5a 	.word	0x20001e5a
 8004ae4:	40012c00 	.word	0x40012c00
 8004ae8:	08014be8 	.word	0x08014be8
 8004aec:	20001e57 	.word	0x20001e57

08004af0 <FreqPresetMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuInputHandler()
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPresetMenuInputHandler Event captured\n");
	#endif

	FreqO_MapEncoderPositionCoarse(SM_GetEncoderValue(ENCODER_NORMAL));
 8004af4:	2000      	movs	r0, #0
 8004af6:	f002 f879 	bl	8006bec <SM_GetEncoderValue>
 8004afa:	4603      	mov	r3, r0
 8004afc:	4618      	mov	r0, r3
 8004afe:	f000 fd91 	bl	8005624 <FreqO_MapEncoderPositionCoarse>

	// stay in this state
	eNewEvent = evIdle;
 8004b02:	4b03      	ldr	r3, [pc, #12]	; (8004b10 <FreqPresetMenuInputHandler+0x20>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8004b08:	230b      	movs	r3, #11
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	20001e57 	.word	0x20001e57

08004b14 <FreqPresetMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuExitHandler()
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPresetMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004b18:	f7fc fd28 	bl	800156c <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8004b1c:	4b04      	ldr	r3, [pc, #16]	; (8004b30 <FreqPresetMenuExitHandler+0x1c>)
 8004b1e:	2201      	movs	r2, #1
 8004b20:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004b22:	4b04      	ldr	r3, [pc, #16]	; (8004b34 <FreqPresetMenuExitHandler+0x20>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004b28:	230a      	movs	r3, #10
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	20001e5a 	.word	0x20001e5a
 8004b34:	20001e57 	.word	0x20001e57

08004b38 <FreqAdjustMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuEntryHandler()
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqAdjustMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004b3c:	f7fc fd16 	bl	800156c <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_ADJUST_MENU;
 8004b40:	4b08      	ldr	r3, [pc, #32]	; (8004b64 <FreqAdjustMenuEntryHandler+0x2c>)
 8004b42:	2203      	movs	r2, #3
 8004b44:	701a      	strb	r2, [r3, #0]

	// set rotary encoder limit to full scale and set OUTPUT_TIMER "TOP" starting position
	ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8004b46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004b4a:	4a07      	ldr	r2, [pc, #28]	; (8004b68 <FreqAdjustMenuEntryHandler+0x30>)
 8004b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4e:	6253      	str	r3, [r2, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8004b50:	4b05      	ldr	r3, [pc, #20]	; (8004b68 <FreqAdjustMenuEntryHandler+0x30>)
 8004b52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b56:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 8004b58:	4b04      	ldr	r3, [pc, #16]	; (8004b6c <FreqAdjustMenuEntryHandler+0x34>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8004b5e:	230c      	movs	r3, #12
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	20001e5a 	.word	0x20001e5a
 8004b68:	40012c00 	.word	0x40012c00
 8004b6c:	20001e57 	.word	0x20001e57

08004b70 <FreqAdjustMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuInputHandler()
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqAdjustMenuInputHandler Event captured\n");
	#endif

	FreqO_AdjustFreq();
 8004b74:	f000 fe26 	bl	80057c4 <FreqO_AdjustFreq>

	// stay in this state
	eNewEvent = evIdle;
 8004b78:	4b02      	ldr	r3, [pc, #8]	; (8004b84 <FreqAdjustMenuInputHandler+0x14>)
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8004b7e:	230c      	movs	r3, #12
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	20001e57 	.word	0x20001e57

08004b88 <FreqAdjustMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuExitHandler()
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqAdjustMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004b8c:	f7fc fcee 	bl	800156c <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8004b90:	4b04      	ldr	r3, [pc, #16]	; (8004ba4 <FreqAdjustMenuExitHandler+0x1c>)
 8004b92:	2201      	movs	r2, #1
 8004b94:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004b96:	4b04      	ldr	r3, [pc, #16]	; (8004ba8 <FreqAdjustMenuExitHandler+0x20>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004b9c:	230a      	movs	r3, #10
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	20001e5a 	.word	0x20001e5a
 8004ba8:	20001e57 	.word	0x20001e57

08004bac <FreqPrescalerMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPrescalerMenuEntryHandler()
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPrescalerMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004bb0:	f7fc fcdc 	bl	800156c <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_PRESCALER_MENU;
 8004bb4:	4b08      	ldr	r3, [pc, #32]	; (8004bd8 <FreqPrescalerMenuEntryHandler+0x2c>)
 8004bb6:	2205      	movs	r2, #5
 8004bb8:	701a      	strb	r2, [r3, #0]

	// set rotary encoder limit to full scale and midway starting position
	ENCODER_TIMER->CNT = 32768;
 8004bba:	4b08      	ldr	r3, [pc, #32]	; (8004bdc <FreqPrescalerMenuEntryHandler+0x30>)
 8004bbc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004bc0:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8004bc2:	4b06      	ldr	r3, [pc, #24]	; (8004bdc <FreqPrescalerMenuEntryHandler+0x30>)
 8004bc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004bc8:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 8004bca:	4b05      	ldr	r3, [pc, #20]	; (8004be0 <FreqPrescalerMenuEntryHandler+0x34>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	701a      	strb	r2, [r3, #0]
	return Freq_Prescaler_Menu_State;
 8004bd0:	230e      	movs	r3, #14
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	20001e5a 	.word	0x20001e5a
 8004bdc:	40012c00 	.word	0x40012c00
 8004be0:	20001e57 	.word	0x20001e57

08004be4 <FreqPrescalerMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPrescalerMenuInputHandler()
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPrescalerMenuInputHandler Event captured\n");
	#endif

	FreqO_AdjustPrescaler();
 8004be8:	f000 fe18 	bl	800581c <FreqO_AdjustPrescaler>

	// stay in this state
	eNewEvent = evIdle;
 8004bec:	4b02      	ldr	r3, [pc, #8]	; (8004bf8 <FreqPrescalerMenuInputHandler+0x14>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	701a      	strb	r2, [r3, #0]
	return Freq_Prescaler_Menu_State;
 8004bf2:	230e      	movs	r3, #14
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	20001e57 	.word	0x20001e57

08004bfc <FreqPrescalerMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPrescalerMenuExitHandler()
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPrescalerMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004c00:	f7fc fcb4 	bl	800156c <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8004c04:	4b04      	ldr	r3, [pc, #16]	; (8004c18 <FreqPrescalerMenuExitHandler+0x1c>)
 8004c06:	2201      	movs	r2, #1
 8004c08:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004c0a:	4b04      	ldr	r3, [pc, #16]	; (8004c1c <FreqPrescalerMenuExitHandler+0x20>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004c10:	230a      	movs	r3, #10
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	20001e5a 	.word	0x20001e5a
 8004c1c:	20001e57 	.word	0x20001e57

08004c20 <FreqMenu_getStatus>:
 *	@param None
 *	@retval None
 *
 */
eFreqMenu_Status FreqMenu_getStatus()
{
 8004c20:	b480      	push	{r7}
 8004c22:	af00      	add	r7, sp, #0
	return eNextFreqMenuStatus;
 8004c24:	4b03      	ldr	r3, [pc, #12]	; (8004c34 <FreqMenu_getStatus+0x14>)
 8004c26:	781b      	ldrb	r3, [r3, #0]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	20001e5a 	.word	0x20001e5a

08004c38 <FuncMenu_getStatus>:
eFuncMenu_Status eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;



eFuncMenu_Status FuncMenu_getStatus()
{
 8004c38:	b480      	push	{r7}
 8004c3a:	af00      	add	r7, sp, #0
	return eNextFuncMenuStatus;
 8004c3c:	4b03      	ldr	r3, [pc, #12]	; (8004c4c <FuncMenu_getStatus+0x14>)
 8004c3e:	781b      	ldrb	r3, [r3, #0]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	20001e5b 	.word	0x20001e5b

08004c50 <FuncMainMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuEntryHandler(void)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncMainMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004c54:	f7fc fc8a 	bl	800156c <DM_RefreshScreen>

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8004c58:	4b04      	ldr	r3, [pc, #16]	; (8004c6c <FuncMainMenuEntryHandler+0x1c>)
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	701a      	strb	r2, [r3, #0]

	eNewEvent = evIdle;
 8004c5e:	4b04      	ldr	r3, [pc, #16]	; (8004c70 <FuncMainMenuEntryHandler+0x20>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8004c64:	2303      	movs	r3, #3
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	20001e5b 	.word	0x20001e5b
 8004c70:	20001e57 	.word	0x20001e57

08004c74 <FuncMainMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuExitHandler()
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncMainMenuExitHandler Event captured\n");
	#endif

	eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;
 8004c78:	4b06      	ldr	r3, [pc, #24]	; (8004c94 <FuncMainMenuExitHandler+0x20>)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	701a      	strb	r2, [r3, #0]

	// reset the encoder range
	ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8004c7e:	2002      	movs	r0, #2
 8004c80:	f000 f9f6 	bl	8005070 <ToplevelMenu_setStatus>

	DM_RefreshScreen();
 8004c84:	f7fc fc72 	bl	800156c <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 8004c88:	4b03      	ldr	r3, [pc, #12]	; (8004c98 <FuncMainMenuExitHandler+0x24>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004c8e:	2301      	movs	r3, #1
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	20001e5b 	.word	0x20001e5b
 8004c98:	20001e57 	.word	0x20001e57

08004c9c <FuncSignalMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuEntryHandler(void)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncSignalMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004ca0:	f7fc fc64 	bl	800156c <DM_RefreshScreen>
	FuncO_ResetLastEncoderValue();
 8004ca4:	f000 ff5a 	bl	8005b5c <FuncO_ResetLastEncoderValue>

	eNextFuncMenuStatus = 	ENABLE_FUNC_SIGNAL_MENU;
 8004ca8:	4b08      	ldr	r3, [pc, #32]	; (8004ccc <FuncSignalMenuEntryHandler+0x30>)
 8004caa:	2202      	movs	r2, #2
 8004cac:	701a      	strb	r2, [r3, #0]
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
	}
*/

	ENCODER_TIMER->CNT = 32768;
 8004cae:	4b08      	ldr	r3, [pc, #32]	; (8004cd0 <FuncSignalMenuEntryHandler+0x34>)
 8004cb0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004cb4:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8004cb6:	4b06      	ldr	r3, [pc, #24]	; (8004cd0 <FuncSignalMenuEntryHandler+0x34>)
 8004cb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004cbc:	62da      	str	r2, [r3, #44]	; 0x2c

	eNewEvent = evIdle;
 8004cbe:	4b05      	ldr	r3, [pc, #20]	; (8004cd4 <FuncSignalMenuEntryHandler+0x38>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 8004cc4:	2304      	movs	r3, #4
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	20001e5b 	.word	0x20001e5b
 8004cd0:	40012c00 	.word	0x40012c00
 8004cd4:	20001e57 	.word	0x20001e57

08004cd8 <FuncSignalMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuInputHandler(void)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncSignalMenuInputHandler Event captured\n");
	#endif


	FuncO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 8004cdc:	2000      	movs	r0, #0
 8004cde:	f001 ff85 	bl	8006bec <SM_GetEncoderValue>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f000 ff45 	bl	8005b74 <FuncO_MapEncoderPositionToSignalOutput>


	eNewEvent = evIdle;
 8004cea:	4b03      	ldr	r3, [pc, #12]	; (8004cf8 <FuncSignalMenuInputHandler+0x20>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 8004cf0:	2304      	movs	r3, #4
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	20001e57 	.word	0x20001e57

08004cfc <FuncSignalMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuExitHandler()
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	af00      	add	r7, sp, #0
		printf("FuncSignalMenuExitHandler Event captured\n");
	#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8004d00:	4b06      	ldr	r3, [pc, #24]	; (8004d1c <FuncSignalMenuExitHandler+0x20>)
 8004d02:	2201      	movs	r2, #1
 8004d04:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

//	ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8004d06:	f7fc fc31 	bl	800156c <DM_RefreshScreen>
	SM_ResetFuncPwmDutyMode();
 8004d0a:	f002 f813 	bl	8006d34 <SM_ResetFuncPwmDutyMode>
	eNewEvent = evIdle;
 8004d0e:	4b04      	ldr	r3, [pc, #16]	; (8004d20 <FuncSignalMenuExitHandler+0x24>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8004d14:	2303      	movs	r3, #3
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	20001e5b 	.word	0x20001e5b
 8004d20:	20001e57 	.word	0x20001e57

08004d24 <FuncAuxMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuEntryHandler(void)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncAuxMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004d28:	f7fc fc20 	bl	800156c <DM_RefreshScreen>
	FuncO_ResetLastEncoderValue();
 8004d2c:	f000 ff16 	bl	8005b5c <FuncO_ResetLastEncoderValue>

	eNextFuncMenuStatus = 	ENABLE_FUNC_Aux_MENU;
 8004d30:	4b08      	ldr	r3, [pc, #32]	; (8004d54 <FuncAuxMenuEntryHandler+0x30>)
 8004d32:	2203      	movs	r2, #3
 8004d34:	701a      	strb	r2, [r3, #0]
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
	}
	*/
	ENCODER_TIMER->CNT = 32768;
 8004d36:	4b08      	ldr	r3, [pc, #32]	; (8004d58 <FuncAuxMenuEntryHandler+0x34>)
 8004d38:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004d3c:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8004d3e:	4b06      	ldr	r3, [pc, #24]	; (8004d58 <FuncAuxMenuEntryHandler+0x34>)
 8004d40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d44:	62da      	str	r2, [r3, #44]	; 0x2c

	eNewEvent = evIdle;
 8004d46:	4b05      	ldr	r3, [pc, #20]	; (8004d5c <FuncAuxMenuEntryHandler+0x38>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 8004d4c:	2305      	movs	r3, #5
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	20001e5b 	.word	0x20001e5b
 8004d58:	40012c00 	.word	0x40012c00
 8004d5c:	20001e57 	.word	0x20001e57

08004d60 <FuncAuxMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuInputHandler(void)
{
 8004d60:	b590      	push	{r4, r7, lr}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncAuxMenuInputHandler Event captured\n");
	#endif

	// PWM ADJUST
	if(SM_IsFuncPwmDutyMode())
 8004d66:	f001 ffc9 	bl	8006cfc <SM_IsFuncPwmDutyMode>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d01a      	beq.n	8004da6 <FuncAuxMenuInputHandler+0x46>
	{
		uint16_t enc_value = SM_GetEncoderValue(ENCODER_NORMAL);
 8004d70:	2000      	movs	r0, #0
 8004d72:	f001 ff3b 	bl	8006bec <SM_GetEncoderValue>
 8004d76:	4603      	mov	r3, r0
 8004d78:	80fb      	strh	r3, [r7, #6]
		PWM_AUX_OUT_TIM->CCR1 = (pow(enc_value, 2));
 8004d7a:	88fb      	ldrh	r3, [r7, #6]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7fb fbe9 	bl	8000554 <__aeabi_ui2d>
 8004d82:	4603      	mov	r3, r0
 8004d84:	460c      	mov	r4, r1
 8004d86:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8004dc8 <FuncAuxMenuInputHandler+0x68>
 8004d8a:	ec44 3b10 	vmov	d0, r3, r4
 8004d8e:	f00e fa0b 	bl	80131a8 <pow>
 8004d92:	ec53 2b10 	vmov	r2, r3, d0
 8004d96:	4c0e      	ldr	r4, [pc, #56]	; (8004dd0 <FuncAuxMenuInputHandler+0x70>)
 8004d98:	4610      	mov	r0, r2
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	f7fb ff2c 	bl	8000bf8 <__aeabi_d2uiz>
 8004da0:	4603      	mov	r3, r0
 8004da2:	6363      	str	r3, [r4, #52]	; 0x34
 8004da4:	e006      	b.n	8004db4 <FuncAuxMenuInputHandler+0x54>
		//BO_SetPwmSignalOffsetForDuty(BO_GetOutputBias() + SM_GetEncoderValue(ENCODER_NORMAL));

	}
	else
	{
		FuncO_MapEncoderPositionToAuxOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 8004da6:	2000      	movs	r0, #0
 8004da8:	f001 ff20 	bl	8006bec <SM_GetEncoderValue>
 8004dac:	4603      	mov	r3, r0
 8004dae:	4618      	mov	r0, r3
 8004db0:	f000 ff1a 	bl	8005be8 <FuncO_MapEncoderPositionToAuxOutput>
	}

	eNewEvent = evIdle;
 8004db4:	4b07      	ldr	r3, [pc, #28]	; (8004dd4 <FuncAuxMenuInputHandler+0x74>)
 8004db6:	2200      	movs	r2, #0
 8004db8:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 8004dba:	2305      	movs	r3, #5
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd90      	pop	{r4, r7, pc}
 8004dc4:	f3af 8000 	nop.w
 8004dc8:	00000000 	.word	0x00000000
 8004dcc:	40000000 	.word	0x40000000
 8004dd0:	40000400 	.word	0x40000400
 8004dd4:	20001e57 	.word	0x20001e57

08004dd8 <FuncAuxToggleDutyMode>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FuncAuxToggleDutyMode()
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	af00      	add	r7, sp, #0
	SM_ToggleFuncPwmDutyMode();
 8004ddc:	f001 ff9a 	bl	8006d14 <SM_ToggleFuncPwmDutyMode>
	ENCODER_TIMER->ARR = 16384;
 8004de0:	4b04      	ldr	r3, [pc, #16]	; (8004df4 <FuncAuxToggleDutyMode+0x1c>)
 8004de2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004de6:	62da      	str	r2, [r3, #44]	; 0x2c
	eNewEvent = evIdle;
 8004de8:	4b03      	ldr	r3, [pc, #12]	; (8004df8 <FuncAuxToggleDutyMode+0x20>)
 8004dea:	2200      	movs	r2, #0
 8004dec:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 8004dee:	2305      	movs	r3, #5
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	40012c00 	.word	0x40012c00
 8004df8:	20001e57 	.word	0x20001e57

08004dfc <FuncAuxMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuExitHandler()
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	af00      	add	r7, sp, #0
		printf("FuncAuxMenuExitHandler Event captured\n");
	#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8004e00:	4b06      	ldr	r3, [pc, #24]	; (8004e1c <FuncAuxMenuExitHandler+0x20>)
 8004e02:	2201      	movs	r2, #1
 8004e04:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;
	SM_ResetFuncPwmDutyMode();
 8004e06:	f001 ff95 	bl	8006d34 <SM_ResetFuncPwmDutyMode>
	DM_RefreshScreen();
 8004e0a:	f7fc fbaf 	bl	800156c <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004e0e:	4b04      	ldr	r3, [pc, #16]	; (8004e20 <FuncAuxMenuExitHandler+0x24>)
 8004e10:	2200      	movs	r2, #0
 8004e12:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8004e14:	2303      	movs	r3, #3
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	20001e5b 	.word	0x20001e5b
 8004e20:	20001e57 	.word	0x20001e57

08004e24 <GainMenu_getStatus>:
#include <stdio.h>

eGainMenu_Status eNextGainMenuStatus = 	DISABLE_GAIN_MENU;

eGainMenu_Status GainMenu_getStatus()
{
 8004e24:	b480      	push	{r7}
 8004e26:	af00      	add	r7, sp, #0
	return eNextGainMenuStatus;
 8004e28:	4b03      	ldr	r3, [pc, #12]	; (8004e38 <GainMenu_getStatus+0x14>)
 8004e2a:	781b      	ldrb	r3, [r3, #0]
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	20001e5c 	.word	0x20001e5c

08004e3c <GainMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuEntryHandler()
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainMainMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004e40:	f7fc fb94 	bl	800156c <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8004e44:	4b04      	ldr	r3, [pc, #16]	; (8004e58 <GainMainMenuEntryHandler+0x1c>)
 8004e46:	2201      	movs	r2, #1
 8004e48:	701a      	strb	r2, [r3, #0]

	eNewEvent = evIdle;
 8004e4a:	4b04      	ldr	r3, [pc, #16]	; (8004e5c <GainMainMenuEntryHandler+0x20>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8004e50:	2306      	movs	r3, #6
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	20001e5c 	.word	0x20001e5c
 8004e5c:	20001e57 	.word	0x20001e57

08004e60 <GainMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuExitHandler()
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainMainMenuExitHandler Event captured\n");
	#endif

	eNextGainMenuStatus = DISABLE_GAIN_MENU;
 8004e64:	4b05      	ldr	r3, [pc, #20]	; (8004e7c <GainMainMenuExitHandler+0x1c>)
 8004e66:	2200      	movs	r2, #0
 8004e68:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004e6a:	f7fc fb7f 	bl	800156c <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 8004e6e:	4b04      	ldr	r3, [pc, #16]	; (8004e80 <GainMainMenuExitHandler+0x20>)
 8004e70:	2200      	movs	r2, #0
 8004e72:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004e74:	2301      	movs	r3, #1
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	20001e5c 	.word	0x20001e5c
 8004e80:	20001e57 	.word	0x20001e57

08004e84 <GainSignalMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuEntryHandler()
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainSignalMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004e8a:	f7fc fb6f 	bl	800156c <DM_RefreshScreen>
	GO_ResetLastEncoderValue();
 8004e8e:	f001 f8a3 	bl	8005fd8 <GO_ResetLastEncoderValue>
	VPP_ResetLastEncoderValue();
 8004e92:	f001 ff5b 	bl	8006d4c <VPP_ResetLastEncoderValue>

	eNextGainMenuStatus = ENABLE_GAIN_SIGNAL_MENU;
 8004e96:	4b10      	ldr	r3, [pc, #64]	; (8004ed8 <GainSignalMenuEntryHandler+0x54>)
 8004e98:	2202      	movs	r2, #2
 8004e9a:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 8004e9c:	2000      	movs	r0, #0
 8004e9e:	f001 fc29 	bl	80066f4 <SM_GetOutputChannel>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8004ea8:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d008      	beq.n	8004ec2 <GainSignalMenuEntryHandler+0x3e>
	{
		//ENCODER_TIMER->CNT = pTmpVppPreset->epos;
		//ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;

		// set to full range and mid starting position
		ENCODER_TIMER->CNT = 32768;
 8004eb0:	4b0a      	ldr	r3, [pc, #40]	; (8004edc <GainSignalMenuEntryHandler+0x58>)
 8004eb2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004eb6:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = 65535;
 8004eb8:	4b08      	ldr	r3, [pc, #32]	; (8004edc <GainSignalMenuEntryHandler+0x58>)
 8004eba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ebe:	62da      	str	r2, [r3, #44]	; 0x2c
 8004ec0:	e002      	b.n	8004ec8 <GainSignalMenuEntryHandler+0x44>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8004ec2:	4807      	ldr	r0, [pc, #28]	; (8004ee0 <GainSignalMenuEntryHandler+0x5c>)
 8004ec4:	f7fc fb98 	bl	80015f8 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8004ec8:	4b06      	ldr	r3, [pc, #24]	; (8004ee4 <GainSignalMenuEntryHandler+0x60>)
 8004eca:	2200      	movs	r2, #0
 8004ecc:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 8004ece:	2307      	movs	r3, #7
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3708      	adds	r7, #8
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	20001e5c 	.word	0x20001e5c
 8004edc:	40012c00 	.word	0x40012c00
 8004ee0:	08014c24 	.word	0x08014c24
 8004ee4:	20001e57 	.word	0x20001e57

08004ee8 <GainSignalMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuInputHandler(eSystemEvent pEvent)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	4603      	mov	r3, r0
 8004ef0:	71fb      	strb	r3, [r7, #7]
	#ifdef EVENT_MENU_DEBUG
		printf("GainSignalMenuInputHandler Event captured\n");
	#endif


	FunctionProfile_t *tmpFuncProfile = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile;
 8004ef2:	2000      	movs	r0, #0
 8004ef4:	f001 fbfe 	bl	80066f4 <SM_GetOutputChannel>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004efe:	60fb      	str	r3, [r7, #12]

	switch(pEvent)
 8004f00:	79fb      	ldrb	r3, [r7, #7]
 8004f02:	3b01      	subs	r3, #1
 8004f04:	2b04      	cmp	r3, #4
 8004f06:	d834      	bhi.n	8004f72 <GainSignalMenuInputHandler+0x8a>
 8004f08:	a201      	add	r2, pc, #4	; (adr r2, 8004f10 <GainSignalMenuInputHandler+0x28>)
 8004f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f0e:	bf00      	nop
 8004f10:	08004f53 	.word	0x08004f53
 8004f14:	08004f5b 	.word	0x08004f5b
 8004f18:	08004f63 	.word	0x08004f63
 8004f1c:	08004f6b 	.word	0x08004f6b
 8004f20:	08004f25 	.word	0x08004f25
	{
		case evEncoderSet:

			if(tmpFuncProfile)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d025      	beq.n	8004f76 <GainSignalMenuInputHandler+0x8e>
			{
				if(tmpFuncProfile->func == PWM_FUNC_MODE)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	2b06      	cmp	r3, #6
 8004f30:	d107      	bne.n	8004f42 <GainSignalMenuInputHandler+0x5a>
				{
					GO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_INVERSE));
 8004f32:	2001      	movs	r0, #1
 8004f34:	f001 fe5a 	bl	8006bec <SM_GetEncoderValue>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f001 f858 	bl	8005ff0 <GO_MapEncoderPositionToSignalOutput>
				else
				{
					VPP_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
				}
			}
			break;
 8004f40:	e019      	b.n	8004f76 <GainSignalMenuInputHandler+0x8e>
					VPP_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 8004f42:	2000      	movs	r0, #0
 8004f44:	f001 fe52 	bl	8006bec <SM_GetEncoderValue>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f002 f870 	bl	8007030 <VPP_MapEncoderPositionToSignalOutput>
			break;
 8004f50:	e011      	b.n	8004f76 <GainSignalMenuInputHandler+0x8e>

		case evBlueBtn:
			VPP_ApplyProfileToSignal(VPP18);
 8004f52:	2011      	movs	r0, #17
 8004f54:	f001 ff06 	bl	8006d64 <VPP_ApplyProfileToSignal>
			break;
 8004f58:	e00e      	b.n	8004f78 <GainSignalMenuInputHandler+0x90>

		case evGreenBtn:
			VPP_ApplyProfileToSignal(VPP33);
 8004f5a:	2020      	movs	r0, #32
 8004f5c:	f001 ff02 	bl	8006d64 <VPP_ApplyProfileToSignal>
			break;
 8004f60:	e00a      	b.n	8004f78 <GainSignalMenuInputHandler+0x90>

		case evYellowBtn:
			VPP_ApplyProfileToSignal(VPP50);
 8004f62:	2031      	movs	r0, #49	; 0x31
 8004f64:	f001 fefe 	bl	8006d64 <VPP_ApplyProfileToSignal>
			break;
 8004f68:	e006      	b.n	8004f78 <GainSignalMenuInputHandler+0x90>

		case evRedBtn:
			VPP_ApplyProfileToSignal(VPP90);
 8004f6a:	2059      	movs	r0, #89	; 0x59
 8004f6c:	f001 fefa 	bl	8006d64 <VPP_ApplyProfileToSignal>
			break;
 8004f70:	e002      	b.n	8004f78 <GainSignalMenuInputHandler+0x90>

		default:
			break;
 8004f72:	bf00      	nop
 8004f74:	e000      	b.n	8004f78 <GainSignalMenuInputHandler+0x90>
			break;
 8004f76:	bf00      	nop
	}

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_INVERSE));
	//

	eNewEvent = evIdle;
 8004f78:	4b03      	ldr	r3, [pc, #12]	; (8004f88 <GainSignalMenuInputHandler+0xa0>)
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 8004f7e:	2307      	movs	r3, #7
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	20001e57 	.word	0x20001e57

08004f8c <GainSignalMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuExitHandler()
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainSignalMenuExitHandler Event captured\n");
	#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8004f90:	4b05      	ldr	r3, [pc, #20]	; (8004fa8 <GainSignalMenuExitHandler+0x1c>)
 8004f92:	2201      	movs	r2, #1
 8004f94:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004f96:	f7fc fae9 	bl	800156c <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004f9a:	4b04      	ldr	r3, [pc, #16]	; (8004fac <GainSignalMenuExitHandler+0x20>)
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8004fa0:	2306      	movs	r3, #6
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	20001e5c 	.word	0x20001e5c
 8004fac:	20001e57 	.word	0x20001e57

08004fb0 <GainAuxMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuEntryHandler()
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainAuxMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004fb6:	f7fc fad9 	bl	800156c <DM_RefreshScreen>
	VPP_ResetLastEncoderValue();
 8004fba:	f001 fec7 	bl	8006d4c <VPP_ResetLastEncoderValue>

	eNextGainMenuStatus = ENABLE_GAIN_Aux_MENU;
 8004fbe:	4b10      	ldr	r3, [pc, #64]	; (8005000 <GainAuxMenuEntryHandler+0x50>)
 8004fc0:	2203      	movs	r2, #3
 8004fc2:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile;
 8004fc4:	2001      	movs	r0, #1
 8004fc6:	f001 fb95 	bl	80066f4 <SM_GetOutputChannel>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8004fd0:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d008      	beq.n	8004fea <GainAuxMenuEntryHandler+0x3a>
	{
		//ENCODER_TIMER->CNT = pTmpVppPreset->epos;
		//ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;

		// set to full range and mid starting position
		ENCODER_TIMER->CNT = 32768;
 8004fd8:	4b0a      	ldr	r3, [pc, #40]	; (8005004 <GainAuxMenuEntryHandler+0x54>)
 8004fda:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004fde:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = 65535;
 8004fe0:	4b08      	ldr	r3, [pc, #32]	; (8005004 <GainAuxMenuEntryHandler+0x54>)
 8004fe2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004fe6:	62da      	str	r2, [r3, #44]	; 0x2c
 8004fe8:	e002      	b.n	8004ff0 <GainAuxMenuEntryHandler+0x40>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8004fea:	4807      	ldr	r0, [pc, #28]	; (8005008 <GainAuxMenuEntryHandler+0x58>)
 8004fec:	f7fc fb04 	bl	80015f8 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8004ff0:	4b06      	ldr	r3, [pc, #24]	; (800500c <GainAuxMenuEntryHandler+0x5c>)
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	701a      	strb	r2, [r3, #0]
	return Gain_Aux_Menu_State;
 8004ff6:	2308      	movs	r3, #8
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3708      	adds	r7, #8
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	20001e5c 	.word	0x20001e5c
 8005004:	40012c00 	.word	0x40012c00
 8005008:	08014c24 	.word	0x08014c24
 800500c:	20001e57 	.word	0x20001e57

08005010 <GainAuxMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuInputHandler()
{
 8005010:	b580      	push	{r7, lr}
 8005012:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainAuxMenuInputHandler Event captured\n");
	#endif

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_INVERSE));
	VPP_MapEncoderPositionToAuxOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 8005014:	2000      	movs	r0, #0
 8005016:	f001 fde9 	bl	8006bec <SM_GetEncoderValue>
 800501a:	4603      	mov	r3, r0
 800501c:	4618      	mov	r0, r3
 800501e:	f002 f841 	bl	80070a4 <VPP_MapEncoderPositionToAuxOutput>

	eNewEvent = evYellowBtn;
 8005022:	4b03      	ldr	r3, [pc, #12]	; (8005030 <GainAuxMenuInputHandler+0x20>)
 8005024:	2203      	movs	r2, #3
 8005026:	701a      	strb	r2, [r3, #0]
	return Gain_Aux_Menu_State;
 8005028:	2308      	movs	r3, #8
}
 800502a:	4618      	mov	r0, r3
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	20001e57 	.word	0x20001e57

08005034 <GainAuxMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuExitHandler()
{
 8005034:	b580      	push	{r7, lr}
 8005036:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainAuxMenuExitHandler Event captured\n");
	#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8005038:	4b05      	ldr	r3, [pc, #20]	; (8005050 <GainAuxMenuExitHandler+0x1c>)
 800503a:	2201      	movs	r2, #1
 800503c:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 800503e:	f7fc fa95 	bl	800156c <DM_RefreshScreen>

	eNewEvent = evIdle;
 8005042:	4b04      	ldr	r3, [pc, #16]	; (8005054 <GainAuxMenuExitHandler+0x20>)
 8005044:	2200      	movs	r2, #0
 8005046:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8005048:	2306      	movs	r3, #6
}
 800504a:	4618      	mov	r0, r3
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	20001e5c 	.word	0x20001e5c
 8005054:	20001e57 	.word	0x20001e57

08005058 <ToplevelMenu_getStatus>:
eToplevelMenu_Status eNextToplevelMenuStatus = 	ENABLE_TOPLEVEL_MAIN_MENU;



eToplevelMenu_Status ToplevelMenu_getStatus()
{
 8005058:	b480      	push	{r7}
 800505a:	af00      	add	r7, sp, #0
	return eNextToplevelMenuStatus;
 800505c:	4b03      	ldr	r3, [pc, #12]	; (800506c <ToplevelMenu_getStatus+0x14>)
 800505e:	781b      	ldrb	r3, [r3, #0]
}
 8005060:	4618      	mov	r0, r3
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	20000000 	.word	0x20000000

08005070 <ToplevelMenu_setStatus>:

void ToplevelMenu_setStatus(eToplevelMenu_Status pStatus)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	4603      	mov	r3, r0
 8005078:	71fb      	strb	r3, [r7, #7]
	eNextToplevelMenuStatus = pStatus;
 800507a:	4a04      	ldr	r2, [pc, #16]	; (800508c <ToplevelMenu_setStatus+0x1c>)
 800507c:	79fb      	ldrb	r3, [r7, #7]
 800507e:	7013      	strb	r3, [r2, #0]
}
 8005080:	bf00      	nop
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	20000000 	.word	0x20000000

08005090 <ToplevelOutputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuEntryHandler()
{
 8005090:	b580      	push	{r7, lr}
 8005092:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelOutputMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8005094:	f7fc fa6a 	bl	800156c <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_OUTPUT_MENU;
 8005098:	4b04      	ldr	r3, [pc, #16]	; (80050ac <ToplevelOutputMenuEntryHandler+0x1c>)
 800509a:	2202      	movs	r2, #2
 800509c:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 800509e:	4b04      	ldr	r3, [pc, #16]	; (80050b0 <ToplevelOutputMenuEntryHandler+0x20>)
 80050a0:	2200      	movs	r2, #0
 80050a2:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 80050a4:	2301      	movs	r3, #1
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	20000000 	.word	0x20000000
 80050b0:	20001e57 	.word	0x20001e57

080050b4 <ToplevelOutputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuExitHandler()
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelOutputMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80050b8:	f7fc fa58 	bl	800156c <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 80050bc:	4b04      	ldr	r3, [pc, #16]	; (80050d0 <ToplevelOutputMenuExitHandler+0x1c>)
 80050be:	2201      	movs	r2, #1
 80050c0:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 80050c2:	4b04      	ldr	r3, [pc, #16]	; (80050d4 <ToplevelOutputMenuExitHandler+0x20>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	20000000 	.word	0x20000000
 80050d4:	20001e57 	.word	0x20001e57

080050d8 <ToplevelInputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuEntryHandler()
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80050dc:	f7fc fa46 	bl	800156c <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_INPUT_MENU;
 80050e0:	4b04      	ldr	r3, [pc, #16]	; (80050f4 <ToplevelInputMenuEntryHandler+0x1c>)
 80050e2:	2203      	movs	r2, #3
 80050e4:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 80050e6:	4b04      	ldr	r3, [pc, #16]	; (80050f8 <ToplevelInputMenuEntryHandler+0x20>)
 80050e8:	2200      	movs	r2, #0
 80050ea:	701a      	strb	r2, [r3, #0]
	return Toplevel_Input_Menu_State;
 80050ec:	2302      	movs	r3, #2
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	20000000 	.word	0x20000000
 80050f8:	20001e57 	.word	0x20001e57

080050fc <ToplevelInputMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuInputHandler(eSystemEvent pEvent)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	4603      	mov	r3, r0
 8005104:	71fb      	strb	r3, [r7, #7]
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuInputHandler Event captured\n");
	#endif


		switch(pEvent)
 8005106:	79fb      	ldrb	r3, [r7, #7]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d002      	beq.n	8005112 <ToplevelInputMenuInputHandler+0x16>
 800510c:	2b02      	cmp	r3, #2
 800510e:	d003      	beq.n	8005118 <ToplevelInputMenuInputHandler+0x1c>
				// re-enable the trigger input for new mode
				ToplevelInputMenuInputHandler(evBlueBtn);
				break;

			default:
				break;
 8005110:	e00b      	b.n	800512a <ToplevelInputMenuInputHandler+0x2e>
				IT_ArbitrateInputTrigger();
 8005112:	f001 f859 	bl	80061c8 <IT_ArbitrateInputTrigger>
				break;
 8005116:	e008      	b.n	800512a <ToplevelInputMenuInputHandler+0x2e>
				IT_CycleInputTriggerMode();
 8005118:	f001 f94c 	bl	80063b4 <IT_CycleInputTriggerMode>
				ToplevelInputMenuInputHandler(evBlueBtn);
 800511c:	2001      	movs	r0, #1
 800511e:	f7ff ffed 	bl	80050fc <ToplevelInputMenuInputHandler>
				ToplevelInputMenuInputHandler(evBlueBtn);
 8005122:	2001      	movs	r0, #1
 8005124:	f7ff ffea 	bl	80050fc <ToplevelInputMenuInputHandler>
				break;
 8005128:	bf00      	nop
		}
	// stay in this menu state
	eNewEvent = evIdle;
 800512a:	4b04      	ldr	r3, [pc, #16]	; (800513c <ToplevelInputMenuInputHandler+0x40>)
 800512c:	2200      	movs	r2, #0
 800512e:	701a      	strb	r2, [r3, #0]
	return Toplevel_Input_Menu_State;
 8005130:	2302      	movs	r3, #2
}
 8005132:	4618      	mov	r0, r3
 8005134:	3708      	adds	r7, #8
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	20001e57 	.word	0x20001e57

08005140 <ToplevelInputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuExitHandler()
{
 8005140:	b580      	push	{r7, lr}
 8005142:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8005144:	f7fc fa12 	bl	800156c <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 8005148:	4b04      	ldr	r3, [pc, #16]	; (800515c <ToplevelInputMenuExitHandler+0x1c>)
 800514a:	2201      	movs	r2, #1
 800514c:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 800514e:	4b04      	ldr	r3, [pc, #16]	; (8005160 <ToplevelInputMenuExitHandler+0x20>)
 8005150:	2200      	movs	r2, #0
 8005152:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	20000000 	.word	0x20000000
 8005160:	20001e57 	.word	0x20001e57

08005164 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800516c:	4b07      	ldr	r3, [pc, #28]	; (800518c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800516e:	695a      	ldr	r2, [r3, #20]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4013      	ands	r3, r2
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	429a      	cmp	r2, r3
 8005178:	d101      	bne.n	800517e <LL_EXTI_IsActiveFlag_0_31+0x1a>
 800517a:	2301      	movs	r3, #1
 800517c:	e000      	b.n	8005180 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr
 800518c:	40010400 	.word	0x40010400

08005190 <IM_Init>:
uint16_t encbtn_last_interrupt_time = 0;
uint16_t encpos_last_interrupt_time = 0;


void IM_Init()
{
 8005190:	b480      	push	{r7}
 8005192:	af00      	add	r7, sp, #0
	  // debounce timer
	  DEBOUNCE_TIMER->CR1 |= TIM_CR1_CEN;
 8005194:	4b05      	ldr	r3, [pc, #20]	; (80051ac <IM_Init+0x1c>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a04      	ldr	r2, [pc, #16]	; (80051ac <IM_Init+0x1c>)
 800519a:	f043 0301 	orr.w	r3, r3, #1
 800519e:	6013      	str	r3, [r2, #0]
}
 80051a0:	bf00      	nop
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	40014400 	.word	0x40014400

080051b0 <IM_SWEEP_UPDATE_TIM_IRQHandler>:
 *	@param None
 *	@retval None
 *
 */
void IM_SWEEP_UPDATE_TIM_IRQHandler()
{
 80051b0:	b480      	push	{r7}
 80051b2:	af00      	add	r7, sp, #0
	#ifdef ENABLE_PWM_SWEEP
		eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
	#endif	//ENABLE_PWM_SWEEP

		// upcounter (decreasing freq)
	if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 80051b4:	4b2a      	ldr	r3, [pc, #168]	; (8005260 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xb0>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0310 	and.w	r3, r3, #16
 80051bc:	2b10      	cmp	r3, #16
 80051be:	d11f      	bne.n	8005200 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x50>
	{
		// if we reach lower freq limit for sweep, reset to highest freq limit
		if(OUTPUT_TIMER->ARR >= sweep_upper_bounds_longest_output_arr)
 80051c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80051c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c6:	ee07 3a90 	vmov	s15, r3
 80051ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80051ce:	4b25      	ldr	r3, [pc, #148]	; (8005264 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xb4>)
 80051d0:	edd3 7a00 	vldr	s15, [r3]
 80051d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051dc:	db0a      	blt.n	80051f4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x44>
		{
			OUTPUT_TIMER->ARR = sweep_lower_bounds_shortest_output_arr;
 80051de:	4b22      	ldr	r3, [pc, #136]	; (8005268 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xb8>)
 80051e0:	edd3 7a00 	vldr	s15, [r3]
 80051e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80051e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051ec:	ee17 2a90 	vmov	r2, s15
 80051f0:	62da      	str	r2, [r3, #44]	; 0x2c
			}
		}
	}

	//SWEEP_TIMER->ARR--;
}
 80051f2:	e02f      	b.n	8005254 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>
			OUTPUT_TIMER->ARR++;
 80051f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80051f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051fa:	3201      	adds	r2, #1
 80051fc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80051fe:	e029      	b.n	8005254 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>
		if(OUTPUT_TIMER->ARR == 0x1U)
 8005200:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005206:	2b01      	cmp	r3, #1
 8005208:	d105      	bne.n	8005216 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x66>
			OUTPUT_TIMER->ARR = MAX_OUTPUT_ARR;
 800520a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800520e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005212:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005214:	e01e      	b.n	8005254 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>
			if(OUTPUT_TIMER->ARR <= sweep_lower_bounds_shortest_output_arr)
 8005216:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800521a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521c:	ee07 3a90 	vmov	s15, r3
 8005220:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005224:	4b10      	ldr	r3, [pc, #64]	; (8005268 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xb8>)
 8005226:	edd3 7a00 	vldr	s15, [r3]
 800522a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800522e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005232:	d80a      	bhi.n	800524a <IM_SWEEP_UPDATE_TIM_IRQHandler+0x9a>
				OUTPUT_TIMER->ARR = sweep_upper_bounds_longest_output_arr;
 8005234:	4b0b      	ldr	r3, [pc, #44]	; (8005264 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xb4>)
 8005236:	edd3 7a00 	vldr	s15, [r3]
 800523a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800523e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005242:	ee17 2a90 	vmov	r2, s15
 8005246:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005248:	e004      	b.n	8005254 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>
				OUTPUT_TIMER->ARR--;
 800524a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800524e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005250:	3a01      	subs	r2, #1
 8005252:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005254:	bf00      	nop
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	40000c00 	.word	0x40000c00
 8005264:	20000124 	.word	0x20000124
 8005268:	20000120 	.word	0x20000120

0800526c <IM_BTN1_EXTI14_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN1_EXTI14_Handler()
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8005272:	4b0f      	ldr	r3, [pc, #60]	; (80052b0 <IM_BTN1_EXTI14_Handler+0x44>)
 8005274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005276:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn1_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8005278:	88fb      	ldrh	r3, [r7, #6]
 800527a:	4a0e      	ldr	r2, [pc, #56]	; (80052b4 <IM_BTN1_EXTI14_Handler+0x48>)
 800527c:	8812      	ldrh	r2, [r2, #0]
 800527e:	1a9b      	subs	r3, r3, r2
 8005280:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005284:	dd0c      	ble.n	80052a0 <IM_BTN1_EXTI14_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14))
 8005286:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800528a:	f7ff ff6b 	bl	8005164 <LL_EXTI_IsActiveFlag_0_31>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d005      	beq.n	80052a0 <IM_BTN1_EXTI14_Handler+0x34>
		{

			EM_SetNewEvent(evBlueBtn);
 8005294:	2001      	movs	r0, #1
 8005296:	f7ff fa79 	bl	800478c <EM_SetNewEvent>
			printf("'Blue' BTN1_EXTI14_Pin\n");
 800529a:	4807      	ldr	r0, [pc, #28]	; (80052b8 <IM_BTN1_EXTI14_Handler+0x4c>)
 800529c:	f00b fe6a 	bl	8010f74 <puts>
		}
	}
	btn1_last_interrupt_time = interrupt_time;
 80052a0:	4a04      	ldr	r2, [pc, #16]	; (80052b4 <IM_BTN1_EXTI14_Handler+0x48>)
 80052a2:	88fb      	ldrh	r3, [r7, #6]
 80052a4:	8013      	strh	r3, [r2, #0]


}
 80052a6:	bf00      	nop
 80052a8:	3708      	adds	r7, #8
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	40014400 	.word	0x40014400
 80052b4:	20001e5e 	.word	0x20001e5e
 80052b8:	08014c5c 	.word	0x08014c5c

080052bc <IM_BTN2_EXTI15_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN2_EXTI15_Handler()
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 80052c2:	4b0f      	ldr	r3, [pc, #60]	; (8005300 <IM_BTN2_EXTI15_Handler+0x44>)
 80052c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c6:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn2_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 80052c8:	88fb      	ldrh	r3, [r7, #6]
 80052ca:	4a0e      	ldr	r2, [pc, #56]	; (8005304 <IM_BTN2_EXTI15_Handler+0x48>)
 80052cc:	8812      	ldrh	r2, [r2, #0]
 80052ce:	1a9b      	subs	r3, r3, r2
 80052d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052d4:	dd0c      	ble.n	80052f0 <IM_BTN2_EXTI15_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15))
 80052d6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80052da:	f7ff ff43 	bl	8005164 <LL_EXTI_IsActiveFlag_0_31>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d005      	beq.n	80052f0 <IM_BTN2_EXTI15_Handler+0x34>
		{
			EM_SetNewEvent(evYellowBtn);
 80052e4:	2003      	movs	r0, #3
 80052e6:	f7ff fa51 	bl	800478c <EM_SetNewEvent>
			printf("'Yellow' BTN2_EXTI15_Pin\n");
 80052ea:	4807      	ldr	r0, [pc, #28]	; (8005308 <IM_BTN2_EXTI15_Handler+0x4c>)
 80052ec:	f00b fe42 	bl	8010f74 <puts>
		}
	}
	btn2_last_interrupt_time = interrupt_time;
 80052f0:	4a04      	ldr	r2, [pc, #16]	; (8005304 <IM_BTN2_EXTI15_Handler+0x48>)
 80052f2:	88fb      	ldrh	r3, [r7, #6]
 80052f4:	8013      	strh	r3, [r2, #0]


}
 80052f6:	bf00      	nop
 80052f8:	3708      	adds	r7, #8
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	40014400 	.word	0x40014400
 8005304:	20001e60 	.word	0x20001e60
 8005308:	08014c74 	.word	0x08014c74

0800530c <IM_BTN3_EXTI0_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN3_EXTI0_Handler()
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8005312:	4b0e      	ldr	r3, [pc, #56]	; (800534c <IM_BTN3_EXTI0_Handler+0x40>)
 8005314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005316:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn3_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8005318:	88fb      	ldrh	r3, [r7, #6]
 800531a:	4a0d      	ldr	r2, [pc, #52]	; (8005350 <IM_BTN3_EXTI0_Handler+0x44>)
 800531c:	8812      	ldrh	r2, [r2, #0]
 800531e:	1a9b      	subs	r3, r3, r2
 8005320:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005324:	dd0b      	ble.n	800533e <IM_BTN3_EXTI0_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0))
 8005326:	2001      	movs	r0, #1
 8005328:	f7ff ff1c 	bl	8005164 <LL_EXTI_IsActiveFlag_0_31>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d005      	beq.n	800533e <IM_BTN3_EXTI0_Handler+0x32>
		{
			EM_SetNewEvent(evRedBtn);
 8005332:	2004      	movs	r0, #4
 8005334:	f7ff fa2a 	bl	800478c <EM_SetNewEvent>
			printf("'Red' BTN3_EXTI0_Pin\n");
 8005338:	4806      	ldr	r0, [pc, #24]	; (8005354 <IM_BTN3_EXTI0_Handler+0x48>)
 800533a:	f00b fe1b 	bl	8010f74 <puts>
		}
	}
	btn3_last_interrupt_time = interrupt_time;
 800533e:	4a04      	ldr	r2, [pc, #16]	; (8005350 <IM_BTN3_EXTI0_Handler+0x44>)
 8005340:	88fb      	ldrh	r3, [r7, #6]
 8005342:	8013      	strh	r3, [r2, #0]


}
 8005344:	bf00      	nop
 8005346:	3708      	adds	r7, #8
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	40014400 	.word	0x40014400
 8005350:	20001e62 	.word	0x20001e62
 8005354:	08014c90 	.word	0x08014c90

08005358 <IM_BTN4_EXTI1_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN4_EXTI1_Handler()
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 800535e:	4b0e      	ldr	r3, [pc, #56]	; (8005398 <IM_BTN4_EXTI1_Handler+0x40>)
 8005360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005362:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn4_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8005364:	88fb      	ldrh	r3, [r7, #6]
 8005366:	4a0d      	ldr	r2, [pc, #52]	; (800539c <IM_BTN4_EXTI1_Handler+0x44>)
 8005368:	8812      	ldrh	r2, [r2, #0]
 800536a:	1a9b      	subs	r3, r3, r2
 800536c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005370:	dd0b      	ble.n	800538a <IM_BTN4_EXTI1_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1))
 8005372:	2002      	movs	r0, #2
 8005374:	f7ff fef6 	bl	8005164 <LL_EXTI_IsActiveFlag_0_31>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d005      	beq.n	800538a <IM_BTN4_EXTI1_Handler+0x32>
		{
			EM_SetNewEvent(evGreenBtn);
 800537e:	2002      	movs	r0, #2
 8005380:	f7ff fa04 	bl	800478c <EM_SetNewEvent>
			printf("'Green' BTN4_EXTI1_Pin\n");
 8005384:	4806      	ldr	r0, [pc, #24]	; (80053a0 <IM_BTN4_EXTI1_Handler+0x48>)
 8005386:	f00b fdf5 	bl	8010f74 <puts>
		}
	}
	btn4_last_interrupt_time = interrupt_time;
 800538a:	4a04      	ldr	r2, [pc, #16]	; (800539c <IM_BTN4_EXTI1_Handler+0x44>)
 800538c:	88fb      	ldrh	r3, [r7, #6]
 800538e:	8013      	strh	r3, [r2, #0]


}
 8005390:	bf00      	nop
 8005392:	3708      	adds	r7, #8
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	40014400 	.word	0x40014400
 800539c:	20001e64 	.word	0x20001e64
 80053a0:	08014ca8 	.word	0x08014ca8

080053a4 <IM_ENC_EXTI2_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_EXTI2_Handler()
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 80053aa:	4b0e      	ldr	r3, [pc, #56]	; (80053e4 <IM_ENC_EXTI2_Handler+0x40>)
 80053ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ae:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - encbtn_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 80053b0:	88fb      	ldrh	r3, [r7, #6]
 80053b2:	4a0d      	ldr	r2, [pc, #52]	; (80053e8 <IM_ENC_EXTI2_Handler+0x44>)
 80053b4:	8812      	ldrh	r2, [r2, #0]
 80053b6:	1a9b      	subs	r3, r3, r2
 80053b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053bc:	dd0b      	ble.n	80053d6 <IM_ENC_EXTI2_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2))
 80053be:	2004      	movs	r0, #4
 80053c0:	f7ff fed0 	bl	8005164 <LL_EXTI_IsActiveFlag_0_31>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d005      	beq.n	80053d6 <IM_ENC_EXTI2_Handler+0x32>
		{
			EM_SetNewEvent(evEncoderPush);
 80053ca:	2006      	movs	r0, #6
 80053cc:	f7ff f9de 	bl	800478c <EM_SetNewEvent>
			printf("'EncoderPush' ENC_EXTI2_Pin\n");
 80053d0:	4806      	ldr	r0, [pc, #24]	; (80053ec <IM_ENC_EXTI2_Handler+0x48>)
 80053d2:	f00b fdcf 	bl	8010f74 <puts>
		}
	}
	encbtn_last_interrupt_time = interrupt_time;
 80053d6:	4a04      	ldr	r2, [pc, #16]	; (80053e8 <IM_ENC_EXTI2_Handler+0x44>)
 80053d8:	88fb      	ldrh	r3, [r7, #6]
 80053da:	8013      	strh	r3, [r2, #0]


}
 80053dc:	bf00      	nop
 80053de:	3708      	adds	r7, #8
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	40014400 	.word	0x40014400
 80053e8:	20001e66 	.word	0x20001e66
 80053ec:	08014cc0 	.word	0x08014cc0

080053f0 <IM_ENC_DIRF_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_DIRF_Handler()
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0

	if((TIM1->SR & TIM_SR_DIRF) == TIM_SR_DIRF)
 80053f6:	4b11      	ldr	r3, [pc, #68]	; (800543c <IM_ENC_DIRF_Handler+0x4c>)
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005402:	d117      	bne.n	8005434 <IM_ENC_DIRF_Handler+0x44>
	{
		uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8005404:	4b0e      	ldr	r3, [pc, #56]	; (8005440 <IM_ENC_DIRF_Handler+0x50>)
 8005406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005408:	80fb      	strh	r3, [r7, #6]
		if ((interrupt_time - encpos_last_interrupt_time) > 0)
 800540a:	88fb      	ldrh	r3, [r7, #6]
 800540c:	4a0d      	ldr	r2, [pc, #52]	; (8005444 <IM_ENC_DIRF_Handler+0x54>)
 800540e:	8812      	ldrh	r2, [r2, #0]
 8005410:	1a9b      	subs	r3, r3, r2
 8005412:	2b00      	cmp	r3, #0
 8005414:	dd0b      	ble.n	800542e <IM_ENC_DIRF_Handler+0x3e>
		{
			EM_SetNewEvent(evEncoderSet);
 8005416:	2005      	movs	r0, #5
 8005418:	f7ff f9b8 	bl	800478c <EM_SetNewEvent>
			printf("Encoder new direction\n");
 800541c:	480a      	ldr	r0, [pc, #40]	; (8005448 <IM_ENC_DIRF_Handler+0x58>)
 800541e:	f00b fda9 	bl	8010f74 <puts>
			TIM1->SR &= ~(TIM_SR_DIRF);
 8005422:	4b06      	ldr	r3, [pc, #24]	; (800543c <IM_ENC_DIRF_Handler+0x4c>)
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	4a05      	ldr	r2, [pc, #20]	; (800543c <IM_ENC_DIRF_Handler+0x4c>)
 8005428:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800542c:	6113      	str	r3, [r2, #16]
		}
		encpos_last_interrupt_time = interrupt_time;
 800542e:	4a05      	ldr	r2, [pc, #20]	; (8005444 <IM_ENC_DIRF_Handler+0x54>)
 8005430:	88fb      	ldrh	r3, [r7, #6]
 8005432:	8013      	strh	r3, [r2, #0]


	}


}
 8005434:	bf00      	nop
 8005436:	3708      	adds	r7, #8
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}
 800543c:	40012c00 	.word	0x40012c00
 8005440:	40014400 	.word	0x40014400
 8005444:	20001e68 	.word	0x20001e68
 8005448:	08014cdc 	.word	0x08014cdc

0800544c <BO_GetBiasPolarity>:
 *	@param None
 *	@retval None
 *
 */
eBias_Polarity BO_GetBiasPolarity()
{
 800544c:	b480      	push	{r7}
 800544e:	af00      	add	r7, sp, #0
	return eBiasPolarity;
 8005450:	4b03      	ldr	r3, [pc, #12]	; (8005460 <BO_GetBiasPolarity+0x14>)
 8005452:	781b      	ldrb	r3, [r3, #0]
}
 8005454:	4618      	mov	r0, r3
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	20000001 	.word	0x20000001

08005464 <BO_GetDcBiasEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t BO_GetDcBiasEncoderValue()
{
 8005464:	b480      	push	{r7}
 8005466:	af00      	add	r7, sp, #0
	return dc_bias_encoder_value;
 8005468:	4b03      	ldr	r3, [pc, #12]	; (8005478 <BO_GetDcBiasEncoderValue+0x14>)
 800546a:	881b      	ldrh	r3, [r3, #0]
}
 800546c:	4618      	mov	r0, r3
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	20000002 	.word	0x20000002

0800547c <BO_MapEncoderPositionToSignalOutput>:
 *	@param None
 *	@retval None
 *
 */
void BO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
 8005482:	4603      	mov	r3, r0
 8005484:	80fb      	strh	r3, [r7, #6]
	// pEncoderValue is reversed for correct rotary encoder operation.
	// However, we want to retain the forward direction value to prevent polarity flip!
	dc_bias_encoder_value = SM_GetEncoderValue(ENCODER_NORMAL);
 8005486:	2000      	movs	r0, #0
 8005488:	f001 fbb0 	bl	8006bec <SM_GetEncoderValue>
 800548c:	4603      	mov	r3, r0
 800548e:	461a      	mov	r2, r3
 8005490:	4b1b      	ldr	r3, [pc, #108]	; (8005500 <BO_MapEncoderPositionToSignalOutput+0x84>)
 8005492:	801a      	strh	r2, [r3, #0]

	// apply negative dc bias
	if(pEncoderValue < BIAS_CENTER) {
 8005494:	88fb      	ldrh	r3, [r7, #6]
 8005496:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800549a:	d214      	bcs.n	80054c6 <BO_MapEncoderPositionToSignalOutput+0x4a>

		eBiasPolarity = INVERSEBIAS;
 800549c:	4b19      	ldr	r3, [pc, #100]	; (8005504 <BO_MapEncoderPositionToSignalOutput+0x88>)
 800549e:	2200      	movs	r2, #0
 80054a0:	701a      	strb	r2, [r3, #0]


		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((BIAS_CENTER - pEncoderValue) * BIAS_MAG));
 80054a2:	88fb      	ldrh	r3, [r7, #6]
 80054a4:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 80054a8:	4613      	mov	r3, r2
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	4413      	add	r3, r2
 80054ae:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 80054b0:	2200      	movs	r2, #0
 80054b2:	2110      	movs	r1, #16
 80054b4:	4814      	ldr	r0, [pc, #80]	; (8005508 <BO_MapEncoderPositionToSignalOutput+0x8c>)
 80054b6:	f005 feab 	bl	800b210 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	OFFSET_ENABLE_GPIO_Port,
 80054ba:	2201      	movs	r2, #1
 80054bc:	2108      	movs	r1, #8
 80054be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054c2:	f006 fe67 	bl	800c194 <HAL_GPIO_WritePin>
							OFFSET_ENABLE_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(pEncoderValue >= BIAS_CENTER) {
 80054c6:	88fb      	ldrh	r3, [r7, #6]
 80054c8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80054cc:	d314      	bcc.n	80054f8 <BO_MapEncoderPositionToSignalOutput+0x7c>

		eBiasPolarity = NORMALBIAS;
 80054ce:	4b0d      	ldr	r3, [pc, #52]	; (8005504 <BO_MapEncoderPositionToSignalOutput+0x88>)
 80054d0:	2201      	movs	r2, #1
 80054d2:	701a      	strb	r2, [r3, #0]
		//TIM1->CNT = pEncoderValue;

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((pEncoderValue - BIAS_CENTER) * BIAS_MAG));
 80054d4:	88fb      	ldrh	r3, [r7, #6]
 80054d6:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 80054da:	4613      	mov	r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	4413      	add	r3, r2
 80054e0:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 80054e2:	2200      	movs	r2, #0
 80054e4:	2110      	movs	r1, #16
 80054e6:	4808      	ldr	r0, [pc, #32]	; (8005508 <BO_MapEncoderPositionToSignalOutput+0x8c>)
 80054e8:	f005 fe92 	bl	800b210 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	OFFSET_ENABLE_GPIO_Port,
 80054ec:	2200      	movs	r2, #0
 80054ee:	2108      	movs	r1, #8
 80054f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054f4:	f006 fe4e 	bl	800c194 <HAL_GPIO_WritePin>
							OFFSET_ENABLE_Pin,
							GPIO_PIN_RESET);
	}
}
 80054f8:	bf00      	nop
 80054fa:	3708      	adds	r7, #8
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	20000002 	.word	0x20000002
 8005504:	20000001 	.word	0x20000001
 8005508:	20002a00 	.word	0x20002a00

0800550c <BO_GetOutputBias>:
 *	@param None
 *	@retval None
 *
 */
uint32_t BO_GetOutputBias()
{
 800550c:	b580      	push	{r7, lr}
 800550e:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 8005510:	2110      	movs	r1, #16
 8005512:	4803      	ldr	r0, [pc, #12]	; (8005520 <BO_GetOutputBias+0x14>)
 8005514:	f005 fec2 	bl	800b29c <HAL_DAC_GetValue>
 8005518:	4603      	mov	r3, r0
}
 800551a:	4618      	mov	r0, r3
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	20002a00 	.word	0x20002a00

08005524 <FreqO_InitFreqProfiles>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_InitFreqProfiles()
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++)
 800552a:	2300      	movs	r3, #0
 800552c:	607b      	str	r3, [r7, #4]
 800552e:	e06b      	b.n	8005608 <FreqO_InitFreqProfiles+0xe4>
	{
		// prevent divide by zero (prescaler)
		if(theFreqProfiles[i].psc == 0)
 8005530:	493a      	ldr	r1, [pc, #232]	; (800561c <FreqO_InitFreqProfiles+0xf8>)
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	4613      	mov	r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4413      	add	r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	440b      	add	r3, r1
 800553e:	3308      	adds	r3, #8
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d129      	bne.n	800559a <FreqO_InitFreqProfiles+0x76>
			theFreqProfiles[i].arr = ((SM_MCLK / theFreqProfiles[i].hertz) / SM_FSAMP) * theFreqProfiles[i].error;
 8005546:	4935      	ldr	r1, [pc, #212]	; (800561c <FreqO_InitFreqProfiles+0xf8>)
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	4613      	mov	r3, r2
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	4413      	add	r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	440b      	add	r3, r1
 8005554:	3304      	adds	r3, #4
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a31      	ldr	r2, [pc, #196]	; (8005620 <FreqO_InitFreqProfiles+0xfc>)
 800555a:	fbb2 f3f3 	udiv	r3, r2, r3
 800555e:	ee07 3a90 	vmov	s15, r3
 8005562:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005566:	492d      	ldr	r1, [pc, #180]	; (800561c <FreqO_InitFreqProfiles+0xf8>)
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	4613      	mov	r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	4413      	add	r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	440b      	add	r3, r1
 8005574:	3310      	adds	r3, #16
 8005576:	edd3 7a00 	vldr	s15, [r3]
 800557a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800557e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005582:	ee17 0a90 	vmov	r0, s15
 8005586:	4925      	ldr	r1, [pc, #148]	; (800561c <FreqO_InitFreqProfiles+0xf8>)
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	4613      	mov	r3, r2
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	4413      	add	r3, r2
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	440b      	add	r3, r1
 8005594:	330c      	adds	r3, #12
 8005596:	6018      	str	r0, [r3, #0]
 8005598:	e033      	b.n	8005602 <FreqO_InitFreqProfiles+0xde>
		else
			theFreqProfiles[i].arr = (((SM_MCLK / theFreqProfiles[i].hertz) / theFreqProfiles[i].psc) / SM_FSAMP) * theFreqProfiles[i].error;
 800559a:	4920      	ldr	r1, [pc, #128]	; (800561c <FreqO_InitFreqProfiles+0xf8>)
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	4613      	mov	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4413      	add	r3, r2
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	440b      	add	r3, r1
 80055a8:	3304      	adds	r3, #4
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a1c      	ldr	r2, [pc, #112]	; (8005620 <FreqO_InitFreqProfiles+0xfc>)
 80055ae:	fbb2 f1f3 	udiv	r1, r2, r3
 80055b2:	481a      	ldr	r0, [pc, #104]	; (800561c <FreqO_InitFreqProfiles+0xf8>)
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	4613      	mov	r3, r2
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4413      	add	r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	4403      	add	r3, r0
 80055c0:	3308      	adds	r3, #8
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80055c8:	ee07 3a90 	vmov	s15, r3
 80055cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80055d0:	4912      	ldr	r1, [pc, #72]	; (800561c <FreqO_InitFreqProfiles+0xf8>)
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	4613      	mov	r3, r2
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	4413      	add	r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	440b      	add	r3, r1
 80055de:	3310      	adds	r3, #16
 80055e0:	edd3 7a00 	vldr	s15, [r3]
 80055e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055ec:	ee17 0a90 	vmov	r0, s15
 80055f0:	490a      	ldr	r1, [pc, #40]	; (800561c <FreqO_InitFreqProfiles+0xf8>)
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	4613      	mov	r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	4413      	add	r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	440b      	add	r3, r1
 80055fe:	330c      	adds	r3, #12
 8005600:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	3301      	adds	r3, #1
 8005606:	607b      	str	r3, [r7, #4]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b0d      	cmp	r3, #13
 800560c:	dd90      	ble.n	8005530 <FreqO_InitFreqProfiles+0xc>
	}
}
 800560e:	bf00      	nop
 8005610:	370c      	adds	r7, #12
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	20000004 	.word	0x20000004
 8005620:	00155cc0 	.word	0x00155cc0

08005624 <FreqO_MapEncoderPositionCoarse>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_MapEncoderPositionCoarse(uint16_t pEncValue)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	4603      	mov	r3, r0
 800562c:	80fb      	strh	r3, [r7, #6]

	uint32_t tmpFreqIndex = freq_profile->index;
 800562e:	4b1b      	ldr	r3, [pc, #108]	; (800569c <FreqO_MapEncoderPositionCoarse+0x78>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	60fb      	str	r3, [r7, #12]
	if(pEncValue > freq_last_encoder_value)
 8005636:	4b1a      	ldr	r3, [pc, #104]	; (80056a0 <FreqO_MapEncoderPositionCoarse+0x7c>)
 8005638:	881b      	ldrh	r3, [r3, #0]
 800563a:	88fa      	ldrh	r2, [r7, #6]
 800563c:	429a      	cmp	r2, r3
 800563e:	d910      	bls.n	8005662 <FreqO_MapEncoderPositionCoarse+0x3e>
	{
		tmpFreqIndex++;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	3301      	adds	r3, #1
 8005644:	60fb      	str	r3, [r7, #12]
		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = MAX_NUM_FREQ_PRESETS-1;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2b0d      	cmp	r3, #13
 800564a:	d901      	bls.n	8005650 <FreqO_MapEncoderPositionCoarse+0x2c>
 800564c:	230d      	movs	r3, #13
 800564e:	60fb      	str	r3, [r7, #12]
		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	f000 f945 	bl	80058e0 <FreqO_GetProfileByIndex>
 8005656:	4603      	mov	r3, r0
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	4618      	mov	r0, r3
 800565c:	f000 f872 	bl	8005744 <FreqO_ApplyProfile>
 8005660:	e014      	b.n	800568c <FreqO_MapEncoderPositionCoarse+0x68>
	}
	else if (pEncValue < freq_last_encoder_value)
 8005662:	4b0f      	ldr	r3, [pc, #60]	; (80056a0 <FreqO_MapEncoderPositionCoarse+0x7c>)
 8005664:	881b      	ldrh	r3, [r3, #0]
 8005666:	88fa      	ldrh	r2, [r7, #6]
 8005668:	429a      	cmp	r2, r3
 800566a:	d20f      	bcs.n	800568c <FreqO_MapEncoderPositionCoarse+0x68>
	{
		tmpFreqIndex--;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	3b01      	subs	r3, #1
 8005670:	60fb      	str	r3, [r7, #12]
		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = 0;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2b0d      	cmp	r3, #13
 8005676:	d901      	bls.n	800567c <FreqO_MapEncoderPositionCoarse+0x58>
 8005678:	2300      	movs	r3, #0
 800567a:	60fb      	str	r3, [r7, #12]
		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f000 f92f 	bl	80058e0 <FreqO_GetProfileByIndex>
 8005682:	4603      	mov	r3, r0
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	4618      	mov	r0, r3
 8005688:	f000 f85c 	bl	8005744 <FreqO_ApplyProfile>
	}
	freq_last_encoder_value = pEncValue;
 800568c:	4a04      	ldr	r2, [pc, #16]	; (80056a0 <FreqO_MapEncoderPositionCoarse+0x7c>)
 800568e:	88fb      	ldrh	r3, [r7, #6]
 8005690:	8013      	strh	r3, [r2, #0]

}
 8005692:	bf00      	nop
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	2000011c 	.word	0x2000011c
 80056a0:	20001e6a 	.word	0x20001e6a

080056a4 <FreqO_MapEncoderPositionFine>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_MapEncoderPositionFine(uint16_t pEncValue)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	4603      	mov	r3, r0
 80056ac:	80fb      	strh	r3, [r7, #6]

//	uint32_t tmpFreqIndex = freq_profile->index;
	if(pEncValue > freq_last_encoder_value)
 80056ae:	4b0f      	ldr	r3, [pc, #60]	; (80056ec <FreqO_MapEncoderPositionFine+0x48>)
 80056b0:	881b      	ldrh	r3, [r3, #0]
 80056b2:	88fa      	ldrh	r2, [r7, #6]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d905      	bls.n	80056c4 <FreqO_MapEncoderPositionFine+0x20>
	{
		OUTPUT_TIMER->ARR++;
 80056b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80056bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056be:	3201      	adds	r2, #1
 80056c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80056c2:	e009      	b.n	80056d8 <FreqO_MapEncoderPositionFine+0x34>
//		tmpFreqIndex++;
//		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = MAX_NUM_FREQ_PRESETS-1;
//		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
	}
	else if (pEncValue < freq_last_encoder_value)
 80056c4:	4b09      	ldr	r3, [pc, #36]	; (80056ec <FreqO_MapEncoderPositionFine+0x48>)
 80056c6:	881b      	ldrh	r3, [r3, #0]
 80056c8:	88fa      	ldrh	r2, [r7, #6]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d204      	bcs.n	80056d8 <FreqO_MapEncoderPositionFine+0x34>
	{
		OUTPUT_TIMER->ARR--;
 80056ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80056d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056d4:	3a01      	subs	r2, #1
 80056d6:	62da      	str	r2, [r3, #44]	; 0x2c
//		tmpFreqIndex--;
//		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = 0;
//		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
	}
	freq_last_encoder_value = pEncValue;
 80056d8:	4a04      	ldr	r2, [pc, #16]	; (80056ec <FreqO_MapEncoderPositionFine+0x48>)
 80056da:	88fb      	ldrh	r3, [r7, #6]
 80056dc:	8013      	strh	r3, [r2, #0]

}
 80056de:	bf00      	nop
 80056e0:	370c      	adds	r7, #12
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	20001e6a 	.word	0x20001e6a

080056f0 <FreqO_MapEncoderPositionToPrescaler>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_MapEncoderPositionToPrescaler(uint16_t pEncValue)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	4603      	mov	r3, r0
 80056f8:	80fb      	strh	r3, [r7, #6]

//	uint32_t tmpFreqIndex = freq_profile->index;
	if(pEncValue > freq_last_encoder_value)
 80056fa:	4b11      	ldr	r3, [pc, #68]	; (8005740 <FreqO_MapEncoderPositionToPrescaler+0x50>)
 80056fc:	881b      	ldrh	r3, [r3, #0]
 80056fe:	88fa      	ldrh	r2, [r7, #6]
 8005700:	429a      	cmp	r2, r3
 8005702:	d905      	bls.n	8005710 <FreqO_MapEncoderPositionToPrescaler+0x20>
	{
		OUTPUT_TIMER->PSC++;
 8005704:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005708:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800570a:	3201      	adds	r2, #1
 800570c:	629a      	str	r2, [r3, #40]	; 0x28
 800570e:	e00e      	b.n	800572e <FreqO_MapEncoderPositionToPrescaler+0x3e>

	}
	else if (pEncValue < freq_last_encoder_value)
 8005710:	4b0b      	ldr	r3, [pc, #44]	; (8005740 <FreqO_MapEncoderPositionToPrescaler+0x50>)
 8005712:	881b      	ldrh	r3, [r3, #0]
 8005714:	88fa      	ldrh	r2, [r7, #6]
 8005716:	429a      	cmp	r2, r3
 8005718:	d209      	bcs.n	800572e <FreqO_MapEncoderPositionToPrescaler+0x3e>
	{
		if(OUTPUT_TIMER->PSC > 0)
 800571a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800571e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005720:	2b00      	cmp	r3, #0
 8005722:	d004      	beq.n	800572e <FreqO_MapEncoderPositionToPrescaler+0x3e>
			OUTPUT_TIMER->PSC--;
 8005724:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005728:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800572a:	3a01      	subs	r2, #1
 800572c:	629a      	str	r2, [r3, #40]	; 0x28
//		tmpFreqIndex--;
//		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = 0;
//		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
	}
	freq_last_encoder_value = pEncValue;
 800572e:	4a04      	ldr	r2, [pc, #16]	; (8005740 <FreqO_MapEncoderPositionToPrescaler+0x50>)
 8005730:	88fb      	ldrh	r3, [r7, #6]
 8005732:	8013      	strh	r3, [r2, #0]

}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr
 8005740:	20001e6a 	.word	0x20001e6a

08005744 <FreqO_ApplyProfile>:
 *	@retval None
 *
 */

void FreqO_ApplyProfile(eFreqSettings_t pPresetEnum)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
//	DacTimeReg_t* tmpDT = DT_GetRegisterByEnum(pPresetEnum);
	FreqProfile_t* tmpFreqProfile = FreqO_FindFPresetObject(pPresetEnum);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 f899 	bl	8005884 <FreqO_FindFPresetObject>
 8005752:	60f8      	str	r0, [r7, #12]
	if(tmpFreqProfile)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d026      	beq.n	80057a8 <FreqO_ApplyProfile+0x64>
	{

		OUTPUT_TIMER->PSC = tmpFreqProfile->psc;
 800575a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	6293      	str	r3, [r2, #40]	; 0x28
		OUTPUT_TIMER->ARR = tmpFreqProfile->arr;
 8005764:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	62d3      	str	r3, [r2, #44]	; 0x2c

		eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 800576e:	2001      	movs	r0, #1
 8005770:	f000 ffc0 	bl	80066f4 <SM_GetOutputChannel>
 8005774:	4603      	mov	r3, r0
 8005776:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	72fb      	strb	r3, [r7, #11]
		if(tmpOut == PWM_FUNC_MODE)
 800577e:	7afb      	ldrb	r3, [r7, #11]
 8005780:	2b06      	cmp	r3, #6
 8005782:	d10d      	bne.n	80057a0 <FreqO_ApplyProfile+0x5c>
		{
			// duty cycle of PWM require slower settings to get the
			// same frequency as normal output functions
			PWM_AUX_OUT_TIM->PSC = 256;
 8005784:	4b0c      	ldr	r3, [pc, #48]	; (80057b8 <FreqO_ApplyProfile+0x74>)
 8005786:	f44f 7280 	mov.w	r2, #256	; 0x100
 800578a:	629a      	str	r2, [r3, #40]	; 0x28
			PWM_AUX_OUT_TIM->ARR = tmpFreqProfile->arr/2;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	4a09      	ldr	r2, [pc, #36]	; (80057b8 <FreqO_ApplyProfile+0x74>)
 8005792:	085b      	lsrs	r3, r3, #1
 8005794:	62d3      	str	r3, [r2, #44]	; 0x2c
			PWM_AUX_OUT_TIM->CCR1 = PWM_AUX_OUT_TIM->ARR/2;
 8005796:	4b08      	ldr	r3, [pc, #32]	; (80057b8 <FreqO_ApplyProfile+0x74>)
 8005798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579a:	4a07      	ldr	r2, [pc, #28]	; (80057b8 <FreqO_ApplyProfile+0x74>)
 800579c:	085b      	lsrs	r3, r3, #1
 800579e:	6353      	str	r3, [r2, #52]	; 0x34
		}

		freq_profile = tmpFreqProfile;
 80057a0:	4a06      	ldr	r2, [pc, #24]	; (80057bc <FreqO_ApplyProfile+0x78>)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6013      	str	r3, [r2, #0]
	}
	else
	{
		DM_SetErrorDebugMsg("FreqO_ApplyProfile() null pointer error");
	}
}
 80057a6:	e002      	b.n	80057ae <FreqO_ApplyProfile+0x6a>
		DM_SetErrorDebugMsg("FreqO_ApplyProfile() null pointer error");
 80057a8:	4805      	ldr	r0, [pc, #20]	; (80057c0 <FreqO_ApplyProfile+0x7c>)
 80057aa:	f7fb ff25 	bl	80015f8 <DM_SetErrorDebugMsg>
}
 80057ae:	bf00      	nop
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	40000400 	.word	0x40000400
 80057bc:	2000011c 	.word	0x2000011c
 80057c0:	08014cf4 	.word	0x08014cf4

080057c4 <FreqO_AdjustFreq>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustFreq()
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
	FreqO_MapEncoderPositionFine(SM_GetEncoderValue(ENCODER_NORMAL));
 80057ca:	2000      	movs	r0, #0
 80057cc:	f001 fa0e 	bl	8006bec <SM_GetEncoderValue>
 80057d0:	4603      	mov	r3, r0
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7ff ff66 	bl	80056a4 <FreqO_MapEncoderPositionFine>


	eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 80057d8:	2001      	movs	r0, #1
 80057da:	f000 ff8b 	bl	80066f4 <SM_GetOutputChannel>
 80057de:	4603      	mov	r3, r0
 80057e0:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	71fb      	strb	r3, [r7, #7]
	if(tmpOut == PWM_FUNC_MODE)
 80057e8:	79fb      	ldrb	r3, [r7, #7]
 80057ea:	2b06      	cmp	r3, #6
 80057ec:	d110      	bne.n	8005810 <FreqO_AdjustFreq+0x4c>
	{
		// duty cycle of PWM require slower settings to get the
		// same frequency as normal output functions
		PWM_AUX_OUT_TIM->PSC = 256;
 80057ee:	4b0a      	ldr	r3, [pc, #40]	; (8005818 <FreqO_AdjustFreq+0x54>)
 80057f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057f4:	629a      	str	r2, [r3, #40]	; 0x28
		PWM_AUX_OUT_TIM->ARR = SM_GetEncoderValue(ENCODER_NORMAL)/2;
 80057f6:	2000      	movs	r0, #0
 80057f8:	f001 f9f8 	bl	8006bec <SM_GetEncoderValue>
 80057fc:	4603      	mov	r3, r0
 80057fe:	085b      	lsrs	r3, r3, #1
 8005800:	b29a      	uxth	r2, r3
 8005802:	4b05      	ldr	r3, [pc, #20]	; (8005818 <FreqO_AdjustFreq+0x54>)
 8005804:	62da      	str	r2, [r3, #44]	; 0x2c
		PWM_AUX_OUT_TIM->CCR1 = PWM_AUX_OUT_TIM->ARR/2;
 8005806:	4b04      	ldr	r3, [pc, #16]	; (8005818 <FreqO_AdjustFreq+0x54>)
 8005808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580a:	4a03      	ldr	r2, [pc, #12]	; (8005818 <FreqO_AdjustFreq+0x54>)
 800580c:	085b      	lsrs	r3, r3, #1
 800580e:	6353      	str	r3, [r2, #52]	; 0x34

	}
}
 8005810:	bf00      	nop
 8005812:	3708      	adds	r7, #8
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	40000400 	.word	0x40000400

0800581c <FreqO_AdjustPrescaler>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustPrescaler()
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
	FreqO_MapEncoderPositionToPrescaler(SM_GetEncoderValue(ENCODER_NORMAL));
 8005822:	2000      	movs	r0, #0
 8005824:	f001 f9e2 	bl	8006bec <SM_GetEncoderValue>
 8005828:	4603      	mov	r3, r0
 800582a:	4618      	mov	r0, r3
 800582c:	f7ff ff60 	bl	80056f0 <FreqO_MapEncoderPositionToPrescaler>

	// not sure about this code?!?!
	eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8005830:	2001      	movs	r0, #1
 8005832:	f000 ff5f 	bl	80066f4 <SM_GetOutputChannel>
 8005836:	4603      	mov	r3, r0
 8005838:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	71fb      	strb	r3, [r7, #7]
	if(tmpOut == PWM_FUNC_MODE)
 8005840:	79fb      	ldrb	r3, [r7, #7]
 8005842:	2b06      	cmp	r3, #6
 8005844:	d10c      	bne.n	8005860 <FreqO_AdjustPrescaler+0x44>
	{
		// duty cycle of PWM require slower settings to get the
		// same frequency as normal output functions
		//PWM_AUX_OUT_TIM->PSC = 256;
		PWM_AUX_OUT_TIM->ARR = SM_GetEncoderValue(ENCODER_NORMAL)/2;
 8005846:	2000      	movs	r0, #0
 8005848:	f001 f9d0 	bl	8006bec <SM_GetEncoderValue>
 800584c:	4603      	mov	r3, r0
 800584e:	085b      	lsrs	r3, r3, #1
 8005850:	b29a      	uxth	r2, r3
 8005852:	4b05      	ldr	r3, [pc, #20]	; (8005868 <FreqO_AdjustPrescaler+0x4c>)
 8005854:	62da      	str	r2, [r3, #44]	; 0x2c
		PWM_AUX_OUT_TIM->CCR1 = PWM_AUX_OUT_TIM->ARR/2;
 8005856:	4b04      	ldr	r3, [pc, #16]	; (8005868 <FreqO_AdjustPrescaler+0x4c>)
 8005858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585a:	4a03      	ldr	r2, [pc, #12]	; (8005868 <FreqO_AdjustPrescaler+0x4c>)
 800585c:	085b      	lsrs	r3, r3, #1
 800585e:	6353      	str	r3, [r2, #52]	; 0x34

	}
}
 8005860:	bf00      	nop
 8005862:	3708      	adds	r7, #8
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	40000400 	.word	0x40000400

0800586c <FreqO_GetFPresetObject>:
 *	@param None
 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_GetFPresetObject()
{
 800586c:	b480      	push	{r7}
 800586e:	af00      	add	r7, sp, #0
	return freq_profile;
 8005870:	4b03      	ldr	r3, [pc, #12]	; (8005880 <FreqO_GetFPresetObject+0x14>)
 8005872:	681b      	ldr	r3, [r3, #0]
}
 8005874:	4618      	mov	r0, r3
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	2000011c 	.word	0x2000011c

08005884 <FreqO_FindFPresetObject>:

 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_FindFPresetObject(eFreqSettings_t pEnum)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 800588c:	2300      	movs	r3, #0
 800588e:	60fb      	str	r3, [r7, #12]
 8005890:	e016      	b.n	80058c0 <FreqO_FindFPresetObject+0x3c>
	{
		if(theFreqProfiles[i].hertz == pEnum)
 8005892:	4911      	ldr	r1, [pc, #68]	; (80058d8 <FreqO_FindFPresetObject+0x54>)
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	4613      	mov	r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	4413      	add	r3, r2
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	440b      	add	r3, r1
 80058a0:	3304      	adds	r3, #4
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d107      	bne.n	80058ba <FreqO_FindFPresetObject+0x36>
		{
			return &theFreqProfiles[i];
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	4613      	mov	r3, r2
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4413      	add	r3, r2
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	4a08      	ldr	r2, [pc, #32]	; (80058d8 <FreqO_FindFPresetObject+0x54>)
 80058b6:	4413      	add	r3, r2
 80058b8:	e009      	b.n	80058ce <FreqO_FindFPresetObject+0x4a>
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	3301      	adds	r3, #1
 80058be:	60fb      	str	r3, [r7, #12]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2b0d      	cmp	r3, #13
 80058c4:	dde5      	ble.n	8005892 <FreqO_FindFPresetObject+0xe>
		}
	}
	// error!
	DM_SetErrorDebugMsg("FreqO_FindFPresetObject(): no FPreset obj found");
 80058c6:	4805      	ldr	r0, [pc, #20]	; (80058dc <FreqO_FindFPresetObject+0x58>)
 80058c8:	f7fb fe96 	bl	80015f8 <DM_SetErrorDebugMsg>
	return 0;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	20000004 	.word	0x20000004
 80058dc:	08014d1c 	.word	0x08014d1c

080058e0 <FreqO_GetProfileByIndex>:
 *	@param pIndex
 *	@retval pointer to FreqProfile_t object
 *
 */
FreqProfile_t* FreqO_GetProfileByIndex(uint32_t pIndex)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
	return &theFreqProfiles[pIndex];
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	4613      	mov	r3, r2
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	4413      	add	r3, r2
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	4a04      	ldr	r2, [pc, #16]	; (8005904 <FreqO_GetProfileByIndex+0x24>)
 80058f4:	4413      	add	r3, r2
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	370c      	adds	r7, #12
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop
 8005904:	20000004 	.word	0x20000004

08005908 <FreqO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_ResetLastEncoderValue()
{
 8005908:	b480      	push	{r7}
 800590a:	af00      	add	r7, sp, #0
	freq_last_encoder_value = 0;
 800590c:	4b03      	ldr	r3, [pc, #12]	; (800591c <FreqO_ResetLastEncoderValue+0x14>)
 800590e:	2200      	movs	r2, #0
 8005910:	801a      	strh	r2, [r3, #0]
}
 8005912:	bf00      	nop
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr
 800591c:	20001e6a 	.word	0x20001e6a

08005920 <FS_SetSweepModeDown>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepModeDown()
{
 8005920:	b480      	push	{r7}
 8005922:	af00      	add	r7, sp, #0
	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 8005924:	4b10      	ldr	r3, [pc, #64]	; (8005968 <FS_SetSweepModeDown+0x48>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a0f      	ldr	r2, [pc, #60]	; (8005968 <FS_SetSweepModeDown+0x48>)
 800592a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800592e:	6013      	str	r3, [r2, #0]

	// 0: Counter used as upcounter
	SWEEP_TIMER->CR1 |= (TIM_CR1_DIR);
 8005930:	4b0d      	ldr	r3, [pc, #52]	; (8005968 <FS_SetSweepModeDown+0x48>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a0c      	ldr	r2, [pc, #48]	; (8005968 <FS_SetSweepModeDown+0x48>)
 8005936:	f043 0310 	orr.w	r3, r3, #16
 800593a:	6013      	str	r3, [r2, #0]

	sweep_lower_bounds_shortest_output_arr  = OUTPUT_TIMER->ARR;
 800593c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005942:	ee07 3a90 	vmov	s15, r3
 8005946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800594a:	4b08      	ldr	r3, [pc, #32]	; (800596c <FS_SetSweepModeDown+0x4c>)
 800594c:	edc3 7a00 	vstr	s15, [r3]
	sweep_upper_bounds_longest_output_arr  = MAX_OUTPUT_ARR;
 8005950:	4b07      	ldr	r3, [pc, #28]	; (8005970 <FS_SetSweepModeDown+0x50>)
 8005952:	4a08      	ldr	r2, [pc, #32]	; (8005974 <FS_SetSweepModeDown+0x54>)
 8005954:	601a      	str	r2, [r3, #0]
	ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 8005956:	4b08      	ldr	r3, [pc, #32]	; (8005978 <FS_SetSweepModeDown+0x58>)
 8005958:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800595c:	625a      	str	r2, [r3, #36]	; 0x24

}
 800595e:	bf00      	nop
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr
 8005968:	40000c00 	.word	0x40000c00
 800596c:	20000120 	.word	0x20000120
 8005970:	20000124 	.word	0x20000124
 8005974:	477fff00 	.word	0x477fff00
 8005978:	40012c00 	.word	0x40012c00

0800597c <FS_SetSweepModeUp>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepModeUp()
{
 800597c:	b480      	push	{r7}
 800597e:	af00      	add	r7, sp, #0

	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 8005980:	4b0e      	ldr	r3, [pc, #56]	; (80059bc <FS_SetSweepModeUp+0x40>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a0d      	ldr	r2, [pc, #52]	; (80059bc <FS_SetSweepModeUp+0x40>)
 8005986:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800598a:	6013      	str	r3, [r2, #0]

	// 1: Counter used as downcounter
	SWEEP_TIMER->CR1 &= ~(TIM_CR1_DIR);
 800598c:	4b0b      	ldr	r3, [pc, #44]	; (80059bc <FS_SetSweepModeUp+0x40>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a0a      	ldr	r2, [pc, #40]	; (80059bc <FS_SetSweepModeUp+0x40>)
 8005992:	f023 0310 	bic.w	r3, r3, #16
 8005996:	6013      	str	r3, [r2, #0]

	sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 8005998:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800599c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599e:	ee07 3a90 	vmov	s15, r3
 80059a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059a6:	4b06      	ldr	r3, [pc, #24]	; (80059c0 <FS_SetSweepModeUp+0x44>)
 80059a8:	edc3 7a00 	vstr	s15, [r3]
	sweep_lower_bounds_shortest_output_arr  = MIN_OUTPUT_ARR;
 80059ac:	4b05      	ldr	r3, [pc, #20]	; (80059c4 <FS_SetSweepModeUp+0x48>)
 80059ae:	4a06      	ldr	r2, [pc, #24]	; (80059c8 <FS_SetSweepModeUp+0x4c>)
 80059b0:	601a      	str	r2, [r3, #0]


}
 80059b2:	bf00      	nop
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr
 80059bc:	40000c00 	.word	0x40000c00
 80059c0:	20000124 	.word	0x20000124
 80059c4:	20000120 	.word	0x20000120
 80059c8:	41500000 	.word	0x41500000

080059cc <FS_SetEncoderControlMode>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetEncoderControlMode(eEncoderSweepFunctions pFunction)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	4603      	mov	r3, r0
 80059d4:	71fb      	strb	r3, [r7, #7]
	if(pFunction)
 80059d6:	79fb      	ldrb	r3, [r7, #7]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d03a      	beq.n	8005a52 <FS_SetEncoderControlMode+0x86>
	{
		//	ENCODER_SWEEP_LIMIT_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 80059dc:	4a25      	ldr	r2, [pc, #148]	; (8005a74 <FS_SetEncoderControlMode+0xa8>)
 80059de:	79fb      	ldrb	r3, [r7, #7]
 80059e0:	7013      	strb	r3, [r2, #0]
		ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 80059e2:	4b25      	ldr	r3, [pc, #148]	; (8005a78 <FS_SetEncoderControlMode+0xac>)
 80059e4:	220d      	movs	r2, #13
 80059e6:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_OUTPUT_ARR;
 80059e8:	4b23      	ldr	r3, [pc, #140]	; (8005a78 <FS_SetEncoderControlMode+0xac>)
 80059ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059ee:	62da      	str	r2, [r3, #44]	; 0x2c

		switch(active_sweep_mode)
 80059f0:	4b22      	ldr	r3, [pc, #136]	; (8005a7c <FS_SetEncoderControlMode+0xb0>)
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d002      	beq.n	80059fe <FS_SetEncoderControlMode+0x32>
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d015      	beq.n	8005a28 <FS_SetEncoderControlMode+0x5c>
					// if encoder position is below the lower bounds set it above it
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
				break;
			default:
				break;
 80059fc:	e033      	b.n	8005a66 <FS_SetEncoderControlMode+0x9a>
					if(ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 80059fe:	4b1e      	ldr	r3, [pc, #120]	; (8005a78 <FS_SetEncoderControlMode+0xac>)
 8005a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a02:	ee07 3a90 	vmov	s15, r3
 8005a06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a0a:	4b1d      	ldr	r3, [pc, #116]	; (8005a80 <FS_SetEncoderControlMode+0xb4>)
 8005a0c:	edd3 7a00 	vldr	s15, [r3]
 8005a10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a18:	dc00      	bgt.n	8005a1c <FS_SetEncoderControlMode+0x50>
				break;
 8005a1a:	e024      	b.n	8005a66 <FS_SetEncoderControlMode+0x9a>
						 ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8005a1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005a20:	4a15      	ldr	r2, [pc, #84]	; (8005a78 <FS_SetEncoderControlMode+0xac>)
 8005a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a24:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 8005a26:	e01e      	b.n	8005a66 <FS_SetEncoderControlMode+0x9a>
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 8005a28:	4b13      	ldr	r3, [pc, #76]	; (8005a78 <FS_SetEncoderControlMode+0xac>)
 8005a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2c:	ee07 3a90 	vmov	s15, r3
 8005a30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a34:	4b13      	ldr	r3, [pc, #76]	; (8005a84 <FS_SetEncoderControlMode+0xb8>)
 8005a36:	edd3 7a00 	vldr	s15, [r3]
 8005a3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a42:	d400      	bmi.n	8005a46 <FS_SetEncoderControlMode+0x7a>
				break;
 8005a44:	e00f      	b.n	8005a66 <FS_SetEncoderControlMode+0x9a>
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8005a46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005a4a:	4a0b      	ldr	r2, [pc, #44]	; (8005a78 <FS_SetEncoderControlMode+0xac>)
 8005a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4e:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 8005a50:	e009      	b.n	8005a66 <FS_SetEncoderControlMode+0x9a>
		// switch(active_sweep_mode)
	}
	else
	{
		// ENCODER_SWEEP_SPEED_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 8005a52:	4a08      	ldr	r2, [pc, #32]	; (8005a74 <FS_SetEncoderControlMode+0xa8>)
 8005a54:	79fb      	ldrb	r3, [r7, #7]
 8005a56:	7013      	strb	r3, [r2, #0]
		// encoder start value
		ENCODER_TIMER->CNT = 1;
 8005a58:	4b07      	ldr	r3, [pc, #28]	; (8005a78 <FS_SetEncoderControlMode+0xac>)
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	625a      	str	r2, [r3, #36]	; 0x24
		// encoder limit for default (set speed)
		ENCODER_TIMER->ARR = 1600;
 8005a5e:	4b06      	ldr	r3, [pc, #24]	; (8005a78 <FS_SetEncoderControlMode+0xac>)
 8005a60:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005a64:	62da      	str	r2, [r3, #44]	; 0x2c
	}

}
 8005a66:	bf00      	nop
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	20001e59 	.word	0x20001e59
 8005a78:	40012c00 	.word	0x40012c00
 8005a7c:	20001e58 	.word	0x20001e58
 8005a80:	20000124 	.word	0x20000124
 8005a84:	20000120 	.word	0x20000120

08005a88 <FS_SetSweepTimerAutoReloadForEncoderControl>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepTimerAutoReloadForEncoderControl(eEncoderSweepFunctions pFunction)
{
 8005a88:	b590      	push	{r4, r7, lr}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	4603      	mov	r3, r0
 8005a90:	71fb      	strb	r3, [r7, #7]
	uint32_t next_sweep_tim_arr;

	if(pFunction)
 8005a92:	79fb      	ldrb	r3, [r7, #7]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d122      	bne.n	8005ade <FS_SetSweepTimerAutoReloadForEncoderControl+0x56>

	}
	else
	{
		// get logarithmic curve to speed up turns at low end
		next_sweep_tim_arr = MIN_SWEEP_ARR + (pow(ENCODER_TIMER->CNT, 3));
 8005a98:	4b17      	ldr	r3, [pc, #92]	; (8005af8 <FS_SetSweepTimerAutoReloadForEncoderControl+0x70>)
 8005a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7fa fd59 	bl	8000554 <__aeabi_ui2d>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	460c      	mov	r4, r1
 8005aa6:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8005ae8 <FS_SetSweepTimerAutoReloadForEncoderControl+0x60>
 8005aaa:	ec44 3b10 	vmov	d0, r3, r4
 8005aae:	f00d fb7b 	bl	80131a8 <pow>
 8005ab2:	ec51 0b10 	vmov	r0, r1, d0
 8005ab6:	a30e      	add	r3, pc, #56	; (adr r3, 8005af0 <FS_SetSweepTimerAutoReloadForEncoderControl+0x68>)
 8005ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005abc:	f7fa fc0e 	bl	80002dc <__adddf3>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	460c      	mov	r4, r1
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	4621      	mov	r1, r4
 8005ac8:	f7fb f896 	bl	8000bf8 <__aeabi_d2uiz>
 8005acc:	4603      	mov	r3, r0
 8005ace:	60fb      	str	r3, [r7, #12]

		if(next_sweep_tim_arr < 0xFFFFFFFF)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ad6:	d002      	beq.n	8005ade <FS_SetSweepTimerAutoReloadForEncoderControl+0x56>
		{
			SWEEP_TIMER->ARR = next_sweep_tim_arr;
 8005ad8:	4a08      	ldr	r2, [pc, #32]	; (8005afc <FS_SetSweepTimerAutoReloadForEncoderControl+0x74>)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	62d3      	str	r3, [r2, #44]	; 0x2c

		}
	}
}
 8005ade:	bf00      	nop
 8005ae0:	3714      	adds	r7, #20
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd90      	pop	{r4, r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	00000000 	.word	0x00000000
 8005aec:	40080000 	.word	0x40080000
 8005af0:	00000000 	.word	0x00000000
 8005af4:	40d06800 	.word	0x40d06800
 8005af8:	40012c00 	.word	0x40012c00
 8005afc:	40000c00 	.word	0x40000c00

08005b00 <FS_GetCalculatedSweepFrequencyInHertz>:
 *	@param None
 *	@retval None
 *
 */
float FS_GetCalculatedSweepFrequencyInHertz()
{
 8005b00:	b480      	push	{r7}
 8005b02:	af00      	add	r7, sp, #0
	if(SWEEP_TIMER->PSC == 0)
 8005b04:	4b13      	ldr	r3, [pc, #76]	; (8005b54 <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10a      	bne.n	8005b22 <FS_GetCalculatedSweepFrequencyInHertz+0x22>
	{
		return (float)SM_MCLK / ((float)1 * (float)SWEEP_TIMER->ARR);
 8005b0c:	4b11      	ldr	r3, [pc, #68]	; (8005b54 <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b10:	ee07 3a90 	vmov	s15, r3
 8005b14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b18:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8005b58 <FS_GetCalculatedSweepFrequencyInHertz+0x58>
 8005b1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b20:	e011      	b.n	8005b46 <FS_GetCalculatedSweepFrequencyInHertz+0x46>
	}
	else
	{
		return (float)SM_MCLK / ((float)SWEEP_TIMER->PSC * (float)SWEEP_TIMER->ARR);
 8005b22:	4b0c      	ldr	r3, [pc, #48]	; (8005b54 <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b26:	ee07 3a90 	vmov	s15, r3
 8005b2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b2e:	4b09      	ldr	r3, [pc, #36]	; (8005b54 <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b32:	ee07 3a90 	vmov	s15, r3
 8005b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b3e:	eddf 6a06 	vldr	s13, [pc, #24]	; 8005b58 <FS_GetCalculatedSweepFrequencyInHertz+0x58>
 8005b42:	eec6 7a87 	vdiv.f32	s15, s13, s14
	}

}
 8005b46:	eeb0 0a67 	vmov.f32	s0, s15
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	40000c00 	.word	0x40000c00
 8005b58:	4d2037a0 	.word	0x4d2037a0

08005b5c <FuncO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void FuncO_ResetLastEncoderValue()
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	af00      	add	r7, sp, #0
	func_last_encoder_value = 0;
 8005b60:	4b03      	ldr	r3, [pc, #12]	; (8005b70 <FuncO_ResetLastEncoderValue+0x14>)
 8005b62:	2200      	movs	r2, #0
 8005b64:	801a      	strh	r2, [r3, #0]
}
 8005b66:	bf00      	nop
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr
 8005b70:	20001e96 	.word	0x20001e96

08005b74 <FuncO_MapEncoderPositionToSignalOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	80fb      	strh	r3, [r7, #6]
	eOutput_mode tmpFunc = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 8005b7e:	2000      	movs	r0, #0
 8005b80:	f000 fdb8 	bl	80066f4 <SM_GetOutputChannel>
 8005b84:	4603      	mov	r3, r0
 8005b86:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > func_last_encoder_value)
 8005b8e:	4b15      	ldr	r3, [pc, #84]	; (8005be4 <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 8005b90:	881b      	ldrh	r3, [r3, #0]
 8005b92:	88fa      	ldrh	r2, [r7, #6]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d90c      	bls.n	8005bb2 <FuncO_MapEncoderPositionToSignalOutput+0x3e>
	{
		tmpFunc++;
 8005b98:	7bfb      	ldrb	r3, [r7, #15]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-2) tmpFunc = IMPULSE_FUNC_MODE;
 8005b9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ba0:	2b05      	cmp	r3, #5
 8005ba2:	d901      	bls.n	8005ba8 <FuncO_MapEncoderPositionToSignalOutput+0x34>
 8005ba4:	2305      	movs	r3, #5
 8005ba6:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToSignal(tmpFunc);
 8005ba8:	7bfb      	ldrb	r3, [r7, #15]
 8005baa:	4618      	mov	r0, r3
 8005bac:	f000 f856 	bl	8005c5c <FuncO_ApplyProfileToSignal>
 8005bb0:	e010      	b.n	8005bd4 <FuncO_MapEncoderPositionToSignalOutput+0x60>
	}
	else if (pEncoderValue < func_last_encoder_value)
 8005bb2:	4b0c      	ldr	r3, [pc, #48]	; (8005be4 <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 8005bb4:	881b      	ldrh	r3, [r3, #0]
 8005bb6:	88fa      	ldrh	r2, [r7, #6]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d20b      	bcs.n	8005bd4 <FuncO_MapEncoderPositionToSignalOutput+0x60>
	{
		tmpFunc--;
 8005bbc:	7bfb      	ldrb	r3, [r7, #15]
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = SINE_FUNC_MODE;
 8005bc2:	7bfb      	ldrb	r3, [r7, #15]
 8005bc4:	2b06      	cmp	r3, #6
 8005bc6:	d901      	bls.n	8005bcc <FuncO_MapEncoderPositionToSignalOutput+0x58>
 8005bc8:	2300      	movs	r3, #0
 8005bca:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToSignal(tmpFunc);
 8005bcc:	7bfb      	ldrb	r3, [r7, #15]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 f844 	bl	8005c5c <FuncO_ApplyProfileToSignal>
	}
	func_last_encoder_value = pEncoderValue;
 8005bd4:	4a03      	ldr	r2, [pc, #12]	; (8005be4 <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 8005bd6:	88fb      	ldrh	r3, [r7, #6]
 8005bd8:	8013      	strh	r3, [r2, #0]
}
 8005bda:	bf00      	nop
 8005bdc:	3710      	adds	r7, #16
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	20001e96 	.word	0x20001e96

08005be8 <FuncO_MapEncoderPositionToAuxOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_MapEncoderPositionToAuxOutput(uint16_t pEncoderValue)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	4603      	mov	r3, r0
 8005bf0:	80fb      	strh	r3, [r7, #6]
	eOutput_mode tmpFunc = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8005bf2:	2001      	movs	r0, #1
 8005bf4:	f000 fd7e 	bl	80066f4 <SM_GetOutputChannel>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > func_last_encoder_value)
 8005c02:	4b15      	ldr	r3, [pc, #84]	; (8005c58 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 8005c04:	881b      	ldrh	r3, [r3, #0]
 8005c06:	88fa      	ldrh	r2, [r7, #6]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d90c      	bls.n	8005c26 <FuncO_MapEncoderPositionToAuxOutput+0x3e>
	{
		tmpFunc++;
 8005c0c:	7bfb      	ldrb	r3, [r7, #15]
 8005c0e:	3301      	adds	r3, #1
 8005c10:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = PWM_FUNC_MODE;
 8005c12:	7bfb      	ldrb	r3, [r7, #15]
 8005c14:	2b06      	cmp	r3, #6
 8005c16:	d901      	bls.n	8005c1c <FuncO_MapEncoderPositionToAuxOutput+0x34>
 8005c18:	2306      	movs	r3, #6
 8005c1a:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToAux(tmpFunc);
 8005c1c:	7bfb      	ldrb	r3, [r7, #15]
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f000 f882 	bl	8005d28 <FuncO_ApplyProfileToAux>
 8005c24:	e010      	b.n	8005c48 <FuncO_MapEncoderPositionToAuxOutput+0x60>
	}
	else if (pEncoderValue < func_last_encoder_value)
 8005c26:	4b0c      	ldr	r3, [pc, #48]	; (8005c58 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 8005c28:	881b      	ldrh	r3, [r3, #0]
 8005c2a:	88fa      	ldrh	r2, [r7, #6]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d20b      	bcs.n	8005c48 <FuncO_MapEncoderPositionToAuxOutput+0x60>
	{
		tmpFunc--;
 8005c30:	7bfb      	ldrb	r3, [r7, #15]
 8005c32:	3b01      	subs	r3, #1
 8005c34:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = SINE_FUNC_MODE;
 8005c36:	7bfb      	ldrb	r3, [r7, #15]
 8005c38:	2b06      	cmp	r3, #6
 8005c3a:	d901      	bls.n	8005c40 <FuncO_MapEncoderPositionToAuxOutput+0x58>
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToAux(tmpFunc);
 8005c40:	7bfb      	ldrb	r3, [r7, #15]
 8005c42:	4618      	mov	r0, r3
 8005c44:	f000 f870 	bl	8005d28 <FuncO_ApplyProfileToAux>
//		if(tmpFunc == SINE_FUNC_MODE)
//			ENCODER_TIMER->CNT = 20;
	}
	func_last_encoder_value = pEncoderValue;
 8005c48:	4a03      	ldr	r2, [pc, #12]	; (8005c58 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 8005c4a:	88fb      	ldrh	r3, [r7, #6]
 8005c4c:	8013      	strh	r3, [r2, #0]
}
 8005c4e:	bf00      	nop
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	20001e96 	.word	0x20001e96

08005c5c <FuncO_ApplyProfileToSignal>:

 *	@retval None
 *
 */
void FuncO_ApplyProfileToSignal(eOutput_mode pPresetEnum)
{
 8005c5c:	b590      	push	{r4, r7, lr}
 8005c5e:	b087      	sub	sp, #28
 8005c60:	af02      	add	r7, sp, #8
 8005c62:	4603      	mov	r3, r0
 8005c64:	71fb      	strb	r3, [r7, #7]

		// set the next function output
		SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 8005c66:	79fc      	ldrb	r4, [r7, #7]
 8005c68:	2000      	movs	r0, #0
 8005c6a:	f000 fd43 	bl	80066f4 <SM_GetOutputChannel>
 8005c6e:	4601      	mov	r1, r0
 8005c70:	00e3      	lsls	r3, r4, #3
 8005c72:	4a29      	ldr	r2, [pc, #164]	; (8005d18 <FuncO_ApplyProfileToSignal+0xbc>)
 8005c74:	4413      	add	r3, r2
 8005c76:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8


		// copy the lookup table for the next output function in to SignalChannel object
		printf("SM_GetOutputChannel\n");
 8005c7a:	4828      	ldr	r0, [pc, #160]	; (8005d1c <FuncO_ApplyProfileToSignal+0xc0>)
 8005c7c:	f00b f97a 	bl	8010f74 <puts>
		SM_GetOutputChannel(SIGNAL_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8005c80:	79fc      	ldrb	r4, [r7, #7]
 8005c82:	2000      	movs	r0, #0
 8005c84:	f000 fd36 	bl	80066f4 <SM_GetOutputChannel>
 8005c88:	4601      	mov	r1, r0
 8005c8a:	4a23      	ldr	r2, [pc, #140]	; (8005d18 <FuncO_ApplyProfileToSignal+0xbc>)
 8005c8c:	00e3      	lsls	r3, r4, #3
 8005c8e:	4413      	add	r3, r2
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	604b      	str	r3, [r1, #4]

		// set preset for PGA gain and dsp amplitude adjustment
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 8005c94:	2000      	movs	r0, #0
 8005c96:	f000 fd2d 	bl	80066f4 <SM_GetOutputChannel>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(eTmpVppPreset);
 8005ca4:	7bfb      	ldrb	r3, [r7, #15]
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f001 f85c 	bl	8006d64 <VPP_ApplyProfileToSignal>

		// pause timer to reAux both outputs
		OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 8005cac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005cb6:	f023 0301 	bic.w	r3, r3, #1
 8005cba:	6013      	str	r3, [r2, #0]
		//HAL_TIM_Base_Stop(&htim8);

		// restart the DAC with the new data
		HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8005cbc:	2100      	movs	r1, #0
 8005cbe:	4818      	ldr	r0, [pc, #96]	; (8005d20 <FuncO_ApplyProfileToSignal+0xc4>)
 8005cc0:	f005 fa50 	bl	800b164 <HAL_DAC_Stop_DMA>
		HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005cc4:	2000      	movs	r0, #0
 8005cc6:	f000 fd15 	bl	80066f4 <SM_GetOutputChannel>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	f103 0208 	add.w	r2, r3, #8
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	9300      	str	r3, [sp, #0]
 8005cd4:	2378      	movs	r3, #120	; 0x78
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	4811      	ldr	r0, [pc, #68]	; (8005d20 <FuncO_ApplyProfileToSignal+0xc4>)
 8005cda:	f005 f981 	bl	800afe0 <HAL_DAC_Start_DMA>

		// restart the the other DAC
		HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 8005cde:	2100      	movs	r1, #0
 8005ce0:	4810      	ldr	r0, [pc, #64]	; (8005d24 <FuncO_ApplyProfileToSignal+0xc8>)
 8005ce2:	f005 fa3f 	bl	800b164 <HAL_DAC_Stop_DMA>
		HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005ce6:	2001      	movs	r0, #1
 8005ce8:	f000 fd04 	bl	80066f4 <SM_GetOutputChannel>
 8005cec:	4603      	mov	r3, r0
 8005cee:	f103 0208 	add.w	r2, r3, #8
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	9300      	str	r3, [sp, #0]
 8005cf6:	2378      	movs	r3, #120	; 0x78
 8005cf8:	2100      	movs	r1, #0
 8005cfa:	480a      	ldr	r0, [pc, #40]	; (8005d24 <FuncO_ApplyProfileToSignal+0xc8>)
 8005cfc:	f005 f970 	bl	800afe0 <HAL_DAC_Start_DMA>

		// resume timer to reAux both outputs
		//HAL_TIM_Base_Start(&htim8);
		OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 8005d00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005d0a:	f043 0301 	orr.w	r3, r3, #1
 8005d0e:	6013      	str	r3, [r2, #0]



}
 8005d10:	bf00      	nop
 8005d12:	3714      	adds	r7, #20
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd90      	pop	{r4, r7, pc}
 8005d18:	20000128 	.word	0x20000128
 8005d1c:	08014d4c 	.word	0x08014d4c
 8005d20:	20002a00 	.word	0x20002a00
 8005d24:	200029ec 	.word	0x200029ec

08005d28 <FuncO_ApplyProfileToAux>:

 *	@retval None
 *
 */
void FuncO_ApplyProfileToAux(eOutput_mode pPresetEnum)
{
 8005d28:	b590      	push	{r4, r7, lr}
 8005d2a:	b087      	sub	sp, #28
 8005d2c:	af02      	add	r7, sp, #8
 8005d2e:	4603      	mov	r3, r0
 8005d30:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef res;

	// set the next output function
	SM_GetOutputChannel(AUX_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 8005d32:	79fc      	ldrb	r4, [r7, #7]
 8005d34:	2001      	movs	r0, #1
 8005d36:	f000 fcdd 	bl	80066f4 <SM_GetOutputChannel>
 8005d3a:	4601      	mov	r1, r0
 8005d3c:	00e3      	lsls	r3, r4, #3
 8005d3e:	4a96      	ldr	r2, [pc, #600]	; (8005f98 <FuncO_ApplyProfileToAux+0x270>)
 8005d40:	4413      	add	r3, r2
 8005d42:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8


	if(pPresetEnum == PWM_FUNC_MODE)
 8005d46:	79fb      	ldrb	r3, [r7, #7]
 8005d48:	2b06      	cmp	r3, #6
 8005d4a:	d10a      	bne.n	8005d62 <FuncO_ApplyProfileToAux+0x3a>
	{
		printf("FuncO_ApplyProfileToAux PWM_FUNC_MODE\n");
 8005d4c:	4893      	ldr	r0, [pc, #588]	; (8005f9c <FuncO_ApplyProfileToAux+0x274>)
 8005d4e:	f00b f911 	bl	8010f74 <puts>
		// switch output signal from DAC to PWM

		SM_DisableDacToAux();
 8005d52:	f000 ff37 	bl	8006bc4 <SM_DisableDacToAux>
		SM_EnablePwmToAux();
 8005d56:	f000 fce3 	bl	8006720 <SM_EnablePwmToAux>

		last_output_mode_was_pwm = 1;
 8005d5a:	4b91      	ldr	r3, [pc, #580]	; (8005fa0 <FuncO_ApplyProfileToAux+0x278>)
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	701a      	strb	r2, [r3, #0]
		res = HAL_TIM_Base_Start(&htim2);
		printf("Result:%u\n",res);
		//OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
	}

}
 8005d60:	e115      	b.n	8005f8e <FuncO_ApplyProfileToAux+0x266>
	else if(last_output_mode_was_pwm)
 8005d62:	4b8f      	ldr	r3, [pc, #572]	; (8005fa0 <FuncO_ApplyProfileToAux+0x278>)
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	f000 808e 	beq.w	8005e88 <FuncO_ApplyProfileToAux+0x160>
		printf("FuncO_ApplyProfileToAux NOT PWM_FUNC_MODE\n");
 8005d6c:	488d      	ldr	r0, [pc, #564]	; (8005fa4 <FuncO_ApplyProfileToAux+0x27c>)
 8005d6e:	f00b f901 	bl	8010f74 <puts>
		SM_DisablePwmToAux();
 8005d72:	f000 fe11 	bl	8006998 <SM_DisablePwmToAux>
		SM_EnableDacToAux();
 8005d76:	f000 fe4b 	bl	8006a10 <SM_EnableDacToAux>
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 8005d7a:	488b      	ldr	r0, [pc, #556]	; (8005fa8 <FuncO_ApplyProfileToAux+0x280>)
 8005d7c:	f00b f8fa 	bl	8010f74 <puts>
		SM_GetOutputChannel(AUX_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8005d80:	79fc      	ldrb	r4, [r7, #7]
 8005d82:	2001      	movs	r0, #1
 8005d84:	f000 fcb6 	bl	80066f4 <SM_GetOutputChannel>
 8005d88:	4601      	mov	r1, r0
 8005d8a:	4a83      	ldr	r2, [pc, #524]	; (8005f98 <FuncO_ApplyProfileToAux+0x270>)
 8005d8c:	00e3      	lsls	r3, r4, #3
 8005d8e:	4413      	add	r3, r2
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	604b      	str	r3, [r1, #4]
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 8005d94:	4884      	ldr	r0, [pc, #528]	; (8005fa8 <FuncO_ApplyProfileToAux+0x280>)
 8005d96:	f00b f8ed 	bl	8010f74 <puts>
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile->amp_setting;
 8005d9a:	2001      	movs	r0, #1
 8005d9c:	f000 fcaa 	bl	80066f4 <SM_GetOutputChannel>
 8005da0:	4603      	mov	r3, r0
 8005da2:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	737b      	strb	r3, [r7, #13]
		printf("VPP_ApplyProfileToAux");
 8005daa:	4880      	ldr	r0, [pc, #512]	; (8005fac <FuncO_ApplyProfileToAux+0x284>)
 8005dac:	f00b f86e 	bl	8010e8c <iprintf>
		VPP_ApplyProfileToAux(eTmpVppPreset);
 8005db0:	7b7b      	ldrb	r3, [r7, #13]
 8005db2:	4618      	mov	r0, r3
 8005db4:	f001 f804 	bl	8006dc0 <VPP_ApplyProfileToAux>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Stop(&htim2)\n");
 8005db8:	487d      	ldr	r0, [pc, #500]	; (8005fb0 <FuncO_ApplyProfileToAux+0x288>)
 8005dba:	f00b f8db 	bl	8010f74 <puts>
		res = HAL_TIM_Base_Stop(&htim2);
 8005dbe:	487d      	ldr	r0, [pc, #500]	; (8005fb4 <FuncO_ApplyProfileToAux+0x28c>)
 8005dc0:	f007 fb10 	bl	800d3e4 <HAL_TIM_Base_Stop>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005dc8:	7bbb      	ldrb	r3, [r7, #14]
 8005dca:	4619      	mov	r1, r3
 8005dcc:	487a      	ldr	r0, [pc, #488]	; (8005fb8 <FuncO_ApplyProfileToAux+0x290>)
 8005dce:	f00b f85d 	bl	8010e8c <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 8005dd2:	487a      	ldr	r0, [pc, #488]	; (8005fbc <FuncO_ApplyProfileToAux+0x294>)
 8005dd4:	f00b f8ce 	bl	8010f74 <puts>
		res = HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 8005dd8:	2100      	movs	r1, #0
 8005dda:	4879      	ldr	r0, [pc, #484]	; (8005fc0 <FuncO_ApplyProfileToAux+0x298>)
 8005ddc:	f005 f9c2 	bl	800b164 <HAL_DAC_Stop_DMA>
 8005de0:	4603      	mov	r3, r0
 8005de2:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005de4:	7bbb      	ldrb	r3, [r7, #14]
 8005de6:	4619      	mov	r1, r3
 8005de8:	4873      	ldr	r0, [pc, #460]	; (8005fb8 <FuncO_ApplyProfileToAux+0x290>)
 8005dea:	f00b f84f 	bl	8010e8c <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 8005dee:	4875      	ldr	r0, [pc, #468]	; (8005fc4 <FuncO_ApplyProfileToAux+0x29c>)
 8005df0:	f00b f8c0 	bl	8010f74 <puts>
		res = HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005df4:	2001      	movs	r0, #1
 8005df6:	f000 fc7d 	bl	80066f4 <SM_GetOutputChannel>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	f103 0208 	add.w	r2, r3, #8
 8005e00:	2300      	movs	r3, #0
 8005e02:	9300      	str	r3, [sp, #0]
 8005e04:	2378      	movs	r3, #120	; 0x78
 8005e06:	2100      	movs	r1, #0
 8005e08:	486d      	ldr	r0, [pc, #436]	; (8005fc0 <FuncO_ApplyProfileToAux+0x298>)
 8005e0a:	f005 f8e9 	bl	800afe0 <HAL_DAC_Start_DMA>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005e12:	7bbb      	ldrb	r3, [r7, #14]
 8005e14:	4619      	mov	r1, r3
 8005e16:	4868      	ldr	r0, [pc, #416]	; (8005fb8 <FuncO_ApplyProfileToAux+0x290>)
 8005e18:	f00b f838 	bl	8010e8c <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8005e1c:	486a      	ldr	r0, [pc, #424]	; (8005fc8 <FuncO_ApplyProfileToAux+0x2a0>)
 8005e1e:	f00b f8a9 	bl	8010f74 <puts>
		res = HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8005e22:	2100      	movs	r1, #0
 8005e24:	4869      	ldr	r0, [pc, #420]	; (8005fcc <FuncO_ApplyProfileToAux+0x2a4>)
 8005e26:	f005 f99d 	bl	800b164 <HAL_DAC_Stop_DMA>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005e2e:	7bbb      	ldrb	r3, [r7, #14]
 8005e30:	4619      	mov	r1, r3
 8005e32:	4861      	ldr	r0, [pc, #388]	; (8005fb8 <FuncO_ApplyProfileToAux+0x290>)
 8005e34:	f00b f82a 	bl	8010e8c <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8005e38:	4865      	ldr	r0, [pc, #404]	; (8005fd0 <FuncO_ApplyProfileToAux+0x2a8>)
 8005e3a:	f00b f89b 	bl	8010f74 <puts>
		res = HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005e3e:	2000      	movs	r0, #0
 8005e40:	f000 fc58 	bl	80066f4 <SM_GetOutputChannel>
 8005e44:	4603      	mov	r3, r0
 8005e46:	f103 0208 	add.w	r2, r3, #8
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	9300      	str	r3, [sp, #0]
 8005e4e:	2378      	movs	r3, #120	; 0x78
 8005e50:	2100      	movs	r1, #0
 8005e52:	485e      	ldr	r0, [pc, #376]	; (8005fcc <FuncO_ApplyProfileToAux+0x2a4>)
 8005e54:	f005 f8c4 	bl	800afe0 <HAL_DAC_Start_DMA>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005e5c:	7bbb      	ldrb	r3, [r7, #14]
 8005e5e:	4619      	mov	r1, r3
 8005e60:	4855      	ldr	r0, [pc, #340]	; (8005fb8 <FuncO_ApplyProfileToAux+0x290>)
 8005e62:	f00b f813 	bl	8010e8c <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Start(&htim2)\n");
 8005e66:	485b      	ldr	r0, [pc, #364]	; (8005fd4 <FuncO_ApplyProfileToAux+0x2ac>)
 8005e68:	f00b f884 	bl	8010f74 <puts>
		res = HAL_TIM_Base_Start(&htim2);
 8005e6c:	4851      	ldr	r0, [pc, #324]	; (8005fb4 <FuncO_ApplyProfileToAux+0x28c>)
 8005e6e:	f007 fa8b 	bl	800d388 <HAL_TIM_Base_Start>
 8005e72:	4603      	mov	r3, r0
 8005e74:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005e76:	7bbb      	ldrb	r3, [r7, #14]
 8005e78:	4619      	mov	r1, r3
 8005e7a:	484f      	ldr	r0, [pc, #316]	; (8005fb8 <FuncO_ApplyProfileToAux+0x290>)
 8005e7c:	f00b f806 	bl	8010e8c <iprintf>
		last_output_mode_was_pwm = 0;
 8005e80:	4b47      	ldr	r3, [pc, #284]	; (8005fa0 <FuncO_ApplyProfileToAux+0x278>)
 8005e82:	2200      	movs	r2, #0
 8005e84:	701a      	strb	r2, [r3, #0]
}
 8005e86:	e082      	b.n	8005f8e <FuncO_ApplyProfileToAux+0x266>
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 8005e88:	4847      	ldr	r0, [pc, #284]	; (8005fa8 <FuncO_ApplyProfileToAux+0x280>)
 8005e8a:	f00b f873 	bl	8010f74 <puts>
		SM_GetOutputChannel(AUX_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8005e8e:	79fc      	ldrb	r4, [r7, #7]
 8005e90:	2001      	movs	r0, #1
 8005e92:	f000 fc2f 	bl	80066f4 <SM_GetOutputChannel>
 8005e96:	4601      	mov	r1, r0
 8005e98:	4a3f      	ldr	r2, [pc, #252]	; (8005f98 <FuncO_ApplyProfileToAux+0x270>)
 8005e9a:	00e3      	lsls	r3, r4, #3
 8005e9c:	4413      	add	r3, r2
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	604b      	str	r3, [r1, #4]
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 8005ea2:	4841      	ldr	r0, [pc, #260]	; (8005fa8 <FuncO_ApplyProfileToAux+0x280>)
 8005ea4:	f00b f866 	bl	8010f74 <puts>
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile->amp_setting;
 8005ea8:	2001      	movs	r0, #1
 8005eaa:	f000 fc23 	bl	80066f4 <SM_GetOutputChannel>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	73fb      	strb	r3, [r7, #15]
		printf("VPP_ApplyProfileToAux");
 8005eb8:	483c      	ldr	r0, [pc, #240]	; (8005fac <FuncO_ApplyProfileToAux+0x284>)
 8005eba:	f00a ffe7 	bl	8010e8c <iprintf>
		VPP_ApplyProfileToAux(eTmpVppPreset);
 8005ebe:	7bfb      	ldrb	r3, [r7, #15]
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f000 ff7d 	bl	8006dc0 <VPP_ApplyProfileToAux>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Stop(&htim2)\n");
 8005ec6:	483a      	ldr	r0, [pc, #232]	; (8005fb0 <FuncO_ApplyProfileToAux+0x288>)
 8005ec8:	f00b f854 	bl	8010f74 <puts>
		res = HAL_TIM_Base_Stop(&htim2);
 8005ecc:	4839      	ldr	r0, [pc, #228]	; (8005fb4 <FuncO_ApplyProfileToAux+0x28c>)
 8005ece:	f007 fa89 	bl	800d3e4 <HAL_TIM_Base_Stop>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005ed6:	7bbb      	ldrb	r3, [r7, #14]
 8005ed8:	4619      	mov	r1, r3
 8005eda:	4837      	ldr	r0, [pc, #220]	; (8005fb8 <FuncO_ApplyProfileToAux+0x290>)
 8005edc:	f00a ffd6 	bl	8010e8c <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 8005ee0:	4836      	ldr	r0, [pc, #216]	; (8005fbc <FuncO_ApplyProfileToAux+0x294>)
 8005ee2:	f00b f847 	bl	8010f74 <puts>
		res = HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 8005ee6:	2100      	movs	r1, #0
 8005ee8:	4835      	ldr	r0, [pc, #212]	; (8005fc0 <FuncO_ApplyProfileToAux+0x298>)
 8005eea:	f005 f93b 	bl	800b164 <HAL_DAC_Stop_DMA>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005ef2:	7bbb      	ldrb	r3, [r7, #14]
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	4830      	ldr	r0, [pc, #192]	; (8005fb8 <FuncO_ApplyProfileToAux+0x290>)
 8005ef8:	f00a ffc8 	bl	8010e8c <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 8005efc:	4831      	ldr	r0, [pc, #196]	; (8005fc4 <FuncO_ApplyProfileToAux+0x29c>)
 8005efe:	f00b f839 	bl	8010f74 <puts>
		res = HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005f02:	2001      	movs	r0, #1
 8005f04:	f000 fbf6 	bl	80066f4 <SM_GetOutputChannel>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	f103 0208 	add.w	r2, r3, #8
 8005f0e:	2300      	movs	r3, #0
 8005f10:	9300      	str	r3, [sp, #0]
 8005f12:	2378      	movs	r3, #120	; 0x78
 8005f14:	2100      	movs	r1, #0
 8005f16:	482a      	ldr	r0, [pc, #168]	; (8005fc0 <FuncO_ApplyProfileToAux+0x298>)
 8005f18:	f005 f862 	bl	800afe0 <HAL_DAC_Start_DMA>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005f20:	7bbb      	ldrb	r3, [r7, #14]
 8005f22:	4619      	mov	r1, r3
 8005f24:	4824      	ldr	r0, [pc, #144]	; (8005fb8 <FuncO_ApplyProfileToAux+0x290>)
 8005f26:	f00a ffb1 	bl	8010e8c <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8005f2a:	4827      	ldr	r0, [pc, #156]	; (8005fc8 <FuncO_ApplyProfileToAux+0x2a0>)
 8005f2c:	f00b f822 	bl	8010f74 <puts>
		res = HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8005f30:	2100      	movs	r1, #0
 8005f32:	4826      	ldr	r0, [pc, #152]	; (8005fcc <FuncO_ApplyProfileToAux+0x2a4>)
 8005f34:	f005 f916 	bl	800b164 <HAL_DAC_Stop_DMA>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005f3c:	7bbb      	ldrb	r3, [r7, #14]
 8005f3e:	4619      	mov	r1, r3
 8005f40:	481d      	ldr	r0, [pc, #116]	; (8005fb8 <FuncO_ApplyProfileToAux+0x290>)
 8005f42:	f00a ffa3 	bl	8010e8c <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8005f46:	4822      	ldr	r0, [pc, #136]	; (8005fd0 <FuncO_ApplyProfileToAux+0x2a8>)
 8005f48:	f00b f814 	bl	8010f74 <puts>
		res = HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005f4c:	2000      	movs	r0, #0
 8005f4e:	f000 fbd1 	bl	80066f4 <SM_GetOutputChannel>
 8005f52:	4603      	mov	r3, r0
 8005f54:	f103 0208 	add.w	r2, r3, #8
 8005f58:	2300      	movs	r3, #0
 8005f5a:	9300      	str	r3, [sp, #0]
 8005f5c:	2378      	movs	r3, #120	; 0x78
 8005f5e:	2100      	movs	r1, #0
 8005f60:	481a      	ldr	r0, [pc, #104]	; (8005fcc <FuncO_ApplyProfileToAux+0x2a4>)
 8005f62:	f005 f83d 	bl	800afe0 <HAL_DAC_Start_DMA>
 8005f66:	4603      	mov	r3, r0
 8005f68:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005f6a:	7bbb      	ldrb	r3, [r7, #14]
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	4812      	ldr	r0, [pc, #72]	; (8005fb8 <FuncO_ApplyProfileToAux+0x290>)
 8005f70:	f00a ff8c 	bl	8010e8c <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Start(&htim2)\n");
 8005f74:	4817      	ldr	r0, [pc, #92]	; (8005fd4 <FuncO_ApplyProfileToAux+0x2ac>)
 8005f76:	f00a fffd 	bl	8010f74 <puts>
		res = HAL_TIM_Base_Start(&htim2);
 8005f7a:	480e      	ldr	r0, [pc, #56]	; (8005fb4 <FuncO_ApplyProfileToAux+0x28c>)
 8005f7c:	f007 fa04 	bl	800d388 <HAL_TIM_Base_Start>
 8005f80:	4603      	mov	r3, r0
 8005f82:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005f84:	7bbb      	ldrb	r3, [r7, #14]
 8005f86:	4619      	mov	r1, r3
 8005f88:	480b      	ldr	r0, [pc, #44]	; (8005fb8 <FuncO_ApplyProfileToAux+0x290>)
 8005f8a:	f00a ff7f 	bl	8010e8c <iprintf>
}
 8005f8e:	bf00      	nop
 8005f90:	3714      	adds	r7, #20
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd90      	pop	{r4, r7, pc}
 8005f96:	bf00      	nop
 8005f98:	20000128 	.word	0x20000128
 8005f9c:	08014d60 	.word	0x08014d60
 8005fa0:	20001e94 	.word	0x20001e94
 8005fa4:	08014d88 	.word	0x08014d88
 8005fa8:	08014db4 	.word	0x08014db4
 8005fac:	08014de0 	.word	0x08014de0
 8005fb0:	08014df8 	.word	0x08014df8
 8005fb4:	20002c54 	.word	0x20002c54
 8005fb8:	08014e2c 	.word	0x08014e2c
 8005fbc:	08014e38 	.word	0x08014e38
 8005fc0:	200029ec 	.word	0x200029ec
 8005fc4:	08014e7c 	.word	0x08014e7c
 8005fc8:	08014ec0 	.word	0x08014ec0
 8005fcc:	20002a00 	.word	0x20002a00
 8005fd0:	08014f04 	.word	0x08014f04
 8005fd4:	08014f48 	.word	0x08014f48

08005fd8 <GO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void GO_ResetLastEncoderValue()
{
 8005fd8:	b480      	push	{r7}
 8005fda:	af00      	add	r7, sp, #0
	gain_last_encoder_value = 0;
 8005fdc:	4b03      	ldr	r3, [pc, #12]	; (8005fec <GO_ResetLastEncoderValue+0x14>)
 8005fde:	2200      	movs	r2, #0
 8005fe0:	801a      	strh	r2, [r3, #0]
}
 8005fe2:	bf00      	nop
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr
 8005fec:	20001e98 	.word	0x20001e98

08005ff0 <GO_MapEncoderPositionToSignalOutput>:
 *	@param None
 *	@retval None
 *
 */
void GO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	80fb      	strh	r3, [r7, #6]
	eGainSettings_t temp_gain = SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile->gain;
 8005ffa:	2000      	movs	r0, #0
 8005ffc:	f000 fb7a 	bl	80066f4 <SM_GetOutputChannel>
 8006000:	4603      	mov	r3, r0
 8006002:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > gain_last_encoder_value)
 800600a:	4b15      	ldr	r3, [pc, #84]	; (8006060 <GO_MapEncoderPositionToSignalOutput+0x70>)
 800600c:	881b      	ldrh	r3, [r3, #0]
 800600e:	88fa      	ldrh	r2, [r7, #6]
 8006010:	429a      	cmp	r2, r3
 8006012:	d90c      	bls.n	800602e <GO_MapEncoderPositionToSignalOutput+0x3e>
	{
		temp_gain++;
 8006014:	7bfb      	ldrb	r3, [r7, #15]
 8006016:	3301      	adds	r3, #1
 8006018:	73fb      	strb	r3, [r7, #15]
		if(temp_gain > MAX_NUM_GAIN_PRESETS-1) temp_gain = SEVEN_GAIN;
 800601a:	7bfb      	ldrb	r3, [r7, #15]
 800601c:	2b07      	cmp	r3, #7
 800601e:	d901      	bls.n	8006024 <GO_MapEncoderPositionToSignalOutput+0x34>
 8006020:	2307      	movs	r3, #7
 8006022:	73fb      	strb	r3, [r7, #15]
		GO_ApplyPresetToSignal(temp_gain);
 8006024:	7bfb      	ldrb	r3, [r7, #15]
 8006026:	4618      	mov	r0, r3
 8006028:	f000 f81c 	bl	8006064 <GO_ApplyPresetToSignal>
 800602c:	e010      	b.n	8006050 <GO_MapEncoderPositionToSignalOutput+0x60>

	}
	else if (pEncoderValue < gain_last_encoder_value)
 800602e:	4b0c      	ldr	r3, [pc, #48]	; (8006060 <GO_MapEncoderPositionToSignalOutput+0x70>)
 8006030:	881b      	ldrh	r3, [r3, #0]
 8006032:	88fa      	ldrh	r2, [r7, #6]
 8006034:	429a      	cmp	r2, r3
 8006036:	d20b      	bcs.n	8006050 <GO_MapEncoderPositionToSignalOutput+0x60>
	{
		temp_gain--;
 8006038:	7bfb      	ldrb	r3, [r7, #15]
 800603a:	3b01      	subs	r3, #1
 800603c:	73fb      	strb	r3, [r7, #15]
		if(temp_gain > MAX_NUM_GAIN_PRESETS-1) temp_gain = ZERO_GAIN;
 800603e:	7bfb      	ldrb	r3, [r7, #15]
 8006040:	2b07      	cmp	r3, #7
 8006042:	d901      	bls.n	8006048 <GO_MapEncoderPositionToSignalOutput+0x58>
 8006044:	2300      	movs	r3, #0
 8006046:	73fb      	strb	r3, [r7, #15]
		GO_ApplyPresetToSignal(temp_gain);
 8006048:	7bfb      	ldrb	r3, [r7, #15]
 800604a:	4618      	mov	r0, r3
 800604c:	f000 f80a 	bl	8006064 <GO_ApplyPresetToSignal>
	}
	gain_last_encoder_value = pEncoderValue;
 8006050:	4a03      	ldr	r2, [pc, #12]	; (8006060 <GO_MapEncoderPositionToSignalOutput+0x70>)
 8006052:	88fb      	ldrh	r3, [r7, #6]
 8006054:	8013      	strh	r3, [r2, #0]

	// artifically offset PWM signal above DC
	//BO_SetPwmSignalOffsetForGain(temp_gain);

}
 8006056:	bf00      	nop
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	20001e98 	.word	0x20001e98

08006064 <GO_ApplyPresetToSignal>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSignal(eGainSettings_t pPresetEnum)
{
 8006064:	b590      	push	{r4, r7, lr}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	4603      	mov	r3, r0
 800606c:	71fb      	strb	r3, [r7, #7]




	SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile = &theGainProfiles[pPresetEnum];
 800606e:	79fc      	ldrb	r4, [r7, #7]
 8006070:	2000      	movs	r0, #0
 8006072:	f000 fb3f 	bl	80066f4 <SM_GetOutputChannel>
 8006076:	4601      	mov	r1, r0
 8006078:	4623      	mov	r3, r4
 800607a:	005b      	lsls	r3, r3, #1
 800607c:	4423      	add	r3, r4
 800607e:	4a4f      	ldr	r2, [pc, #316]	; (80061bc <GO_ApplyPresetToSignal+0x158>)
 8006080:	4413      	add	r3, r2
 8006082:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 8006086:	79fb      	ldrb	r3, [r7, #7]
 8006088:	2b07      	cmp	r3, #7
 800608a:	f200 8093 	bhi.w	80061b4 <GO_ApplyPresetToSignal+0x150>
 800608e:	a201      	add	r2, pc, #4	; (adr r2, 8006094 <GO_ApplyPresetToSignal+0x30>)
 8006090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006094:	080060b5 	.word	0x080060b5
 8006098:	080060d5 	.word	0x080060d5
 800609c:	080060f5 	.word	0x080060f5
 80060a0:	08006115 	.word	0x08006115
 80060a4:	08006135 	.word	0x08006135
 80060a8:	08006155 	.word	0x08006155
 80060ac:	08006175 	.word	0x08006175
 80060b0:	08006195 	.word	0x08006195
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 80060b4:	2200      	movs	r2, #0
 80060b6:	2101      	movs	r1, #1
 80060b8:	4841      	ldr	r0, [pc, #260]	; (80061c0 <GO_ApplyPresetToSignal+0x15c>)
 80060ba:	f006 f86b 	bl	800c194 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 80060be:	2200      	movs	r2, #0
 80060c0:	2120      	movs	r1, #32
 80060c2:	4840      	ldr	r0, [pc, #256]	; (80061c4 <GO_ApplyPresetToSignal+0x160>)
 80060c4:	f006 f866 	bl	800c194 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 80060c8:	2200      	movs	r2, #0
 80060ca:	2110      	movs	r1, #16
 80060cc:	483d      	ldr	r0, [pc, #244]	; (80061c4 <GO_ApplyPresetToSignal+0x160>)
 80060ce:	f006 f861 	bl	800c194 <HAL_GPIO_WritePin>
			break;
 80060d2:	e06f      	b.n	80061b4 <GO_ApplyPresetToSignal+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 80060d4:	2201      	movs	r2, #1
 80060d6:	2101      	movs	r1, #1
 80060d8:	4839      	ldr	r0, [pc, #228]	; (80061c0 <GO_ApplyPresetToSignal+0x15c>)
 80060da:	f006 f85b 	bl	800c194 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 80060de:	2200      	movs	r2, #0
 80060e0:	2120      	movs	r1, #32
 80060e2:	4838      	ldr	r0, [pc, #224]	; (80061c4 <GO_ApplyPresetToSignal+0x160>)
 80060e4:	f006 f856 	bl	800c194 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 80060e8:	2200      	movs	r2, #0
 80060ea:	2110      	movs	r1, #16
 80060ec:	4835      	ldr	r0, [pc, #212]	; (80061c4 <GO_ApplyPresetToSignal+0x160>)
 80060ee:	f006 f851 	bl	800c194 <HAL_GPIO_WritePin>
			break;
 80060f2:	e05f      	b.n	80061b4 <GO_ApplyPresetToSignal+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 80060f4:	2200      	movs	r2, #0
 80060f6:	2101      	movs	r1, #1
 80060f8:	4831      	ldr	r0, [pc, #196]	; (80061c0 <GO_ApplyPresetToSignal+0x15c>)
 80060fa:	f006 f84b 	bl	800c194 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 80060fe:	2201      	movs	r2, #1
 8006100:	2120      	movs	r1, #32
 8006102:	4830      	ldr	r0, [pc, #192]	; (80061c4 <GO_ApplyPresetToSignal+0x160>)
 8006104:	f006 f846 	bl	800c194 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 8006108:	2200      	movs	r2, #0
 800610a:	2110      	movs	r1, #16
 800610c:	482d      	ldr	r0, [pc, #180]	; (80061c4 <GO_ApplyPresetToSignal+0x160>)
 800610e:	f006 f841 	bl	800c194 <HAL_GPIO_WritePin>
			break;
 8006112:	e04f      	b.n	80061b4 <GO_ApplyPresetToSignal+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 8006114:	2201      	movs	r2, #1
 8006116:	2101      	movs	r1, #1
 8006118:	4829      	ldr	r0, [pc, #164]	; (80061c0 <GO_ApplyPresetToSignal+0x15c>)
 800611a:	f006 f83b 	bl	800c194 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 800611e:	2201      	movs	r2, #1
 8006120:	2120      	movs	r1, #32
 8006122:	4828      	ldr	r0, [pc, #160]	; (80061c4 <GO_ApplyPresetToSignal+0x160>)
 8006124:	f006 f836 	bl	800c194 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 8006128:	2200      	movs	r2, #0
 800612a:	2110      	movs	r1, #16
 800612c:	4825      	ldr	r0, [pc, #148]	; (80061c4 <GO_ApplyPresetToSignal+0x160>)
 800612e:	f006 f831 	bl	800c194 <HAL_GPIO_WritePin>
			break;
 8006132:	e03f      	b.n	80061b4 <GO_ApplyPresetToSignal+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 8006134:	2200      	movs	r2, #0
 8006136:	2101      	movs	r1, #1
 8006138:	4821      	ldr	r0, [pc, #132]	; (80061c0 <GO_ApplyPresetToSignal+0x15c>)
 800613a:	f006 f82b 	bl	800c194 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 800613e:	2200      	movs	r2, #0
 8006140:	2120      	movs	r1, #32
 8006142:	4820      	ldr	r0, [pc, #128]	; (80061c4 <GO_ApplyPresetToSignal+0x160>)
 8006144:	f006 f826 	bl	800c194 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 8006148:	2201      	movs	r2, #1
 800614a:	2110      	movs	r1, #16
 800614c:	481d      	ldr	r0, [pc, #116]	; (80061c4 <GO_ApplyPresetToSignal+0x160>)
 800614e:	f006 f821 	bl	800c194 <HAL_GPIO_WritePin>
			break;
 8006152:	e02f      	b.n	80061b4 <GO_ApplyPresetToSignal+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 8006154:	2201      	movs	r2, #1
 8006156:	2101      	movs	r1, #1
 8006158:	4819      	ldr	r0, [pc, #100]	; (80061c0 <GO_ApplyPresetToSignal+0x15c>)
 800615a:	f006 f81b 	bl	800c194 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 800615e:	2200      	movs	r2, #0
 8006160:	2120      	movs	r1, #32
 8006162:	4818      	ldr	r0, [pc, #96]	; (80061c4 <GO_ApplyPresetToSignal+0x160>)
 8006164:	f006 f816 	bl	800c194 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 8006168:	2201      	movs	r2, #1
 800616a:	2110      	movs	r1, #16
 800616c:	4815      	ldr	r0, [pc, #84]	; (80061c4 <GO_ApplyPresetToSignal+0x160>)
 800616e:	f006 f811 	bl	800c194 <HAL_GPIO_WritePin>
			break;
 8006172:	e01f      	b.n	80061b4 <GO_ApplyPresetToSignal+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 8006174:	2200      	movs	r2, #0
 8006176:	2101      	movs	r1, #1
 8006178:	4811      	ldr	r0, [pc, #68]	; (80061c0 <GO_ApplyPresetToSignal+0x15c>)
 800617a:	f006 f80b 	bl	800c194 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 800617e:	2201      	movs	r2, #1
 8006180:	2120      	movs	r1, #32
 8006182:	4810      	ldr	r0, [pc, #64]	; (80061c4 <GO_ApplyPresetToSignal+0x160>)
 8006184:	f006 f806 	bl	800c194 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 8006188:	2201      	movs	r2, #1
 800618a:	2110      	movs	r1, #16
 800618c:	480d      	ldr	r0, [pc, #52]	; (80061c4 <GO_ApplyPresetToSignal+0x160>)
 800618e:	f006 f801 	bl	800c194 <HAL_GPIO_WritePin>
			break;
 8006192:	e00f      	b.n	80061b4 <GO_ApplyPresetToSignal+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 8006194:	2201      	movs	r2, #1
 8006196:	2101      	movs	r1, #1
 8006198:	4809      	ldr	r0, [pc, #36]	; (80061c0 <GO_ApplyPresetToSignal+0x15c>)
 800619a:	f005 fffb 	bl	800c194 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 800619e:	2201      	movs	r2, #1
 80061a0:	2120      	movs	r1, #32
 80061a2:	4808      	ldr	r0, [pc, #32]	; (80061c4 <GO_ApplyPresetToSignal+0x160>)
 80061a4:	f005 fff6 	bl	800c194 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 80061a8:	2201      	movs	r2, #1
 80061aa:	2110      	movs	r1, #16
 80061ac:	4805      	ldr	r0, [pc, #20]	; (80061c4 <GO_ApplyPresetToSignal+0x160>)
 80061ae:	f005 fff1 	bl	800c194 <HAL_GPIO_WritePin>
			break;
 80061b2:	bf00      	nop
	}

}
 80061b4:	bf00      	nop
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd90      	pop	{r4, r7, pc}
 80061bc:	20000160 	.word	0x20000160
 80061c0:	48000400 	.word	0x48000400
 80061c4:	48000800 	.word	0x48000800

080061c8 <IT_ArbitrateInputTrigger>:
 *	@param None
 *	@retval None
 *
 */
void IT_ArbitrateInputTrigger()
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af02      	add	r7, sp, #8
	if(IT_GetTriggerStatus())
 80061ce:	f000 f927 	bl	8006420 <IT_GetTriggerStatus>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d034      	beq.n	8006242 <IT_ArbitrateInputTrigger+0x7a>
	{
		// disable timer external clock source
		OUTPUT_TIMER->SMCR &= ~(TIM_SMCR_ECE);
 80061d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80061e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061e6:	6093      	str	r3, [r2, #8]
		// disable timer enable "Filtered timer input 1" (tim_ti1fp1)
		OUTPUT_TIMER->SMCR &= ~(TIM_TS_TI1FP1);
 80061e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80061f2:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 80061f6:	6093      	str	r3, [r2, #8]
		// disable timer reset trigger mode
		OUTPUT_TIMER->SMCR &= ~(TIM_SMCR_SMS_2);
 80061f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006202:	f023 0304 	bic.w	r3, r3, #4
 8006206:	6093      	str	r3, [r2, #8]
		// set status to disabled

		// disable the comparator
		HAL_COMP_Stop(&hcomp1);
 8006208:	4863      	ldr	r0, [pc, #396]	; (8006398 <IT_ArbitrateInputTrigger+0x1d0>)
 800620a:	f004 fc7f 	bl	800ab0c <HAL_COMP_Stop>

		// stop the ADC
		HAL_ADC_Stop_DMA(&hadc1);
 800620e:	4863      	ldr	r0, [pc, #396]	; (800639c <IT_ArbitrateInputTrigger+0x1d4>)
 8006210:	f003 fa22 	bl	8009658 <HAL_ADC_Stop_DMA>

		GPIOA->AFR[0] &= ~(GPIO_AF1_TIM2);
 8006214:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006218:	6a1b      	ldr	r3, [r3, #32]
 800621a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800621e:	f023 0301 	bic.w	r3, r3, #1
 8006222:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] &= ~(GPIO_AF8_COMP1);
 8006224:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006228:	6a1b      	ldr	r3, [r3, #32]
 800622a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800622e:	f023 0308 	bic.w	r3, r3, #8
 8006232:	6213      	str	r3, [r2, #32]


		IT_SetTriggerStatus(DISABLE_TRIGGER_INPUT);
 8006234:	2000      	movs	r0, #0
 8006236:	f000 f8ff 	bl	8006438 <IT_SetTriggerStatus>

		FuncO_ApplyProfileToSignal(eDefaultFuncPreset);
 800623a:	2000      	movs	r0, #0
 800623c:	f7ff fd0e 	bl	8005c5c <FuncO_ApplyProfileToSignal>
		}
		// set status to enabled
		IT_SetTriggerStatus(ENABLE_TRIGGER_INPUT);
	}

}
 8006240:	e0a6      	b.n	8006390 <IT_ArbitrateInputTrigger+0x1c8>
		switch(IT_GetActiveTriggerMode())
 8006242:	f000 f8d1 	bl	80063e8 <IT_GetActiveTriggerMode>
 8006246:	4603      	mov	r3, r0
 8006248:	2b01      	cmp	r3, #1
 800624a:	d04a      	beq.n	80062e2 <IT_ArbitrateInputTrigger+0x11a>
 800624c:	2b02      	cmp	r3, #2
 800624e:	f000 8087 	beq.w	8006360 <IT_ArbitrateInputTrigger+0x198>
 8006252:	2b00      	cmp	r3, #0
 8006254:	d000      	beq.n	8006258 <IT_ArbitrateInputTrigger+0x90>
				break;
 8006256:	e098      	b.n	800638a <IT_ArbitrateInputTrigger+0x1c2>
				HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);		// TS5A3357 Pin6
 8006258:	2201      	movs	r2, #1
 800625a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800625e:	4850      	ldr	r0, [pc, #320]	; (80063a0 <IT_ArbitrateInputTrigger+0x1d8>)
 8006260:	f005 ff98 	bl	800c194 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); 	// TS5A3357 Pin5
 8006264:	2200      	movs	r2, #0
 8006266:	f44f 7100 	mov.w	r1, #512	; 0x200
 800626a:	484d      	ldr	r0, [pc, #308]	; (80063a0 <IT_ArbitrateInputTrigger+0x1d8>)
 800626c:	f005 ff92 	bl	800c194 <HAL_GPIO_WritePin>
				GPIOA->MODER &= ~(GPIO_MODER_MODE0_0 | GPIO_MODER_MODE0_1);	// reset mode registers
 8006270:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800627a:	f023 0303 	bic.w	r3, r3, #3
 800627e:	6013      	str	r3, [r2, #0]
				GPIOA->MODER |= (GPIO_MODER_MODE0_1);	// set port mode to AF
 8006280:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800628a:	f043 0302 	orr.w	r3, r3, #2
 800628e:	6013      	str	r3, [r2, #0]
				GPIOA->AFR[0] &= ~((1 << 0x04) | (1 << 0x03) | (1 << 0x02) | (1 << 0x01));	// reset AF registers - See Table 13 "Alternate Functions" in STM32G474 datasheet
 8006290:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006294:	6a1b      	ldr	r3, [r3, #32]
 8006296:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800629a:	f023 031e 	bic.w	r3, r3, #30
 800629e:	6213      	str	r3, [r2, #32]
				GPIOA->AFR[0] |= GPIO_AF14_TIM2;	// set AF to TIM2_ETR
 80062a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80062a4:	6a1b      	ldr	r3, [r3, #32]
 80062a6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80062aa:	f043 030e 	orr.w	r3, r3, #14
 80062ae:	6213      	str	r3, [r2, #32]
				OUTPUT_TIMER->SMCR |= (TIM_SMCR_ECE);		// enable timer external clock source
 80062b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80062ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80062be:	6093      	str	r3, [r2, #8]
				OUTPUT_TIMER->SMCR |= TIM_TS_ETRF;
 80062c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80062ca:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80062ce:	6093      	str	r3, [r2, #8]
				OUTPUT_TIMER->SMCR |= (TIM_SMCR_SMS_2);		// enable timer reset trigger mode
 80062d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80062da:	f043 0304 	orr.w	r3, r3, #4
 80062de:	6093      	str	r3, [r2, #8]
				break;
 80062e0:	e053      	b.n	800638a <IT_ArbitrateInputTrigger+0x1c2>
				HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 80062e2:	2200      	movs	r2, #0
 80062e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80062e8:	482d      	ldr	r0, [pc, #180]	; (80063a0 <IT_ArbitrateInputTrigger+0x1d8>)
 80062ea:	f005 ff53 	bl	800c194 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_SET); 		// TS5A3357 Pin5
 80062ee:	2201      	movs	r2, #1
 80062f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80062f4:	482a      	ldr	r0, [pc, #168]	; (80063a0 <IT_ArbitrateInputTrigger+0x1d8>)
 80062f6:	f005 ff4d 	bl	800c194 <HAL_GPIO_WritePin>
				COMP1->CSR |= COMP_CSR_EN;
 80062fa:	4b2a      	ldr	r3, [pc, #168]	; (80063a4 <IT_ArbitrateInputTrigger+0x1dc>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a29      	ldr	r2, [pc, #164]	; (80063a4 <IT_ArbitrateInputTrigger+0x1dc>)
 8006300:	f043 0301 	orr.w	r3, r3, #1
 8006304:	6013      	str	r3, [r2, #0]
				GPIOA->AFR[0] &= ~((1 << 0x04) | (1 << 0x03) | (1 << 0x02) | (1 << 0x01));	// reset
 8006306:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800630a:	6a1b      	ldr	r3, [r3, #32]
 800630c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8006310:	f023 031e 	bic.w	r3, r3, #30
 8006314:	6213      	str	r3, [r2, #32]
				GPIOA->AFR[0] |= (GPIO_AF8_COMP1);
 8006316:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800631a:	6a1b      	ldr	r3, [r3, #32]
 800631c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8006320:	f043 0308 	orr.w	r3, r3, #8
 8006324:	6213      	str	r3, [r2, #32]
				OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 8006326:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006330:	f023 0301 	bic.w	r3, r3, #1
 8006334:	6013      	str	r3, [r2, #0]
				HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8006336:	2100      	movs	r1, #0
 8006338:	481b      	ldr	r0, [pc, #108]	; (80063a8 <IT_ArbitrateInputTrigger+0x1e0>)
 800633a:	f004 ff13 	bl	800b164 <HAL_DAC_Stop_DMA>
				HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, comp1_output_value, 1, DAC_ALIGN_12B_R);
 800633e:	2300      	movs	r3, #0
 8006340:	9300      	str	r3, [sp, #0]
 8006342:	2301      	movs	r3, #1
 8006344:	4a19      	ldr	r2, [pc, #100]	; (80063ac <IT_ArbitrateInputTrigger+0x1e4>)
 8006346:	2100      	movs	r1, #0
 8006348:	4817      	ldr	r0, [pc, #92]	; (80063a8 <IT_ArbitrateInputTrigger+0x1e0>)
 800634a:	f004 fe49 	bl	800afe0 <HAL_DAC_Start_DMA>
				OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 800634e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006358:	f043 0301 	orr.w	r3, r3, #1
 800635c:	6013      	str	r3, [r2, #0]
				break;
 800635e:	e014      	b.n	800638a <IT_ArbitrateInputTrigger+0x1c2>
				HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);		// TS5A3357 Pin6
 8006360:	2201      	movs	r2, #1
 8006362:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006366:	480e      	ldr	r0, [pc, #56]	; (80063a0 <IT_ArbitrateInputTrigger+0x1d8>)
 8006368:	f005 ff14 	bl	800c194 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_SET);		// TS5A3357 Pin5
 800636c:	2201      	movs	r2, #1
 800636e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006372:	480b      	ldr	r0, [pc, #44]	; (80063a0 <IT_ArbitrateInputTrigger+0x1d8>)
 8006374:	f005 ff0e 	bl	800c194 <HAL_GPIO_WritePin>
				HAL_ADC_Start_DMA(&hadc1, trigger_input, TRIGGER_DATA_SIZE);
 8006378:	22f0      	movs	r2, #240	; 0xf0
 800637a:	490d      	ldr	r1, [pc, #52]	; (80063b0 <IT_ArbitrateInputTrigger+0x1e8>)
 800637c:	4807      	ldr	r0, [pc, #28]	; (800639c <IT_ArbitrateInputTrigger+0x1d4>)
 800637e:	f003 f89d 	bl	80094bc <HAL_ADC_Start_DMA>
				FuncO_ApplyProfileToSignal(eDefaultFuncPreset);
 8006382:	2000      	movs	r0, #0
 8006384:	f7ff fc6a 	bl	8005c5c <FuncO_ApplyProfileToSignal>
				break;
 8006388:	bf00      	nop
		IT_SetTriggerStatus(ENABLE_TRIGGER_INPUT);
 800638a:	2001      	movs	r0, #1
 800638c:	f000 f854 	bl	8006438 <IT_SetTriggerStatus>
}
 8006390:	bf00      	nop
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	200029c8 	.word	0x200029c8
 800639c:	200028fc 	.word	0x200028fc
 80063a0:	48000800 	.word	0x48000800
 80063a4:	40010200 	.word	0x40010200
 80063a8:	20002a00 	.word	0x20002a00
 80063ac:	2000232c 	.word	0x2000232c
 80063b0:	20001e9c 	.word	0x20001e9c

080063b4 <IT_CycleInputTriggerMode>:
 *	@param None
 *	@retval None
 *
 */
void IT_CycleInputTriggerMode()
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	af00      	add	r7, sp, #0
	// change the trigger input mode
	switch(IT_GetActiveTriggerMode())
 80063b8:	f000 f816 	bl	80063e8 <IT_GetActiveTriggerMode>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d008      	beq.n	80063d4 <IT_CycleInputTriggerMode+0x20>
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d00a      	beq.n	80063dc <IT_CycleInputTriggerMode+0x28>
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d000      	beq.n	80063cc <IT_CycleInputTriggerMode+0x18>
		case INPUT_TRIGGER_ADC:
			IT_SetActiveTriggerMode(INPUT_TRIGGER_TIM);
			break;

		default:
			break;
 80063ca:	e00b      	b.n	80063e4 <IT_CycleInputTriggerMode+0x30>
			IT_SetActiveTriggerMode(INPUT_TRIGGER_COMP);
 80063cc:	2001      	movs	r0, #1
 80063ce:	f000 f817 	bl	8006400 <IT_SetActiveTriggerMode>
			break;
 80063d2:	e007      	b.n	80063e4 <IT_CycleInputTriggerMode+0x30>
			IT_SetActiveTriggerMode(INPUT_TRIGGER_ADC);
 80063d4:	2002      	movs	r0, #2
 80063d6:	f000 f813 	bl	8006400 <IT_SetActiveTriggerMode>
			break;
 80063da:	e003      	b.n	80063e4 <IT_CycleInputTriggerMode+0x30>
			IT_SetActiveTriggerMode(INPUT_TRIGGER_TIM);
 80063dc:	2000      	movs	r0, #0
 80063de:	f000 f80f 	bl	8006400 <IT_SetActiveTriggerMode>
			break;
 80063e2:	bf00      	nop
	}
}
 80063e4:	bf00      	nop
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <IT_GetActiveTriggerMode>:
 *	@param None
 *	@retval None
 *
 */
eTriggerInputMode IT_GetActiveTriggerMode()
{
 80063e8:	b480      	push	{r7}
 80063ea:	af00      	add	r7, sp, #0
	return activeInputerTriggerMode;
 80063ec:	4b03      	ldr	r3, [pc, #12]	; (80063fc <IT_GetActiveTriggerMode+0x14>)
 80063ee:	781b      	ldrb	r3, [r3, #0]
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	20000178 	.word	0x20000178

08006400 <IT_SetActiveTriggerMode>:
 *	@param None
 *	@retval None
 *
 */
void IT_SetActiveTriggerMode(eTriggerInputMode newTriggerMode)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	4603      	mov	r3, r0
 8006408:	71fb      	strb	r3, [r7, #7]
	activeInputerTriggerMode = newTriggerMode;
 800640a:	4a04      	ldr	r2, [pc, #16]	; (800641c <IT_SetActiveTriggerMode+0x1c>)
 800640c:	79fb      	ldrb	r3, [r7, #7]
 800640e:	7013      	strb	r3, [r2, #0]
}
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr
 800641c:	20000178 	.word	0x20000178

08006420 <IT_GetTriggerStatus>:
 *	@param None
 *	@retval None
 *
 */
eTriggerInput IT_GetTriggerStatus()
{
 8006420:	b480      	push	{r7}
 8006422:	af00      	add	r7, sp, #0
	return isTriggerInputEnabled;
 8006424:	4b03      	ldr	r3, [pc, #12]	; (8006434 <IT_GetTriggerStatus+0x14>)
 8006426:	781b      	ldrb	r3, [r3, #0]
}
 8006428:	4618      	mov	r0, r3
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	20001e9a 	.word	0x20001e9a

08006438 <IT_SetTriggerStatus>:
 *	@param None
 *	@retval None
 *
 */
void IT_SetTriggerStatus(eTriggerInput newTriggerStatus)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	4603      	mov	r3, r0
 8006440:	71fb      	strb	r3, [r7, #7]
	isTriggerInputEnabled = newTriggerStatus;
 8006442:	4a04      	ldr	r2, [pc, #16]	; (8006454 <IT_SetTriggerStatus+0x1c>)
 8006444:	79fb      	ldrb	r3, [r7, #7]
 8006446:	7013      	strb	r3, [r2, #0]
}
 8006448:	bf00      	nop
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr
 8006454:	20001e9a 	.word	0x20001e9a

08006458 <HAL_COMP_TriggerCallback>:
 *	@param None
 *	@retval None
 *
 */
void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
	if(HAL_COMP_GetOutputLevel(&hcomp1))
 8006460:	4808      	ldr	r0, [pc, #32]	; (8006484 <HAL_COMP_TriggerCallback+0x2c>)
 8006462:	f004 fbf9 	bl	800ac58 <HAL_COMP_GetOutputLevel>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d004      	beq.n	8006476 <HAL_COMP_TriggerCallback+0x1e>
	{
		comp1_output_value[0] = 4095;
 800646c:	4b06      	ldr	r3, [pc, #24]	; (8006488 <HAL_COMP_TriggerCallback+0x30>)
 800646e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8006472:	601a      	str	r2, [r3, #0]
	}
	else
	{
		comp1_output_value[0] = 0;
	}
}
 8006474:	e002      	b.n	800647c <HAL_COMP_TriggerCallback+0x24>
		comp1_output_value[0] = 0;
 8006476:	4b04      	ldr	r3, [pc, #16]	; (8006488 <HAL_COMP_TriggerCallback+0x30>)
 8006478:	2200      	movs	r2, #0
 800647a:	601a      	str	r2, [r3, #0]
}
 800647c:	bf00      	nop
 800647e:	3708      	adds	r7, #8
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}
 8006484:	200029c8 	.word	0x200029c8
 8006488:	2000232c 	.word	0x2000232c

0800648c <HAL_ADC_ConvCpltCallback>:
 *	@param None
 *	@retval None
 *
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
	if(trigger_input[0] == 0)
 8006494:	4b0b      	ldr	r3, [pc, #44]	; (80064c4 <HAL_ADC_ConvCpltCallback+0x38>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d104      	bne.n	80064a6 <HAL_ADC_ConvCpltCallback+0x1a>
		OUTPUT_TIMER->ARR = 1;
 800649c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80064a0:	2201      	movs	r2, #1
 80064a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80064a4:	e004      	b.n	80064b0 <HAL_ADC_ConvCpltCallback+0x24>
	else
		OUTPUT_TIMER->ARR = trigger_input[0];
 80064a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80064aa:	4b06      	ldr	r3, [pc, #24]	; (80064c4 <HAL_ADC_ConvCpltCallback+0x38>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	62d3      	str	r3, [r2, #44]	; 0x2c
	printf("%lu\n", trigger_input[0]);
 80064b0:	4b04      	ldr	r3, [pc, #16]	; (80064c4 <HAL_ADC_ConvCpltCallback+0x38>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4619      	mov	r1, r3
 80064b6:	4804      	ldr	r0, [pc, #16]	; (80064c8 <HAL_ADC_ConvCpltCallback+0x3c>)
 80064b8:	f00a fce8 	bl	8010e8c <iprintf>
}
 80064bc:	bf00      	nop
 80064be:	3708      	adds	r7, #8
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	20001e9c 	.word	0x20001e9c
 80064c8:	08014fac 	.word	0x08014fac

080064cc <SM_Init>:
void _InitOutputChannels();
void _InitAmpProfiles();
void _InitGainInDecibels();

void SM_Init()
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	af00      	add	r7, sp, #0

	FreqO_InitFreqProfiles();
 80064d0:	f7ff f828 	bl	8005524 <FreqO_InitFreqProfiles>

	_InitOutputChannels();
 80064d4:	f000 f8ae 	bl	8006634 <_InitOutputChannels>
	_InitAmpProfiles();
 80064d8:	f000 f824 	bl	8006524 <_InitAmpProfiles>

	// Start OFFSET DAC and set to positive
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 80064dc:	2110      	movs	r1, #16
 80064de:	4810      	ldr	r0, [pc, #64]	; (8006520 <SM_Init+0x54>)
 80064e0:	f004 fd2b 	bl	800af3a <HAL_DAC_Start>
	HAL_GPIO_WritePin(OFFSET_ENABLE_GPIO_Port, OFFSET_ENABLE_Pin, GPIO_PIN_SET);
 80064e4:	2201      	movs	r2, #1
 80064e6:	2108      	movs	r1, #8
 80064e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80064ec:	f005 fe52 	bl	800c194 <HAL_GPIO_WritePin>

	// send trigger input out to dac
	//HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);

	// Start DAC trigger timer
	OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 80064f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80064fa:	f043 0301 	orr.w	r3, r3, #1
 80064fe:	6013      	str	r3, [r2, #0]

	// Set the SIGNAL function and amplitude
	FuncO_ApplyProfileToSignal(eDefaultFuncPreset);
 8006500:	2000      	movs	r0, #0
 8006502:	f7ff fbab 	bl	8005c5c <FuncO_ApplyProfileToSignal>
	VPP_ApplyProfileToSignal(eDefaultVppPreset);
 8006506:	2059      	movs	r0, #89	; 0x59
 8006508:	f000 fc2c 	bl	8006d64 <VPP_ApplyProfileToSignal>

	// set the AUX function
	FuncO_ApplyProfileToAux(eDefaultFuncPreset);
 800650c:	2000      	movs	r0, #0
 800650e:	f7ff fc0b 	bl	8005d28 <FuncO_ApplyProfileToAux>

	// set freq for both SIGNAL and AUX
	FreqO_ApplyProfile(eDefaultFreqPreset);
 8006512:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006516:	f7ff f915 	bl	8005744 <FreqO_ApplyProfile>

}
 800651a:	bf00      	nop
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	20002a00 	.word	0x20002a00

08006524 <_InitAmpProfiles>:

void _InitAmpProfiles()
{
 8006524:	b590      	push	{r4, r7, lr}
 8006526:	b08b      	sub	sp, #44	; 0x2c
 8006528:	af00      	add	r7, sp, #0

	// =(TARGETVPP/LUTVPP)/GAIN
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 800652a:	2300      	movs	r3, #0
 800652c:	627b      	str	r3, [r7, #36]	; 0x24
 800652e:	e033      	b.n	8006598 <_InitAmpProfiles+0x74>
	{
		float this_amp_value = theAmpProfiles[i].amp_value;
 8006530:	493c      	ldr	r1, [pc, #240]	; (8006624 <_InitAmpProfiles+0x100>)
 8006532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006534:	4613      	mov	r3, r2
 8006536:	00db      	lsls	r3, r3, #3
 8006538:	1a9b      	subs	r3, r3, r2
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	440b      	add	r3, r1
 800653e:	3304      	adds	r3, #4
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	613b      	str	r3, [r7, #16]
		float this_lut_vpp = LUT_VPP;
 8006544:	4b38      	ldr	r3, [pc, #224]	; (8006628 <_InitAmpProfiles+0x104>)
 8006546:	60fb      	str	r3, [r7, #12]
		float this_gain_preset = (float)theAmpProfiles[i].gain_preset;
 8006548:	4936      	ldr	r1, [pc, #216]	; (8006624 <_InitAmpProfiles+0x100>)
 800654a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800654c:	4613      	mov	r3, r2
 800654e:	00db      	lsls	r3, r3, #3
 8006550:	1a9b      	subs	r3, r3, r2
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	440b      	add	r3, r1
 8006556:	3308      	adds	r3, #8
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	ee07 3a90 	vmov	s15, r3
 800655e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006562:	edc7 7a02 	vstr	s15, [r7, #8]
		float new_ngc = ( (this_amp_value / this_lut_vpp) / this_gain_preset);
 8006566:	ed97 7a04 	vldr	s14, [r7, #16]
 800656a:	edd7 7a03 	vldr	s15, [r7, #12]
 800656e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006572:	ed97 7a02 	vldr	s14, [r7, #8]
 8006576:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800657a:	edc7 7a01 	vstr	s15, [r7, #4]
		theAmpProfiles[i].neg_gain_coeff = new_ngc;
 800657e:	4929      	ldr	r1, [pc, #164]	; (8006624 <_InitAmpProfiles+0x100>)
 8006580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006582:	4613      	mov	r3, r2
 8006584:	00db      	lsls	r3, r3, #3
 8006586:	1a9b      	subs	r3, r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	440b      	add	r3, r1
 800658c:	3310      	adds	r3, #16
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8006592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006594:	3301      	adds	r3, #1
 8006596:	627b      	str	r3, [r7, #36]	; 0x24
 8006598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659a:	2b61      	cmp	r3, #97	; 0x61
 800659c:	ddc8      	ble.n	8006530 <_InitAmpProfiles+0xc>
	}

	// =20*LOG10(TARGETVPP/0.001)
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 800659e:	2300      	movs	r3, #0
 80065a0:	623b      	str	r3, [r7, #32]
 80065a2:	e037      	b.n	8006614 <_InitAmpProfiles+0xf0>
	{
		float decibel_mvolt_ref = 0.001;
 80065a4:	4b21      	ldr	r3, [pc, #132]	; (800662c <_InitAmpProfiles+0x108>)
 80065a6:	61fb      	str	r3, [r7, #28]
		float this_amp_value = theAmpProfiles[i].amp_value;
 80065a8:	491e      	ldr	r1, [pc, #120]	; (8006624 <_InitAmpProfiles+0x100>)
 80065aa:	6a3a      	ldr	r2, [r7, #32]
 80065ac:	4613      	mov	r3, r2
 80065ae:	00db      	lsls	r3, r3, #3
 80065b0:	1a9b      	subs	r3, r3, r2
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	440b      	add	r3, r1
 80065b6:	3304      	adds	r3, #4
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	61bb      	str	r3, [r7, #24]
		float new_gain_decibels = 20 * log10( this_amp_value / decibel_mvolt_ref );
 80065bc:	ed97 7a06 	vldr	s14, [r7, #24]
 80065c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80065c4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80065c8:	ee16 0a90 	vmov	r0, s13
 80065cc:	f7f9 ffe4 	bl	8000598 <__aeabi_f2d>
 80065d0:	4603      	mov	r3, r0
 80065d2:	460c      	mov	r4, r1
 80065d4:	ec44 3b10 	vmov	d0, r3, r4
 80065d8:	f00c fd66 	bl	80130a8 <log10>
 80065dc:	ec51 0b10 	vmov	r0, r1, d0
 80065e0:	f04f 0200 	mov.w	r2, #0
 80065e4:	4b12      	ldr	r3, [pc, #72]	; (8006630 <_InitAmpProfiles+0x10c>)
 80065e6:	f7fa f82f 	bl	8000648 <__aeabi_dmul>
 80065ea:	4603      	mov	r3, r0
 80065ec:	460c      	mov	r4, r1
 80065ee:	4618      	mov	r0, r3
 80065f0:	4621      	mov	r1, r4
 80065f2:	f7fa fb21 	bl	8000c38 <__aeabi_d2f>
 80065f6:	4603      	mov	r3, r0
 80065f8:	617b      	str	r3, [r7, #20]
		theAmpProfiles[i].gain_decibels = new_gain_decibels;
 80065fa:	490a      	ldr	r1, [pc, #40]	; (8006624 <_InitAmpProfiles+0x100>)
 80065fc:	6a3a      	ldr	r2, [r7, #32]
 80065fe:	4613      	mov	r3, r2
 8006600:	00db      	lsls	r3, r3, #3
 8006602:	1a9b      	subs	r3, r3, r2
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	440b      	add	r3, r1
 8006608:	330c      	adds	r3, #12
 800660a:	697a      	ldr	r2, [r7, #20]
 800660c:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 800660e:	6a3b      	ldr	r3, [r7, #32]
 8006610:	3301      	adds	r3, #1
 8006612:	623b      	str	r3, [r7, #32]
 8006614:	6a3b      	ldr	r3, [r7, #32]
 8006616:	2b61      	cmp	r3, #97	; 0x61
 8006618:	ddc4      	ble.n	80065a4 <_InitAmpProfiles+0x80>

	}
}
 800661a:	bf00      	nop
 800661c:	372c      	adds	r7, #44	; 0x2c
 800661e:	46bd      	mov	sp, r7
 8006620:	bd90      	pop	{r4, r7, pc}
 8006622:	bf00      	nop
 8006624:	2000017c 	.word	0x2000017c
 8006628:	402ccccd 	.word	0x402ccccd
 800662c:	3a83126f 	.word	0x3a83126f
 8006630:	40340000 	.word	0x40340000

08006634 <_InitOutputChannels>:

void _InitOutputChannels()
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
	// initialise the SIGNAL output channel
	SignalChannel.channel = SIGNAL_CHANNEL;
 800663a:	4b28      	ldr	r3, [pc, #160]	; (80066dc <_InitOutputChannels+0xa8>)
 800663c:	2200      	movs	r2, #0
 800663e:	701a      	strb	r2, [r3, #0]
	SignalChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 8006640:	4b27      	ldr	r3, [pc, #156]	; (80066e0 <_InitOutputChannels+0xac>)
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	4a25      	ldr	r2, [pc, #148]	; (80066dc <_InitOutputChannels+0xa8>)
 8006646:	6053      	str	r3, [r2, #4]
	SignalChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 8006648:	4b24      	ldr	r3, [pc, #144]	; (80066dc <_InitOutputChannels+0xa8>)
 800664a:	4a25      	ldr	r2, [pc, #148]	; (80066e0 <_InitOutputChannels+0xac>)
 800664c:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006650:	2300      	movs	r3, #0
 8006652:	607b      	str	r3, [r7, #4]
 8006654:	e00b      	b.n	800666e <_InitOutputChannels+0x3a>
		SignalChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 8006656:	4a23      	ldr	r2, [pc, #140]	; (80066e4 <_InitOutputChannels+0xb0>)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800665e:	491f      	ldr	r1, [pc, #124]	; (80066dc <_InitOutputChannels+0xa8>)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	3302      	adds	r3, #2
 8006664:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	3301      	adds	r3, #1
 800666c:	607b      	str	r3, [r7, #4]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2b77      	cmp	r3, #119	; 0x77
 8006672:	ddf0      	ble.n	8006656 <_InitOutputChannels+0x22>

	SignalChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 8006674:	4b19      	ldr	r3, [pc, #100]	; (80066dc <_InitOutputChannels+0xa8>)
 8006676:	4a1c      	ldr	r2, [pc, #112]	; (80066e8 <_InitOutputChannels+0xb4>)
 8006678:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SignalChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 800667c:	4b17      	ldr	r3, [pc, #92]	; (80066dc <_InitOutputChannels+0xa8>)
 800667e:	4a1b      	ldr	r2, [pc, #108]	; (80066ec <_InitOutputChannels+0xb8>)
 8006680:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0

	// initialise the Aux output channel
	AuxChannel.channel = AUX_CHANNEL;
 8006684:	4b1a      	ldr	r3, [pc, #104]	; (80066f0 <_InitOutputChannels+0xbc>)
 8006686:	2201      	movs	r2, #1
 8006688:	701a      	strb	r2, [r3, #0]
	AuxChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 800668a:	4b15      	ldr	r3, [pc, #84]	; (80066e0 <_InitOutputChannels+0xac>)
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	4a18      	ldr	r2, [pc, #96]	; (80066f0 <_InitOutputChannels+0xbc>)
 8006690:	6053      	str	r3, [r2, #4]
	AuxChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 8006692:	4b17      	ldr	r3, [pc, #92]	; (80066f0 <_InitOutputChannels+0xbc>)
 8006694:	4a12      	ldr	r2, [pc, #72]	; (80066e0 <_InitOutputChannels+0xac>)
 8006696:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800669a:	2300      	movs	r3, #0
 800669c:	603b      	str	r3, [r7, #0]
 800669e:	e00b      	b.n	80066b8 <_InitOutputChannels+0x84>
		AuxChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 80066a0:	4a10      	ldr	r2, [pc, #64]	; (80066e4 <_InitOutputChannels+0xb0>)
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80066a8:	4911      	ldr	r1, [pc, #68]	; (80066f0 <_InitOutputChannels+0xbc>)
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	3302      	adds	r3, #2
 80066ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	3301      	adds	r3, #1
 80066b6:	603b      	str	r3, [r7, #0]
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	2b77      	cmp	r3, #119	; 0x77
 80066bc:	ddf0      	ble.n	80066a0 <_InitOutputChannels+0x6c>

	AuxChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 80066be:	4b0c      	ldr	r3, [pc, #48]	; (80066f0 <_InitOutputChannels+0xbc>)
 80066c0:	4a09      	ldr	r2, [pc, #36]	; (80066e8 <_InitOutputChannels+0xb4>)
 80066c2:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	AuxChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 80066c6:	4b0a      	ldr	r3, [pc, #40]	; (80066f0 <_InitOutputChannels+0xbc>)
 80066c8:	4a08      	ldr	r2, [pc, #32]	; (80066ec <_InitOutputChannels+0xb8>)
 80066ca:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0


}
 80066ce:	bf00      	nop
 80066d0:	370c      	adds	r7, #12
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	20002334 	.word	0x20002334
 80066e0:	20000128 	.word	0x20000128
 80066e4:	200014b8 	.word	0x200014b8
 80066e8:	20000b38 	.word	0x20000b38
 80066ec:	20000175 	.word	0x20000175
 80066f0:	20002528 	.word	0x20002528

080066f4 <SM_GetOutputChannel>:

sOutputChannel_t * SM_GetOutputChannel(eOutputChannel_t pChannel)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	4603      	mov	r3, r0
 80066fc:	71fb      	strb	r3, [r7, #7]

	if(!pChannel)
 80066fe:	79fb      	ldrb	r3, [r7, #7]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d101      	bne.n	8006708 <SM_GetOutputChannel+0x14>
		return &SignalChannel;
 8006704:	4b04      	ldr	r3, [pc, #16]	; (8006718 <SM_GetOutputChannel+0x24>)
 8006706:	e000      	b.n	800670a <SM_GetOutputChannel+0x16>
	else
		return &AuxChannel;
 8006708:	4b04      	ldr	r3, [pc, #16]	; (800671c <SM_GetOutputChannel+0x28>)
}
 800670a:	4618      	mov	r0, r3
 800670c:	370c      	adds	r7, #12
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	20002334 	.word	0x20002334
 800671c:	20002528 	.word	0x20002528

08006720 <SM_EnablePwmToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_EnablePwmToAux()
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b096      	sub	sp, #88	; 0x58
 8006724:	af00      	add	r7, sp, #0
	printf("SM_EnablePwmToAux\n");
 8006726:	4889      	ldr	r0, [pc, #548]	; (800694c <SM_EnablePwmToAux+0x22c>)
 8006728:	f00a fc24 	bl	8010f74 <puts>

	HAL_StatusTypeDef res = 0;
 800672c:	2300      	movs	r3, #0
 800672e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006732:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006736:	2200      	movs	r2, #0
 8006738:	601a      	str	r2, [r3, #0]
 800673a:	605a      	str	r2, [r3, #4]
 800673c:	609a      	str	r2, [r3, #8]
 800673e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006740:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006744:	2200      	movs	r2, #0
 8006746:	601a      	str	r2, [r3, #0]
 8006748:	605a      	str	r2, [r3, #4]
 800674a:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 800674c:	f107 031c 	add.w	r3, r7, #28
 8006750:	2200      	movs	r2, #0
 8006752:	601a      	str	r2, [r3, #0]
 8006754:	605a      	str	r2, [r3, #4]
 8006756:	609a      	str	r2, [r3, #8]
 8006758:	60da      	str	r2, [r3, #12]
 800675a:	611a      	str	r2, [r3, #16]
 800675c:	615a      	str	r2, [r3, #20]
 800675e:	619a      	str	r2, [r3, #24]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006760:	f107 0308 	add.w	r3, r7, #8
 8006764:	2200      	movs	r2, #0
 8006766:	601a      	str	r2, [r3, #0]
 8006768:	605a      	str	r2, [r3, #4]
 800676a:	609a      	str	r2, [r3, #8]
 800676c:	60da      	str	r2, [r3, #12]
 800676e:	611a      	str	r2, [r3, #16]


	htim3.Instance = PWM_AUX_OUT_TIM;
 8006770:	4b77      	ldr	r3, [pc, #476]	; (8006950 <SM_EnablePwmToAux+0x230>)
 8006772:	4a78      	ldr	r2, [pc, #480]	; (8006954 <SM_EnablePwmToAux+0x234>)
 8006774:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8006776:	4b76      	ldr	r3, [pc, #472]	; (8006950 <SM_EnablePwmToAux+0x230>)
 8006778:	2200      	movs	r2, #0
 800677a:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800677c:	4b74      	ldr	r3, [pc, #464]	; (8006950 <SM_EnablePwmToAux+0x230>)
 800677e:	2210      	movs	r2, #16
 8006780:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1;
 8006782:	4b73      	ldr	r3, [pc, #460]	; (8006950 <SM_EnablePwmToAux+0x230>)
 8006784:	2201      	movs	r2, #1
 8006786:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8006788:	4b71      	ldr	r3, [pc, #452]	; (8006950 <SM_EnablePwmToAux+0x230>)
 800678a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800678e:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006790:	4b6f      	ldr	r3, [pc, #444]	; (8006950 <SM_EnablePwmToAux+0x230>)
 8006792:	2280      	movs	r2, #128	; 0x80
 8006794:	619a      	str	r2, [r3, #24]
	if ((res == HAL_TIM_Base_Init(&htim3)) != HAL_OK)
 8006796:	486e      	ldr	r0, [pc, #440]	; (8006950 <SM_EnablePwmToAux+0x230>)
 8006798:	f006 fd9e 	bl	800d2d8 <HAL_TIM_Base_Init>
 800679c:	4603      	mov	r3, r0
 800679e:	461a      	mov	r2, r3
 80067a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d107      	bne.n	80067b8 <SM_EnablePwmToAux+0x98>
	{
		printf("SM_EnablePwmToAux HAL_TIM_Base_Init() Result:%u\n",res);
 80067a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067ac:	4619      	mov	r1, r3
 80067ae:	486a      	ldr	r0, [pc, #424]	; (8006958 <SM_EnablePwmToAux+0x238>)
 80067b0:	f00a fb6c 	bl	8010e8c <iprintf>
		Error_Handler();
 80067b4:	f001 fb94 	bl	8007ee0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80067b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067bc:	647b      	str	r3, [r7, #68]	; 0x44
	if ((res == HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig)) != HAL_OK)
 80067be:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80067c2:	4619      	mov	r1, r3
 80067c4:	4862      	ldr	r0, [pc, #392]	; (8006950 <SM_EnablePwmToAux+0x230>)
 80067c6:	f007 fba7 	bl	800df18 <HAL_TIM_ConfigClockSource>
 80067ca:	4603      	mov	r3, r0
 80067cc:	461a      	mov	r2, r3
 80067ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d107      	bne.n	80067e6 <SM_EnablePwmToAux+0xc6>
	{
		printf("SM_EnablePwmToAux HAL_TIM_ConfigClockSource() Result:%u\n",res);
 80067d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067da:	4619      	mov	r1, r3
 80067dc:	485f      	ldr	r0, [pc, #380]	; (800695c <SM_EnablePwmToAux+0x23c>)
 80067de:	f00a fb55 	bl	8010e8c <iprintf>
		Error_Handler();
 80067e2:	f001 fb7d 	bl	8007ee0 <Error_Handler>
	}
	if ((res == HAL_TIM_PWM_Init(&htim3)) != HAL_OK)
 80067e6:	485a      	ldr	r0, [pc, #360]	; (8006950 <SM_EnablePwmToAux+0x230>)
 80067e8:	f006 fe89 	bl	800d4fe <HAL_TIM_PWM_Init>
 80067ec:	4603      	mov	r3, r0
 80067ee:	461a      	mov	r2, r3
 80067f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d107      	bne.n	8006808 <SM_EnablePwmToAux+0xe8>
	{
		printf("SM_EnablePwmToAux HAL_TIM_PWM_Init() Result:%u\n",res);
 80067f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067fc:	4619      	mov	r1, r3
 80067fe:	4858      	ldr	r0, [pc, #352]	; (8006960 <SM_EnablePwmToAux+0x240>)
 8006800:	f00a fb44 	bl	8010e8c <iprintf>
		Error_Handler();
 8006804:	f001 fb6c 	bl	8007ee0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8006808:	2320      	movs	r3, #32
 800680a:	63bb      	str	r3, [r7, #56]	; 0x38
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800680c:	2300      	movs	r3, #0
 800680e:	643b      	str	r3, [r7, #64]	; 0x40
	if ((res == HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)) != HAL_OK)
 8006810:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006814:	4619      	mov	r1, r3
 8006816:	484e      	ldr	r0, [pc, #312]	; (8006950 <SM_EnablePwmToAux+0x230>)
 8006818:	f008 f934 	bl	800ea84 <HAL_TIMEx_MasterConfigSynchronization>
 800681c:	4603      	mov	r3, r0
 800681e:	461a      	mov	r2, r3
 8006820:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006824:	4293      	cmp	r3, r2
 8006826:	d107      	bne.n	8006838 <SM_EnablePwmToAux+0x118>
	{
		printf("SM_EnablePwmToAux HAL_TIMEx_MasterConfigSynchronization() Result:%u\n",res);
 8006828:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800682c:	4619      	mov	r1, r3
 800682e:	484d      	ldr	r0, [pc, #308]	; (8006964 <SM_EnablePwmToAux+0x244>)
 8006830:	f00a fb2c 	bl	8010e8c <iprintf>
		Error_Handler();
 8006834:	f001 fb54 	bl	8007ee0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006838:	2360      	movs	r3, #96	; 0x60
 800683a:	61fb      	str	r3, [r7, #28]
	sConfigOC.Pulse = 0;
 800683c:	2300      	movs	r3, #0
 800683e:	623b      	str	r3, [r7, #32]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006840:	2300      	movs	r3, #0
 8006842:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006844:	2300      	movs	r3, #0
 8006846:	62fb      	str	r3, [r7, #44]	; 0x2c
	if ((res == HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)) != HAL_OK)
 8006848:	f107 031c 	add.w	r3, r7, #28
 800684c:	2200      	movs	r2, #0
 800684e:	4619      	mov	r1, r3
 8006850:	483f      	ldr	r0, [pc, #252]	; (8006950 <SM_EnablePwmToAux+0x230>)
 8006852:	f007 fa51 	bl	800dcf8 <HAL_TIM_PWM_ConfigChannel>
 8006856:	4603      	mov	r3, r0
 8006858:	461a      	mov	r2, r3
 800685a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800685e:	4293      	cmp	r3, r2
 8006860:	d107      	bne.n	8006872 <SM_EnablePwmToAux+0x152>
	{
		printf("SM_EnablePwmToAux HAL_TIM_PWM_ConfigChannel() Result:%u\n",res);
 8006862:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006866:	4619      	mov	r1, r3
 8006868:	483f      	ldr	r0, [pc, #252]	; (8006968 <SM_EnablePwmToAux+0x248>)
 800686a:	f00a fb0f 	bl	8010e8c <iprintf>
		Error_Handler();
 800686e:	f001 fb37 	bl	8007ee0 <Error_Handler>
	}


	// Timer Post Initialization
	printf("SM_EnablePwmToAux: __HAL_RCC_GPIOA_CLK_ENABLE\n");
 8006872:	483e      	ldr	r0, [pc, #248]	; (800696c <SM_EnablePwmToAux+0x24c>)
 8006874:	f00a fb7e 	bl	8010f74 <puts>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8006878:	4b3d      	ldr	r3, [pc, #244]	; (8006970 <SM_EnablePwmToAux+0x250>)
 800687a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800687c:	4a3c      	ldr	r2, [pc, #240]	; (8006970 <SM_EnablePwmToAux+0x250>)
 800687e:	f043 0301 	orr.w	r3, r3, #1
 8006882:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006884:	4b3a      	ldr	r3, [pc, #232]	; (8006970 <SM_EnablePwmToAux+0x250>)
 8006886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006888:	f003 0301 	and.w	r3, r3, #1
 800688c:	607b      	str	r3, [r7, #4]
 800688e:	687b      	ldr	r3, [r7, #4]
	/**PWM_AUX_OUT_TIM GPIO Configuration
	PA4     ------> PWM_AUX_OUT_TIM_CH2
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006890:	2340      	movs	r3, #64	; 0x40
 8006892:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006894:	2302      	movs	r3, #2
 8006896:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006898:	2300      	movs	r3, #0
 800689a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800689c:	2300      	movs	r3, #0
 800689e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80068a0:	2302      	movs	r3, #2
 80068a2:	61bb      	str	r3, [r7, #24]
	printf("SM_EnablePwmToAux: HAL_GPIO_Init\n");
 80068a4:	4833      	ldr	r0, [pc, #204]	; (8006974 <SM_EnablePwmToAux+0x254>)
 80068a6:	f00a fb65 	bl	8010f74 <puts>
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068aa:	f107 0308 	add.w	r3, r7, #8
 80068ae:	4619      	mov	r1, r3
 80068b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80068b4:	f005 fa0a 	bl	800bccc <HAL_GPIO_Init>


	// PWM_AUX_OUT_TIM_MspInit 0

	/* PWM_AUX_OUT_TIM clock enable */
	printf("SM_EnablePwmToAux: __HAL_RCC_PWM_AUX_OUT_TIM_CLK_ENABLE\n");
 80068b8:	482f      	ldr	r0, [pc, #188]	; (8006978 <SM_EnablePwmToAux+0x258>)
 80068ba:	f00a fb5b 	bl	8010f74 <puts>
	__HAL_RCC_TIM3_CLK_ENABLE();
 80068be:	4b2c      	ldr	r3, [pc, #176]	; (8006970 <SM_EnablePwmToAux+0x250>)
 80068c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068c2:	4a2b      	ldr	r2, [pc, #172]	; (8006970 <SM_EnablePwmToAux+0x250>)
 80068c4:	f043 0302 	orr.w	r3, r3, #2
 80068c8:	6593      	str	r3, [r2, #88]	; 0x58
 80068ca:	4b29      	ldr	r3, [pc, #164]	; (8006970 <SM_EnablePwmToAux+0x250>)
 80068cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ce:	f003 0302 	and.w	r3, r3, #2
 80068d2:	603b      	str	r3, [r7, #0]
 80068d4:	683b      	ldr	r3, [r7, #0]

	/* PWM_AUX_OUT_TIM interrupt Init */
	printf("SM_EnablePwmToAux: HAL_NVIC_SetPriority\n");
 80068d6:	4829      	ldr	r0, [pc, #164]	; (800697c <SM_EnablePwmToAux+0x25c>)
 80068d8:	f00a fb4c 	bl	8010f74 <puts>
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80068dc:	2200      	movs	r2, #0
 80068de:	2100      	movs	r1, #0
 80068e0:	201d      	movs	r0, #29
 80068e2:	f004 fac6 	bl	800ae72 <HAL_NVIC_SetPriority>
	printf("SM_EnablePwmToAux: HAL_NVIC_EnableIRQ\n");
 80068e6:	4826      	ldr	r0, [pc, #152]	; (8006980 <SM_EnablePwmToAux+0x260>)
 80068e8:	f00a fb44 	bl	8010f74 <puts>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80068ec:	201d      	movs	r0, #29
 80068ee:	f004 fada 	bl	800aea6 <HAL_NVIC_EnableIRQ>
	/* USER CODE BEGIN PWM_AUX_OUT_TIM_MspInit 1 */

	/* USER CODE END PWM_AUX_OUT_TIM_MspInit 1 */
	printf("SM_EnablePwmToAux: HAL_TIM_PWM_Start\n");
 80068f2:	4824      	ldr	r0, [pc, #144]	; (8006984 <SM_EnablePwmToAux+0x264>)
 80068f4:	f00a fb3e 	bl	8010f74 <puts>
	if ((res == HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1)) != HAL_OK)
 80068f8:	2100      	movs	r1, #0
 80068fa:	4815      	ldr	r0, [pc, #84]	; (8006950 <SM_EnablePwmToAux+0x230>)
 80068fc:	f006 fe60 	bl	800d5c0 <HAL_TIM_PWM_Start>
 8006900:	4603      	mov	r3, r0
 8006902:	461a      	mov	r2, r3
 8006904:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006908:	4293      	cmp	r3, r2
 800690a:	d107      	bne.n	800691c <SM_EnablePwmToAux+0x1fc>
	{
		printf("SM_EnablePwmToAux HAL_TIM_PWM_Start() Result:%u\n",res);
 800690c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006910:	4619      	mov	r1, r3
 8006912:	481d      	ldr	r0, [pc, #116]	; (8006988 <SM_EnablePwmToAux+0x268>)
 8006914:	f00a faba 	bl	8010e8c <iprintf>
		Error_Handler();
 8006918:	f001 fae2 	bl	8007ee0 <Error_Handler>
	}

	printf("SM_EnablePwmToAux: GO_ApplyPresetToSignal\n");
 800691c:	481b      	ldr	r0, [pc, #108]	; (800698c <SM_EnablePwmToAux+0x26c>)
 800691e:	f00a fb29 	bl	8010f74 <puts>
	GO_ApplyPresetToSignal(eDefaultGainPreset);
 8006922:	2007      	movs	r0, #7
 8006924:	f7ff fb9e 	bl	8006064 <GO_ApplyPresetToSignal>

	// 50% duty cycle
	printf("SM_EnablePwmToAux: PWM_AUX_OUT_TIM->CCR1 = 32768\n");
 8006928:	4819      	ldr	r0, [pc, #100]	; (8006990 <SM_EnablePwmToAux+0x270>)
 800692a:	f00a fb23 	bl	8010f74 <puts>
	PWM_AUX_OUT_TIM->CCR1 = 32768;
 800692e:	4b09      	ldr	r3, [pc, #36]	; (8006954 <SM_EnablePwmToAux+0x234>)
 8006930:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006934:	635a      	str	r2, [r3, #52]	; 0x34
	printf("SM_EnablePwmToAux: PWM_AUX_OUT_TIM->ARR = 65535\n");
 8006936:	4817      	ldr	r0, [pc, #92]	; (8006994 <SM_EnablePwmToAux+0x274>)
 8006938:	f00a fb1c 	bl	8010f74 <puts>
	PWM_AUX_OUT_TIM->ARR = 65535;
 800693c:	4b05      	ldr	r3, [pc, #20]	; (8006954 <SM_EnablePwmToAux+0x234>)
 800693e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006942:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006944:	bf00      	nop
 8006946:	3758      	adds	r7, #88	; 0x58
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	08014ffc 	.word	0x08014ffc
 8006950:	200022dc 	.word	0x200022dc
 8006954:	40000400 	.word	0x40000400
 8006958:	08015010 	.word	0x08015010
 800695c:	08015044 	.word	0x08015044
 8006960:	08015080 	.word	0x08015080
 8006964:	080150b0 	.word	0x080150b0
 8006968:	080150f8 	.word	0x080150f8
 800696c:	08015134 	.word	0x08015134
 8006970:	40021000 	.word	0x40021000
 8006974:	08015164 	.word	0x08015164
 8006978:	08015188 	.word	0x08015188
 800697c:	080151c0 	.word	0x080151c0
 8006980:	080151e8 	.word	0x080151e8
 8006984:	08015210 	.word	0x08015210
 8006988:	08015238 	.word	0x08015238
 800698c:	0801526c 	.word	0x0801526c
 8006990:	08015298 	.word	0x08015298
 8006994:	080152cc 	.word	0x080152cc

08006998 <SM_DisablePwmToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_DisablePwmToAux()
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
	printf("SM_DisablePwmToAux");
 800699e:	4815      	ldr	r0, [pc, #84]	; (80069f4 <SM_DisablePwmToAux+0x5c>)
 80069a0:	f00a fa74 	bl	8010e8c <iprintf>

	HAL_StatusTypeDef res = 0;
 80069a4:	2300      	movs	r3, #0
 80069a6:	71fb      	strb	r3, [r7, #7]


	/* USER CODE BEGIN PWM_AUX_OUT_TIM_MspDeInit 0 */
	printf("SM_DisablePwmToAux: HAL_TIM_PWM_Stop\n");
 80069a8:	4813      	ldr	r0, [pc, #76]	; (80069f8 <SM_DisablePwmToAux+0x60>)
 80069aa:	f00a fae3 	bl	8010f74 <puts>
	if ((res == HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1)) != HAL_OK)
 80069ae:	2100      	movs	r1, #0
 80069b0:	4812      	ldr	r0, [pc, #72]	; (80069fc <SM_DisablePwmToAux+0x64>)
 80069b2:	f006 fedf 	bl	800d774 <HAL_TIM_PWM_Stop>
 80069b6:	4603      	mov	r3, r0
 80069b8:	461a      	mov	r2, r3
 80069ba:	79fb      	ldrb	r3, [r7, #7]
 80069bc:	4293      	cmp	r3, r2
 80069be:	d106      	bne.n	80069ce <SM_DisablePwmToAux+0x36>
	{
		printf("SM_DisablePwmToAux HAL_TIM_PWM_Stop() Result:%u\n",res);
 80069c0:	79fb      	ldrb	r3, [r7, #7]
 80069c2:	4619      	mov	r1, r3
 80069c4:	480e      	ldr	r0, [pc, #56]	; (8006a00 <SM_DisablePwmToAux+0x68>)
 80069c6:	f00a fa61 	bl	8010e8c <iprintf>
		Error_Handler();
 80069ca:	f001 fa89 	bl	8007ee0 <Error_Handler>
	}
	/* USER CODE END PWM_AUX_OUT_TIM_MspDeInit 0 */
	/* Peripheral clock disable */
	printf("SM_DisablePwmToAux __HAL_RCC_PWM_AUX_OUT_TIM_CLK_DISABLE\n");
 80069ce:	480d      	ldr	r0, [pc, #52]	; (8006a04 <SM_DisablePwmToAux+0x6c>)
 80069d0:	f00a fad0 	bl	8010f74 <puts>
	__HAL_RCC_TIM3_CLK_DISABLE();
 80069d4:	4b0c      	ldr	r3, [pc, #48]	; (8006a08 <SM_DisablePwmToAux+0x70>)
 80069d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069d8:	4a0b      	ldr	r2, [pc, #44]	; (8006a08 <SM_DisablePwmToAux+0x70>)
 80069da:	f023 0302 	bic.w	r3, r3, #2
 80069de:	6593      	str	r3, [r2, #88]	; 0x58

	/* PWM_AUX_OUT_TIM interrupt Deinit */
	printf("SM_DisablePwmToAux HAL_NVIC_DisableIRQ\n");
 80069e0:	480a      	ldr	r0, [pc, #40]	; (8006a0c <SM_DisablePwmToAux+0x74>)
 80069e2:	f00a fac7 	bl	8010f74 <puts>
	HAL_NVIC_DisableIRQ(TIM3_IRQn);
 80069e6:	201d      	movs	r0, #29
 80069e8:	f004 fa6b 	bl	800aec2 <HAL_NVIC_DisableIRQ>
	/* USER CODE BEGIN PWM_AUX_OUT_TIM_MspDeInit 1 */

	/* USER CODE END PWM_AUX_OUT_TIM_MspDeInit 1 */
}
 80069ec:	bf00      	nop
 80069ee:	3708      	adds	r7, #8
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	080152fc 	.word	0x080152fc
 80069f8:	08015310 	.word	0x08015310
 80069fc:	200022dc 	.word	0x200022dc
 8006a00:	08015338 	.word	0x08015338
 8006a04:	0801536c 	.word	0x0801536c
 8006a08:	40021000 	.word	0x40021000
 8006a0c:	080153a8 	.word	0x080153a8

08006a10 <SM_EnableDacToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_EnableDacToAux()
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b0b2      	sub	sp, #200	; 0xc8
 8006a14:	af00      	add	r7, sp, #0
	printf("SM_EnableDacToAux");
 8006a16:	4860      	ldr	r0, [pc, #384]	; (8006b98 <SM_EnableDacToAux+0x188>)
 8006a18:	f00a fa38 	bl	8010e8c <iprintf>

	HAL_StatusTypeDef res = 0;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	DAC_ChannelConfTypeDef sConfig = {0};
 8006a22:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006a26:	2230      	movs	r2, #48	; 0x30
 8006a28:	2100      	movs	r1, #0
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f009 fdca 	bl	80105c4 <memset>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a30:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006a34:	2200      	movs	r2, #0
 8006a36:	601a      	str	r2, [r3, #0]
 8006a38:	605a      	str	r2, [r3, #4]
 8006a3a:	609a      	str	r2, [r3, #8]
 8006a3c:	60da      	str	r2, [r3, #12]
 8006a3e:	611a      	str	r2, [r3, #16]
	DAC_HandleTypeDef hdac2;
	DMA_HandleTypeDef hdma_dac2_ch1;
	/** DAC Initialization
	*/
	hdac2.Instance = DAC2;
 8006a40:	4b56      	ldr	r3, [pc, #344]	; (8006b9c <SM_EnableDacToAux+0x18c>)
 8006a42:	66fb      	str	r3, [r7, #108]	; 0x6c
	if ((res == HAL_DAC_Init(&hdac2)) != HAL_OK)
 8006a44:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f004 fa54 	bl	800aef6 <HAL_DAC_Init>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	461a      	mov	r2, r3
 8006a52:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d107      	bne.n	8006a6a <SM_EnableDacToAux+0x5a>
	{
		printf("SM_EnableDacToAux HAL_DAC_Init() Result:%u\n",res);
 8006a5a:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006a5e:	4619      	mov	r1, r3
 8006a60:	484f      	ldr	r0, [pc, #316]	; (8006ba0 <SM_EnableDacToAux+0x190>)
 8006a62:	f00a fa13 	bl	8010e8c <iprintf>
		Error_Handler();
 8006a66:	f001 fa3b 	bl	8007ee0 <Error_Handler>
	}
	/** DAC channel OUT1 config
	*/
	sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006a6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006a6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	sConfig.DAC_DMADoubleDataMode = DISABLE;
 8006a72:	2300      	movs	r3, #0
 8006a74:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
	sConfig.DAC_SignedFormat = DISABLE;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	sConfig.DAC_Trigger = DAC_TRIGGER_TRGO;
 8006a84:	2312      	movs	r3, #18
 8006a86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006a90:	2300      	movs	r3, #0
 8006a92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006a96:	2301      	movs	r3, #1
 8006a98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	if ((res == HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1)) != HAL_OK)
 8006aa2:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8006aa6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006aaa:	2200      	movs	r2, #0
 8006aac:	4618      	mov	r0, r3
 8006aae:	f004 fc0b 	bl	800b2c8 <HAL_DAC_ConfigChannel>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d107      	bne.n	8006ace <SM_EnableDacToAux+0xbe>
	{
		printf("SM_EnableDacToAux HAL_DAC_ConfigChannel() Result:%u\n",res);
 8006abe:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	4837      	ldr	r0, [pc, #220]	; (8006ba4 <SM_EnableDacToAux+0x194>)
 8006ac6:	f00a f9e1 	bl	8010e8c <iprintf>
		Error_Handler();
 8006aca:	f001 fa09 	bl	8007ee0 <Error_Handler>

	/* USER CODE BEGIN DAC2_MspInit 0 */

	/* USER CODE END DAC2_MspInit 0 */
	/* DAC2 clock enable */
	printf("SM_EnableDacToAux __HAL_RCC_DAC2_CLK_ENABLE()\n");
 8006ace:	4836      	ldr	r0, [pc, #216]	; (8006ba8 <SM_EnableDacToAux+0x198>)
 8006ad0:	f00a fa50 	bl	8010f74 <puts>
	__HAL_RCC_DAC2_CLK_ENABLE();
 8006ad4:	4b35      	ldr	r3, [pc, #212]	; (8006bac <SM_EnableDacToAux+0x19c>)
 8006ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ad8:	4a34      	ldr	r2, [pc, #208]	; (8006bac <SM_EnableDacToAux+0x19c>)
 8006ada:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ade:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006ae0:	4b32      	ldr	r3, [pc, #200]	; (8006bac <SM_EnableDacToAux+0x19c>)
 8006ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ae8:	60bb      	str	r3, [r7, #8]
 8006aea:	68bb      	ldr	r3, [r7, #8]

	printf("SM_EnableDacToAux __HAL_RCC_GPIOA_CLK_ENABLE()\n");
 8006aec:	4830      	ldr	r0, [pc, #192]	; (8006bb0 <SM_EnableDacToAux+0x1a0>)
 8006aee:	f00a fa41 	bl	8010f74 <puts>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8006af2:	4b2e      	ldr	r3, [pc, #184]	; (8006bac <SM_EnableDacToAux+0x19c>)
 8006af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006af6:	4a2d      	ldr	r2, [pc, #180]	; (8006bac <SM_EnableDacToAux+0x19c>)
 8006af8:	f043 0301 	orr.w	r3, r3, #1
 8006afc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006afe:	4b2b      	ldr	r3, [pc, #172]	; (8006bac <SM_EnableDacToAux+0x19c>)
 8006b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b02:	f003 0301 	and.w	r3, r3, #1
 8006b06:	607b      	str	r3, [r7, #4]
 8006b08:	687b      	ldr	r3, [r7, #4]
	/**DAC2 GPIO Configuration
	PA6     ------> DAC2_OUT1
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006b0a:	2340      	movs	r3, #64	; 0x40
 8006b0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006b10:	2303      	movs	r3, #3
 8006b12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b16:	2300      	movs	r3, #0
 8006b18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	printf("SM_EnableDacToAux HAL_GPIO_Init()\n");
 8006b1c:	4825      	ldr	r0, [pc, #148]	; (8006bb4 <SM_EnableDacToAux+0x1a4>)
 8006b1e:	f00a fa29 	bl	8010f74 <puts>
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b22:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006b26:	4619      	mov	r1, r3
 8006b28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006b2c:	f005 f8ce 	bl	800bccc <HAL_GPIO_Init>

	/* DAC2 DMA Init */
	/* DAC2_CH1 Init */
	hdma_dac2_ch1.Instance = DMA1_Channel3;
 8006b30:	4b21      	ldr	r3, [pc, #132]	; (8006bb8 <SM_EnableDacToAux+0x1a8>)
 8006b32:	60fb      	str	r3, [r7, #12]
	hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8006b34:	2329      	movs	r3, #41	; 0x29
 8006b36:	613b      	str	r3, [r7, #16]
	hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006b38:	2310      	movs	r3, #16
 8006b3a:	617b      	str	r3, [r7, #20]
	hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	61bb      	str	r3, [r7, #24]
	hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006b40:	2380      	movs	r3, #128	; 0x80
 8006b42:	61fb      	str	r3, [r7, #28]
	hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006b44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b48:	623b      	str	r3, [r7, #32]
	hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006b4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006b4e:	627b      	str	r3, [r7, #36]	; 0x24
	hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8006b50:	2320      	movs	r3, #32
 8006b52:	62bb      	str	r3, [r7, #40]	; 0x28
	hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8006b54:	2300      	movs	r3, #0
 8006b56:	62fb      	str	r3, [r7, #44]	; 0x2c
	if ((res == HAL_DMA_Init(&hdma_dac2_ch1)) != HAL_OK)
 8006b58:	f107 030c 	add.w	r3, r7, #12
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f004 fde9 	bl	800b734 <HAL_DMA_Init>
 8006b62:	4603      	mov	r3, r0
 8006b64:	461a      	mov	r2, r3
 8006b66:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d107      	bne.n	8006b7e <SM_EnableDacToAux+0x16e>
	{
		printf("SM_EnableDacToAux HAL_DMA_Init() Result:%u\n",res);
 8006b6e:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006b72:	4619      	mov	r1, r3
 8006b74:	4811      	ldr	r0, [pc, #68]	; (8006bbc <SM_EnableDacToAux+0x1ac>)
 8006b76:	f00a f989 	bl	8010e8c <iprintf>
		Error_Handler();
 8006b7a:	f001 f9b1 	bl	8007ee0 <Error_Handler>
	}

	printf("SM_EnableDacToAux __HAL_LINKDMA()\n");
 8006b7e:	4810      	ldr	r0, [pc, #64]	; (8006bc0 <SM_EnableDacToAux+0x1b0>)
 8006b80:	f00a f9f8 	bl	8010f74 <puts>
	__HAL_LINKDMA(&hdac2,DMA_Handle1,hdma_dac2_ch1);
 8006b84:	f107 030c 	add.w	r3, r7, #12
 8006b88:	677b      	str	r3, [r7, #116]	; 0x74
 8006b8a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006b8e:	637b      	str	r3, [r7, #52]	; 0x34

    //GO_ApplyPresetToAux(eDefaultGainPreset);
}
 8006b90:	bf00      	nop
 8006b92:	37c8      	adds	r7, #200	; 0xc8
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	080153d0 	.word	0x080153d0
 8006b9c:	50000c00 	.word	0x50000c00
 8006ba0:	080153e4 	.word	0x080153e4
 8006ba4:	08015410 	.word	0x08015410
 8006ba8:	08015448 	.word	0x08015448
 8006bac:	40021000 	.word	0x40021000
 8006bb0:	08015478 	.word	0x08015478
 8006bb4:	080154a8 	.word	0x080154a8
 8006bb8:	40020030 	.word	0x40020030
 8006bbc:	080154cc 	.word	0x080154cc
 8006bc0:	080154f8 	.word	0x080154f8

08006bc4 <SM_DisableDacToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_DisableDacToAux()
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	af00      	add	r7, sp, #0


	printf("SM_DisableDacToAux\n");
 8006bc8:	4806      	ldr	r0, [pc, #24]	; (8006be4 <SM_DisableDacToAux+0x20>)
 8006bca:	f00a f9d3 	bl	8010f74 <puts>
    //__HAL_RCC_DAC2_CLK_DISABLE();

    /**DAC2 GPIO Configuration
    PA6     ------> DAC2_OUT1
    */
	printf("SM_DisableDacToAux HAL_GPIO_DeInit\n");
 8006bce:	4806      	ldr	r0, [pc, #24]	; (8006be8 <SM_DisableDacToAux+0x24>)
 8006bd0:	f00a f9d0 	bl	8010f74 <puts>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6);
 8006bd4:	2140      	movs	r1, #64	; 0x40
 8006bd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006bda:	f005 f9f9 	bl	800bfd0 <HAL_GPIO_DeInit>

}
 8006bde:	bf00      	nop
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	0801551c 	.word	0x0801551c
 8006be8:	08015530 	.word	0x08015530

08006bec <SM_GetEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t SM_GetEncoderValue(eEncoder_Inversion direction)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	71fb      	strb	r3, [r7, #7]
	if(direction)
 8006bf6:	79fb      	ldrb	r3, [r7, #7]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d008      	beq.n	8006c0e <SM_GetEncoderValue+0x22>
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
 8006bfc:	4b08      	ldr	r3, [pc, #32]	; (8006c20 <SM_GetEncoderValue+0x34>)
 8006bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c00:	b29a      	uxth	r2, r3
 8006c02:	4b07      	ldr	r3, [pc, #28]	; (8006c20 <SM_GetEncoderValue+0x34>)
 8006c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	1ad3      	subs	r3, r2, r3
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	e002      	b.n	8006c14 <SM_GetEncoderValue+0x28>
	}
	else
	{
		return ENCODER_TIMER->CNT;
 8006c0e:	4b04      	ldr	r3, [pc, #16]	; (8006c20 <SM_GetEncoderValue+0x34>)
 8006c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c12:	b29b      	uxth	r3, r3
	}
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr
 8006c20:	40012c00 	.word	0x40012c00

08006c24 <SM_GetOutputInHertz>:
 *	@param None
 *	@retval None
 *
 */
float SM_GetOutputInHertz()
{
 8006c24:	b480      	push	{r7}
 8006c26:	b085      	sub	sp, #20
 8006c28:	af00      	add	r7, sp, #0
	volatile float output_tm_psc;
	volatile float output_tm_arr;

	// safe-guard against divide by zero
	(OUTPUT_TIMER->PSC == 0) ? (output_tm_psc = 1) : (output_tm_psc = OUTPUT_TIMER->PSC);
 8006c2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d103      	bne.n	8006c3c <SM_GetOutputInHertz+0x18>
 8006c34:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006c38:	60bb      	str	r3, [r7, #8]
 8006c3a:	e008      	b.n	8006c4e <SM_GetOutputInHertz+0x2a>
 8006c3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c42:	ee07 3a90 	vmov	s15, r3
 8006c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c4a:	edc7 7a02 	vstr	s15, [r7, #8]
	(OUTPUT_TIMER->ARR == 0) ? (output_tm_arr = 1) : (output_tm_arr = OUTPUT_TIMER->ARR);
 8006c4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d103      	bne.n	8006c60 <SM_GetOutputInHertz+0x3c>
 8006c58:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006c5c:	607b      	str	r3, [r7, #4]
 8006c5e:	e008      	b.n	8006c72 <SM_GetOutputInHertz+0x4e>
 8006c60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c66:	ee07 3a90 	vmov	s15, r3
 8006c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c6e:	edc7 7a01 	vstr	s15, [r7, #4]

	float output_tm_freq = SM_MCLK / (output_tm_psc * output_tm_arr);
 8006c72:	ed97 7a02 	vldr	s14, [r7, #8]
 8006c76:	edd7 7a01 	vldr	s15, [r7, #4]
 8006c7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006c7e:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8006ca8 <SM_GetOutputInHertz+0x84>
 8006c82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c86:	edc7 7a03 	vstr	s15, [r7, #12]


	return output_tm_freq / SM_FSAMP;
 8006c8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8006c8e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8006cac <SM_GetOutputInHertz+0x88>
 8006c92:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006c96:	eef0 7a66 	vmov.f32	s15, s13
}
 8006c9a:	eeb0 0a67 	vmov.f32	s0, s15
 8006c9e:	3714      	adds	r7, #20
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr
 8006ca8:	4d2037a0 	.word	0x4d2037a0
 8006cac:	42f00000 	.word	0x42f00000

08006cb0 <SM_ConvertPeriodToHertz>:


float SM_ConvertPeriodToHertz(uint32_t period, uint16_t psc)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	460b      	mov	r3, r1
 8006cba:	807b      	strh	r3, [r7, #2]
	(psc == 0) ? (psc = 1) : psc;
 8006cbc:	887b      	ldrh	r3, [r7, #2]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d101      	bne.n	8006cc6 <SM_ConvertPeriodToHertz+0x16>
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	807b      	strh	r3, [r7, #2]

	return (float)SM_MCLK / ( (float)psc * (float)period );
 8006cc6:	887b      	ldrh	r3, [r7, #2]
 8006cc8:	ee07 3a90 	vmov	s15, r3
 8006ccc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	ee07 3a90 	vmov	s15, r3
 8006cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cde:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8006cf8 <SM_ConvertPeriodToHertz+0x48>
 8006ce2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006ce6:	eef0 7a66 	vmov.f32	s15, s13
}
 8006cea:	eeb0 0a67 	vmov.f32	s0, s15
 8006cee:	370c      	adds	r7, #12
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr
 8006cf8:	4d2037a0 	.word	0x4d2037a0

08006cfc <SM_IsFuncPwmDutyMode>:
	return (SM_MCLK / hertz) / psc;
}


uint8_t SM_IsFuncPwmDutyMode()
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	af00      	add	r7, sp, #0
	return duty_adjust_mode;
 8006d00:	4b03      	ldr	r3, [pc, #12]	; (8006d10 <SM_IsFuncPwmDutyMode+0x14>)
 8006d02:	781b      	ldrb	r3, [r3, #0]
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	2000225c 	.word	0x2000225c

08006d14 <SM_ToggleFuncPwmDutyMode>:

void SM_ToggleFuncPwmDutyMode()
{
 8006d14:	b480      	push	{r7}
 8006d16:	af00      	add	r7, sp, #0
	duty_adjust_mode ^= 1;
 8006d18:	4b05      	ldr	r3, [pc, #20]	; (8006d30 <SM_ToggleFuncPwmDutyMode+0x1c>)
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	f083 0301 	eor.w	r3, r3, #1
 8006d20:	b2da      	uxtb	r2, r3
 8006d22:	4b03      	ldr	r3, [pc, #12]	; (8006d30 <SM_ToggleFuncPwmDutyMode+0x1c>)
 8006d24:	701a      	strb	r2, [r3, #0]
}
 8006d26:	bf00      	nop
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr
 8006d30:	2000225c 	.word	0x2000225c

08006d34 <SM_ResetFuncPwmDutyMode>:

void SM_ResetFuncPwmDutyMode()
{
 8006d34:	b480      	push	{r7}
 8006d36:	af00      	add	r7, sp, #0
	duty_adjust_mode = 0;
 8006d38:	4b03      	ldr	r3, [pc, #12]	; (8006d48 <SM_ResetFuncPwmDutyMode+0x14>)
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	701a      	strb	r2, [r3, #0]

}
 8006d3e:	bf00      	nop
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr
 8006d48:	2000225c 	.word	0x2000225c

08006d4c <VPP_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ResetLastEncoderValue()
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	af00      	add	r7, sp, #0
	amp_last_encoder_value = 0;
 8006d50:	4b03      	ldr	r3, [pc, #12]	; (8006d60 <VPP_ResetLastEncoderValue+0x14>)
 8006d52:	2200      	movs	r2, #0
 8006d54:	801a      	strh	r2, [r3, #0]
}
 8006d56:	bf00      	nop
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr
 8006d60:	2000225e 	.word	0x2000225e

08006d64 <VPP_ApplyProfileToSignal>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyProfileToSignal(eAmpSettings_t pPresetEnum)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 8006d6e:	79fa      	ldrb	r2, [r7, #7]
 8006d70:	4613      	mov	r3, r2
 8006d72:	00db      	lsls	r3, r3, #3
 8006d74:	1a9b      	subs	r3, r3, r2
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	4a10      	ldr	r2, [pc, #64]	; (8006dbc <VPP_ApplyProfileToSignal+0x58>)
 8006d7a:	4413      	add	r3, r2
 8006d7c:	60fb      	str	r3, [r7, #12]

	// Set the new  amp profile to the SignalChannel object
	SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile = pNextEncPreset;
 8006d7e:	2000      	movs	r0, #0
 8006d80:	f7ff fcb8 	bl	80066f4 <SM_GetOutputChannel>
 8006d84:	4602      	mov	r2, r0
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

    // set the gain preset
	GO_ApplyPresetToSignal(pNextEncPreset->gain_preset);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	7a1b      	ldrb	r3, [r3, #8]
 8006d90:	4618      	mov	r0, r3
 8006d92:	f7ff f967 	bl	8006064 <GO_ApplyPresetToSignal>

    // Apply the next amplitude setting to the SignalChannel object
    _ProcessSignalDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	edd3 7a04 	vldr	s15, [r3, #16]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	ed93 7a05 	vldr	s14, [r3, #20]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	8b1b      	ldrh	r3, [r3, #24]
 8006da6:	4618      	mov	r0, r3
 8006da8:	eef0 0a47 	vmov.f32	s1, s14
 8006dac:	eeb0 0a67 	vmov.f32	s0, s15
 8006db0:	f000 f830 	bl	8006e14 <_ProcessSignalDataTable>


}
 8006db4:	bf00      	nop
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	2000017c 	.word	0x2000017c

08006dc0 <VPP_ApplyProfileToAux>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyProfileToAux(eAmpSettings_t pPresetEnum)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	71fb      	strb	r3, [r7, #7]

	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 8006dca:	79fa      	ldrb	r2, [r7, #7]
 8006dcc:	4613      	mov	r3, r2
 8006dce:	00db      	lsls	r3, r3, #3
 8006dd0:	1a9b      	subs	r3, r3, r2
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	4a0e      	ldr	r2, [pc, #56]	; (8006e10 <VPP_ApplyProfileToAux+0x50>)
 8006dd6:	4413      	add	r3, r2
 8006dd8:	60fb      	str	r3, [r7, #12]

	// Set the new VPP Preset to the AuxChannel object
	SM_GetOutputChannel(AUX_CHANNEL)->amp_profile = pNextEncPreset;
 8006dda:	2001      	movs	r0, #1
 8006ddc:	f7ff fc8a 	bl	80066f4 <SM_GetOutputChannel>
 8006de0:	4602      	mov	r2, r0
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

	 // set the gain preset
	//GO_ApplyPresetToAux(pNextEncPreset->gain_preset);

	// Apply the next amplitude setting to the AuxChannel object
	_ProcessAuxDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	edd3 7a04 	vldr	s15, [r3, #16]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	ed93 7a05 	vldr	s14, [r3, #20]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	8b1b      	ldrh	r3, [r3, #24]
 8006df8:	4618      	mov	r0, r3
 8006dfa:	eef0 0a47 	vmov.f32	s1, s14
 8006dfe:	eeb0 0a67 	vmov.f32	s0, s15
 8006e02:	f000 f88d 	bl	8006f20 <_ProcessAuxDataTable>



}
 8006e06:	bf00      	nop
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	2000017c 	.word	0x2000017c

08006e14 <_ProcessSignalDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSignalDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b08a      	sub	sp, #40	; 0x28
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	ed87 0a03 	vstr	s0, [r7, #12]
 8006e1e:	edc7 0a02 	vstr	s1, [r7, #8]
 8006e22:	4603      	mov	r3, r0
 8006e24:	80fb      	strh	r3, [r7, #6]
	sOutputChannel_t * pTmpOutputChannel = SM_GetOutputChannel(SIGNAL_CHANNEL);
 8006e26:	2000      	movs	r0, #0
 8006e28:	f7ff fc64 	bl	80066f4 <SM_GetOutputChannel>
 8006e2c:	6178      	str	r0, [r7, #20]
	if(pTmpOutputChannel->func_profile->func != PWM_FUNC_MODE)
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	2b06      	cmp	r3, #6
 8006e38:	d06b      	beq.n	8006f12 <_ProcessSignalDataTable+0xfe>
	{
		// copy refer lookup datat table from SignalChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e3e:	e00c      	b.n	8006e5a <_ProcessSignalDataTable+0x46>
		{
			tmpDataTable[i] = pTmpOutputChannel->ref_lut_data[i];
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	685a      	ldr	r2, [r3, #4]
 8006e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	4413      	add	r3, r2
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	4933      	ldr	r1, [pc, #204]	; (8006f1c <_ProcessSignalDataTable+0x108>)
 8006e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e56:	3301      	adds	r3, #1
 8006e58:	627b      	str	r3, [r7, #36]	; 0x24
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5c:	2b77      	cmp	r3, #119	; 0x77
 8006e5e:	ddef      	ble.n	8006e40 <_ProcessSignalDataTable+0x2c>
		}

		// calculate positive offset coefficient from encoder position
		float pos_offset_coeff = 1;
 8006e60:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006e64:	623b      	str	r3, [r7, #32]
		if(_encoder_value)
 8006e66:	88fb      	ldrh	r3, [r7, #6]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d008      	beq.n	8006e7e <_ProcessSignalDataTable+0x6a>
		{
			pos_offset_coeff = (_encoder_value/4);
 8006e6c:	88fb      	ldrh	r3, [r7, #6]
 8006e6e:	089b      	lsrs	r3, r3, #2
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	ee07 3a90 	vmov	s15, r3
 8006e76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e7a:	edc7 7a08 	vstr	s15, [r7, #32]
		}

		// adjust amplitude and offset of lookup table copy
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006e7e:	2300      	movs	r3, #0
 8006e80:	61fb      	str	r3, [r7, #28]
 8006e82:	e02e      	b.n	8006ee2 <_ProcessSignalDataTable+0xce>
		{
			tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 8006e84:	4a25      	ldr	r2, [pc, #148]	; (8006f1c <_ProcessSignalDataTable+0x108>)
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e8c:	ee07 3a90 	vmov	s15, r3
 8006e90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006e94:	edd7 7a03 	vldr	s15, [r7, #12]
 8006e98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ea0:	ee17 1a90 	vmov	r1, s15
 8006ea4:	4a1d      	ldr	r2, [pc, #116]	; (8006f1c <_ProcessSignalDataTable+0x108>)
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 8006eac:	4a1b      	ldr	r2, [pc, #108]	; (8006f1c <_ProcessSignalDataTable+0x108>)
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006eb4:	ee07 3a90 	vmov	s15, r3
 8006eb8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006ebc:	edd7 7a08 	vldr	s15, [r7, #32]
 8006ec0:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8006ec4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006ec8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ecc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ed0:	ee17 1a90 	vmov	r1, s15
 8006ed4:	4a11      	ldr	r2, [pc, #68]	; (8006f1c <_ProcessSignalDataTable+0x108>)
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	61fb      	str	r3, [r7, #28]
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	2b77      	cmp	r3, #119	; 0x77
 8006ee6:	ddcd      	ble.n	8006e84 <_ProcessSignalDataTable+0x70>
		}

		// restore lookup table copy to active lookup table in SignalChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006ee8:	2300      	movs	r3, #0
 8006eea:	61bb      	str	r3, [r7, #24]
 8006eec:	e00e      	b.n	8006f0c <_ProcessSignalDataTable+0xf8>
		{
			SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 8006eee:	2000      	movs	r0, #0
 8006ef0:	f7ff fc00 	bl	80066f4 <SM_GetOutputChannel>
 8006ef4:	4601      	mov	r1, r0
 8006ef6:	4a09      	ldr	r2, [pc, #36]	; (8006f1c <_ProcessSignalDataTable+0x108>)
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	3302      	adds	r3, #2
 8006f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	3301      	adds	r3, #1
 8006f0a:	61bb      	str	r3, [r7, #24]
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	2b77      	cmp	r3, #119	; 0x77
 8006f10:	dded      	ble.n	8006eee <_ProcessSignalDataTable+0xda>
		}
	}

}
 8006f12:	bf00      	nop
 8006f14:	3728      	adds	r7, #40	; 0x28
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	2000271c 	.word	0x2000271c

08006f20 <_ProcessAuxDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessAuxDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b088      	sub	sp, #32
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	ed87 0a03 	vstr	s0, [r7, #12]
 8006f2a:	edc7 0a02 	vstr	s1, [r7, #8]
 8006f2e:	4603      	mov	r3, r0
 8006f30:	80fb      	strh	r3, [r7, #6]
	if(SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func != PWM_FUNC_MODE)
 8006f32:	2001      	movs	r0, #1
 8006f34:	f7ff fbde 	bl	80066f4 <SM_GetOutputChannel>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	2b06      	cmp	r3, #6
 8006f42:	d059      	beq.n	8006ff8 <_ProcessAuxDataTable+0xd8>
	{
		// copy refer lookup datat table from AuxChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006f44:	2300      	movs	r3, #0
 8006f46:	61fb      	str	r3, [r7, #28]
 8006f48:	e00f      	b.n	8006f6a <_ProcessAuxDataTable+0x4a>
		{
			tmpDataTable[i] = SM_GetOutputChannel(AUX_CHANNEL)->ref_lut_data[i];
 8006f4a:	2001      	movs	r0, #1
 8006f4c:	f7ff fbd2 	bl	80066f4 <SM_GetOutputChannel>
 8006f50:	4603      	mov	r3, r0
 8006f52:	685a      	ldr	r2, [r3, #4]
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	4413      	add	r3, r2
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	4933      	ldr	r1, [pc, #204]	; (800702c <_ProcessAuxDataTable+0x10c>)
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	3301      	adds	r3, #1
 8006f68:	61fb      	str	r3, [r7, #28]
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	2b77      	cmp	r3, #119	; 0x77
 8006f6e:	ddec      	ble.n	8006f4a <_ProcessAuxDataTable+0x2a>
		}

		// calculate positive offset coefficient from encoder position
		float pos_offset_coeff = 1;
 8006f70:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006f74:	61bb      	str	r3, [r7, #24]
		if(_encoder_value)
 8006f76:	88fb      	ldrh	r3, [r7, #6]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d008      	beq.n	8006f8e <_ProcessAuxDataTable+0x6e>
		{
			pos_offset_coeff = (_encoder_value/4);
 8006f7c:	88fb      	ldrh	r3, [r7, #6]
 8006f7e:	089b      	lsrs	r3, r3, #2
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	ee07 3a90 	vmov	s15, r3
 8006f86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f8a:	edc7 7a06 	vstr	s15, [r7, #24]
		}

		// adjust amplitude and offset of lookup table copy
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006f8e:	2300      	movs	r3, #0
 8006f90:	617b      	str	r3, [r7, #20]
 8006f92:	e02e      	b.n	8006ff2 <_ProcessAuxDataTable+0xd2>
		{

			tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 8006f94:	4a25      	ldr	r2, [pc, #148]	; (800702c <_ProcessAuxDataTable+0x10c>)
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f9c:	ee07 3a90 	vmov	s15, r3
 8006fa0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006fa4:	edd7 7a03 	vldr	s15, [r7, #12]
 8006fa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fb0:	ee17 1a90 	vmov	r1, s15
 8006fb4:	4a1d      	ldr	r2, [pc, #116]	; (800702c <_ProcessAuxDataTable+0x10c>)
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 8006fbc:	4a1b      	ldr	r2, [pc, #108]	; (800702c <_ProcessAuxDataTable+0x10c>)
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fc4:	ee07 3a90 	vmov	s15, r3
 8006fc8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006fcc:	edd7 7a06 	vldr	s15, [r7, #24]
 8006fd0:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8006fd4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006fd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006fdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fe0:	ee17 1a90 	vmov	r1, s15
 8006fe4:	4a11      	ldr	r2, [pc, #68]	; (800702c <_ProcessAuxDataTable+0x10c>)
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	3301      	adds	r3, #1
 8006ff0:	617b      	str	r3, [r7, #20]
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	2b77      	cmp	r3, #119	; 0x77
 8006ff6:	ddcd      	ble.n	8006f94 <_ProcessAuxDataTable+0x74>
		}
	}


	// restore lookup table copy to active lookup table in SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	613b      	str	r3, [r7, #16]
 8006ffc:	e00e      	b.n	800701c <_ProcessAuxDataTable+0xfc>
	{
		SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 8006ffe:	2001      	movs	r0, #1
 8007000:	f7ff fb78 	bl	80066f4 <SM_GetOutputChannel>
 8007004:	4601      	mov	r1, r0
 8007006:	4a09      	ldr	r2, [pc, #36]	; (800702c <_ProcessAuxDataTable+0x10c>)
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	3302      	adds	r3, #2
 8007012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	3301      	adds	r3, #1
 800701a:	613b      	str	r3, [r7, #16]
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	2b77      	cmp	r3, #119	; 0x77
 8007020:	dded      	ble.n	8006ffe <_ProcessAuxDataTable+0xde>
	}
}
 8007022:	bf00      	nop
 8007024:	3720      	adds	r7, #32
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	2000271c 	.word	0x2000271c

08007030 <VPP_MapEncoderPositionToSignalOutput>:
 *
 *	@retval None
 *
 */
void VPP_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	4603      	mov	r3, r0
 8007038:	80fb      	strh	r3, [r7, #6]
	eAmpSettings_t tmpAmp = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 800703a:	2000      	movs	r0, #0
 800703c:	f7ff fb5a 	bl	80066f4 <SM_GetOutputChannel>
 8007040:	4603      	mov	r3, r0
 8007042:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > amp_last_encoder_value)
 800704a:	4b15      	ldr	r3, [pc, #84]	; (80070a0 <VPP_MapEncoderPositionToSignalOutput+0x70>)
 800704c:	881b      	ldrh	r3, [r3, #0]
 800704e:	88fa      	ldrh	r2, [r7, #6]
 8007050:	429a      	cmp	r2, r3
 8007052:	d90c      	bls.n	800706e <VPP_MapEncoderPositionToSignalOutput+0x3e>
	{
		tmpAmp++;
 8007054:	7bfb      	ldrb	r3, [r7, #15]
 8007056:	3301      	adds	r3, #1
 8007058:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP98;
 800705a:	7bfb      	ldrb	r3, [r7, #15]
 800705c:	2b61      	cmp	r3, #97	; 0x61
 800705e:	d901      	bls.n	8007064 <VPP_MapEncoderPositionToSignalOutput+0x34>
 8007060:	2361      	movs	r3, #97	; 0x61
 8007062:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(tmpAmp);
 8007064:	7bfb      	ldrb	r3, [r7, #15]
 8007066:	4618      	mov	r0, r3
 8007068:	f7ff fe7c 	bl	8006d64 <VPP_ApplyProfileToSignal>
 800706c:	e010      	b.n	8007090 <VPP_MapEncoderPositionToSignalOutput+0x60>
	}
	else if (pEncoderValue < amp_last_encoder_value)
 800706e:	4b0c      	ldr	r3, [pc, #48]	; (80070a0 <VPP_MapEncoderPositionToSignalOutput+0x70>)
 8007070:	881b      	ldrh	r3, [r3, #0]
 8007072:	88fa      	ldrh	r2, [r7, #6]
 8007074:	429a      	cmp	r2, r3
 8007076:	d20b      	bcs.n	8007090 <VPP_MapEncoderPositionToSignalOutput+0x60>
	{
		tmpAmp--;
 8007078:	7bfb      	ldrb	r3, [r7, #15]
 800707a:	3b01      	subs	r3, #1
 800707c:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP01;
 800707e:	7bfb      	ldrb	r3, [r7, #15]
 8007080:	2b61      	cmp	r3, #97	; 0x61
 8007082:	d901      	bls.n	8007088 <VPP_MapEncoderPositionToSignalOutput+0x58>
 8007084:	2300      	movs	r3, #0
 8007086:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(tmpAmp);
 8007088:	7bfb      	ldrb	r3, [r7, #15]
 800708a:	4618      	mov	r0, r3
 800708c:	f7ff fe6a 	bl	8006d64 <VPP_ApplyProfileToSignal>
	}
	amp_last_encoder_value = pEncoderValue;
 8007090:	4a03      	ldr	r2, [pc, #12]	; (80070a0 <VPP_MapEncoderPositionToSignalOutput+0x70>)
 8007092:	88fb      	ldrh	r3, [r7, #6]
 8007094:	8013      	strh	r3, [r2, #0]

}
 8007096:	bf00      	nop
 8007098:	3710      	adds	r7, #16
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	2000225e 	.word	0x2000225e

080070a4 <VPP_MapEncoderPositionToAuxOutput>:
 *
 *	@retval None
 *
 */
void VPP_MapEncoderPositionToAuxOutput(uint16_t pEncoderValue)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b084      	sub	sp, #16
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	4603      	mov	r3, r0
 80070ac:	80fb      	strh	r3, [r7, #6]

	eAmpSettings_t tmpAmp = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile->amp_setting;
 80070ae:	2001      	movs	r0, #1
 80070b0:	f7ff fb20 	bl	80066f4 <SM_GetOutputChannel>
 80070b4:	4603      	mov	r3, r0
 80070b6:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > amp_last_encoder_value)
 80070be:	4b15      	ldr	r3, [pc, #84]	; (8007114 <VPP_MapEncoderPositionToAuxOutput+0x70>)
 80070c0:	881b      	ldrh	r3, [r3, #0]
 80070c2:	88fa      	ldrh	r2, [r7, #6]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d90c      	bls.n	80070e2 <VPP_MapEncoderPositionToAuxOutput+0x3e>
	{
		tmpAmp++;
 80070c8:	7bfb      	ldrb	r3, [r7, #15]
 80070ca:	3301      	adds	r3, #1
 80070cc:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP98;
 80070ce:	7bfb      	ldrb	r3, [r7, #15]
 80070d0:	2b61      	cmp	r3, #97	; 0x61
 80070d2:	d901      	bls.n	80070d8 <VPP_MapEncoderPositionToAuxOutput+0x34>
 80070d4:	2361      	movs	r3, #97	; 0x61
 80070d6:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToAux(tmpAmp);
 80070d8:	7bfb      	ldrb	r3, [r7, #15]
 80070da:	4618      	mov	r0, r3
 80070dc:	f7ff fe70 	bl	8006dc0 <VPP_ApplyProfileToAux>
 80070e0:	e010      	b.n	8007104 <VPP_MapEncoderPositionToAuxOutput+0x60>
	}
	else if (pEncoderValue < amp_last_encoder_value)
 80070e2:	4b0c      	ldr	r3, [pc, #48]	; (8007114 <VPP_MapEncoderPositionToAuxOutput+0x70>)
 80070e4:	881b      	ldrh	r3, [r3, #0]
 80070e6:	88fa      	ldrh	r2, [r7, #6]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d20b      	bcs.n	8007104 <VPP_MapEncoderPositionToAuxOutput+0x60>
	{
		tmpAmp--;
 80070ec:	7bfb      	ldrb	r3, [r7, #15]
 80070ee:	3b01      	subs	r3, #1
 80070f0:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP01;
 80070f2:	7bfb      	ldrb	r3, [r7, #15]
 80070f4:	2b61      	cmp	r3, #97	; 0x61
 80070f6:	d901      	bls.n	80070fc <VPP_MapEncoderPositionToAuxOutput+0x58>
 80070f8:	2300      	movs	r3, #0
 80070fa:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToAux(tmpAmp);
 80070fc:	7bfb      	ldrb	r3, [r7, #15]
 80070fe:	4618      	mov	r0, r3
 8007100:	f7ff fe5e 	bl	8006dc0 <VPP_ApplyProfileToAux>
	}
	amp_last_encoder_value = pEncoderValue;
 8007104:	4a03      	ldr	r2, [pc, #12]	; (8007114 <VPP_MapEncoderPositionToAuxOutput+0x70>)
 8007106:	88fb      	ldrh	r3, [r7, #6]
 8007108:	8013      	strh	r3, [r2, #0]

}
 800710a:	bf00      	nop
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
 8007112:	bf00      	nop
 8007114:	2000225e 	.word	0x2000225e

08007118 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b08c      	sub	sp, #48	; 0x30
 800711c:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 800711e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007122:	2200      	movs	r2, #0
 8007124:	601a      	str	r2, [r3, #0]
 8007126:	605a      	str	r2, [r3, #4]
 8007128:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800712a:	1d3b      	adds	r3, r7, #4
 800712c:	2220      	movs	r2, #32
 800712e:	2100      	movs	r1, #0
 8007130:	4618      	mov	r0, r3
 8007132:	f009 fa47 	bl	80105c4 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8007136:	4b32      	ldr	r3, [pc, #200]	; (8007200 <MX_ADC1_Init+0xe8>)
 8007138:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800713c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800713e:	4b30      	ldr	r3, [pc, #192]	; (8007200 <MX_ADC1_Init+0xe8>)
 8007140:	2200      	movs	r2, #0
 8007142:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007144:	4b2e      	ldr	r3, [pc, #184]	; (8007200 <MX_ADC1_Init+0xe8>)
 8007146:	2200      	movs	r2, #0
 8007148:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800714a:	4b2d      	ldr	r3, [pc, #180]	; (8007200 <MX_ADC1_Init+0xe8>)
 800714c:	2200      	movs	r2, #0
 800714e:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8007150:	4b2b      	ldr	r3, [pc, #172]	; (8007200 <MX_ADC1_Init+0xe8>)
 8007152:	2200      	movs	r2, #0
 8007154:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8007156:	4b2a      	ldr	r3, [pc, #168]	; (8007200 <MX_ADC1_Init+0xe8>)
 8007158:	2200      	movs	r2, #0
 800715a:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800715c:	4b28      	ldr	r3, [pc, #160]	; (8007200 <MX_ADC1_Init+0xe8>)
 800715e:	2204      	movs	r2, #4
 8007160:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8007162:	4b27      	ldr	r3, [pc, #156]	; (8007200 <MX_ADC1_Init+0xe8>)
 8007164:	2200      	movs	r2, #0
 8007166:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8007168:	4b25      	ldr	r3, [pc, #148]	; (8007200 <MX_ADC1_Init+0xe8>)
 800716a:	2201      	movs	r2, #1
 800716c:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800716e:	4b24      	ldr	r3, [pc, #144]	; (8007200 <MX_ADC1_Init+0xe8>)
 8007170:	2201      	movs	r2, #1
 8007172:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007174:	4b22      	ldr	r3, [pc, #136]	; (8007200 <MX_ADC1_Init+0xe8>)
 8007176:	2200      	movs	r2, #0
 8007178:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800717c:	4b20      	ldr	r3, [pc, #128]	; (8007200 <MX_ADC1_Init+0xe8>)
 800717e:	2200      	movs	r2, #0
 8007180:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007182:	4b1f      	ldr	r3, [pc, #124]	; (8007200 <MX_ADC1_Init+0xe8>)
 8007184:	2200      	movs	r2, #0
 8007186:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8007188:	4b1d      	ldr	r3, [pc, #116]	; (8007200 <MX_ADC1_Init+0xe8>)
 800718a:	2201      	movs	r2, #1
 800718c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8007190:	4b1b      	ldr	r3, [pc, #108]	; (8007200 <MX_ADC1_Init+0xe8>)
 8007192:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007196:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8007198:	4b19      	ldr	r3, [pc, #100]	; (8007200 <MX_ADC1_Init+0xe8>)
 800719a:	2200      	movs	r2, #0
 800719c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80071a0:	4817      	ldr	r0, [pc, #92]	; (8007200 <MX_ADC1_Init+0xe8>)
 80071a2:	f001 ffcb 	bl	800913c <HAL_ADC_Init>
 80071a6:	4603      	mov	r3, r0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d001      	beq.n	80071b0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80071ac:	f000 fe98 	bl	8007ee0 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80071b0:	2300      	movs	r3, #0
 80071b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80071b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071b8:	4619      	mov	r1, r3
 80071ba:	4811      	ldr	r0, [pc, #68]	; (8007200 <MX_ADC1_Init+0xe8>)
 80071bc:	f003 f892 	bl	800a2e4 <HAL_ADCEx_MultiModeConfigChannel>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d001      	beq.n	80071ca <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80071c6:	f000 fe8b 	bl	8007ee0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80071ca:	4b0e      	ldr	r3, [pc, #56]	; (8007204 <MX_ADC1_Init+0xec>)
 80071cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80071ce:	2306      	movs	r3, #6
 80071d0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80071d2:	2300      	movs	r3, #0
 80071d4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80071d6:	237f      	movs	r3, #127	; 0x7f
 80071d8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80071da:	2304      	movs	r3, #4
 80071dc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80071de:	2300      	movs	r3, #0
 80071e0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80071e2:	1d3b      	adds	r3, r7, #4
 80071e4:	4619      	mov	r1, r3
 80071e6:	4806      	ldr	r0, [pc, #24]	; (8007200 <MX_ADC1_Init+0xe8>)
 80071e8:	f002 faac 	bl	8009744 <HAL_ADC_ConfigChannel>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d001      	beq.n	80071f6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80071f2:	f000 fe75 	bl	8007ee0 <Error_Handler>
  }

}
 80071f6:	bf00      	nop
 80071f8:	3730      	adds	r7, #48	; 0x30
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	200028fc 	.word	0x200028fc
 8007204:	0c900008 	.word	0x0c900008

08007208 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b08a      	sub	sp, #40	; 0x28
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007210:	f107 0314 	add.w	r3, r7, #20
 8007214:	2200      	movs	r2, #0
 8007216:	601a      	str	r2, [r3, #0]
 8007218:	605a      	str	r2, [r3, #4]
 800721a:	609a      	str	r2, [r3, #8]
 800721c:	60da      	str	r2, [r3, #12]
 800721e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007228:	d14f      	bne.n	80072ca <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800722a:	4b2a      	ldr	r3, [pc, #168]	; (80072d4 <HAL_ADC_MspInit+0xcc>)
 800722c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800722e:	4a29      	ldr	r2, [pc, #164]	; (80072d4 <HAL_ADC_MspInit+0xcc>)
 8007230:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007234:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007236:	4b27      	ldr	r3, [pc, #156]	; (80072d4 <HAL_ADC_MspInit+0xcc>)
 8007238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800723a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800723e:	613b      	str	r3, [r7, #16]
 8007240:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007242:	4b24      	ldr	r3, [pc, #144]	; (80072d4 <HAL_ADC_MspInit+0xcc>)
 8007244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007246:	4a23      	ldr	r2, [pc, #140]	; (80072d4 <HAL_ADC_MspInit+0xcc>)
 8007248:	f043 0301 	orr.w	r3, r3, #1
 800724c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800724e:	4b21      	ldr	r3, [pc, #132]	; (80072d4 <HAL_ADC_MspInit+0xcc>)
 8007250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007252:	f003 0301 	and.w	r3, r3, #1
 8007256:	60fb      	str	r3, [r7, #12]
 8007258:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800725a:	2304      	movs	r3, #4
 800725c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800725e:	2303      	movs	r3, #3
 8007260:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007262:	2300      	movs	r3, #0
 8007264:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007266:	f107 0314 	add.w	r3, r7, #20
 800726a:	4619      	mov	r1, r3
 800726c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007270:	f004 fd2c 	bl	800bccc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8007274:	4b18      	ldr	r3, [pc, #96]	; (80072d8 <HAL_ADC_MspInit+0xd0>)
 8007276:	4a19      	ldr	r2, [pc, #100]	; (80072dc <HAL_ADC_MspInit+0xd4>)
 8007278:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800727a:	4b17      	ldr	r3, [pc, #92]	; (80072d8 <HAL_ADC_MspInit+0xd0>)
 800727c:	2205      	movs	r2, #5
 800727e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007280:	4b15      	ldr	r3, [pc, #84]	; (80072d8 <HAL_ADC_MspInit+0xd0>)
 8007282:	2200      	movs	r2, #0
 8007284:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007286:	4b14      	ldr	r3, [pc, #80]	; (80072d8 <HAL_ADC_MspInit+0xd0>)
 8007288:	2200      	movs	r2, #0
 800728a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800728c:	4b12      	ldr	r3, [pc, #72]	; (80072d8 <HAL_ADC_MspInit+0xd0>)
 800728e:	2280      	movs	r2, #128	; 0x80
 8007290:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007292:	4b11      	ldr	r3, [pc, #68]	; (80072d8 <HAL_ADC_MspInit+0xd0>)
 8007294:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007298:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800729a:	4b0f      	ldr	r3, [pc, #60]	; (80072d8 <HAL_ADC_MspInit+0xd0>)
 800729c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072a0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80072a2:	4b0d      	ldr	r3, [pc, #52]	; (80072d8 <HAL_ADC_MspInit+0xd0>)
 80072a4:	2220      	movs	r2, #32
 80072a6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80072a8:	4b0b      	ldr	r3, [pc, #44]	; (80072d8 <HAL_ADC_MspInit+0xd0>)
 80072aa:	2200      	movs	r2, #0
 80072ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80072ae:	480a      	ldr	r0, [pc, #40]	; (80072d8 <HAL_ADC_MspInit+0xd0>)
 80072b0:	f004 fa40 	bl	800b734 <HAL_DMA_Init>
 80072b4:	4603      	mov	r3, r0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d001      	beq.n	80072be <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 80072ba:	f000 fe11 	bl	8007ee0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4a05      	ldr	r2, [pc, #20]	; (80072d8 <HAL_ADC_MspInit+0xd0>)
 80072c2:	655a      	str	r2, [r3, #84]	; 0x54
 80072c4:	4a04      	ldr	r2, [pc, #16]	; (80072d8 <HAL_ADC_MspInit+0xd0>)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80072ca:	bf00      	nop
 80072cc:	3728      	adds	r7, #40	; 0x28
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	40021000 	.word	0x40021000
 80072d8:	20002968 	.word	0x20002968
 80072dc:	40020008 	.word	0x40020008

080072e0 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 80072e4:	4b0f      	ldr	r3, [pc, #60]	; (8007324 <MX_COMP1_Init+0x44>)
 80072e6:	4a10      	ldr	r2, [pc, #64]	; (8007328 <MX_COMP1_Init+0x48>)
 80072e8:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80072ea:	4b0e      	ldr	r3, [pc, #56]	; (8007324 <MX_COMP1_Init+0x44>)
 80072ec:	2200      	movs	r2, #0
 80072ee:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 80072f0:	4b0c      	ldr	r3, [pc, #48]	; (8007324 <MX_COMP1_Init+0x44>)
 80072f2:	4a0e      	ldr	r2, [pc, #56]	; (800732c <MX_COMP1_Init+0x4c>)
 80072f4:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80072f6:	4b0b      	ldr	r3, [pc, #44]	; (8007324 <MX_COMP1_Init+0x44>)
 80072f8:	2200      	movs	r2, #0
 80072fa:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_HIGH;
 80072fc:	4b09      	ldr	r3, [pc, #36]	; (8007324 <MX_COMP1_Init+0x44>)
 80072fe:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8007302:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8007304:	4b07      	ldr	r3, [pc, #28]	; (8007324 <MX_COMP1_Init+0x44>)
 8007306:	2200      	movs	r2, #0
 8007308:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 800730a:	4b06      	ldr	r3, [pc, #24]	; (8007324 <MX_COMP1_Init+0x44>)
 800730c:	2231      	movs	r2, #49	; 0x31
 800730e:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8007310:	4804      	ldr	r0, [pc, #16]	; (8007324 <MX_COMP1_Init+0x44>)
 8007312:	f003 fa67 	bl	800a7e4 <HAL_COMP_Init>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d001      	beq.n	8007320 <MX_COMP1_Init+0x40>
  {
    Error_Handler();
 800731c:	f000 fde0 	bl	8007ee0 <Error_Handler>
  }

}
 8007320:	bf00      	nop
 8007322:	bd80      	pop	{r7, pc}
 8007324:	200029c8 	.word	0x200029c8
 8007328:	40010200 	.word	0x40010200
 800732c:	00800030 	.word	0x00800030

08007330 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b088      	sub	sp, #32
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007338:	f107 030c 	add.w	r3, r7, #12
 800733c:	2200      	movs	r2, #0
 800733e:	601a      	str	r2, [r3, #0]
 8007340:	605a      	str	r2, [r3, #4]
 8007342:	609a      	str	r2, [r3, #8]
 8007344:	60da      	str	r2, [r3, #12]
 8007346:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a13      	ldr	r2, [pc, #76]	; (800739c <HAL_COMP_MspInit+0x6c>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d120      	bne.n	8007394 <HAL_COMP_MspInit+0x64>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007352:	4b13      	ldr	r3, [pc, #76]	; (80073a0 <HAL_COMP_MspInit+0x70>)
 8007354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007356:	4a12      	ldr	r2, [pc, #72]	; (80073a0 <HAL_COMP_MspInit+0x70>)
 8007358:	f043 0301 	orr.w	r3, r3, #1
 800735c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800735e:	4b10      	ldr	r3, [pc, #64]	; (80073a0 <HAL_COMP_MspInit+0x70>)
 8007360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007362:	f003 0301 	and.w	r3, r3, #1
 8007366:	60bb      	str	r3, [r7, #8]
 8007368:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800736a:	2302      	movs	r3, #2
 800736c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800736e:	2303      	movs	r3, #3
 8007370:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007372:	2300      	movs	r3, #0
 8007374:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007376:	f107 030c 	add.w	r3, r7, #12
 800737a:	4619      	mov	r1, r3
 800737c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007380:	f004 fca4 	bl	800bccc <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 0, 0);
 8007384:	2200      	movs	r2, #0
 8007386:	2100      	movs	r1, #0
 8007388:	2040      	movs	r0, #64	; 0x40
 800738a:	f003 fd72 	bl	800ae72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 800738e:	2040      	movs	r0, #64	; 0x40
 8007390:	f003 fd89 	bl	800aea6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8007394:	bf00      	nop
 8007396:	3720      	adds	r7, #32
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}
 800739c:	40010200 	.word	0x40010200
 80073a0:	40021000 	.word	0x40021000

080073a4 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b08c      	sub	sp, #48	; 0x30
 80073a8:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80073aa:	463b      	mov	r3, r7
 80073ac:	2230      	movs	r2, #48	; 0x30
 80073ae:	2100      	movs	r1, #0
 80073b0:	4618      	mov	r0, r3
 80073b2:	f009 f907 	bl	80105c4 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 80073b6:	4b1e      	ldr	r3, [pc, #120]	; (8007430 <MX_DAC1_Init+0x8c>)
 80073b8:	4a1e      	ldr	r2, [pc, #120]	; (8007434 <MX_DAC1_Init+0x90>)
 80073ba:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80073bc:	481c      	ldr	r0, [pc, #112]	; (8007430 <MX_DAC1_Init+0x8c>)
 80073be:	f003 fd9a 	bl	800aef6 <HAL_DAC_Init>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d001      	beq.n	80073cc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80073c8:	f000 fd8a 	bl	8007ee0 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80073cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80073d0:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80073d2:	2300      	movs	r3, #0
 80073d4:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80073d6:	2300      	movs	r3, #0
 80073d8:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80073da:	2300      	movs	r3, #0
 80073dc:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80073de:	2312      	movs	r3, #18
 80073e0:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80073e2:	2300      	movs	r3, #0
 80073e4:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80073e6:	2300      	movs	r3, #0
 80073e8:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80073ea:	2301      	movs	r3, #1
 80073ec:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80073ee:	2300      	movs	r3, #0
 80073f0:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80073f2:	463b      	mov	r3, r7
 80073f4:	2200      	movs	r2, #0
 80073f6:	4619      	mov	r1, r3
 80073f8:	480d      	ldr	r0, [pc, #52]	; (8007430 <MX_DAC1_Init+0x8c>)
 80073fa:	f003 ff65 	bl	800b2c8 <HAL_DAC_ConfigChannel>
 80073fe:	4603      	mov	r3, r0
 8007400:	2b00      	cmp	r3, #0
 8007402:	d001      	beq.n	8007408 <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 8007404:	f000 fd6c 	bl	8007ee0 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8007408:	2300      	movs	r3, #0
 800740a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800740c:	2301      	movs	r3, #1
 800740e:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8007410:	463b      	mov	r3, r7
 8007412:	2210      	movs	r2, #16
 8007414:	4619      	mov	r1, r3
 8007416:	4806      	ldr	r0, [pc, #24]	; (8007430 <MX_DAC1_Init+0x8c>)
 8007418:	f003 ff56 	bl	800b2c8 <HAL_DAC_ConfigChannel>
 800741c:	4603      	mov	r3, r0
 800741e:	2b00      	cmp	r3, #0
 8007420:	d001      	beq.n	8007426 <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 8007422:	f000 fd5d 	bl	8007ee0 <Error_Handler>
  }

}
 8007426:	bf00      	nop
 8007428:	3730      	adds	r7, #48	; 0x30
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	20002a00 	.word	0x20002a00
 8007434:	50000800 	.word	0x50000800

08007438 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b08c      	sub	sp, #48	; 0x30
 800743c:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800743e:	463b      	mov	r3, r7
 8007440:	2230      	movs	r2, #48	; 0x30
 8007442:	2100      	movs	r1, #0
 8007444:	4618      	mov	r0, r3
 8007446:	f009 f8bd 	bl	80105c4 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 800744a:	4b16      	ldr	r3, [pc, #88]	; (80074a4 <MX_DAC2_Init+0x6c>)
 800744c:	4a16      	ldr	r2, [pc, #88]	; (80074a8 <MX_DAC2_Init+0x70>)
 800744e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8007450:	4814      	ldr	r0, [pc, #80]	; (80074a4 <MX_DAC2_Init+0x6c>)
 8007452:	f003 fd50 	bl	800aef6 <HAL_DAC_Init>
 8007456:	4603      	mov	r3, r0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d001      	beq.n	8007460 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 800745c:	f000 fd40 	bl	8007ee0 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8007460:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007464:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8007466:	2300      	movs	r3, #0
 8007468:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800746a:	2300      	movs	r3, #0
 800746c:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800746e:	2300      	movs	r3, #0
 8007470:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8007472:	2312      	movs	r3, #18
 8007474:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8007476:	2300      	movs	r3, #0
 8007478:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800747a:	2300      	movs	r3, #0
 800747c:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800747e:	2301      	movs	r3, #1
 8007480:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8007482:	2300      	movs	r3, #0
 8007484:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8007486:	463b      	mov	r3, r7
 8007488:	2200      	movs	r2, #0
 800748a:	4619      	mov	r1, r3
 800748c:	4805      	ldr	r0, [pc, #20]	; (80074a4 <MX_DAC2_Init+0x6c>)
 800748e:	f003 ff1b 	bl	800b2c8 <HAL_DAC_ConfigChannel>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d001      	beq.n	800749c <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 8007498:	f000 fd22 	bl	8007ee0 <Error_Handler>
  }

}
 800749c:	bf00      	nop
 800749e:	3730      	adds	r7, #48	; 0x30
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	200029ec 	.word	0x200029ec
 80074a8:	50000c00 	.word	0x50000c00

080074ac <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b08c      	sub	sp, #48	; 0x30
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074b4:	f107 031c 	add.w	r3, r7, #28
 80074b8:	2200      	movs	r2, #0
 80074ba:	601a      	str	r2, [r3, #0]
 80074bc:	605a      	str	r2, [r3, #4]
 80074be:	609a      	str	r2, [r3, #8]
 80074c0:	60da      	str	r2, [r3, #12]
 80074c2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a56      	ldr	r2, [pc, #344]	; (8007624 <HAL_DAC_MspInit+0x178>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d150      	bne.n	8007570 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80074ce:	4b56      	ldr	r3, [pc, #344]	; (8007628 <HAL_DAC_MspInit+0x17c>)
 80074d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074d2:	4a55      	ldr	r2, [pc, #340]	; (8007628 <HAL_DAC_MspInit+0x17c>)
 80074d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80074da:	4b53      	ldr	r3, [pc, #332]	; (8007628 <HAL_DAC_MspInit+0x17c>)
 80074dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074e2:	61bb      	str	r3, [r7, #24]
 80074e4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074e6:	4b50      	ldr	r3, [pc, #320]	; (8007628 <HAL_DAC_MspInit+0x17c>)
 80074e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074ea:	4a4f      	ldr	r2, [pc, #316]	; (8007628 <HAL_DAC_MspInit+0x17c>)
 80074ec:	f043 0301 	orr.w	r3, r3, #1
 80074f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80074f2:	4b4d      	ldr	r3, [pc, #308]	; (8007628 <HAL_DAC_MspInit+0x17c>)
 80074f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074f6:	f003 0301 	and.w	r3, r3, #1
 80074fa:	617b      	str	r3, [r7, #20]
 80074fc:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80074fe:	2330      	movs	r3, #48	; 0x30
 8007500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007502:	2303      	movs	r3, #3
 8007504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007506:	2300      	movs	r3, #0
 8007508:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800750a:	f107 031c 	add.w	r3, r7, #28
 800750e:	4619      	mov	r1, r3
 8007510:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007514:	f004 fbda 	bl	800bccc <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8007518:	4b44      	ldr	r3, [pc, #272]	; (800762c <HAL_DAC_MspInit+0x180>)
 800751a:	4a45      	ldr	r2, [pc, #276]	; (8007630 <HAL_DAC_MspInit+0x184>)
 800751c:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 800751e:	4b43      	ldr	r3, [pc, #268]	; (800762c <HAL_DAC_MspInit+0x180>)
 8007520:	2206      	movs	r2, #6
 8007522:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007524:	4b41      	ldr	r3, [pc, #260]	; (800762c <HAL_DAC_MspInit+0x180>)
 8007526:	2210      	movs	r2, #16
 8007528:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800752a:	4b40      	ldr	r3, [pc, #256]	; (800762c <HAL_DAC_MspInit+0x180>)
 800752c:	2200      	movs	r2, #0
 800752e:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8007530:	4b3e      	ldr	r3, [pc, #248]	; (800762c <HAL_DAC_MspInit+0x180>)
 8007532:	2280      	movs	r2, #128	; 0x80
 8007534:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007536:	4b3d      	ldr	r3, [pc, #244]	; (800762c <HAL_DAC_MspInit+0x180>)
 8007538:	f44f 7200 	mov.w	r2, #512	; 0x200
 800753c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800753e:	4b3b      	ldr	r3, [pc, #236]	; (800762c <HAL_DAC_MspInit+0x180>)
 8007540:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007544:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8007546:	4b39      	ldr	r3, [pc, #228]	; (800762c <HAL_DAC_MspInit+0x180>)
 8007548:	2220      	movs	r2, #32
 800754a:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800754c:	4b37      	ldr	r3, [pc, #220]	; (800762c <HAL_DAC_MspInit+0x180>)
 800754e:	2200      	movs	r2, #0
 8007550:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8007552:	4836      	ldr	r0, [pc, #216]	; (800762c <HAL_DAC_MspInit+0x180>)
 8007554:	f004 f8ee 	bl	800b734 <HAL_DMA_Init>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d001      	beq.n	8007562 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800755e:	f000 fcbf 	bl	8007ee0 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4a31      	ldr	r2, [pc, #196]	; (800762c <HAL_DAC_MspInit+0x180>)
 8007566:	609a      	str	r2, [r3, #8]
 8007568:	4a30      	ldr	r2, [pc, #192]	; (800762c <HAL_DAC_MspInit+0x180>)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 800756e:	e054      	b.n	800761a <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a2f      	ldr	r2, [pc, #188]	; (8007634 <HAL_DAC_MspInit+0x188>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d14f      	bne.n	800761a <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 800757a:	4b2b      	ldr	r3, [pc, #172]	; (8007628 <HAL_DAC_MspInit+0x17c>)
 800757c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800757e:	4a2a      	ldr	r2, [pc, #168]	; (8007628 <HAL_DAC_MspInit+0x17c>)
 8007580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007584:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007586:	4b28      	ldr	r3, [pc, #160]	; (8007628 <HAL_DAC_MspInit+0x17c>)
 8007588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800758a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800758e:	613b      	str	r3, [r7, #16]
 8007590:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007592:	4b25      	ldr	r3, [pc, #148]	; (8007628 <HAL_DAC_MspInit+0x17c>)
 8007594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007596:	4a24      	ldr	r2, [pc, #144]	; (8007628 <HAL_DAC_MspInit+0x17c>)
 8007598:	f043 0301 	orr.w	r3, r3, #1
 800759c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800759e:	4b22      	ldr	r3, [pc, #136]	; (8007628 <HAL_DAC_MspInit+0x17c>)
 80075a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075a2:	f003 0301 	and.w	r3, r3, #1
 80075a6:	60fb      	str	r3, [r7, #12]
 80075a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80075aa:	2340      	movs	r3, #64	; 0x40
 80075ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80075ae:	2303      	movs	r3, #3
 80075b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075b2:	2300      	movs	r3, #0
 80075b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075b6:	f107 031c 	add.w	r3, r7, #28
 80075ba:	4619      	mov	r1, r3
 80075bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80075c0:	f004 fb84 	bl	800bccc <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 80075c4:	4b1c      	ldr	r3, [pc, #112]	; (8007638 <HAL_DAC_MspInit+0x18c>)
 80075c6:	4a1d      	ldr	r2, [pc, #116]	; (800763c <HAL_DAC_MspInit+0x190>)
 80075c8:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 80075ca:	4b1b      	ldr	r3, [pc, #108]	; (8007638 <HAL_DAC_MspInit+0x18c>)
 80075cc:	2229      	movs	r2, #41	; 0x29
 80075ce:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80075d0:	4b19      	ldr	r3, [pc, #100]	; (8007638 <HAL_DAC_MspInit+0x18c>)
 80075d2:	2210      	movs	r2, #16
 80075d4:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80075d6:	4b18      	ldr	r3, [pc, #96]	; (8007638 <HAL_DAC_MspInit+0x18c>)
 80075d8:	2200      	movs	r2, #0
 80075da:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80075dc:	4b16      	ldr	r3, [pc, #88]	; (8007638 <HAL_DAC_MspInit+0x18c>)
 80075de:	2280      	movs	r2, #128	; 0x80
 80075e0:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80075e2:	4b15      	ldr	r3, [pc, #84]	; (8007638 <HAL_DAC_MspInit+0x18c>)
 80075e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075e8:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80075ea:	4b13      	ldr	r3, [pc, #76]	; (8007638 <HAL_DAC_MspInit+0x18c>)
 80075ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80075f0:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 80075f2:	4b11      	ldr	r3, [pc, #68]	; (8007638 <HAL_DAC_MspInit+0x18c>)
 80075f4:	2220      	movs	r2, #32
 80075f6:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80075f8:	4b0f      	ldr	r3, [pc, #60]	; (8007638 <HAL_DAC_MspInit+0x18c>)
 80075fa:	2200      	movs	r2, #0
 80075fc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 80075fe:	480e      	ldr	r0, [pc, #56]	; (8007638 <HAL_DAC_MspInit+0x18c>)
 8007600:	f004 f898 	bl	800b734 <HAL_DMA_Init>
 8007604:	4603      	mov	r3, r0
 8007606:	2b00      	cmp	r3, #0
 8007608:	d001      	beq.n	800760e <HAL_DAC_MspInit+0x162>
      Error_Handler();
 800760a:	f000 fc69 	bl	8007ee0 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	4a09      	ldr	r2, [pc, #36]	; (8007638 <HAL_DAC_MspInit+0x18c>)
 8007612:	609a      	str	r2, [r3, #8]
 8007614:	4a08      	ldr	r2, [pc, #32]	; (8007638 <HAL_DAC_MspInit+0x18c>)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6293      	str	r3, [r2, #40]	; 0x28
}
 800761a:	bf00      	nop
 800761c:	3730      	adds	r7, #48	; 0x30
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	50000800 	.word	0x50000800
 8007628:	40021000 	.word	0x40021000
 800762c:	20002270 	.word	0x20002270
 8007630:	4002001c 	.word	0x4002001c
 8007634:	50000c00 	.word	0x50000c00
 8007638:	20002a14 	.word	0x20002a14
 800763c:	40020030 	.word	0x40020030

08007640 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8007646:	4b1a      	ldr	r3, [pc, #104]	; (80076b0 <MX_DMA_Init+0x70>)
 8007648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800764a:	4a19      	ldr	r2, [pc, #100]	; (80076b0 <MX_DMA_Init+0x70>)
 800764c:	f043 0304 	orr.w	r3, r3, #4
 8007650:	6493      	str	r3, [r2, #72]	; 0x48
 8007652:	4b17      	ldr	r3, [pc, #92]	; (80076b0 <MX_DMA_Init+0x70>)
 8007654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007656:	f003 0304 	and.w	r3, r3, #4
 800765a:	607b      	str	r3, [r7, #4]
 800765c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800765e:	4b14      	ldr	r3, [pc, #80]	; (80076b0 <MX_DMA_Init+0x70>)
 8007660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007662:	4a13      	ldr	r2, [pc, #76]	; (80076b0 <MX_DMA_Init+0x70>)
 8007664:	f043 0301 	orr.w	r3, r3, #1
 8007668:	6493      	str	r3, [r2, #72]	; 0x48
 800766a:	4b11      	ldr	r3, [pc, #68]	; (80076b0 <MX_DMA_Init+0x70>)
 800766c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800766e:	f003 0301 	and.w	r3, r3, #1
 8007672:	603b      	str	r3, [r7, #0]
 8007674:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8007676:	2200      	movs	r2, #0
 8007678:	2101      	movs	r1, #1
 800767a:	200b      	movs	r0, #11
 800767c:	f003 fbf9 	bl	800ae72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8007680:	200b      	movs	r0, #11
 8007682:	f003 fc10 	bl	800aea6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8007686:	2200      	movs	r2, #0
 8007688:	2100      	movs	r1, #0
 800768a:	200c      	movs	r0, #12
 800768c:	f003 fbf1 	bl	800ae72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8007690:	200c      	movs	r0, #12
 8007692:	f003 fc08 	bl	800aea6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8007696:	2200      	movs	r2, #0
 8007698:	2100      	movs	r1, #0
 800769a:	200d      	movs	r0, #13
 800769c:	f003 fbe9 	bl	800ae72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80076a0:	200d      	movs	r0, #13
 80076a2:	f003 fc00 	bl	800aea6 <HAL_NVIC_EnableIRQ>

}
 80076a6:	bf00      	nop
 80076a8:	3708      	adds	r7, #8
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	40021000 	.word	0x40021000

080076b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80076b4:	b480      	push	{r7}
 80076b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80076b8:	4b04      	ldr	r3, [pc, #16]	; (80076cc <__NVIC_GetPriorityGrouping+0x18>)
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	0a1b      	lsrs	r3, r3, #8
 80076be:	f003 0307 	and.w	r3, r3, #7
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr
 80076cc:	e000ed00 	.word	0xe000ed00

080076d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	4603      	mov	r3, r0
 80076d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80076da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	db0b      	blt.n	80076fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80076e2:	79fb      	ldrb	r3, [r7, #7]
 80076e4:	f003 021f 	and.w	r2, r3, #31
 80076e8:	4907      	ldr	r1, [pc, #28]	; (8007708 <__NVIC_EnableIRQ+0x38>)
 80076ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076ee:	095b      	lsrs	r3, r3, #5
 80076f0:	2001      	movs	r0, #1
 80076f2:	fa00 f202 	lsl.w	r2, r0, r2
 80076f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80076fa:	bf00      	nop
 80076fc:	370c      	adds	r7, #12
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
 8007706:	bf00      	nop
 8007708:	e000e100 	.word	0xe000e100

0800770c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	4603      	mov	r3, r0
 8007714:	6039      	str	r1, [r7, #0]
 8007716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800771c:	2b00      	cmp	r3, #0
 800771e:	db0a      	blt.n	8007736 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	b2da      	uxtb	r2, r3
 8007724:	490c      	ldr	r1, [pc, #48]	; (8007758 <__NVIC_SetPriority+0x4c>)
 8007726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800772a:	0112      	lsls	r2, r2, #4
 800772c:	b2d2      	uxtb	r2, r2
 800772e:	440b      	add	r3, r1
 8007730:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007734:	e00a      	b.n	800774c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	b2da      	uxtb	r2, r3
 800773a:	4908      	ldr	r1, [pc, #32]	; (800775c <__NVIC_SetPriority+0x50>)
 800773c:	79fb      	ldrb	r3, [r7, #7]
 800773e:	f003 030f 	and.w	r3, r3, #15
 8007742:	3b04      	subs	r3, #4
 8007744:	0112      	lsls	r2, r2, #4
 8007746:	b2d2      	uxtb	r2, r2
 8007748:	440b      	add	r3, r1
 800774a:	761a      	strb	r2, [r3, #24]
}
 800774c:	bf00      	nop
 800774e:	370c      	adds	r7, #12
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr
 8007758:	e000e100 	.word	0xe000e100
 800775c:	e000ed00 	.word	0xe000ed00

08007760 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007760:	b480      	push	{r7}
 8007762:	b089      	sub	sp, #36	; 0x24
 8007764:	af00      	add	r7, sp, #0
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f003 0307 	and.w	r3, r3, #7
 8007772:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	f1c3 0307 	rsb	r3, r3, #7
 800777a:	2b04      	cmp	r3, #4
 800777c:	bf28      	it	cs
 800777e:	2304      	movcs	r3, #4
 8007780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	3304      	adds	r3, #4
 8007786:	2b06      	cmp	r3, #6
 8007788:	d902      	bls.n	8007790 <NVIC_EncodePriority+0x30>
 800778a:	69fb      	ldr	r3, [r7, #28]
 800778c:	3b03      	subs	r3, #3
 800778e:	e000      	b.n	8007792 <NVIC_EncodePriority+0x32>
 8007790:	2300      	movs	r3, #0
 8007792:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007794:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	fa02 f303 	lsl.w	r3, r2, r3
 800779e:	43da      	mvns	r2, r3
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	401a      	ands	r2, r3
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80077a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	fa01 f303 	lsl.w	r3, r1, r3
 80077b2:	43d9      	mvns	r1, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80077b8:	4313      	orrs	r3, r2
         );
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3724      	adds	r7, #36	; 0x24
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr
	...

080077c8 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b085      	sub	sp, #20
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 80077d2:	4a14      	ldr	r2, [pc, #80]	; (8007824 <LL_SYSCFG_SetEXTISource+0x5c>)
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	f003 0303 	and.w	r3, r3, #3
 80077da:	3302      	adds	r3, #2
 80077dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	0c1b      	lsrs	r3, r3, #16
 80077e4:	43db      	mvns	r3, r3
 80077e6:	ea02 0103 	and.w	r1, r2, r3
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	0c1b      	lsrs	r3, r3, #16
 80077ee:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	fa93 f3a3 	rbit	r3, r3
 80077f6:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	fab3 f383 	clz	r3, r3
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	f003 031f 	and.w	r3, r3, #31
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	409a      	lsls	r2, r3
 8007808:	4806      	ldr	r0, [pc, #24]	; (8007824 <LL_SYSCFG_SetEXTISource+0x5c>)
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	f003 0303 	and.w	r3, r3, #3
 8007810:	430a      	orrs	r2, r1
 8007812:	3302      	adds	r3, #2
 8007814:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8007818:	bf00      	nop
 800781a:	3714      	adds	r7, #20
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr
 8007824:	40010000 	.word	0x40010000

08007828 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8007828:	b480      	push	{r7}
 800782a:	b089      	sub	sp, #36	; 0x24
 800782c:	af00      	add	r7, sp, #0
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	60b9      	str	r1, [r7, #8]
 8007832:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	fa93 f3a3 	rbit	r3, r3
 8007842:	613b      	str	r3, [r7, #16]
  return result;
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	fab3 f383 	clz	r3, r3
 800784a:	b2db      	uxtb	r3, r3
 800784c:	005b      	lsls	r3, r3, #1
 800784e:	2103      	movs	r1, #3
 8007850:	fa01 f303 	lsl.w	r3, r1, r3
 8007854:	43db      	mvns	r3, r3
 8007856:	401a      	ands	r2, r3
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	fa93 f3a3 	rbit	r3, r3
 8007862:	61bb      	str	r3, [r7, #24]
  return result;
 8007864:	69bb      	ldr	r3, [r7, #24]
 8007866:	fab3 f383 	clz	r3, r3
 800786a:	b2db      	uxtb	r3, r3
 800786c:	005b      	lsls	r3, r3, #1
 800786e:	6879      	ldr	r1, [r7, #4]
 8007870:	fa01 f303 	lsl.w	r3, r1, r3
 8007874:	431a      	orrs	r2, r3
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	601a      	str	r2, [r3, #0]
}
 800787a:	bf00      	nop
 800787c:	3724      	adds	r7, #36	; 0x24
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr

08007886 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8007886:	b480      	push	{r7}
 8007888:	b089      	sub	sp, #36	; 0x24
 800788a:	af00      	add	r7, sp, #0
 800788c:	60f8      	str	r0, [r7, #12]
 800788e:	60b9      	str	r1, [r7, #8]
 8007890:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	68da      	ldr	r2, [r3, #12]
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	fa93 f3a3 	rbit	r3, r3
 80078a0:	613b      	str	r3, [r7, #16]
  return result;
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	fab3 f383 	clz	r3, r3
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	005b      	lsls	r3, r3, #1
 80078ac:	2103      	movs	r1, #3
 80078ae:	fa01 f303 	lsl.w	r3, r1, r3
 80078b2:	43db      	mvns	r3, r3
 80078b4:	401a      	ands	r2, r3
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078ba:	69fb      	ldr	r3, [r7, #28]
 80078bc:	fa93 f3a3 	rbit	r3, r3
 80078c0:	61bb      	str	r3, [r7, #24]
  return result;
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	fab3 f383 	clz	r3, r3
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	005b      	lsls	r3, r3, #1
 80078cc:	6879      	ldr	r1, [r7, #4]
 80078ce:	fa01 f303 	lsl.w	r3, r1, r3
 80078d2:	431a      	orrs	r2, r3
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	60da      	str	r2, [r3, #12]
}
 80078d8:	bf00      	nop
 80078da:	3724      	adds	r7, #36	; 0x24
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	683a      	ldr	r2, [r7, #0]
 80078f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80078f4:	bf00      	nop
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8007900:	b480      	push	{r7}
 8007902:	b085      	sub	sp, #20
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007908:	4b08      	ldr	r3, [pc, #32]	; (800792c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800790a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800790c:	4907      	ldr	r1, [pc, #28]	; (800792c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4313      	orrs	r3, r2
 8007912:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007914:	4b05      	ldr	r3, [pc, #20]	; (800792c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007916:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	4013      	ands	r3, r2
 800791c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800791e:	68fb      	ldr	r3, [r7, #12]
}
 8007920:	bf00      	nop
 8007922:	3714      	adds	r7, #20
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr
 800792c:	40021000 	.word	0x40021000

08007930 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b08a      	sub	sp, #40	; 0x28
 8007934:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8007936:	f107 031c 	add.w	r3, r7, #28
 800793a:	2200      	movs	r2, #0
 800793c:	601a      	str	r2, [r3, #0]
 800793e:	605a      	str	r2, [r3, #4]
 8007940:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007942:	1d3b      	adds	r3, r7, #4
 8007944:	2200      	movs	r2, #0
 8007946:	601a      	str	r2, [r3, #0]
 8007948:	605a      	str	r2, [r3, #4]
 800794a:	609a      	str	r2, [r3, #8]
 800794c:	60da      	str	r2, [r3, #12]
 800794e:	611a      	str	r2, [r3, #16]
 8007950:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8007952:	2004      	movs	r0, #4
 8007954:	f7ff ffd4 	bl	8007900 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8007958:	2020      	movs	r0, #32
 800795a:	f7ff ffd1 	bl	8007900 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800795e:	2001      	movs	r0, #1
 8007960:	f7ff ffce 	bl	8007900 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8007964:	2002      	movs	r0, #2
 8007966:	f7ff ffcb 	bl	8007900 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 800796a:	2108      	movs	r1, #8
 800796c:	48d3      	ldr	r0, [pc, #844]	; (8007cbc <MX_GPIO_Init+0x38c>)
 800796e:	f7ff ffb9 	bl	80078e4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(OFFSET_ENABLE_GPIO_Port, OFFSET_ENABLE_Pin);
 8007972:	2108      	movs	r1, #8
 8007974:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007978:	f7ff ffb4 	bl	80078e4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin);
 800797c:	2110      	movs	r1, #16
 800797e:	48cf      	ldr	r0, [pc, #828]	; (8007cbc <MX_GPIO_Init+0x38c>)
 8007980:	f7ff ffb0 	bl	80078e4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin);
 8007984:	2120      	movs	r1, #32
 8007986:	48cd      	ldr	r0, [pc, #820]	; (8007cbc <MX_GPIO_Init+0x38c>)
 8007988:	f7ff ffac 	bl	80078e4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin);
 800798c:	2101      	movs	r1, #1
 800798e:	48cc      	ldr	r0, [pc, #816]	; (8007cc0 <MX_GPIO_Init+0x390>)
 8007990:	f7ff ffa8 	bl	80078e4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 8007994:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007998:	48c8      	ldr	r0, [pc, #800]	; (8007cbc <MX_GPIO_Init+0x38c>)
 800799a:	f7ff ffa3 	bl	80078e4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 800799e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80079a2:	48c6      	ldr	r0, [pc, #792]	; (8007cbc <MX_GPIO_Init+0x38c>)
 80079a4:	f7ff ff9e 	bl	80078e4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 80079a8:	2140      	movs	r1, #64	; 0x40
 80079aa:	48c5      	ldr	r0, [pc, #788]	; (8007cc0 <MX_GPIO_Init+0x390>)
 80079ac:	f7ff ff9a 	bl	80078e4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 80079b0:	2180      	movs	r1, #128	; 0x80
 80079b2:	48c3      	ldr	r0, [pc, #780]	; (8007cc0 <MX_GPIO_Init+0x390>)
 80079b4:	f7ff ff96 	bl	80078e4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 80079b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80079bc:	48c0      	ldr	r0, [pc, #768]	; (8007cc0 <MX_GPIO_Init+0x390>)
 80079be:	f7ff ff91 	bl	80078e4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 80079c2:	49c0      	ldr	r1, [pc, #768]	; (8007cc4 <MX_GPIO_Init+0x394>)
 80079c4:	2002      	movs	r0, #2
 80079c6:	f7ff feff 	bl	80077c8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 80079ca:	49bf      	ldr	r1, [pc, #764]	; (8007cc8 <MX_GPIO_Init+0x398>)
 80079cc:	2002      	movs	r0, #2
 80079ce:	f7ff fefb 	bl	80077c8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 80079d2:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 80079d6:	2005      	movs	r0, #5
 80079d8:	f7ff fef6 	bl	80077c8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 80079dc:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 80079e0:	2005      	movs	r0, #5
 80079e2:	f7ff fef1 	bl	80077c8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 80079e6:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 80079ea:	2002      	movs	r0, #2
 80079ec:	f7ff feec 	bl	80077c8 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 80079f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80079f4:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80079f6:	2301      	movs	r3, #1
 80079f8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80079fc:	2300      	movs	r3, #0
 80079fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007a02:	2302      	movs	r3, #2
 8007a04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007a08:	f107 031c 	add.w	r3, r7, #28
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f007 faf7 	bl	800f000 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8007a12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a16:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007a24:	2302      	movs	r3, #2
 8007a26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007a2a:	f107 031c 	add.w	r3, r7, #28
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f007 fae6 	bl	800f000 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8007a34:	2301      	movs	r3, #1
 8007a36:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007a44:	2302      	movs	r3, #2
 8007a46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007a4a:	f107 031c 	add.w	r3, r7, #28
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f007 fad6 	bl	800f000 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8007a54:	2302      	movs	r3, #2
 8007a56:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007a64:	2302      	movs	r3, #2
 8007a66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007a6a:	f107 031c 	add.w	r3, r7, #28
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f007 fac6 	bl	800f000 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8007a74:	2304      	movs	r3, #4
 8007a76:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007a84:	2302      	movs	r3, #2
 8007a86:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007a8a:	f107 031c 	add.w	r3, r7, #28
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f007 fab6 	bl	800f000 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 8007a94:	2201      	movs	r2, #1
 8007a96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007a9a:	4888      	ldr	r0, [pc, #544]	; (8007cbc <MX_GPIO_Init+0x38c>)
 8007a9c:	f7ff fef3 	bl	8007886 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007aa6:	4885      	ldr	r0, [pc, #532]	; (8007cbc <MX_GPIO_Init+0x38c>)
 8007aa8:	f7ff feed 	bl	8007886 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 8007aac:	2201      	movs	r2, #1
 8007aae:	2101      	movs	r1, #1
 8007ab0:	4886      	ldr	r0, [pc, #536]	; (8007ccc <MX_GPIO_Init+0x39c>)
 8007ab2:	f7ff fee8 	bl	8007886 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	2102      	movs	r1, #2
 8007aba:	4884      	ldr	r0, [pc, #528]	; (8007ccc <MX_GPIO_Init+0x39c>)
 8007abc:	f7ff fee3 	bl	8007886 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_SW_GPIO_Port, ENC_SW_Pin, LL_GPIO_PULL_UP);
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	2104      	movs	r1, #4
 8007ac4:	487d      	ldr	r0, [pc, #500]	; (8007cbc <MX_GPIO_Init+0x38c>)
 8007ac6:	f7ff fede 	bl	8007886 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 8007aca:	2200      	movs	r2, #0
 8007acc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007ad0:	487a      	ldr	r0, [pc, #488]	; (8007cbc <MX_GPIO_Init+0x38c>)
 8007ad2:	f7ff fea9 	bl	8007828 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007adc:	4877      	ldr	r0, [pc, #476]	; (8007cbc <MX_GPIO_Init+0x38c>)
 8007ade:	f7ff fea3 	bl	8007828 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	2101      	movs	r1, #1
 8007ae6:	4879      	ldr	r0, [pc, #484]	; (8007ccc <MX_GPIO_Init+0x39c>)
 8007ae8:	f7ff fe9e 	bl	8007828 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8007aec:	2200      	movs	r2, #0
 8007aee:	2102      	movs	r1, #2
 8007af0:	4876      	ldr	r0, [pc, #472]	; (8007ccc <MX_GPIO_Init+0x39c>)
 8007af2:	f7ff fe99 	bl	8007828 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_SW_GPIO_Port, ENC_SW_Pin, LL_GPIO_MODE_INPUT);
 8007af6:	2200      	movs	r2, #0
 8007af8:	2104      	movs	r1, #4
 8007afa:	4870      	ldr	r0, [pc, #448]	; (8007cbc <MX_GPIO_Init+0x38c>)
 8007afc:	f7ff fe94 	bl	8007828 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 8007b00:	2308      	movs	r3, #8
 8007b02:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007b04:	2301      	movs	r3, #1
 8007b06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8007b10:	2302      	movs	r3, #2
 8007b12:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 8007b14:	1d3b      	adds	r3, r7, #4
 8007b16:	4619      	mov	r1, r3
 8007b18:	4868      	ldr	r0, [pc, #416]	; (8007cbc <MX_GPIO_Init+0x38c>)
 8007b1a:	f007 fc64 	bl	800f3e6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OFFSET_ENABLE_Pin;
 8007b1e:	2308      	movs	r3, #8
 8007b20:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007b22:	2301      	movs	r3, #1
 8007b24:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007b26:	2300      	movs	r3, #0
 8007b28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(OFFSET_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8007b32:	1d3b      	adds	r3, r7, #4
 8007b34:	4619      	mov	r1, r3
 8007b36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007b3a:	f007 fc54 	bl	800f3e6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CH1_GAIN_C_Pin;
 8007b3e:	2310      	movs	r3, #16
 8007b40:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007b42:	2301      	movs	r3, #1
 8007b44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007b46:	2300      	movs	r3, #0
 8007b48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CH1_GAIN_C_GPIO_Port, &GPIO_InitStruct);
 8007b52:	1d3b      	adds	r3, r7, #4
 8007b54:	4619      	mov	r1, r3
 8007b56:	4859      	ldr	r0, [pc, #356]	; (8007cbc <MX_GPIO_Init+0x38c>)
 8007b58:	f007 fc45 	bl	800f3e6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CH1_GAIN_B_Pin;
 8007b5c:	2320      	movs	r3, #32
 8007b5e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007b60:	2301      	movs	r3, #1
 8007b62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007b64:	2300      	movs	r3, #0
 8007b66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CH1_GAIN_B_GPIO_Port, &GPIO_InitStruct);
 8007b70:	1d3b      	adds	r3, r7, #4
 8007b72:	4619      	mov	r1, r3
 8007b74:	4851      	ldr	r0, [pc, #324]	; (8007cbc <MX_GPIO_Init+0x38c>)
 8007b76:	f007 fc36 	bl	800f3e6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CH1_GAIN_A_Pin;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007b82:	2300      	movs	r3, #0
 8007b84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007b86:	2300      	movs	r3, #0
 8007b88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CH1_GAIN_A_GPIO_Port, &GPIO_InitStruct);
 8007b8e:	1d3b      	adds	r3, r7, #4
 8007b90:	4619      	mov	r1, r3
 8007b92:	484b      	ldr	r0, [pc, #300]	; (8007cc0 <MX_GPIO_Init+0x390>)
 8007b94:	f007 fc27 	bl	800f3e6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 8007b98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b9c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007baa:	2300      	movs	r3, #0
 8007bac:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 8007bae:	1d3b      	adds	r3, r7, #4
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	4842      	ldr	r0, [pc, #264]	; (8007cbc <MX_GPIO_Init+0x38c>)
 8007bb4:	f007 fc17 	bl	800f3e6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 8007bb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bbc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 8007bce:	1d3b      	adds	r3, r7, #4
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	483a      	ldr	r0, [pc, #232]	; (8007cbc <MX_GPIO_Init+0x38c>)
 8007bd4:	f007 fc07 	bl	800f3e6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 8007bd8:	2340      	movs	r3, #64	; 0x40
 8007bda:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007be0:	2303      	movs	r3, #3
 8007be2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007be4:	2300      	movs	r3, #0
 8007be6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007be8:	2300      	movs	r3, #0
 8007bea:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8007bec:	1d3b      	adds	r3, r7, #4
 8007bee:	4619      	mov	r1, r3
 8007bf0:	4833      	ldr	r0, [pc, #204]	; (8007cc0 <MX_GPIO_Init+0x390>)
 8007bf2:	f007 fbf8 	bl	800f3e6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 8007bf6:	2380      	movs	r3, #128	; 0x80
 8007bf8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007bfe:	2303      	movs	r3, #3
 8007c00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007c02:	2300      	movs	r3, #0
 8007c04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007c06:	2300      	movs	r3, #0
 8007c08:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8007c0a:	1d3b      	adds	r3, r7, #4
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	482c      	ldr	r0, [pc, #176]	; (8007cc0 <MX_GPIO_Init+0x390>)
 8007c10:	f007 fbe9 	bl	800f3e6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 8007c14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c18:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007c1e:	2303      	movs	r3, #3
 8007c20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007c22:	2300      	movs	r3, #0
 8007c24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007c26:	2300      	movs	r3, #0
 8007c28:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8007c2a:	1d3b      	adds	r3, r7, #4
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	4824      	ldr	r0, [pc, #144]	; (8007cc0 <MX_GPIO_Init+0x390>)
 8007c30:	f007 fbd9 	bl	800f3e6 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007c34:	f7ff fd3e 	bl	80076b4 <__NVIC_GetPriorityGrouping>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f7ff fd8e 	bl	8007760 <NVIC_EncodePriority>
 8007c44:	4603      	mov	r3, r0
 8007c46:	4619      	mov	r1, r3
 8007c48:	2006      	movs	r0, #6
 8007c4a:	f7ff fd5f 	bl	800770c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8007c4e:	2006      	movs	r0, #6
 8007c50:	f7ff fd3e 	bl	80076d0 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007c54:	f7ff fd2e 	bl	80076b4 <__NVIC_GetPriorityGrouping>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	2100      	movs	r1, #0
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f7ff fd7e 	bl	8007760 <NVIC_EncodePriority>
 8007c64:	4603      	mov	r3, r0
 8007c66:	4619      	mov	r1, r3
 8007c68:	2007      	movs	r0, #7
 8007c6a:	f7ff fd4f 	bl	800770c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 8007c6e:	2007      	movs	r0, #7
 8007c70:	f7ff fd2e 	bl	80076d0 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007c74:	f7ff fd1e 	bl	80076b4 <__NVIC_GetPriorityGrouping>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	2100      	movs	r1, #0
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7ff fd6e 	bl	8007760 <NVIC_EncodePriority>
 8007c84:	4603      	mov	r3, r0
 8007c86:	4619      	mov	r1, r3
 8007c88:	2008      	movs	r0, #8
 8007c8a:	f7ff fd3f 	bl	800770c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 8007c8e:	2008      	movs	r0, #8
 8007c90:	f7ff fd1e 	bl	80076d0 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007c94:	f7ff fd0e 	bl	80076b4 <__NVIC_GetPriorityGrouping>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	2100      	movs	r1, #0
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f7ff fd5e 	bl	8007760 <NVIC_EncodePriority>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	2028      	movs	r0, #40	; 0x28
 8007caa:	f7ff fd2f 	bl	800770c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007cae:	2028      	movs	r0, #40	; 0x28
 8007cb0:	f7ff fd0e 	bl	80076d0 <__NVIC_EnableIRQ>

}
 8007cb4:	bf00      	nop
 8007cb6:	3728      	adds	r7, #40	; 0x28
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	e009      	b.n	8007cd0 <MX_GPIO_Init+0x3a0>
 8007cbc:	48000800 	.word	0x48000800
 8007cc0:	48000400 	.word	0x48000400
 8007cc4:	0f000003 	.word	0x0f000003
 8007cc8:	f0000003 	.word	0xf0000003
 8007ccc:	48001400 	.word	0x48001400
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	bf00      	nop

08007cd4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8007cdc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007ce0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8007ce4:	f003 0301 	and.w	r3, r3, #1
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d013      	beq.n	8007d14 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8007cec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007cf0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8007cf4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d00b      	beq.n	8007d14 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8007cfc:	e000      	b.n	8007d00 <ITM_SendChar+0x2c>
    {
      __NOP();
 8007cfe:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8007d00:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d0f9      	beq.n	8007cfe <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8007d0a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	b2d2      	uxtb	r2, r2
 8007d12:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8007d14:	687b      	ldr	r3, [r7, #4]
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	370c      	adds	r7, #12
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d20:	4770      	bx	lr

08007d22 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// redirect printf to SWV
int _write(int file, char *ptr, int len)
{
 8007d22:	b580      	push	{r7, lr}
 8007d24:	b086      	sub	sp, #24
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	60f8      	str	r0, [r7, #12]
 8007d2a:	60b9      	str	r1, [r7, #8]
 8007d2c:	607a      	str	r2, [r7, #4]
  int i=0;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8007d32:	2300      	movs	r3, #0
 8007d34:	617b      	str	r3, [r7, #20]
 8007d36:	e009      	b.n	8007d4c <_write+0x2a>
    ITM_SendChar((*ptr++));
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	1c5a      	adds	r2, r3, #1
 8007d3c:	60ba      	str	r2, [r7, #8]
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	4618      	mov	r0, r3
 8007d42:	f7ff ffc7 	bl	8007cd4 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	617b      	str	r3, [r7, #20]
 8007d4c:	697a      	ldr	r2, [r7, #20]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	dbf1      	blt.n	8007d38 <_write+0x16>
  return len;
 8007d54:	687b      	ldr	r3, [r7, #4]
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3718      	adds	r7, #24
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
	...

08007d60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007d64:	f000 fefd 	bl	8008b62 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007d68:	f000 f84c 	bl	8007e04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007d6c:	f7ff fde0 	bl	8007930 <MX_GPIO_Init>
  MX_DMA_Init();
 8007d70:	f7ff fc66 	bl	8007640 <MX_DMA_Init>
  MX_DAC1_Init();
 8007d74:	f7ff fb16 	bl	80073a4 <MX_DAC1_Init>
  MX_ADC1_Init();
 8007d78:	f7ff f9ce 	bl	8007118 <MX_ADC1_Init>
  MX_COMP1_Init();
 8007d7c:	f7ff fab0 	bl	80072e0 <MX_COMP1_Init>
  MX_SPI3_Init();
 8007d80:	f000 f8ec 	bl	8007f5c <MX_SPI3_Init>
  MX_RNG_Init();
 8007d84:	f000 f8dc 	bl	8007f40 <MX_RNG_Init>
  MX_TIM1_Init();
 8007d88:	f000 fb50 	bl	800842c <MX_TIM1_Init>
  MX_TIM8_Init();
 8007d8c:	f000 fca6 	bl	80086dc <MX_TIM8_Init>
  MX_TIM16_Init();
 8007d90:	f000 fd5e 	bl	8008850 <MX_TIM16_Init>
  MX_TIM15_Init();
 8007d94:	f000 fd0a 	bl	80087ac <MX_TIM15_Init>
  MX_TIM5_Init();
 8007d98:	f000 fc52 	bl	8008640 <MX_TIM5_Init>
  MX_TIM3_Init();
 8007d9c:	f000 fc02 	bl	80085a4 <MX_TIM3_Init>
  MX_DAC2_Init();
 8007da0:	f7ff fb4a 	bl	8007438 <MX_DAC2_Init>
  MX_TIM17_Init();
 8007da4:	f000 fd7c 	bl	80088a0 <MX_TIM17_Init>
  MX_TIM2_Init();
 8007da8:	f000 fbb0 	bl	800850c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  SM_Init();
 8007dac:	f7fe fb8e 	bl	80064cc <SM_Init>

HAL_TIM_Base_Start_IT(&htim17);
 8007db0:	4810      	ldr	r0, [pc, #64]	; (8007df4 <main+0x94>)
 8007db2:	f005 fb3f 	bl	800d434 <HAL_TIM_Base_Start_IT>


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 8007db6:	2200      	movs	r2, #0
 8007db8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007dbc:	480e      	ldr	r0, [pc, #56]	; (8007df8 <main+0x98>)
 8007dbe:	f004 f9e9 	bl	800c194 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007dc8:	480b      	ldr	r0, [pc, #44]	; (8007df8 <main+0x98>)
 8007dca:	f004 f9e3 	bl	800c194 <HAL_GPIO_WritePin>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 8007dce:	480b      	ldr	r0, [pc, #44]	; (8007dfc <main+0x9c>)
 8007dd0:	f005 fada 	bl	800d388 <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 8007dd4:	4b0a      	ldr	r3, [pc, #40]	; (8007e00 <main+0xa0>)
 8007dd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007dda:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 8007ddc:	4b08      	ldr	r3, [pc, #32]	; (8007e00 <main+0xa0>)
 8007dde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007de2:	62da      	str	r2, [r3, #44]	; 0x2c


  // TFT lib enable
  DM_Init();
 8007de4:	f7f8 ffc4 	bl	8000d70 <DM_Init>
  DM_PostInit();
 8007de8:	f7f8 ffd0 	bl	8000d8c <DM_PostInit>

  // Intialise interrupt manager
  IM_Init();
 8007dec:	f7fd f9d0 	bl	8005190 <IM_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8007df0:	e7fe      	b.n	8007df0 <main+0x90>
 8007df2:	bf00      	nop
 8007df4:	20002b70 	.word	0x20002b70
 8007df8:	48000800 	.word	0x48000800
 8007dfc:	20002c08 	.word	0x20002c08
 8007e00:	40001000 	.word	0x40001000

08007e04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b0a8      	sub	sp, #160	; 0xa0
 8007e08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007e0a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007e0e:	2238      	movs	r2, #56	; 0x38
 8007e10:	2100      	movs	r1, #0
 8007e12:	4618      	mov	r0, r3
 8007e14:	f008 fbd6 	bl	80105c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007e18:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	601a      	str	r2, [r3, #0]
 8007e20:	605a      	str	r2, [r3, #4]
 8007e22:	609a      	str	r2, [r3, #8]
 8007e24:	60da      	str	r2, [r3, #12]
 8007e26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007e28:	463b      	mov	r3, r7
 8007e2a:	2254      	movs	r2, #84	; 0x54
 8007e2c:	2100      	movs	r1, #0
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f008 fbc8 	bl	80105c4 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8007e34:	2000      	movs	r0, #0
 8007e36:	f004 f9c5 	bl	800c1c4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8007e3a:	2322      	movs	r3, #34	; 0x22
 8007e3c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007e3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e42:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007e44:	2340      	movs	r3, #64	; 0x40
 8007e46:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007e4e:	2302      	movs	r3, #2
 8007e50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007e54:	2302      	movs	r3, #2
 8007e56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8007e5a:	2302      	movs	r3, #2
 8007e5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8007e60:	232a      	movs	r3, #42	; 0x2a
 8007e62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007e66:	2302      	movs	r3, #2
 8007e68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8007e6c:	2304      	movs	r3, #4
 8007e6e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007e72:	2302      	movs	r3, #2
 8007e74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007e78:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f004 fa45 	bl	800c30c <HAL_RCC_OscConfig>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d001      	beq.n	8007e8c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8007e88:	f000 f82a 	bl	8007ee0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007e8c:	230f      	movs	r3, #15
 8007e8e:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007e90:	2303      	movs	r3, #3
 8007e92:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007e94:	2300      	movs	r3, #0
 8007e96:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8007ea0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007ea4:	2108      	movs	r1, #8
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f004 fd48 	bl	800c93c <HAL_RCC_ClockConfig>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d001      	beq.n	8007eb6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8007eb2:	f000 f815 	bl	8007ee0 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 8007eb6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007eba:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8007ec0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007ec4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007ec6:	463b      	mov	r3, r7
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f004 ff27 	bl	800cd1c <HAL_RCCEx_PeriphCLKConfig>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d001      	beq.n	8007ed8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8007ed4:	f000 f804 	bl	8007ee0 <Error_Handler>
  }
}
 8007ed8:	bf00      	nop
 8007eda:	37a0      	adds	r7, #160	; 0xa0
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007ee4:	bf00      	nop
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr

08007eee <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 8007eee:	b480      	push	{r7}
 8007ef0:	b083      	sub	sp, #12
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f043 0204 	orr.w	r2, r3, #4
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	601a      	str	r2, [r3, #0]
}
 8007f02:	bf00      	nop
 8007f04:	370c      	adds	r7, #12
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr
	...

08007f10 <LL_AHB2_GRP1_EnableClock>:
{
 8007f10:	b480      	push	{r7}
 8007f12:	b085      	sub	sp, #20
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007f18:	4b08      	ldr	r3, [pc, #32]	; (8007f3c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007f1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f1c:	4907      	ldr	r1, [pc, #28]	; (8007f3c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4313      	orrs	r3, r2
 8007f22:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007f24:	4b05      	ldr	r3, [pc, #20]	; (8007f3c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007f26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4013      	ands	r3, r2
 8007f2c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
}
 8007f30:	bf00      	nop
 8007f32:	3714      	adds	r7, #20
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr
 8007f3c:	40021000 	.word	0x40021000

08007f40 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 8007f44:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8007f48:	f7ff ffe2 	bl	8007f10 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 8007f4c:	4802      	ldr	r0, [pc, #8]	; (8007f58 <MX_RNG_Init+0x18>)
 8007f4e:	f7ff ffce 	bl	8007eee <LL_RNG_Enable>

}
 8007f52:	bf00      	nop
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	50060800 	.word	0x50060800

08007f5c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8007f60:	4b1b      	ldr	r3, [pc, #108]	; (8007fd0 <MX_SPI3_Init+0x74>)
 8007f62:	4a1c      	ldr	r2, [pc, #112]	; (8007fd4 <MX_SPI3_Init+0x78>)
 8007f64:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8007f66:	4b1a      	ldr	r3, [pc, #104]	; (8007fd0 <MX_SPI3_Init+0x74>)
 8007f68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007f6c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8007f6e:	4b18      	ldr	r3, [pc, #96]	; (8007fd0 <MX_SPI3_Init+0x74>)
 8007f70:	2200      	movs	r2, #0
 8007f72:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8007f74:	4b16      	ldr	r3, [pc, #88]	; (8007fd0 <MX_SPI3_Init+0x74>)
 8007f76:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007f7a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007f7c:	4b14      	ldr	r3, [pc, #80]	; (8007fd0 <MX_SPI3_Init+0x74>)
 8007f7e:	2200      	movs	r2, #0
 8007f80:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007f82:	4b13      	ldr	r3, [pc, #76]	; (8007fd0 <MX_SPI3_Init+0x74>)
 8007f84:	2200      	movs	r2, #0
 8007f86:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8007f88:	4b11      	ldr	r3, [pc, #68]	; (8007fd0 <MX_SPI3_Init+0x74>)
 8007f8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f8e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8007f90:	4b0f      	ldr	r3, [pc, #60]	; (8007fd0 <MX_SPI3_Init+0x74>)
 8007f92:	2210      	movs	r2, #16
 8007f94:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007f96:	4b0e      	ldr	r3, [pc, #56]	; (8007fd0 <MX_SPI3_Init+0x74>)
 8007f98:	2200      	movs	r2, #0
 8007f9a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8007f9c:	4b0c      	ldr	r3, [pc, #48]	; (8007fd0 <MX_SPI3_Init+0x74>)
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007fa2:	4b0b      	ldr	r3, [pc, #44]	; (8007fd0 <MX_SPI3_Init+0x74>)
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8007fa8:	4b09      	ldr	r3, [pc, #36]	; (8007fd0 <MX_SPI3_Init+0x74>)
 8007faa:	2207      	movs	r2, #7
 8007fac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007fae:	4b08      	ldr	r3, [pc, #32]	; (8007fd0 <MX_SPI3_Init+0x74>)
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007fb4:	4b06      	ldr	r3, [pc, #24]	; (8007fd0 <MX_SPI3_Init+0x74>)
 8007fb6:	2208      	movs	r2, #8
 8007fb8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8007fba:	4805      	ldr	r0, [pc, #20]	; (8007fd0 <MX_SPI3_Init+0x74>)
 8007fbc:	f005 f8fa 	bl	800d1b4 <HAL_SPI_Init>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d001      	beq.n	8007fca <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8007fc6:	f7ff ff8b 	bl	8007ee0 <Error_Handler>
  }

}
 8007fca:	bf00      	nop
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	20002a74 	.word	0x20002a74
 8007fd4:	40003c00 	.word	0x40003c00

08007fd8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b08a      	sub	sp, #40	; 0x28
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007fe0:	f107 0314 	add.w	r3, r7, #20
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	601a      	str	r2, [r3, #0]
 8007fe8:	605a      	str	r2, [r3, #4]
 8007fea:	609a      	str	r2, [r3, #8]
 8007fec:	60da      	str	r2, [r3, #12]
 8007fee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a17      	ldr	r2, [pc, #92]	; (8008054 <HAL_SPI_MspInit+0x7c>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d128      	bne.n	800804c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007ffa:	4b17      	ldr	r3, [pc, #92]	; (8008058 <HAL_SPI_MspInit+0x80>)
 8007ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ffe:	4a16      	ldr	r2, [pc, #88]	; (8008058 <HAL_SPI_MspInit+0x80>)
 8008000:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008004:	6593      	str	r3, [r2, #88]	; 0x58
 8008006:	4b14      	ldr	r3, [pc, #80]	; (8008058 <HAL_SPI_MspInit+0x80>)
 8008008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800800a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800800e:	613b      	str	r3, [r7, #16]
 8008010:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008012:	4b11      	ldr	r3, [pc, #68]	; (8008058 <HAL_SPI_MspInit+0x80>)
 8008014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008016:	4a10      	ldr	r2, [pc, #64]	; (8008058 <HAL_SPI_MspInit+0x80>)
 8008018:	f043 0304 	orr.w	r3, r3, #4
 800801c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800801e:	4b0e      	ldr	r3, [pc, #56]	; (8008058 <HAL_SPI_MspInit+0x80>)
 8008020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008022:	f003 0304 	and.w	r3, r3, #4
 8008026:	60fb      	str	r3, [r7, #12]
 8008028:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800802a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800802e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008030:	2302      	movs	r3, #2
 8008032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008034:	2300      	movs	r3, #0
 8008036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008038:	2300      	movs	r3, #0
 800803a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800803c:	2306      	movs	r3, #6
 800803e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008040:	f107 0314 	add.w	r3, r7, #20
 8008044:	4619      	mov	r1, r3
 8008046:	4805      	ldr	r0, [pc, #20]	; (800805c <HAL_SPI_MspInit+0x84>)
 8008048:	f003 fe40 	bl	800bccc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800804c:	bf00      	nop
 800804e:	3728      	adds	r7, #40	; 0x28
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}
 8008054:	40003c00 	.word	0x40003c00
 8008058:	40021000 	.word	0x40021000
 800805c:	48000800 	.word	0x48000800

08008060 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8008060:	b480      	push	{r7}
 8008062:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008064:	4b05      	ldr	r3, [pc, #20]	; (800807c <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	4a04      	ldr	r2, [pc, #16]	; (800807c <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800806a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800806e:	6093      	str	r3, [r2, #8]
}
 8008070:	bf00      	nop
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr
 800807a:	bf00      	nop
 800807c:	40007000 	.word	0x40007000

08008080 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b082      	sub	sp, #8
 8008084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008086:	4b0f      	ldr	r3, [pc, #60]	; (80080c4 <HAL_MspInit+0x44>)
 8008088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800808a:	4a0e      	ldr	r2, [pc, #56]	; (80080c4 <HAL_MspInit+0x44>)
 800808c:	f043 0301 	orr.w	r3, r3, #1
 8008090:	6613      	str	r3, [r2, #96]	; 0x60
 8008092:	4b0c      	ldr	r3, [pc, #48]	; (80080c4 <HAL_MspInit+0x44>)
 8008094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008096:	f003 0301 	and.w	r3, r3, #1
 800809a:	607b      	str	r3, [r7, #4]
 800809c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800809e:	4b09      	ldr	r3, [pc, #36]	; (80080c4 <HAL_MspInit+0x44>)
 80080a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080a2:	4a08      	ldr	r2, [pc, #32]	; (80080c4 <HAL_MspInit+0x44>)
 80080a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080a8:	6593      	str	r3, [r2, #88]	; 0x58
 80080aa:	4b06      	ldr	r3, [pc, #24]	; (80080c4 <HAL_MspInit+0x44>)
 80080ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080b2:	603b      	str	r3, [r7, #0]
 80080b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 80080b6:	f7ff ffd3 	bl	8008060 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80080ba:	bf00      	nop
 80080bc:	3708      	adds	r7, #8
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop
 80080c4:	40021000 	.word	0x40021000

080080c8 <LL_EXTI_IsActiveFlag_0_31>:
{
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80080d0:	4b07      	ldr	r3, [pc, #28]	; (80080f0 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80080d2:	695a      	ldr	r2, [r3, #20]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	4013      	ands	r3, r2
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d101      	bne.n	80080e2 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 80080de:	2301      	movs	r3, #1
 80080e0:	e000      	b.n	80080e4 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 80080e2:	2300      	movs	r3, #0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr
 80080f0:	40010400 	.word	0x40010400

080080f4 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80080fc:	4a04      	ldr	r2, [pc, #16]	; (8008110 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6153      	str	r3, [r2, #20]
}
 8008102:	bf00      	nop
 8008104:	370c      	adds	r7, #12
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr
 800810e:	bf00      	nop
 8008110:	40010400 	.word	0x40010400

08008114 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008114:	b480      	push	{r7}
 8008116:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008118:	bf00      	nop
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr
	...

08008124 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	DM_SetErrorDebugMsg("HARD FAULT");
 8008128:	4801      	ldr	r0, [pc, #4]	; (8008130 <HardFault_Handler+0xc>)
 800812a:	f7f9 fa65 	bl	80015f8 <DM_SetErrorDebugMsg>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800812e:	e7fe      	b.n	800812e <HardFault_Handler+0xa>
 8008130:	08015554 	.word	0x08015554

08008134 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	DM_SetErrorDebugMsg("MEMMANAGE FAULT");
 8008138:	4801      	ldr	r0, [pc, #4]	; (8008140 <MemManage_Handler+0xc>)
 800813a:	f7f9 fa5d 	bl	80015f8 <DM_SetErrorDebugMsg>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800813e:	e7fe      	b.n	800813e <MemManage_Handler+0xa>
 8008140:	08015560 	.word	0x08015560

08008144 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	DM_SetErrorDebugMsg("BUS FAULT");
 8008148:	4801      	ldr	r0, [pc, #4]	; (8008150 <BusFault_Handler+0xc>)
 800814a:	f7f9 fa55 	bl	80015f8 <DM_SetErrorDebugMsg>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800814e:	e7fe      	b.n	800814e <BusFault_Handler+0xa>
 8008150:	08015570 	.word	0x08015570

08008154 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	DM_SetErrorDebugMsg("USAGE FAULT");
 8008158:	4801      	ldr	r0, [pc, #4]	; (8008160 <UsageFault_Handler+0xc>)
 800815a:	f7f9 fa4d 	bl	80015f8 <DM_SetErrorDebugMsg>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800815e:	e7fe      	b.n	800815e <UsageFault_Handler+0xa>
 8008160:	0801557c 	.word	0x0801557c

08008164 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008164:	b480      	push	{r7}
 8008166:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008168:	bf00      	nop
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr

08008172 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008172:	b480      	push	{r7}
 8008174:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008176:	bf00      	nop
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr

08008180 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008180:	b480      	push	{r7}
 8008182:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008184:	bf00      	nop
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr

0800818e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800818e:	b580      	push	{r7, lr}
 8008190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008192:	f000 fd39 	bl	8008c08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008196:	bf00      	nop
 8008198:	bd80      	pop	{r7, pc}

0800819a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800819a:	b580      	push	{r7, lr}
 800819c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	IM_BTN3_EXTI0_Handler();
 800819e:	f7fd f8b5 	bl	800530c <IM_BTN3_EXTI0_Handler>

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 80081a2:	2001      	movs	r0, #1
 80081a4:	f7ff ff90 	bl	80080c8 <LL_EXTI_IsActiveFlag_0_31>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d002      	beq.n	80081b4 <EXTI0_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 80081ae:	2001      	movs	r0, #1
 80081b0:	f7ff ffa0 	bl	80080f4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80081b4:	bf00      	nop
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	IM_BTN4_EXTI1_Handler();
 80081bc:	f7fd f8cc 	bl	8005358 <IM_BTN4_EXTI1_Handler>

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 80081c0:	2002      	movs	r0, #2
 80081c2:	f7ff ff81 	bl	80080c8 <LL_EXTI_IsActiveFlag_0_31>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d002      	beq.n	80081d2 <EXTI1_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 80081cc:	2002      	movs	r0, #2
 80081ce:	f7ff ff91 	bl	80080f4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80081d2:	bf00      	nop
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

	IM_ENC_EXTI2_Handler();
 80081da:	f7fd f8e3 	bl	80053a4 <IM_ENC_EXTI2_Handler>

  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 80081de:	2004      	movs	r0, #4
 80081e0:	f7ff ff72 	bl	80080c8 <LL_EXTI_IsActiveFlag_0_31>
 80081e4:	4603      	mov	r3, r0
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d002      	beq.n	80081f0 <EXTI2_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 80081ea:	2004      	movs	r0, #4
 80081ec:	f7ff ff82 	bl	80080f4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80081f0:	bf00      	nop
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80081f8:	4802      	ldr	r0, [pc, #8]	; (8008204 <DMA1_Channel1_IRQHandler+0x10>)
 80081fa:	f003 fc17 	bl	800ba2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80081fe:	bf00      	nop
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	20002968 	.word	0x20002968

08008208 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800820c:	4802      	ldr	r0, [pc, #8]	; (8008218 <DMA1_Channel2_IRQHandler+0x10>)
 800820e:	f003 fc0d 	bl	800ba2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8008212:	bf00      	nop
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop
 8008218:	20002270 	.word	0x20002270

0800821c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8008220:	4802      	ldr	r0, [pc, #8]	; (800822c <DMA1_Channel3_IRQHandler+0x10>)
 8008222:	f003 fc03 	bl	800ba2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8008226:	bf00      	nop
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	20002a14 	.word	0x20002a14

08008230 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

	DM_UpdateDisplay();
 8008234:	f7f8 fdc4 	bl	8000dc0 <DM_UpdateDisplay>

	IM_ENC_DIRF_Handler();
 8008238:	f7fd f8da 	bl	80053f0 <IM_ENC_DIRF_Handler>

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800823c:	4803      	ldr	r0, [pc, #12]	; (800824c <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 800823e:	f005 fbdb 	bl	800d9f8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8008242:	4803      	ldr	r0, [pc, #12]	; (8008250 <TIM1_BRK_TIM15_IRQHandler+0x20>)
 8008244:	f005 fbd8 	bl	800d9f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8008248:	bf00      	nop
 800824a:	bd80      	pop	{r7, pc}
 800824c:	20002c08 	.word	0x20002c08
 8008250:	20002b24 	.word	0x20002b24

08008254 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	EM_ProcessEvent();
 8008258:	f7fb ff8a 	bl	8004170 <EM_ProcessEvent>
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800825c:	4803      	ldr	r0, [pc, #12]	; (800826c <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 800825e:	f005 fbcb 	bl	800d9f8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8008262:	4803      	ldr	r0, [pc, #12]	; (8008270 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 8008264:	f005 fbc8 	bl	800d9f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8008268:	bf00      	nop
 800826a:	bd80      	pop	{r7, pc}
 800826c:	20002c08 	.word	0x20002c08
 8008270:	20002b70 	.word	0x20002b70

08008274 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008278:	4802      	ldr	r0, [pc, #8]	; (8008284 <TIM2_IRQHandler+0x10>)
 800827a:	f005 fbbd 	bl	800d9f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800827e:	bf00      	nop
 8008280:	bd80      	pop	{r7, pc}
 8008282:	bf00      	nop
 8008284:	20002c54 	.word	0x20002c54

08008288 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800828c:	4802      	ldr	r0, [pc, #8]	; (8008298 <TIM3_IRQHandler+0x10>)
 800828e:	f005 fbb3 	bl	800d9f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8008292:	bf00      	nop
 8008294:	bd80      	pop	{r7, pc}
 8008296:	bf00      	nop
 8008298:	200022dc 	.word	0x200022dc

0800829c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	IM_BTN1_EXTI14_Handler();
 80082a0:	f7fc ffe4 	bl	800526c <IM_BTN1_EXTI14_Handler>
	IM_BTN2_EXTI15_Handler();
 80082a4:	f7fd f80a 	bl	80052bc <IM_BTN2_EXTI15_Handler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 80082a8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80082ac:	f7ff ff0c 	bl	80080c8 <LL_EXTI_IsActiveFlag_0_31>
 80082b0:	4603      	mov	r3, r0
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d003      	beq.n	80082be <EXTI15_10_IRQHandler+0x22>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 80082b6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80082ba:	f7ff ff1b 	bl	80080f4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 80082be:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80082c2:	f7ff ff01 	bl	80080c8 <LL_EXTI_IsActiveFlag_0_31>
 80082c6:	4603      	mov	r3, r0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d003      	beq.n	80082d4 <EXTI15_10_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 80082cc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80082d0:	f7ff ff10 	bl	80080f4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80082d4:	bf00      	nop
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	IM_SWEEP_UPDATE_TIM_IRQHandler();
 80082dc:	f7fc ff68 	bl	80051b0 <IM_SWEEP_UPDATE_TIM_IRQHandler>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80082e0:	4802      	ldr	r0, [pc, #8]	; (80082ec <TIM5_IRQHandler+0x14>)
 80082e2:	f005 fb89 	bl	800d9f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80082e6:	bf00      	nop
 80082e8:	bd80      	pop	{r7, pc}
 80082ea:	bf00      	nop
 80082ec:	20002bbc 	.word	0x20002bbc

080082f0 <COMP1_2_3_IRQHandler>:

/**
  * @brief This function handles COMP1, COMP2 and COMP3 interrupts through EXTI lines 21, 22 and 29.
  */
void COMP1_2_3_IRQHandler(void)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP1_2_3_IRQn 0 */

  /* USER CODE END COMP1_2_3_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 80082f4:	4802      	ldr	r0, [pc, #8]	; (8008300 <COMP1_2_3_IRQHandler+0x10>)
 80082f6:	f002 fc3b 	bl	800ab70 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP1_2_3_IRQn 1 */

  /* USER CODE END COMP1_2_3_IRQn 1 */
}
 80082fa:	bf00      	nop
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	200029c8 	.word	0x200029c8

08008304 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b086      	sub	sp, #24
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	60b9      	str	r1, [r7, #8]
 800830e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008310:	2300      	movs	r3, #0
 8008312:	617b      	str	r3, [r7, #20]
 8008314:	e00a      	b.n	800832c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8008316:	f3af 8000 	nop.w
 800831a:	4601      	mov	r1, r0
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	1c5a      	adds	r2, r3, #1
 8008320:	60ba      	str	r2, [r7, #8]
 8008322:	b2ca      	uxtb	r2, r1
 8008324:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	3301      	adds	r3, #1
 800832a:	617b      	str	r3, [r7, #20]
 800832c:	697a      	ldr	r2, [r7, #20]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	429a      	cmp	r2, r3
 8008332:	dbf0      	blt.n	8008316 <_read+0x12>
	}

return len;
 8008334:	687b      	ldr	r3, [r7, #4]
}
 8008336:	4618      	mov	r0, r3
 8008338:	3718      	adds	r7, #24
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}

0800833e <_close>:
	}
	return len;
}

int _close(int file)
{
 800833e:	b480      	push	{r7}
 8008340:	b083      	sub	sp, #12
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
	return -1;
 8008346:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800834a:	4618      	mov	r0, r3
 800834c:	370c      	adds	r7, #12
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr

08008356 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008356:	b480      	push	{r7}
 8008358:	b083      	sub	sp, #12
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
 800835e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008366:	605a      	str	r2, [r3, #4]
	return 0;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	370c      	adds	r7, #12
 800836e:	46bd      	mov	sp, r7
 8008370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008374:	4770      	bx	lr

08008376 <_isatty>:

int _isatty(int file)
{
 8008376:	b480      	push	{r7}
 8008378:	b083      	sub	sp, #12
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
	return 1;
 800837e:	2301      	movs	r3, #1
}
 8008380:	4618      	mov	r0, r3
 8008382:	370c      	adds	r7, #12
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800838c:	b480      	push	{r7}
 800838e:	b085      	sub	sp, #20
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	607a      	str	r2, [r7, #4]
	return 0;
 8008398:	2300      	movs	r3, #0
}
 800839a:	4618      	mov	r0, r3
 800839c:	3714      	adds	r7, #20
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr
	...

080083a8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80083b0:	4b11      	ldr	r3, [pc, #68]	; (80083f8 <_sbrk+0x50>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d102      	bne.n	80083be <_sbrk+0x16>
		heap_end = &end;
 80083b8:	4b0f      	ldr	r3, [pc, #60]	; (80083f8 <_sbrk+0x50>)
 80083ba:	4a10      	ldr	r2, [pc, #64]	; (80083fc <_sbrk+0x54>)
 80083bc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80083be:	4b0e      	ldr	r3, [pc, #56]	; (80083f8 <_sbrk+0x50>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80083c4:	4b0c      	ldr	r3, [pc, #48]	; (80083f8 <_sbrk+0x50>)
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4413      	add	r3, r2
 80083cc:	466a      	mov	r2, sp
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d907      	bls.n	80083e2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80083d2:	f008 f8cd 	bl	8010570 <__errno>
 80083d6:	4602      	mov	r2, r0
 80083d8:	230c      	movs	r3, #12
 80083da:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80083dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80083e0:	e006      	b.n	80083f0 <_sbrk+0x48>
	}

	heap_end += incr;
 80083e2:	4b05      	ldr	r3, [pc, #20]	; (80083f8 <_sbrk+0x50>)
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	4413      	add	r3, r2
 80083ea:	4a03      	ldr	r2, [pc, #12]	; (80083f8 <_sbrk+0x50>)
 80083ec:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80083ee:	68fb      	ldr	r3, [r7, #12]
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3710      	adds	r7, #16
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}
 80083f8:	20002260 	.word	0x20002260
 80083fc:	20002cf8 	.word	0x20002cf8

08008400 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8008400:	b480      	push	{r7}
 8008402:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008404:	4b08      	ldr	r3, [pc, #32]	; (8008428 <SystemInit+0x28>)
 8008406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800840a:	4a07      	ldr	r2, [pc, #28]	; (8008428 <SystemInit+0x28>)
 800840c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008410:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008414:	4b04      	ldr	r3, [pc, #16]	; (8008428 <SystemInit+0x28>)
 8008416:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800841a:	609a      	str	r2, [r3, #8]
#endif
}
 800841c:	bf00      	nop
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr
 8008426:	bf00      	nop
 8008428:	e000ed00 	.word	0xe000ed00

0800842c <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b09a      	sub	sp, #104	; 0x68
 8008430:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8008432:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008436:	2224      	movs	r2, #36	; 0x24
 8008438:	2100      	movs	r1, #0
 800843a:	4618      	mov	r0, r3
 800843c:	f008 f8c2 	bl	80105c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008440:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008444:	2200      	movs	r2, #0
 8008446:	601a      	str	r2, [r3, #0]
 8008448:	605a      	str	r2, [r3, #4]
 800844a:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800844c:	1d3b      	adds	r3, r7, #4
 800844e:	2234      	movs	r2, #52	; 0x34
 8008450:	2100      	movs	r1, #0
 8008452:	4618      	mov	r0, r3
 8008454:	f008 f8b6 	bl	80105c4 <memset>

  htim1.Instance = TIM1;
 8008458:	4b2a      	ldr	r3, [pc, #168]	; (8008504 <MX_TIM1_Init+0xd8>)
 800845a:	4a2b      	ldr	r2, [pc, #172]	; (8008508 <MX_TIM1_Init+0xdc>)
 800845c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800845e:	4b29      	ldr	r3, [pc, #164]	; (8008504 <MX_TIM1_Init+0xd8>)
 8008460:	2200      	movs	r2, #0
 8008462:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8008464:	4b27      	ldr	r3, [pc, #156]	; (8008504 <MX_TIM1_Init+0xd8>)
 8008466:	2260      	movs	r2, #96	; 0x60
 8008468:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 800846a:	4b26      	ldr	r3, [pc, #152]	; (8008504 <MX_TIM1_Init+0xd8>)
 800846c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008470:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008472:	4b24      	ldr	r3, [pc, #144]	; (8008504 <MX_TIM1_Init+0xd8>)
 8008474:	2200      	movs	r2, #0
 8008476:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008478:	4b22      	ldr	r3, [pc, #136]	; (8008504 <MX_TIM1_Init+0xd8>)
 800847a:	2200      	movs	r2, #0
 800847c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800847e:	4b21      	ldr	r3, [pc, #132]	; (8008504 <MX_TIM1_Init+0xd8>)
 8008480:	2280      	movs	r2, #128	; 0x80
 8008482:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 8008484:	2302      	movs	r3, #2
 8008486:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8008488:	2300      	movs	r3, #0
 800848a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800848c:	2301      	movs	r3, #1
 800848e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8008490:	2300      	movs	r3, #0
 8008492:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8008494:	2300      	movs	r3, #0
 8008496:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8008498:	2300      	movs	r3, #0
 800849a:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800849c:	2301      	movs	r3, #1
 800849e:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80084a0:	2300      	movs	r3, #0
 80084a2:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80084a4:	2300      	movs	r3, #0
 80084a6:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80084a8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80084ac:	4619      	mov	r1, r3
 80084ae:	4815      	ldr	r0, [pc, #84]	; (8008504 <MX_TIM1_Init+0xd8>)
 80084b0:	f005 f9fc 	bl	800d8ac <HAL_TIM_Encoder_Init>
 80084b4:	4603      	mov	r3, r0
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d001      	beq.n	80084be <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80084ba:	f7ff fd11 	bl	8007ee0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80084be:	2320      	movs	r3, #32
 80084c0:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80084c2:	2300      	movs	r3, #0
 80084c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80084c6:	2300      	movs	r3, #0
 80084c8:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80084ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80084ce:	4619      	mov	r1, r3
 80084d0:	480c      	ldr	r0, [pc, #48]	; (8008504 <MX_TIM1_Init+0xd8>)
 80084d2:	f006 fad7 	bl	800ea84 <HAL_TIMEx_MasterConfigSynchronization>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d001      	beq.n	80084e0 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80084dc:	f7ff fd00 	bl	8007ee0 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80084e0:	2300      	movs	r3, #0
 80084e2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80084e4:	2300      	movs	r3, #0
 80084e6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80084e8:	1d3b      	adds	r3, r7, #4
 80084ea:	4619      	mov	r1, r3
 80084ec:	4805      	ldr	r0, [pc, #20]	; (8008504 <MX_TIM1_Init+0xd8>)
 80084ee:	f006 fb5f 	bl	800ebb0 <HAL_TIMEx_ConfigBreakDeadTime>
 80084f2:	4603      	mov	r3, r0
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d001      	beq.n	80084fc <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 80084f8:	f7ff fcf2 	bl	8007ee0 <Error_Handler>
  }

}
 80084fc:	bf00      	nop
 80084fe:	3768      	adds	r7, #104	; 0x68
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}
 8008504:	20002c08 	.word	0x20002c08
 8008508:	40012c00 	.word	0x40012c00

0800850c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b088      	sub	sp, #32
 8008510:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008512:	f107 0310 	add.w	r3, r7, #16
 8008516:	2200      	movs	r2, #0
 8008518:	601a      	str	r2, [r3, #0]
 800851a:	605a      	str	r2, [r3, #4]
 800851c:	609a      	str	r2, [r3, #8]
 800851e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008520:	1d3b      	adds	r3, r7, #4
 8008522:	2200      	movs	r2, #0
 8008524:	601a      	str	r2, [r3, #0]
 8008526:	605a      	str	r2, [r3, #4]
 8008528:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 800852a:	4b1d      	ldr	r3, [pc, #116]	; (80085a0 <MX_TIM2_Init+0x94>)
 800852c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008530:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8008532:	4b1b      	ldr	r3, [pc, #108]	; (80085a0 <MX_TIM2_Init+0x94>)
 8008534:	2200      	movs	r2, #0
 8008536:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008538:	4b19      	ldr	r3, [pc, #100]	; (80085a0 <MX_TIM2_Init+0x94>)
 800853a:	2200      	movs	r2, #0
 800853c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 800853e:	4b18      	ldr	r3, [pc, #96]	; (80085a0 <MX_TIM2_Init+0x94>)
 8008540:	2201      	movs	r2, #1
 8008542:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008544:	4b16      	ldr	r3, [pc, #88]	; (80085a0 <MX_TIM2_Init+0x94>)
 8008546:	2200      	movs	r2, #0
 8008548:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800854a:	4b15      	ldr	r3, [pc, #84]	; (80085a0 <MX_TIM2_Init+0x94>)
 800854c:	2280      	movs	r2, #128	; 0x80
 800854e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008550:	4813      	ldr	r0, [pc, #76]	; (80085a0 <MX_TIM2_Init+0x94>)
 8008552:	f004 fec1 	bl	800d2d8 <HAL_TIM_Base_Init>
 8008556:	4603      	mov	r3, r0
 8008558:	2b00      	cmp	r3, #0
 800855a:	d001      	beq.n	8008560 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800855c:	f7ff fcc0 	bl	8007ee0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008560:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008564:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008566:	f107 0310 	add.w	r3, r7, #16
 800856a:	4619      	mov	r1, r3
 800856c:	480c      	ldr	r0, [pc, #48]	; (80085a0 <MX_TIM2_Init+0x94>)
 800856e:	f005 fcd3 	bl	800df18 <HAL_TIM_ConfigClockSource>
 8008572:	4603      	mov	r3, r0
 8008574:	2b00      	cmp	r3, #0
 8008576:	d001      	beq.n	800857c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8008578:	f7ff fcb2 	bl	8007ee0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800857c:	2320      	movs	r3, #32
 800857e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008580:	2300      	movs	r3, #0
 8008582:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008584:	1d3b      	adds	r3, r7, #4
 8008586:	4619      	mov	r1, r3
 8008588:	4805      	ldr	r0, [pc, #20]	; (80085a0 <MX_TIM2_Init+0x94>)
 800858a:	f006 fa7b 	bl	800ea84 <HAL_TIMEx_MasterConfigSynchronization>
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d001      	beq.n	8008598 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8008594:	f7ff fca4 	bl	8007ee0 <Error_Handler>
  }

}
 8008598:	bf00      	nop
 800859a:	3720      	adds	r7, #32
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}
 80085a0:	20002c54 	.word	0x20002c54

080085a4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b088      	sub	sp, #32
 80085a8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80085aa:	f107 0310 	add.w	r3, r7, #16
 80085ae:	2200      	movs	r2, #0
 80085b0:	601a      	str	r2, [r3, #0]
 80085b2:	605a      	str	r2, [r3, #4]
 80085b4:	609a      	str	r2, [r3, #8]
 80085b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80085b8:	1d3b      	adds	r3, r7, #4
 80085ba:	2200      	movs	r2, #0
 80085bc:	601a      	str	r2, [r3, #0]
 80085be:	605a      	str	r2, [r3, #4]
 80085c0:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 80085c2:	4b1d      	ldr	r3, [pc, #116]	; (8008638 <MX_TIM3_Init+0x94>)
 80085c4:	4a1d      	ldr	r2, [pc, #116]	; (800863c <MX_TIM3_Init+0x98>)
 80085c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80085c8:	4b1b      	ldr	r3, [pc, #108]	; (8008638 <MX_TIM3_Init+0x94>)
 80085ca:	2200      	movs	r2, #0
 80085cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80085ce:	4b1a      	ldr	r3, [pc, #104]	; (8008638 <MX_TIM3_Init+0x94>)
 80085d0:	2210      	movs	r2, #16
 80085d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 80085d4:	4b18      	ldr	r3, [pc, #96]	; (8008638 <MX_TIM3_Init+0x94>)
 80085d6:	2201      	movs	r2, #1
 80085d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80085da:	4b17      	ldr	r3, [pc, #92]	; (8008638 <MX_TIM3_Init+0x94>)
 80085dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80085e2:	4b15      	ldr	r3, [pc, #84]	; (8008638 <MX_TIM3_Init+0x94>)
 80085e4:	2280      	movs	r2, #128	; 0x80
 80085e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80085e8:	4813      	ldr	r0, [pc, #76]	; (8008638 <MX_TIM3_Init+0x94>)
 80085ea:	f004 fe75 	bl	800d2d8 <HAL_TIM_Base_Init>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d001      	beq.n	80085f8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80085f4:	f7ff fc74 	bl	8007ee0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80085f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80085fe:	f107 0310 	add.w	r3, r7, #16
 8008602:	4619      	mov	r1, r3
 8008604:	480c      	ldr	r0, [pc, #48]	; (8008638 <MX_TIM3_Init+0x94>)
 8008606:	f005 fc87 	bl	800df18 <HAL_TIM_ConfigClockSource>
 800860a:	4603      	mov	r3, r0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d001      	beq.n	8008614 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8008610:	f7ff fc66 	bl	8007ee0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8008614:	2320      	movs	r3, #32
 8008616:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008618:	2300      	movs	r3, #0
 800861a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800861c:	1d3b      	adds	r3, r7, #4
 800861e:	4619      	mov	r1, r3
 8008620:	4805      	ldr	r0, [pc, #20]	; (8008638 <MX_TIM3_Init+0x94>)
 8008622:	f006 fa2f 	bl	800ea84 <HAL_TIMEx_MasterConfigSynchronization>
 8008626:	4603      	mov	r3, r0
 8008628:	2b00      	cmp	r3, #0
 800862a:	d001      	beq.n	8008630 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800862c:	f7ff fc58 	bl	8007ee0 <Error_Handler>
  }

}
 8008630:	bf00      	nop
 8008632:	3720      	adds	r7, #32
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}
 8008638:	200022dc 	.word	0x200022dc
 800863c:	40000400 	.word	0x40000400

08008640 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b088      	sub	sp, #32
 8008644:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008646:	f107 0310 	add.w	r3, r7, #16
 800864a:	2200      	movs	r2, #0
 800864c:	601a      	str	r2, [r3, #0]
 800864e:	605a      	str	r2, [r3, #4]
 8008650:	609a      	str	r2, [r3, #8]
 8008652:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008654:	1d3b      	adds	r3, r7, #4
 8008656:	2200      	movs	r2, #0
 8008658:	601a      	str	r2, [r3, #0]
 800865a:	605a      	str	r2, [r3, #4]
 800865c:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 800865e:	4b1d      	ldr	r3, [pc, #116]	; (80086d4 <MX_TIM5_Init+0x94>)
 8008660:	4a1d      	ldr	r2, [pc, #116]	; (80086d8 <MX_TIM5_Init+0x98>)
 8008662:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8008664:	4b1b      	ldr	r3, [pc, #108]	; (80086d4 <MX_TIM5_Init+0x94>)
 8008666:	2200      	movs	r2, #0
 8008668:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800866a:	4b1a      	ldr	r3, [pc, #104]	; (80086d4 <MX_TIM5_Init+0x94>)
 800866c:	2200      	movs	r2, #0
 800866e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 8008670:	4b18      	ldr	r3, [pc, #96]	; (80086d4 <MX_TIM5_Init+0x94>)
 8008672:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008676:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008678:	4b16      	ldr	r3, [pc, #88]	; (80086d4 <MX_TIM5_Init+0x94>)
 800867a:	2200      	movs	r2, #0
 800867c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800867e:	4b15      	ldr	r3, [pc, #84]	; (80086d4 <MX_TIM5_Init+0x94>)
 8008680:	2200      	movs	r2, #0
 8008682:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8008684:	4813      	ldr	r0, [pc, #76]	; (80086d4 <MX_TIM5_Init+0x94>)
 8008686:	f004 fe27 	bl	800d2d8 <HAL_TIM_Base_Init>
 800868a:	4603      	mov	r3, r0
 800868c:	2b00      	cmp	r3, #0
 800868e:	d001      	beq.n	8008694 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8008690:	f7ff fc26 	bl	8007ee0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008698:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800869a:	f107 0310 	add.w	r3, r7, #16
 800869e:	4619      	mov	r1, r3
 80086a0:	480c      	ldr	r0, [pc, #48]	; (80086d4 <MX_TIM5_Init+0x94>)
 80086a2:	f005 fc39 	bl	800df18 <HAL_TIM_ConfigClockSource>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d001      	beq.n	80086b0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80086ac:	f7ff fc18 	bl	8007ee0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80086b0:	2300      	movs	r3, #0
 80086b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80086b4:	2300      	movs	r3, #0
 80086b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80086b8:	1d3b      	adds	r3, r7, #4
 80086ba:	4619      	mov	r1, r3
 80086bc:	4805      	ldr	r0, [pc, #20]	; (80086d4 <MX_TIM5_Init+0x94>)
 80086be:	f006 f9e1 	bl	800ea84 <HAL_TIMEx_MasterConfigSynchronization>
 80086c2:	4603      	mov	r3, r0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d001      	beq.n	80086cc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80086c8:	f7ff fc0a 	bl	8007ee0 <Error_Handler>
  }

}
 80086cc:	bf00      	nop
 80086ce:	3720      	adds	r7, #32
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	20002bbc 	.word	0x20002bbc
 80086d8:	40000c00 	.word	0x40000c00

080086dc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b094      	sub	sp, #80	; 0x50
 80086e0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80086e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80086e6:	2200      	movs	r2, #0
 80086e8:	601a      	str	r2, [r3, #0]
 80086ea:	605a      	str	r2, [r3, #4]
 80086ec:	609a      	str	r2, [r3, #8]
 80086ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80086f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80086f4:	2200      	movs	r2, #0
 80086f6:	601a      	str	r2, [r3, #0]
 80086f8:	605a      	str	r2, [r3, #4]
 80086fa:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80086fc:	463b      	mov	r3, r7
 80086fe:	2234      	movs	r2, #52	; 0x34
 8008700:	2100      	movs	r1, #0
 8008702:	4618      	mov	r0, r3
 8008704:	f007 ff5e 	bl	80105c4 <memset>

  htim8.Instance = TIM8;
 8008708:	4b26      	ldr	r3, [pc, #152]	; (80087a4 <MX_TIM8_Init+0xc8>)
 800870a:	4a27      	ldr	r2, [pc, #156]	; (80087a8 <MX_TIM8_Init+0xcc>)
 800870c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800870e:	4b25      	ldr	r3, [pc, #148]	; (80087a4 <MX_TIM8_Init+0xc8>)
 8008710:	2200      	movs	r2, #0
 8008712:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008714:	4b23      	ldr	r3, [pc, #140]	; (80087a4 <MX_TIM8_Init+0xc8>)
 8008716:	2200      	movs	r2, #0
 8008718:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 800871a:	4b22      	ldr	r3, [pc, #136]	; (80087a4 <MX_TIM8_Init+0xc8>)
 800871c:	2201      	movs	r2, #1
 800871e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008720:	4b20      	ldr	r3, [pc, #128]	; (80087a4 <MX_TIM8_Init+0xc8>)
 8008722:	2200      	movs	r2, #0
 8008724:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8008726:	4b1f      	ldr	r3, [pc, #124]	; (80087a4 <MX_TIM8_Init+0xc8>)
 8008728:	2200      	movs	r2, #0
 800872a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800872c:	4b1d      	ldr	r3, [pc, #116]	; (80087a4 <MX_TIM8_Init+0xc8>)
 800872e:	2200      	movs	r2, #0
 8008730:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8008732:	481c      	ldr	r0, [pc, #112]	; (80087a4 <MX_TIM8_Init+0xc8>)
 8008734:	f004 fdd0 	bl	800d2d8 <HAL_TIM_Base_Init>
 8008738:	4603      	mov	r3, r0
 800873a:	2b00      	cmp	r3, #0
 800873c:	d001      	beq.n	8008742 <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 800873e:	f7ff fbcf 	bl	8007ee0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008746:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8008748:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800874c:	4619      	mov	r1, r3
 800874e:	4815      	ldr	r0, [pc, #84]	; (80087a4 <MX_TIM8_Init+0xc8>)
 8008750:	f005 fbe2 	bl	800df18 <HAL_TIM_ConfigClockSource>
 8008754:	4603      	mov	r3, r0
 8008756:	2b00      	cmp	r3, #0
 8008758:	d001      	beq.n	800875e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800875a:	f7ff fbc1 	bl	8007ee0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800875e:	2320      	movs	r3, #32
 8008760:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008762:	2300      	movs	r3, #0
 8008764:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008766:	2300      	movs	r3, #0
 8008768:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800876a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800876e:	4619      	mov	r1, r3
 8008770:	480c      	ldr	r0, [pc, #48]	; (80087a4 <MX_TIM8_Init+0xc8>)
 8008772:	f006 f987 	bl	800ea84 <HAL_TIMEx_MasterConfigSynchronization>
 8008776:	4603      	mov	r3, r0
 8008778:	2b00      	cmp	r3, #0
 800877a:	d001      	beq.n	8008780 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800877c:	f7ff fbb0 	bl	8007ee0 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8008780:	2300      	movs	r3, #0
 8008782:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8008784:	2300      	movs	r3, #0
 8008786:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8008788:	463b      	mov	r3, r7
 800878a:	4619      	mov	r1, r3
 800878c:	4805      	ldr	r0, [pc, #20]	; (80087a4 <MX_TIM8_Init+0xc8>)
 800878e:	f006 fa0f 	bl	800ebb0 <HAL_TIMEx_ConfigBreakDeadTime>
 8008792:	4603      	mov	r3, r0
 8008794:	2b00      	cmp	r3, #0
 8008796:	d001      	beq.n	800879c <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8008798:	f7ff fba2 	bl	8007ee0 <Error_Handler>
  }

}
 800879c:	bf00      	nop
 800879e:	3750      	adds	r7, #80	; 0x50
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	20002ad8 	.word	0x20002ad8
 80087a8:	40013400 	.word	0x40013400

080087ac <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b088      	sub	sp, #32
 80087b0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80087b2:	f107 0310 	add.w	r3, r7, #16
 80087b6:	2200      	movs	r2, #0
 80087b8:	601a      	str	r2, [r3, #0]
 80087ba:	605a      	str	r2, [r3, #4]
 80087bc:	609a      	str	r2, [r3, #8]
 80087be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80087c0:	1d3b      	adds	r3, r7, #4
 80087c2:	2200      	movs	r2, #0
 80087c4:	601a      	str	r2, [r3, #0]
 80087c6:	605a      	str	r2, [r3, #4]
 80087c8:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 80087ca:	4b1f      	ldr	r3, [pc, #124]	; (8008848 <MX_TIM15_Init+0x9c>)
 80087cc:	4a1f      	ldr	r2, [pc, #124]	; (800884c <MX_TIM15_Init+0xa0>)
 80087ce:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 80087d0:	4b1d      	ldr	r3, [pc, #116]	; (8008848 <MX_TIM15_Init+0x9c>)
 80087d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80087d6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80087d8:	4b1b      	ldr	r3, [pc, #108]	; (8008848 <MX_TIM15_Init+0x9c>)
 80087da:	2200      	movs	r2, #0
 80087dc:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 80087de:	4b1a      	ldr	r3, [pc, #104]	; (8008848 <MX_TIM15_Init+0x9c>)
 80087e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80087e4:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80087e6:	4b18      	ldr	r3, [pc, #96]	; (8008848 <MX_TIM15_Init+0x9c>)
 80087e8:	2200      	movs	r2, #0
 80087ea:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80087ec:	4b16      	ldr	r3, [pc, #88]	; (8008848 <MX_TIM15_Init+0x9c>)
 80087ee:	2200      	movs	r2, #0
 80087f0:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80087f2:	4b15      	ldr	r3, [pc, #84]	; (8008848 <MX_TIM15_Init+0x9c>)
 80087f4:	2200      	movs	r2, #0
 80087f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80087f8:	4813      	ldr	r0, [pc, #76]	; (8008848 <MX_TIM15_Init+0x9c>)
 80087fa:	f004 fd6d 	bl	800d2d8 <HAL_TIM_Base_Init>
 80087fe:	4603      	mov	r3, r0
 8008800:	2b00      	cmp	r3, #0
 8008802:	d001      	beq.n	8008808 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8008804:	f7ff fb6c 	bl	8007ee0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800880c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800880e:	f107 0310 	add.w	r3, r7, #16
 8008812:	4619      	mov	r1, r3
 8008814:	480c      	ldr	r0, [pc, #48]	; (8008848 <MX_TIM15_Init+0x9c>)
 8008816:	f005 fb7f 	bl	800df18 <HAL_TIM_ConfigClockSource>
 800881a:	4603      	mov	r3, r0
 800881c:	2b00      	cmp	r3, #0
 800881e:	d001      	beq.n	8008824 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8008820:	f7ff fb5e 	bl	8007ee0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008824:	2300      	movs	r3, #0
 8008826:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008828:	2300      	movs	r3, #0
 800882a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800882c:	1d3b      	adds	r3, r7, #4
 800882e:	4619      	mov	r1, r3
 8008830:	4805      	ldr	r0, [pc, #20]	; (8008848 <MX_TIM15_Init+0x9c>)
 8008832:	f006 f927 	bl	800ea84 <HAL_TIMEx_MasterConfigSynchronization>
 8008836:	4603      	mov	r3, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d001      	beq.n	8008840 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 800883c:	f7ff fb50 	bl	8007ee0 <Error_Handler>
  }

}
 8008840:	bf00      	nop
 8008842:	3720      	adds	r7, #32
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}
 8008848:	20002b24 	.word	0x20002b24
 800884c:	40014000 	.word	0x40014000

08008850 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8008854:	4b10      	ldr	r3, [pc, #64]	; (8008898 <MX_TIM16_Init+0x48>)
 8008856:	4a11      	ldr	r2, [pc, #68]	; (800889c <MX_TIM16_Init+0x4c>)
 8008858:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 65535;
 800885a:	4b0f      	ldr	r3, [pc, #60]	; (8008898 <MX_TIM16_Init+0x48>)
 800885c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008860:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008862:	4b0d      	ldr	r3, [pc, #52]	; (8008898 <MX_TIM16_Init+0x48>)
 8008864:	2200      	movs	r2, #0
 8008866:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8008868:	4b0b      	ldr	r3, [pc, #44]	; (8008898 <MX_TIM16_Init+0x48>)
 800886a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800886e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008870:	4b09      	ldr	r3, [pc, #36]	; (8008898 <MX_TIM16_Init+0x48>)
 8008872:	2200      	movs	r2, #0
 8008874:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8008876:	4b08      	ldr	r3, [pc, #32]	; (8008898 <MX_TIM16_Init+0x48>)
 8008878:	2200      	movs	r2, #0
 800887a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800887c:	4b06      	ldr	r3, [pc, #24]	; (8008898 <MX_TIM16_Init+0x48>)
 800887e:	2200      	movs	r2, #0
 8008880:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8008882:	4805      	ldr	r0, [pc, #20]	; (8008898 <MX_TIM16_Init+0x48>)
 8008884:	f004 fd28 	bl	800d2d8 <HAL_TIM_Base_Init>
 8008888:	4603      	mov	r3, r0
 800888a:	2b00      	cmp	r3, #0
 800888c:	d001      	beq.n	8008892 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800888e:	f7ff fb27 	bl	8007ee0 <Error_Handler>
  }

}
 8008892:	bf00      	nop
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	20002ca0 	.word	0x20002ca0
 800889c:	40014400 	.word	0x40014400

080088a0 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 80088a4:	4b10      	ldr	r3, [pc, #64]	; (80088e8 <MX_TIM17_Init+0x48>)
 80088a6:	4a11      	ldr	r2, [pc, #68]	; (80088ec <MX_TIM17_Init+0x4c>)
 80088a8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1024;
 80088aa:	4b0f      	ldr	r3, [pc, #60]	; (80088e8 <MX_TIM17_Init+0x48>)
 80088ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80088b0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80088b2:	4b0d      	ldr	r3, [pc, #52]	; (80088e8 <MX_TIM17_Init+0x48>)
 80088b4:	2200      	movs	r2, #0
 80088b6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1024;
 80088b8:	4b0b      	ldr	r3, [pc, #44]	; (80088e8 <MX_TIM17_Init+0x48>)
 80088ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80088be:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80088c0:	4b09      	ldr	r3, [pc, #36]	; (80088e8 <MX_TIM17_Init+0x48>)
 80088c2:	2200      	movs	r2, #0
 80088c4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80088c6:	4b08      	ldr	r3, [pc, #32]	; (80088e8 <MX_TIM17_Init+0x48>)
 80088c8:	2200      	movs	r2, #0
 80088ca:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80088cc:	4b06      	ldr	r3, [pc, #24]	; (80088e8 <MX_TIM17_Init+0x48>)
 80088ce:	2200      	movs	r2, #0
 80088d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80088d2:	4805      	ldr	r0, [pc, #20]	; (80088e8 <MX_TIM17_Init+0x48>)
 80088d4:	f004 fd00 	bl	800d2d8 <HAL_TIM_Base_Init>
 80088d8:	4603      	mov	r3, r0
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d001      	beq.n	80088e2 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 80088de:	f7ff faff 	bl	8007ee0 <Error_Handler>
  }

}
 80088e2:	bf00      	nop
 80088e4:	bd80      	pop	{r7, pc}
 80088e6:	bf00      	nop
 80088e8:	20002b70 	.word	0x20002b70
 80088ec:	40014800 	.word	0x40014800

080088f0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b08a      	sub	sp, #40	; 0x28
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088f8:	f107 0314 	add.w	r3, r7, #20
 80088fc:	2200      	movs	r2, #0
 80088fe:	601a      	str	r2, [r3, #0]
 8008900:	605a      	str	r2, [r3, #4]
 8008902:	609a      	str	r2, [r3, #8]
 8008904:	60da      	str	r2, [r3, #12]
 8008906:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a1f      	ldr	r2, [pc, #124]	; (800898c <HAL_TIM_Encoder_MspInit+0x9c>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d137      	bne.n	8008982 <HAL_TIM_Encoder_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008912:	4b1f      	ldr	r3, [pc, #124]	; (8008990 <HAL_TIM_Encoder_MspInit+0xa0>)
 8008914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008916:	4a1e      	ldr	r2, [pc, #120]	; (8008990 <HAL_TIM_Encoder_MspInit+0xa0>)
 8008918:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800891c:	6613      	str	r3, [r2, #96]	; 0x60
 800891e:	4b1c      	ldr	r3, [pc, #112]	; (8008990 <HAL_TIM_Encoder_MspInit+0xa0>)
 8008920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008922:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008926:	613b      	str	r3, [r7, #16]
 8008928:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800892a:	4b19      	ldr	r3, [pc, #100]	; (8008990 <HAL_TIM_Encoder_MspInit+0xa0>)
 800892c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800892e:	4a18      	ldr	r2, [pc, #96]	; (8008990 <HAL_TIM_Encoder_MspInit+0xa0>)
 8008930:	f043 0304 	orr.w	r3, r3, #4
 8008934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008936:	4b16      	ldr	r3, [pc, #88]	; (8008990 <HAL_TIM_Encoder_MspInit+0xa0>)
 8008938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800893a:	f003 0304 	and.w	r3, r3, #4
 800893e:	60fb      	str	r3, [r7, #12]
 8008940:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008942:	2303      	movs	r3, #3
 8008944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008946:	2302      	movs	r3, #2
 8008948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800894a:	2300      	movs	r3, #0
 800894c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800894e:	2300      	movs	r3, #0
 8008950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8008952:	2302      	movs	r3, #2
 8008954:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008956:	f107 0314 	add.w	r3, r7, #20
 800895a:	4619      	mov	r1, r3
 800895c:	480d      	ldr	r0, [pc, #52]	; (8008994 <HAL_TIM_Encoder_MspInit+0xa4>)
 800895e:	f003 f9b5 	bl	800bccc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8008962:	2200      	movs	r2, #0
 8008964:	2100      	movs	r1, #0
 8008966:	2018      	movs	r0, #24
 8008968:	f002 fa83 	bl	800ae72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800896c:	2018      	movs	r0, #24
 800896e:	f002 fa9a 	bl	800aea6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8008972:	2200      	movs	r2, #0
 8008974:	2101      	movs	r1, #1
 8008976:	201a      	movs	r0, #26
 8008978:	f002 fa7b 	bl	800ae72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800897c:	201a      	movs	r0, #26
 800897e:	f002 fa92 	bl	800aea6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8008982:	bf00      	nop
 8008984:	3728      	adds	r7, #40	; 0x28
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}
 800898a:	bf00      	nop
 800898c:	40012c00 	.word	0x40012c00
 8008990:	40021000 	.word	0x40021000
 8008994:	48000800 	.word	0x48000800

08008998 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b08a      	sub	sp, #40	; 0x28
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089a8:	d114      	bne.n	80089d4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80089aa:	4b52      	ldr	r3, [pc, #328]	; (8008af4 <HAL_TIM_Base_MspInit+0x15c>)
 80089ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089ae:	4a51      	ldr	r2, [pc, #324]	; (8008af4 <HAL_TIM_Base_MspInit+0x15c>)
 80089b0:	f043 0301 	orr.w	r3, r3, #1
 80089b4:	6593      	str	r3, [r2, #88]	; 0x58
 80089b6:	4b4f      	ldr	r3, [pc, #316]	; (8008af4 <HAL_TIM_Base_MspInit+0x15c>)
 80089b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089ba:	f003 0301 	and.w	r3, r3, #1
 80089be:	627b      	str	r3, [r7, #36]	; 0x24
 80089c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80089c2:	2200      	movs	r2, #0
 80089c4:	2100      	movs	r1, #0
 80089c6:	201c      	movs	r0, #28
 80089c8:	f002 fa53 	bl	800ae72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80089cc:	201c      	movs	r0, #28
 80089ce:	f002 fa6a 	bl	800aea6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80089d2:	e08a      	b.n	8008aea <HAL_TIM_Base_MspInit+0x152>
  else if(tim_baseHandle->Instance==TIM3)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a47      	ldr	r2, [pc, #284]	; (8008af8 <HAL_TIM_Base_MspInit+0x160>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d114      	bne.n	8008a08 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80089de:	4b45      	ldr	r3, [pc, #276]	; (8008af4 <HAL_TIM_Base_MspInit+0x15c>)
 80089e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089e2:	4a44      	ldr	r2, [pc, #272]	; (8008af4 <HAL_TIM_Base_MspInit+0x15c>)
 80089e4:	f043 0302 	orr.w	r3, r3, #2
 80089e8:	6593      	str	r3, [r2, #88]	; 0x58
 80089ea:	4b42      	ldr	r3, [pc, #264]	; (8008af4 <HAL_TIM_Base_MspInit+0x15c>)
 80089ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089ee:	f003 0302 	and.w	r3, r3, #2
 80089f2:	623b      	str	r3, [r7, #32]
 80089f4:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80089f6:	2200      	movs	r2, #0
 80089f8:	2100      	movs	r1, #0
 80089fa:	201d      	movs	r0, #29
 80089fc:	f002 fa39 	bl	800ae72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8008a00:	201d      	movs	r0, #29
 8008a02:	f002 fa50 	bl	800aea6 <HAL_NVIC_EnableIRQ>
}
 8008a06:	e070      	b.n	8008aea <HAL_TIM_Base_MspInit+0x152>
  else if(tim_baseHandle->Instance==TIM5)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a3b      	ldr	r2, [pc, #236]	; (8008afc <HAL_TIM_Base_MspInit+0x164>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d114      	bne.n	8008a3c <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8008a12:	4b38      	ldr	r3, [pc, #224]	; (8008af4 <HAL_TIM_Base_MspInit+0x15c>)
 8008a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a16:	4a37      	ldr	r2, [pc, #220]	; (8008af4 <HAL_TIM_Base_MspInit+0x15c>)
 8008a18:	f043 0308 	orr.w	r3, r3, #8
 8008a1c:	6593      	str	r3, [r2, #88]	; 0x58
 8008a1e:	4b35      	ldr	r3, [pc, #212]	; (8008af4 <HAL_TIM_Base_MspInit+0x15c>)
 8008a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a22:	f003 0308 	and.w	r3, r3, #8
 8008a26:	61fb      	str	r3, [r7, #28]
 8008a28:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 2, 0);
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	2102      	movs	r1, #2
 8008a2e:	2032      	movs	r0, #50	; 0x32
 8008a30:	f002 fa1f 	bl	800ae72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8008a34:	2032      	movs	r0, #50	; 0x32
 8008a36:	f002 fa36 	bl	800aea6 <HAL_NVIC_EnableIRQ>
}
 8008a3a:	e056      	b.n	8008aea <HAL_TIM_Base_MspInit+0x152>
  else if(tim_baseHandle->Instance==TIM8)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a2f      	ldr	r2, [pc, #188]	; (8008b00 <HAL_TIM_Base_MspInit+0x168>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d10c      	bne.n	8008a60 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8008a46:	4b2b      	ldr	r3, [pc, #172]	; (8008af4 <HAL_TIM_Base_MspInit+0x15c>)
 8008a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a4a:	4a2a      	ldr	r2, [pc, #168]	; (8008af4 <HAL_TIM_Base_MspInit+0x15c>)
 8008a4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008a50:	6613      	str	r3, [r2, #96]	; 0x60
 8008a52:	4b28      	ldr	r3, [pc, #160]	; (8008af4 <HAL_TIM_Base_MspInit+0x15c>)
 8008a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a5a:	61bb      	str	r3, [r7, #24]
 8008a5c:	69bb      	ldr	r3, [r7, #24]
}
 8008a5e:	e044      	b.n	8008aea <HAL_TIM_Base_MspInit+0x152>
  else if(tim_baseHandle->Instance==TIM15)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a27      	ldr	r2, [pc, #156]	; (8008b04 <HAL_TIM_Base_MspInit+0x16c>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d114      	bne.n	8008a94 <HAL_TIM_Base_MspInit+0xfc>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8008a6a:	4b22      	ldr	r3, [pc, #136]	; (8008af4 <HAL_TIM_Base_MspInit+0x15c>)
 8008a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a6e:	4a21      	ldr	r2, [pc, #132]	; (8008af4 <HAL_TIM_Base_MspInit+0x15c>)
 8008a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a74:	6613      	str	r3, [r2, #96]	; 0x60
 8008a76:	4b1f      	ldr	r3, [pc, #124]	; (8008af4 <HAL_TIM_Base_MspInit+0x15c>)
 8008a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a7e:	617b      	str	r3, [r7, #20]
 8008a80:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8008a82:	2200      	movs	r2, #0
 8008a84:	2100      	movs	r1, #0
 8008a86:	2018      	movs	r0, #24
 8008a88:	f002 f9f3 	bl	800ae72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8008a8c:	2018      	movs	r0, #24
 8008a8e:	f002 fa0a 	bl	800aea6 <HAL_NVIC_EnableIRQ>
}
 8008a92:	e02a      	b.n	8008aea <HAL_TIM_Base_MspInit+0x152>
  else if(tim_baseHandle->Instance==TIM16)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a1b      	ldr	r2, [pc, #108]	; (8008b08 <HAL_TIM_Base_MspInit+0x170>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d10c      	bne.n	8008ab8 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8008a9e:	4b15      	ldr	r3, [pc, #84]	; (8008af4 <HAL_TIM_Base_MspInit+0x15c>)
 8008aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008aa2:	4a14      	ldr	r2, [pc, #80]	; (8008af4 <HAL_TIM_Base_MspInit+0x15c>)
 8008aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008aa8:	6613      	str	r3, [r2, #96]	; 0x60
 8008aaa:	4b12      	ldr	r3, [pc, #72]	; (8008af4 <HAL_TIM_Base_MspInit+0x15c>)
 8008aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ab2:	613b      	str	r3, [r7, #16]
 8008ab4:	693b      	ldr	r3, [r7, #16]
}
 8008ab6:	e018      	b.n	8008aea <HAL_TIM_Base_MspInit+0x152>
  else if(tim_baseHandle->Instance==TIM17)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a13      	ldr	r2, [pc, #76]	; (8008b0c <HAL_TIM_Base_MspInit+0x174>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d113      	bne.n	8008aea <HAL_TIM_Base_MspInit+0x152>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8008ac2:	4b0c      	ldr	r3, [pc, #48]	; (8008af4 <HAL_TIM_Base_MspInit+0x15c>)
 8008ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ac6:	4a0b      	ldr	r2, [pc, #44]	; (8008af4 <HAL_TIM_Base_MspInit+0x15c>)
 8008ac8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008acc:	6613      	str	r3, [r2, #96]	; 0x60
 8008ace:	4b09      	ldr	r3, [pc, #36]	; (8008af4 <HAL_TIM_Base_MspInit+0x15c>)
 8008ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ad2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008ad6:	60fb      	str	r3, [r7, #12]
 8008ad8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8008ada:	2200      	movs	r2, #0
 8008adc:	2101      	movs	r1, #1
 8008ade:	201a      	movs	r0, #26
 8008ae0:	f002 f9c7 	bl	800ae72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8008ae4:	201a      	movs	r0, #26
 8008ae6:	f002 f9de 	bl	800aea6 <HAL_NVIC_EnableIRQ>
}
 8008aea:	bf00      	nop
 8008aec:	3728      	adds	r7, #40	; 0x28
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	bf00      	nop
 8008af4:	40021000 	.word	0x40021000
 8008af8:	40000400 	.word	0x40000400
 8008afc:	40000c00 	.word	0x40000c00
 8008b00:	40013400 	.word	0x40013400
 8008b04:	40014000 	.word	0x40014000
 8008b08:	40014400 	.word	0x40014400
 8008b0c:	40014800 	.word	0x40014800

08008b10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008b10:	480d      	ldr	r0, [pc, #52]	; (8008b48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008b12:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008b14:	480d      	ldr	r0, [pc, #52]	; (8008b4c <LoopForever+0x6>)
  ldr r1, =_edata
 8008b16:	490e      	ldr	r1, [pc, #56]	; (8008b50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008b18:	4a0e      	ldr	r2, [pc, #56]	; (8008b54 <LoopForever+0xe>)
  movs r3, #0
 8008b1a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8008b1c:	e002      	b.n	8008b24 <LoopCopyDataInit>

08008b1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008b1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008b20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008b22:	3304      	adds	r3, #4

08008b24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008b24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008b26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008b28:	d3f9      	bcc.n	8008b1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008b2a:	4a0b      	ldr	r2, [pc, #44]	; (8008b58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008b2c:	4c0b      	ldr	r4, [pc, #44]	; (8008b5c <LoopForever+0x16>)
  movs r3, #0
 8008b2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008b30:	e001      	b.n	8008b36 <LoopFillZerobss>

08008b32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008b32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008b34:	3204      	adds	r2, #4

08008b36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008b36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008b38:	d3fb      	bcc.n	8008b32 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008b3a:	f7ff fc61 	bl	8008400 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008b3e:	f007 fd1d 	bl	801057c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008b42:	f7ff f90d 	bl	8007d60 <main>

08008b46 <LoopForever>:

LoopForever:
    b LoopForever
 8008b46:	e7fe      	b.n	8008b46 <LoopForever>
  ldr   r0, =_estack
 8008b48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008b4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008b50:	20001e0c 	.word	0x20001e0c
  ldr r2, =_sidata
 8008b54:	08015af0 	.word	0x08015af0
  ldr r2, =_sbss
 8008b58:	20001e0c 	.word	0x20001e0c
  ldr r4, =_ebss
 8008b5c:	20002cf4 	.word	0x20002cf4

08008b60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008b60:	e7fe      	b.n	8008b60 <ADC1_2_IRQHandler>

08008b62 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008b62:	b580      	push	{r7, lr}
 8008b64:	b082      	sub	sp, #8
 8008b66:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008b6c:	2003      	movs	r0, #3
 8008b6e:	f002 f975 	bl	800ae5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008b72:	2000      	movs	r0, #0
 8008b74:	f000 f80e 	bl	8008b94 <HAL_InitTick>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d002      	beq.n	8008b84 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	71fb      	strb	r3, [r7, #7]
 8008b82:	e001      	b.n	8008b88 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008b84:	f7ff fa7c 	bl	8008080 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008b88:	79fb      	ldrb	r3, [r7, #7]

}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3708      	adds	r7, #8
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
	...

08008b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b084      	sub	sp, #16
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8008ba0:	4b16      	ldr	r3, [pc, #88]	; (8008bfc <HAL_InitTick+0x68>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d022      	beq.n	8008bee <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8008ba8:	4b15      	ldr	r3, [pc, #84]	; (8008c00 <HAL_InitTick+0x6c>)
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	4b13      	ldr	r3, [pc, #76]	; (8008bfc <HAL_InitTick+0x68>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008bb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8008bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f002 f98e 	bl	800aede <HAL_SYSTICK_Config>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d10f      	bne.n	8008be8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2b0f      	cmp	r3, #15
 8008bcc:	d809      	bhi.n	8008be2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008bce:	2200      	movs	r2, #0
 8008bd0:	6879      	ldr	r1, [r7, #4]
 8008bd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bd6:	f002 f94c 	bl	800ae72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008bda:	4a0a      	ldr	r2, [pc, #40]	; (8008c04 <HAL_InitTick+0x70>)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6013      	str	r3, [r2, #0]
 8008be0:	e007      	b.n	8008bf2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	73fb      	strb	r3, [r7, #15]
 8008be6:	e004      	b.n	8008bf2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008be8:	2301      	movs	r3, #1
 8008bea:	73fb      	strb	r3, [r7, #15]
 8008bec:	e001      	b.n	8008bf2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8008bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3710      	adds	r7, #16
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}
 8008bfc:	20000c3c 	.word	0x20000c3c
 8008c00:	20000c34 	.word	0x20000c34
 8008c04:	20000c38 	.word	0x20000c38

08008c08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008c0c:	4b05      	ldr	r3, [pc, #20]	; (8008c24 <HAL_IncTick+0x1c>)
 8008c0e:	681a      	ldr	r2, [r3, #0]
 8008c10:	4b05      	ldr	r3, [pc, #20]	; (8008c28 <HAL_IncTick+0x20>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4413      	add	r3, r2
 8008c16:	4a03      	ldr	r2, [pc, #12]	; (8008c24 <HAL_IncTick+0x1c>)
 8008c18:	6013      	str	r3, [r2, #0]
}
 8008c1a:	bf00      	nop
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr
 8008c24:	20002cec 	.word	0x20002cec
 8008c28:	20000c3c 	.word	0x20000c3c

08008c2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8008c30:	4b03      	ldr	r3, [pc, #12]	; (8008c40 <HAL_GetTick+0x14>)
 8008c32:	681b      	ldr	r3, [r3, #0]
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	46bd      	mov	sp, r7
 8008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3c:	4770      	bx	lr
 8008c3e:	bf00      	nop
 8008c40:	20002cec 	.word	0x20002cec

08008c44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b084      	sub	sp, #16
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008c4c:	f7ff ffee 	bl	8008c2c <HAL_GetTick>
 8008c50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c5c:	d004      	beq.n	8008c68 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8008c5e:	4b09      	ldr	r3, [pc, #36]	; (8008c84 <HAL_Delay+0x40>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	68fa      	ldr	r2, [r7, #12]
 8008c64:	4413      	add	r3, r2
 8008c66:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008c68:	bf00      	nop
 8008c6a:	f7ff ffdf 	bl	8008c2c <HAL_GetTick>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	1ad3      	subs	r3, r2, r3
 8008c74:	68fa      	ldr	r2, [r7, #12]
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d8f7      	bhi.n	8008c6a <HAL_Delay+0x26>
  {
  }
}
 8008c7a:	bf00      	nop
 8008c7c:	3710      	adds	r7, #16
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	20000c3c 	.word	0x20000c3c

08008c88 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	689b      	ldr	r3, [r3, #8]
 8008c96:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	431a      	orrs	r2, r3
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	609a      	str	r2, [r3, #8]
}
 8008ca2:	bf00      	nop
 8008ca4:	370c      	adds	r7, #12
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr

08008cae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8008cae:	b480      	push	{r7}
 8008cb0:	b083      	sub	sp, #12
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
 8008cb6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	689b      	ldr	r3, [r3, #8]
 8008cbc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	431a      	orrs	r2, r3
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	609a      	str	r2, [r3, #8]
}
 8008cc8:	bf00      	nop
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	370c      	adds	r7, #12
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8008cf0:	b490      	push	{r4, r7}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	60f8      	str	r0, [r7, #12]
 8008cf8:	60b9      	str	r1, [r7, #8]
 8008cfa:	607a      	str	r2, [r7, #4]
 8008cfc:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	3360      	adds	r3, #96	; 0x60
 8008d02:	461a      	mov	r2, r3
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	009b      	lsls	r3, r3, #2
 8008d08:	4413      	add	r3, r2
 8008d0a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008d0c:	6822      	ldr	r2, [r4, #0]
 8008d0e:	4b08      	ldr	r3, [pc, #32]	; (8008d30 <LL_ADC_SetOffset+0x40>)
 8008d10:	4013      	ands	r3, r2
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8008d18:	683a      	ldr	r2, [r7, #0]
 8008d1a:	430a      	orrs	r2, r1
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d22:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8008d24:	bf00      	nop
 8008d26:	3710      	adds	r7, #16
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bc90      	pop	{r4, r7}
 8008d2c:	4770      	bx	lr
 8008d2e:	bf00      	nop
 8008d30:	03fff000 	.word	0x03fff000

08008d34 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8008d34:	b490      	push	{r4, r7}
 8008d36:	b082      	sub	sp, #8
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	3360      	adds	r3, #96	; 0x60
 8008d42:	461a      	mov	r2, r3
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	4413      	add	r3, r2
 8008d4a:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008d4c:	6823      	ldr	r3, [r4, #0]
 8008d4e:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3708      	adds	r7, #8
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bc90      	pop	{r4, r7}
 8008d5a:	4770      	bx	lr

08008d5c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8008d5c:	b490      	push	{r4, r7}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	3360      	adds	r3, #96	; 0x60
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	4413      	add	r3, r2
 8008d74:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008d76:	6823      	ldr	r3, [r4, #0]
 8008d78:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8008d82:	bf00      	nop
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bc90      	pop	{r4, r7}
 8008d8a:	4770      	bx	lr

08008d8c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8008d8c:	b490      	push	{r4, r7}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	60f8      	str	r0, [r7, #12]
 8008d94:	60b9      	str	r1, [r7, #8]
 8008d96:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	3360      	adds	r3, #96	; 0x60
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	4413      	add	r3, r2
 8008da4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008da6:	6823      	ldr	r3, [r4, #0]
 8008da8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	4313      	orrs	r3, r2
 8008db0:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8008db2:	bf00      	nop
 8008db4:	3710      	adds	r7, #16
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bc90      	pop	{r4, r7}
 8008dba:	4770      	bx	lr

08008dbc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8008dbc:	b490      	push	{r4, r7}
 8008dbe:	b084      	sub	sp, #16
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	60f8      	str	r0, [r7, #12]
 8008dc4:	60b9      	str	r1, [r7, #8]
 8008dc6:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	3360      	adds	r3, #96	; 0x60
 8008dcc:	461a      	mov	r2, r3
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	4413      	add	r3, r2
 8008dd4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008dd6:	6823      	ldr	r3, [r4, #0]
 8008dd8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	4313      	orrs	r3, r2
 8008de0:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8008de2:	bf00      	nop
 8008de4:	3710      	adds	r7, #16
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bc90      	pop	{r4, r7}
 8008dea:	4770      	bx	lr

08008dec <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b083      	sub	sp, #12
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	695b      	ldr	r3, [r3, #20]
 8008dfa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	431a      	orrs	r2, r3
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	615a      	str	r2, [r3, #20]
}
 8008e06:	bf00      	nop
 8008e08:	370c      	adds	r7, #12
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr

08008e12 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8008e12:	b480      	push	{r7}
 8008e14:	b083      	sub	sp, #12
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	68db      	ldr	r3, [r3, #12]
 8008e1e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d101      	bne.n	8008e2a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8008e26:	2301      	movs	r3, #1
 8008e28:	e000      	b.n	8008e2c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8008e2a:	2300      	movs	r3, #0
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	370c      	adds	r7, #12
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr

08008e38 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8008e38:	b490      	push	{r4, r7}
 8008e3a:	b084      	sub	sp, #16
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	60f8      	str	r0, [r7, #12]
 8008e40:	60b9      	str	r1, [r7, #8]
 8008e42:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	3330      	adds	r3, #48	; 0x30
 8008e48:	461a      	mov	r2, r3
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	0a1b      	lsrs	r3, r3, #8
 8008e4e:	009b      	lsls	r3, r3, #2
 8008e50:	f003 030c 	and.w	r3, r3, #12
 8008e54:	4413      	add	r3, r2
 8008e56:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008e58:	6822      	ldr	r2, [r4, #0]
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	f003 031f 	and.w	r3, r3, #31
 8008e60:	211f      	movs	r1, #31
 8008e62:	fa01 f303 	lsl.w	r3, r1, r3
 8008e66:	43db      	mvns	r3, r3
 8008e68:	401a      	ands	r2, r3
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	0e9b      	lsrs	r3, r3, #26
 8008e6e:	f003 011f 	and.w	r1, r3, #31
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	f003 031f 	and.w	r3, r3, #31
 8008e78:	fa01 f303 	lsl.w	r3, r1, r3
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8008e80:	bf00      	nop
 8008e82:	3710      	adds	r7, #16
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bc90      	pop	{r4, r7}
 8008e88:	4770      	bx	lr

08008e8a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8008e8a:	b490      	push	{r4, r7}
 8008e8c:	b084      	sub	sp, #16
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	60f8      	str	r0, [r7, #12]
 8008e92:	60b9      	str	r1, [r7, #8]
 8008e94:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	3314      	adds	r3, #20
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	0e5b      	lsrs	r3, r3, #25
 8008ea0:	009b      	lsls	r3, r3, #2
 8008ea2:	f003 0304 	and.w	r3, r3, #4
 8008ea6:	4413      	add	r3, r2
 8008ea8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008eaa:	6822      	ldr	r2, [r4, #0]
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	0d1b      	lsrs	r3, r3, #20
 8008eb0:	f003 031f 	and.w	r3, r3, #31
 8008eb4:	2107      	movs	r1, #7
 8008eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8008eba:	43db      	mvns	r3, r3
 8008ebc:	401a      	ands	r2, r3
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	0d1b      	lsrs	r3, r3, #20
 8008ec2:	f003 031f 	and.w	r3, r3, #31
 8008ec6:	6879      	ldr	r1, [r7, #4]
 8008ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8008ed0:	bf00      	nop
 8008ed2:	3710      	adds	r7, #16
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bc90      	pop	{r4, r7}
 8008ed8:	4770      	bx	lr
	...

08008edc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b085      	sub	sp, #20
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	60b9      	str	r1, [r7, #8]
 8008ee6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ef4:	43db      	mvns	r3, r3
 8008ef6:	401a      	ands	r2, r3
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f003 0318 	and.w	r3, r3, #24
 8008efe:	4908      	ldr	r1, [pc, #32]	; (8008f20 <LL_ADC_SetChannelSingleDiff+0x44>)
 8008f00:	40d9      	lsrs	r1, r3
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	400b      	ands	r3, r1
 8008f06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f0a:	431a      	orrs	r2, r3
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8008f12:	bf00      	nop
 8008f14:	3714      	adds	r7, #20
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr
 8008f1e:	bf00      	nop
 8008f20:	0007ffff 	.word	0x0007ffff

08008f24 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b083      	sub	sp, #12
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	f003 031f 	and.w	r3, r3, #31
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	370c      	adds	r7, #12
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b083      	sub	sp, #12
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8008f50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008f54:	687a      	ldr	r2, [r7, #4]
 8008f56:	6093      	str	r3, [r2, #8]
}
 8008f58:	bf00      	nop
 8008f5a:	370c      	adds	r7, #12
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr

08008f64 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b083      	sub	sp, #12
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f78:	d101      	bne.n	8008f7e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	e000      	b.n	8008f80 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8008f7e:	2300      	movs	r3, #0
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	370c      	adds	r7, #12
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr

08008f8c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8008f9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008fa0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8008fa8:	bf00      	nop
 8008faa:	370c      	adds	r7, #12
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr

08008fb4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fc8:	d101      	bne.n	8008fce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8008fca:	2301      	movs	r3, #1
 8008fcc:	e000      	b.n	8008fd0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8008fce:	2300      	movs	r3, #0
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	370c      	adds	r7, #12
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr

08008fdc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008fec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008ff0:	f043 0201 	orr.w	r2, r3, #1
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8008ff8:	bf00      	nop
 8008ffa:	370c      	adds	r7, #12
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8009004:	b480      	push	{r7}
 8009006:	b083      	sub	sp, #12
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009014:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009018:	f043 0202 	orr.w	r2, r3, #2
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8009020:	bf00      	nop
 8009022:	370c      	adds	r7, #12
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr

0800902c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800902c:	b480      	push	{r7}
 800902e:	b083      	sub	sp, #12
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	689b      	ldr	r3, [r3, #8]
 8009038:	f003 0301 	and.w	r3, r3, #1
 800903c:	2b01      	cmp	r3, #1
 800903e:	d101      	bne.n	8009044 <LL_ADC_IsEnabled+0x18>
 8009040:	2301      	movs	r3, #1
 8009042:	e000      	b.n	8009046 <LL_ADC_IsEnabled+0x1a>
 8009044:	2300      	movs	r3, #0
}
 8009046:	4618      	mov	r0, r3
 8009048:	370c      	adds	r7, #12
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr

08009052 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8009052:	b480      	push	{r7}
 8009054:	b083      	sub	sp, #12
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	f003 0302 	and.w	r3, r3, #2
 8009062:	2b02      	cmp	r3, #2
 8009064:	d101      	bne.n	800906a <LL_ADC_IsDisableOngoing+0x18>
 8009066:	2301      	movs	r3, #1
 8009068:	e000      	b.n	800906c <LL_ADC_IsDisableOngoing+0x1a>
 800906a:	2300      	movs	r3, #0
}
 800906c:	4618      	mov	r0, r3
 800906e:	370c      	adds	r7, #12
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr

08009078 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8009078:	b480      	push	{r7}
 800907a:	b083      	sub	sp, #12
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009088:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800908c:	f043 0204 	orr.w	r2, r3, #4
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8009094:	bf00      	nop
 8009096:	370c      	adds	r7, #12
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr

080090a0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b083      	sub	sp, #12
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	689b      	ldr	r3, [r3, #8]
 80090ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80090b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80090b4:	f043 0210 	orr.w	r2, r3, #16
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80090bc:	bf00      	nop
 80090be:	370c      	adds	r7, #12
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr

080090c8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b083      	sub	sp, #12
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	f003 0304 	and.w	r3, r3, #4
 80090d8:	2b04      	cmp	r3, #4
 80090da:	d101      	bne.n	80090e0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80090dc:	2301      	movs	r3, #1
 80090de:	e000      	b.n	80090e2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80090e0:	2300      	movs	r3, #0
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	370c      	adds	r7, #12
 80090e6:	46bd      	mov	sp, r7
 80090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ec:	4770      	bx	lr

080090ee <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80090ee:	b480      	push	{r7}
 80090f0:	b083      	sub	sp, #12
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	689b      	ldr	r3, [r3, #8]
 80090fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80090fe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009102:	f043 0220 	orr.w	r2, r3, #32
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800910a:	bf00      	nop
 800910c:	370c      	adds	r7, #12
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr

08009116 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8009116:	b480      	push	{r7}
 8009118:	b083      	sub	sp, #12
 800911a:	af00      	add	r7, sp, #0
 800911c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	f003 0308 	and.w	r3, r3, #8
 8009126:	2b08      	cmp	r3, #8
 8009128:	d101      	bne.n	800912e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800912a:	2301      	movs	r3, #1
 800912c:	e000      	b.n	8009130 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800912e:	2300      	movs	r3, #0
}
 8009130:	4618      	mov	r0, r3
 8009132:	370c      	adds	r7, #12
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr

0800913c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800913c:	b590      	push	{r4, r7, lr}
 800913e:	b089      	sub	sp, #36	; 0x24
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009144:	2300      	movs	r3, #0
 8009146:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8009148:	2300      	movs	r3, #0
 800914a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d101      	bne.n	8009156 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8009152:	2301      	movs	r3, #1
 8009154:	e1ad      	b.n	80094b2 <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	695b      	ldr	r3, [r3, #20]
 800915a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009160:	2b00      	cmp	r3, #0
 8009162:	d109      	bne.n	8009178 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f7fe f84f 	bl	8007208 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2200      	movs	r2, #0
 800916e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2200      	movs	r2, #0
 8009174:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4618      	mov	r0, r3
 800917e:	f7ff fef1 	bl	8008f64 <LL_ADC_IsDeepPowerDownEnabled>
 8009182:	4603      	mov	r3, r0
 8009184:	2b00      	cmp	r3, #0
 8009186:	d004      	beq.n	8009192 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4618      	mov	r0, r3
 800918e:	f7ff fed7 	bl	8008f40 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4618      	mov	r0, r3
 8009198:	f7ff ff0c 	bl	8008fb4 <LL_ADC_IsInternalRegulatorEnabled>
 800919c:	4603      	mov	r3, r0
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d113      	bne.n	80091ca <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4618      	mov	r0, r3
 80091a8:	f7ff fef0 	bl	8008f8c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80091ac:	4b9e      	ldr	r3, [pc, #632]	; (8009428 <HAL_ADC_Init+0x2ec>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	099b      	lsrs	r3, r3, #6
 80091b2:	4a9e      	ldr	r2, [pc, #632]	; (800942c <HAL_ADC_Init+0x2f0>)
 80091b4:	fba2 2303 	umull	r2, r3, r2, r3
 80091b8:	099b      	lsrs	r3, r3, #6
 80091ba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80091bc:	e002      	b.n	80091c4 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	3b01      	subs	r3, #1
 80091c2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d1f9      	bne.n	80091be <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4618      	mov	r0, r3
 80091d0:	f7ff fef0 	bl	8008fb4 <LL_ADC_IsInternalRegulatorEnabled>
 80091d4:	4603      	mov	r3, r0
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d10d      	bne.n	80091f6 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091de:	f043 0210 	orr.w	r2, r3, #16
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091ea:	f043 0201 	orr.w	r2, r3, #1
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80091f2:	2301      	movs	r3, #1
 80091f4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7ff ff64 	bl	80090c8 <LL_ADC_REG_IsConversionOngoing>
 8009200:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009206:	f003 0310 	and.w	r3, r3, #16
 800920a:	2b00      	cmp	r3, #0
 800920c:	f040 8148 	bne.w	80094a0 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	2b00      	cmp	r3, #0
 8009214:	f040 8144 	bne.w	80094a0 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800921c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8009220:	f043 0202 	orr.w	r2, r3, #2
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4618      	mov	r0, r3
 800922e:	f7ff fefd 	bl	800902c <LL_ADC_IsEnabled>
 8009232:	4603      	mov	r3, r0
 8009234:	2b00      	cmp	r3, #0
 8009236:	d141      	bne.n	80092bc <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009240:	d004      	beq.n	800924c <HAL_ADC_Init+0x110>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a7a      	ldr	r2, [pc, #488]	; (8009430 <HAL_ADC_Init+0x2f4>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d10f      	bne.n	800926c <HAL_ADC_Init+0x130>
 800924c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8009250:	f7ff feec 	bl	800902c <LL_ADC_IsEnabled>
 8009254:	4604      	mov	r4, r0
 8009256:	4876      	ldr	r0, [pc, #472]	; (8009430 <HAL_ADC_Init+0x2f4>)
 8009258:	f7ff fee8 	bl	800902c <LL_ADC_IsEnabled>
 800925c:	4603      	mov	r3, r0
 800925e:	4323      	orrs	r3, r4
 8009260:	2b00      	cmp	r3, #0
 8009262:	bf0c      	ite	eq
 8009264:	2301      	moveq	r3, #1
 8009266:	2300      	movne	r3, #0
 8009268:	b2db      	uxtb	r3, r3
 800926a:	e012      	b.n	8009292 <HAL_ADC_Init+0x156>
 800926c:	4871      	ldr	r0, [pc, #452]	; (8009434 <HAL_ADC_Init+0x2f8>)
 800926e:	f7ff fedd 	bl	800902c <LL_ADC_IsEnabled>
 8009272:	4604      	mov	r4, r0
 8009274:	4870      	ldr	r0, [pc, #448]	; (8009438 <HAL_ADC_Init+0x2fc>)
 8009276:	f7ff fed9 	bl	800902c <LL_ADC_IsEnabled>
 800927a:	4603      	mov	r3, r0
 800927c:	431c      	orrs	r4, r3
 800927e:	486f      	ldr	r0, [pc, #444]	; (800943c <HAL_ADC_Init+0x300>)
 8009280:	f7ff fed4 	bl	800902c <LL_ADC_IsEnabled>
 8009284:	4603      	mov	r3, r0
 8009286:	4323      	orrs	r3, r4
 8009288:	2b00      	cmp	r3, #0
 800928a:	bf0c      	ite	eq
 800928c:	2301      	moveq	r3, #1
 800928e:	2300      	movne	r3, #0
 8009290:	b2db      	uxtb	r3, r3
 8009292:	2b00      	cmp	r3, #0
 8009294:	d012      	beq.n	80092bc <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800929e:	d004      	beq.n	80092aa <HAL_ADC_Init+0x16e>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a62      	ldr	r2, [pc, #392]	; (8009430 <HAL_ADC_Init+0x2f4>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d101      	bne.n	80092ae <HAL_ADC_Init+0x172>
 80092aa:	4a65      	ldr	r2, [pc, #404]	; (8009440 <HAL_ADC_Init+0x304>)
 80092ac:	e000      	b.n	80092b0 <HAL_ADC_Init+0x174>
 80092ae:	4a65      	ldr	r2, [pc, #404]	; (8009444 <HAL_ADC_Init+0x308>)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	4619      	mov	r1, r3
 80092b6:	4610      	mov	r0, r2
 80092b8:	f7ff fce6 	bl	8008c88 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	7f5b      	ldrb	r3, [r3, #29]
 80092c0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80092c6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80092cc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80092d2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80092da:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80092dc:	4313      	orrs	r3, r2
 80092de:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d106      	bne.n	80092f8 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ee:	3b01      	subs	r3, #1
 80092f0:	045b      	lsls	r3, r3, #17
 80092f2:	69ba      	ldr	r2, [r7, #24]
 80092f4:	4313      	orrs	r3, r2
 80092f6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d009      	beq.n	8009314 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009304:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800930c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800930e:	69ba      	ldr	r2, [r7, #24]
 8009310:	4313      	orrs	r3, r2
 8009312:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	68da      	ldr	r2, [r3, #12]
 800931a:	4b4b      	ldr	r3, [pc, #300]	; (8009448 <HAL_ADC_Init+0x30c>)
 800931c:	4013      	ands	r3, r2
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	6812      	ldr	r2, [r2, #0]
 8009322:	69b9      	ldr	r1, [r7, #24]
 8009324:	430b      	orrs	r3, r1
 8009326:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	691b      	ldr	r3, [r3, #16]
 800932e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	430a      	orrs	r2, r1
 800933c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4618      	mov	r0, r3
 8009344:	f7ff fec0 	bl	80090c8 <LL_ADC_REG_IsConversionOngoing>
 8009348:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4618      	mov	r0, r3
 8009350:	f7ff fee1 	bl	8009116 <LL_ADC_INJ_IsConversionOngoing>
 8009354:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d17f      	bne.n	800945c <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d17c      	bne.n	800945c <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8009366:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800936e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8009370:	4313      	orrs	r3, r2
 8009372:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	68db      	ldr	r3, [r3, #12]
 800937a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800937e:	f023 0302 	bic.w	r3, r3, #2
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	6812      	ldr	r2, [r2, #0]
 8009386:	69b9      	ldr	r1, [r7, #24]
 8009388:	430b      	orrs	r3, r1
 800938a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	691b      	ldr	r3, [r3, #16]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d017      	beq.n	80093c4 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	691a      	ldr	r2, [r3, #16]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80093a2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80093ac:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80093b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	6911      	ldr	r1, [r2, #16]
 80093b8:	687a      	ldr	r2, [r7, #4]
 80093ba:	6812      	ldr	r2, [r2, #0]
 80093bc:	430b      	orrs	r3, r1
 80093be:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80093c2:	e013      	b.n	80093ec <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	691a      	ldr	r2, [r3, #16]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80093d2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80093dc:	687a      	ldr	r2, [r7, #4]
 80093de:	6812      	ldr	r2, [r2, #0]
 80093e0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80093e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80093e8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d12a      	bne.n	800944c <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	691b      	ldr	r3, [r3, #16]
 80093fc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009400:	f023 0304 	bic.w	r3, r3, #4
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800940c:	4311      	orrs	r1, r2
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009412:	4311      	orrs	r1, r2
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009418:	430a      	orrs	r2, r1
 800941a:	431a      	orrs	r2, r3
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f042 0201 	orr.w	r2, r2, #1
 8009424:	611a      	str	r2, [r3, #16]
 8009426:	e019      	b.n	800945c <HAL_ADC_Init+0x320>
 8009428:	20000c34 	.word	0x20000c34
 800942c:	053e2d63 	.word	0x053e2d63
 8009430:	50000100 	.word	0x50000100
 8009434:	50000400 	.word	0x50000400
 8009438:	50000500 	.word	0x50000500
 800943c:	50000600 	.word	0x50000600
 8009440:	50000300 	.word	0x50000300
 8009444:	50000700 	.word	0x50000700
 8009448:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	691a      	ldr	r2, [r3, #16]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f022 0201 	bic.w	r2, r2, #1
 800945a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	695b      	ldr	r3, [r3, #20]
 8009460:	2b01      	cmp	r3, #1
 8009462:	d10c      	bne.n	800947e <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800946a:	f023 010f 	bic.w	r1, r3, #15
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6a1b      	ldr	r3, [r3, #32]
 8009472:	1e5a      	subs	r2, r3, #1
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	430a      	orrs	r2, r1
 800947a:	631a      	str	r2, [r3, #48]	; 0x30
 800947c:	e007      	b.n	800948e <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f022 020f 	bic.w	r2, r2, #15
 800948c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009492:	f023 0303 	bic.w	r3, r3, #3
 8009496:	f043 0201 	orr.w	r2, r3, #1
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	65da      	str	r2, [r3, #92]	; 0x5c
 800949e:	e007      	b.n	80094b0 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094a4:	f043 0210 	orr.w	r2, r3, #16
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80094ac:	2301      	movs	r3, #1
 80094ae:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80094b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3724      	adds	r7, #36	; 0x24
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd90      	pop	{r4, r7, pc}
 80094ba:	bf00      	nop

080094bc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b086      	sub	sp, #24
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	60f8      	str	r0, [r7, #12]
 80094c4:	60b9      	str	r1, [r7, #8]
 80094c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80094d0:	d004      	beq.n	80094dc <HAL_ADC_Start_DMA+0x20>
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a58      	ldr	r2, [pc, #352]	; (8009638 <HAL_ADC_Start_DMA+0x17c>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d101      	bne.n	80094e0 <HAL_ADC_Start_DMA+0x24>
 80094dc:	4b57      	ldr	r3, [pc, #348]	; (800963c <HAL_ADC_Start_DMA+0x180>)
 80094de:	e000      	b.n	80094e2 <HAL_ADC_Start_DMA+0x26>
 80094e0:	4b57      	ldr	r3, [pc, #348]	; (8009640 <HAL_ADC_Start_DMA+0x184>)
 80094e2:	4618      	mov	r0, r3
 80094e4:	f7ff fd1e 	bl	8008f24 <LL_ADC_GetMultimode>
 80094e8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4618      	mov	r0, r3
 80094f0:	f7ff fdea 	bl	80090c8 <LL_ADC_REG_IsConversionOngoing>
 80094f4:	4603      	mov	r3, r0
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	f040 8096 	bne.w	8009628 <HAL_ADC_Start_DMA+0x16c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009502:	2b01      	cmp	r3, #1
 8009504:	d101      	bne.n	800950a <HAL_ADC_Start_DMA+0x4e>
 8009506:	2302      	movs	r3, #2
 8009508:	e091      	b.n	800962e <HAL_ADC_Start_DMA+0x172>
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2201      	movs	r2, #1
 800950e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d005      	beq.n	8009524 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	2b05      	cmp	r3, #5
 800951c:	d002      	beq.n	8009524 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	2b09      	cmp	r3, #9
 8009522:	d17a      	bne.n	800961a <HAL_ADC_Start_DMA+0x15e>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8009524:	68f8      	ldr	r0, [r7, #12]
 8009526:	f000 fd71 	bl	800a00c <ADC_Enable>
 800952a:	4603      	mov	r3, r0
 800952c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800952e:	7dfb      	ldrb	r3, [r7, #23]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d16d      	bne.n	8009610 <HAL_ADC_Start_DMA+0x154>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009538:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800953c:	f023 0301 	bic.w	r3, r3, #1
 8009540:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4a3a      	ldr	r2, [pc, #232]	; (8009638 <HAL_ADC_Start_DMA+0x17c>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d009      	beq.n	8009566 <HAL_ADC_Start_DMA+0xaa>
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4a3b      	ldr	r2, [pc, #236]	; (8009644 <HAL_ADC_Start_DMA+0x188>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d002      	beq.n	8009562 <HAL_ADC_Start_DMA+0xa6>
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	e003      	b.n	800956a <HAL_ADC_Start_DMA+0xae>
 8009562:	4b39      	ldr	r3, [pc, #228]	; (8009648 <HAL_ADC_Start_DMA+0x18c>)
 8009564:	e001      	b.n	800956a <HAL_ADC_Start_DMA+0xae>
 8009566:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800956a:	68fa      	ldr	r2, [r7, #12]
 800956c:	6812      	ldr	r2, [r2, #0]
 800956e:	4293      	cmp	r3, r2
 8009570:	d002      	beq.n	8009578 <HAL_ADC_Start_DMA+0xbc>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d105      	bne.n	8009584 <HAL_ADC_Start_DMA+0xc8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800957c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009588:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800958c:	2b00      	cmp	r3, #0
 800958e:	d006      	beq.n	800959e <HAL_ADC_Start_DMA+0xe2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009594:	f023 0206 	bic.w	r2, r3, #6
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	661a      	str	r2, [r3, #96]	; 0x60
 800959c:	e002      	b.n	80095a4 <HAL_ADC_Start_DMA+0xe8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	2200      	movs	r2, #0
 80095a2:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095a8:	4a28      	ldr	r2, [pc, #160]	; (800964c <HAL_ADC_Start_DMA+0x190>)
 80095aa:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095b0:	4a27      	ldr	r2, [pc, #156]	; (8009650 <HAL_ADC_Start_DMA+0x194>)
 80095b2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095b8:	4a26      	ldr	r2, [pc, #152]	; (8009654 <HAL_ADC_Start_DMA+0x198>)
 80095ba:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	221c      	movs	r2, #28
 80095c2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2200      	movs	r2, #0
 80095c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	685a      	ldr	r2, [r3, #4]
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f042 0210 	orr.w	r2, r2, #16
 80095da:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	68da      	ldr	r2, [r3, #12]
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f042 0201 	orr.w	r2, r2, #1
 80095ea:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	3340      	adds	r3, #64	; 0x40
 80095f6:	4619      	mov	r1, r3
 80095f8:	68ba      	ldr	r2, [r7, #8]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f002 f942 	bl	800b884 <HAL_DMA_Start_IT>
 8009600:	4603      	mov	r3, r0
 8009602:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4618      	mov	r0, r3
 800960a:	f7ff fd35 	bl	8009078 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800960e:	e00d      	b.n	800962c <HAL_ADC_Start_DMA+0x170>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2200      	movs	r2, #0
 8009614:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8009618:	e008      	b.n	800962c <HAL_ADC_Start_DMA+0x170>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800961a:	2301      	movs	r3, #1
 800961c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2200      	movs	r2, #0
 8009622:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8009626:	e001      	b.n	800962c <HAL_ADC_Start_DMA+0x170>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8009628:	2302      	movs	r3, #2
 800962a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800962c:	7dfb      	ldrb	r3, [r7, #23]
}
 800962e:	4618      	mov	r0, r3
 8009630:	3718      	adds	r7, #24
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
 8009636:	bf00      	nop
 8009638:	50000100 	.word	0x50000100
 800963c:	50000300 	.word	0x50000300
 8009640:	50000700 	.word	0x50000700
 8009644:	50000500 	.word	0x50000500
 8009648:	50000400 	.word	0x50000400
 800964c:	0800a171 	.word	0x0800a171
 8009650:	0800a249 	.word	0x0800a249
 8009654:	0800a265 	.word	0x0800a265

08009658 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009666:	2b01      	cmp	r3, #1
 8009668:	d101      	bne.n	800966e <HAL_ADC_Stop_DMA+0x16>
 800966a:	2302      	movs	r3, #2
 800966c:	e051      	b.n	8009712 <HAL_ADC_Stop_DMA+0xba>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2201      	movs	r2, #1
 8009672:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8009676:	2103      	movs	r1, #3
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f000 fc13 	bl	8009ea4 <ADC_ConversionStop>
 800967e:	4603      	mov	r3, r0
 8009680:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8009682:	7bfb      	ldrb	r3, [r7, #15]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d13f      	bne.n	8009708 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	68da      	ldr	r2, [r3, #12]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f022 0201 	bic.w	r2, r2, #1
 8009696:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800969c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	2b02      	cmp	r3, #2
 80096a4:	d10f      	bne.n	80096c6 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096aa:	4618      	mov	r0, r3
 80096ac:	f002 f965 	bl	800b97a <HAL_DMA_Abort>
 80096b0:	4603      	mov	r3, r0
 80096b2:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80096b4:	7bfb      	ldrb	r3, [r7, #15]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d005      	beq.n	80096c6 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	685a      	ldr	r2, [r3, #4]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f022 0210 	bic.w	r2, r2, #16
 80096d4:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80096d6:	7bfb      	ldrb	r3, [r7, #15]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d105      	bne.n	80096e8 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f000 fcef 	bl	800a0c0 <ADC_Disable>
 80096e2:	4603      	mov	r3, r0
 80096e4:	73fb      	strb	r3, [r7, #15]
 80096e6:	e002      	b.n	80096ee <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f000 fce9 	bl	800a0c0 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80096ee:	7bfb      	ldrb	r3, [r7, #15]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d109      	bne.n	8009708 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096f8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80096fc:	f023 0301 	bic.w	r3, r3, #1
 8009700:	f043 0201 	orr.w	r2, r3, #1
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2200      	movs	r2, #0
 800970c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8009710:	7bfb      	ldrb	r3, [r7, #15]
}
 8009712:	4618      	mov	r0, r3
 8009714:	3710      	adds	r7, #16
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}

0800971a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800971a:	b480      	push	{r7}
 800971c:	b083      	sub	sp, #12
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8009722:	bf00      	nop
 8009724:	370c      	adds	r7, #12
 8009726:	46bd      	mov	sp, r7
 8009728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972c:	4770      	bx	lr

0800972e <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800972e:	b480      	push	{r7}
 8009730:	b083      	sub	sp, #12
 8009732:	af00      	add	r7, sp, #0
 8009734:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8009736:	bf00      	nop
 8009738:	370c      	adds	r7, #12
 800973a:	46bd      	mov	sp, r7
 800973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009740:	4770      	bx	lr
	...

08009744 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b0a6      	sub	sp, #152	; 0x98
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800974e:	2300      	movs	r3, #0
 8009750:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8009754:	2300      	movs	r3, #0
 8009756:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800975e:	2b01      	cmp	r3, #1
 8009760:	d101      	bne.n	8009766 <HAL_ADC_ConfigChannel+0x22>
 8009762:	2302      	movs	r3, #2
 8009764:	e38e      	b.n	8009e84 <HAL_ADC_ConfigChannel+0x740>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2201      	movs	r2, #1
 800976a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	4618      	mov	r0, r3
 8009774:	f7ff fca8 	bl	80090c8 <LL_ADC_REG_IsConversionOngoing>
 8009778:	4603      	mov	r3, r0
 800977a:	2b00      	cmp	r3, #0
 800977c:	f040 836f 	bne.w	8009e5e <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6818      	ldr	r0, [r3, #0]
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	6859      	ldr	r1, [r3, #4]
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	461a      	mov	r2, r3
 800978e:	f7ff fb53 	bl	8008e38 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4618      	mov	r0, r3
 8009798:	f7ff fc96 	bl	80090c8 <LL_ADC_REG_IsConversionOngoing>
 800979c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4618      	mov	r0, r3
 80097a6:	f7ff fcb6 	bl	8009116 <LL_ADC_INJ_IsConversionOngoing>
 80097aa:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80097ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	f040 817b 	bne.w	8009aae <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80097b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80097bc:	2b00      	cmp	r3, #0
 80097be:	f040 8176 	bne.w	8009aae <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	689b      	ldr	r3, [r3, #8]
 80097c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097ca:	d10f      	bne.n	80097ec <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6818      	ldr	r0, [r3, #0]
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	2200      	movs	r2, #0
 80097d6:	4619      	mov	r1, r3
 80097d8:	f7ff fb57 	bl	8008e8a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80097e4:	4618      	mov	r0, r3
 80097e6:	f7ff fb01 	bl	8008dec <LL_ADC_SetSamplingTimeCommonConfig>
 80097ea:	e00e      	b.n	800980a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6818      	ldr	r0, [r3, #0]
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	6819      	ldr	r1, [r3, #0]
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	689b      	ldr	r3, [r3, #8]
 80097f8:	461a      	mov	r2, r3
 80097fa:	f7ff fb46 	bl	8008e8a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	2100      	movs	r1, #0
 8009804:	4618      	mov	r0, r3
 8009806:	f7ff faf1 	bl	8008dec <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	695a      	ldr	r2, [r3, #20]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	68db      	ldr	r3, [r3, #12]
 8009814:	08db      	lsrs	r3, r3, #3
 8009816:	f003 0303 	and.w	r3, r3, #3
 800981a:	005b      	lsls	r3, r3, #1
 800981c:	fa02 f303 	lsl.w	r3, r2, r3
 8009820:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	691b      	ldr	r3, [r3, #16]
 8009828:	2b04      	cmp	r3, #4
 800982a:	d022      	beq.n	8009872 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6818      	ldr	r0, [r3, #0]
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	6919      	ldr	r1, [r3, #16]
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	681a      	ldr	r2, [r3, #0]
 8009838:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800983c:	f7ff fa58 	bl	8008cf0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6818      	ldr	r0, [r3, #0]
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	6919      	ldr	r1, [r3, #16]
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	699b      	ldr	r3, [r3, #24]
 800984c:	461a      	mov	r2, r3
 800984e:	f7ff fa9d 	bl	8008d8c <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6818      	ldr	r0, [r3, #0]
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	6919      	ldr	r1, [r3, #16]
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	7f1b      	ldrb	r3, [r3, #28]
 800985e:	2b01      	cmp	r3, #1
 8009860:	d102      	bne.n	8009868 <HAL_ADC_ConfigChannel+0x124>
 8009862:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009866:	e000      	b.n	800986a <HAL_ADC_ConfigChannel+0x126>
 8009868:	2300      	movs	r3, #0
 800986a:	461a      	mov	r2, r3
 800986c:	f7ff faa6 	bl	8008dbc <LL_ADC_SetOffsetSaturation>
 8009870:	e11d      	b.n	8009aae <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	2100      	movs	r1, #0
 8009878:	4618      	mov	r0, r3
 800987a:	f7ff fa5b 	bl	8008d34 <LL_ADC_GetOffsetChannel>
 800987e:	4603      	mov	r3, r0
 8009880:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009884:	2b00      	cmp	r3, #0
 8009886:	d10a      	bne.n	800989e <HAL_ADC_ConfigChannel+0x15a>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	2100      	movs	r1, #0
 800988e:	4618      	mov	r0, r3
 8009890:	f7ff fa50 	bl	8008d34 <LL_ADC_GetOffsetChannel>
 8009894:	4603      	mov	r3, r0
 8009896:	0e9b      	lsrs	r3, r3, #26
 8009898:	f003 021f 	and.w	r2, r3, #31
 800989c:	e012      	b.n	80098c4 <HAL_ADC_ConfigChannel+0x180>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	2100      	movs	r1, #0
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7ff fa45 	bl	8008d34 <LL_ADC_GetOffsetChannel>
 80098aa:	4603      	mov	r3, r0
 80098ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80098b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80098b4:	fa93 f3a3 	rbit	r3, r3
 80098b8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80098ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80098bc:	fab3 f383 	clz	r3, r3
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	461a      	mov	r2, r3
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d105      	bne.n	80098dc <HAL_ADC_ConfigChannel+0x198>
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	0e9b      	lsrs	r3, r3, #26
 80098d6:	f003 031f 	and.w	r3, r3, #31
 80098da:	e00a      	b.n	80098f2 <HAL_ADC_ConfigChannel+0x1ae>
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80098e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80098e4:	fa93 f3a3 	rbit	r3, r3
 80098e8:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 80098ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80098ec:	fab3 f383 	clz	r3, r3
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d106      	bne.n	8009904 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	2200      	movs	r2, #0
 80098fc:	2100      	movs	r1, #0
 80098fe:	4618      	mov	r0, r3
 8009900:	f7ff fa2c 	bl	8008d5c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	2101      	movs	r1, #1
 800990a:	4618      	mov	r0, r3
 800990c:	f7ff fa12 	bl	8008d34 <LL_ADC_GetOffsetChannel>
 8009910:	4603      	mov	r3, r0
 8009912:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009916:	2b00      	cmp	r3, #0
 8009918:	d10a      	bne.n	8009930 <HAL_ADC_ConfigChannel+0x1ec>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2101      	movs	r1, #1
 8009920:	4618      	mov	r0, r3
 8009922:	f7ff fa07 	bl	8008d34 <LL_ADC_GetOffsetChannel>
 8009926:	4603      	mov	r3, r0
 8009928:	0e9b      	lsrs	r3, r3, #26
 800992a:	f003 021f 	and.w	r2, r3, #31
 800992e:	e010      	b.n	8009952 <HAL_ADC_ConfigChannel+0x20e>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	2101      	movs	r1, #1
 8009936:	4618      	mov	r0, r3
 8009938:	f7ff f9fc 	bl	8008d34 <LL_ADC_GetOffsetChannel>
 800993c:	4603      	mov	r3, r0
 800993e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009940:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009942:	fa93 f3a3 	rbit	r3, r3
 8009946:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8009948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800994a:	fab3 f383 	clz	r3, r3
 800994e:	b2db      	uxtb	r3, r3
 8009950:	461a      	mov	r2, r3
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800995a:	2b00      	cmp	r3, #0
 800995c:	d105      	bne.n	800996a <HAL_ADC_ConfigChannel+0x226>
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	0e9b      	lsrs	r3, r3, #26
 8009964:	f003 031f 	and.w	r3, r3, #31
 8009968:	e00a      	b.n	8009980 <HAL_ADC_ConfigChannel+0x23c>
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009970:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009972:	fa93 f3a3 	rbit	r3, r3
 8009976:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8009978:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800997a:	fab3 f383 	clz	r3, r3
 800997e:	b2db      	uxtb	r3, r3
 8009980:	429a      	cmp	r2, r3
 8009982:	d106      	bne.n	8009992 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	2200      	movs	r2, #0
 800998a:	2101      	movs	r1, #1
 800998c:	4618      	mov	r0, r3
 800998e:	f7ff f9e5 	bl	8008d5c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	2102      	movs	r1, #2
 8009998:	4618      	mov	r0, r3
 800999a:	f7ff f9cb 	bl	8008d34 <LL_ADC_GetOffsetChannel>
 800999e:	4603      	mov	r3, r0
 80099a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d10a      	bne.n	80099be <HAL_ADC_ConfigChannel+0x27a>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	2102      	movs	r1, #2
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7ff f9c0 	bl	8008d34 <LL_ADC_GetOffsetChannel>
 80099b4:	4603      	mov	r3, r0
 80099b6:	0e9b      	lsrs	r3, r3, #26
 80099b8:	f003 021f 	and.w	r2, r3, #31
 80099bc:	e010      	b.n	80099e0 <HAL_ADC_ConfigChannel+0x29c>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	2102      	movs	r1, #2
 80099c4:	4618      	mov	r0, r3
 80099c6:	f7ff f9b5 	bl	8008d34 <LL_ADC_GetOffsetChannel>
 80099ca:	4603      	mov	r3, r0
 80099cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80099d0:	fa93 f3a3 	rbit	r3, r3
 80099d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 80099d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099d8:	fab3 f383 	clz	r3, r3
 80099dc:	b2db      	uxtb	r3, r3
 80099de:	461a      	mov	r2, r3
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d105      	bne.n	80099f8 <HAL_ADC_ConfigChannel+0x2b4>
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	0e9b      	lsrs	r3, r3, #26
 80099f2:	f003 031f 	and.w	r3, r3, #31
 80099f6:	e00a      	b.n	8009a0e <HAL_ADC_ConfigChannel+0x2ca>
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a00:	fa93 f3a3 	rbit	r3, r3
 8009a04:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8009a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a08:	fab3 f383 	clz	r3, r3
 8009a0c:	b2db      	uxtb	r3, r3
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d106      	bne.n	8009a20 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	2200      	movs	r2, #0
 8009a18:	2102      	movs	r1, #2
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f7ff f99e 	bl	8008d5c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	2103      	movs	r1, #3
 8009a26:	4618      	mov	r0, r3
 8009a28:	f7ff f984 	bl	8008d34 <LL_ADC_GetOffsetChannel>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d10a      	bne.n	8009a4c <HAL_ADC_ConfigChannel+0x308>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	2103      	movs	r1, #3
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f7ff f979 	bl	8008d34 <LL_ADC_GetOffsetChannel>
 8009a42:	4603      	mov	r3, r0
 8009a44:	0e9b      	lsrs	r3, r3, #26
 8009a46:	f003 021f 	and.w	r2, r3, #31
 8009a4a:	e010      	b.n	8009a6e <HAL_ADC_ConfigChannel+0x32a>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	2103      	movs	r1, #3
 8009a52:	4618      	mov	r0, r3
 8009a54:	f7ff f96e 	bl	8008d34 <LL_ADC_GetOffsetChannel>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a5e:	fa93 f3a3 	rbit	r3, r3
 8009a62:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8009a64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a66:	fab3 f383 	clz	r3, r3
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	461a      	mov	r2, r3
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d105      	bne.n	8009a86 <HAL_ADC_ConfigChannel+0x342>
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	0e9b      	lsrs	r3, r3, #26
 8009a80:	f003 031f 	and.w	r3, r3, #31
 8009a84:	e00a      	b.n	8009a9c <HAL_ADC_ConfigChannel+0x358>
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a8e:	fa93 f3a3 	rbit	r3, r3
 8009a92:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8009a94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a96:	fab3 f383 	clz	r3, r3
 8009a9a:	b2db      	uxtb	r3, r3
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d106      	bne.n	8009aae <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	2103      	movs	r1, #3
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f7ff f957 	bl	8008d5c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f7ff faba 	bl	800902c <LL_ADC_IsEnabled>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	f040 810c 	bne.w	8009cd8 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6818      	ldr	r0, [r3, #0]
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	6819      	ldr	r1, [r3, #0]
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	68db      	ldr	r3, [r3, #12]
 8009acc:	461a      	mov	r2, r3
 8009ace:	f7ff fa05 	bl	8008edc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	68db      	ldr	r3, [r3, #12]
 8009ad6:	4aaf      	ldr	r2, [pc, #700]	; (8009d94 <HAL_ADC_ConfigChannel+0x650>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	f040 80fd 	bne.w	8009cd8 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d10b      	bne.n	8009b06 <HAL_ADC_ConfigChannel+0x3c2>
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	0e9b      	lsrs	r3, r3, #26
 8009af4:	3301      	adds	r3, #1
 8009af6:	f003 031f 	and.w	r3, r3, #31
 8009afa:	2b09      	cmp	r3, #9
 8009afc:	bf94      	ite	ls
 8009afe:	2301      	movls	r3, #1
 8009b00:	2300      	movhi	r3, #0
 8009b02:	b2db      	uxtb	r3, r3
 8009b04:	e012      	b.n	8009b2c <HAL_ADC_ConfigChannel+0x3e8>
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b0e:	fa93 f3a3 	rbit	r3, r3
 8009b12:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8009b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b16:	fab3 f383 	clz	r3, r3
 8009b1a:	b2db      	uxtb	r3, r3
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	f003 031f 	and.w	r3, r3, #31
 8009b22:	2b09      	cmp	r3, #9
 8009b24:	bf94      	ite	ls
 8009b26:	2301      	movls	r3, #1
 8009b28:	2300      	movhi	r3, #0
 8009b2a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d064      	beq.n	8009bfa <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d107      	bne.n	8009b4c <HAL_ADC_ConfigChannel+0x408>
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	0e9b      	lsrs	r3, r3, #26
 8009b42:	3301      	adds	r3, #1
 8009b44:	069b      	lsls	r3, r3, #26
 8009b46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009b4a:	e00e      	b.n	8009b6a <HAL_ADC_ConfigChannel+0x426>
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b54:	fa93 f3a3 	rbit	r3, r3
 8009b58:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8009b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b5c:	fab3 f383 	clz	r3, r3
 8009b60:	b2db      	uxtb	r3, r3
 8009b62:	3301      	adds	r3, #1
 8009b64:	069b      	lsls	r3, r3, #26
 8009b66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d109      	bne.n	8009b8a <HAL_ADC_ConfigChannel+0x446>
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	0e9b      	lsrs	r3, r3, #26
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	f003 031f 	and.w	r3, r3, #31
 8009b82:	2101      	movs	r1, #1
 8009b84:	fa01 f303 	lsl.w	r3, r1, r3
 8009b88:	e010      	b.n	8009bac <HAL_ADC_ConfigChannel+0x468>
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b92:	fa93 f3a3 	rbit	r3, r3
 8009b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8009b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b9a:	fab3 f383 	clz	r3, r3
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	3301      	adds	r3, #1
 8009ba2:	f003 031f 	and.w	r3, r3, #31
 8009ba6:	2101      	movs	r1, #1
 8009ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8009bac:	ea42 0103 	orr.w	r1, r2, r3
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d10a      	bne.n	8009bd2 <HAL_ADC_ConfigChannel+0x48e>
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	0e9b      	lsrs	r3, r3, #26
 8009bc2:	3301      	adds	r3, #1
 8009bc4:	f003 021f 	and.w	r2, r3, #31
 8009bc8:	4613      	mov	r3, r2
 8009bca:	005b      	lsls	r3, r3, #1
 8009bcc:	4413      	add	r3, r2
 8009bce:	051b      	lsls	r3, r3, #20
 8009bd0:	e011      	b.n	8009bf6 <HAL_ADC_ConfigChannel+0x4b2>
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bda:	fa93 f3a3 	rbit	r3, r3
 8009bde:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8009be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be2:	fab3 f383 	clz	r3, r3
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	3301      	adds	r3, #1
 8009bea:	f003 021f 	and.w	r2, r3, #31
 8009bee:	4613      	mov	r3, r2
 8009bf0:	005b      	lsls	r3, r3, #1
 8009bf2:	4413      	add	r3, r2
 8009bf4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009bf6:	430b      	orrs	r3, r1
 8009bf8:	e069      	b.n	8009cce <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d107      	bne.n	8009c16 <HAL_ADC_ConfigChannel+0x4d2>
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	0e9b      	lsrs	r3, r3, #26
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	069b      	lsls	r3, r3, #26
 8009c10:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009c14:	e00e      	b.n	8009c34 <HAL_ADC_ConfigChannel+0x4f0>
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c1c:	6a3b      	ldr	r3, [r7, #32]
 8009c1e:	fa93 f3a3 	rbit	r3, r3
 8009c22:	61fb      	str	r3, [r7, #28]
  return result;
 8009c24:	69fb      	ldr	r3, [r7, #28]
 8009c26:	fab3 f383 	clz	r3, r3
 8009c2a:	b2db      	uxtb	r3, r3
 8009c2c:	3301      	adds	r3, #1
 8009c2e:	069b      	lsls	r3, r3, #26
 8009c30:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d109      	bne.n	8009c54 <HAL_ADC_ConfigChannel+0x510>
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	0e9b      	lsrs	r3, r3, #26
 8009c46:	3301      	adds	r3, #1
 8009c48:	f003 031f 	and.w	r3, r3, #31
 8009c4c:	2101      	movs	r1, #1
 8009c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8009c52:	e010      	b.n	8009c76 <HAL_ADC_ConfigChannel+0x532>
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c5a:	69bb      	ldr	r3, [r7, #24]
 8009c5c:	fa93 f3a3 	rbit	r3, r3
 8009c60:	617b      	str	r3, [r7, #20]
  return result;
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	fab3 f383 	clz	r3, r3
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	3301      	adds	r3, #1
 8009c6c:	f003 031f 	and.w	r3, r3, #31
 8009c70:	2101      	movs	r1, #1
 8009c72:	fa01 f303 	lsl.w	r3, r1, r3
 8009c76:	ea42 0103 	orr.w	r1, r2, r3
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d10d      	bne.n	8009ca2 <HAL_ADC_ConfigChannel+0x55e>
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	0e9b      	lsrs	r3, r3, #26
 8009c8c:	3301      	adds	r3, #1
 8009c8e:	f003 021f 	and.w	r2, r3, #31
 8009c92:	4613      	mov	r3, r2
 8009c94:	005b      	lsls	r3, r3, #1
 8009c96:	4413      	add	r3, r2
 8009c98:	3b1e      	subs	r3, #30
 8009c9a:	051b      	lsls	r3, r3, #20
 8009c9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009ca0:	e014      	b.n	8009ccc <HAL_ADC_ConfigChannel+0x588>
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	fa93 f3a3 	rbit	r3, r3
 8009cae:	60fb      	str	r3, [r7, #12]
  return result;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	fab3 f383 	clz	r3, r3
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	3301      	adds	r3, #1
 8009cba:	f003 021f 	and.w	r2, r3, #31
 8009cbe:	4613      	mov	r3, r2
 8009cc0:	005b      	lsls	r3, r3, #1
 8009cc2:	4413      	add	r3, r2
 8009cc4:	3b1e      	subs	r3, #30
 8009cc6:	051b      	lsls	r3, r3, #20
 8009cc8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009ccc:	430b      	orrs	r3, r1
 8009cce:	683a      	ldr	r2, [r7, #0]
 8009cd0:	6892      	ldr	r2, [r2, #8]
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	f7ff f8d9 	bl	8008e8a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	681a      	ldr	r2, [r3, #0]
 8009cdc:	4b2e      	ldr	r3, [pc, #184]	; (8009d98 <HAL_ADC_ConfigChannel+0x654>)
 8009cde:	4013      	ands	r3, r2
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	f000 80c9 	beq.w	8009e78 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009cee:	d004      	beq.n	8009cfa <HAL_ADC_ConfigChannel+0x5b6>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a29      	ldr	r2, [pc, #164]	; (8009d9c <HAL_ADC_ConfigChannel+0x658>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d101      	bne.n	8009cfe <HAL_ADC_ConfigChannel+0x5ba>
 8009cfa:	4b29      	ldr	r3, [pc, #164]	; (8009da0 <HAL_ADC_ConfigChannel+0x65c>)
 8009cfc:	e000      	b.n	8009d00 <HAL_ADC_ConfigChannel+0x5bc>
 8009cfe:	4b29      	ldr	r3, [pc, #164]	; (8009da4 <HAL_ADC_ConfigChannel+0x660>)
 8009d00:	4618      	mov	r0, r3
 8009d02:	f7fe ffe7 	bl	8008cd4 <LL_ADC_GetCommonPathInternalCh>
 8009d06:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4a26      	ldr	r2, [pc, #152]	; (8009da8 <HAL_ADC_ConfigChannel+0x664>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d004      	beq.n	8009d1e <HAL_ADC_ConfigChannel+0x5da>
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a24      	ldr	r2, [pc, #144]	; (8009dac <HAL_ADC_ConfigChannel+0x668>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d14e      	bne.n	8009dbc <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8009d1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009d22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d148      	bne.n	8009dbc <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d32:	d005      	beq.n	8009d40 <HAL_ADC_ConfigChannel+0x5fc>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4a1d      	ldr	r2, [pc, #116]	; (8009db0 <HAL_ADC_ConfigChannel+0x66c>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	f040 8099 	bne.w	8009e72 <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d48:	d004      	beq.n	8009d54 <HAL_ADC_ConfigChannel+0x610>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4a13      	ldr	r2, [pc, #76]	; (8009d9c <HAL_ADC_ConfigChannel+0x658>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d101      	bne.n	8009d58 <HAL_ADC_ConfigChannel+0x614>
 8009d54:	4a12      	ldr	r2, [pc, #72]	; (8009da0 <HAL_ADC_ConfigChannel+0x65c>)
 8009d56:	e000      	b.n	8009d5a <HAL_ADC_ConfigChannel+0x616>
 8009d58:	4a12      	ldr	r2, [pc, #72]	; (8009da4 <HAL_ADC_ConfigChannel+0x660>)
 8009d5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009d5e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009d62:	4619      	mov	r1, r3
 8009d64:	4610      	mov	r0, r2
 8009d66:	f7fe ffa2 	bl	8008cae <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8009d6a:	4b12      	ldr	r3, [pc, #72]	; (8009db4 <HAL_ADC_ConfigChannel+0x670>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	099b      	lsrs	r3, r3, #6
 8009d70:	4a11      	ldr	r2, [pc, #68]	; (8009db8 <HAL_ADC_ConfigChannel+0x674>)
 8009d72:	fba2 2303 	umull	r2, r3, r2, r3
 8009d76:	099a      	lsrs	r2, r3, #6
 8009d78:	4613      	mov	r3, r2
 8009d7a:	005b      	lsls	r3, r3, #1
 8009d7c:	4413      	add	r3, r2
 8009d7e:	009b      	lsls	r3, r3, #2
 8009d80:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8009d82:	e002      	b.n	8009d8a <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	3b01      	subs	r3, #1
 8009d88:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d1f9      	bne.n	8009d84 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009d90:	e06f      	b.n	8009e72 <HAL_ADC_ConfigChannel+0x72e>
 8009d92:	bf00      	nop
 8009d94:	407f0000 	.word	0x407f0000
 8009d98:	80080000 	.word	0x80080000
 8009d9c:	50000100 	.word	0x50000100
 8009da0:	50000300 	.word	0x50000300
 8009da4:	50000700 	.word	0x50000700
 8009da8:	c3210000 	.word	0xc3210000
 8009dac:	90c00010 	.word	0x90c00010
 8009db0:	50000600 	.word	0x50000600
 8009db4:	20000c34 	.word	0x20000c34
 8009db8:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a32      	ldr	r2, [pc, #200]	; (8009e8c <HAL_ADC_ConfigChannel+0x748>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d125      	bne.n	8009e12 <HAL_ADC_ConfigChannel+0x6ce>
 8009dc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009dca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d11f      	bne.n	8009e12 <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4a2e      	ldr	r2, [pc, #184]	; (8009e90 <HAL_ADC_ConfigChannel+0x74c>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d104      	bne.n	8009de6 <HAL_ADC_ConfigChannel+0x6a2>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4a2c      	ldr	r2, [pc, #176]	; (8009e94 <HAL_ADC_ConfigChannel+0x750>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d047      	beq.n	8009e76 <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009dee:	d004      	beq.n	8009dfa <HAL_ADC_ConfigChannel+0x6b6>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4a26      	ldr	r2, [pc, #152]	; (8009e90 <HAL_ADC_ConfigChannel+0x74c>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d101      	bne.n	8009dfe <HAL_ADC_ConfigChannel+0x6ba>
 8009dfa:	4a27      	ldr	r2, [pc, #156]	; (8009e98 <HAL_ADC_ConfigChannel+0x754>)
 8009dfc:	e000      	b.n	8009e00 <HAL_ADC_ConfigChannel+0x6bc>
 8009dfe:	4a27      	ldr	r2, [pc, #156]	; (8009e9c <HAL_ADC_ConfigChannel+0x758>)
 8009e00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009e04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009e08:	4619      	mov	r1, r3
 8009e0a:	4610      	mov	r0, r2
 8009e0c:	f7fe ff4f 	bl	8008cae <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009e10:	e031      	b.n	8009e76 <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	4a22      	ldr	r2, [pc, #136]	; (8009ea0 <HAL_ADC_ConfigChannel+0x75c>)
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d12d      	bne.n	8009e78 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8009e1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009e20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d127      	bne.n	8009e78 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4a18      	ldr	r2, [pc, #96]	; (8009e90 <HAL_ADC_ConfigChannel+0x74c>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d022      	beq.n	8009e78 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009e3a:	d004      	beq.n	8009e46 <HAL_ADC_ConfigChannel+0x702>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	4a13      	ldr	r2, [pc, #76]	; (8009e90 <HAL_ADC_ConfigChannel+0x74c>)
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d101      	bne.n	8009e4a <HAL_ADC_ConfigChannel+0x706>
 8009e46:	4a14      	ldr	r2, [pc, #80]	; (8009e98 <HAL_ADC_ConfigChannel+0x754>)
 8009e48:	e000      	b.n	8009e4c <HAL_ADC_ConfigChannel+0x708>
 8009e4a:	4a14      	ldr	r2, [pc, #80]	; (8009e9c <HAL_ADC_ConfigChannel+0x758>)
 8009e4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009e50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009e54:	4619      	mov	r1, r3
 8009e56:	4610      	mov	r0, r2
 8009e58:	f7fe ff29 	bl	8008cae <LL_ADC_SetCommonPathInternalCh>
 8009e5c:	e00c      	b.n	8009e78 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e62:	f043 0220 	orr.w	r2, r3, #32
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8009e70:	e002      	b.n	8009e78 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009e72:	bf00      	nop
 8009e74:	e000      	b.n	8009e78 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009e76:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8009e80:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3798      	adds	r7, #152	; 0x98
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}
 8009e8c:	c7520000 	.word	0xc7520000
 8009e90:	50000100 	.word	0x50000100
 8009e94:	50000500 	.word	0x50000500
 8009e98:	50000300 	.word	0x50000300
 8009e9c:	50000700 	.word	0x50000700
 8009ea0:	cb840000 	.word	0xcb840000

08009ea4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b088      	sub	sp, #32
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
 8009eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f7ff f904 	bl	80090c8 <LL_ADC_REG_IsConversionOngoing>
 8009ec0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f7ff f925 	bl	8009116 <LL_ADC_INJ_IsConversionOngoing>
 8009ecc:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d103      	bne.n	8009edc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	f000 8090 	beq.w	8009ffc <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	68db      	ldr	r3, [r3, #12]
 8009ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d02a      	beq.n	8009f40 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	7f5b      	ldrb	r3, [r3, #29]
 8009eee:	2b01      	cmp	r3, #1
 8009ef0:	d126      	bne.n	8009f40 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	7f1b      	ldrb	r3, [r3, #28]
 8009ef6:	2b01      	cmp	r3, #1
 8009ef8:	d122      	bne.n	8009f40 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8009efa:	2301      	movs	r3, #1
 8009efc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8009efe:	e014      	b.n	8009f2a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8009f00:	69fb      	ldr	r3, [r7, #28]
 8009f02:	4a41      	ldr	r2, [pc, #260]	; (800a008 <ADC_ConversionStop+0x164>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d90d      	bls.n	8009f24 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f0c:	f043 0210 	orr.w	r2, r3, #16
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f18:	f043 0201 	orr.w	r2, r3, #1
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8009f20:	2301      	movs	r3, #1
 8009f22:	e06c      	b.n	8009ffe <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8009f24:	69fb      	ldr	r3, [r7, #28]
 8009f26:	3301      	adds	r3, #1
 8009f28:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f34:	2b40      	cmp	r3, #64	; 0x40
 8009f36:	d1e3      	bne.n	8009f00 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	2240      	movs	r2, #64	; 0x40
 8009f3e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8009f40:	69bb      	ldr	r3, [r7, #24]
 8009f42:	2b02      	cmp	r3, #2
 8009f44:	d014      	beq.n	8009f70 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f7ff f8bc 	bl	80090c8 <LL_ADC_REG_IsConversionOngoing>
 8009f50:	4603      	mov	r3, r0
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d00c      	beq.n	8009f70 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f7ff f879 	bl	8009052 <LL_ADC_IsDisableOngoing>
 8009f60:	4603      	mov	r3, r0
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d104      	bne.n	8009f70 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f7ff f898 	bl	80090a0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8009f70:	69bb      	ldr	r3, [r7, #24]
 8009f72:	2b01      	cmp	r3, #1
 8009f74:	d014      	beq.n	8009fa0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f7ff f8cb 	bl	8009116 <LL_ADC_INJ_IsConversionOngoing>
 8009f80:	4603      	mov	r3, r0
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d00c      	beq.n	8009fa0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7ff f861 	bl	8009052 <LL_ADC_IsDisableOngoing>
 8009f90:	4603      	mov	r3, r0
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d104      	bne.n	8009fa0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f7ff f8a7 	bl	80090ee <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8009fa0:	69bb      	ldr	r3, [r7, #24]
 8009fa2:	2b02      	cmp	r3, #2
 8009fa4:	d004      	beq.n	8009fb0 <ADC_ConversionStop+0x10c>
 8009fa6:	2b03      	cmp	r3, #3
 8009fa8:	d105      	bne.n	8009fb6 <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8009faa:	230c      	movs	r3, #12
 8009fac:	617b      	str	r3, [r7, #20]
        break;
 8009fae:	e005      	b.n	8009fbc <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8009fb0:	2308      	movs	r3, #8
 8009fb2:	617b      	str	r3, [r7, #20]
        break;
 8009fb4:	e002      	b.n	8009fbc <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8009fb6:	2304      	movs	r3, #4
 8009fb8:	617b      	str	r3, [r7, #20]
        break;
 8009fba:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8009fbc:	f7fe fe36 	bl	8008c2c <HAL_GetTick>
 8009fc0:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8009fc2:	e014      	b.n	8009fee <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8009fc4:	f7fe fe32 	bl	8008c2c <HAL_GetTick>
 8009fc8:	4602      	mov	r2, r0
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	1ad3      	subs	r3, r2, r3
 8009fce:	2b05      	cmp	r3, #5
 8009fd0:	d90d      	bls.n	8009fee <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fd6:	f043 0210 	orr.w	r2, r3, #16
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fe2:	f043 0201 	orr.w	r2, r3, #1
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8009fea:	2301      	movs	r3, #1
 8009fec:	e007      	b.n	8009ffe <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	689a      	ldr	r2, [r3, #8]
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	4013      	ands	r3, r2
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d1e3      	bne.n	8009fc4 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8009ffc:	2300      	movs	r3, #0
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3720      	adds	r7, #32
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}
 800a006:	bf00      	nop
 800a008:	a33fffff 	.word	0xa33fffff

0800a00c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	4618      	mov	r0, r3
 800a01a:	f7ff f807 	bl	800902c <LL_ADC_IsEnabled>
 800a01e:	4603      	mov	r3, r0
 800a020:	2b00      	cmp	r3, #0
 800a022:	d146      	bne.n	800a0b2 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	689a      	ldr	r2, [r3, #8]
 800a02a:	4b24      	ldr	r3, [pc, #144]	; (800a0bc <ADC_Enable+0xb0>)
 800a02c:	4013      	ands	r3, r2
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d00d      	beq.n	800a04e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a036:	f043 0210 	orr.w	r2, r3, #16
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a042:	f043 0201 	orr.w	r2, r3, #1
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800a04a:	2301      	movs	r3, #1
 800a04c:	e032      	b.n	800a0b4 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	4618      	mov	r0, r3
 800a054:	f7fe ffc2 	bl	8008fdc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800a058:	f7fe fde8 	bl	8008c2c <HAL_GetTick>
 800a05c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a05e:	e021      	b.n	800a0a4 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4618      	mov	r0, r3
 800a066:	f7fe ffe1 	bl	800902c <LL_ADC_IsEnabled>
 800a06a:	4603      	mov	r3, r0
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d104      	bne.n	800a07a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	4618      	mov	r0, r3
 800a076:	f7fe ffb1 	bl	8008fdc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800a07a:	f7fe fdd7 	bl	8008c2c <HAL_GetTick>
 800a07e:	4602      	mov	r2, r0
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	1ad3      	subs	r3, r2, r3
 800a084:	2b02      	cmp	r3, #2
 800a086:	d90d      	bls.n	800a0a4 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a08c:	f043 0210 	orr.w	r2, r3, #16
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a098:	f043 0201 	orr.w	r2, r3, #1
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	e007      	b.n	800a0b4 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f003 0301 	and.w	r3, r3, #1
 800a0ae:	2b01      	cmp	r3, #1
 800a0b0:	d1d6      	bne.n	800a060 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a0b2:	2300      	movs	r3, #0
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3710      	adds	r7, #16
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}
 800a0bc:	8000003f 	.word	0x8000003f

0800a0c0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b084      	sub	sp, #16
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f7fe ffc0 	bl	8009052 <LL_ADC_IsDisableOngoing>
 800a0d2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f7fe ffa7 	bl	800902c <LL_ADC_IsEnabled>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d040      	beq.n	800a166 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d13d      	bne.n	800a166 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	689b      	ldr	r3, [r3, #8]
 800a0f0:	f003 030d 	and.w	r3, r3, #13
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d10c      	bne.n	800a112 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f7fe ff81 	bl	8009004 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	2203      	movs	r2, #3
 800a108:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800a10a:	f7fe fd8f 	bl	8008c2c <HAL_GetTick>
 800a10e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a110:	e022      	b.n	800a158 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a116:	f043 0210 	orr.w	r2, r3, #16
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a122:	f043 0201 	orr.w	r2, r3, #1
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800a12a:	2301      	movs	r3, #1
 800a12c:	e01c      	b.n	800a168 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800a12e:	f7fe fd7d 	bl	8008c2c <HAL_GetTick>
 800a132:	4602      	mov	r2, r0
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	1ad3      	subs	r3, r2, r3
 800a138:	2b02      	cmp	r3, #2
 800a13a:	d90d      	bls.n	800a158 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a140:	f043 0210 	orr.w	r2, r3, #16
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a14c:	f043 0201 	orr.w	r2, r3, #1
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800a154:	2301      	movs	r3, #1
 800a156:	e007      	b.n	800a168 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	689b      	ldr	r3, [r3, #8]
 800a15e:	f003 0301 	and.w	r3, r3, #1
 800a162:	2b00      	cmp	r3, #0
 800a164:	d1e3      	bne.n	800a12e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a166:	2300      	movs	r3, #0
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3710      	adds	r7, #16
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b084      	sub	sp, #16
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a17c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a182:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a186:	2b00      	cmp	r3, #0
 800a188:	d14b      	bne.n	800a222 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a18e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f003 0308 	and.w	r3, r3, #8
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d021      	beq.n	800a1e8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	f7fe fe32 	bl	8008e12 <LL_ADC_REG_IsTriggerSourceSWStart>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d032      	beq.n	800a21a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	68db      	ldr	r3, [r3, #12]
 800a1ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d12b      	bne.n	800a21a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d11f      	bne.n	800a21a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1de:	f043 0201 	orr.w	r2, r3, #1
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	65da      	str	r2, [r3, #92]	; 0x5c
 800a1e6:	e018      	b.n	800a21a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	68db      	ldr	r3, [r3, #12]
 800a1ee:	f003 0302 	and.w	r3, r3, #2
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d111      	bne.n	800a21a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a206:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d105      	bne.n	800a21a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a212:	f043 0201 	orr.w	r2, r3, #1
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a21a:	68f8      	ldr	r0, [r7, #12]
 800a21c:	f7fc f936 	bl	800648c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a220:	e00e      	b.n	800a240 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a226:	f003 0310 	and.w	r3, r3, #16
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d003      	beq.n	800a236 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800a22e:	68f8      	ldr	r0, [r7, #12]
 800a230:	f7ff fa7d 	bl	800972e <HAL_ADC_ErrorCallback>
}
 800a234:	e004      	b.n	800a240 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a23a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	4798      	blx	r3
}
 800a240:	bf00      	nop
 800a242:	3710      	adds	r7, #16
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}

0800a248 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b084      	sub	sp, #16
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a254:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a256:	68f8      	ldr	r0, [r7, #12]
 800a258:	f7ff fa5f 	bl	800971a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a25c:	bf00      	nop
 800a25e:	3710      	adds	r7, #16
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}

0800a264 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b084      	sub	sp, #16
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a270:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a276:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a282:	f043 0204 	orr.w	r2, r3, #4
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a28a:	68f8      	ldr	r0, [r7, #12]
 800a28c:	f7ff fa4f 	bl	800972e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a290:	bf00      	nop
 800a292:	3710      	adds	r7, #16
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}

0800a298 <LL_ADC_IsEnabled>:
{
 800a298:	b480      	push	{r7}
 800a29a:	b083      	sub	sp, #12
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	689b      	ldr	r3, [r3, #8]
 800a2a4:	f003 0301 	and.w	r3, r3, #1
 800a2a8:	2b01      	cmp	r3, #1
 800a2aa:	d101      	bne.n	800a2b0 <LL_ADC_IsEnabled+0x18>
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	e000      	b.n	800a2b2 <LL_ADC_IsEnabled+0x1a>
 800a2b0:	2300      	movs	r3, #0
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	370c      	adds	r7, #12
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2bc:	4770      	bx	lr

0800a2be <LL_ADC_REG_IsConversionOngoing>:
{
 800a2be:	b480      	push	{r7}
 800a2c0:	b083      	sub	sp, #12
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	689b      	ldr	r3, [r3, #8]
 800a2ca:	f003 0304 	and.w	r3, r3, #4
 800a2ce:	2b04      	cmp	r3, #4
 800a2d0:	d101      	bne.n	800a2d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	e000      	b.n	800a2d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800a2d6:	2300      	movs	r3, #0
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	370c      	adds	r7, #12
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr

0800a2e4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800a2e4:	b590      	push	{r4, r7, lr}
 800a2e6:	b0a1      	sub	sp, #132	; 0x84
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d101      	bne.n	800a302 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800a2fe:	2302      	movs	r3, #2
 800a300:	e0e3      	b.n	800a4ca <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2201      	movs	r2, #1
 800a306:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a312:	d102      	bne.n	800a31a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 800a314:	4b6f      	ldr	r3, [pc, #444]	; (800a4d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a316:	60bb      	str	r3, [r7, #8]
 800a318:	e009      	b.n	800a32e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4a6e      	ldr	r2, [pc, #440]	; (800a4d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d102      	bne.n	800a32a <HAL_ADCEx_MultiModeConfigChannel+0x46>
 800a324:	4b6d      	ldr	r3, [pc, #436]	; (800a4dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800a326:	60bb      	str	r3, [r7, #8]
 800a328:	e001      	b.n	800a32e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800a32a:	2300      	movs	r3, #0
 800a32c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d10b      	bne.n	800a34c <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a338:	f043 0220 	orr.w	r2, r3, #32
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2200      	movs	r2, #0
 800a344:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800a348:	2301      	movs	r3, #1
 800a34a:	e0be      	b.n	800a4ca <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	4618      	mov	r0, r3
 800a350:	f7ff ffb5 	bl	800a2be <LL_ADC_REG_IsConversionOngoing>
 800a354:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4618      	mov	r0, r3
 800a35c:	f7ff ffaf 	bl	800a2be <LL_ADC_REG_IsConversionOngoing>
 800a360:	4603      	mov	r3, r0
 800a362:	2b00      	cmp	r3, #0
 800a364:	f040 80a0 	bne.w	800a4a8 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800a368:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	f040 809c 	bne.w	800a4a8 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a378:	d004      	beq.n	800a384 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4a55      	ldr	r2, [pc, #340]	; (800a4d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a380:	4293      	cmp	r3, r2
 800a382:	d101      	bne.n	800a388 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 800a384:	4b56      	ldr	r3, [pc, #344]	; (800a4e0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800a386:	e000      	b.n	800a38a <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 800a388:	4b56      	ldr	r3, [pc, #344]	; (800a4e4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800a38a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d04b      	beq.n	800a42c <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800a394:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a396:	689b      	ldr	r3, [r3, #8]
 800a398:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	6859      	ldr	r1, [r3, #4]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a3a6:	035b      	lsls	r3, r3, #13
 800a3a8:	430b      	orrs	r3, r1
 800a3aa:	431a      	orrs	r2, r3
 800a3ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a3ae:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a3b8:	d004      	beq.n	800a3c4 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4a45      	ldr	r2, [pc, #276]	; (800a4d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d10f      	bne.n	800a3e4 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800a3c4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800a3c8:	f7ff ff66 	bl	800a298 <LL_ADC_IsEnabled>
 800a3cc:	4604      	mov	r4, r0
 800a3ce:	4841      	ldr	r0, [pc, #260]	; (800a4d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a3d0:	f7ff ff62 	bl	800a298 <LL_ADC_IsEnabled>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	4323      	orrs	r3, r4
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	bf0c      	ite	eq
 800a3dc:	2301      	moveq	r3, #1
 800a3de:	2300      	movne	r3, #0
 800a3e0:	b2db      	uxtb	r3, r3
 800a3e2:	e012      	b.n	800a40a <HAL_ADCEx_MultiModeConfigChannel+0x126>
 800a3e4:	483c      	ldr	r0, [pc, #240]	; (800a4d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800a3e6:	f7ff ff57 	bl	800a298 <LL_ADC_IsEnabled>
 800a3ea:	4604      	mov	r4, r0
 800a3ec:	483b      	ldr	r0, [pc, #236]	; (800a4dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800a3ee:	f7ff ff53 	bl	800a298 <LL_ADC_IsEnabled>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	431c      	orrs	r4, r3
 800a3f6:	483c      	ldr	r0, [pc, #240]	; (800a4e8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800a3f8:	f7ff ff4e 	bl	800a298 <LL_ADC_IsEnabled>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	4323      	orrs	r3, r4
 800a400:	2b00      	cmp	r3, #0
 800a402:	bf0c      	ite	eq
 800a404:	2301      	moveq	r3, #1
 800a406:	2300      	movne	r3, #0
 800a408:	b2db      	uxtb	r3, r3
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d056      	beq.n	800a4bc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800a40e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a410:	689b      	ldr	r3, [r3, #8]
 800a412:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800a416:	f023 030f 	bic.w	r3, r3, #15
 800a41a:	683a      	ldr	r2, [r7, #0]
 800a41c:	6811      	ldr	r1, [r2, #0]
 800a41e:	683a      	ldr	r2, [r7, #0]
 800a420:	6892      	ldr	r2, [r2, #8]
 800a422:	430a      	orrs	r2, r1
 800a424:	431a      	orrs	r2, r3
 800a426:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a428:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a42a:	e047      	b.n	800a4bc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800a42c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a42e:	689b      	ldr	r3, [r3, #8]
 800a430:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a434:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a436:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a440:	d004      	beq.n	800a44c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4a23      	ldr	r2, [pc, #140]	; (800a4d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d10f      	bne.n	800a46c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800a44c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800a450:	f7ff ff22 	bl	800a298 <LL_ADC_IsEnabled>
 800a454:	4604      	mov	r4, r0
 800a456:	481f      	ldr	r0, [pc, #124]	; (800a4d4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a458:	f7ff ff1e 	bl	800a298 <LL_ADC_IsEnabled>
 800a45c:	4603      	mov	r3, r0
 800a45e:	4323      	orrs	r3, r4
 800a460:	2b00      	cmp	r3, #0
 800a462:	bf0c      	ite	eq
 800a464:	2301      	moveq	r3, #1
 800a466:	2300      	movne	r3, #0
 800a468:	b2db      	uxtb	r3, r3
 800a46a:	e012      	b.n	800a492 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 800a46c:	481a      	ldr	r0, [pc, #104]	; (800a4d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800a46e:	f7ff ff13 	bl	800a298 <LL_ADC_IsEnabled>
 800a472:	4604      	mov	r4, r0
 800a474:	4819      	ldr	r0, [pc, #100]	; (800a4dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800a476:	f7ff ff0f 	bl	800a298 <LL_ADC_IsEnabled>
 800a47a:	4603      	mov	r3, r0
 800a47c:	431c      	orrs	r4, r3
 800a47e:	481a      	ldr	r0, [pc, #104]	; (800a4e8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800a480:	f7ff ff0a 	bl	800a298 <LL_ADC_IsEnabled>
 800a484:	4603      	mov	r3, r0
 800a486:	4323      	orrs	r3, r4
 800a488:	2b00      	cmp	r3, #0
 800a48a:	bf0c      	ite	eq
 800a48c:	2301      	moveq	r3, #1
 800a48e:	2300      	movne	r3, #0
 800a490:	b2db      	uxtb	r3, r3
 800a492:	2b00      	cmp	r3, #0
 800a494:	d012      	beq.n	800a4bc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800a496:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a498:	689b      	ldr	r3, [r3, #8]
 800a49a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800a49e:	f023 030f 	bic.w	r3, r3, #15
 800a4a2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a4a4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a4a6:	e009      	b.n	800a4bc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4ac:	f043 0220 	orr.w	r2, r3, #32
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800a4ba:	e000      	b.n	800a4be <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a4bc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800a4c6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3784      	adds	r7, #132	; 0x84
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd90      	pop	{r4, r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	50000100 	.word	0x50000100
 800a4d8:	50000400 	.word	0x50000400
 800a4dc:	50000500 	.word	0x50000500
 800a4e0:	50000300 	.word	0x50000300
 800a4e4:	50000700 	.word	0x50000700
 800a4e8:	50000600 	.word	0x50000600

0800a4ec <LL_EXTI_EnableIT_0_31>:
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b083      	sub	sp, #12
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800a4f4:	4b05      	ldr	r3, [pc, #20]	; (800a50c <LL_EXTI_EnableIT_0_31+0x20>)
 800a4f6:	681a      	ldr	r2, [r3, #0]
 800a4f8:	4904      	ldr	r1, [pc, #16]	; (800a50c <LL_EXTI_EnableIT_0_31+0x20>)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	600b      	str	r3, [r1, #0]
}
 800a500:	bf00      	nop
 800a502:	370c      	adds	r7, #12
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr
 800a50c:	40010400 	.word	0x40010400

0800a510 <LL_EXTI_EnableIT_32_63>:
{
 800a510:	b480      	push	{r7}
 800a512:	b083      	sub	sp, #12
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800a518:	4b05      	ldr	r3, [pc, #20]	; (800a530 <LL_EXTI_EnableIT_32_63+0x20>)
 800a51a:	6a1a      	ldr	r2, [r3, #32]
 800a51c:	4904      	ldr	r1, [pc, #16]	; (800a530 <LL_EXTI_EnableIT_32_63+0x20>)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	4313      	orrs	r3, r2
 800a522:	620b      	str	r3, [r1, #32]
}
 800a524:	bf00      	nop
 800a526:	370c      	adds	r7, #12
 800a528:	46bd      	mov	sp, r7
 800a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52e:	4770      	bx	lr
 800a530:	40010400 	.word	0x40010400

0800a534 <LL_EXTI_DisableIT_0_31>:
{
 800a534:	b480      	push	{r7}
 800a536:	b083      	sub	sp, #12
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800a53c:	4b06      	ldr	r3, [pc, #24]	; (800a558 <LL_EXTI_DisableIT_0_31+0x24>)
 800a53e:	681a      	ldr	r2, [r3, #0]
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	43db      	mvns	r3, r3
 800a544:	4904      	ldr	r1, [pc, #16]	; (800a558 <LL_EXTI_DisableIT_0_31+0x24>)
 800a546:	4013      	ands	r3, r2
 800a548:	600b      	str	r3, [r1, #0]
}
 800a54a:	bf00      	nop
 800a54c:	370c      	adds	r7, #12
 800a54e:	46bd      	mov	sp, r7
 800a550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a554:	4770      	bx	lr
 800a556:	bf00      	nop
 800a558:	40010400 	.word	0x40010400

0800a55c <LL_EXTI_DisableIT_32_63>:
{
 800a55c:	b480      	push	{r7}
 800a55e:	b083      	sub	sp, #12
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800a564:	4b06      	ldr	r3, [pc, #24]	; (800a580 <LL_EXTI_DisableIT_32_63+0x24>)
 800a566:	6a1a      	ldr	r2, [r3, #32]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	43db      	mvns	r3, r3
 800a56c:	4904      	ldr	r1, [pc, #16]	; (800a580 <LL_EXTI_DisableIT_32_63+0x24>)
 800a56e:	4013      	ands	r3, r2
 800a570:	620b      	str	r3, [r1, #32]
}
 800a572:	bf00      	nop
 800a574:	370c      	adds	r7, #12
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr
 800a57e:	bf00      	nop
 800a580:	40010400 	.word	0x40010400

0800a584 <LL_EXTI_EnableEvent_0_31>:
{
 800a584:	b480      	push	{r7}
 800a586:	b083      	sub	sp, #12
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800a58c:	4b05      	ldr	r3, [pc, #20]	; (800a5a4 <LL_EXTI_EnableEvent_0_31+0x20>)
 800a58e:	685a      	ldr	r2, [r3, #4]
 800a590:	4904      	ldr	r1, [pc, #16]	; (800a5a4 <LL_EXTI_EnableEvent_0_31+0x20>)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	4313      	orrs	r3, r2
 800a596:	604b      	str	r3, [r1, #4]
}
 800a598:	bf00      	nop
 800a59a:	370c      	adds	r7, #12
 800a59c:	46bd      	mov	sp, r7
 800a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a2:	4770      	bx	lr
 800a5a4:	40010400 	.word	0x40010400

0800a5a8 <LL_EXTI_EnableEvent_32_63>:
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b083      	sub	sp, #12
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800a5b0:	4b05      	ldr	r3, [pc, #20]	; (800a5c8 <LL_EXTI_EnableEvent_32_63+0x20>)
 800a5b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a5b4:	4904      	ldr	r1, [pc, #16]	; (800a5c8 <LL_EXTI_EnableEvent_32_63+0x20>)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	4313      	orrs	r3, r2
 800a5ba:	624b      	str	r3, [r1, #36]	; 0x24
}
 800a5bc:	bf00      	nop
 800a5be:	370c      	adds	r7, #12
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr
 800a5c8:	40010400 	.word	0x40010400

0800a5cc <LL_EXTI_DisableEvent_0_31>:
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b083      	sub	sp, #12
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800a5d4:	4b06      	ldr	r3, [pc, #24]	; (800a5f0 <LL_EXTI_DisableEvent_0_31+0x24>)
 800a5d6:	685a      	ldr	r2, [r3, #4]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	43db      	mvns	r3, r3
 800a5dc:	4904      	ldr	r1, [pc, #16]	; (800a5f0 <LL_EXTI_DisableEvent_0_31+0x24>)
 800a5de:	4013      	ands	r3, r2
 800a5e0:	604b      	str	r3, [r1, #4]
}
 800a5e2:	bf00      	nop
 800a5e4:	370c      	adds	r7, #12
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ec:	4770      	bx	lr
 800a5ee:	bf00      	nop
 800a5f0:	40010400 	.word	0x40010400

0800a5f4 <LL_EXTI_DisableEvent_32_63>:
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b083      	sub	sp, #12
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800a5fc:	4b06      	ldr	r3, [pc, #24]	; (800a618 <LL_EXTI_DisableEvent_32_63+0x24>)
 800a5fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	43db      	mvns	r3, r3
 800a604:	4904      	ldr	r1, [pc, #16]	; (800a618 <LL_EXTI_DisableEvent_32_63+0x24>)
 800a606:	4013      	ands	r3, r2
 800a608:	624b      	str	r3, [r1, #36]	; 0x24
}
 800a60a:	bf00      	nop
 800a60c:	370c      	adds	r7, #12
 800a60e:	46bd      	mov	sp, r7
 800a610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a614:	4770      	bx	lr
 800a616:	bf00      	nop
 800a618:	40010400 	.word	0x40010400

0800a61c <LL_EXTI_EnableRisingTrig_0_31>:
{
 800a61c:	b480      	push	{r7}
 800a61e:	b083      	sub	sp, #12
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800a624:	4b05      	ldr	r3, [pc, #20]	; (800a63c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800a626:	689a      	ldr	r2, [r3, #8]
 800a628:	4904      	ldr	r1, [pc, #16]	; (800a63c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	4313      	orrs	r3, r2
 800a62e:	608b      	str	r3, [r1, #8]
}
 800a630:	bf00      	nop
 800a632:	370c      	adds	r7, #12
 800a634:	46bd      	mov	sp, r7
 800a636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63a:	4770      	bx	lr
 800a63c:	40010400 	.word	0x40010400

0800a640 <LL_EXTI_EnableRisingTrig_32_63>:
{
 800a640:	b480      	push	{r7}
 800a642:	b083      	sub	sp, #12
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800a648:	4b05      	ldr	r3, [pc, #20]	; (800a660 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a64a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a64c:	4904      	ldr	r1, [pc, #16]	; (800a660 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	4313      	orrs	r3, r2
 800a652:	628b      	str	r3, [r1, #40]	; 0x28
}
 800a654:	bf00      	nop
 800a656:	370c      	adds	r7, #12
 800a658:	46bd      	mov	sp, r7
 800a65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65e:	4770      	bx	lr
 800a660:	40010400 	.word	0x40010400

0800a664 <LL_EXTI_DisableRisingTrig_0_31>:
{
 800a664:	b480      	push	{r7}
 800a666:	b083      	sub	sp, #12
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800a66c:	4b06      	ldr	r3, [pc, #24]	; (800a688 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800a66e:	689a      	ldr	r2, [r3, #8]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	43db      	mvns	r3, r3
 800a674:	4904      	ldr	r1, [pc, #16]	; (800a688 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800a676:	4013      	ands	r3, r2
 800a678:	608b      	str	r3, [r1, #8]
}
 800a67a:	bf00      	nop
 800a67c:	370c      	adds	r7, #12
 800a67e:	46bd      	mov	sp, r7
 800a680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a684:	4770      	bx	lr
 800a686:	bf00      	nop
 800a688:	40010400 	.word	0x40010400

0800a68c <LL_EXTI_DisableRisingTrig_32_63>:
{
 800a68c:	b480      	push	{r7}
 800a68e:	b083      	sub	sp, #12
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800a694:	4b06      	ldr	r3, [pc, #24]	; (800a6b0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800a696:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	43db      	mvns	r3, r3
 800a69c:	4904      	ldr	r1, [pc, #16]	; (800a6b0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800a69e:	4013      	ands	r3, r2
 800a6a0:	628b      	str	r3, [r1, #40]	; 0x28
}
 800a6a2:	bf00      	nop
 800a6a4:	370c      	adds	r7, #12
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ac:	4770      	bx	lr
 800a6ae:	bf00      	nop
 800a6b0:	40010400 	.word	0x40010400

0800a6b4 <LL_EXTI_EnableFallingTrig_0_31>:
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b083      	sub	sp, #12
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800a6bc:	4b05      	ldr	r3, [pc, #20]	; (800a6d4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800a6be:	68da      	ldr	r2, [r3, #12]
 800a6c0:	4904      	ldr	r1, [pc, #16]	; (800a6d4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	4313      	orrs	r3, r2
 800a6c6:	60cb      	str	r3, [r1, #12]
}
 800a6c8:	bf00      	nop
 800a6ca:	370c      	adds	r7, #12
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d2:	4770      	bx	lr
 800a6d4:	40010400 	.word	0x40010400

0800a6d8 <LL_EXTI_EnableFallingTrig_32_63>:
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b083      	sub	sp, #12
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800a6e0:	4b05      	ldr	r3, [pc, #20]	; (800a6f8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800a6e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6e4:	4904      	ldr	r1, [pc, #16]	; (800a6f8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800a6ec:	bf00      	nop
 800a6ee:	370c      	adds	r7, #12
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f6:	4770      	bx	lr
 800a6f8:	40010400 	.word	0x40010400

0800a6fc <LL_EXTI_DisableFallingTrig_0_31>:
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b083      	sub	sp, #12
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800a704:	4b06      	ldr	r3, [pc, #24]	; (800a720 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800a706:	68da      	ldr	r2, [r3, #12]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	43db      	mvns	r3, r3
 800a70c:	4904      	ldr	r1, [pc, #16]	; (800a720 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800a70e:	4013      	ands	r3, r2
 800a710:	60cb      	str	r3, [r1, #12]
}
 800a712:	bf00      	nop
 800a714:	370c      	adds	r7, #12
 800a716:	46bd      	mov	sp, r7
 800a718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71c:	4770      	bx	lr
 800a71e:	bf00      	nop
 800a720:	40010400 	.word	0x40010400

0800a724 <LL_EXTI_DisableFallingTrig_32_63>:
{
 800a724:	b480      	push	{r7}
 800a726:	b083      	sub	sp, #12
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800a72c:	4b06      	ldr	r3, [pc, #24]	; (800a748 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800a72e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	43db      	mvns	r3, r3
 800a734:	4904      	ldr	r1, [pc, #16]	; (800a748 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800a736:	4013      	ands	r3, r2
 800a738:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800a73a:	bf00      	nop
 800a73c:	370c      	adds	r7, #12
 800a73e:	46bd      	mov	sp, r7
 800a740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a744:	4770      	bx	lr
 800a746:	bf00      	nop
 800a748:	40010400 	.word	0x40010400

0800a74c <LL_EXTI_IsActiveFlag_0_31>:
{
 800a74c:	b480      	push	{r7}
 800a74e:	b083      	sub	sp, #12
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800a754:	4b07      	ldr	r3, [pc, #28]	; (800a774 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800a756:	695a      	ldr	r2, [r3, #20]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	4013      	ands	r3, r2
 800a75c:	687a      	ldr	r2, [r7, #4]
 800a75e:	429a      	cmp	r2, r3
 800a760:	d101      	bne.n	800a766 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 800a762:	2301      	movs	r3, #1
 800a764:	e000      	b.n	800a768 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 800a766:	2300      	movs	r3, #0
}
 800a768:	4618      	mov	r0, r3
 800a76a:	370c      	adds	r7, #12
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr
 800a774:	40010400 	.word	0x40010400

0800a778 <LL_EXTI_IsActiveFlag_32_63>:
{
 800a778:	b480      	push	{r7}
 800a77a:	b083      	sub	sp, #12
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR2, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800a780:	4b07      	ldr	r3, [pc, #28]	; (800a7a0 <LL_EXTI_IsActiveFlag_32_63+0x28>)
 800a782:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	4013      	ands	r3, r2
 800a788:	687a      	ldr	r2, [r7, #4]
 800a78a:	429a      	cmp	r2, r3
 800a78c:	d101      	bne.n	800a792 <LL_EXTI_IsActiveFlag_32_63+0x1a>
 800a78e:	2301      	movs	r3, #1
 800a790:	e000      	b.n	800a794 <LL_EXTI_IsActiveFlag_32_63+0x1c>
 800a792:	2300      	movs	r3, #0
}
 800a794:	4618      	mov	r0, r3
 800a796:	370c      	adds	r7, #12
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr
 800a7a0:	40010400 	.word	0x40010400

0800a7a4 <LL_EXTI_ClearFlag_0_31>:
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b083      	sub	sp, #12
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 800a7ac:	4a04      	ldr	r2, [pc, #16]	; (800a7c0 <LL_EXTI_ClearFlag_0_31+0x1c>)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6153      	str	r3, [r2, #20]
}
 800a7b2:	bf00      	nop
 800a7b4:	370c      	adds	r7, #12
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr
 800a7be:	bf00      	nop
 800a7c0:	40010400 	.word	0x40010400

0800a7c4 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b083      	sub	sp, #12
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 800a7cc:	4a04      	ldr	r2, [pc, #16]	; (800a7e0 <LL_EXTI_ClearFlag_32_63+0x1c>)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6353      	str	r3, [r2, #52]	; 0x34
}
 800a7d2:	bf00      	nop
 800a7d4:	370c      	adds	r7, #12
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7dc:	4770      	bx	lr
 800a7de:	bf00      	nop
 800a7e0:	40010400 	.word	0x40010400

0800a7e4 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b088      	sub	sp, #32
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d102      	bne.n	800a800 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	77fb      	strb	r3, [r7, #31]
 800a7fe:	e180      	b.n	800ab02 <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a80a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a80e:	d102      	bne.n	800a816 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 800a810:	2301      	movs	r3, #1
 800a812:	77fb      	strb	r3, [r7, #31]
 800a814:	e175      	b.n	800ab02 <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	7f5b      	ldrb	r3, [r3, #29]
 800a81a:	b2db      	uxtb	r3, r3
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d108      	bne.n	800a832 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2200      	movs	r2, #0
 800a824:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2200      	movs	r2, #0
 800a82a:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f7fc fd7f 	bl	8007330 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a83c:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	695b      	ldr	r3, [r3, #20]
 800a84c:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	68db      	ldr	r3, [r3, #12]
 800a852:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 800a858:	4313      	orrs	r3, r2
 800a85a:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	4b98      	ldr	r3, [pc, #608]	; (800aac4 <HAL_COMP_Init+0x2e0>)
 800a864:	4013      	ands	r3, r2
 800a866:	687a      	ldr	r2, [r7, #4]
 800a868:	6812      	ldr	r2, [r2, #0]
 800a86a:	6979      	ldr	r1, [r7, #20]
 800a86c:	430b      	orrs	r3, r1
 800a86e:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d015      	beq.n	800a8aa <HAL_COMP_Init+0xc6>
 800a87e:	69bb      	ldr	r3, [r7, #24]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d112      	bne.n	800a8aa <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800a884:	4b90      	ldr	r3, [pc, #576]	; (800aac8 <HAL_COMP_Init+0x2e4>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	099b      	lsrs	r3, r3, #6
 800a88a:	4a90      	ldr	r2, [pc, #576]	; (800aacc <HAL_COMP_Init+0x2e8>)
 800a88c:	fba2 2303 	umull	r2, r3, r2, r3
 800a890:	099a      	lsrs	r2, r3, #6
 800a892:	4613      	mov	r3, r2
 800a894:	009b      	lsls	r3, r3, #2
 800a896:	4413      	add	r3, r2
 800a898:	009b      	lsls	r3, r3, #2
 800a89a:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800a89c:	e002      	b.n	800a8a4 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	3b01      	subs	r3, #1
 800a8a2:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d1f9      	bne.n	800a89e <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	4a88      	ldr	r2, [pc, #544]	; (800aad0 <HAL_COMP_Init+0x2ec>)
 800a8b0:	4293      	cmp	r3, r2
 800a8b2:	d028      	beq.n	800a906 <HAL_COMP_Init+0x122>
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	4a86      	ldr	r2, [pc, #536]	; (800aad4 <HAL_COMP_Init+0x2f0>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d020      	beq.n	800a900 <HAL_COMP_Init+0x11c>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	4a85      	ldr	r2, [pc, #532]	; (800aad8 <HAL_COMP_Init+0x2f4>)
 800a8c4:	4293      	cmp	r3, r2
 800a8c6:	d018      	beq.n	800a8fa <HAL_COMP_Init+0x116>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	4a83      	ldr	r2, [pc, #524]	; (800aadc <HAL_COMP_Init+0x2f8>)
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d010      	beq.n	800a8f4 <HAL_COMP_Init+0x110>
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	4a82      	ldr	r2, [pc, #520]	; (800aae0 <HAL_COMP_Init+0x2fc>)
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	d008      	beq.n	800a8ee <HAL_COMP_Init+0x10a>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	4a80      	ldr	r2, [pc, #512]	; (800aae4 <HAL_COMP_Init+0x300>)
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	d101      	bne.n	800a8ea <HAL_COMP_Init+0x106>
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	e00f      	b.n	800a90a <HAL_COMP_Init+0x126>
 800a8ea:	2302      	movs	r3, #2
 800a8ec:	e00d      	b.n	800a90a <HAL_COMP_Init+0x126>
 800a8ee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a8f2:	e00a      	b.n	800a90a <HAL_COMP_Init+0x126>
 800a8f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a8f8:	e007      	b.n	800a90a <HAL_COMP_Init+0x126>
 800a8fa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800a8fe:	e004      	b.n	800a90a <HAL_COMP_Init+0x126>
 800a900:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a904:	e001      	b.n	800a90a <HAL_COMP_Init+0x126>
 800a906:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a90a:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	699b      	ldr	r3, [r3, #24]
 800a910:	f003 0303 	and.w	r3, r3, #3
 800a914:	2b00      	cmp	r3, #0
 800a916:	f000 80b6 	beq.w	800aa86 <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	699b      	ldr	r3, [r3, #24]
 800a91e:	f003 0310 	and.w	r3, r3, #16
 800a922:	2b00      	cmp	r3, #0
 800a924:	d011      	beq.n	800a94a <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	4a6e      	ldr	r2, [pc, #440]	; (800aae4 <HAL_COMP_Init+0x300>)
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d004      	beq.n	800a93a <HAL_COMP_Init+0x156>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4a6c      	ldr	r2, [pc, #432]	; (800aae8 <HAL_COMP_Init+0x304>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d103      	bne.n	800a942 <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 800a93a:	6938      	ldr	r0, [r7, #16]
 800a93c:	f7ff fe80 	bl	800a640 <LL_EXTI_EnableRisingTrig_32_63>
 800a940:	e014      	b.n	800a96c <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800a942:	6938      	ldr	r0, [r7, #16]
 800a944:	f7ff fe6a 	bl	800a61c <LL_EXTI_EnableRisingTrig_0_31>
 800a948:	e010      	b.n	800a96c <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	4a65      	ldr	r2, [pc, #404]	; (800aae4 <HAL_COMP_Init+0x300>)
 800a950:	4293      	cmp	r3, r2
 800a952:	d004      	beq.n	800a95e <HAL_COMP_Init+0x17a>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	4a63      	ldr	r2, [pc, #396]	; (800aae8 <HAL_COMP_Init+0x304>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d103      	bne.n	800a966 <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 800a95e:	6938      	ldr	r0, [r7, #16]
 800a960:	f7ff fe94 	bl	800a68c <LL_EXTI_DisableRisingTrig_32_63>
 800a964:	e002      	b.n	800a96c <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800a966:	6938      	ldr	r0, [r7, #16]
 800a968:	f7ff fe7c 	bl	800a664 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	699b      	ldr	r3, [r3, #24]
 800a970:	f003 0320 	and.w	r3, r3, #32
 800a974:	2b00      	cmp	r3, #0
 800a976:	d011      	beq.n	800a99c <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	4a59      	ldr	r2, [pc, #356]	; (800aae4 <HAL_COMP_Init+0x300>)
 800a97e:	4293      	cmp	r3, r2
 800a980:	d004      	beq.n	800a98c <HAL_COMP_Init+0x1a8>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	4a58      	ldr	r2, [pc, #352]	; (800aae8 <HAL_COMP_Init+0x304>)
 800a988:	4293      	cmp	r3, r2
 800a98a:	d103      	bne.n	800a994 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 800a98c:	6938      	ldr	r0, [r7, #16]
 800a98e:	f7ff fea3 	bl	800a6d8 <LL_EXTI_EnableFallingTrig_32_63>
 800a992:	e014      	b.n	800a9be <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800a994:	6938      	ldr	r0, [r7, #16]
 800a996:	f7ff fe8d 	bl	800a6b4 <LL_EXTI_EnableFallingTrig_0_31>
 800a99a:	e010      	b.n	800a9be <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	4a50      	ldr	r2, [pc, #320]	; (800aae4 <HAL_COMP_Init+0x300>)
 800a9a2:	4293      	cmp	r3, r2
 800a9a4:	d004      	beq.n	800a9b0 <HAL_COMP_Init+0x1cc>
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	4a4f      	ldr	r2, [pc, #316]	; (800aae8 <HAL_COMP_Init+0x304>)
 800a9ac:	4293      	cmp	r3, r2
 800a9ae:	d103      	bne.n	800a9b8 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 800a9b0:	6938      	ldr	r0, [r7, #16]
 800a9b2:	f7ff feb7 	bl	800a724 <LL_EXTI_DisableFallingTrig_32_63>
 800a9b6:	e002      	b.n	800a9be <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800a9b8:	6938      	ldr	r0, [r7, #16]
 800a9ba:	f7ff fe9f 	bl	800a6fc <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	4a48      	ldr	r2, [pc, #288]	; (800aae4 <HAL_COMP_Init+0x300>)
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	d004      	beq.n	800a9d2 <HAL_COMP_Init+0x1ee>
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	4a46      	ldr	r2, [pc, #280]	; (800aae8 <HAL_COMP_Init+0x304>)
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d103      	bne.n	800a9da <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 800a9d2:	6938      	ldr	r0, [r7, #16]
 800a9d4:	f7ff fef6 	bl	800a7c4 <LL_EXTI_ClearFlag_32_63>
 800a9d8:	e002      	b.n	800a9e0 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 800a9da:	6938      	ldr	r0, [r7, #16]
 800a9dc:	f7ff fee2 	bl	800a7a4 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	699b      	ldr	r3, [r3, #24]
 800a9e4:	f003 0302 	and.w	r3, r3, #2
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d011      	beq.n	800aa10 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	4a3c      	ldr	r2, [pc, #240]	; (800aae4 <HAL_COMP_Init+0x300>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d004      	beq.n	800aa00 <HAL_COMP_Init+0x21c>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	4a3b      	ldr	r2, [pc, #236]	; (800aae8 <HAL_COMP_Init+0x304>)
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d103      	bne.n	800aa08 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 800aa00:	6938      	ldr	r0, [r7, #16]
 800aa02:	f7ff fdd1 	bl	800a5a8 <LL_EXTI_EnableEvent_32_63>
 800aa06:	e014      	b.n	800aa32 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 800aa08:	6938      	ldr	r0, [r7, #16]
 800aa0a:	f7ff fdbb 	bl	800a584 <LL_EXTI_EnableEvent_0_31>
 800aa0e:	e010      	b.n	800aa32 <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	4a33      	ldr	r2, [pc, #204]	; (800aae4 <HAL_COMP_Init+0x300>)
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d004      	beq.n	800aa24 <HAL_COMP_Init+0x240>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	4a32      	ldr	r2, [pc, #200]	; (800aae8 <HAL_COMP_Init+0x304>)
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d103      	bne.n	800aa2c <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 800aa24:	6938      	ldr	r0, [r7, #16]
 800aa26:	f7ff fde5 	bl	800a5f4 <LL_EXTI_DisableEvent_32_63>
 800aa2a:	e002      	b.n	800aa32 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 800aa2c:	6938      	ldr	r0, [r7, #16]
 800aa2e:	f7ff fdcd 	bl	800a5cc <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	699b      	ldr	r3, [r3, #24]
 800aa36:	f003 0301 	and.w	r3, r3, #1
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d011      	beq.n	800aa62 <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	4a28      	ldr	r2, [pc, #160]	; (800aae4 <HAL_COMP_Init+0x300>)
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d004      	beq.n	800aa52 <HAL_COMP_Init+0x26e>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	4a26      	ldr	r2, [pc, #152]	; (800aae8 <HAL_COMP_Init+0x304>)
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	d103      	bne.n	800aa5a <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 800aa52:	6938      	ldr	r0, [r7, #16]
 800aa54:	f7ff fd5c 	bl	800a510 <LL_EXTI_EnableIT_32_63>
 800aa58:	e04b      	b.n	800aaf2 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 800aa5a:	6938      	ldr	r0, [r7, #16]
 800aa5c:	f7ff fd46 	bl	800a4ec <LL_EXTI_EnableIT_0_31>
 800aa60:	e047      	b.n	800aaf2 <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	4a1f      	ldr	r2, [pc, #124]	; (800aae4 <HAL_COMP_Init+0x300>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d004      	beq.n	800aa76 <HAL_COMP_Init+0x292>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4a1d      	ldr	r2, [pc, #116]	; (800aae8 <HAL_COMP_Init+0x304>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d103      	bne.n	800aa7e <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 800aa76:	6938      	ldr	r0, [r7, #16]
 800aa78:	f7ff fd70 	bl	800a55c <LL_EXTI_DisableIT_32_63>
 800aa7c:	e039      	b.n	800aaf2 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 800aa7e:	6938      	ldr	r0, [r7, #16]
 800aa80:	f7ff fd58 	bl	800a534 <LL_EXTI_DisableIT_0_31>
 800aa84:	e035      	b.n	800aaf2 <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	4a16      	ldr	r2, [pc, #88]	; (800aae4 <HAL_COMP_Init+0x300>)
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d004      	beq.n	800aa9a <HAL_COMP_Init+0x2b6>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4a14      	ldr	r2, [pc, #80]	; (800aae8 <HAL_COMP_Init+0x304>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d103      	bne.n	800aaa2 <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 800aa9a:	6938      	ldr	r0, [r7, #16]
 800aa9c:	f7ff fdaa 	bl	800a5f4 <LL_EXTI_DisableEvent_32_63>
 800aaa0:	e002      	b.n	800aaa8 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 800aaa2:	6938      	ldr	r0, [r7, #16]
 800aaa4:	f7ff fd92 	bl	800a5cc <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	4a0d      	ldr	r2, [pc, #52]	; (800aae4 <HAL_COMP_Init+0x300>)
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d004      	beq.n	800aabc <HAL_COMP_Init+0x2d8>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	4a0c      	ldr	r2, [pc, #48]	; (800aae8 <HAL_COMP_Init+0x304>)
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d117      	bne.n	800aaec <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 800aabc:	6938      	ldr	r0, [r7, #16]
 800aabe:	f7ff fd4d 	bl	800a55c <LL_EXTI_DisableIT_32_63>
 800aac2:	e016      	b.n	800aaf2 <HAL_COMP_Init+0x30e>
 800aac4:	ff007e0f 	.word	0xff007e0f
 800aac8:	20000c34 	.word	0x20000c34
 800aacc:	053e2d63 	.word	0x053e2d63
 800aad0:	40010200 	.word	0x40010200
 800aad4:	40010204 	.word	0x40010204
 800aad8:	40010208 	.word	0x40010208
 800aadc:	4001020c 	.word	0x4001020c
 800aae0:	40010210 	.word	0x40010210
 800aae4:	40010214 	.word	0x40010214
 800aae8:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 800aaec:	6938      	ldr	r0, [r7, #16]
 800aaee:	f7ff fd21 	bl	800a534 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	7f5b      	ldrb	r3, [r3, #29]
 800aaf6:	b2db      	uxtb	r3, r3
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d102      	bne.n	800ab02 <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2201      	movs	r2, #1
 800ab00:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 800ab02:	7ffb      	ldrb	r3, [r7, #31]
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3720      	adds	r7, #32
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <HAL_COMP_Stop>:
  * @brief  Stop the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop(COMP_HandleTypeDef *hcomp)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b085      	sub	sp, #20
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ab14:	2300      	movs	r3, #0
 800ab16:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d102      	bne.n	800ab24 <HAL_COMP_Stop+0x18>
  {
    status = HAL_ERROR;
 800ab1e:	2301      	movs	r3, #1
 800ab20:	73fb      	strb	r3, [r7, #15]
 800ab22:	e01d      	b.n	800ab60 <HAL_COMP_Stop+0x54>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab32:	d102      	bne.n	800ab3a <HAL_COMP_Stop+0x2e>
  {
    status = HAL_ERROR;
 800ab34:	2301      	movs	r3, #1
 800ab36:	73fb      	strb	r3, [r7, #15]
 800ab38:	e012      	b.n	800ab60 <HAL_COMP_Stop+0x54>
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    /* Check compliant states: HAL_COMP_STATE_READY or HAL_COMP_STATE_BUSY    */
    /* (all states except HAL_COMP_STATE_RESET and except locked status.      */
    if(hcomp->State != HAL_COMP_STATE_RESET)
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	7f5b      	ldrb	r3, [r3, #29]
 800ab3e:	b2db      	uxtb	r3, r3
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d00b      	beq.n	800ab5c <HAL_COMP_Stop+0x50>
    {
      /* Disable the selected comparator */
      CLEAR_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	681a      	ldr	r2, [r3, #0]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f022 0201 	bic.w	r2, r2, #1
 800ab52:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_READY;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2201      	movs	r2, #1
 800ab58:	775a      	strb	r2, [r3, #29]
 800ab5a:	e001      	b.n	800ab60 <HAL_COMP_Stop+0x54>
    }
    else
    {
      status = HAL_ERROR;
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800ab60:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3714      	adds	r7, #20
 800ab66:	46bd      	mov	sp, r7
 800ab68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6c:	4770      	bx	lr
	...

0800ab70 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b084      	sub	sp, #16
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	4a2f      	ldr	r2, [pc, #188]	; (800ac3c <HAL_COMP_IRQHandler+0xcc>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d028      	beq.n	800abd4 <HAL_COMP_IRQHandler+0x64>
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	4a2e      	ldr	r2, [pc, #184]	; (800ac40 <HAL_COMP_IRQHandler+0xd0>)
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d020      	beq.n	800abce <HAL_COMP_IRQHandler+0x5e>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	4a2c      	ldr	r2, [pc, #176]	; (800ac44 <HAL_COMP_IRQHandler+0xd4>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d018      	beq.n	800abc8 <HAL_COMP_IRQHandler+0x58>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	4a2b      	ldr	r2, [pc, #172]	; (800ac48 <HAL_COMP_IRQHandler+0xd8>)
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	d010      	beq.n	800abc2 <HAL_COMP_IRQHandler+0x52>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	4a29      	ldr	r2, [pc, #164]	; (800ac4c <HAL_COMP_IRQHandler+0xdc>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d008      	beq.n	800abbc <HAL_COMP_IRQHandler+0x4c>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	4a28      	ldr	r2, [pc, #160]	; (800ac50 <HAL_COMP_IRQHandler+0xe0>)
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d101      	bne.n	800abb8 <HAL_COMP_IRQHandler+0x48>
 800abb4:	2301      	movs	r3, #1
 800abb6:	e00f      	b.n	800abd8 <HAL_COMP_IRQHandler+0x68>
 800abb8:	2302      	movs	r3, #2
 800abba:	e00d      	b.n	800abd8 <HAL_COMP_IRQHandler+0x68>
 800abbc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800abc0:	e00a      	b.n	800abd8 <HAL_COMP_IRQHandler+0x68>
 800abc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800abc6:	e007      	b.n	800abd8 <HAL_COMP_IRQHandler+0x68>
 800abc8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800abcc:	e004      	b.n	800abd8 <HAL_COMP_IRQHandler+0x68>
 800abce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800abd2:	e001      	b.n	800abd8 <HAL_COMP_IRQHandler+0x68>
 800abd4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800abd8:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_comp_exti_flag_set = 0UL;
 800abda:	2300      	movs	r3, #0
 800abdc:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
  if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	4a1b      	ldr	r2, [pc, #108]	; (800ac50 <HAL_COMP_IRQHandler+0xe0>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d004      	beq.n	800abf2 <HAL_COMP_IRQHandler+0x82>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	4a19      	ldr	r2, [pc, #100]	; (800ac54 <HAL_COMP_IRQHandler+0xe4>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d108      	bne.n	800ac04 <HAL_COMP_IRQHandler+0x94>
  {
    if(LL_EXTI_IsActiveFlag_32_63(exti_line) != 0UL)
 800abf2:	68b8      	ldr	r0, [r7, #8]
 800abf4:	f7ff fdc0 	bl	800a778 <LL_EXTI_IsActiveFlag_32_63>
 800abf8:	4603      	mov	r3, r0
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d00a      	beq.n	800ac14 <HAL_COMP_IRQHandler+0xa4>
    {
      tmp_comp_exti_flag_set = 2UL;
 800abfe:	2302      	movs	r3, #2
 800ac00:	60fb      	str	r3, [r7, #12]
    if(LL_EXTI_IsActiveFlag_32_63(exti_line) != 0UL)
 800ac02:	e007      	b.n	800ac14 <HAL_COMP_IRQHandler+0xa4>
    }
  }
  else
  {
    if(LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 800ac04:	68b8      	ldr	r0, [r7, #8]
 800ac06:	f7ff fda1 	bl	800a74c <LL_EXTI_IsActiveFlag_0_31>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d001      	beq.n	800ac14 <HAL_COMP_IRQHandler+0xa4>
    {
      tmp_comp_exti_flag_set = 1UL;
 800ac10:	2301      	movs	r3, #1
 800ac12:	60fb      	str	r3, [r7, #12]
  {
    tmp_comp_exti_flag_set = 1UL;
  }
#endif

  if(tmp_comp_exti_flag_set != 0UL)
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d00c      	beq.n	800ac34 <HAL_COMP_IRQHandler+0xc4>
  {
      /* Clear COMP EXTI line pending bit */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if(tmp_comp_exti_flag_set == 2UL)
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	2b02      	cmp	r3, #2
 800ac1e:	d103      	bne.n	800ac28 <HAL_COMP_IRQHandler+0xb8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 800ac20:	68b8      	ldr	r0, [r7, #8]
 800ac22:	f7ff fdcf 	bl	800a7c4 <LL_EXTI_ClearFlag_32_63>
 800ac26:	e002      	b.n	800ac2e <HAL_COMP_IRQHandler+0xbe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 800ac28:	68b8      	ldr	r0, [r7, #8]
 800ac2a:	f7ff fdbb 	bl	800a7a4 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f7fb fc12 	bl	8006458 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 800ac34:	bf00      	nop
 800ac36:	3710      	adds	r7, #16
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}
 800ac3c:	40010200 	.word	0x40010200
 800ac40:	40010204 	.word	0x40010204
 800ac44:	40010208 	.word	0x40010208
 800ac48:	4001020c 	.word	0x4001020c
 800ac4c:	40010210 	.word	0x40010210
 800ac50:	40010214 	.word	0x40010214
 800ac54:	40010218 	.word	0x40010218

0800ac58 <HAL_COMP_GetOutputLevel>:
  *         @arg COMP_OUTPUT_LEVEL_LOW
  *         @arg COMP_OUTPUT_LEVEL_HIGH
  *
  */
uint32_t HAL_COMP_GetOutputLevel(COMP_HandleTypeDef *hcomp)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b083      	sub	sp, #12
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

  return (uint32_t)(READ_BIT(hcomp->Instance->CSR, COMP_CSR_VALUE)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	0f9b      	lsrs	r3, r3, #30
 800ac68:	f003 0301 	and.w	r3, r3, #1
                    >> COMP_OUTPUT_LEVEL_BITOFFSET_POS);
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	370c      	adds	r7, #12
 800ac70:	46bd      	mov	sp, r7
 800ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac76:	4770      	bx	lr

0800ac78 <__NVIC_SetPriorityGrouping>:
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b085      	sub	sp, #20
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f003 0307 	and.w	r3, r3, #7
 800ac86:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ac88:	4b0c      	ldr	r3, [pc, #48]	; (800acbc <__NVIC_SetPriorityGrouping+0x44>)
 800ac8a:	68db      	ldr	r3, [r3, #12]
 800ac8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ac8e:	68ba      	ldr	r2, [r7, #8]
 800ac90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800ac94:	4013      	ands	r3, r2
 800ac96:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800aca0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800aca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800acaa:	4a04      	ldr	r2, [pc, #16]	; (800acbc <__NVIC_SetPriorityGrouping+0x44>)
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	60d3      	str	r3, [r2, #12]
}
 800acb0:	bf00      	nop
 800acb2:	3714      	adds	r7, #20
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr
 800acbc:	e000ed00 	.word	0xe000ed00

0800acc0 <__NVIC_GetPriorityGrouping>:
{
 800acc0:	b480      	push	{r7}
 800acc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800acc4:	4b04      	ldr	r3, [pc, #16]	; (800acd8 <__NVIC_GetPriorityGrouping+0x18>)
 800acc6:	68db      	ldr	r3, [r3, #12]
 800acc8:	0a1b      	lsrs	r3, r3, #8
 800acca:	f003 0307 	and.w	r3, r3, #7
}
 800acce:	4618      	mov	r0, r3
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr
 800acd8:	e000ed00 	.word	0xe000ed00

0800acdc <__NVIC_EnableIRQ>:
{
 800acdc:	b480      	push	{r7}
 800acde:	b083      	sub	sp, #12
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	4603      	mov	r3, r0
 800ace4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ace6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800acea:	2b00      	cmp	r3, #0
 800acec:	db0b      	blt.n	800ad06 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800acee:	79fb      	ldrb	r3, [r7, #7]
 800acf0:	f003 021f 	and.w	r2, r3, #31
 800acf4:	4907      	ldr	r1, [pc, #28]	; (800ad14 <__NVIC_EnableIRQ+0x38>)
 800acf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800acfa:	095b      	lsrs	r3, r3, #5
 800acfc:	2001      	movs	r0, #1
 800acfe:	fa00 f202 	lsl.w	r2, r0, r2
 800ad02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800ad06:	bf00      	nop
 800ad08:	370c      	adds	r7, #12
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad10:	4770      	bx	lr
 800ad12:	bf00      	nop
 800ad14:	e000e100 	.word	0xe000e100

0800ad18 <__NVIC_DisableIRQ>:
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b083      	sub	sp, #12
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	4603      	mov	r3, r0
 800ad20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ad22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	db10      	blt.n	800ad4c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ad2a:	79fb      	ldrb	r3, [r7, #7]
 800ad2c:	f003 021f 	and.w	r2, r3, #31
 800ad30:	4909      	ldr	r1, [pc, #36]	; (800ad58 <__NVIC_DisableIRQ+0x40>)
 800ad32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad36:	095b      	lsrs	r3, r3, #5
 800ad38:	2001      	movs	r0, #1
 800ad3a:	fa00 f202 	lsl.w	r2, r0, r2
 800ad3e:	3320      	adds	r3, #32
 800ad40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800ad44:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800ad48:	f3bf 8f6f 	isb	sy
}
 800ad4c:	bf00      	nop
 800ad4e:	370c      	adds	r7, #12
 800ad50:	46bd      	mov	sp, r7
 800ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad56:	4770      	bx	lr
 800ad58:	e000e100 	.word	0xe000e100

0800ad5c <__NVIC_SetPriority>:
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b083      	sub	sp, #12
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	4603      	mov	r3, r0
 800ad64:	6039      	str	r1, [r7, #0]
 800ad66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ad68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	db0a      	blt.n	800ad86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	b2da      	uxtb	r2, r3
 800ad74:	490c      	ldr	r1, [pc, #48]	; (800ada8 <__NVIC_SetPriority+0x4c>)
 800ad76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad7a:	0112      	lsls	r2, r2, #4
 800ad7c:	b2d2      	uxtb	r2, r2
 800ad7e:	440b      	add	r3, r1
 800ad80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ad84:	e00a      	b.n	800ad9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	b2da      	uxtb	r2, r3
 800ad8a:	4908      	ldr	r1, [pc, #32]	; (800adac <__NVIC_SetPriority+0x50>)
 800ad8c:	79fb      	ldrb	r3, [r7, #7]
 800ad8e:	f003 030f 	and.w	r3, r3, #15
 800ad92:	3b04      	subs	r3, #4
 800ad94:	0112      	lsls	r2, r2, #4
 800ad96:	b2d2      	uxtb	r2, r2
 800ad98:	440b      	add	r3, r1
 800ad9a:	761a      	strb	r2, [r3, #24]
}
 800ad9c:	bf00      	nop
 800ad9e:	370c      	adds	r7, #12
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr
 800ada8:	e000e100 	.word	0xe000e100
 800adac:	e000ed00 	.word	0xe000ed00

0800adb0 <NVIC_EncodePriority>:
{
 800adb0:	b480      	push	{r7}
 800adb2:	b089      	sub	sp, #36	; 0x24
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	60f8      	str	r0, [r7, #12]
 800adb8:	60b9      	str	r1, [r7, #8]
 800adba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	f003 0307 	and.w	r3, r3, #7
 800adc2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800adc4:	69fb      	ldr	r3, [r7, #28]
 800adc6:	f1c3 0307 	rsb	r3, r3, #7
 800adca:	2b04      	cmp	r3, #4
 800adcc:	bf28      	it	cs
 800adce:	2304      	movcs	r3, #4
 800add0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800add2:	69fb      	ldr	r3, [r7, #28]
 800add4:	3304      	adds	r3, #4
 800add6:	2b06      	cmp	r3, #6
 800add8:	d902      	bls.n	800ade0 <NVIC_EncodePriority+0x30>
 800adda:	69fb      	ldr	r3, [r7, #28]
 800addc:	3b03      	subs	r3, #3
 800adde:	e000      	b.n	800ade2 <NVIC_EncodePriority+0x32>
 800ade0:	2300      	movs	r3, #0
 800ade2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ade4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ade8:	69bb      	ldr	r3, [r7, #24]
 800adea:	fa02 f303 	lsl.w	r3, r2, r3
 800adee:	43da      	mvns	r2, r3
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	401a      	ands	r2, r3
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800adf8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	fa01 f303 	lsl.w	r3, r1, r3
 800ae02:	43d9      	mvns	r1, r3
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ae08:	4313      	orrs	r3, r2
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3724      	adds	r7, #36	; 0x24
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae14:	4770      	bx	lr
	...

0800ae18 <SysTick_Config>:
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b082      	sub	sp, #8
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	3b01      	subs	r3, #1
 800ae24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ae28:	d301      	bcc.n	800ae2e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	e00f      	b.n	800ae4e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ae2e:	4a0a      	ldr	r2, [pc, #40]	; (800ae58 <SysTick_Config+0x40>)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	3b01      	subs	r3, #1
 800ae34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ae36:	210f      	movs	r1, #15
 800ae38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae3c:	f7ff ff8e 	bl	800ad5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ae40:	4b05      	ldr	r3, [pc, #20]	; (800ae58 <SysTick_Config+0x40>)
 800ae42:	2200      	movs	r2, #0
 800ae44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ae46:	4b04      	ldr	r3, [pc, #16]	; (800ae58 <SysTick_Config+0x40>)
 800ae48:	2207      	movs	r2, #7
 800ae4a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800ae4c:	2300      	movs	r3, #0
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3708      	adds	r7, #8
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
 800ae56:	bf00      	nop
 800ae58:	e000e010 	.word	0xe000e010

0800ae5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b082      	sub	sp, #8
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f7ff ff07 	bl	800ac78 <__NVIC_SetPriorityGrouping>
}
 800ae6a:	bf00      	nop
 800ae6c:	3708      	adds	r7, #8
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}

0800ae72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ae72:	b580      	push	{r7, lr}
 800ae74:	b086      	sub	sp, #24
 800ae76:	af00      	add	r7, sp, #0
 800ae78:	4603      	mov	r3, r0
 800ae7a:	60b9      	str	r1, [r7, #8]
 800ae7c:	607a      	str	r2, [r7, #4]
 800ae7e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800ae80:	f7ff ff1e 	bl	800acc0 <__NVIC_GetPriorityGrouping>
 800ae84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ae86:	687a      	ldr	r2, [r7, #4]
 800ae88:	68b9      	ldr	r1, [r7, #8]
 800ae8a:	6978      	ldr	r0, [r7, #20]
 800ae8c:	f7ff ff90 	bl	800adb0 <NVIC_EncodePriority>
 800ae90:	4602      	mov	r2, r0
 800ae92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae96:	4611      	mov	r1, r2
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f7ff ff5f 	bl	800ad5c <__NVIC_SetPriority>
}
 800ae9e:	bf00      	nop
 800aea0:	3718      	adds	r7, #24
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}

0800aea6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800aea6:	b580      	push	{r7, lr}
 800aea8:	b082      	sub	sp, #8
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	4603      	mov	r3, r0
 800aeae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800aeb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f7ff ff11 	bl	800acdc <__NVIC_EnableIRQ>
}
 800aeba:	bf00      	nop
 800aebc:	3708      	adds	r7, #8
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}

0800aec2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800aec2:	b580      	push	{r7, lr}
 800aec4:	b082      	sub	sp, #8
 800aec6:	af00      	add	r7, sp, #0
 800aec8:	4603      	mov	r3, r0
 800aeca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800aecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aed0:	4618      	mov	r0, r3
 800aed2:	f7ff ff21 	bl	800ad18 <__NVIC_DisableIRQ>
}
 800aed6:	bf00      	nop
 800aed8:	3708      	adds	r7, #8
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}

0800aede <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800aede:	b580      	push	{r7, lr}
 800aee0:	b082      	sub	sp, #8
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f7ff ff96 	bl	800ae18 <SysTick_Config>
 800aeec:	4603      	mov	r3, r0
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3708      	adds	r7, #8
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}

0800aef6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800aef6:	b580      	push	{r7, lr}
 800aef8:	b082      	sub	sp, #8
 800aefa:	af00      	add	r7, sp, #0
 800aefc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d101      	bne.n	800af08 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800af04:	2301      	movs	r3, #1
 800af06:	e014      	b.n	800af32 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	791b      	ldrb	r3, [r3, #4]
 800af0c:	b2db      	uxtb	r3, r3
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d105      	bne.n	800af1e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2200      	movs	r2, #0
 800af16:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f7fc fac7 	bl	80074ac <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2202      	movs	r2, #2
 800af22:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2200      	movs	r2, #0
 800af28:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2201      	movs	r2, #1
 800af2e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800af30:	2300      	movs	r3, #0
}
 800af32:	4618      	mov	r0, r3
 800af34:	3708      	adds	r7, #8
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}

0800af3a <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800af3a:	b580      	push	{r7, lr}
 800af3c:	b082      	sub	sp, #8
 800af3e:	af00      	add	r7, sp, #0
 800af40:	6078      	str	r0, [r7, #4]
 800af42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	795b      	ldrb	r3, [r3, #5]
 800af48:	2b01      	cmp	r3, #1
 800af4a:	d101      	bne.n	800af50 <HAL_DAC_Start+0x16>
 800af4c:	2302      	movs	r3, #2
 800af4e:	e043      	b.n	800afd8 <HAL_DAC_Start+0x9e>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2201      	movs	r2, #1
 800af54:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2202      	movs	r2, #2
 800af5a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	6819      	ldr	r1, [r3, #0]
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	f003 0310 	and.w	r3, r3, #16
 800af68:	2201      	movs	r2, #1
 800af6a:	409a      	lsls	r2, r3
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	430a      	orrs	r2, r1
 800af72:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 800af74:	2001      	movs	r0, #1
 800af76:	f7fd fe65 	bl	8008c44 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d10f      	bne.n	800afa0 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800af8a:	2b02      	cmp	r3, #2
 800af8c:	d11d      	bne.n	800afca <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	685a      	ldr	r2, [r3, #4]
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f042 0201 	orr.w	r2, r2, #1
 800af9c:	605a      	str	r2, [r3, #4]
 800af9e:	e014      	b.n	800afca <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	f003 0310 	and.w	r3, r3, #16
 800afb0:	2102      	movs	r1, #2
 800afb2:	fa01 f303 	lsl.w	r3, r1, r3
 800afb6:	429a      	cmp	r2, r3
 800afb8:	d107      	bne.n	800afca <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	685a      	ldr	r2, [r3, #4]
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	f042 0202 	orr.w	r2, r2, #2
 800afc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2201      	movs	r2, #1
 800afce:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2200      	movs	r2, #0
 800afd4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800afd6:	2300      	movs	r3, #0
}
 800afd8:	4618      	mov	r0, r3
 800afda:	3708      	adds	r7, #8
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}

0800afe0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b086      	sub	sp, #24
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	60f8      	str	r0, [r7, #12]
 800afe8:	60b9      	str	r1, [r7, #8]
 800afea:	607a      	str	r2, [r7, #4]
 800afec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800afee:	2300      	movs	r3, #0
 800aff0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	795b      	ldrb	r3, [r3, #5]
 800aff6:	2b01      	cmp	r3, #1
 800aff8:	d101      	bne.n	800affe <HAL_DAC_Start_DMA+0x1e>
 800affa:	2302      	movs	r3, #2
 800affc:	e0a1      	b.n	800b142 <HAL_DAC_Start_DMA+0x162>
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	2201      	movs	r2, #1
 800b002:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	2202      	movs	r2, #2
 800b008:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d12a      	bne.n	800b066 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	689b      	ldr	r3, [r3, #8]
 800b014:	4a4d      	ldr	r2, [pc, #308]	; (800b14c <HAL_DAC_Start_DMA+0x16c>)
 800b016:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	689b      	ldr	r3, [r3, #8]
 800b01c:	4a4c      	ldr	r2, [pc, #304]	; (800b150 <HAL_DAC_Start_DMA+0x170>)
 800b01e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	689b      	ldr	r3, [r3, #8]
 800b024:	4a4b      	ldr	r2, [pc, #300]	; (800b154 <HAL_DAC_Start_DMA+0x174>)
 800b026:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	681a      	ldr	r2, [r3, #0]
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b036:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800b038:	6a3b      	ldr	r3, [r7, #32]
 800b03a:	2b04      	cmp	r3, #4
 800b03c:	d009      	beq.n	800b052 <HAL_DAC_Start_DMA+0x72>
 800b03e:	2b08      	cmp	r3, #8
 800b040:	d00c      	beq.n	800b05c <HAL_DAC_Start_DMA+0x7c>
 800b042:	2b00      	cmp	r3, #0
 800b044:	d000      	beq.n	800b048 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800b046:	e039      	b.n	800b0bc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	3308      	adds	r3, #8
 800b04e:	613b      	str	r3, [r7, #16]
        break;
 800b050:	e034      	b.n	800b0bc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	330c      	adds	r3, #12
 800b058:	613b      	str	r3, [r7, #16]
        break;
 800b05a:	e02f      	b.n	800b0bc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	3310      	adds	r3, #16
 800b062:	613b      	str	r3, [r7, #16]
        break;
 800b064:	e02a      	b.n	800b0bc <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	68db      	ldr	r3, [r3, #12]
 800b06a:	4a3b      	ldr	r2, [pc, #236]	; (800b158 <HAL_DAC_Start_DMA+0x178>)
 800b06c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	68db      	ldr	r3, [r3, #12]
 800b072:	4a3a      	ldr	r2, [pc, #232]	; (800b15c <HAL_DAC_Start_DMA+0x17c>)
 800b074:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	68db      	ldr	r3, [r3, #12]
 800b07a:	4a39      	ldr	r2, [pc, #228]	; (800b160 <HAL_DAC_Start_DMA+0x180>)
 800b07c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	681a      	ldr	r2, [r3, #0]
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b08c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800b08e:	6a3b      	ldr	r3, [r7, #32]
 800b090:	2b04      	cmp	r3, #4
 800b092:	d009      	beq.n	800b0a8 <HAL_DAC_Start_DMA+0xc8>
 800b094:	2b08      	cmp	r3, #8
 800b096:	d00c      	beq.n	800b0b2 <HAL_DAC_Start_DMA+0xd2>
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d000      	beq.n	800b09e <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800b09c:	e00e      	b.n	800b0bc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	3314      	adds	r3, #20
 800b0a4:	613b      	str	r3, [r7, #16]
        break;
 800b0a6:	e009      	b.n	800b0bc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	3318      	adds	r3, #24
 800b0ae:	613b      	str	r3, [r7, #16]
        break;
 800b0b0:	e004      	b.n	800b0bc <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	331c      	adds	r3, #28
 800b0b8:	613b      	str	r3, [r7, #16]
        break;
 800b0ba:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d111      	bne.n	800b0e6 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	681a      	ldr	r2, [r3, #0]
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b0d0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	6898      	ldr	r0, [r3, #8]
 800b0d6:	6879      	ldr	r1, [r7, #4]
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	693a      	ldr	r2, [r7, #16]
 800b0dc:	f000 fbd2 	bl	800b884 <HAL_DMA_Start_IT>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	75fb      	strb	r3, [r7, #23]
 800b0e4:	e010      	b.n	800b108 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	681a      	ldr	r2, [r3, #0]
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800b0f4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	68d8      	ldr	r0, [r3, #12]
 800b0fa:	6879      	ldr	r1, [r7, #4]
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	693a      	ldr	r2, [r7, #16]
 800b100:	f000 fbc0 	bl	800b884 <HAL_DMA_Start_IT>
 800b104:	4603      	mov	r3, r0
 800b106:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	2200      	movs	r2, #0
 800b10c:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800b10e:	7dfb      	ldrb	r3, [r7, #23]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d10f      	bne.n	800b134 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	6819      	ldr	r1, [r3, #0]
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	f003 0310 	and.w	r3, r3, #16
 800b120:	2201      	movs	r2, #1
 800b122:	409a      	lsls	r2, r3
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	430a      	orrs	r2, r1
 800b12a:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 800b12c:	2001      	movs	r0, #1
 800b12e:	f7fd fd89 	bl	8008c44 <HAL_Delay>
 800b132:	e005      	b.n	800b140 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	691b      	ldr	r3, [r3, #16]
 800b138:	f043 0204 	orr.w	r2, r3, #4
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800b140:	7dfb      	ldrb	r3, [r7, #23]
}
 800b142:	4618      	mov	r0, r3
 800b144:	3718      	adds	r7, #24
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}
 800b14a:	bf00      	nop
 800b14c:	0800b621 	.word	0x0800b621
 800b150:	0800b643 	.word	0x0800b643
 800b154:	0800b65f 	.word	0x0800b65f
 800b158:	0800b6c9 	.word	0x0800b6c9
 800b15c:	0800b6eb 	.word	0x0800b6eb
 800b160:	0800b707 	.word	0x0800b707

0800b164 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b084      	sub	sp, #16
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	6819      	ldr	r1, [r3, #0]
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	f003 0310 	and.w	r3, r3, #16
 800b17a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b17e:	fa02 f303 	lsl.w	r3, r2, r3
 800b182:	43da      	mvns	r2, r3
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	400a      	ands	r2, r1
 800b18a:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	6819      	ldr	r1, [r3, #0]
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	f003 0310 	and.w	r3, r3, #16
 800b198:	2201      	movs	r2, #1
 800b19a:	fa02 f303 	lsl.w	r3, r2, r3
 800b19e:	43da      	mvns	r2, r3
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	400a      	ands	r2, r1
 800b1a6:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 800b1a8:	2001      	movs	r0, #1
 800b1aa:	f7fd fd4b 	bl	8008c44 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d10f      	bne.n	800b1d4 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	689b      	ldr	r3, [r3, #8]
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f000 fbde 	bl	800b97a <HAL_DMA_Abort>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	681a      	ldr	r2, [r3, #0]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b1d0:	601a      	str	r2, [r3, #0]
 800b1d2:	e00e      	b.n	800b1f2 <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	68db      	ldr	r3, [r3, #12]
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f000 fbce 	bl	800b97a <HAL_DMA_Abort>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	681a      	ldr	r2, [r3, #0]
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800b1f0:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 800b1f2:	7bfb      	ldrb	r3, [r7, #15]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d003      	beq.n	800b200 <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2204      	movs	r2, #4
 800b1fc:	711a      	strb	r2, [r3, #4]
 800b1fe:	e002      	b.n	800b206 <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2201      	movs	r2, #1
 800b204:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 800b206:	7bfb      	ldrb	r3, [r7, #15]
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3710      	adds	r7, #16
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}

0800b210 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800b210:	b480      	push	{r7}
 800b212:	b087      	sub	sp, #28
 800b214:	af00      	add	r7, sp, #0
 800b216:	60f8      	str	r0, [r7, #12]
 800b218:	60b9      	str	r1, [r7, #8]
 800b21a:	607a      	str	r2, [r7, #4]
 800b21c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800b21e:	2300      	movs	r3, #0
 800b220:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d105      	bne.n	800b240 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800b234:	697a      	ldr	r2, [r7, #20]
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	4413      	add	r3, r2
 800b23a:	3308      	adds	r3, #8
 800b23c:	617b      	str	r3, [r7, #20]
 800b23e:	e004      	b.n	800b24a <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800b240:	697a      	ldr	r2, [r7, #20]
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	4413      	add	r3, r2
 800b246:	3314      	adds	r3, #20
 800b248:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	461a      	mov	r2, r3
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800b252:	2300      	movs	r3, #0
}
 800b254:	4618      	mov	r0, r3
 800b256:	371c      	adds	r7, #28
 800b258:	46bd      	mov	sp, r7
 800b25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25e:	4770      	bx	lr

0800b260 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800b260:	b480      	push	{r7}
 800b262:	b083      	sub	sp, #12
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800b268:	bf00      	nop
 800b26a:	370c      	adds	r7, #12
 800b26c:	46bd      	mov	sp, r7
 800b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b272:	4770      	bx	lr

0800b274 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800b274:	b480      	push	{r7}
 800b276:	b083      	sub	sp, #12
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800b27c:	bf00      	nop
 800b27e:	370c      	adds	r7, #12
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr

0800b288 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800b288:	b480      	push	{r7}
 800b28a:	b083      	sub	sp, #12
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800b290:	bf00      	nop
 800b292:	370c      	adds	r7, #12
 800b294:	46bd      	mov	sp, r7
 800b296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29a:	4770      	bx	lr

0800b29c <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800b29c:	b480      	push	{r7}
 800b29e:	b083      	sub	sp, #12
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
 800b2a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d103      	bne.n	800b2b4 <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2b2:	e002      	b.n	800b2ba <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	370c      	adds	r7, #12
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c4:	4770      	bx	lr
	...

0800b2c8 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b08a      	sub	sp, #40	; 0x28
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	60f8      	str	r0, [r7, #12]
 800b2d0:	60b9      	str	r1, [r7, #8]
 800b2d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	795b      	ldrb	r3, [r3, #5]
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	d101      	bne.n	800b2e4 <HAL_DAC_ConfigChannel+0x1c>
 800b2e0:	2302      	movs	r3, #2
 800b2e2:	e194      	b.n	800b60e <HAL_DAC_ConfigChannel+0x346>
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	2201      	movs	r2, #1
 800b2e8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	2202      	movs	r2, #2
 800b2ee:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	689b      	ldr	r3, [r3, #8]
 800b2f4:	2b04      	cmp	r3, #4
 800b2f6:	d174      	bne.n	800b3e2 <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d137      	bne.n	800b36e <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800b2fe:	f7fd fc95 	bl	8008c2c <HAL_GetTick>
 800b302:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800b304:	e011      	b.n	800b32a <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800b306:	f7fd fc91 	bl	8008c2c <HAL_GetTick>
 800b30a:	4602      	mov	r2, r0
 800b30c:	69fb      	ldr	r3, [r7, #28]
 800b30e:	1ad3      	subs	r3, r2, r3
 800b310:	2b01      	cmp	r3, #1
 800b312:	d90a      	bls.n	800b32a <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	691b      	ldr	r3, [r3, #16]
 800b318:	f043 0208 	orr.w	r2, r3, #8
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	2203      	movs	r2, #3
 800b324:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800b326:	2303      	movs	r3, #3
 800b328:	e171      	b.n	800b60e <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b330:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b334:	2b00      	cmp	r3, #0
 800b336:	d1e6      	bne.n	800b306 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800b338:	2001      	movs	r0, #1
 800b33a:	f7fd fc83 	bl	8008c44 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	68ba      	ldr	r2, [r7, #8]
 800b344:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b346:	641a      	str	r2, [r3, #64]	; 0x40
 800b348:	e01e      	b.n	800b388 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800b34a:	f7fd fc6f 	bl	8008c2c <HAL_GetTick>
 800b34e:	4602      	mov	r2, r0
 800b350:	69fb      	ldr	r3, [r7, #28]
 800b352:	1ad3      	subs	r3, r2, r3
 800b354:	2b01      	cmp	r3, #1
 800b356:	d90a      	bls.n	800b36e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	691b      	ldr	r3, [r3, #16]
 800b35c:	f043 0208 	orr.w	r2, r3, #8
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	2203      	movs	r2, #3
 800b368:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800b36a:	2303      	movs	r3, #3
 800b36c:	e14f      	b.n	800b60e <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b374:	2b00      	cmp	r3, #0
 800b376:	dbe8      	blt.n	800b34a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800b378:	2001      	movs	r0, #1
 800b37a:	f7fd fc63 	bl	8008c44 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	68ba      	ldr	r2, [r7, #8]
 800b384:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b386:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f003 0310 	and.w	r3, r3, #16
 800b394:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800b398:	fa01 f303 	lsl.w	r3, r1, r3
 800b39c:	43db      	mvns	r3, r3
 800b39e:	ea02 0103 	and.w	r1, r2, r3
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f003 0310 	and.w	r3, r3, #16
 800b3ac:	409a      	lsls	r2, r3
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	430a      	orrs	r2, r1
 800b3b4:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f003 0310 	and.w	r3, r3, #16
 800b3c2:	21ff      	movs	r1, #255	; 0xff
 800b3c4:	fa01 f303 	lsl.w	r3, r1, r3
 800b3c8:	43db      	mvns	r3, r3
 800b3ca:	ea02 0103 	and.w	r1, r2, r3
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f003 0310 	and.w	r3, r3, #16
 800b3d8:	409a      	lsls	r2, r3
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	430a      	orrs	r2, r1
 800b3e0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	69db      	ldr	r3, [r3, #28]
 800b3e6:	2b01      	cmp	r3, #1
 800b3e8:	d11d      	bne.n	800b426 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3f0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f003 0310 	and.w	r3, r3, #16
 800b3f8:	221f      	movs	r2, #31
 800b3fa:	fa02 f303 	lsl.w	r3, r2, r3
 800b3fe:	43db      	mvns	r3, r3
 800b400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b402:	4013      	ands	r3, r2
 800b404:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	6a1b      	ldr	r3, [r3, #32]
 800b40a:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f003 0310 	and.w	r3, r3, #16
 800b412:	69ba      	ldr	r2, [r7, #24]
 800b414:	fa02 f303 	lsl.w	r3, r2, r3
 800b418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b41a:	4313      	orrs	r3, r2
 800b41c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b424:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b42c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f003 0310 	and.w	r3, r3, #16
 800b434:	2207      	movs	r2, #7
 800b436:	fa02 f303 	lsl.w	r3, r2, r3
 800b43a:	43db      	mvns	r3, r3
 800b43c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b43e:	4013      	ands	r3, r2
 800b440:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	699b      	ldr	r3, [r3, #24]
 800b446:	f003 0301 	and.w	r3, r3, #1
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d002      	beq.n	800b454 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 800b44e:	2300      	movs	r3, #0
 800b450:	623b      	str	r3, [r7, #32]
 800b452:	e011      	b.n	800b478 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	699b      	ldr	r3, [r3, #24]
 800b458:	f003 0302 	and.w	r3, r3, #2
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d002      	beq.n	800b466 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800b460:	2301      	movs	r3, #1
 800b462:	623b      	str	r3, [r7, #32]
 800b464:	e008      	b.n	800b478 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	695b      	ldr	r3, [r3, #20]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d102      	bne.n	800b474 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800b46e:	2301      	movs	r3, #1
 800b470:	623b      	str	r3, [r7, #32]
 800b472:	e001      	b.n	800b478 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800b474:	2300      	movs	r3, #0
 800b476:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	689a      	ldr	r2, [r3, #8]
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	695b      	ldr	r3, [r3, #20]
 800b480:	4313      	orrs	r3, r2
 800b482:	6a3a      	ldr	r2, [r7, #32]
 800b484:	4313      	orrs	r3, r2
 800b486:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f003 0310 	and.w	r3, r3, #16
 800b48e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b492:	fa02 f303 	lsl.w	r3, r2, r3
 800b496:	43db      	mvns	r3, r3
 800b498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b49a:	4013      	ands	r3, r2
 800b49c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	791b      	ldrb	r3, [r3, #4]
 800b4a2:	2b01      	cmp	r3, #1
 800b4a4:	d102      	bne.n	800b4ac <HAL_DAC_ConfigChannel+0x1e4>
 800b4a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4aa:	e000      	b.n	800b4ae <HAL_DAC_ConfigChannel+0x1e6>
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	69ba      	ldr	r2, [r7, #24]
 800b4b0:	4313      	orrs	r3, r2
 800b4b2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f003 0310 	and.w	r3, r3, #16
 800b4ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b4be:	fa02 f303 	lsl.w	r3, r2, r3
 800b4c2:	43db      	mvns	r3, r3
 800b4c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4c6:	4013      	ands	r3, r2
 800b4c8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	795b      	ldrb	r3, [r3, #5]
 800b4ce:	2b01      	cmp	r3, #1
 800b4d0:	d102      	bne.n	800b4d8 <HAL_DAC_ConfigChannel+0x210>
 800b4d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b4d6:	e000      	b.n	800b4da <HAL_DAC_ConfigChannel+0x212>
 800b4d8:	2300      	movs	r3, #0
 800b4da:	69ba      	ldr	r2, [r7, #24]
 800b4dc:	4313      	orrs	r3, r2
 800b4de:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800b4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800b4e6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	2b02      	cmp	r3, #2
 800b4ee:	d114      	bne.n	800b51a <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800b4f0:	f001 fbc2 	bl	800cc78 <HAL_RCC_GetHCLKFreq>
 800b4f4:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	4a47      	ldr	r2, [pc, #284]	; (800b618 <HAL_DAC_ConfigChannel+0x350>)
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d904      	bls.n	800b508 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800b4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b500:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b504:	627b      	str	r3, [r7, #36]	; 0x24
 800b506:	e00d      	b.n	800b524 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	4a44      	ldr	r2, [pc, #272]	; (800b61c <HAL_DAC_ConfigChannel+0x354>)
 800b50c:	4293      	cmp	r3, r2
 800b50e:	d909      	bls.n	800b524 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800b510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b512:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b516:	627b      	str	r3, [r7, #36]	; 0x24
 800b518:	e004      	b.n	800b524 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b520:	4313      	orrs	r3, r2
 800b522:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f003 0310 	and.w	r3, r3, #16
 800b52a:	69ba      	ldr	r2, [r7, #24]
 800b52c:	fa02 f303 	lsl.w	r3, r2, r3
 800b530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b532:	4313      	orrs	r3, r2
 800b534:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b53c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	6819      	ldr	r1, [r3, #0]
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f003 0310 	and.w	r3, r3, #16
 800b54a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b54e:	fa02 f303 	lsl.w	r3, r2, r3
 800b552:	43da      	mvns	r2, r3
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	400a      	ands	r2, r1
 800b55a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f003 0310 	and.w	r3, r3, #16
 800b56a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800b56e:	fa02 f303 	lsl.w	r3, r2, r3
 800b572:	43db      	mvns	r3, r3
 800b574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b576:	4013      	ands	r3, r2
 800b578:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	68db      	ldr	r3, [r3, #12]
 800b57e:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f003 0310 	and.w	r3, r3, #16
 800b586:	69ba      	ldr	r2, [r7, #24]
 800b588:	fa02 f303 	lsl.w	r3, r2, r3
 800b58c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b58e:	4313      	orrs	r3, r2
 800b590:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b598:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	6819      	ldr	r1, [r3, #0]
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f003 0310 	and.w	r3, r3, #16
 800b5a6:	22c0      	movs	r2, #192	; 0xc0
 800b5a8:	fa02 f303 	lsl.w	r3, r2, r3
 800b5ac:	43da      	mvns	r2, r3
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	400a      	ands	r2, r1
 800b5b4:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800b5b6:	68bb      	ldr	r3, [r7, #8]
 800b5b8:	68db      	ldr	r3, [r3, #12]
 800b5ba:	089b      	lsrs	r3, r3, #2
 800b5bc:	f003 030f 	and.w	r3, r3, #15
 800b5c0:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	691b      	ldr	r3, [r3, #16]
 800b5c6:	089b      	lsrs	r3, r3, #2
 800b5c8:	021b      	lsls	r3, r3, #8
 800b5ca:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b5ce:	69ba      	ldr	r2, [r7, #24]
 800b5d0:	4313      	orrs	r3, r2
 800b5d2:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f003 0310 	and.w	r3, r3, #16
 800b5e0:	f640 710f 	movw	r1, #3855	; 0xf0f
 800b5e4:	fa01 f303 	lsl.w	r3, r1, r3
 800b5e8:	43db      	mvns	r3, r3
 800b5ea:	ea02 0103 	and.w	r1, r2, r3
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f003 0310 	and.w	r3, r3, #16
 800b5f4:	69ba      	ldr	r2, [r7, #24]
 800b5f6:	409a      	lsls	r2, r3
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	430a      	orrs	r2, r1
 800b5fe:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	2201      	movs	r2, #1
 800b604:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	2200      	movs	r2, #0
 800b60a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800b60c:	2300      	movs	r3, #0
}
 800b60e:	4618      	mov	r0, r3
 800b610:	3728      	adds	r7, #40	; 0x28
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}
 800b616:	bf00      	nop
 800b618:	09896800 	.word	0x09896800
 800b61c:	04c4b400 	.word	0x04c4b400

0800b620 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b084      	sub	sp, #16
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b62c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800b62e:	68f8      	ldr	r0, [r7, #12]
 800b630:	f7ff fe16 	bl	800b260 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	2201      	movs	r2, #1
 800b638:	711a      	strb	r2, [r3, #4]
}
 800b63a:	bf00      	nop
 800b63c:	3710      	adds	r7, #16
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}

0800b642 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800b642:	b580      	push	{r7, lr}
 800b644:	b084      	sub	sp, #16
 800b646:	af00      	add	r7, sp, #0
 800b648:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b64e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800b650:	68f8      	ldr	r0, [r7, #12]
 800b652:	f7ff fe0f 	bl	800b274 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800b656:	bf00      	nop
 800b658:	3710      	adds	r7, #16
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}

0800b65e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800b65e:	b580      	push	{r7, lr}
 800b660:	b084      	sub	sp, #16
 800b662:	af00      	add	r7, sp, #0
 800b664:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b66a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	691b      	ldr	r3, [r3, #16]
 800b670:	f043 0204 	orr.w	r2, r3, #4
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800b678:	68f8      	ldr	r0, [r7, #12]
 800b67a:	f7ff fe05 	bl	800b288 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	2201      	movs	r2, #1
 800b682:	711a      	strb	r2, [r3, #4]
}
 800b684:	bf00      	nop
 800b686:	3710      	adds	r7, #16
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}

0800b68c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800b68c:	b480      	push	{r7}
 800b68e:	b083      	sub	sp, #12
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800b694:	bf00      	nop
 800b696:	370c      	adds	r7, #12
 800b698:	46bd      	mov	sp, r7
 800b69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69e:	4770      	bx	lr

0800b6a0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800b6a0:	b480      	push	{r7}
 800b6a2:	b083      	sub	sp, #12
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800b6a8:	bf00      	nop
 800b6aa:	370c      	adds	r7, #12
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b2:	4770      	bx	lr

0800b6b4 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b083      	sub	sp, #12
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800b6bc:	bf00      	nop
 800b6be:	370c      	adds	r7, #12
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr

0800b6c8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b084      	sub	sp, #16
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6d4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800b6d6:	68f8      	ldr	r0, [r7, #12]
 800b6d8:	f7ff ffd8 	bl	800b68c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	2201      	movs	r2, #1
 800b6e0:	711a      	strb	r2, [r3, #4]
}
 800b6e2:	bf00      	nop
 800b6e4:	3710      	adds	r7, #16
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}

0800b6ea <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800b6ea:	b580      	push	{r7, lr}
 800b6ec:	b084      	sub	sp, #16
 800b6ee:	af00      	add	r7, sp, #0
 800b6f0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6f6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800b6f8:	68f8      	ldr	r0, [r7, #12]
 800b6fa:	f7ff ffd1 	bl	800b6a0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800b6fe:	bf00      	nop
 800b700:	3710      	adds	r7, #16
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}

0800b706 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800b706:	b580      	push	{r7, lr}
 800b708:	b084      	sub	sp, #16
 800b70a:	af00      	add	r7, sp, #0
 800b70c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b712:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	691b      	ldr	r3, [r3, #16]
 800b718:	f043 0204 	orr.w	r2, r3, #4
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800b720:	68f8      	ldr	r0, [r7, #12]
 800b722:	f7ff ffc7 	bl	800b6b4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	2201      	movs	r2, #1
 800b72a:	711a      	strb	r2, [r3, #4]
}
 800b72c:	bf00      	nop
 800b72e:	3710      	adds	r7, #16
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}

0800b734 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b084      	sub	sp, #16
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d101      	bne.n	800b746 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800b742:	2301      	movs	r3, #1
 800b744:	e08d      	b.n	800b862 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	461a      	mov	r2, r3
 800b74c:	4b47      	ldr	r3, [pc, #284]	; (800b86c <HAL_DMA_Init+0x138>)
 800b74e:	429a      	cmp	r2, r3
 800b750:	d80f      	bhi.n	800b772 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	461a      	mov	r2, r3
 800b758:	4b45      	ldr	r3, [pc, #276]	; (800b870 <HAL_DMA_Init+0x13c>)
 800b75a:	4413      	add	r3, r2
 800b75c:	4a45      	ldr	r2, [pc, #276]	; (800b874 <HAL_DMA_Init+0x140>)
 800b75e:	fba2 2303 	umull	r2, r3, r2, r3
 800b762:	091b      	lsrs	r3, r3, #4
 800b764:	009a      	lsls	r2, r3, #2
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	4a42      	ldr	r2, [pc, #264]	; (800b878 <HAL_DMA_Init+0x144>)
 800b76e:	641a      	str	r2, [r3, #64]	; 0x40
 800b770:	e00e      	b.n	800b790 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	461a      	mov	r2, r3
 800b778:	4b40      	ldr	r3, [pc, #256]	; (800b87c <HAL_DMA_Init+0x148>)
 800b77a:	4413      	add	r3, r2
 800b77c:	4a3d      	ldr	r2, [pc, #244]	; (800b874 <HAL_DMA_Init+0x140>)
 800b77e:	fba2 2303 	umull	r2, r3, r2, r3
 800b782:	091b      	lsrs	r3, r3, #4
 800b784:	009a      	lsls	r2, r3, #2
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	4a3c      	ldr	r2, [pc, #240]	; (800b880 <HAL_DMA_Init+0x14c>)
 800b78e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2202      	movs	r2, #2
 800b794:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800b7a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800b7b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	691b      	ldr	r3, [r3, #16]
 800b7ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b7c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	699b      	ldr	r3, [r3, #24]
 800b7c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b7cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6a1b      	ldr	r3, [r3, #32]
 800b7d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800b7d4:	68fa      	ldr	r2, [r7, #12]
 800b7d6:	4313      	orrs	r3, r2
 800b7d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	68fa      	ldr	r2, [r7, #12]
 800b7e0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f000 fa10 	bl	800bc08 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	689b      	ldr	r3, [r3, #8]
 800b7ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7f0:	d102      	bne.n	800b7f8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	685a      	ldr	r2, [r3, #4]
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b800:	b2d2      	uxtb	r2, r2
 800b802:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b808:	687a      	ldr	r2, [r7, #4]
 800b80a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b80c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	685b      	ldr	r3, [r3, #4]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d010      	beq.n	800b838 <HAL_DMA_Init+0x104>
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	685b      	ldr	r3, [r3, #4]
 800b81a:	2b04      	cmp	r3, #4
 800b81c:	d80c      	bhi.n	800b838 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f000 fa30 	bl	800bc84 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b828:	2200      	movs	r2, #0
 800b82a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b830:	687a      	ldr	r2, [r7, #4]
 800b832:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b834:	605a      	str	r2, [r3, #4]
 800b836:	e008      	b.n	800b84a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2200      	movs	r2, #0
 800b83c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2200      	movs	r2, #0
 800b842:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2200      	movs	r2, #0
 800b848:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2200      	movs	r2, #0
 800b84e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2201      	movs	r2, #1
 800b854:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2200      	movs	r2, #0
 800b85c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800b860:	2300      	movs	r3, #0
}
 800b862:	4618      	mov	r0, r3
 800b864:	3710      	adds	r7, #16
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}
 800b86a:	bf00      	nop
 800b86c:	40020407 	.word	0x40020407
 800b870:	bffdfff8 	.word	0xbffdfff8
 800b874:	cccccccd 	.word	0xcccccccd
 800b878:	40020000 	.word	0x40020000
 800b87c:	bffdfbf8 	.word	0xbffdfbf8
 800b880:	40020400 	.word	0x40020400

0800b884 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b086      	sub	sp, #24
 800b888:	af00      	add	r7, sp, #0
 800b88a:	60f8      	str	r0, [r7, #12]
 800b88c:	60b9      	str	r1, [r7, #8]
 800b88e:	607a      	str	r2, [r7, #4]
 800b890:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b892:	2300      	movs	r3, #0
 800b894:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b89c:	2b01      	cmp	r3, #1
 800b89e:	d101      	bne.n	800b8a4 <HAL_DMA_Start_IT+0x20>
 800b8a0:	2302      	movs	r3, #2
 800b8a2:	e066      	b.n	800b972 <HAL_DMA_Start_IT+0xee>
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	2201      	movs	r2, #1
 800b8a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b8b2:	b2db      	uxtb	r3, r3
 800b8b4:	2b01      	cmp	r3, #1
 800b8b6:	d155      	bne.n	800b964 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	2202      	movs	r2, #2
 800b8bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	681a      	ldr	r2, [r3, #0]
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f022 0201 	bic.w	r2, r2, #1
 800b8d4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	687a      	ldr	r2, [r7, #4]
 800b8da:	68b9      	ldr	r1, [r7, #8]
 800b8dc:	68f8      	ldr	r0, [r7, #12]
 800b8de:	f000 f954 	bl	800bb8a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d008      	beq.n	800b8fc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	681a      	ldr	r2, [r3, #0]
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f042 020e 	orr.w	r2, r2, #14
 800b8f8:	601a      	str	r2, [r3, #0]
 800b8fa:	e00f      	b.n	800b91c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	681a      	ldr	r2, [r3, #0]
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	f022 0204 	bic.w	r2, r2, #4
 800b90a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	681a      	ldr	r2, [r3, #0]
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	f042 020a 	orr.w	r2, r2, #10
 800b91a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b926:	2b00      	cmp	r3, #0
 800b928:	d007      	beq.n	800b93a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b92e:	681a      	ldr	r2, [r3, #0]
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b934:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b938:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d007      	beq.n	800b952 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b946:	681a      	ldr	r2, [r3, #0]
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b94c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b950:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	681a      	ldr	r2, [r3, #0]
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f042 0201 	orr.w	r2, r2, #1
 800b960:	601a      	str	r2, [r3, #0]
 800b962:	e005      	b.n	800b970 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	2200      	movs	r2, #0
 800b968:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800b96c:	2302      	movs	r3, #2
 800b96e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800b970:	7dfb      	ldrb	r3, [r7, #23]
}
 800b972:	4618      	mov	r0, r3
 800b974:	3718      	adds	r7, #24
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}

0800b97a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800b97a:	b480      	push	{r7}
 800b97c:	b085      	sub	sp, #20
 800b97e:	af00      	add	r7, sp, #0
 800b980:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b982:	2300      	movs	r3, #0
 800b984:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b98c:	b2db      	uxtb	r3, r3
 800b98e:	2b02      	cmp	r3, #2
 800b990:	d005      	beq.n	800b99e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2204      	movs	r2, #4
 800b996:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800b998:	2301      	movs	r3, #1
 800b99a:	73fb      	strb	r3, [r7, #15]
 800b99c:	e037      	b.n	800ba0e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	681a      	ldr	r2, [r3, #0]
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	f022 020e 	bic.w	r2, r2, #14
 800b9ac:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9b2:	681a      	ldr	r2, [r3, #0]
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b9bc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	681a      	ldr	r2, [r3, #0]
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f022 0201 	bic.w	r2, r2, #1
 800b9cc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9d2:	f003 021f 	and.w	r2, r3, #31
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9da:	2101      	movs	r1, #1
 800b9dc:	fa01 f202 	lsl.w	r2, r1, r2
 800b9e0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9e6:	687a      	ldr	r2, [r7, #4]
 800b9e8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b9ea:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d00c      	beq.n	800ba0e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9f8:	681a      	ldr	r2, [r3, #0]
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ba02:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba08:	687a      	ldr	r2, [r7, #4]
 800ba0a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800ba0c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2201      	movs	r2, #1
 800ba12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2200      	movs	r2, #0
 800ba1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800ba1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	3714      	adds	r7, #20
 800ba24:	46bd      	mov	sp, r7
 800ba26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2a:	4770      	bx	lr

0800ba2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b084      	sub	sp, #16
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba48:	f003 031f 	and.w	r3, r3, #31
 800ba4c:	2204      	movs	r2, #4
 800ba4e:	409a      	lsls	r2, r3
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	4013      	ands	r3, r2
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d026      	beq.n	800baa6 <HAL_DMA_IRQHandler+0x7a>
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	f003 0304 	and.w	r3, r3, #4
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d021      	beq.n	800baa6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f003 0320 	and.w	r3, r3, #32
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d107      	bne.n	800ba80 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	681a      	ldr	r2, [r3, #0]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	f022 0204 	bic.w	r2, r2, #4
 800ba7e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba84:	f003 021f 	and.w	r2, r3, #31
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba8c:	2104      	movs	r1, #4
 800ba8e:	fa01 f202 	lsl.w	r2, r1, r2
 800ba92:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d071      	beq.n	800bb80 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800baa4:	e06c      	b.n	800bb80 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baaa:	f003 031f 	and.w	r3, r3, #31
 800baae:	2202      	movs	r2, #2
 800bab0:	409a      	lsls	r2, r3
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	4013      	ands	r3, r2
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d02e      	beq.n	800bb18 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	f003 0302 	and.w	r3, r3, #2
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d029      	beq.n	800bb18 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f003 0320 	and.w	r3, r3, #32
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d10b      	bne.n	800baea <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	681a      	ldr	r2, [r3, #0]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f022 020a 	bic.w	r2, r2, #10
 800bae0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2201      	movs	r2, #1
 800bae6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baee:	f003 021f 	and.w	r2, r3, #31
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baf6:	2102      	movs	r1, #2
 800baf8:	fa01 f202 	lsl.w	r2, r1, r2
 800bafc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2200      	movs	r2, #0
 800bb02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d038      	beq.n	800bb80 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800bb16:	e033      	b.n	800bb80 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb1c:	f003 031f 	and.w	r3, r3, #31
 800bb20:	2208      	movs	r2, #8
 800bb22:	409a      	lsls	r2, r3
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	4013      	ands	r3, r2
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d02a      	beq.n	800bb82 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	f003 0308 	and.w	r3, r3, #8
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d025      	beq.n	800bb82 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	681a      	ldr	r2, [r3, #0]
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f022 020e 	bic.w	r2, r2, #14
 800bb44:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb4a:	f003 021f 	and.w	r2, r3, #31
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb52:	2101      	movs	r1, #1
 800bb54:	fa01 f202 	lsl.w	r2, r1, r2
 800bb58:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2201      	movs	r2, #1
 800bb5e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2201      	movs	r2, #1
 800bb64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d004      	beq.n	800bb82 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800bb80:	bf00      	nop
 800bb82:	bf00      	nop
}
 800bb84:	3710      	adds	r7, #16
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}

0800bb8a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bb8a:	b480      	push	{r7}
 800bb8c:	b085      	sub	sp, #20
 800bb8e:	af00      	add	r7, sp, #0
 800bb90:	60f8      	str	r0, [r7, #12]
 800bb92:	60b9      	str	r1, [r7, #8]
 800bb94:	607a      	str	r2, [r7, #4]
 800bb96:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb9c:	68fa      	ldr	r2, [r7, #12]
 800bb9e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800bba0:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d004      	beq.n	800bbb4 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbae:	68fa      	ldr	r2, [r7, #12]
 800bbb0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800bbb2:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbb8:	f003 021f 	and.w	r2, r3, #31
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbc0:	2101      	movs	r1, #1
 800bbc2:	fa01 f202 	lsl.w	r2, r1, r2
 800bbc6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	683a      	ldr	r2, [r7, #0]
 800bbce:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	689b      	ldr	r3, [r3, #8]
 800bbd4:	2b10      	cmp	r3, #16
 800bbd6:	d108      	bne.n	800bbea <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	687a      	ldr	r2, [r7, #4]
 800bbde:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	68ba      	ldr	r2, [r7, #8]
 800bbe6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800bbe8:	e007      	b.n	800bbfa <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	68ba      	ldr	r2, [r7, #8]
 800bbf0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	687a      	ldr	r2, [r7, #4]
 800bbf8:	60da      	str	r2, [r3, #12]
}
 800bbfa:	bf00      	nop
 800bbfc:	3714      	adds	r7, #20
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc04:	4770      	bx	lr
	...

0800bc08 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800bc08:	b480      	push	{r7}
 800bc0a:	b087      	sub	sp, #28
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	461a      	mov	r2, r3
 800bc16:	4b16      	ldr	r3, [pc, #88]	; (800bc70 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	d802      	bhi.n	800bc22 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800bc1c:	4b15      	ldr	r3, [pc, #84]	; (800bc74 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800bc1e:	617b      	str	r3, [r7, #20]
 800bc20:	e001      	b.n	800bc26 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800bc22:	4b15      	ldr	r3, [pc, #84]	; (800bc78 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800bc24:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	b2db      	uxtb	r3, r3
 800bc30:	3b08      	subs	r3, #8
 800bc32:	4a12      	ldr	r2, [pc, #72]	; (800bc7c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800bc34:	fba2 2303 	umull	r2, r3, r2, r3
 800bc38:	091b      	lsrs	r3, r3, #4
 800bc3a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc40:	089b      	lsrs	r3, r3, #2
 800bc42:	009a      	lsls	r2, r3, #2
 800bc44:	693b      	ldr	r3, [r7, #16]
 800bc46:	4413      	add	r3, r2
 800bc48:	461a      	mov	r2, r3
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	4a0b      	ldr	r2, [pc, #44]	; (800bc80 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800bc52:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	f003 031f 	and.w	r3, r3, #31
 800bc5a:	2201      	movs	r2, #1
 800bc5c:	409a      	lsls	r2, r3
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	651a      	str	r2, [r3, #80]	; 0x50
}
 800bc62:	bf00      	nop
 800bc64:	371c      	adds	r7, #28
 800bc66:	46bd      	mov	sp, r7
 800bc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6c:	4770      	bx	lr
 800bc6e:	bf00      	nop
 800bc70:	40020407 	.word	0x40020407
 800bc74:	40020800 	.word	0x40020800
 800bc78:	40020820 	.word	0x40020820
 800bc7c:	cccccccd 	.word	0xcccccccd
 800bc80:	40020880 	.word	0x40020880

0800bc84 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b085      	sub	sp, #20
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	685b      	ldr	r3, [r3, #4]
 800bc90:	b2db      	uxtb	r3, r3
 800bc92:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800bc94:	68fa      	ldr	r2, [r7, #12]
 800bc96:	4b0b      	ldr	r3, [pc, #44]	; (800bcc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800bc98:	4413      	add	r3, r2
 800bc9a:	009b      	lsls	r3, r3, #2
 800bc9c:	461a      	mov	r2, r3
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	4a08      	ldr	r2, [pc, #32]	; (800bcc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800bca6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	3b01      	subs	r3, #1
 800bcac:	f003 031f 	and.w	r3, r3, #31
 800bcb0:	2201      	movs	r2, #1
 800bcb2:	409a      	lsls	r2, r3
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800bcb8:	bf00      	nop
 800bcba:	3714      	adds	r7, #20
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc2:	4770      	bx	lr
 800bcc4:	1000823f 	.word	0x1000823f
 800bcc8:	40020940 	.word	0x40020940

0800bccc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bccc:	b480      	push	{r7}
 800bcce:	b087      	sub	sp, #28
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
 800bcd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800bcda:	e15a      	b.n	800bf92 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	681a      	ldr	r2, [r3, #0]
 800bce0:	2101      	movs	r1, #1
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	fa01 f303 	lsl.w	r3, r1, r3
 800bce8:	4013      	ands	r3, r2
 800bcea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	f000 814c 	beq.w	800bf8c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	685b      	ldr	r3, [r3, #4]
 800bcf8:	2b01      	cmp	r3, #1
 800bcfa:	d00b      	beq.n	800bd14 <HAL_GPIO_Init+0x48>
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	685b      	ldr	r3, [r3, #4]
 800bd00:	2b02      	cmp	r3, #2
 800bd02:	d007      	beq.n	800bd14 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bd08:	2b11      	cmp	r3, #17
 800bd0a:	d003      	beq.n	800bd14 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	685b      	ldr	r3, [r3, #4]
 800bd10:	2b12      	cmp	r3, #18
 800bd12:	d130      	bne.n	800bd76 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	689b      	ldr	r3, [r3, #8]
 800bd18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800bd1a:	697b      	ldr	r3, [r7, #20]
 800bd1c:	005b      	lsls	r3, r3, #1
 800bd1e:	2203      	movs	r2, #3
 800bd20:	fa02 f303 	lsl.w	r3, r2, r3
 800bd24:	43db      	mvns	r3, r3
 800bd26:	693a      	ldr	r2, [r7, #16]
 800bd28:	4013      	ands	r3, r2
 800bd2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	68da      	ldr	r2, [r3, #12]
 800bd30:	697b      	ldr	r3, [r7, #20]
 800bd32:	005b      	lsls	r3, r3, #1
 800bd34:	fa02 f303 	lsl.w	r3, r2, r3
 800bd38:	693a      	ldr	r2, [r7, #16]
 800bd3a:	4313      	orrs	r3, r2
 800bd3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	693a      	ldr	r2, [r7, #16]
 800bd42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	685b      	ldr	r3, [r3, #4]
 800bd48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800bd4a:	2201      	movs	r2, #1
 800bd4c:	697b      	ldr	r3, [r7, #20]
 800bd4e:	fa02 f303 	lsl.w	r3, r2, r3
 800bd52:	43db      	mvns	r3, r3
 800bd54:	693a      	ldr	r2, [r7, #16]
 800bd56:	4013      	ands	r3, r2
 800bd58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	685b      	ldr	r3, [r3, #4]
 800bd5e:	091b      	lsrs	r3, r3, #4
 800bd60:	f003 0201 	and.w	r2, r3, #1
 800bd64:	697b      	ldr	r3, [r7, #20]
 800bd66:	fa02 f303 	lsl.w	r3, r2, r3
 800bd6a:	693a      	ldr	r2, [r7, #16]
 800bd6c:	4313      	orrs	r3, r2
 800bd6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	693a      	ldr	r2, [r7, #16]
 800bd74:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	68db      	ldr	r3, [r3, #12]
 800bd7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800bd7c:	697b      	ldr	r3, [r7, #20]
 800bd7e:	005b      	lsls	r3, r3, #1
 800bd80:	2203      	movs	r2, #3
 800bd82:	fa02 f303 	lsl.w	r3, r2, r3
 800bd86:	43db      	mvns	r3, r3
 800bd88:	693a      	ldr	r2, [r7, #16]
 800bd8a:	4013      	ands	r3, r2
 800bd8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	689a      	ldr	r2, [r3, #8]
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	005b      	lsls	r3, r3, #1
 800bd96:	fa02 f303 	lsl.w	r3, r2, r3
 800bd9a:	693a      	ldr	r2, [r7, #16]
 800bd9c:	4313      	orrs	r3, r2
 800bd9e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	693a      	ldr	r2, [r7, #16]
 800bda4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	685b      	ldr	r3, [r3, #4]
 800bdaa:	2b02      	cmp	r3, #2
 800bdac:	d003      	beq.n	800bdb6 <HAL_GPIO_Init+0xea>
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	685b      	ldr	r3, [r3, #4]
 800bdb2:	2b12      	cmp	r3, #18
 800bdb4:	d123      	bne.n	800bdfe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800bdb6:	697b      	ldr	r3, [r7, #20]
 800bdb8:	08da      	lsrs	r2, r3, #3
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	3208      	adds	r2, #8
 800bdbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	f003 0307 	and.w	r3, r3, #7
 800bdca:	009b      	lsls	r3, r3, #2
 800bdcc:	220f      	movs	r2, #15
 800bdce:	fa02 f303 	lsl.w	r3, r2, r3
 800bdd2:	43db      	mvns	r3, r3
 800bdd4:	693a      	ldr	r2, [r7, #16]
 800bdd6:	4013      	ands	r3, r2
 800bdd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	691a      	ldr	r2, [r3, #16]
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	f003 0307 	and.w	r3, r3, #7
 800bde4:	009b      	lsls	r3, r3, #2
 800bde6:	fa02 f303 	lsl.w	r3, r2, r3
 800bdea:	693a      	ldr	r2, [r7, #16]
 800bdec:	4313      	orrs	r3, r2
 800bdee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800bdf0:	697b      	ldr	r3, [r7, #20]
 800bdf2:	08da      	lsrs	r2, r3, #3
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	3208      	adds	r2, #8
 800bdf8:	6939      	ldr	r1, [r7, #16]
 800bdfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800be04:	697b      	ldr	r3, [r7, #20]
 800be06:	005b      	lsls	r3, r3, #1
 800be08:	2203      	movs	r2, #3
 800be0a:	fa02 f303 	lsl.w	r3, r2, r3
 800be0e:	43db      	mvns	r3, r3
 800be10:	693a      	ldr	r2, [r7, #16]
 800be12:	4013      	ands	r3, r2
 800be14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	685b      	ldr	r3, [r3, #4]
 800be1a:	f003 0203 	and.w	r2, r3, #3
 800be1e:	697b      	ldr	r3, [r7, #20]
 800be20:	005b      	lsls	r3, r3, #1
 800be22:	fa02 f303 	lsl.w	r3, r2, r3
 800be26:	693a      	ldr	r2, [r7, #16]
 800be28:	4313      	orrs	r3, r2
 800be2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	693a      	ldr	r2, [r7, #16]
 800be30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	685b      	ldr	r3, [r3, #4]
 800be36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	f000 80a6 	beq.w	800bf8c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800be40:	4b5b      	ldr	r3, [pc, #364]	; (800bfb0 <HAL_GPIO_Init+0x2e4>)
 800be42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be44:	4a5a      	ldr	r2, [pc, #360]	; (800bfb0 <HAL_GPIO_Init+0x2e4>)
 800be46:	f043 0301 	orr.w	r3, r3, #1
 800be4a:	6613      	str	r3, [r2, #96]	; 0x60
 800be4c:	4b58      	ldr	r3, [pc, #352]	; (800bfb0 <HAL_GPIO_Init+0x2e4>)
 800be4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be50:	f003 0301 	and.w	r3, r3, #1
 800be54:	60bb      	str	r3, [r7, #8]
 800be56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800be58:	4a56      	ldr	r2, [pc, #344]	; (800bfb4 <HAL_GPIO_Init+0x2e8>)
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	089b      	lsrs	r3, r3, #2
 800be5e:	3302      	adds	r3, #2
 800be60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800be66:	697b      	ldr	r3, [r7, #20]
 800be68:	f003 0303 	and.w	r3, r3, #3
 800be6c:	009b      	lsls	r3, r3, #2
 800be6e:	220f      	movs	r2, #15
 800be70:	fa02 f303 	lsl.w	r3, r2, r3
 800be74:	43db      	mvns	r3, r3
 800be76:	693a      	ldr	r2, [r7, #16]
 800be78:	4013      	ands	r3, r2
 800be7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800be82:	d01f      	beq.n	800bec4 <HAL_GPIO_Init+0x1f8>
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	4a4c      	ldr	r2, [pc, #304]	; (800bfb8 <HAL_GPIO_Init+0x2ec>)
 800be88:	4293      	cmp	r3, r2
 800be8a:	d019      	beq.n	800bec0 <HAL_GPIO_Init+0x1f4>
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	4a4b      	ldr	r2, [pc, #300]	; (800bfbc <HAL_GPIO_Init+0x2f0>)
 800be90:	4293      	cmp	r3, r2
 800be92:	d013      	beq.n	800bebc <HAL_GPIO_Init+0x1f0>
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	4a4a      	ldr	r2, [pc, #296]	; (800bfc0 <HAL_GPIO_Init+0x2f4>)
 800be98:	4293      	cmp	r3, r2
 800be9a:	d00d      	beq.n	800beb8 <HAL_GPIO_Init+0x1ec>
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	4a49      	ldr	r2, [pc, #292]	; (800bfc4 <HAL_GPIO_Init+0x2f8>)
 800bea0:	4293      	cmp	r3, r2
 800bea2:	d007      	beq.n	800beb4 <HAL_GPIO_Init+0x1e8>
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	4a48      	ldr	r2, [pc, #288]	; (800bfc8 <HAL_GPIO_Init+0x2fc>)
 800bea8:	4293      	cmp	r3, r2
 800beaa:	d101      	bne.n	800beb0 <HAL_GPIO_Init+0x1e4>
 800beac:	2305      	movs	r3, #5
 800beae:	e00a      	b.n	800bec6 <HAL_GPIO_Init+0x1fa>
 800beb0:	2306      	movs	r3, #6
 800beb2:	e008      	b.n	800bec6 <HAL_GPIO_Init+0x1fa>
 800beb4:	2304      	movs	r3, #4
 800beb6:	e006      	b.n	800bec6 <HAL_GPIO_Init+0x1fa>
 800beb8:	2303      	movs	r3, #3
 800beba:	e004      	b.n	800bec6 <HAL_GPIO_Init+0x1fa>
 800bebc:	2302      	movs	r3, #2
 800bebe:	e002      	b.n	800bec6 <HAL_GPIO_Init+0x1fa>
 800bec0:	2301      	movs	r3, #1
 800bec2:	e000      	b.n	800bec6 <HAL_GPIO_Init+0x1fa>
 800bec4:	2300      	movs	r3, #0
 800bec6:	697a      	ldr	r2, [r7, #20]
 800bec8:	f002 0203 	and.w	r2, r2, #3
 800becc:	0092      	lsls	r2, r2, #2
 800bece:	4093      	lsls	r3, r2
 800bed0:	693a      	ldr	r2, [r7, #16]
 800bed2:	4313      	orrs	r3, r2
 800bed4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800bed6:	4937      	ldr	r1, [pc, #220]	; (800bfb4 <HAL_GPIO_Init+0x2e8>)
 800bed8:	697b      	ldr	r3, [r7, #20]
 800beda:	089b      	lsrs	r3, r3, #2
 800bedc:	3302      	adds	r3, #2
 800bede:	693a      	ldr	r2, [r7, #16]
 800bee0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800bee4:	4b39      	ldr	r3, [pc, #228]	; (800bfcc <HAL_GPIO_Init+0x300>)
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	43db      	mvns	r3, r3
 800beee:	693a      	ldr	r2, [r7, #16]
 800bef0:	4013      	ands	r3, r2
 800bef2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	685b      	ldr	r3, [r3, #4]
 800bef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800befc:	2b00      	cmp	r3, #0
 800befe:	d003      	beq.n	800bf08 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800bf00:	693a      	ldr	r2, [r7, #16]
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	4313      	orrs	r3, r2
 800bf06:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800bf08:	4a30      	ldr	r2, [pc, #192]	; (800bfcc <HAL_GPIO_Init+0x300>)
 800bf0a:	693b      	ldr	r3, [r7, #16]
 800bf0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800bf0e:	4b2f      	ldr	r3, [pc, #188]	; (800bfcc <HAL_GPIO_Init+0x300>)
 800bf10:	685b      	ldr	r3, [r3, #4]
 800bf12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	43db      	mvns	r3, r3
 800bf18:	693a      	ldr	r2, [r7, #16]
 800bf1a:	4013      	ands	r3, r2
 800bf1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	685b      	ldr	r3, [r3, #4]
 800bf22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d003      	beq.n	800bf32 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800bf2a:	693a      	ldr	r2, [r7, #16]
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	4313      	orrs	r3, r2
 800bf30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800bf32:	4a26      	ldr	r2, [pc, #152]	; (800bfcc <HAL_GPIO_Init+0x300>)
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800bf38:	4b24      	ldr	r3, [pc, #144]	; (800bfcc <HAL_GPIO_Init+0x300>)
 800bf3a:	689b      	ldr	r3, [r3, #8]
 800bf3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	43db      	mvns	r3, r3
 800bf42:	693a      	ldr	r2, [r7, #16]
 800bf44:	4013      	ands	r3, r2
 800bf46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	685b      	ldr	r3, [r3, #4]
 800bf4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d003      	beq.n	800bf5c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800bf54:	693a      	ldr	r2, [r7, #16]
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	4313      	orrs	r3, r2
 800bf5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800bf5c:	4a1b      	ldr	r2, [pc, #108]	; (800bfcc <HAL_GPIO_Init+0x300>)
 800bf5e:	693b      	ldr	r3, [r7, #16]
 800bf60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800bf62:	4b1a      	ldr	r3, [pc, #104]	; (800bfcc <HAL_GPIO_Init+0x300>)
 800bf64:	68db      	ldr	r3, [r3, #12]
 800bf66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	43db      	mvns	r3, r3
 800bf6c:	693a      	ldr	r2, [r7, #16]
 800bf6e:	4013      	ands	r3, r2
 800bf70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	685b      	ldr	r3, [r3, #4]
 800bf76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d003      	beq.n	800bf86 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800bf7e:	693a      	ldr	r2, [r7, #16]
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	4313      	orrs	r3, r2
 800bf84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800bf86:	4a11      	ldr	r2, [pc, #68]	; (800bfcc <HAL_GPIO_Init+0x300>)
 800bf88:	693b      	ldr	r3, [r7, #16]
 800bf8a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800bf8c:	697b      	ldr	r3, [r7, #20]
 800bf8e:	3301      	adds	r3, #1
 800bf90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	681a      	ldr	r2, [r3, #0]
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	fa22 f303 	lsr.w	r3, r2, r3
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	f47f ae9d 	bne.w	800bcdc <HAL_GPIO_Init+0x10>
  }
}
 800bfa2:	bf00      	nop
 800bfa4:	371c      	adds	r7, #28
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfac:	4770      	bx	lr
 800bfae:	bf00      	nop
 800bfb0:	40021000 	.word	0x40021000
 800bfb4:	40010000 	.word	0x40010000
 800bfb8:	48000400 	.word	0x48000400
 800bfbc:	48000800 	.word	0x48000800
 800bfc0:	48000c00 	.word	0x48000c00
 800bfc4:	48001000 	.word	0x48001000
 800bfc8:	48001400 	.word	0x48001400
 800bfcc:	40010400 	.word	0x40010400

0800bfd0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800bfd0:	b480      	push	{r7}
 800bfd2:	b087      	sub	sp, #28
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
 800bfd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800bfde:	e0bd      	b.n	800c15c <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 800bfe0:	2201      	movs	r2, #1
 800bfe2:	697b      	ldr	r3, [r7, #20]
 800bfe4:	fa02 f303 	lsl.w	r3, r2, r3
 800bfe8:	683a      	ldr	r2, [r7, #0]
 800bfea:	4013      	ands	r3, r2
 800bfec:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800bfee:	693b      	ldr	r3, [r7, #16]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	f000 80b0 	beq.w	800c156 <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800bff6:	4a60      	ldr	r2, [pc, #384]	; (800c178 <HAL_GPIO_DeInit+0x1a8>)
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	089b      	lsrs	r3, r3, #2
 800bffc:	3302      	adds	r3, #2
 800bffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c002:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800c004:	697b      	ldr	r3, [r7, #20]
 800c006:	f003 0303 	and.w	r3, r3, #3
 800c00a:	009b      	lsls	r3, r3, #2
 800c00c:	220f      	movs	r2, #15
 800c00e:	fa02 f303 	lsl.w	r3, r2, r3
 800c012:	68fa      	ldr	r2, [r7, #12]
 800c014:	4013      	ands	r3, r2
 800c016:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800c01e:	d01f      	beq.n	800c060 <HAL_GPIO_DeInit+0x90>
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	4a56      	ldr	r2, [pc, #344]	; (800c17c <HAL_GPIO_DeInit+0x1ac>)
 800c024:	4293      	cmp	r3, r2
 800c026:	d019      	beq.n	800c05c <HAL_GPIO_DeInit+0x8c>
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	4a55      	ldr	r2, [pc, #340]	; (800c180 <HAL_GPIO_DeInit+0x1b0>)
 800c02c:	4293      	cmp	r3, r2
 800c02e:	d013      	beq.n	800c058 <HAL_GPIO_DeInit+0x88>
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	4a54      	ldr	r2, [pc, #336]	; (800c184 <HAL_GPIO_DeInit+0x1b4>)
 800c034:	4293      	cmp	r3, r2
 800c036:	d00d      	beq.n	800c054 <HAL_GPIO_DeInit+0x84>
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	4a53      	ldr	r2, [pc, #332]	; (800c188 <HAL_GPIO_DeInit+0x1b8>)
 800c03c:	4293      	cmp	r3, r2
 800c03e:	d007      	beq.n	800c050 <HAL_GPIO_DeInit+0x80>
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	4a52      	ldr	r2, [pc, #328]	; (800c18c <HAL_GPIO_DeInit+0x1bc>)
 800c044:	4293      	cmp	r3, r2
 800c046:	d101      	bne.n	800c04c <HAL_GPIO_DeInit+0x7c>
 800c048:	2305      	movs	r3, #5
 800c04a:	e00a      	b.n	800c062 <HAL_GPIO_DeInit+0x92>
 800c04c:	2306      	movs	r3, #6
 800c04e:	e008      	b.n	800c062 <HAL_GPIO_DeInit+0x92>
 800c050:	2304      	movs	r3, #4
 800c052:	e006      	b.n	800c062 <HAL_GPIO_DeInit+0x92>
 800c054:	2303      	movs	r3, #3
 800c056:	e004      	b.n	800c062 <HAL_GPIO_DeInit+0x92>
 800c058:	2302      	movs	r3, #2
 800c05a:	e002      	b.n	800c062 <HAL_GPIO_DeInit+0x92>
 800c05c:	2301      	movs	r3, #1
 800c05e:	e000      	b.n	800c062 <HAL_GPIO_DeInit+0x92>
 800c060:	2300      	movs	r3, #0
 800c062:	697a      	ldr	r2, [r7, #20]
 800c064:	f002 0203 	and.w	r2, r2, #3
 800c068:	0092      	lsls	r2, r2, #2
 800c06a:	4093      	lsls	r3, r2
 800c06c:	68fa      	ldr	r2, [r7, #12]
 800c06e:	429a      	cmp	r2, r3
 800c070:	d132      	bne.n	800c0d8 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800c072:	4b47      	ldr	r3, [pc, #284]	; (800c190 <HAL_GPIO_DeInit+0x1c0>)
 800c074:	681a      	ldr	r2, [r3, #0]
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	43db      	mvns	r3, r3
 800c07a:	4945      	ldr	r1, [pc, #276]	; (800c190 <HAL_GPIO_DeInit+0x1c0>)
 800c07c:	4013      	ands	r3, r2
 800c07e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800c080:	4b43      	ldr	r3, [pc, #268]	; (800c190 <HAL_GPIO_DeInit+0x1c0>)
 800c082:	685a      	ldr	r2, [r3, #4]
 800c084:	693b      	ldr	r3, [r7, #16]
 800c086:	43db      	mvns	r3, r3
 800c088:	4941      	ldr	r1, [pc, #260]	; (800c190 <HAL_GPIO_DeInit+0x1c0>)
 800c08a:	4013      	ands	r3, r2
 800c08c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800c08e:	4b40      	ldr	r3, [pc, #256]	; (800c190 <HAL_GPIO_DeInit+0x1c0>)
 800c090:	689a      	ldr	r2, [r3, #8]
 800c092:	693b      	ldr	r3, [r7, #16]
 800c094:	43db      	mvns	r3, r3
 800c096:	493e      	ldr	r1, [pc, #248]	; (800c190 <HAL_GPIO_DeInit+0x1c0>)
 800c098:	4013      	ands	r3, r2
 800c09a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800c09c:	4b3c      	ldr	r3, [pc, #240]	; (800c190 <HAL_GPIO_DeInit+0x1c0>)
 800c09e:	68da      	ldr	r2, [r3, #12]
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	43db      	mvns	r3, r3
 800c0a4:	493a      	ldr	r1, [pc, #232]	; (800c190 <HAL_GPIO_DeInit+0x1c0>)
 800c0a6:	4013      	ands	r3, r2
 800c0a8:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800c0aa:	697b      	ldr	r3, [r7, #20]
 800c0ac:	f003 0303 	and.w	r3, r3, #3
 800c0b0:	009b      	lsls	r3, r3, #2
 800c0b2:	220f      	movs	r2, #15
 800c0b4:	fa02 f303 	lsl.w	r3, r2, r3
 800c0b8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800c0ba:	4a2f      	ldr	r2, [pc, #188]	; (800c178 <HAL_GPIO_DeInit+0x1a8>)
 800c0bc:	697b      	ldr	r3, [r7, #20]
 800c0be:	089b      	lsrs	r3, r3, #2
 800c0c0:	3302      	adds	r3, #2
 800c0c2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	43da      	mvns	r2, r3
 800c0ca:	482b      	ldr	r0, [pc, #172]	; (800c178 <HAL_GPIO_DeInit+0x1a8>)
 800c0cc:	697b      	ldr	r3, [r7, #20]
 800c0ce:	089b      	lsrs	r3, r3, #2
 800c0d0:	400a      	ands	r2, r1
 800c0d2:	3302      	adds	r3, #2
 800c0d4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681a      	ldr	r2, [r3, #0]
 800c0dc:	697b      	ldr	r3, [r7, #20]
 800c0de:	005b      	lsls	r3, r3, #1
 800c0e0:	2103      	movs	r1, #3
 800c0e2:	fa01 f303 	lsl.w	r3, r1, r3
 800c0e6:	431a      	orrs	r2, r3
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 800c0ec:	697b      	ldr	r3, [r7, #20]
 800c0ee:	08da      	lsrs	r2, r3, #3
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	3208      	adds	r2, #8
 800c0f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c0f8:	697b      	ldr	r3, [r7, #20]
 800c0fa:	f003 0307 	and.w	r3, r3, #7
 800c0fe:	009b      	lsls	r3, r3, #2
 800c100:	220f      	movs	r2, #15
 800c102:	fa02 f303 	lsl.w	r3, r2, r3
 800c106:	43db      	mvns	r3, r3
 800c108:	697a      	ldr	r2, [r7, #20]
 800c10a:	08d2      	lsrs	r2, r2, #3
 800c10c:	4019      	ands	r1, r3
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	3208      	adds	r2, #8
 800c112:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	68da      	ldr	r2, [r3, #12]
 800c11a:	697b      	ldr	r3, [r7, #20]
 800c11c:	005b      	lsls	r3, r3, #1
 800c11e:	2103      	movs	r1, #3
 800c120:	fa01 f303 	lsl.w	r3, r1, r3
 800c124:	43db      	mvns	r3, r3
 800c126:	401a      	ands	r2, r3
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	685a      	ldr	r2, [r3, #4]
 800c130:	2101      	movs	r1, #1
 800c132:	697b      	ldr	r3, [r7, #20]
 800c134:	fa01 f303 	lsl.w	r3, r1, r3
 800c138:	43db      	mvns	r3, r3
 800c13a:	401a      	ands	r2, r3
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	689a      	ldr	r2, [r3, #8]
 800c144:	697b      	ldr	r3, [r7, #20]
 800c146:	005b      	lsls	r3, r3, #1
 800c148:	2103      	movs	r1, #3
 800c14a:	fa01 f303 	lsl.w	r3, r1, r3
 800c14e:	43db      	mvns	r3, r3
 800c150:	401a      	ands	r2, r3
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	609a      	str	r2, [r3, #8]
    }

    position++;
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	3301      	adds	r3, #1
 800c15a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 800c15c:	683a      	ldr	r2, [r7, #0]
 800c15e:	697b      	ldr	r3, [r7, #20]
 800c160:	fa22 f303 	lsr.w	r3, r2, r3
 800c164:	2b00      	cmp	r3, #0
 800c166:	f47f af3b 	bne.w	800bfe0 <HAL_GPIO_DeInit+0x10>
  }
}
 800c16a:	bf00      	nop
 800c16c:	371c      	adds	r7, #28
 800c16e:	46bd      	mov	sp, r7
 800c170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c174:	4770      	bx	lr
 800c176:	bf00      	nop
 800c178:	40010000 	.word	0x40010000
 800c17c:	48000400 	.word	0x48000400
 800c180:	48000800 	.word	0x48000800
 800c184:	48000c00 	.word	0x48000c00
 800c188:	48001000 	.word	0x48001000
 800c18c:	48001400 	.word	0x48001400
 800c190:	40010400 	.word	0x40010400

0800c194 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c194:	b480      	push	{r7}
 800c196:	b083      	sub	sp, #12
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
 800c19c:	460b      	mov	r3, r1
 800c19e:	807b      	strh	r3, [r7, #2]
 800c1a0:	4613      	mov	r3, r2
 800c1a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800c1a4:	787b      	ldrb	r3, [r7, #1]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d003      	beq.n	800c1b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800c1aa:	887a      	ldrh	r2, [r7, #2]
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800c1b0:	e002      	b.n	800c1b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800c1b2:	887a      	ldrh	r2, [r7, #2]
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 800c1b8:	bf00      	nop
 800c1ba:	370c      	adds	r7, #12
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c2:	4770      	bx	lr

0800c1c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	b085      	sub	sp, #20
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d141      	bne.n	800c256 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c1d2:	4b4b      	ldr	r3, [pc, #300]	; (800c300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c1da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1de:	d131      	bne.n	800c244 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c1e0:	4b47      	ldr	r3, [pc, #284]	; (800c300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c1e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c1e6:	4a46      	ldr	r2, [pc, #280]	; (800c300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c1e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c1ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c1f0:	4b43      	ldr	r3, [pc, #268]	; (800c300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c1f8:	4a41      	ldr	r2, [pc, #260]	; (800c300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c1fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c1fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c200:	4b40      	ldr	r3, [pc, #256]	; (800c304 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	2232      	movs	r2, #50	; 0x32
 800c206:	fb02 f303 	mul.w	r3, r2, r3
 800c20a:	4a3f      	ldr	r2, [pc, #252]	; (800c308 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c20c:	fba2 2303 	umull	r2, r3, r2, r3
 800c210:	0c9b      	lsrs	r3, r3, #18
 800c212:	3301      	adds	r3, #1
 800c214:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c216:	e002      	b.n	800c21e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	3b01      	subs	r3, #1
 800c21c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c21e:	4b38      	ldr	r3, [pc, #224]	; (800c300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c220:	695b      	ldr	r3, [r3, #20]
 800c222:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c226:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c22a:	d102      	bne.n	800c232 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d1f2      	bne.n	800c218 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c232:	4b33      	ldr	r3, [pc, #204]	; (800c300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c234:	695b      	ldr	r3, [r3, #20]
 800c236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c23a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c23e:	d158      	bne.n	800c2f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c240:	2303      	movs	r3, #3
 800c242:	e057      	b.n	800c2f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c244:	4b2e      	ldr	r3, [pc, #184]	; (800c300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c246:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c24a:	4a2d      	ldr	r2, [pc, #180]	; (800c300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c24c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c250:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800c254:	e04d      	b.n	800c2f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c25c:	d141      	bne.n	800c2e2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c25e:	4b28      	ldr	r3, [pc, #160]	; (800c300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c26a:	d131      	bne.n	800c2d0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c26c:	4b24      	ldr	r3, [pc, #144]	; (800c300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c26e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c272:	4a23      	ldr	r2, [pc, #140]	; (800c300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c278:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c27c:	4b20      	ldr	r3, [pc, #128]	; (800c300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c284:	4a1e      	ldr	r2, [pc, #120]	; (800c300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c286:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c28a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c28c:	4b1d      	ldr	r3, [pc, #116]	; (800c304 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	2232      	movs	r2, #50	; 0x32
 800c292:	fb02 f303 	mul.w	r3, r2, r3
 800c296:	4a1c      	ldr	r2, [pc, #112]	; (800c308 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c298:	fba2 2303 	umull	r2, r3, r2, r3
 800c29c:	0c9b      	lsrs	r3, r3, #18
 800c29e:	3301      	adds	r3, #1
 800c2a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c2a2:	e002      	b.n	800c2aa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	3b01      	subs	r3, #1
 800c2a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c2aa:	4b15      	ldr	r3, [pc, #84]	; (800c300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c2ac:	695b      	ldr	r3, [r3, #20]
 800c2ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c2b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c2b6:	d102      	bne.n	800c2be <HAL_PWREx_ControlVoltageScaling+0xfa>
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d1f2      	bne.n	800c2a4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c2be:	4b10      	ldr	r3, [pc, #64]	; (800c300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c2c0:	695b      	ldr	r3, [r3, #20]
 800c2c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c2c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c2ca:	d112      	bne.n	800c2f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c2cc:	2303      	movs	r3, #3
 800c2ce:	e011      	b.n	800c2f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c2d0:	4b0b      	ldr	r3, [pc, #44]	; (800c300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c2d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c2d6:	4a0a      	ldr	r2, [pc, #40]	; (800c300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c2d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c2dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800c2e0:	e007      	b.n	800c2f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800c2e2:	4b07      	ldr	r3, [pc, #28]	; (800c300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c2ea:	4a05      	ldr	r2, [pc, #20]	; (800c300 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c2ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c2f0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800c2f2:	2300      	movs	r3, #0
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	3714      	adds	r7, #20
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fe:	4770      	bx	lr
 800c300:	40007000 	.word	0x40007000
 800c304:	20000c34 	.word	0x20000c34
 800c308:	431bde83 	.word	0x431bde83

0800c30c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b088      	sub	sp, #32
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d101      	bne.n	800c31e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c31a:	2301      	movs	r3, #1
 800c31c:	e308      	b.n	800c930 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f003 0301 	and.w	r3, r3, #1
 800c326:	2b00      	cmp	r3, #0
 800c328:	d075      	beq.n	800c416 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c32a:	4ba3      	ldr	r3, [pc, #652]	; (800c5b8 <HAL_RCC_OscConfig+0x2ac>)
 800c32c:	689b      	ldr	r3, [r3, #8]
 800c32e:	f003 030c 	and.w	r3, r3, #12
 800c332:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c334:	4ba0      	ldr	r3, [pc, #640]	; (800c5b8 <HAL_RCC_OscConfig+0x2ac>)
 800c336:	68db      	ldr	r3, [r3, #12]
 800c338:	f003 0303 	and.w	r3, r3, #3
 800c33c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800c33e:	69bb      	ldr	r3, [r7, #24]
 800c340:	2b0c      	cmp	r3, #12
 800c342:	d102      	bne.n	800c34a <HAL_RCC_OscConfig+0x3e>
 800c344:	697b      	ldr	r3, [r7, #20]
 800c346:	2b03      	cmp	r3, #3
 800c348:	d002      	beq.n	800c350 <HAL_RCC_OscConfig+0x44>
 800c34a:	69bb      	ldr	r3, [r7, #24]
 800c34c:	2b08      	cmp	r3, #8
 800c34e:	d10b      	bne.n	800c368 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c350:	4b99      	ldr	r3, [pc, #612]	; (800c5b8 <HAL_RCC_OscConfig+0x2ac>)
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d05b      	beq.n	800c414 <HAL_RCC_OscConfig+0x108>
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	685b      	ldr	r3, [r3, #4]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d157      	bne.n	800c414 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c364:	2301      	movs	r3, #1
 800c366:	e2e3      	b.n	800c930 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	685b      	ldr	r3, [r3, #4]
 800c36c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c370:	d106      	bne.n	800c380 <HAL_RCC_OscConfig+0x74>
 800c372:	4b91      	ldr	r3, [pc, #580]	; (800c5b8 <HAL_RCC_OscConfig+0x2ac>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	4a90      	ldr	r2, [pc, #576]	; (800c5b8 <HAL_RCC_OscConfig+0x2ac>)
 800c378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c37c:	6013      	str	r3, [r2, #0]
 800c37e:	e01d      	b.n	800c3bc <HAL_RCC_OscConfig+0xb0>
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	685b      	ldr	r3, [r3, #4]
 800c384:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c388:	d10c      	bne.n	800c3a4 <HAL_RCC_OscConfig+0x98>
 800c38a:	4b8b      	ldr	r3, [pc, #556]	; (800c5b8 <HAL_RCC_OscConfig+0x2ac>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	4a8a      	ldr	r2, [pc, #552]	; (800c5b8 <HAL_RCC_OscConfig+0x2ac>)
 800c390:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c394:	6013      	str	r3, [r2, #0]
 800c396:	4b88      	ldr	r3, [pc, #544]	; (800c5b8 <HAL_RCC_OscConfig+0x2ac>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	4a87      	ldr	r2, [pc, #540]	; (800c5b8 <HAL_RCC_OscConfig+0x2ac>)
 800c39c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c3a0:	6013      	str	r3, [r2, #0]
 800c3a2:	e00b      	b.n	800c3bc <HAL_RCC_OscConfig+0xb0>
 800c3a4:	4b84      	ldr	r3, [pc, #528]	; (800c5b8 <HAL_RCC_OscConfig+0x2ac>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	4a83      	ldr	r2, [pc, #524]	; (800c5b8 <HAL_RCC_OscConfig+0x2ac>)
 800c3aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c3ae:	6013      	str	r3, [r2, #0]
 800c3b0:	4b81      	ldr	r3, [pc, #516]	; (800c5b8 <HAL_RCC_OscConfig+0x2ac>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	4a80      	ldr	r2, [pc, #512]	; (800c5b8 <HAL_RCC_OscConfig+0x2ac>)
 800c3b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c3ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	685b      	ldr	r3, [r3, #4]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d013      	beq.n	800c3ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c3c4:	f7fc fc32 	bl	8008c2c <HAL_GetTick>
 800c3c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c3ca:	e008      	b.n	800c3de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c3cc:	f7fc fc2e 	bl	8008c2c <HAL_GetTick>
 800c3d0:	4602      	mov	r2, r0
 800c3d2:	693b      	ldr	r3, [r7, #16]
 800c3d4:	1ad3      	subs	r3, r2, r3
 800c3d6:	2b64      	cmp	r3, #100	; 0x64
 800c3d8:	d901      	bls.n	800c3de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c3da:	2303      	movs	r3, #3
 800c3dc:	e2a8      	b.n	800c930 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c3de:	4b76      	ldr	r3, [pc, #472]	; (800c5b8 <HAL_RCC_OscConfig+0x2ac>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d0f0      	beq.n	800c3cc <HAL_RCC_OscConfig+0xc0>
 800c3ea:	e014      	b.n	800c416 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c3ec:	f7fc fc1e 	bl	8008c2c <HAL_GetTick>
 800c3f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c3f2:	e008      	b.n	800c406 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c3f4:	f7fc fc1a 	bl	8008c2c <HAL_GetTick>
 800c3f8:	4602      	mov	r2, r0
 800c3fa:	693b      	ldr	r3, [r7, #16]
 800c3fc:	1ad3      	subs	r3, r2, r3
 800c3fe:	2b64      	cmp	r3, #100	; 0x64
 800c400:	d901      	bls.n	800c406 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c402:	2303      	movs	r3, #3
 800c404:	e294      	b.n	800c930 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c406:	4b6c      	ldr	r3, [pc, #432]	; (800c5b8 <HAL_RCC_OscConfig+0x2ac>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d1f0      	bne.n	800c3f4 <HAL_RCC_OscConfig+0xe8>
 800c412:	e000      	b.n	800c416 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c414:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	f003 0302 	and.w	r3, r3, #2
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d075      	beq.n	800c50e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c422:	4b65      	ldr	r3, [pc, #404]	; (800c5b8 <HAL_RCC_OscConfig+0x2ac>)
 800c424:	689b      	ldr	r3, [r3, #8]
 800c426:	f003 030c 	and.w	r3, r3, #12
 800c42a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c42c:	4b62      	ldr	r3, [pc, #392]	; (800c5b8 <HAL_RCC_OscConfig+0x2ac>)
 800c42e:	68db      	ldr	r3, [r3, #12]
 800c430:	f003 0303 	and.w	r3, r3, #3
 800c434:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800c436:	69bb      	ldr	r3, [r7, #24]
 800c438:	2b0c      	cmp	r3, #12
 800c43a:	d102      	bne.n	800c442 <HAL_RCC_OscConfig+0x136>
 800c43c:	697b      	ldr	r3, [r7, #20]
 800c43e:	2b02      	cmp	r3, #2
 800c440:	d002      	beq.n	800c448 <HAL_RCC_OscConfig+0x13c>
 800c442:	69bb      	ldr	r3, [r7, #24]
 800c444:	2b04      	cmp	r3, #4
 800c446:	d11f      	bne.n	800c488 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c448:	4b5b      	ldr	r3, [pc, #364]	; (800c5b8 <HAL_RCC_OscConfig+0x2ac>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c450:	2b00      	cmp	r3, #0
 800c452:	d005      	beq.n	800c460 <HAL_RCC_OscConfig+0x154>
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	68db      	ldr	r3, [r3, #12]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d101      	bne.n	800c460 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800c45c:	2301      	movs	r3, #1
 800c45e:	e267      	b.n	800c930 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c460:	4b55      	ldr	r3, [pc, #340]	; (800c5b8 <HAL_RCC_OscConfig+0x2ac>)
 800c462:	685b      	ldr	r3, [r3, #4]
 800c464:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	691b      	ldr	r3, [r3, #16]
 800c46c:	061b      	lsls	r3, r3, #24
 800c46e:	4952      	ldr	r1, [pc, #328]	; (800c5b8 <HAL_RCC_OscConfig+0x2ac>)
 800c470:	4313      	orrs	r3, r2
 800c472:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800c474:	4b51      	ldr	r3, [pc, #324]	; (800c5bc <HAL_RCC_OscConfig+0x2b0>)
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	4618      	mov	r0, r3
 800c47a:	f7fc fb8b 	bl	8008b94 <HAL_InitTick>
 800c47e:	4603      	mov	r3, r0
 800c480:	2b00      	cmp	r3, #0
 800c482:	d043      	beq.n	800c50c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800c484:	2301      	movs	r3, #1
 800c486:	e253      	b.n	800c930 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	68db      	ldr	r3, [r3, #12]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d023      	beq.n	800c4d8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c490:	4b49      	ldr	r3, [pc, #292]	; (800c5b8 <HAL_RCC_OscConfig+0x2ac>)
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	4a48      	ldr	r2, [pc, #288]	; (800c5b8 <HAL_RCC_OscConfig+0x2ac>)
 800c496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c49a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c49c:	f7fc fbc6 	bl	8008c2c <HAL_GetTick>
 800c4a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c4a2:	e008      	b.n	800c4b6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c4a4:	f7fc fbc2 	bl	8008c2c <HAL_GetTick>
 800c4a8:	4602      	mov	r2, r0
 800c4aa:	693b      	ldr	r3, [r7, #16]
 800c4ac:	1ad3      	subs	r3, r2, r3
 800c4ae:	2b02      	cmp	r3, #2
 800c4b0:	d901      	bls.n	800c4b6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800c4b2:	2303      	movs	r3, #3
 800c4b4:	e23c      	b.n	800c930 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c4b6:	4b40      	ldr	r3, [pc, #256]	; (800c5b8 <HAL_RCC_OscConfig+0x2ac>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d0f0      	beq.n	800c4a4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c4c2:	4b3d      	ldr	r3, [pc, #244]	; (800c5b8 <HAL_RCC_OscConfig+0x2ac>)
 800c4c4:	685b      	ldr	r3, [r3, #4]
 800c4c6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	691b      	ldr	r3, [r3, #16]
 800c4ce:	061b      	lsls	r3, r3, #24
 800c4d0:	4939      	ldr	r1, [pc, #228]	; (800c5b8 <HAL_RCC_OscConfig+0x2ac>)
 800c4d2:	4313      	orrs	r3, r2
 800c4d4:	604b      	str	r3, [r1, #4]
 800c4d6:	e01a      	b.n	800c50e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c4d8:	4b37      	ldr	r3, [pc, #220]	; (800c5b8 <HAL_RCC_OscConfig+0x2ac>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	4a36      	ldr	r2, [pc, #216]	; (800c5b8 <HAL_RCC_OscConfig+0x2ac>)
 800c4de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c4e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c4e4:	f7fc fba2 	bl	8008c2c <HAL_GetTick>
 800c4e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c4ea:	e008      	b.n	800c4fe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c4ec:	f7fc fb9e 	bl	8008c2c <HAL_GetTick>
 800c4f0:	4602      	mov	r2, r0
 800c4f2:	693b      	ldr	r3, [r7, #16]
 800c4f4:	1ad3      	subs	r3, r2, r3
 800c4f6:	2b02      	cmp	r3, #2
 800c4f8:	d901      	bls.n	800c4fe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800c4fa:	2303      	movs	r3, #3
 800c4fc:	e218      	b.n	800c930 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c4fe:	4b2e      	ldr	r3, [pc, #184]	; (800c5b8 <HAL_RCC_OscConfig+0x2ac>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c506:	2b00      	cmp	r3, #0
 800c508:	d1f0      	bne.n	800c4ec <HAL_RCC_OscConfig+0x1e0>
 800c50a:	e000      	b.n	800c50e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c50c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	f003 0308 	and.w	r3, r3, #8
 800c516:	2b00      	cmp	r3, #0
 800c518:	d03c      	beq.n	800c594 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	695b      	ldr	r3, [r3, #20]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d01c      	beq.n	800c55c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c522:	4b25      	ldr	r3, [pc, #148]	; (800c5b8 <HAL_RCC_OscConfig+0x2ac>)
 800c524:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c528:	4a23      	ldr	r2, [pc, #140]	; (800c5b8 <HAL_RCC_OscConfig+0x2ac>)
 800c52a:	f043 0301 	orr.w	r3, r3, #1
 800c52e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c532:	f7fc fb7b 	bl	8008c2c <HAL_GetTick>
 800c536:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c538:	e008      	b.n	800c54c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c53a:	f7fc fb77 	bl	8008c2c <HAL_GetTick>
 800c53e:	4602      	mov	r2, r0
 800c540:	693b      	ldr	r3, [r7, #16]
 800c542:	1ad3      	subs	r3, r2, r3
 800c544:	2b02      	cmp	r3, #2
 800c546:	d901      	bls.n	800c54c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800c548:	2303      	movs	r3, #3
 800c54a:	e1f1      	b.n	800c930 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c54c:	4b1a      	ldr	r3, [pc, #104]	; (800c5b8 <HAL_RCC_OscConfig+0x2ac>)
 800c54e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c552:	f003 0302 	and.w	r3, r3, #2
 800c556:	2b00      	cmp	r3, #0
 800c558:	d0ef      	beq.n	800c53a <HAL_RCC_OscConfig+0x22e>
 800c55a:	e01b      	b.n	800c594 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c55c:	4b16      	ldr	r3, [pc, #88]	; (800c5b8 <HAL_RCC_OscConfig+0x2ac>)
 800c55e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c562:	4a15      	ldr	r2, [pc, #84]	; (800c5b8 <HAL_RCC_OscConfig+0x2ac>)
 800c564:	f023 0301 	bic.w	r3, r3, #1
 800c568:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c56c:	f7fc fb5e 	bl	8008c2c <HAL_GetTick>
 800c570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c572:	e008      	b.n	800c586 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c574:	f7fc fb5a 	bl	8008c2c <HAL_GetTick>
 800c578:	4602      	mov	r2, r0
 800c57a:	693b      	ldr	r3, [r7, #16]
 800c57c:	1ad3      	subs	r3, r2, r3
 800c57e:	2b02      	cmp	r3, #2
 800c580:	d901      	bls.n	800c586 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800c582:	2303      	movs	r3, #3
 800c584:	e1d4      	b.n	800c930 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c586:	4b0c      	ldr	r3, [pc, #48]	; (800c5b8 <HAL_RCC_OscConfig+0x2ac>)
 800c588:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c58c:	f003 0302 	and.w	r3, r3, #2
 800c590:	2b00      	cmp	r3, #0
 800c592:	d1ef      	bne.n	800c574 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f003 0304 	and.w	r3, r3, #4
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	f000 80ab 	beq.w	800c6f8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800c5a6:	4b04      	ldr	r3, [pc, #16]	; (800c5b8 <HAL_RCC_OscConfig+0x2ac>)
 800c5a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d106      	bne.n	800c5c0 <HAL_RCC_OscConfig+0x2b4>
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	e005      	b.n	800c5c2 <HAL_RCC_OscConfig+0x2b6>
 800c5b6:	bf00      	nop
 800c5b8:	40021000 	.word	0x40021000
 800c5bc:	20000c38 	.word	0x20000c38
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d00d      	beq.n	800c5e2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c5c6:	4baf      	ldr	r3, [pc, #700]	; (800c884 <HAL_RCC_OscConfig+0x578>)
 800c5c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5ca:	4aae      	ldr	r2, [pc, #696]	; (800c884 <HAL_RCC_OscConfig+0x578>)
 800c5cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c5d0:	6593      	str	r3, [r2, #88]	; 0x58
 800c5d2:	4bac      	ldr	r3, [pc, #688]	; (800c884 <HAL_RCC_OscConfig+0x578>)
 800c5d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c5da:	60fb      	str	r3, [r7, #12]
 800c5dc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800c5de:	2301      	movs	r3, #1
 800c5e0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c5e2:	4ba9      	ldr	r3, [pc, #676]	; (800c888 <HAL_RCC_OscConfig+0x57c>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d118      	bne.n	800c620 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c5ee:	4ba6      	ldr	r3, [pc, #664]	; (800c888 <HAL_RCC_OscConfig+0x57c>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	4aa5      	ldr	r2, [pc, #660]	; (800c888 <HAL_RCC_OscConfig+0x57c>)
 800c5f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c5f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c5fa:	f7fc fb17 	bl	8008c2c <HAL_GetTick>
 800c5fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c600:	e008      	b.n	800c614 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c602:	f7fc fb13 	bl	8008c2c <HAL_GetTick>
 800c606:	4602      	mov	r2, r0
 800c608:	693b      	ldr	r3, [r7, #16]
 800c60a:	1ad3      	subs	r3, r2, r3
 800c60c:	2b02      	cmp	r3, #2
 800c60e:	d901      	bls.n	800c614 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800c610:	2303      	movs	r3, #3
 800c612:	e18d      	b.n	800c930 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c614:	4b9c      	ldr	r3, [pc, #624]	; (800c888 <HAL_RCC_OscConfig+0x57c>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d0f0      	beq.n	800c602 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	689b      	ldr	r3, [r3, #8]
 800c624:	2b01      	cmp	r3, #1
 800c626:	d108      	bne.n	800c63a <HAL_RCC_OscConfig+0x32e>
 800c628:	4b96      	ldr	r3, [pc, #600]	; (800c884 <HAL_RCC_OscConfig+0x578>)
 800c62a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c62e:	4a95      	ldr	r2, [pc, #596]	; (800c884 <HAL_RCC_OscConfig+0x578>)
 800c630:	f043 0301 	orr.w	r3, r3, #1
 800c634:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c638:	e024      	b.n	800c684 <HAL_RCC_OscConfig+0x378>
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	689b      	ldr	r3, [r3, #8]
 800c63e:	2b05      	cmp	r3, #5
 800c640:	d110      	bne.n	800c664 <HAL_RCC_OscConfig+0x358>
 800c642:	4b90      	ldr	r3, [pc, #576]	; (800c884 <HAL_RCC_OscConfig+0x578>)
 800c644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c648:	4a8e      	ldr	r2, [pc, #568]	; (800c884 <HAL_RCC_OscConfig+0x578>)
 800c64a:	f043 0304 	orr.w	r3, r3, #4
 800c64e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c652:	4b8c      	ldr	r3, [pc, #560]	; (800c884 <HAL_RCC_OscConfig+0x578>)
 800c654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c658:	4a8a      	ldr	r2, [pc, #552]	; (800c884 <HAL_RCC_OscConfig+0x578>)
 800c65a:	f043 0301 	orr.w	r3, r3, #1
 800c65e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c662:	e00f      	b.n	800c684 <HAL_RCC_OscConfig+0x378>
 800c664:	4b87      	ldr	r3, [pc, #540]	; (800c884 <HAL_RCC_OscConfig+0x578>)
 800c666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c66a:	4a86      	ldr	r2, [pc, #536]	; (800c884 <HAL_RCC_OscConfig+0x578>)
 800c66c:	f023 0301 	bic.w	r3, r3, #1
 800c670:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c674:	4b83      	ldr	r3, [pc, #524]	; (800c884 <HAL_RCC_OscConfig+0x578>)
 800c676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c67a:	4a82      	ldr	r2, [pc, #520]	; (800c884 <HAL_RCC_OscConfig+0x578>)
 800c67c:	f023 0304 	bic.w	r3, r3, #4
 800c680:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	689b      	ldr	r3, [r3, #8]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d016      	beq.n	800c6ba <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c68c:	f7fc face 	bl	8008c2c <HAL_GetTick>
 800c690:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c692:	e00a      	b.n	800c6aa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c694:	f7fc faca 	bl	8008c2c <HAL_GetTick>
 800c698:	4602      	mov	r2, r0
 800c69a:	693b      	ldr	r3, [r7, #16]
 800c69c:	1ad3      	subs	r3, r2, r3
 800c69e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6a2:	4293      	cmp	r3, r2
 800c6a4:	d901      	bls.n	800c6aa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800c6a6:	2303      	movs	r3, #3
 800c6a8:	e142      	b.n	800c930 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c6aa:	4b76      	ldr	r3, [pc, #472]	; (800c884 <HAL_RCC_OscConfig+0x578>)
 800c6ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6b0:	f003 0302 	and.w	r3, r3, #2
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d0ed      	beq.n	800c694 <HAL_RCC_OscConfig+0x388>
 800c6b8:	e015      	b.n	800c6e6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c6ba:	f7fc fab7 	bl	8008c2c <HAL_GetTick>
 800c6be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c6c0:	e00a      	b.n	800c6d8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c6c2:	f7fc fab3 	bl	8008c2c <HAL_GetTick>
 800c6c6:	4602      	mov	r2, r0
 800c6c8:	693b      	ldr	r3, [r7, #16]
 800c6ca:	1ad3      	subs	r3, r2, r3
 800c6cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6d0:	4293      	cmp	r3, r2
 800c6d2:	d901      	bls.n	800c6d8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800c6d4:	2303      	movs	r3, #3
 800c6d6:	e12b      	b.n	800c930 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c6d8:	4b6a      	ldr	r3, [pc, #424]	; (800c884 <HAL_RCC_OscConfig+0x578>)
 800c6da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6de:	f003 0302 	and.w	r3, r3, #2
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d1ed      	bne.n	800c6c2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c6e6:	7ffb      	ldrb	r3, [r7, #31]
 800c6e8:	2b01      	cmp	r3, #1
 800c6ea:	d105      	bne.n	800c6f8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c6ec:	4b65      	ldr	r3, [pc, #404]	; (800c884 <HAL_RCC_OscConfig+0x578>)
 800c6ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6f0:	4a64      	ldr	r2, [pc, #400]	; (800c884 <HAL_RCC_OscConfig+0x578>)
 800c6f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c6f6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f003 0320 	and.w	r3, r3, #32
 800c700:	2b00      	cmp	r3, #0
 800c702:	d03c      	beq.n	800c77e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	699b      	ldr	r3, [r3, #24]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d01c      	beq.n	800c746 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c70c:	4b5d      	ldr	r3, [pc, #372]	; (800c884 <HAL_RCC_OscConfig+0x578>)
 800c70e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c712:	4a5c      	ldr	r2, [pc, #368]	; (800c884 <HAL_RCC_OscConfig+0x578>)
 800c714:	f043 0301 	orr.w	r3, r3, #1
 800c718:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c71c:	f7fc fa86 	bl	8008c2c <HAL_GetTick>
 800c720:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c722:	e008      	b.n	800c736 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c724:	f7fc fa82 	bl	8008c2c <HAL_GetTick>
 800c728:	4602      	mov	r2, r0
 800c72a:	693b      	ldr	r3, [r7, #16]
 800c72c:	1ad3      	subs	r3, r2, r3
 800c72e:	2b02      	cmp	r3, #2
 800c730:	d901      	bls.n	800c736 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800c732:	2303      	movs	r3, #3
 800c734:	e0fc      	b.n	800c930 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c736:	4b53      	ldr	r3, [pc, #332]	; (800c884 <HAL_RCC_OscConfig+0x578>)
 800c738:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c73c:	f003 0302 	and.w	r3, r3, #2
 800c740:	2b00      	cmp	r3, #0
 800c742:	d0ef      	beq.n	800c724 <HAL_RCC_OscConfig+0x418>
 800c744:	e01b      	b.n	800c77e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c746:	4b4f      	ldr	r3, [pc, #316]	; (800c884 <HAL_RCC_OscConfig+0x578>)
 800c748:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c74c:	4a4d      	ldr	r2, [pc, #308]	; (800c884 <HAL_RCC_OscConfig+0x578>)
 800c74e:	f023 0301 	bic.w	r3, r3, #1
 800c752:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c756:	f7fc fa69 	bl	8008c2c <HAL_GetTick>
 800c75a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c75c:	e008      	b.n	800c770 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c75e:	f7fc fa65 	bl	8008c2c <HAL_GetTick>
 800c762:	4602      	mov	r2, r0
 800c764:	693b      	ldr	r3, [r7, #16]
 800c766:	1ad3      	subs	r3, r2, r3
 800c768:	2b02      	cmp	r3, #2
 800c76a:	d901      	bls.n	800c770 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800c76c:	2303      	movs	r3, #3
 800c76e:	e0df      	b.n	800c930 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c770:	4b44      	ldr	r3, [pc, #272]	; (800c884 <HAL_RCC_OscConfig+0x578>)
 800c772:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c776:	f003 0302 	and.w	r3, r3, #2
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d1ef      	bne.n	800c75e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	69db      	ldr	r3, [r3, #28]
 800c782:	2b00      	cmp	r3, #0
 800c784:	f000 80d3 	beq.w	800c92e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c788:	4b3e      	ldr	r3, [pc, #248]	; (800c884 <HAL_RCC_OscConfig+0x578>)
 800c78a:	689b      	ldr	r3, [r3, #8]
 800c78c:	f003 030c 	and.w	r3, r3, #12
 800c790:	2b0c      	cmp	r3, #12
 800c792:	f000 808d 	beq.w	800c8b0 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	69db      	ldr	r3, [r3, #28]
 800c79a:	2b02      	cmp	r3, #2
 800c79c:	d15a      	bne.n	800c854 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c79e:	4b39      	ldr	r3, [pc, #228]	; (800c884 <HAL_RCC_OscConfig+0x578>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	4a38      	ldr	r2, [pc, #224]	; (800c884 <HAL_RCC_OscConfig+0x578>)
 800c7a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c7a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7aa:	f7fc fa3f 	bl	8008c2c <HAL_GetTick>
 800c7ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c7b0:	e008      	b.n	800c7c4 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c7b2:	f7fc fa3b 	bl	8008c2c <HAL_GetTick>
 800c7b6:	4602      	mov	r2, r0
 800c7b8:	693b      	ldr	r3, [r7, #16]
 800c7ba:	1ad3      	subs	r3, r2, r3
 800c7bc:	2b02      	cmp	r3, #2
 800c7be:	d901      	bls.n	800c7c4 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800c7c0:	2303      	movs	r3, #3
 800c7c2:	e0b5      	b.n	800c930 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c7c4:	4b2f      	ldr	r3, [pc, #188]	; (800c884 <HAL_RCC_OscConfig+0x578>)
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d1f0      	bne.n	800c7b2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c7d0:	4b2c      	ldr	r3, [pc, #176]	; (800c884 <HAL_RCC_OscConfig+0x578>)
 800c7d2:	68da      	ldr	r2, [r3, #12]
 800c7d4:	4b2d      	ldr	r3, [pc, #180]	; (800c88c <HAL_RCC_OscConfig+0x580>)
 800c7d6:	4013      	ands	r3, r2
 800c7d8:	687a      	ldr	r2, [r7, #4]
 800c7da:	6a11      	ldr	r1, [r2, #32]
 800c7dc:	687a      	ldr	r2, [r7, #4]
 800c7de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c7e0:	3a01      	subs	r2, #1
 800c7e2:	0112      	lsls	r2, r2, #4
 800c7e4:	4311      	orrs	r1, r2
 800c7e6:	687a      	ldr	r2, [r7, #4]
 800c7e8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800c7ea:	0212      	lsls	r2, r2, #8
 800c7ec:	4311      	orrs	r1, r2
 800c7ee:	687a      	ldr	r2, [r7, #4]
 800c7f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c7f2:	0852      	lsrs	r2, r2, #1
 800c7f4:	3a01      	subs	r2, #1
 800c7f6:	0552      	lsls	r2, r2, #21
 800c7f8:	4311      	orrs	r1, r2
 800c7fa:	687a      	ldr	r2, [r7, #4]
 800c7fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c7fe:	0852      	lsrs	r2, r2, #1
 800c800:	3a01      	subs	r2, #1
 800c802:	0652      	lsls	r2, r2, #25
 800c804:	4311      	orrs	r1, r2
 800c806:	687a      	ldr	r2, [r7, #4]
 800c808:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c80a:	06d2      	lsls	r2, r2, #27
 800c80c:	430a      	orrs	r2, r1
 800c80e:	491d      	ldr	r1, [pc, #116]	; (800c884 <HAL_RCC_OscConfig+0x578>)
 800c810:	4313      	orrs	r3, r2
 800c812:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c814:	4b1b      	ldr	r3, [pc, #108]	; (800c884 <HAL_RCC_OscConfig+0x578>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	4a1a      	ldr	r2, [pc, #104]	; (800c884 <HAL_RCC_OscConfig+0x578>)
 800c81a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c81e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c820:	4b18      	ldr	r3, [pc, #96]	; (800c884 <HAL_RCC_OscConfig+0x578>)
 800c822:	68db      	ldr	r3, [r3, #12]
 800c824:	4a17      	ldr	r2, [pc, #92]	; (800c884 <HAL_RCC_OscConfig+0x578>)
 800c826:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c82a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c82c:	f7fc f9fe 	bl	8008c2c <HAL_GetTick>
 800c830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c832:	e008      	b.n	800c846 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c834:	f7fc f9fa 	bl	8008c2c <HAL_GetTick>
 800c838:	4602      	mov	r2, r0
 800c83a:	693b      	ldr	r3, [r7, #16]
 800c83c:	1ad3      	subs	r3, r2, r3
 800c83e:	2b02      	cmp	r3, #2
 800c840:	d901      	bls.n	800c846 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800c842:	2303      	movs	r3, #3
 800c844:	e074      	b.n	800c930 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c846:	4b0f      	ldr	r3, [pc, #60]	; (800c884 <HAL_RCC_OscConfig+0x578>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d0f0      	beq.n	800c834 <HAL_RCC_OscConfig+0x528>
 800c852:	e06c      	b.n	800c92e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c854:	4b0b      	ldr	r3, [pc, #44]	; (800c884 <HAL_RCC_OscConfig+0x578>)
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	4a0a      	ldr	r2, [pc, #40]	; (800c884 <HAL_RCC_OscConfig+0x578>)
 800c85a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c85e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800c860:	4b08      	ldr	r3, [pc, #32]	; (800c884 <HAL_RCC_OscConfig+0x578>)
 800c862:	68db      	ldr	r3, [r3, #12]
 800c864:	4a07      	ldr	r2, [pc, #28]	; (800c884 <HAL_RCC_OscConfig+0x578>)
 800c866:	f023 0303 	bic.w	r3, r3, #3
 800c86a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800c86c:	4b05      	ldr	r3, [pc, #20]	; (800c884 <HAL_RCC_OscConfig+0x578>)
 800c86e:	68db      	ldr	r3, [r3, #12]
 800c870:	4a04      	ldr	r2, [pc, #16]	; (800c884 <HAL_RCC_OscConfig+0x578>)
 800c872:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800c876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c87a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c87c:	f7fc f9d6 	bl	8008c2c <HAL_GetTick>
 800c880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c882:	e00e      	b.n	800c8a2 <HAL_RCC_OscConfig+0x596>
 800c884:	40021000 	.word	0x40021000
 800c888:	40007000 	.word	0x40007000
 800c88c:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c890:	f7fc f9cc 	bl	8008c2c <HAL_GetTick>
 800c894:	4602      	mov	r2, r0
 800c896:	693b      	ldr	r3, [r7, #16]
 800c898:	1ad3      	subs	r3, r2, r3
 800c89a:	2b02      	cmp	r3, #2
 800c89c:	d901      	bls.n	800c8a2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800c89e:	2303      	movs	r3, #3
 800c8a0:	e046      	b.n	800c930 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c8a2:	4b25      	ldr	r3, [pc, #148]	; (800c938 <HAL_RCC_OscConfig+0x62c>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d1f0      	bne.n	800c890 <HAL_RCC_OscConfig+0x584>
 800c8ae:	e03e      	b.n	800c92e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	69db      	ldr	r3, [r3, #28]
 800c8b4:	2b01      	cmp	r3, #1
 800c8b6:	d101      	bne.n	800c8bc <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800c8b8:	2301      	movs	r3, #1
 800c8ba:	e039      	b.n	800c930 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800c8bc:	4b1e      	ldr	r3, [pc, #120]	; (800c938 <HAL_RCC_OscConfig+0x62c>)
 800c8be:	68db      	ldr	r3, [r3, #12]
 800c8c0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	f003 0203 	and.w	r2, r3, #3
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6a1b      	ldr	r3, [r3, #32]
 800c8cc:	429a      	cmp	r2, r3
 800c8ce:	d12c      	bne.n	800c92a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c8d0:	697b      	ldr	r3, [r7, #20]
 800c8d2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8da:	3b01      	subs	r3, #1
 800c8dc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c8de:	429a      	cmp	r2, r3
 800c8e0:	d123      	bne.n	800c92a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800c8e2:	697b      	ldr	r3, [r7, #20]
 800c8e4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8ec:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c8ee:	429a      	cmp	r2, r3
 800c8f0:	d11b      	bne.n	800c92a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8fc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800c8fe:	429a      	cmp	r2, r3
 800c900:	d113      	bne.n	800c92a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c902:	697b      	ldr	r3, [r7, #20]
 800c904:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c90c:	085b      	lsrs	r3, r3, #1
 800c90e:	3b01      	subs	r3, #1
 800c910:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c912:	429a      	cmp	r2, r3
 800c914:	d109      	bne.n	800c92a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800c916:	697b      	ldr	r3, [r7, #20]
 800c918:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c920:	085b      	lsrs	r3, r3, #1
 800c922:	3b01      	subs	r3, #1
 800c924:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c926:	429a      	cmp	r2, r3
 800c928:	d001      	beq.n	800c92e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800c92a:	2301      	movs	r3, #1
 800c92c:	e000      	b.n	800c930 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800c92e:	2300      	movs	r3, #0
}
 800c930:	4618      	mov	r0, r3
 800c932:	3720      	adds	r7, #32
 800c934:	46bd      	mov	sp, r7
 800c936:	bd80      	pop	{r7, pc}
 800c938:	40021000 	.word	0x40021000

0800c93c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b086      	sub	sp, #24
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
 800c944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800c946:	2300      	movs	r3, #0
 800c948:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d101      	bne.n	800c954 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800c950:	2301      	movs	r3, #1
 800c952:	e11e      	b.n	800cb92 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c954:	4b91      	ldr	r3, [pc, #580]	; (800cb9c <HAL_RCC_ClockConfig+0x260>)
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	f003 030f 	and.w	r3, r3, #15
 800c95c:	683a      	ldr	r2, [r7, #0]
 800c95e:	429a      	cmp	r2, r3
 800c960:	d910      	bls.n	800c984 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c962:	4b8e      	ldr	r3, [pc, #568]	; (800cb9c <HAL_RCC_ClockConfig+0x260>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	f023 020f 	bic.w	r2, r3, #15
 800c96a:	498c      	ldr	r1, [pc, #560]	; (800cb9c <HAL_RCC_ClockConfig+0x260>)
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	4313      	orrs	r3, r2
 800c970:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c972:	4b8a      	ldr	r3, [pc, #552]	; (800cb9c <HAL_RCC_ClockConfig+0x260>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	f003 030f 	and.w	r3, r3, #15
 800c97a:	683a      	ldr	r2, [r7, #0]
 800c97c:	429a      	cmp	r2, r3
 800c97e:	d001      	beq.n	800c984 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800c980:	2301      	movs	r3, #1
 800c982:	e106      	b.n	800cb92 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	f003 0301 	and.w	r3, r3, #1
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d073      	beq.n	800ca78 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	685b      	ldr	r3, [r3, #4]
 800c994:	2b03      	cmp	r3, #3
 800c996:	d129      	bne.n	800c9ec <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c998:	4b81      	ldr	r3, [pc, #516]	; (800cba0 <HAL_RCC_ClockConfig+0x264>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d101      	bne.n	800c9a8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	e0f4      	b.n	800cb92 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800c9a8:	f000 f972 	bl	800cc90 <RCC_GetSysClockFreqFromPLLSource>
 800c9ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800c9ae:	693b      	ldr	r3, [r7, #16]
 800c9b0:	4a7c      	ldr	r2, [pc, #496]	; (800cba4 <HAL_RCC_ClockConfig+0x268>)
 800c9b2:	4293      	cmp	r3, r2
 800c9b4:	d93f      	bls.n	800ca36 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800c9b6:	4b7a      	ldr	r3, [pc, #488]	; (800cba0 <HAL_RCC_ClockConfig+0x264>)
 800c9b8:	689b      	ldr	r3, [r3, #8]
 800c9ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d009      	beq.n	800c9d6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d033      	beq.n	800ca36 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d12f      	bne.n	800ca36 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800c9d6:	4b72      	ldr	r3, [pc, #456]	; (800cba0 <HAL_RCC_ClockConfig+0x264>)
 800c9d8:	689b      	ldr	r3, [r3, #8]
 800c9da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c9de:	4a70      	ldr	r2, [pc, #448]	; (800cba0 <HAL_RCC_ClockConfig+0x264>)
 800c9e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9e4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800c9e6:	2380      	movs	r3, #128	; 0x80
 800c9e8:	617b      	str	r3, [r7, #20]
 800c9ea:	e024      	b.n	800ca36 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	685b      	ldr	r3, [r3, #4]
 800c9f0:	2b02      	cmp	r3, #2
 800c9f2:	d107      	bne.n	800ca04 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c9f4:	4b6a      	ldr	r3, [pc, #424]	; (800cba0 <HAL_RCC_ClockConfig+0x264>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d109      	bne.n	800ca14 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800ca00:	2301      	movs	r3, #1
 800ca02:	e0c6      	b.n	800cb92 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ca04:	4b66      	ldr	r3, [pc, #408]	; (800cba0 <HAL_RCC_ClockConfig+0x264>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d101      	bne.n	800ca14 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800ca10:	2301      	movs	r3, #1
 800ca12:	e0be      	b.n	800cb92 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800ca14:	f000 f8ce 	bl	800cbb4 <HAL_RCC_GetSysClockFreq>
 800ca18:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800ca1a:	693b      	ldr	r3, [r7, #16]
 800ca1c:	4a61      	ldr	r2, [pc, #388]	; (800cba4 <HAL_RCC_ClockConfig+0x268>)
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	d909      	bls.n	800ca36 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ca22:	4b5f      	ldr	r3, [pc, #380]	; (800cba0 <HAL_RCC_ClockConfig+0x264>)
 800ca24:	689b      	ldr	r3, [r3, #8]
 800ca26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ca2a:	4a5d      	ldr	r2, [pc, #372]	; (800cba0 <HAL_RCC_ClockConfig+0x264>)
 800ca2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca30:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800ca32:	2380      	movs	r3, #128	; 0x80
 800ca34:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ca36:	4b5a      	ldr	r3, [pc, #360]	; (800cba0 <HAL_RCC_ClockConfig+0x264>)
 800ca38:	689b      	ldr	r3, [r3, #8]
 800ca3a:	f023 0203 	bic.w	r2, r3, #3
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	685b      	ldr	r3, [r3, #4]
 800ca42:	4957      	ldr	r1, [pc, #348]	; (800cba0 <HAL_RCC_ClockConfig+0x264>)
 800ca44:	4313      	orrs	r3, r2
 800ca46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ca48:	f7fc f8f0 	bl	8008c2c <HAL_GetTick>
 800ca4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ca4e:	e00a      	b.n	800ca66 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ca50:	f7fc f8ec 	bl	8008c2c <HAL_GetTick>
 800ca54:	4602      	mov	r2, r0
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	1ad3      	subs	r3, r2, r3
 800ca5a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca5e:	4293      	cmp	r3, r2
 800ca60:	d901      	bls.n	800ca66 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800ca62:	2303      	movs	r3, #3
 800ca64:	e095      	b.n	800cb92 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ca66:	4b4e      	ldr	r3, [pc, #312]	; (800cba0 <HAL_RCC_ClockConfig+0x264>)
 800ca68:	689b      	ldr	r3, [r3, #8]
 800ca6a:	f003 020c 	and.w	r2, r3, #12
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	685b      	ldr	r3, [r3, #4]
 800ca72:	009b      	lsls	r3, r3, #2
 800ca74:	429a      	cmp	r2, r3
 800ca76:	d1eb      	bne.n	800ca50 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	f003 0302 	and.w	r3, r3, #2
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d023      	beq.n	800cacc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	f003 0304 	and.w	r3, r3, #4
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d005      	beq.n	800ca9c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ca90:	4b43      	ldr	r3, [pc, #268]	; (800cba0 <HAL_RCC_ClockConfig+0x264>)
 800ca92:	689b      	ldr	r3, [r3, #8]
 800ca94:	4a42      	ldr	r2, [pc, #264]	; (800cba0 <HAL_RCC_ClockConfig+0x264>)
 800ca96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ca9a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	f003 0308 	and.w	r3, r3, #8
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d007      	beq.n	800cab8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800caa8:	4b3d      	ldr	r3, [pc, #244]	; (800cba0 <HAL_RCC_ClockConfig+0x264>)
 800caaa:	689b      	ldr	r3, [r3, #8]
 800caac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cab0:	4a3b      	ldr	r2, [pc, #236]	; (800cba0 <HAL_RCC_ClockConfig+0x264>)
 800cab2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800cab6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cab8:	4b39      	ldr	r3, [pc, #228]	; (800cba0 <HAL_RCC_ClockConfig+0x264>)
 800caba:	689b      	ldr	r3, [r3, #8]
 800cabc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	689b      	ldr	r3, [r3, #8]
 800cac4:	4936      	ldr	r1, [pc, #216]	; (800cba0 <HAL_RCC_ClockConfig+0x264>)
 800cac6:	4313      	orrs	r3, r2
 800cac8:	608b      	str	r3, [r1, #8]
 800caca:	e008      	b.n	800cade <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800cacc:	697b      	ldr	r3, [r7, #20]
 800cace:	2b80      	cmp	r3, #128	; 0x80
 800cad0:	d105      	bne.n	800cade <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800cad2:	4b33      	ldr	r3, [pc, #204]	; (800cba0 <HAL_RCC_ClockConfig+0x264>)
 800cad4:	689b      	ldr	r3, [r3, #8]
 800cad6:	4a32      	ldr	r2, [pc, #200]	; (800cba0 <HAL_RCC_ClockConfig+0x264>)
 800cad8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cadc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cade:	4b2f      	ldr	r3, [pc, #188]	; (800cb9c <HAL_RCC_ClockConfig+0x260>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	f003 030f 	and.w	r3, r3, #15
 800cae6:	683a      	ldr	r2, [r7, #0]
 800cae8:	429a      	cmp	r2, r3
 800caea:	d21d      	bcs.n	800cb28 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800caec:	4b2b      	ldr	r3, [pc, #172]	; (800cb9c <HAL_RCC_ClockConfig+0x260>)
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	f023 020f 	bic.w	r2, r3, #15
 800caf4:	4929      	ldr	r1, [pc, #164]	; (800cb9c <HAL_RCC_ClockConfig+0x260>)
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	4313      	orrs	r3, r2
 800cafa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800cafc:	f7fc f896 	bl	8008c2c <HAL_GetTick>
 800cb00:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cb02:	e00a      	b.n	800cb1a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cb04:	f7fc f892 	bl	8008c2c <HAL_GetTick>
 800cb08:	4602      	mov	r2, r0
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	1ad3      	subs	r3, r2, r3
 800cb0e:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb12:	4293      	cmp	r3, r2
 800cb14:	d901      	bls.n	800cb1a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800cb16:	2303      	movs	r3, #3
 800cb18:	e03b      	b.n	800cb92 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cb1a:	4b20      	ldr	r3, [pc, #128]	; (800cb9c <HAL_RCC_ClockConfig+0x260>)
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	f003 030f 	and.w	r3, r3, #15
 800cb22:	683a      	ldr	r2, [r7, #0]
 800cb24:	429a      	cmp	r2, r3
 800cb26:	d1ed      	bne.n	800cb04 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	f003 0304 	and.w	r3, r3, #4
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d008      	beq.n	800cb46 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cb34:	4b1a      	ldr	r3, [pc, #104]	; (800cba0 <HAL_RCC_ClockConfig+0x264>)
 800cb36:	689b      	ldr	r3, [r3, #8]
 800cb38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	68db      	ldr	r3, [r3, #12]
 800cb40:	4917      	ldr	r1, [pc, #92]	; (800cba0 <HAL_RCC_ClockConfig+0x264>)
 800cb42:	4313      	orrs	r3, r2
 800cb44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	f003 0308 	and.w	r3, r3, #8
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d009      	beq.n	800cb66 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800cb52:	4b13      	ldr	r3, [pc, #76]	; (800cba0 <HAL_RCC_ClockConfig+0x264>)
 800cb54:	689b      	ldr	r3, [r3, #8]
 800cb56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	691b      	ldr	r3, [r3, #16]
 800cb5e:	00db      	lsls	r3, r3, #3
 800cb60:	490f      	ldr	r1, [pc, #60]	; (800cba0 <HAL_RCC_ClockConfig+0x264>)
 800cb62:	4313      	orrs	r3, r2
 800cb64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800cb66:	f000 f825 	bl	800cbb4 <HAL_RCC_GetSysClockFreq>
 800cb6a:	4601      	mov	r1, r0
 800cb6c:	4b0c      	ldr	r3, [pc, #48]	; (800cba0 <HAL_RCC_ClockConfig+0x264>)
 800cb6e:	689b      	ldr	r3, [r3, #8]
 800cb70:	091b      	lsrs	r3, r3, #4
 800cb72:	f003 030f 	and.w	r3, r3, #15
 800cb76:	4a0c      	ldr	r2, [pc, #48]	; (800cba8 <HAL_RCC_ClockConfig+0x26c>)
 800cb78:	5cd3      	ldrb	r3, [r2, r3]
 800cb7a:	f003 031f 	and.w	r3, r3, #31
 800cb7e:	fa21 f303 	lsr.w	r3, r1, r3
 800cb82:	4a0a      	ldr	r2, [pc, #40]	; (800cbac <HAL_RCC_ClockConfig+0x270>)
 800cb84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800cb86:	4b0a      	ldr	r3, [pc, #40]	; (800cbb0 <HAL_RCC_ClockConfig+0x274>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f7fc f802 	bl	8008b94 <HAL_InitTick>
 800cb90:	4603      	mov	r3, r0
}
 800cb92:	4618      	mov	r0, r3
 800cb94:	3718      	adds	r7, #24
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}
 800cb9a:	bf00      	nop
 800cb9c:	40022000 	.word	0x40022000
 800cba0:	40021000 	.word	0x40021000
 800cba4:	04c4b400 	.word	0x04c4b400
 800cba8:	08015588 	.word	0x08015588
 800cbac:	20000c34 	.word	0x20000c34
 800cbb0:	20000c38 	.word	0x20000c38

0800cbb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cbb4:	b480      	push	{r7}
 800cbb6:	b087      	sub	sp, #28
 800cbb8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800cbba:	4b2c      	ldr	r3, [pc, #176]	; (800cc6c <HAL_RCC_GetSysClockFreq+0xb8>)
 800cbbc:	689b      	ldr	r3, [r3, #8]
 800cbbe:	f003 030c 	and.w	r3, r3, #12
 800cbc2:	2b04      	cmp	r3, #4
 800cbc4:	d102      	bne.n	800cbcc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800cbc6:	4b2a      	ldr	r3, [pc, #168]	; (800cc70 <HAL_RCC_GetSysClockFreq+0xbc>)
 800cbc8:	613b      	str	r3, [r7, #16]
 800cbca:	e047      	b.n	800cc5c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800cbcc:	4b27      	ldr	r3, [pc, #156]	; (800cc6c <HAL_RCC_GetSysClockFreq+0xb8>)
 800cbce:	689b      	ldr	r3, [r3, #8]
 800cbd0:	f003 030c 	and.w	r3, r3, #12
 800cbd4:	2b08      	cmp	r3, #8
 800cbd6:	d102      	bne.n	800cbde <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800cbd8:	4b26      	ldr	r3, [pc, #152]	; (800cc74 <HAL_RCC_GetSysClockFreq+0xc0>)
 800cbda:	613b      	str	r3, [r7, #16]
 800cbdc:	e03e      	b.n	800cc5c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800cbde:	4b23      	ldr	r3, [pc, #140]	; (800cc6c <HAL_RCC_GetSysClockFreq+0xb8>)
 800cbe0:	689b      	ldr	r3, [r3, #8]
 800cbe2:	f003 030c 	and.w	r3, r3, #12
 800cbe6:	2b0c      	cmp	r3, #12
 800cbe8:	d136      	bne.n	800cc58 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800cbea:	4b20      	ldr	r3, [pc, #128]	; (800cc6c <HAL_RCC_GetSysClockFreq+0xb8>)
 800cbec:	68db      	ldr	r3, [r3, #12]
 800cbee:	f003 0303 	and.w	r3, r3, #3
 800cbf2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800cbf4:	4b1d      	ldr	r3, [pc, #116]	; (800cc6c <HAL_RCC_GetSysClockFreq+0xb8>)
 800cbf6:	68db      	ldr	r3, [r3, #12]
 800cbf8:	091b      	lsrs	r3, r3, #4
 800cbfa:	f003 030f 	and.w	r3, r3, #15
 800cbfe:	3301      	adds	r3, #1
 800cc00:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	2b03      	cmp	r3, #3
 800cc06:	d10c      	bne.n	800cc22 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cc08:	4a1a      	ldr	r2, [pc, #104]	; (800cc74 <HAL_RCC_GetSysClockFreq+0xc0>)
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc10:	4a16      	ldr	r2, [pc, #88]	; (800cc6c <HAL_RCC_GetSysClockFreq+0xb8>)
 800cc12:	68d2      	ldr	r2, [r2, #12]
 800cc14:	0a12      	lsrs	r2, r2, #8
 800cc16:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cc1a:	fb02 f303 	mul.w	r3, r2, r3
 800cc1e:	617b      	str	r3, [r7, #20]
      break;
 800cc20:	e00c      	b.n	800cc3c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cc22:	4a13      	ldr	r2, [pc, #76]	; (800cc70 <HAL_RCC_GetSysClockFreq+0xbc>)
 800cc24:	68bb      	ldr	r3, [r7, #8]
 800cc26:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc2a:	4a10      	ldr	r2, [pc, #64]	; (800cc6c <HAL_RCC_GetSysClockFreq+0xb8>)
 800cc2c:	68d2      	ldr	r2, [r2, #12]
 800cc2e:	0a12      	lsrs	r2, r2, #8
 800cc30:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cc34:	fb02 f303 	mul.w	r3, r2, r3
 800cc38:	617b      	str	r3, [r7, #20]
      break;
 800cc3a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800cc3c:	4b0b      	ldr	r3, [pc, #44]	; (800cc6c <HAL_RCC_GetSysClockFreq+0xb8>)
 800cc3e:	68db      	ldr	r3, [r3, #12]
 800cc40:	0e5b      	lsrs	r3, r3, #25
 800cc42:	f003 0303 	and.w	r3, r3, #3
 800cc46:	3301      	adds	r3, #1
 800cc48:	005b      	lsls	r3, r3, #1
 800cc4a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800cc4c:	697a      	ldr	r2, [r7, #20]
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc54:	613b      	str	r3, [r7, #16]
 800cc56:	e001      	b.n	800cc5c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800cc58:	2300      	movs	r3, #0
 800cc5a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800cc5c:	693b      	ldr	r3, [r7, #16]
}
 800cc5e:	4618      	mov	r0, r3
 800cc60:	371c      	adds	r7, #28
 800cc62:	46bd      	mov	sp, r7
 800cc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc68:	4770      	bx	lr
 800cc6a:	bf00      	nop
 800cc6c:	40021000 	.word	0x40021000
 800cc70:	00f42400 	.word	0x00f42400
 800cc74:	007a1200 	.word	0x007a1200

0800cc78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cc78:	b480      	push	{r7}
 800cc7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cc7c:	4b03      	ldr	r3, [pc, #12]	; (800cc8c <HAL_RCC_GetHCLKFreq+0x14>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
}
 800cc80:	4618      	mov	r0, r3
 800cc82:	46bd      	mov	sp, r7
 800cc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc88:	4770      	bx	lr
 800cc8a:	bf00      	nop
 800cc8c:	20000c34 	.word	0x20000c34

0800cc90 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800cc90:	b480      	push	{r7}
 800cc92:	b087      	sub	sp, #28
 800cc94:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800cc96:	4b1e      	ldr	r3, [pc, #120]	; (800cd10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cc98:	68db      	ldr	r3, [r3, #12]
 800cc9a:	f003 0303 	and.w	r3, r3, #3
 800cc9e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800cca0:	4b1b      	ldr	r3, [pc, #108]	; (800cd10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cca2:	68db      	ldr	r3, [r3, #12]
 800cca4:	091b      	lsrs	r3, r3, #4
 800cca6:	f003 030f 	and.w	r3, r3, #15
 800ccaa:	3301      	adds	r3, #1
 800ccac:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800ccae:	693b      	ldr	r3, [r7, #16]
 800ccb0:	2b03      	cmp	r3, #3
 800ccb2:	d10c      	bne.n	800ccce <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ccb4:	4a17      	ldr	r2, [pc, #92]	; (800cd14 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccbc:	4a14      	ldr	r2, [pc, #80]	; (800cd10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ccbe:	68d2      	ldr	r2, [r2, #12]
 800ccc0:	0a12      	lsrs	r2, r2, #8
 800ccc2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ccc6:	fb02 f303 	mul.w	r3, r2, r3
 800ccca:	617b      	str	r3, [r7, #20]
    break;
 800cccc:	e00c      	b.n	800cce8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ccce:	4a12      	ldr	r2, [pc, #72]	; (800cd18 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccd6:	4a0e      	ldr	r2, [pc, #56]	; (800cd10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ccd8:	68d2      	ldr	r2, [r2, #12]
 800ccda:	0a12      	lsrs	r2, r2, #8
 800ccdc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cce0:	fb02 f303 	mul.w	r3, r2, r3
 800cce4:	617b      	str	r3, [r7, #20]
    break;
 800cce6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800cce8:	4b09      	ldr	r3, [pc, #36]	; (800cd10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ccea:	68db      	ldr	r3, [r3, #12]
 800ccec:	0e5b      	lsrs	r3, r3, #25
 800ccee:	f003 0303 	and.w	r3, r3, #3
 800ccf2:	3301      	adds	r3, #1
 800ccf4:	005b      	lsls	r3, r3, #1
 800ccf6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800ccf8:	697a      	ldr	r2, [r7, #20]
 800ccfa:	68bb      	ldr	r3, [r7, #8]
 800ccfc:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd00:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800cd02:	687b      	ldr	r3, [r7, #4]
}
 800cd04:	4618      	mov	r0, r3
 800cd06:	371c      	adds	r7, #28
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0e:	4770      	bx	lr
 800cd10:	40021000 	.word	0x40021000
 800cd14:	007a1200 	.word	0x007a1200
 800cd18:	00f42400 	.word	0x00f42400

0800cd1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b086      	sub	sp, #24
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800cd24:	2300      	movs	r3, #0
 800cd26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800cd28:	2300      	movs	r3, #0
 800cd2a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	f000 8098 	beq.w	800ce6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cd3e:	4b43      	ldr	r3, [pc, #268]	; (800ce4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d10d      	bne.n	800cd66 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cd4a:	4b40      	ldr	r3, [pc, #256]	; (800ce4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd4e:	4a3f      	ldr	r2, [pc, #252]	; (800ce4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd54:	6593      	str	r3, [r2, #88]	; 0x58
 800cd56:	4b3d      	ldr	r3, [pc, #244]	; (800ce4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cd5e:	60bb      	str	r3, [r7, #8]
 800cd60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cd62:	2301      	movs	r3, #1
 800cd64:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cd66:	4b3a      	ldr	r3, [pc, #232]	; (800ce50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	4a39      	ldr	r2, [pc, #228]	; (800ce50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800cd6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd70:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800cd72:	f7fb ff5b 	bl	8008c2c <HAL_GetTick>
 800cd76:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cd78:	e009      	b.n	800cd8e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cd7a:	f7fb ff57 	bl	8008c2c <HAL_GetTick>
 800cd7e:	4602      	mov	r2, r0
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	1ad3      	subs	r3, r2, r3
 800cd84:	2b02      	cmp	r3, #2
 800cd86:	d902      	bls.n	800cd8e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800cd88:	2303      	movs	r3, #3
 800cd8a:	74fb      	strb	r3, [r7, #19]
        break;
 800cd8c:	e005      	b.n	800cd9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cd8e:	4b30      	ldr	r3, [pc, #192]	; (800ce50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d0ef      	beq.n	800cd7a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800cd9a:	7cfb      	ldrb	r3, [r7, #19]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d159      	bne.n	800ce54 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800cda0:	4b2a      	ldr	r3, [pc, #168]	; (800ce4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cda2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cda6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cdaa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800cdac:	697b      	ldr	r3, [r7, #20]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d01e      	beq.n	800cdf0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cdb6:	697a      	ldr	r2, [r7, #20]
 800cdb8:	429a      	cmp	r2, r3
 800cdba:	d019      	beq.n	800cdf0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800cdbc:	4b23      	ldr	r3, [pc, #140]	; (800ce4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cdbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cdc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cdc6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800cdc8:	4b20      	ldr	r3, [pc, #128]	; (800ce4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cdca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cdce:	4a1f      	ldr	r2, [pc, #124]	; (800ce4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cdd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cdd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800cdd8:	4b1c      	ldr	r3, [pc, #112]	; (800ce4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cdda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cdde:	4a1b      	ldr	r2, [pc, #108]	; (800ce4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cde0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cde4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800cde8:	4a18      	ldr	r2, [pc, #96]	; (800ce4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cdea:	697b      	ldr	r3, [r7, #20]
 800cdec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800cdf0:	697b      	ldr	r3, [r7, #20]
 800cdf2:	f003 0301 	and.w	r3, r3, #1
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d016      	beq.n	800ce28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cdfa:	f7fb ff17 	bl	8008c2c <HAL_GetTick>
 800cdfe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ce00:	e00b      	b.n	800ce1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ce02:	f7fb ff13 	bl	8008c2c <HAL_GetTick>
 800ce06:	4602      	mov	r2, r0
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	1ad3      	subs	r3, r2, r3
 800ce0c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce10:	4293      	cmp	r3, r2
 800ce12:	d902      	bls.n	800ce1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800ce14:	2303      	movs	r3, #3
 800ce16:	74fb      	strb	r3, [r7, #19]
            break;
 800ce18:	e006      	b.n	800ce28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ce1a:	4b0c      	ldr	r3, [pc, #48]	; (800ce4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ce1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce20:	f003 0302 	and.w	r3, r3, #2
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d0ec      	beq.n	800ce02 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800ce28:	7cfb      	ldrb	r3, [r7, #19]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d10b      	bne.n	800ce46 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ce2e:	4b07      	ldr	r3, [pc, #28]	; (800ce4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ce30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce3c:	4903      	ldr	r1, [pc, #12]	; (800ce4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ce3e:	4313      	orrs	r3, r2
 800ce40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800ce44:	e008      	b.n	800ce58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ce46:	7cfb      	ldrb	r3, [r7, #19]
 800ce48:	74bb      	strb	r3, [r7, #18]
 800ce4a:	e005      	b.n	800ce58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800ce4c:	40021000 	.word	0x40021000
 800ce50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce54:	7cfb      	ldrb	r3, [r7, #19]
 800ce56:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ce58:	7c7b      	ldrb	r3, [r7, #17]
 800ce5a:	2b01      	cmp	r3, #1
 800ce5c:	d105      	bne.n	800ce6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ce5e:	4baf      	ldr	r3, [pc, #700]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ce60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce62:	4aae      	ldr	r2, [pc, #696]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ce64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ce68:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	f003 0301 	and.w	r3, r3, #1
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d00a      	beq.n	800ce8c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ce76:	4ba9      	ldr	r3, [pc, #676]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ce78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce7c:	f023 0203 	bic.w	r2, r3, #3
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	685b      	ldr	r3, [r3, #4]
 800ce84:	49a5      	ldr	r1, [pc, #660]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ce86:	4313      	orrs	r3, r2
 800ce88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	f003 0302 	and.w	r3, r3, #2
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d00a      	beq.n	800ceae <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ce98:	4ba0      	ldr	r3, [pc, #640]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ce9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce9e:	f023 020c 	bic.w	r2, r3, #12
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	689b      	ldr	r3, [r3, #8]
 800cea6:	499d      	ldr	r1, [pc, #628]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cea8:	4313      	orrs	r3, r2
 800ceaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	f003 0304 	and.w	r3, r3, #4
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d00a      	beq.n	800ced0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ceba:	4b98      	ldr	r3, [pc, #608]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cec0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	68db      	ldr	r3, [r3, #12]
 800cec8:	4994      	ldr	r1, [pc, #592]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ceca:	4313      	orrs	r3, r2
 800cecc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	f003 0308 	and.w	r3, r3, #8
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d00a      	beq.n	800cef2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800cedc:	4b8f      	ldr	r3, [pc, #572]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cee2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	691b      	ldr	r3, [r3, #16]
 800ceea:	498c      	ldr	r1, [pc, #560]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ceec:	4313      	orrs	r3, r2
 800ceee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	f003 0310 	and.w	r3, r3, #16
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d00a      	beq.n	800cf14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800cefe:	4b87      	ldr	r3, [pc, #540]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cf00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	695b      	ldr	r3, [r3, #20]
 800cf0c:	4983      	ldr	r1, [pc, #524]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cf0e:	4313      	orrs	r3, r2
 800cf10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	f003 0320 	and.w	r3, r3, #32
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d00a      	beq.n	800cf36 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800cf20:	4b7e      	ldr	r3, [pc, #504]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cf22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf26:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	699b      	ldr	r3, [r3, #24]
 800cf2e:	497b      	ldr	r1, [pc, #492]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cf30:	4313      	orrs	r3, r2
 800cf32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d00a      	beq.n	800cf58 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800cf42:	4b76      	ldr	r3, [pc, #472]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cf44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf48:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	69db      	ldr	r3, [r3, #28]
 800cf50:	4972      	ldr	r1, [pc, #456]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cf52:	4313      	orrs	r3, r2
 800cf54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d00a      	beq.n	800cf7a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800cf64:	4b6d      	ldr	r3, [pc, #436]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cf66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf6a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	6a1b      	ldr	r3, [r3, #32]
 800cf72:	496a      	ldr	r1, [pc, #424]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cf74:	4313      	orrs	r3, r2
 800cf76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d00a      	beq.n	800cf9c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800cf86:	4b65      	ldr	r3, [pc, #404]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cf88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf94:	4961      	ldr	r1, [pc, #388]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cf96:	4313      	orrs	r3, r2
 800cf98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d00a      	beq.n	800cfbe <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800cfa8:	4b5c      	ldr	r3, [pc, #368]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cfaa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800cfae:	f023 0203 	bic.w	r2, r3, #3
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfb6:	4959      	ldr	r1, [pc, #356]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cfb8:	4313      	orrs	r3, r2
 800cfba:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d00a      	beq.n	800cfe0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cfca:	4b54      	ldr	r3, [pc, #336]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cfcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cfd0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfd8:	4950      	ldr	r1, [pc, #320]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cfda:	4313      	orrs	r3, r2
 800cfdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d015      	beq.n	800d018 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cfec:	4b4b      	ldr	r3, [pc, #300]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cfee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cff2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cffa:	4948      	ldr	r1, [pc, #288]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cffc:	4313      	orrs	r3, r2
 800cffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d006:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d00a:	d105      	bne.n	800d018 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d00c:	4b43      	ldr	r3, [pc, #268]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d00e:	68db      	ldr	r3, [r3, #12]
 800d010:	4a42      	ldr	r2, [pc, #264]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d012:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d016:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d020:	2b00      	cmp	r3, #0
 800d022:	d015      	beq.n	800d050 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800d024:	4b3d      	ldr	r3, [pc, #244]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d02a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d032:	493a      	ldr	r1, [pc, #232]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d034:	4313      	orrs	r3, r2
 800d036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d03e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d042:	d105      	bne.n	800d050 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d044:	4b35      	ldr	r3, [pc, #212]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d046:	68db      	ldr	r3, [r3, #12]
 800d048:	4a34      	ldr	r2, [pc, #208]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d04a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d04e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d015      	beq.n	800d088 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d05c:	4b2f      	ldr	r3, [pc, #188]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d05e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d062:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d06a:	492c      	ldr	r1, [pc, #176]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d06c:	4313      	orrs	r3, r2
 800d06e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d076:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d07a:	d105      	bne.n	800d088 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d07c:	4b27      	ldr	r3, [pc, #156]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d07e:	68db      	ldr	r3, [r3, #12]
 800d080:	4a26      	ldr	r2, [pc, #152]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d082:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d086:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d090:	2b00      	cmp	r3, #0
 800d092:	d015      	beq.n	800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d094:	4b21      	ldr	r3, [pc, #132]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d09a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0a2:	491e      	ldr	r1, [pc, #120]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d0a4:	4313      	orrs	r3, r2
 800d0a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d0b2:	d105      	bne.n	800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d0b4:	4b19      	ldr	r3, [pc, #100]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d0b6:	68db      	ldr	r3, [r3, #12]
 800d0b8:	4a18      	ldr	r2, [pc, #96]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d0ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d0be:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d015      	beq.n	800d0f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d0cc:	4b13      	ldr	r3, [pc, #76]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d0ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d0d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0da:	4910      	ldr	r1, [pc, #64]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d0dc:	4313      	orrs	r3, r2
 800d0de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d0ea:	d105      	bne.n	800d0f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d0ec:	4b0b      	ldr	r3, [pc, #44]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d0ee:	68db      	ldr	r3, [r3, #12]
 800d0f0:	4a0a      	ldr	r2, [pc, #40]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d0f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d0f6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d100:	2b00      	cmp	r3, #0
 800d102:	d018      	beq.n	800d136 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800d104:	4b05      	ldr	r3, [pc, #20]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d10a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d112:	4902      	ldr	r1, [pc, #8]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d114:	4313      	orrs	r3, r2
 800d116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800d11a:	e001      	b.n	800d120 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800d11c:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d124:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d128:	d105      	bne.n	800d136 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d12a:	4b21      	ldr	r3, [pc, #132]	; (800d1b0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d12c:	68db      	ldr	r3, [r3, #12]
 800d12e:	4a20      	ldr	r2, [pc, #128]	; (800d1b0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d134:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d015      	beq.n	800d16e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800d142:	4b1b      	ldr	r3, [pc, #108]	; (800d1b0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d148:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d150:	4917      	ldr	r1, [pc, #92]	; (800d1b0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d152:	4313      	orrs	r3, r2
 800d154:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d15c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d160:	d105      	bne.n	800d16e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d162:	4b13      	ldr	r3, [pc, #76]	; (800d1b0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d164:	68db      	ldr	r3, [r3, #12]
 800d166:	4a12      	ldr	r2, [pc, #72]	; (800d1b0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d16c:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d176:	2b00      	cmp	r3, #0
 800d178:	d015      	beq.n	800d1a6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800d17a:	4b0d      	ldr	r3, [pc, #52]	; (800d1b0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d17c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d180:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d188:	4909      	ldr	r1, [pc, #36]	; (800d1b0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d18a:	4313      	orrs	r3, r2
 800d18c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d194:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d198:	d105      	bne.n	800d1a6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d19a:	4b05      	ldr	r3, [pc, #20]	; (800d1b0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d19c:	68db      	ldr	r3, [r3, #12]
 800d19e:	4a04      	ldr	r2, [pc, #16]	; (800d1b0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d1a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d1a4:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800d1a6:	7cbb      	ldrb	r3, [r7, #18]
}
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	3718      	adds	r7, #24
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	bd80      	pop	{r7, pc}
 800d1b0:	40021000 	.word	0x40021000

0800d1b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b084      	sub	sp, #16
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d101      	bne.n	800d1c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d1c2:	2301      	movs	r3, #1
 800d1c4:	e084      	b.n	800d2d0 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d1d2:	b2db      	uxtb	r3, r3
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d106      	bne.n	800d1e6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2200      	movs	r2, #0
 800d1dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f7fa fef9 	bl	8007fd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2202      	movs	r2, #2
 800d1ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	681a      	ldr	r2, [r3, #0]
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d1fc:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	68db      	ldr	r3, [r3, #12]
 800d202:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d206:	d902      	bls.n	800d20e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d208:	2300      	movs	r3, #0
 800d20a:	60fb      	str	r3, [r7, #12]
 800d20c:	e002      	b.n	800d214 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d20e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d212:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	68db      	ldr	r3, [r3, #12]
 800d218:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800d21c:	d007      	beq.n	800d22e <HAL_SPI_Init+0x7a>
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	68db      	ldr	r3, [r3, #12]
 800d222:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d226:	d002      	beq.n	800d22e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2200      	movs	r2, #0
 800d22c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d232:	2b00      	cmp	r3, #0
 800d234:	d10b      	bne.n	800d24e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	68db      	ldr	r3, [r3, #12]
 800d23a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d23e:	d903      	bls.n	800d248 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2202      	movs	r2, #2
 800d244:	631a      	str	r2, [r3, #48]	; 0x30
 800d246:	e002      	b.n	800d24e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2201      	movs	r2, #1
 800d24c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	685a      	ldr	r2, [r3, #4]
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	689b      	ldr	r3, [r3, #8]
 800d256:	431a      	orrs	r2, r3
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	691b      	ldr	r3, [r3, #16]
 800d25c:	431a      	orrs	r2, r3
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	695b      	ldr	r3, [r3, #20]
 800d262:	431a      	orrs	r2, r3
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	699b      	ldr	r3, [r3, #24]
 800d268:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d26c:	431a      	orrs	r2, r3
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	69db      	ldr	r3, [r3, #28]
 800d272:	431a      	orrs	r2, r3
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	6a1b      	ldr	r3, [r3, #32]
 800d278:	ea42 0103 	orr.w	r1, r2, r3
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	430a      	orrs	r2, r1
 800d286:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	699b      	ldr	r3, [r3, #24]
 800d28c:	0c1b      	lsrs	r3, r3, #16
 800d28e:	f003 0204 	and.w	r2, r3, #4
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d296:	431a      	orrs	r2, r3
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d29c:	431a      	orrs	r2, r3
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	68db      	ldr	r3, [r3, #12]
 800d2a2:	ea42 0103 	orr.w	r1, r2, r3
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	68fa      	ldr	r2, [r7, #12]
 800d2ac:	430a      	orrs	r2, r1
 800d2ae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	69da      	ldr	r2, [r3, #28]
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d2be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	2201      	movs	r2, #1
 800d2ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800d2ce:	2300      	movs	r3, #0
}
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	3710      	adds	r7, #16
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd80      	pop	{r7, pc}

0800d2d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b082      	sub	sp, #8
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d101      	bne.n	800d2ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d2e6:	2301      	movs	r3, #1
 800d2e8:	e049      	b.n	800d37e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d2f0:	b2db      	uxtb	r3, r3
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d106      	bne.n	800d304 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	f7fb fb4a 	bl	8008998 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	2202      	movs	r2, #2
 800d308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681a      	ldr	r2, [r3, #0]
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	3304      	adds	r3, #4
 800d314:	4619      	mov	r1, r3
 800d316:	4610      	mov	r0, r2
 800d318:	f000 ff20 	bl	800e15c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2201      	movs	r2, #1
 800d320:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2201      	movs	r2, #1
 800d328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2201      	movs	r2, #1
 800d330:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2201      	movs	r2, #1
 800d338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2201      	movs	r2, #1
 800d340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2201      	movs	r2, #1
 800d348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	2201      	movs	r2, #1
 800d350:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2201      	movs	r2, #1
 800d358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2201      	movs	r2, #1
 800d360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2201      	movs	r2, #1
 800d368:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2201      	movs	r2, #1
 800d370:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2201      	movs	r2, #1
 800d378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d37c:	2300      	movs	r3, #0
}
 800d37e:	4618      	mov	r0, r3
 800d380:	3708      	adds	r7, #8
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}
	...

0800d388 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800d388:	b480      	push	{r7}
 800d38a:	b085      	sub	sp, #20
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d396:	b2db      	uxtb	r3, r3
 800d398:	2b01      	cmp	r3, #1
 800d39a:	d001      	beq.n	800d3a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800d39c:	2301      	movs	r3, #1
 800d39e:	e019      	b.n	800d3d4 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2202      	movs	r2, #2
 800d3a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	689a      	ldr	r2, [r3, #8]
 800d3ae:	4b0c      	ldr	r3, [pc, #48]	; (800d3e0 <HAL_TIM_Base_Start+0x58>)
 800d3b0:	4013      	ands	r3, r2
 800d3b2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	2b06      	cmp	r3, #6
 800d3b8:	d00b      	beq.n	800d3d2 <HAL_TIM_Base_Start+0x4a>
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d3c0:	d007      	beq.n	800d3d2 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	681a      	ldr	r2, [r3, #0]
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	f042 0201 	orr.w	r2, r2, #1
 800d3d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d3d2:	2300      	movs	r3, #0
}
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	3714      	adds	r7, #20
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3de:	4770      	bx	lr
 800d3e0:	00010007 	.word	0x00010007

0800d3e4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800d3e4:	b480      	push	{r7}
 800d3e6:	b083      	sub	sp, #12
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	6a1a      	ldr	r2, [r3, #32]
 800d3f2:	f241 1311 	movw	r3, #4369	; 0x1111
 800d3f6:	4013      	ands	r3, r2
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d10f      	bne.n	800d41c <HAL_TIM_Base_Stop+0x38>
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	6a1a      	ldr	r2, [r3, #32]
 800d402:	f244 4344 	movw	r3, #17476	; 0x4444
 800d406:	4013      	ands	r3, r2
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d107      	bne.n	800d41c <HAL_TIM_Base_Stop+0x38>
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	681a      	ldr	r2, [r3, #0]
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	f022 0201 	bic.w	r2, r2, #1
 800d41a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	2201      	movs	r2, #1
 800d420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d424:	2300      	movs	r3, #0
}
 800d426:	4618      	mov	r0, r3
 800d428:	370c      	adds	r7, #12
 800d42a:	46bd      	mov	sp, r7
 800d42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d430:	4770      	bx	lr
	...

0800d434 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d434:	b480      	push	{r7}
 800d436:	b085      	sub	sp, #20
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d442:	b2db      	uxtb	r3, r3
 800d444:	2b01      	cmp	r3, #1
 800d446:	d001      	beq.n	800d44c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d448:	2301      	movs	r3, #1
 800d44a:	e021      	b.n	800d490 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2202      	movs	r2, #2
 800d450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	68da      	ldr	r2, [r3, #12]
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	f042 0201 	orr.w	r2, r2, #1
 800d462:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	689a      	ldr	r2, [r3, #8]
 800d46a:	4b0c      	ldr	r3, [pc, #48]	; (800d49c <HAL_TIM_Base_Start_IT+0x68>)
 800d46c:	4013      	ands	r3, r2
 800d46e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	2b06      	cmp	r3, #6
 800d474:	d00b      	beq.n	800d48e <HAL_TIM_Base_Start_IT+0x5a>
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d47c:	d007      	beq.n	800d48e <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	681a      	ldr	r2, [r3, #0]
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	f042 0201 	orr.w	r2, r2, #1
 800d48c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d48e:	2300      	movs	r3, #0
}
 800d490:	4618      	mov	r0, r3
 800d492:	3714      	adds	r7, #20
 800d494:	46bd      	mov	sp, r7
 800d496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49a:	4770      	bx	lr
 800d49c:	00010007 	.word	0x00010007

0800d4a0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800d4a0:	b480      	push	{r7}
 800d4a2:	b083      	sub	sp, #12
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	68da      	ldr	r2, [r3, #12]
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	f022 0201 	bic.w	r2, r2, #1
 800d4b6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	6a1a      	ldr	r2, [r3, #32]
 800d4be:	f241 1311 	movw	r3, #4369	; 0x1111
 800d4c2:	4013      	ands	r3, r2
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d10f      	bne.n	800d4e8 <HAL_TIM_Base_Stop_IT+0x48>
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	6a1a      	ldr	r2, [r3, #32]
 800d4ce:	f244 4344 	movw	r3, #17476	; 0x4444
 800d4d2:	4013      	ands	r3, r2
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d107      	bne.n	800d4e8 <HAL_TIM_Base_Stop_IT+0x48>
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	681a      	ldr	r2, [r3, #0]
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	f022 0201 	bic.w	r2, r2, #1
 800d4e6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2201      	movs	r2, #1
 800d4ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d4f0:	2300      	movs	r3, #0
}
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	370c      	adds	r7, #12
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fc:	4770      	bx	lr

0800d4fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d4fe:	b580      	push	{r7, lr}
 800d500:	b082      	sub	sp, #8
 800d502:	af00      	add	r7, sp, #0
 800d504:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d101      	bne.n	800d510 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d50c:	2301      	movs	r3, #1
 800d50e:	e049      	b.n	800d5a4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d516:	b2db      	uxtb	r3, r3
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d106      	bne.n	800d52a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2200      	movs	r2, #0
 800d520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d524:	6878      	ldr	r0, [r7, #4]
 800d526:	f000 f841 	bl	800d5ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	2202      	movs	r2, #2
 800d52e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681a      	ldr	r2, [r3, #0]
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	3304      	adds	r3, #4
 800d53a:	4619      	mov	r1, r3
 800d53c:	4610      	mov	r0, r2
 800d53e:	f000 fe0d 	bl	800e15c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	2201      	movs	r2, #1
 800d546:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	2201      	movs	r2, #1
 800d54e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	2201      	movs	r2, #1
 800d556:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	2201      	movs	r2, #1
 800d55e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	2201      	movs	r2, #1
 800d566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	2201      	movs	r2, #1
 800d56e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	2201      	movs	r2, #1
 800d576:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	2201      	movs	r2, #1
 800d57e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	2201      	movs	r2, #1
 800d586:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2201      	movs	r2, #1
 800d58e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	2201      	movs	r2, #1
 800d596:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	2201      	movs	r2, #1
 800d59e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d5a2:	2300      	movs	r3, #0
}
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	3708      	adds	r7, #8
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	bd80      	pop	{r7, pc}

0800d5ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d5ac:	b480      	push	{r7}
 800d5ae:	b083      	sub	sp, #12
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d5b4:	bf00      	nop
 800d5b6:	370c      	adds	r7, #12
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5be:	4770      	bx	lr

0800d5c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b084      	sub	sp, #16
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
 800d5c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d5ca:	683b      	ldr	r3, [r7, #0]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d109      	bne.n	800d5e4 <HAL_TIM_PWM_Start+0x24>
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d5d6:	b2db      	uxtb	r3, r3
 800d5d8:	2b01      	cmp	r3, #1
 800d5da:	bf14      	ite	ne
 800d5dc:	2301      	movne	r3, #1
 800d5de:	2300      	moveq	r3, #0
 800d5e0:	b2db      	uxtb	r3, r3
 800d5e2:	e03c      	b.n	800d65e <HAL_TIM_PWM_Start+0x9e>
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	2b04      	cmp	r3, #4
 800d5e8:	d109      	bne.n	800d5fe <HAL_TIM_PWM_Start+0x3e>
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d5f0:	b2db      	uxtb	r3, r3
 800d5f2:	2b01      	cmp	r3, #1
 800d5f4:	bf14      	ite	ne
 800d5f6:	2301      	movne	r3, #1
 800d5f8:	2300      	moveq	r3, #0
 800d5fa:	b2db      	uxtb	r3, r3
 800d5fc:	e02f      	b.n	800d65e <HAL_TIM_PWM_Start+0x9e>
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	2b08      	cmp	r3, #8
 800d602:	d109      	bne.n	800d618 <HAL_TIM_PWM_Start+0x58>
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d60a:	b2db      	uxtb	r3, r3
 800d60c:	2b01      	cmp	r3, #1
 800d60e:	bf14      	ite	ne
 800d610:	2301      	movne	r3, #1
 800d612:	2300      	moveq	r3, #0
 800d614:	b2db      	uxtb	r3, r3
 800d616:	e022      	b.n	800d65e <HAL_TIM_PWM_Start+0x9e>
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	2b0c      	cmp	r3, #12
 800d61c:	d109      	bne.n	800d632 <HAL_TIM_PWM_Start+0x72>
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d624:	b2db      	uxtb	r3, r3
 800d626:	2b01      	cmp	r3, #1
 800d628:	bf14      	ite	ne
 800d62a:	2301      	movne	r3, #1
 800d62c:	2300      	moveq	r3, #0
 800d62e:	b2db      	uxtb	r3, r3
 800d630:	e015      	b.n	800d65e <HAL_TIM_PWM_Start+0x9e>
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	2b10      	cmp	r3, #16
 800d636:	d109      	bne.n	800d64c <HAL_TIM_PWM_Start+0x8c>
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d63e:	b2db      	uxtb	r3, r3
 800d640:	2b01      	cmp	r3, #1
 800d642:	bf14      	ite	ne
 800d644:	2301      	movne	r3, #1
 800d646:	2300      	moveq	r3, #0
 800d648:	b2db      	uxtb	r3, r3
 800d64a:	e008      	b.n	800d65e <HAL_TIM_PWM_Start+0x9e>
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d652:	b2db      	uxtb	r3, r3
 800d654:	2b01      	cmp	r3, #1
 800d656:	bf14      	ite	ne
 800d658:	2301      	movne	r3, #1
 800d65a:	2300      	moveq	r3, #0
 800d65c:	b2db      	uxtb	r3, r3
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d001      	beq.n	800d666 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d662:	2301      	movs	r3, #1
 800d664:	e073      	b.n	800d74e <HAL_TIM_PWM_Start+0x18e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d104      	bne.n	800d676 <HAL_TIM_PWM_Start+0xb6>
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2202      	movs	r2, #2
 800d670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d674:	e023      	b.n	800d6be <HAL_TIM_PWM_Start+0xfe>
 800d676:	683b      	ldr	r3, [r7, #0]
 800d678:	2b04      	cmp	r3, #4
 800d67a:	d104      	bne.n	800d686 <HAL_TIM_PWM_Start+0xc6>
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2202      	movs	r2, #2
 800d680:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d684:	e01b      	b.n	800d6be <HAL_TIM_PWM_Start+0xfe>
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	2b08      	cmp	r3, #8
 800d68a:	d104      	bne.n	800d696 <HAL_TIM_PWM_Start+0xd6>
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	2202      	movs	r2, #2
 800d690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d694:	e013      	b.n	800d6be <HAL_TIM_PWM_Start+0xfe>
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	2b0c      	cmp	r3, #12
 800d69a:	d104      	bne.n	800d6a6 <HAL_TIM_PWM_Start+0xe6>
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2202      	movs	r2, #2
 800d6a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d6a4:	e00b      	b.n	800d6be <HAL_TIM_PWM_Start+0xfe>
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	2b10      	cmp	r3, #16
 800d6aa:	d104      	bne.n	800d6b6 <HAL_TIM_PWM_Start+0xf6>
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2202      	movs	r2, #2
 800d6b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d6b4:	e003      	b.n	800d6be <HAL_TIM_PWM_Start+0xfe>
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	2202      	movs	r2, #2
 800d6ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	2201      	movs	r2, #1
 800d6c4:	6839      	ldr	r1, [r7, #0]
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f001 f9b6 	bl	800ea38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	4a21      	ldr	r2, [pc, #132]	; (800d758 <HAL_TIM_PWM_Start+0x198>)
 800d6d2:	4293      	cmp	r3, r2
 800d6d4:	d018      	beq.n	800d708 <HAL_TIM_PWM_Start+0x148>
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	4a20      	ldr	r2, [pc, #128]	; (800d75c <HAL_TIM_PWM_Start+0x19c>)
 800d6dc:	4293      	cmp	r3, r2
 800d6de:	d013      	beq.n	800d708 <HAL_TIM_PWM_Start+0x148>
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	4a1e      	ldr	r2, [pc, #120]	; (800d760 <HAL_TIM_PWM_Start+0x1a0>)
 800d6e6:	4293      	cmp	r3, r2
 800d6e8:	d00e      	beq.n	800d708 <HAL_TIM_PWM_Start+0x148>
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	4a1d      	ldr	r2, [pc, #116]	; (800d764 <HAL_TIM_PWM_Start+0x1a4>)
 800d6f0:	4293      	cmp	r3, r2
 800d6f2:	d009      	beq.n	800d708 <HAL_TIM_PWM_Start+0x148>
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	4a1b      	ldr	r2, [pc, #108]	; (800d768 <HAL_TIM_PWM_Start+0x1a8>)
 800d6fa:	4293      	cmp	r3, r2
 800d6fc:	d004      	beq.n	800d708 <HAL_TIM_PWM_Start+0x148>
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	4a1a      	ldr	r2, [pc, #104]	; (800d76c <HAL_TIM_PWM_Start+0x1ac>)
 800d704:	4293      	cmp	r3, r2
 800d706:	d101      	bne.n	800d70c <HAL_TIM_PWM_Start+0x14c>
 800d708:	2301      	movs	r3, #1
 800d70a:	e000      	b.n	800d70e <HAL_TIM_PWM_Start+0x14e>
 800d70c:	2300      	movs	r3, #0
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d007      	beq.n	800d722 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d720:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	689a      	ldr	r2, [r3, #8]
 800d728:	4b11      	ldr	r3, [pc, #68]	; (800d770 <HAL_TIM_PWM_Start+0x1b0>)
 800d72a:	4013      	ands	r3, r2
 800d72c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	2b06      	cmp	r3, #6
 800d732:	d00b      	beq.n	800d74c <HAL_TIM_PWM_Start+0x18c>
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d73a:	d007      	beq.n	800d74c <HAL_TIM_PWM_Start+0x18c>
  {
    __HAL_TIM_ENABLE(htim);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	681a      	ldr	r2, [r3, #0]
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	f042 0201 	orr.w	r2, r2, #1
 800d74a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d74c:	2300      	movs	r3, #0
}
 800d74e:	4618      	mov	r0, r3
 800d750:	3710      	adds	r7, #16
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}
 800d756:	bf00      	nop
 800d758:	40012c00 	.word	0x40012c00
 800d75c:	40013400 	.word	0x40013400
 800d760:	40014000 	.word	0x40014000
 800d764:	40014400 	.word	0x40014400
 800d768:	40014800 	.word	0x40014800
 800d76c:	40015000 	.word	0x40015000
 800d770:	00010007 	.word	0x00010007

0800d774 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b082      	sub	sp, #8
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
 800d77c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	2200      	movs	r2, #0
 800d784:	6839      	ldr	r1, [r7, #0]
 800d786:	4618      	mov	r0, r3
 800d788:	f001 f956 	bl	800ea38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	4a40      	ldr	r2, [pc, #256]	; (800d894 <HAL_TIM_PWM_Stop+0x120>)
 800d792:	4293      	cmp	r3, r2
 800d794:	d018      	beq.n	800d7c8 <HAL_TIM_PWM_Stop+0x54>
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	4a3f      	ldr	r2, [pc, #252]	; (800d898 <HAL_TIM_PWM_Stop+0x124>)
 800d79c:	4293      	cmp	r3, r2
 800d79e:	d013      	beq.n	800d7c8 <HAL_TIM_PWM_Stop+0x54>
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	4a3d      	ldr	r2, [pc, #244]	; (800d89c <HAL_TIM_PWM_Stop+0x128>)
 800d7a6:	4293      	cmp	r3, r2
 800d7a8:	d00e      	beq.n	800d7c8 <HAL_TIM_PWM_Stop+0x54>
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	4a3c      	ldr	r2, [pc, #240]	; (800d8a0 <HAL_TIM_PWM_Stop+0x12c>)
 800d7b0:	4293      	cmp	r3, r2
 800d7b2:	d009      	beq.n	800d7c8 <HAL_TIM_PWM_Stop+0x54>
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	4a3a      	ldr	r2, [pc, #232]	; (800d8a4 <HAL_TIM_PWM_Stop+0x130>)
 800d7ba:	4293      	cmp	r3, r2
 800d7bc:	d004      	beq.n	800d7c8 <HAL_TIM_PWM_Stop+0x54>
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	4a39      	ldr	r2, [pc, #228]	; (800d8a8 <HAL_TIM_PWM_Stop+0x134>)
 800d7c4:	4293      	cmp	r3, r2
 800d7c6:	d101      	bne.n	800d7cc <HAL_TIM_PWM_Stop+0x58>
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	e000      	b.n	800d7ce <HAL_TIM_PWM_Stop+0x5a>
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d017      	beq.n	800d802 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	6a1a      	ldr	r2, [r3, #32]
 800d7d8:	f241 1311 	movw	r3, #4369	; 0x1111
 800d7dc:	4013      	ands	r3, r2
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d10f      	bne.n	800d802 <HAL_TIM_PWM_Stop+0x8e>
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	6a1a      	ldr	r2, [r3, #32]
 800d7e8:	f244 4344 	movw	r3, #17476	; 0x4444
 800d7ec:	4013      	ands	r3, r2
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d107      	bne.n	800d802 <HAL_TIM_PWM_Stop+0x8e>
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d800:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	6a1a      	ldr	r2, [r3, #32]
 800d808:	f241 1311 	movw	r3, #4369	; 0x1111
 800d80c:	4013      	ands	r3, r2
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d10f      	bne.n	800d832 <HAL_TIM_PWM_Stop+0xbe>
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	6a1a      	ldr	r2, [r3, #32]
 800d818:	f244 4344 	movw	r3, #17476	; 0x4444
 800d81c:	4013      	ands	r3, r2
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d107      	bne.n	800d832 <HAL_TIM_PWM_Stop+0xbe>
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	681a      	ldr	r2, [r3, #0]
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	f022 0201 	bic.w	r2, r2, #1
 800d830:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800d832:	683b      	ldr	r3, [r7, #0]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d104      	bne.n	800d842 <HAL_TIM_PWM_Stop+0xce>
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	2201      	movs	r2, #1
 800d83c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d840:	e023      	b.n	800d88a <HAL_TIM_PWM_Stop+0x116>
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	2b04      	cmp	r3, #4
 800d846:	d104      	bne.n	800d852 <HAL_TIM_PWM_Stop+0xde>
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	2201      	movs	r2, #1
 800d84c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d850:	e01b      	b.n	800d88a <HAL_TIM_PWM_Stop+0x116>
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	2b08      	cmp	r3, #8
 800d856:	d104      	bne.n	800d862 <HAL_TIM_PWM_Stop+0xee>
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	2201      	movs	r2, #1
 800d85c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d860:	e013      	b.n	800d88a <HAL_TIM_PWM_Stop+0x116>
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	2b0c      	cmp	r3, #12
 800d866:	d104      	bne.n	800d872 <HAL_TIM_PWM_Stop+0xfe>
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	2201      	movs	r2, #1
 800d86c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d870:	e00b      	b.n	800d88a <HAL_TIM_PWM_Stop+0x116>
 800d872:	683b      	ldr	r3, [r7, #0]
 800d874:	2b10      	cmp	r3, #16
 800d876:	d104      	bne.n	800d882 <HAL_TIM_PWM_Stop+0x10e>
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2201      	movs	r2, #1
 800d87c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d880:	e003      	b.n	800d88a <HAL_TIM_PWM_Stop+0x116>
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	2201      	movs	r2, #1
 800d886:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800d88a:	2300      	movs	r3, #0
}
 800d88c:	4618      	mov	r0, r3
 800d88e:	3708      	adds	r7, #8
 800d890:	46bd      	mov	sp, r7
 800d892:	bd80      	pop	{r7, pc}
 800d894:	40012c00 	.word	0x40012c00
 800d898:	40013400 	.word	0x40013400
 800d89c:	40014000 	.word	0x40014000
 800d8a0:	40014400 	.word	0x40014400
 800d8a4:	40014800 	.word	0x40014800
 800d8a8:	40015000 	.word	0x40015000

0800d8ac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b086      	sub	sp, #24
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
 800d8b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d101      	bne.n	800d8c0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800d8bc:	2301      	movs	r3, #1
 800d8be:	e097      	b.n	800d9f0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d8c6:	b2db      	uxtb	r3, r3
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d106      	bne.n	800d8da <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800d8d4:	6878      	ldr	r0, [r7, #4]
 800d8d6:	f7fb f80b 	bl	80088f0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	2202      	movs	r2, #2
 800d8de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	689b      	ldr	r3, [r3, #8]
 800d8e8:	687a      	ldr	r2, [r7, #4]
 800d8ea:	6812      	ldr	r2, [r2, #0]
 800d8ec:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800d8f0:	f023 0307 	bic.w	r3, r3, #7
 800d8f4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681a      	ldr	r2, [r3, #0]
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	3304      	adds	r3, #4
 800d8fe:	4619      	mov	r1, r3
 800d900:	4610      	mov	r0, r2
 800d902:	f000 fc2b 	bl	800e15c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	689b      	ldr	r3, [r3, #8]
 800d90c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	699b      	ldr	r3, [r3, #24]
 800d914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	6a1b      	ldr	r3, [r3, #32]
 800d91c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800d91e:	683b      	ldr	r3, [r7, #0]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	697a      	ldr	r2, [r7, #20]
 800d924:	4313      	orrs	r3, r2
 800d926:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800d928:	693b      	ldr	r3, [r7, #16]
 800d92a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d92e:	f023 0303 	bic.w	r3, r3, #3
 800d932:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	689a      	ldr	r2, [r3, #8]
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	699b      	ldr	r3, [r3, #24]
 800d93c:	021b      	lsls	r3, r3, #8
 800d93e:	4313      	orrs	r3, r2
 800d940:	693a      	ldr	r2, [r7, #16]
 800d942:	4313      	orrs	r3, r2
 800d944:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800d946:	693b      	ldr	r3, [r7, #16]
 800d948:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800d94c:	f023 030c 	bic.w	r3, r3, #12
 800d950:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800d952:	693b      	ldr	r3, [r7, #16]
 800d954:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d958:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d95c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	68da      	ldr	r2, [r3, #12]
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	69db      	ldr	r3, [r3, #28]
 800d966:	021b      	lsls	r3, r3, #8
 800d968:	4313      	orrs	r3, r2
 800d96a:	693a      	ldr	r2, [r7, #16]
 800d96c:	4313      	orrs	r3, r2
 800d96e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	691b      	ldr	r3, [r3, #16]
 800d974:	011a      	lsls	r2, r3, #4
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	6a1b      	ldr	r3, [r3, #32]
 800d97a:	031b      	lsls	r3, r3, #12
 800d97c:	4313      	orrs	r3, r2
 800d97e:	693a      	ldr	r2, [r7, #16]
 800d980:	4313      	orrs	r3, r2
 800d982:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800d98a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800d992:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	685a      	ldr	r2, [r3, #4]
 800d998:	683b      	ldr	r3, [r7, #0]
 800d99a:	695b      	ldr	r3, [r3, #20]
 800d99c:	011b      	lsls	r3, r3, #4
 800d99e:	4313      	orrs	r3, r2
 800d9a0:	68fa      	ldr	r2, [r7, #12]
 800d9a2:	4313      	orrs	r3, r2
 800d9a4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	697a      	ldr	r2, [r7, #20]
 800d9ac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	693a      	ldr	r2, [r7, #16]
 800d9b4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	68fa      	ldr	r2, [r7, #12]
 800d9bc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2201      	movs	r2, #1
 800d9c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	2201      	movs	r2, #1
 800d9ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	2201      	movs	r2, #1
 800d9d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	2201      	movs	r2, #1
 800d9da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	2201      	movs	r2, #1
 800d9e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	2201      	movs	r2, #1
 800d9ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d9ee:	2300      	movs	r3, #0
}
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	3718      	adds	r7, #24
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}

0800d9f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b082      	sub	sp, #8
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	691b      	ldr	r3, [r3, #16]
 800da06:	f003 0302 	and.w	r3, r3, #2
 800da0a:	2b02      	cmp	r3, #2
 800da0c:	d122      	bne.n	800da54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	68db      	ldr	r3, [r3, #12]
 800da14:	f003 0302 	and.w	r3, r3, #2
 800da18:	2b02      	cmp	r3, #2
 800da1a:	d11b      	bne.n	800da54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	f06f 0202 	mvn.w	r2, #2
 800da24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2201      	movs	r2, #1
 800da2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	699b      	ldr	r3, [r3, #24]
 800da32:	f003 0303 	and.w	r3, r3, #3
 800da36:	2b00      	cmp	r3, #0
 800da38:	d003      	beq.n	800da42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800da3a:	6878      	ldr	r0, [r7, #4]
 800da3c:	f000 fb70 	bl	800e120 <HAL_TIM_IC_CaptureCallback>
 800da40:	e005      	b.n	800da4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	f000 fb62 	bl	800e10c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	f000 fb73 	bl	800e134 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	2200      	movs	r2, #0
 800da52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	691b      	ldr	r3, [r3, #16]
 800da5a:	f003 0304 	and.w	r3, r3, #4
 800da5e:	2b04      	cmp	r3, #4
 800da60:	d122      	bne.n	800daa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	68db      	ldr	r3, [r3, #12]
 800da68:	f003 0304 	and.w	r3, r3, #4
 800da6c:	2b04      	cmp	r3, #4
 800da6e:	d11b      	bne.n	800daa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	f06f 0204 	mvn.w	r2, #4
 800da78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	2202      	movs	r2, #2
 800da7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	699b      	ldr	r3, [r3, #24]
 800da86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d003      	beq.n	800da96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800da8e:	6878      	ldr	r0, [r7, #4]
 800da90:	f000 fb46 	bl	800e120 <HAL_TIM_IC_CaptureCallback>
 800da94:	e005      	b.n	800daa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800da96:	6878      	ldr	r0, [r7, #4]
 800da98:	f000 fb38 	bl	800e10c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da9c:	6878      	ldr	r0, [r7, #4]
 800da9e:	f000 fb49 	bl	800e134 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	2200      	movs	r2, #0
 800daa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	691b      	ldr	r3, [r3, #16]
 800daae:	f003 0308 	and.w	r3, r3, #8
 800dab2:	2b08      	cmp	r3, #8
 800dab4:	d122      	bne.n	800dafc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	68db      	ldr	r3, [r3, #12]
 800dabc:	f003 0308 	and.w	r3, r3, #8
 800dac0:	2b08      	cmp	r3, #8
 800dac2:	d11b      	bne.n	800dafc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	f06f 0208 	mvn.w	r2, #8
 800dacc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	2204      	movs	r2, #4
 800dad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	69db      	ldr	r3, [r3, #28]
 800dada:	f003 0303 	and.w	r3, r3, #3
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d003      	beq.n	800daea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dae2:	6878      	ldr	r0, [r7, #4]
 800dae4:	f000 fb1c 	bl	800e120 <HAL_TIM_IC_CaptureCallback>
 800dae8:	e005      	b.n	800daf6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800daea:	6878      	ldr	r0, [r7, #4]
 800daec:	f000 fb0e 	bl	800e10c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800daf0:	6878      	ldr	r0, [r7, #4]
 800daf2:	f000 fb1f 	bl	800e134 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	2200      	movs	r2, #0
 800dafa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	691b      	ldr	r3, [r3, #16]
 800db02:	f003 0310 	and.w	r3, r3, #16
 800db06:	2b10      	cmp	r3, #16
 800db08:	d122      	bne.n	800db50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	68db      	ldr	r3, [r3, #12]
 800db10:	f003 0310 	and.w	r3, r3, #16
 800db14:	2b10      	cmp	r3, #16
 800db16:	d11b      	bne.n	800db50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	f06f 0210 	mvn.w	r2, #16
 800db20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	2208      	movs	r2, #8
 800db26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	69db      	ldr	r3, [r3, #28]
 800db2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800db32:	2b00      	cmp	r3, #0
 800db34:	d003      	beq.n	800db3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800db36:	6878      	ldr	r0, [r7, #4]
 800db38:	f000 faf2 	bl	800e120 <HAL_TIM_IC_CaptureCallback>
 800db3c:	e005      	b.n	800db4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f000 fae4 	bl	800e10c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db44:	6878      	ldr	r0, [r7, #4]
 800db46:	f000 faf5 	bl	800e134 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	2200      	movs	r2, #0
 800db4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	691b      	ldr	r3, [r3, #16]
 800db56:	f003 0301 	and.w	r3, r3, #1
 800db5a:	2b01      	cmp	r3, #1
 800db5c:	d10e      	bne.n	800db7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	68db      	ldr	r3, [r3, #12]
 800db64:	f003 0301 	and.w	r3, r3, #1
 800db68:	2b01      	cmp	r3, #1
 800db6a:	d107      	bne.n	800db7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	f06f 0201 	mvn.w	r2, #1
 800db74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800db76:	6878      	ldr	r0, [r7, #4]
 800db78:	f000 fabe 	bl	800e0f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	691b      	ldr	r3, [r3, #16]
 800db82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db86:	2b80      	cmp	r3, #128	; 0x80
 800db88:	d10e      	bne.n	800dba8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	68db      	ldr	r3, [r3, #12]
 800db90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db94:	2b80      	cmp	r3, #128	; 0x80
 800db96:	d107      	bne.n	800dba8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800dba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dba2:	6878      	ldr	r0, [r7, #4]
 800dba4:	f001 f8c0 	bl	800ed28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	691b      	ldr	r3, [r3, #16]
 800dbae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dbb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dbb6:	d10e      	bne.n	800dbd6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	68db      	ldr	r3, [r3, #12]
 800dbbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dbc2:	2b80      	cmp	r3, #128	; 0x80
 800dbc4:	d107      	bne.n	800dbd6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800dbce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800dbd0:	6878      	ldr	r0, [r7, #4]
 800dbd2:	f001 f8b3 	bl	800ed3c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	691b      	ldr	r3, [r3, #16]
 800dbdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbe0:	2b40      	cmp	r3, #64	; 0x40
 800dbe2:	d10e      	bne.n	800dc02 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	68db      	ldr	r3, [r3, #12]
 800dbea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbee:	2b40      	cmp	r3, #64	; 0x40
 800dbf0:	d107      	bne.n	800dc02 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800dbfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dbfc:	6878      	ldr	r0, [r7, #4]
 800dbfe:	f000 faa3 	bl	800e148 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	691b      	ldr	r3, [r3, #16]
 800dc08:	f003 0320 	and.w	r3, r3, #32
 800dc0c:	2b20      	cmp	r3, #32
 800dc0e:	d10e      	bne.n	800dc2e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	68db      	ldr	r3, [r3, #12]
 800dc16:	f003 0320 	and.w	r3, r3, #32
 800dc1a:	2b20      	cmp	r3, #32
 800dc1c:	d107      	bne.n	800dc2e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	f06f 0220 	mvn.w	r2, #32
 800dc26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dc28:	6878      	ldr	r0, [r7, #4]
 800dc2a:	f001 f873 	bl	800ed14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	691b      	ldr	r3, [r3, #16]
 800dc34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dc38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dc3c:	d10f      	bne.n	800dc5e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	68db      	ldr	r3, [r3, #12]
 800dc44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dc48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dc4c:	d107      	bne.n	800dc5e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800dc56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800dc58:	6878      	ldr	r0, [r7, #4]
 800dc5a:	f001 f879 	bl	800ed50 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	691b      	ldr	r3, [r3, #16]
 800dc64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dc68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dc6c:	d10f      	bne.n	800dc8e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	68db      	ldr	r3, [r3, #12]
 800dc74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dc78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dc7c:	d107      	bne.n	800dc8e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800dc86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800dc88:	6878      	ldr	r0, [r7, #4]
 800dc8a:	f001 f86b 	bl	800ed64 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	691b      	ldr	r3, [r3, #16]
 800dc94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dc98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dc9c:	d10f      	bne.n	800dcbe <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	68db      	ldr	r3, [r3, #12]
 800dca4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dca8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dcac:	d107      	bne.n	800dcbe <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800dcb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800dcb8:	6878      	ldr	r0, [r7, #4]
 800dcba:	f001 f85d 	bl	800ed78 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	691b      	ldr	r3, [r3, #16]
 800dcc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dcc8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800dccc:	d10f      	bne.n	800dcee <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	68db      	ldr	r3, [r3, #12]
 800dcd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dcd8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800dcdc:	d107      	bne.n	800dcee <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800dce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800dce8:	6878      	ldr	r0, [r7, #4]
 800dcea:	f001 f84f 	bl	800ed8c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dcee:	bf00      	nop
 800dcf0:	3708      	adds	r7, #8
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	bd80      	pop	{r7, pc}
	...

0800dcf8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b084      	sub	sp, #16
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	60f8      	str	r0, [r7, #12]
 800dd00:	60b9      	str	r1, [r7, #8]
 800dd02:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dd0a:	2b01      	cmp	r3, #1
 800dd0c:	d101      	bne.n	800dd12 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800dd0e:	2302      	movs	r3, #2
 800dd10:	e0fd      	b.n	800df0e <HAL_TIM_PWM_ConfigChannel+0x216>
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	2201      	movs	r2, #1
 800dd16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	2b14      	cmp	r3, #20
 800dd1e:	f200 80f0 	bhi.w	800df02 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800dd22:	a201      	add	r2, pc, #4	; (adr r2, 800dd28 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800dd24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd28:	0800dd7d 	.word	0x0800dd7d
 800dd2c:	0800df03 	.word	0x0800df03
 800dd30:	0800df03 	.word	0x0800df03
 800dd34:	0800df03 	.word	0x0800df03
 800dd38:	0800ddbd 	.word	0x0800ddbd
 800dd3c:	0800df03 	.word	0x0800df03
 800dd40:	0800df03 	.word	0x0800df03
 800dd44:	0800df03 	.word	0x0800df03
 800dd48:	0800ddff 	.word	0x0800ddff
 800dd4c:	0800df03 	.word	0x0800df03
 800dd50:	0800df03 	.word	0x0800df03
 800dd54:	0800df03 	.word	0x0800df03
 800dd58:	0800de3f 	.word	0x0800de3f
 800dd5c:	0800df03 	.word	0x0800df03
 800dd60:	0800df03 	.word	0x0800df03
 800dd64:	0800df03 	.word	0x0800df03
 800dd68:	0800de81 	.word	0x0800de81
 800dd6c:	0800df03 	.word	0x0800df03
 800dd70:	0800df03 	.word	0x0800df03
 800dd74:	0800df03 	.word	0x0800df03
 800dd78:	0800dec1 	.word	0x0800dec1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	68b9      	ldr	r1, [r7, #8]
 800dd82:	4618      	mov	r0, r3
 800dd84:	f000 fa92 	bl	800e2ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	699a      	ldr	r2, [r3, #24]
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	f042 0208 	orr.w	r2, r2, #8
 800dd96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	699a      	ldr	r2, [r3, #24]
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	f022 0204 	bic.w	r2, r2, #4
 800dda6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	6999      	ldr	r1, [r3, #24]
 800ddae:	68bb      	ldr	r3, [r7, #8]
 800ddb0:	691a      	ldr	r2, [r3, #16]
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	430a      	orrs	r2, r1
 800ddb8:	619a      	str	r2, [r3, #24]
      break;
 800ddba:	e0a3      	b.n	800df04 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	68b9      	ldr	r1, [r7, #8]
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f000 fb0c 	bl	800e3e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	699a      	ldr	r2, [r3, #24]
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ddd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	699a      	ldr	r2, [r3, #24]
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dde6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	6999      	ldr	r1, [r3, #24]
 800ddee:	68bb      	ldr	r3, [r7, #8]
 800ddf0:	691b      	ldr	r3, [r3, #16]
 800ddf2:	021a      	lsls	r2, r3, #8
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	430a      	orrs	r2, r1
 800ddfa:	619a      	str	r2, [r3, #24]
      break;
 800ddfc:	e082      	b.n	800df04 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	68b9      	ldr	r1, [r7, #8]
 800de04:	4618      	mov	r0, r3
 800de06:	f000 fb7f 	bl	800e508 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	69da      	ldr	r2, [r3, #28]
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	f042 0208 	orr.w	r2, r2, #8
 800de18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	69da      	ldr	r2, [r3, #28]
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	f022 0204 	bic.w	r2, r2, #4
 800de28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	69d9      	ldr	r1, [r3, #28]
 800de30:	68bb      	ldr	r3, [r7, #8]
 800de32:	691a      	ldr	r2, [r3, #16]
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	430a      	orrs	r2, r1
 800de3a:	61da      	str	r2, [r3, #28]
      break;
 800de3c:	e062      	b.n	800df04 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	68b9      	ldr	r1, [r7, #8]
 800de44:	4618      	mov	r0, r3
 800de46:	f000 fbf1 	bl	800e62c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	69da      	ldr	r2, [r3, #28]
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800de58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	69da      	ldr	r2, [r3, #28]
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800de68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	69d9      	ldr	r1, [r3, #28]
 800de70:	68bb      	ldr	r3, [r7, #8]
 800de72:	691b      	ldr	r3, [r3, #16]
 800de74:	021a      	lsls	r2, r3, #8
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	430a      	orrs	r2, r1
 800de7c:	61da      	str	r2, [r3, #28]
      break;
 800de7e:	e041      	b.n	800df04 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	68b9      	ldr	r1, [r7, #8]
 800de86:	4618      	mov	r0, r3
 800de88:	f000 fc64 	bl	800e754 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	f042 0208 	orr.w	r2, r2, #8
 800de9a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	f022 0204 	bic.w	r2, r2, #4
 800deaa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800deb2:	68bb      	ldr	r3, [r7, #8]
 800deb4:	691a      	ldr	r2, [r3, #16]
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	430a      	orrs	r2, r1
 800debc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800debe:	e021      	b.n	800df04 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	68b9      	ldr	r1, [r7, #8]
 800dec6:	4618      	mov	r0, r3
 800dec8:	f000 fcae 	bl	800e828 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800deda:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800deea:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800def2:	68bb      	ldr	r3, [r7, #8]
 800def4:	691b      	ldr	r3, [r3, #16]
 800def6:	021a      	lsls	r2, r3, #8
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	430a      	orrs	r2, r1
 800defe:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800df00:	e000      	b.n	800df04 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800df02:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	2200      	movs	r2, #0
 800df08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800df0c:	2300      	movs	r3, #0
}
 800df0e:	4618      	mov	r0, r3
 800df10:	3710      	adds	r7, #16
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}
 800df16:	bf00      	nop

0800df18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b084      	sub	sp, #16
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
 800df20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800df28:	2b01      	cmp	r3, #1
 800df2a:	d101      	bne.n	800df30 <HAL_TIM_ConfigClockSource+0x18>
 800df2c:	2302      	movs	r3, #2
 800df2e:	e0d2      	b.n	800e0d6 <HAL_TIM_ConfigClockSource+0x1be>
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	2201      	movs	r2, #1
 800df34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2202      	movs	r2, #2
 800df3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	689b      	ldr	r3, [r3, #8]
 800df46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800df4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800df52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800df5a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	68fa      	ldr	r2, [r7, #12]
 800df62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800df6c:	f000 80a9 	beq.w	800e0c2 <HAL_TIM_ConfigClockSource+0x1aa>
 800df70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800df74:	d81a      	bhi.n	800dfac <HAL_TIM_ConfigClockSource+0x94>
 800df76:	2b30      	cmp	r3, #48	; 0x30
 800df78:	f000 809a 	beq.w	800e0b0 <HAL_TIM_ConfigClockSource+0x198>
 800df7c:	2b30      	cmp	r3, #48	; 0x30
 800df7e:	d809      	bhi.n	800df94 <HAL_TIM_ConfigClockSource+0x7c>
 800df80:	2b10      	cmp	r3, #16
 800df82:	f000 8095 	beq.w	800e0b0 <HAL_TIM_ConfigClockSource+0x198>
 800df86:	2b20      	cmp	r3, #32
 800df88:	f000 8092 	beq.w	800e0b0 <HAL_TIM_ConfigClockSource+0x198>
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	f000 808f 	beq.w	800e0b0 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800df92:	e097      	b.n	800e0c4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800df94:	2b50      	cmp	r3, #80	; 0x50
 800df96:	d05b      	beq.n	800e050 <HAL_TIM_ConfigClockSource+0x138>
 800df98:	2b50      	cmp	r3, #80	; 0x50
 800df9a:	d802      	bhi.n	800dfa2 <HAL_TIM_ConfigClockSource+0x8a>
 800df9c:	2b40      	cmp	r3, #64	; 0x40
 800df9e:	d077      	beq.n	800e090 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800dfa0:	e090      	b.n	800e0c4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800dfa2:	2b60      	cmp	r3, #96	; 0x60
 800dfa4:	d064      	beq.n	800e070 <HAL_TIM_ConfigClockSource+0x158>
 800dfa6:	2b70      	cmp	r3, #112	; 0x70
 800dfa8:	d028      	beq.n	800dffc <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800dfaa:	e08b      	b.n	800e0c4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800dfac:	4a4c      	ldr	r2, [pc, #304]	; (800e0e0 <HAL_TIM_ConfigClockSource+0x1c8>)
 800dfae:	4293      	cmp	r3, r2
 800dfb0:	d07e      	beq.n	800e0b0 <HAL_TIM_ConfigClockSource+0x198>
 800dfb2:	4a4b      	ldr	r2, [pc, #300]	; (800e0e0 <HAL_TIM_ConfigClockSource+0x1c8>)
 800dfb4:	4293      	cmp	r3, r2
 800dfb6:	d810      	bhi.n	800dfda <HAL_TIM_ConfigClockSource+0xc2>
 800dfb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dfbc:	d078      	beq.n	800e0b0 <HAL_TIM_ConfigClockSource+0x198>
 800dfbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dfc2:	d803      	bhi.n	800dfcc <HAL_TIM_ConfigClockSource+0xb4>
 800dfc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dfc8:	d02f      	beq.n	800e02a <HAL_TIM_ConfigClockSource+0x112>
      break;
 800dfca:	e07b      	b.n	800e0c4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800dfcc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800dfd0:	d06e      	beq.n	800e0b0 <HAL_TIM_ConfigClockSource+0x198>
 800dfd2:	4a44      	ldr	r2, [pc, #272]	; (800e0e4 <HAL_TIM_ConfigClockSource+0x1cc>)
 800dfd4:	4293      	cmp	r3, r2
 800dfd6:	d06b      	beq.n	800e0b0 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800dfd8:	e074      	b.n	800e0c4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800dfda:	4a43      	ldr	r2, [pc, #268]	; (800e0e8 <HAL_TIM_ConfigClockSource+0x1d0>)
 800dfdc:	4293      	cmp	r3, r2
 800dfde:	d067      	beq.n	800e0b0 <HAL_TIM_ConfigClockSource+0x198>
 800dfe0:	4a41      	ldr	r2, [pc, #260]	; (800e0e8 <HAL_TIM_ConfigClockSource+0x1d0>)
 800dfe2:	4293      	cmp	r3, r2
 800dfe4:	d803      	bhi.n	800dfee <HAL_TIM_ConfigClockSource+0xd6>
 800dfe6:	4a41      	ldr	r2, [pc, #260]	; (800e0ec <HAL_TIM_ConfigClockSource+0x1d4>)
 800dfe8:	4293      	cmp	r3, r2
 800dfea:	d061      	beq.n	800e0b0 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800dfec:	e06a      	b.n	800e0c4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800dfee:	4a40      	ldr	r2, [pc, #256]	; (800e0f0 <HAL_TIM_ConfigClockSource+0x1d8>)
 800dff0:	4293      	cmp	r3, r2
 800dff2:	d05d      	beq.n	800e0b0 <HAL_TIM_ConfigClockSource+0x198>
 800dff4:	4a3f      	ldr	r2, [pc, #252]	; (800e0f4 <HAL_TIM_ConfigClockSource+0x1dc>)
 800dff6:	4293      	cmp	r3, r2
 800dff8:	d05a      	beq.n	800e0b0 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800dffa:	e063      	b.n	800e0c4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	6818      	ldr	r0, [r3, #0]
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	6899      	ldr	r1, [r3, #8]
 800e004:	683b      	ldr	r3, [r7, #0]
 800e006:	685a      	ldr	r2, [r3, #4]
 800e008:	683b      	ldr	r3, [r7, #0]
 800e00a:	68db      	ldr	r3, [r3, #12]
 800e00c:	f000 fcf4 	bl	800e9f8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	689b      	ldr	r3, [r3, #8]
 800e016:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e01e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	68fa      	ldr	r2, [r7, #12]
 800e026:	609a      	str	r2, [r3, #8]
      break;
 800e028:	e04c      	b.n	800e0c4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6818      	ldr	r0, [r3, #0]
 800e02e:	683b      	ldr	r3, [r7, #0]
 800e030:	6899      	ldr	r1, [r3, #8]
 800e032:	683b      	ldr	r3, [r7, #0]
 800e034:	685a      	ldr	r2, [r3, #4]
 800e036:	683b      	ldr	r3, [r7, #0]
 800e038:	68db      	ldr	r3, [r3, #12]
 800e03a:	f000 fcdd 	bl	800e9f8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	689a      	ldr	r2, [r3, #8]
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e04c:	609a      	str	r2, [r3, #8]
      break;
 800e04e:	e039      	b.n	800e0c4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	6818      	ldr	r0, [r3, #0]
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	6859      	ldr	r1, [r3, #4]
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	68db      	ldr	r3, [r3, #12]
 800e05c:	461a      	mov	r2, r3
 800e05e:	f000 fc4f 	bl	800e900 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	2150      	movs	r1, #80	; 0x50
 800e068:	4618      	mov	r0, r3
 800e06a:	f000 fca8 	bl	800e9be <TIM_ITRx_SetConfig>
      break;
 800e06e:	e029      	b.n	800e0c4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	6818      	ldr	r0, [r3, #0]
 800e074:	683b      	ldr	r3, [r7, #0]
 800e076:	6859      	ldr	r1, [r3, #4]
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	68db      	ldr	r3, [r3, #12]
 800e07c:	461a      	mov	r2, r3
 800e07e:	f000 fc6e 	bl	800e95e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	2160      	movs	r1, #96	; 0x60
 800e088:	4618      	mov	r0, r3
 800e08a:	f000 fc98 	bl	800e9be <TIM_ITRx_SetConfig>
      break;
 800e08e:	e019      	b.n	800e0c4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	6818      	ldr	r0, [r3, #0]
 800e094:	683b      	ldr	r3, [r7, #0]
 800e096:	6859      	ldr	r1, [r3, #4]
 800e098:	683b      	ldr	r3, [r7, #0]
 800e09a:	68db      	ldr	r3, [r3, #12]
 800e09c:	461a      	mov	r2, r3
 800e09e:	f000 fc2f 	bl	800e900 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	2140      	movs	r1, #64	; 0x40
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	f000 fc88 	bl	800e9be <TIM_ITRx_SetConfig>
      break;
 800e0ae:	e009      	b.n	800e0c4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681a      	ldr	r2, [r3, #0]
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	4619      	mov	r1, r3
 800e0ba:	4610      	mov	r0, r2
 800e0bc:	f000 fc7f 	bl	800e9be <TIM_ITRx_SetConfig>
      break;
 800e0c0:	e000      	b.n	800e0c4 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800e0c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	2201      	movs	r2, #1
 800e0c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e0d4:	2300      	movs	r3, #0
}
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	3710      	adds	r7, #16
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	bd80      	pop	{r7, pc}
 800e0de:	bf00      	nop
 800e0e0:	00100030 	.word	0x00100030
 800e0e4:	00100020 	.word	0x00100020
 800e0e8:	00100050 	.word	0x00100050
 800e0ec:	00100040 	.word	0x00100040
 800e0f0:	00100060 	.word	0x00100060
 800e0f4:	00100070 	.word	0x00100070

0800e0f8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e0f8:	b480      	push	{r7}
 800e0fa:	b083      	sub	sp, #12
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800e100:	bf00      	nop
 800e102:	370c      	adds	r7, #12
 800e104:	46bd      	mov	sp, r7
 800e106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10a:	4770      	bx	lr

0800e10c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e10c:	b480      	push	{r7}
 800e10e:	b083      	sub	sp, #12
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e114:	bf00      	nop
 800e116:	370c      	adds	r7, #12
 800e118:	46bd      	mov	sp, r7
 800e11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11e:	4770      	bx	lr

0800e120 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e120:	b480      	push	{r7}
 800e122:	b083      	sub	sp, #12
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e128:	bf00      	nop
 800e12a:	370c      	adds	r7, #12
 800e12c:	46bd      	mov	sp, r7
 800e12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e132:	4770      	bx	lr

0800e134 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e134:	b480      	push	{r7}
 800e136:	b083      	sub	sp, #12
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e13c:	bf00      	nop
 800e13e:	370c      	adds	r7, #12
 800e140:	46bd      	mov	sp, r7
 800e142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e146:	4770      	bx	lr

0800e148 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e148:	b480      	push	{r7}
 800e14a:	b083      	sub	sp, #12
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e150:	bf00      	nop
 800e152:	370c      	adds	r7, #12
 800e154:	46bd      	mov	sp, r7
 800e156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15a:	4770      	bx	lr

0800e15c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e15c:	b480      	push	{r7}
 800e15e:	b085      	sub	sp, #20
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
 800e164:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	4a46      	ldr	r2, [pc, #280]	; (800e288 <TIM_Base_SetConfig+0x12c>)
 800e170:	4293      	cmp	r3, r2
 800e172:	d017      	beq.n	800e1a4 <TIM_Base_SetConfig+0x48>
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e17a:	d013      	beq.n	800e1a4 <TIM_Base_SetConfig+0x48>
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	4a43      	ldr	r2, [pc, #268]	; (800e28c <TIM_Base_SetConfig+0x130>)
 800e180:	4293      	cmp	r3, r2
 800e182:	d00f      	beq.n	800e1a4 <TIM_Base_SetConfig+0x48>
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	4a42      	ldr	r2, [pc, #264]	; (800e290 <TIM_Base_SetConfig+0x134>)
 800e188:	4293      	cmp	r3, r2
 800e18a:	d00b      	beq.n	800e1a4 <TIM_Base_SetConfig+0x48>
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	4a41      	ldr	r2, [pc, #260]	; (800e294 <TIM_Base_SetConfig+0x138>)
 800e190:	4293      	cmp	r3, r2
 800e192:	d007      	beq.n	800e1a4 <TIM_Base_SetConfig+0x48>
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	4a40      	ldr	r2, [pc, #256]	; (800e298 <TIM_Base_SetConfig+0x13c>)
 800e198:	4293      	cmp	r3, r2
 800e19a:	d003      	beq.n	800e1a4 <TIM_Base_SetConfig+0x48>
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	4a3f      	ldr	r2, [pc, #252]	; (800e29c <TIM_Base_SetConfig+0x140>)
 800e1a0:	4293      	cmp	r3, r2
 800e1a2:	d108      	bne.n	800e1b6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e1aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e1ac:	683b      	ldr	r3, [r7, #0]
 800e1ae:	685b      	ldr	r3, [r3, #4]
 800e1b0:	68fa      	ldr	r2, [r7, #12]
 800e1b2:	4313      	orrs	r3, r2
 800e1b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	4a33      	ldr	r2, [pc, #204]	; (800e288 <TIM_Base_SetConfig+0x12c>)
 800e1ba:	4293      	cmp	r3, r2
 800e1bc:	d023      	beq.n	800e206 <TIM_Base_SetConfig+0xaa>
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e1c4:	d01f      	beq.n	800e206 <TIM_Base_SetConfig+0xaa>
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	4a30      	ldr	r2, [pc, #192]	; (800e28c <TIM_Base_SetConfig+0x130>)
 800e1ca:	4293      	cmp	r3, r2
 800e1cc:	d01b      	beq.n	800e206 <TIM_Base_SetConfig+0xaa>
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	4a2f      	ldr	r2, [pc, #188]	; (800e290 <TIM_Base_SetConfig+0x134>)
 800e1d2:	4293      	cmp	r3, r2
 800e1d4:	d017      	beq.n	800e206 <TIM_Base_SetConfig+0xaa>
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	4a2e      	ldr	r2, [pc, #184]	; (800e294 <TIM_Base_SetConfig+0x138>)
 800e1da:	4293      	cmp	r3, r2
 800e1dc:	d013      	beq.n	800e206 <TIM_Base_SetConfig+0xaa>
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	4a2d      	ldr	r2, [pc, #180]	; (800e298 <TIM_Base_SetConfig+0x13c>)
 800e1e2:	4293      	cmp	r3, r2
 800e1e4:	d00f      	beq.n	800e206 <TIM_Base_SetConfig+0xaa>
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	4a2d      	ldr	r2, [pc, #180]	; (800e2a0 <TIM_Base_SetConfig+0x144>)
 800e1ea:	4293      	cmp	r3, r2
 800e1ec:	d00b      	beq.n	800e206 <TIM_Base_SetConfig+0xaa>
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	4a2c      	ldr	r2, [pc, #176]	; (800e2a4 <TIM_Base_SetConfig+0x148>)
 800e1f2:	4293      	cmp	r3, r2
 800e1f4:	d007      	beq.n	800e206 <TIM_Base_SetConfig+0xaa>
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	4a2b      	ldr	r2, [pc, #172]	; (800e2a8 <TIM_Base_SetConfig+0x14c>)
 800e1fa:	4293      	cmp	r3, r2
 800e1fc:	d003      	beq.n	800e206 <TIM_Base_SetConfig+0xaa>
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	4a26      	ldr	r2, [pc, #152]	; (800e29c <TIM_Base_SetConfig+0x140>)
 800e202:	4293      	cmp	r3, r2
 800e204:	d108      	bne.n	800e218 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e20c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	68db      	ldr	r3, [r3, #12]
 800e212:	68fa      	ldr	r2, [r7, #12]
 800e214:	4313      	orrs	r3, r2
 800e216:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	695b      	ldr	r3, [r3, #20]
 800e222:	4313      	orrs	r3, r2
 800e224:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	68fa      	ldr	r2, [r7, #12]
 800e22a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e22c:	683b      	ldr	r3, [r7, #0]
 800e22e:	689a      	ldr	r2, [r3, #8]
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	681a      	ldr	r2, [r3, #0]
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	4a12      	ldr	r2, [pc, #72]	; (800e288 <TIM_Base_SetConfig+0x12c>)
 800e240:	4293      	cmp	r3, r2
 800e242:	d013      	beq.n	800e26c <TIM_Base_SetConfig+0x110>
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	4a14      	ldr	r2, [pc, #80]	; (800e298 <TIM_Base_SetConfig+0x13c>)
 800e248:	4293      	cmp	r3, r2
 800e24a:	d00f      	beq.n	800e26c <TIM_Base_SetConfig+0x110>
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	4a14      	ldr	r2, [pc, #80]	; (800e2a0 <TIM_Base_SetConfig+0x144>)
 800e250:	4293      	cmp	r3, r2
 800e252:	d00b      	beq.n	800e26c <TIM_Base_SetConfig+0x110>
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	4a13      	ldr	r2, [pc, #76]	; (800e2a4 <TIM_Base_SetConfig+0x148>)
 800e258:	4293      	cmp	r3, r2
 800e25a:	d007      	beq.n	800e26c <TIM_Base_SetConfig+0x110>
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	4a12      	ldr	r2, [pc, #72]	; (800e2a8 <TIM_Base_SetConfig+0x14c>)
 800e260:	4293      	cmp	r3, r2
 800e262:	d003      	beq.n	800e26c <TIM_Base_SetConfig+0x110>
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	4a0d      	ldr	r2, [pc, #52]	; (800e29c <TIM_Base_SetConfig+0x140>)
 800e268:	4293      	cmp	r3, r2
 800e26a:	d103      	bne.n	800e274 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e26c:	683b      	ldr	r3, [r7, #0]
 800e26e:	691a      	ldr	r2, [r3, #16]
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2201      	movs	r2, #1
 800e278:	615a      	str	r2, [r3, #20]
}
 800e27a:	bf00      	nop
 800e27c:	3714      	adds	r7, #20
 800e27e:	46bd      	mov	sp, r7
 800e280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e284:	4770      	bx	lr
 800e286:	bf00      	nop
 800e288:	40012c00 	.word	0x40012c00
 800e28c:	40000400 	.word	0x40000400
 800e290:	40000800 	.word	0x40000800
 800e294:	40000c00 	.word	0x40000c00
 800e298:	40013400 	.word	0x40013400
 800e29c:	40015000 	.word	0x40015000
 800e2a0:	40014000 	.word	0x40014000
 800e2a4:	40014400 	.word	0x40014400
 800e2a8:	40014800 	.word	0x40014800

0800e2ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e2ac:	b480      	push	{r7}
 800e2ae:	b087      	sub	sp, #28
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
 800e2b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	6a1b      	ldr	r3, [r3, #32]
 800e2ba:	f023 0201 	bic.w	r2, r3, #1
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	6a1b      	ldr	r3, [r3, #32]
 800e2c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	685b      	ldr	r3, [r3, #4]
 800e2cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	699b      	ldr	r3, [r3, #24]
 800e2d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e2da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e2de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	f023 0303 	bic.w	r3, r3, #3
 800e2e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	68fa      	ldr	r2, [r7, #12]
 800e2ee:	4313      	orrs	r3, r2
 800e2f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e2f2:	697b      	ldr	r3, [r7, #20]
 800e2f4:	f023 0302 	bic.w	r3, r3, #2
 800e2f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	689b      	ldr	r3, [r3, #8]
 800e2fe:	697a      	ldr	r2, [r7, #20]
 800e300:	4313      	orrs	r3, r2
 800e302:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	4a30      	ldr	r2, [pc, #192]	; (800e3c8 <TIM_OC1_SetConfig+0x11c>)
 800e308:	4293      	cmp	r3, r2
 800e30a:	d013      	beq.n	800e334 <TIM_OC1_SetConfig+0x88>
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	4a2f      	ldr	r2, [pc, #188]	; (800e3cc <TIM_OC1_SetConfig+0x120>)
 800e310:	4293      	cmp	r3, r2
 800e312:	d00f      	beq.n	800e334 <TIM_OC1_SetConfig+0x88>
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	4a2e      	ldr	r2, [pc, #184]	; (800e3d0 <TIM_OC1_SetConfig+0x124>)
 800e318:	4293      	cmp	r3, r2
 800e31a:	d00b      	beq.n	800e334 <TIM_OC1_SetConfig+0x88>
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	4a2d      	ldr	r2, [pc, #180]	; (800e3d4 <TIM_OC1_SetConfig+0x128>)
 800e320:	4293      	cmp	r3, r2
 800e322:	d007      	beq.n	800e334 <TIM_OC1_SetConfig+0x88>
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	4a2c      	ldr	r2, [pc, #176]	; (800e3d8 <TIM_OC1_SetConfig+0x12c>)
 800e328:	4293      	cmp	r3, r2
 800e32a:	d003      	beq.n	800e334 <TIM_OC1_SetConfig+0x88>
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	4a2b      	ldr	r2, [pc, #172]	; (800e3dc <TIM_OC1_SetConfig+0x130>)
 800e330:	4293      	cmp	r3, r2
 800e332:	d10c      	bne.n	800e34e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e334:	697b      	ldr	r3, [r7, #20]
 800e336:	f023 0308 	bic.w	r3, r3, #8
 800e33a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e33c:	683b      	ldr	r3, [r7, #0]
 800e33e:	68db      	ldr	r3, [r3, #12]
 800e340:	697a      	ldr	r2, [r7, #20]
 800e342:	4313      	orrs	r3, r2
 800e344:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e346:	697b      	ldr	r3, [r7, #20]
 800e348:	f023 0304 	bic.w	r3, r3, #4
 800e34c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	4a1d      	ldr	r2, [pc, #116]	; (800e3c8 <TIM_OC1_SetConfig+0x11c>)
 800e352:	4293      	cmp	r3, r2
 800e354:	d013      	beq.n	800e37e <TIM_OC1_SetConfig+0xd2>
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	4a1c      	ldr	r2, [pc, #112]	; (800e3cc <TIM_OC1_SetConfig+0x120>)
 800e35a:	4293      	cmp	r3, r2
 800e35c:	d00f      	beq.n	800e37e <TIM_OC1_SetConfig+0xd2>
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	4a1b      	ldr	r2, [pc, #108]	; (800e3d0 <TIM_OC1_SetConfig+0x124>)
 800e362:	4293      	cmp	r3, r2
 800e364:	d00b      	beq.n	800e37e <TIM_OC1_SetConfig+0xd2>
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	4a1a      	ldr	r2, [pc, #104]	; (800e3d4 <TIM_OC1_SetConfig+0x128>)
 800e36a:	4293      	cmp	r3, r2
 800e36c:	d007      	beq.n	800e37e <TIM_OC1_SetConfig+0xd2>
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	4a19      	ldr	r2, [pc, #100]	; (800e3d8 <TIM_OC1_SetConfig+0x12c>)
 800e372:	4293      	cmp	r3, r2
 800e374:	d003      	beq.n	800e37e <TIM_OC1_SetConfig+0xd2>
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	4a18      	ldr	r2, [pc, #96]	; (800e3dc <TIM_OC1_SetConfig+0x130>)
 800e37a:	4293      	cmp	r3, r2
 800e37c:	d111      	bne.n	800e3a2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e37e:	693b      	ldr	r3, [r7, #16]
 800e380:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e384:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e386:	693b      	ldr	r3, [r7, #16]
 800e388:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e38c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e38e:	683b      	ldr	r3, [r7, #0]
 800e390:	695b      	ldr	r3, [r3, #20]
 800e392:	693a      	ldr	r2, [r7, #16]
 800e394:	4313      	orrs	r3, r2
 800e396:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e398:	683b      	ldr	r3, [r7, #0]
 800e39a:	699b      	ldr	r3, [r3, #24]
 800e39c:	693a      	ldr	r2, [r7, #16]
 800e39e:	4313      	orrs	r3, r2
 800e3a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	693a      	ldr	r2, [r7, #16]
 800e3a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	68fa      	ldr	r2, [r7, #12]
 800e3ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	685a      	ldr	r2, [r3, #4]
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	697a      	ldr	r2, [r7, #20]
 800e3ba:	621a      	str	r2, [r3, #32]
}
 800e3bc:	bf00      	nop
 800e3be:	371c      	adds	r7, #28
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c6:	4770      	bx	lr
 800e3c8:	40012c00 	.word	0x40012c00
 800e3cc:	40013400 	.word	0x40013400
 800e3d0:	40014000 	.word	0x40014000
 800e3d4:	40014400 	.word	0x40014400
 800e3d8:	40014800 	.word	0x40014800
 800e3dc:	40015000 	.word	0x40015000

0800e3e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e3e0:	b480      	push	{r7}
 800e3e2:	b087      	sub	sp, #28
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
 800e3e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	6a1b      	ldr	r3, [r3, #32]
 800e3ee:	f023 0210 	bic.w	r2, r3, #16
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	6a1b      	ldr	r3, [r3, #32]
 800e3fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	685b      	ldr	r3, [r3, #4]
 800e400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	699b      	ldr	r3, [r3, #24]
 800e406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e40e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e41a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e41c:	683b      	ldr	r3, [r7, #0]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	021b      	lsls	r3, r3, #8
 800e422:	68fa      	ldr	r2, [r7, #12]
 800e424:	4313      	orrs	r3, r2
 800e426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e428:	697b      	ldr	r3, [r7, #20]
 800e42a:	f023 0320 	bic.w	r3, r3, #32
 800e42e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	689b      	ldr	r3, [r3, #8]
 800e434:	011b      	lsls	r3, r3, #4
 800e436:	697a      	ldr	r2, [r7, #20]
 800e438:	4313      	orrs	r3, r2
 800e43a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	4a2c      	ldr	r2, [pc, #176]	; (800e4f0 <TIM_OC2_SetConfig+0x110>)
 800e440:	4293      	cmp	r3, r2
 800e442:	d007      	beq.n	800e454 <TIM_OC2_SetConfig+0x74>
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	4a2b      	ldr	r2, [pc, #172]	; (800e4f4 <TIM_OC2_SetConfig+0x114>)
 800e448:	4293      	cmp	r3, r2
 800e44a:	d003      	beq.n	800e454 <TIM_OC2_SetConfig+0x74>
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	4a2a      	ldr	r2, [pc, #168]	; (800e4f8 <TIM_OC2_SetConfig+0x118>)
 800e450:	4293      	cmp	r3, r2
 800e452:	d10d      	bne.n	800e470 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e454:	697b      	ldr	r3, [r7, #20]
 800e456:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e45a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e45c:	683b      	ldr	r3, [r7, #0]
 800e45e:	68db      	ldr	r3, [r3, #12]
 800e460:	011b      	lsls	r3, r3, #4
 800e462:	697a      	ldr	r2, [r7, #20]
 800e464:	4313      	orrs	r3, r2
 800e466:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e468:	697b      	ldr	r3, [r7, #20]
 800e46a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e46e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	4a1f      	ldr	r2, [pc, #124]	; (800e4f0 <TIM_OC2_SetConfig+0x110>)
 800e474:	4293      	cmp	r3, r2
 800e476:	d013      	beq.n	800e4a0 <TIM_OC2_SetConfig+0xc0>
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	4a1e      	ldr	r2, [pc, #120]	; (800e4f4 <TIM_OC2_SetConfig+0x114>)
 800e47c:	4293      	cmp	r3, r2
 800e47e:	d00f      	beq.n	800e4a0 <TIM_OC2_SetConfig+0xc0>
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	4a1e      	ldr	r2, [pc, #120]	; (800e4fc <TIM_OC2_SetConfig+0x11c>)
 800e484:	4293      	cmp	r3, r2
 800e486:	d00b      	beq.n	800e4a0 <TIM_OC2_SetConfig+0xc0>
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	4a1d      	ldr	r2, [pc, #116]	; (800e500 <TIM_OC2_SetConfig+0x120>)
 800e48c:	4293      	cmp	r3, r2
 800e48e:	d007      	beq.n	800e4a0 <TIM_OC2_SetConfig+0xc0>
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	4a1c      	ldr	r2, [pc, #112]	; (800e504 <TIM_OC2_SetConfig+0x124>)
 800e494:	4293      	cmp	r3, r2
 800e496:	d003      	beq.n	800e4a0 <TIM_OC2_SetConfig+0xc0>
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	4a17      	ldr	r2, [pc, #92]	; (800e4f8 <TIM_OC2_SetConfig+0x118>)
 800e49c:	4293      	cmp	r3, r2
 800e49e:	d113      	bne.n	800e4c8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e4a0:	693b      	ldr	r3, [r7, #16]
 800e4a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e4a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e4a8:	693b      	ldr	r3, [r7, #16]
 800e4aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e4ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	695b      	ldr	r3, [r3, #20]
 800e4b4:	009b      	lsls	r3, r3, #2
 800e4b6:	693a      	ldr	r2, [r7, #16]
 800e4b8:	4313      	orrs	r3, r2
 800e4ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e4bc:	683b      	ldr	r3, [r7, #0]
 800e4be:	699b      	ldr	r3, [r3, #24]
 800e4c0:	009b      	lsls	r3, r3, #2
 800e4c2:	693a      	ldr	r2, [r7, #16]
 800e4c4:	4313      	orrs	r3, r2
 800e4c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	693a      	ldr	r2, [r7, #16]
 800e4cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	68fa      	ldr	r2, [r7, #12]
 800e4d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e4d4:	683b      	ldr	r3, [r7, #0]
 800e4d6:	685a      	ldr	r2, [r3, #4]
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	697a      	ldr	r2, [r7, #20]
 800e4e0:	621a      	str	r2, [r3, #32]
}
 800e4e2:	bf00      	nop
 800e4e4:	371c      	adds	r7, #28
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ec:	4770      	bx	lr
 800e4ee:	bf00      	nop
 800e4f0:	40012c00 	.word	0x40012c00
 800e4f4:	40013400 	.word	0x40013400
 800e4f8:	40015000 	.word	0x40015000
 800e4fc:	40014000 	.word	0x40014000
 800e500:	40014400 	.word	0x40014400
 800e504:	40014800 	.word	0x40014800

0800e508 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e508:	b480      	push	{r7}
 800e50a:	b087      	sub	sp, #28
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
 800e510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	6a1b      	ldr	r3, [r3, #32]
 800e516:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	6a1b      	ldr	r3, [r3, #32]
 800e522:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	685b      	ldr	r3, [r3, #4]
 800e528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	69db      	ldr	r3, [r3, #28]
 800e52e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e53a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	f023 0303 	bic.w	r3, r3, #3
 800e542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	68fa      	ldr	r2, [r7, #12]
 800e54a:	4313      	orrs	r3, r2
 800e54c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e54e:	697b      	ldr	r3, [r7, #20]
 800e550:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e554:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e556:	683b      	ldr	r3, [r7, #0]
 800e558:	689b      	ldr	r3, [r3, #8]
 800e55a:	021b      	lsls	r3, r3, #8
 800e55c:	697a      	ldr	r2, [r7, #20]
 800e55e:	4313      	orrs	r3, r2
 800e560:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	4a2b      	ldr	r2, [pc, #172]	; (800e614 <TIM_OC3_SetConfig+0x10c>)
 800e566:	4293      	cmp	r3, r2
 800e568:	d007      	beq.n	800e57a <TIM_OC3_SetConfig+0x72>
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	4a2a      	ldr	r2, [pc, #168]	; (800e618 <TIM_OC3_SetConfig+0x110>)
 800e56e:	4293      	cmp	r3, r2
 800e570:	d003      	beq.n	800e57a <TIM_OC3_SetConfig+0x72>
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	4a29      	ldr	r2, [pc, #164]	; (800e61c <TIM_OC3_SetConfig+0x114>)
 800e576:	4293      	cmp	r3, r2
 800e578:	d10d      	bne.n	800e596 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e57a:	697b      	ldr	r3, [r7, #20]
 800e57c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e580:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e582:	683b      	ldr	r3, [r7, #0]
 800e584:	68db      	ldr	r3, [r3, #12]
 800e586:	021b      	lsls	r3, r3, #8
 800e588:	697a      	ldr	r2, [r7, #20]
 800e58a:	4313      	orrs	r3, r2
 800e58c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e58e:	697b      	ldr	r3, [r7, #20]
 800e590:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e594:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	4a1e      	ldr	r2, [pc, #120]	; (800e614 <TIM_OC3_SetConfig+0x10c>)
 800e59a:	4293      	cmp	r3, r2
 800e59c:	d013      	beq.n	800e5c6 <TIM_OC3_SetConfig+0xbe>
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	4a1d      	ldr	r2, [pc, #116]	; (800e618 <TIM_OC3_SetConfig+0x110>)
 800e5a2:	4293      	cmp	r3, r2
 800e5a4:	d00f      	beq.n	800e5c6 <TIM_OC3_SetConfig+0xbe>
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	4a1d      	ldr	r2, [pc, #116]	; (800e620 <TIM_OC3_SetConfig+0x118>)
 800e5aa:	4293      	cmp	r3, r2
 800e5ac:	d00b      	beq.n	800e5c6 <TIM_OC3_SetConfig+0xbe>
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	4a1c      	ldr	r2, [pc, #112]	; (800e624 <TIM_OC3_SetConfig+0x11c>)
 800e5b2:	4293      	cmp	r3, r2
 800e5b4:	d007      	beq.n	800e5c6 <TIM_OC3_SetConfig+0xbe>
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	4a1b      	ldr	r2, [pc, #108]	; (800e628 <TIM_OC3_SetConfig+0x120>)
 800e5ba:	4293      	cmp	r3, r2
 800e5bc:	d003      	beq.n	800e5c6 <TIM_OC3_SetConfig+0xbe>
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	4a16      	ldr	r2, [pc, #88]	; (800e61c <TIM_OC3_SetConfig+0x114>)
 800e5c2:	4293      	cmp	r3, r2
 800e5c4:	d113      	bne.n	800e5ee <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e5c6:	693b      	ldr	r3, [r7, #16]
 800e5c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e5cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e5ce:	693b      	ldr	r3, [r7, #16]
 800e5d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e5d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e5d6:	683b      	ldr	r3, [r7, #0]
 800e5d8:	695b      	ldr	r3, [r3, #20]
 800e5da:	011b      	lsls	r3, r3, #4
 800e5dc:	693a      	ldr	r2, [r7, #16]
 800e5de:	4313      	orrs	r3, r2
 800e5e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e5e2:	683b      	ldr	r3, [r7, #0]
 800e5e4:	699b      	ldr	r3, [r3, #24]
 800e5e6:	011b      	lsls	r3, r3, #4
 800e5e8:	693a      	ldr	r2, [r7, #16]
 800e5ea:	4313      	orrs	r3, r2
 800e5ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	693a      	ldr	r2, [r7, #16]
 800e5f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	68fa      	ldr	r2, [r7, #12]
 800e5f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e5fa:	683b      	ldr	r3, [r7, #0]
 800e5fc:	685a      	ldr	r2, [r3, #4]
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	697a      	ldr	r2, [r7, #20]
 800e606:	621a      	str	r2, [r3, #32]
}
 800e608:	bf00      	nop
 800e60a:	371c      	adds	r7, #28
 800e60c:	46bd      	mov	sp, r7
 800e60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e612:	4770      	bx	lr
 800e614:	40012c00 	.word	0x40012c00
 800e618:	40013400 	.word	0x40013400
 800e61c:	40015000 	.word	0x40015000
 800e620:	40014000 	.word	0x40014000
 800e624:	40014400 	.word	0x40014400
 800e628:	40014800 	.word	0x40014800

0800e62c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e62c:	b480      	push	{r7}
 800e62e:	b087      	sub	sp, #28
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
 800e634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	6a1b      	ldr	r3, [r3, #32]
 800e63a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	6a1b      	ldr	r3, [r3, #32]
 800e646:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	685b      	ldr	r3, [r3, #4]
 800e64c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	69db      	ldr	r3, [r3, #28]
 800e652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e65a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e65e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e666:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e668:	683b      	ldr	r3, [r7, #0]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	021b      	lsls	r3, r3, #8
 800e66e:	68fa      	ldr	r2, [r7, #12]
 800e670:	4313      	orrs	r3, r2
 800e672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e674:	697b      	ldr	r3, [r7, #20]
 800e676:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e67a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e67c:	683b      	ldr	r3, [r7, #0]
 800e67e:	689b      	ldr	r3, [r3, #8]
 800e680:	031b      	lsls	r3, r3, #12
 800e682:	697a      	ldr	r2, [r7, #20]
 800e684:	4313      	orrs	r3, r2
 800e686:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	4a2c      	ldr	r2, [pc, #176]	; (800e73c <TIM_OC4_SetConfig+0x110>)
 800e68c:	4293      	cmp	r3, r2
 800e68e:	d007      	beq.n	800e6a0 <TIM_OC4_SetConfig+0x74>
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	4a2b      	ldr	r2, [pc, #172]	; (800e740 <TIM_OC4_SetConfig+0x114>)
 800e694:	4293      	cmp	r3, r2
 800e696:	d003      	beq.n	800e6a0 <TIM_OC4_SetConfig+0x74>
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	4a2a      	ldr	r2, [pc, #168]	; (800e744 <TIM_OC4_SetConfig+0x118>)
 800e69c:	4293      	cmp	r3, r2
 800e69e:	d10d      	bne.n	800e6bc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800e6a0:	697b      	ldr	r3, [r7, #20]
 800e6a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e6a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	68db      	ldr	r3, [r3, #12]
 800e6ac:	031b      	lsls	r3, r3, #12
 800e6ae:	697a      	ldr	r2, [r7, #20]
 800e6b0:	4313      	orrs	r3, r2
 800e6b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800e6b4:	697b      	ldr	r3, [r7, #20]
 800e6b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e6ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	4a1f      	ldr	r2, [pc, #124]	; (800e73c <TIM_OC4_SetConfig+0x110>)
 800e6c0:	4293      	cmp	r3, r2
 800e6c2:	d013      	beq.n	800e6ec <TIM_OC4_SetConfig+0xc0>
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	4a1e      	ldr	r2, [pc, #120]	; (800e740 <TIM_OC4_SetConfig+0x114>)
 800e6c8:	4293      	cmp	r3, r2
 800e6ca:	d00f      	beq.n	800e6ec <TIM_OC4_SetConfig+0xc0>
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	4a1e      	ldr	r2, [pc, #120]	; (800e748 <TIM_OC4_SetConfig+0x11c>)
 800e6d0:	4293      	cmp	r3, r2
 800e6d2:	d00b      	beq.n	800e6ec <TIM_OC4_SetConfig+0xc0>
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	4a1d      	ldr	r2, [pc, #116]	; (800e74c <TIM_OC4_SetConfig+0x120>)
 800e6d8:	4293      	cmp	r3, r2
 800e6da:	d007      	beq.n	800e6ec <TIM_OC4_SetConfig+0xc0>
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	4a1c      	ldr	r2, [pc, #112]	; (800e750 <TIM_OC4_SetConfig+0x124>)
 800e6e0:	4293      	cmp	r3, r2
 800e6e2:	d003      	beq.n	800e6ec <TIM_OC4_SetConfig+0xc0>
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	4a17      	ldr	r2, [pc, #92]	; (800e744 <TIM_OC4_SetConfig+0x118>)
 800e6e8:	4293      	cmp	r3, r2
 800e6ea:	d113      	bne.n	800e714 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e6ec:	693b      	ldr	r3, [r7, #16]
 800e6ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e6f2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800e6f4:	693b      	ldr	r3, [r7, #16]
 800e6f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e6fa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e6fc:	683b      	ldr	r3, [r7, #0]
 800e6fe:	695b      	ldr	r3, [r3, #20]
 800e700:	019b      	lsls	r3, r3, #6
 800e702:	693a      	ldr	r2, [r7, #16]
 800e704:	4313      	orrs	r3, r2
 800e706:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	699b      	ldr	r3, [r3, #24]
 800e70c:	019b      	lsls	r3, r3, #6
 800e70e:	693a      	ldr	r2, [r7, #16]
 800e710:	4313      	orrs	r3, r2
 800e712:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	693a      	ldr	r2, [r7, #16]
 800e718:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	68fa      	ldr	r2, [r7, #12]
 800e71e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	685a      	ldr	r2, [r3, #4]
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	697a      	ldr	r2, [r7, #20]
 800e72c:	621a      	str	r2, [r3, #32]
}
 800e72e:	bf00      	nop
 800e730:	371c      	adds	r7, #28
 800e732:	46bd      	mov	sp, r7
 800e734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e738:	4770      	bx	lr
 800e73a:	bf00      	nop
 800e73c:	40012c00 	.word	0x40012c00
 800e740:	40013400 	.word	0x40013400
 800e744:	40015000 	.word	0x40015000
 800e748:	40014000 	.word	0x40014000
 800e74c:	40014400 	.word	0x40014400
 800e750:	40014800 	.word	0x40014800

0800e754 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e754:	b480      	push	{r7}
 800e756:	b087      	sub	sp, #28
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
 800e75c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	6a1b      	ldr	r3, [r3, #32]
 800e762:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	6a1b      	ldr	r3, [r3, #32]
 800e76e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	685b      	ldr	r3, [r3, #4]
 800e774:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e77a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e786:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e788:	683b      	ldr	r3, [r7, #0]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	68fa      	ldr	r2, [r7, #12]
 800e78e:	4313      	orrs	r3, r2
 800e790:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e792:	693b      	ldr	r3, [r7, #16]
 800e794:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e798:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e79a:	683b      	ldr	r3, [r7, #0]
 800e79c:	689b      	ldr	r3, [r3, #8]
 800e79e:	041b      	lsls	r3, r3, #16
 800e7a0:	693a      	ldr	r2, [r7, #16]
 800e7a2:	4313      	orrs	r3, r2
 800e7a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	4a19      	ldr	r2, [pc, #100]	; (800e810 <TIM_OC5_SetConfig+0xbc>)
 800e7aa:	4293      	cmp	r3, r2
 800e7ac:	d013      	beq.n	800e7d6 <TIM_OC5_SetConfig+0x82>
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	4a18      	ldr	r2, [pc, #96]	; (800e814 <TIM_OC5_SetConfig+0xc0>)
 800e7b2:	4293      	cmp	r3, r2
 800e7b4:	d00f      	beq.n	800e7d6 <TIM_OC5_SetConfig+0x82>
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	4a17      	ldr	r2, [pc, #92]	; (800e818 <TIM_OC5_SetConfig+0xc4>)
 800e7ba:	4293      	cmp	r3, r2
 800e7bc:	d00b      	beq.n	800e7d6 <TIM_OC5_SetConfig+0x82>
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	4a16      	ldr	r2, [pc, #88]	; (800e81c <TIM_OC5_SetConfig+0xc8>)
 800e7c2:	4293      	cmp	r3, r2
 800e7c4:	d007      	beq.n	800e7d6 <TIM_OC5_SetConfig+0x82>
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	4a15      	ldr	r2, [pc, #84]	; (800e820 <TIM_OC5_SetConfig+0xcc>)
 800e7ca:	4293      	cmp	r3, r2
 800e7cc:	d003      	beq.n	800e7d6 <TIM_OC5_SetConfig+0x82>
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	4a14      	ldr	r2, [pc, #80]	; (800e824 <TIM_OC5_SetConfig+0xd0>)
 800e7d2:	4293      	cmp	r3, r2
 800e7d4:	d109      	bne.n	800e7ea <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e7d6:	697b      	ldr	r3, [r7, #20]
 800e7d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e7dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e7de:	683b      	ldr	r3, [r7, #0]
 800e7e0:	695b      	ldr	r3, [r3, #20]
 800e7e2:	021b      	lsls	r3, r3, #8
 800e7e4:	697a      	ldr	r2, [r7, #20]
 800e7e6:	4313      	orrs	r3, r2
 800e7e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	697a      	ldr	r2, [r7, #20]
 800e7ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	68fa      	ldr	r2, [r7, #12]
 800e7f4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e7f6:	683b      	ldr	r3, [r7, #0]
 800e7f8:	685a      	ldr	r2, [r3, #4]
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	693a      	ldr	r2, [r7, #16]
 800e802:	621a      	str	r2, [r3, #32]
}
 800e804:	bf00      	nop
 800e806:	371c      	adds	r7, #28
 800e808:	46bd      	mov	sp, r7
 800e80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80e:	4770      	bx	lr
 800e810:	40012c00 	.word	0x40012c00
 800e814:	40013400 	.word	0x40013400
 800e818:	40014000 	.word	0x40014000
 800e81c:	40014400 	.word	0x40014400
 800e820:	40014800 	.word	0x40014800
 800e824:	40015000 	.word	0x40015000

0800e828 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e828:	b480      	push	{r7}
 800e82a:	b087      	sub	sp, #28
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
 800e830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	6a1b      	ldr	r3, [r3, #32]
 800e836:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	6a1b      	ldr	r3, [r3, #32]
 800e842:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	685b      	ldr	r3, [r3, #4]
 800e848:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e84e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e856:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e85a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e85c:	683b      	ldr	r3, [r7, #0]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	021b      	lsls	r3, r3, #8
 800e862:	68fa      	ldr	r2, [r7, #12]
 800e864:	4313      	orrs	r3, r2
 800e866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e868:	693b      	ldr	r3, [r7, #16]
 800e86a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e86e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e870:	683b      	ldr	r3, [r7, #0]
 800e872:	689b      	ldr	r3, [r3, #8]
 800e874:	051b      	lsls	r3, r3, #20
 800e876:	693a      	ldr	r2, [r7, #16]
 800e878:	4313      	orrs	r3, r2
 800e87a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	4a1a      	ldr	r2, [pc, #104]	; (800e8e8 <TIM_OC6_SetConfig+0xc0>)
 800e880:	4293      	cmp	r3, r2
 800e882:	d013      	beq.n	800e8ac <TIM_OC6_SetConfig+0x84>
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	4a19      	ldr	r2, [pc, #100]	; (800e8ec <TIM_OC6_SetConfig+0xc4>)
 800e888:	4293      	cmp	r3, r2
 800e88a:	d00f      	beq.n	800e8ac <TIM_OC6_SetConfig+0x84>
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	4a18      	ldr	r2, [pc, #96]	; (800e8f0 <TIM_OC6_SetConfig+0xc8>)
 800e890:	4293      	cmp	r3, r2
 800e892:	d00b      	beq.n	800e8ac <TIM_OC6_SetConfig+0x84>
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	4a17      	ldr	r2, [pc, #92]	; (800e8f4 <TIM_OC6_SetConfig+0xcc>)
 800e898:	4293      	cmp	r3, r2
 800e89a:	d007      	beq.n	800e8ac <TIM_OC6_SetConfig+0x84>
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	4a16      	ldr	r2, [pc, #88]	; (800e8f8 <TIM_OC6_SetConfig+0xd0>)
 800e8a0:	4293      	cmp	r3, r2
 800e8a2:	d003      	beq.n	800e8ac <TIM_OC6_SetConfig+0x84>
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	4a15      	ldr	r2, [pc, #84]	; (800e8fc <TIM_OC6_SetConfig+0xd4>)
 800e8a8:	4293      	cmp	r3, r2
 800e8aa:	d109      	bne.n	800e8c0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e8ac:	697b      	ldr	r3, [r7, #20]
 800e8ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e8b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e8b4:	683b      	ldr	r3, [r7, #0]
 800e8b6:	695b      	ldr	r3, [r3, #20]
 800e8b8:	029b      	lsls	r3, r3, #10
 800e8ba:	697a      	ldr	r2, [r7, #20]
 800e8bc:	4313      	orrs	r3, r2
 800e8be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	697a      	ldr	r2, [r7, #20]
 800e8c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	68fa      	ldr	r2, [r7, #12]
 800e8ca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e8cc:	683b      	ldr	r3, [r7, #0]
 800e8ce:	685a      	ldr	r2, [r3, #4]
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	693a      	ldr	r2, [r7, #16]
 800e8d8:	621a      	str	r2, [r3, #32]
}
 800e8da:	bf00      	nop
 800e8dc:	371c      	adds	r7, #28
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e4:	4770      	bx	lr
 800e8e6:	bf00      	nop
 800e8e8:	40012c00 	.word	0x40012c00
 800e8ec:	40013400 	.word	0x40013400
 800e8f0:	40014000 	.word	0x40014000
 800e8f4:	40014400 	.word	0x40014400
 800e8f8:	40014800 	.word	0x40014800
 800e8fc:	40015000 	.word	0x40015000

0800e900 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e900:	b480      	push	{r7}
 800e902:	b087      	sub	sp, #28
 800e904:	af00      	add	r7, sp, #0
 800e906:	60f8      	str	r0, [r7, #12]
 800e908:	60b9      	str	r1, [r7, #8]
 800e90a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	6a1b      	ldr	r3, [r3, #32]
 800e910:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	6a1b      	ldr	r3, [r3, #32]
 800e916:	f023 0201 	bic.w	r2, r3, #1
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	699b      	ldr	r3, [r3, #24]
 800e922:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e924:	693b      	ldr	r3, [r7, #16]
 800e926:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e92a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	011b      	lsls	r3, r3, #4
 800e930:	693a      	ldr	r2, [r7, #16]
 800e932:	4313      	orrs	r3, r2
 800e934:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e936:	697b      	ldr	r3, [r7, #20]
 800e938:	f023 030a 	bic.w	r3, r3, #10
 800e93c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e93e:	697a      	ldr	r2, [r7, #20]
 800e940:	68bb      	ldr	r3, [r7, #8]
 800e942:	4313      	orrs	r3, r2
 800e944:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	693a      	ldr	r2, [r7, #16]
 800e94a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	697a      	ldr	r2, [r7, #20]
 800e950:	621a      	str	r2, [r3, #32]
}
 800e952:	bf00      	nop
 800e954:	371c      	adds	r7, #28
 800e956:	46bd      	mov	sp, r7
 800e958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95c:	4770      	bx	lr

0800e95e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e95e:	b480      	push	{r7}
 800e960:	b087      	sub	sp, #28
 800e962:	af00      	add	r7, sp, #0
 800e964:	60f8      	str	r0, [r7, #12]
 800e966:	60b9      	str	r1, [r7, #8]
 800e968:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	6a1b      	ldr	r3, [r3, #32]
 800e96e:	f023 0210 	bic.w	r2, r3, #16
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	699b      	ldr	r3, [r3, #24]
 800e97a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	6a1b      	ldr	r3, [r3, #32]
 800e980:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e982:	697b      	ldr	r3, [r7, #20]
 800e984:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e988:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	031b      	lsls	r3, r3, #12
 800e98e:	697a      	ldr	r2, [r7, #20]
 800e990:	4313      	orrs	r3, r2
 800e992:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e994:	693b      	ldr	r3, [r7, #16]
 800e996:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e99a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e99c:	68bb      	ldr	r3, [r7, #8]
 800e99e:	011b      	lsls	r3, r3, #4
 800e9a0:	693a      	ldr	r2, [r7, #16]
 800e9a2:	4313      	orrs	r3, r2
 800e9a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	697a      	ldr	r2, [r7, #20]
 800e9aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	693a      	ldr	r2, [r7, #16]
 800e9b0:	621a      	str	r2, [r3, #32]
}
 800e9b2:	bf00      	nop
 800e9b4:	371c      	adds	r7, #28
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9bc:	4770      	bx	lr

0800e9be <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e9be:	b480      	push	{r7}
 800e9c0:	b085      	sub	sp, #20
 800e9c2:	af00      	add	r7, sp, #0
 800e9c4:	6078      	str	r0, [r7, #4]
 800e9c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	689b      	ldr	r3, [r3, #8]
 800e9cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800e9d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e9d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e9da:	683a      	ldr	r2, [r7, #0]
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	4313      	orrs	r3, r2
 800e9e0:	f043 0307 	orr.w	r3, r3, #7
 800e9e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	68fa      	ldr	r2, [r7, #12]
 800e9ea:	609a      	str	r2, [r3, #8]
}
 800e9ec:	bf00      	nop
 800e9ee:	3714      	adds	r7, #20
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f6:	4770      	bx	lr

0800e9f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e9f8:	b480      	push	{r7}
 800e9fa:	b087      	sub	sp, #28
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	60f8      	str	r0, [r7, #12]
 800ea00:	60b9      	str	r1, [r7, #8]
 800ea02:	607a      	str	r2, [r7, #4]
 800ea04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	689b      	ldr	r3, [r3, #8]
 800ea0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ea0c:	697b      	ldr	r3, [r7, #20]
 800ea0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ea12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ea14:	683b      	ldr	r3, [r7, #0]
 800ea16:	021a      	lsls	r2, r3, #8
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	431a      	orrs	r2, r3
 800ea1c:	68bb      	ldr	r3, [r7, #8]
 800ea1e:	4313      	orrs	r3, r2
 800ea20:	697a      	ldr	r2, [r7, #20]
 800ea22:	4313      	orrs	r3, r2
 800ea24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	697a      	ldr	r2, [r7, #20]
 800ea2a:	609a      	str	r2, [r3, #8]
}
 800ea2c:	bf00      	nop
 800ea2e:	371c      	adds	r7, #28
 800ea30:	46bd      	mov	sp, r7
 800ea32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea36:	4770      	bx	lr

0800ea38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ea38:	b480      	push	{r7}
 800ea3a:	b087      	sub	sp, #28
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	60f8      	str	r0, [r7, #12]
 800ea40:	60b9      	str	r1, [r7, #8]
 800ea42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ea44:	68bb      	ldr	r3, [r7, #8]
 800ea46:	f003 031f 	and.w	r3, r3, #31
 800ea4a:	2201      	movs	r2, #1
 800ea4c:	fa02 f303 	lsl.w	r3, r2, r3
 800ea50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	6a1a      	ldr	r2, [r3, #32]
 800ea56:	697b      	ldr	r3, [r7, #20]
 800ea58:	43db      	mvns	r3, r3
 800ea5a:	401a      	ands	r2, r3
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	6a1a      	ldr	r2, [r3, #32]
 800ea64:	68bb      	ldr	r3, [r7, #8]
 800ea66:	f003 031f 	and.w	r3, r3, #31
 800ea6a:	6879      	ldr	r1, [r7, #4]
 800ea6c:	fa01 f303 	lsl.w	r3, r1, r3
 800ea70:	431a      	orrs	r2, r3
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	621a      	str	r2, [r3, #32]
}
 800ea76:	bf00      	nop
 800ea78:	371c      	adds	r7, #28
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea80:	4770      	bx	lr
	...

0800ea84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ea84:	b480      	push	{r7}
 800ea86:	b085      	sub	sp, #20
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
 800ea8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ea94:	2b01      	cmp	r3, #1
 800ea96:	d101      	bne.n	800ea9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ea98:	2302      	movs	r3, #2
 800ea9a:	e074      	b.n	800eb86 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	2201      	movs	r2, #1
 800eaa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	2202      	movs	r2, #2
 800eaa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	685b      	ldr	r3, [r3, #4]
 800eab2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	689b      	ldr	r3, [r3, #8]
 800eaba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	4a34      	ldr	r2, [pc, #208]	; (800eb94 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800eac2:	4293      	cmp	r3, r2
 800eac4:	d009      	beq.n	800eada <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	4a33      	ldr	r2, [pc, #204]	; (800eb98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800eacc:	4293      	cmp	r3, r2
 800eace:	d004      	beq.n	800eada <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	4a31      	ldr	r2, [pc, #196]	; (800eb9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ead6:	4293      	cmp	r3, r2
 800ead8:	d108      	bne.n	800eaec <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800eae0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800eae2:	683b      	ldr	r3, [r7, #0]
 800eae4:	685b      	ldr	r3, [r3, #4]
 800eae6:	68fa      	ldr	r2, [r7, #12]
 800eae8:	4313      	orrs	r3, r2
 800eaea:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800eaf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eaf6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800eaf8:	683b      	ldr	r3, [r7, #0]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	68fa      	ldr	r2, [r7, #12]
 800eafe:	4313      	orrs	r3, r2
 800eb00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	68fa      	ldr	r2, [r7, #12]
 800eb08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	4a21      	ldr	r2, [pc, #132]	; (800eb94 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800eb10:	4293      	cmp	r3, r2
 800eb12:	d022      	beq.n	800eb5a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eb1c:	d01d      	beq.n	800eb5a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	4a1f      	ldr	r2, [pc, #124]	; (800eba0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800eb24:	4293      	cmp	r3, r2
 800eb26:	d018      	beq.n	800eb5a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	4a1d      	ldr	r2, [pc, #116]	; (800eba4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800eb2e:	4293      	cmp	r3, r2
 800eb30:	d013      	beq.n	800eb5a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	4a1c      	ldr	r2, [pc, #112]	; (800eba8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800eb38:	4293      	cmp	r3, r2
 800eb3a:	d00e      	beq.n	800eb5a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	4a15      	ldr	r2, [pc, #84]	; (800eb98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800eb42:	4293      	cmp	r3, r2
 800eb44:	d009      	beq.n	800eb5a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	4a18      	ldr	r2, [pc, #96]	; (800ebac <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800eb4c:	4293      	cmp	r3, r2
 800eb4e:	d004      	beq.n	800eb5a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	4a11      	ldr	r2, [pc, #68]	; (800eb9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800eb56:	4293      	cmp	r3, r2
 800eb58:	d10c      	bne.n	800eb74 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800eb5a:	68bb      	ldr	r3, [r7, #8]
 800eb5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eb60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800eb62:	683b      	ldr	r3, [r7, #0]
 800eb64:	689b      	ldr	r3, [r3, #8]
 800eb66:	68ba      	ldr	r2, [r7, #8]
 800eb68:	4313      	orrs	r3, r2
 800eb6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	68ba      	ldr	r2, [r7, #8]
 800eb72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	2201      	movs	r2, #1
 800eb78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	2200      	movs	r2, #0
 800eb80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800eb84:	2300      	movs	r3, #0
}
 800eb86:	4618      	mov	r0, r3
 800eb88:	3714      	adds	r7, #20
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb90:	4770      	bx	lr
 800eb92:	bf00      	nop
 800eb94:	40012c00 	.word	0x40012c00
 800eb98:	40013400 	.word	0x40013400
 800eb9c:	40015000 	.word	0x40015000
 800eba0:	40000400 	.word	0x40000400
 800eba4:	40000800 	.word	0x40000800
 800eba8:	40000c00 	.word	0x40000c00
 800ebac:	40014000 	.word	0x40014000

0800ebb0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ebb0:	b480      	push	{r7}
 800ebb2:	b085      	sub	sp, #20
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
 800ebb8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ebba:	2300      	movs	r3, #0
 800ebbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ebc4:	2b01      	cmp	r3, #1
 800ebc6:	d101      	bne.n	800ebcc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ebc8:	2302      	movs	r3, #2
 800ebca:	e096      	b.n	800ecfa <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	2201      	movs	r2, #1
 800ebd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ebda:	683b      	ldr	r3, [r7, #0]
 800ebdc:	68db      	ldr	r3, [r3, #12]
 800ebde:	4313      	orrs	r3, r2
 800ebe0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	689b      	ldr	r3, [r3, #8]
 800ebec:	4313      	orrs	r3, r2
 800ebee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ebf6:	683b      	ldr	r3, [r7, #0]
 800ebf8:	685b      	ldr	r3, [r3, #4]
 800ebfa:	4313      	orrs	r3, r2
 800ebfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ec04:	683b      	ldr	r3, [r7, #0]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	4313      	orrs	r3, r2
 800ec0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ec12:	683b      	ldr	r3, [r7, #0]
 800ec14:	691b      	ldr	r3, [r3, #16]
 800ec16:	4313      	orrs	r3, r2
 800ec18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ec20:	683b      	ldr	r3, [r7, #0]
 800ec22:	695b      	ldr	r3, [r3, #20]
 800ec24:	4313      	orrs	r3, r2
 800ec26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ec2e:	683b      	ldr	r3, [r7, #0]
 800ec30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec32:	4313      	orrs	r3, r2
 800ec34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	699b      	ldr	r3, [r3, #24]
 800ec40:	041b      	lsls	r3, r3, #16
 800ec42:	4313      	orrs	r3, r2
 800ec44:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	4a2f      	ldr	r2, [pc, #188]	; (800ed08 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800ec4c:	4293      	cmp	r3, r2
 800ec4e:	d009      	beq.n	800ec64 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	4a2d      	ldr	r2, [pc, #180]	; (800ed0c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800ec56:	4293      	cmp	r3, r2
 800ec58:	d004      	beq.n	800ec64 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	4a2c      	ldr	r2, [pc, #176]	; (800ed10 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800ec60:	4293      	cmp	r3, r2
 800ec62:	d106      	bne.n	800ec72 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ec6a:	683b      	ldr	r3, [r7, #0]
 800ec6c:	69db      	ldr	r3, [r3, #28]
 800ec6e:	4313      	orrs	r3, r2
 800ec70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	4a24      	ldr	r2, [pc, #144]	; (800ed08 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800ec78:	4293      	cmp	r3, r2
 800ec7a:	d009      	beq.n	800ec90 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	4a22      	ldr	r2, [pc, #136]	; (800ed0c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800ec82:	4293      	cmp	r3, r2
 800ec84:	d004      	beq.n	800ec90 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	4a21      	ldr	r2, [pc, #132]	; (800ed10 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800ec8c:	4293      	cmp	r3, r2
 800ec8e:	d12b      	bne.n	800ece8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ec96:	683b      	ldr	r3, [r7, #0]
 800ec98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec9a:	051b      	lsls	r3, r3, #20
 800ec9c:	4313      	orrs	r3, r2
 800ec9e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800eca6:	683b      	ldr	r3, [r7, #0]
 800eca8:	6a1b      	ldr	r3, [r3, #32]
 800ecaa:	4313      	orrs	r3, r2
 800ecac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ecb4:	683b      	ldr	r3, [r7, #0]
 800ecb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecb8:	4313      	orrs	r3, r2
 800ecba:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	4a11      	ldr	r2, [pc, #68]	; (800ed08 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800ecc2:	4293      	cmp	r3, r2
 800ecc4:	d009      	beq.n	800ecda <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	4a10      	ldr	r2, [pc, #64]	; (800ed0c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800eccc:	4293      	cmp	r3, r2
 800ecce:	d004      	beq.n	800ecda <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	4a0e      	ldr	r2, [pc, #56]	; (800ed10 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800ecd6:	4293      	cmp	r3, r2
 800ecd8:	d106      	bne.n	800ece8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800ece0:	683b      	ldr	r3, [r7, #0]
 800ece2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ece4:	4313      	orrs	r3, r2
 800ece6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	68fa      	ldr	r2, [r7, #12]
 800ecee:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ecf8:	2300      	movs	r3, #0
}
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	3714      	adds	r7, #20
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed04:	4770      	bx	lr
 800ed06:	bf00      	nop
 800ed08:	40012c00 	.word	0x40012c00
 800ed0c:	40013400 	.word	0x40013400
 800ed10:	40015000 	.word	0x40015000

0800ed14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ed14:	b480      	push	{r7}
 800ed16:	b083      	sub	sp, #12
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ed1c:	bf00      	nop
 800ed1e:	370c      	adds	r7, #12
 800ed20:	46bd      	mov	sp, r7
 800ed22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed26:	4770      	bx	lr

0800ed28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ed28:	b480      	push	{r7}
 800ed2a:	b083      	sub	sp, #12
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ed30:	bf00      	nop
 800ed32:	370c      	adds	r7, #12
 800ed34:	46bd      	mov	sp, r7
 800ed36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3a:	4770      	bx	lr

0800ed3c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ed3c:	b480      	push	{r7}
 800ed3e:	b083      	sub	sp, #12
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ed44:	bf00      	nop
 800ed46:	370c      	adds	r7, #12
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4e:	4770      	bx	lr

0800ed50 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800ed50:	b480      	push	{r7}
 800ed52:	b083      	sub	sp, #12
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800ed58:	bf00      	nop
 800ed5a:	370c      	adds	r7, #12
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed62:	4770      	bx	lr

0800ed64 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800ed64:	b480      	push	{r7}
 800ed66:	b083      	sub	sp, #12
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800ed6c:	bf00      	nop
 800ed6e:	370c      	adds	r7, #12
 800ed70:	46bd      	mov	sp, r7
 800ed72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed76:	4770      	bx	lr

0800ed78 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800ed78:	b480      	push	{r7}
 800ed7a:	b083      	sub	sp, #12
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800ed80:	bf00      	nop
 800ed82:	370c      	adds	r7, #12
 800ed84:	46bd      	mov	sp, r7
 800ed86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8a:	4770      	bx	lr

0800ed8c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800ed8c:	b480      	push	{r7}
 800ed8e:	b083      	sub	sp, #12
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800ed94:	bf00      	nop
 800ed96:	370c      	adds	r7, #12
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9e:	4770      	bx	lr

0800eda0 <LL_EXTI_EnableIT_0_31>:
{
 800eda0:	b480      	push	{r7}
 800eda2:	b083      	sub	sp, #12
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800eda8:	4b05      	ldr	r3, [pc, #20]	; (800edc0 <LL_EXTI_EnableIT_0_31+0x20>)
 800edaa:	681a      	ldr	r2, [r3, #0]
 800edac:	4904      	ldr	r1, [pc, #16]	; (800edc0 <LL_EXTI_EnableIT_0_31+0x20>)
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	4313      	orrs	r3, r2
 800edb2:	600b      	str	r3, [r1, #0]
}
 800edb4:	bf00      	nop
 800edb6:	370c      	adds	r7, #12
 800edb8:	46bd      	mov	sp, r7
 800edba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edbe:	4770      	bx	lr
 800edc0:	40010400 	.word	0x40010400

0800edc4 <LL_EXTI_EnableIT_32_63>:
{
 800edc4:	b480      	push	{r7}
 800edc6:	b083      	sub	sp, #12
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800edcc:	4b05      	ldr	r3, [pc, #20]	; (800ede4 <LL_EXTI_EnableIT_32_63+0x20>)
 800edce:	6a1a      	ldr	r2, [r3, #32]
 800edd0:	4904      	ldr	r1, [pc, #16]	; (800ede4 <LL_EXTI_EnableIT_32_63+0x20>)
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	4313      	orrs	r3, r2
 800edd6:	620b      	str	r3, [r1, #32]
}
 800edd8:	bf00      	nop
 800edda:	370c      	adds	r7, #12
 800eddc:	46bd      	mov	sp, r7
 800edde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede2:	4770      	bx	lr
 800ede4:	40010400 	.word	0x40010400

0800ede8 <LL_EXTI_DisableIT_0_31>:
{
 800ede8:	b480      	push	{r7}
 800edea:	b083      	sub	sp, #12
 800edec:	af00      	add	r7, sp, #0
 800edee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800edf0:	4b06      	ldr	r3, [pc, #24]	; (800ee0c <LL_EXTI_DisableIT_0_31+0x24>)
 800edf2:	681a      	ldr	r2, [r3, #0]
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	43db      	mvns	r3, r3
 800edf8:	4904      	ldr	r1, [pc, #16]	; (800ee0c <LL_EXTI_DisableIT_0_31+0x24>)
 800edfa:	4013      	ands	r3, r2
 800edfc:	600b      	str	r3, [r1, #0]
}
 800edfe:	bf00      	nop
 800ee00:	370c      	adds	r7, #12
 800ee02:	46bd      	mov	sp, r7
 800ee04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee08:	4770      	bx	lr
 800ee0a:	bf00      	nop
 800ee0c:	40010400 	.word	0x40010400

0800ee10 <LL_EXTI_DisableIT_32_63>:
{
 800ee10:	b480      	push	{r7}
 800ee12:	b083      	sub	sp, #12
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800ee18:	4b06      	ldr	r3, [pc, #24]	; (800ee34 <LL_EXTI_DisableIT_32_63+0x24>)
 800ee1a:	6a1a      	ldr	r2, [r3, #32]
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	43db      	mvns	r3, r3
 800ee20:	4904      	ldr	r1, [pc, #16]	; (800ee34 <LL_EXTI_DisableIT_32_63+0x24>)
 800ee22:	4013      	ands	r3, r2
 800ee24:	620b      	str	r3, [r1, #32]
}
 800ee26:	bf00      	nop
 800ee28:	370c      	adds	r7, #12
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee30:	4770      	bx	lr
 800ee32:	bf00      	nop
 800ee34:	40010400 	.word	0x40010400

0800ee38 <LL_EXTI_EnableEvent_0_31>:
{
 800ee38:	b480      	push	{r7}
 800ee3a:	b083      	sub	sp, #12
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800ee40:	4b05      	ldr	r3, [pc, #20]	; (800ee58 <LL_EXTI_EnableEvent_0_31+0x20>)
 800ee42:	685a      	ldr	r2, [r3, #4]
 800ee44:	4904      	ldr	r1, [pc, #16]	; (800ee58 <LL_EXTI_EnableEvent_0_31+0x20>)
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	4313      	orrs	r3, r2
 800ee4a:	604b      	str	r3, [r1, #4]
}
 800ee4c:	bf00      	nop
 800ee4e:	370c      	adds	r7, #12
 800ee50:	46bd      	mov	sp, r7
 800ee52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee56:	4770      	bx	lr
 800ee58:	40010400 	.word	0x40010400

0800ee5c <LL_EXTI_EnableEvent_32_63>:
{
 800ee5c:	b480      	push	{r7}
 800ee5e:	b083      	sub	sp, #12
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800ee64:	4b05      	ldr	r3, [pc, #20]	; (800ee7c <LL_EXTI_EnableEvent_32_63+0x20>)
 800ee66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ee68:	4904      	ldr	r1, [pc, #16]	; (800ee7c <LL_EXTI_EnableEvent_32_63+0x20>)
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	4313      	orrs	r3, r2
 800ee6e:	624b      	str	r3, [r1, #36]	; 0x24
}
 800ee70:	bf00      	nop
 800ee72:	370c      	adds	r7, #12
 800ee74:	46bd      	mov	sp, r7
 800ee76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7a:	4770      	bx	lr
 800ee7c:	40010400 	.word	0x40010400

0800ee80 <LL_EXTI_DisableEvent_0_31>:
{
 800ee80:	b480      	push	{r7}
 800ee82:	b083      	sub	sp, #12
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800ee88:	4b06      	ldr	r3, [pc, #24]	; (800eea4 <LL_EXTI_DisableEvent_0_31+0x24>)
 800ee8a:	685a      	ldr	r2, [r3, #4]
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	43db      	mvns	r3, r3
 800ee90:	4904      	ldr	r1, [pc, #16]	; (800eea4 <LL_EXTI_DisableEvent_0_31+0x24>)
 800ee92:	4013      	ands	r3, r2
 800ee94:	604b      	str	r3, [r1, #4]
}
 800ee96:	bf00      	nop
 800ee98:	370c      	adds	r7, #12
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea0:	4770      	bx	lr
 800eea2:	bf00      	nop
 800eea4:	40010400 	.word	0x40010400

0800eea8 <LL_EXTI_DisableEvent_32_63>:
{
 800eea8:	b480      	push	{r7}
 800eeaa:	b083      	sub	sp, #12
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800eeb0:	4b06      	ldr	r3, [pc, #24]	; (800eecc <LL_EXTI_DisableEvent_32_63+0x24>)
 800eeb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	43db      	mvns	r3, r3
 800eeb8:	4904      	ldr	r1, [pc, #16]	; (800eecc <LL_EXTI_DisableEvent_32_63+0x24>)
 800eeba:	4013      	ands	r3, r2
 800eebc:	624b      	str	r3, [r1, #36]	; 0x24
}
 800eebe:	bf00      	nop
 800eec0:	370c      	adds	r7, #12
 800eec2:	46bd      	mov	sp, r7
 800eec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec8:	4770      	bx	lr
 800eeca:	bf00      	nop
 800eecc:	40010400 	.word	0x40010400

0800eed0 <LL_EXTI_EnableRisingTrig_0_31>:
{
 800eed0:	b480      	push	{r7}
 800eed2:	b083      	sub	sp, #12
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800eed8:	4b05      	ldr	r3, [pc, #20]	; (800eef0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800eeda:	689a      	ldr	r2, [r3, #8]
 800eedc:	4904      	ldr	r1, [pc, #16]	; (800eef0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	4313      	orrs	r3, r2
 800eee2:	608b      	str	r3, [r1, #8]
}
 800eee4:	bf00      	nop
 800eee6:	370c      	adds	r7, #12
 800eee8:	46bd      	mov	sp, r7
 800eeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeee:	4770      	bx	lr
 800eef0:	40010400 	.word	0x40010400

0800eef4 <LL_EXTI_EnableRisingTrig_32_63>:
{
 800eef4:	b480      	push	{r7}
 800eef6:	b083      	sub	sp, #12
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800eefc:	4b05      	ldr	r3, [pc, #20]	; (800ef14 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800eefe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ef00:	4904      	ldr	r1, [pc, #16]	; (800ef14 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	4313      	orrs	r3, r2
 800ef06:	628b      	str	r3, [r1, #40]	; 0x28
}
 800ef08:	bf00      	nop
 800ef0a:	370c      	adds	r7, #12
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef12:	4770      	bx	lr
 800ef14:	40010400 	.word	0x40010400

0800ef18 <LL_EXTI_DisableRisingTrig_0_31>:
{
 800ef18:	b480      	push	{r7}
 800ef1a:	b083      	sub	sp, #12
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800ef20:	4b06      	ldr	r3, [pc, #24]	; (800ef3c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800ef22:	689a      	ldr	r2, [r3, #8]
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	43db      	mvns	r3, r3
 800ef28:	4904      	ldr	r1, [pc, #16]	; (800ef3c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800ef2a:	4013      	ands	r3, r2
 800ef2c:	608b      	str	r3, [r1, #8]
}
 800ef2e:	bf00      	nop
 800ef30:	370c      	adds	r7, #12
 800ef32:	46bd      	mov	sp, r7
 800ef34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef38:	4770      	bx	lr
 800ef3a:	bf00      	nop
 800ef3c:	40010400 	.word	0x40010400

0800ef40 <LL_EXTI_DisableRisingTrig_32_63>:
{
 800ef40:	b480      	push	{r7}
 800ef42:	b083      	sub	sp, #12
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800ef48:	4b06      	ldr	r3, [pc, #24]	; (800ef64 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800ef4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	43db      	mvns	r3, r3
 800ef50:	4904      	ldr	r1, [pc, #16]	; (800ef64 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800ef52:	4013      	ands	r3, r2
 800ef54:	628b      	str	r3, [r1, #40]	; 0x28
}
 800ef56:	bf00      	nop
 800ef58:	370c      	adds	r7, #12
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef60:	4770      	bx	lr
 800ef62:	bf00      	nop
 800ef64:	40010400 	.word	0x40010400

0800ef68 <LL_EXTI_EnableFallingTrig_0_31>:
{
 800ef68:	b480      	push	{r7}
 800ef6a:	b083      	sub	sp, #12
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800ef70:	4b05      	ldr	r3, [pc, #20]	; (800ef88 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800ef72:	68da      	ldr	r2, [r3, #12]
 800ef74:	4904      	ldr	r1, [pc, #16]	; (800ef88 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	4313      	orrs	r3, r2
 800ef7a:	60cb      	str	r3, [r1, #12]
}
 800ef7c:	bf00      	nop
 800ef7e:	370c      	adds	r7, #12
 800ef80:	46bd      	mov	sp, r7
 800ef82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef86:	4770      	bx	lr
 800ef88:	40010400 	.word	0x40010400

0800ef8c <LL_EXTI_EnableFallingTrig_32_63>:
{
 800ef8c:	b480      	push	{r7}
 800ef8e:	b083      	sub	sp, #12
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800ef94:	4b05      	ldr	r3, [pc, #20]	; (800efac <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800ef96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef98:	4904      	ldr	r1, [pc, #16]	; (800efac <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	4313      	orrs	r3, r2
 800ef9e:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800efa0:	bf00      	nop
 800efa2:	370c      	adds	r7, #12
 800efa4:	46bd      	mov	sp, r7
 800efa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efaa:	4770      	bx	lr
 800efac:	40010400 	.word	0x40010400

0800efb0 <LL_EXTI_DisableFallingTrig_0_31>:
{
 800efb0:	b480      	push	{r7}
 800efb2:	b083      	sub	sp, #12
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800efb8:	4b06      	ldr	r3, [pc, #24]	; (800efd4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800efba:	68da      	ldr	r2, [r3, #12]
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	43db      	mvns	r3, r3
 800efc0:	4904      	ldr	r1, [pc, #16]	; (800efd4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800efc2:	4013      	ands	r3, r2
 800efc4:	60cb      	str	r3, [r1, #12]
}
 800efc6:	bf00      	nop
 800efc8:	370c      	adds	r7, #12
 800efca:	46bd      	mov	sp, r7
 800efcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd0:	4770      	bx	lr
 800efd2:	bf00      	nop
 800efd4:	40010400 	.word	0x40010400

0800efd8 <LL_EXTI_DisableFallingTrig_32_63>:
{
 800efd8:	b480      	push	{r7}
 800efda:	b083      	sub	sp, #12
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800efe0:	4b06      	ldr	r3, [pc, #24]	; (800effc <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800efe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	43db      	mvns	r3, r3
 800efe8:	4904      	ldr	r1, [pc, #16]	; (800effc <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800efea:	4013      	ands	r3, r2
 800efec:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800efee:	bf00      	nop
 800eff0:	370c      	adds	r7, #12
 800eff2:	46bd      	mov	sp, r7
 800eff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff8:	4770      	bx	lr
 800effa:	bf00      	nop
 800effc:	40010400 	.word	0x40010400

0800f000 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800f000:	b580      	push	{r7, lr}
 800f002:	b084      	sub	sp, #16
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 800f008:	2300      	movs	r3, #0
 800f00a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	7a1b      	ldrb	r3, [r3, #8]
 800f010:	2b00      	cmp	r3, #0
 800f012:	f000 80c8 	beq.w	800f1a6 <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d05d      	beq.n	800f0da <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	7a5b      	ldrb	r3, [r3, #9]
 800f022:	2b01      	cmp	r3, #1
 800f024:	d00e      	beq.n	800f044 <LL_EXTI_Init+0x44>
 800f026:	2b02      	cmp	r3, #2
 800f028:	d017      	beq.n	800f05a <LL_EXTI_Init+0x5a>
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d120      	bne.n	800f070 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	4618      	mov	r0, r3
 800f034:	f7ff ff24 	bl	800ee80 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	4618      	mov	r0, r3
 800f03e:	f7ff feaf 	bl	800eda0 <LL_EXTI_EnableIT_0_31>
          break;
 800f042:	e018      	b.n	800f076 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	4618      	mov	r0, r3
 800f04a:	f7ff fecd 	bl	800ede8 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	4618      	mov	r0, r3
 800f054:	f7ff fef0 	bl	800ee38 <LL_EXTI_EnableEvent_0_31>
          break;
 800f058:	e00d      	b.n	800f076 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	4618      	mov	r0, r3
 800f060:	f7ff fe9e 	bl	800eda0 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	4618      	mov	r0, r3
 800f06a:	f7ff fee5 	bl	800ee38 <LL_EXTI_EnableEvent_0_31>
          break;
 800f06e:	e002      	b.n	800f076 <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 800f070:	2301      	movs	r3, #1
 800f072:	60fb      	str	r3, [r7, #12]
          break;
 800f074:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	7a9b      	ldrb	r3, [r3, #10]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d02d      	beq.n	800f0da <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	7a9b      	ldrb	r3, [r3, #10]
 800f082:	2b02      	cmp	r3, #2
 800f084:	d00e      	beq.n	800f0a4 <LL_EXTI_Init+0xa4>
 800f086:	2b03      	cmp	r3, #3
 800f088:	d017      	beq.n	800f0ba <LL_EXTI_Init+0xba>
 800f08a:	2b01      	cmp	r3, #1
 800f08c:	d120      	bne.n	800f0d0 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	4618      	mov	r0, r3
 800f094:	f7ff ff8c 	bl	800efb0 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	4618      	mov	r0, r3
 800f09e:	f7ff ff17 	bl	800eed0 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800f0a2:	e01b      	b.n	800f0dc <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	f7ff ff35 	bl	800ef18 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	f7ff ff58 	bl	800ef68 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800f0b8:	e010      	b.n	800f0dc <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	4618      	mov	r0, r3
 800f0c0:	f7ff ff06 	bl	800eed0 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	f7ff ff4d 	bl	800ef68 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800f0ce:	e005      	b.n	800f0dc <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	f043 0302 	orr.w	r3, r3, #2
 800f0d6:	60fb      	str	r3, [r7, #12]
            break;
 800f0d8:	e000      	b.n	800f0dc <LL_EXTI_Init+0xdc>
        }
      }
 800f0da:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	685b      	ldr	r3, [r3, #4]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d075      	beq.n	800f1d0 <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	7a5b      	ldrb	r3, [r3, #9]
 800f0e8:	2b01      	cmp	r3, #1
 800f0ea:	d00e      	beq.n	800f10a <LL_EXTI_Init+0x10a>
 800f0ec:	2b02      	cmp	r3, #2
 800f0ee:	d017      	beq.n	800f120 <LL_EXTI_Init+0x120>
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d120      	bne.n	800f136 <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	685b      	ldr	r3, [r3, #4]
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	f7ff fed5 	bl	800eea8 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	685b      	ldr	r3, [r3, #4]
 800f102:	4618      	mov	r0, r3
 800f104:	f7ff fe5e 	bl	800edc4 <LL_EXTI_EnableIT_32_63>
          break;
 800f108:	e01a      	b.n	800f140 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	685b      	ldr	r3, [r3, #4]
 800f10e:	4618      	mov	r0, r3
 800f110:	f7ff fe7e 	bl	800ee10 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	685b      	ldr	r3, [r3, #4]
 800f118:	4618      	mov	r0, r3
 800f11a:	f7ff fe9f 	bl	800ee5c <LL_EXTI_EnableEvent_32_63>
          break;
 800f11e:	e00f      	b.n	800f140 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	685b      	ldr	r3, [r3, #4]
 800f124:	4618      	mov	r0, r3
 800f126:	f7ff fe4d 	bl	800edc4 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	685b      	ldr	r3, [r3, #4]
 800f12e:	4618      	mov	r0, r3
 800f130:	f7ff fe94 	bl	800ee5c <LL_EXTI_EnableEvent_32_63>
          break;
 800f134:	e004      	b.n	800f140 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	f043 0304 	orr.w	r3, r3, #4
 800f13c:	60fb      	str	r3, [r7, #12]
          break;
 800f13e:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	7a9b      	ldrb	r3, [r3, #10]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d043      	beq.n	800f1d0 <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	7a9b      	ldrb	r3, [r3, #10]
 800f14c:	2b02      	cmp	r3, #2
 800f14e:	d00e      	beq.n	800f16e <LL_EXTI_Init+0x16e>
 800f150:	2b03      	cmp	r3, #3
 800f152:	d017      	beq.n	800f184 <LL_EXTI_Init+0x184>
 800f154:	2b01      	cmp	r3, #1
 800f156:	d120      	bne.n	800f19a <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	685b      	ldr	r3, [r3, #4]
 800f15c:	4618      	mov	r0, r3
 800f15e:	f7ff ff3b 	bl	800efd8 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	685b      	ldr	r3, [r3, #4]
 800f166:	4618      	mov	r0, r3
 800f168:	f7ff fec4 	bl	800eef4 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800f16c:	e031      	b.n	800f1d2 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	685b      	ldr	r3, [r3, #4]
 800f172:	4618      	mov	r0, r3
 800f174:	f7ff fee4 	bl	800ef40 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	685b      	ldr	r3, [r3, #4]
 800f17c:	4618      	mov	r0, r3
 800f17e:	f7ff ff05 	bl	800ef8c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800f182:	e026      	b.n	800f1d2 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	685b      	ldr	r3, [r3, #4]
 800f188:	4618      	mov	r0, r3
 800f18a:	f7ff feb3 	bl	800eef4 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	685b      	ldr	r3, [r3, #4]
 800f192:	4618      	mov	r0, r3
 800f194:	f7ff fefa 	bl	800ef8c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800f198:	e01b      	b.n	800f1d2 <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	f043 0305 	orr.w	r3, r3, #5
 800f1a0:	60fb      	str	r3, [r7, #12]
            break;
 800f1a2:	bf00      	nop
 800f1a4:	e015      	b.n	800f1d2 <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	f7ff fe1c 	bl	800ede8 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	f7ff fe63 	bl	800ee80 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	685b      	ldr	r3, [r3, #4]
 800f1be:	4618      	mov	r0, r3
 800f1c0:	f7ff fe26 	bl	800ee10 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	685b      	ldr	r3, [r3, #4]
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	f7ff fe6d 	bl	800eea8 <LL_EXTI_DisableEvent_32_63>
 800f1ce:	e000      	b.n	800f1d2 <LL_EXTI_Init+0x1d2>
      }
 800f1d0:	bf00      	nop
  }

  return status;
 800f1d2:	68fb      	ldr	r3, [r7, #12]
}
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	3710      	adds	r7, #16
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	bd80      	pop	{r7, pc}

0800f1dc <LL_GPIO_SetPinMode>:
{
 800f1dc:	b480      	push	{r7}
 800f1de:	b089      	sub	sp, #36	; 0x24
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	60f8      	str	r0, [r7, #12]
 800f1e4:	60b9      	str	r1, [r7, #8]
 800f1e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	681a      	ldr	r2, [r3, #0]
 800f1ec:	68bb      	ldr	r3, [r7, #8]
 800f1ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f1f0:	697b      	ldr	r3, [r7, #20]
 800f1f2:	fa93 f3a3 	rbit	r3, r3
 800f1f6:	613b      	str	r3, [r7, #16]
  return result;
 800f1f8:	693b      	ldr	r3, [r7, #16]
 800f1fa:	fab3 f383 	clz	r3, r3
 800f1fe:	b2db      	uxtb	r3, r3
 800f200:	005b      	lsls	r3, r3, #1
 800f202:	2103      	movs	r1, #3
 800f204:	fa01 f303 	lsl.w	r3, r1, r3
 800f208:	43db      	mvns	r3, r3
 800f20a:	401a      	ands	r2, r3
 800f20c:	68bb      	ldr	r3, [r7, #8]
 800f20e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f210:	69fb      	ldr	r3, [r7, #28]
 800f212:	fa93 f3a3 	rbit	r3, r3
 800f216:	61bb      	str	r3, [r7, #24]
  return result;
 800f218:	69bb      	ldr	r3, [r7, #24]
 800f21a:	fab3 f383 	clz	r3, r3
 800f21e:	b2db      	uxtb	r3, r3
 800f220:	005b      	lsls	r3, r3, #1
 800f222:	6879      	ldr	r1, [r7, #4]
 800f224:	fa01 f303 	lsl.w	r3, r1, r3
 800f228:	431a      	orrs	r2, r3
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	601a      	str	r2, [r3, #0]
}
 800f22e:	bf00      	nop
 800f230:	3724      	adds	r7, #36	; 0x24
 800f232:	46bd      	mov	sp, r7
 800f234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f238:	4770      	bx	lr

0800f23a <LL_GPIO_SetPinOutputType>:
{
 800f23a:	b480      	push	{r7}
 800f23c:	b085      	sub	sp, #20
 800f23e:	af00      	add	r7, sp, #0
 800f240:	60f8      	str	r0, [r7, #12]
 800f242:	60b9      	str	r1, [r7, #8]
 800f244:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	685a      	ldr	r2, [r3, #4]
 800f24a:	68bb      	ldr	r3, [r7, #8]
 800f24c:	43db      	mvns	r3, r3
 800f24e:	401a      	ands	r2, r3
 800f250:	68bb      	ldr	r3, [r7, #8]
 800f252:	6879      	ldr	r1, [r7, #4]
 800f254:	fb01 f303 	mul.w	r3, r1, r3
 800f258:	431a      	orrs	r2, r3
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	605a      	str	r2, [r3, #4]
}
 800f25e:	bf00      	nop
 800f260:	3714      	adds	r7, #20
 800f262:	46bd      	mov	sp, r7
 800f264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f268:	4770      	bx	lr

0800f26a <LL_GPIO_SetPinSpeed>:
{
 800f26a:	b480      	push	{r7}
 800f26c:	b089      	sub	sp, #36	; 0x24
 800f26e:	af00      	add	r7, sp, #0
 800f270:	60f8      	str	r0, [r7, #12]
 800f272:	60b9      	str	r1, [r7, #8]
 800f274:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	689a      	ldr	r2, [r3, #8]
 800f27a:	68bb      	ldr	r3, [r7, #8]
 800f27c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f27e:	697b      	ldr	r3, [r7, #20]
 800f280:	fa93 f3a3 	rbit	r3, r3
 800f284:	613b      	str	r3, [r7, #16]
  return result;
 800f286:	693b      	ldr	r3, [r7, #16]
 800f288:	fab3 f383 	clz	r3, r3
 800f28c:	b2db      	uxtb	r3, r3
 800f28e:	005b      	lsls	r3, r3, #1
 800f290:	2103      	movs	r1, #3
 800f292:	fa01 f303 	lsl.w	r3, r1, r3
 800f296:	43db      	mvns	r3, r3
 800f298:	401a      	ands	r2, r3
 800f29a:	68bb      	ldr	r3, [r7, #8]
 800f29c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f29e:	69fb      	ldr	r3, [r7, #28]
 800f2a0:	fa93 f3a3 	rbit	r3, r3
 800f2a4:	61bb      	str	r3, [r7, #24]
  return result;
 800f2a6:	69bb      	ldr	r3, [r7, #24]
 800f2a8:	fab3 f383 	clz	r3, r3
 800f2ac:	b2db      	uxtb	r3, r3
 800f2ae:	005b      	lsls	r3, r3, #1
 800f2b0:	6879      	ldr	r1, [r7, #4]
 800f2b2:	fa01 f303 	lsl.w	r3, r1, r3
 800f2b6:	431a      	orrs	r2, r3
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	609a      	str	r2, [r3, #8]
}
 800f2bc:	bf00      	nop
 800f2be:	3724      	adds	r7, #36	; 0x24
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c6:	4770      	bx	lr

0800f2c8 <LL_GPIO_SetPinPull>:
{
 800f2c8:	b480      	push	{r7}
 800f2ca:	b089      	sub	sp, #36	; 0x24
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	60f8      	str	r0, [r7, #12]
 800f2d0:	60b9      	str	r1, [r7, #8]
 800f2d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	68da      	ldr	r2, [r3, #12]
 800f2d8:	68bb      	ldr	r3, [r7, #8]
 800f2da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f2dc:	697b      	ldr	r3, [r7, #20]
 800f2de:	fa93 f3a3 	rbit	r3, r3
 800f2e2:	613b      	str	r3, [r7, #16]
  return result;
 800f2e4:	693b      	ldr	r3, [r7, #16]
 800f2e6:	fab3 f383 	clz	r3, r3
 800f2ea:	b2db      	uxtb	r3, r3
 800f2ec:	005b      	lsls	r3, r3, #1
 800f2ee:	2103      	movs	r1, #3
 800f2f0:	fa01 f303 	lsl.w	r3, r1, r3
 800f2f4:	43db      	mvns	r3, r3
 800f2f6:	401a      	ands	r2, r3
 800f2f8:	68bb      	ldr	r3, [r7, #8]
 800f2fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f2fc:	69fb      	ldr	r3, [r7, #28]
 800f2fe:	fa93 f3a3 	rbit	r3, r3
 800f302:	61bb      	str	r3, [r7, #24]
  return result;
 800f304:	69bb      	ldr	r3, [r7, #24]
 800f306:	fab3 f383 	clz	r3, r3
 800f30a:	b2db      	uxtb	r3, r3
 800f30c:	005b      	lsls	r3, r3, #1
 800f30e:	6879      	ldr	r1, [r7, #4]
 800f310:	fa01 f303 	lsl.w	r3, r1, r3
 800f314:	431a      	orrs	r2, r3
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	60da      	str	r2, [r3, #12]
}
 800f31a:	bf00      	nop
 800f31c:	3724      	adds	r7, #36	; 0x24
 800f31e:	46bd      	mov	sp, r7
 800f320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f324:	4770      	bx	lr

0800f326 <LL_GPIO_SetAFPin_0_7>:
{
 800f326:	b480      	push	{r7}
 800f328:	b089      	sub	sp, #36	; 0x24
 800f32a:	af00      	add	r7, sp, #0
 800f32c:	60f8      	str	r0, [r7, #12]
 800f32e:	60b9      	str	r1, [r7, #8]
 800f330:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	6a1a      	ldr	r2, [r3, #32]
 800f336:	68bb      	ldr	r3, [r7, #8]
 800f338:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f33a:	697b      	ldr	r3, [r7, #20]
 800f33c:	fa93 f3a3 	rbit	r3, r3
 800f340:	613b      	str	r3, [r7, #16]
  return result;
 800f342:	693b      	ldr	r3, [r7, #16]
 800f344:	fab3 f383 	clz	r3, r3
 800f348:	b2db      	uxtb	r3, r3
 800f34a:	009b      	lsls	r3, r3, #2
 800f34c:	210f      	movs	r1, #15
 800f34e:	fa01 f303 	lsl.w	r3, r1, r3
 800f352:	43db      	mvns	r3, r3
 800f354:	401a      	ands	r2, r3
 800f356:	68bb      	ldr	r3, [r7, #8]
 800f358:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f35a:	69fb      	ldr	r3, [r7, #28]
 800f35c:	fa93 f3a3 	rbit	r3, r3
 800f360:	61bb      	str	r3, [r7, #24]
  return result;
 800f362:	69bb      	ldr	r3, [r7, #24]
 800f364:	fab3 f383 	clz	r3, r3
 800f368:	b2db      	uxtb	r3, r3
 800f36a:	009b      	lsls	r3, r3, #2
 800f36c:	6879      	ldr	r1, [r7, #4]
 800f36e:	fa01 f303 	lsl.w	r3, r1, r3
 800f372:	431a      	orrs	r2, r3
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	621a      	str	r2, [r3, #32]
}
 800f378:	bf00      	nop
 800f37a:	3724      	adds	r7, #36	; 0x24
 800f37c:	46bd      	mov	sp, r7
 800f37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f382:	4770      	bx	lr

0800f384 <LL_GPIO_SetAFPin_8_15>:
{
 800f384:	b480      	push	{r7}
 800f386:	b089      	sub	sp, #36	; 0x24
 800f388:	af00      	add	r7, sp, #0
 800f38a:	60f8      	str	r0, [r7, #12]
 800f38c:	60b9      	str	r1, [r7, #8]
 800f38e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f394:	68bb      	ldr	r3, [r7, #8]
 800f396:	0a1b      	lsrs	r3, r3, #8
 800f398:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f39a:	697b      	ldr	r3, [r7, #20]
 800f39c:	fa93 f3a3 	rbit	r3, r3
 800f3a0:	613b      	str	r3, [r7, #16]
  return result;
 800f3a2:	693b      	ldr	r3, [r7, #16]
 800f3a4:	fab3 f383 	clz	r3, r3
 800f3a8:	b2db      	uxtb	r3, r3
 800f3aa:	009b      	lsls	r3, r3, #2
 800f3ac:	210f      	movs	r1, #15
 800f3ae:	fa01 f303 	lsl.w	r3, r1, r3
 800f3b2:	43db      	mvns	r3, r3
 800f3b4:	401a      	ands	r2, r3
 800f3b6:	68bb      	ldr	r3, [r7, #8]
 800f3b8:	0a1b      	lsrs	r3, r3, #8
 800f3ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f3bc:	69fb      	ldr	r3, [r7, #28]
 800f3be:	fa93 f3a3 	rbit	r3, r3
 800f3c2:	61bb      	str	r3, [r7, #24]
  return result;
 800f3c4:	69bb      	ldr	r3, [r7, #24]
 800f3c6:	fab3 f383 	clz	r3, r3
 800f3ca:	b2db      	uxtb	r3, r3
 800f3cc:	009b      	lsls	r3, r3, #2
 800f3ce:	6879      	ldr	r1, [r7, #4]
 800f3d0:	fa01 f303 	lsl.w	r3, r1, r3
 800f3d4:	431a      	orrs	r2, r3
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	625a      	str	r2, [r3, #36]	; 0x24
}
 800f3da:	bf00      	nop
 800f3dc:	3724      	adds	r7, #36	; 0x24
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e4:	4770      	bx	lr

0800f3e6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800f3e6:	b580      	push	{r7, lr}
 800f3e8:	b086      	sub	sp, #24
 800f3ea:	af00      	add	r7, sp, #0
 800f3ec:	6078      	str	r0, [r7, #4]
 800f3ee:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800f3f0:	683b      	ldr	r3, [r7, #0]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	fa93 f3a3 	rbit	r3, r3
 800f3fc:	60bb      	str	r3, [r7, #8]
  return result;
 800f3fe:	68bb      	ldr	r3, [r7, #8]
 800f400:	fab3 f383 	clz	r3, r3
 800f404:	b2db      	uxtb	r3, r3
 800f406:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800f408:	e040      	b.n	800f48c <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800f40a:	683b      	ldr	r3, [r7, #0]
 800f40c:	681a      	ldr	r2, [r3, #0]
 800f40e:	2101      	movs	r1, #1
 800f410:	697b      	ldr	r3, [r7, #20]
 800f412:	fa01 f303 	lsl.w	r3, r1, r3
 800f416:	4013      	ands	r3, r2
 800f418:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 800f41a:	693b      	ldr	r3, [r7, #16]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d032      	beq.n	800f486 <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800f420:	683b      	ldr	r3, [r7, #0]
 800f422:	685b      	ldr	r3, [r3, #4]
 800f424:	461a      	mov	r2, r3
 800f426:	6939      	ldr	r1, [r7, #16]
 800f428:	6878      	ldr	r0, [r7, #4]
 800f42a:	f7ff fed7 	bl	800f1dc <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800f42e:	683b      	ldr	r3, [r7, #0]
 800f430:	685b      	ldr	r3, [r3, #4]
 800f432:	2b01      	cmp	r3, #1
 800f434:	d003      	beq.n	800f43e <LL_GPIO_Init+0x58>
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	685b      	ldr	r3, [r3, #4]
 800f43a:	2b02      	cmp	r3, #2
 800f43c:	d106      	bne.n	800f44c <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800f43e:	683b      	ldr	r3, [r7, #0]
 800f440:	689b      	ldr	r3, [r3, #8]
 800f442:	461a      	mov	r2, r3
 800f444:	6939      	ldr	r1, [r7, #16]
 800f446:	6878      	ldr	r0, [r7, #4]
 800f448:	f7ff ff0f 	bl	800f26a <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800f44c:	683b      	ldr	r3, [r7, #0]
 800f44e:	691b      	ldr	r3, [r3, #16]
 800f450:	461a      	mov	r2, r3
 800f452:	6939      	ldr	r1, [r7, #16]
 800f454:	6878      	ldr	r0, [r7, #4]
 800f456:	f7ff ff37 	bl	800f2c8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800f45a:	683b      	ldr	r3, [r7, #0]
 800f45c:	685b      	ldr	r3, [r3, #4]
 800f45e:	2b02      	cmp	r3, #2
 800f460:	d111      	bne.n	800f486 <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800f462:	693b      	ldr	r3, [r7, #16]
 800f464:	2bff      	cmp	r3, #255	; 0xff
 800f466:	d807      	bhi.n	800f478 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800f468:	683b      	ldr	r3, [r7, #0]
 800f46a:	695b      	ldr	r3, [r3, #20]
 800f46c:	461a      	mov	r2, r3
 800f46e:	6939      	ldr	r1, [r7, #16]
 800f470:	6878      	ldr	r0, [r7, #4]
 800f472:	f7ff ff58 	bl	800f326 <LL_GPIO_SetAFPin_0_7>
 800f476:	e006      	b.n	800f486 <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800f478:	683b      	ldr	r3, [r7, #0]
 800f47a:	695b      	ldr	r3, [r3, #20]
 800f47c:	461a      	mov	r2, r3
 800f47e:	6939      	ldr	r1, [r7, #16]
 800f480:	6878      	ldr	r0, [r7, #4]
 800f482:	f7ff ff7f 	bl	800f384 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800f486:	697b      	ldr	r3, [r7, #20]
 800f488:	3301      	adds	r3, #1
 800f48a:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800f48c:	683b      	ldr	r3, [r7, #0]
 800f48e:	681a      	ldr	r2, [r3, #0]
 800f490:	697b      	ldr	r3, [r7, #20]
 800f492:	fa22 f303 	lsr.w	r3, r2, r3
 800f496:	2b00      	cmp	r3, #0
 800f498:	d1b7      	bne.n	800f40a <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800f49a:	683b      	ldr	r3, [r7, #0]
 800f49c:	685b      	ldr	r3, [r3, #4]
 800f49e:	2b01      	cmp	r3, #1
 800f4a0:	d003      	beq.n	800f4aa <LL_GPIO_Init+0xc4>
 800f4a2:	683b      	ldr	r3, [r7, #0]
 800f4a4:	685b      	ldr	r3, [r3, #4]
 800f4a6:	2b02      	cmp	r3, #2
 800f4a8:	d107      	bne.n	800f4ba <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800f4aa:	683b      	ldr	r3, [r7, #0]
 800f4ac:	6819      	ldr	r1, [r3, #0]
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	68db      	ldr	r3, [r3, #12]
 800f4b2:	461a      	mov	r2, r3
 800f4b4:	6878      	ldr	r0, [r7, #4]
 800f4b6:	f7ff fec0 	bl	800f23a <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800f4ba:	2300      	movs	r3, #0
}
 800f4bc:	4618      	mov	r0, r3
 800f4be:	3718      	adds	r7, #24
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	bd80      	pop	{r7, pc}

0800f4c4 <ILI9341_Draw_Wave>:

 extern uint16_t BURST_MAX_SIZE;


void ILI9341_Draw_Wave(uint16_t x, uint16_t y, uint8_t weight, uint16_t colour, uint8_t scale, uint32_t* data_table, uint16_t data_table_size)
{
 800f4c4:	b590      	push	{r4, r7, lr}
 800f4c6:	b085      	sub	sp, #20
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	4604      	mov	r4, r0
 800f4cc:	4608      	mov	r0, r1
 800f4ce:	4611      	mov	r1, r2
 800f4d0:	461a      	mov	r2, r3
 800f4d2:	4623      	mov	r3, r4
 800f4d4:	80fb      	strh	r3, [r7, #6]
 800f4d6:	4603      	mov	r3, r0
 800f4d8:	80bb      	strh	r3, [r7, #4]
 800f4da:	460b      	mov	r3, r1
 800f4dc:	70fb      	strb	r3, [r7, #3]
 800f4de:	4613      	mov	r3, r2
 800f4e0:	803b      	strh	r3, [r7, #0]
	for(int w = 0; w < weight; w++ )
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	60fb      	str	r3, [r7, #12]
 800f4e6:	e026      	b.n	800f536 <ILI9341_Draw_Wave+0x72>
	{
		for(int i = 0; i < data_table_size; i++)
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	60bb      	str	r3, [r7, #8]
 800f4ec:	e01c      	b.n	800f528 <ILI9341_Draw_Wave+0x64>
		{
			ILI9341_Draw_Pixel(	x + i,	(y + data_table[i] / scale) + w, colour);
 800f4ee:	68bb      	ldr	r3, [r7, #8]
 800f4f0:	b29a      	uxth	r2, r3
 800f4f2:	88fb      	ldrh	r3, [r7, #6]
 800f4f4:	4413      	add	r3, r2
 800f4f6:	b298      	uxth	r0, r3
 800f4f8:	68bb      	ldr	r3, [r7, #8]
 800f4fa:	009b      	lsls	r3, r3, #2
 800f4fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4fe:	4413      	add	r3, r2
 800f500:	681a      	ldr	r2, [r3, #0]
 800f502:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f506:	fbb2 f3f3 	udiv	r3, r2, r3
 800f50a:	b29a      	uxth	r2, r3
 800f50c:	88bb      	ldrh	r3, [r7, #4]
 800f50e:	4413      	add	r3, r2
 800f510:	b29a      	uxth	r2, r3
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	b29b      	uxth	r3, r3
 800f516:	4413      	add	r3, r2
 800f518:	b29b      	uxth	r3, r3
 800f51a:	883a      	ldrh	r2, [r7, #0]
 800f51c:	4619      	mov	r1, r3
 800f51e:	f000 fc1f 	bl	800fd60 <ILI9341_Draw_Pixel>
		for(int i = 0; i < data_table_size; i++)
 800f522:	68bb      	ldr	r3, [r7, #8]
 800f524:	3301      	adds	r3, #1
 800f526:	60bb      	str	r3, [r7, #8]
 800f528:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f52a:	68ba      	ldr	r2, [r7, #8]
 800f52c:	429a      	cmp	r2, r3
 800f52e:	dbde      	blt.n	800f4ee <ILI9341_Draw_Wave+0x2a>
	for(int w = 0; w < weight; w++ )
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	3301      	adds	r3, #1
 800f534:	60fb      	str	r3, [r7, #12]
 800f536:	78fb      	ldrb	r3, [r7, #3]
 800f538:	68fa      	ldr	r2, [r7, #12]
 800f53a:	429a      	cmp	r2, r3
 800f53c:	dbd4      	blt.n	800f4e8 <ILI9341_Draw_Wave+0x24>

		}
	}

}
 800f53e:	bf00      	nop
 800f540:	3714      	adds	r7, #20
 800f542:	46bd      	mov	sp, r7
 800f544:	bd90      	pop	{r4, r7, pc}

0800f546 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 *
 */
void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint16_t border_colour)
{
 800f546:	b590      	push	{r4, r7, lr}
 800f548:	b087      	sub	sp, #28
 800f54a:	af02      	add	r7, sp, #8
 800f54c:	4604      	mov	r4, r0
 800f54e:	4608      	mov	r0, r1
 800f550:	4611      	mov	r1, r2
 800f552:	461a      	mov	r2, r3
 800f554:	4623      	mov	r3, r4
 800f556:	80fb      	strh	r3, [r7, #6]
 800f558:	4603      	mov	r3, r0
 800f55a:	80bb      	strh	r3, [r7, #4]
 800f55c:	460b      	mov	r3, r1
 800f55e:	807b      	strh	r3, [r7, #2]
 800f560:	4613      	mov	r3, r2
 800f562:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 800f564:	2300      	movs	r3, #0
 800f566:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 800f568:	7bfa      	ldrb	r2, [r7, #15]
 800f56a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f56e:	429a      	cmp	r2, r3
 800f570:	d939      	bls.n	800f5e6 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa0>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 800f572:	88ba      	ldrh	r2, [r7, #4]
 800f574:	7bfb      	ldrb	r3, [r7, #15]
 800f576:	441a      	add	r2, r3
 800f578:	88b9      	ldrh	r1, [r7, #4]
 800f57a:	883b      	ldrh	r3, [r7, #0]
 800f57c:	4419      	add	r1, r3
 800f57e:	7bfb      	ldrb	r3, [r7, #15]
 800f580:	1acb      	subs	r3, r1, r3
 800f582:	429a      	cmp	r2, r3
 800f584:	f000 8089 	beq.w	800f69a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
 800f588:	88fa      	ldrh	r2, [r7, #6]
 800f58a:	7bfb      	ldrb	r3, [r7, #15]
 800f58c:	441a      	add	r2, r3
 800f58e:	88f9      	ldrh	r1, [r7, #6]
 800f590:	887b      	ldrh	r3, [r7, #2]
 800f592:	4419      	add	r1, r3
 800f594:	7bfb      	ldrb	r3, [r7, #15]
 800f596:	1acb      	subs	r3, r1, r3
 800f598:	429a      	cmp	r2, r3
 800f59a:	d07e      	beq.n	800f69a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 800f59c:	7bfb      	ldrb	r3, [r7, #15]
 800f59e:	b29a      	uxth	r2, r3
 800f5a0:	88fb      	ldrh	r3, [r7, #6]
 800f5a2:	4413      	add	r3, r2
 800f5a4:	b298      	uxth	r0, r3
 800f5a6:	7bfb      	ldrb	r3, [r7, #15]
 800f5a8:	b29a      	uxth	r2, r3
 800f5aa:	88bb      	ldrh	r3, [r7, #4]
 800f5ac:	4413      	add	r3, r2
 800f5ae:	b299      	uxth	r1, r3
 800f5b0:	7bfb      	ldrb	r3, [r7, #15]
 800f5b2:	b29b      	uxth	r3, r3
 800f5b4:	005b      	lsls	r3, r3, #1
 800f5b6:	b29b      	uxth	r3, r3
 800f5b8:	887a      	ldrh	r2, [r7, #2]
 800f5ba:	1ad3      	subs	r3, r2, r3
 800f5bc:	b29b      	uxth	r3, r3
 800f5be:	3301      	adds	r3, #1
 800f5c0:	b29c      	uxth	r4, r3
 800f5c2:	7bfb      	ldrb	r3, [r7, #15]
 800f5c4:	b29b      	uxth	r3, r3
 800f5c6:	005b      	lsls	r3, r3, #1
 800f5c8:	b29b      	uxth	r3, r3
 800f5ca:	883a      	ldrh	r2, [r7, #0]
 800f5cc:	1ad3      	subs	r3, r2, r3
 800f5ce:	b29b      	uxth	r3, r3
 800f5d0:	3301      	adds	r3, #1
 800f5d2:	b29a      	uxth	r2, r3
 800f5d4:	2304      	movs	r3, #4
 800f5d6:	9301      	str	r3, [sp, #4]
 800f5d8:	8c3b      	ldrh	r3, [r7, #32]
 800f5da:	9300      	str	r3, [sp, #0]
 800f5dc:	4613      	mov	r3, r2
 800f5de:	4622      	mov	r2, r4
 800f5e0:	f000 fd18 	bl	8010014 <ILI9341_Draw_Rectangle>
				goto finish;
 800f5e4:	e05a      	b.n	800f69c <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x156>
			}
		}

		// Horizontal line - Top
		ILI9341_Draw_Horizontal_Line(	x + b,
 800f5e6:	7bfb      	ldrb	r3, [r7, #15]
 800f5e8:	b29a      	uxth	r2, r3
 800f5ea:	88fb      	ldrh	r3, [r7, #6]
 800f5ec:	4413      	add	r3, r2
 800f5ee:	b298      	uxth	r0, r3
 800f5f0:	7bfb      	ldrb	r3, [r7, #15]
 800f5f2:	b29a      	uxth	r2, r3
 800f5f4:	88bb      	ldrh	r3, [r7, #4]
 800f5f6:	4413      	add	r3, r2
 800f5f8:	b299      	uxth	r1, r3
										y + b,
										(w - b)+1,
 800f5fa:	7bfb      	ldrb	r3, [r7, #15]
 800f5fc:	b29b      	uxth	r3, r3
 800f5fe:	887a      	ldrh	r2, [r7, #2]
 800f600:	1ad3      	subs	r3, r2, r3
 800f602:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800f604:	3301      	adds	r3, #1
 800f606:	b29a      	uxth	r2, r3
 800f608:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f60a:	f000 fa6b 	bl	800fae4 <ILI9341_Draw_Horizontal_Line>
										border_colour);
		// Horizontal line - Bottom
		ILI9341_Draw_Horizontal_Line(	x + b,
 800f60e:	7bfb      	ldrb	r3, [r7, #15]
 800f610:	b29a      	uxth	r2, r3
 800f612:	88fb      	ldrh	r3, [r7, #6]
 800f614:	4413      	add	r3, r2
 800f616:	b298      	uxth	r0, r3
										(y + h) - b,
 800f618:	88ba      	ldrh	r2, [r7, #4]
 800f61a:	883b      	ldrh	r3, [r7, #0]
 800f61c:	4413      	add	r3, r2
 800f61e:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800f620:	7bfb      	ldrb	r3, [r7, #15]
 800f622:	b29b      	uxth	r3, r3
 800f624:	1ad3      	subs	r3, r2, r3
 800f626:	b299      	uxth	r1, r3
										(w - b)+1,
 800f628:	7bfb      	ldrb	r3, [r7, #15]
 800f62a:	b29b      	uxth	r3, r3
 800f62c:	887a      	ldrh	r2, [r7, #2]
 800f62e:	1ad3      	subs	r3, r2, r3
 800f630:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800f632:	3301      	adds	r3, #1
 800f634:	b29a      	uxth	r2, r3
 800f636:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f638:	f000 fa54 	bl	800fae4 <ILI9341_Draw_Horizontal_Line>
										border_colour);


		// Vertical line - left
		ILI9341_Draw_Vertical_Line(		x + b,
 800f63c:	7bfb      	ldrb	r3, [r7, #15]
 800f63e:	b29a      	uxth	r2, r3
 800f640:	88fb      	ldrh	r3, [r7, #6]
 800f642:	4413      	add	r3, r2
 800f644:	b298      	uxth	r0, r3
 800f646:	7bfb      	ldrb	r3, [r7, #15]
 800f648:	b29a      	uxth	r2, r3
 800f64a:	88bb      	ldrh	r3, [r7, #4]
 800f64c:	4413      	add	r3, r2
 800f64e:	b299      	uxth	r1, r3
 800f650:	7bfb      	ldrb	r3, [r7, #15]
 800f652:	b29b      	uxth	r3, r3
 800f654:	005b      	lsls	r3, r3, #1
 800f656:	b29b      	uxth	r3, r3
 800f658:	883a      	ldrh	r2, [r7, #0]
 800f65a:	1ad3      	subs	r3, r2, r3
 800f65c:	b29a      	uxth	r2, r3
 800f65e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f660:	f000 faa4 	bl	800fbac <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);
		// Vertical line - right
		ILI9341_Draw_Vertical_Line(		((x + w)) - (b),
 800f664:	88fa      	ldrh	r2, [r7, #6]
 800f666:	887b      	ldrh	r3, [r7, #2]
 800f668:	4413      	add	r3, r2
 800f66a:	b29a      	uxth	r2, r3
 800f66c:	7bfb      	ldrb	r3, [r7, #15]
 800f66e:	b29b      	uxth	r3, r3
 800f670:	1ad3      	subs	r3, r2, r3
 800f672:	b298      	uxth	r0, r3
 800f674:	7bfb      	ldrb	r3, [r7, #15]
 800f676:	b29a      	uxth	r2, r3
 800f678:	88bb      	ldrh	r3, [r7, #4]
 800f67a:	4413      	add	r3, r2
 800f67c:	b299      	uxth	r1, r3
 800f67e:	7bfb      	ldrb	r3, [r7, #15]
 800f680:	b29b      	uxth	r3, r3
 800f682:	005b      	lsls	r3, r3, #1
 800f684:	b29b      	uxth	r3, r3
 800f686:	883a      	ldrh	r2, [r7, #0]
 800f688:	1ad3      	subs	r3, r2, r3
 800f68a:	b29a      	uxth	r2, r3
 800f68c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f68e:	f000 fa8d 	bl	800fbac <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 800f692:	7bfb      	ldrb	r3, [r7, #15]
 800f694:	3301      	adds	r3, #1
 800f696:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 800f698:	e766      	b.n	800f568 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 800f69a:	bf00      	nop
	// done
	return;
 800f69c:	bf00      	nop
}
 800f69e:	3714      	adds	r7, #20
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	bd90      	pop	{r4, r7, pc}

0800f6a4 <ILI9341_Draw_Char>:
 *	@retval None
 *
 */

void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800f6a4:	b590      	push	{r4, r7, lr}
 800f6a6:	b089      	sub	sp, #36	; 0x24
 800f6a8:	af02      	add	r7, sp, #8
 800f6aa:	4604      	mov	r4, r0
 800f6ac:	4608      	mov	r0, r1
 800f6ae:	4611      	mov	r1, r2
 800f6b0:	461a      	mov	r2, r3
 800f6b2:	4623      	mov	r3, r4
 800f6b4:	71fb      	strb	r3, [r7, #7]
 800f6b6:	4603      	mov	r3, r0
 800f6b8:	80bb      	strh	r3, [r7, #4]
 800f6ba:	460b      	mov	r3, r1
 800f6bc:	807b      	strh	r3, [r7, #2]
 800f6be:	4613      	mov	r3, r2
 800f6c0:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 800f6c2:	79fb      	ldrb	r3, [r7, #7]
 800f6c4:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 800f6c6:	7dfb      	ldrb	r3, [r7, #23]
 800f6c8:	2b1f      	cmp	r3, #31
 800f6ca:	d802      	bhi.n	800f6d2 <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	71fb      	strb	r3, [r7, #7]
 800f6d0:	e002      	b.n	800f6d8 <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 800f6d2:	7dfb      	ldrb	r3, [r7, #23]
 800f6d4:	3b20      	subs	r3, #32
 800f6d6:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800f6d8:	2300      	movs	r3, #0
 800f6da:	753b      	strb	r3, [r7, #20]
 800f6dc:	e012      	b.n	800f704 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 800f6de:	7dfa      	ldrb	r2, [r7, #23]
 800f6e0:	7d38      	ldrb	r0, [r7, #20]
 800f6e2:	7d39      	ldrb	r1, [r7, #20]
 800f6e4:	4c48      	ldr	r4, [pc, #288]	; (800f808 <ILI9341_Draw_Char+0x164>)
 800f6e6:	4613      	mov	r3, r2
 800f6e8:	005b      	lsls	r3, r3, #1
 800f6ea:	4413      	add	r3, r2
 800f6ec:	005b      	lsls	r3, r3, #1
 800f6ee:	4423      	add	r3, r4
 800f6f0:	4403      	add	r3, r0
 800f6f2:	781a      	ldrb	r2, [r3, #0]
 800f6f4:	f107 0318 	add.w	r3, r7, #24
 800f6f8:	440b      	add	r3, r1
 800f6fa:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800f6fe:	7d3b      	ldrb	r3, [r7, #20]
 800f700:	3301      	adds	r3, #1
 800f702:	753b      	strb	r3, [r7, #20]
 800f704:	7d3b      	ldrb	r3, [r7, #20]
 800f706:	2b05      	cmp	r3, #5
 800f708:	d9e9      	bls.n	800f6de <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 800f70a:	2300      	movs	r3, #0
 800f70c:	757b      	strb	r3, [r7, #21]
 800f70e:	e074      	b.n	800f7fa <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 800f710:	2300      	movs	r3, #0
 800f712:	75bb      	strb	r3, [r7, #22]
 800f714:	e06b      	b.n	800f7ee <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 800f716:	7d7b      	ldrb	r3, [r7, #21]
 800f718:	f107 0218 	add.w	r2, r7, #24
 800f71c:	4413      	add	r3, r2
 800f71e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800f722:	461a      	mov	r2, r3
 800f724:	7dbb      	ldrb	r3, [r7, #22]
 800f726:	fa42 f303 	asr.w	r3, r2, r3
 800f72a:	f003 0301 	and.w	r3, r3, #1
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d02d      	beq.n	800f78e <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 800f732:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f734:	2b01      	cmp	r3, #1
 800f736:	d10e      	bne.n	800f756 <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 800f738:	7d7b      	ldrb	r3, [r7, #21]
 800f73a:	b29a      	uxth	r2, r3
 800f73c:	88bb      	ldrh	r3, [r7, #4]
 800f73e:	4413      	add	r3, r2
 800f740:	b298      	uxth	r0, r3
 800f742:	7dbb      	ldrb	r3, [r7, #22]
 800f744:	b29a      	uxth	r2, r3
 800f746:	887b      	ldrh	r3, [r7, #2]
 800f748:	4413      	add	r3, r2
 800f74a:	b29b      	uxth	r3, r3
 800f74c:	883a      	ldrh	r2, [r7, #0]
 800f74e:	4619      	mov	r1, r3
 800f750:	f000 fb06 	bl	800fd60 <ILI9341_Draw_Pixel>
 800f754:	e048      	b.n	800f7e8 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 800f756:	7d7b      	ldrb	r3, [r7, #21]
 800f758:	b29b      	uxth	r3, r3
 800f75a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800f75c:	fb12 f303 	smulbb	r3, r2, r3
 800f760:	b29a      	uxth	r2, r3
 800f762:	88bb      	ldrh	r3, [r7, #4]
 800f764:	4413      	add	r3, r2
 800f766:	b298      	uxth	r0, r3
 800f768:	7dbb      	ldrb	r3, [r7, #22]
 800f76a:	b29b      	uxth	r3, r3
 800f76c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800f76e:	fb12 f303 	smulbb	r3, r2, r3
 800f772:	b29a      	uxth	r2, r3
 800f774:	887b      	ldrh	r3, [r7, #2]
 800f776:	4413      	add	r3, r2
 800f778:	b299      	uxth	r1, r3
 800f77a:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800f77c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800f77e:	2301      	movs	r3, #1
 800f780:	9301      	str	r3, [sp, #4]
 800f782:	883b      	ldrh	r3, [r7, #0]
 800f784:	9300      	str	r3, [sp, #0]
 800f786:	4623      	mov	r3, r4
 800f788:	f000 fc44 	bl	8010014 <ILI9341_Draw_Rectangle>
 800f78c:	e02c      	b.n	800f7e8 <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 800f78e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f790:	2b01      	cmp	r3, #1
 800f792:	d10e      	bne.n	800f7b2 <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 800f794:	7d7b      	ldrb	r3, [r7, #21]
 800f796:	b29a      	uxth	r2, r3
 800f798:	88bb      	ldrh	r3, [r7, #4]
 800f79a:	4413      	add	r3, r2
 800f79c:	b298      	uxth	r0, r3
 800f79e:	7dbb      	ldrb	r3, [r7, #22]
 800f7a0:	b29a      	uxth	r2, r3
 800f7a2:	887b      	ldrh	r3, [r7, #2]
 800f7a4:	4413      	add	r3, r2
 800f7a6:	b29b      	uxth	r3, r3
 800f7a8:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800f7aa:	4619      	mov	r1, r3
 800f7ac:	f000 fad8 	bl	800fd60 <ILI9341_Draw_Pixel>
 800f7b0:	e01a      	b.n	800f7e8 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 800f7b2:	7d7b      	ldrb	r3, [r7, #21]
 800f7b4:	b29b      	uxth	r3, r3
 800f7b6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800f7b8:	fb12 f303 	smulbb	r3, r2, r3
 800f7bc:	b29a      	uxth	r2, r3
 800f7be:	88bb      	ldrh	r3, [r7, #4]
 800f7c0:	4413      	add	r3, r2
 800f7c2:	b298      	uxth	r0, r3
 800f7c4:	7dbb      	ldrb	r3, [r7, #22]
 800f7c6:	b29b      	uxth	r3, r3
 800f7c8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800f7ca:	fb12 f303 	smulbb	r3, r2, r3
 800f7ce:	b29a      	uxth	r2, r3
 800f7d0:	887b      	ldrh	r3, [r7, #2]
 800f7d2:	4413      	add	r3, r2
 800f7d4:	b299      	uxth	r1, r3
 800f7d6:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800f7d8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800f7da:	2301      	movs	r3, #1
 800f7dc:	9301      	str	r3, [sp, #4]
 800f7de:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f7e0:	9300      	str	r3, [sp, #0]
 800f7e2:	4623      	mov	r3, r4
 800f7e4:	f000 fc16 	bl	8010014 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 800f7e8:	7dbb      	ldrb	r3, [r7, #22]
 800f7ea:	3301      	adds	r3, #1
 800f7ec:	75bb      	strb	r3, [r7, #22]
 800f7ee:	7dbb      	ldrb	r3, [r7, #22]
 800f7f0:	2b07      	cmp	r3, #7
 800f7f2:	d990      	bls.n	800f716 <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 800f7f4:	7d7b      	ldrb	r3, [r7, #21]
 800f7f6:	3301      	adds	r3, #1
 800f7f8:	757b      	strb	r3, [r7, #21]
 800f7fa:	7d7b      	ldrb	r3, [r7, #21]
 800f7fc:	2b05      	cmp	r3, #5
 800f7fe:	d987      	bls.n	800f710 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 800f800:	bf00      	nop
 800f802:	371c      	adds	r7, #28
 800f804:	46bd      	mov	sp, r7
 800f806:	bd90      	pop	{r4, r7, pc}
 800f808:	08015598 	.word	0x08015598

0800f80c <ILI9341_Draw_Text>:
 *	@param None
 *	@retval None
 *
 */
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800f80c:	b590      	push	{r4, r7, lr}
 800f80e:	b087      	sub	sp, #28
 800f810:	af02      	add	r7, sp, #8
 800f812:	60f8      	str	r0, [r7, #12]
 800f814:	4608      	mov	r0, r1
 800f816:	4611      	mov	r1, r2
 800f818:	461a      	mov	r2, r3
 800f81a:	4603      	mov	r3, r0
 800f81c:	817b      	strh	r3, [r7, #10]
 800f81e:	460b      	mov	r3, r1
 800f820:	813b      	strh	r3, [r7, #8]
 800f822:	4613      	mov	r3, r2
 800f824:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Vertical_Line(x-1, y, CHAR_HEIGHT*size, bgcolour);
 800f826:	897b      	ldrh	r3, [r7, #10]
 800f828:	3b01      	subs	r3, #1
 800f82a:	b298      	uxth	r0, r3
 800f82c:	8c3b      	ldrh	r3, [r7, #32]
 800f82e:	00db      	lsls	r3, r3, #3
 800f830:	b29a      	uxth	r2, r3
 800f832:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f834:	8939      	ldrh	r1, [r7, #8]
 800f836:	f000 f9b9 	bl	800fbac <ILI9341_Draw_Vertical_Line>
    ILI9341_Draw_Vertical_Line(x-2, y, CHAR_HEIGHT*size, bgcolour);
 800f83a:	897b      	ldrh	r3, [r7, #10]
 800f83c:	3b02      	subs	r3, #2
 800f83e:	b298      	uxth	r0, r3
 800f840:	8c3b      	ldrh	r3, [r7, #32]
 800f842:	00db      	lsls	r3, r3, #3
 800f844:	b29a      	uxth	r2, r3
 800f846:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f848:	8939      	ldrh	r1, [r7, #8]
 800f84a:	f000 f9af 	bl	800fbac <ILI9341_Draw_Vertical_Line>

    while (*Text) {
 800f84e:	e016      	b.n	800f87e <ILI9341_Draw_Text+0x72>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	1c5a      	adds	r2, r3, #1
 800f854:	60fa      	str	r2, [r7, #12]
 800f856:	7818      	ldrb	r0, [r3, #0]
 800f858:	88fc      	ldrh	r4, [r7, #6]
 800f85a:	893a      	ldrh	r2, [r7, #8]
 800f85c:	8979      	ldrh	r1, [r7, #10]
 800f85e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f860:	9301      	str	r3, [sp, #4]
 800f862:	8c3b      	ldrh	r3, [r7, #32]
 800f864:	9300      	str	r3, [sp, #0]
 800f866:	4623      	mov	r3, r4
 800f868:	f7ff ff1c 	bl	800f6a4 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 800f86c:	8c3b      	ldrh	r3, [r7, #32]
 800f86e:	461a      	mov	r2, r3
 800f870:	0052      	lsls	r2, r2, #1
 800f872:	4413      	add	r3, r2
 800f874:	005b      	lsls	r3, r3, #1
 800f876:	b29a      	uxth	r2, r3
 800f878:	897b      	ldrh	r3, [r7, #10]
 800f87a:	4413      	add	r3, r2
 800f87c:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	781b      	ldrb	r3, [r3, #0]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d1e4      	bne.n	800f850 <ILI9341_Draw_Text+0x44>
    }


}
 800f886:	bf00      	nop
 800f888:	3714      	adds	r7, #20
 800f88a:	46bd      	mov	sp, r7
 800f88c:	bd90      	pop	{r4, r7, pc}

0800f88e <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 800f88e:	b580      	push	{r7, lr}
 800f890:	af00      	add	r7, sp, #0

	_LCD_Enable();
 800f892:	f000 fca3 	bl	80101dc <_LCD_Enable>
	ILI9341_SPI_Init();
 800f896:	f000 f907 	bl	800faa8 <ILI9341_SPI_Init>
	_LCD_Reset();
 800f89a:	f000 fcaf 	bl	80101fc <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 800f89e:	2001      	movs	r0, #1
 800f8a0:	f000 fd7a 	bl	8010398 <_LCD_SendCommand>
	HAL_Delay(2000);
 800f8a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800f8a8:	f7f9 f9cc 	bl	8008c44 <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 800f8ac:	20cb      	movs	r0, #203	; 0xcb
 800f8ae:	f000 fd73 	bl	8010398 <_LCD_SendCommand>
	_LCD_SendData(0x39);
 800f8b2:	2039      	movs	r0, #57	; 0x39
 800f8b4:	f000 fda2 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(0x2C);
 800f8b8:	202c      	movs	r0, #44	; 0x2c
 800f8ba:	f000 fd9f 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(0x00);
 800f8be:	2000      	movs	r0, #0
 800f8c0:	f000 fd9c 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(0x34);
 800f8c4:	2034      	movs	r0, #52	; 0x34
 800f8c6:	f000 fd99 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(0x02);
 800f8ca:	2002      	movs	r0, #2
 800f8cc:	f000 fd96 	bl	80103fc <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 800f8d0:	20cf      	movs	r0, #207	; 0xcf
 800f8d2:	f000 fd61 	bl	8010398 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800f8d6:	2000      	movs	r0, #0
 800f8d8:	f000 fd90 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(0xC1);
 800f8dc:	20c1      	movs	r0, #193	; 0xc1
 800f8de:	f000 fd8d 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(0x30);
 800f8e2:	2030      	movs	r0, #48	; 0x30
 800f8e4:	f000 fd8a 	bl	80103fc <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 800f8e8:	20e8      	movs	r0, #232	; 0xe8
 800f8ea:	f000 fd55 	bl	8010398 <_LCD_SendCommand>
	_LCD_SendData(0x85);
 800f8ee:	2085      	movs	r0, #133	; 0x85
 800f8f0:	f000 fd84 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(0x00);
 800f8f4:	2000      	movs	r0, #0
 800f8f6:	f000 fd81 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(0x78);
 800f8fa:	2078      	movs	r0, #120	; 0x78
 800f8fc:	f000 fd7e 	bl	80103fc <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 800f900:	20ea      	movs	r0, #234	; 0xea
 800f902:	f000 fd49 	bl	8010398 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800f906:	2000      	movs	r0, #0
 800f908:	f000 fd78 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(0x00);
 800f90c:	2000      	movs	r0, #0
 800f90e:	f000 fd75 	bl	80103fc <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 800f912:	20ed      	movs	r0, #237	; 0xed
 800f914:	f000 fd40 	bl	8010398 <_LCD_SendCommand>
	_LCD_SendData(0x64);
 800f918:	2064      	movs	r0, #100	; 0x64
 800f91a:	f000 fd6f 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(0x03);
 800f91e:	2003      	movs	r0, #3
 800f920:	f000 fd6c 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(0x12);
 800f924:	2012      	movs	r0, #18
 800f926:	f000 fd69 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(0x81);
 800f92a:	2081      	movs	r0, #129	; 0x81
 800f92c:	f000 fd66 	bl	80103fc <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 800f930:	20f7      	movs	r0, #247	; 0xf7
 800f932:	f000 fd31 	bl	8010398 <_LCD_SendCommand>
	_LCD_SendData(0x20);
 800f936:	2020      	movs	r0, #32
 800f938:	f000 fd60 	bl	80103fc <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 800f93c:	20c0      	movs	r0, #192	; 0xc0
 800f93e:	f000 fd2b 	bl	8010398 <_LCD_SendCommand>
	_LCD_SendData(0x23);
 800f942:	2023      	movs	r0, #35	; 0x23
 800f944:	f000 fd5a 	bl	80103fc <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 800f948:	20c1      	movs	r0, #193	; 0xc1
 800f94a:	f000 fd25 	bl	8010398 <_LCD_SendCommand>
	_LCD_SendData(0x10);
 800f94e:	2010      	movs	r0, #16
 800f950:	f000 fd54 	bl	80103fc <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 800f954:	20c5      	movs	r0, #197	; 0xc5
 800f956:	f000 fd1f 	bl	8010398 <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 800f95a:	203e      	movs	r0, #62	; 0x3e
 800f95c:	f000 fd4e 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(0x28);
 800f960:	2028      	movs	r0, #40	; 0x28
 800f962:	f000 fd4b 	bl	80103fc <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 800f966:	20c7      	movs	r0, #199	; 0xc7
 800f968:	f000 fd16 	bl	8010398 <_LCD_SendCommand>
	_LCD_SendData(0x86);
 800f96c:	2086      	movs	r0, #134	; 0x86
 800f96e:	f000 fd45 	bl	80103fc <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 800f972:	2036      	movs	r0, #54	; 0x36
 800f974:	f000 fd10 	bl	8010398 <_LCD_SendCommand>
	_LCD_SendData(0x48);
 800f978:	2048      	movs	r0, #72	; 0x48
 800f97a:	f000 fd3f 	bl	80103fc <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 800f97e:	203a      	movs	r0, #58	; 0x3a
 800f980:	f000 fd0a 	bl	8010398 <_LCD_SendCommand>
	_LCD_SendData(0x55);
 800f984:	2055      	movs	r0, #85	; 0x55
 800f986:	f000 fd39 	bl	80103fc <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 800f98a:	20b1      	movs	r0, #177	; 0xb1
 800f98c:	f000 fd04 	bl	8010398 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800f990:	2000      	movs	r0, #0
 800f992:	f000 fd33 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(0x18);
 800f996:	2018      	movs	r0, #24
 800f998:	f000 fd30 	bl	80103fc <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 800f99c:	20b6      	movs	r0, #182	; 0xb6
 800f99e:	f000 fcfb 	bl	8010398 <_LCD_SendCommand>
	_LCD_SendData(0x08);
 800f9a2:	2008      	movs	r0, #8
 800f9a4:	f000 fd2a 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(0x82);
 800f9a8:	2082      	movs	r0, #130	; 0x82
 800f9aa:	f000 fd27 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(0x27);
 800f9ae:	2027      	movs	r0, #39	; 0x27
 800f9b0:	f000 fd24 	bl	80103fc <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 800f9b4:	20f2      	movs	r0, #242	; 0xf2
 800f9b6:	f000 fcef 	bl	8010398 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800f9ba:	2000      	movs	r0, #0
 800f9bc:	f000 fd1e 	bl	80103fc <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 800f9c0:	2026      	movs	r0, #38	; 0x26
 800f9c2:	f000 fce9 	bl	8010398 <_LCD_SendCommand>
	_LCD_SendData(0x01);
 800f9c6:	2001      	movs	r0, #1
 800f9c8:	f000 fd18 	bl	80103fc <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 800f9cc:	20e0      	movs	r0, #224	; 0xe0
 800f9ce:	f000 fce3 	bl	8010398 <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 800f9d2:	200f      	movs	r0, #15
 800f9d4:	f000 fd12 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(0x31);
 800f9d8:	2031      	movs	r0, #49	; 0x31
 800f9da:	f000 fd0f 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(0x2B);
 800f9de:	202b      	movs	r0, #43	; 0x2b
 800f9e0:	f000 fd0c 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(0x0C);
 800f9e4:	200c      	movs	r0, #12
 800f9e6:	f000 fd09 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(0x0E);
 800f9ea:	200e      	movs	r0, #14
 800f9ec:	f000 fd06 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(0x08);
 800f9f0:	2008      	movs	r0, #8
 800f9f2:	f000 fd03 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(0x4E);
 800f9f6:	204e      	movs	r0, #78	; 0x4e
 800f9f8:	f000 fd00 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(0xF1);
 800f9fc:	20f1      	movs	r0, #241	; 0xf1
 800f9fe:	f000 fcfd 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(0x37);
 800fa02:	2037      	movs	r0, #55	; 0x37
 800fa04:	f000 fcfa 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(0x07);
 800fa08:	2007      	movs	r0, #7
 800fa0a:	f000 fcf7 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(0x10);
 800fa0e:	2010      	movs	r0, #16
 800fa10:	f000 fcf4 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(0x03);
 800fa14:	2003      	movs	r0, #3
 800fa16:	f000 fcf1 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(0x0E);
 800fa1a:	200e      	movs	r0, #14
 800fa1c:	f000 fcee 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(0x09);
 800fa20:	2009      	movs	r0, #9
 800fa22:	f000 fceb 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(0x00);
 800fa26:	2000      	movs	r0, #0
 800fa28:	f000 fce8 	bl	80103fc <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 800fa2c:	20e1      	movs	r0, #225	; 0xe1
 800fa2e:	f000 fcb3 	bl	8010398 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800fa32:	2000      	movs	r0, #0
 800fa34:	f000 fce2 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(0x0E);
 800fa38:	200e      	movs	r0, #14
 800fa3a:	f000 fcdf 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(0x14);
 800fa3e:	2014      	movs	r0, #20
 800fa40:	f000 fcdc 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(0x03);
 800fa44:	2003      	movs	r0, #3
 800fa46:	f000 fcd9 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(0x11);
 800fa4a:	2011      	movs	r0, #17
 800fa4c:	f000 fcd6 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(0x07);
 800fa50:	2007      	movs	r0, #7
 800fa52:	f000 fcd3 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(0x31);
 800fa56:	2031      	movs	r0, #49	; 0x31
 800fa58:	f000 fcd0 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(0xC1);
 800fa5c:	20c1      	movs	r0, #193	; 0xc1
 800fa5e:	f000 fccd 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(0x48);
 800fa62:	2048      	movs	r0, #72	; 0x48
 800fa64:	f000 fcca 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(0x08);
 800fa68:	2008      	movs	r0, #8
 800fa6a:	f000 fcc7 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(0x0F);
 800fa6e:	200f      	movs	r0, #15
 800fa70:	f000 fcc4 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(0x0C);
 800fa74:	200c      	movs	r0, #12
 800fa76:	f000 fcc1 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(0x31);
 800fa7a:	2031      	movs	r0, #49	; 0x31
 800fa7c:	f000 fcbe 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(0x36);
 800fa80:	2036      	movs	r0, #54	; 0x36
 800fa82:	f000 fcbb 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(0x0F);
 800fa86:	200f      	movs	r0, #15
 800fa88:	f000 fcb8 	bl	80103fc <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 800fa8c:	2011      	movs	r0, #17
 800fa8e:	f000 fc83 	bl	8010398 <_LCD_SendCommand>
	HAL_Delay(240);
 800fa92:	20f0      	movs	r0, #240	; 0xf0
 800fa94:	f7f9 f8d6 	bl	8008c44 <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 800fa98:	2029      	movs	r0, #41	; 0x29
 800fa9a:	f000 fc7d 	bl	8010398 <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800fa9e:	2000      	movs	r0, #0
 800faa0:	f000 fb4e 	bl	8010140 <ILI9341_Set_Rotation>
}
 800faa4:	bf00      	nop
 800faa6:	bd80      	pop	{r7, pc}

0800faa8 <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 800faa8:	b480      	push	{r7}
 800faaa:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800faac:	4b0b      	ldr	r3, [pc, #44]	; (800fadc <ILI9341_SPI_Init+0x34>)
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fab4:	2b40      	cmp	r3, #64	; 0x40
 800fab6:	d005      	beq.n	800fac4 <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 800fab8:	4b08      	ldr	r3, [pc, #32]	; (800fadc <ILI9341_SPI_Init+0x34>)
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	4a07      	ldr	r2, [pc, #28]	; (800fadc <ILI9341_SPI_Init+0x34>)
 800fabe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fac2:	6013      	str	r3, [r2, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fac4:	4b06      	ldr	r3, [pc, #24]	; (800fae0 <ILI9341_SPI_Init+0x38>)
 800fac6:	695b      	ldr	r3, [r3, #20]
 800fac8:	4a05      	ldr	r2, [pc, #20]	; (800fae0 <ILI9341_SPI_Init+0x38>)
 800faca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800face:	6153      	str	r3, [r2, #20]
}
 800fad0:	bf00      	nop
 800fad2:	46bd      	mov	sp, r7
 800fad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad8:	4770      	bx	lr
 800fada:	bf00      	nop
 800fadc:	40003c00 	.word	0x40003c00
 800fae0:	48000400 	.word	0x48000400

0800fae4 <ILI9341_Draw_Horizontal_Line>:
 *	Draw horizontal line
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 800fae4:	b590      	push	{r4, r7, lr}
 800fae6:	b087      	sub	sp, #28
 800fae8:	af02      	add	r7, sp, #8
 800faea:	4604      	mov	r4, r0
 800faec:	4608      	mov	r0, r1
 800faee:	4611      	mov	r1, r2
 800faf0:	461a      	mov	r2, r3
 800faf2:	4623      	mov	r3, r4
 800faf4:	80fb      	strh	r3, [r7, #6]
 800faf6:	4603      	mov	r3, r0
 800faf8:	80bb      	strh	r3, [r7, #4]
 800fafa:	460b      	mov	r3, r1
 800fafc:	807b      	strh	r3, [r7, #2]
 800fafe:	4613      	mov	r3, r2
 800fb00:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800fb02:	4b28      	ldr	r3, [pc, #160]	; (800fba4 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800fb04:	881b      	ldrh	r3, [r3, #0]
 800fb06:	b29b      	uxth	r3, r3
 800fb08:	88fa      	ldrh	r2, [r7, #6]
 800fb0a:	429a      	cmp	r2, r3
 800fb0c:	d246      	bcs.n	800fb9c <ILI9341_Draw_Horizontal_Line+0xb8>
 800fb0e:	4b26      	ldr	r3, [pc, #152]	; (800fba8 <ILI9341_Draw_Horizontal_Line+0xc4>)
 800fb10:	881b      	ldrh	r3, [r3, #0]
 800fb12:	b29b      	uxth	r3, r3
 800fb14:	88ba      	ldrh	r2, [r7, #4]
 800fb16:	429a      	cmp	r2, r3
 800fb18:	d240      	bcs.n	800fb9c <ILI9341_Draw_Horizontal_Line+0xb8>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 800fb1a:	88fa      	ldrh	r2, [r7, #6]
 800fb1c:	887b      	ldrh	r3, [r7, #2]
 800fb1e:	4413      	add	r3, r2
 800fb20:	3b01      	subs	r3, #1
 800fb22:	4a20      	ldr	r2, [pc, #128]	; (800fba4 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800fb24:	8812      	ldrh	r2, [r2, #0]
 800fb26:	b292      	uxth	r2, r2
 800fb28:	4293      	cmp	r3, r2
 800fb2a:	db05      	blt.n	800fb38 <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 800fb2c:	4b1d      	ldr	r3, [pc, #116]	; (800fba4 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800fb2e:	881b      	ldrh	r3, [r3, #0]
 800fb30:	b29a      	uxth	r2, r3
 800fb32:	88fb      	ldrh	r3, [r7, #6]
 800fb34:	1ad3      	subs	r3, r2, r3
 800fb36:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(	xpos,
							ypos,
							(xpos + width) - 1,
 800fb38:	88fa      	ldrh	r2, [r7, #6]
 800fb3a:	887b      	ldrh	r3, [r7, #2]
 800fb3c:	4413      	add	r3, r2
 800fb3e:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800fb40:	3b01      	subs	r3, #1
 800fb42:	b29a      	uxth	r2, r3
 800fb44:	88bb      	ldrh	r3, [r7, #4]
 800fb46:	88b9      	ldrh	r1, [r7, #4]
 800fb48:	88f8      	ldrh	r0, [r7, #6]
 800fb4a:	f000 f893 	bl	800fc74 <ILI9341_Set_Frame>
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.


	uint8_t truncated = 0;
 800fb4e:	2300      	movs	r3, #0
 800fb50:	73fb      	strb	r3, [r7, #15]

	if((width & 1) && (width > 1))		// don't round down to zero!
 800fb52:	887b      	ldrh	r3, [r7, #2]
 800fb54:	f003 0301 	and.w	r3, r3, #1
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d009      	beq.n	800fb70 <ILI9341_Draw_Horizontal_Line+0x8c>
 800fb5c:	887b      	ldrh	r3, [r7, #2]
 800fb5e:	2b01      	cmp	r3, #1
 800fb60:	d906      	bls.n	800fb70 <ILI9341_Draw_Horizontal_Line+0x8c>
	{
		truncated = 1;
 800fb62:	2301      	movs	r3, #1
 800fb64:	73fb      	strb	r3, [r7, #15]
		width = ((width >> 1) * 2);
 800fb66:	887b      	ldrh	r3, [r7, #2]
 800fb68:	085b      	lsrs	r3, r3, #1
 800fb6a:	b29b      	uxth	r3, r3
 800fb6c:	005b      	lsls	r3, r3, #1
 800fb6e:	807b      	strh	r3, [r7, #2]
	}
	_LCD_Write_Frame(xpos, ypos, colour, width, LINE_CHUNK);
 800fb70:	887c      	ldrh	r4, [r7, #2]
 800fb72:	883a      	ldrh	r2, [r7, #0]
 800fb74:	88b9      	ldrh	r1, [r7, #4]
 800fb76:	88f8      	ldrh	r0, [r7, #6]
 800fb78:	2303      	movs	r3, #3
 800fb7a:	9300      	str	r3, [sp, #0]
 800fb7c:	4623      	mov	r3, r4
 800fb7e:	f000 fb5b 	bl	8010238 <_LCD_Write_Frame>
	//
//TODO
	// add the truncated pixel now
	if(truncated)
 800fb82:	7bfb      	ldrb	r3, [r7, #15]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d00a      	beq.n	800fb9e <ILI9341_Draw_Horizontal_Line+0xba>
	{
		ILI9341_Draw_Pixel(	(xpos + width),
 800fb88:	88fa      	ldrh	r2, [r7, #6]
 800fb8a:	887b      	ldrh	r3, [r7, #2]
 800fb8c:	4413      	add	r3, r2
 800fb8e:	b29b      	uxth	r3, r3
 800fb90:	883a      	ldrh	r2, [r7, #0]
 800fb92:	88b9      	ldrh	r1, [r7, #4]
 800fb94:	4618      	mov	r0, r3
 800fb96:	f000 f8e3 	bl	800fd60 <ILI9341_Draw_Pixel>
 800fb9a:	e000      	b.n	800fb9e <ILI9341_Draw_Horizontal_Line+0xba>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800fb9c:	bf00      	nop
							(ypos),
							colour);
	}


}
 800fb9e:	3714      	adds	r7, #20
 800fba0:	46bd      	mov	sp, r7
 800fba2:	bd90      	pop	{r4, r7, pc}
 800fba4:	20000c42 	.word	0x20000c42
 800fba8:	20000c40 	.word	0x20000c40

0800fbac <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 800fbac:	b590      	push	{r4, r7, lr}
 800fbae:	b087      	sub	sp, #28
 800fbb0:	af02      	add	r7, sp, #8
 800fbb2:	4604      	mov	r4, r0
 800fbb4:	4608      	mov	r0, r1
 800fbb6:	4611      	mov	r1, r2
 800fbb8:	461a      	mov	r2, r3
 800fbba:	4623      	mov	r3, r4
 800fbbc:	80fb      	strh	r3, [r7, #6]
 800fbbe:	4603      	mov	r3, r0
 800fbc0:	80bb      	strh	r3, [r7, #4]
 800fbc2:	460b      	mov	r3, r1
 800fbc4:	807b      	strh	r3, [r7, #2]
 800fbc6:	4613      	mov	r3, r2
 800fbc8:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800fbca:	4b28      	ldr	r3, [pc, #160]	; (800fc6c <ILI9341_Draw_Vertical_Line+0xc0>)
 800fbcc:	881b      	ldrh	r3, [r3, #0]
 800fbce:	b29b      	uxth	r3, r3
 800fbd0:	88fa      	ldrh	r2, [r7, #6]
 800fbd2:	429a      	cmp	r2, r3
 800fbd4:	d246      	bcs.n	800fc64 <ILI9341_Draw_Vertical_Line+0xb8>
 800fbd6:	4b26      	ldr	r3, [pc, #152]	; (800fc70 <ILI9341_Draw_Vertical_Line+0xc4>)
 800fbd8:	881b      	ldrh	r3, [r3, #0]
 800fbda:	b29b      	uxth	r3, r3
 800fbdc:	88ba      	ldrh	r2, [r7, #4]
 800fbde:	429a      	cmp	r2, r3
 800fbe0:	d240      	bcs.n	800fc64 <ILI9341_Draw_Vertical_Line+0xb8>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 800fbe2:	88ba      	ldrh	r2, [r7, #4]
 800fbe4:	887b      	ldrh	r3, [r7, #2]
 800fbe6:	4413      	add	r3, r2
 800fbe8:	3b01      	subs	r3, #1
 800fbea:	4a21      	ldr	r2, [pc, #132]	; (800fc70 <ILI9341_Draw_Vertical_Line+0xc4>)
 800fbec:	8812      	ldrh	r2, [r2, #0]
 800fbee:	b292      	uxth	r2, r2
 800fbf0:	4293      	cmp	r3, r2
 800fbf2:	db05      	blt.n	800fc00 <ILI9341_Draw_Vertical_Line+0x54>
	{
		height= LCD_HEIGHT - ypos;
 800fbf4:	4b1e      	ldr	r3, [pc, #120]	; (800fc70 <ILI9341_Draw_Vertical_Line+0xc4>)
 800fbf6:	881b      	ldrh	r3, [r3, #0]
 800fbf8:	b29a      	uxth	r2, r3
 800fbfa:	88bb      	ldrh	r3, [r7, #4]
 800fbfc:	1ad3      	subs	r3, r2, r3
 800fbfe:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 800fc00:	88ba      	ldrh	r2, [r7, #4]
 800fc02:	887b      	ldrh	r3, [r7, #2]
 800fc04:	4413      	add	r3, r2
 800fc06:	b29b      	uxth	r3, r3
 800fc08:	3b01      	subs	r3, #1
 800fc0a:	b29b      	uxth	r3, r3
 800fc0c:	88fa      	ldrh	r2, [r7, #6]
 800fc0e:	88b9      	ldrh	r1, [r7, #4]
 800fc10:	88f8      	ldrh	r0, [r7, #6]
 800fc12:	f000 f82f 	bl	800fc74 <ILI9341_Set_Frame>

	uint8_t truncated = 0;
 800fc16:	2300      	movs	r3, #0
 800fc18:	73fb      	strb	r3, [r7, #15]

	if((height & 1) && (height > 1))		// don't round down to zero!
 800fc1a:	887b      	ldrh	r3, [r7, #2]
 800fc1c:	f003 0301 	and.w	r3, r3, #1
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d009      	beq.n	800fc38 <ILI9341_Draw_Vertical_Line+0x8c>
 800fc24:	887b      	ldrh	r3, [r7, #2]
 800fc26:	2b01      	cmp	r3, #1
 800fc28:	d906      	bls.n	800fc38 <ILI9341_Draw_Vertical_Line+0x8c>
	{
		truncated = 1;
 800fc2a:	2301      	movs	r3, #1
 800fc2c:	73fb      	strb	r3, [r7, #15]
		height = ((height >> 1) * 2);
 800fc2e:	887b      	ldrh	r3, [r7, #2]
 800fc30:	085b      	lsrs	r3, r3, #1
 800fc32:	b29b      	uxth	r3, r3
 800fc34:	005b      	lsls	r3, r3, #1
 800fc36:	807b      	strh	r3, [r7, #2]
//TODO


	//

	if(truncated)
 800fc38:	7bfb      	ldrb	r3, [r7, #15]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d008      	beq.n	800fc50 <ILI9341_Draw_Vertical_Line+0xa4>
	{
		ILI9341_Draw_Pixel(	(xpos),
 800fc3e:	88ba      	ldrh	r2, [r7, #4]
 800fc40:	887b      	ldrh	r3, [r7, #2]
 800fc42:	4413      	add	r3, r2
 800fc44:	b299      	uxth	r1, r3
 800fc46:	883a      	ldrh	r2, [r7, #0]
 800fc48:	88fb      	ldrh	r3, [r7, #6]
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	f000 f888 	bl	800fd60 <ILI9341_Draw_Pixel>
							(ypos + height),
							colour);
	}

	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 800fc50:	887c      	ldrh	r4, [r7, #2]
 800fc52:	883a      	ldrh	r2, [r7, #0]
 800fc54:	88b9      	ldrh	r1, [r7, #4]
 800fc56:	88f8      	ldrh	r0, [r7, #6]
 800fc58:	2303      	movs	r3, #3
 800fc5a:	9300      	str	r3, [sp, #0]
 800fc5c:	4623      	mov	r3, r4
 800fc5e:	f000 faeb 	bl	8010238 <_LCD_Write_Frame>
 800fc62:	e000      	b.n	800fc66 <ILI9341_Draw_Vertical_Line+0xba>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800fc64:	bf00      	nop
}
 800fc66:	3714      	adds	r7, #20
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	bd90      	pop	{r4, r7, pc}
 800fc6c:	20000c42 	.word	0x20000c42
 800fc70:	20000c40 	.word	0x20000c40

0800fc74 <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 800fc74:	b590      	push	{r4, r7, lr}
 800fc76:	b083      	sub	sp, #12
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	4604      	mov	r4, r0
 800fc7c:	4608      	mov	r0, r1
 800fc7e:	4611      	mov	r1, r2
 800fc80:	461a      	mov	r2, r3
 800fc82:	4623      	mov	r3, r4
 800fc84:	80fb      	strh	r3, [r7, #6]
 800fc86:	4603      	mov	r3, r0
 800fc88:	80bb      	strh	r3, [r7, #4]
 800fc8a:	460b      	mov	r3, r1
 800fc8c:	807b      	strh	r3, [r7, #2]
 800fc8e:	4613      	mov	r3, r2
 800fc90:	803b      	strh	r3, [r7, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 800fc92:	202a      	movs	r0, #42	; 0x2a
 800fc94:	f000 fb80 	bl	8010398 <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 800fc98:	88fb      	ldrh	r3, [r7, #6]
 800fc9a:	0a1b      	lsrs	r3, r3, #8
 800fc9c:	b29b      	uxth	r3, r3
 800fc9e:	b2db      	uxtb	r3, r3
 800fca0:	4618      	mov	r0, r3
 800fca2:	f000 fbab 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(sc);
 800fca6:	88fb      	ldrh	r3, [r7, #6]
 800fca8:	b2db      	uxtb	r3, r3
 800fcaa:	4618      	mov	r0, r3
 800fcac:	f000 fba6 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 800fcb0:	887b      	ldrh	r3, [r7, #2]
 800fcb2:	0a1b      	lsrs	r3, r3, #8
 800fcb4:	b29b      	uxth	r3, r3
 800fcb6:	b2db      	uxtb	r3, r3
 800fcb8:	4618      	mov	r0, r3
 800fcba:	f000 fb9f 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(ec);
 800fcbe:	887b      	ldrh	r3, [r7, #2]
 800fcc0:	b2db      	uxtb	r3, r3
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	f000 fb9a 	bl	80103fc <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 800fcc8:	202b      	movs	r0, #43	; 0x2b
 800fcca:	f000 fb65 	bl	8010398 <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 800fcce:	88bb      	ldrh	r3, [r7, #4]
 800fcd0:	0a1b      	lsrs	r3, r3, #8
 800fcd2:	b29b      	uxth	r3, r3
 800fcd4:	b2db      	uxtb	r3, r3
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	f000 fb90 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(sp);
 800fcdc:	88bb      	ldrh	r3, [r7, #4]
 800fcde:	b2db      	uxtb	r3, r3
 800fce0:	4618      	mov	r0, r3
 800fce2:	f000 fb8b 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 800fce6:	883b      	ldrh	r3, [r7, #0]
 800fce8:	0a1b      	lsrs	r3, r3, #8
 800fcea:	b29b      	uxth	r3, r3
 800fcec:	b2db      	uxtb	r3, r3
 800fcee:	4618      	mov	r0, r3
 800fcf0:	f000 fb84 	bl	80103fc <_LCD_SendData>
	_LCD_SendData(ep);
 800fcf4:	883b      	ldrh	r3, [r7, #0]
 800fcf6:	b2db      	uxtb	r3, r3
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	f000 fb7f 	bl	80103fc <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 800fcfe:	202c      	movs	r0, #44	; 0x2c
 800fd00:	f000 fb4a 	bl	8010398 <_LCD_SendCommand>
}
 800fd04:	bf00      	nop
 800fd06:	370c      	adds	r7, #12
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	bd90      	pop	{r4, r7, pc}

0800fd0c <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b084      	sub	sp, #16
 800fd10:	af02      	add	r7, sp, #8
 800fd12:	4603      	mov	r3, r0
 800fd14:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 800fd16:	4b10      	ldr	r3, [pc, #64]	; (800fd58 <ILI9341_Fill_Screen+0x4c>)
 800fd18:	881b      	ldrh	r3, [r3, #0]
 800fd1a:	b29a      	uxth	r2, r3
 800fd1c:	4b0f      	ldr	r3, [pc, #60]	; (800fd5c <ILI9341_Fill_Screen+0x50>)
 800fd1e:	881b      	ldrh	r3, [r3, #0]
 800fd20:	b29b      	uxth	r3, r3
 800fd22:	2100      	movs	r1, #0
 800fd24:	2000      	movs	r0, #0
 800fd26:	f7ff ffa5 	bl	800fc74 <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 800fd2a:	4b0b      	ldr	r3, [pc, #44]	; (800fd58 <ILI9341_Fill_Screen+0x4c>)
 800fd2c:	881b      	ldrh	r3, [r3, #0]
 800fd2e:	b29b      	uxth	r3, r3
 800fd30:	461a      	mov	r2, r3
 800fd32:	4b0a      	ldr	r3, [pc, #40]	; (800fd5c <ILI9341_Fill_Screen+0x50>)
 800fd34:	881b      	ldrh	r3, [r3, #0]
 800fd36:	b29b      	uxth	r3, r3
 800fd38:	fb03 f302 	mul.w	r3, r3, r2
 800fd3c:	4619      	mov	r1, r3
 800fd3e:	88fa      	ldrh	r2, [r7, #6]
 800fd40:	2304      	movs	r3, #4
 800fd42:	9300      	str	r3, [sp, #0]
 800fd44:	460b      	mov	r3, r1
 800fd46:	2100      	movs	r1, #0
 800fd48:	2000      	movs	r0, #0
 800fd4a:	f000 fa75 	bl	8010238 <_LCD_Write_Frame>
}
 800fd4e:	bf00      	nop
 800fd50:	3708      	adds	r7, #8
 800fd52:	46bd      	mov	sp, r7
 800fd54:	bd80      	pop	{r7, pc}
 800fd56:	bf00      	nop
 800fd58:	20000c42 	.word	0x20000c42
 800fd5c:	20000c40 	.word	0x20000c40

0800fd60 <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 800fd60:	b580      	push	{r7, lr}
 800fd62:	b08e      	sub	sp, #56	; 0x38
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	4603      	mov	r3, r0
 800fd68:	80fb      	strh	r3, [r7, #6]
 800fd6a:	460b      	mov	r3, r1
 800fd6c:	80bb      	strh	r3, [r7, #4]
 800fd6e:	4613      	mov	r3, r2
 800fd70:	807b      	strh	r3, [r7, #2]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800fd72:	4b98      	ldr	r3, [pc, #608]	; (800ffd4 <ILI9341_Draw_Pixel+0x274>)
 800fd74:	881b      	ldrh	r3, [r3, #0]
 800fd76:	b29b      	uxth	r3, r3
 800fd78:	88fa      	ldrh	r2, [r7, #6]
 800fd7a:	429a      	cmp	r2, r3
 800fd7c:	f080 8143 	bcs.w	8010006 <ILI9341_Draw_Pixel+0x2a6>
 800fd80:	4b95      	ldr	r3, [pc, #596]	; (800ffd8 <ILI9341_Draw_Pixel+0x278>)
 800fd82:	881b      	ldrh	r3, [r3, #0]
 800fd84:	b29b      	uxth	r3, r3
 800fd86:	88ba      	ldrh	r2, [r7, #4]
 800fd88:	429a      	cmp	r2, r3
 800fd8a:	f080 813c 	bcs.w	8010006 <ILI9341_Draw_Pixel+0x2a6>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800fd8e:	4b93      	ldr	r3, [pc, #588]	; (800ffdc <ILI9341_Draw_Pixel+0x27c>)
 800fd90:	695b      	ldr	r3, [r3, #20]
 800fd92:	4a92      	ldr	r2, [pc, #584]	; (800ffdc <ILI9341_Draw_Pixel+0x27c>)
 800fd94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fd98:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fd9a:	4b90      	ldr	r3, [pc, #576]	; (800ffdc <ILI9341_Draw_Pixel+0x27c>)
 800fd9c:	695b      	ldr	r3, [r3, #20]
 800fd9e:	4a8f      	ldr	r2, [pc, #572]	; (800ffdc <ILI9341_Draw_Pixel+0x27c>)
 800fda0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fda4:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2A, 0, 10);
 800fda6:	220a      	movs	r2, #10
 800fda8:	2100      	movs	r1, #0
 800fdaa:	202a      	movs	r0, #42	; 0x2a
 800fdac:	f000 fb58 	bl	8010460 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	637b      	str	r3, [r7, #52]	; 0x34
 800fdb4:	e008      	b.n	800fdc8 <ILI9341_Draw_Pixel+0x68>
 800fdb6:	4b89      	ldr	r3, [pc, #548]	; (800ffdc <ILI9341_Draw_Pixel+0x27c>)
 800fdb8:	695b      	ldr	r3, [r3, #20]
 800fdba:	4a88      	ldr	r2, [pc, #544]	; (800ffdc <ILI9341_Draw_Pixel+0x27c>)
 800fdbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fdc0:	6153      	str	r3, [r2, #20]
 800fdc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdc4:	3301      	adds	r3, #1
 800fdc6:	637b      	str	r3, [r7, #52]	; 0x34
 800fdc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdca:	2b02      	cmp	r3, #2
 800fdcc:	ddf3      	ble.n	800fdb6 <ILI9341_Draw_Pixel+0x56>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800fdce:	4b83      	ldr	r3, [pc, #524]	; (800ffdc <ILI9341_Draw_Pixel+0x27c>)
 800fdd0:	695b      	ldr	r3, [r3, #20]
 800fdd2:	4a82      	ldr	r2, [pc, #520]	; (800ffdc <ILI9341_Draw_Pixel+0x27c>)
 800fdd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fdd8:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800fdda:	4b80      	ldr	r3, [pc, #512]	; (800ffdc <ILI9341_Draw_Pixel+0x27c>)
 800fddc:	695b      	ldr	r3, [r3, #20]
 800fdde:	4a7f      	ldr	r2, [pc, #508]	; (800ffdc <ILI9341_Draw_Pixel+0x27c>)
 800fde0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fde4:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fde6:	4b7d      	ldr	r3, [pc, #500]	; (800ffdc <ILI9341_Draw_Pixel+0x27c>)
 800fde8:	695b      	ldr	r3, [r3, #20]
 800fdea:	4a7c      	ldr	r2, [pc, #496]	; (800ffdc <ILI9341_Draw_Pixel+0x27c>)
 800fdec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fdf0:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] = { x >> 8, x, (x + 1) >> 8, (x + 1) };
 800fdf2:	88fb      	ldrh	r3, [r7, #6]
 800fdf4:	0a1b      	lsrs	r3, r3, #8
 800fdf6:	b29b      	uxth	r3, r3
 800fdf8:	b2db      	uxtb	r3, r3
 800fdfa:	753b      	strb	r3, [r7, #20]
 800fdfc:	88fb      	ldrh	r3, [r7, #6]
 800fdfe:	b2db      	uxtb	r3, r3
 800fe00:	757b      	strb	r3, [r7, #21]
 800fe02:	88fb      	ldrh	r3, [r7, #6]
 800fe04:	3301      	adds	r3, #1
 800fe06:	121b      	asrs	r3, r3, #8
 800fe08:	b2db      	uxtb	r3, r3
 800fe0a:	75bb      	strb	r3, [r7, #22]
 800fe0c:	88fb      	ldrh	r3, [r7, #6]
 800fe0e:	b2db      	uxtb	r3, r3
 800fe10:	3301      	adds	r3, #1
 800fe12:	b2db      	uxtb	r3, r3
 800fe14:	75fb      	strb	r3, [r7, #23]
	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 10);
 800fe16:	f107 0014 	add.w	r0, r7, #20
 800fe1a:	230a      	movs	r3, #10
 800fe1c:	2200      	movs	r2, #0
 800fe1e:	2104      	movs	r1, #4
 800fe20:	f000 fb50 	bl	80104c4 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fe24:	2300      	movs	r3, #0
 800fe26:	633b      	str	r3, [r7, #48]	; 0x30
 800fe28:	e008      	b.n	800fe3c <ILI9341_Draw_Pixel+0xdc>
 800fe2a:	4b6c      	ldr	r3, [pc, #432]	; (800ffdc <ILI9341_Draw_Pixel+0x27c>)
 800fe2c:	695b      	ldr	r3, [r3, #20]
 800fe2e:	4a6b      	ldr	r2, [pc, #428]	; (800ffdc <ILI9341_Draw_Pixel+0x27c>)
 800fe30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fe34:	6153      	str	r3, [r2, #20]
 800fe36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe38:	3301      	adds	r3, #1
 800fe3a:	633b      	str	r3, [r7, #48]	; 0x30
 800fe3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe3e:	2b02      	cmp	r3, #2
 800fe40:	ddf3      	ble.n	800fe2a <ILI9341_Draw_Pixel+0xca>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800fe42:	4b66      	ldr	r3, [pc, #408]	; (800ffdc <ILI9341_Draw_Pixel+0x27c>)
 800fe44:	695b      	ldr	r3, [r3, #20]
 800fe46:	4a65      	ldr	r2, [pc, #404]	; (800ffdc <ILI9341_Draw_Pixel+0x27c>)
 800fe48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe4c:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800fe4e:	4b63      	ldr	r3, [pc, #396]	; (800ffdc <ILI9341_Draw_Pixel+0x27c>)
 800fe50:	695b      	ldr	r3, [r3, #20]
 800fe52:	4a62      	ldr	r2, [pc, #392]	; (800ffdc <ILI9341_Draw_Pixel+0x27c>)
 800fe54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fe58:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fe5a:	4b60      	ldr	r3, [pc, #384]	; (800ffdc <ILI9341_Draw_Pixel+0x27c>)
 800fe5c:	695b      	ldr	r3, [r3, #20]
 800fe5e:	4a5f      	ldr	r2, [pc, #380]	; (800ffdc <ILI9341_Draw_Pixel+0x27c>)
 800fe60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fe64:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2B, 0, 10);
 800fe66:	220a      	movs	r2, #10
 800fe68:	2100      	movs	r1, #0
 800fe6a:	202b      	movs	r0, #43	; 0x2b
 800fe6c:	f000 faf8 	bl	8010460 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fe70:	2300      	movs	r3, #0
 800fe72:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe74:	e008      	b.n	800fe88 <ILI9341_Draw_Pixel+0x128>
 800fe76:	4b59      	ldr	r3, [pc, #356]	; (800ffdc <ILI9341_Draw_Pixel+0x27c>)
 800fe78:	695b      	ldr	r3, [r3, #20]
 800fe7a:	4a58      	ldr	r2, [pc, #352]	; (800ffdc <ILI9341_Draw_Pixel+0x27c>)
 800fe7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fe80:	6153      	str	r3, [r2, #20]
 800fe82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe84:	3301      	adds	r3, #1
 800fe86:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe8a:	2b02      	cmp	r3, #2
 800fe8c:	ddf3      	ble.n	800fe76 <ILI9341_Draw_Pixel+0x116>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800fe8e:	4b53      	ldr	r3, [pc, #332]	; (800ffdc <ILI9341_Draw_Pixel+0x27c>)
 800fe90:	695b      	ldr	r3, [r3, #20]
 800fe92:	4a52      	ldr	r2, [pc, #328]	; (800ffdc <ILI9341_Draw_Pixel+0x27c>)
 800fe94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe98:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800fe9a:	4b50      	ldr	r3, [pc, #320]	; (800ffdc <ILI9341_Draw_Pixel+0x27c>)
 800fe9c:	695b      	ldr	r3, [r3, #20]
 800fe9e:	4a4f      	ldr	r2, [pc, #316]	; (800ffdc <ILI9341_Draw_Pixel+0x27c>)
 800fea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fea4:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fea6:	4b4d      	ldr	r3, [pc, #308]	; (800ffdc <ILI9341_Draw_Pixel+0x27c>)
 800fea8:	695b      	ldr	r3, [r3, #20]
 800feaa:	4a4c      	ldr	r2, [pc, #304]	; (800ffdc <ILI9341_Draw_Pixel+0x27c>)
 800feac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800feb0:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] = { y >> 8, y, (y + 1) >> 8, (y + 1) };
 800feb2:	88bb      	ldrh	r3, [r7, #4]
 800feb4:	0a1b      	lsrs	r3, r3, #8
 800feb6:	b29b      	uxth	r3, r3
 800feb8:	b2db      	uxtb	r3, r3
 800feba:	743b      	strb	r3, [r7, #16]
 800febc:	88bb      	ldrh	r3, [r7, #4]
 800febe:	b2db      	uxtb	r3, r3
 800fec0:	747b      	strb	r3, [r7, #17]
 800fec2:	88bb      	ldrh	r3, [r7, #4]
 800fec4:	3301      	adds	r3, #1
 800fec6:	121b      	asrs	r3, r3, #8
 800fec8:	b2db      	uxtb	r3, r3
 800feca:	74bb      	strb	r3, [r7, #18]
 800fecc:	88bb      	ldrh	r3, [r7, #4]
 800fece:	b2db      	uxtb	r3, r3
 800fed0:	3301      	adds	r3, #1
 800fed2:	b2db      	uxtb	r3, r3
 800fed4:	74fb      	strb	r3, [r7, #19]
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 10);
 800fed6:	f107 0010 	add.w	r0, r7, #16
 800feda:	230a      	movs	r3, #10
 800fedc:	2200      	movs	r2, #0
 800fede:	2104      	movs	r1, #4
 800fee0:	f000 faf0 	bl	80104c4 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fee4:	2300      	movs	r3, #0
 800fee6:	62bb      	str	r3, [r7, #40]	; 0x28
 800fee8:	e008      	b.n	800fefc <ILI9341_Draw_Pixel+0x19c>
 800feea:	4b3c      	ldr	r3, [pc, #240]	; (800ffdc <ILI9341_Draw_Pixel+0x27c>)
 800feec:	695b      	ldr	r3, [r3, #20]
 800feee:	4a3b      	ldr	r2, [pc, #236]	; (800ffdc <ILI9341_Draw_Pixel+0x27c>)
 800fef0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fef4:	6153      	str	r3, [r2, #20]
 800fef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fef8:	3301      	adds	r3, #1
 800fefa:	62bb      	str	r3, [r7, #40]	; 0x28
 800fefc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fefe:	2b02      	cmp	r3, #2
 800ff00:	ddf3      	ble.n	800feea <ILI9341_Draw_Pixel+0x18a>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800ff02:	4b36      	ldr	r3, [pc, #216]	; (800ffdc <ILI9341_Draw_Pixel+0x27c>)
 800ff04:	695b      	ldr	r3, [r3, #20]
 800ff06:	4a35      	ldr	r2, [pc, #212]	; (800ffdc <ILI9341_Draw_Pixel+0x27c>)
 800ff08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff0c:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800ff0e:	4b33      	ldr	r3, [pc, #204]	; (800ffdc <ILI9341_Draw_Pixel+0x27c>)
 800ff10:	695b      	ldr	r3, [r3, #20]
 800ff12:	4a32      	ldr	r2, [pc, #200]	; (800ffdc <ILI9341_Draw_Pixel+0x27c>)
 800ff14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ff18:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ff1a:	4b30      	ldr	r3, [pc, #192]	; (800ffdc <ILI9341_Draw_Pixel+0x27c>)
 800ff1c:	695b      	ldr	r3, [r3, #20]
 800ff1e:	4a2f      	ldr	r2, [pc, #188]	; (800ffdc <ILI9341_Draw_Pixel+0x27c>)
 800ff20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ff24:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2C, 0, 10);
 800ff26:	220a      	movs	r2, #10
 800ff28:	2100      	movs	r1, #0
 800ff2a:	202c      	movs	r0, #44	; 0x2c
 800ff2c:	f000 fa98 	bl	8010460 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ff30:	2300      	movs	r3, #0
 800ff32:	627b      	str	r3, [r7, #36]	; 0x24
 800ff34:	e008      	b.n	800ff48 <ILI9341_Draw_Pixel+0x1e8>
 800ff36:	4b29      	ldr	r3, [pc, #164]	; (800ffdc <ILI9341_Draw_Pixel+0x27c>)
 800ff38:	695b      	ldr	r3, [r3, #20]
 800ff3a:	4a28      	ldr	r2, [pc, #160]	; (800ffdc <ILI9341_Draw_Pixel+0x27c>)
 800ff3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ff40:	6153      	str	r3, [r2, #20]
 800ff42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff44:	3301      	adds	r3, #1
 800ff46:	627b      	str	r3, [r7, #36]	; 0x24
 800ff48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff4a:	2b02      	cmp	r3, #2
 800ff4c:	ddf3      	ble.n	800ff36 <ILI9341_Draw_Pixel+0x1d6>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800ff4e:	4b23      	ldr	r3, [pc, #140]	; (800ffdc <ILI9341_Draw_Pixel+0x27c>)
 800ff50:	695b      	ldr	r3, [r3, #20]
 800ff52:	4a22      	ldr	r2, [pc, #136]	; (800ffdc <ILI9341_Draw_Pixel+0x27c>)
 800ff54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff58:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800ff5a:	4b20      	ldr	r3, [pc, #128]	; (800ffdc <ILI9341_Draw_Pixel+0x27c>)
 800ff5c:	695b      	ldr	r3, [r3, #20]
 800ff5e:	4a1f      	ldr	r2, [pc, #124]	; (800ffdc <ILI9341_Draw_Pixel+0x27c>)
 800ff60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff64:	6153      	str	r3, [r2, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ff66:	4b1d      	ldr	r3, [pc, #116]	; (800ffdc <ILI9341_Draw_Pixel+0x27c>)
 800ff68:	695b      	ldr	r3, [r3, #20]
 800ff6a:	4a1c      	ldr	r2, [pc, #112]	; (800ffdc <ILI9341_Draw_Pixel+0x27c>)
 800ff6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ff70:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 800ff72:	887b      	ldrh	r3, [r7, #2]
 800ff74:	0a1b      	lsrs	r3, r3, #8
 800ff76:	b29b      	uxth	r3, r3
 800ff78:	b2db      	uxtb	r3, r3
 800ff7a:	733b      	strb	r3, [r7, #12]
 800ff7c:	887b      	ldrh	r3, [r7, #2]
 800ff7e:	b2db      	uxtb	r3, r3
 800ff80:	737b      	strb	r3, [r7, #13]
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 2, 0, 1);
 800ff82:	f107 000c 	add.w	r0, r7, #12
 800ff86:	2301      	movs	r3, #1
 800ff88:	2200      	movs	r2, #0
 800ff8a:	2102      	movs	r1, #2
 800ff8c:	f000 fa9a 	bl	80104c4 <_SPI_SendByteMultiByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ff90:	2300      	movs	r3, #0
 800ff92:	623b      	str	r3, [r7, #32]
 800ff94:	e008      	b.n	800ffa8 <ILI9341_Draw_Pixel+0x248>
 800ff96:	4b11      	ldr	r3, [pc, #68]	; (800ffdc <ILI9341_Draw_Pixel+0x27c>)
 800ff98:	695b      	ldr	r3, [r3, #20]
 800ff9a:	4a10      	ldr	r2, [pc, #64]	; (800ffdc <ILI9341_Draw_Pixel+0x27c>)
 800ff9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ffa0:	6153      	str	r3, [r2, #20]
 800ffa2:	6a3b      	ldr	r3, [r7, #32]
 800ffa4:	3301      	adds	r3, #1
 800ffa6:	623b      	str	r3, [r7, #32]
 800ffa8:	6a3b      	ldr	r3, [r7, #32]
 800ffaa:	2b02      	cmp	r3, #2
 800ffac:	ddf3      	ble.n	800ff96 <ILI9341_Draw_Pixel+0x236>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ffae:	2300      	movs	r3, #0
 800ffb0:	61fb      	str	r3, [r7, #28]
 800ffb2:	e008      	b.n	800ffc6 <ILI9341_Draw_Pixel+0x266>
 800ffb4:	4b09      	ldr	r3, [pc, #36]	; (800ffdc <ILI9341_Draw_Pixel+0x27c>)
 800ffb6:	695b      	ldr	r3, [r3, #20]
 800ffb8:	4a08      	ldr	r2, [pc, #32]	; (800ffdc <ILI9341_Draw_Pixel+0x27c>)
 800ffba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ffbe:	6153      	str	r3, [r2, #20]
 800ffc0:	69fb      	ldr	r3, [r7, #28]
 800ffc2:	3301      	adds	r3, #1
 800ffc4:	61fb      	str	r3, [r7, #28]
 800ffc6:	69fb      	ldr	r3, [r7, #28]
 800ffc8:	2b02      	cmp	r3, #2
 800ffca:	ddf3      	ble.n	800ffb4 <ILI9341_Draw_Pixel+0x254>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ffcc:	2300      	movs	r3, #0
 800ffce:	61bb      	str	r3, [r7, #24]
 800ffd0:	e00f      	b.n	800fff2 <ILI9341_Draw_Pixel+0x292>
 800ffd2:	bf00      	nop
 800ffd4:	20000c42 	.word	0x20000c42
 800ffd8:	20000c40 	.word	0x20000c40
 800ffdc:	48000400 	.word	0x48000400
 800ffe0:	4b0b      	ldr	r3, [pc, #44]	; (8010010 <ILI9341_Draw_Pixel+0x2b0>)
 800ffe2:	695b      	ldr	r3, [r3, #20]
 800ffe4:	4a0a      	ldr	r2, [pc, #40]	; (8010010 <ILI9341_Draw_Pixel+0x2b0>)
 800ffe6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ffea:	6153      	str	r3, [r2, #20]
 800ffec:	69bb      	ldr	r3, [r7, #24]
 800ffee:	3301      	adds	r3, #1
 800fff0:	61bb      	str	r3, [r7, #24]
 800fff2:	69bb      	ldr	r3, [r7, #24]
 800fff4:	2b02      	cmp	r3, #2
 800fff6:	ddf3      	ble.n	800ffe0 <ILI9341_Draw_Pixel+0x280>


	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800fff8:	4b05      	ldr	r3, [pc, #20]	; (8010010 <ILI9341_Draw_Pixel+0x2b0>)
 800fffa:	695b      	ldr	r3, [r3, #20]
 800fffc:	4a04      	ldr	r2, [pc, #16]	; (8010010 <ILI9341_Draw_Pixel+0x2b0>)
 800fffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010002:	6153      	str	r3, [r2, #20]
 8010004:	e000      	b.n	8010008 <ILI9341_Draw_Pixel+0x2a8>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8010006:	bf00      	nop


}
 8010008:	3738      	adds	r7, #56	; 0x38
 801000a:	46bd      	mov	sp, r7
 801000c:	bd80      	pop	{r7, pc}
 801000e:	bf00      	nop
 8010010:	48000400 	.word	0x48000400

08010014 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 8010014:	b590      	push	{r4, r7, lr}
 8010016:	b087      	sub	sp, #28
 8010018:	af02      	add	r7, sp, #8
 801001a:	4604      	mov	r4, r0
 801001c:	4608      	mov	r0, r1
 801001e:	4611      	mov	r1, r2
 8010020:	461a      	mov	r2, r3
 8010022:	4623      	mov	r3, r4
 8010024:	80fb      	strh	r3, [r7, #6]
 8010026:	4603      	mov	r3, r0
 8010028:	80bb      	strh	r3, [r7, #4]
 801002a:	460b      	mov	r3, r1
 801002c:	807b      	strh	r3, [r7, #2]
 801002e:	4613      	mov	r3, r2
 8010030:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8010032:	4b41      	ldr	r3, [pc, #260]	; (8010138 <ILI9341_Draw_Rectangle+0x124>)
 8010034:	881b      	ldrh	r3, [r3, #0]
 8010036:	b29b      	uxth	r3, r3
 8010038:	88fa      	ldrh	r2, [r7, #6]
 801003a:	429a      	cmp	r2, r3
 801003c:	d278      	bcs.n	8010130 <ILI9341_Draw_Rectangle+0x11c>
 801003e:	4b3f      	ldr	r3, [pc, #252]	; (801013c <ILI9341_Draw_Rectangle+0x128>)
 8010040:	881b      	ldrh	r3, [r3, #0]
 8010042:	b29b      	uxth	r3, r3
 8010044:	88ba      	ldrh	r2, [r7, #4]
 8010046:	429a      	cmp	r2, r3
 8010048:	d272      	bcs.n	8010130 <ILI9341_Draw_Rectangle+0x11c>
	if((xpos+width-1)>=LCD_WIDTH)
 801004a:	88fa      	ldrh	r2, [r7, #6]
 801004c:	887b      	ldrh	r3, [r7, #2]
 801004e:	4413      	add	r3, r2
 8010050:	3b01      	subs	r3, #1
 8010052:	4a39      	ldr	r2, [pc, #228]	; (8010138 <ILI9341_Draw_Rectangle+0x124>)
 8010054:	8812      	ldrh	r2, [r2, #0]
 8010056:	b292      	uxth	r2, r2
 8010058:	4293      	cmp	r3, r2
 801005a:	db05      	blt.n	8010068 <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 801005c:	4b36      	ldr	r3, [pc, #216]	; (8010138 <ILI9341_Draw_Rectangle+0x124>)
 801005e:	881b      	ldrh	r3, [r3, #0]
 8010060:	b29a      	uxth	r2, r3
 8010062:	88fb      	ldrh	r3, [r7, #6]
 8010064:	1ad3      	subs	r3, r2, r3
 8010066:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 8010068:	88ba      	ldrh	r2, [r7, #4]
 801006a:	883b      	ldrh	r3, [r7, #0]
 801006c:	4413      	add	r3, r2
 801006e:	3b01      	subs	r3, #1
 8010070:	4a32      	ldr	r2, [pc, #200]	; (801013c <ILI9341_Draw_Rectangle+0x128>)
 8010072:	8812      	ldrh	r2, [r2, #0]
 8010074:	b292      	uxth	r2, r2
 8010076:	4293      	cmp	r3, r2
 8010078:	db05      	blt.n	8010086 <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 801007a:	4b30      	ldr	r3, [pc, #192]	; (801013c <ILI9341_Draw_Rectangle+0x128>)
 801007c:	881b      	ldrh	r3, [r3, #0]
 801007e:	b29a      	uxth	r2, r3
 8010080:	88bb      	ldrh	r3, [r7, #4]
 8010082:	1ad3      	subs	r3, r2, r3
 8010084:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 8010086:	88fa      	ldrh	r2, [r7, #6]
 8010088:	887b      	ldrh	r3, [r7, #2]
 801008a:	4413      	add	r3, r2
 801008c:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 801008e:	3b01      	subs	r3, #1
 8010090:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 8010092:	88ba      	ldrh	r2, [r7, #4]
 8010094:	883b      	ldrh	r3, [r7, #0]
 8010096:	4413      	add	r3, r2
 8010098:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 801009a:	3b01      	subs	r3, #1
 801009c:	b29b      	uxth	r3, r3
 801009e:	88b9      	ldrh	r1, [r7, #4]
 80100a0:	88f8      	ldrh	r0, [r7, #6]
 80100a2:	4622      	mov	r2, r4
 80100a4:	f7ff fde6 	bl	800fc74 <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 80100a8:	883a      	ldrh	r2, [r7, #0]
 80100aa:	887b      	ldrh	r3, [r7, #2]
 80100ac:	fb12 f303 	smulbb	r3, r2, r3
 80100b0:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 80100b2:	2300      	movs	r3, #0
 80100b4:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 80100b6:	89fb      	ldrh	r3, [r7, #14]
 80100b8:	f003 0301 	and.w	r3, r3, #1
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d009      	beq.n	80100d4 <ILI9341_Draw_Rectangle+0xc0>
 80100c0:	89fb      	ldrh	r3, [r7, #14]
 80100c2:	2b01      	cmp	r3, #1
 80100c4:	d906      	bls.n	80100d4 <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 80100c6:	2301      	movs	r3, #1
 80100c8:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 80100ca:	89fb      	ldrh	r3, [r7, #14]
 80100cc:	085b      	lsrs	r3, r3, #1
 80100ce:	b29b      	uxth	r3, r3
 80100d0:	005b      	lsls	r3, r3, #1
 80100d2:	81fb      	strh	r3, [r7, #14]
	}

	_LCD_Write_Frame(	xpos,
 80100d4:	89fc      	ldrh	r4, [r7, #14]
 80100d6:	8c3a      	ldrh	r2, [r7, #32]
 80100d8:	88b9      	ldrh	r1, [r7, #4]
 80100da:	88f8      	ldrh	r0, [r7, #6]
 80100dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80100e0:	9300      	str	r3, [sp, #0]
 80100e2:	4623      	mov	r3, r4
 80100e4:	f000 f8a8 	bl	8010238 <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 80100e8:	7b7b      	ldrb	r3, [r7, #13]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d021      	beq.n	8010132 <ILI9341_Draw_Rectangle+0x11e>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 80100ee:	88fa      	ldrh	r2, [r7, #6]
 80100f0:	887b      	ldrh	r3, [r7, #2]
 80100f2:	4413      	add	r3, r2
 80100f4:	b29b      	uxth	r3, r3
 80100f6:	3b02      	subs	r3, #2
 80100f8:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 80100fa:	88ba      	ldrh	r2, [r7, #4]
 80100fc:	883b      	ldrh	r3, [r7, #0]
 80100fe:	4413      	add	r3, r2
 8010100:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 8010102:	3b01      	subs	r3, #1
 8010104:	b29b      	uxth	r3, r3
 8010106:	8c3a      	ldrh	r2, [r7, #32]
 8010108:	4619      	mov	r1, r3
 801010a:	f7ff fe29 	bl	800fd60 <ILI9341_Draw_Pixel>
							colour);
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 801010e:	88fa      	ldrh	r2, [r7, #6]
 8010110:	887b      	ldrh	r3, [r7, #2]
 8010112:	4413      	add	r3, r2
 8010114:	b29b      	uxth	r3, r3
 8010116:	3b01      	subs	r3, #1
 8010118:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 801011a:	88ba      	ldrh	r2, [r7, #4]
 801011c:	883b      	ldrh	r3, [r7, #0]
 801011e:	4413      	add	r3, r2
 8010120:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 8010122:	3b01      	subs	r3, #1
 8010124:	b29b      	uxth	r3, r3
 8010126:	8c3a      	ldrh	r2, [r7, #32]
 8010128:	4619      	mov	r1, r3
 801012a:	f7ff fe19 	bl	800fd60 <ILI9341_Draw_Pixel>
 801012e:	e000      	b.n	8010132 <ILI9341_Draw_Rectangle+0x11e>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8010130:	bf00      	nop
							colour);
	}
}
 8010132:	3714      	adds	r7, #20
 8010134:	46bd      	mov	sp, r7
 8010136:	bd90      	pop	{r4, r7, pc}
 8010138:	20000c42 	.word	0x20000c42
 801013c:	20000c40 	.word	0x20000c40

08010140 <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 8010140:	b580      	push	{r7, lr}
 8010142:	b084      	sub	sp, #16
 8010144:	af00      	add	r7, sp, #0
 8010146:	4603      	mov	r3, r0
 8010148:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = rotation;
 801014a:	79fb      	ldrb	r3, [r7, #7]
 801014c:	73fb      	strb	r3, [r7, #15]

	_LCD_SendCommand(0x36);
 801014e:	2036      	movs	r0, #54	; 0x36
 8010150:	f000 f922 	bl	8010398 <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 8010154:	7bfb      	ldrb	r3, [r7, #15]
 8010156:	2b03      	cmp	r3, #3
 8010158:	d836      	bhi.n	80101c8 <ILI9341_Set_Rotation+0x88>
 801015a:	a201      	add	r2, pc, #4	; (adr r2, 8010160 <ILI9341_Set_Rotation+0x20>)
 801015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010160:	08010171 	.word	0x08010171
 8010164:	08010187 	.word	0x08010187
 8010168:	0801019d 	.word	0x0801019d
 801016c:	080101b3 	.word	0x080101b3
	{
		case SCREEN_VERTICAL_1:
			_LCD_SendData(0x40|0x08);
 8010170:	2048      	movs	r0, #72	; 0x48
 8010172:	f000 f943 	bl	80103fc <_LCD_SendData>
			LCD_WIDTH = 240;
 8010176:	4b17      	ldr	r3, [pc, #92]	; (80101d4 <ILI9341_Set_Rotation+0x94>)
 8010178:	22f0      	movs	r2, #240	; 0xf0
 801017a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 801017c:	4b16      	ldr	r3, [pc, #88]	; (80101d8 <ILI9341_Set_Rotation+0x98>)
 801017e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8010182:	801a      	strh	r2, [r3, #0]
			break;
 8010184:	e021      	b.n	80101ca <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			_LCD_SendData(0x20|0x08);
 8010186:	2028      	movs	r0, #40	; 0x28
 8010188:	f000 f938 	bl	80103fc <_LCD_SendData>
			LCD_WIDTH  = 320;
 801018c:	4b11      	ldr	r3, [pc, #68]	; (80101d4 <ILI9341_Set_Rotation+0x94>)
 801018e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8010192:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8010194:	4b10      	ldr	r3, [pc, #64]	; (80101d8 <ILI9341_Set_Rotation+0x98>)
 8010196:	22f0      	movs	r2, #240	; 0xf0
 8010198:	801a      	strh	r2, [r3, #0]
			break;
 801019a:	e016      	b.n	80101ca <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			_LCD_SendData(0x80|0x08);
 801019c:	2088      	movs	r0, #136	; 0x88
 801019e:	f000 f92d 	bl	80103fc <_LCD_SendData>
			LCD_WIDTH  = 240;
 80101a2:	4b0c      	ldr	r3, [pc, #48]	; (80101d4 <ILI9341_Set_Rotation+0x94>)
 80101a4:	22f0      	movs	r2, #240	; 0xf0
 80101a6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80101a8:	4b0b      	ldr	r3, [pc, #44]	; (80101d8 <ILI9341_Set_Rotation+0x98>)
 80101aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80101ae:	801a      	strh	r2, [r3, #0]
			break;
 80101b0:	e00b      	b.n	80101ca <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			_LCD_SendData(0x40|0x80|0x20|0x08);
 80101b2:	20e8      	movs	r0, #232	; 0xe8
 80101b4:	f000 f922 	bl	80103fc <_LCD_SendData>
			LCD_WIDTH  = 320;
 80101b8:	4b06      	ldr	r3, [pc, #24]	; (80101d4 <ILI9341_Set_Rotation+0x94>)
 80101ba:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80101be:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80101c0:	4b05      	ldr	r3, [pc, #20]	; (80101d8 <ILI9341_Set_Rotation+0x98>)
 80101c2:	22f0      	movs	r2, #240	; 0xf0
 80101c4:	801a      	strh	r2, [r3, #0]
			break;
 80101c6:	e000      	b.n	80101ca <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 80101c8:	bf00      	nop
	}
}
 80101ca:	bf00      	nop
 80101cc:	3710      	adds	r7, #16
 80101ce:	46bd      	mov	sp, r7
 80101d0:	bd80      	pop	{r7, pc}
 80101d2:	bf00      	nop
 80101d4:	20000c42 	.word	0x20000c42
 80101d8:	20000c40 	.word	0x20000c40

080101dc <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 80101dc:	b480      	push	{r7}
 80101de:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 80101e0:	4b05      	ldr	r3, [pc, #20]	; (80101f8 <_LCD_Enable+0x1c>)
 80101e2:	695b      	ldr	r3, [r3, #20]
 80101e4:	4a04      	ldr	r2, [pc, #16]	; (80101f8 <_LCD_Enable+0x1c>)
 80101e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80101ea:	6153      	str	r3, [r2, #20]
}
 80101ec:	bf00      	nop
 80101ee:	46bd      	mov	sp, r7
 80101f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f4:	4770      	bx	lr
 80101f6:	bf00      	nop
 80101f8:	48000400 	.word	0x48000400

080101fc <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 80101fc:	b580      	push	{r7, lr}
 80101fe:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 8010200:	4b0c      	ldr	r3, [pc, #48]	; (8010234 <_LCD_Reset+0x38>)
 8010202:	695b      	ldr	r3, [r3, #20]
 8010204:	4a0b      	ldr	r2, [pc, #44]	; (8010234 <_LCD_Reset+0x38>)
 8010206:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801020a:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 801020c:	20c8      	movs	r0, #200	; 0xc8
 801020e:	f7f8 fd19 	bl	8008c44 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010212:	4b08      	ldr	r3, [pc, #32]	; (8010234 <_LCD_Reset+0x38>)
 8010214:	695b      	ldr	r3, [r3, #20]
 8010216:	4a07      	ldr	r2, [pc, #28]	; (8010234 <_LCD_Reset+0x38>)
 8010218:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801021c:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 801021e:	20c8      	movs	r0, #200	; 0xc8
 8010220:	f7f8 fd10 	bl	8008c44 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8010224:	4b03      	ldr	r3, [pc, #12]	; (8010234 <_LCD_Reset+0x38>)
 8010226:	695b      	ldr	r3, [r3, #20]
 8010228:	4a02      	ldr	r2, [pc, #8]	; (8010234 <_LCD_Reset+0x38>)
 801022a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801022e:	6153      	str	r3, [r2, #20]
}
 8010230:	bf00      	nop
 8010232:	bd80      	pop	{r7, pc}
 8010234:	48000400 	.word	0x48000400

08010238 <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 8010238:	b5b0      	push	{r4, r5, r7, lr}
 801023a:	b08e      	sub	sp, #56	; 0x38
 801023c:	af00      	add	r7, sp, #0
 801023e:	607b      	str	r3, [r7, #4]
 8010240:	4603      	mov	r3, r0
 8010242:	81fb      	strh	r3, [r7, #14]
 8010244:	460b      	mov	r3, r1
 8010246:	81bb      	strh	r3, [r7, #12]
 8010248:	4613      	mov	r3, r2
 801024a:	817b      	strh	r3, [r7, #10]
 801024c:	466b      	mov	r3, sp
 801024e:	461d      	mov	r5, r3

	uint32_t buffer_size = 0;
 8010250:	2300      	movs	r3, #0
 8010252:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	005b      	lsls	r3, r3, #1
 8010258:	4a4d      	ldr	r2, [pc, #308]	; (8010390 <_LCD_Write_Frame+0x158>)
 801025a:	8812      	ldrh	r2, [r2, #0]
 801025c:	4293      	cmp	r3, r2
 801025e:	d202      	bcs.n	8010266 <_LCD_Write_Frame+0x2e>
	{
		buffer_size = chunk_size;
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010264:	e002      	b.n	801026c <_LCD_Write_Frame+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 8010266:	4b4a      	ldr	r3, [pc, #296]	; (8010390 <_LCD_Write_Frame+0x158>)
 8010268:	881b      	ldrh	r3, [r3, #0]
 801026a:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	unsigned char chifted = 	colour>>8;;
 801026c:	897b      	ldrh	r3, [r7, #10]
 801026e:	0a1b      	lsrs	r3, r3, #8
 8010270:	b29b      	uxth	r3, r3
 8010272:	77fb      	strb	r3, [r7, #31]
	unsigned char burst_buffer[buffer_size];
 8010274:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010276:	4603      	mov	r3, r0
 8010278:	3b01      	subs	r3, #1
 801027a:	61bb      	str	r3, [r7, #24]
 801027c:	4601      	mov	r1, r0
 801027e:	f04f 0200 	mov.w	r2, #0
 8010282:	f04f 0300 	mov.w	r3, #0
 8010286:	f04f 0400 	mov.w	r4, #0
 801028a:	00d4      	lsls	r4, r2, #3
 801028c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8010290:	00cb      	lsls	r3, r1, #3
 8010292:	4601      	mov	r1, r0
 8010294:	f04f 0200 	mov.w	r2, #0
 8010298:	f04f 0300 	mov.w	r3, #0
 801029c:	f04f 0400 	mov.w	r4, #0
 80102a0:	00d4      	lsls	r4, r2, #3
 80102a2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80102a6:	00cb      	lsls	r3, r1, #3
 80102a8:	1dc3      	adds	r3, r0, #7
 80102aa:	08db      	lsrs	r3, r3, #3
 80102ac:	00db      	lsls	r3, r3, #3
 80102ae:	ebad 0d03 	sub.w	sp, sp, r3
 80102b2:	466b      	mov	r3, sp
 80102b4:	3300      	adds	r3, #0
 80102b6:	617b      	str	r3, [r7, #20]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 80102b8:	2300      	movs	r3, #0
 80102ba:	633b      	str	r3, [r7, #48]	; 0x30
 80102bc:	e00d      	b.n	80102da <_LCD_Write_Frame+0xa2>
	{
			burst_buffer[j] = 	chifted;
 80102be:	697a      	ldr	r2, [r7, #20]
 80102c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102c2:	4413      	add	r3, r2
 80102c4:	7ffa      	ldrb	r2, [r7, #31]
 80102c6:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 80102c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102ca:	3301      	adds	r3, #1
 80102cc:	897a      	ldrh	r2, [r7, #10]
 80102ce:	b2d1      	uxtb	r1, r2
 80102d0:	697a      	ldr	r2, [r7, #20]
 80102d2:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 80102d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102d6:	3302      	adds	r3, #2
 80102d8:	633b      	str	r3, [r7, #48]	; 0x30
 80102da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80102dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102de:	429a      	cmp	r2, r3
 80102e0:	d3ed      	bcc.n	80102be <_LCD_Write_Frame+0x86>
	}
	
	uint32_t Sending_size = chunk_size*2;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	005b      	lsls	r3, r3, #1
 80102e6:	613b      	str	r3, [r7, #16]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 80102e8:	2301      	movs	r3, #1
 80102ea:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 80102ec:	2300      	movs	r3, #0
 80102ee:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d00d      	beq.n	8010312 <_LCD_Write_Frame+0xda>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 80102f6:	693a      	ldr	r2, [r7, #16]
 80102f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80102fe:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 8010300:	693b      	ldr	r3, [r7, #16]
 8010302:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010304:	fbb3 f2f2 	udiv	r2, r3, r2
 8010308:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801030a:	fb01 f202 	mul.w	r2, r1, r2
 801030e:	1a9b      	subs	r3, r3, r2
 8010310:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8010312:	4b20      	ldr	r3, [pc, #128]	; (8010394 <_LCD_Write_Frame+0x15c>)
 8010314:	695b      	ldr	r3, [r3, #20]
 8010316:	4a1f      	ldr	r2, [pc, #124]	; (8010394 <_LCD_Write_Frame+0x15c>)
 8010318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801031c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 801031e:	4b1d      	ldr	r3, [pc, #116]	; (8010394 <_LCD_Write_Frame+0x15c>)
 8010320:	695b      	ldr	r3, [r3, #20]
 8010322:	4a1c      	ldr	r2, [pc, #112]	; (8010394 <_LCD_Write_Frame+0x15c>)
 8010324:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010328:	6153      	str	r3, [r2, #20]
//TODO
	if(Sending_in_Block != 0)
 801032a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801032c:	2b00      	cmp	r3, #0
 801032e:	d00f      	beq.n	8010350 <_LCD_Write_Frame+0x118>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8010330:	2300      	movs	r3, #0
 8010332:	627b      	str	r3, [r7, #36]	; 0x24
 8010334:	e008      	b.n	8010348 <_LCD_Write_Frame+0x110>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 10);
 8010336:	6978      	ldr	r0, [r7, #20]
 8010338:	230a      	movs	r3, #10
 801033a:	2200      	movs	r2, #0
 801033c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801033e:	f000 f8c1 	bl	80104c4 <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8010342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010344:	3301      	adds	r3, #1
 8010346:	627b      	str	r3, [r7, #36]	; 0x24
 8010348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801034a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801034c:	429a      	cmp	r2, r3
 801034e:	d3f2      	bcc.n	8010336 <_LCD_Write_Frame+0xfe>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 10);
 8010350:	6978      	ldr	r0, [r7, #20]
 8010352:	230a      	movs	r3, #10
 8010354:	2200      	movs	r2, #0
 8010356:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010358:	f000 f8b4 	bl	80104c4 <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 801035c:	2300      	movs	r3, #0
 801035e:	623b      	str	r3, [r7, #32]
 8010360:	e008      	b.n	8010374 <_LCD_Write_Frame+0x13c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010362:	4b0c      	ldr	r3, [pc, #48]	; (8010394 <_LCD_Write_Frame+0x15c>)
 8010364:	695b      	ldr	r3, [r3, #20]
 8010366:	4a0b      	ldr	r2, [pc, #44]	; (8010394 <_LCD_Write_Frame+0x15c>)
 8010368:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801036c:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 801036e:	6a3b      	ldr	r3, [r7, #32]
 8010370:	3301      	adds	r3, #1
 8010372:	623b      	str	r3, [r7, #32]
 8010374:	6a3b      	ldr	r3, [r7, #32]
 8010376:	2b02      	cmp	r3, #2
 8010378:	ddf3      	ble.n	8010362 <_LCD_Write_Frame+0x12a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 801037a:	4b06      	ldr	r3, [pc, #24]	; (8010394 <_LCD_Write_Frame+0x15c>)
 801037c:	695b      	ldr	r3, [r3, #20]
 801037e:	4a05      	ldr	r2, [pc, #20]	; (8010394 <_LCD_Write_Frame+0x15c>)
 8010380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010384:	6153      	str	r3, [r2, #20]
 8010386:	46ad      	mov	sp, r5

}
 8010388:	bf00      	nop
 801038a:	3738      	adds	r7, #56	; 0x38
 801038c:	46bd      	mov	sp, r7
 801038e:	bdb0      	pop	{r4, r5, r7, pc}
 8010390:	20000c44 	.word	0x20000c44
 8010394:	48000400 	.word	0x48000400

08010398 <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 8010398:	b580      	push	{r7, lr}
 801039a:	b084      	sub	sp, #16
 801039c:	af00      	add	r7, sp, #0
 801039e:	4603      	mov	r3, r0
 80103a0:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80103a2:	4b15      	ldr	r3, [pc, #84]	; (80103f8 <_LCD_SendCommand+0x60>)
 80103a4:	695b      	ldr	r3, [r3, #20]
 80103a6:	4a14      	ldr	r2, [pc, #80]	; (80103f8 <_LCD_SendCommand+0x60>)
 80103a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80103ac:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 80103ae:	4b12      	ldr	r3, [pc, #72]	; (80103f8 <_LCD_SendCommand+0x60>)
 80103b0:	695b      	ldr	r3, [r3, #20]
 80103b2:	4a11      	ldr	r2, [pc, #68]	; (80103f8 <_LCD_SendCommand+0x60>)
 80103b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80103b8:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(command, 0 , 0);
 80103ba:	79fb      	ldrb	r3, [r7, #7]
 80103bc:	2200      	movs	r2, #0
 80103be:	2100      	movs	r1, #0
 80103c0:	4618      	mov	r0, r3
 80103c2:	f000 f84d 	bl	8010460 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 80103c6:	2300      	movs	r3, #0
 80103c8:	60fb      	str	r3, [r7, #12]
 80103ca:	e008      	b.n	80103de <_LCD_SendCommand+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80103cc:	4b0a      	ldr	r3, [pc, #40]	; (80103f8 <_LCD_SendCommand+0x60>)
 80103ce:	695b      	ldr	r3, [r3, #20]
 80103d0:	4a09      	ldr	r2, [pc, #36]	; (80103f8 <_LCD_SendCommand+0x60>)
 80103d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80103d6:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	3301      	adds	r3, #1
 80103dc:	60fb      	str	r3, [r7, #12]
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	2b02      	cmp	r3, #2
 80103e2:	ddf3      	ble.n	80103cc <_LCD_SendCommand+0x34>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80103e4:	4b04      	ldr	r3, [pc, #16]	; (80103f8 <_LCD_SendCommand+0x60>)
 80103e6:	695b      	ldr	r3, [r3, #20]
 80103e8:	4a03      	ldr	r2, [pc, #12]	; (80103f8 <_LCD_SendCommand+0x60>)
 80103ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80103ee:	6153      	str	r3, [r2, #20]
}
 80103f0:	bf00      	nop
 80103f2:	3710      	adds	r7, #16
 80103f4:	46bd      	mov	sp, r7
 80103f6:	bd80      	pop	{r7, pc}
 80103f8:	48000400 	.word	0x48000400

080103fc <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b084      	sub	sp, #16
 8010400:	af00      	add	r7, sp, #0
 8010402:	4603      	mov	r3, r0
 8010404:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8010406:	4b15      	ldr	r3, [pc, #84]	; (801045c <_LCD_SendData+0x60>)
 8010408:	695b      	ldr	r3, [r3, #20]
 801040a:	4a14      	ldr	r2, [pc, #80]	; (801045c <_LCD_SendData+0x60>)
 801040c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010410:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010412:	4b12      	ldr	r3, [pc, #72]	; (801045c <_LCD_SendData+0x60>)
 8010414:	695b      	ldr	r3, [r3, #20]
 8010416:	4a11      	ldr	r2, [pc, #68]	; (801045c <_LCD_SendData+0x60>)
 8010418:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801041c:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(data, 0 , 0);
 801041e:	79fb      	ldrb	r3, [r7, #7]
 8010420:	2200      	movs	r2, #0
 8010422:	2100      	movs	r1, #0
 8010424:	4618      	mov	r0, r3
 8010426:	f000 f81b 	bl	8010460 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 801042a:	2300      	movs	r3, #0
 801042c:	60fb      	str	r3, [r7, #12]
 801042e:	e008      	b.n	8010442 <_LCD_SendData+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010430:	4b0a      	ldr	r3, [pc, #40]	; (801045c <_LCD_SendData+0x60>)
 8010432:	695b      	ldr	r3, [r3, #20]
 8010434:	4a09      	ldr	r2, [pc, #36]	; (801045c <_LCD_SendData+0x60>)
 8010436:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801043a:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	3301      	adds	r3, #1
 8010440:	60fb      	str	r3, [r7, #12]
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	2b02      	cmp	r3, #2
 8010446:	ddf3      	ble.n	8010430 <_LCD_SendData+0x34>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010448:	4b04      	ldr	r3, [pc, #16]	; (801045c <_LCD_SendData+0x60>)
 801044a:	695b      	ldr	r3, [r3, #20]
 801044c:	4a03      	ldr	r2, [pc, #12]	; (801045c <_LCD_SendData+0x60>)
 801044e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010452:	6153      	str	r3, [r2, #20]
}
 8010454:	bf00      	nop
 8010456:	3710      	adds	r7, #16
 8010458:	46bd      	mov	sp, r7
 801045a:	bd80      	pop	{r7, pc}
 801045c:	48000400 	.word	0x48000400

08010460 <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 8010460:	b480      	push	{r7}
 8010462:	b085      	sub	sp, #20
 8010464:	af00      	add	r7, sp, #0
 8010466:	4603      	mov	r3, r0
 8010468:	71fb      	strb	r3, [r7, #7]
 801046a:	460b      	mov	r3, r1
 801046c:	71bb      	strb	r3, [r7, #6]
 801046e:	4613      	mov	r3, r2
 8010470:	717b      	strb	r3, [r7, #5]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 8010472:	2300      	movs	r3, #0
 8010474:	60fb      	str	r3, [r7, #12]
 8010476:	e003      	b.n	8010480 <_SPI_SendByte+0x20>
   		asm("nop");
 8010478:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	3301      	adds	r3, #1
 801047e:	60fb      	str	r3, [r7, #12]
 8010480:	79bb      	ldrb	r3, [r7, #6]
 8010482:	68fa      	ldr	r2, [r7, #12]
 8010484:	429a      	cmp	r2, r3
 8010486:	dbf7      	blt.n	8010478 <_SPI_SendByte+0x18>

	// check transmit buffer empty
	if((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 8010488:	4b0c      	ldr	r3, [pc, #48]	; (80104bc <_SPI_SendByte+0x5c>)
 801048a:	689b      	ldr	r3, [r3, #8]
 801048c:	f003 0302 	and.w	r3, r3, #2
 8010490:	2b02      	cmp	r3, #2
 8010492:	d102      	bne.n	801049a <_SPI_SendByte+0x3a>
	{
		*(volatile uint8_t *)&SPI_PERIPH->DR = data_buffer;
 8010494:	4a0a      	ldr	r2, [pc, #40]	; (80104c0 <_SPI_SendByte+0x60>)
 8010496:	79fb      	ldrb	r3, [r7, #7]
 8010498:	7013      	strb	r3, [r2, #0]
	}

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 801049a:	2300      	movs	r3, #0
 801049c:	60bb      	str	r3, [r7, #8]
 801049e:	e003      	b.n	80104a8 <_SPI_SendByte+0x48>
   		asm("nop");
 80104a0:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 80104a2:	68bb      	ldr	r3, [r7, #8]
 80104a4:	3301      	adds	r3, #1
 80104a6:	60bb      	str	r3, [r7, #8]
 80104a8:	797b      	ldrb	r3, [r7, #5]
 80104aa:	68ba      	ldr	r2, [r7, #8]
 80104ac:	429a      	cmp	r2, r3
 80104ae:	dbf7      	blt.n	80104a0 <_SPI_SendByte+0x40>

#endif

}
 80104b0:	bf00      	nop
 80104b2:	3714      	adds	r7, #20
 80104b4:	46bd      	mov	sp, r7
 80104b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ba:	4770      	bx	lr
 80104bc:	40003c00 	.word	0x40003c00
 80104c0:	40003c0c 	.word	0x40003c0c

080104c4 <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 80104c4:	b480      	push	{r7}
 80104c6:	b089      	sub	sp, #36	; 0x24
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	60f8      	str	r0, [r7, #12]
 80104cc:	60b9      	str	r1, [r7, #8]
 80104ce:	4611      	mov	r1, r2
 80104d0:	461a      	mov	r2, r3
 80104d2:	460b      	mov	r3, r1
 80104d4:	71fb      	strb	r3, [r7, #7]
 80104d6:	4613      	mov	r3, r2
 80104d8:	71bb      	strb	r3, [r7, #6]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 80104da:	2300      	movs	r3, #0
 80104dc:	61fb      	str	r3, [r7, #28]
 80104de:	e003      	b.n	80104e8 <_SPI_SendByteMultiByte+0x24>
   		asm("nop");
 80104e0:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 80104e2:	69fb      	ldr	r3, [r7, #28]
 80104e4:	3301      	adds	r3, #1
 80104e6:	61fb      	str	r3, [r7, #28]
 80104e8:	79fb      	ldrb	r3, [r7, #7]
 80104ea:	69fa      	ldr	r2, [r7, #28]
 80104ec:	429a      	cmp	r2, r3
 80104ee:	dbf7      	blt.n	80104e0 <_SPI_SendByteMultiByte+0x1c>

	uint8_t *p_data_buffer = (uint8_t *)data_buffer;
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	61bb      	str	r3, [r7, #24]
	//volatile uint16_t TxXferCount = (uint16_t)buffer_size;

	while (buffer_size > 0U)
 80104f4:	e01d      	b.n	8010532 <_SPI_SendByteMultiByte+0x6e>
	{
		// check transmit buffer empty
		if ((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 80104f6:	4b1c      	ldr	r3, [pc, #112]	; (8010568 <_SPI_SendByteMultiByte+0xa4>)
 80104f8:	689b      	ldr	r3, [r3, #8]
 80104fa:	f003 0302 	and.w	r3, r3, #2
 80104fe:	2b02      	cmp	r3, #2
 8010500:	d117      	bne.n	8010532 <_SPI_SendByteMultiByte+0x6e>
		{
			if (buffer_size > 1U)
 8010502:	68bb      	ldr	r3, [r7, #8]
 8010504:	2b01      	cmp	r3, #1
 8010506:	d90a      	bls.n	801051e <_SPI_SendByteMultiByte+0x5a>
			{
				// write on the data register in packing mode
				SPI_PERIPH->DR = *((uint16_t *)p_data_buffer);
 8010508:	69bb      	ldr	r3, [r7, #24]
 801050a:	881a      	ldrh	r2, [r3, #0]
 801050c:	4b16      	ldr	r3, [pc, #88]	; (8010568 <_SPI_SendByteMultiByte+0xa4>)
 801050e:	60da      	str	r2, [r3, #12]
				p_data_buffer += sizeof(uint16_t);
 8010510:	69bb      	ldr	r3, [r7, #24]
 8010512:	3302      	adds	r3, #2
 8010514:	61bb      	str	r3, [r7, #24]
				buffer_size -= 2U;
 8010516:	68bb      	ldr	r3, [r7, #8]
 8010518:	3b02      	subs	r3, #2
 801051a:	60bb      	str	r3, [r7, #8]
 801051c:	e009      	b.n	8010532 <_SPI_SendByteMultiByte+0x6e>
			}
			else
			{
				*((volatile uint8_t *)&SPI_PERIPH->DR) = (*p_data_buffer);
 801051e:	4a13      	ldr	r2, [pc, #76]	; (801056c <_SPI_SendByteMultiByte+0xa8>)
 8010520:	69bb      	ldr	r3, [r7, #24]
 8010522:	781b      	ldrb	r3, [r3, #0]
 8010524:	7013      	strb	r3, [r2, #0]
				p_data_buffer++;
 8010526:	69bb      	ldr	r3, [r7, #24]
 8010528:	3301      	adds	r3, #1
 801052a:	61bb      	str	r3, [r7, #24]
				buffer_size--;
 801052c:	68bb      	ldr	r3, [r7, #8]
 801052e:	3b01      	subs	r3, #1
 8010530:	60bb      	str	r3, [r7, #8]
	while (buffer_size > 0U)
 8010532:	68bb      	ldr	r3, [r7, #8]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d1de      	bne.n	80104f6 <_SPI_SendByteMultiByte+0x32>
			}
		}
	}

	// clear SPI overrun flag
	SPI_PERIPH->SR &= ~(SPI_SR_OVR);
 8010538:	4b0b      	ldr	r3, [pc, #44]	; (8010568 <_SPI_SendByteMultiByte+0xa4>)
 801053a:	689b      	ldr	r3, [r3, #8]
 801053c:	4a0a      	ldr	r2, [pc, #40]	; (8010568 <_SPI_SendByteMultiByte+0xa4>)
 801053e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010542:	6093      	str	r3, [r2, #8]

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 8010544:	2300      	movs	r3, #0
 8010546:	617b      	str	r3, [r7, #20]
 8010548:	e003      	b.n	8010552 <_SPI_SendByteMultiByte+0x8e>
   		asm("nop");
 801054a:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 801054c:	697b      	ldr	r3, [r7, #20]
 801054e:	3301      	adds	r3, #1
 8010550:	617b      	str	r3, [r7, #20]
 8010552:	79bb      	ldrb	r3, [r7, #6]
 8010554:	697a      	ldr	r2, [r7, #20]
 8010556:	429a      	cmp	r2, r3
 8010558:	dbf7      	blt.n	801054a <_SPI_SendByteMultiByte+0x86>

#endif

}
 801055a:	bf00      	nop
 801055c:	3724      	adds	r7, #36	; 0x24
 801055e:	46bd      	mov	sp, r7
 8010560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010564:	4770      	bx	lr
 8010566:	bf00      	nop
 8010568:	40003c00 	.word	0x40003c00
 801056c:	40003c0c 	.word	0x40003c0c

08010570 <__errno>:
 8010570:	4b01      	ldr	r3, [pc, #4]	; (8010578 <__errno+0x8>)
 8010572:	6818      	ldr	r0, [r3, #0]
 8010574:	4770      	bx	lr
 8010576:	bf00      	nop
 8010578:	20001c38 	.word	0x20001c38

0801057c <__libc_init_array>:
 801057c:	b570      	push	{r4, r5, r6, lr}
 801057e:	4e0d      	ldr	r6, [pc, #52]	; (80105b4 <__libc_init_array+0x38>)
 8010580:	4c0d      	ldr	r4, [pc, #52]	; (80105b8 <__libc_init_array+0x3c>)
 8010582:	1ba4      	subs	r4, r4, r6
 8010584:	10a4      	asrs	r4, r4, #2
 8010586:	2500      	movs	r5, #0
 8010588:	42a5      	cmp	r5, r4
 801058a:	d109      	bne.n	80105a0 <__libc_init_array+0x24>
 801058c:	4e0b      	ldr	r6, [pc, #44]	; (80105bc <__libc_init_array+0x40>)
 801058e:	4c0c      	ldr	r4, [pc, #48]	; (80105c0 <__libc_init_array+0x44>)
 8010590:	f004 f8a0 	bl	80146d4 <_init>
 8010594:	1ba4      	subs	r4, r4, r6
 8010596:	10a4      	asrs	r4, r4, #2
 8010598:	2500      	movs	r5, #0
 801059a:	42a5      	cmp	r5, r4
 801059c:	d105      	bne.n	80105aa <__libc_init_array+0x2e>
 801059e:	bd70      	pop	{r4, r5, r6, pc}
 80105a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80105a4:	4798      	blx	r3
 80105a6:	3501      	adds	r5, #1
 80105a8:	e7ee      	b.n	8010588 <__libc_init_array+0xc>
 80105aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80105ae:	4798      	blx	r3
 80105b0:	3501      	adds	r5, #1
 80105b2:	e7f2      	b.n	801059a <__libc_init_array+0x1e>
 80105b4:	08015ae8 	.word	0x08015ae8
 80105b8:	08015ae8 	.word	0x08015ae8
 80105bc:	08015ae8 	.word	0x08015ae8
 80105c0:	08015aec 	.word	0x08015aec

080105c4 <memset>:
 80105c4:	4402      	add	r2, r0
 80105c6:	4603      	mov	r3, r0
 80105c8:	4293      	cmp	r3, r2
 80105ca:	d100      	bne.n	80105ce <memset+0xa>
 80105cc:	4770      	bx	lr
 80105ce:	f803 1b01 	strb.w	r1, [r3], #1
 80105d2:	e7f9      	b.n	80105c8 <memset+0x4>

080105d4 <__cvt>:
 80105d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80105d8:	ec55 4b10 	vmov	r4, r5, d0
 80105dc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80105de:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80105e2:	2d00      	cmp	r5, #0
 80105e4:	460e      	mov	r6, r1
 80105e6:	4691      	mov	r9, r2
 80105e8:	4619      	mov	r1, r3
 80105ea:	bfb8      	it	lt
 80105ec:	4622      	movlt	r2, r4
 80105ee:	462b      	mov	r3, r5
 80105f0:	f027 0720 	bic.w	r7, r7, #32
 80105f4:	bfbb      	ittet	lt
 80105f6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80105fa:	461d      	movlt	r5, r3
 80105fc:	2300      	movge	r3, #0
 80105fe:	232d      	movlt	r3, #45	; 0x2d
 8010600:	bfb8      	it	lt
 8010602:	4614      	movlt	r4, r2
 8010604:	2f46      	cmp	r7, #70	; 0x46
 8010606:	700b      	strb	r3, [r1, #0]
 8010608:	d004      	beq.n	8010614 <__cvt+0x40>
 801060a:	2f45      	cmp	r7, #69	; 0x45
 801060c:	d100      	bne.n	8010610 <__cvt+0x3c>
 801060e:	3601      	adds	r6, #1
 8010610:	2102      	movs	r1, #2
 8010612:	e000      	b.n	8010616 <__cvt+0x42>
 8010614:	2103      	movs	r1, #3
 8010616:	ab03      	add	r3, sp, #12
 8010618:	9301      	str	r3, [sp, #4]
 801061a:	ab02      	add	r3, sp, #8
 801061c:	9300      	str	r3, [sp, #0]
 801061e:	4632      	mov	r2, r6
 8010620:	4653      	mov	r3, sl
 8010622:	ec45 4b10 	vmov	d0, r4, r5
 8010626:	f000 fe3f 	bl	80112a8 <_dtoa_r>
 801062a:	2f47      	cmp	r7, #71	; 0x47
 801062c:	4680      	mov	r8, r0
 801062e:	d102      	bne.n	8010636 <__cvt+0x62>
 8010630:	f019 0f01 	tst.w	r9, #1
 8010634:	d026      	beq.n	8010684 <__cvt+0xb0>
 8010636:	2f46      	cmp	r7, #70	; 0x46
 8010638:	eb08 0906 	add.w	r9, r8, r6
 801063c:	d111      	bne.n	8010662 <__cvt+0x8e>
 801063e:	f898 3000 	ldrb.w	r3, [r8]
 8010642:	2b30      	cmp	r3, #48	; 0x30
 8010644:	d10a      	bne.n	801065c <__cvt+0x88>
 8010646:	2200      	movs	r2, #0
 8010648:	2300      	movs	r3, #0
 801064a:	4620      	mov	r0, r4
 801064c:	4629      	mov	r1, r5
 801064e:	f7f0 fa63 	bl	8000b18 <__aeabi_dcmpeq>
 8010652:	b918      	cbnz	r0, 801065c <__cvt+0x88>
 8010654:	f1c6 0601 	rsb	r6, r6, #1
 8010658:	f8ca 6000 	str.w	r6, [sl]
 801065c:	f8da 3000 	ldr.w	r3, [sl]
 8010660:	4499      	add	r9, r3
 8010662:	2200      	movs	r2, #0
 8010664:	2300      	movs	r3, #0
 8010666:	4620      	mov	r0, r4
 8010668:	4629      	mov	r1, r5
 801066a:	f7f0 fa55 	bl	8000b18 <__aeabi_dcmpeq>
 801066e:	b938      	cbnz	r0, 8010680 <__cvt+0xac>
 8010670:	2230      	movs	r2, #48	; 0x30
 8010672:	9b03      	ldr	r3, [sp, #12]
 8010674:	454b      	cmp	r3, r9
 8010676:	d205      	bcs.n	8010684 <__cvt+0xb0>
 8010678:	1c59      	adds	r1, r3, #1
 801067a:	9103      	str	r1, [sp, #12]
 801067c:	701a      	strb	r2, [r3, #0]
 801067e:	e7f8      	b.n	8010672 <__cvt+0x9e>
 8010680:	f8cd 900c 	str.w	r9, [sp, #12]
 8010684:	9b03      	ldr	r3, [sp, #12]
 8010686:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010688:	eba3 0308 	sub.w	r3, r3, r8
 801068c:	4640      	mov	r0, r8
 801068e:	6013      	str	r3, [r2, #0]
 8010690:	b004      	add	sp, #16
 8010692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08010696 <__exponent>:
 8010696:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010698:	2900      	cmp	r1, #0
 801069a:	4604      	mov	r4, r0
 801069c:	bfba      	itte	lt
 801069e:	4249      	neglt	r1, r1
 80106a0:	232d      	movlt	r3, #45	; 0x2d
 80106a2:	232b      	movge	r3, #43	; 0x2b
 80106a4:	2909      	cmp	r1, #9
 80106a6:	f804 2b02 	strb.w	r2, [r4], #2
 80106aa:	7043      	strb	r3, [r0, #1]
 80106ac:	dd20      	ble.n	80106f0 <__exponent+0x5a>
 80106ae:	f10d 0307 	add.w	r3, sp, #7
 80106b2:	461f      	mov	r7, r3
 80106b4:	260a      	movs	r6, #10
 80106b6:	fb91 f5f6 	sdiv	r5, r1, r6
 80106ba:	fb06 1115 	mls	r1, r6, r5, r1
 80106be:	3130      	adds	r1, #48	; 0x30
 80106c0:	2d09      	cmp	r5, #9
 80106c2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80106c6:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80106ca:	4629      	mov	r1, r5
 80106cc:	dc09      	bgt.n	80106e2 <__exponent+0x4c>
 80106ce:	3130      	adds	r1, #48	; 0x30
 80106d0:	3b02      	subs	r3, #2
 80106d2:	f802 1c01 	strb.w	r1, [r2, #-1]
 80106d6:	42bb      	cmp	r3, r7
 80106d8:	4622      	mov	r2, r4
 80106da:	d304      	bcc.n	80106e6 <__exponent+0x50>
 80106dc:	1a10      	subs	r0, r2, r0
 80106de:	b003      	add	sp, #12
 80106e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80106e2:	4613      	mov	r3, r2
 80106e4:	e7e7      	b.n	80106b6 <__exponent+0x20>
 80106e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80106ea:	f804 2b01 	strb.w	r2, [r4], #1
 80106ee:	e7f2      	b.n	80106d6 <__exponent+0x40>
 80106f0:	2330      	movs	r3, #48	; 0x30
 80106f2:	4419      	add	r1, r3
 80106f4:	7083      	strb	r3, [r0, #2]
 80106f6:	1d02      	adds	r2, r0, #4
 80106f8:	70c1      	strb	r1, [r0, #3]
 80106fa:	e7ef      	b.n	80106dc <__exponent+0x46>

080106fc <_printf_float>:
 80106fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010700:	b08d      	sub	sp, #52	; 0x34
 8010702:	460c      	mov	r4, r1
 8010704:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8010708:	4616      	mov	r6, r2
 801070a:	461f      	mov	r7, r3
 801070c:	4605      	mov	r5, r0
 801070e:	f001 fcfd 	bl	801210c <_localeconv_r>
 8010712:	6803      	ldr	r3, [r0, #0]
 8010714:	9304      	str	r3, [sp, #16]
 8010716:	4618      	mov	r0, r3
 8010718:	f7ef fd82 	bl	8000220 <strlen>
 801071c:	2300      	movs	r3, #0
 801071e:	930a      	str	r3, [sp, #40]	; 0x28
 8010720:	f8d8 3000 	ldr.w	r3, [r8]
 8010724:	9005      	str	r0, [sp, #20]
 8010726:	3307      	adds	r3, #7
 8010728:	f023 0307 	bic.w	r3, r3, #7
 801072c:	f103 0208 	add.w	r2, r3, #8
 8010730:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010734:	f8d4 b000 	ldr.w	fp, [r4]
 8010738:	f8c8 2000 	str.w	r2, [r8]
 801073c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010740:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010744:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010748:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801074c:	9307      	str	r3, [sp, #28]
 801074e:	f8cd 8018 	str.w	r8, [sp, #24]
 8010752:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010756:	4ba7      	ldr	r3, [pc, #668]	; (80109f4 <_printf_float+0x2f8>)
 8010758:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801075c:	f7f0 fa0e 	bl	8000b7c <__aeabi_dcmpun>
 8010760:	bb70      	cbnz	r0, 80107c0 <_printf_float+0xc4>
 8010762:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010766:	4ba3      	ldr	r3, [pc, #652]	; (80109f4 <_printf_float+0x2f8>)
 8010768:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801076c:	f7f0 f9e8 	bl	8000b40 <__aeabi_dcmple>
 8010770:	bb30      	cbnz	r0, 80107c0 <_printf_float+0xc4>
 8010772:	2200      	movs	r2, #0
 8010774:	2300      	movs	r3, #0
 8010776:	4640      	mov	r0, r8
 8010778:	4649      	mov	r1, r9
 801077a:	f7f0 f9d7 	bl	8000b2c <__aeabi_dcmplt>
 801077e:	b110      	cbz	r0, 8010786 <_printf_float+0x8a>
 8010780:	232d      	movs	r3, #45	; 0x2d
 8010782:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010786:	4a9c      	ldr	r2, [pc, #624]	; (80109f8 <_printf_float+0x2fc>)
 8010788:	4b9c      	ldr	r3, [pc, #624]	; (80109fc <_printf_float+0x300>)
 801078a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801078e:	bf8c      	ite	hi
 8010790:	4690      	movhi	r8, r2
 8010792:	4698      	movls	r8, r3
 8010794:	2303      	movs	r3, #3
 8010796:	f02b 0204 	bic.w	r2, fp, #4
 801079a:	6123      	str	r3, [r4, #16]
 801079c:	6022      	str	r2, [r4, #0]
 801079e:	f04f 0900 	mov.w	r9, #0
 80107a2:	9700      	str	r7, [sp, #0]
 80107a4:	4633      	mov	r3, r6
 80107a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80107a8:	4621      	mov	r1, r4
 80107aa:	4628      	mov	r0, r5
 80107ac:	f000 f9e6 	bl	8010b7c <_printf_common>
 80107b0:	3001      	adds	r0, #1
 80107b2:	f040 808d 	bne.w	80108d0 <_printf_float+0x1d4>
 80107b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80107ba:	b00d      	add	sp, #52	; 0x34
 80107bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107c0:	4642      	mov	r2, r8
 80107c2:	464b      	mov	r3, r9
 80107c4:	4640      	mov	r0, r8
 80107c6:	4649      	mov	r1, r9
 80107c8:	f7f0 f9d8 	bl	8000b7c <__aeabi_dcmpun>
 80107cc:	b110      	cbz	r0, 80107d4 <_printf_float+0xd8>
 80107ce:	4a8c      	ldr	r2, [pc, #560]	; (8010a00 <_printf_float+0x304>)
 80107d0:	4b8c      	ldr	r3, [pc, #560]	; (8010a04 <_printf_float+0x308>)
 80107d2:	e7da      	b.n	801078a <_printf_float+0x8e>
 80107d4:	6861      	ldr	r1, [r4, #4]
 80107d6:	1c4b      	adds	r3, r1, #1
 80107d8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80107dc:	a80a      	add	r0, sp, #40	; 0x28
 80107de:	d13e      	bne.n	801085e <_printf_float+0x162>
 80107e0:	2306      	movs	r3, #6
 80107e2:	6063      	str	r3, [r4, #4]
 80107e4:	2300      	movs	r3, #0
 80107e6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80107ea:	ab09      	add	r3, sp, #36	; 0x24
 80107ec:	9300      	str	r3, [sp, #0]
 80107ee:	ec49 8b10 	vmov	d0, r8, r9
 80107f2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80107f6:	6022      	str	r2, [r4, #0]
 80107f8:	f8cd a004 	str.w	sl, [sp, #4]
 80107fc:	6861      	ldr	r1, [r4, #4]
 80107fe:	4628      	mov	r0, r5
 8010800:	f7ff fee8 	bl	80105d4 <__cvt>
 8010804:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8010808:	2b47      	cmp	r3, #71	; 0x47
 801080a:	4680      	mov	r8, r0
 801080c:	d109      	bne.n	8010822 <_printf_float+0x126>
 801080e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010810:	1cd8      	adds	r0, r3, #3
 8010812:	db02      	blt.n	801081a <_printf_float+0x11e>
 8010814:	6862      	ldr	r2, [r4, #4]
 8010816:	4293      	cmp	r3, r2
 8010818:	dd47      	ble.n	80108aa <_printf_float+0x1ae>
 801081a:	f1aa 0a02 	sub.w	sl, sl, #2
 801081e:	fa5f fa8a 	uxtb.w	sl, sl
 8010822:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8010826:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010828:	d824      	bhi.n	8010874 <_printf_float+0x178>
 801082a:	3901      	subs	r1, #1
 801082c:	4652      	mov	r2, sl
 801082e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010832:	9109      	str	r1, [sp, #36]	; 0x24
 8010834:	f7ff ff2f 	bl	8010696 <__exponent>
 8010838:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801083a:	1813      	adds	r3, r2, r0
 801083c:	2a01      	cmp	r2, #1
 801083e:	4681      	mov	r9, r0
 8010840:	6123      	str	r3, [r4, #16]
 8010842:	dc02      	bgt.n	801084a <_printf_float+0x14e>
 8010844:	6822      	ldr	r2, [r4, #0]
 8010846:	07d1      	lsls	r1, r2, #31
 8010848:	d501      	bpl.n	801084e <_printf_float+0x152>
 801084a:	3301      	adds	r3, #1
 801084c:	6123      	str	r3, [r4, #16]
 801084e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010852:	2b00      	cmp	r3, #0
 8010854:	d0a5      	beq.n	80107a2 <_printf_float+0xa6>
 8010856:	232d      	movs	r3, #45	; 0x2d
 8010858:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801085c:	e7a1      	b.n	80107a2 <_printf_float+0xa6>
 801085e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8010862:	f000 8177 	beq.w	8010b54 <_printf_float+0x458>
 8010866:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801086a:	d1bb      	bne.n	80107e4 <_printf_float+0xe8>
 801086c:	2900      	cmp	r1, #0
 801086e:	d1b9      	bne.n	80107e4 <_printf_float+0xe8>
 8010870:	2301      	movs	r3, #1
 8010872:	e7b6      	b.n	80107e2 <_printf_float+0xe6>
 8010874:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8010878:	d119      	bne.n	80108ae <_printf_float+0x1b2>
 801087a:	2900      	cmp	r1, #0
 801087c:	6863      	ldr	r3, [r4, #4]
 801087e:	dd0c      	ble.n	801089a <_printf_float+0x19e>
 8010880:	6121      	str	r1, [r4, #16]
 8010882:	b913      	cbnz	r3, 801088a <_printf_float+0x18e>
 8010884:	6822      	ldr	r2, [r4, #0]
 8010886:	07d2      	lsls	r2, r2, #31
 8010888:	d502      	bpl.n	8010890 <_printf_float+0x194>
 801088a:	3301      	adds	r3, #1
 801088c:	440b      	add	r3, r1
 801088e:	6123      	str	r3, [r4, #16]
 8010890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010892:	65a3      	str	r3, [r4, #88]	; 0x58
 8010894:	f04f 0900 	mov.w	r9, #0
 8010898:	e7d9      	b.n	801084e <_printf_float+0x152>
 801089a:	b913      	cbnz	r3, 80108a2 <_printf_float+0x1a6>
 801089c:	6822      	ldr	r2, [r4, #0]
 801089e:	07d0      	lsls	r0, r2, #31
 80108a0:	d501      	bpl.n	80108a6 <_printf_float+0x1aa>
 80108a2:	3302      	adds	r3, #2
 80108a4:	e7f3      	b.n	801088e <_printf_float+0x192>
 80108a6:	2301      	movs	r3, #1
 80108a8:	e7f1      	b.n	801088e <_printf_float+0x192>
 80108aa:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80108ae:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80108b2:	4293      	cmp	r3, r2
 80108b4:	db05      	blt.n	80108c2 <_printf_float+0x1c6>
 80108b6:	6822      	ldr	r2, [r4, #0]
 80108b8:	6123      	str	r3, [r4, #16]
 80108ba:	07d1      	lsls	r1, r2, #31
 80108bc:	d5e8      	bpl.n	8010890 <_printf_float+0x194>
 80108be:	3301      	adds	r3, #1
 80108c0:	e7e5      	b.n	801088e <_printf_float+0x192>
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	bfd4      	ite	le
 80108c6:	f1c3 0302 	rsble	r3, r3, #2
 80108ca:	2301      	movgt	r3, #1
 80108cc:	4413      	add	r3, r2
 80108ce:	e7de      	b.n	801088e <_printf_float+0x192>
 80108d0:	6823      	ldr	r3, [r4, #0]
 80108d2:	055a      	lsls	r2, r3, #21
 80108d4:	d407      	bmi.n	80108e6 <_printf_float+0x1ea>
 80108d6:	6923      	ldr	r3, [r4, #16]
 80108d8:	4642      	mov	r2, r8
 80108da:	4631      	mov	r1, r6
 80108dc:	4628      	mov	r0, r5
 80108de:	47b8      	blx	r7
 80108e0:	3001      	adds	r0, #1
 80108e2:	d12b      	bne.n	801093c <_printf_float+0x240>
 80108e4:	e767      	b.n	80107b6 <_printf_float+0xba>
 80108e6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80108ea:	f240 80dc 	bls.w	8010aa6 <_printf_float+0x3aa>
 80108ee:	2200      	movs	r2, #0
 80108f0:	2300      	movs	r3, #0
 80108f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80108f6:	f7f0 f90f 	bl	8000b18 <__aeabi_dcmpeq>
 80108fa:	2800      	cmp	r0, #0
 80108fc:	d033      	beq.n	8010966 <_printf_float+0x26a>
 80108fe:	2301      	movs	r3, #1
 8010900:	4a41      	ldr	r2, [pc, #260]	; (8010a08 <_printf_float+0x30c>)
 8010902:	4631      	mov	r1, r6
 8010904:	4628      	mov	r0, r5
 8010906:	47b8      	blx	r7
 8010908:	3001      	adds	r0, #1
 801090a:	f43f af54 	beq.w	80107b6 <_printf_float+0xba>
 801090e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010912:	429a      	cmp	r2, r3
 8010914:	db02      	blt.n	801091c <_printf_float+0x220>
 8010916:	6823      	ldr	r3, [r4, #0]
 8010918:	07d8      	lsls	r0, r3, #31
 801091a:	d50f      	bpl.n	801093c <_printf_float+0x240>
 801091c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010920:	4631      	mov	r1, r6
 8010922:	4628      	mov	r0, r5
 8010924:	47b8      	blx	r7
 8010926:	3001      	adds	r0, #1
 8010928:	f43f af45 	beq.w	80107b6 <_printf_float+0xba>
 801092c:	f04f 0800 	mov.w	r8, #0
 8010930:	f104 091a 	add.w	r9, r4, #26
 8010934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010936:	3b01      	subs	r3, #1
 8010938:	4543      	cmp	r3, r8
 801093a:	dc09      	bgt.n	8010950 <_printf_float+0x254>
 801093c:	6823      	ldr	r3, [r4, #0]
 801093e:	079b      	lsls	r3, r3, #30
 8010940:	f100 8103 	bmi.w	8010b4a <_printf_float+0x44e>
 8010944:	68e0      	ldr	r0, [r4, #12]
 8010946:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010948:	4298      	cmp	r0, r3
 801094a:	bfb8      	it	lt
 801094c:	4618      	movlt	r0, r3
 801094e:	e734      	b.n	80107ba <_printf_float+0xbe>
 8010950:	2301      	movs	r3, #1
 8010952:	464a      	mov	r2, r9
 8010954:	4631      	mov	r1, r6
 8010956:	4628      	mov	r0, r5
 8010958:	47b8      	blx	r7
 801095a:	3001      	adds	r0, #1
 801095c:	f43f af2b 	beq.w	80107b6 <_printf_float+0xba>
 8010960:	f108 0801 	add.w	r8, r8, #1
 8010964:	e7e6      	b.n	8010934 <_printf_float+0x238>
 8010966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010968:	2b00      	cmp	r3, #0
 801096a:	dc2b      	bgt.n	80109c4 <_printf_float+0x2c8>
 801096c:	2301      	movs	r3, #1
 801096e:	4a26      	ldr	r2, [pc, #152]	; (8010a08 <_printf_float+0x30c>)
 8010970:	4631      	mov	r1, r6
 8010972:	4628      	mov	r0, r5
 8010974:	47b8      	blx	r7
 8010976:	3001      	adds	r0, #1
 8010978:	f43f af1d 	beq.w	80107b6 <_printf_float+0xba>
 801097c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801097e:	b923      	cbnz	r3, 801098a <_printf_float+0x28e>
 8010980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010982:	b913      	cbnz	r3, 801098a <_printf_float+0x28e>
 8010984:	6823      	ldr	r3, [r4, #0]
 8010986:	07d9      	lsls	r1, r3, #31
 8010988:	d5d8      	bpl.n	801093c <_printf_float+0x240>
 801098a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801098e:	4631      	mov	r1, r6
 8010990:	4628      	mov	r0, r5
 8010992:	47b8      	blx	r7
 8010994:	3001      	adds	r0, #1
 8010996:	f43f af0e 	beq.w	80107b6 <_printf_float+0xba>
 801099a:	f04f 0900 	mov.w	r9, #0
 801099e:	f104 0a1a 	add.w	sl, r4, #26
 80109a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109a4:	425b      	negs	r3, r3
 80109a6:	454b      	cmp	r3, r9
 80109a8:	dc01      	bgt.n	80109ae <_printf_float+0x2b2>
 80109aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80109ac:	e794      	b.n	80108d8 <_printf_float+0x1dc>
 80109ae:	2301      	movs	r3, #1
 80109b0:	4652      	mov	r2, sl
 80109b2:	4631      	mov	r1, r6
 80109b4:	4628      	mov	r0, r5
 80109b6:	47b8      	blx	r7
 80109b8:	3001      	adds	r0, #1
 80109ba:	f43f aefc 	beq.w	80107b6 <_printf_float+0xba>
 80109be:	f109 0901 	add.w	r9, r9, #1
 80109c2:	e7ee      	b.n	80109a2 <_printf_float+0x2a6>
 80109c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80109c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80109c8:	429a      	cmp	r2, r3
 80109ca:	bfa8      	it	ge
 80109cc:	461a      	movge	r2, r3
 80109ce:	2a00      	cmp	r2, #0
 80109d0:	4691      	mov	r9, r2
 80109d2:	dd07      	ble.n	80109e4 <_printf_float+0x2e8>
 80109d4:	4613      	mov	r3, r2
 80109d6:	4631      	mov	r1, r6
 80109d8:	4642      	mov	r2, r8
 80109da:	4628      	mov	r0, r5
 80109dc:	47b8      	blx	r7
 80109de:	3001      	adds	r0, #1
 80109e0:	f43f aee9 	beq.w	80107b6 <_printf_float+0xba>
 80109e4:	f104 031a 	add.w	r3, r4, #26
 80109e8:	f04f 0b00 	mov.w	fp, #0
 80109ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80109f0:	9306      	str	r3, [sp, #24]
 80109f2:	e015      	b.n	8010a20 <_printf_float+0x324>
 80109f4:	7fefffff 	.word	0x7fefffff
 80109f8:	080157e0 	.word	0x080157e0
 80109fc:	080157dc 	.word	0x080157dc
 8010a00:	080157e8 	.word	0x080157e8
 8010a04:	080157e4 	.word	0x080157e4
 8010a08:	08015a9c 	.word	0x08015a9c
 8010a0c:	2301      	movs	r3, #1
 8010a0e:	9a06      	ldr	r2, [sp, #24]
 8010a10:	4631      	mov	r1, r6
 8010a12:	4628      	mov	r0, r5
 8010a14:	47b8      	blx	r7
 8010a16:	3001      	adds	r0, #1
 8010a18:	f43f aecd 	beq.w	80107b6 <_printf_float+0xba>
 8010a1c:	f10b 0b01 	add.w	fp, fp, #1
 8010a20:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8010a24:	ebaa 0309 	sub.w	r3, sl, r9
 8010a28:	455b      	cmp	r3, fp
 8010a2a:	dcef      	bgt.n	8010a0c <_printf_float+0x310>
 8010a2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010a30:	429a      	cmp	r2, r3
 8010a32:	44d0      	add	r8, sl
 8010a34:	db15      	blt.n	8010a62 <_printf_float+0x366>
 8010a36:	6823      	ldr	r3, [r4, #0]
 8010a38:	07da      	lsls	r2, r3, #31
 8010a3a:	d412      	bmi.n	8010a62 <_printf_float+0x366>
 8010a3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010a40:	eba3 020a 	sub.w	r2, r3, sl
 8010a44:	eba3 0a01 	sub.w	sl, r3, r1
 8010a48:	4592      	cmp	sl, r2
 8010a4a:	bfa8      	it	ge
 8010a4c:	4692      	movge	sl, r2
 8010a4e:	f1ba 0f00 	cmp.w	sl, #0
 8010a52:	dc0e      	bgt.n	8010a72 <_printf_float+0x376>
 8010a54:	f04f 0800 	mov.w	r8, #0
 8010a58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010a5c:	f104 091a 	add.w	r9, r4, #26
 8010a60:	e019      	b.n	8010a96 <_printf_float+0x39a>
 8010a62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010a66:	4631      	mov	r1, r6
 8010a68:	4628      	mov	r0, r5
 8010a6a:	47b8      	blx	r7
 8010a6c:	3001      	adds	r0, #1
 8010a6e:	d1e5      	bne.n	8010a3c <_printf_float+0x340>
 8010a70:	e6a1      	b.n	80107b6 <_printf_float+0xba>
 8010a72:	4653      	mov	r3, sl
 8010a74:	4642      	mov	r2, r8
 8010a76:	4631      	mov	r1, r6
 8010a78:	4628      	mov	r0, r5
 8010a7a:	47b8      	blx	r7
 8010a7c:	3001      	adds	r0, #1
 8010a7e:	d1e9      	bne.n	8010a54 <_printf_float+0x358>
 8010a80:	e699      	b.n	80107b6 <_printf_float+0xba>
 8010a82:	2301      	movs	r3, #1
 8010a84:	464a      	mov	r2, r9
 8010a86:	4631      	mov	r1, r6
 8010a88:	4628      	mov	r0, r5
 8010a8a:	47b8      	blx	r7
 8010a8c:	3001      	adds	r0, #1
 8010a8e:	f43f ae92 	beq.w	80107b6 <_printf_float+0xba>
 8010a92:	f108 0801 	add.w	r8, r8, #1
 8010a96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010a9a:	1a9b      	subs	r3, r3, r2
 8010a9c:	eba3 030a 	sub.w	r3, r3, sl
 8010aa0:	4543      	cmp	r3, r8
 8010aa2:	dcee      	bgt.n	8010a82 <_printf_float+0x386>
 8010aa4:	e74a      	b.n	801093c <_printf_float+0x240>
 8010aa6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010aa8:	2a01      	cmp	r2, #1
 8010aaa:	dc01      	bgt.n	8010ab0 <_printf_float+0x3b4>
 8010aac:	07db      	lsls	r3, r3, #31
 8010aae:	d53a      	bpl.n	8010b26 <_printf_float+0x42a>
 8010ab0:	2301      	movs	r3, #1
 8010ab2:	4642      	mov	r2, r8
 8010ab4:	4631      	mov	r1, r6
 8010ab6:	4628      	mov	r0, r5
 8010ab8:	47b8      	blx	r7
 8010aba:	3001      	adds	r0, #1
 8010abc:	f43f ae7b 	beq.w	80107b6 <_printf_float+0xba>
 8010ac0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010ac4:	4631      	mov	r1, r6
 8010ac6:	4628      	mov	r0, r5
 8010ac8:	47b8      	blx	r7
 8010aca:	3001      	adds	r0, #1
 8010acc:	f108 0801 	add.w	r8, r8, #1
 8010ad0:	f43f ae71 	beq.w	80107b6 <_printf_float+0xba>
 8010ad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ad6:	2200      	movs	r2, #0
 8010ad8:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8010adc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	f7f0 f819 	bl	8000b18 <__aeabi_dcmpeq>
 8010ae6:	b9c8      	cbnz	r0, 8010b1c <_printf_float+0x420>
 8010ae8:	4653      	mov	r3, sl
 8010aea:	4642      	mov	r2, r8
 8010aec:	4631      	mov	r1, r6
 8010aee:	4628      	mov	r0, r5
 8010af0:	47b8      	blx	r7
 8010af2:	3001      	adds	r0, #1
 8010af4:	d10e      	bne.n	8010b14 <_printf_float+0x418>
 8010af6:	e65e      	b.n	80107b6 <_printf_float+0xba>
 8010af8:	2301      	movs	r3, #1
 8010afa:	4652      	mov	r2, sl
 8010afc:	4631      	mov	r1, r6
 8010afe:	4628      	mov	r0, r5
 8010b00:	47b8      	blx	r7
 8010b02:	3001      	adds	r0, #1
 8010b04:	f43f ae57 	beq.w	80107b6 <_printf_float+0xba>
 8010b08:	f108 0801 	add.w	r8, r8, #1
 8010b0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b0e:	3b01      	subs	r3, #1
 8010b10:	4543      	cmp	r3, r8
 8010b12:	dcf1      	bgt.n	8010af8 <_printf_float+0x3fc>
 8010b14:	464b      	mov	r3, r9
 8010b16:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010b1a:	e6de      	b.n	80108da <_printf_float+0x1de>
 8010b1c:	f04f 0800 	mov.w	r8, #0
 8010b20:	f104 0a1a 	add.w	sl, r4, #26
 8010b24:	e7f2      	b.n	8010b0c <_printf_float+0x410>
 8010b26:	2301      	movs	r3, #1
 8010b28:	e7df      	b.n	8010aea <_printf_float+0x3ee>
 8010b2a:	2301      	movs	r3, #1
 8010b2c:	464a      	mov	r2, r9
 8010b2e:	4631      	mov	r1, r6
 8010b30:	4628      	mov	r0, r5
 8010b32:	47b8      	blx	r7
 8010b34:	3001      	adds	r0, #1
 8010b36:	f43f ae3e 	beq.w	80107b6 <_printf_float+0xba>
 8010b3a:	f108 0801 	add.w	r8, r8, #1
 8010b3e:	68e3      	ldr	r3, [r4, #12]
 8010b40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010b42:	1a9b      	subs	r3, r3, r2
 8010b44:	4543      	cmp	r3, r8
 8010b46:	dcf0      	bgt.n	8010b2a <_printf_float+0x42e>
 8010b48:	e6fc      	b.n	8010944 <_printf_float+0x248>
 8010b4a:	f04f 0800 	mov.w	r8, #0
 8010b4e:	f104 0919 	add.w	r9, r4, #25
 8010b52:	e7f4      	b.n	8010b3e <_printf_float+0x442>
 8010b54:	2900      	cmp	r1, #0
 8010b56:	f43f ae8b 	beq.w	8010870 <_printf_float+0x174>
 8010b5a:	2300      	movs	r3, #0
 8010b5c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8010b60:	ab09      	add	r3, sp, #36	; 0x24
 8010b62:	9300      	str	r3, [sp, #0]
 8010b64:	ec49 8b10 	vmov	d0, r8, r9
 8010b68:	6022      	str	r2, [r4, #0]
 8010b6a:	f8cd a004 	str.w	sl, [sp, #4]
 8010b6e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010b72:	4628      	mov	r0, r5
 8010b74:	f7ff fd2e 	bl	80105d4 <__cvt>
 8010b78:	4680      	mov	r8, r0
 8010b7a:	e648      	b.n	801080e <_printf_float+0x112>

08010b7c <_printf_common>:
 8010b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b80:	4691      	mov	r9, r2
 8010b82:	461f      	mov	r7, r3
 8010b84:	688a      	ldr	r2, [r1, #8]
 8010b86:	690b      	ldr	r3, [r1, #16]
 8010b88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010b8c:	4293      	cmp	r3, r2
 8010b8e:	bfb8      	it	lt
 8010b90:	4613      	movlt	r3, r2
 8010b92:	f8c9 3000 	str.w	r3, [r9]
 8010b96:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010b9a:	4606      	mov	r6, r0
 8010b9c:	460c      	mov	r4, r1
 8010b9e:	b112      	cbz	r2, 8010ba6 <_printf_common+0x2a>
 8010ba0:	3301      	adds	r3, #1
 8010ba2:	f8c9 3000 	str.w	r3, [r9]
 8010ba6:	6823      	ldr	r3, [r4, #0]
 8010ba8:	0699      	lsls	r1, r3, #26
 8010baa:	bf42      	ittt	mi
 8010bac:	f8d9 3000 	ldrmi.w	r3, [r9]
 8010bb0:	3302      	addmi	r3, #2
 8010bb2:	f8c9 3000 	strmi.w	r3, [r9]
 8010bb6:	6825      	ldr	r5, [r4, #0]
 8010bb8:	f015 0506 	ands.w	r5, r5, #6
 8010bbc:	d107      	bne.n	8010bce <_printf_common+0x52>
 8010bbe:	f104 0a19 	add.w	sl, r4, #25
 8010bc2:	68e3      	ldr	r3, [r4, #12]
 8010bc4:	f8d9 2000 	ldr.w	r2, [r9]
 8010bc8:	1a9b      	subs	r3, r3, r2
 8010bca:	42ab      	cmp	r3, r5
 8010bcc:	dc28      	bgt.n	8010c20 <_printf_common+0xa4>
 8010bce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010bd2:	6822      	ldr	r2, [r4, #0]
 8010bd4:	3300      	adds	r3, #0
 8010bd6:	bf18      	it	ne
 8010bd8:	2301      	movne	r3, #1
 8010bda:	0692      	lsls	r2, r2, #26
 8010bdc:	d42d      	bmi.n	8010c3a <_printf_common+0xbe>
 8010bde:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010be2:	4639      	mov	r1, r7
 8010be4:	4630      	mov	r0, r6
 8010be6:	47c0      	blx	r8
 8010be8:	3001      	adds	r0, #1
 8010bea:	d020      	beq.n	8010c2e <_printf_common+0xb2>
 8010bec:	6823      	ldr	r3, [r4, #0]
 8010bee:	68e5      	ldr	r5, [r4, #12]
 8010bf0:	f8d9 2000 	ldr.w	r2, [r9]
 8010bf4:	f003 0306 	and.w	r3, r3, #6
 8010bf8:	2b04      	cmp	r3, #4
 8010bfa:	bf08      	it	eq
 8010bfc:	1aad      	subeq	r5, r5, r2
 8010bfe:	68a3      	ldr	r3, [r4, #8]
 8010c00:	6922      	ldr	r2, [r4, #16]
 8010c02:	bf0c      	ite	eq
 8010c04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010c08:	2500      	movne	r5, #0
 8010c0a:	4293      	cmp	r3, r2
 8010c0c:	bfc4      	itt	gt
 8010c0e:	1a9b      	subgt	r3, r3, r2
 8010c10:	18ed      	addgt	r5, r5, r3
 8010c12:	f04f 0900 	mov.w	r9, #0
 8010c16:	341a      	adds	r4, #26
 8010c18:	454d      	cmp	r5, r9
 8010c1a:	d11a      	bne.n	8010c52 <_printf_common+0xd6>
 8010c1c:	2000      	movs	r0, #0
 8010c1e:	e008      	b.n	8010c32 <_printf_common+0xb6>
 8010c20:	2301      	movs	r3, #1
 8010c22:	4652      	mov	r2, sl
 8010c24:	4639      	mov	r1, r7
 8010c26:	4630      	mov	r0, r6
 8010c28:	47c0      	blx	r8
 8010c2a:	3001      	adds	r0, #1
 8010c2c:	d103      	bne.n	8010c36 <_printf_common+0xba>
 8010c2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c36:	3501      	adds	r5, #1
 8010c38:	e7c3      	b.n	8010bc2 <_printf_common+0x46>
 8010c3a:	18e1      	adds	r1, r4, r3
 8010c3c:	1c5a      	adds	r2, r3, #1
 8010c3e:	2030      	movs	r0, #48	; 0x30
 8010c40:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010c44:	4422      	add	r2, r4
 8010c46:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010c4a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010c4e:	3302      	adds	r3, #2
 8010c50:	e7c5      	b.n	8010bde <_printf_common+0x62>
 8010c52:	2301      	movs	r3, #1
 8010c54:	4622      	mov	r2, r4
 8010c56:	4639      	mov	r1, r7
 8010c58:	4630      	mov	r0, r6
 8010c5a:	47c0      	blx	r8
 8010c5c:	3001      	adds	r0, #1
 8010c5e:	d0e6      	beq.n	8010c2e <_printf_common+0xb2>
 8010c60:	f109 0901 	add.w	r9, r9, #1
 8010c64:	e7d8      	b.n	8010c18 <_printf_common+0x9c>
	...

08010c68 <_printf_i>:
 8010c68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010c6c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8010c70:	460c      	mov	r4, r1
 8010c72:	7e09      	ldrb	r1, [r1, #24]
 8010c74:	b085      	sub	sp, #20
 8010c76:	296e      	cmp	r1, #110	; 0x6e
 8010c78:	4617      	mov	r7, r2
 8010c7a:	4606      	mov	r6, r0
 8010c7c:	4698      	mov	r8, r3
 8010c7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010c80:	f000 80b3 	beq.w	8010dea <_printf_i+0x182>
 8010c84:	d822      	bhi.n	8010ccc <_printf_i+0x64>
 8010c86:	2963      	cmp	r1, #99	; 0x63
 8010c88:	d036      	beq.n	8010cf8 <_printf_i+0x90>
 8010c8a:	d80a      	bhi.n	8010ca2 <_printf_i+0x3a>
 8010c8c:	2900      	cmp	r1, #0
 8010c8e:	f000 80b9 	beq.w	8010e04 <_printf_i+0x19c>
 8010c92:	2958      	cmp	r1, #88	; 0x58
 8010c94:	f000 8083 	beq.w	8010d9e <_printf_i+0x136>
 8010c98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010c9c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8010ca0:	e032      	b.n	8010d08 <_printf_i+0xa0>
 8010ca2:	2964      	cmp	r1, #100	; 0x64
 8010ca4:	d001      	beq.n	8010caa <_printf_i+0x42>
 8010ca6:	2969      	cmp	r1, #105	; 0x69
 8010ca8:	d1f6      	bne.n	8010c98 <_printf_i+0x30>
 8010caa:	6820      	ldr	r0, [r4, #0]
 8010cac:	6813      	ldr	r3, [r2, #0]
 8010cae:	0605      	lsls	r5, r0, #24
 8010cb0:	f103 0104 	add.w	r1, r3, #4
 8010cb4:	d52a      	bpl.n	8010d0c <_printf_i+0xa4>
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	6011      	str	r1, [r2, #0]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	da03      	bge.n	8010cc6 <_printf_i+0x5e>
 8010cbe:	222d      	movs	r2, #45	; 0x2d
 8010cc0:	425b      	negs	r3, r3
 8010cc2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010cc6:	486f      	ldr	r0, [pc, #444]	; (8010e84 <_printf_i+0x21c>)
 8010cc8:	220a      	movs	r2, #10
 8010cca:	e039      	b.n	8010d40 <_printf_i+0xd8>
 8010ccc:	2973      	cmp	r1, #115	; 0x73
 8010cce:	f000 809d 	beq.w	8010e0c <_printf_i+0x1a4>
 8010cd2:	d808      	bhi.n	8010ce6 <_printf_i+0x7e>
 8010cd4:	296f      	cmp	r1, #111	; 0x6f
 8010cd6:	d020      	beq.n	8010d1a <_printf_i+0xb2>
 8010cd8:	2970      	cmp	r1, #112	; 0x70
 8010cda:	d1dd      	bne.n	8010c98 <_printf_i+0x30>
 8010cdc:	6823      	ldr	r3, [r4, #0]
 8010cde:	f043 0320 	orr.w	r3, r3, #32
 8010ce2:	6023      	str	r3, [r4, #0]
 8010ce4:	e003      	b.n	8010cee <_printf_i+0x86>
 8010ce6:	2975      	cmp	r1, #117	; 0x75
 8010ce8:	d017      	beq.n	8010d1a <_printf_i+0xb2>
 8010cea:	2978      	cmp	r1, #120	; 0x78
 8010cec:	d1d4      	bne.n	8010c98 <_printf_i+0x30>
 8010cee:	2378      	movs	r3, #120	; 0x78
 8010cf0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010cf4:	4864      	ldr	r0, [pc, #400]	; (8010e88 <_printf_i+0x220>)
 8010cf6:	e055      	b.n	8010da4 <_printf_i+0x13c>
 8010cf8:	6813      	ldr	r3, [r2, #0]
 8010cfa:	1d19      	adds	r1, r3, #4
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	6011      	str	r1, [r2, #0]
 8010d00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010d04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010d08:	2301      	movs	r3, #1
 8010d0a:	e08c      	b.n	8010e26 <_printf_i+0x1be>
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	6011      	str	r1, [r2, #0]
 8010d10:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010d14:	bf18      	it	ne
 8010d16:	b21b      	sxthne	r3, r3
 8010d18:	e7cf      	b.n	8010cba <_printf_i+0x52>
 8010d1a:	6813      	ldr	r3, [r2, #0]
 8010d1c:	6825      	ldr	r5, [r4, #0]
 8010d1e:	1d18      	adds	r0, r3, #4
 8010d20:	6010      	str	r0, [r2, #0]
 8010d22:	0628      	lsls	r0, r5, #24
 8010d24:	d501      	bpl.n	8010d2a <_printf_i+0xc2>
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	e002      	b.n	8010d30 <_printf_i+0xc8>
 8010d2a:	0668      	lsls	r0, r5, #25
 8010d2c:	d5fb      	bpl.n	8010d26 <_printf_i+0xbe>
 8010d2e:	881b      	ldrh	r3, [r3, #0]
 8010d30:	4854      	ldr	r0, [pc, #336]	; (8010e84 <_printf_i+0x21c>)
 8010d32:	296f      	cmp	r1, #111	; 0x6f
 8010d34:	bf14      	ite	ne
 8010d36:	220a      	movne	r2, #10
 8010d38:	2208      	moveq	r2, #8
 8010d3a:	2100      	movs	r1, #0
 8010d3c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010d40:	6865      	ldr	r5, [r4, #4]
 8010d42:	60a5      	str	r5, [r4, #8]
 8010d44:	2d00      	cmp	r5, #0
 8010d46:	f2c0 8095 	blt.w	8010e74 <_printf_i+0x20c>
 8010d4a:	6821      	ldr	r1, [r4, #0]
 8010d4c:	f021 0104 	bic.w	r1, r1, #4
 8010d50:	6021      	str	r1, [r4, #0]
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d13d      	bne.n	8010dd2 <_printf_i+0x16a>
 8010d56:	2d00      	cmp	r5, #0
 8010d58:	f040 808e 	bne.w	8010e78 <_printf_i+0x210>
 8010d5c:	4665      	mov	r5, ip
 8010d5e:	2a08      	cmp	r2, #8
 8010d60:	d10b      	bne.n	8010d7a <_printf_i+0x112>
 8010d62:	6823      	ldr	r3, [r4, #0]
 8010d64:	07db      	lsls	r3, r3, #31
 8010d66:	d508      	bpl.n	8010d7a <_printf_i+0x112>
 8010d68:	6923      	ldr	r3, [r4, #16]
 8010d6a:	6862      	ldr	r2, [r4, #4]
 8010d6c:	429a      	cmp	r2, r3
 8010d6e:	bfde      	ittt	le
 8010d70:	2330      	movle	r3, #48	; 0x30
 8010d72:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010d76:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8010d7a:	ebac 0305 	sub.w	r3, ip, r5
 8010d7e:	6123      	str	r3, [r4, #16]
 8010d80:	f8cd 8000 	str.w	r8, [sp]
 8010d84:	463b      	mov	r3, r7
 8010d86:	aa03      	add	r2, sp, #12
 8010d88:	4621      	mov	r1, r4
 8010d8a:	4630      	mov	r0, r6
 8010d8c:	f7ff fef6 	bl	8010b7c <_printf_common>
 8010d90:	3001      	adds	r0, #1
 8010d92:	d14d      	bne.n	8010e30 <_printf_i+0x1c8>
 8010d94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010d98:	b005      	add	sp, #20
 8010d9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d9e:	4839      	ldr	r0, [pc, #228]	; (8010e84 <_printf_i+0x21c>)
 8010da0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010da4:	6813      	ldr	r3, [r2, #0]
 8010da6:	6821      	ldr	r1, [r4, #0]
 8010da8:	1d1d      	adds	r5, r3, #4
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	6015      	str	r5, [r2, #0]
 8010dae:	060a      	lsls	r2, r1, #24
 8010db0:	d50b      	bpl.n	8010dca <_printf_i+0x162>
 8010db2:	07ca      	lsls	r2, r1, #31
 8010db4:	bf44      	itt	mi
 8010db6:	f041 0120 	orrmi.w	r1, r1, #32
 8010dba:	6021      	strmi	r1, [r4, #0]
 8010dbc:	b91b      	cbnz	r3, 8010dc6 <_printf_i+0x15e>
 8010dbe:	6822      	ldr	r2, [r4, #0]
 8010dc0:	f022 0220 	bic.w	r2, r2, #32
 8010dc4:	6022      	str	r2, [r4, #0]
 8010dc6:	2210      	movs	r2, #16
 8010dc8:	e7b7      	b.n	8010d3a <_printf_i+0xd2>
 8010dca:	064d      	lsls	r5, r1, #25
 8010dcc:	bf48      	it	mi
 8010dce:	b29b      	uxthmi	r3, r3
 8010dd0:	e7ef      	b.n	8010db2 <_printf_i+0x14a>
 8010dd2:	4665      	mov	r5, ip
 8010dd4:	fbb3 f1f2 	udiv	r1, r3, r2
 8010dd8:	fb02 3311 	mls	r3, r2, r1, r3
 8010ddc:	5cc3      	ldrb	r3, [r0, r3]
 8010dde:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010de2:	460b      	mov	r3, r1
 8010de4:	2900      	cmp	r1, #0
 8010de6:	d1f5      	bne.n	8010dd4 <_printf_i+0x16c>
 8010de8:	e7b9      	b.n	8010d5e <_printf_i+0xf6>
 8010dea:	6813      	ldr	r3, [r2, #0]
 8010dec:	6825      	ldr	r5, [r4, #0]
 8010dee:	6961      	ldr	r1, [r4, #20]
 8010df0:	1d18      	adds	r0, r3, #4
 8010df2:	6010      	str	r0, [r2, #0]
 8010df4:	0628      	lsls	r0, r5, #24
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	d501      	bpl.n	8010dfe <_printf_i+0x196>
 8010dfa:	6019      	str	r1, [r3, #0]
 8010dfc:	e002      	b.n	8010e04 <_printf_i+0x19c>
 8010dfe:	066a      	lsls	r2, r5, #25
 8010e00:	d5fb      	bpl.n	8010dfa <_printf_i+0x192>
 8010e02:	8019      	strh	r1, [r3, #0]
 8010e04:	2300      	movs	r3, #0
 8010e06:	6123      	str	r3, [r4, #16]
 8010e08:	4665      	mov	r5, ip
 8010e0a:	e7b9      	b.n	8010d80 <_printf_i+0x118>
 8010e0c:	6813      	ldr	r3, [r2, #0]
 8010e0e:	1d19      	adds	r1, r3, #4
 8010e10:	6011      	str	r1, [r2, #0]
 8010e12:	681d      	ldr	r5, [r3, #0]
 8010e14:	6862      	ldr	r2, [r4, #4]
 8010e16:	2100      	movs	r1, #0
 8010e18:	4628      	mov	r0, r5
 8010e1a:	f7ef fa09 	bl	8000230 <memchr>
 8010e1e:	b108      	cbz	r0, 8010e24 <_printf_i+0x1bc>
 8010e20:	1b40      	subs	r0, r0, r5
 8010e22:	6060      	str	r0, [r4, #4]
 8010e24:	6863      	ldr	r3, [r4, #4]
 8010e26:	6123      	str	r3, [r4, #16]
 8010e28:	2300      	movs	r3, #0
 8010e2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010e2e:	e7a7      	b.n	8010d80 <_printf_i+0x118>
 8010e30:	6923      	ldr	r3, [r4, #16]
 8010e32:	462a      	mov	r2, r5
 8010e34:	4639      	mov	r1, r7
 8010e36:	4630      	mov	r0, r6
 8010e38:	47c0      	blx	r8
 8010e3a:	3001      	adds	r0, #1
 8010e3c:	d0aa      	beq.n	8010d94 <_printf_i+0x12c>
 8010e3e:	6823      	ldr	r3, [r4, #0]
 8010e40:	079b      	lsls	r3, r3, #30
 8010e42:	d413      	bmi.n	8010e6c <_printf_i+0x204>
 8010e44:	68e0      	ldr	r0, [r4, #12]
 8010e46:	9b03      	ldr	r3, [sp, #12]
 8010e48:	4298      	cmp	r0, r3
 8010e4a:	bfb8      	it	lt
 8010e4c:	4618      	movlt	r0, r3
 8010e4e:	e7a3      	b.n	8010d98 <_printf_i+0x130>
 8010e50:	2301      	movs	r3, #1
 8010e52:	464a      	mov	r2, r9
 8010e54:	4639      	mov	r1, r7
 8010e56:	4630      	mov	r0, r6
 8010e58:	47c0      	blx	r8
 8010e5a:	3001      	adds	r0, #1
 8010e5c:	d09a      	beq.n	8010d94 <_printf_i+0x12c>
 8010e5e:	3501      	adds	r5, #1
 8010e60:	68e3      	ldr	r3, [r4, #12]
 8010e62:	9a03      	ldr	r2, [sp, #12]
 8010e64:	1a9b      	subs	r3, r3, r2
 8010e66:	42ab      	cmp	r3, r5
 8010e68:	dcf2      	bgt.n	8010e50 <_printf_i+0x1e8>
 8010e6a:	e7eb      	b.n	8010e44 <_printf_i+0x1dc>
 8010e6c:	2500      	movs	r5, #0
 8010e6e:	f104 0919 	add.w	r9, r4, #25
 8010e72:	e7f5      	b.n	8010e60 <_printf_i+0x1f8>
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d1ac      	bne.n	8010dd2 <_printf_i+0x16a>
 8010e78:	7803      	ldrb	r3, [r0, #0]
 8010e7a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010e7e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010e82:	e76c      	b.n	8010d5e <_printf_i+0xf6>
 8010e84:	080157ec 	.word	0x080157ec
 8010e88:	080157fd 	.word	0x080157fd

08010e8c <iprintf>:
 8010e8c:	b40f      	push	{r0, r1, r2, r3}
 8010e8e:	4b0a      	ldr	r3, [pc, #40]	; (8010eb8 <iprintf+0x2c>)
 8010e90:	b513      	push	{r0, r1, r4, lr}
 8010e92:	681c      	ldr	r4, [r3, #0]
 8010e94:	b124      	cbz	r4, 8010ea0 <iprintf+0x14>
 8010e96:	69a3      	ldr	r3, [r4, #24]
 8010e98:	b913      	cbnz	r3, 8010ea0 <iprintf+0x14>
 8010e9a:	4620      	mov	r0, r4
 8010e9c:	f001 f8ac 	bl	8011ff8 <__sinit>
 8010ea0:	ab05      	add	r3, sp, #20
 8010ea2:	9a04      	ldr	r2, [sp, #16]
 8010ea4:	68a1      	ldr	r1, [r4, #8]
 8010ea6:	9301      	str	r3, [sp, #4]
 8010ea8:	4620      	mov	r0, r4
 8010eaa:	f001 fec1 	bl	8012c30 <_vfiprintf_r>
 8010eae:	b002      	add	sp, #8
 8010eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010eb4:	b004      	add	sp, #16
 8010eb6:	4770      	bx	lr
 8010eb8:	20001c38 	.word	0x20001c38

08010ebc <_puts_r>:
 8010ebc:	b570      	push	{r4, r5, r6, lr}
 8010ebe:	460e      	mov	r6, r1
 8010ec0:	4605      	mov	r5, r0
 8010ec2:	b118      	cbz	r0, 8010ecc <_puts_r+0x10>
 8010ec4:	6983      	ldr	r3, [r0, #24]
 8010ec6:	b90b      	cbnz	r3, 8010ecc <_puts_r+0x10>
 8010ec8:	f001 f896 	bl	8011ff8 <__sinit>
 8010ecc:	69ab      	ldr	r3, [r5, #24]
 8010ece:	68ac      	ldr	r4, [r5, #8]
 8010ed0:	b913      	cbnz	r3, 8010ed8 <_puts_r+0x1c>
 8010ed2:	4628      	mov	r0, r5
 8010ed4:	f001 f890 	bl	8011ff8 <__sinit>
 8010ed8:	4b23      	ldr	r3, [pc, #140]	; (8010f68 <_puts_r+0xac>)
 8010eda:	429c      	cmp	r4, r3
 8010edc:	d117      	bne.n	8010f0e <_puts_r+0x52>
 8010ede:	686c      	ldr	r4, [r5, #4]
 8010ee0:	89a3      	ldrh	r3, [r4, #12]
 8010ee2:	071b      	lsls	r3, r3, #28
 8010ee4:	d51d      	bpl.n	8010f22 <_puts_r+0x66>
 8010ee6:	6923      	ldr	r3, [r4, #16]
 8010ee8:	b1db      	cbz	r3, 8010f22 <_puts_r+0x66>
 8010eea:	3e01      	subs	r6, #1
 8010eec:	68a3      	ldr	r3, [r4, #8]
 8010eee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010ef2:	3b01      	subs	r3, #1
 8010ef4:	60a3      	str	r3, [r4, #8]
 8010ef6:	b9e9      	cbnz	r1, 8010f34 <_puts_r+0x78>
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	da2e      	bge.n	8010f5a <_puts_r+0x9e>
 8010efc:	4622      	mov	r2, r4
 8010efe:	210a      	movs	r1, #10
 8010f00:	4628      	mov	r0, r5
 8010f02:	f000 f883 	bl	801100c <__swbuf_r>
 8010f06:	3001      	adds	r0, #1
 8010f08:	d011      	beq.n	8010f2e <_puts_r+0x72>
 8010f0a:	200a      	movs	r0, #10
 8010f0c:	e011      	b.n	8010f32 <_puts_r+0x76>
 8010f0e:	4b17      	ldr	r3, [pc, #92]	; (8010f6c <_puts_r+0xb0>)
 8010f10:	429c      	cmp	r4, r3
 8010f12:	d101      	bne.n	8010f18 <_puts_r+0x5c>
 8010f14:	68ac      	ldr	r4, [r5, #8]
 8010f16:	e7e3      	b.n	8010ee0 <_puts_r+0x24>
 8010f18:	4b15      	ldr	r3, [pc, #84]	; (8010f70 <_puts_r+0xb4>)
 8010f1a:	429c      	cmp	r4, r3
 8010f1c:	bf08      	it	eq
 8010f1e:	68ec      	ldreq	r4, [r5, #12]
 8010f20:	e7de      	b.n	8010ee0 <_puts_r+0x24>
 8010f22:	4621      	mov	r1, r4
 8010f24:	4628      	mov	r0, r5
 8010f26:	f000 f8c3 	bl	80110b0 <__swsetup_r>
 8010f2a:	2800      	cmp	r0, #0
 8010f2c:	d0dd      	beq.n	8010eea <_puts_r+0x2e>
 8010f2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010f32:	bd70      	pop	{r4, r5, r6, pc}
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	da04      	bge.n	8010f42 <_puts_r+0x86>
 8010f38:	69a2      	ldr	r2, [r4, #24]
 8010f3a:	429a      	cmp	r2, r3
 8010f3c:	dc06      	bgt.n	8010f4c <_puts_r+0x90>
 8010f3e:	290a      	cmp	r1, #10
 8010f40:	d004      	beq.n	8010f4c <_puts_r+0x90>
 8010f42:	6823      	ldr	r3, [r4, #0]
 8010f44:	1c5a      	adds	r2, r3, #1
 8010f46:	6022      	str	r2, [r4, #0]
 8010f48:	7019      	strb	r1, [r3, #0]
 8010f4a:	e7cf      	b.n	8010eec <_puts_r+0x30>
 8010f4c:	4622      	mov	r2, r4
 8010f4e:	4628      	mov	r0, r5
 8010f50:	f000 f85c 	bl	801100c <__swbuf_r>
 8010f54:	3001      	adds	r0, #1
 8010f56:	d1c9      	bne.n	8010eec <_puts_r+0x30>
 8010f58:	e7e9      	b.n	8010f2e <_puts_r+0x72>
 8010f5a:	6823      	ldr	r3, [r4, #0]
 8010f5c:	200a      	movs	r0, #10
 8010f5e:	1c5a      	adds	r2, r3, #1
 8010f60:	6022      	str	r2, [r4, #0]
 8010f62:	7018      	strb	r0, [r3, #0]
 8010f64:	e7e5      	b.n	8010f32 <_puts_r+0x76>
 8010f66:	bf00      	nop
 8010f68:	0801583c 	.word	0x0801583c
 8010f6c:	0801585c 	.word	0x0801585c
 8010f70:	0801581c 	.word	0x0801581c

08010f74 <puts>:
 8010f74:	4b02      	ldr	r3, [pc, #8]	; (8010f80 <puts+0xc>)
 8010f76:	4601      	mov	r1, r0
 8010f78:	6818      	ldr	r0, [r3, #0]
 8010f7a:	f7ff bf9f 	b.w	8010ebc <_puts_r>
 8010f7e:	bf00      	nop
 8010f80:	20001c38 	.word	0x20001c38

08010f84 <sniprintf>:
 8010f84:	b40c      	push	{r2, r3}
 8010f86:	b530      	push	{r4, r5, lr}
 8010f88:	4b17      	ldr	r3, [pc, #92]	; (8010fe8 <sniprintf+0x64>)
 8010f8a:	1e0c      	subs	r4, r1, #0
 8010f8c:	b09d      	sub	sp, #116	; 0x74
 8010f8e:	681d      	ldr	r5, [r3, #0]
 8010f90:	da08      	bge.n	8010fa4 <sniprintf+0x20>
 8010f92:	238b      	movs	r3, #139	; 0x8b
 8010f94:	602b      	str	r3, [r5, #0]
 8010f96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010f9a:	b01d      	add	sp, #116	; 0x74
 8010f9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010fa0:	b002      	add	sp, #8
 8010fa2:	4770      	bx	lr
 8010fa4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010fa8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010fac:	bf14      	ite	ne
 8010fae:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8010fb2:	4623      	moveq	r3, r4
 8010fb4:	9304      	str	r3, [sp, #16]
 8010fb6:	9307      	str	r3, [sp, #28]
 8010fb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010fbc:	9002      	str	r0, [sp, #8]
 8010fbe:	9006      	str	r0, [sp, #24]
 8010fc0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010fc4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010fc6:	ab21      	add	r3, sp, #132	; 0x84
 8010fc8:	a902      	add	r1, sp, #8
 8010fca:	4628      	mov	r0, r5
 8010fcc:	9301      	str	r3, [sp, #4]
 8010fce:	f001 fd0d 	bl	80129ec <_svfiprintf_r>
 8010fd2:	1c43      	adds	r3, r0, #1
 8010fd4:	bfbc      	itt	lt
 8010fd6:	238b      	movlt	r3, #139	; 0x8b
 8010fd8:	602b      	strlt	r3, [r5, #0]
 8010fda:	2c00      	cmp	r4, #0
 8010fdc:	d0dd      	beq.n	8010f9a <sniprintf+0x16>
 8010fde:	9b02      	ldr	r3, [sp, #8]
 8010fe0:	2200      	movs	r2, #0
 8010fe2:	701a      	strb	r2, [r3, #0]
 8010fe4:	e7d9      	b.n	8010f9a <sniprintf+0x16>
 8010fe6:	bf00      	nop
 8010fe8:	20001c38 	.word	0x20001c38

08010fec <strcat>:
 8010fec:	b510      	push	{r4, lr}
 8010fee:	4603      	mov	r3, r0
 8010ff0:	781a      	ldrb	r2, [r3, #0]
 8010ff2:	1c5c      	adds	r4, r3, #1
 8010ff4:	b93a      	cbnz	r2, 8011006 <strcat+0x1a>
 8010ff6:	3b01      	subs	r3, #1
 8010ff8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010ffc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011000:	2a00      	cmp	r2, #0
 8011002:	d1f9      	bne.n	8010ff8 <strcat+0xc>
 8011004:	bd10      	pop	{r4, pc}
 8011006:	4623      	mov	r3, r4
 8011008:	e7f2      	b.n	8010ff0 <strcat+0x4>
	...

0801100c <__swbuf_r>:
 801100c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801100e:	460e      	mov	r6, r1
 8011010:	4614      	mov	r4, r2
 8011012:	4605      	mov	r5, r0
 8011014:	b118      	cbz	r0, 801101e <__swbuf_r+0x12>
 8011016:	6983      	ldr	r3, [r0, #24]
 8011018:	b90b      	cbnz	r3, 801101e <__swbuf_r+0x12>
 801101a:	f000 ffed 	bl	8011ff8 <__sinit>
 801101e:	4b21      	ldr	r3, [pc, #132]	; (80110a4 <__swbuf_r+0x98>)
 8011020:	429c      	cmp	r4, r3
 8011022:	d12a      	bne.n	801107a <__swbuf_r+0x6e>
 8011024:	686c      	ldr	r4, [r5, #4]
 8011026:	69a3      	ldr	r3, [r4, #24]
 8011028:	60a3      	str	r3, [r4, #8]
 801102a:	89a3      	ldrh	r3, [r4, #12]
 801102c:	071a      	lsls	r2, r3, #28
 801102e:	d52e      	bpl.n	801108e <__swbuf_r+0x82>
 8011030:	6923      	ldr	r3, [r4, #16]
 8011032:	b363      	cbz	r3, 801108e <__swbuf_r+0x82>
 8011034:	6923      	ldr	r3, [r4, #16]
 8011036:	6820      	ldr	r0, [r4, #0]
 8011038:	1ac0      	subs	r0, r0, r3
 801103a:	6963      	ldr	r3, [r4, #20]
 801103c:	b2f6      	uxtb	r6, r6
 801103e:	4283      	cmp	r3, r0
 8011040:	4637      	mov	r7, r6
 8011042:	dc04      	bgt.n	801104e <__swbuf_r+0x42>
 8011044:	4621      	mov	r1, r4
 8011046:	4628      	mov	r0, r5
 8011048:	f000 ff6c 	bl	8011f24 <_fflush_r>
 801104c:	bb28      	cbnz	r0, 801109a <__swbuf_r+0x8e>
 801104e:	68a3      	ldr	r3, [r4, #8]
 8011050:	3b01      	subs	r3, #1
 8011052:	60a3      	str	r3, [r4, #8]
 8011054:	6823      	ldr	r3, [r4, #0]
 8011056:	1c5a      	adds	r2, r3, #1
 8011058:	6022      	str	r2, [r4, #0]
 801105a:	701e      	strb	r6, [r3, #0]
 801105c:	6963      	ldr	r3, [r4, #20]
 801105e:	3001      	adds	r0, #1
 8011060:	4283      	cmp	r3, r0
 8011062:	d004      	beq.n	801106e <__swbuf_r+0x62>
 8011064:	89a3      	ldrh	r3, [r4, #12]
 8011066:	07db      	lsls	r3, r3, #31
 8011068:	d519      	bpl.n	801109e <__swbuf_r+0x92>
 801106a:	2e0a      	cmp	r6, #10
 801106c:	d117      	bne.n	801109e <__swbuf_r+0x92>
 801106e:	4621      	mov	r1, r4
 8011070:	4628      	mov	r0, r5
 8011072:	f000 ff57 	bl	8011f24 <_fflush_r>
 8011076:	b190      	cbz	r0, 801109e <__swbuf_r+0x92>
 8011078:	e00f      	b.n	801109a <__swbuf_r+0x8e>
 801107a:	4b0b      	ldr	r3, [pc, #44]	; (80110a8 <__swbuf_r+0x9c>)
 801107c:	429c      	cmp	r4, r3
 801107e:	d101      	bne.n	8011084 <__swbuf_r+0x78>
 8011080:	68ac      	ldr	r4, [r5, #8]
 8011082:	e7d0      	b.n	8011026 <__swbuf_r+0x1a>
 8011084:	4b09      	ldr	r3, [pc, #36]	; (80110ac <__swbuf_r+0xa0>)
 8011086:	429c      	cmp	r4, r3
 8011088:	bf08      	it	eq
 801108a:	68ec      	ldreq	r4, [r5, #12]
 801108c:	e7cb      	b.n	8011026 <__swbuf_r+0x1a>
 801108e:	4621      	mov	r1, r4
 8011090:	4628      	mov	r0, r5
 8011092:	f000 f80d 	bl	80110b0 <__swsetup_r>
 8011096:	2800      	cmp	r0, #0
 8011098:	d0cc      	beq.n	8011034 <__swbuf_r+0x28>
 801109a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801109e:	4638      	mov	r0, r7
 80110a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110a2:	bf00      	nop
 80110a4:	0801583c 	.word	0x0801583c
 80110a8:	0801585c 	.word	0x0801585c
 80110ac:	0801581c 	.word	0x0801581c

080110b0 <__swsetup_r>:
 80110b0:	4b32      	ldr	r3, [pc, #200]	; (801117c <__swsetup_r+0xcc>)
 80110b2:	b570      	push	{r4, r5, r6, lr}
 80110b4:	681d      	ldr	r5, [r3, #0]
 80110b6:	4606      	mov	r6, r0
 80110b8:	460c      	mov	r4, r1
 80110ba:	b125      	cbz	r5, 80110c6 <__swsetup_r+0x16>
 80110bc:	69ab      	ldr	r3, [r5, #24]
 80110be:	b913      	cbnz	r3, 80110c6 <__swsetup_r+0x16>
 80110c0:	4628      	mov	r0, r5
 80110c2:	f000 ff99 	bl	8011ff8 <__sinit>
 80110c6:	4b2e      	ldr	r3, [pc, #184]	; (8011180 <__swsetup_r+0xd0>)
 80110c8:	429c      	cmp	r4, r3
 80110ca:	d10f      	bne.n	80110ec <__swsetup_r+0x3c>
 80110cc:	686c      	ldr	r4, [r5, #4]
 80110ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80110d2:	b29a      	uxth	r2, r3
 80110d4:	0715      	lsls	r5, r2, #28
 80110d6:	d42c      	bmi.n	8011132 <__swsetup_r+0x82>
 80110d8:	06d0      	lsls	r0, r2, #27
 80110da:	d411      	bmi.n	8011100 <__swsetup_r+0x50>
 80110dc:	2209      	movs	r2, #9
 80110de:	6032      	str	r2, [r6, #0]
 80110e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80110e4:	81a3      	strh	r3, [r4, #12]
 80110e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80110ea:	e03e      	b.n	801116a <__swsetup_r+0xba>
 80110ec:	4b25      	ldr	r3, [pc, #148]	; (8011184 <__swsetup_r+0xd4>)
 80110ee:	429c      	cmp	r4, r3
 80110f0:	d101      	bne.n	80110f6 <__swsetup_r+0x46>
 80110f2:	68ac      	ldr	r4, [r5, #8]
 80110f4:	e7eb      	b.n	80110ce <__swsetup_r+0x1e>
 80110f6:	4b24      	ldr	r3, [pc, #144]	; (8011188 <__swsetup_r+0xd8>)
 80110f8:	429c      	cmp	r4, r3
 80110fa:	bf08      	it	eq
 80110fc:	68ec      	ldreq	r4, [r5, #12]
 80110fe:	e7e6      	b.n	80110ce <__swsetup_r+0x1e>
 8011100:	0751      	lsls	r1, r2, #29
 8011102:	d512      	bpl.n	801112a <__swsetup_r+0x7a>
 8011104:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011106:	b141      	cbz	r1, 801111a <__swsetup_r+0x6a>
 8011108:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801110c:	4299      	cmp	r1, r3
 801110e:	d002      	beq.n	8011116 <__swsetup_r+0x66>
 8011110:	4630      	mov	r0, r6
 8011112:	f001 fb69 	bl	80127e8 <_free_r>
 8011116:	2300      	movs	r3, #0
 8011118:	6363      	str	r3, [r4, #52]	; 0x34
 801111a:	89a3      	ldrh	r3, [r4, #12]
 801111c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011120:	81a3      	strh	r3, [r4, #12]
 8011122:	2300      	movs	r3, #0
 8011124:	6063      	str	r3, [r4, #4]
 8011126:	6923      	ldr	r3, [r4, #16]
 8011128:	6023      	str	r3, [r4, #0]
 801112a:	89a3      	ldrh	r3, [r4, #12]
 801112c:	f043 0308 	orr.w	r3, r3, #8
 8011130:	81a3      	strh	r3, [r4, #12]
 8011132:	6923      	ldr	r3, [r4, #16]
 8011134:	b94b      	cbnz	r3, 801114a <__swsetup_r+0x9a>
 8011136:	89a3      	ldrh	r3, [r4, #12]
 8011138:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801113c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011140:	d003      	beq.n	801114a <__swsetup_r+0x9a>
 8011142:	4621      	mov	r1, r4
 8011144:	4630      	mov	r0, r6
 8011146:	f001 f813 	bl	8012170 <__smakebuf_r>
 801114a:	89a2      	ldrh	r2, [r4, #12]
 801114c:	f012 0301 	ands.w	r3, r2, #1
 8011150:	d00c      	beq.n	801116c <__swsetup_r+0xbc>
 8011152:	2300      	movs	r3, #0
 8011154:	60a3      	str	r3, [r4, #8]
 8011156:	6963      	ldr	r3, [r4, #20]
 8011158:	425b      	negs	r3, r3
 801115a:	61a3      	str	r3, [r4, #24]
 801115c:	6923      	ldr	r3, [r4, #16]
 801115e:	b953      	cbnz	r3, 8011176 <__swsetup_r+0xc6>
 8011160:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011164:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8011168:	d1ba      	bne.n	80110e0 <__swsetup_r+0x30>
 801116a:	bd70      	pop	{r4, r5, r6, pc}
 801116c:	0792      	lsls	r2, r2, #30
 801116e:	bf58      	it	pl
 8011170:	6963      	ldrpl	r3, [r4, #20]
 8011172:	60a3      	str	r3, [r4, #8]
 8011174:	e7f2      	b.n	801115c <__swsetup_r+0xac>
 8011176:	2000      	movs	r0, #0
 8011178:	e7f7      	b.n	801116a <__swsetup_r+0xba>
 801117a:	bf00      	nop
 801117c:	20001c38 	.word	0x20001c38
 8011180:	0801583c 	.word	0x0801583c
 8011184:	0801585c 	.word	0x0801585c
 8011188:	0801581c 	.word	0x0801581c

0801118c <quorem>:
 801118c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011190:	6903      	ldr	r3, [r0, #16]
 8011192:	690c      	ldr	r4, [r1, #16]
 8011194:	42a3      	cmp	r3, r4
 8011196:	4680      	mov	r8, r0
 8011198:	f2c0 8082 	blt.w	80112a0 <quorem+0x114>
 801119c:	3c01      	subs	r4, #1
 801119e:	f101 0714 	add.w	r7, r1, #20
 80111a2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80111a6:	f100 0614 	add.w	r6, r0, #20
 80111aa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80111ae:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80111b2:	eb06 030c 	add.w	r3, r6, ip
 80111b6:	3501      	adds	r5, #1
 80111b8:	eb07 090c 	add.w	r9, r7, ip
 80111bc:	9301      	str	r3, [sp, #4]
 80111be:	fbb0 f5f5 	udiv	r5, r0, r5
 80111c2:	b395      	cbz	r5, 801122a <quorem+0x9e>
 80111c4:	f04f 0a00 	mov.w	sl, #0
 80111c8:	4638      	mov	r0, r7
 80111ca:	46b6      	mov	lr, r6
 80111cc:	46d3      	mov	fp, sl
 80111ce:	f850 2b04 	ldr.w	r2, [r0], #4
 80111d2:	b293      	uxth	r3, r2
 80111d4:	fb05 a303 	mla	r3, r5, r3, sl
 80111d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80111dc:	b29b      	uxth	r3, r3
 80111de:	ebab 0303 	sub.w	r3, fp, r3
 80111e2:	0c12      	lsrs	r2, r2, #16
 80111e4:	f8de b000 	ldr.w	fp, [lr]
 80111e8:	fb05 a202 	mla	r2, r5, r2, sl
 80111ec:	fa13 f38b 	uxtah	r3, r3, fp
 80111f0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80111f4:	fa1f fb82 	uxth.w	fp, r2
 80111f8:	f8de 2000 	ldr.w	r2, [lr]
 80111fc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8011200:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011204:	b29b      	uxth	r3, r3
 8011206:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801120a:	4581      	cmp	r9, r0
 801120c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8011210:	f84e 3b04 	str.w	r3, [lr], #4
 8011214:	d2db      	bcs.n	80111ce <quorem+0x42>
 8011216:	f856 300c 	ldr.w	r3, [r6, ip]
 801121a:	b933      	cbnz	r3, 801122a <quorem+0x9e>
 801121c:	9b01      	ldr	r3, [sp, #4]
 801121e:	3b04      	subs	r3, #4
 8011220:	429e      	cmp	r6, r3
 8011222:	461a      	mov	r2, r3
 8011224:	d330      	bcc.n	8011288 <quorem+0xfc>
 8011226:	f8c8 4010 	str.w	r4, [r8, #16]
 801122a:	4640      	mov	r0, r8
 801122c:	f001 fa08 	bl	8012640 <__mcmp>
 8011230:	2800      	cmp	r0, #0
 8011232:	db25      	blt.n	8011280 <quorem+0xf4>
 8011234:	3501      	adds	r5, #1
 8011236:	4630      	mov	r0, r6
 8011238:	f04f 0c00 	mov.w	ip, #0
 801123c:	f857 2b04 	ldr.w	r2, [r7], #4
 8011240:	f8d0 e000 	ldr.w	lr, [r0]
 8011244:	b293      	uxth	r3, r2
 8011246:	ebac 0303 	sub.w	r3, ip, r3
 801124a:	0c12      	lsrs	r2, r2, #16
 801124c:	fa13 f38e 	uxtah	r3, r3, lr
 8011250:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011254:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011258:	b29b      	uxth	r3, r3
 801125a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801125e:	45b9      	cmp	r9, r7
 8011260:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011264:	f840 3b04 	str.w	r3, [r0], #4
 8011268:	d2e8      	bcs.n	801123c <quorem+0xb0>
 801126a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801126e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8011272:	b92a      	cbnz	r2, 8011280 <quorem+0xf4>
 8011274:	3b04      	subs	r3, #4
 8011276:	429e      	cmp	r6, r3
 8011278:	461a      	mov	r2, r3
 801127a:	d30b      	bcc.n	8011294 <quorem+0x108>
 801127c:	f8c8 4010 	str.w	r4, [r8, #16]
 8011280:	4628      	mov	r0, r5
 8011282:	b003      	add	sp, #12
 8011284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011288:	6812      	ldr	r2, [r2, #0]
 801128a:	3b04      	subs	r3, #4
 801128c:	2a00      	cmp	r2, #0
 801128e:	d1ca      	bne.n	8011226 <quorem+0x9a>
 8011290:	3c01      	subs	r4, #1
 8011292:	e7c5      	b.n	8011220 <quorem+0x94>
 8011294:	6812      	ldr	r2, [r2, #0]
 8011296:	3b04      	subs	r3, #4
 8011298:	2a00      	cmp	r2, #0
 801129a:	d1ef      	bne.n	801127c <quorem+0xf0>
 801129c:	3c01      	subs	r4, #1
 801129e:	e7ea      	b.n	8011276 <quorem+0xea>
 80112a0:	2000      	movs	r0, #0
 80112a2:	e7ee      	b.n	8011282 <quorem+0xf6>
 80112a4:	0000      	movs	r0, r0
	...

080112a8 <_dtoa_r>:
 80112a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112ac:	ec57 6b10 	vmov	r6, r7, d0
 80112b0:	b097      	sub	sp, #92	; 0x5c
 80112b2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80112b4:	9106      	str	r1, [sp, #24]
 80112b6:	4604      	mov	r4, r0
 80112b8:	920b      	str	r2, [sp, #44]	; 0x2c
 80112ba:	9312      	str	r3, [sp, #72]	; 0x48
 80112bc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80112c0:	e9cd 6700 	strd	r6, r7, [sp]
 80112c4:	b93d      	cbnz	r5, 80112d6 <_dtoa_r+0x2e>
 80112c6:	2010      	movs	r0, #16
 80112c8:	f000 ff92 	bl	80121f0 <malloc>
 80112cc:	6260      	str	r0, [r4, #36]	; 0x24
 80112ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80112d2:	6005      	str	r5, [r0, #0]
 80112d4:	60c5      	str	r5, [r0, #12]
 80112d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80112d8:	6819      	ldr	r1, [r3, #0]
 80112da:	b151      	cbz	r1, 80112f2 <_dtoa_r+0x4a>
 80112dc:	685a      	ldr	r2, [r3, #4]
 80112de:	604a      	str	r2, [r1, #4]
 80112e0:	2301      	movs	r3, #1
 80112e2:	4093      	lsls	r3, r2
 80112e4:	608b      	str	r3, [r1, #8]
 80112e6:	4620      	mov	r0, r4
 80112e8:	f000 ffc9 	bl	801227e <_Bfree>
 80112ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80112ee:	2200      	movs	r2, #0
 80112f0:	601a      	str	r2, [r3, #0]
 80112f2:	1e3b      	subs	r3, r7, #0
 80112f4:	bfbb      	ittet	lt
 80112f6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80112fa:	9301      	strlt	r3, [sp, #4]
 80112fc:	2300      	movge	r3, #0
 80112fe:	2201      	movlt	r2, #1
 8011300:	bfac      	ite	ge
 8011302:	f8c8 3000 	strge.w	r3, [r8]
 8011306:	f8c8 2000 	strlt.w	r2, [r8]
 801130a:	4baf      	ldr	r3, [pc, #700]	; (80115c8 <_dtoa_r+0x320>)
 801130c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011310:	ea33 0308 	bics.w	r3, r3, r8
 8011314:	d114      	bne.n	8011340 <_dtoa_r+0x98>
 8011316:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011318:	f242 730f 	movw	r3, #9999	; 0x270f
 801131c:	6013      	str	r3, [r2, #0]
 801131e:	9b00      	ldr	r3, [sp, #0]
 8011320:	b923      	cbnz	r3, 801132c <_dtoa_r+0x84>
 8011322:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8011326:	2800      	cmp	r0, #0
 8011328:	f000 8542 	beq.w	8011db0 <_dtoa_r+0xb08>
 801132c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801132e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80115dc <_dtoa_r+0x334>
 8011332:	2b00      	cmp	r3, #0
 8011334:	f000 8544 	beq.w	8011dc0 <_dtoa_r+0xb18>
 8011338:	f10b 0303 	add.w	r3, fp, #3
 801133c:	f000 bd3e 	b.w	8011dbc <_dtoa_r+0xb14>
 8011340:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011344:	2200      	movs	r2, #0
 8011346:	2300      	movs	r3, #0
 8011348:	4630      	mov	r0, r6
 801134a:	4639      	mov	r1, r7
 801134c:	f7ef fbe4 	bl	8000b18 <__aeabi_dcmpeq>
 8011350:	4681      	mov	r9, r0
 8011352:	b168      	cbz	r0, 8011370 <_dtoa_r+0xc8>
 8011354:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011356:	2301      	movs	r3, #1
 8011358:	6013      	str	r3, [r2, #0]
 801135a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801135c:	2b00      	cmp	r3, #0
 801135e:	f000 8524 	beq.w	8011daa <_dtoa_r+0xb02>
 8011362:	4b9a      	ldr	r3, [pc, #616]	; (80115cc <_dtoa_r+0x324>)
 8011364:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011366:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 801136a:	6013      	str	r3, [r2, #0]
 801136c:	f000 bd28 	b.w	8011dc0 <_dtoa_r+0xb18>
 8011370:	aa14      	add	r2, sp, #80	; 0x50
 8011372:	a915      	add	r1, sp, #84	; 0x54
 8011374:	ec47 6b10 	vmov	d0, r6, r7
 8011378:	4620      	mov	r0, r4
 801137a:	f001 f9d8 	bl	801272e <__d2b>
 801137e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8011382:	9004      	str	r0, [sp, #16]
 8011384:	2d00      	cmp	r5, #0
 8011386:	d07c      	beq.n	8011482 <_dtoa_r+0x1da>
 8011388:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801138c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8011390:	46b2      	mov	sl, r6
 8011392:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8011396:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801139a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801139e:	2200      	movs	r2, #0
 80113a0:	4b8b      	ldr	r3, [pc, #556]	; (80115d0 <_dtoa_r+0x328>)
 80113a2:	4650      	mov	r0, sl
 80113a4:	4659      	mov	r1, fp
 80113a6:	f7ee ff97 	bl	80002d8 <__aeabi_dsub>
 80113aa:	a381      	add	r3, pc, #516	; (adr r3, 80115b0 <_dtoa_r+0x308>)
 80113ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113b0:	f7ef f94a 	bl	8000648 <__aeabi_dmul>
 80113b4:	a380      	add	r3, pc, #512	; (adr r3, 80115b8 <_dtoa_r+0x310>)
 80113b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113ba:	f7ee ff8f 	bl	80002dc <__adddf3>
 80113be:	4606      	mov	r6, r0
 80113c0:	4628      	mov	r0, r5
 80113c2:	460f      	mov	r7, r1
 80113c4:	f7ef f8d6 	bl	8000574 <__aeabi_i2d>
 80113c8:	a37d      	add	r3, pc, #500	; (adr r3, 80115c0 <_dtoa_r+0x318>)
 80113ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113ce:	f7ef f93b 	bl	8000648 <__aeabi_dmul>
 80113d2:	4602      	mov	r2, r0
 80113d4:	460b      	mov	r3, r1
 80113d6:	4630      	mov	r0, r6
 80113d8:	4639      	mov	r1, r7
 80113da:	f7ee ff7f 	bl	80002dc <__adddf3>
 80113de:	4606      	mov	r6, r0
 80113e0:	460f      	mov	r7, r1
 80113e2:	f7ef fbe1 	bl	8000ba8 <__aeabi_d2iz>
 80113e6:	2200      	movs	r2, #0
 80113e8:	4682      	mov	sl, r0
 80113ea:	2300      	movs	r3, #0
 80113ec:	4630      	mov	r0, r6
 80113ee:	4639      	mov	r1, r7
 80113f0:	f7ef fb9c 	bl	8000b2c <__aeabi_dcmplt>
 80113f4:	b148      	cbz	r0, 801140a <_dtoa_r+0x162>
 80113f6:	4650      	mov	r0, sl
 80113f8:	f7ef f8bc 	bl	8000574 <__aeabi_i2d>
 80113fc:	4632      	mov	r2, r6
 80113fe:	463b      	mov	r3, r7
 8011400:	f7ef fb8a 	bl	8000b18 <__aeabi_dcmpeq>
 8011404:	b908      	cbnz	r0, 801140a <_dtoa_r+0x162>
 8011406:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801140a:	f1ba 0f16 	cmp.w	sl, #22
 801140e:	d859      	bhi.n	80114c4 <_dtoa_r+0x21c>
 8011410:	4970      	ldr	r1, [pc, #448]	; (80115d4 <_dtoa_r+0x32c>)
 8011412:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8011416:	e9dd 2300 	ldrd	r2, r3, [sp]
 801141a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801141e:	f7ef fba3 	bl	8000b68 <__aeabi_dcmpgt>
 8011422:	2800      	cmp	r0, #0
 8011424:	d050      	beq.n	80114c8 <_dtoa_r+0x220>
 8011426:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801142a:	2300      	movs	r3, #0
 801142c:	930f      	str	r3, [sp, #60]	; 0x3c
 801142e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011430:	1b5d      	subs	r5, r3, r5
 8011432:	f1b5 0801 	subs.w	r8, r5, #1
 8011436:	bf49      	itett	mi
 8011438:	f1c5 0301 	rsbmi	r3, r5, #1
 801143c:	2300      	movpl	r3, #0
 801143e:	9305      	strmi	r3, [sp, #20]
 8011440:	f04f 0800 	movmi.w	r8, #0
 8011444:	bf58      	it	pl
 8011446:	9305      	strpl	r3, [sp, #20]
 8011448:	f1ba 0f00 	cmp.w	sl, #0
 801144c:	db3e      	blt.n	80114cc <_dtoa_r+0x224>
 801144e:	2300      	movs	r3, #0
 8011450:	44d0      	add	r8, sl
 8011452:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8011456:	9307      	str	r3, [sp, #28]
 8011458:	9b06      	ldr	r3, [sp, #24]
 801145a:	2b09      	cmp	r3, #9
 801145c:	f200 8090 	bhi.w	8011580 <_dtoa_r+0x2d8>
 8011460:	2b05      	cmp	r3, #5
 8011462:	bfc4      	itt	gt
 8011464:	3b04      	subgt	r3, #4
 8011466:	9306      	strgt	r3, [sp, #24]
 8011468:	9b06      	ldr	r3, [sp, #24]
 801146a:	f1a3 0302 	sub.w	r3, r3, #2
 801146e:	bfcc      	ite	gt
 8011470:	2500      	movgt	r5, #0
 8011472:	2501      	movle	r5, #1
 8011474:	2b03      	cmp	r3, #3
 8011476:	f200 808f 	bhi.w	8011598 <_dtoa_r+0x2f0>
 801147a:	e8df f003 	tbb	[pc, r3]
 801147e:	7f7d      	.short	0x7f7d
 8011480:	7131      	.short	0x7131
 8011482:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8011486:	441d      	add	r5, r3
 8011488:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801148c:	2820      	cmp	r0, #32
 801148e:	dd13      	ble.n	80114b8 <_dtoa_r+0x210>
 8011490:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8011494:	9b00      	ldr	r3, [sp, #0]
 8011496:	fa08 f800 	lsl.w	r8, r8, r0
 801149a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801149e:	fa23 f000 	lsr.w	r0, r3, r0
 80114a2:	ea48 0000 	orr.w	r0, r8, r0
 80114a6:	f7ef f855 	bl	8000554 <__aeabi_ui2d>
 80114aa:	2301      	movs	r3, #1
 80114ac:	4682      	mov	sl, r0
 80114ae:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80114b2:	3d01      	subs	r5, #1
 80114b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80114b6:	e772      	b.n	801139e <_dtoa_r+0xf6>
 80114b8:	9b00      	ldr	r3, [sp, #0]
 80114ba:	f1c0 0020 	rsb	r0, r0, #32
 80114be:	fa03 f000 	lsl.w	r0, r3, r0
 80114c2:	e7f0      	b.n	80114a6 <_dtoa_r+0x1fe>
 80114c4:	2301      	movs	r3, #1
 80114c6:	e7b1      	b.n	801142c <_dtoa_r+0x184>
 80114c8:	900f      	str	r0, [sp, #60]	; 0x3c
 80114ca:	e7b0      	b.n	801142e <_dtoa_r+0x186>
 80114cc:	9b05      	ldr	r3, [sp, #20]
 80114ce:	eba3 030a 	sub.w	r3, r3, sl
 80114d2:	9305      	str	r3, [sp, #20]
 80114d4:	f1ca 0300 	rsb	r3, sl, #0
 80114d8:	9307      	str	r3, [sp, #28]
 80114da:	2300      	movs	r3, #0
 80114dc:	930e      	str	r3, [sp, #56]	; 0x38
 80114de:	e7bb      	b.n	8011458 <_dtoa_r+0x1b0>
 80114e0:	2301      	movs	r3, #1
 80114e2:	930a      	str	r3, [sp, #40]	; 0x28
 80114e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	dd59      	ble.n	801159e <_dtoa_r+0x2f6>
 80114ea:	9302      	str	r3, [sp, #8]
 80114ec:	4699      	mov	r9, r3
 80114ee:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80114f0:	2200      	movs	r2, #0
 80114f2:	6072      	str	r2, [r6, #4]
 80114f4:	2204      	movs	r2, #4
 80114f6:	f102 0014 	add.w	r0, r2, #20
 80114fa:	4298      	cmp	r0, r3
 80114fc:	6871      	ldr	r1, [r6, #4]
 80114fe:	d953      	bls.n	80115a8 <_dtoa_r+0x300>
 8011500:	4620      	mov	r0, r4
 8011502:	f000 fe88 	bl	8012216 <_Balloc>
 8011506:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011508:	6030      	str	r0, [r6, #0]
 801150a:	f1b9 0f0e 	cmp.w	r9, #14
 801150e:	f8d3 b000 	ldr.w	fp, [r3]
 8011512:	f200 80e6 	bhi.w	80116e2 <_dtoa_r+0x43a>
 8011516:	2d00      	cmp	r5, #0
 8011518:	f000 80e3 	beq.w	80116e2 <_dtoa_r+0x43a>
 801151c:	ed9d 7b00 	vldr	d7, [sp]
 8011520:	f1ba 0f00 	cmp.w	sl, #0
 8011524:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8011528:	dd74      	ble.n	8011614 <_dtoa_r+0x36c>
 801152a:	4a2a      	ldr	r2, [pc, #168]	; (80115d4 <_dtoa_r+0x32c>)
 801152c:	f00a 030f 	and.w	r3, sl, #15
 8011530:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011534:	ed93 7b00 	vldr	d7, [r3]
 8011538:	ea4f 162a 	mov.w	r6, sl, asr #4
 801153c:	06f0      	lsls	r0, r6, #27
 801153e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8011542:	d565      	bpl.n	8011610 <_dtoa_r+0x368>
 8011544:	4b24      	ldr	r3, [pc, #144]	; (80115d8 <_dtoa_r+0x330>)
 8011546:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801154a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801154e:	f7ef f9a5 	bl	800089c <__aeabi_ddiv>
 8011552:	e9cd 0100 	strd	r0, r1, [sp]
 8011556:	f006 060f 	and.w	r6, r6, #15
 801155a:	2503      	movs	r5, #3
 801155c:	4f1e      	ldr	r7, [pc, #120]	; (80115d8 <_dtoa_r+0x330>)
 801155e:	e04c      	b.n	80115fa <_dtoa_r+0x352>
 8011560:	2301      	movs	r3, #1
 8011562:	930a      	str	r3, [sp, #40]	; 0x28
 8011564:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011566:	4453      	add	r3, sl
 8011568:	f103 0901 	add.w	r9, r3, #1
 801156c:	9302      	str	r3, [sp, #8]
 801156e:	464b      	mov	r3, r9
 8011570:	2b01      	cmp	r3, #1
 8011572:	bfb8      	it	lt
 8011574:	2301      	movlt	r3, #1
 8011576:	e7ba      	b.n	80114ee <_dtoa_r+0x246>
 8011578:	2300      	movs	r3, #0
 801157a:	e7b2      	b.n	80114e2 <_dtoa_r+0x23a>
 801157c:	2300      	movs	r3, #0
 801157e:	e7f0      	b.n	8011562 <_dtoa_r+0x2ba>
 8011580:	2501      	movs	r5, #1
 8011582:	2300      	movs	r3, #0
 8011584:	9306      	str	r3, [sp, #24]
 8011586:	950a      	str	r5, [sp, #40]	; 0x28
 8011588:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801158c:	9302      	str	r3, [sp, #8]
 801158e:	4699      	mov	r9, r3
 8011590:	2200      	movs	r2, #0
 8011592:	2312      	movs	r3, #18
 8011594:	920b      	str	r2, [sp, #44]	; 0x2c
 8011596:	e7aa      	b.n	80114ee <_dtoa_r+0x246>
 8011598:	2301      	movs	r3, #1
 801159a:	930a      	str	r3, [sp, #40]	; 0x28
 801159c:	e7f4      	b.n	8011588 <_dtoa_r+0x2e0>
 801159e:	2301      	movs	r3, #1
 80115a0:	9302      	str	r3, [sp, #8]
 80115a2:	4699      	mov	r9, r3
 80115a4:	461a      	mov	r2, r3
 80115a6:	e7f5      	b.n	8011594 <_dtoa_r+0x2ec>
 80115a8:	3101      	adds	r1, #1
 80115aa:	6071      	str	r1, [r6, #4]
 80115ac:	0052      	lsls	r2, r2, #1
 80115ae:	e7a2      	b.n	80114f6 <_dtoa_r+0x24e>
 80115b0:	636f4361 	.word	0x636f4361
 80115b4:	3fd287a7 	.word	0x3fd287a7
 80115b8:	8b60c8b3 	.word	0x8b60c8b3
 80115bc:	3fc68a28 	.word	0x3fc68a28
 80115c0:	509f79fb 	.word	0x509f79fb
 80115c4:	3fd34413 	.word	0x3fd34413
 80115c8:	7ff00000 	.word	0x7ff00000
 80115cc:	08015a9d 	.word	0x08015a9d
 80115d0:	3ff80000 	.word	0x3ff80000
 80115d4:	080158a8 	.word	0x080158a8
 80115d8:	08015880 	.word	0x08015880
 80115dc:	08015817 	.word	0x08015817
 80115e0:	07f1      	lsls	r1, r6, #31
 80115e2:	d508      	bpl.n	80115f6 <_dtoa_r+0x34e>
 80115e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80115e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80115ec:	f7ef f82c 	bl	8000648 <__aeabi_dmul>
 80115f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80115f4:	3501      	adds	r5, #1
 80115f6:	1076      	asrs	r6, r6, #1
 80115f8:	3708      	adds	r7, #8
 80115fa:	2e00      	cmp	r6, #0
 80115fc:	d1f0      	bne.n	80115e0 <_dtoa_r+0x338>
 80115fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011602:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011606:	f7ef f949 	bl	800089c <__aeabi_ddiv>
 801160a:	e9cd 0100 	strd	r0, r1, [sp]
 801160e:	e01a      	b.n	8011646 <_dtoa_r+0x39e>
 8011610:	2502      	movs	r5, #2
 8011612:	e7a3      	b.n	801155c <_dtoa_r+0x2b4>
 8011614:	f000 80a0 	beq.w	8011758 <_dtoa_r+0x4b0>
 8011618:	f1ca 0600 	rsb	r6, sl, #0
 801161c:	4b9f      	ldr	r3, [pc, #636]	; (801189c <_dtoa_r+0x5f4>)
 801161e:	4fa0      	ldr	r7, [pc, #640]	; (80118a0 <_dtoa_r+0x5f8>)
 8011620:	f006 020f 	and.w	r2, r6, #15
 8011624:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011628:	e9d3 2300 	ldrd	r2, r3, [r3]
 801162c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8011630:	f7ef f80a 	bl	8000648 <__aeabi_dmul>
 8011634:	e9cd 0100 	strd	r0, r1, [sp]
 8011638:	1136      	asrs	r6, r6, #4
 801163a:	2300      	movs	r3, #0
 801163c:	2502      	movs	r5, #2
 801163e:	2e00      	cmp	r6, #0
 8011640:	d17f      	bne.n	8011742 <_dtoa_r+0x49a>
 8011642:	2b00      	cmp	r3, #0
 8011644:	d1e1      	bne.n	801160a <_dtoa_r+0x362>
 8011646:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011648:	2b00      	cmp	r3, #0
 801164a:	f000 8087 	beq.w	801175c <_dtoa_r+0x4b4>
 801164e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011652:	2200      	movs	r2, #0
 8011654:	4b93      	ldr	r3, [pc, #588]	; (80118a4 <_dtoa_r+0x5fc>)
 8011656:	4630      	mov	r0, r6
 8011658:	4639      	mov	r1, r7
 801165a:	f7ef fa67 	bl	8000b2c <__aeabi_dcmplt>
 801165e:	2800      	cmp	r0, #0
 8011660:	d07c      	beq.n	801175c <_dtoa_r+0x4b4>
 8011662:	f1b9 0f00 	cmp.w	r9, #0
 8011666:	d079      	beq.n	801175c <_dtoa_r+0x4b4>
 8011668:	9b02      	ldr	r3, [sp, #8]
 801166a:	2b00      	cmp	r3, #0
 801166c:	dd35      	ble.n	80116da <_dtoa_r+0x432>
 801166e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8011672:	9308      	str	r3, [sp, #32]
 8011674:	4639      	mov	r1, r7
 8011676:	2200      	movs	r2, #0
 8011678:	4b8b      	ldr	r3, [pc, #556]	; (80118a8 <_dtoa_r+0x600>)
 801167a:	4630      	mov	r0, r6
 801167c:	f7ee ffe4 	bl	8000648 <__aeabi_dmul>
 8011680:	e9cd 0100 	strd	r0, r1, [sp]
 8011684:	9f02      	ldr	r7, [sp, #8]
 8011686:	3501      	adds	r5, #1
 8011688:	4628      	mov	r0, r5
 801168a:	f7ee ff73 	bl	8000574 <__aeabi_i2d>
 801168e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011692:	f7ee ffd9 	bl	8000648 <__aeabi_dmul>
 8011696:	2200      	movs	r2, #0
 8011698:	4b84      	ldr	r3, [pc, #528]	; (80118ac <_dtoa_r+0x604>)
 801169a:	f7ee fe1f 	bl	80002dc <__adddf3>
 801169e:	4605      	mov	r5, r0
 80116a0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80116a4:	2f00      	cmp	r7, #0
 80116a6:	d15d      	bne.n	8011764 <_dtoa_r+0x4bc>
 80116a8:	2200      	movs	r2, #0
 80116aa:	4b81      	ldr	r3, [pc, #516]	; (80118b0 <_dtoa_r+0x608>)
 80116ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80116b0:	f7ee fe12 	bl	80002d8 <__aeabi_dsub>
 80116b4:	462a      	mov	r2, r5
 80116b6:	4633      	mov	r3, r6
 80116b8:	e9cd 0100 	strd	r0, r1, [sp]
 80116bc:	f7ef fa54 	bl	8000b68 <__aeabi_dcmpgt>
 80116c0:	2800      	cmp	r0, #0
 80116c2:	f040 8288 	bne.w	8011bd6 <_dtoa_r+0x92e>
 80116c6:	462a      	mov	r2, r5
 80116c8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80116cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80116d0:	f7ef fa2c 	bl	8000b2c <__aeabi_dcmplt>
 80116d4:	2800      	cmp	r0, #0
 80116d6:	f040 827c 	bne.w	8011bd2 <_dtoa_r+0x92a>
 80116da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80116de:	e9cd 2300 	strd	r2, r3, [sp]
 80116e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	f2c0 8150 	blt.w	801198a <_dtoa_r+0x6e2>
 80116ea:	f1ba 0f0e 	cmp.w	sl, #14
 80116ee:	f300 814c 	bgt.w	801198a <_dtoa_r+0x6e2>
 80116f2:	4b6a      	ldr	r3, [pc, #424]	; (801189c <_dtoa_r+0x5f4>)
 80116f4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80116f8:	ed93 7b00 	vldr	d7, [r3]
 80116fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80116fe:	2b00      	cmp	r3, #0
 8011700:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011704:	f280 80d8 	bge.w	80118b8 <_dtoa_r+0x610>
 8011708:	f1b9 0f00 	cmp.w	r9, #0
 801170c:	f300 80d4 	bgt.w	80118b8 <_dtoa_r+0x610>
 8011710:	f040 825e 	bne.w	8011bd0 <_dtoa_r+0x928>
 8011714:	2200      	movs	r2, #0
 8011716:	4b66      	ldr	r3, [pc, #408]	; (80118b0 <_dtoa_r+0x608>)
 8011718:	ec51 0b17 	vmov	r0, r1, d7
 801171c:	f7ee ff94 	bl	8000648 <__aeabi_dmul>
 8011720:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011724:	f7ef fa16 	bl	8000b54 <__aeabi_dcmpge>
 8011728:	464f      	mov	r7, r9
 801172a:	464e      	mov	r6, r9
 801172c:	2800      	cmp	r0, #0
 801172e:	f040 8234 	bne.w	8011b9a <_dtoa_r+0x8f2>
 8011732:	2331      	movs	r3, #49	; 0x31
 8011734:	f10b 0501 	add.w	r5, fp, #1
 8011738:	f88b 3000 	strb.w	r3, [fp]
 801173c:	f10a 0a01 	add.w	sl, sl, #1
 8011740:	e22f      	b.n	8011ba2 <_dtoa_r+0x8fa>
 8011742:	07f2      	lsls	r2, r6, #31
 8011744:	d505      	bpl.n	8011752 <_dtoa_r+0x4aa>
 8011746:	e9d7 2300 	ldrd	r2, r3, [r7]
 801174a:	f7ee ff7d 	bl	8000648 <__aeabi_dmul>
 801174e:	3501      	adds	r5, #1
 8011750:	2301      	movs	r3, #1
 8011752:	1076      	asrs	r6, r6, #1
 8011754:	3708      	adds	r7, #8
 8011756:	e772      	b.n	801163e <_dtoa_r+0x396>
 8011758:	2502      	movs	r5, #2
 801175a:	e774      	b.n	8011646 <_dtoa_r+0x39e>
 801175c:	f8cd a020 	str.w	sl, [sp, #32]
 8011760:	464f      	mov	r7, r9
 8011762:	e791      	b.n	8011688 <_dtoa_r+0x3e0>
 8011764:	4b4d      	ldr	r3, [pc, #308]	; (801189c <_dtoa_r+0x5f4>)
 8011766:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801176a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801176e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011770:	2b00      	cmp	r3, #0
 8011772:	d047      	beq.n	8011804 <_dtoa_r+0x55c>
 8011774:	4602      	mov	r2, r0
 8011776:	460b      	mov	r3, r1
 8011778:	2000      	movs	r0, #0
 801177a:	494e      	ldr	r1, [pc, #312]	; (80118b4 <_dtoa_r+0x60c>)
 801177c:	f7ef f88e 	bl	800089c <__aeabi_ddiv>
 8011780:	462a      	mov	r2, r5
 8011782:	4633      	mov	r3, r6
 8011784:	f7ee fda8 	bl	80002d8 <__aeabi_dsub>
 8011788:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801178c:	465d      	mov	r5, fp
 801178e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011792:	f7ef fa09 	bl	8000ba8 <__aeabi_d2iz>
 8011796:	4606      	mov	r6, r0
 8011798:	f7ee feec 	bl	8000574 <__aeabi_i2d>
 801179c:	4602      	mov	r2, r0
 801179e:	460b      	mov	r3, r1
 80117a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80117a4:	f7ee fd98 	bl	80002d8 <__aeabi_dsub>
 80117a8:	3630      	adds	r6, #48	; 0x30
 80117aa:	f805 6b01 	strb.w	r6, [r5], #1
 80117ae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80117b2:	e9cd 0100 	strd	r0, r1, [sp]
 80117b6:	f7ef f9b9 	bl	8000b2c <__aeabi_dcmplt>
 80117ba:	2800      	cmp	r0, #0
 80117bc:	d163      	bne.n	8011886 <_dtoa_r+0x5de>
 80117be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80117c2:	2000      	movs	r0, #0
 80117c4:	4937      	ldr	r1, [pc, #220]	; (80118a4 <_dtoa_r+0x5fc>)
 80117c6:	f7ee fd87 	bl	80002d8 <__aeabi_dsub>
 80117ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80117ce:	f7ef f9ad 	bl	8000b2c <__aeabi_dcmplt>
 80117d2:	2800      	cmp	r0, #0
 80117d4:	f040 80b7 	bne.w	8011946 <_dtoa_r+0x69e>
 80117d8:	eba5 030b 	sub.w	r3, r5, fp
 80117dc:	429f      	cmp	r7, r3
 80117de:	f77f af7c 	ble.w	80116da <_dtoa_r+0x432>
 80117e2:	2200      	movs	r2, #0
 80117e4:	4b30      	ldr	r3, [pc, #192]	; (80118a8 <_dtoa_r+0x600>)
 80117e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80117ea:	f7ee ff2d 	bl	8000648 <__aeabi_dmul>
 80117ee:	2200      	movs	r2, #0
 80117f0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80117f4:	4b2c      	ldr	r3, [pc, #176]	; (80118a8 <_dtoa_r+0x600>)
 80117f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80117fa:	f7ee ff25 	bl	8000648 <__aeabi_dmul>
 80117fe:	e9cd 0100 	strd	r0, r1, [sp]
 8011802:	e7c4      	b.n	801178e <_dtoa_r+0x4e6>
 8011804:	462a      	mov	r2, r5
 8011806:	4633      	mov	r3, r6
 8011808:	f7ee ff1e 	bl	8000648 <__aeabi_dmul>
 801180c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011810:	eb0b 0507 	add.w	r5, fp, r7
 8011814:	465e      	mov	r6, fp
 8011816:	e9dd 0100 	ldrd	r0, r1, [sp]
 801181a:	f7ef f9c5 	bl	8000ba8 <__aeabi_d2iz>
 801181e:	4607      	mov	r7, r0
 8011820:	f7ee fea8 	bl	8000574 <__aeabi_i2d>
 8011824:	3730      	adds	r7, #48	; 0x30
 8011826:	4602      	mov	r2, r0
 8011828:	460b      	mov	r3, r1
 801182a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801182e:	f7ee fd53 	bl	80002d8 <__aeabi_dsub>
 8011832:	f806 7b01 	strb.w	r7, [r6], #1
 8011836:	42ae      	cmp	r6, r5
 8011838:	e9cd 0100 	strd	r0, r1, [sp]
 801183c:	f04f 0200 	mov.w	r2, #0
 8011840:	d126      	bne.n	8011890 <_dtoa_r+0x5e8>
 8011842:	4b1c      	ldr	r3, [pc, #112]	; (80118b4 <_dtoa_r+0x60c>)
 8011844:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011848:	f7ee fd48 	bl	80002dc <__adddf3>
 801184c:	4602      	mov	r2, r0
 801184e:	460b      	mov	r3, r1
 8011850:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011854:	f7ef f988 	bl	8000b68 <__aeabi_dcmpgt>
 8011858:	2800      	cmp	r0, #0
 801185a:	d174      	bne.n	8011946 <_dtoa_r+0x69e>
 801185c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8011860:	2000      	movs	r0, #0
 8011862:	4914      	ldr	r1, [pc, #80]	; (80118b4 <_dtoa_r+0x60c>)
 8011864:	f7ee fd38 	bl	80002d8 <__aeabi_dsub>
 8011868:	4602      	mov	r2, r0
 801186a:	460b      	mov	r3, r1
 801186c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011870:	f7ef f95c 	bl	8000b2c <__aeabi_dcmplt>
 8011874:	2800      	cmp	r0, #0
 8011876:	f43f af30 	beq.w	80116da <_dtoa_r+0x432>
 801187a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801187e:	2b30      	cmp	r3, #48	; 0x30
 8011880:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8011884:	d002      	beq.n	801188c <_dtoa_r+0x5e4>
 8011886:	f8dd a020 	ldr.w	sl, [sp, #32]
 801188a:	e04a      	b.n	8011922 <_dtoa_r+0x67a>
 801188c:	4615      	mov	r5, r2
 801188e:	e7f4      	b.n	801187a <_dtoa_r+0x5d2>
 8011890:	4b05      	ldr	r3, [pc, #20]	; (80118a8 <_dtoa_r+0x600>)
 8011892:	f7ee fed9 	bl	8000648 <__aeabi_dmul>
 8011896:	e9cd 0100 	strd	r0, r1, [sp]
 801189a:	e7bc      	b.n	8011816 <_dtoa_r+0x56e>
 801189c:	080158a8 	.word	0x080158a8
 80118a0:	08015880 	.word	0x08015880
 80118a4:	3ff00000 	.word	0x3ff00000
 80118a8:	40240000 	.word	0x40240000
 80118ac:	401c0000 	.word	0x401c0000
 80118b0:	40140000 	.word	0x40140000
 80118b4:	3fe00000 	.word	0x3fe00000
 80118b8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80118bc:	465d      	mov	r5, fp
 80118be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80118c2:	4630      	mov	r0, r6
 80118c4:	4639      	mov	r1, r7
 80118c6:	f7ee ffe9 	bl	800089c <__aeabi_ddiv>
 80118ca:	f7ef f96d 	bl	8000ba8 <__aeabi_d2iz>
 80118ce:	4680      	mov	r8, r0
 80118d0:	f7ee fe50 	bl	8000574 <__aeabi_i2d>
 80118d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80118d8:	f7ee feb6 	bl	8000648 <__aeabi_dmul>
 80118dc:	4602      	mov	r2, r0
 80118de:	460b      	mov	r3, r1
 80118e0:	4630      	mov	r0, r6
 80118e2:	4639      	mov	r1, r7
 80118e4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80118e8:	f7ee fcf6 	bl	80002d8 <__aeabi_dsub>
 80118ec:	f805 6b01 	strb.w	r6, [r5], #1
 80118f0:	eba5 060b 	sub.w	r6, r5, fp
 80118f4:	45b1      	cmp	r9, r6
 80118f6:	4602      	mov	r2, r0
 80118f8:	460b      	mov	r3, r1
 80118fa:	d139      	bne.n	8011970 <_dtoa_r+0x6c8>
 80118fc:	f7ee fcee 	bl	80002dc <__adddf3>
 8011900:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011904:	4606      	mov	r6, r0
 8011906:	460f      	mov	r7, r1
 8011908:	f7ef f92e 	bl	8000b68 <__aeabi_dcmpgt>
 801190c:	b9c8      	cbnz	r0, 8011942 <_dtoa_r+0x69a>
 801190e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011912:	4630      	mov	r0, r6
 8011914:	4639      	mov	r1, r7
 8011916:	f7ef f8ff 	bl	8000b18 <__aeabi_dcmpeq>
 801191a:	b110      	cbz	r0, 8011922 <_dtoa_r+0x67a>
 801191c:	f018 0f01 	tst.w	r8, #1
 8011920:	d10f      	bne.n	8011942 <_dtoa_r+0x69a>
 8011922:	9904      	ldr	r1, [sp, #16]
 8011924:	4620      	mov	r0, r4
 8011926:	f000 fcaa 	bl	801227e <_Bfree>
 801192a:	2300      	movs	r3, #0
 801192c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801192e:	702b      	strb	r3, [r5, #0]
 8011930:	f10a 0301 	add.w	r3, sl, #1
 8011934:	6013      	str	r3, [r2, #0]
 8011936:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011938:	2b00      	cmp	r3, #0
 801193a:	f000 8241 	beq.w	8011dc0 <_dtoa_r+0xb18>
 801193e:	601d      	str	r5, [r3, #0]
 8011940:	e23e      	b.n	8011dc0 <_dtoa_r+0xb18>
 8011942:	f8cd a020 	str.w	sl, [sp, #32]
 8011946:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801194a:	2a39      	cmp	r2, #57	; 0x39
 801194c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8011950:	d108      	bne.n	8011964 <_dtoa_r+0x6bc>
 8011952:	459b      	cmp	fp, r3
 8011954:	d10a      	bne.n	801196c <_dtoa_r+0x6c4>
 8011956:	9b08      	ldr	r3, [sp, #32]
 8011958:	3301      	adds	r3, #1
 801195a:	9308      	str	r3, [sp, #32]
 801195c:	2330      	movs	r3, #48	; 0x30
 801195e:	f88b 3000 	strb.w	r3, [fp]
 8011962:	465b      	mov	r3, fp
 8011964:	781a      	ldrb	r2, [r3, #0]
 8011966:	3201      	adds	r2, #1
 8011968:	701a      	strb	r2, [r3, #0]
 801196a:	e78c      	b.n	8011886 <_dtoa_r+0x5de>
 801196c:	461d      	mov	r5, r3
 801196e:	e7ea      	b.n	8011946 <_dtoa_r+0x69e>
 8011970:	2200      	movs	r2, #0
 8011972:	4b9b      	ldr	r3, [pc, #620]	; (8011be0 <_dtoa_r+0x938>)
 8011974:	f7ee fe68 	bl	8000648 <__aeabi_dmul>
 8011978:	2200      	movs	r2, #0
 801197a:	2300      	movs	r3, #0
 801197c:	4606      	mov	r6, r0
 801197e:	460f      	mov	r7, r1
 8011980:	f7ef f8ca 	bl	8000b18 <__aeabi_dcmpeq>
 8011984:	2800      	cmp	r0, #0
 8011986:	d09a      	beq.n	80118be <_dtoa_r+0x616>
 8011988:	e7cb      	b.n	8011922 <_dtoa_r+0x67a>
 801198a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801198c:	2a00      	cmp	r2, #0
 801198e:	f000 808b 	beq.w	8011aa8 <_dtoa_r+0x800>
 8011992:	9a06      	ldr	r2, [sp, #24]
 8011994:	2a01      	cmp	r2, #1
 8011996:	dc6e      	bgt.n	8011a76 <_dtoa_r+0x7ce>
 8011998:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801199a:	2a00      	cmp	r2, #0
 801199c:	d067      	beq.n	8011a6e <_dtoa_r+0x7c6>
 801199e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80119a2:	9f07      	ldr	r7, [sp, #28]
 80119a4:	9d05      	ldr	r5, [sp, #20]
 80119a6:	9a05      	ldr	r2, [sp, #20]
 80119a8:	2101      	movs	r1, #1
 80119aa:	441a      	add	r2, r3
 80119ac:	4620      	mov	r0, r4
 80119ae:	9205      	str	r2, [sp, #20]
 80119b0:	4498      	add	r8, r3
 80119b2:	f000 fd04 	bl	80123be <__i2b>
 80119b6:	4606      	mov	r6, r0
 80119b8:	2d00      	cmp	r5, #0
 80119ba:	dd0c      	ble.n	80119d6 <_dtoa_r+0x72e>
 80119bc:	f1b8 0f00 	cmp.w	r8, #0
 80119c0:	dd09      	ble.n	80119d6 <_dtoa_r+0x72e>
 80119c2:	4545      	cmp	r5, r8
 80119c4:	9a05      	ldr	r2, [sp, #20]
 80119c6:	462b      	mov	r3, r5
 80119c8:	bfa8      	it	ge
 80119ca:	4643      	movge	r3, r8
 80119cc:	1ad2      	subs	r2, r2, r3
 80119ce:	9205      	str	r2, [sp, #20]
 80119d0:	1aed      	subs	r5, r5, r3
 80119d2:	eba8 0803 	sub.w	r8, r8, r3
 80119d6:	9b07      	ldr	r3, [sp, #28]
 80119d8:	b1eb      	cbz	r3, 8011a16 <_dtoa_r+0x76e>
 80119da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d067      	beq.n	8011ab0 <_dtoa_r+0x808>
 80119e0:	b18f      	cbz	r7, 8011a06 <_dtoa_r+0x75e>
 80119e2:	4631      	mov	r1, r6
 80119e4:	463a      	mov	r2, r7
 80119e6:	4620      	mov	r0, r4
 80119e8:	f000 fd88 	bl	80124fc <__pow5mult>
 80119ec:	9a04      	ldr	r2, [sp, #16]
 80119ee:	4601      	mov	r1, r0
 80119f0:	4606      	mov	r6, r0
 80119f2:	4620      	mov	r0, r4
 80119f4:	f000 fcec 	bl	80123d0 <__multiply>
 80119f8:	9904      	ldr	r1, [sp, #16]
 80119fa:	9008      	str	r0, [sp, #32]
 80119fc:	4620      	mov	r0, r4
 80119fe:	f000 fc3e 	bl	801227e <_Bfree>
 8011a02:	9b08      	ldr	r3, [sp, #32]
 8011a04:	9304      	str	r3, [sp, #16]
 8011a06:	9b07      	ldr	r3, [sp, #28]
 8011a08:	1bda      	subs	r2, r3, r7
 8011a0a:	d004      	beq.n	8011a16 <_dtoa_r+0x76e>
 8011a0c:	9904      	ldr	r1, [sp, #16]
 8011a0e:	4620      	mov	r0, r4
 8011a10:	f000 fd74 	bl	80124fc <__pow5mult>
 8011a14:	9004      	str	r0, [sp, #16]
 8011a16:	2101      	movs	r1, #1
 8011a18:	4620      	mov	r0, r4
 8011a1a:	f000 fcd0 	bl	80123be <__i2b>
 8011a1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011a20:	4607      	mov	r7, r0
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	f000 81d0 	beq.w	8011dc8 <_dtoa_r+0xb20>
 8011a28:	461a      	mov	r2, r3
 8011a2a:	4601      	mov	r1, r0
 8011a2c:	4620      	mov	r0, r4
 8011a2e:	f000 fd65 	bl	80124fc <__pow5mult>
 8011a32:	9b06      	ldr	r3, [sp, #24]
 8011a34:	2b01      	cmp	r3, #1
 8011a36:	4607      	mov	r7, r0
 8011a38:	dc40      	bgt.n	8011abc <_dtoa_r+0x814>
 8011a3a:	9b00      	ldr	r3, [sp, #0]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d139      	bne.n	8011ab4 <_dtoa_r+0x80c>
 8011a40:	9b01      	ldr	r3, [sp, #4]
 8011a42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d136      	bne.n	8011ab8 <_dtoa_r+0x810>
 8011a4a:	9b01      	ldr	r3, [sp, #4]
 8011a4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011a50:	0d1b      	lsrs	r3, r3, #20
 8011a52:	051b      	lsls	r3, r3, #20
 8011a54:	b12b      	cbz	r3, 8011a62 <_dtoa_r+0x7ba>
 8011a56:	9b05      	ldr	r3, [sp, #20]
 8011a58:	3301      	adds	r3, #1
 8011a5a:	9305      	str	r3, [sp, #20]
 8011a5c:	f108 0801 	add.w	r8, r8, #1
 8011a60:	2301      	movs	r3, #1
 8011a62:	9307      	str	r3, [sp, #28]
 8011a64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d12a      	bne.n	8011ac0 <_dtoa_r+0x818>
 8011a6a:	2001      	movs	r0, #1
 8011a6c:	e030      	b.n	8011ad0 <_dtoa_r+0x828>
 8011a6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011a70:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011a74:	e795      	b.n	80119a2 <_dtoa_r+0x6fa>
 8011a76:	9b07      	ldr	r3, [sp, #28]
 8011a78:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8011a7c:	42bb      	cmp	r3, r7
 8011a7e:	bfbf      	itttt	lt
 8011a80:	9b07      	ldrlt	r3, [sp, #28]
 8011a82:	9707      	strlt	r7, [sp, #28]
 8011a84:	1afa      	sublt	r2, r7, r3
 8011a86:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8011a88:	bfbb      	ittet	lt
 8011a8a:	189b      	addlt	r3, r3, r2
 8011a8c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8011a8e:	1bdf      	subge	r7, r3, r7
 8011a90:	2700      	movlt	r7, #0
 8011a92:	f1b9 0f00 	cmp.w	r9, #0
 8011a96:	bfb5      	itete	lt
 8011a98:	9b05      	ldrlt	r3, [sp, #20]
 8011a9a:	9d05      	ldrge	r5, [sp, #20]
 8011a9c:	eba3 0509 	sublt.w	r5, r3, r9
 8011aa0:	464b      	movge	r3, r9
 8011aa2:	bfb8      	it	lt
 8011aa4:	2300      	movlt	r3, #0
 8011aa6:	e77e      	b.n	80119a6 <_dtoa_r+0x6fe>
 8011aa8:	9f07      	ldr	r7, [sp, #28]
 8011aaa:	9d05      	ldr	r5, [sp, #20]
 8011aac:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8011aae:	e783      	b.n	80119b8 <_dtoa_r+0x710>
 8011ab0:	9a07      	ldr	r2, [sp, #28]
 8011ab2:	e7ab      	b.n	8011a0c <_dtoa_r+0x764>
 8011ab4:	2300      	movs	r3, #0
 8011ab6:	e7d4      	b.n	8011a62 <_dtoa_r+0x7ba>
 8011ab8:	9b00      	ldr	r3, [sp, #0]
 8011aba:	e7d2      	b.n	8011a62 <_dtoa_r+0x7ba>
 8011abc:	2300      	movs	r3, #0
 8011abe:	9307      	str	r3, [sp, #28]
 8011ac0:	693b      	ldr	r3, [r7, #16]
 8011ac2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8011ac6:	6918      	ldr	r0, [r3, #16]
 8011ac8:	f000 fc2b 	bl	8012322 <__hi0bits>
 8011acc:	f1c0 0020 	rsb	r0, r0, #32
 8011ad0:	4440      	add	r0, r8
 8011ad2:	f010 001f 	ands.w	r0, r0, #31
 8011ad6:	d047      	beq.n	8011b68 <_dtoa_r+0x8c0>
 8011ad8:	f1c0 0320 	rsb	r3, r0, #32
 8011adc:	2b04      	cmp	r3, #4
 8011ade:	dd3b      	ble.n	8011b58 <_dtoa_r+0x8b0>
 8011ae0:	9b05      	ldr	r3, [sp, #20]
 8011ae2:	f1c0 001c 	rsb	r0, r0, #28
 8011ae6:	4403      	add	r3, r0
 8011ae8:	9305      	str	r3, [sp, #20]
 8011aea:	4405      	add	r5, r0
 8011aec:	4480      	add	r8, r0
 8011aee:	9b05      	ldr	r3, [sp, #20]
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	dd05      	ble.n	8011b00 <_dtoa_r+0x858>
 8011af4:	461a      	mov	r2, r3
 8011af6:	9904      	ldr	r1, [sp, #16]
 8011af8:	4620      	mov	r0, r4
 8011afa:	f000 fd4d 	bl	8012598 <__lshift>
 8011afe:	9004      	str	r0, [sp, #16]
 8011b00:	f1b8 0f00 	cmp.w	r8, #0
 8011b04:	dd05      	ble.n	8011b12 <_dtoa_r+0x86a>
 8011b06:	4639      	mov	r1, r7
 8011b08:	4642      	mov	r2, r8
 8011b0a:	4620      	mov	r0, r4
 8011b0c:	f000 fd44 	bl	8012598 <__lshift>
 8011b10:	4607      	mov	r7, r0
 8011b12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011b14:	b353      	cbz	r3, 8011b6c <_dtoa_r+0x8c4>
 8011b16:	4639      	mov	r1, r7
 8011b18:	9804      	ldr	r0, [sp, #16]
 8011b1a:	f000 fd91 	bl	8012640 <__mcmp>
 8011b1e:	2800      	cmp	r0, #0
 8011b20:	da24      	bge.n	8011b6c <_dtoa_r+0x8c4>
 8011b22:	2300      	movs	r3, #0
 8011b24:	220a      	movs	r2, #10
 8011b26:	9904      	ldr	r1, [sp, #16]
 8011b28:	4620      	mov	r0, r4
 8011b2a:	f000 fbbf 	bl	80122ac <__multadd>
 8011b2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b30:	9004      	str	r0, [sp, #16]
 8011b32:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	f000 814d 	beq.w	8011dd6 <_dtoa_r+0xb2e>
 8011b3c:	2300      	movs	r3, #0
 8011b3e:	4631      	mov	r1, r6
 8011b40:	220a      	movs	r2, #10
 8011b42:	4620      	mov	r0, r4
 8011b44:	f000 fbb2 	bl	80122ac <__multadd>
 8011b48:	9b02      	ldr	r3, [sp, #8]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	4606      	mov	r6, r0
 8011b4e:	dc4f      	bgt.n	8011bf0 <_dtoa_r+0x948>
 8011b50:	9b06      	ldr	r3, [sp, #24]
 8011b52:	2b02      	cmp	r3, #2
 8011b54:	dd4c      	ble.n	8011bf0 <_dtoa_r+0x948>
 8011b56:	e011      	b.n	8011b7c <_dtoa_r+0x8d4>
 8011b58:	d0c9      	beq.n	8011aee <_dtoa_r+0x846>
 8011b5a:	9a05      	ldr	r2, [sp, #20]
 8011b5c:	331c      	adds	r3, #28
 8011b5e:	441a      	add	r2, r3
 8011b60:	9205      	str	r2, [sp, #20]
 8011b62:	441d      	add	r5, r3
 8011b64:	4498      	add	r8, r3
 8011b66:	e7c2      	b.n	8011aee <_dtoa_r+0x846>
 8011b68:	4603      	mov	r3, r0
 8011b6a:	e7f6      	b.n	8011b5a <_dtoa_r+0x8b2>
 8011b6c:	f1b9 0f00 	cmp.w	r9, #0
 8011b70:	dc38      	bgt.n	8011be4 <_dtoa_r+0x93c>
 8011b72:	9b06      	ldr	r3, [sp, #24]
 8011b74:	2b02      	cmp	r3, #2
 8011b76:	dd35      	ble.n	8011be4 <_dtoa_r+0x93c>
 8011b78:	f8cd 9008 	str.w	r9, [sp, #8]
 8011b7c:	9b02      	ldr	r3, [sp, #8]
 8011b7e:	b963      	cbnz	r3, 8011b9a <_dtoa_r+0x8f2>
 8011b80:	4639      	mov	r1, r7
 8011b82:	2205      	movs	r2, #5
 8011b84:	4620      	mov	r0, r4
 8011b86:	f000 fb91 	bl	80122ac <__multadd>
 8011b8a:	4601      	mov	r1, r0
 8011b8c:	4607      	mov	r7, r0
 8011b8e:	9804      	ldr	r0, [sp, #16]
 8011b90:	f000 fd56 	bl	8012640 <__mcmp>
 8011b94:	2800      	cmp	r0, #0
 8011b96:	f73f adcc 	bgt.w	8011732 <_dtoa_r+0x48a>
 8011b9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011b9c:	465d      	mov	r5, fp
 8011b9e:	ea6f 0a03 	mvn.w	sl, r3
 8011ba2:	f04f 0900 	mov.w	r9, #0
 8011ba6:	4639      	mov	r1, r7
 8011ba8:	4620      	mov	r0, r4
 8011baa:	f000 fb68 	bl	801227e <_Bfree>
 8011bae:	2e00      	cmp	r6, #0
 8011bb0:	f43f aeb7 	beq.w	8011922 <_dtoa_r+0x67a>
 8011bb4:	f1b9 0f00 	cmp.w	r9, #0
 8011bb8:	d005      	beq.n	8011bc6 <_dtoa_r+0x91e>
 8011bba:	45b1      	cmp	r9, r6
 8011bbc:	d003      	beq.n	8011bc6 <_dtoa_r+0x91e>
 8011bbe:	4649      	mov	r1, r9
 8011bc0:	4620      	mov	r0, r4
 8011bc2:	f000 fb5c 	bl	801227e <_Bfree>
 8011bc6:	4631      	mov	r1, r6
 8011bc8:	4620      	mov	r0, r4
 8011bca:	f000 fb58 	bl	801227e <_Bfree>
 8011bce:	e6a8      	b.n	8011922 <_dtoa_r+0x67a>
 8011bd0:	2700      	movs	r7, #0
 8011bd2:	463e      	mov	r6, r7
 8011bd4:	e7e1      	b.n	8011b9a <_dtoa_r+0x8f2>
 8011bd6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8011bda:	463e      	mov	r6, r7
 8011bdc:	e5a9      	b.n	8011732 <_dtoa_r+0x48a>
 8011bde:	bf00      	nop
 8011be0:	40240000 	.word	0x40240000
 8011be4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011be6:	f8cd 9008 	str.w	r9, [sp, #8]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	f000 80fa 	beq.w	8011de4 <_dtoa_r+0xb3c>
 8011bf0:	2d00      	cmp	r5, #0
 8011bf2:	dd05      	ble.n	8011c00 <_dtoa_r+0x958>
 8011bf4:	4631      	mov	r1, r6
 8011bf6:	462a      	mov	r2, r5
 8011bf8:	4620      	mov	r0, r4
 8011bfa:	f000 fccd 	bl	8012598 <__lshift>
 8011bfe:	4606      	mov	r6, r0
 8011c00:	9b07      	ldr	r3, [sp, #28]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d04c      	beq.n	8011ca0 <_dtoa_r+0x9f8>
 8011c06:	6871      	ldr	r1, [r6, #4]
 8011c08:	4620      	mov	r0, r4
 8011c0a:	f000 fb04 	bl	8012216 <_Balloc>
 8011c0e:	6932      	ldr	r2, [r6, #16]
 8011c10:	3202      	adds	r2, #2
 8011c12:	4605      	mov	r5, r0
 8011c14:	0092      	lsls	r2, r2, #2
 8011c16:	f106 010c 	add.w	r1, r6, #12
 8011c1a:	300c      	adds	r0, #12
 8011c1c:	f000 faf0 	bl	8012200 <memcpy>
 8011c20:	2201      	movs	r2, #1
 8011c22:	4629      	mov	r1, r5
 8011c24:	4620      	mov	r0, r4
 8011c26:	f000 fcb7 	bl	8012598 <__lshift>
 8011c2a:	9b00      	ldr	r3, [sp, #0]
 8011c2c:	f8cd b014 	str.w	fp, [sp, #20]
 8011c30:	f003 0301 	and.w	r3, r3, #1
 8011c34:	46b1      	mov	r9, r6
 8011c36:	9307      	str	r3, [sp, #28]
 8011c38:	4606      	mov	r6, r0
 8011c3a:	4639      	mov	r1, r7
 8011c3c:	9804      	ldr	r0, [sp, #16]
 8011c3e:	f7ff faa5 	bl	801118c <quorem>
 8011c42:	4649      	mov	r1, r9
 8011c44:	4605      	mov	r5, r0
 8011c46:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8011c4a:	9804      	ldr	r0, [sp, #16]
 8011c4c:	f000 fcf8 	bl	8012640 <__mcmp>
 8011c50:	4632      	mov	r2, r6
 8011c52:	9000      	str	r0, [sp, #0]
 8011c54:	4639      	mov	r1, r7
 8011c56:	4620      	mov	r0, r4
 8011c58:	f000 fd0c 	bl	8012674 <__mdiff>
 8011c5c:	68c3      	ldr	r3, [r0, #12]
 8011c5e:	4602      	mov	r2, r0
 8011c60:	bb03      	cbnz	r3, 8011ca4 <_dtoa_r+0x9fc>
 8011c62:	4601      	mov	r1, r0
 8011c64:	9008      	str	r0, [sp, #32]
 8011c66:	9804      	ldr	r0, [sp, #16]
 8011c68:	f000 fcea 	bl	8012640 <__mcmp>
 8011c6c:	9a08      	ldr	r2, [sp, #32]
 8011c6e:	4603      	mov	r3, r0
 8011c70:	4611      	mov	r1, r2
 8011c72:	4620      	mov	r0, r4
 8011c74:	9308      	str	r3, [sp, #32]
 8011c76:	f000 fb02 	bl	801227e <_Bfree>
 8011c7a:	9b08      	ldr	r3, [sp, #32]
 8011c7c:	b9a3      	cbnz	r3, 8011ca8 <_dtoa_r+0xa00>
 8011c7e:	9a06      	ldr	r2, [sp, #24]
 8011c80:	b992      	cbnz	r2, 8011ca8 <_dtoa_r+0xa00>
 8011c82:	9a07      	ldr	r2, [sp, #28]
 8011c84:	b982      	cbnz	r2, 8011ca8 <_dtoa_r+0xa00>
 8011c86:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011c8a:	d029      	beq.n	8011ce0 <_dtoa_r+0xa38>
 8011c8c:	9b00      	ldr	r3, [sp, #0]
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	dd01      	ble.n	8011c96 <_dtoa_r+0x9ee>
 8011c92:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8011c96:	9b05      	ldr	r3, [sp, #20]
 8011c98:	1c5d      	adds	r5, r3, #1
 8011c9a:	f883 8000 	strb.w	r8, [r3]
 8011c9e:	e782      	b.n	8011ba6 <_dtoa_r+0x8fe>
 8011ca0:	4630      	mov	r0, r6
 8011ca2:	e7c2      	b.n	8011c2a <_dtoa_r+0x982>
 8011ca4:	2301      	movs	r3, #1
 8011ca6:	e7e3      	b.n	8011c70 <_dtoa_r+0x9c8>
 8011ca8:	9a00      	ldr	r2, [sp, #0]
 8011caa:	2a00      	cmp	r2, #0
 8011cac:	db04      	blt.n	8011cb8 <_dtoa_r+0xa10>
 8011cae:	d125      	bne.n	8011cfc <_dtoa_r+0xa54>
 8011cb0:	9a06      	ldr	r2, [sp, #24]
 8011cb2:	bb1a      	cbnz	r2, 8011cfc <_dtoa_r+0xa54>
 8011cb4:	9a07      	ldr	r2, [sp, #28]
 8011cb6:	bb0a      	cbnz	r2, 8011cfc <_dtoa_r+0xa54>
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	ddec      	ble.n	8011c96 <_dtoa_r+0x9ee>
 8011cbc:	2201      	movs	r2, #1
 8011cbe:	9904      	ldr	r1, [sp, #16]
 8011cc0:	4620      	mov	r0, r4
 8011cc2:	f000 fc69 	bl	8012598 <__lshift>
 8011cc6:	4639      	mov	r1, r7
 8011cc8:	9004      	str	r0, [sp, #16]
 8011cca:	f000 fcb9 	bl	8012640 <__mcmp>
 8011cce:	2800      	cmp	r0, #0
 8011cd0:	dc03      	bgt.n	8011cda <_dtoa_r+0xa32>
 8011cd2:	d1e0      	bne.n	8011c96 <_dtoa_r+0x9ee>
 8011cd4:	f018 0f01 	tst.w	r8, #1
 8011cd8:	d0dd      	beq.n	8011c96 <_dtoa_r+0x9ee>
 8011cda:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011cde:	d1d8      	bne.n	8011c92 <_dtoa_r+0x9ea>
 8011ce0:	9b05      	ldr	r3, [sp, #20]
 8011ce2:	9a05      	ldr	r2, [sp, #20]
 8011ce4:	1c5d      	adds	r5, r3, #1
 8011ce6:	2339      	movs	r3, #57	; 0x39
 8011ce8:	7013      	strb	r3, [r2, #0]
 8011cea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011cee:	2b39      	cmp	r3, #57	; 0x39
 8011cf0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8011cf4:	d04f      	beq.n	8011d96 <_dtoa_r+0xaee>
 8011cf6:	3301      	adds	r3, #1
 8011cf8:	7013      	strb	r3, [r2, #0]
 8011cfa:	e754      	b.n	8011ba6 <_dtoa_r+0x8fe>
 8011cfc:	9a05      	ldr	r2, [sp, #20]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	f102 0501 	add.w	r5, r2, #1
 8011d04:	dd06      	ble.n	8011d14 <_dtoa_r+0xa6c>
 8011d06:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011d0a:	d0e9      	beq.n	8011ce0 <_dtoa_r+0xa38>
 8011d0c:	f108 0801 	add.w	r8, r8, #1
 8011d10:	9b05      	ldr	r3, [sp, #20]
 8011d12:	e7c2      	b.n	8011c9a <_dtoa_r+0x9f2>
 8011d14:	9a02      	ldr	r2, [sp, #8]
 8011d16:	f805 8c01 	strb.w	r8, [r5, #-1]
 8011d1a:	eba5 030b 	sub.w	r3, r5, fp
 8011d1e:	4293      	cmp	r3, r2
 8011d20:	d021      	beq.n	8011d66 <_dtoa_r+0xabe>
 8011d22:	2300      	movs	r3, #0
 8011d24:	220a      	movs	r2, #10
 8011d26:	9904      	ldr	r1, [sp, #16]
 8011d28:	4620      	mov	r0, r4
 8011d2a:	f000 fabf 	bl	80122ac <__multadd>
 8011d2e:	45b1      	cmp	r9, r6
 8011d30:	9004      	str	r0, [sp, #16]
 8011d32:	f04f 0300 	mov.w	r3, #0
 8011d36:	f04f 020a 	mov.w	r2, #10
 8011d3a:	4649      	mov	r1, r9
 8011d3c:	4620      	mov	r0, r4
 8011d3e:	d105      	bne.n	8011d4c <_dtoa_r+0xaa4>
 8011d40:	f000 fab4 	bl	80122ac <__multadd>
 8011d44:	4681      	mov	r9, r0
 8011d46:	4606      	mov	r6, r0
 8011d48:	9505      	str	r5, [sp, #20]
 8011d4a:	e776      	b.n	8011c3a <_dtoa_r+0x992>
 8011d4c:	f000 faae 	bl	80122ac <__multadd>
 8011d50:	4631      	mov	r1, r6
 8011d52:	4681      	mov	r9, r0
 8011d54:	2300      	movs	r3, #0
 8011d56:	220a      	movs	r2, #10
 8011d58:	4620      	mov	r0, r4
 8011d5a:	f000 faa7 	bl	80122ac <__multadd>
 8011d5e:	4606      	mov	r6, r0
 8011d60:	e7f2      	b.n	8011d48 <_dtoa_r+0xaa0>
 8011d62:	f04f 0900 	mov.w	r9, #0
 8011d66:	2201      	movs	r2, #1
 8011d68:	9904      	ldr	r1, [sp, #16]
 8011d6a:	4620      	mov	r0, r4
 8011d6c:	f000 fc14 	bl	8012598 <__lshift>
 8011d70:	4639      	mov	r1, r7
 8011d72:	9004      	str	r0, [sp, #16]
 8011d74:	f000 fc64 	bl	8012640 <__mcmp>
 8011d78:	2800      	cmp	r0, #0
 8011d7a:	dcb6      	bgt.n	8011cea <_dtoa_r+0xa42>
 8011d7c:	d102      	bne.n	8011d84 <_dtoa_r+0xadc>
 8011d7e:	f018 0f01 	tst.w	r8, #1
 8011d82:	d1b2      	bne.n	8011cea <_dtoa_r+0xa42>
 8011d84:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011d88:	2b30      	cmp	r3, #48	; 0x30
 8011d8a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8011d8e:	f47f af0a 	bne.w	8011ba6 <_dtoa_r+0x8fe>
 8011d92:	4615      	mov	r5, r2
 8011d94:	e7f6      	b.n	8011d84 <_dtoa_r+0xadc>
 8011d96:	4593      	cmp	fp, r2
 8011d98:	d105      	bne.n	8011da6 <_dtoa_r+0xafe>
 8011d9a:	2331      	movs	r3, #49	; 0x31
 8011d9c:	f10a 0a01 	add.w	sl, sl, #1
 8011da0:	f88b 3000 	strb.w	r3, [fp]
 8011da4:	e6ff      	b.n	8011ba6 <_dtoa_r+0x8fe>
 8011da6:	4615      	mov	r5, r2
 8011da8:	e79f      	b.n	8011cea <_dtoa_r+0xa42>
 8011daa:	f8df b064 	ldr.w	fp, [pc, #100]	; 8011e10 <_dtoa_r+0xb68>
 8011dae:	e007      	b.n	8011dc0 <_dtoa_r+0xb18>
 8011db0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011db2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8011e14 <_dtoa_r+0xb6c>
 8011db6:	b11b      	cbz	r3, 8011dc0 <_dtoa_r+0xb18>
 8011db8:	f10b 0308 	add.w	r3, fp, #8
 8011dbc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011dbe:	6013      	str	r3, [r2, #0]
 8011dc0:	4658      	mov	r0, fp
 8011dc2:	b017      	add	sp, #92	; 0x5c
 8011dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dc8:	9b06      	ldr	r3, [sp, #24]
 8011dca:	2b01      	cmp	r3, #1
 8011dcc:	f77f ae35 	ble.w	8011a3a <_dtoa_r+0x792>
 8011dd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011dd2:	9307      	str	r3, [sp, #28]
 8011dd4:	e649      	b.n	8011a6a <_dtoa_r+0x7c2>
 8011dd6:	9b02      	ldr	r3, [sp, #8]
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	dc03      	bgt.n	8011de4 <_dtoa_r+0xb3c>
 8011ddc:	9b06      	ldr	r3, [sp, #24]
 8011dde:	2b02      	cmp	r3, #2
 8011de0:	f73f aecc 	bgt.w	8011b7c <_dtoa_r+0x8d4>
 8011de4:	465d      	mov	r5, fp
 8011de6:	4639      	mov	r1, r7
 8011de8:	9804      	ldr	r0, [sp, #16]
 8011dea:	f7ff f9cf 	bl	801118c <quorem>
 8011dee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8011df2:	f805 8b01 	strb.w	r8, [r5], #1
 8011df6:	9a02      	ldr	r2, [sp, #8]
 8011df8:	eba5 030b 	sub.w	r3, r5, fp
 8011dfc:	429a      	cmp	r2, r3
 8011dfe:	ddb0      	ble.n	8011d62 <_dtoa_r+0xaba>
 8011e00:	2300      	movs	r3, #0
 8011e02:	220a      	movs	r2, #10
 8011e04:	9904      	ldr	r1, [sp, #16]
 8011e06:	4620      	mov	r0, r4
 8011e08:	f000 fa50 	bl	80122ac <__multadd>
 8011e0c:	9004      	str	r0, [sp, #16]
 8011e0e:	e7ea      	b.n	8011de6 <_dtoa_r+0xb3e>
 8011e10:	08015a9c 	.word	0x08015a9c
 8011e14:	0801580e 	.word	0x0801580e

08011e18 <__sflush_r>:
 8011e18:	898a      	ldrh	r2, [r1, #12]
 8011e1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e1e:	4605      	mov	r5, r0
 8011e20:	0710      	lsls	r0, r2, #28
 8011e22:	460c      	mov	r4, r1
 8011e24:	d458      	bmi.n	8011ed8 <__sflush_r+0xc0>
 8011e26:	684b      	ldr	r3, [r1, #4]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	dc05      	bgt.n	8011e38 <__sflush_r+0x20>
 8011e2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	dc02      	bgt.n	8011e38 <__sflush_r+0x20>
 8011e32:	2000      	movs	r0, #0
 8011e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011e3a:	2e00      	cmp	r6, #0
 8011e3c:	d0f9      	beq.n	8011e32 <__sflush_r+0x1a>
 8011e3e:	2300      	movs	r3, #0
 8011e40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011e44:	682f      	ldr	r7, [r5, #0]
 8011e46:	6a21      	ldr	r1, [r4, #32]
 8011e48:	602b      	str	r3, [r5, #0]
 8011e4a:	d032      	beq.n	8011eb2 <__sflush_r+0x9a>
 8011e4c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011e4e:	89a3      	ldrh	r3, [r4, #12]
 8011e50:	075a      	lsls	r2, r3, #29
 8011e52:	d505      	bpl.n	8011e60 <__sflush_r+0x48>
 8011e54:	6863      	ldr	r3, [r4, #4]
 8011e56:	1ac0      	subs	r0, r0, r3
 8011e58:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011e5a:	b10b      	cbz	r3, 8011e60 <__sflush_r+0x48>
 8011e5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011e5e:	1ac0      	subs	r0, r0, r3
 8011e60:	2300      	movs	r3, #0
 8011e62:	4602      	mov	r2, r0
 8011e64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011e66:	6a21      	ldr	r1, [r4, #32]
 8011e68:	4628      	mov	r0, r5
 8011e6a:	47b0      	blx	r6
 8011e6c:	1c43      	adds	r3, r0, #1
 8011e6e:	89a3      	ldrh	r3, [r4, #12]
 8011e70:	d106      	bne.n	8011e80 <__sflush_r+0x68>
 8011e72:	6829      	ldr	r1, [r5, #0]
 8011e74:	291d      	cmp	r1, #29
 8011e76:	d848      	bhi.n	8011f0a <__sflush_r+0xf2>
 8011e78:	4a29      	ldr	r2, [pc, #164]	; (8011f20 <__sflush_r+0x108>)
 8011e7a:	40ca      	lsrs	r2, r1
 8011e7c:	07d6      	lsls	r6, r2, #31
 8011e7e:	d544      	bpl.n	8011f0a <__sflush_r+0xf2>
 8011e80:	2200      	movs	r2, #0
 8011e82:	6062      	str	r2, [r4, #4]
 8011e84:	04d9      	lsls	r1, r3, #19
 8011e86:	6922      	ldr	r2, [r4, #16]
 8011e88:	6022      	str	r2, [r4, #0]
 8011e8a:	d504      	bpl.n	8011e96 <__sflush_r+0x7e>
 8011e8c:	1c42      	adds	r2, r0, #1
 8011e8e:	d101      	bne.n	8011e94 <__sflush_r+0x7c>
 8011e90:	682b      	ldr	r3, [r5, #0]
 8011e92:	b903      	cbnz	r3, 8011e96 <__sflush_r+0x7e>
 8011e94:	6560      	str	r0, [r4, #84]	; 0x54
 8011e96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011e98:	602f      	str	r7, [r5, #0]
 8011e9a:	2900      	cmp	r1, #0
 8011e9c:	d0c9      	beq.n	8011e32 <__sflush_r+0x1a>
 8011e9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011ea2:	4299      	cmp	r1, r3
 8011ea4:	d002      	beq.n	8011eac <__sflush_r+0x94>
 8011ea6:	4628      	mov	r0, r5
 8011ea8:	f000 fc9e 	bl	80127e8 <_free_r>
 8011eac:	2000      	movs	r0, #0
 8011eae:	6360      	str	r0, [r4, #52]	; 0x34
 8011eb0:	e7c0      	b.n	8011e34 <__sflush_r+0x1c>
 8011eb2:	2301      	movs	r3, #1
 8011eb4:	4628      	mov	r0, r5
 8011eb6:	47b0      	blx	r6
 8011eb8:	1c41      	adds	r1, r0, #1
 8011eba:	d1c8      	bne.n	8011e4e <__sflush_r+0x36>
 8011ebc:	682b      	ldr	r3, [r5, #0]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d0c5      	beq.n	8011e4e <__sflush_r+0x36>
 8011ec2:	2b1d      	cmp	r3, #29
 8011ec4:	d001      	beq.n	8011eca <__sflush_r+0xb2>
 8011ec6:	2b16      	cmp	r3, #22
 8011ec8:	d101      	bne.n	8011ece <__sflush_r+0xb6>
 8011eca:	602f      	str	r7, [r5, #0]
 8011ecc:	e7b1      	b.n	8011e32 <__sflush_r+0x1a>
 8011ece:	89a3      	ldrh	r3, [r4, #12]
 8011ed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ed4:	81a3      	strh	r3, [r4, #12]
 8011ed6:	e7ad      	b.n	8011e34 <__sflush_r+0x1c>
 8011ed8:	690f      	ldr	r7, [r1, #16]
 8011eda:	2f00      	cmp	r7, #0
 8011edc:	d0a9      	beq.n	8011e32 <__sflush_r+0x1a>
 8011ede:	0793      	lsls	r3, r2, #30
 8011ee0:	680e      	ldr	r6, [r1, #0]
 8011ee2:	bf08      	it	eq
 8011ee4:	694b      	ldreq	r3, [r1, #20]
 8011ee6:	600f      	str	r7, [r1, #0]
 8011ee8:	bf18      	it	ne
 8011eea:	2300      	movne	r3, #0
 8011eec:	eba6 0807 	sub.w	r8, r6, r7
 8011ef0:	608b      	str	r3, [r1, #8]
 8011ef2:	f1b8 0f00 	cmp.w	r8, #0
 8011ef6:	dd9c      	ble.n	8011e32 <__sflush_r+0x1a>
 8011ef8:	4643      	mov	r3, r8
 8011efa:	463a      	mov	r2, r7
 8011efc:	6a21      	ldr	r1, [r4, #32]
 8011efe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011f00:	4628      	mov	r0, r5
 8011f02:	47b0      	blx	r6
 8011f04:	2800      	cmp	r0, #0
 8011f06:	dc06      	bgt.n	8011f16 <__sflush_r+0xfe>
 8011f08:	89a3      	ldrh	r3, [r4, #12]
 8011f0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f0e:	81a3      	strh	r3, [r4, #12]
 8011f10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011f14:	e78e      	b.n	8011e34 <__sflush_r+0x1c>
 8011f16:	4407      	add	r7, r0
 8011f18:	eba8 0800 	sub.w	r8, r8, r0
 8011f1c:	e7e9      	b.n	8011ef2 <__sflush_r+0xda>
 8011f1e:	bf00      	nop
 8011f20:	20400001 	.word	0x20400001

08011f24 <_fflush_r>:
 8011f24:	b538      	push	{r3, r4, r5, lr}
 8011f26:	690b      	ldr	r3, [r1, #16]
 8011f28:	4605      	mov	r5, r0
 8011f2a:	460c      	mov	r4, r1
 8011f2c:	b1db      	cbz	r3, 8011f66 <_fflush_r+0x42>
 8011f2e:	b118      	cbz	r0, 8011f38 <_fflush_r+0x14>
 8011f30:	6983      	ldr	r3, [r0, #24]
 8011f32:	b90b      	cbnz	r3, 8011f38 <_fflush_r+0x14>
 8011f34:	f000 f860 	bl	8011ff8 <__sinit>
 8011f38:	4b0c      	ldr	r3, [pc, #48]	; (8011f6c <_fflush_r+0x48>)
 8011f3a:	429c      	cmp	r4, r3
 8011f3c:	d109      	bne.n	8011f52 <_fflush_r+0x2e>
 8011f3e:	686c      	ldr	r4, [r5, #4]
 8011f40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f44:	b17b      	cbz	r3, 8011f66 <_fflush_r+0x42>
 8011f46:	4621      	mov	r1, r4
 8011f48:	4628      	mov	r0, r5
 8011f4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011f4e:	f7ff bf63 	b.w	8011e18 <__sflush_r>
 8011f52:	4b07      	ldr	r3, [pc, #28]	; (8011f70 <_fflush_r+0x4c>)
 8011f54:	429c      	cmp	r4, r3
 8011f56:	d101      	bne.n	8011f5c <_fflush_r+0x38>
 8011f58:	68ac      	ldr	r4, [r5, #8]
 8011f5a:	e7f1      	b.n	8011f40 <_fflush_r+0x1c>
 8011f5c:	4b05      	ldr	r3, [pc, #20]	; (8011f74 <_fflush_r+0x50>)
 8011f5e:	429c      	cmp	r4, r3
 8011f60:	bf08      	it	eq
 8011f62:	68ec      	ldreq	r4, [r5, #12]
 8011f64:	e7ec      	b.n	8011f40 <_fflush_r+0x1c>
 8011f66:	2000      	movs	r0, #0
 8011f68:	bd38      	pop	{r3, r4, r5, pc}
 8011f6a:	bf00      	nop
 8011f6c:	0801583c 	.word	0x0801583c
 8011f70:	0801585c 	.word	0x0801585c
 8011f74:	0801581c 	.word	0x0801581c

08011f78 <std>:
 8011f78:	2300      	movs	r3, #0
 8011f7a:	b510      	push	{r4, lr}
 8011f7c:	4604      	mov	r4, r0
 8011f7e:	e9c0 3300 	strd	r3, r3, [r0]
 8011f82:	6083      	str	r3, [r0, #8]
 8011f84:	8181      	strh	r1, [r0, #12]
 8011f86:	6643      	str	r3, [r0, #100]	; 0x64
 8011f88:	81c2      	strh	r2, [r0, #14]
 8011f8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011f8e:	6183      	str	r3, [r0, #24]
 8011f90:	4619      	mov	r1, r3
 8011f92:	2208      	movs	r2, #8
 8011f94:	305c      	adds	r0, #92	; 0x5c
 8011f96:	f7fe fb15 	bl	80105c4 <memset>
 8011f9a:	4b05      	ldr	r3, [pc, #20]	; (8011fb0 <std+0x38>)
 8011f9c:	6263      	str	r3, [r4, #36]	; 0x24
 8011f9e:	4b05      	ldr	r3, [pc, #20]	; (8011fb4 <std+0x3c>)
 8011fa0:	62a3      	str	r3, [r4, #40]	; 0x28
 8011fa2:	4b05      	ldr	r3, [pc, #20]	; (8011fb8 <std+0x40>)
 8011fa4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011fa6:	4b05      	ldr	r3, [pc, #20]	; (8011fbc <std+0x44>)
 8011fa8:	6224      	str	r4, [r4, #32]
 8011faa:	6323      	str	r3, [r4, #48]	; 0x30
 8011fac:	bd10      	pop	{r4, pc}
 8011fae:	bf00      	nop
 8011fb0:	08012e7d 	.word	0x08012e7d
 8011fb4:	08012e9f 	.word	0x08012e9f
 8011fb8:	08012ed7 	.word	0x08012ed7
 8011fbc:	08012efb 	.word	0x08012efb

08011fc0 <_cleanup_r>:
 8011fc0:	4901      	ldr	r1, [pc, #4]	; (8011fc8 <_cleanup_r+0x8>)
 8011fc2:	f000 b885 	b.w	80120d0 <_fwalk_reent>
 8011fc6:	bf00      	nop
 8011fc8:	08011f25 	.word	0x08011f25

08011fcc <__sfmoreglue>:
 8011fcc:	b570      	push	{r4, r5, r6, lr}
 8011fce:	1e4a      	subs	r2, r1, #1
 8011fd0:	2568      	movs	r5, #104	; 0x68
 8011fd2:	4355      	muls	r5, r2
 8011fd4:	460e      	mov	r6, r1
 8011fd6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011fda:	f000 fc53 	bl	8012884 <_malloc_r>
 8011fde:	4604      	mov	r4, r0
 8011fe0:	b140      	cbz	r0, 8011ff4 <__sfmoreglue+0x28>
 8011fe2:	2100      	movs	r1, #0
 8011fe4:	e9c0 1600 	strd	r1, r6, [r0]
 8011fe8:	300c      	adds	r0, #12
 8011fea:	60a0      	str	r0, [r4, #8]
 8011fec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011ff0:	f7fe fae8 	bl	80105c4 <memset>
 8011ff4:	4620      	mov	r0, r4
 8011ff6:	bd70      	pop	{r4, r5, r6, pc}

08011ff8 <__sinit>:
 8011ff8:	6983      	ldr	r3, [r0, #24]
 8011ffa:	b510      	push	{r4, lr}
 8011ffc:	4604      	mov	r4, r0
 8011ffe:	bb33      	cbnz	r3, 801204e <__sinit+0x56>
 8012000:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8012004:	6503      	str	r3, [r0, #80]	; 0x50
 8012006:	4b12      	ldr	r3, [pc, #72]	; (8012050 <__sinit+0x58>)
 8012008:	4a12      	ldr	r2, [pc, #72]	; (8012054 <__sinit+0x5c>)
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	6282      	str	r2, [r0, #40]	; 0x28
 801200e:	4298      	cmp	r0, r3
 8012010:	bf04      	itt	eq
 8012012:	2301      	moveq	r3, #1
 8012014:	6183      	streq	r3, [r0, #24]
 8012016:	f000 f81f 	bl	8012058 <__sfp>
 801201a:	6060      	str	r0, [r4, #4]
 801201c:	4620      	mov	r0, r4
 801201e:	f000 f81b 	bl	8012058 <__sfp>
 8012022:	60a0      	str	r0, [r4, #8]
 8012024:	4620      	mov	r0, r4
 8012026:	f000 f817 	bl	8012058 <__sfp>
 801202a:	2200      	movs	r2, #0
 801202c:	60e0      	str	r0, [r4, #12]
 801202e:	2104      	movs	r1, #4
 8012030:	6860      	ldr	r0, [r4, #4]
 8012032:	f7ff ffa1 	bl	8011f78 <std>
 8012036:	2201      	movs	r2, #1
 8012038:	2109      	movs	r1, #9
 801203a:	68a0      	ldr	r0, [r4, #8]
 801203c:	f7ff ff9c 	bl	8011f78 <std>
 8012040:	2202      	movs	r2, #2
 8012042:	2112      	movs	r1, #18
 8012044:	68e0      	ldr	r0, [r4, #12]
 8012046:	f7ff ff97 	bl	8011f78 <std>
 801204a:	2301      	movs	r3, #1
 801204c:	61a3      	str	r3, [r4, #24]
 801204e:	bd10      	pop	{r4, pc}
 8012050:	080157d8 	.word	0x080157d8
 8012054:	08011fc1 	.word	0x08011fc1

08012058 <__sfp>:
 8012058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801205a:	4b1b      	ldr	r3, [pc, #108]	; (80120c8 <__sfp+0x70>)
 801205c:	681e      	ldr	r6, [r3, #0]
 801205e:	69b3      	ldr	r3, [r6, #24]
 8012060:	4607      	mov	r7, r0
 8012062:	b913      	cbnz	r3, 801206a <__sfp+0x12>
 8012064:	4630      	mov	r0, r6
 8012066:	f7ff ffc7 	bl	8011ff8 <__sinit>
 801206a:	3648      	adds	r6, #72	; 0x48
 801206c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012070:	3b01      	subs	r3, #1
 8012072:	d503      	bpl.n	801207c <__sfp+0x24>
 8012074:	6833      	ldr	r3, [r6, #0]
 8012076:	b133      	cbz	r3, 8012086 <__sfp+0x2e>
 8012078:	6836      	ldr	r6, [r6, #0]
 801207a:	e7f7      	b.n	801206c <__sfp+0x14>
 801207c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012080:	b16d      	cbz	r5, 801209e <__sfp+0x46>
 8012082:	3468      	adds	r4, #104	; 0x68
 8012084:	e7f4      	b.n	8012070 <__sfp+0x18>
 8012086:	2104      	movs	r1, #4
 8012088:	4638      	mov	r0, r7
 801208a:	f7ff ff9f 	bl	8011fcc <__sfmoreglue>
 801208e:	6030      	str	r0, [r6, #0]
 8012090:	2800      	cmp	r0, #0
 8012092:	d1f1      	bne.n	8012078 <__sfp+0x20>
 8012094:	230c      	movs	r3, #12
 8012096:	603b      	str	r3, [r7, #0]
 8012098:	4604      	mov	r4, r0
 801209a:	4620      	mov	r0, r4
 801209c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801209e:	4b0b      	ldr	r3, [pc, #44]	; (80120cc <__sfp+0x74>)
 80120a0:	6665      	str	r5, [r4, #100]	; 0x64
 80120a2:	e9c4 5500 	strd	r5, r5, [r4]
 80120a6:	60a5      	str	r5, [r4, #8]
 80120a8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80120ac:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80120b0:	2208      	movs	r2, #8
 80120b2:	4629      	mov	r1, r5
 80120b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80120b8:	f7fe fa84 	bl	80105c4 <memset>
 80120bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80120c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80120c4:	e7e9      	b.n	801209a <__sfp+0x42>
 80120c6:	bf00      	nop
 80120c8:	080157d8 	.word	0x080157d8
 80120cc:	ffff0001 	.word	0xffff0001

080120d0 <_fwalk_reent>:
 80120d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80120d4:	4680      	mov	r8, r0
 80120d6:	4689      	mov	r9, r1
 80120d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80120dc:	2600      	movs	r6, #0
 80120de:	b914      	cbnz	r4, 80120e6 <_fwalk_reent+0x16>
 80120e0:	4630      	mov	r0, r6
 80120e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80120e6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80120ea:	3f01      	subs	r7, #1
 80120ec:	d501      	bpl.n	80120f2 <_fwalk_reent+0x22>
 80120ee:	6824      	ldr	r4, [r4, #0]
 80120f0:	e7f5      	b.n	80120de <_fwalk_reent+0xe>
 80120f2:	89ab      	ldrh	r3, [r5, #12]
 80120f4:	2b01      	cmp	r3, #1
 80120f6:	d907      	bls.n	8012108 <_fwalk_reent+0x38>
 80120f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80120fc:	3301      	adds	r3, #1
 80120fe:	d003      	beq.n	8012108 <_fwalk_reent+0x38>
 8012100:	4629      	mov	r1, r5
 8012102:	4640      	mov	r0, r8
 8012104:	47c8      	blx	r9
 8012106:	4306      	orrs	r6, r0
 8012108:	3568      	adds	r5, #104	; 0x68
 801210a:	e7ee      	b.n	80120ea <_fwalk_reent+0x1a>

0801210c <_localeconv_r>:
 801210c:	4b04      	ldr	r3, [pc, #16]	; (8012120 <_localeconv_r+0x14>)
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	6a18      	ldr	r0, [r3, #32]
 8012112:	4b04      	ldr	r3, [pc, #16]	; (8012124 <_localeconv_r+0x18>)
 8012114:	2800      	cmp	r0, #0
 8012116:	bf08      	it	eq
 8012118:	4618      	moveq	r0, r3
 801211a:	30f0      	adds	r0, #240	; 0xf0
 801211c:	4770      	bx	lr
 801211e:	bf00      	nop
 8012120:	20001c38 	.word	0x20001c38
 8012124:	20001c9c 	.word	0x20001c9c

08012128 <__swhatbuf_r>:
 8012128:	b570      	push	{r4, r5, r6, lr}
 801212a:	460e      	mov	r6, r1
 801212c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012130:	2900      	cmp	r1, #0
 8012132:	b096      	sub	sp, #88	; 0x58
 8012134:	4614      	mov	r4, r2
 8012136:	461d      	mov	r5, r3
 8012138:	da07      	bge.n	801214a <__swhatbuf_r+0x22>
 801213a:	2300      	movs	r3, #0
 801213c:	602b      	str	r3, [r5, #0]
 801213e:	89b3      	ldrh	r3, [r6, #12]
 8012140:	061a      	lsls	r2, r3, #24
 8012142:	d410      	bmi.n	8012166 <__swhatbuf_r+0x3e>
 8012144:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012148:	e00e      	b.n	8012168 <__swhatbuf_r+0x40>
 801214a:	466a      	mov	r2, sp
 801214c:	f000 fefc 	bl	8012f48 <_fstat_r>
 8012150:	2800      	cmp	r0, #0
 8012152:	dbf2      	blt.n	801213a <__swhatbuf_r+0x12>
 8012154:	9a01      	ldr	r2, [sp, #4]
 8012156:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801215a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801215e:	425a      	negs	r2, r3
 8012160:	415a      	adcs	r2, r3
 8012162:	602a      	str	r2, [r5, #0]
 8012164:	e7ee      	b.n	8012144 <__swhatbuf_r+0x1c>
 8012166:	2340      	movs	r3, #64	; 0x40
 8012168:	2000      	movs	r0, #0
 801216a:	6023      	str	r3, [r4, #0]
 801216c:	b016      	add	sp, #88	; 0x58
 801216e:	bd70      	pop	{r4, r5, r6, pc}

08012170 <__smakebuf_r>:
 8012170:	898b      	ldrh	r3, [r1, #12]
 8012172:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012174:	079d      	lsls	r5, r3, #30
 8012176:	4606      	mov	r6, r0
 8012178:	460c      	mov	r4, r1
 801217a:	d507      	bpl.n	801218c <__smakebuf_r+0x1c>
 801217c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012180:	6023      	str	r3, [r4, #0]
 8012182:	6123      	str	r3, [r4, #16]
 8012184:	2301      	movs	r3, #1
 8012186:	6163      	str	r3, [r4, #20]
 8012188:	b002      	add	sp, #8
 801218a:	bd70      	pop	{r4, r5, r6, pc}
 801218c:	ab01      	add	r3, sp, #4
 801218e:	466a      	mov	r2, sp
 8012190:	f7ff ffca 	bl	8012128 <__swhatbuf_r>
 8012194:	9900      	ldr	r1, [sp, #0]
 8012196:	4605      	mov	r5, r0
 8012198:	4630      	mov	r0, r6
 801219a:	f000 fb73 	bl	8012884 <_malloc_r>
 801219e:	b948      	cbnz	r0, 80121b4 <__smakebuf_r+0x44>
 80121a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80121a4:	059a      	lsls	r2, r3, #22
 80121a6:	d4ef      	bmi.n	8012188 <__smakebuf_r+0x18>
 80121a8:	f023 0303 	bic.w	r3, r3, #3
 80121ac:	f043 0302 	orr.w	r3, r3, #2
 80121b0:	81a3      	strh	r3, [r4, #12]
 80121b2:	e7e3      	b.n	801217c <__smakebuf_r+0xc>
 80121b4:	4b0d      	ldr	r3, [pc, #52]	; (80121ec <__smakebuf_r+0x7c>)
 80121b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80121b8:	89a3      	ldrh	r3, [r4, #12]
 80121ba:	6020      	str	r0, [r4, #0]
 80121bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80121c0:	81a3      	strh	r3, [r4, #12]
 80121c2:	9b00      	ldr	r3, [sp, #0]
 80121c4:	6163      	str	r3, [r4, #20]
 80121c6:	9b01      	ldr	r3, [sp, #4]
 80121c8:	6120      	str	r0, [r4, #16]
 80121ca:	b15b      	cbz	r3, 80121e4 <__smakebuf_r+0x74>
 80121cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80121d0:	4630      	mov	r0, r6
 80121d2:	f000 fecb 	bl	8012f6c <_isatty_r>
 80121d6:	b128      	cbz	r0, 80121e4 <__smakebuf_r+0x74>
 80121d8:	89a3      	ldrh	r3, [r4, #12]
 80121da:	f023 0303 	bic.w	r3, r3, #3
 80121de:	f043 0301 	orr.w	r3, r3, #1
 80121e2:	81a3      	strh	r3, [r4, #12]
 80121e4:	89a3      	ldrh	r3, [r4, #12]
 80121e6:	431d      	orrs	r5, r3
 80121e8:	81a5      	strh	r5, [r4, #12]
 80121ea:	e7cd      	b.n	8012188 <__smakebuf_r+0x18>
 80121ec:	08011fc1 	.word	0x08011fc1

080121f0 <malloc>:
 80121f0:	4b02      	ldr	r3, [pc, #8]	; (80121fc <malloc+0xc>)
 80121f2:	4601      	mov	r1, r0
 80121f4:	6818      	ldr	r0, [r3, #0]
 80121f6:	f000 bb45 	b.w	8012884 <_malloc_r>
 80121fa:	bf00      	nop
 80121fc:	20001c38 	.word	0x20001c38

08012200 <memcpy>:
 8012200:	b510      	push	{r4, lr}
 8012202:	1e43      	subs	r3, r0, #1
 8012204:	440a      	add	r2, r1
 8012206:	4291      	cmp	r1, r2
 8012208:	d100      	bne.n	801220c <memcpy+0xc>
 801220a:	bd10      	pop	{r4, pc}
 801220c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012210:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012214:	e7f7      	b.n	8012206 <memcpy+0x6>

08012216 <_Balloc>:
 8012216:	b570      	push	{r4, r5, r6, lr}
 8012218:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801221a:	4604      	mov	r4, r0
 801221c:	460e      	mov	r6, r1
 801221e:	b93d      	cbnz	r5, 8012230 <_Balloc+0x1a>
 8012220:	2010      	movs	r0, #16
 8012222:	f7ff ffe5 	bl	80121f0 <malloc>
 8012226:	6260      	str	r0, [r4, #36]	; 0x24
 8012228:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801222c:	6005      	str	r5, [r0, #0]
 801222e:	60c5      	str	r5, [r0, #12]
 8012230:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8012232:	68eb      	ldr	r3, [r5, #12]
 8012234:	b183      	cbz	r3, 8012258 <_Balloc+0x42>
 8012236:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012238:	68db      	ldr	r3, [r3, #12]
 801223a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801223e:	b9b8      	cbnz	r0, 8012270 <_Balloc+0x5a>
 8012240:	2101      	movs	r1, #1
 8012242:	fa01 f506 	lsl.w	r5, r1, r6
 8012246:	1d6a      	adds	r2, r5, #5
 8012248:	0092      	lsls	r2, r2, #2
 801224a:	4620      	mov	r0, r4
 801224c:	f000 fabe 	bl	80127cc <_calloc_r>
 8012250:	b160      	cbz	r0, 801226c <_Balloc+0x56>
 8012252:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8012256:	e00e      	b.n	8012276 <_Balloc+0x60>
 8012258:	2221      	movs	r2, #33	; 0x21
 801225a:	2104      	movs	r1, #4
 801225c:	4620      	mov	r0, r4
 801225e:	f000 fab5 	bl	80127cc <_calloc_r>
 8012262:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012264:	60e8      	str	r0, [r5, #12]
 8012266:	68db      	ldr	r3, [r3, #12]
 8012268:	2b00      	cmp	r3, #0
 801226a:	d1e4      	bne.n	8012236 <_Balloc+0x20>
 801226c:	2000      	movs	r0, #0
 801226e:	bd70      	pop	{r4, r5, r6, pc}
 8012270:	6802      	ldr	r2, [r0, #0]
 8012272:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8012276:	2300      	movs	r3, #0
 8012278:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801227c:	e7f7      	b.n	801226e <_Balloc+0x58>

0801227e <_Bfree>:
 801227e:	b570      	push	{r4, r5, r6, lr}
 8012280:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8012282:	4606      	mov	r6, r0
 8012284:	460d      	mov	r5, r1
 8012286:	b93c      	cbnz	r4, 8012298 <_Bfree+0x1a>
 8012288:	2010      	movs	r0, #16
 801228a:	f7ff ffb1 	bl	80121f0 <malloc>
 801228e:	6270      	str	r0, [r6, #36]	; 0x24
 8012290:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012294:	6004      	str	r4, [r0, #0]
 8012296:	60c4      	str	r4, [r0, #12]
 8012298:	b13d      	cbz	r5, 80122aa <_Bfree+0x2c>
 801229a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801229c:	686a      	ldr	r2, [r5, #4]
 801229e:	68db      	ldr	r3, [r3, #12]
 80122a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80122a4:	6029      	str	r1, [r5, #0]
 80122a6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80122aa:	bd70      	pop	{r4, r5, r6, pc}

080122ac <__multadd>:
 80122ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122b0:	690d      	ldr	r5, [r1, #16]
 80122b2:	461f      	mov	r7, r3
 80122b4:	4606      	mov	r6, r0
 80122b6:	460c      	mov	r4, r1
 80122b8:	f101 0c14 	add.w	ip, r1, #20
 80122bc:	2300      	movs	r3, #0
 80122be:	f8dc 0000 	ldr.w	r0, [ip]
 80122c2:	b281      	uxth	r1, r0
 80122c4:	fb02 7101 	mla	r1, r2, r1, r7
 80122c8:	0c0f      	lsrs	r7, r1, #16
 80122ca:	0c00      	lsrs	r0, r0, #16
 80122cc:	fb02 7000 	mla	r0, r2, r0, r7
 80122d0:	b289      	uxth	r1, r1
 80122d2:	3301      	adds	r3, #1
 80122d4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80122d8:	429d      	cmp	r5, r3
 80122da:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80122de:	f84c 1b04 	str.w	r1, [ip], #4
 80122e2:	dcec      	bgt.n	80122be <__multadd+0x12>
 80122e4:	b1d7      	cbz	r7, 801231c <__multadd+0x70>
 80122e6:	68a3      	ldr	r3, [r4, #8]
 80122e8:	42ab      	cmp	r3, r5
 80122ea:	dc12      	bgt.n	8012312 <__multadd+0x66>
 80122ec:	6861      	ldr	r1, [r4, #4]
 80122ee:	4630      	mov	r0, r6
 80122f0:	3101      	adds	r1, #1
 80122f2:	f7ff ff90 	bl	8012216 <_Balloc>
 80122f6:	6922      	ldr	r2, [r4, #16]
 80122f8:	3202      	adds	r2, #2
 80122fa:	f104 010c 	add.w	r1, r4, #12
 80122fe:	4680      	mov	r8, r0
 8012300:	0092      	lsls	r2, r2, #2
 8012302:	300c      	adds	r0, #12
 8012304:	f7ff ff7c 	bl	8012200 <memcpy>
 8012308:	4621      	mov	r1, r4
 801230a:	4630      	mov	r0, r6
 801230c:	f7ff ffb7 	bl	801227e <_Bfree>
 8012310:	4644      	mov	r4, r8
 8012312:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012316:	3501      	adds	r5, #1
 8012318:	615f      	str	r7, [r3, #20]
 801231a:	6125      	str	r5, [r4, #16]
 801231c:	4620      	mov	r0, r4
 801231e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012322 <__hi0bits>:
 8012322:	0c02      	lsrs	r2, r0, #16
 8012324:	0412      	lsls	r2, r2, #16
 8012326:	4603      	mov	r3, r0
 8012328:	b9b2      	cbnz	r2, 8012358 <__hi0bits+0x36>
 801232a:	0403      	lsls	r3, r0, #16
 801232c:	2010      	movs	r0, #16
 801232e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8012332:	bf04      	itt	eq
 8012334:	021b      	lsleq	r3, r3, #8
 8012336:	3008      	addeq	r0, #8
 8012338:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801233c:	bf04      	itt	eq
 801233e:	011b      	lsleq	r3, r3, #4
 8012340:	3004      	addeq	r0, #4
 8012342:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8012346:	bf04      	itt	eq
 8012348:	009b      	lsleq	r3, r3, #2
 801234a:	3002      	addeq	r0, #2
 801234c:	2b00      	cmp	r3, #0
 801234e:	db06      	blt.n	801235e <__hi0bits+0x3c>
 8012350:	005b      	lsls	r3, r3, #1
 8012352:	d503      	bpl.n	801235c <__hi0bits+0x3a>
 8012354:	3001      	adds	r0, #1
 8012356:	4770      	bx	lr
 8012358:	2000      	movs	r0, #0
 801235a:	e7e8      	b.n	801232e <__hi0bits+0xc>
 801235c:	2020      	movs	r0, #32
 801235e:	4770      	bx	lr

08012360 <__lo0bits>:
 8012360:	6803      	ldr	r3, [r0, #0]
 8012362:	f013 0207 	ands.w	r2, r3, #7
 8012366:	4601      	mov	r1, r0
 8012368:	d00b      	beq.n	8012382 <__lo0bits+0x22>
 801236a:	07da      	lsls	r2, r3, #31
 801236c:	d423      	bmi.n	80123b6 <__lo0bits+0x56>
 801236e:	0798      	lsls	r0, r3, #30
 8012370:	bf49      	itett	mi
 8012372:	085b      	lsrmi	r3, r3, #1
 8012374:	089b      	lsrpl	r3, r3, #2
 8012376:	2001      	movmi	r0, #1
 8012378:	600b      	strmi	r3, [r1, #0]
 801237a:	bf5c      	itt	pl
 801237c:	600b      	strpl	r3, [r1, #0]
 801237e:	2002      	movpl	r0, #2
 8012380:	4770      	bx	lr
 8012382:	b298      	uxth	r0, r3
 8012384:	b9a8      	cbnz	r0, 80123b2 <__lo0bits+0x52>
 8012386:	0c1b      	lsrs	r3, r3, #16
 8012388:	2010      	movs	r0, #16
 801238a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801238e:	bf04      	itt	eq
 8012390:	0a1b      	lsreq	r3, r3, #8
 8012392:	3008      	addeq	r0, #8
 8012394:	071a      	lsls	r2, r3, #28
 8012396:	bf04      	itt	eq
 8012398:	091b      	lsreq	r3, r3, #4
 801239a:	3004      	addeq	r0, #4
 801239c:	079a      	lsls	r2, r3, #30
 801239e:	bf04      	itt	eq
 80123a0:	089b      	lsreq	r3, r3, #2
 80123a2:	3002      	addeq	r0, #2
 80123a4:	07da      	lsls	r2, r3, #31
 80123a6:	d402      	bmi.n	80123ae <__lo0bits+0x4e>
 80123a8:	085b      	lsrs	r3, r3, #1
 80123aa:	d006      	beq.n	80123ba <__lo0bits+0x5a>
 80123ac:	3001      	adds	r0, #1
 80123ae:	600b      	str	r3, [r1, #0]
 80123b0:	4770      	bx	lr
 80123b2:	4610      	mov	r0, r2
 80123b4:	e7e9      	b.n	801238a <__lo0bits+0x2a>
 80123b6:	2000      	movs	r0, #0
 80123b8:	4770      	bx	lr
 80123ba:	2020      	movs	r0, #32
 80123bc:	4770      	bx	lr

080123be <__i2b>:
 80123be:	b510      	push	{r4, lr}
 80123c0:	460c      	mov	r4, r1
 80123c2:	2101      	movs	r1, #1
 80123c4:	f7ff ff27 	bl	8012216 <_Balloc>
 80123c8:	2201      	movs	r2, #1
 80123ca:	6144      	str	r4, [r0, #20]
 80123cc:	6102      	str	r2, [r0, #16]
 80123ce:	bd10      	pop	{r4, pc}

080123d0 <__multiply>:
 80123d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123d4:	4614      	mov	r4, r2
 80123d6:	690a      	ldr	r2, [r1, #16]
 80123d8:	6923      	ldr	r3, [r4, #16]
 80123da:	429a      	cmp	r2, r3
 80123dc:	bfb8      	it	lt
 80123de:	460b      	movlt	r3, r1
 80123e0:	4688      	mov	r8, r1
 80123e2:	bfbc      	itt	lt
 80123e4:	46a0      	movlt	r8, r4
 80123e6:	461c      	movlt	r4, r3
 80123e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80123ec:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80123f0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80123f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80123f8:	eb07 0609 	add.w	r6, r7, r9
 80123fc:	42b3      	cmp	r3, r6
 80123fe:	bfb8      	it	lt
 8012400:	3101      	addlt	r1, #1
 8012402:	f7ff ff08 	bl	8012216 <_Balloc>
 8012406:	f100 0514 	add.w	r5, r0, #20
 801240a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801240e:	462b      	mov	r3, r5
 8012410:	2200      	movs	r2, #0
 8012412:	4573      	cmp	r3, lr
 8012414:	d316      	bcc.n	8012444 <__multiply+0x74>
 8012416:	f104 0214 	add.w	r2, r4, #20
 801241a:	f108 0114 	add.w	r1, r8, #20
 801241e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8012422:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8012426:	9300      	str	r3, [sp, #0]
 8012428:	9b00      	ldr	r3, [sp, #0]
 801242a:	9201      	str	r2, [sp, #4]
 801242c:	4293      	cmp	r3, r2
 801242e:	d80c      	bhi.n	801244a <__multiply+0x7a>
 8012430:	2e00      	cmp	r6, #0
 8012432:	dd03      	ble.n	801243c <__multiply+0x6c>
 8012434:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8012438:	2b00      	cmp	r3, #0
 801243a:	d05d      	beq.n	80124f8 <__multiply+0x128>
 801243c:	6106      	str	r6, [r0, #16]
 801243e:	b003      	add	sp, #12
 8012440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012444:	f843 2b04 	str.w	r2, [r3], #4
 8012448:	e7e3      	b.n	8012412 <__multiply+0x42>
 801244a:	f8b2 b000 	ldrh.w	fp, [r2]
 801244e:	f1bb 0f00 	cmp.w	fp, #0
 8012452:	d023      	beq.n	801249c <__multiply+0xcc>
 8012454:	4689      	mov	r9, r1
 8012456:	46ac      	mov	ip, r5
 8012458:	f04f 0800 	mov.w	r8, #0
 801245c:	f859 4b04 	ldr.w	r4, [r9], #4
 8012460:	f8dc a000 	ldr.w	sl, [ip]
 8012464:	b2a3      	uxth	r3, r4
 8012466:	fa1f fa8a 	uxth.w	sl, sl
 801246a:	fb0b a303 	mla	r3, fp, r3, sl
 801246e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8012472:	f8dc 4000 	ldr.w	r4, [ip]
 8012476:	4443      	add	r3, r8
 8012478:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801247c:	fb0b 840a 	mla	r4, fp, sl, r8
 8012480:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8012484:	46e2      	mov	sl, ip
 8012486:	b29b      	uxth	r3, r3
 8012488:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801248c:	454f      	cmp	r7, r9
 801248e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8012492:	f84a 3b04 	str.w	r3, [sl], #4
 8012496:	d82b      	bhi.n	80124f0 <__multiply+0x120>
 8012498:	f8cc 8004 	str.w	r8, [ip, #4]
 801249c:	9b01      	ldr	r3, [sp, #4]
 801249e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80124a2:	3204      	adds	r2, #4
 80124a4:	f1ba 0f00 	cmp.w	sl, #0
 80124a8:	d020      	beq.n	80124ec <__multiply+0x11c>
 80124aa:	682b      	ldr	r3, [r5, #0]
 80124ac:	4689      	mov	r9, r1
 80124ae:	46a8      	mov	r8, r5
 80124b0:	f04f 0b00 	mov.w	fp, #0
 80124b4:	f8b9 c000 	ldrh.w	ip, [r9]
 80124b8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80124bc:	fb0a 440c 	mla	r4, sl, ip, r4
 80124c0:	445c      	add	r4, fp
 80124c2:	46c4      	mov	ip, r8
 80124c4:	b29b      	uxth	r3, r3
 80124c6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80124ca:	f84c 3b04 	str.w	r3, [ip], #4
 80124ce:	f859 3b04 	ldr.w	r3, [r9], #4
 80124d2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80124d6:	0c1b      	lsrs	r3, r3, #16
 80124d8:	fb0a b303 	mla	r3, sl, r3, fp
 80124dc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80124e0:	454f      	cmp	r7, r9
 80124e2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80124e6:	d805      	bhi.n	80124f4 <__multiply+0x124>
 80124e8:	f8c8 3004 	str.w	r3, [r8, #4]
 80124ec:	3504      	adds	r5, #4
 80124ee:	e79b      	b.n	8012428 <__multiply+0x58>
 80124f0:	46d4      	mov	ip, sl
 80124f2:	e7b3      	b.n	801245c <__multiply+0x8c>
 80124f4:	46e0      	mov	r8, ip
 80124f6:	e7dd      	b.n	80124b4 <__multiply+0xe4>
 80124f8:	3e01      	subs	r6, #1
 80124fa:	e799      	b.n	8012430 <__multiply+0x60>

080124fc <__pow5mult>:
 80124fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012500:	4615      	mov	r5, r2
 8012502:	f012 0203 	ands.w	r2, r2, #3
 8012506:	4606      	mov	r6, r0
 8012508:	460f      	mov	r7, r1
 801250a:	d007      	beq.n	801251c <__pow5mult+0x20>
 801250c:	3a01      	subs	r2, #1
 801250e:	4c21      	ldr	r4, [pc, #132]	; (8012594 <__pow5mult+0x98>)
 8012510:	2300      	movs	r3, #0
 8012512:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012516:	f7ff fec9 	bl	80122ac <__multadd>
 801251a:	4607      	mov	r7, r0
 801251c:	10ad      	asrs	r5, r5, #2
 801251e:	d035      	beq.n	801258c <__pow5mult+0x90>
 8012520:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012522:	b93c      	cbnz	r4, 8012534 <__pow5mult+0x38>
 8012524:	2010      	movs	r0, #16
 8012526:	f7ff fe63 	bl	80121f0 <malloc>
 801252a:	6270      	str	r0, [r6, #36]	; 0x24
 801252c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012530:	6004      	str	r4, [r0, #0]
 8012532:	60c4      	str	r4, [r0, #12]
 8012534:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012538:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801253c:	b94c      	cbnz	r4, 8012552 <__pow5mult+0x56>
 801253e:	f240 2171 	movw	r1, #625	; 0x271
 8012542:	4630      	mov	r0, r6
 8012544:	f7ff ff3b 	bl	80123be <__i2b>
 8012548:	2300      	movs	r3, #0
 801254a:	f8c8 0008 	str.w	r0, [r8, #8]
 801254e:	4604      	mov	r4, r0
 8012550:	6003      	str	r3, [r0, #0]
 8012552:	f04f 0800 	mov.w	r8, #0
 8012556:	07eb      	lsls	r3, r5, #31
 8012558:	d50a      	bpl.n	8012570 <__pow5mult+0x74>
 801255a:	4639      	mov	r1, r7
 801255c:	4622      	mov	r2, r4
 801255e:	4630      	mov	r0, r6
 8012560:	f7ff ff36 	bl	80123d0 <__multiply>
 8012564:	4639      	mov	r1, r7
 8012566:	4681      	mov	r9, r0
 8012568:	4630      	mov	r0, r6
 801256a:	f7ff fe88 	bl	801227e <_Bfree>
 801256e:	464f      	mov	r7, r9
 8012570:	106d      	asrs	r5, r5, #1
 8012572:	d00b      	beq.n	801258c <__pow5mult+0x90>
 8012574:	6820      	ldr	r0, [r4, #0]
 8012576:	b938      	cbnz	r0, 8012588 <__pow5mult+0x8c>
 8012578:	4622      	mov	r2, r4
 801257a:	4621      	mov	r1, r4
 801257c:	4630      	mov	r0, r6
 801257e:	f7ff ff27 	bl	80123d0 <__multiply>
 8012582:	6020      	str	r0, [r4, #0]
 8012584:	f8c0 8000 	str.w	r8, [r0]
 8012588:	4604      	mov	r4, r0
 801258a:	e7e4      	b.n	8012556 <__pow5mult+0x5a>
 801258c:	4638      	mov	r0, r7
 801258e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012592:	bf00      	nop
 8012594:	08015970 	.word	0x08015970

08012598 <__lshift>:
 8012598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801259c:	460c      	mov	r4, r1
 801259e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80125a2:	6923      	ldr	r3, [r4, #16]
 80125a4:	6849      	ldr	r1, [r1, #4]
 80125a6:	eb0a 0903 	add.w	r9, sl, r3
 80125aa:	68a3      	ldr	r3, [r4, #8]
 80125ac:	4607      	mov	r7, r0
 80125ae:	4616      	mov	r6, r2
 80125b0:	f109 0501 	add.w	r5, r9, #1
 80125b4:	42ab      	cmp	r3, r5
 80125b6:	db32      	blt.n	801261e <__lshift+0x86>
 80125b8:	4638      	mov	r0, r7
 80125ba:	f7ff fe2c 	bl	8012216 <_Balloc>
 80125be:	2300      	movs	r3, #0
 80125c0:	4680      	mov	r8, r0
 80125c2:	f100 0114 	add.w	r1, r0, #20
 80125c6:	461a      	mov	r2, r3
 80125c8:	4553      	cmp	r3, sl
 80125ca:	db2b      	blt.n	8012624 <__lshift+0x8c>
 80125cc:	6920      	ldr	r0, [r4, #16]
 80125ce:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80125d2:	f104 0314 	add.w	r3, r4, #20
 80125d6:	f016 021f 	ands.w	r2, r6, #31
 80125da:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80125de:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80125e2:	d025      	beq.n	8012630 <__lshift+0x98>
 80125e4:	f1c2 0e20 	rsb	lr, r2, #32
 80125e8:	2000      	movs	r0, #0
 80125ea:	681e      	ldr	r6, [r3, #0]
 80125ec:	468a      	mov	sl, r1
 80125ee:	4096      	lsls	r6, r2
 80125f0:	4330      	orrs	r0, r6
 80125f2:	f84a 0b04 	str.w	r0, [sl], #4
 80125f6:	f853 0b04 	ldr.w	r0, [r3], #4
 80125fa:	459c      	cmp	ip, r3
 80125fc:	fa20 f00e 	lsr.w	r0, r0, lr
 8012600:	d814      	bhi.n	801262c <__lshift+0x94>
 8012602:	6048      	str	r0, [r1, #4]
 8012604:	b108      	cbz	r0, 801260a <__lshift+0x72>
 8012606:	f109 0502 	add.w	r5, r9, #2
 801260a:	3d01      	subs	r5, #1
 801260c:	4638      	mov	r0, r7
 801260e:	f8c8 5010 	str.w	r5, [r8, #16]
 8012612:	4621      	mov	r1, r4
 8012614:	f7ff fe33 	bl	801227e <_Bfree>
 8012618:	4640      	mov	r0, r8
 801261a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801261e:	3101      	adds	r1, #1
 8012620:	005b      	lsls	r3, r3, #1
 8012622:	e7c7      	b.n	80125b4 <__lshift+0x1c>
 8012624:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8012628:	3301      	adds	r3, #1
 801262a:	e7cd      	b.n	80125c8 <__lshift+0x30>
 801262c:	4651      	mov	r1, sl
 801262e:	e7dc      	b.n	80125ea <__lshift+0x52>
 8012630:	3904      	subs	r1, #4
 8012632:	f853 2b04 	ldr.w	r2, [r3], #4
 8012636:	f841 2f04 	str.w	r2, [r1, #4]!
 801263a:	459c      	cmp	ip, r3
 801263c:	d8f9      	bhi.n	8012632 <__lshift+0x9a>
 801263e:	e7e4      	b.n	801260a <__lshift+0x72>

08012640 <__mcmp>:
 8012640:	6903      	ldr	r3, [r0, #16]
 8012642:	690a      	ldr	r2, [r1, #16]
 8012644:	1a9b      	subs	r3, r3, r2
 8012646:	b530      	push	{r4, r5, lr}
 8012648:	d10c      	bne.n	8012664 <__mcmp+0x24>
 801264a:	0092      	lsls	r2, r2, #2
 801264c:	3014      	adds	r0, #20
 801264e:	3114      	adds	r1, #20
 8012650:	1884      	adds	r4, r0, r2
 8012652:	4411      	add	r1, r2
 8012654:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012658:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801265c:	4295      	cmp	r5, r2
 801265e:	d003      	beq.n	8012668 <__mcmp+0x28>
 8012660:	d305      	bcc.n	801266e <__mcmp+0x2e>
 8012662:	2301      	movs	r3, #1
 8012664:	4618      	mov	r0, r3
 8012666:	bd30      	pop	{r4, r5, pc}
 8012668:	42a0      	cmp	r0, r4
 801266a:	d3f3      	bcc.n	8012654 <__mcmp+0x14>
 801266c:	e7fa      	b.n	8012664 <__mcmp+0x24>
 801266e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012672:	e7f7      	b.n	8012664 <__mcmp+0x24>

08012674 <__mdiff>:
 8012674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012678:	460d      	mov	r5, r1
 801267a:	4607      	mov	r7, r0
 801267c:	4611      	mov	r1, r2
 801267e:	4628      	mov	r0, r5
 8012680:	4614      	mov	r4, r2
 8012682:	f7ff ffdd 	bl	8012640 <__mcmp>
 8012686:	1e06      	subs	r6, r0, #0
 8012688:	d108      	bne.n	801269c <__mdiff+0x28>
 801268a:	4631      	mov	r1, r6
 801268c:	4638      	mov	r0, r7
 801268e:	f7ff fdc2 	bl	8012216 <_Balloc>
 8012692:	2301      	movs	r3, #1
 8012694:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8012698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801269c:	bfa4      	itt	ge
 801269e:	4623      	movge	r3, r4
 80126a0:	462c      	movge	r4, r5
 80126a2:	4638      	mov	r0, r7
 80126a4:	6861      	ldr	r1, [r4, #4]
 80126a6:	bfa6      	itte	ge
 80126a8:	461d      	movge	r5, r3
 80126aa:	2600      	movge	r6, #0
 80126ac:	2601      	movlt	r6, #1
 80126ae:	f7ff fdb2 	bl	8012216 <_Balloc>
 80126b2:	692b      	ldr	r3, [r5, #16]
 80126b4:	60c6      	str	r6, [r0, #12]
 80126b6:	6926      	ldr	r6, [r4, #16]
 80126b8:	f105 0914 	add.w	r9, r5, #20
 80126bc:	f104 0214 	add.w	r2, r4, #20
 80126c0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80126c4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80126c8:	f100 0514 	add.w	r5, r0, #20
 80126cc:	f04f 0e00 	mov.w	lr, #0
 80126d0:	f852 ab04 	ldr.w	sl, [r2], #4
 80126d4:	f859 4b04 	ldr.w	r4, [r9], #4
 80126d8:	fa1e f18a 	uxtah	r1, lr, sl
 80126dc:	b2a3      	uxth	r3, r4
 80126de:	1ac9      	subs	r1, r1, r3
 80126e0:	0c23      	lsrs	r3, r4, #16
 80126e2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80126e6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80126ea:	b289      	uxth	r1, r1
 80126ec:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80126f0:	45c8      	cmp	r8, r9
 80126f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80126f6:	4694      	mov	ip, r2
 80126f8:	f845 3b04 	str.w	r3, [r5], #4
 80126fc:	d8e8      	bhi.n	80126d0 <__mdiff+0x5c>
 80126fe:	45bc      	cmp	ip, r7
 8012700:	d304      	bcc.n	801270c <__mdiff+0x98>
 8012702:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8012706:	b183      	cbz	r3, 801272a <__mdiff+0xb6>
 8012708:	6106      	str	r6, [r0, #16]
 801270a:	e7c5      	b.n	8012698 <__mdiff+0x24>
 801270c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8012710:	fa1e f381 	uxtah	r3, lr, r1
 8012714:	141a      	asrs	r2, r3, #16
 8012716:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801271a:	b29b      	uxth	r3, r3
 801271c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012720:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8012724:	f845 3b04 	str.w	r3, [r5], #4
 8012728:	e7e9      	b.n	80126fe <__mdiff+0x8a>
 801272a:	3e01      	subs	r6, #1
 801272c:	e7e9      	b.n	8012702 <__mdiff+0x8e>

0801272e <__d2b>:
 801272e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012732:	460e      	mov	r6, r1
 8012734:	2101      	movs	r1, #1
 8012736:	ec59 8b10 	vmov	r8, r9, d0
 801273a:	4615      	mov	r5, r2
 801273c:	f7ff fd6b 	bl	8012216 <_Balloc>
 8012740:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8012744:	4607      	mov	r7, r0
 8012746:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801274a:	bb34      	cbnz	r4, 801279a <__d2b+0x6c>
 801274c:	9301      	str	r3, [sp, #4]
 801274e:	f1b8 0300 	subs.w	r3, r8, #0
 8012752:	d027      	beq.n	80127a4 <__d2b+0x76>
 8012754:	a802      	add	r0, sp, #8
 8012756:	f840 3d08 	str.w	r3, [r0, #-8]!
 801275a:	f7ff fe01 	bl	8012360 <__lo0bits>
 801275e:	9900      	ldr	r1, [sp, #0]
 8012760:	b1f0      	cbz	r0, 80127a0 <__d2b+0x72>
 8012762:	9a01      	ldr	r2, [sp, #4]
 8012764:	f1c0 0320 	rsb	r3, r0, #32
 8012768:	fa02 f303 	lsl.w	r3, r2, r3
 801276c:	430b      	orrs	r3, r1
 801276e:	40c2      	lsrs	r2, r0
 8012770:	617b      	str	r3, [r7, #20]
 8012772:	9201      	str	r2, [sp, #4]
 8012774:	9b01      	ldr	r3, [sp, #4]
 8012776:	61bb      	str	r3, [r7, #24]
 8012778:	2b00      	cmp	r3, #0
 801277a:	bf14      	ite	ne
 801277c:	2102      	movne	r1, #2
 801277e:	2101      	moveq	r1, #1
 8012780:	6139      	str	r1, [r7, #16]
 8012782:	b1c4      	cbz	r4, 80127b6 <__d2b+0x88>
 8012784:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8012788:	4404      	add	r4, r0
 801278a:	6034      	str	r4, [r6, #0]
 801278c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012790:	6028      	str	r0, [r5, #0]
 8012792:	4638      	mov	r0, r7
 8012794:	b003      	add	sp, #12
 8012796:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801279a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801279e:	e7d5      	b.n	801274c <__d2b+0x1e>
 80127a0:	6179      	str	r1, [r7, #20]
 80127a2:	e7e7      	b.n	8012774 <__d2b+0x46>
 80127a4:	a801      	add	r0, sp, #4
 80127a6:	f7ff fddb 	bl	8012360 <__lo0bits>
 80127aa:	9b01      	ldr	r3, [sp, #4]
 80127ac:	617b      	str	r3, [r7, #20]
 80127ae:	2101      	movs	r1, #1
 80127b0:	6139      	str	r1, [r7, #16]
 80127b2:	3020      	adds	r0, #32
 80127b4:	e7e5      	b.n	8012782 <__d2b+0x54>
 80127b6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80127ba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80127be:	6030      	str	r0, [r6, #0]
 80127c0:	6918      	ldr	r0, [r3, #16]
 80127c2:	f7ff fdae 	bl	8012322 <__hi0bits>
 80127c6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80127ca:	e7e1      	b.n	8012790 <__d2b+0x62>

080127cc <_calloc_r>:
 80127cc:	b538      	push	{r3, r4, r5, lr}
 80127ce:	fb02 f401 	mul.w	r4, r2, r1
 80127d2:	4621      	mov	r1, r4
 80127d4:	f000 f856 	bl	8012884 <_malloc_r>
 80127d8:	4605      	mov	r5, r0
 80127da:	b118      	cbz	r0, 80127e4 <_calloc_r+0x18>
 80127dc:	4622      	mov	r2, r4
 80127de:	2100      	movs	r1, #0
 80127e0:	f7fd fef0 	bl	80105c4 <memset>
 80127e4:	4628      	mov	r0, r5
 80127e6:	bd38      	pop	{r3, r4, r5, pc}

080127e8 <_free_r>:
 80127e8:	b538      	push	{r3, r4, r5, lr}
 80127ea:	4605      	mov	r5, r0
 80127ec:	2900      	cmp	r1, #0
 80127ee:	d045      	beq.n	801287c <_free_r+0x94>
 80127f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80127f4:	1f0c      	subs	r4, r1, #4
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	bfb8      	it	lt
 80127fa:	18e4      	addlt	r4, r4, r3
 80127fc:	f000 fc03 	bl	8013006 <__malloc_lock>
 8012800:	4a1f      	ldr	r2, [pc, #124]	; (8012880 <_free_r+0x98>)
 8012802:	6813      	ldr	r3, [r2, #0]
 8012804:	4610      	mov	r0, r2
 8012806:	b933      	cbnz	r3, 8012816 <_free_r+0x2e>
 8012808:	6063      	str	r3, [r4, #4]
 801280a:	6014      	str	r4, [r2, #0]
 801280c:	4628      	mov	r0, r5
 801280e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012812:	f000 bbf9 	b.w	8013008 <__malloc_unlock>
 8012816:	42a3      	cmp	r3, r4
 8012818:	d90c      	bls.n	8012834 <_free_r+0x4c>
 801281a:	6821      	ldr	r1, [r4, #0]
 801281c:	1862      	adds	r2, r4, r1
 801281e:	4293      	cmp	r3, r2
 8012820:	bf04      	itt	eq
 8012822:	681a      	ldreq	r2, [r3, #0]
 8012824:	685b      	ldreq	r3, [r3, #4]
 8012826:	6063      	str	r3, [r4, #4]
 8012828:	bf04      	itt	eq
 801282a:	1852      	addeq	r2, r2, r1
 801282c:	6022      	streq	r2, [r4, #0]
 801282e:	6004      	str	r4, [r0, #0]
 8012830:	e7ec      	b.n	801280c <_free_r+0x24>
 8012832:	4613      	mov	r3, r2
 8012834:	685a      	ldr	r2, [r3, #4]
 8012836:	b10a      	cbz	r2, 801283c <_free_r+0x54>
 8012838:	42a2      	cmp	r2, r4
 801283a:	d9fa      	bls.n	8012832 <_free_r+0x4a>
 801283c:	6819      	ldr	r1, [r3, #0]
 801283e:	1858      	adds	r0, r3, r1
 8012840:	42a0      	cmp	r0, r4
 8012842:	d10b      	bne.n	801285c <_free_r+0x74>
 8012844:	6820      	ldr	r0, [r4, #0]
 8012846:	4401      	add	r1, r0
 8012848:	1858      	adds	r0, r3, r1
 801284a:	4282      	cmp	r2, r0
 801284c:	6019      	str	r1, [r3, #0]
 801284e:	d1dd      	bne.n	801280c <_free_r+0x24>
 8012850:	6810      	ldr	r0, [r2, #0]
 8012852:	6852      	ldr	r2, [r2, #4]
 8012854:	605a      	str	r2, [r3, #4]
 8012856:	4401      	add	r1, r0
 8012858:	6019      	str	r1, [r3, #0]
 801285a:	e7d7      	b.n	801280c <_free_r+0x24>
 801285c:	d902      	bls.n	8012864 <_free_r+0x7c>
 801285e:	230c      	movs	r3, #12
 8012860:	602b      	str	r3, [r5, #0]
 8012862:	e7d3      	b.n	801280c <_free_r+0x24>
 8012864:	6820      	ldr	r0, [r4, #0]
 8012866:	1821      	adds	r1, r4, r0
 8012868:	428a      	cmp	r2, r1
 801286a:	bf04      	itt	eq
 801286c:	6811      	ldreq	r1, [r2, #0]
 801286e:	6852      	ldreq	r2, [r2, #4]
 8012870:	6062      	str	r2, [r4, #4]
 8012872:	bf04      	itt	eq
 8012874:	1809      	addeq	r1, r1, r0
 8012876:	6021      	streq	r1, [r4, #0]
 8012878:	605c      	str	r4, [r3, #4]
 801287a:	e7c7      	b.n	801280c <_free_r+0x24>
 801287c:	bd38      	pop	{r3, r4, r5, pc}
 801287e:	bf00      	nop
 8012880:	20002264 	.word	0x20002264

08012884 <_malloc_r>:
 8012884:	b570      	push	{r4, r5, r6, lr}
 8012886:	1ccd      	adds	r5, r1, #3
 8012888:	f025 0503 	bic.w	r5, r5, #3
 801288c:	3508      	adds	r5, #8
 801288e:	2d0c      	cmp	r5, #12
 8012890:	bf38      	it	cc
 8012892:	250c      	movcc	r5, #12
 8012894:	2d00      	cmp	r5, #0
 8012896:	4606      	mov	r6, r0
 8012898:	db01      	blt.n	801289e <_malloc_r+0x1a>
 801289a:	42a9      	cmp	r1, r5
 801289c:	d903      	bls.n	80128a6 <_malloc_r+0x22>
 801289e:	230c      	movs	r3, #12
 80128a0:	6033      	str	r3, [r6, #0]
 80128a2:	2000      	movs	r0, #0
 80128a4:	bd70      	pop	{r4, r5, r6, pc}
 80128a6:	f000 fbae 	bl	8013006 <__malloc_lock>
 80128aa:	4a21      	ldr	r2, [pc, #132]	; (8012930 <_malloc_r+0xac>)
 80128ac:	6814      	ldr	r4, [r2, #0]
 80128ae:	4621      	mov	r1, r4
 80128b0:	b991      	cbnz	r1, 80128d8 <_malloc_r+0x54>
 80128b2:	4c20      	ldr	r4, [pc, #128]	; (8012934 <_malloc_r+0xb0>)
 80128b4:	6823      	ldr	r3, [r4, #0]
 80128b6:	b91b      	cbnz	r3, 80128c0 <_malloc_r+0x3c>
 80128b8:	4630      	mov	r0, r6
 80128ba:	f000 facf 	bl	8012e5c <_sbrk_r>
 80128be:	6020      	str	r0, [r4, #0]
 80128c0:	4629      	mov	r1, r5
 80128c2:	4630      	mov	r0, r6
 80128c4:	f000 faca 	bl	8012e5c <_sbrk_r>
 80128c8:	1c43      	adds	r3, r0, #1
 80128ca:	d124      	bne.n	8012916 <_malloc_r+0x92>
 80128cc:	230c      	movs	r3, #12
 80128ce:	6033      	str	r3, [r6, #0]
 80128d0:	4630      	mov	r0, r6
 80128d2:	f000 fb99 	bl	8013008 <__malloc_unlock>
 80128d6:	e7e4      	b.n	80128a2 <_malloc_r+0x1e>
 80128d8:	680b      	ldr	r3, [r1, #0]
 80128da:	1b5b      	subs	r3, r3, r5
 80128dc:	d418      	bmi.n	8012910 <_malloc_r+0x8c>
 80128de:	2b0b      	cmp	r3, #11
 80128e0:	d90f      	bls.n	8012902 <_malloc_r+0x7e>
 80128e2:	600b      	str	r3, [r1, #0]
 80128e4:	50cd      	str	r5, [r1, r3]
 80128e6:	18cc      	adds	r4, r1, r3
 80128e8:	4630      	mov	r0, r6
 80128ea:	f000 fb8d 	bl	8013008 <__malloc_unlock>
 80128ee:	f104 000b 	add.w	r0, r4, #11
 80128f2:	1d23      	adds	r3, r4, #4
 80128f4:	f020 0007 	bic.w	r0, r0, #7
 80128f8:	1ac3      	subs	r3, r0, r3
 80128fa:	d0d3      	beq.n	80128a4 <_malloc_r+0x20>
 80128fc:	425a      	negs	r2, r3
 80128fe:	50e2      	str	r2, [r4, r3]
 8012900:	e7d0      	b.n	80128a4 <_malloc_r+0x20>
 8012902:	428c      	cmp	r4, r1
 8012904:	684b      	ldr	r3, [r1, #4]
 8012906:	bf16      	itet	ne
 8012908:	6063      	strne	r3, [r4, #4]
 801290a:	6013      	streq	r3, [r2, #0]
 801290c:	460c      	movne	r4, r1
 801290e:	e7eb      	b.n	80128e8 <_malloc_r+0x64>
 8012910:	460c      	mov	r4, r1
 8012912:	6849      	ldr	r1, [r1, #4]
 8012914:	e7cc      	b.n	80128b0 <_malloc_r+0x2c>
 8012916:	1cc4      	adds	r4, r0, #3
 8012918:	f024 0403 	bic.w	r4, r4, #3
 801291c:	42a0      	cmp	r0, r4
 801291e:	d005      	beq.n	801292c <_malloc_r+0xa8>
 8012920:	1a21      	subs	r1, r4, r0
 8012922:	4630      	mov	r0, r6
 8012924:	f000 fa9a 	bl	8012e5c <_sbrk_r>
 8012928:	3001      	adds	r0, #1
 801292a:	d0cf      	beq.n	80128cc <_malloc_r+0x48>
 801292c:	6025      	str	r5, [r4, #0]
 801292e:	e7db      	b.n	80128e8 <_malloc_r+0x64>
 8012930:	20002264 	.word	0x20002264
 8012934:	20002268 	.word	0x20002268

08012938 <__ssputs_r>:
 8012938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801293c:	688e      	ldr	r6, [r1, #8]
 801293e:	429e      	cmp	r6, r3
 8012940:	4682      	mov	sl, r0
 8012942:	460c      	mov	r4, r1
 8012944:	4690      	mov	r8, r2
 8012946:	4699      	mov	r9, r3
 8012948:	d837      	bhi.n	80129ba <__ssputs_r+0x82>
 801294a:	898a      	ldrh	r2, [r1, #12]
 801294c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012950:	d031      	beq.n	80129b6 <__ssputs_r+0x7e>
 8012952:	6825      	ldr	r5, [r4, #0]
 8012954:	6909      	ldr	r1, [r1, #16]
 8012956:	1a6f      	subs	r7, r5, r1
 8012958:	6965      	ldr	r5, [r4, #20]
 801295a:	2302      	movs	r3, #2
 801295c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012960:	fb95 f5f3 	sdiv	r5, r5, r3
 8012964:	f109 0301 	add.w	r3, r9, #1
 8012968:	443b      	add	r3, r7
 801296a:	429d      	cmp	r5, r3
 801296c:	bf38      	it	cc
 801296e:	461d      	movcc	r5, r3
 8012970:	0553      	lsls	r3, r2, #21
 8012972:	d530      	bpl.n	80129d6 <__ssputs_r+0x9e>
 8012974:	4629      	mov	r1, r5
 8012976:	f7ff ff85 	bl	8012884 <_malloc_r>
 801297a:	4606      	mov	r6, r0
 801297c:	b950      	cbnz	r0, 8012994 <__ssputs_r+0x5c>
 801297e:	230c      	movs	r3, #12
 8012980:	f8ca 3000 	str.w	r3, [sl]
 8012984:	89a3      	ldrh	r3, [r4, #12]
 8012986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801298a:	81a3      	strh	r3, [r4, #12]
 801298c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012994:	463a      	mov	r2, r7
 8012996:	6921      	ldr	r1, [r4, #16]
 8012998:	f7ff fc32 	bl	8012200 <memcpy>
 801299c:	89a3      	ldrh	r3, [r4, #12]
 801299e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80129a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80129a6:	81a3      	strh	r3, [r4, #12]
 80129a8:	6126      	str	r6, [r4, #16]
 80129aa:	6165      	str	r5, [r4, #20]
 80129ac:	443e      	add	r6, r7
 80129ae:	1bed      	subs	r5, r5, r7
 80129b0:	6026      	str	r6, [r4, #0]
 80129b2:	60a5      	str	r5, [r4, #8]
 80129b4:	464e      	mov	r6, r9
 80129b6:	454e      	cmp	r6, r9
 80129b8:	d900      	bls.n	80129bc <__ssputs_r+0x84>
 80129ba:	464e      	mov	r6, r9
 80129bc:	4632      	mov	r2, r6
 80129be:	4641      	mov	r1, r8
 80129c0:	6820      	ldr	r0, [r4, #0]
 80129c2:	f000 fb07 	bl	8012fd4 <memmove>
 80129c6:	68a3      	ldr	r3, [r4, #8]
 80129c8:	1b9b      	subs	r3, r3, r6
 80129ca:	60a3      	str	r3, [r4, #8]
 80129cc:	6823      	ldr	r3, [r4, #0]
 80129ce:	441e      	add	r6, r3
 80129d0:	6026      	str	r6, [r4, #0]
 80129d2:	2000      	movs	r0, #0
 80129d4:	e7dc      	b.n	8012990 <__ssputs_r+0x58>
 80129d6:	462a      	mov	r2, r5
 80129d8:	f000 fb17 	bl	801300a <_realloc_r>
 80129dc:	4606      	mov	r6, r0
 80129de:	2800      	cmp	r0, #0
 80129e0:	d1e2      	bne.n	80129a8 <__ssputs_r+0x70>
 80129e2:	6921      	ldr	r1, [r4, #16]
 80129e4:	4650      	mov	r0, sl
 80129e6:	f7ff feff 	bl	80127e8 <_free_r>
 80129ea:	e7c8      	b.n	801297e <__ssputs_r+0x46>

080129ec <_svfiprintf_r>:
 80129ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129f0:	461d      	mov	r5, r3
 80129f2:	898b      	ldrh	r3, [r1, #12]
 80129f4:	061f      	lsls	r7, r3, #24
 80129f6:	b09d      	sub	sp, #116	; 0x74
 80129f8:	4680      	mov	r8, r0
 80129fa:	460c      	mov	r4, r1
 80129fc:	4616      	mov	r6, r2
 80129fe:	d50f      	bpl.n	8012a20 <_svfiprintf_r+0x34>
 8012a00:	690b      	ldr	r3, [r1, #16]
 8012a02:	b96b      	cbnz	r3, 8012a20 <_svfiprintf_r+0x34>
 8012a04:	2140      	movs	r1, #64	; 0x40
 8012a06:	f7ff ff3d 	bl	8012884 <_malloc_r>
 8012a0a:	6020      	str	r0, [r4, #0]
 8012a0c:	6120      	str	r0, [r4, #16]
 8012a0e:	b928      	cbnz	r0, 8012a1c <_svfiprintf_r+0x30>
 8012a10:	230c      	movs	r3, #12
 8012a12:	f8c8 3000 	str.w	r3, [r8]
 8012a16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012a1a:	e0c8      	b.n	8012bae <_svfiprintf_r+0x1c2>
 8012a1c:	2340      	movs	r3, #64	; 0x40
 8012a1e:	6163      	str	r3, [r4, #20]
 8012a20:	2300      	movs	r3, #0
 8012a22:	9309      	str	r3, [sp, #36]	; 0x24
 8012a24:	2320      	movs	r3, #32
 8012a26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012a2a:	2330      	movs	r3, #48	; 0x30
 8012a2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012a30:	9503      	str	r5, [sp, #12]
 8012a32:	f04f 0b01 	mov.w	fp, #1
 8012a36:	4637      	mov	r7, r6
 8012a38:	463d      	mov	r5, r7
 8012a3a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012a3e:	b10b      	cbz	r3, 8012a44 <_svfiprintf_r+0x58>
 8012a40:	2b25      	cmp	r3, #37	; 0x25
 8012a42:	d13e      	bne.n	8012ac2 <_svfiprintf_r+0xd6>
 8012a44:	ebb7 0a06 	subs.w	sl, r7, r6
 8012a48:	d00b      	beq.n	8012a62 <_svfiprintf_r+0x76>
 8012a4a:	4653      	mov	r3, sl
 8012a4c:	4632      	mov	r2, r6
 8012a4e:	4621      	mov	r1, r4
 8012a50:	4640      	mov	r0, r8
 8012a52:	f7ff ff71 	bl	8012938 <__ssputs_r>
 8012a56:	3001      	adds	r0, #1
 8012a58:	f000 80a4 	beq.w	8012ba4 <_svfiprintf_r+0x1b8>
 8012a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a5e:	4453      	add	r3, sl
 8012a60:	9309      	str	r3, [sp, #36]	; 0x24
 8012a62:	783b      	ldrb	r3, [r7, #0]
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	f000 809d 	beq.w	8012ba4 <_svfiprintf_r+0x1b8>
 8012a6a:	2300      	movs	r3, #0
 8012a6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012a70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012a74:	9304      	str	r3, [sp, #16]
 8012a76:	9307      	str	r3, [sp, #28]
 8012a78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012a7c:	931a      	str	r3, [sp, #104]	; 0x68
 8012a7e:	462f      	mov	r7, r5
 8012a80:	2205      	movs	r2, #5
 8012a82:	f817 1b01 	ldrb.w	r1, [r7], #1
 8012a86:	4850      	ldr	r0, [pc, #320]	; (8012bc8 <_svfiprintf_r+0x1dc>)
 8012a88:	f7ed fbd2 	bl	8000230 <memchr>
 8012a8c:	9b04      	ldr	r3, [sp, #16]
 8012a8e:	b9d0      	cbnz	r0, 8012ac6 <_svfiprintf_r+0xda>
 8012a90:	06d9      	lsls	r1, r3, #27
 8012a92:	bf44      	itt	mi
 8012a94:	2220      	movmi	r2, #32
 8012a96:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012a9a:	071a      	lsls	r2, r3, #28
 8012a9c:	bf44      	itt	mi
 8012a9e:	222b      	movmi	r2, #43	; 0x2b
 8012aa0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012aa4:	782a      	ldrb	r2, [r5, #0]
 8012aa6:	2a2a      	cmp	r2, #42	; 0x2a
 8012aa8:	d015      	beq.n	8012ad6 <_svfiprintf_r+0xea>
 8012aaa:	9a07      	ldr	r2, [sp, #28]
 8012aac:	462f      	mov	r7, r5
 8012aae:	2000      	movs	r0, #0
 8012ab0:	250a      	movs	r5, #10
 8012ab2:	4639      	mov	r1, r7
 8012ab4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012ab8:	3b30      	subs	r3, #48	; 0x30
 8012aba:	2b09      	cmp	r3, #9
 8012abc:	d94d      	bls.n	8012b5a <_svfiprintf_r+0x16e>
 8012abe:	b1b8      	cbz	r0, 8012af0 <_svfiprintf_r+0x104>
 8012ac0:	e00f      	b.n	8012ae2 <_svfiprintf_r+0xf6>
 8012ac2:	462f      	mov	r7, r5
 8012ac4:	e7b8      	b.n	8012a38 <_svfiprintf_r+0x4c>
 8012ac6:	4a40      	ldr	r2, [pc, #256]	; (8012bc8 <_svfiprintf_r+0x1dc>)
 8012ac8:	1a80      	subs	r0, r0, r2
 8012aca:	fa0b f000 	lsl.w	r0, fp, r0
 8012ace:	4318      	orrs	r0, r3
 8012ad0:	9004      	str	r0, [sp, #16]
 8012ad2:	463d      	mov	r5, r7
 8012ad4:	e7d3      	b.n	8012a7e <_svfiprintf_r+0x92>
 8012ad6:	9a03      	ldr	r2, [sp, #12]
 8012ad8:	1d11      	adds	r1, r2, #4
 8012ada:	6812      	ldr	r2, [r2, #0]
 8012adc:	9103      	str	r1, [sp, #12]
 8012ade:	2a00      	cmp	r2, #0
 8012ae0:	db01      	blt.n	8012ae6 <_svfiprintf_r+0xfa>
 8012ae2:	9207      	str	r2, [sp, #28]
 8012ae4:	e004      	b.n	8012af0 <_svfiprintf_r+0x104>
 8012ae6:	4252      	negs	r2, r2
 8012ae8:	f043 0302 	orr.w	r3, r3, #2
 8012aec:	9207      	str	r2, [sp, #28]
 8012aee:	9304      	str	r3, [sp, #16]
 8012af0:	783b      	ldrb	r3, [r7, #0]
 8012af2:	2b2e      	cmp	r3, #46	; 0x2e
 8012af4:	d10c      	bne.n	8012b10 <_svfiprintf_r+0x124>
 8012af6:	787b      	ldrb	r3, [r7, #1]
 8012af8:	2b2a      	cmp	r3, #42	; 0x2a
 8012afa:	d133      	bne.n	8012b64 <_svfiprintf_r+0x178>
 8012afc:	9b03      	ldr	r3, [sp, #12]
 8012afe:	1d1a      	adds	r2, r3, #4
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	9203      	str	r2, [sp, #12]
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	bfb8      	it	lt
 8012b08:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012b0c:	3702      	adds	r7, #2
 8012b0e:	9305      	str	r3, [sp, #20]
 8012b10:	4d2e      	ldr	r5, [pc, #184]	; (8012bcc <_svfiprintf_r+0x1e0>)
 8012b12:	7839      	ldrb	r1, [r7, #0]
 8012b14:	2203      	movs	r2, #3
 8012b16:	4628      	mov	r0, r5
 8012b18:	f7ed fb8a 	bl	8000230 <memchr>
 8012b1c:	b138      	cbz	r0, 8012b2e <_svfiprintf_r+0x142>
 8012b1e:	2340      	movs	r3, #64	; 0x40
 8012b20:	1b40      	subs	r0, r0, r5
 8012b22:	fa03 f000 	lsl.w	r0, r3, r0
 8012b26:	9b04      	ldr	r3, [sp, #16]
 8012b28:	4303      	orrs	r3, r0
 8012b2a:	3701      	adds	r7, #1
 8012b2c:	9304      	str	r3, [sp, #16]
 8012b2e:	7839      	ldrb	r1, [r7, #0]
 8012b30:	4827      	ldr	r0, [pc, #156]	; (8012bd0 <_svfiprintf_r+0x1e4>)
 8012b32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012b36:	2206      	movs	r2, #6
 8012b38:	1c7e      	adds	r6, r7, #1
 8012b3a:	f7ed fb79 	bl	8000230 <memchr>
 8012b3e:	2800      	cmp	r0, #0
 8012b40:	d038      	beq.n	8012bb4 <_svfiprintf_r+0x1c8>
 8012b42:	4b24      	ldr	r3, [pc, #144]	; (8012bd4 <_svfiprintf_r+0x1e8>)
 8012b44:	bb13      	cbnz	r3, 8012b8c <_svfiprintf_r+0x1a0>
 8012b46:	9b03      	ldr	r3, [sp, #12]
 8012b48:	3307      	adds	r3, #7
 8012b4a:	f023 0307 	bic.w	r3, r3, #7
 8012b4e:	3308      	adds	r3, #8
 8012b50:	9303      	str	r3, [sp, #12]
 8012b52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b54:	444b      	add	r3, r9
 8012b56:	9309      	str	r3, [sp, #36]	; 0x24
 8012b58:	e76d      	b.n	8012a36 <_svfiprintf_r+0x4a>
 8012b5a:	fb05 3202 	mla	r2, r5, r2, r3
 8012b5e:	2001      	movs	r0, #1
 8012b60:	460f      	mov	r7, r1
 8012b62:	e7a6      	b.n	8012ab2 <_svfiprintf_r+0xc6>
 8012b64:	2300      	movs	r3, #0
 8012b66:	3701      	adds	r7, #1
 8012b68:	9305      	str	r3, [sp, #20]
 8012b6a:	4619      	mov	r1, r3
 8012b6c:	250a      	movs	r5, #10
 8012b6e:	4638      	mov	r0, r7
 8012b70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012b74:	3a30      	subs	r2, #48	; 0x30
 8012b76:	2a09      	cmp	r2, #9
 8012b78:	d903      	bls.n	8012b82 <_svfiprintf_r+0x196>
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d0c8      	beq.n	8012b10 <_svfiprintf_r+0x124>
 8012b7e:	9105      	str	r1, [sp, #20]
 8012b80:	e7c6      	b.n	8012b10 <_svfiprintf_r+0x124>
 8012b82:	fb05 2101 	mla	r1, r5, r1, r2
 8012b86:	2301      	movs	r3, #1
 8012b88:	4607      	mov	r7, r0
 8012b8a:	e7f0      	b.n	8012b6e <_svfiprintf_r+0x182>
 8012b8c:	ab03      	add	r3, sp, #12
 8012b8e:	9300      	str	r3, [sp, #0]
 8012b90:	4622      	mov	r2, r4
 8012b92:	4b11      	ldr	r3, [pc, #68]	; (8012bd8 <_svfiprintf_r+0x1ec>)
 8012b94:	a904      	add	r1, sp, #16
 8012b96:	4640      	mov	r0, r8
 8012b98:	f7fd fdb0 	bl	80106fc <_printf_float>
 8012b9c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8012ba0:	4681      	mov	r9, r0
 8012ba2:	d1d6      	bne.n	8012b52 <_svfiprintf_r+0x166>
 8012ba4:	89a3      	ldrh	r3, [r4, #12]
 8012ba6:	065b      	lsls	r3, r3, #25
 8012ba8:	f53f af35 	bmi.w	8012a16 <_svfiprintf_r+0x2a>
 8012bac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012bae:	b01d      	add	sp, #116	; 0x74
 8012bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bb4:	ab03      	add	r3, sp, #12
 8012bb6:	9300      	str	r3, [sp, #0]
 8012bb8:	4622      	mov	r2, r4
 8012bba:	4b07      	ldr	r3, [pc, #28]	; (8012bd8 <_svfiprintf_r+0x1ec>)
 8012bbc:	a904      	add	r1, sp, #16
 8012bbe:	4640      	mov	r0, r8
 8012bc0:	f7fe f852 	bl	8010c68 <_printf_i>
 8012bc4:	e7ea      	b.n	8012b9c <_svfiprintf_r+0x1b0>
 8012bc6:	bf00      	nop
 8012bc8:	0801597c 	.word	0x0801597c
 8012bcc:	08015982 	.word	0x08015982
 8012bd0:	08015986 	.word	0x08015986
 8012bd4:	080106fd 	.word	0x080106fd
 8012bd8:	08012939 	.word	0x08012939

08012bdc <__sfputc_r>:
 8012bdc:	6893      	ldr	r3, [r2, #8]
 8012bde:	3b01      	subs	r3, #1
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	b410      	push	{r4}
 8012be4:	6093      	str	r3, [r2, #8]
 8012be6:	da08      	bge.n	8012bfa <__sfputc_r+0x1e>
 8012be8:	6994      	ldr	r4, [r2, #24]
 8012bea:	42a3      	cmp	r3, r4
 8012bec:	db01      	blt.n	8012bf2 <__sfputc_r+0x16>
 8012bee:	290a      	cmp	r1, #10
 8012bf0:	d103      	bne.n	8012bfa <__sfputc_r+0x1e>
 8012bf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012bf6:	f7fe ba09 	b.w	801100c <__swbuf_r>
 8012bfa:	6813      	ldr	r3, [r2, #0]
 8012bfc:	1c58      	adds	r0, r3, #1
 8012bfe:	6010      	str	r0, [r2, #0]
 8012c00:	7019      	strb	r1, [r3, #0]
 8012c02:	4608      	mov	r0, r1
 8012c04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c08:	4770      	bx	lr

08012c0a <__sfputs_r>:
 8012c0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c0c:	4606      	mov	r6, r0
 8012c0e:	460f      	mov	r7, r1
 8012c10:	4614      	mov	r4, r2
 8012c12:	18d5      	adds	r5, r2, r3
 8012c14:	42ac      	cmp	r4, r5
 8012c16:	d101      	bne.n	8012c1c <__sfputs_r+0x12>
 8012c18:	2000      	movs	r0, #0
 8012c1a:	e007      	b.n	8012c2c <__sfputs_r+0x22>
 8012c1c:	463a      	mov	r2, r7
 8012c1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c22:	4630      	mov	r0, r6
 8012c24:	f7ff ffda 	bl	8012bdc <__sfputc_r>
 8012c28:	1c43      	adds	r3, r0, #1
 8012c2a:	d1f3      	bne.n	8012c14 <__sfputs_r+0xa>
 8012c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012c30 <_vfiprintf_r>:
 8012c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c34:	460c      	mov	r4, r1
 8012c36:	b09d      	sub	sp, #116	; 0x74
 8012c38:	4617      	mov	r7, r2
 8012c3a:	461d      	mov	r5, r3
 8012c3c:	4606      	mov	r6, r0
 8012c3e:	b118      	cbz	r0, 8012c48 <_vfiprintf_r+0x18>
 8012c40:	6983      	ldr	r3, [r0, #24]
 8012c42:	b90b      	cbnz	r3, 8012c48 <_vfiprintf_r+0x18>
 8012c44:	f7ff f9d8 	bl	8011ff8 <__sinit>
 8012c48:	4b7c      	ldr	r3, [pc, #496]	; (8012e3c <_vfiprintf_r+0x20c>)
 8012c4a:	429c      	cmp	r4, r3
 8012c4c:	d158      	bne.n	8012d00 <_vfiprintf_r+0xd0>
 8012c4e:	6874      	ldr	r4, [r6, #4]
 8012c50:	89a3      	ldrh	r3, [r4, #12]
 8012c52:	0718      	lsls	r0, r3, #28
 8012c54:	d55e      	bpl.n	8012d14 <_vfiprintf_r+0xe4>
 8012c56:	6923      	ldr	r3, [r4, #16]
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d05b      	beq.n	8012d14 <_vfiprintf_r+0xe4>
 8012c5c:	2300      	movs	r3, #0
 8012c5e:	9309      	str	r3, [sp, #36]	; 0x24
 8012c60:	2320      	movs	r3, #32
 8012c62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012c66:	2330      	movs	r3, #48	; 0x30
 8012c68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012c6c:	9503      	str	r5, [sp, #12]
 8012c6e:	f04f 0b01 	mov.w	fp, #1
 8012c72:	46b8      	mov	r8, r7
 8012c74:	4645      	mov	r5, r8
 8012c76:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012c7a:	b10b      	cbz	r3, 8012c80 <_vfiprintf_r+0x50>
 8012c7c:	2b25      	cmp	r3, #37	; 0x25
 8012c7e:	d154      	bne.n	8012d2a <_vfiprintf_r+0xfa>
 8012c80:	ebb8 0a07 	subs.w	sl, r8, r7
 8012c84:	d00b      	beq.n	8012c9e <_vfiprintf_r+0x6e>
 8012c86:	4653      	mov	r3, sl
 8012c88:	463a      	mov	r2, r7
 8012c8a:	4621      	mov	r1, r4
 8012c8c:	4630      	mov	r0, r6
 8012c8e:	f7ff ffbc 	bl	8012c0a <__sfputs_r>
 8012c92:	3001      	adds	r0, #1
 8012c94:	f000 80c2 	beq.w	8012e1c <_vfiprintf_r+0x1ec>
 8012c98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c9a:	4453      	add	r3, sl
 8012c9c:	9309      	str	r3, [sp, #36]	; 0x24
 8012c9e:	f898 3000 	ldrb.w	r3, [r8]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	f000 80ba 	beq.w	8012e1c <_vfiprintf_r+0x1ec>
 8012ca8:	2300      	movs	r3, #0
 8012caa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012cae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012cb2:	9304      	str	r3, [sp, #16]
 8012cb4:	9307      	str	r3, [sp, #28]
 8012cb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012cba:	931a      	str	r3, [sp, #104]	; 0x68
 8012cbc:	46a8      	mov	r8, r5
 8012cbe:	2205      	movs	r2, #5
 8012cc0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8012cc4:	485e      	ldr	r0, [pc, #376]	; (8012e40 <_vfiprintf_r+0x210>)
 8012cc6:	f7ed fab3 	bl	8000230 <memchr>
 8012cca:	9b04      	ldr	r3, [sp, #16]
 8012ccc:	bb78      	cbnz	r0, 8012d2e <_vfiprintf_r+0xfe>
 8012cce:	06d9      	lsls	r1, r3, #27
 8012cd0:	bf44      	itt	mi
 8012cd2:	2220      	movmi	r2, #32
 8012cd4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012cd8:	071a      	lsls	r2, r3, #28
 8012cda:	bf44      	itt	mi
 8012cdc:	222b      	movmi	r2, #43	; 0x2b
 8012cde:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012ce2:	782a      	ldrb	r2, [r5, #0]
 8012ce4:	2a2a      	cmp	r2, #42	; 0x2a
 8012ce6:	d02a      	beq.n	8012d3e <_vfiprintf_r+0x10e>
 8012ce8:	9a07      	ldr	r2, [sp, #28]
 8012cea:	46a8      	mov	r8, r5
 8012cec:	2000      	movs	r0, #0
 8012cee:	250a      	movs	r5, #10
 8012cf0:	4641      	mov	r1, r8
 8012cf2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012cf6:	3b30      	subs	r3, #48	; 0x30
 8012cf8:	2b09      	cmp	r3, #9
 8012cfa:	d969      	bls.n	8012dd0 <_vfiprintf_r+0x1a0>
 8012cfc:	b360      	cbz	r0, 8012d58 <_vfiprintf_r+0x128>
 8012cfe:	e024      	b.n	8012d4a <_vfiprintf_r+0x11a>
 8012d00:	4b50      	ldr	r3, [pc, #320]	; (8012e44 <_vfiprintf_r+0x214>)
 8012d02:	429c      	cmp	r4, r3
 8012d04:	d101      	bne.n	8012d0a <_vfiprintf_r+0xda>
 8012d06:	68b4      	ldr	r4, [r6, #8]
 8012d08:	e7a2      	b.n	8012c50 <_vfiprintf_r+0x20>
 8012d0a:	4b4f      	ldr	r3, [pc, #316]	; (8012e48 <_vfiprintf_r+0x218>)
 8012d0c:	429c      	cmp	r4, r3
 8012d0e:	bf08      	it	eq
 8012d10:	68f4      	ldreq	r4, [r6, #12]
 8012d12:	e79d      	b.n	8012c50 <_vfiprintf_r+0x20>
 8012d14:	4621      	mov	r1, r4
 8012d16:	4630      	mov	r0, r6
 8012d18:	f7fe f9ca 	bl	80110b0 <__swsetup_r>
 8012d1c:	2800      	cmp	r0, #0
 8012d1e:	d09d      	beq.n	8012c5c <_vfiprintf_r+0x2c>
 8012d20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012d24:	b01d      	add	sp, #116	; 0x74
 8012d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d2a:	46a8      	mov	r8, r5
 8012d2c:	e7a2      	b.n	8012c74 <_vfiprintf_r+0x44>
 8012d2e:	4a44      	ldr	r2, [pc, #272]	; (8012e40 <_vfiprintf_r+0x210>)
 8012d30:	1a80      	subs	r0, r0, r2
 8012d32:	fa0b f000 	lsl.w	r0, fp, r0
 8012d36:	4318      	orrs	r0, r3
 8012d38:	9004      	str	r0, [sp, #16]
 8012d3a:	4645      	mov	r5, r8
 8012d3c:	e7be      	b.n	8012cbc <_vfiprintf_r+0x8c>
 8012d3e:	9a03      	ldr	r2, [sp, #12]
 8012d40:	1d11      	adds	r1, r2, #4
 8012d42:	6812      	ldr	r2, [r2, #0]
 8012d44:	9103      	str	r1, [sp, #12]
 8012d46:	2a00      	cmp	r2, #0
 8012d48:	db01      	blt.n	8012d4e <_vfiprintf_r+0x11e>
 8012d4a:	9207      	str	r2, [sp, #28]
 8012d4c:	e004      	b.n	8012d58 <_vfiprintf_r+0x128>
 8012d4e:	4252      	negs	r2, r2
 8012d50:	f043 0302 	orr.w	r3, r3, #2
 8012d54:	9207      	str	r2, [sp, #28]
 8012d56:	9304      	str	r3, [sp, #16]
 8012d58:	f898 3000 	ldrb.w	r3, [r8]
 8012d5c:	2b2e      	cmp	r3, #46	; 0x2e
 8012d5e:	d10e      	bne.n	8012d7e <_vfiprintf_r+0x14e>
 8012d60:	f898 3001 	ldrb.w	r3, [r8, #1]
 8012d64:	2b2a      	cmp	r3, #42	; 0x2a
 8012d66:	d138      	bne.n	8012dda <_vfiprintf_r+0x1aa>
 8012d68:	9b03      	ldr	r3, [sp, #12]
 8012d6a:	1d1a      	adds	r2, r3, #4
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	9203      	str	r2, [sp, #12]
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	bfb8      	it	lt
 8012d74:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012d78:	f108 0802 	add.w	r8, r8, #2
 8012d7c:	9305      	str	r3, [sp, #20]
 8012d7e:	4d33      	ldr	r5, [pc, #204]	; (8012e4c <_vfiprintf_r+0x21c>)
 8012d80:	f898 1000 	ldrb.w	r1, [r8]
 8012d84:	2203      	movs	r2, #3
 8012d86:	4628      	mov	r0, r5
 8012d88:	f7ed fa52 	bl	8000230 <memchr>
 8012d8c:	b140      	cbz	r0, 8012da0 <_vfiprintf_r+0x170>
 8012d8e:	2340      	movs	r3, #64	; 0x40
 8012d90:	1b40      	subs	r0, r0, r5
 8012d92:	fa03 f000 	lsl.w	r0, r3, r0
 8012d96:	9b04      	ldr	r3, [sp, #16]
 8012d98:	4303      	orrs	r3, r0
 8012d9a:	f108 0801 	add.w	r8, r8, #1
 8012d9e:	9304      	str	r3, [sp, #16]
 8012da0:	f898 1000 	ldrb.w	r1, [r8]
 8012da4:	482a      	ldr	r0, [pc, #168]	; (8012e50 <_vfiprintf_r+0x220>)
 8012da6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012daa:	2206      	movs	r2, #6
 8012dac:	f108 0701 	add.w	r7, r8, #1
 8012db0:	f7ed fa3e 	bl	8000230 <memchr>
 8012db4:	2800      	cmp	r0, #0
 8012db6:	d037      	beq.n	8012e28 <_vfiprintf_r+0x1f8>
 8012db8:	4b26      	ldr	r3, [pc, #152]	; (8012e54 <_vfiprintf_r+0x224>)
 8012dba:	bb1b      	cbnz	r3, 8012e04 <_vfiprintf_r+0x1d4>
 8012dbc:	9b03      	ldr	r3, [sp, #12]
 8012dbe:	3307      	adds	r3, #7
 8012dc0:	f023 0307 	bic.w	r3, r3, #7
 8012dc4:	3308      	adds	r3, #8
 8012dc6:	9303      	str	r3, [sp, #12]
 8012dc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012dca:	444b      	add	r3, r9
 8012dcc:	9309      	str	r3, [sp, #36]	; 0x24
 8012dce:	e750      	b.n	8012c72 <_vfiprintf_r+0x42>
 8012dd0:	fb05 3202 	mla	r2, r5, r2, r3
 8012dd4:	2001      	movs	r0, #1
 8012dd6:	4688      	mov	r8, r1
 8012dd8:	e78a      	b.n	8012cf0 <_vfiprintf_r+0xc0>
 8012dda:	2300      	movs	r3, #0
 8012ddc:	f108 0801 	add.w	r8, r8, #1
 8012de0:	9305      	str	r3, [sp, #20]
 8012de2:	4619      	mov	r1, r3
 8012de4:	250a      	movs	r5, #10
 8012de6:	4640      	mov	r0, r8
 8012de8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012dec:	3a30      	subs	r2, #48	; 0x30
 8012dee:	2a09      	cmp	r2, #9
 8012df0:	d903      	bls.n	8012dfa <_vfiprintf_r+0x1ca>
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d0c3      	beq.n	8012d7e <_vfiprintf_r+0x14e>
 8012df6:	9105      	str	r1, [sp, #20]
 8012df8:	e7c1      	b.n	8012d7e <_vfiprintf_r+0x14e>
 8012dfa:	fb05 2101 	mla	r1, r5, r1, r2
 8012dfe:	2301      	movs	r3, #1
 8012e00:	4680      	mov	r8, r0
 8012e02:	e7f0      	b.n	8012de6 <_vfiprintf_r+0x1b6>
 8012e04:	ab03      	add	r3, sp, #12
 8012e06:	9300      	str	r3, [sp, #0]
 8012e08:	4622      	mov	r2, r4
 8012e0a:	4b13      	ldr	r3, [pc, #76]	; (8012e58 <_vfiprintf_r+0x228>)
 8012e0c:	a904      	add	r1, sp, #16
 8012e0e:	4630      	mov	r0, r6
 8012e10:	f7fd fc74 	bl	80106fc <_printf_float>
 8012e14:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8012e18:	4681      	mov	r9, r0
 8012e1a:	d1d5      	bne.n	8012dc8 <_vfiprintf_r+0x198>
 8012e1c:	89a3      	ldrh	r3, [r4, #12]
 8012e1e:	065b      	lsls	r3, r3, #25
 8012e20:	f53f af7e 	bmi.w	8012d20 <_vfiprintf_r+0xf0>
 8012e24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012e26:	e77d      	b.n	8012d24 <_vfiprintf_r+0xf4>
 8012e28:	ab03      	add	r3, sp, #12
 8012e2a:	9300      	str	r3, [sp, #0]
 8012e2c:	4622      	mov	r2, r4
 8012e2e:	4b0a      	ldr	r3, [pc, #40]	; (8012e58 <_vfiprintf_r+0x228>)
 8012e30:	a904      	add	r1, sp, #16
 8012e32:	4630      	mov	r0, r6
 8012e34:	f7fd ff18 	bl	8010c68 <_printf_i>
 8012e38:	e7ec      	b.n	8012e14 <_vfiprintf_r+0x1e4>
 8012e3a:	bf00      	nop
 8012e3c:	0801583c 	.word	0x0801583c
 8012e40:	0801597c 	.word	0x0801597c
 8012e44:	0801585c 	.word	0x0801585c
 8012e48:	0801581c 	.word	0x0801581c
 8012e4c:	08015982 	.word	0x08015982
 8012e50:	08015986 	.word	0x08015986
 8012e54:	080106fd 	.word	0x080106fd
 8012e58:	08012c0b 	.word	0x08012c0b

08012e5c <_sbrk_r>:
 8012e5c:	b538      	push	{r3, r4, r5, lr}
 8012e5e:	4c06      	ldr	r4, [pc, #24]	; (8012e78 <_sbrk_r+0x1c>)
 8012e60:	2300      	movs	r3, #0
 8012e62:	4605      	mov	r5, r0
 8012e64:	4608      	mov	r0, r1
 8012e66:	6023      	str	r3, [r4, #0]
 8012e68:	f7f5 fa9e 	bl	80083a8 <_sbrk>
 8012e6c:	1c43      	adds	r3, r0, #1
 8012e6e:	d102      	bne.n	8012e76 <_sbrk_r+0x1a>
 8012e70:	6823      	ldr	r3, [r4, #0]
 8012e72:	b103      	cbz	r3, 8012e76 <_sbrk_r+0x1a>
 8012e74:	602b      	str	r3, [r5, #0]
 8012e76:	bd38      	pop	{r3, r4, r5, pc}
 8012e78:	20002cf0 	.word	0x20002cf0

08012e7c <__sread>:
 8012e7c:	b510      	push	{r4, lr}
 8012e7e:	460c      	mov	r4, r1
 8012e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e84:	f000 f8e8 	bl	8013058 <_read_r>
 8012e88:	2800      	cmp	r0, #0
 8012e8a:	bfab      	itete	ge
 8012e8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012e8e:	89a3      	ldrhlt	r3, [r4, #12]
 8012e90:	181b      	addge	r3, r3, r0
 8012e92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012e96:	bfac      	ite	ge
 8012e98:	6563      	strge	r3, [r4, #84]	; 0x54
 8012e9a:	81a3      	strhlt	r3, [r4, #12]
 8012e9c:	bd10      	pop	{r4, pc}

08012e9e <__swrite>:
 8012e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ea2:	461f      	mov	r7, r3
 8012ea4:	898b      	ldrh	r3, [r1, #12]
 8012ea6:	05db      	lsls	r3, r3, #23
 8012ea8:	4605      	mov	r5, r0
 8012eaa:	460c      	mov	r4, r1
 8012eac:	4616      	mov	r6, r2
 8012eae:	d505      	bpl.n	8012ebc <__swrite+0x1e>
 8012eb0:	2302      	movs	r3, #2
 8012eb2:	2200      	movs	r2, #0
 8012eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012eb8:	f000 f868 	bl	8012f8c <_lseek_r>
 8012ebc:	89a3      	ldrh	r3, [r4, #12]
 8012ebe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012ec2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012ec6:	81a3      	strh	r3, [r4, #12]
 8012ec8:	4632      	mov	r2, r6
 8012eca:	463b      	mov	r3, r7
 8012ecc:	4628      	mov	r0, r5
 8012ece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012ed2:	f000 b817 	b.w	8012f04 <_write_r>

08012ed6 <__sseek>:
 8012ed6:	b510      	push	{r4, lr}
 8012ed8:	460c      	mov	r4, r1
 8012eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ede:	f000 f855 	bl	8012f8c <_lseek_r>
 8012ee2:	1c43      	adds	r3, r0, #1
 8012ee4:	89a3      	ldrh	r3, [r4, #12]
 8012ee6:	bf15      	itete	ne
 8012ee8:	6560      	strne	r0, [r4, #84]	; 0x54
 8012eea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012eee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012ef2:	81a3      	strheq	r3, [r4, #12]
 8012ef4:	bf18      	it	ne
 8012ef6:	81a3      	strhne	r3, [r4, #12]
 8012ef8:	bd10      	pop	{r4, pc}

08012efa <__sclose>:
 8012efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012efe:	f000 b813 	b.w	8012f28 <_close_r>
	...

08012f04 <_write_r>:
 8012f04:	b538      	push	{r3, r4, r5, lr}
 8012f06:	4c07      	ldr	r4, [pc, #28]	; (8012f24 <_write_r+0x20>)
 8012f08:	4605      	mov	r5, r0
 8012f0a:	4608      	mov	r0, r1
 8012f0c:	4611      	mov	r1, r2
 8012f0e:	2200      	movs	r2, #0
 8012f10:	6022      	str	r2, [r4, #0]
 8012f12:	461a      	mov	r2, r3
 8012f14:	f7f4 ff05 	bl	8007d22 <_write>
 8012f18:	1c43      	adds	r3, r0, #1
 8012f1a:	d102      	bne.n	8012f22 <_write_r+0x1e>
 8012f1c:	6823      	ldr	r3, [r4, #0]
 8012f1e:	b103      	cbz	r3, 8012f22 <_write_r+0x1e>
 8012f20:	602b      	str	r3, [r5, #0]
 8012f22:	bd38      	pop	{r3, r4, r5, pc}
 8012f24:	20002cf0 	.word	0x20002cf0

08012f28 <_close_r>:
 8012f28:	b538      	push	{r3, r4, r5, lr}
 8012f2a:	4c06      	ldr	r4, [pc, #24]	; (8012f44 <_close_r+0x1c>)
 8012f2c:	2300      	movs	r3, #0
 8012f2e:	4605      	mov	r5, r0
 8012f30:	4608      	mov	r0, r1
 8012f32:	6023      	str	r3, [r4, #0]
 8012f34:	f7f5 fa03 	bl	800833e <_close>
 8012f38:	1c43      	adds	r3, r0, #1
 8012f3a:	d102      	bne.n	8012f42 <_close_r+0x1a>
 8012f3c:	6823      	ldr	r3, [r4, #0]
 8012f3e:	b103      	cbz	r3, 8012f42 <_close_r+0x1a>
 8012f40:	602b      	str	r3, [r5, #0]
 8012f42:	bd38      	pop	{r3, r4, r5, pc}
 8012f44:	20002cf0 	.word	0x20002cf0

08012f48 <_fstat_r>:
 8012f48:	b538      	push	{r3, r4, r5, lr}
 8012f4a:	4c07      	ldr	r4, [pc, #28]	; (8012f68 <_fstat_r+0x20>)
 8012f4c:	2300      	movs	r3, #0
 8012f4e:	4605      	mov	r5, r0
 8012f50:	4608      	mov	r0, r1
 8012f52:	4611      	mov	r1, r2
 8012f54:	6023      	str	r3, [r4, #0]
 8012f56:	f7f5 f9fe 	bl	8008356 <_fstat>
 8012f5a:	1c43      	adds	r3, r0, #1
 8012f5c:	d102      	bne.n	8012f64 <_fstat_r+0x1c>
 8012f5e:	6823      	ldr	r3, [r4, #0]
 8012f60:	b103      	cbz	r3, 8012f64 <_fstat_r+0x1c>
 8012f62:	602b      	str	r3, [r5, #0]
 8012f64:	bd38      	pop	{r3, r4, r5, pc}
 8012f66:	bf00      	nop
 8012f68:	20002cf0 	.word	0x20002cf0

08012f6c <_isatty_r>:
 8012f6c:	b538      	push	{r3, r4, r5, lr}
 8012f6e:	4c06      	ldr	r4, [pc, #24]	; (8012f88 <_isatty_r+0x1c>)
 8012f70:	2300      	movs	r3, #0
 8012f72:	4605      	mov	r5, r0
 8012f74:	4608      	mov	r0, r1
 8012f76:	6023      	str	r3, [r4, #0]
 8012f78:	f7f5 f9fd 	bl	8008376 <_isatty>
 8012f7c:	1c43      	adds	r3, r0, #1
 8012f7e:	d102      	bne.n	8012f86 <_isatty_r+0x1a>
 8012f80:	6823      	ldr	r3, [r4, #0]
 8012f82:	b103      	cbz	r3, 8012f86 <_isatty_r+0x1a>
 8012f84:	602b      	str	r3, [r5, #0]
 8012f86:	bd38      	pop	{r3, r4, r5, pc}
 8012f88:	20002cf0 	.word	0x20002cf0

08012f8c <_lseek_r>:
 8012f8c:	b538      	push	{r3, r4, r5, lr}
 8012f8e:	4c07      	ldr	r4, [pc, #28]	; (8012fac <_lseek_r+0x20>)
 8012f90:	4605      	mov	r5, r0
 8012f92:	4608      	mov	r0, r1
 8012f94:	4611      	mov	r1, r2
 8012f96:	2200      	movs	r2, #0
 8012f98:	6022      	str	r2, [r4, #0]
 8012f9a:	461a      	mov	r2, r3
 8012f9c:	f7f5 f9f6 	bl	800838c <_lseek>
 8012fa0:	1c43      	adds	r3, r0, #1
 8012fa2:	d102      	bne.n	8012faa <_lseek_r+0x1e>
 8012fa4:	6823      	ldr	r3, [r4, #0]
 8012fa6:	b103      	cbz	r3, 8012faa <_lseek_r+0x1e>
 8012fa8:	602b      	str	r3, [r5, #0]
 8012faa:	bd38      	pop	{r3, r4, r5, pc}
 8012fac:	20002cf0 	.word	0x20002cf0

08012fb0 <__ascii_mbtowc>:
 8012fb0:	b082      	sub	sp, #8
 8012fb2:	b901      	cbnz	r1, 8012fb6 <__ascii_mbtowc+0x6>
 8012fb4:	a901      	add	r1, sp, #4
 8012fb6:	b142      	cbz	r2, 8012fca <__ascii_mbtowc+0x1a>
 8012fb8:	b14b      	cbz	r3, 8012fce <__ascii_mbtowc+0x1e>
 8012fba:	7813      	ldrb	r3, [r2, #0]
 8012fbc:	600b      	str	r3, [r1, #0]
 8012fbe:	7812      	ldrb	r2, [r2, #0]
 8012fc0:	1c10      	adds	r0, r2, #0
 8012fc2:	bf18      	it	ne
 8012fc4:	2001      	movne	r0, #1
 8012fc6:	b002      	add	sp, #8
 8012fc8:	4770      	bx	lr
 8012fca:	4610      	mov	r0, r2
 8012fcc:	e7fb      	b.n	8012fc6 <__ascii_mbtowc+0x16>
 8012fce:	f06f 0001 	mvn.w	r0, #1
 8012fd2:	e7f8      	b.n	8012fc6 <__ascii_mbtowc+0x16>

08012fd4 <memmove>:
 8012fd4:	4288      	cmp	r0, r1
 8012fd6:	b510      	push	{r4, lr}
 8012fd8:	eb01 0302 	add.w	r3, r1, r2
 8012fdc:	d807      	bhi.n	8012fee <memmove+0x1a>
 8012fde:	1e42      	subs	r2, r0, #1
 8012fe0:	4299      	cmp	r1, r3
 8012fe2:	d00a      	beq.n	8012ffa <memmove+0x26>
 8012fe4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012fe8:	f802 4f01 	strb.w	r4, [r2, #1]!
 8012fec:	e7f8      	b.n	8012fe0 <memmove+0xc>
 8012fee:	4283      	cmp	r3, r0
 8012ff0:	d9f5      	bls.n	8012fde <memmove+0xa>
 8012ff2:	1881      	adds	r1, r0, r2
 8012ff4:	1ad2      	subs	r2, r2, r3
 8012ff6:	42d3      	cmn	r3, r2
 8012ff8:	d100      	bne.n	8012ffc <memmove+0x28>
 8012ffa:	bd10      	pop	{r4, pc}
 8012ffc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013000:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8013004:	e7f7      	b.n	8012ff6 <memmove+0x22>

08013006 <__malloc_lock>:
 8013006:	4770      	bx	lr

08013008 <__malloc_unlock>:
 8013008:	4770      	bx	lr

0801300a <_realloc_r>:
 801300a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801300c:	4607      	mov	r7, r0
 801300e:	4614      	mov	r4, r2
 8013010:	460e      	mov	r6, r1
 8013012:	b921      	cbnz	r1, 801301e <_realloc_r+0x14>
 8013014:	4611      	mov	r1, r2
 8013016:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801301a:	f7ff bc33 	b.w	8012884 <_malloc_r>
 801301e:	b922      	cbnz	r2, 801302a <_realloc_r+0x20>
 8013020:	f7ff fbe2 	bl	80127e8 <_free_r>
 8013024:	4625      	mov	r5, r4
 8013026:	4628      	mov	r0, r5
 8013028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801302a:	f000 f834 	bl	8013096 <_malloc_usable_size_r>
 801302e:	42a0      	cmp	r0, r4
 8013030:	d20f      	bcs.n	8013052 <_realloc_r+0x48>
 8013032:	4621      	mov	r1, r4
 8013034:	4638      	mov	r0, r7
 8013036:	f7ff fc25 	bl	8012884 <_malloc_r>
 801303a:	4605      	mov	r5, r0
 801303c:	2800      	cmp	r0, #0
 801303e:	d0f2      	beq.n	8013026 <_realloc_r+0x1c>
 8013040:	4631      	mov	r1, r6
 8013042:	4622      	mov	r2, r4
 8013044:	f7ff f8dc 	bl	8012200 <memcpy>
 8013048:	4631      	mov	r1, r6
 801304a:	4638      	mov	r0, r7
 801304c:	f7ff fbcc 	bl	80127e8 <_free_r>
 8013050:	e7e9      	b.n	8013026 <_realloc_r+0x1c>
 8013052:	4635      	mov	r5, r6
 8013054:	e7e7      	b.n	8013026 <_realloc_r+0x1c>
	...

08013058 <_read_r>:
 8013058:	b538      	push	{r3, r4, r5, lr}
 801305a:	4c07      	ldr	r4, [pc, #28]	; (8013078 <_read_r+0x20>)
 801305c:	4605      	mov	r5, r0
 801305e:	4608      	mov	r0, r1
 8013060:	4611      	mov	r1, r2
 8013062:	2200      	movs	r2, #0
 8013064:	6022      	str	r2, [r4, #0]
 8013066:	461a      	mov	r2, r3
 8013068:	f7f5 f94c 	bl	8008304 <_read>
 801306c:	1c43      	adds	r3, r0, #1
 801306e:	d102      	bne.n	8013076 <_read_r+0x1e>
 8013070:	6823      	ldr	r3, [r4, #0]
 8013072:	b103      	cbz	r3, 8013076 <_read_r+0x1e>
 8013074:	602b      	str	r3, [r5, #0]
 8013076:	bd38      	pop	{r3, r4, r5, pc}
 8013078:	20002cf0 	.word	0x20002cf0

0801307c <__ascii_wctomb>:
 801307c:	b149      	cbz	r1, 8013092 <__ascii_wctomb+0x16>
 801307e:	2aff      	cmp	r2, #255	; 0xff
 8013080:	bf85      	ittet	hi
 8013082:	238a      	movhi	r3, #138	; 0x8a
 8013084:	6003      	strhi	r3, [r0, #0]
 8013086:	700a      	strbls	r2, [r1, #0]
 8013088:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801308c:	bf98      	it	ls
 801308e:	2001      	movls	r0, #1
 8013090:	4770      	bx	lr
 8013092:	4608      	mov	r0, r1
 8013094:	4770      	bx	lr

08013096 <_malloc_usable_size_r>:
 8013096:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801309a:	1f18      	subs	r0, r3, #4
 801309c:	2b00      	cmp	r3, #0
 801309e:	bfbc      	itt	lt
 80130a0:	580b      	ldrlt	r3, [r1, r0]
 80130a2:	18c0      	addlt	r0, r0, r3
 80130a4:	4770      	bx	lr
	...

080130a8 <log10>:
 80130a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80130aa:	ed2d 8b02 	vpush	{d8}
 80130ae:	b08b      	sub	sp, #44	; 0x2c
 80130b0:	ec55 4b10 	vmov	r4, r5, d0
 80130b4:	f000 f9e8 	bl	8013488 <__ieee754_log10>
 80130b8:	4b36      	ldr	r3, [pc, #216]	; (8013194 <log10+0xec>)
 80130ba:	eeb0 8a40 	vmov.f32	s16, s0
 80130be:	eef0 8a60 	vmov.f32	s17, s1
 80130c2:	f993 6000 	ldrsb.w	r6, [r3]
 80130c6:	1c73      	adds	r3, r6, #1
 80130c8:	d05c      	beq.n	8013184 <log10+0xdc>
 80130ca:	4622      	mov	r2, r4
 80130cc:	462b      	mov	r3, r5
 80130ce:	4620      	mov	r0, r4
 80130d0:	4629      	mov	r1, r5
 80130d2:	f7ed fd53 	bl	8000b7c <__aeabi_dcmpun>
 80130d6:	4607      	mov	r7, r0
 80130d8:	2800      	cmp	r0, #0
 80130da:	d153      	bne.n	8013184 <log10+0xdc>
 80130dc:	2200      	movs	r2, #0
 80130de:	2300      	movs	r3, #0
 80130e0:	4620      	mov	r0, r4
 80130e2:	4629      	mov	r1, r5
 80130e4:	f7ed fd2c 	bl	8000b40 <__aeabi_dcmple>
 80130e8:	2800      	cmp	r0, #0
 80130ea:	d04b      	beq.n	8013184 <log10+0xdc>
 80130ec:	4b2a      	ldr	r3, [pc, #168]	; (8013198 <log10+0xf0>)
 80130ee:	9301      	str	r3, [sp, #4]
 80130f0:	9708      	str	r7, [sp, #32]
 80130f2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80130f6:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80130fa:	b9a6      	cbnz	r6, 8013126 <log10+0x7e>
 80130fc:	4b27      	ldr	r3, [pc, #156]	; (801319c <log10+0xf4>)
 80130fe:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8013102:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013106:	4620      	mov	r0, r4
 8013108:	2200      	movs	r2, #0
 801310a:	2300      	movs	r3, #0
 801310c:	4629      	mov	r1, r5
 801310e:	f7ed fd03 	bl	8000b18 <__aeabi_dcmpeq>
 8013112:	bb40      	cbnz	r0, 8013166 <log10+0xbe>
 8013114:	2301      	movs	r3, #1
 8013116:	2e02      	cmp	r6, #2
 8013118:	9300      	str	r3, [sp, #0]
 801311a:	d119      	bne.n	8013150 <log10+0xa8>
 801311c:	f7fd fa28 	bl	8010570 <__errno>
 8013120:	2321      	movs	r3, #33	; 0x21
 8013122:	6003      	str	r3, [r0, #0]
 8013124:	e019      	b.n	801315a <log10+0xb2>
 8013126:	4b1e      	ldr	r3, [pc, #120]	; (80131a0 <log10+0xf8>)
 8013128:	2200      	movs	r2, #0
 801312a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801312e:	4620      	mov	r0, r4
 8013130:	2200      	movs	r2, #0
 8013132:	2300      	movs	r3, #0
 8013134:	4629      	mov	r1, r5
 8013136:	f7ed fcef 	bl	8000b18 <__aeabi_dcmpeq>
 801313a:	2800      	cmp	r0, #0
 801313c:	d0ea      	beq.n	8013114 <log10+0x6c>
 801313e:	2302      	movs	r3, #2
 8013140:	429e      	cmp	r6, r3
 8013142:	9300      	str	r3, [sp, #0]
 8013144:	d111      	bne.n	801316a <log10+0xc2>
 8013146:	f7fd fa13 	bl	8010570 <__errno>
 801314a:	2322      	movs	r3, #34	; 0x22
 801314c:	6003      	str	r3, [r0, #0]
 801314e:	e011      	b.n	8013174 <log10+0xcc>
 8013150:	4668      	mov	r0, sp
 8013152:	f000 fff4 	bl	801413e <matherr>
 8013156:	2800      	cmp	r0, #0
 8013158:	d0e0      	beq.n	801311c <log10+0x74>
 801315a:	4812      	ldr	r0, [pc, #72]	; (80131a4 <log10+0xfc>)
 801315c:	f000 fff4 	bl	8014148 <nan>
 8013160:	ed8d 0b06 	vstr	d0, [sp, #24]
 8013164:	e006      	b.n	8013174 <log10+0xcc>
 8013166:	2302      	movs	r3, #2
 8013168:	9300      	str	r3, [sp, #0]
 801316a:	4668      	mov	r0, sp
 801316c:	f000 ffe7 	bl	801413e <matherr>
 8013170:	2800      	cmp	r0, #0
 8013172:	d0e8      	beq.n	8013146 <log10+0x9e>
 8013174:	9b08      	ldr	r3, [sp, #32]
 8013176:	b11b      	cbz	r3, 8013180 <log10+0xd8>
 8013178:	f7fd f9fa 	bl	8010570 <__errno>
 801317c:	9b08      	ldr	r3, [sp, #32]
 801317e:	6003      	str	r3, [r0, #0]
 8013180:	ed9d 8b06 	vldr	d8, [sp, #24]
 8013184:	eeb0 0a48 	vmov.f32	s0, s16
 8013188:	eef0 0a68 	vmov.f32	s1, s17
 801318c:	b00b      	add	sp, #44	; 0x2c
 801318e:	ecbd 8b02 	vpop	{d8}
 8013192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013194:	20001e08 	.word	0x20001e08
 8013198:	08015a98 	.word	0x08015a98
 801319c:	c7efffff 	.word	0xc7efffff
 80131a0:	fff00000 	.word	0xfff00000
 80131a4:	08015981 	.word	0x08015981

080131a8 <pow>:
 80131a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131ac:	ed2d 8b04 	vpush	{d8-d9}
 80131b0:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8013484 <pow+0x2dc>
 80131b4:	b08d      	sub	sp, #52	; 0x34
 80131b6:	ec57 6b10 	vmov	r6, r7, d0
 80131ba:	ec55 4b11 	vmov	r4, r5, d1
 80131be:	f000 f9ef 	bl	80135a0 <__ieee754_pow>
 80131c2:	f999 3000 	ldrsb.w	r3, [r9]
 80131c6:	9300      	str	r3, [sp, #0]
 80131c8:	3301      	adds	r3, #1
 80131ca:	eeb0 8a40 	vmov.f32	s16, s0
 80131ce:	eef0 8a60 	vmov.f32	s17, s1
 80131d2:	46c8      	mov	r8, r9
 80131d4:	d05f      	beq.n	8013296 <pow+0xee>
 80131d6:	4622      	mov	r2, r4
 80131d8:	462b      	mov	r3, r5
 80131da:	4620      	mov	r0, r4
 80131dc:	4629      	mov	r1, r5
 80131de:	f7ed fccd 	bl	8000b7c <__aeabi_dcmpun>
 80131e2:	4683      	mov	fp, r0
 80131e4:	2800      	cmp	r0, #0
 80131e6:	d156      	bne.n	8013296 <pow+0xee>
 80131e8:	4632      	mov	r2, r6
 80131ea:	463b      	mov	r3, r7
 80131ec:	4630      	mov	r0, r6
 80131ee:	4639      	mov	r1, r7
 80131f0:	f7ed fcc4 	bl	8000b7c <__aeabi_dcmpun>
 80131f4:	9001      	str	r0, [sp, #4]
 80131f6:	b1e8      	cbz	r0, 8013234 <pow+0x8c>
 80131f8:	2200      	movs	r2, #0
 80131fa:	2300      	movs	r3, #0
 80131fc:	4620      	mov	r0, r4
 80131fe:	4629      	mov	r1, r5
 8013200:	f7ed fc8a 	bl	8000b18 <__aeabi_dcmpeq>
 8013204:	2800      	cmp	r0, #0
 8013206:	d046      	beq.n	8013296 <pow+0xee>
 8013208:	2301      	movs	r3, #1
 801320a:	9302      	str	r3, [sp, #8]
 801320c:	4b96      	ldr	r3, [pc, #600]	; (8013468 <pow+0x2c0>)
 801320e:	9303      	str	r3, [sp, #12]
 8013210:	4b96      	ldr	r3, [pc, #600]	; (801346c <pow+0x2c4>)
 8013212:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8013216:	2200      	movs	r2, #0
 8013218:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801321c:	9b00      	ldr	r3, [sp, #0]
 801321e:	2b02      	cmp	r3, #2
 8013220:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013224:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013228:	d033      	beq.n	8013292 <pow+0xea>
 801322a:	a802      	add	r0, sp, #8
 801322c:	f000 ff87 	bl	801413e <matherr>
 8013230:	bb48      	cbnz	r0, 8013286 <pow+0xde>
 8013232:	e05d      	b.n	80132f0 <pow+0x148>
 8013234:	f04f 0a00 	mov.w	sl, #0
 8013238:	f04f 0b00 	mov.w	fp, #0
 801323c:	4652      	mov	r2, sl
 801323e:	465b      	mov	r3, fp
 8013240:	4630      	mov	r0, r6
 8013242:	4639      	mov	r1, r7
 8013244:	f7ed fc68 	bl	8000b18 <__aeabi_dcmpeq>
 8013248:	ec4b ab19 	vmov	d9, sl, fp
 801324c:	2800      	cmp	r0, #0
 801324e:	d054      	beq.n	80132fa <pow+0x152>
 8013250:	4652      	mov	r2, sl
 8013252:	465b      	mov	r3, fp
 8013254:	4620      	mov	r0, r4
 8013256:	4629      	mov	r1, r5
 8013258:	f7ed fc5e 	bl	8000b18 <__aeabi_dcmpeq>
 801325c:	4680      	mov	r8, r0
 801325e:	b318      	cbz	r0, 80132a8 <pow+0x100>
 8013260:	2301      	movs	r3, #1
 8013262:	9302      	str	r3, [sp, #8]
 8013264:	4b80      	ldr	r3, [pc, #512]	; (8013468 <pow+0x2c0>)
 8013266:	9303      	str	r3, [sp, #12]
 8013268:	9b01      	ldr	r3, [sp, #4]
 801326a:	930a      	str	r3, [sp, #40]	; 0x28
 801326c:	9b00      	ldr	r3, [sp, #0]
 801326e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013272:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013276:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801327a:	2b00      	cmp	r3, #0
 801327c:	d0d5      	beq.n	801322a <pow+0x82>
 801327e:	4b7b      	ldr	r3, [pc, #492]	; (801346c <pow+0x2c4>)
 8013280:	2200      	movs	r2, #0
 8013282:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013288:	b11b      	cbz	r3, 8013292 <pow+0xea>
 801328a:	f7fd f971 	bl	8010570 <__errno>
 801328e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013290:	6003      	str	r3, [r0, #0]
 8013292:	ed9d 8b08 	vldr	d8, [sp, #32]
 8013296:	eeb0 0a48 	vmov.f32	s0, s16
 801329a:	eef0 0a68 	vmov.f32	s1, s17
 801329e:	b00d      	add	sp, #52	; 0x34
 80132a0:	ecbd 8b04 	vpop	{d8-d9}
 80132a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132a8:	ec45 4b10 	vmov	d0, r4, r5
 80132ac:	f000 ff3f 	bl	801412e <finite>
 80132b0:	2800      	cmp	r0, #0
 80132b2:	d0f0      	beq.n	8013296 <pow+0xee>
 80132b4:	4652      	mov	r2, sl
 80132b6:	465b      	mov	r3, fp
 80132b8:	4620      	mov	r0, r4
 80132ba:	4629      	mov	r1, r5
 80132bc:	f7ed fc36 	bl	8000b2c <__aeabi_dcmplt>
 80132c0:	2800      	cmp	r0, #0
 80132c2:	d0e8      	beq.n	8013296 <pow+0xee>
 80132c4:	2301      	movs	r3, #1
 80132c6:	9302      	str	r3, [sp, #8]
 80132c8:	4b67      	ldr	r3, [pc, #412]	; (8013468 <pow+0x2c0>)
 80132ca:	9303      	str	r3, [sp, #12]
 80132cc:	f999 3000 	ldrsb.w	r3, [r9]
 80132d0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80132d4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80132d8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80132dc:	b913      	cbnz	r3, 80132e4 <pow+0x13c>
 80132de:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80132e2:	e7a2      	b.n	801322a <pow+0x82>
 80132e4:	4962      	ldr	r1, [pc, #392]	; (8013470 <pow+0x2c8>)
 80132e6:	2000      	movs	r0, #0
 80132e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80132ec:	2b02      	cmp	r3, #2
 80132ee:	d19c      	bne.n	801322a <pow+0x82>
 80132f0:	f7fd f93e 	bl	8010570 <__errno>
 80132f4:	2321      	movs	r3, #33	; 0x21
 80132f6:	6003      	str	r3, [r0, #0]
 80132f8:	e7c5      	b.n	8013286 <pow+0xde>
 80132fa:	eeb0 0a48 	vmov.f32	s0, s16
 80132fe:	eef0 0a68 	vmov.f32	s1, s17
 8013302:	f000 ff14 	bl	801412e <finite>
 8013306:	9000      	str	r0, [sp, #0]
 8013308:	2800      	cmp	r0, #0
 801330a:	f040 8081 	bne.w	8013410 <pow+0x268>
 801330e:	ec47 6b10 	vmov	d0, r6, r7
 8013312:	f000 ff0c 	bl	801412e <finite>
 8013316:	2800      	cmp	r0, #0
 8013318:	d07a      	beq.n	8013410 <pow+0x268>
 801331a:	ec45 4b10 	vmov	d0, r4, r5
 801331e:	f000 ff06 	bl	801412e <finite>
 8013322:	2800      	cmp	r0, #0
 8013324:	d074      	beq.n	8013410 <pow+0x268>
 8013326:	ec53 2b18 	vmov	r2, r3, d8
 801332a:	ee18 0a10 	vmov	r0, s16
 801332e:	4619      	mov	r1, r3
 8013330:	f7ed fc24 	bl	8000b7c <__aeabi_dcmpun>
 8013334:	f999 9000 	ldrsb.w	r9, [r9]
 8013338:	4b4b      	ldr	r3, [pc, #300]	; (8013468 <pow+0x2c0>)
 801333a:	b1b0      	cbz	r0, 801336a <pow+0x1c2>
 801333c:	2201      	movs	r2, #1
 801333e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013342:	9b00      	ldr	r3, [sp, #0]
 8013344:	930a      	str	r3, [sp, #40]	; 0x28
 8013346:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801334a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801334e:	f1b9 0f00 	cmp.w	r9, #0
 8013352:	d0c4      	beq.n	80132de <pow+0x136>
 8013354:	4652      	mov	r2, sl
 8013356:	465b      	mov	r3, fp
 8013358:	4650      	mov	r0, sl
 801335a:	4659      	mov	r1, fp
 801335c:	f7ed fa9e 	bl	800089c <__aeabi_ddiv>
 8013360:	f1b9 0f02 	cmp.w	r9, #2
 8013364:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013368:	e7c1      	b.n	80132ee <pow+0x146>
 801336a:	2203      	movs	r2, #3
 801336c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013370:	900a      	str	r0, [sp, #40]	; 0x28
 8013372:	4629      	mov	r1, r5
 8013374:	4620      	mov	r0, r4
 8013376:	2200      	movs	r2, #0
 8013378:	4b3e      	ldr	r3, [pc, #248]	; (8013474 <pow+0x2cc>)
 801337a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801337e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013382:	f7ed f961 	bl	8000648 <__aeabi_dmul>
 8013386:	4604      	mov	r4, r0
 8013388:	460d      	mov	r5, r1
 801338a:	f1b9 0f00 	cmp.w	r9, #0
 801338e:	d124      	bne.n	80133da <pow+0x232>
 8013390:	4b39      	ldr	r3, [pc, #228]	; (8013478 <pow+0x2d0>)
 8013392:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8013396:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801339a:	4630      	mov	r0, r6
 801339c:	4652      	mov	r2, sl
 801339e:	465b      	mov	r3, fp
 80133a0:	4639      	mov	r1, r7
 80133a2:	f7ed fbc3 	bl	8000b2c <__aeabi_dcmplt>
 80133a6:	2800      	cmp	r0, #0
 80133a8:	d056      	beq.n	8013458 <pow+0x2b0>
 80133aa:	ec45 4b10 	vmov	d0, r4, r5
 80133ae:	f000 fed3 	bl	8014158 <rint>
 80133b2:	4622      	mov	r2, r4
 80133b4:	462b      	mov	r3, r5
 80133b6:	ec51 0b10 	vmov	r0, r1, d0
 80133ba:	f7ed fbad 	bl	8000b18 <__aeabi_dcmpeq>
 80133be:	b920      	cbnz	r0, 80133ca <pow+0x222>
 80133c0:	4b2e      	ldr	r3, [pc, #184]	; (801347c <pow+0x2d4>)
 80133c2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80133c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80133ca:	f998 3000 	ldrsb.w	r3, [r8]
 80133ce:	2b02      	cmp	r3, #2
 80133d0:	d142      	bne.n	8013458 <pow+0x2b0>
 80133d2:	f7fd f8cd 	bl	8010570 <__errno>
 80133d6:	2322      	movs	r3, #34	; 0x22
 80133d8:	e78d      	b.n	80132f6 <pow+0x14e>
 80133da:	4b29      	ldr	r3, [pc, #164]	; (8013480 <pow+0x2d8>)
 80133dc:	2200      	movs	r2, #0
 80133de:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80133e2:	4630      	mov	r0, r6
 80133e4:	4652      	mov	r2, sl
 80133e6:	465b      	mov	r3, fp
 80133e8:	4639      	mov	r1, r7
 80133ea:	f7ed fb9f 	bl	8000b2c <__aeabi_dcmplt>
 80133ee:	2800      	cmp	r0, #0
 80133f0:	d0eb      	beq.n	80133ca <pow+0x222>
 80133f2:	ec45 4b10 	vmov	d0, r4, r5
 80133f6:	f000 feaf 	bl	8014158 <rint>
 80133fa:	4622      	mov	r2, r4
 80133fc:	462b      	mov	r3, r5
 80133fe:	ec51 0b10 	vmov	r0, r1, d0
 8013402:	f7ed fb89 	bl	8000b18 <__aeabi_dcmpeq>
 8013406:	2800      	cmp	r0, #0
 8013408:	d1df      	bne.n	80133ca <pow+0x222>
 801340a:	2200      	movs	r2, #0
 801340c:	4b18      	ldr	r3, [pc, #96]	; (8013470 <pow+0x2c8>)
 801340e:	e7da      	b.n	80133c6 <pow+0x21e>
 8013410:	2200      	movs	r2, #0
 8013412:	2300      	movs	r3, #0
 8013414:	ec51 0b18 	vmov	r0, r1, d8
 8013418:	f7ed fb7e 	bl	8000b18 <__aeabi_dcmpeq>
 801341c:	2800      	cmp	r0, #0
 801341e:	f43f af3a 	beq.w	8013296 <pow+0xee>
 8013422:	ec47 6b10 	vmov	d0, r6, r7
 8013426:	f000 fe82 	bl	801412e <finite>
 801342a:	2800      	cmp	r0, #0
 801342c:	f43f af33 	beq.w	8013296 <pow+0xee>
 8013430:	ec45 4b10 	vmov	d0, r4, r5
 8013434:	f000 fe7b 	bl	801412e <finite>
 8013438:	2800      	cmp	r0, #0
 801343a:	f43f af2c 	beq.w	8013296 <pow+0xee>
 801343e:	2304      	movs	r3, #4
 8013440:	9302      	str	r3, [sp, #8]
 8013442:	4b09      	ldr	r3, [pc, #36]	; (8013468 <pow+0x2c0>)
 8013444:	9303      	str	r3, [sp, #12]
 8013446:	2300      	movs	r3, #0
 8013448:	930a      	str	r3, [sp, #40]	; 0x28
 801344a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801344e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013452:	ed8d 9b08 	vstr	d9, [sp, #32]
 8013456:	e7b8      	b.n	80133ca <pow+0x222>
 8013458:	a802      	add	r0, sp, #8
 801345a:	f000 fe70 	bl	801413e <matherr>
 801345e:	2800      	cmp	r0, #0
 8013460:	f47f af11 	bne.w	8013286 <pow+0xde>
 8013464:	e7b5      	b.n	80133d2 <pow+0x22a>
 8013466:	bf00      	nop
 8013468:	08015a9e 	.word	0x08015a9e
 801346c:	3ff00000 	.word	0x3ff00000
 8013470:	fff00000 	.word	0xfff00000
 8013474:	3fe00000 	.word	0x3fe00000
 8013478:	47efffff 	.word	0x47efffff
 801347c:	c7efffff 	.word	0xc7efffff
 8013480:	7ff00000 	.word	0x7ff00000
 8013484:	20001e08 	.word	0x20001e08

08013488 <__ieee754_log10>:
 8013488:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801348c:	ec55 4b10 	vmov	r4, r5, d0
 8013490:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8013494:	462b      	mov	r3, r5
 8013496:	da2f      	bge.n	80134f8 <__ieee754_log10+0x70>
 8013498:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 801349c:	4322      	orrs	r2, r4
 801349e:	d10a      	bne.n	80134b6 <__ieee754_log10+0x2e>
 80134a0:	493b      	ldr	r1, [pc, #236]	; (8013590 <__ieee754_log10+0x108>)
 80134a2:	2200      	movs	r2, #0
 80134a4:	2300      	movs	r3, #0
 80134a6:	2000      	movs	r0, #0
 80134a8:	f7ed f9f8 	bl	800089c <__aeabi_ddiv>
 80134ac:	ec41 0b10 	vmov	d0, r0, r1
 80134b0:	b003      	add	sp, #12
 80134b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80134b6:	2d00      	cmp	r5, #0
 80134b8:	da08      	bge.n	80134cc <__ieee754_log10+0x44>
 80134ba:	ee10 2a10 	vmov	r2, s0
 80134be:	4620      	mov	r0, r4
 80134c0:	4629      	mov	r1, r5
 80134c2:	f7ec ff09 	bl	80002d8 <__aeabi_dsub>
 80134c6:	2200      	movs	r2, #0
 80134c8:	2300      	movs	r3, #0
 80134ca:	e7ed      	b.n	80134a8 <__ieee754_log10+0x20>
 80134cc:	2200      	movs	r2, #0
 80134ce:	4b31      	ldr	r3, [pc, #196]	; (8013594 <__ieee754_log10+0x10c>)
 80134d0:	4629      	mov	r1, r5
 80134d2:	ee10 0a10 	vmov	r0, s0
 80134d6:	f7ed f8b7 	bl	8000648 <__aeabi_dmul>
 80134da:	f06f 0235 	mvn.w	r2, #53	; 0x35
 80134de:	4604      	mov	r4, r0
 80134e0:	460d      	mov	r5, r1
 80134e2:	460b      	mov	r3, r1
 80134e4:	492c      	ldr	r1, [pc, #176]	; (8013598 <__ieee754_log10+0x110>)
 80134e6:	428b      	cmp	r3, r1
 80134e8:	dd08      	ble.n	80134fc <__ieee754_log10+0x74>
 80134ea:	4622      	mov	r2, r4
 80134ec:	462b      	mov	r3, r5
 80134ee:	4620      	mov	r0, r4
 80134f0:	4629      	mov	r1, r5
 80134f2:	f7ec fef3 	bl	80002dc <__adddf3>
 80134f6:	e7d9      	b.n	80134ac <__ieee754_log10+0x24>
 80134f8:	2200      	movs	r2, #0
 80134fa:	e7f3      	b.n	80134e4 <__ieee754_log10+0x5c>
 80134fc:	1518      	asrs	r0, r3, #20
 80134fe:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8013502:	4410      	add	r0, r2
 8013504:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8013508:	4448      	add	r0, r9
 801350a:	f3c3 0813 	ubfx	r8, r3, #0, #20
 801350e:	f7ed f831 	bl	8000574 <__aeabi_i2d>
 8013512:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8013516:	3303      	adds	r3, #3
 8013518:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 801351c:	ec45 4b10 	vmov	d0, r4, r5
 8013520:	4606      	mov	r6, r0
 8013522:	460f      	mov	r7, r1
 8013524:	f000 ff14 	bl	8014350 <__ieee754_log>
 8013528:	a313      	add	r3, pc, #76	; (adr r3, 8013578 <__ieee754_log10+0xf0>)
 801352a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801352e:	4630      	mov	r0, r6
 8013530:	4639      	mov	r1, r7
 8013532:	ed8d 0b00 	vstr	d0, [sp]
 8013536:	f7ed f887 	bl	8000648 <__aeabi_dmul>
 801353a:	ed9d 0b00 	vldr	d0, [sp]
 801353e:	4604      	mov	r4, r0
 8013540:	460d      	mov	r5, r1
 8013542:	a30f      	add	r3, pc, #60	; (adr r3, 8013580 <__ieee754_log10+0xf8>)
 8013544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013548:	ec51 0b10 	vmov	r0, r1, d0
 801354c:	f7ed f87c 	bl	8000648 <__aeabi_dmul>
 8013550:	4602      	mov	r2, r0
 8013552:	460b      	mov	r3, r1
 8013554:	4620      	mov	r0, r4
 8013556:	4629      	mov	r1, r5
 8013558:	f7ec fec0 	bl	80002dc <__adddf3>
 801355c:	a30a      	add	r3, pc, #40	; (adr r3, 8013588 <__ieee754_log10+0x100>)
 801355e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013562:	4604      	mov	r4, r0
 8013564:	460d      	mov	r5, r1
 8013566:	4630      	mov	r0, r6
 8013568:	4639      	mov	r1, r7
 801356a:	f7ed f86d 	bl	8000648 <__aeabi_dmul>
 801356e:	4602      	mov	r2, r0
 8013570:	460b      	mov	r3, r1
 8013572:	4620      	mov	r0, r4
 8013574:	4629      	mov	r1, r5
 8013576:	e7bc      	b.n	80134f2 <__ieee754_log10+0x6a>
 8013578:	11f12b36 	.word	0x11f12b36
 801357c:	3d59fef3 	.word	0x3d59fef3
 8013580:	1526e50e 	.word	0x1526e50e
 8013584:	3fdbcb7b 	.word	0x3fdbcb7b
 8013588:	509f6000 	.word	0x509f6000
 801358c:	3fd34413 	.word	0x3fd34413
 8013590:	c3500000 	.word	0xc3500000
 8013594:	43500000 	.word	0x43500000
 8013598:	7fefffff 	.word	0x7fefffff
 801359c:	00000000 	.word	0x00000000

080135a0 <__ieee754_pow>:
 80135a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135a4:	b091      	sub	sp, #68	; 0x44
 80135a6:	ed8d 1b00 	vstr	d1, [sp]
 80135aa:	e9dd 2900 	ldrd	r2, r9, [sp]
 80135ae:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80135b2:	ea58 0302 	orrs.w	r3, r8, r2
 80135b6:	ec57 6b10 	vmov	r6, r7, d0
 80135ba:	f000 84be 	beq.w	8013f3a <__ieee754_pow+0x99a>
 80135be:	4b7a      	ldr	r3, [pc, #488]	; (80137a8 <__ieee754_pow+0x208>)
 80135c0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80135c4:	429c      	cmp	r4, r3
 80135c6:	463d      	mov	r5, r7
 80135c8:	ee10 aa10 	vmov	sl, s0
 80135cc:	dc09      	bgt.n	80135e2 <__ieee754_pow+0x42>
 80135ce:	d103      	bne.n	80135d8 <__ieee754_pow+0x38>
 80135d0:	b93e      	cbnz	r6, 80135e2 <__ieee754_pow+0x42>
 80135d2:	45a0      	cmp	r8, r4
 80135d4:	dc0d      	bgt.n	80135f2 <__ieee754_pow+0x52>
 80135d6:	e001      	b.n	80135dc <__ieee754_pow+0x3c>
 80135d8:	4598      	cmp	r8, r3
 80135da:	dc02      	bgt.n	80135e2 <__ieee754_pow+0x42>
 80135dc:	4598      	cmp	r8, r3
 80135de:	d10e      	bne.n	80135fe <__ieee754_pow+0x5e>
 80135e0:	b16a      	cbz	r2, 80135fe <__ieee754_pow+0x5e>
 80135e2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80135e6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80135ea:	ea54 030a 	orrs.w	r3, r4, sl
 80135ee:	f000 84a4 	beq.w	8013f3a <__ieee754_pow+0x99a>
 80135f2:	486e      	ldr	r0, [pc, #440]	; (80137ac <__ieee754_pow+0x20c>)
 80135f4:	b011      	add	sp, #68	; 0x44
 80135f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135fa:	f000 bda5 	b.w	8014148 <nan>
 80135fe:	2d00      	cmp	r5, #0
 8013600:	da53      	bge.n	80136aa <__ieee754_pow+0x10a>
 8013602:	4b6b      	ldr	r3, [pc, #428]	; (80137b0 <__ieee754_pow+0x210>)
 8013604:	4598      	cmp	r8, r3
 8013606:	dc4d      	bgt.n	80136a4 <__ieee754_pow+0x104>
 8013608:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801360c:	4598      	cmp	r8, r3
 801360e:	dd4c      	ble.n	80136aa <__ieee754_pow+0x10a>
 8013610:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013614:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013618:	2b14      	cmp	r3, #20
 801361a:	dd26      	ble.n	801366a <__ieee754_pow+0xca>
 801361c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8013620:	fa22 f103 	lsr.w	r1, r2, r3
 8013624:	fa01 f303 	lsl.w	r3, r1, r3
 8013628:	4293      	cmp	r3, r2
 801362a:	d13e      	bne.n	80136aa <__ieee754_pow+0x10a>
 801362c:	f001 0101 	and.w	r1, r1, #1
 8013630:	f1c1 0b02 	rsb	fp, r1, #2
 8013634:	2a00      	cmp	r2, #0
 8013636:	d15b      	bne.n	80136f0 <__ieee754_pow+0x150>
 8013638:	4b5b      	ldr	r3, [pc, #364]	; (80137a8 <__ieee754_pow+0x208>)
 801363a:	4598      	cmp	r8, r3
 801363c:	d124      	bne.n	8013688 <__ieee754_pow+0xe8>
 801363e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8013642:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8013646:	ea53 030a 	orrs.w	r3, r3, sl
 801364a:	f000 8476 	beq.w	8013f3a <__ieee754_pow+0x99a>
 801364e:	4b59      	ldr	r3, [pc, #356]	; (80137b4 <__ieee754_pow+0x214>)
 8013650:	429c      	cmp	r4, r3
 8013652:	dd2d      	ble.n	80136b0 <__ieee754_pow+0x110>
 8013654:	f1b9 0f00 	cmp.w	r9, #0
 8013658:	f280 8473 	bge.w	8013f42 <__ieee754_pow+0x9a2>
 801365c:	2000      	movs	r0, #0
 801365e:	2100      	movs	r1, #0
 8013660:	ec41 0b10 	vmov	d0, r0, r1
 8013664:	b011      	add	sp, #68	; 0x44
 8013666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801366a:	2a00      	cmp	r2, #0
 801366c:	d13e      	bne.n	80136ec <__ieee754_pow+0x14c>
 801366e:	f1c3 0314 	rsb	r3, r3, #20
 8013672:	fa48 f103 	asr.w	r1, r8, r3
 8013676:	fa01 f303 	lsl.w	r3, r1, r3
 801367a:	4543      	cmp	r3, r8
 801367c:	f040 8469 	bne.w	8013f52 <__ieee754_pow+0x9b2>
 8013680:	f001 0101 	and.w	r1, r1, #1
 8013684:	f1c1 0b02 	rsb	fp, r1, #2
 8013688:	4b4b      	ldr	r3, [pc, #300]	; (80137b8 <__ieee754_pow+0x218>)
 801368a:	4598      	cmp	r8, r3
 801368c:	d118      	bne.n	80136c0 <__ieee754_pow+0x120>
 801368e:	f1b9 0f00 	cmp.w	r9, #0
 8013692:	f280 845a 	bge.w	8013f4a <__ieee754_pow+0x9aa>
 8013696:	4948      	ldr	r1, [pc, #288]	; (80137b8 <__ieee754_pow+0x218>)
 8013698:	4632      	mov	r2, r6
 801369a:	463b      	mov	r3, r7
 801369c:	2000      	movs	r0, #0
 801369e:	f7ed f8fd 	bl	800089c <__aeabi_ddiv>
 80136a2:	e7dd      	b.n	8013660 <__ieee754_pow+0xc0>
 80136a4:	f04f 0b02 	mov.w	fp, #2
 80136a8:	e7c4      	b.n	8013634 <__ieee754_pow+0x94>
 80136aa:	f04f 0b00 	mov.w	fp, #0
 80136ae:	e7c1      	b.n	8013634 <__ieee754_pow+0x94>
 80136b0:	f1b9 0f00 	cmp.w	r9, #0
 80136b4:	dad2      	bge.n	801365c <__ieee754_pow+0xbc>
 80136b6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80136ba:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80136be:	e7cf      	b.n	8013660 <__ieee754_pow+0xc0>
 80136c0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80136c4:	d106      	bne.n	80136d4 <__ieee754_pow+0x134>
 80136c6:	4632      	mov	r2, r6
 80136c8:	463b      	mov	r3, r7
 80136ca:	4610      	mov	r0, r2
 80136cc:	4619      	mov	r1, r3
 80136ce:	f7ec ffbb 	bl	8000648 <__aeabi_dmul>
 80136d2:	e7c5      	b.n	8013660 <__ieee754_pow+0xc0>
 80136d4:	4b39      	ldr	r3, [pc, #228]	; (80137bc <__ieee754_pow+0x21c>)
 80136d6:	4599      	cmp	r9, r3
 80136d8:	d10a      	bne.n	80136f0 <__ieee754_pow+0x150>
 80136da:	2d00      	cmp	r5, #0
 80136dc:	db08      	blt.n	80136f0 <__ieee754_pow+0x150>
 80136de:	ec47 6b10 	vmov	d0, r6, r7
 80136e2:	b011      	add	sp, #68	; 0x44
 80136e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136e8:	f000 bc68 	b.w	8013fbc <__ieee754_sqrt>
 80136ec:	f04f 0b00 	mov.w	fp, #0
 80136f0:	ec47 6b10 	vmov	d0, r6, r7
 80136f4:	f000 fd12 	bl	801411c <fabs>
 80136f8:	ec51 0b10 	vmov	r0, r1, d0
 80136fc:	f1ba 0f00 	cmp.w	sl, #0
 8013700:	d127      	bne.n	8013752 <__ieee754_pow+0x1b2>
 8013702:	b124      	cbz	r4, 801370e <__ieee754_pow+0x16e>
 8013704:	4b2c      	ldr	r3, [pc, #176]	; (80137b8 <__ieee754_pow+0x218>)
 8013706:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801370a:	429a      	cmp	r2, r3
 801370c:	d121      	bne.n	8013752 <__ieee754_pow+0x1b2>
 801370e:	f1b9 0f00 	cmp.w	r9, #0
 8013712:	da05      	bge.n	8013720 <__ieee754_pow+0x180>
 8013714:	4602      	mov	r2, r0
 8013716:	460b      	mov	r3, r1
 8013718:	2000      	movs	r0, #0
 801371a:	4927      	ldr	r1, [pc, #156]	; (80137b8 <__ieee754_pow+0x218>)
 801371c:	f7ed f8be 	bl	800089c <__aeabi_ddiv>
 8013720:	2d00      	cmp	r5, #0
 8013722:	da9d      	bge.n	8013660 <__ieee754_pow+0xc0>
 8013724:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013728:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801372c:	ea54 030b 	orrs.w	r3, r4, fp
 8013730:	d108      	bne.n	8013744 <__ieee754_pow+0x1a4>
 8013732:	4602      	mov	r2, r0
 8013734:	460b      	mov	r3, r1
 8013736:	4610      	mov	r0, r2
 8013738:	4619      	mov	r1, r3
 801373a:	f7ec fdcd 	bl	80002d8 <__aeabi_dsub>
 801373e:	4602      	mov	r2, r0
 8013740:	460b      	mov	r3, r1
 8013742:	e7ac      	b.n	801369e <__ieee754_pow+0xfe>
 8013744:	f1bb 0f01 	cmp.w	fp, #1
 8013748:	d18a      	bne.n	8013660 <__ieee754_pow+0xc0>
 801374a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801374e:	4619      	mov	r1, r3
 8013750:	e786      	b.n	8013660 <__ieee754_pow+0xc0>
 8013752:	0fed      	lsrs	r5, r5, #31
 8013754:	1e6b      	subs	r3, r5, #1
 8013756:	930d      	str	r3, [sp, #52]	; 0x34
 8013758:	ea5b 0303 	orrs.w	r3, fp, r3
 801375c:	d102      	bne.n	8013764 <__ieee754_pow+0x1c4>
 801375e:	4632      	mov	r2, r6
 8013760:	463b      	mov	r3, r7
 8013762:	e7e8      	b.n	8013736 <__ieee754_pow+0x196>
 8013764:	4b16      	ldr	r3, [pc, #88]	; (80137c0 <__ieee754_pow+0x220>)
 8013766:	4598      	cmp	r8, r3
 8013768:	f340 80fe 	ble.w	8013968 <__ieee754_pow+0x3c8>
 801376c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8013770:	4598      	cmp	r8, r3
 8013772:	dd0a      	ble.n	801378a <__ieee754_pow+0x1ea>
 8013774:	4b0f      	ldr	r3, [pc, #60]	; (80137b4 <__ieee754_pow+0x214>)
 8013776:	429c      	cmp	r4, r3
 8013778:	dc0d      	bgt.n	8013796 <__ieee754_pow+0x1f6>
 801377a:	f1b9 0f00 	cmp.w	r9, #0
 801377e:	f6bf af6d 	bge.w	801365c <__ieee754_pow+0xbc>
 8013782:	a307      	add	r3, pc, #28	; (adr r3, 80137a0 <__ieee754_pow+0x200>)
 8013784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013788:	e79f      	b.n	80136ca <__ieee754_pow+0x12a>
 801378a:	4b0e      	ldr	r3, [pc, #56]	; (80137c4 <__ieee754_pow+0x224>)
 801378c:	429c      	cmp	r4, r3
 801378e:	ddf4      	ble.n	801377a <__ieee754_pow+0x1da>
 8013790:	4b09      	ldr	r3, [pc, #36]	; (80137b8 <__ieee754_pow+0x218>)
 8013792:	429c      	cmp	r4, r3
 8013794:	dd18      	ble.n	80137c8 <__ieee754_pow+0x228>
 8013796:	f1b9 0f00 	cmp.w	r9, #0
 801379a:	dcf2      	bgt.n	8013782 <__ieee754_pow+0x1e2>
 801379c:	e75e      	b.n	801365c <__ieee754_pow+0xbc>
 801379e:	bf00      	nop
 80137a0:	8800759c 	.word	0x8800759c
 80137a4:	7e37e43c 	.word	0x7e37e43c
 80137a8:	7ff00000 	.word	0x7ff00000
 80137ac:	08015981 	.word	0x08015981
 80137b0:	433fffff 	.word	0x433fffff
 80137b4:	3fefffff 	.word	0x3fefffff
 80137b8:	3ff00000 	.word	0x3ff00000
 80137bc:	3fe00000 	.word	0x3fe00000
 80137c0:	41e00000 	.word	0x41e00000
 80137c4:	3feffffe 	.word	0x3feffffe
 80137c8:	2200      	movs	r2, #0
 80137ca:	4b63      	ldr	r3, [pc, #396]	; (8013958 <__ieee754_pow+0x3b8>)
 80137cc:	f7ec fd84 	bl	80002d8 <__aeabi_dsub>
 80137d0:	a355      	add	r3, pc, #340	; (adr r3, 8013928 <__ieee754_pow+0x388>)
 80137d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137d6:	4604      	mov	r4, r0
 80137d8:	460d      	mov	r5, r1
 80137da:	f7ec ff35 	bl	8000648 <__aeabi_dmul>
 80137de:	a354      	add	r3, pc, #336	; (adr r3, 8013930 <__ieee754_pow+0x390>)
 80137e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137e4:	4606      	mov	r6, r0
 80137e6:	460f      	mov	r7, r1
 80137e8:	4620      	mov	r0, r4
 80137ea:	4629      	mov	r1, r5
 80137ec:	f7ec ff2c 	bl	8000648 <__aeabi_dmul>
 80137f0:	2200      	movs	r2, #0
 80137f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80137f6:	4b59      	ldr	r3, [pc, #356]	; (801395c <__ieee754_pow+0x3bc>)
 80137f8:	4620      	mov	r0, r4
 80137fa:	4629      	mov	r1, r5
 80137fc:	f7ec ff24 	bl	8000648 <__aeabi_dmul>
 8013800:	4602      	mov	r2, r0
 8013802:	460b      	mov	r3, r1
 8013804:	a14c      	add	r1, pc, #304	; (adr r1, 8013938 <__ieee754_pow+0x398>)
 8013806:	e9d1 0100 	ldrd	r0, r1, [r1]
 801380a:	f7ec fd65 	bl	80002d8 <__aeabi_dsub>
 801380e:	4622      	mov	r2, r4
 8013810:	462b      	mov	r3, r5
 8013812:	f7ec ff19 	bl	8000648 <__aeabi_dmul>
 8013816:	4602      	mov	r2, r0
 8013818:	460b      	mov	r3, r1
 801381a:	2000      	movs	r0, #0
 801381c:	4950      	ldr	r1, [pc, #320]	; (8013960 <__ieee754_pow+0x3c0>)
 801381e:	f7ec fd5b 	bl	80002d8 <__aeabi_dsub>
 8013822:	4622      	mov	r2, r4
 8013824:	462b      	mov	r3, r5
 8013826:	4680      	mov	r8, r0
 8013828:	4689      	mov	r9, r1
 801382a:	4620      	mov	r0, r4
 801382c:	4629      	mov	r1, r5
 801382e:	f7ec ff0b 	bl	8000648 <__aeabi_dmul>
 8013832:	4602      	mov	r2, r0
 8013834:	460b      	mov	r3, r1
 8013836:	4640      	mov	r0, r8
 8013838:	4649      	mov	r1, r9
 801383a:	f7ec ff05 	bl	8000648 <__aeabi_dmul>
 801383e:	a340      	add	r3, pc, #256	; (adr r3, 8013940 <__ieee754_pow+0x3a0>)
 8013840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013844:	f7ec ff00 	bl	8000648 <__aeabi_dmul>
 8013848:	4602      	mov	r2, r0
 801384a:	460b      	mov	r3, r1
 801384c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013850:	f7ec fd42 	bl	80002d8 <__aeabi_dsub>
 8013854:	4602      	mov	r2, r0
 8013856:	460b      	mov	r3, r1
 8013858:	4604      	mov	r4, r0
 801385a:	460d      	mov	r5, r1
 801385c:	4630      	mov	r0, r6
 801385e:	4639      	mov	r1, r7
 8013860:	f7ec fd3c 	bl	80002dc <__adddf3>
 8013864:	2000      	movs	r0, #0
 8013866:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801386a:	4632      	mov	r2, r6
 801386c:	463b      	mov	r3, r7
 801386e:	f7ec fd33 	bl	80002d8 <__aeabi_dsub>
 8013872:	4602      	mov	r2, r0
 8013874:	460b      	mov	r3, r1
 8013876:	4620      	mov	r0, r4
 8013878:	4629      	mov	r1, r5
 801387a:	f7ec fd2d 	bl	80002d8 <__aeabi_dsub>
 801387e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013880:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8013884:	4313      	orrs	r3, r2
 8013886:	4606      	mov	r6, r0
 8013888:	460f      	mov	r7, r1
 801388a:	f040 81eb 	bne.w	8013c64 <__ieee754_pow+0x6c4>
 801388e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8013948 <__ieee754_pow+0x3a8>
 8013892:	e9dd 4500 	ldrd	r4, r5, [sp]
 8013896:	2400      	movs	r4, #0
 8013898:	4622      	mov	r2, r4
 801389a:	462b      	mov	r3, r5
 801389c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80138a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80138a4:	f7ec fd18 	bl	80002d8 <__aeabi_dsub>
 80138a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80138ac:	f7ec fecc 	bl	8000648 <__aeabi_dmul>
 80138b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80138b4:	4680      	mov	r8, r0
 80138b6:	4689      	mov	r9, r1
 80138b8:	4630      	mov	r0, r6
 80138ba:	4639      	mov	r1, r7
 80138bc:	f7ec fec4 	bl	8000648 <__aeabi_dmul>
 80138c0:	4602      	mov	r2, r0
 80138c2:	460b      	mov	r3, r1
 80138c4:	4640      	mov	r0, r8
 80138c6:	4649      	mov	r1, r9
 80138c8:	f7ec fd08 	bl	80002dc <__adddf3>
 80138cc:	4622      	mov	r2, r4
 80138ce:	462b      	mov	r3, r5
 80138d0:	4680      	mov	r8, r0
 80138d2:	4689      	mov	r9, r1
 80138d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80138d8:	f7ec feb6 	bl	8000648 <__aeabi_dmul>
 80138dc:	460b      	mov	r3, r1
 80138de:	4604      	mov	r4, r0
 80138e0:	460d      	mov	r5, r1
 80138e2:	4602      	mov	r2, r0
 80138e4:	4649      	mov	r1, r9
 80138e6:	4640      	mov	r0, r8
 80138e8:	e9cd 4500 	strd	r4, r5, [sp]
 80138ec:	f7ec fcf6 	bl	80002dc <__adddf3>
 80138f0:	4b1c      	ldr	r3, [pc, #112]	; (8013964 <__ieee754_pow+0x3c4>)
 80138f2:	4299      	cmp	r1, r3
 80138f4:	4606      	mov	r6, r0
 80138f6:	460f      	mov	r7, r1
 80138f8:	468b      	mov	fp, r1
 80138fa:	f340 82f7 	ble.w	8013eec <__ieee754_pow+0x94c>
 80138fe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8013902:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8013906:	4303      	orrs	r3, r0
 8013908:	f000 81ea 	beq.w	8013ce0 <__ieee754_pow+0x740>
 801390c:	a310      	add	r3, pc, #64	; (adr r3, 8013950 <__ieee754_pow+0x3b0>)
 801390e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013912:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013916:	f7ec fe97 	bl	8000648 <__aeabi_dmul>
 801391a:	a30d      	add	r3, pc, #52	; (adr r3, 8013950 <__ieee754_pow+0x3b0>)
 801391c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013920:	e6d5      	b.n	80136ce <__ieee754_pow+0x12e>
 8013922:	bf00      	nop
 8013924:	f3af 8000 	nop.w
 8013928:	60000000 	.word	0x60000000
 801392c:	3ff71547 	.word	0x3ff71547
 8013930:	f85ddf44 	.word	0xf85ddf44
 8013934:	3e54ae0b 	.word	0x3e54ae0b
 8013938:	55555555 	.word	0x55555555
 801393c:	3fd55555 	.word	0x3fd55555
 8013940:	652b82fe 	.word	0x652b82fe
 8013944:	3ff71547 	.word	0x3ff71547
 8013948:	00000000 	.word	0x00000000
 801394c:	bff00000 	.word	0xbff00000
 8013950:	8800759c 	.word	0x8800759c
 8013954:	7e37e43c 	.word	0x7e37e43c
 8013958:	3ff00000 	.word	0x3ff00000
 801395c:	3fd00000 	.word	0x3fd00000
 8013960:	3fe00000 	.word	0x3fe00000
 8013964:	408fffff 	.word	0x408fffff
 8013968:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801396c:	f04f 0200 	mov.w	r2, #0
 8013970:	da05      	bge.n	801397e <__ieee754_pow+0x3de>
 8013972:	4bd3      	ldr	r3, [pc, #844]	; (8013cc0 <__ieee754_pow+0x720>)
 8013974:	f7ec fe68 	bl	8000648 <__aeabi_dmul>
 8013978:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801397c:	460c      	mov	r4, r1
 801397e:	1523      	asrs	r3, r4, #20
 8013980:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013984:	4413      	add	r3, r2
 8013986:	9309      	str	r3, [sp, #36]	; 0x24
 8013988:	4bce      	ldr	r3, [pc, #824]	; (8013cc4 <__ieee754_pow+0x724>)
 801398a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801398e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8013992:	429c      	cmp	r4, r3
 8013994:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8013998:	dd08      	ble.n	80139ac <__ieee754_pow+0x40c>
 801399a:	4bcb      	ldr	r3, [pc, #812]	; (8013cc8 <__ieee754_pow+0x728>)
 801399c:	429c      	cmp	r4, r3
 801399e:	f340 815e 	ble.w	8013c5e <__ieee754_pow+0x6be>
 80139a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80139a4:	3301      	adds	r3, #1
 80139a6:	9309      	str	r3, [sp, #36]	; 0x24
 80139a8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80139ac:	f04f 0a00 	mov.w	sl, #0
 80139b0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80139b4:	930c      	str	r3, [sp, #48]	; 0x30
 80139b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80139b8:	4bc4      	ldr	r3, [pc, #784]	; (8013ccc <__ieee754_pow+0x72c>)
 80139ba:	4413      	add	r3, r2
 80139bc:	ed93 7b00 	vldr	d7, [r3]
 80139c0:	4629      	mov	r1, r5
 80139c2:	ec53 2b17 	vmov	r2, r3, d7
 80139c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80139ca:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80139ce:	f7ec fc83 	bl	80002d8 <__aeabi_dsub>
 80139d2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80139d6:	4606      	mov	r6, r0
 80139d8:	460f      	mov	r7, r1
 80139da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80139de:	f7ec fc7d 	bl	80002dc <__adddf3>
 80139e2:	4602      	mov	r2, r0
 80139e4:	460b      	mov	r3, r1
 80139e6:	2000      	movs	r0, #0
 80139e8:	49b9      	ldr	r1, [pc, #740]	; (8013cd0 <__ieee754_pow+0x730>)
 80139ea:	f7ec ff57 	bl	800089c <__aeabi_ddiv>
 80139ee:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80139f2:	4602      	mov	r2, r0
 80139f4:	460b      	mov	r3, r1
 80139f6:	4630      	mov	r0, r6
 80139f8:	4639      	mov	r1, r7
 80139fa:	f7ec fe25 	bl	8000648 <__aeabi_dmul>
 80139fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013a02:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8013a06:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8013a0a:	2300      	movs	r3, #0
 8013a0c:	9302      	str	r3, [sp, #8]
 8013a0e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8013a12:	106d      	asrs	r5, r5, #1
 8013a14:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8013a18:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8013a1c:	2200      	movs	r2, #0
 8013a1e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8013a22:	4640      	mov	r0, r8
 8013a24:	4649      	mov	r1, r9
 8013a26:	4614      	mov	r4, r2
 8013a28:	461d      	mov	r5, r3
 8013a2a:	f7ec fe0d 	bl	8000648 <__aeabi_dmul>
 8013a2e:	4602      	mov	r2, r0
 8013a30:	460b      	mov	r3, r1
 8013a32:	4630      	mov	r0, r6
 8013a34:	4639      	mov	r1, r7
 8013a36:	f7ec fc4f 	bl	80002d8 <__aeabi_dsub>
 8013a3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013a3e:	4606      	mov	r6, r0
 8013a40:	460f      	mov	r7, r1
 8013a42:	4620      	mov	r0, r4
 8013a44:	4629      	mov	r1, r5
 8013a46:	f7ec fc47 	bl	80002d8 <__aeabi_dsub>
 8013a4a:	4602      	mov	r2, r0
 8013a4c:	460b      	mov	r3, r1
 8013a4e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013a52:	f7ec fc41 	bl	80002d8 <__aeabi_dsub>
 8013a56:	4642      	mov	r2, r8
 8013a58:	464b      	mov	r3, r9
 8013a5a:	f7ec fdf5 	bl	8000648 <__aeabi_dmul>
 8013a5e:	4602      	mov	r2, r0
 8013a60:	460b      	mov	r3, r1
 8013a62:	4630      	mov	r0, r6
 8013a64:	4639      	mov	r1, r7
 8013a66:	f7ec fc37 	bl	80002d8 <__aeabi_dsub>
 8013a6a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8013a6e:	f7ec fdeb 	bl	8000648 <__aeabi_dmul>
 8013a72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013a76:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013a7a:	4610      	mov	r0, r2
 8013a7c:	4619      	mov	r1, r3
 8013a7e:	f7ec fde3 	bl	8000648 <__aeabi_dmul>
 8013a82:	a37b      	add	r3, pc, #492	; (adr r3, 8013c70 <__ieee754_pow+0x6d0>)
 8013a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a88:	4604      	mov	r4, r0
 8013a8a:	460d      	mov	r5, r1
 8013a8c:	f7ec fddc 	bl	8000648 <__aeabi_dmul>
 8013a90:	a379      	add	r3, pc, #484	; (adr r3, 8013c78 <__ieee754_pow+0x6d8>)
 8013a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a96:	f7ec fc21 	bl	80002dc <__adddf3>
 8013a9a:	4622      	mov	r2, r4
 8013a9c:	462b      	mov	r3, r5
 8013a9e:	f7ec fdd3 	bl	8000648 <__aeabi_dmul>
 8013aa2:	a377      	add	r3, pc, #476	; (adr r3, 8013c80 <__ieee754_pow+0x6e0>)
 8013aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013aa8:	f7ec fc18 	bl	80002dc <__adddf3>
 8013aac:	4622      	mov	r2, r4
 8013aae:	462b      	mov	r3, r5
 8013ab0:	f7ec fdca 	bl	8000648 <__aeabi_dmul>
 8013ab4:	a374      	add	r3, pc, #464	; (adr r3, 8013c88 <__ieee754_pow+0x6e8>)
 8013ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013aba:	f7ec fc0f 	bl	80002dc <__adddf3>
 8013abe:	4622      	mov	r2, r4
 8013ac0:	462b      	mov	r3, r5
 8013ac2:	f7ec fdc1 	bl	8000648 <__aeabi_dmul>
 8013ac6:	a372      	add	r3, pc, #456	; (adr r3, 8013c90 <__ieee754_pow+0x6f0>)
 8013ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013acc:	f7ec fc06 	bl	80002dc <__adddf3>
 8013ad0:	4622      	mov	r2, r4
 8013ad2:	462b      	mov	r3, r5
 8013ad4:	f7ec fdb8 	bl	8000648 <__aeabi_dmul>
 8013ad8:	a36f      	add	r3, pc, #444	; (adr r3, 8013c98 <__ieee754_pow+0x6f8>)
 8013ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ade:	f7ec fbfd 	bl	80002dc <__adddf3>
 8013ae2:	4622      	mov	r2, r4
 8013ae4:	4606      	mov	r6, r0
 8013ae6:	460f      	mov	r7, r1
 8013ae8:	462b      	mov	r3, r5
 8013aea:	4620      	mov	r0, r4
 8013aec:	4629      	mov	r1, r5
 8013aee:	f7ec fdab 	bl	8000648 <__aeabi_dmul>
 8013af2:	4602      	mov	r2, r0
 8013af4:	460b      	mov	r3, r1
 8013af6:	4630      	mov	r0, r6
 8013af8:	4639      	mov	r1, r7
 8013afa:	f7ec fda5 	bl	8000648 <__aeabi_dmul>
 8013afe:	4642      	mov	r2, r8
 8013b00:	4604      	mov	r4, r0
 8013b02:	460d      	mov	r5, r1
 8013b04:	464b      	mov	r3, r9
 8013b06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013b0a:	f7ec fbe7 	bl	80002dc <__adddf3>
 8013b0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013b12:	f7ec fd99 	bl	8000648 <__aeabi_dmul>
 8013b16:	4622      	mov	r2, r4
 8013b18:	462b      	mov	r3, r5
 8013b1a:	f7ec fbdf 	bl	80002dc <__adddf3>
 8013b1e:	4642      	mov	r2, r8
 8013b20:	4606      	mov	r6, r0
 8013b22:	460f      	mov	r7, r1
 8013b24:	464b      	mov	r3, r9
 8013b26:	4640      	mov	r0, r8
 8013b28:	4649      	mov	r1, r9
 8013b2a:	f7ec fd8d 	bl	8000648 <__aeabi_dmul>
 8013b2e:	2200      	movs	r2, #0
 8013b30:	4b68      	ldr	r3, [pc, #416]	; (8013cd4 <__ieee754_pow+0x734>)
 8013b32:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013b36:	f7ec fbd1 	bl	80002dc <__adddf3>
 8013b3a:	4632      	mov	r2, r6
 8013b3c:	463b      	mov	r3, r7
 8013b3e:	f7ec fbcd 	bl	80002dc <__adddf3>
 8013b42:	9802      	ldr	r0, [sp, #8]
 8013b44:	460d      	mov	r5, r1
 8013b46:	4604      	mov	r4, r0
 8013b48:	4602      	mov	r2, r0
 8013b4a:	460b      	mov	r3, r1
 8013b4c:	4640      	mov	r0, r8
 8013b4e:	4649      	mov	r1, r9
 8013b50:	f7ec fd7a 	bl	8000648 <__aeabi_dmul>
 8013b54:	2200      	movs	r2, #0
 8013b56:	4680      	mov	r8, r0
 8013b58:	4689      	mov	r9, r1
 8013b5a:	4b5e      	ldr	r3, [pc, #376]	; (8013cd4 <__ieee754_pow+0x734>)
 8013b5c:	4620      	mov	r0, r4
 8013b5e:	4629      	mov	r1, r5
 8013b60:	f7ec fbba 	bl	80002d8 <__aeabi_dsub>
 8013b64:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013b68:	f7ec fbb6 	bl	80002d8 <__aeabi_dsub>
 8013b6c:	4602      	mov	r2, r0
 8013b6e:	460b      	mov	r3, r1
 8013b70:	4630      	mov	r0, r6
 8013b72:	4639      	mov	r1, r7
 8013b74:	f7ec fbb0 	bl	80002d8 <__aeabi_dsub>
 8013b78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013b7c:	f7ec fd64 	bl	8000648 <__aeabi_dmul>
 8013b80:	4622      	mov	r2, r4
 8013b82:	4606      	mov	r6, r0
 8013b84:	460f      	mov	r7, r1
 8013b86:	462b      	mov	r3, r5
 8013b88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013b8c:	f7ec fd5c 	bl	8000648 <__aeabi_dmul>
 8013b90:	4602      	mov	r2, r0
 8013b92:	460b      	mov	r3, r1
 8013b94:	4630      	mov	r0, r6
 8013b96:	4639      	mov	r1, r7
 8013b98:	f7ec fba0 	bl	80002dc <__adddf3>
 8013b9c:	4606      	mov	r6, r0
 8013b9e:	460f      	mov	r7, r1
 8013ba0:	4602      	mov	r2, r0
 8013ba2:	460b      	mov	r3, r1
 8013ba4:	4640      	mov	r0, r8
 8013ba6:	4649      	mov	r1, r9
 8013ba8:	f7ec fb98 	bl	80002dc <__adddf3>
 8013bac:	9802      	ldr	r0, [sp, #8]
 8013bae:	a33c      	add	r3, pc, #240	; (adr r3, 8013ca0 <__ieee754_pow+0x700>)
 8013bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bb4:	4604      	mov	r4, r0
 8013bb6:	460d      	mov	r5, r1
 8013bb8:	f7ec fd46 	bl	8000648 <__aeabi_dmul>
 8013bbc:	4642      	mov	r2, r8
 8013bbe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013bc2:	464b      	mov	r3, r9
 8013bc4:	4620      	mov	r0, r4
 8013bc6:	4629      	mov	r1, r5
 8013bc8:	f7ec fb86 	bl	80002d8 <__aeabi_dsub>
 8013bcc:	4602      	mov	r2, r0
 8013bce:	460b      	mov	r3, r1
 8013bd0:	4630      	mov	r0, r6
 8013bd2:	4639      	mov	r1, r7
 8013bd4:	f7ec fb80 	bl	80002d8 <__aeabi_dsub>
 8013bd8:	a333      	add	r3, pc, #204	; (adr r3, 8013ca8 <__ieee754_pow+0x708>)
 8013bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bde:	f7ec fd33 	bl	8000648 <__aeabi_dmul>
 8013be2:	a333      	add	r3, pc, #204	; (adr r3, 8013cb0 <__ieee754_pow+0x710>)
 8013be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013be8:	4606      	mov	r6, r0
 8013bea:	460f      	mov	r7, r1
 8013bec:	4620      	mov	r0, r4
 8013bee:	4629      	mov	r1, r5
 8013bf0:	f7ec fd2a 	bl	8000648 <__aeabi_dmul>
 8013bf4:	4602      	mov	r2, r0
 8013bf6:	460b      	mov	r3, r1
 8013bf8:	4630      	mov	r0, r6
 8013bfa:	4639      	mov	r1, r7
 8013bfc:	f7ec fb6e 	bl	80002dc <__adddf3>
 8013c00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013c02:	4b35      	ldr	r3, [pc, #212]	; (8013cd8 <__ieee754_pow+0x738>)
 8013c04:	4413      	add	r3, r2
 8013c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c0a:	f7ec fb67 	bl	80002dc <__adddf3>
 8013c0e:	4604      	mov	r4, r0
 8013c10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013c12:	460d      	mov	r5, r1
 8013c14:	f7ec fcae 	bl	8000574 <__aeabi_i2d>
 8013c18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013c1a:	4b30      	ldr	r3, [pc, #192]	; (8013cdc <__ieee754_pow+0x73c>)
 8013c1c:	4413      	add	r3, r2
 8013c1e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013c22:	4606      	mov	r6, r0
 8013c24:	460f      	mov	r7, r1
 8013c26:	4622      	mov	r2, r4
 8013c28:	462b      	mov	r3, r5
 8013c2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013c2e:	f7ec fb55 	bl	80002dc <__adddf3>
 8013c32:	4642      	mov	r2, r8
 8013c34:	464b      	mov	r3, r9
 8013c36:	f7ec fb51 	bl	80002dc <__adddf3>
 8013c3a:	4632      	mov	r2, r6
 8013c3c:	463b      	mov	r3, r7
 8013c3e:	f7ec fb4d 	bl	80002dc <__adddf3>
 8013c42:	9802      	ldr	r0, [sp, #8]
 8013c44:	4632      	mov	r2, r6
 8013c46:	463b      	mov	r3, r7
 8013c48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013c4c:	f7ec fb44 	bl	80002d8 <__aeabi_dsub>
 8013c50:	4642      	mov	r2, r8
 8013c52:	464b      	mov	r3, r9
 8013c54:	f7ec fb40 	bl	80002d8 <__aeabi_dsub>
 8013c58:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013c5c:	e607      	b.n	801386e <__ieee754_pow+0x2ce>
 8013c5e:	f04f 0a01 	mov.w	sl, #1
 8013c62:	e6a5      	b.n	80139b0 <__ieee754_pow+0x410>
 8013c64:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8013cb8 <__ieee754_pow+0x718>
 8013c68:	e613      	b.n	8013892 <__ieee754_pow+0x2f2>
 8013c6a:	bf00      	nop
 8013c6c:	f3af 8000 	nop.w
 8013c70:	4a454eef 	.word	0x4a454eef
 8013c74:	3fca7e28 	.word	0x3fca7e28
 8013c78:	93c9db65 	.word	0x93c9db65
 8013c7c:	3fcd864a 	.word	0x3fcd864a
 8013c80:	a91d4101 	.word	0xa91d4101
 8013c84:	3fd17460 	.word	0x3fd17460
 8013c88:	518f264d 	.word	0x518f264d
 8013c8c:	3fd55555 	.word	0x3fd55555
 8013c90:	db6fabff 	.word	0xdb6fabff
 8013c94:	3fdb6db6 	.word	0x3fdb6db6
 8013c98:	33333303 	.word	0x33333303
 8013c9c:	3fe33333 	.word	0x3fe33333
 8013ca0:	e0000000 	.word	0xe0000000
 8013ca4:	3feec709 	.word	0x3feec709
 8013ca8:	dc3a03fd 	.word	0xdc3a03fd
 8013cac:	3feec709 	.word	0x3feec709
 8013cb0:	145b01f5 	.word	0x145b01f5
 8013cb4:	be3e2fe0 	.word	0xbe3e2fe0
 8013cb8:	00000000 	.word	0x00000000
 8013cbc:	3ff00000 	.word	0x3ff00000
 8013cc0:	43400000 	.word	0x43400000
 8013cc4:	0003988e 	.word	0x0003988e
 8013cc8:	000bb679 	.word	0x000bb679
 8013ccc:	08015aa8 	.word	0x08015aa8
 8013cd0:	3ff00000 	.word	0x3ff00000
 8013cd4:	40080000 	.word	0x40080000
 8013cd8:	08015ac8 	.word	0x08015ac8
 8013cdc:	08015ab8 	.word	0x08015ab8
 8013ce0:	a3b4      	add	r3, pc, #720	; (adr r3, 8013fb4 <__ieee754_pow+0xa14>)
 8013ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ce6:	4640      	mov	r0, r8
 8013ce8:	4649      	mov	r1, r9
 8013cea:	f7ec faf7 	bl	80002dc <__adddf3>
 8013cee:	4622      	mov	r2, r4
 8013cf0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013cf4:	462b      	mov	r3, r5
 8013cf6:	4630      	mov	r0, r6
 8013cf8:	4639      	mov	r1, r7
 8013cfa:	f7ec faed 	bl	80002d8 <__aeabi_dsub>
 8013cfe:	4602      	mov	r2, r0
 8013d00:	460b      	mov	r3, r1
 8013d02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013d06:	f7ec ff2f 	bl	8000b68 <__aeabi_dcmpgt>
 8013d0a:	2800      	cmp	r0, #0
 8013d0c:	f47f adfe 	bne.w	801390c <__ieee754_pow+0x36c>
 8013d10:	4aa3      	ldr	r2, [pc, #652]	; (8013fa0 <__ieee754_pow+0xa00>)
 8013d12:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013d16:	4293      	cmp	r3, r2
 8013d18:	f340 810a 	ble.w	8013f30 <__ieee754_pow+0x990>
 8013d1c:	151b      	asrs	r3, r3, #20
 8013d1e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8013d22:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8013d26:	fa4a f303 	asr.w	r3, sl, r3
 8013d2a:	445b      	add	r3, fp
 8013d2c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8013d30:	4e9c      	ldr	r6, [pc, #624]	; (8013fa4 <__ieee754_pow+0xa04>)
 8013d32:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8013d36:	4116      	asrs	r6, r2
 8013d38:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8013d3c:	2000      	movs	r0, #0
 8013d3e:	ea23 0106 	bic.w	r1, r3, r6
 8013d42:	f1c2 0214 	rsb	r2, r2, #20
 8013d46:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8013d4a:	fa4a fa02 	asr.w	sl, sl, r2
 8013d4e:	f1bb 0f00 	cmp.w	fp, #0
 8013d52:	4602      	mov	r2, r0
 8013d54:	460b      	mov	r3, r1
 8013d56:	4620      	mov	r0, r4
 8013d58:	4629      	mov	r1, r5
 8013d5a:	bfb8      	it	lt
 8013d5c:	f1ca 0a00 	rsblt	sl, sl, #0
 8013d60:	f7ec faba 	bl	80002d8 <__aeabi_dsub>
 8013d64:	e9cd 0100 	strd	r0, r1, [sp]
 8013d68:	4642      	mov	r2, r8
 8013d6a:	464b      	mov	r3, r9
 8013d6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013d70:	f7ec fab4 	bl	80002dc <__adddf3>
 8013d74:	2000      	movs	r0, #0
 8013d76:	a378      	add	r3, pc, #480	; (adr r3, 8013f58 <__ieee754_pow+0x9b8>)
 8013d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d7c:	4604      	mov	r4, r0
 8013d7e:	460d      	mov	r5, r1
 8013d80:	f7ec fc62 	bl	8000648 <__aeabi_dmul>
 8013d84:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013d88:	4606      	mov	r6, r0
 8013d8a:	460f      	mov	r7, r1
 8013d8c:	4620      	mov	r0, r4
 8013d8e:	4629      	mov	r1, r5
 8013d90:	f7ec faa2 	bl	80002d8 <__aeabi_dsub>
 8013d94:	4602      	mov	r2, r0
 8013d96:	460b      	mov	r3, r1
 8013d98:	4640      	mov	r0, r8
 8013d9a:	4649      	mov	r1, r9
 8013d9c:	f7ec fa9c 	bl	80002d8 <__aeabi_dsub>
 8013da0:	a36f      	add	r3, pc, #444	; (adr r3, 8013f60 <__ieee754_pow+0x9c0>)
 8013da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013da6:	f7ec fc4f 	bl	8000648 <__aeabi_dmul>
 8013daa:	a36f      	add	r3, pc, #444	; (adr r3, 8013f68 <__ieee754_pow+0x9c8>)
 8013dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013db0:	4680      	mov	r8, r0
 8013db2:	4689      	mov	r9, r1
 8013db4:	4620      	mov	r0, r4
 8013db6:	4629      	mov	r1, r5
 8013db8:	f7ec fc46 	bl	8000648 <__aeabi_dmul>
 8013dbc:	4602      	mov	r2, r0
 8013dbe:	460b      	mov	r3, r1
 8013dc0:	4640      	mov	r0, r8
 8013dc2:	4649      	mov	r1, r9
 8013dc4:	f7ec fa8a 	bl	80002dc <__adddf3>
 8013dc8:	4604      	mov	r4, r0
 8013dca:	460d      	mov	r5, r1
 8013dcc:	4602      	mov	r2, r0
 8013dce:	460b      	mov	r3, r1
 8013dd0:	4630      	mov	r0, r6
 8013dd2:	4639      	mov	r1, r7
 8013dd4:	f7ec fa82 	bl	80002dc <__adddf3>
 8013dd8:	4632      	mov	r2, r6
 8013dda:	463b      	mov	r3, r7
 8013ddc:	4680      	mov	r8, r0
 8013dde:	4689      	mov	r9, r1
 8013de0:	f7ec fa7a 	bl	80002d8 <__aeabi_dsub>
 8013de4:	4602      	mov	r2, r0
 8013de6:	460b      	mov	r3, r1
 8013de8:	4620      	mov	r0, r4
 8013dea:	4629      	mov	r1, r5
 8013dec:	f7ec fa74 	bl	80002d8 <__aeabi_dsub>
 8013df0:	4642      	mov	r2, r8
 8013df2:	4606      	mov	r6, r0
 8013df4:	460f      	mov	r7, r1
 8013df6:	464b      	mov	r3, r9
 8013df8:	4640      	mov	r0, r8
 8013dfa:	4649      	mov	r1, r9
 8013dfc:	f7ec fc24 	bl	8000648 <__aeabi_dmul>
 8013e00:	a35b      	add	r3, pc, #364	; (adr r3, 8013f70 <__ieee754_pow+0x9d0>)
 8013e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e06:	4604      	mov	r4, r0
 8013e08:	460d      	mov	r5, r1
 8013e0a:	f7ec fc1d 	bl	8000648 <__aeabi_dmul>
 8013e0e:	a35a      	add	r3, pc, #360	; (adr r3, 8013f78 <__ieee754_pow+0x9d8>)
 8013e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e14:	f7ec fa60 	bl	80002d8 <__aeabi_dsub>
 8013e18:	4622      	mov	r2, r4
 8013e1a:	462b      	mov	r3, r5
 8013e1c:	f7ec fc14 	bl	8000648 <__aeabi_dmul>
 8013e20:	a357      	add	r3, pc, #348	; (adr r3, 8013f80 <__ieee754_pow+0x9e0>)
 8013e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e26:	f7ec fa59 	bl	80002dc <__adddf3>
 8013e2a:	4622      	mov	r2, r4
 8013e2c:	462b      	mov	r3, r5
 8013e2e:	f7ec fc0b 	bl	8000648 <__aeabi_dmul>
 8013e32:	a355      	add	r3, pc, #340	; (adr r3, 8013f88 <__ieee754_pow+0x9e8>)
 8013e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e38:	f7ec fa4e 	bl	80002d8 <__aeabi_dsub>
 8013e3c:	4622      	mov	r2, r4
 8013e3e:	462b      	mov	r3, r5
 8013e40:	f7ec fc02 	bl	8000648 <__aeabi_dmul>
 8013e44:	a352      	add	r3, pc, #328	; (adr r3, 8013f90 <__ieee754_pow+0x9f0>)
 8013e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e4a:	f7ec fa47 	bl	80002dc <__adddf3>
 8013e4e:	4622      	mov	r2, r4
 8013e50:	462b      	mov	r3, r5
 8013e52:	f7ec fbf9 	bl	8000648 <__aeabi_dmul>
 8013e56:	4602      	mov	r2, r0
 8013e58:	460b      	mov	r3, r1
 8013e5a:	4640      	mov	r0, r8
 8013e5c:	4649      	mov	r1, r9
 8013e5e:	f7ec fa3b 	bl	80002d8 <__aeabi_dsub>
 8013e62:	4604      	mov	r4, r0
 8013e64:	460d      	mov	r5, r1
 8013e66:	4602      	mov	r2, r0
 8013e68:	460b      	mov	r3, r1
 8013e6a:	4640      	mov	r0, r8
 8013e6c:	4649      	mov	r1, r9
 8013e6e:	f7ec fbeb 	bl	8000648 <__aeabi_dmul>
 8013e72:	2200      	movs	r2, #0
 8013e74:	e9cd 0100 	strd	r0, r1, [sp]
 8013e78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013e7c:	4620      	mov	r0, r4
 8013e7e:	4629      	mov	r1, r5
 8013e80:	f7ec fa2a 	bl	80002d8 <__aeabi_dsub>
 8013e84:	4602      	mov	r2, r0
 8013e86:	460b      	mov	r3, r1
 8013e88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013e8c:	f7ec fd06 	bl	800089c <__aeabi_ddiv>
 8013e90:	4632      	mov	r2, r6
 8013e92:	4604      	mov	r4, r0
 8013e94:	460d      	mov	r5, r1
 8013e96:	463b      	mov	r3, r7
 8013e98:	4640      	mov	r0, r8
 8013e9a:	4649      	mov	r1, r9
 8013e9c:	f7ec fbd4 	bl	8000648 <__aeabi_dmul>
 8013ea0:	4632      	mov	r2, r6
 8013ea2:	463b      	mov	r3, r7
 8013ea4:	f7ec fa1a 	bl	80002dc <__adddf3>
 8013ea8:	4602      	mov	r2, r0
 8013eaa:	460b      	mov	r3, r1
 8013eac:	4620      	mov	r0, r4
 8013eae:	4629      	mov	r1, r5
 8013eb0:	f7ec fa12 	bl	80002d8 <__aeabi_dsub>
 8013eb4:	4642      	mov	r2, r8
 8013eb6:	464b      	mov	r3, r9
 8013eb8:	f7ec fa0e 	bl	80002d8 <__aeabi_dsub>
 8013ebc:	4602      	mov	r2, r0
 8013ebe:	460b      	mov	r3, r1
 8013ec0:	2000      	movs	r0, #0
 8013ec2:	4939      	ldr	r1, [pc, #228]	; (8013fa8 <__ieee754_pow+0xa08>)
 8013ec4:	f7ec fa08 	bl	80002d8 <__aeabi_dsub>
 8013ec8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8013ecc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8013ed0:	4602      	mov	r2, r0
 8013ed2:	460b      	mov	r3, r1
 8013ed4:	da2f      	bge.n	8013f36 <__ieee754_pow+0x996>
 8013ed6:	4650      	mov	r0, sl
 8013ed8:	ec43 2b10 	vmov	d0, r2, r3
 8013edc:	f000 f9c0 	bl	8014260 <scalbn>
 8013ee0:	ec51 0b10 	vmov	r0, r1, d0
 8013ee4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013ee8:	f7ff bbf1 	b.w	80136ce <__ieee754_pow+0x12e>
 8013eec:	4b2f      	ldr	r3, [pc, #188]	; (8013fac <__ieee754_pow+0xa0c>)
 8013eee:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8013ef2:	429e      	cmp	r6, r3
 8013ef4:	f77f af0c 	ble.w	8013d10 <__ieee754_pow+0x770>
 8013ef8:	4b2d      	ldr	r3, [pc, #180]	; (8013fb0 <__ieee754_pow+0xa10>)
 8013efa:	440b      	add	r3, r1
 8013efc:	4303      	orrs	r3, r0
 8013efe:	d00b      	beq.n	8013f18 <__ieee754_pow+0x978>
 8013f00:	a325      	add	r3, pc, #148	; (adr r3, 8013f98 <__ieee754_pow+0x9f8>)
 8013f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013f0a:	f7ec fb9d 	bl	8000648 <__aeabi_dmul>
 8013f0e:	a322      	add	r3, pc, #136	; (adr r3, 8013f98 <__ieee754_pow+0x9f8>)
 8013f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f14:	f7ff bbdb 	b.w	80136ce <__ieee754_pow+0x12e>
 8013f18:	4622      	mov	r2, r4
 8013f1a:	462b      	mov	r3, r5
 8013f1c:	f7ec f9dc 	bl	80002d8 <__aeabi_dsub>
 8013f20:	4642      	mov	r2, r8
 8013f22:	464b      	mov	r3, r9
 8013f24:	f7ec fe16 	bl	8000b54 <__aeabi_dcmpge>
 8013f28:	2800      	cmp	r0, #0
 8013f2a:	f43f aef1 	beq.w	8013d10 <__ieee754_pow+0x770>
 8013f2e:	e7e7      	b.n	8013f00 <__ieee754_pow+0x960>
 8013f30:	f04f 0a00 	mov.w	sl, #0
 8013f34:	e718      	b.n	8013d68 <__ieee754_pow+0x7c8>
 8013f36:	4621      	mov	r1, r4
 8013f38:	e7d4      	b.n	8013ee4 <__ieee754_pow+0x944>
 8013f3a:	2000      	movs	r0, #0
 8013f3c:	491a      	ldr	r1, [pc, #104]	; (8013fa8 <__ieee754_pow+0xa08>)
 8013f3e:	f7ff bb8f 	b.w	8013660 <__ieee754_pow+0xc0>
 8013f42:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013f46:	f7ff bb8b 	b.w	8013660 <__ieee754_pow+0xc0>
 8013f4a:	4630      	mov	r0, r6
 8013f4c:	4639      	mov	r1, r7
 8013f4e:	f7ff bb87 	b.w	8013660 <__ieee754_pow+0xc0>
 8013f52:	4693      	mov	fp, r2
 8013f54:	f7ff bb98 	b.w	8013688 <__ieee754_pow+0xe8>
 8013f58:	00000000 	.word	0x00000000
 8013f5c:	3fe62e43 	.word	0x3fe62e43
 8013f60:	fefa39ef 	.word	0xfefa39ef
 8013f64:	3fe62e42 	.word	0x3fe62e42
 8013f68:	0ca86c39 	.word	0x0ca86c39
 8013f6c:	be205c61 	.word	0xbe205c61
 8013f70:	72bea4d0 	.word	0x72bea4d0
 8013f74:	3e663769 	.word	0x3e663769
 8013f78:	c5d26bf1 	.word	0xc5d26bf1
 8013f7c:	3ebbbd41 	.word	0x3ebbbd41
 8013f80:	af25de2c 	.word	0xaf25de2c
 8013f84:	3f11566a 	.word	0x3f11566a
 8013f88:	16bebd93 	.word	0x16bebd93
 8013f8c:	3f66c16c 	.word	0x3f66c16c
 8013f90:	5555553e 	.word	0x5555553e
 8013f94:	3fc55555 	.word	0x3fc55555
 8013f98:	c2f8f359 	.word	0xc2f8f359
 8013f9c:	01a56e1f 	.word	0x01a56e1f
 8013fa0:	3fe00000 	.word	0x3fe00000
 8013fa4:	000fffff 	.word	0x000fffff
 8013fa8:	3ff00000 	.word	0x3ff00000
 8013fac:	4090cbff 	.word	0x4090cbff
 8013fb0:	3f6f3400 	.word	0x3f6f3400
 8013fb4:	652b82fe 	.word	0x652b82fe
 8013fb8:	3c971547 	.word	0x3c971547

08013fbc <__ieee754_sqrt>:
 8013fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fc0:	4955      	ldr	r1, [pc, #340]	; (8014118 <__ieee754_sqrt+0x15c>)
 8013fc2:	ec55 4b10 	vmov	r4, r5, d0
 8013fc6:	43a9      	bics	r1, r5
 8013fc8:	462b      	mov	r3, r5
 8013fca:	462a      	mov	r2, r5
 8013fcc:	d112      	bne.n	8013ff4 <__ieee754_sqrt+0x38>
 8013fce:	ee10 2a10 	vmov	r2, s0
 8013fd2:	ee10 0a10 	vmov	r0, s0
 8013fd6:	4629      	mov	r1, r5
 8013fd8:	f7ec fb36 	bl	8000648 <__aeabi_dmul>
 8013fdc:	4602      	mov	r2, r0
 8013fde:	460b      	mov	r3, r1
 8013fe0:	4620      	mov	r0, r4
 8013fe2:	4629      	mov	r1, r5
 8013fe4:	f7ec f97a 	bl	80002dc <__adddf3>
 8013fe8:	4604      	mov	r4, r0
 8013fea:	460d      	mov	r5, r1
 8013fec:	ec45 4b10 	vmov	d0, r4, r5
 8013ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ff4:	2d00      	cmp	r5, #0
 8013ff6:	ee10 0a10 	vmov	r0, s0
 8013ffa:	4621      	mov	r1, r4
 8013ffc:	dc0f      	bgt.n	801401e <__ieee754_sqrt+0x62>
 8013ffe:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8014002:	4330      	orrs	r0, r6
 8014004:	d0f2      	beq.n	8013fec <__ieee754_sqrt+0x30>
 8014006:	b155      	cbz	r5, 801401e <__ieee754_sqrt+0x62>
 8014008:	ee10 2a10 	vmov	r2, s0
 801400c:	4620      	mov	r0, r4
 801400e:	4629      	mov	r1, r5
 8014010:	f7ec f962 	bl	80002d8 <__aeabi_dsub>
 8014014:	4602      	mov	r2, r0
 8014016:	460b      	mov	r3, r1
 8014018:	f7ec fc40 	bl	800089c <__aeabi_ddiv>
 801401c:	e7e4      	b.n	8013fe8 <__ieee754_sqrt+0x2c>
 801401e:	151b      	asrs	r3, r3, #20
 8014020:	d073      	beq.n	801410a <__ieee754_sqrt+0x14e>
 8014022:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8014026:	07dd      	lsls	r5, r3, #31
 8014028:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801402c:	bf48      	it	mi
 801402e:	0fc8      	lsrmi	r0, r1, #31
 8014030:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8014034:	bf44      	itt	mi
 8014036:	0049      	lslmi	r1, r1, #1
 8014038:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801403c:	2500      	movs	r5, #0
 801403e:	1058      	asrs	r0, r3, #1
 8014040:	0fcb      	lsrs	r3, r1, #31
 8014042:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8014046:	0049      	lsls	r1, r1, #1
 8014048:	2316      	movs	r3, #22
 801404a:	462c      	mov	r4, r5
 801404c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8014050:	19a7      	adds	r7, r4, r6
 8014052:	4297      	cmp	r7, r2
 8014054:	bfde      	ittt	le
 8014056:	19bc      	addle	r4, r7, r6
 8014058:	1bd2      	suble	r2, r2, r7
 801405a:	19ad      	addle	r5, r5, r6
 801405c:	0fcf      	lsrs	r7, r1, #31
 801405e:	3b01      	subs	r3, #1
 8014060:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8014064:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8014068:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801406c:	d1f0      	bne.n	8014050 <__ieee754_sqrt+0x94>
 801406e:	f04f 0c20 	mov.w	ip, #32
 8014072:	469e      	mov	lr, r3
 8014074:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8014078:	42a2      	cmp	r2, r4
 801407a:	eb06 070e 	add.w	r7, r6, lr
 801407e:	dc02      	bgt.n	8014086 <__ieee754_sqrt+0xca>
 8014080:	d112      	bne.n	80140a8 <__ieee754_sqrt+0xec>
 8014082:	428f      	cmp	r7, r1
 8014084:	d810      	bhi.n	80140a8 <__ieee754_sqrt+0xec>
 8014086:	2f00      	cmp	r7, #0
 8014088:	eb07 0e06 	add.w	lr, r7, r6
 801408c:	da42      	bge.n	8014114 <__ieee754_sqrt+0x158>
 801408e:	f1be 0f00 	cmp.w	lr, #0
 8014092:	db3f      	blt.n	8014114 <__ieee754_sqrt+0x158>
 8014094:	f104 0801 	add.w	r8, r4, #1
 8014098:	1b12      	subs	r2, r2, r4
 801409a:	428f      	cmp	r7, r1
 801409c:	bf88      	it	hi
 801409e:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 80140a2:	1bc9      	subs	r1, r1, r7
 80140a4:	4433      	add	r3, r6
 80140a6:	4644      	mov	r4, r8
 80140a8:	0052      	lsls	r2, r2, #1
 80140aa:	f1bc 0c01 	subs.w	ip, ip, #1
 80140ae:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80140b2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80140b6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80140ba:	d1dd      	bne.n	8014078 <__ieee754_sqrt+0xbc>
 80140bc:	430a      	orrs	r2, r1
 80140be:	d006      	beq.n	80140ce <__ieee754_sqrt+0x112>
 80140c0:	1c5c      	adds	r4, r3, #1
 80140c2:	bf13      	iteet	ne
 80140c4:	3301      	addne	r3, #1
 80140c6:	3501      	addeq	r5, #1
 80140c8:	4663      	moveq	r3, ip
 80140ca:	f023 0301 	bicne.w	r3, r3, #1
 80140ce:	106a      	asrs	r2, r5, #1
 80140d0:	085b      	lsrs	r3, r3, #1
 80140d2:	07e9      	lsls	r1, r5, #31
 80140d4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80140d8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80140dc:	bf48      	it	mi
 80140de:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80140e2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80140e6:	461c      	mov	r4, r3
 80140e8:	e780      	b.n	8013fec <__ieee754_sqrt+0x30>
 80140ea:	0aca      	lsrs	r2, r1, #11
 80140ec:	3815      	subs	r0, #21
 80140ee:	0549      	lsls	r1, r1, #21
 80140f0:	2a00      	cmp	r2, #0
 80140f2:	d0fa      	beq.n	80140ea <__ieee754_sqrt+0x12e>
 80140f4:	02d6      	lsls	r6, r2, #11
 80140f6:	d50a      	bpl.n	801410e <__ieee754_sqrt+0x152>
 80140f8:	f1c3 0420 	rsb	r4, r3, #32
 80140fc:	fa21 f404 	lsr.w	r4, r1, r4
 8014100:	1e5d      	subs	r5, r3, #1
 8014102:	4099      	lsls	r1, r3
 8014104:	4322      	orrs	r2, r4
 8014106:	1b43      	subs	r3, r0, r5
 8014108:	e78b      	b.n	8014022 <__ieee754_sqrt+0x66>
 801410a:	4618      	mov	r0, r3
 801410c:	e7f0      	b.n	80140f0 <__ieee754_sqrt+0x134>
 801410e:	0052      	lsls	r2, r2, #1
 8014110:	3301      	adds	r3, #1
 8014112:	e7ef      	b.n	80140f4 <__ieee754_sqrt+0x138>
 8014114:	46a0      	mov	r8, r4
 8014116:	e7bf      	b.n	8014098 <__ieee754_sqrt+0xdc>
 8014118:	7ff00000 	.word	0x7ff00000

0801411c <fabs>:
 801411c:	ec51 0b10 	vmov	r0, r1, d0
 8014120:	ee10 2a10 	vmov	r2, s0
 8014124:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014128:	ec43 2b10 	vmov	d0, r2, r3
 801412c:	4770      	bx	lr

0801412e <finite>:
 801412e:	ee10 3a90 	vmov	r3, s1
 8014132:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8014136:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801413a:	0fc0      	lsrs	r0, r0, #31
 801413c:	4770      	bx	lr

0801413e <matherr>:
 801413e:	2000      	movs	r0, #0
 8014140:	4770      	bx	lr
 8014142:	0000      	movs	r0, r0
 8014144:	0000      	movs	r0, r0
	...

08014148 <nan>:
 8014148:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014150 <nan+0x8>
 801414c:	4770      	bx	lr
 801414e:	bf00      	nop
 8014150:	00000000 	.word	0x00000000
 8014154:	7ff80000 	.word	0x7ff80000

08014158 <rint>:
 8014158:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801415a:	ec51 0b10 	vmov	r0, r1, d0
 801415e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014162:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8014166:	2e13      	cmp	r6, #19
 8014168:	460b      	mov	r3, r1
 801416a:	ee10 4a10 	vmov	r4, s0
 801416e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8014172:	dc56      	bgt.n	8014222 <rint+0xca>
 8014174:	2e00      	cmp	r6, #0
 8014176:	da2b      	bge.n	80141d0 <rint+0x78>
 8014178:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801417c:	4302      	orrs	r2, r0
 801417e:	d023      	beq.n	80141c8 <rint+0x70>
 8014180:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8014184:	4302      	orrs	r2, r0
 8014186:	4254      	negs	r4, r2
 8014188:	4314      	orrs	r4, r2
 801418a:	0c4b      	lsrs	r3, r1, #17
 801418c:	0b24      	lsrs	r4, r4, #12
 801418e:	045b      	lsls	r3, r3, #17
 8014190:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8014194:	ea44 0103 	orr.w	r1, r4, r3
 8014198:	460b      	mov	r3, r1
 801419a:	492f      	ldr	r1, [pc, #188]	; (8014258 <rint+0x100>)
 801419c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80141a0:	e9d1 6700 	ldrd	r6, r7, [r1]
 80141a4:	4602      	mov	r2, r0
 80141a6:	4639      	mov	r1, r7
 80141a8:	4630      	mov	r0, r6
 80141aa:	f7ec f897 	bl	80002dc <__adddf3>
 80141ae:	e9cd 0100 	strd	r0, r1, [sp]
 80141b2:	463b      	mov	r3, r7
 80141b4:	4632      	mov	r2, r6
 80141b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80141ba:	f7ec f88d 	bl	80002d8 <__aeabi_dsub>
 80141be:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80141c2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80141c6:	4639      	mov	r1, r7
 80141c8:	ec41 0b10 	vmov	d0, r0, r1
 80141cc:	b003      	add	sp, #12
 80141ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80141d0:	4a22      	ldr	r2, [pc, #136]	; (801425c <rint+0x104>)
 80141d2:	4132      	asrs	r2, r6
 80141d4:	ea01 0702 	and.w	r7, r1, r2
 80141d8:	4307      	orrs	r7, r0
 80141da:	d0f5      	beq.n	80141c8 <rint+0x70>
 80141dc:	0852      	lsrs	r2, r2, #1
 80141de:	4011      	ands	r1, r2
 80141e0:	430c      	orrs	r4, r1
 80141e2:	d00b      	beq.n	80141fc <rint+0xa4>
 80141e4:	ea23 0202 	bic.w	r2, r3, r2
 80141e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80141ec:	2e13      	cmp	r6, #19
 80141ee:	fa43 f306 	asr.w	r3, r3, r6
 80141f2:	bf0c      	ite	eq
 80141f4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80141f8:	2400      	movne	r4, #0
 80141fa:	4313      	orrs	r3, r2
 80141fc:	4916      	ldr	r1, [pc, #88]	; (8014258 <rint+0x100>)
 80141fe:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8014202:	4622      	mov	r2, r4
 8014204:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014208:	4620      	mov	r0, r4
 801420a:	4629      	mov	r1, r5
 801420c:	f7ec f866 	bl	80002dc <__adddf3>
 8014210:	e9cd 0100 	strd	r0, r1, [sp]
 8014214:	4622      	mov	r2, r4
 8014216:	462b      	mov	r3, r5
 8014218:	e9dd 0100 	ldrd	r0, r1, [sp]
 801421c:	f7ec f85c 	bl	80002d8 <__aeabi_dsub>
 8014220:	e7d2      	b.n	80141c8 <rint+0x70>
 8014222:	2e33      	cmp	r6, #51	; 0x33
 8014224:	dd07      	ble.n	8014236 <rint+0xde>
 8014226:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801422a:	d1cd      	bne.n	80141c8 <rint+0x70>
 801422c:	ee10 2a10 	vmov	r2, s0
 8014230:	f7ec f854 	bl	80002dc <__adddf3>
 8014234:	e7c8      	b.n	80141c8 <rint+0x70>
 8014236:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801423a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801423e:	40f2      	lsrs	r2, r6
 8014240:	4210      	tst	r0, r2
 8014242:	d0c1      	beq.n	80141c8 <rint+0x70>
 8014244:	0852      	lsrs	r2, r2, #1
 8014246:	4210      	tst	r0, r2
 8014248:	bf1f      	itttt	ne
 801424a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801424e:	ea20 0202 	bicne.w	r2, r0, r2
 8014252:	4134      	asrne	r4, r6
 8014254:	4314      	orrne	r4, r2
 8014256:	e7d1      	b.n	80141fc <rint+0xa4>
 8014258:	08015ad8 	.word	0x08015ad8
 801425c:	000fffff 	.word	0x000fffff

08014260 <scalbn>:
 8014260:	b570      	push	{r4, r5, r6, lr}
 8014262:	ec55 4b10 	vmov	r4, r5, d0
 8014266:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801426a:	4606      	mov	r6, r0
 801426c:	462b      	mov	r3, r5
 801426e:	b9aa      	cbnz	r2, 801429c <scalbn+0x3c>
 8014270:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014274:	4323      	orrs	r3, r4
 8014276:	d03b      	beq.n	80142f0 <scalbn+0x90>
 8014278:	4b31      	ldr	r3, [pc, #196]	; (8014340 <scalbn+0xe0>)
 801427a:	4629      	mov	r1, r5
 801427c:	2200      	movs	r2, #0
 801427e:	ee10 0a10 	vmov	r0, s0
 8014282:	f7ec f9e1 	bl	8000648 <__aeabi_dmul>
 8014286:	4b2f      	ldr	r3, [pc, #188]	; (8014344 <scalbn+0xe4>)
 8014288:	429e      	cmp	r6, r3
 801428a:	4604      	mov	r4, r0
 801428c:	460d      	mov	r5, r1
 801428e:	da12      	bge.n	80142b6 <scalbn+0x56>
 8014290:	a327      	add	r3, pc, #156	; (adr r3, 8014330 <scalbn+0xd0>)
 8014292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014296:	f7ec f9d7 	bl	8000648 <__aeabi_dmul>
 801429a:	e009      	b.n	80142b0 <scalbn+0x50>
 801429c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80142a0:	428a      	cmp	r2, r1
 80142a2:	d10c      	bne.n	80142be <scalbn+0x5e>
 80142a4:	ee10 2a10 	vmov	r2, s0
 80142a8:	4620      	mov	r0, r4
 80142aa:	4629      	mov	r1, r5
 80142ac:	f7ec f816 	bl	80002dc <__adddf3>
 80142b0:	4604      	mov	r4, r0
 80142b2:	460d      	mov	r5, r1
 80142b4:	e01c      	b.n	80142f0 <scalbn+0x90>
 80142b6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80142ba:	460b      	mov	r3, r1
 80142bc:	3a36      	subs	r2, #54	; 0x36
 80142be:	4432      	add	r2, r6
 80142c0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80142c4:	428a      	cmp	r2, r1
 80142c6:	dd0b      	ble.n	80142e0 <scalbn+0x80>
 80142c8:	ec45 4b11 	vmov	d1, r4, r5
 80142cc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8014338 <scalbn+0xd8>
 80142d0:	f000 f9f0 	bl	80146b4 <copysign>
 80142d4:	a318      	add	r3, pc, #96	; (adr r3, 8014338 <scalbn+0xd8>)
 80142d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142da:	ec51 0b10 	vmov	r0, r1, d0
 80142de:	e7da      	b.n	8014296 <scalbn+0x36>
 80142e0:	2a00      	cmp	r2, #0
 80142e2:	dd08      	ble.n	80142f6 <scalbn+0x96>
 80142e4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80142e8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80142ec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80142f0:	ec45 4b10 	vmov	d0, r4, r5
 80142f4:	bd70      	pop	{r4, r5, r6, pc}
 80142f6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80142fa:	da0d      	bge.n	8014318 <scalbn+0xb8>
 80142fc:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014300:	429e      	cmp	r6, r3
 8014302:	ec45 4b11 	vmov	d1, r4, r5
 8014306:	dce1      	bgt.n	80142cc <scalbn+0x6c>
 8014308:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8014330 <scalbn+0xd0>
 801430c:	f000 f9d2 	bl	80146b4 <copysign>
 8014310:	a307      	add	r3, pc, #28	; (adr r3, 8014330 <scalbn+0xd0>)
 8014312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014316:	e7e0      	b.n	80142da <scalbn+0x7a>
 8014318:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801431c:	3236      	adds	r2, #54	; 0x36
 801431e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014322:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014326:	4620      	mov	r0, r4
 8014328:	4629      	mov	r1, r5
 801432a:	2200      	movs	r2, #0
 801432c:	4b06      	ldr	r3, [pc, #24]	; (8014348 <scalbn+0xe8>)
 801432e:	e7b2      	b.n	8014296 <scalbn+0x36>
 8014330:	c2f8f359 	.word	0xc2f8f359
 8014334:	01a56e1f 	.word	0x01a56e1f
 8014338:	8800759c 	.word	0x8800759c
 801433c:	7e37e43c 	.word	0x7e37e43c
 8014340:	43500000 	.word	0x43500000
 8014344:	ffff3cb0 	.word	0xffff3cb0
 8014348:	3c900000 	.word	0x3c900000
 801434c:	00000000 	.word	0x00000000

08014350 <__ieee754_log>:
 8014350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014354:	ec51 0b10 	vmov	r0, r1, d0
 8014358:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801435c:	b087      	sub	sp, #28
 801435e:	460d      	mov	r5, r1
 8014360:	da27      	bge.n	80143b2 <__ieee754_log+0x62>
 8014362:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014366:	4303      	orrs	r3, r0
 8014368:	ee10 2a10 	vmov	r2, s0
 801436c:	d10a      	bne.n	8014384 <__ieee754_log+0x34>
 801436e:	49cc      	ldr	r1, [pc, #816]	; (80146a0 <__ieee754_log+0x350>)
 8014370:	2200      	movs	r2, #0
 8014372:	2300      	movs	r3, #0
 8014374:	2000      	movs	r0, #0
 8014376:	f7ec fa91 	bl	800089c <__aeabi_ddiv>
 801437a:	ec41 0b10 	vmov	d0, r0, r1
 801437e:	b007      	add	sp, #28
 8014380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014384:	2900      	cmp	r1, #0
 8014386:	da05      	bge.n	8014394 <__ieee754_log+0x44>
 8014388:	460b      	mov	r3, r1
 801438a:	f7eb ffa5 	bl	80002d8 <__aeabi_dsub>
 801438e:	2200      	movs	r2, #0
 8014390:	2300      	movs	r3, #0
 8014392:	e7f0      	b.n	8014376 <__ieee754_log+0x26>
 8014394:	4bc3      	ldr	r3, [pc, #780]	; (80146a4 <__ieee754_log+0x354>)
 8014396:	2200      	movs	r2, #0
 8014398:	f7ec f956 	bl	8000648 <__aeabi_dmul>
 801439c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80143a0:	460d      	mov	r5, r1
 80143a2:	4ac1      	ldr	r2, [pc, #772]	; (80146a8 <__ieee754_log+0x358>)
 80143a4:	4295      	cmp	r5, r2
 80143a6:	dd06      	ble.n	80143b6 <__ieee754_log+0x66>
 80143a8:	4602      	mov	r2, r0
 80143aa:	460b      	mov	r3, r1
 80143ac:	f7eb ff96 	bl	80002dc <__adddf3>
 80143b0:	e7e3      	b.n	801437a <__ieee754_log+0x2a>
 80143b2:	2300      	movs	r3, #0
 80143b4:	e7f5      	b.n	80143a2 <__ieee754_log+0x52>
 80143b6:	152c      	asrs	r4, r5, #20
 80143b8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80143bc:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80143c0:	441c      	add	r4, r3
 80143c2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80143c6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80143ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80143ce:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80143d2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80143d6:	ea42 0105 	orr.w	r1, r2, r5
 80143da:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80143de:	2200      	movs	r2, #0
 80143e0:	4bb2      	ldr	r3, [pc, #712]	; (80146ac <__ieee754_log+0x35c>)
 80143e2:	f7eb ff79 	bl	80002d8 <__aeabi_dsub>
 80143e6:	1cab      	adds	r3, r5, #2
 80143e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80143ec:	2b02      	cmp	r3, #2
 80143ee:	4682      	mov	sl, r0
 80143f0:	468b      	mov	fp, r1
 80143f2:	f04f 0200 	mov.w	r2, #0
 80143f6:	dc53      	bgt.n	80144a0 <__ieee754_log+0x150>
 80143f8:	2300      	movs	r3, #0
 80143fa:	f7ec fb8d 	bl	8000b18 <__aeabi_dcmpeq>
 80143fe:	b1d0      	cbz	r0, 8014436 <__ieee754_log+0xe6>
 8014400:	2c00      	cmp	r4, #0
 8014402:	f000 8120 	beq.w	8014646 <__ieee754_log+0x2f6>
 8014406:	4620      	mov	r0, r4
 8014408:	f7ec f8b4 	bl	8000574 <__aeabi_i2d>
 801440c:	a390      	add	r3, pc, #576	; (adr r3, 8014650 <__ieee754_log+0x300>)
 801440e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014412:	4606      	mov	r6, r0
 8014414:	460f      	mov	r7, r1
 8014416:	f7ec f917 	bl	8000648 <__aeabi_dmul>
 801441a:	a38f      	add	r3, pc, #572	; (adr r3, 8014658 <__ieee754_log+0x308>)
 801441c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014420:	4604      	mov	r4, r0
 8014422:	460d      	mov	r5, r1
 8014424:	4630      	mov	r0, r6
 8014426:	4639      	mov	r1, r7
 8014428:	f7ec f90e 	bl	8000648 <__aeabi_dmul>
 801442c:	4602      	mov	r2, r0
 801442e:	460b      	mov	r3, r1
 8014430:	4620      	mov	r0, r4
 8014432:	4629      	mov	r1, r5
 8014434:	e7ba      	b.n	80143ac <__ieee754_log+0x5c>
 8014436:	a38a      	add	r3, pc, #552	; (adr r3, 8014660 <__ieee754_log+0x310>)
 8014438:	e9d3 2300 	ldrd	r2, r3, [r3]
 801443c:	4650      	mov	r0, sl
 801443e:	4659      	mov	r1, fp
 8014440:	f7ec f902 	bl	8000648 <__aeabi_dmul>
 8014444:	4602      	mov	r2, r0
 8014446:	460b      	mov	r3, r1
 8014448:	2000      	movs	r0, #0
 801444a:	4999      	ldr	r1, [pc, #612]	; (80146b0 <__ieee754_log+0x360>)
 801444c:	f7eb ff44 	bl	80002d8 <__aeabi_dsub>
 8014450:	4652      	mov	r2, sl
 8014452:	4606      	mov	r6, r0
 8014454:	460f      	mov	r7, r1
 8014456:	465b      	mov	r3, fp
 8014458:	4650      	mov	r0, sl
 801445a:	4659      	mov	r1, fp
 801445c:	f7ec f8f4 	bl	8000648 <__aeabi_dmul>
 8014460:	4602      	mov	r2, r0
 8014462:	460b      	mov	r3, r1
 8014464:	4630      	mov	r0, r6
 8014466:	4639      	mov	r1, r7
 8014468:	f7ec f8ee 	bl	8000648 <__aeabi_dmul>
 801446c:	4606      	mov	r6, r0
 801446e:	460f      	mov	r7, r1
 8014470:	b914      	cbnz	r4, 8014478 <__ieee754_log+0x128>
 8014472:	4632      	mov	r2, r6
 8014474:	463b      	mov	r3, r7
 8014476:	e0a0      	b.n	80145ba <__ieee754_log+0x26a>
 8014478:	4620      	mov	r0, r4
 801447a:	f7ec f87b 	bl	8000574 <__aeabi_i2d>
 801447e:	a374      	add	r3, pc, #464	; (adr r3, 8014650 <__ieee754_log+0x300>)
 8014480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014484:	4680      	mov	r8, r0
 8014486:	4689      	mov	r9, r1
 8014488:	f7ec f8de 	bl	8000648 <__aeabi_dmul>
 801448c:	a372      	add	r3, pc, #456	; (adr r3, 8014658 <__ieee754_log+0x308>)
 801448e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014492:	4604      	mov	r4, r0
 8014494:	460d      	mov	r5, r1
 8014496:	4640      	mov	r0, r8
 8014498:	4649      	mov	r1, r9
 801449a:	f7ec f8d5 	bl	8000648 <__aeabi_dmul>
 801449e:	e0a5      	b.n	80145ec <__ieee754_log+0x29c>
 80144a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80144a4:	f7eb ff1a 	bl	80002dc <__adddf3>
 80144a8:	4602      	mov	r2, r0
 80144aa:	460b      	mov	r3, r1
 80144ac:	4650      	mov	r0, sl
 80144ae:	4659      	mov	r1, fp
 80144b0:	f7ec f9f4 	bl	800089c <__aeabi_ddiv>
 80144b4:	e9cd 0100 	strd	r0, r1, [sp]
 80144b8:	4620      	mov	r0, r4
 80144ba:	f7ec f85b 	bl	8000574 <__aeabi_i2d>
 80144be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80144c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80144c6:	4610      	mov	r0, r2
 80144c8:	4619      	mov	r1, r3
 80144ca:	f7ec f8bd 	bl	8000648 <__aeabi_dmul>
 80144ce:	4602      	mov	r2, r0
 80144d0:	460b      	mov	r3, r1
 80144d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80144d6:	f7ec f8b7 	bl	8000648 <__aeabi_dmul>
 80144da:	a363      	add	r3, pc, #396	; (adr r3, 8014668 <__ieee754_log+0x318>)
 80144dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144e0:	4680      	mov	r8, r0
 80144e2:	4689      	mov	r9, r1
 80144e4:	f7ec f8b0 	bl	8000648 <__aeabi_dmul>
 80144e8:	a361      	add	r3, pc, #388	; (adr r3, 8014670 <__ieee754_log+0x320>)
 80144ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144ee:	f7eb fef5 	bl	80002dc <__adddf3>
 80144f2:	4642      	mov	r2, r8
 80144f4:	464b      	mov	r3, r9
 80144f6:	f7ec f8a7 	bl	8000648 <__aeabi_dmul>
 80144fa:	a35f      	add	r3, pc, #380	; (adr r3, 8014678 <__ieee754_log+0x328>)
 80144fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014500:	f7eb feec 	bl	80002dc <__adddf3>
 8014504:	4642      	mov	r2, r8
 8014506:	464b      	mov	r3, r9
 8014508:	f7ec f89e 	bl	8000648 <__aeabi_dmul>
 801450c:	a35c      	add	r3, pc, #368	; (adr r3, 8014680 <__ieee754_log+0x330>)
 801450e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014512:	f7eb fee3 	bl	80002dc <__adddf3>
 8014516:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801451a:	f7ec f895 	bl	8000648 <__aeabi_dmul>
 801451e:	a35a      	add	r3, pc, #360	; (adr r3, 8014688 <__ieee754_log+0x338>)
 8014520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014524:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014528:	4640      	mov	r0, r8
 801452a:	4649      	mov	r1, r9
 801452c:	f7ec f88c 	bl	8000648 <__aeabi_dmul>
 8014530:	a357      	add	r3, pc, #348	; (adr r3, 8014690 <__ieee754_log+0x340>)
 8014532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014536:	f7eb fed1 	bl	80002dc <__adddf3>
 801453a:	4642      	mov	r2, r8
 801453c:	464b      	mov	r3, r9
 801453e:	f7ec f883 	bl	8000648 <__aeabi_dmul>
 8014542:	a355      	add	r3, pc, #340	; (adr r3, 8014698 <__ieee754_log+0x348>)
 8014544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014548:	f7eb fec8 	bl	80002dc <__adddf3>
 801454c:	4642      	mov	r2, r8
 801454e:	464b      	mov	r3, r9
 8014550:	f7ec f87a 	bl	8000648 <__aeabi_dmul>
 8014554:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8014558:	4602      	mov	r2, r0
 801455a:	460b      	mov	r3, r1
 801455c:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8014560:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014564:	f7eb feba 	bl	80002dc <__adddf3>
 8014568:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 801456c:	3551      	adds	r5, #81	; 0x51
 801456e:	4335      	orrs	r5, r6
 8014570:	2d00      	cmp	r5, #0
 8014572:	4680      	mov	r8, r0
 8014574:	4689      	mov	r9, r1
 8014576:	dd48      	ble.n	801460a <__ieee754_log+0x2ba>
 8014578:	2200      	movs	r2, #0
 801457a:	4b4d      	ldr	r3, [pc, #308]	; (80146b0 <__ieee754_log+0x360>)
 801457c:	4650      	mov	r0, sl
 801457e:	4659      	mov	r1, fp
 8014580:	f7ec f862 	bl	8000648 <__aeabi_dmul>
 8014584:	4652      	mov	r2, sl
 8014586:	465b      	mov	r3, fp
 8014588:	f7ec f85e 	bl	8000648 <__aeabi_dmul>
 801458c:	4602      	mov	r2, r0
 801458e:	460b      	mov	r3, r1
 8014590:	4606      	mov	r6, r0
 8014592:	460f      	mov	r7, r1
 8014594:	4640      	mov	r0, r8
 8014596:	4649      	mov	r1, r9
 8014598:	f7eb fea0 	bl	80002dc <__adddf3>
 801459c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80145a0:	f7ec f852 	bl	8000648 <__aeabi_dmul>
 80145a4:	4680      	mov	r8, r0
 80145a6:	4689      	mov	r9, r1
 80145a8:	b964      	cbnz	r4, 80145c4 <__ieee754_log+0x274>
 80145aa:	4602      	mov	r2, r0
 80145ac:	460b      	mov	r3, r1
 80145ae:	4630      	mov	r0, r6
 80145b0:	4639      	mov	r1, r7
 80145b2:	f7eb fe91 	bl	80002d8 <__aeabi_dsub>
 80145b6:	4602      	mov	r2, r0
 80145b8:	460b      	mov	r3, r1
 80145ba:	4650      	mov	r0, sl
 80145bc:	4659      	mov	r1, fp
 80145be:	f7eb fe8b 	bl	80002d8 <__aeabi_dsub>
 80145c2:	e6da      	b.n	801437a <__ieee754_log+0x2a>
 80145c4:	a322      	add	r3, pc, #136	; (adr r3, 8014650 <__ieee754_log+0x300>)
 80145c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80145ce:	f7ec f83b 	bl	8000648 <__aeabi_dmul>
 80145d2:	a321      	add	r3, pc, #132	; (adr r3, 8014658 <__ieee754_log+0x308>)
 80145d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145d8:	4604      	mov	r4, r0
 80145da:	460d      	mov	r5, r1
 80145dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80145e0:	f7ec f832 	bl	8000648 <__aeabi_dmul>
 80145e4:	4642      	mov	r2, r8
 80145e6:	464b      	mov	r3, r9
 80145e8:	f7eb fe78 	bl	80002dc <__adddf3>
 80145ec:	4602      	mov	r2, r0
 80145ee:	460b      	mov	r3, r1
 80145f0:	4630      	mov	r0, r6
 80145f2:	4639      	mov	r1, r7
 80145f4:	f7eb fe70 	bl	80002d8 <__aeabi_dsub>
 80145f8:	4652      	mov	r2, sl
 80145fa:	465b      	mov	r3, fp
 80145fc:	f7eb fe6c 	bl	80002d8 <__aeabi_dsub>
 8014600:	4602      	mov	r2, r0
 8014602:	460b      	mov	r3, r1
 8014604:	4620      	mov	r0, r4
 8014606:	4629      	mov	r1, r5
 8014608:	e7d9      	b.n	80145be <__ieee754_log+0x26e>
 801460a:	4602      	mov	r2, r0
 801460c:	460b      	mov	r3, r1
 801460e:	4650      	mov	r0, sl
 8014610:	4659      	mov	r1, fp
 8014612:	f7eb fe61 	bl	80002d8 <__aeabi_dsub>
 8014616:	e9dd 2300 	ldrd	r2, r3, [sp]
 801461a:	f7ec f815 	bl	8000648 <__aeabi_dmul>
 801461e:	4606      	mov	r6, r0
 8014620:	460f      	mov	r7, r1
 8014622:	2c00      	cmp	r4, #0
 8014624:	f43f af25 	beq.w	8014472 <__ieee754_log+0x122>
 8014628:	a309      	add	r3, pc, #36	; (adr r3, 8014650 <__ieee754_log+0x300>)
 801462a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801462e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014632:	f7ec f809 	bl	8000648 <__aeabi_dmul>
 8014636:	a308      	add	r3, pc, #32	; (adr r3, 8014658 <__ieee754_log+0x308>)
 8014638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801463c:	4604      	mov	r4, r0
 801463e:	460d      	mov	r5, r1
 8014640:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014644:	e729      	b.n	801449a <__ieee754_log+0x14a>
 8014646:	2000      	movs	r0, #0
 8014648:	2100      	movs	r1, #0
 801464a:	e696      	b.n	801437a <__ieee754_log+0x2a>
 801464c:	f3af 8000 	nop.w
 8014650:	fee00000 	.word	0xfee00000
 8014654:	3fe62e42 	.word	0x3fe62e42
 8014658:	35793c76 	.word	0x35793c76
 801465c:	3dea39ef 	.word	0x3dea39ef
 8014660:	55555555 	.word	0x55555555
 8014664:	3fd55555 	.word	0x3fd55555
 8014668:	df3e5244 	.word	0xdf3e5244
 801466c:	3fc2f112 	.word	0x3fc2f112
 8014670:	96cb03de 	.word	0x96cb03de
 8014674:	3fc74664 	.word	0x3fc74664
 8014678:	94229359 	.word	0x94229359
 801467c:	3fd24924 	.word	0x3fd24924
 8014680:	55555593 	.word	0x55555593
 8014684:	3fe55555 	.word	0x3fe55555
 8014688:	d078c69f 	.word	0xd078c69f
 801468c:	3fc39a09 	.word	0x3fc39a09
 8014690:	1d8e78af 	.word	0x1d8e78af
 8014694:	3fcc71c5 	.word	0x3fcc71c5
 8014698:	9997fa04 	.word	0x9997fa04
 801469c:	3fd99999 	.word	0x3fd99999
 80146a0:	c3500000 	.word	0xc3500000
 80146a4:	43500000 	.word	0x43500000
 80146a8:	7fefffff 	.word	0x7fefffff
 80146ac:	3ff00000 	.word	0x3ff00000
 80146b0:	3fe00000 	.word	0x3fe00000

080146b4 <copysign>:
 80146b4:	ec51 0b10 	vmov	r0, r1, d0
 80146b8:	ee11 0a90 	vmov	r0, s3
 80146bc:	ee10 2a10 	vmov	r2, s0
 80146c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80146c4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80146c8:	ea41 0300 	orr.w	r3, r1, r0
 80146cc:	ec43 2b10 	vmov	d0, r2, r3
 80146d0:	4770      	bx	lr
	...

080146d4 <_init>:
 80146d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146d6:	bf00      	nop
 80146d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80146da:	bc08      	pop	{r3}
 80146dc:	469e      	mov	lr, r3
 80146de:	4770      	bx	lr

080146e0 <_fini>:
 80146e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146e2:	bf00      	nop
 80146e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80146e6:	bc08      	pop	{r3}
 80146e8:	469e      	mov	lr, r3
 80146ea:	4770      	bx	lr
