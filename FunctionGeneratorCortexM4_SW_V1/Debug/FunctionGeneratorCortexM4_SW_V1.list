
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000133cc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013c0  080135b0  080135b0  000235b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014970  08014970  00031e08  2**0
                  CONTENTS
  4 .ARM          00000000  08014970  08014970  00031e08  2**0
                  CONTENTS
  5 .preinit_array 00000000  08014970  08014970  00031e08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014970  08014970  00024970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014974  08014974  00024974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001e08  20000000  08014978  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b28  20001e08  08016780  00031e08  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002930  08016780  00032930  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031e08  2**0
                  CONTENTS, READONLY
 12 .debug_info   00046fee  00000000  00000000  00031e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007b00  00000000  00000000  00078e26  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002260  00000000  00000000  00080928  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001e00  00000000  00000000  00082b88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003561c  00000000  00000000  00084988  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002f2b6  00000000  00000000  000b9fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00126809  00000000  00000000  000e925a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0020fa63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009840  00000000  00000000  0020fae0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001e08 	.word	0x20001e08
 80001fc:	00000000 	.word	0x00000000
 8000200:	08013594 	.word	0x08013594

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001e0c 	.word	0x20001e0c
 800021c:	08013594 	.word	0x08013594

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <BiasMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMenu(eBiasMenu_Status pMenu)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d000      	beq.n	8000cea <BiasMenu_DrawMenu+0x12>
		case ENABLE_BIAS_MENU:
			BiasMenu_DrawMainMenu();
			break;

		default:
			break;
 8000ce8:	e002      	b.n	8000cf0 <BiasMenu_DrawMenu+0x18>
			BiasMenu_DrawMainMenu();
 8000cea:	f000 f805 	bl	8000cf8 <BiasMenu_DrawMainMenu>
			break;
 8000cee:	bf00      	nop

	}
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <BiasMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMainMenu()
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->BIAS", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8000cfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d02:	9301      	str	r3, [sp, #4]
 8000d04:	2302      	movs	r3, #2
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2300      	movs	r3, #0
 8000d0a:	220a      	movs	r2, #10
 8000d0c:	210a      	movs	r1, #10
 8000d0e:	4804      	ldr	r0, [pc, #16]	; (8000d20 <BiasMenu_DrawMainMenu+0x28>)
 8000d10:	f00d fcde 	bl	800e6d0 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8000d14:	f000 f902 	bl	8000f1c <DM_DisplayFormattedOutput>

}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	080135b0 	.word	0x080135b0

08000d24 <DM_Init>:
 *	@param None
 *	@retval None
 *
 */
void DM_Init()
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 8000d28:	f00d fd13 	bl	800e752 <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f00e f969 	bl	800f004 <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 8000d32:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d36:	f00d ff4b 	bl	800ebd0 <ILI9341_Fill_Screen>

}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <DM_PostInit>:
 *	@param None
 *	@retval None
 *
 */
void DM_PostInit()
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("Initialising", 10, 10, NORMAL_TEXT_FGCOLOUR, 1, NORMAL_TEXT_BGCOLOUR);
 8000d46:	2300      	movs	r3, #0
 8000d48:	9301      	str	r3, [sp, #4]
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000d52:	220a      	movs	r2, #10
 8000d54:	210a      	movs	r1, #10
 8000d56:	4806      	ldr	r0, [pc, #24]	; (8000d70 <DM_PostInit+0x30>)
 8000d58:	f00d fcba 	bl	800e6d0 <ILI9341_Draw_Text>
	HAL_Delay(500);
 8000d5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d60:	f007 fb94 	bl	800848c <HAL_Delay>

	DM_RefreshScreen();
 8000d64:	f000 fb9a 	bl	800149c <DM_RefreshScreen>
	#ifdef EVENT_MENU_DEBUG
		  printf("Init Completed\n");
	#endif


}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	080135bc 	.word	0x080135bc

08000d74 <DM_UpdateDisplay>:
 *	@param None
 *	@retval None
 *
 */
void DM_UpdateDisplay()
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b09c      	sub	sp, #112	; 0x70
 8000d78:	af02      	add	r7, sp, #8
	/*
	 * 	Top level menu
	 */
	if(ToplevelMenu_getStatus())
 8000d7a:	f003 fefd 	bl	8004b78 <ToplevelMenu_getStatus>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d015      	beq.n	8000db0 <DM_UpdateDisplay+0x3c>

		#ifdef EVENT_MENU_DEBUG
			  printf("FuncMenu_DrawMenu\n");
		#endif

		switch(ToplevelMenu_getStatus())
 8000d84:	f003 fef8 	bl	8004b78 <ToplevelMenu_getStatus>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d008      	beq.n	8000da0 <DM_UpdateDisplay+0x2c>
 8000d8e:	2b03      	cmp	r3, #3
 8000d90:	d00a      	beq.n	8000da8 <DM_UpdateDisplay+0x34>
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d000      	beq.n	8000d98 <DM_UpdateDisplay+0x24>

				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
				break;

			default:
				break;
 8000d96:	e07d      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_MAIN_MENU);
 8000d98:	2001      	movs	r0, #1
 8000d9a:	f002 feb1 	bl	8003b00 <ToplevelMenu_DrawMenu>
				break;
 8000d9e:	e079      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8000da0:	2002      	movs	r0, #2
 8000da2:	f002 fead 	bl	8003b00 <ToplevelMenu_DrawMenu>
				break;
 8000da6:	e075      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
 8000da8:	2003      	movs	r0, #3
 8000daa:	f002 fea9 	bl	8003b00 <ToplevelMenu_DrawMenu>
				break;
 8000dae:	e071      	b.n	8000e94 <DM_UpdateDisplay+0x120>
	}

	/*
	 * 	Function menus
	 */
	else if(FuncMenu_getStatus())		//  != DISABLE_FUNC_MENU
 8000db0:	f003 fcf8 	bl	80047a4 <FuncMenu_getStatus>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d015      	beq.n	8000de6 <DM_UpdateDisplay+0x72>

		#ifdef EVENT_MENU_DEBUG
			  printf("FuncMenu_DrawMenu\n");
		#endif

		switch(FuncMenu_getStatus())
 8000dba:	f003 fcf3 	bl	80047a4 <FuncMenu_getStatus>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d008      	beq.n	8000dd6 <DM_UpdateDisplay+0x62>
 8000dc4:	2b03      	cmp	r3, #3
 8000dc6:	d00a      	beq.n	8000dde <DM_UpdateDisplay+0x6a>
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d000      	beq.n	8000dce <DM_UpdateDisplay+0x5a>
				FuncMenu_DrawMenu(ENABLE_FUNC_Aux_MENU);

				break;

			default:
				break;
 8000dcc:	e062      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				FuncMenu_DrawMenu(ENABLE_FUNC_MAIN_MENU);
 8000dce:	2001      	movs	r0, #1
 8000dd0:	f002 f91c 	bl	800300c <FuncMenu_DrawMenu>
				break;
 8000dd4:	e05e      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				FuncMenu_DrawMenu(ENABLE_FUNC_SIGNAL_MENU);
 8000dd6:	2002      	movs	r0, #2
 8000dd8:	f002 f918 	bl	800300c <FuncMenu_DrawMenu>
				break;
 8000ddc:	e05a      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				FuncMenu_DrawMenu(ENABLE_FUNC_Aux_MENU);
 8000dde:	2003      	movs	r0, #3
 8000de0:	f002 f914 	bl	800300c <FuncMenu_DrawMenu>
				break;
 8000de4:	e056      	b.n	8000e94 <DM_UpdateDisplay+0x120>

	}
	/*
	 * 	Gain menus
	 */
	else if(GainMenu_getStatus())		//  != DISABLE_GAIN_MENU
 8000de6:	f003 fdd5 	bl	8004994 <GainMenu_getStatus>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d015      	beq.n	8000e1c <DM_UpdateDisplay+0xa8>

		#ifdef EVENT_MENU_DEBUG
			  printf("GainMenu_DrawMenu\n");
		#endif

		switch(GainMenu_getStatus())
 8000df0:	f003 fdd0 	bl	8004994 <GainMenu_getStatus>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d008      	beq.n	8000e0c <DM_UpdateDisplay+0x98>
 8000dfa:	2b03      	cmp	r3, #3
 8000dfc:	d00a      	beq.n	8000e14 <DM_UpdateDisplay+0xa0>
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d000      	beq.n	8000e04 <DM_UpdateDisplay+0x90>
				GainMenu_DrawMenu(ENABLE_GAIN_Aux_MENU);

				break;

			default:
				break;
 8000e02:	e047      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				GainMenu_DrawMenu(ENABLE_GAIN_MAIN_MENU);
 8000e04:	2001      	movs	r0, #1
 8000e06:	f002 fdd5 	bl	80039b4 <GainMenu_DrawMenu>
				break;
 8000e0a:	e043      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				GainMenu_DrawMenu(ENABLE_GAIN_SIGNAL_MENU);
 8000e0c:	2002      	movs	r0, #2
 8000e0e:	f002 fdd1 	bl	80039b4 <GainMenu_DrawMenu>
				break;
 8000e12:	e03f      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				GainMenu_DrawMenu(ENABLE_GAIN_Aux_MENU);
 8000e14:	2003      	movs	r0, #3
 8000e16:	f002 fdcd 	bl	80039b4 <GainMenu_DrawMenu>
				break;
 8000e1a:	e03b      	b.n	8000e94 <DM_UpdateDisplay+0x120>
	}

	/*
	 * 	 Frequency menus
	 */
	else if(FreqMenu_getStatus())		//  != DISABLE_FREQ_MENU
 8000e1c:	f003 fcb6 	bl	800478c <FreqMenu_getStatus>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d020      	beq.n	8000e68 <DM_UpdateDisplay+0xf4>
			  printf("FreqMenu_DrawMenu\n");
		#endif

		//ILI9341_Draw_Text("FREQUENCY MENU", 	30, 10, WHITE, 3, BLACK);

		switch(FreqMenu_getStatus())
 8000e26:	f003 fcb1 	bl	800478c <FreqMenu_getStatus>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	3b01      	subs	r3, #1
 8000e2e:	2b03      	cmp	r3, #3
 8000e30:	d82f      	bhi.n	8000e92 <DM_UpdateDisplay+0x11e>
 8000e32:	a201      	add	r2, pc, #4	; (adr r2, 8000e38 <DM_UpdateDisplay+0xc4>)
 8000e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e38:	08000e49 	.word	0x08000e49
 8000e3c:	08000e51 	.word	0x08000e51
 8000e40:	08000e59 	.word	0x08000e59
 8000e44:	08000e61 	.word	0x08000e61
		{
			case ENABLE_FREQ_MAIN_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_MAIN_MENU);
 8000e48:	2001      	movs	r0, #1
 8000e4a:	f000 fb8b 	bl	8001564 <FreqMenu_DrawMenu>

				break;
 8000e4e:	e021      	b.n	8000e94 <DM_UpdateDisplay+0x120>

			case ENABLE_FREQ_PRESET_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_PRESET_MENU);
 8000e50:	2002      	movs	r0, #2
 8000e52:	f000 fb87 	bl	8001564 <FreqMenu_DrawMenu>
				break;
 8000e56:	e01d      	b.n	8000e94 <DM_UpdateDisplay+0x120>

			case ENABLE_FREQ_ADJUST_MENU:


				FreqMenu_DrawMenu(ENABLE_FREQ_ADJUST_MENU);
 8000e58:	2003      	movs	r0, #3
 8000e5a:	f000 fb83 	bl	8001564 <FreqMenu_DrawMenu>

				break;
 8000e5e:	e019      	b.n	8000e94 <DM_UpdateDisplay+0x120>

			case ENABLE_FREQ_SWEEP_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_SWEEP_MENU);
 8000e60:	2004      	movs	r0, #4
 8000e62:	f000 fb7f 	bl	8001564 <FreqMenu_DrawMenu>
				break;
 8000e66:	e015      	b.n	8000e94 <DM_UpdateDisplay+0x120>
	}

	/*
	 * 	Bias menu
	 */
	else if(BiasMenu_getStatus())		//  != DISABLE_BIAS_MENU
 8000e68:	f002 fffe 	bl	8003e68 <BiasMenu_getStatus>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d003      	beq.n	8000e7a <DM_UpdateDisplay+0x106>

		#ifdef EVENT_MENU_DEBUG
			  printf("BiasMenu_DrawMenu\n");
		#endif

		BiasMenu_DrawMenu(ENABLE_BIAS_MENU);
 8000e72:	2001      	movs	r0, #1
 8000e74:	f7ff ff30 	bl	8000cd8 <BiasMenu_DrawMenu>
 8000e78:	e00c      	b.n	8000e94 <DM_UpdateDisplay+0x120>
	/*
	 * 		Error
	 */
	else
	{
		ILI9341_Draw_Text("DisplayManager: no menu status set!", 10, 50, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000e7a:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000e7e:	9301      	str	r3, [sp, #4]
 8000e80:	2301      	movs	r3, #1
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	2300      	movs	r3, #0
 8000e86:	2232      	movs	r2, #50	; 0x32
 8000e88:	210a      	movs	r1, #10
 8000e8a:	4820      	ldr	r0, [pc, #128]	; (8000f0c <DM_UpdateDisplay+0x198>)
 8000e8c:	f00d fc20 	bl	800e6d0 <ILI9341_Draw_Text>
 8000e90:	e000      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				break;
 8000e92:	bf00      	nop
	 * 	Debug messages
	 */

	//TODO
	#ifdef ENCODER_DEBUG
		char tim5_text[50] = "";
 8000e94:	2300      	movs	r3, #0
 8000e96:	637b      	str	r3, [r7, #52]	; 0x34
 8000e98:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e9c:	222e      	movs	r2, #46	; 0x2e
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f00e faf1 	bl	800f488 <memset>
		snprintf(tim5_text, sizeof(tim5_text), "OFFSET: %5lu", BO_GetOutputBias());
 8000ea6:	f004 f941 	bl	800512c <BO_GetOutputBias>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000eb0:	4a17      	ldr	r2, [pc, #92]	; (8000f10 <DM_UpdateDisplay+0x19c>)
 8000eb2:	2132      	movs	r1, #50	; 0x32
 8000eb4:	f00e ffc8 	bl	800fe48 <sniprintf>
		ILI9341_Draw_Text(tim5_text, 220, 10, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000eb8:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000ebc:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000ec0:	9301      	str	r3, [sp, #4]
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	220a      	movs	r2, #10
 8000eca:	21dc      	movs	r1, #220	; 0xdc
 8000ecc:	f00d fc00 	bl	800e6d0 <ILI9341_Draw_Text>

		char encoder_value[50] = "";
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	603b      	str	r3, [r7, #0]
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	222e      	movs	r2, #46	; 0x2e
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f00e fad4 	bl	800f488 <memset>
		snprintf(encoder_value, sizeof(encoder_value), "ENCODER: %5lu", ENCODER_TIMER->CNT);
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <DM_UpdateDisplay+0x1a0>)
 8000ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee4:	4638      	mov	r0, r7
 8000ee6:	4a0c      	ldr	r2, [pc, #48]	; (8000f18 <DM_UpdateDisplay+0x1a4>)
 8000ee8:	2132      	movs	r1, #50	; 0x32
 8000eea:	f00e ffad 	bl	800fe48 <sniprintf>
		ILI9341_Draw_Text(encoder_value, 220, 20, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000eee:	4638      	mov	r0, r7
 8000ef0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000ef4:	9301      	str	r3, [sp, #4]
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	2300      	movs	r3, #0
 8000efc:	2214      	movs	r2, #20
 8000efe:	21dc      	movs	r1, #220	; 0xdc
 8000f00:	f00d fbe6 	bl	800e6d0 <ILI9341_Draw_Text>
	#endif //ENCODER_DEBUG



}
 8000f04:	bf00      	nop
 8000f06:	3768      	adds	r7, #104	; 0x68
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	080135cc 	.word	0x080135cc
 8000f10:	080135f0 	.word	0x080135f0
 8000f14:	40012c00 	.word	0x40012c00
 8000f18:	08013600 	.word	0x08013600

08000f1c <DM_DisplayFormattedOutput>:
 *	@param None
 *	@retval None
 *
 */
void DM_DisplayFormattedOutput()
{
 8000f1c:	b590      	push	{r4, r7, lr}
 8000f1e:	b09f      	sub	sp, #124	; 0x7c
 8000f20:	af04      	add	r7, sp, #16
	uint8_t text_size = 2;
 8000f22:	2302      	movs	r3, #2
 8000f24:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	char out_hertz[15] = "";
 8000f28:	2300      	movs	r3, #0
 8000f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f2c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	f8c3 2007 	str.w	r2, [r3, #7]
	uint8_t out_hertz_x = 140;
 8000f3a:	238c      	movs	r3, #140	; 0x8c
 8000f3c:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	uint8_t out_hertz_y = 40;
 8000f40:	2328      	movs	r3, #40	; 0x28
 8000f42:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

	char out_vpp[18] = "";
 8000f46:	2300      	movs	r3, #0
 8000f48:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	819a      	strh	r2, [r3, #12]
	uint8_t out_vpp_x = 175;
 8000f58:	23af      	movs	r3, #175	; 0xaf
 8000f5a:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	uint8_t out_vpp_y = 70;
 8000f5e:	2346      	movs	r3, #70	; 0x46
 8000f60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	char out_decibels[20] = "";
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]
 8000f68:	f107 0318 	add.w	r3, r7, #24
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
	uint8_t out_decibels_x = 138;
 8000f76:	238a      	movs	r3, #138	; 0x8a
 8000f78:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t out_decibels_y = 100;
 8000f7c:	2364      	movs	r3, #100	; 0x64
 8000f7e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d


	float volts_per_thou = 0.00075;
 8000f82:	4bc4      	ldr	r3, [pc, #784]	; (8001294 <DM_DisplayFormattedOutput+0x378>)
 8000f84:	65bb      	str	r3, [r7, #88]	; 0x58
	char out_dcvolts[12] = "";
 8000f86:	2300      	movs	r3, #0
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	f107 030c 	add.w	r3, r7, #12
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
	uint8_t out_dcvolts_x = 161;
 8000f94:	23a1      	movs	r3, #161	; 0xa1
 8000f96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t out_dcvolts_y = 130;
 8000f9a:	2382      	movs	r3, #130	; 0x82
 8000f9c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

	ILI9341_Draw_Text(" FREQ   ....", 3, out_hertz_y , NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000fa0:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8000fa4:	b299      	uxth	r1, r3
 8000fa6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	2200      	movs	r2, #0
 8000fae:	9201      	str	r2, [sp, #4]
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000fb6:	460a      	mov	r2, r1
 8000fb8:	2103      	movs	r1, #3
 8000fba:	48b7      	ldr	r0, [pc, #732]	; (8001298 <DM_DisplayFormattedOutput+0x37c>)
 8000fbc:	f00d fb88 	bl	800e6d0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" VPP    ....", 3, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000fc0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000fc4:	b299      	uxth	r1, r3
 8000fc6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	2200      	movs	r2, #0
 8000fce:	9201      	str	r2, [sp, #4]
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000fd6:	460a      	mov	r2, r1
 8000fd8:	2103      	movs	r1, #3
 8000fda:	48b0      	ldr	r0, [pc, #704]	; (800129c <DM_DisplayFormattedOutput+0x380>)
 8000fdc:	f00d fb78 	bl	800e6d0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" GAIN   ....", 3, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000fe0:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8000fe4:	b299      	uxth	r1, r3
 8000fe6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	2200      	movs	r2, #0
 8000fee:	9201      	str	r2, [sp, #4]
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000ff6:	460a      	mov	r2, r1
 8000ff8:	2103      	movs	r1, #3
 8000ffa:	48a9      	ldr	r0, [pc, #676]	; (80012a0 <DM_DisplayFormattedOutput+0x384>)
 8000ffc:	f00d fb68 	bl	800e6d0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" OFFSET ....", 3, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001000:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001004:	b299      	uxth	r1, r3
 8001006:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800100a:	b29b      	uxth	r3, r3
 800100c:	2200      	movs	r2, #0
 800100e:	9201      	str	r2, [sp, #4]
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001016:	460a      	mov	r2, r1
 8001018:	2103      	movs	r1, #3
 800101a:	48a2      	ldr	r0, [pc, #648]	; (80012a4 <DM_DisplayFormattedOutput+0x388>)
 800101c:	f00d fb58 	bl	800e6d0 <ILI9341_Draw_Text>

	// display output in hertz
	snprintf(out_hertz, sizeof(out_hertz), " %4.2f   Hz ", SM_GetOutputInHertz());
 8001020:	f005 fa1a 	bl	8006458 <SM_GetOutputInHertz>
 8001024:	ee10 3a10 	vmov	r3, s0
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff fab5 	bl	8000598 <__aeabi_f2d>
 800102e:	4603      	mov	r3, r0
 8001030:	460c      	mov	r4, r1
 8001032:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001036:	e9cd 3400 	strd	r3, r4, [sp]
 800103a:	4a9b      	ldr	r2, [pc, #620]	; (80012a8 <DM_DisplayFormattedOutput+0x38c>)
 800103c:	210f      	movs	r1, #15
 800103e:	f00e ff03 	bl	800fe48 <sniprintf>
	ILI9341_Draw_Text(out_hertz, out_hertz_x, out_hertz_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001042:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8001046:	b299      	uxth	r1, r3
 8001048:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 800104c:	b29c      	uxth	r4, r3
 800104e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001052:	b29b      	uxth	r3, r3
 8001054:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001058:	2200      	movs	r2, #0
 800105a:	9201      	str	r2, [sp, #4]
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001062:	4622      	mov	r2, r4
 8001064:	f00d fb34 	bl	800e6d0 <ILI9341_Draw_Text>

	// display output in volts peak-to-peak and decibels
	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 8001068:	2000      	movs	r0, #0
 800106a:	f004 ff5d 	bl	8005f28 <SM_GetOutputChannel>
 800106e:	4603      	mov	r3, r0
 8001070:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8001074:	653b      	str	r3, [r7, #80]	; 0x50

	if(pTmpVppPreset)
 8001076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001078:	2b00      	cmp	r3, #0
 800107a:	d01d      	beq.n	80010b8 <DM_DisplayFormattedOutput+0x19c>
	{
		snprintf(out_vpp, sizeof(out_vpp), " %2.2f   V ", pTmpVppPreset->amp_value);
 800107c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fa89 	bl	8000598 <__aeabi_f2d>
 8001086:	4603      	mov	r3, r0
 8001088:	460c      	mov	r4, r1
 800108a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800108e:	e9cd 3400 	strd	r3, r4, [sp]
 8001092:	4a86      	ldr	r2, [pc, #536]	; (80012ac <DM_DisplayFormattedOutput+0x390>)
 8001094:	2112      	movs	r1, #18
 8001096:	f00e fed7 	bl	800fe48 <sniprintf>
		snprintf(out_decibels, sizeof(out_decibels), " %+7.2f ", pTmpVppPreset->gain_decibels);
 800109a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800109c:	68db      	ldr	r3, [r3, #12]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fa7a 	bl	8000598 <__aeabi_f2d>
 80010a4:	4603      	mov	r3, r0
 80010a6:	460c      	mov	r4, r1
 80010a8:	f107 0014 	add.w	r0, r7, #20
 80010ac:	e9cd 3400 	strd	r3, r4, [sp]
 80010b0:	4a7f      	ldr	r2, [pc, #508]	; (80012b0 <DM_DisplayFormattedOutput+0x394>)
 80010b2:	2114      	movs	r1, #20
 80010b4:	f00e fec8 	bl	800fe48 <sniprintf>
	}
	ILI9341_Draw_Text(out_vpp, out_vpp_x, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80010b8:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80010bc:	b299      	uxth	r1, r3
 80010be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80010c2:	b29c      	uxth	r4, r3
 80010c4:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80010ce:	2200      	movs	r2, #0
 80010d0:	9201      	str	r2, [sp, #4]
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80010d8:	4622      	mov	r2, r4
 80010da:	f00d faf9 	bl	800e6d0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(out_decibels, out_decibels_x, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80010de:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80010e2:	b299      	uxth	r1, r3
 80010e4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80010e8:	b29c      	uxth	r4, r3
 80010ea:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	f107 0014 	add.w	r0, r7, #20
 80010f4:	2200      	movs	r2, #0
 80010f6:	9201      	str	r2, [sp, #4]
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80010fe:	4622      	mov	r2, r4
 8001100:	f00d fae6 	bl	800e6d0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("dBmV", out_decibels_x + 128, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001104:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001108:	b29b      	uxth	r3, r3
 800110a:	3380      	adds	r3, #128	; 0x80
 800110c:	b299      	uxth	r1, r3
 800110e:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8001112:	b298      	uxth	r0, r3
 8001114:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001118:	b29b      	uxth	r3, r3
 800111a:	2200      	movs	r2, #0
 800111c:	9201      	str	r2, [sp, #4]
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001124:	4602      	mov	r2, r0
 8001126:	4863      	ldr	r0, [pc, #396]	; (80012b4 <DM_DisplayFormattedOutput+0x398>)
 8001128:	f00d fad2 	bl	800e6d0 <ILI9341_Draw_Text>


	// display output bias in +/- Volts
	float dc_volts;
	(BO_GetOutputBias() == 0) ? (dc_volts = 0) : (dc_volts = volts_per_thou * (float)BO_GetOutputBias());
 800112c:	f003 fffe 	bl	800512c <BO_GetOutputBias>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d103      	bne.n	800113e <DM_DisplayFormattedOutput+0x222>
 8001136:	f04f 0300 	mov.w	r3, #0
 800113a:	667b      	str	r3, [r7, #100]	; 0x64
 800113c:	e00b      	b.n	8001156 <DM_DisplayFormattedOutput+0x23a>
 800113e:	f003 fff5 	bl	800512c <BO_GetOutputBias>
 8001142:	ee07 0a90 	vmov	s15, r0
 8001146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800114a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800114e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001152:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

	snprintf(out_dcvolts, sizeof(out_dcvolts), "%05.2f   v ", dc_volts);
 8001156:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001158:	f7ff fa1e 	bl	8000598 <__aeabi_f2d>
 800115c:	4603      	mov	r3, r0
 800115e:	460c      	mov	r4, r1
 8001160:	f107 0008 	add.w	r0, r7, #8
 8001164:	e9cd 3400 	strd	r3, r4, [sp]
 8001168:	4a53      	ldr	r2, [pc, #332]	; (80012b8 <DM_DisplayFormattedOutput+0x39c>)
 800116a:	210c      	movs	r1, #12
 800116c:	f00e fe6c 	bl	800fe48 <sniprintf>
	if(BO_GetBiasPolarity())
 8001170:	f003 ff7c 	bl	800506c <BO_GetBiasPolarity>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d022      	beq.n	80011c0 <DM_DisplayFormattedOutput+0x2a4>
	{
		char symbol[3] = "+\0";
 800117a:	4a50      	ldr	r2, [pc, #320]	; (80012bc <DM_DisplayFormattedOutput+0x3a0>)
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	6812      	ldr	r2, [r2, #0]
 8001180:	4611      	mov	r1, r2
 8001182:	8019      	strh	r1, [r3, #0]
 8001184:	3302      	adds	r3, #2
 8001186:	0c12      	lsrs	r2, r2, #16
 8001188:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800118a:	f107 0208 	add.w	r2, r7, #8
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	4611      	mov	r1, r2
 8001192:	4618      	mov	r0, r3
 8001194:	f00e fe8c 	bl	800feb0 <strcat>
 8001198:	4604      	mov	r4, r0
 800119a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800119e:	b299      	uxth	r1, r3
 80011a0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80011a4:	b298      	uxth	r0, r3
 80011a6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	2200      	movs	r2, #0
 80011ae:	9201      	str	r2, [sp, #4]
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80011b6:	4602      	mov	r2, r0
 80011b8:	4620      	mov	r0, r4
 80011ba:	f00d fa89 	bl	800e6d0 <ILI9341_Draw_Text>
 80011be:	e021      	b.n	8001204 <DM_DisplayFormattedOutput+0x2e8>
	}
	else
	{
		char symbol[3] = "-\0";
 80011c0:	4a3f      	ldr	r2, [pc, #252]	; (80012c0 <DM_DisplayFormattedOutput+0x3a4>)
 80011c2:	463b      	mov	r3, r7
 80011c4:	6812      	ldr	r2, [r2, #0]
 80011c6:	4611      	mov	r1, r2
 80011c8:	8019      	strh	r1, [r3, #0]
 80011ca:	3302      	adds	r3, #2
 80011cc:	0c12      	lsrs	r2, r2, #16
 80011ce:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80011d0:	f107 0208 	add.w	r2, r7, #8
 80011d4:	463b      	mov	r3, r7
 80011d6:	4611      	mov	r1, r2
 80011d8:	4618      	mov	r0, r3
 80011da:	f00e fe69 	bl	800feb0 <strcat>
 80011de:	4604      	mov	r4, r0
 80011e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80011e4:	b299      	uxth	r1, r3
 80011e6:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80011ea:	b298      	uxth	r0, r3
 80011ec:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	2200      	movs	r2, #0
 80011f4:	9201      	str	r2, [sp, #4]
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80011fc:	4602      	mov	r2, r0
 80011fe:	4620      	mov	r0, r4
 8001200:	f00d fa66 	bl	800e6d0 <ILI9341_Draw_Text>
	}

	ILI9341_Draw_Text(" OUT:", 3, 170, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001204:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001208:	b29b      	uxth	r3, r3
 800120a:	2200      	movs	r2, #0
 800120c:	9201      	str	r2, [sp, #4]
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001214:	22aa      	movs	r2, #170	; 0xaa
 8001216:	2103      	movs	r1, #3
 8001218:	482a      	ldr	r0, [pc, #168]	; (80012c4 <DM_DisplayFormattedOutput+0x3a8>)
 800121a:	f00d fa59 	bl	800e6d0 <ILI9341_Draw_Text>
	eOutput_mode signal_output_func = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 800121e:	2000      	movs	r0, #0
 8001220:	f004 fe82 	bl	8005f28 <SM_GetOutputChannel>
 8001224:	4603      	mov	r3, r0
 8001226:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	switch(signal_output_func)
 8001230:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001234:	2b06      	cmp	r3, #6
 8001236:	f200 8091 	bhi.w	800135c <DM_DisplayFormattedOutput+0x440>
 800123a:	a201      	add	r2, pc, #4	; (adr r2, 8001240 <DM_DisplayFormattedOutput+0x324>)
 800123c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001240:	0800125d 	.word	0x0800125d
 8001244:	08001279 	.word	0x08001279
 8001248:	080012d1 	.word	0x080012d1
 800124c:	080012ed 	.word	0x080012ed
 8001250:	08001309 	.word	0x08001309
 8001254:	08001325 	.word	0x08001325
 8001258:	08001341 	.word	0x08001341
	{
		case SINE_FUNC_MODE:

			ILI9341_Draw_Wave(80, 140, 3, SIGNAL_OUTPUT_ICON, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 800125c:	233c      	movs	r3, #60	; 0x3c
 800125e:	9302      	str	r3, [sp, #8]
 8001260:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <DM_DisplayFormattedOutput+0x3ac>)
 8001262:	9301      	str	r3, [sp, #4]
 8001264:	2364      	movs	r3, #100	; 0x64
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	f240 23fd 	movw	r3, #765	; 0x2fd
 800126c:	2203      	movs	r2, #3
 800126e:	218c      	movs	r1, #140	; 0x8c
 8001270:	2050      	movs	r0, #80	; 0x50
 8001272:	f00d f889 	bl	800e388 <ILI9341_Draw_Wave>
			break;
 8001276:	e071      	b.n	800135c <DM_DisplayFormattedOutput+0x440>
		case SQUARE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, squareicon_data_table_3600, SQUAREICON_DATA_SIZE);
 8001278:	233c      	movs	r3, #60	; 0x3c
 800127a:	9302      	str	r3, [sp, #8]
 800127c:	4b13      	ldr	r3, [pc, #76]	; (80012cc <DM_DisplayFormattedOutput+0x3b0>)
 800127e:	9301      	str	r3, [sp, #4]
 8001280:	23c8      	movs	r3, #200	; 0xc8
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001288:	2203      	movs	r2, #3
 800128a:	21a0      	movs	r1, #160	; 0xa0
 800128c:	2050      	movs	r0, #80	; 0x50
 800128e:	f00d f87b 	bl	800e388 <ILI9341_Draw_Wave>
			break;
 8001292:	e063      	b.n	800135c <DM_DisplayFormattedOutput+0x440>
 8001294:	3a449ba6 	.word	0x3a449ba6
 8001298:	08013610 	.word	0x08013610
 800129c:	08013620 	.word	0x08013620
 80012a0:	08013630 	.word	0x08013630
 80012a4:	08013640 	.word	0x08013640
 80012a8:	08013650 	.word	0x08013650
 80012ac:	08013660 	.word	0x08013660
 80012b0:	0801366c 	.word	0x0801366c
 80012b4:	08013678 	.word	0x08013678
 80012b8:	08013680 	.word	0x08013680
 80012bc:	080136a0 	.word	0x080136a0
 80012c0:	080136a4 	.word	0x080136a4
 80012c4:	0801368c 	.word	0x0801368c
 80012c8:	20000e24 	.word	0x20000e24
 80012cc:	20000f14 	.word	0x20000f14
		case SAW_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, sawicon_data_table_3600, SAWICON_DATA_SIZE);
 80012d0:	233c      	movs	r3, #60	; 0x3c
 80012d2:	9302      	str	r3, [sp, #8]
 80012d4:	4b6a      	ldr	r3, [pc, #424]	; (8001480 <DM_DisplayFormattedOutput+0x564>)
 80012d6:	9301      	str	r3, [sp, #4]
 80012d8:	23c8      	movs	r3, #200	; 0xc8
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	f240 23fd 	movw	r3, #765	; 0x2fd
 80012e0:	2203      	movs	r2, #3
 80012e2:	21a0      	movs	r1, #160	; 0xa0
 80012e4:	2050      	movs	r0, #80	; 0x50
 80012e6:	f00d f84f 	bl	800e388 <ILI9341_Draw_Wave>
			break;
 80012ea:	e037      	b.n	800135c <DM_DisplayFormattedOutput+0x440>
		case REV_SAW_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, sawicon_rev_data_table_3600, SAWICON_REV_DATA_SIZE);
 80012ec:	233c      	movs	r3, #60	; 0x3c
 80012ee:	9302      	str	r3, [sp, #8]
 80012f0:	4b64      	ldr	r3, [pc, #400]	; (8001484 <DM_DisplayFormattedOutput+0x568>)
 80012f2:	9301      	str	r3, [sp, #4]
 80012f4:	23c8      	movs	r3, #200	; 0xc8
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	f240 23fd 	movw	r3, #765	; 0x2fd
 80012fc:	2203      	movs	r2, #3
 80012fe:	21a0      	movs	r1, #160	; 0xa0
 8001300:	2050      	movs	r0, #80	; 0x50
 8001302:	f00d f841 	bl	800e388 <ILI9341_Draw_Wave>
			break;
 8001306:	e029      	b.n	800135c <DM_DisplayFormattedOutput+0x440>
		case TRIANGLE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001308:	233c      	movs	r3, #60	; 0x3c
 800130a:	9302      	str	r3, [sp, #8]
 800130c:	4b5e      	ldr	r3, [pc, #376]	; (8001488 <DM_DisplayFormattedOutput+0x56c>)
 800130e:	9301      	str	r3, [sp, #4]
 8001310:	23c8      	movs	r3, #200	; 0xc8
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001318:	2203      	movs	r2, #3
 800131a:	21a0      	movs	r1, #160	; 0xa0
 800131c:	2050      	movs	r0, #80	; 0x50
 800131e:	f00d f833 	bl	800e388 <ILI9341_Draw_Wave>
			break;
 8001322:	e01b      	b.n	800135c <DM_DisplayFormattedOutput+0x440>
		case IMPULSE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001324:	233c      	movs	r3, #60	; 0x3c
 8001326:	9302      	str	r3, [sp, #8]
 8001328:	4b57      	ldr	r3, [pc, #348]	; (8001488 <DM_DisplayFormattedOutput+0x56c>)
 800132a:	9301      	str	r3, [sp, #4]
 800132c:	23c8      	movs	r3, #200	; 0xc8
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001334:	2203      	movs	r2, #3
 8001336:	21a0      	movs	r1, #160	; 0xa0
 8001338:	2050      	movs	r0, #80	; 0x50
 800133a:	f00d f825 	bl	800e388 <ILI9341_Draw_Wave>
			break;
 800133e:	e00d      	b.n	800135c <DM_DisplayFormattedOutput+0x440>
		case PWM_FUNC_MODE:
			ILI9341_Draw_Text("PWM", 80, 170, SIGNAL_OUTPUT_ICON, text_size, NORMAL_TEXT_BGCOLOUR);
 8001340:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001344:	b29b      	uxth	r3, r3
 8001346:	2200      	movs	r2, #0
 8001348:	9201      	str	r2, [sp, #4]
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001350:	22aa      	movs	r2, #170	; 0xaa
 8001352:	2150      	movs	r1, #80	; 0x50
 8001354:	484d      	ldr	r0, [pc, #308]	; (800148c <DM_DisplayFormattedOutput+0x570>)
 8001356:	f00d f9bb 	bl	800e6d0 <ILI9341_Draw_Text>
			break;
 800135a:	bf00      	nop
	}

	ILI9341_Draw_Text("AUX:", 180, 170, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800135c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001360:	b29b      	uxth	r3, r3
 8001362:	2200      	movs	r2, #0
 8001364:	9201      	str	r2, [sp, #4]
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800136c:	22aa      	movs	r2, #170	; 0xaa
 800136e:	21b4      	movs	r1, #180	; 0xb4
 8001370:	4847      	ldr	r0, [pc, #284]	; (8001490 <DM_DisplayFormattedOutput+0x574>)
 8001372:	f00d f9ad 	bl	800e6d0 <ILI9341_Draw_Text>
	eOutput_mode Aux_output_func = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8001376:	2001      	movs	r0, #1
 8001378:	f004 fdd6 	bl	8005f28 <SM_GetOutputChannel>
 800137c:	4603      	mov	r3, r0
 800137e:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	switch(Aux_output_func)
 8001388:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800138c:	2b06      	cmp	r3, #6
 800138e:	d873      	bhi.n	8001478 <DM_DisplayFormattedOutput+0x55c>
 8001390:	a201      	add	r2, pc, #4	; (adr r2, 8001398 <DM_DisplayFormattedOutput+0x47c>)
 8001392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001396:	bf00      	nop
 8001398:	080013b5 	.word	0x080013b5
 800139c:	080013d1 	.word	0x080013d1
 80013a0:	080013ed 	.word	0x080013ed
 80013a4:	08001409 	.word	0x08001409
 80013a8:	08001425 	.word	0x08001425
 80013ac:	08001441 	.word	0x08001441
 80013b0:	0800145d 	.word	0x0800145d
	{
		case SINE_FUNC_MODE:

			ILI9341_Draw_Wave(245, 140, 3, Aux_OUTPUT_ICON, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 80013b4:	233c      	movs	r3, #60	; 0x3c
 80013b6:	9302      	str	r3, [sp, #8]
 80013b8:	4b36      	ldr	r3, [pc, #216]	; (8001494 <DM_DisplayFormattedOutput+0x578>)
 80013ba:	9301      	str	r3, [sp, #4]
 80013bc:	2364      	movs	r3, #100	; 0x64
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80013c4:	2203      	movs	r2, #3
 80013c6:	218c      	movs	r1, #140	; 0x8c
 80013c8:	20f5      	movs	r0, #245	; 0xf5
 80013ca:	f00c ffdd 	bl	800e388 <ILI9341_Draw_Wave>
			break;
 80013ce:	e053      	b.n	8001478 <DM_DisplayFormattedOutput+0x55c>
		case SQUARE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, squareicon_data_table_3600, SQUAREICON_DATA_SIZE);
 80013d0:	233c      	movs	r3, #60	; 0x3c
 80013d2:	9302      	str	r3, [sp, #8]
 80013d4:	4b30      	ldr	r3, [pc, #192]	; (8001498 <DM_DisplayFormattedOutput+0x57c>)
 80013d6:	9301      	str	r3, [sp, #4]
 80013d8:	23c8      	movs	r3, #200	; 0xc8
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80013e0:	2203      	movs	r2, #3
 80013e2:	21a0      	movs	r1, #160	; 0xa0
 80013e4:	20f5      	movs	r0, #245	; 0xf5
 80013e6:	f00c ffcf 	bl	800e388 <ILI9341_Draw_Wave>
			break;
 80013ea:	e045      	b.n	8001478 <DM_DisplayFormattedOutput+0x55c>
		case SAW_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, sawicon_data_table_3600, SAWICON_DATA_SIZE);
 80013ec:	233c      	movs	r3, #60	; 0x3c
 80013ee:	9302      	str	r3, [sp, #8]
 80013f0:	4b23      	ldr	r3, [pc, #140]	; (8001480 <DM_DisplayFormattedOutput+0x564>)
 80013f2:	9301      	str	r3, [sp, #4]
 80013f4:	23c8      	movs	r3, #200	; 0xc8
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80013fc:	2203      	movs	r2, #3
 80013fe:	21a0      	movs	r1, #160	; 0xa0
 8001400:	20f5      	movs	r0, #245	; 0xf5
 8001402:	f00c ffc1 	bl	800e388 <ILI9341_Draw_Wave>
			break;
 8001406:	e037      	b.n	8001478 <DM_DisplayFormattedOutput+0x55c>
		case REV_SAW_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, sawicon_rev_data_table_3600, SAWICON_REV_DATA_SIZE);
 8001408:	233c      	movs	r3, #60	; 0x3c
 800140a:	9302      	str	r3, [sp, #8]
 800140c:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <DM_DisplayFormattedOutput+0x568>)
 800140e:	9301      	str	r3, [sp, #4]
 8001410:	23c8      	movs	r3, #200	; 0xc8
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001418:	2203      	movs	r2, #3
 800141a:	21a0      	movs	r1, #160	; 0xa0
 800141c:	20f5      	movs	r0, #245	; 0xf5
 800141e:	f00c ffb3 	bl	800e388 <ILI9341_Draw_Wave>
			break;
 8001422:	e029      	b.n	8001478 <DM_DisplayFormattedOutput+0x55c>
		case TRIANGLE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001424:	233c      	movs	r3, #60	; 0x3c
 8001426:	9302      	str	r3, [sp, #8]
 8001428:	4b17      	ldr	r3, [pc, #92]	; (8001488 <DM_DisplayFormattedOutput+0x56c>)
 800142a:	9301      	str	r3, [sp, #4]
 800142c:	23c8      	movs	r3, #200	; 0xc8
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001434:	2203      	movs	r2, #3
 8001436:	21a0      	movs	r1, #160	; 0xa0
 8001438:	20f5      	movs	r0, #245	; 0xf5
 800143a:	f00c ffa5 	bl	800e388 <ILI9341_Draw_Wave>
			break;
 800143e:	e01b      	b.n	8001478 <DM_DisplayFormattedOutput+0x55c>
		case IMPULSE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001440:	233c      	movs	r3, #60	; 0x3c
 8001442:	9302      	str	r3, [sp, #8]
 8001444:	4b10      	ldr	r3, [pc, #64]	; (8001488 <DM_DisplayFormattedOutput+0x56c>)
 8001446:	9301      	str	r3, [sp, #4]
 8001448:	23c8      	movs	r3, #200	; 0xc8
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001450:	2203      	movs	r2, #3
 8001452:	21a0      	movs	r1, #160	; 0xa0
 8001454:	20f5      	movs	r0, #245	; 0xf5
 8001456:	f00c ff97 	bl	800e388 <ILI9341_Draw_Wave>
			break;
 800145a:	e00d      	b.n	8001478 <DM_DisplayFormattedOutput+0x55c>
		case PWM_FUNC_MODE:
			ILI9341_Draw_Text("PWM", 245, 170, Aux_OUTPUT_ICON, text_size, NORMAL_TEXT_BGCOLOUR);
 800145c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001460:	b29b      	uxth	r3, r3
 8001462:	2200      	movs	r2, #0
 8001464:	9201      	str	r2, [sp, #4]
 8001466:	9300      	str	r3, [sp, #0]
 8001468:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800146c:	22aa      	movs	r2, #170	; 0xaa
 800146e:	21f5      	movs	r1, #245	; 0xf5
 8001470:	4806      	ldr	r0, [pc, #24]	; (800148c <DM_DisplayFormattedOutput+0x570>)
 8001472:	f00d f92d 	bl	800e6d0 <ILI9341_Draw_Text>
			break;
 8001476:	bf00      	nop
	}



}
 8001478:	bf00      	nop
 800147a:	376c      	adds	r7, #108	; 0x6c
 800147c:	46bd      	mov	sp, r7
 800147e:	bd90      	pop	{r4, r7, pc}
 8001480:	20000c44 	.word	0x20000c44
 8001484:	20000d34 	.word	0x20000d34
 8001488:	20001004 	.word	0x20001004
 800148c:	08013694 	.word	0x08013694
 8001490:	08013698 	.word	0x08013698
 8001494:	20000e24 	.word	0x20000e24
 8001498:	20000f14 	.word	0x20000f14

0800149c <DM_RefreshScreen>:
 *	@param None
 *	@retval None
 *
 */
void DM_RefreshScreen()
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af04      	add	r7, sp, #16



	// pause display interrupts
	HAL_TIM_Base_Stop_IT(&htim15);
 80014a2:	4820      	ldr	r0, [pc, #128]	; (8001524 <DM_RefreshScreen+0x88>)
 80014a4:	f00a ff5e 	bl	800c364 <HAL_TIM_Base_Stop_IT>


	ILI9341_Fill_Screen(SCREEN_BGCOLOUR);
 80014a8:	2000      	movs	r0, #0
 80014aa:	f00d fb91 	bl	800ebd0 <ILI9341_Fill_Screen>
	GUI_DrawPolygon(Points, 3, RED);
	GUI_FillPolygon(Points2, 3, BLUE);
	GUI_DrawEllipse(250, 110, 20, 30, GREEN);
	GUI_FillEllipse(250, 110, 20, 30, WHITE);
*/
	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	0,
 80014ae:	2300      	movs	r3, #0
 80014b0:	9302      	str	r3, [sp, #8]
 80014b2:	2302      	movs	r3, #2
 80014b4:	9301      	str	r3, [sp, #4]
 80014b6:	f240 23fd 	movw	r3, #765	; 0x2fd
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	2328      	movs	r3, #40	; 0x28
 80014be:	2250      	movs	r2, #80	; 0x50
 80014c0:	21c8      	movs	r1, #200	; 0xc8
 80014c2:	2000      	movs	r0, #0
 80014c4:	f00c ffa1 	bl	800e40a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN1_FILL_COLOUR,
													BTN1_BORDER_WEIGHT,
													BTN1_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH,
 80014c8:	2300      	movs	r3, #0
 80014ca:	9302      	str	r3, [sp, #8]
 80014cc:	2302      	movs	r3, #2
 80014ce:	9301      	str	r3, [sp, #4]
 80014d0:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	2328      	movs	r3, #40	; 0x28
 80014d8:	2250      	movs	r2, #80	; 0x50
 80014da:	21c8      	movs	r1, #200	; 0xc8
 80014dc:	2050      	movs	r0, #80	; 0x50
 80014de:	f00c ff94 	bl	800e40a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN2_FILL_COLOUR,
													BTN2_BORDER_WEIGHT,
													BTN2_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*2,
 80014e2:	2300      	movs	r3, #0
 80014e4:	9302      	str	r3, [sp, #8]
 80014e6:	2302      	movs	r3, #2
 80014e8:	9301      	str	r3, [sp, #4]
 80014ea:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80014ee:	9300      	str	r3, [sp, #0]
 80014f0:	2328      	movs	r3, #40	; 0x28
 80014f2:	2250      	movs	r2, #80	; 0x50
 80014f4:	21c8      	movs	r1, #200	; 0xc8
 80014f6:	20a0      	movs	r0, #160	; 0xa0
 80014f8:	f00c ff87 	bl	800e40a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN3_FILL_COLOUR,
													BTN3_BORDER_WEIGHT,
													BTN3_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*3,
 80014fc:	2300      	movs	r3, #0
 80014fe:	9302      	str	r3, [sp, #8]
 8001500:	2302      	movs	r3, #2
 8001502:	9301      	str	r3, [sp, #4]
 8001504:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	2328      	movs	r3, #40	; 0x28
 800150c:	2250      	movs	r2, #80	; 0x50
 800150e:	21c8      	movs	r1, #200	; 0xc8
 8001510:	20f0      	movs	r0, #240	; 0xf0
 8001512:	f00c ff7a 	bl	800e40a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN4_FILL_COLOUR,
													BTN4_BORDER_WEIGHT,
													BTN4_BORDER_COLOUR);

	// resume diaplay interrupts
	HAL_TIM_Base_Start_IT(&htim15);
 8001516:	4803      	ldr	r0, [pc, #12]	; (8001524 <DM_RefreshScreen+0x88>)
 8001518:	f00a feee 	bl	800c2f8 <HAL_TIM_Base_Start_IT>


}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20002760 	.word	0x20002760

08001528 <DM_SetErrorDebugMsg>:
	ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
	*/
}

void DM_SetErrorDebugMsg(char* msg)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af02      	add	r7, sp, #8
 800152e:	6078      	str	r0, [r7, #4]
	snprintf(ErrorDebugMsg, sizeof(ErrorDebugMsg), "%s", msg);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a0a      	ldr	r2, [pc, #40]	; (800155c <DM_SetErrorDebugMsg+0x34>)
 8001534:	212d      	movs	r1, #45	; 0x2d
 8001536:	480a      	ldr	r0, [pc, #40]	; (8001560 <DM_SetErrorDebugMsg+0x38>)
 8001538:	f00e fc86 	bl	800fe48 <sniprintf>
	ILI9341_Draw_Text(ErrorDebugMsg, 10, 190, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 800153c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001540:	9301      	str	r3, [sp, #4]
 8001542:	2301      	movs	r3, #1
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	2300      	movs	r3, #0
 8001548:	22be      	movs	r2, #190	; 0xbe
 800154a:	210a      	movs	r1, #10
 800154c:	4804      	ldr	r0, [pc, #16]	; (8001560 <DM_SetErrorDebugMsg+0x38>)
 800154e:	f00d f8bf 	bl	800e6d0 <ILI9341_Draw_Text>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	08013724 	.word	0x08013724
 8001560:	20001e24 	.word	0x20001e24

08001564 <FreqMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMenu(eFreqMenu_Status pMenu)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	3b01      	subs	r3, #1
 8001572:	2b03      	cmp	r3, #3
 8001574:	d816      	bhi.n	80015a4 <FreqMenu_DrawMenu+0x40>
 8001576:	a201      	add	r2, pc, #4	; (adr r2, 800157c <FreqMenu_DrawMenu+0x18>)
 8001578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800157c:	0800158d 	.word	0x0800158d
 8001580:	08001593 	.word	0x08001593
 8001584:	08001599 	.word	0x08001599
 8001588:	0800159f 	.word	0x0800159f
	{
		case ENABLE_FREQ_MAIN_MENU:
			FreqMenu_DrawMainMenu();
 800158c:	f000 f810 	bl	80015b0 <FreqMenu_DrawMainMenu>
			break;
 8001590:	e009      	b.n	80015a6 <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_PRESET_MENU:
			FreqMenu_DrawPresetMenu();
 8001592:	f000 f849 	bl	8001628 <FreqMenu_DrawPresetMenu>
			break;
 8001596:	e006      	b.n	80015a6 <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_ADJUST_MENU:
			FreqMenu_DrawAdjustMenu();
 8001598:	f001 faf4 	bl	8002b84 <FreqMenu_DrawAdjustMenu>
			break;
 800159c:	e003      	b.n	80015a6 <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_SWEEP_MENU:
			FreqMenu_DrawSweepMenu();
 800159e:	f001 fb07 	bl	8002bb0 <FreqMenu_DrawSweepMenu>
			break;
 80015a2:	e000      	b.n	80015a6 <FreqMenu_DrawMenu+0x42>

		default:
			break;
 80015a4:	bf00      	nop

	}
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop

080015b0 <FreqMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMainMenu()
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af02      	add	r7, sp, #8
	// main
	ILI9341_Draw_Text("OUT->FREQ", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80015b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015ba:	9301      	str	r3, [sp, #4]
 80015bc:	2302      	movs	r3, #2
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	2300      	movs	r3, #0
 80015c2:	220a      	movs	r2, #10
 80015c4:	2105      	movs	r1, #5
 80015c6:	4814      	ldr	r0, [pc, #80]	; (8001618 <FreqMenu_DrawMainMenu+0x68>)
 80015c8:	f00d f882 	bl	800e6d0 <ILI9341_Draw_Text>
//	ILI9341_Draw_Text("Select an option below", 	30, 165, BLACK, 2, WHITE);

	DM_DisplayFormattedOutput();
 80015cc:	f7ff fca6 	bl	8000f1c <DM_DisplayFormattedOutput>

	// buttons
	ILI9341_Draw_Text("PRESET", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80015d0:	f240 23fd 	movw	r3, #765	; 0x2fd
 80015d4:	9301      	str	r3, [sp, #4]
 80015d6:	2302      	movs	r3, #2
 80015d8:	9300      	str	r3, [sp, #0]
 80015da:	2300      	movs	r3, #0
 80015dc:	22d2      	movs	r2, #210	; 0xd2
 80015de:	2105      	movs	r1, #5
 80015e0:	480e      	ldr	r0, [pc, #56]	; (800161c <FreqMenu_DrawMainMenu+0x6c>)
 80015e2:	f00d f875 	bl	800e6d0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("ADJUST", 86,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80015e6:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80015ea:	9301      	str	r3, [sp, #4]
 80015ec:	2302      	movs	r3, #2
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	2300      	movs	r3, #0
 80015f2:	22d2      	movs	r2, #210	; 0xd2
 80015f4:	2156      	movs	r1, #86	; 0x56
 80015f6:	480a      	ldr	r0, [pc, #40]	; (8001620 <FreqMenu_DrawMainMenu+0x70>)
 80015f8:	f00d f86a 	bl	800e6d0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SWEEP",  173, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80015fc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001600:	9301      	str	r3, [sp, #4]
 8001602:	2302      	movs	r3, #2
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	2300      	movs	r3, #0
 8001608:	22d2      	movs	r2, #210	; 0xd2
 800160a:	21ad      	movs	r1, #173	; 0xad
 800160c:	4805      	ldr	r0, [pc, #20]	; (8001624 <FreqMenu_DrawMainMenu+0x74>)
 800160e:	f00d f85f 	bl	800e6d0 <ILI9341_Draw_Text>
	//ILI9341_Draw_Text("    ", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	08013728 	.word	0x08013728
 800161c:	08013734 	.word	0x08013734
 8001620:	0801373c 	.word	0x0801373c
 8001624:	08013744 	.word	0x08013744

08001628 <FreqMenu_DrawPresetMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawPresetMenu()
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->FREQ->PRESET", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 800162e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001632:	9301      	str	r3, [sp, #4]
 8001634:	2302      	movs	r3, #2
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	2300      	movs	r3, #0
 800163a:	220a      	movs	r2, #10
 800163c:	2105      	movs	r1, #5
 800163e:	4886      	ldr	r0, [pc, #536]	; (8001858 <FreqMenu_DrawPresetMenu+0x230>)
 8001640:	f00d f846 	bl	800e6d0 <ILI9341_Draw_Text>
	uint8_t menu_pos_y1 = 40;
 8001644:	2328      	movs	r3, #40	; 0x28
 8001646:	73fb      	strb	r3, [r7, #15]
	uint8_t menu_pos_y2 = 60;
 8001648:	233c      	movs	r3, #60	; 0x3c
 800164a:	73bb      	strb	r3, [r7, #14]
	uint8_t menu_pos_y3 = 80;
 800164c:	2350      	movs	r3, #80	; 0x50
 800164e:	737b      	strb	r3, [r7, #13]
	uint8_t menu_pos_y4 = 100;
 8001650:	2364      	movs	r3, #100	; 0x64
 8001652:	733b      	strb	r3, [r7, #12]
	uint8_t menu_pos_y5 = 120;
 8001654:	2378      	movs	r3, #120	; 0x78
 8001656:	72fb      	strb	r3, [r7, #11]
	uint8_t menu_pos_y6 = 140;
 8001658:	238c      	movs	r3, #140	; 0x8c
 800165a:	72bb      	strb	r3, [r7, #10]
	uint8_t menu_pos_y7 = 160;
 800165c:	23a0      	movs	r3, #160	; 0xa0
 800165e:	727b      	strb	r3, [r7, #9]
	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8001660:	f003 fe9e 	bl	80053a0 <FreqO_GetFPresetObject>
 8001664:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b00      	cmp	r3, #0
 800166a:	f001 825d 	beq.w	8002b28 <FreqMenu_DrawPresetMenu+0x1500>
	{
		switch(pFreqPresetTmp->hertz)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001676:	4293      	cmp	r3, r2
 8001678:	f000 849a 	beq.w	8001fb0 <FreqMenu_DrawPresetMenu+0x988>
 800167c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001680:	4293      	cmp	r3, r2
 8001682:	d817      	bhi.n	80016b4 <FreqMenu_DrawPresetMenu+0x8c>
 8001684:	2b32      	cmp	r3, #50	; 0x32
 8001686:	f000 81b3 	beq.w	80019f0 <FreqMenu_DrawPresetMenu+0x3c8>
 800168a:	2b32      	cmp	r3, #50	; 0x32
 800168c:	d806      	bhi.n	800169c <FreqMenu_DrawPresetMenu+0x74>
 800168e:	2b01      	cmp	r3, #1
 8001690:	d038      	beq.n	8001704 <FreqMenu_DrawPresetMenu+0xdc>
 8001692:	2b0a      	cmp	r3, #10
 8001694:	f000 8102 	beq.w	800189c <FreqMenu_DrawPresetMenu+0x274>
	else
	{
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
	}

}
 8001698:	f001 ba52 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 800169c:	2bfa      	cmp	r3, #250	; 0xfa
 800169e:	f000 8317 	beq.w	8001cd0 <FreqMenu_DrawPresetMenu+0x6a8>
 80016a2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016a6:	f000 83d9 	beq.w	8001e5c <FreqMenu_DrawPresetMenu+0x834>
 80016aa:	2b64      	cmp	r3, #100	; 0x64
 80016ac:	f000 8266 	beq.w	8001b7c <FreqMenu_DrawPresetMenu+0x554>
}
 80016b0:	f001 ba46 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 80016b4:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80016b8:	4293      	cmp	r3, r2
 80016ba:	f000 8758 	beq.w	800256e <FreqMenu_DrawPresetMenu+0xf46>
 80016be:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d80f      	bhi.n	80016e6 <FreqMenu_DrawPresetMenu+0xbe>
 80016c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ca:	4293      	cmp	r3, r2
 80016cc:	f000 85e0 	beq.w	8002290 <FreqMenu_DrawPresetMenu+0xc68>
 80016d0:	f242 7210 	movw	r2, #10000	; 0x2710
 80016d4:	4293      	cmp	r3, r2
 80016d6:	f000 86a1 	beq.w	800241c <FreqMenu_DrawPresetMenu+0xdf4>
 80016da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016de:	f000 852d 	beq.w	800213c <FreqMenu_DrawPresetMenu+0xb14>
}
 80016e2:	f001 ba2d 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 80016e6:	4a5d      	ldr	r2, [pc, #372]	; (800185c <FreqMenu_DrawPresetMenu+0x234>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	f001 80ae 	beq.w	800284a <FreqMenu_DrawPresetMenu+0x1222>
 80016ee:	4a5c      	ldr	r2, [pc, #368]	; (8001860 <FreqMenu_DrawPresetMenu+0x238>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	f001 816f 	beq.w	80029d4 <FreqMenu_DrawPresetMenu+0x13ac>
 80016f6:	f24c 3250 	movw	r2, #50000	; 0xc350
 80016fa:	4293      	cmp	r3, r2
 80016fc:	f000 87fc 	beq.w	80026f8 <FreqMenu_DrawPresetMenu+0x10d0>
}
 8001700:	f001 ba1e 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	b29a      	uxth	r2, r3
 8001708:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800170c:	9301      	str	r3, [sp, #4]
 800170e:	2302      	movs	r3, #2
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	2300      	movs	r3, #0
 8001714:	2105      	movs	r1, #5
 8001716:	4853      	ldr	r0, [pc, #332]	; (8001864 <FreqMenu_DrawPresetMenu+0x23c>)
 8001718:	f00c ffda 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800171c:	7bbb      	ldrb	r3, [r7, #14]
 800171e:	b29a      	uxth	r2, r3
 8001720:	2300      	movs	r3, #0
 8001722:	9301      	str	r3, [sp, #4]
 8001724:	2302      	movs	r3, #2
 8001726:	9300      	str	r3, [sp, #0]
 8001728:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800172c:	2105      	movs	r1, #5
 800172e:	484e      	ldr	r0, [pc, #312]	; (8001868 <FreqMenu_DrawPresetMenu+0x240>)
 8001730:	f00c ffce 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001734:	7b7b      	ldrb	r3, [r7, #13]
 8001736:	b29a      	uxth	r2, r3
 8001738:	2300      	movs	r3, #0
 800173a:	9301      	str	r3, [sp, #4]
 800173c:	2302      	movs	r3, #2
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001744:	2105      	movs	r1, #5
 8001746:	4849      	ldr	r0, [pc, #292]	; (800186c <FreqMenu_DrawPresetMenu+0x244>)
 8001748:	f00c ffc2 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800174c:	7b3b      	ldrb	r3, [r7, #12]
 800174e:	b29a      	uxth	r2, r3
 8001750:	2300      	movs	r3, #0
 8001752:	9301      	str	r3, [sp, #4]
 8001754:	2302      	movs	r3, #2
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800175c:	2105      	movs	r1, #5
 800175e:	4844      	ldr	r0, [pc, #272]	; (8001870 <FreqMenu_DrawPresetMenu+0x248>)
 8001760:	f00c ffb6 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001764:	7afb      	ldrb	r3, [r7, #11]
 8001766:	b29a      	uxth	r2, r3
 8001768:	2300      	movs	r3, #0
 800176a:	9301      	str	r3, [sp, #4]
 800176c:	2302      	movs	r3, #2
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001774:	2105      	movs	r1, #5
 8001776:	483f      	ldr	r0, [pc, #252]	; (8001874 <FreqMenu_DrawPresetMenu+0x24c>)
 8001778:	f00c ffaa 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800177c:	7abb      	ldrb	r3, [r7, #10]
 800177e:	b29a      	uxth	r2, r3
 8001780:	2300      	movs	r3, #0
 8001782:	9301      	str	r3, [sp, #4]
 8001784:	2302      	movs	r3, #2
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800178c:	2105      	movs	r1, #5
 800178e:	483a      	ldr	r0, [pc, #232]	; (8001878 <FreqMenu_DrawPresetMenu+0x250>)
 8001790:	f00c ff9e 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001794:	7a7b      	ldrb	r3, [r7, #9]
 8001796:	b29a      	uxth	r2, r3
 8001798:	2300      	movs	r3, #0
 800179a:	9301      	str	r3, [sp, #4]
 800179c:	2302      	movs	r3, #2
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017a4:	2105      	movs	r1, #5
 80017a6:	4835      	ldr	r0, [pc, #212]	; (800187c <FreqMenu_DrawPresetMenu+0x254>)
 80017a8:	f00c ff92 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	2300      	movs	r3, #0
 80017b2:	9301      	str	r3, [sp, #4]
 80017b4:	2302      	movs	r3, #2
 80017b6:	9300      	str	r3, [sp, #0]
 80017b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017bc:	2178      	movs	r1, #120	; 0x78
 80017be:	4830      	ldr	r0, [pc, #192]	; (8001880 <FreqMenu_DrawPresetMenu+0x258>)
 80017c0:	f00c ff86 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017c4:	7bbb      	ldrb	r3, [r7, #14]
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	2300      	movs	r3, #0
 80017ca:	9301      	str	r3, [sp, #4]
 80017cc:	2302      	movs	r3, #2
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017d4:	2178      	movs	r1, #120	; 0x78
 80017d6:	482b      	ldr	r0, [pc, #172]	; (8001884 <FreqMenu_DrawPresetMenu+0x25c>)
 80017d8:	f00c ff7a 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017dc:	7b7b      	ldrb	r3, [r7, #13]
 80017de:	b29a      	uxth	r2, r3
 80017e0:	2300      	movs	r3, #0
 80017e2:	9301      	str	r3, [sp, #4]
 80017e4:	2302      	movs	r3, #2
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017ec:	2178      	movs	r1, #120	; 0x78
 80017ee:	4826      	ldr	r0, [pc, #152]	; (8001888 <FreqMenu_DrawPresetMenu+0x260>)
 80017f0:	f00c ff6e 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017f4:	7b3b      	ldrb	r3, [r7, #12]
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	2300      	movs	r3, #0
 80017fa:	9301      	str	r3, [sp, #4]
 80017fc:	2302      	movs	r3, #2
 80017fe:	9300      	str	r3, [sp, #0]
 8001800:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001804:	2178      	movs	r1, #120	; 0x78
 8001806:	4821      	ldr	r0, [pc, #132]	; (800188c <FreqMenu_DrawPresetMenu+0x264>)
 8001808:	f00c ff62 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800180c:	7afb      	ldrb	r3, [r7, #11]
 800180e:	b29a      	uxth	r2, r3
 8001810:	2300      	movs	r3, #0
 8001812:	9301      	str	r3, [sp, #4]
 8001814:	2302      	movs	r3, #2
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800181c:	2178      	movs	r1, #120	; 0x78
 800181e:	481c      	ldr	r0, [pc, #112]	; (8001890 <FreqMenu_DrawPresetMenu+0x268>)
 8001820:	f00c ff56 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001824:	7abb      	ldrb	r3, [r7, #10]
 8001826:	b29a      	uxth	r2, r3
 8001828:	2300      	movs	r3, #0
 800182a:	9301      	str	r3, [sp, #4]
 800182c:	2302      	movs	r3, #2
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001834:	2178      	movs	r1, #120	; 0x78
 8001836:	4817      	ldr	r0, [pc, #92]	; (8001894 <FreqMenu_DrawPresetMenu+0x26c>)
 8001838:	f00c ff4a 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800183c:	7a7b      	ldrb	r3, [r7, #9]
 800183e:	b29a      	uxth	r2, r3
 8001840:	2300      	movs	r3, #0
 8001842:	9301      	str	r3, [sp, #4]
 8001844:	2302      	movs	r3, #2
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800184c:	2178      	movs	r1, #120	; 0x78
 800184e:	4812      	ldr	r0, [pc, #72]	; (8001898 <FreqMenu_DrawPresetMenu+0x270>)
 8001850:	f00c ff3e 	bl	800e6d0 <ILI9341_Draw_Text>
				break;
 8001854:	f001 b974 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
 8001858:	0801374c 	.word	0x0801374c
 800185c:	000124f8 	.word	0x000124f8
 8001860:	000186a0 	.word	0x000186a0
 8001864:	08013760 	.word	0x08013760
 8001868:	08013768 	.word	0x08013768
 800186c:	08013770 	.word	0x08013770
 8001870:	08013778 	.word	0x08013778
 8001874:	08013780 	.word	0x08013780
 8001878:	08013788 	.word	0x08013788
 800187c:	08013790 	.word	0x08013790
 8001880:	08013798 	.word	0x08013798
 8001884:	080137a0 	.word	0x080137a0
 8001888:	080137a8 	.word	0x080137a8
 800188c:	080137b0 	.word	0x080137b0
 8001890:	080137b8 	.word	0x080137b8
 8001894:	080137c0 	.word	0x080137c0
 8001898:	080137c8 	.word	0x080137c8
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800189c:	7bfb      	ldrb	r3, [r7, #15]
 800189e:	b29a      	uxth	r2, r3
 80018a0:	2300      	movs	r3, #0
 80018a2:	9301      	str	r3, [sp, #4]
 80018a4:	2302      	movs	r3, #2
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018ac:	2105      	movs	r1, #5
 80018ae:	48a5      	ldr	r0, [pc, #660]	; (8001b44 <FreqMenu_DrawPresetMenu+0x51c>)
 80018b0:	f00c ff0e 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80018b4:	7bbb      	ldrb	r3, [r7, #14]
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80018bc:	9301      	str	r3, [sp, #4]
 80018be:	2302      	movs	r3, #2
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	2300      	movs	r3, #0
 80018c4:	2105      	movs	r1, #5
 80018c6:	48a0      	ldr	r0, [pc, #640]	; (8001b48 <FreqMenu_DrawPresetMenu+0x520>)
 80018c8:	f00c ff02 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018cc:	7b7b      	ldrb	r3, [r7, #13]
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	2300      	movs	r3, #0
 80018d2:	9301      	str	r3, [sp, #4]
 80018d4:	2302      	movs	r3, #2
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018dc:	2105      	movs	r1, #5
 80018de:	489b      	ldr	r0, [pc, #620]	; (8001b4c <FreqMenu_DrawPresetMenu+0x524>)
 80018e0:	f00c fef6 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018e4:	7b3b      	ldrb	r3, [r7, #12]
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	2300      	movs	r3, #0
 80018ea:	9301      	str	r3, [sp, #4]
 80018ec:	2302      	movs	r3, #2
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018f4:	2105      	movs	r1, #5
 80018f6:	4896      	ldr	r0, [pc, #600]	; (8001b50 <FreqMenu_DrawPresetMenu+0x528>)
 80018f8:	f00c feea 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018fc:	7afb      	ldrb	r3, [r7, #11]
 80018fe:	b29a      	uxth	r2, r3
 8001900:	2300      	movs	r3, #0
 8001902:	9301      	str	r3, [sp, #4]
 8001904:	2302      	movs	r3, #2
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800190c:	2105      	movs	r1, #5
 800190e:	4891      	ldr	r0, [pc, #580]	; (8001b54 <FreqMenu_DrawPresetMenu+0x52c>)
 8001910:	f00c fede 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001914:	7abb      	ldrb	r3, [r7, #10]
 8001916:	b29a      	uxth	r2, r3
 8001918:	2300      	movs	r3, #0
 800191a:	9301      	str	r3, [sp, #4]
 800191c:	2302      	movs	r3, #2
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001924:	2105      	movs	r1, #5
 8001926:	488c      	ldr	r0, [pc, #560]	; (8001b58 <FreqMenu_DrawPresetMenu+0x530>)
 8001928:	f00c fed2 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800192c:	7a7b      	ldrb	r3, [r7, #9]
 800192e:	b29a      	uxth	r2, r3
 8001930:	2300      	movs	r3, #0
 8001932:	9301      	str	r3, [sp, #4]
 8001934:	2302      	movs	r3, #2
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800193c:	2105      	movs	r1, #5
 800193e:	4887      	ldr	r0, [pc, #540]	; (8001b5c <FreqMenu_DrawPresetMenu+0x534>)
 8001940:	f00c fec6 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001944:	7bfb      	ldrb	r3, [r7, #15]
 8001946:	b29a      	uxth	r2, r3
 8001948:	2300      	movs	r3, #0
 800194a:	9301      	str	r3, [sp, #4]
 800194c:	2302      	movs	r3, #2
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001954:	2178      	movs	r1, #120	; 0x78
 8001956:	4882      	ldr	r0, [pc, #520]	; (8001b60 <FreqMenu_DrawPresetMenu+0x538>)
 8001958:	f00c feba 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800195c:	7bbb      	ldrb	r3, [r7, #14]
 800195e:	b29a      	uxth	r2, r3
 8001960:	2300      	movs	r3, #0
 8001962:	9301      	str	r3, [sp, #4]
 8001964:	2302      	movs	r3, #2
 8001966:	9300      	str	r3, [sp, #0]
 8001968:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800196c:	2178      	movs	r1, #120	; 0x78
 800196e:	487d      	ldr	r0, [pc, #500]	; (8001b64 <FreqMenu_DrawPresetMenu+0x53c>)
 8001970:	f00c feae 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001974:	7b7b      	ldrb	r3, [r7, #13]
 8001976:	b29a      	uxth	r2, r3
 8001978:	2300      	movs	r3, #0
 800197a:	9301      	str	r3, [sp, #4]
 800197c:	2302      	movs	r3, #2
 800197e:	9300      	str	r3, [sp, #0]
 8001980:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001984:	2178      	movs	r1, #120	; 0x78
 8001986:	4878      	ldr	r0, [pc, #480]	; (8001b68 <FreqMenu_DrawPresetMenu+0x540>)
 8001988:	f00c fea2 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800198c:	7b3b      	ldrb	r3, [r7, #12]
 800198e:	b29a      	uxth	r2, r3
 8001990:	2300      	movs	r3, #0
 8001992:	9301      	str	r3, [sp, #4]
 8001994:	2302      	movs	r3, #2
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800199c:	2178      	movs	r1, #120	; 0x78
 800199e:	4873      	ldr	r0, [pc, #460]	; (8001b6c <FreqMenu_DrawPresetMenu+0x544>)
 80019a0:	f00c fe96 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019a4:	7afb      	ldrb	r3, [r7, #11]
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	2300      	movs	r3, #0
 80019aa:	9301      	str	r3, [sp, #4]
 80019ac:	2302      	movs	r3, #2
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019b4:	2178      	movs	r1, #120	; 0x78
 80019b6:	486e      	ldr	r0, [pc, #440]	; (8001b70 <FreqMenu_DrawPresetMenu+0x548>)
 80019b8:	f00c fe8a 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019bc:	7abb      	ldrb	r3, [r7, #10]
 80019be:	b29a      	uxth	r2, r3
 80019c0:	2300      	movs	r3, #0
 80019c2:	9301      	str	r3, [sp, #4]
 80019c4:	2302      	movs	r3, #2
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019cc:	2178      	movs	r1, #120	; 0x78
 80019ce:	4869      	ldr	r0, [pc, #420]	; (8001b74 <FreqMenu_DrawPresetMenu+0x54c>)
 80019d0:	f00c fe7e 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019d4:	7a7b      	ldrb	r3, [r7, #9]
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	2300      	movs	r3, #0
 80019da:	9301      	str	r3, [sp, #4]
 80019dc:	2302      	movs	r3, #2
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019e4:	2178      	movs	r1, #120	; 0x78
 80019e6:	4864      	ldr	r0, [pc, #400]	; (8001b78 <FreqMenu_DrawPresetMenu+0x550>)
 80019e8:	f00c fe72 	bl	800e6d0 <ILI9341_Draw_Text>
				break;
 80019ec:	f001 b8a8 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	2300      	movs	r3, #0
 80019f6:	9301      	str	r3, [sp, #4]
 80019f8:	2302      	movs	r3, #2
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a00:	2105      	movs	r1, #5
 8001a02:	4850      	ldr	r0, [pc, #320]	; (8001b44 <FreqMenu_DrawPresetMenu+0x51c>)
 8001a04:	f00c fe64 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a08:	7bbb      	ldrb	r3, [r7, #14]
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	9301      	str	r3, [sp, #4]
 8001a10:	2302      	movs	r3, #2
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a18:	2105      	movs	r1, #5
 8001a1a:	484b      	ldr	r0, [pc, #300]	; (8001b48 <FreqMenu_DrawPresetMenu+0x520>)
 8001a1c:	f00c fe58 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001a20:	7b7b      	ldrb	r3, [r7, #13]
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001a28:	9301      	str	r3, [sp, #4]
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	2300      	movs	r3, #0
 8001a30:	2105      	movs	r1, #5
 8001a32:	4846      	ldr	r0, [pc, #280]	; (8001b4c <FreqMenu_DrawPresetMenu+0x524>)
 8001a34:	f00c fe4c 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a38:	7b3b      	ldrb	r3, [r7, #12]
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	9301      	str	r3, [sp, #4]
 8001a40:	2302      	movs	r3, #2
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a48:	2105      	movs	r1, #5
 8001a4a:	4841      	ldr	r0, [pc, #260]	; (8001b50 <FreqMenu_DrawPresetMenu+0x528>)
 8001a4c:	f00c fe40 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a50:	7afb      	ldrb	r3, [r7, #11]
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	2300      	movs	r3, #0
 8001a56:	9301      	str	r3, [sp, #4]
 8001a58:	2302      	movs	r3, #2
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a60:	2105      	movs	r1, #5
 8001a62:	483c      	ldr	r0, [pc, #240]	; (8001b54 <FreqMenu_DrawPresetMenu+0x52c>)
 8001a64:	f00c fe34 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a68:	7abb      	ldrb	r3, [r7, #10]
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	9301      	str	r3, [sp, #4]
 8001a70:	2302      	movs	r3, #2
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a78:	2105      	movs	r1, #5
 8001a7a:	4837      	ldr	r0, [pc, #220]	; (8001b58 <FreqMenu_DrawPresetMenu+0x530>)
 8001a7c:	f00c fe28 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a80:	7a7b      	ldrb	r3, [r7, #9]
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	2300      	movs	r3, #0
 8001a86:	9301      	str	r3, [sp, #4]
 8001a88:	2302      	movs	r3, #2
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a90:	2105      	movs	r1, #5
 8001a92:	4832      	ldr	r0, [pc, #200]	; (8001b5c <FreqMenu_DrawPresetMenu+0x534>)
 8001a94:	f00c fe1c 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	9301      	str	r3, [sp, #4]
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001aa8:	2178      	movs	r1, #120	; 0x78
 8001aaa:	482d      	ldr	r0, [pc, #180]	; (8001b60 <FreqMenu_DrawPresetMenu+0x538>)
 8001aac:	f00c fe10 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ab0:	7bbb      	ldrb	r3, [r7, #14]
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	9301      	str	r3, [sp, #4]
 8001ab8:	2302      	movs	r3, #2
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ac0:	2178      	movs	r1, #120	; 0x78
 8001ac2:	4828      	ldr	r0, [pc, #160]	; (8001b64 <FreqMenu_DrawPresetMenu+0x53c>)
 8001ac4:	f00c fe04 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ac8:	7b7b      	ldrb	r3, [r7, #13]
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	2300      	movs	r3, #0
 8001ace:	9301      	str	r3, [sp, #4]
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ad8:	2178      	movs	r1, #120	; 0x78
 8001ada:	4823      	ldr	r0, [pc, #140]	; (8001b68 <FreqMenu_DrawPresetMenu+0x540>)
 8001adc:	f00c fdf8 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ae0:	7b3b      	ldrb	r3, [r7, #12]
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	9301      	str	r3, [sp, #4]
 8001ae8:	2302      	movs	r3, #2
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001af0:	2178      	movs	r1, #120	; 0x78
 8001af2:	481e      	ldr	r0, [pc, #120]	; (8001b6c <FreqMenu_DrawPresetMenu+0x544>)
 8001af4:	f00c fdec 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001af8:	7afb      	ldrb	r3, [r7, #11]
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	2300      	movs	r3, #0
 8001afe:	9301      	str	r3, [sp, #4]
 8001b00:	2302      	movs	r3, #2
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b08:	2178      	movs	r1, #120	; 0x78
 8001b0a:	4819      	ldr	r0, [pc, #100]	; (8001b70 <FreqMenu_DrawPresetMenu+0x548>)
 8001b0c:	f00c fde0 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b10:	7abb      	ldrb	r3, [r7, #10]
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	2300      	movs	r3, #0
 8001b16:	9301      	str	r3, [sp, #4]
 8001b18:	2302      	movs	r3, #2
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b20:	2178      	movs	r1, #120	; 0x78
 8001b22:	4814      	ldr	r0, [pc, #80]	; (8001b74 <FreqMenu_DrawPresetMenu+0x54c>)
 8001b24:	f00c fdd4 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b28:	7a7b      	ldrb	r3, [r7, #9]
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	9301      	str	r3, [sp, #4]
 8001b30:	2302      	movs	r3, #2
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b38:	2178      	movs	r1, #120	; 0x78
 8001b3a:	480f      	ldr	r0, [pc, #60]	; (8001b78 <FreqMenu_DrawPresetMenu+0x550>)
 8001b3c:	f00c fdc8 	bl	800e6d0 <ILI9341_Draw_Text>
				break;
 8001b40:	f000 bffe 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
 8001b44:	08013760 	.word	0x08013760
 8001b48:	08013768 	.word	0x08013768
 8001b4c:	08013770 	.word	0x08013770
 8001b50:	08013778 	.word	0x08013778
 8001b54:	08013780 	.word	0x08013780
 8001b58:	08013788 	.word	0x08013788
 8001b5c:	08013790 	.word	0x08013790
 8001b60:	08013798 	.word	0x08013798
 8001b64:	080137a0 	.word	0x080137a0
 8001b68:	080137a8 	.word	0x080137a8
 8001b6c:	080137b0 	.word	0x080137b0
 8001b70:	080137b8 	.word	0x080137b8
 8001b74:	080137c0 	.word	0x080137c0
 8001b78:	080137c8 	.word	0x080137c8
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	2300      	movs	r3, #0
 8001b82:	9301      	str	r3, [sp, #4]
 8001b84:	2302      	movs	r3, #2
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b8c:	2105      	movs	r1, #5
 8001b8e:	48a5      	ldr	r0, [pc, #660]	; (8001e24 <FreqMenu_DrawPresetMenu+0x7fc>)
 8001b90:	f00c fd9e 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b94:	7bbb      	ldrb	r3, [r7, #14]
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	2300      	movs	r3, #0
 8001b9a:	9301      	str	r3, [sp, #4]
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ba4:	2105      	movs	r1, #5
 8001ba6:	48a0      	ldr	r0, [pc, #640]	; (8001e28 <FreqMenu_DrawPresetMenu+0x800>)
 8001ba8:	f00c fd92 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bac:	7b7b      	ldrb	r3, [r7, #13]
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	9301      	str	r3, [sp, #4]
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bbc:	2105      	movs	r1, #5
 8001bbe:	489b      	ldr	r0, [pc, #620]	; (8001e2c <FreqMenu_DrawPresetMenu+0x804>)
 8001bc0:	f00c fd86 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001bc4:	7b3b      	ldrb	r3, [r7, #12]
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001bcc:	9301      	str	r3, [sp, #4]
 8001bce:	2302      	movs	r3, #2
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	2105      	movs	r1, #5
 8001bd6:	4896      	ldr	r0, [pc, #600]	; (8001e30 <FreqMenu_DrawPresetMenu+0x808>)
 8001bd8:	f00c fd7a 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bdc:	7afb      	ldrb	r3, [r7, #11]
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	2300      	movs	r3, #0
 8001be2:	9301      	str	r3, [sp, #4]
 8001be4:	2302      	movs	r3, #2
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bec:	2105      	movs	r1, #5
 8001bee:	4891      	ldr	r0, [pc, #580]	; (8001e34 <FreqMenu_DrawPresetMenu+0x80c>)
 8001bf0:	f00c fd6e 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bf4:	7abb      	ldrb	r3, [r7, #10]
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	9301      	str	r3, [sp, #4]
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c04:	2105      	movs	r1, #5
 8001c06:	488c      	ldr	r0, [pc, #560]	; (8001e38 <FreqMenu_DrawPresetMenu+0x810>)
 8001c08:	f00c fd62 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c0c:	7a7b      	ldrb	r3, [r7, #9]
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	2300      	movs	r3, #0
 8001c12:	9301      	str	r3, [sp, #4]
 8001c14:	2302      	movs	r3, #2
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c1c:	2105      	movs	r1, #5
 8001c1e:	4887      	ldr	r0, [pc, #540]	; (8001e3c <FreqMenu_DrawPresetMenu+0x814>)
 8001c20:	f00c fd56 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	2300      	movs	r3, #0
 8001c2a:	9301      	str	r3, [sp, #4]
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c34:	2178      	movs	r1, #120	; 0x78
 8001c36:	4882      	ldr	r0, [pc, #520]	; (8001e40 <FreqMenu_DrawPresetMenu+0x818>)
 8001c38:	f00c fd4a 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c3c:	7bbb      	ldrb	r3, [r7, #14]
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	2300      	movs	r3, #0
 8001c42:	9301      	str	r3, [sp, #4]
 8001c44:	2302      	movs	r3, #2
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c4c:	2178      	movs	r1, #120	; 0x78
 8001c4e:	487d      	ldr	r0, [pc, #500]	; (8001e44 <FreqMenu_DrawPresetMenu+0x81c>)
 8001c50:	f00c fd3e 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c54:	7b7b      	ldrb	r3, [r7, #13]
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	2300      	movs	r3, #0
 8001c5a:	9301      	str	r3, [sp, #4]
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c64:	2178      	movs	r1, #120	; 0x78
 8001c66:	4878      	ldr	r0, [pc, #480]	; (8001e48 <FreqMenu_DrawPresetMenu+0x820>)
 8001c68:	f00c fd32 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c6c:	7b3b      	ldrb	r3, [r7, #12]
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	2300      	movs	r3, #0
 8001c72:	9301      	str	r3, [sp, #4]
 8001c74:	2302      	movs	r3, #2
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c7c:	2178      	movs	r1, #120	; 0x78
 8001c7e:	4873      	ldr	r0, [pc, #460]	; (8001e4c <FreqMenu_DrawPresetMenu+0x824>)
 8001c80:	f00c fd26 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c84:	7afb      	ldrb	r3, [r7, #11]
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	2300      	movs	r3, #0
 8001c8a:	9301      	str	r3, [sp, #4]
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c94:	2178      	movs	r1, #120	; 0x78
 8001c96:	486e      	ldr	r0, [pc, #440]	; (8001e50 <FreqMenu_DrawPresetMenu+0x828>)
 8001c98:	f00c fd1a 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c9c:	7abb      	ldrb	r3, [r7, #10]
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	9301      	str	r3, [sp, #4]
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cac:	2178      	movs	r1, #120	; 0x78
 8001cae:	4869      	ldr	r0, [pc, #420]	; (8001e54 <FreqMenu_DrawPresetMenu+0x82c>)
 8001cb0:	f00c fd0e 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cb4:	7a7b      	ldrb	r3, [r7, #9]
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	2300      	movs	r3, #0
 8001cba:	9301      	str	r3, [sp, #4]
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cc4:	2178      	movs	r1, #120	; 0x78
 8001cc6:	4864      	ldr	r0, [pc, #400]	; (8001e58 <FreqMenu_DrawPresetMenu+0x830>)
 8001cc8:	f00c fd02 	bl	800e6d0 <ILI9341_Draw_Text>
				break;
 8001ccc:	f000 bf38 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cd0:	7bfb      	ldrb	r3, [r7, #15]
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	9301      	str	r3, [sp, #4]
 8001cd8:	2302      	movs	r3, #2
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ce0:	2105      	movs	r1, #5
 8001ce2:	4850      	ldr	r0, [pc, #320]	; (8001e24 <FreqMenu_DrawPresetMenu+0x7fc>)
 8001ce4:	f00c fcf4 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ce8:	7bbb      	ldrb	r3, [r7, #14]
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	2300      	movs	r3, #0
 8001cee:	9301      	str	r3, [sp, #4]
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cf8:	2105      	movs	r1, #5
 8001cfa:	484b      	ldr	r0, [pc, #300]	; (8001e28 <FreqMenu_DrawPresetMenu+0x800>)
 8001cfc:	f00c fce8 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d00:	7b7b      	ldrb	r3, [r7, #13]
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	2300      	movs	r3, #0
 8001d06:	9301      	str	r3, [sp, #4]
 8001d08:	2302      	movs	r3, #2
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d10:	2105      	movs	r1, #5
 8001d12:	4846      	ldr	r0, [pc, #280]	; (8001e2c <FreqMenu_DrawPresetMenu+0x804>)
 8001d14:	f00c fcdc 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d18:	7b3b      	ldrb	r3, [r7, #12]
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	9301      	str	r3, [sp, #4]
 8001d20:	2302      	movs	r3, #2
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d28:	2105      	movs	r1, #5
 8001d2a:	4841      	ldr	r0, [pc, #260]	; (8001e30 <FreqMenu_DrawPresetMenu+0x808>)
 8001d2c:	f00c fcd0 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001d30:	7afb      	ldrb	r3, [r7, #11]
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001d38:	9301      	str	r3, [sp, #4]
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	2300      	movs	r3, #0
 8001d40:	2105      	movs	r1, #5
 8001d42:	483c      	ldr	r0, [pc, #240]	; (8001e34 <FreqMenu_DrawPresetMenu+0x80c>)
 8001d44:	f00c fcc4 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d48:	7abb      	ldrb	r3, [r7, #10]
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	9301      	str	r3, [sp, #4]
 8001d50:	2302      	movs	r3, #2
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d58:	2105      	movs	r1, #5
 8001d5a:	4837      	ldr	r0, [pc, #220]	; (8001e38 <FreqMenu_DrawPresetMenu+0x810>)
 8001d5c:	f00c fcb8 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d60:	7a7b      	ldrb	r3, [r7, #9]
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	2300      	movs	r3, #0
 8001d66:	9301      	str	r3, [sp, #4]
 8001d68:	2302      	movs	r3, #2
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d70:	2105      	movs	r1, #5
 8001d72:	4832      	ldr	r0, [pc, #200]	; (8001e3c <FreqMenu_DrawPresetMenu+0x814>)
 8001d74:	f00c fcac 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	9301      	str	r3, [sp, #4]
 8001d80:	2302      	movs	r3, #2
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d88:	2178      	movs	r1, #120	; 0x78
 8001d8a:	482d      	ldr	r0, [pc, #180]	; (8001e40 <FreqMenu_DrawPresetMenu+0x818>)
 8001d8c:	f00c fca0 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d90:	7bbb      	ldrb	r3, [r7, #14]
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	2300      	movs	r3, #0
 8001d96:	9301      	str	r3, [sp, #4]
 8001d98:	2302      	movs	r3, #2
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001da0:	2178      	movs	r1, #120	; 0x78
 8001da2:	4828      	ldr	r0, [pc, #160]	; (8001e44 <FreqMenu_DrawPresetMenu+0x81c>)
 8001da4:	f00c fc94 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001da8:	7b7b      	ldrb	r3, [r7, #13]
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	2300      	movs	r3, #0
 8001dae:	9301      	str	r3, [sp, #4]
 8001db0:	2302      	movs	r3, #2
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001db8:	2178      	movs	r1, #120	; 0x78
 8001dba:	4823      	ldr	r0, [pc, #140]	; (8001e48 <FreqMenu_DrawPresetMenu+0x820>)
 8001dbc:	f00c fc88 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001dc0:	7b3b      	ldrb	r3, [r7, #12]
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	9301      	str	r3, [sp, #4]
 8001dc8:	2302      	movs	r3, #2
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001dd0:	2178      	movs	r1, #120	; 0x78
 8001dd2:	481e      	ldr	r0, [pc, #120]	; (8001e4c <FreqMenu_DrawPresetMenu+0x824>)
 8001dd4:	f00c fc7c 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001dd8:	7afb      	ldrb	r3, [r7, #11]
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	2300      	movs	r3, #0
 8001dde:	9301      	str	r3, [sp, #4]
 8001de0:	2302      	movs	r3, #2
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001de8:	2178      	movs	r1, #120	; 0x78
 8001dea:	4819      	ldr	r0, [pc, #100]	; (8001e50 <FreqMenu_DrawPresetMenu+0x828>)
 8001dec:	f00c fc70 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001df0:	7abb      	ldrb	r3, [r7, #10]
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	2300      	movs	r3, #0
 8001df6:	9301      	str	r3, [sp, #4]
 8001df8:	2302      	movs	r3, #2
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e00:	2178      	movs	r1, #120	; 0x78
 8001e02:	4814      	ldr	r0, [pc, #80]	; (8001e54 <FreqMenu_DrawPresetMenu+0x82c>)
 8001e04:	f00c fc64 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e08:	7a7b      	ldrb	r3, [r7, #9]
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	9301      	str	r3, [sp, #4]
 8001e10:	2302      	movs	r3, #2
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e18:	2178      	movs	r1, #120	; 0x78
 8001e1a:	480f      	ldr	r0, [pc, #60]	; (8001e58 <FreqMenu_DrawPresetMenu+0x830>)
 8001e1c:	f00c fc58 	bl	800e6d0 <ILI9341_Draw_Text>
				break;
 8001e20:	f000 be8e 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
 8001e24:	08013760 	.word	0x08013760
 8001e28:	08013768 	.word	0x08013768
 8001e2c:	08013770 	.word	0x08013770
 8001e30:	08013778 	.word	0x08013778
 8001e34:	08013780 	.word	0x08013780
 8001e38:	08013788 	.word	0x08013788
 8001e3c:	08013790 	.word	0x08013790
 8001e40:	08013798 	.word	0x08013798
 8001e44:	080137a0 	.word	0x080137a0
 8001e48:	080137a8 	.word	0x080137a8
 8001e4c:	080137b0 	.word	0x080137b0
 8001e50:	080137b8 	.word	0x080137b8
 8001e54:	080137c0 	.word	0x080137c0
 8001e58:	080137c8 	.word	0x080137c8
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e5c:	7bfb      	ldrb	r3, [r7, #15]
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	2300      	movs	r3, #0
 8001e62:	9301      	str	r3, [sp, #4]
 8001e64:	2302      	movs	r3, #2
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e6c:	2105      	movs	r1, #5
 8001e6e:	48a5      	ldr	r0, [pc, #660]	; (8002104 <FreqMenu_DrawPresetMenu+0xadc>)
 8001e70:	f00c fc2e 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e74:	7bbb      	ldrb	r3, [r7, #14]
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	2300      	movs	r3, #0
 8001e7a:	9301      	str	r3, [sp, #4]
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e84:	2105      	movs	r1, #5
 8001e86:	48a0      	ldr	r0, [pc, #640]	; (8002108 <FreqMenu_DrawPresetMenu+0xae0>)
 8001e88:	f00c fc22 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e8c:	7b7b      	ldrb	r3, [r7, #13]
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	2300      	movs	r3, #0
 8001e92:	9301      	str	r3, [sp, #4]
 8001e94:	2302      	movs	r3, #2
 8001e96:	9300      	str	r3, [sp, #0]
 8001e98:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e9c:	2105      	movs	r1, #5
 8001e9e:	489b      	ldr	r0, [pc, #620]	; (800210c <FreqMenu_DrawPresetMenu+0xae4>)
 8001ea0:	f00c fc16 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ea4:	7b3b      	ldrb	r3, [r7, #12]
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	9301      	str	r3, [sp, #4]
 8001eac:	2302      	movs	r3, #2
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001eb4:	2105      	movs	r1, #5
 8001eb6:	4896      	ldr	r0, [pc, #600]	; (8002110 <FreqMenu_DrawPresetMenu+0xae8>)
 8001eb8:	f00c fc0a 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ebc:	7afb      	ldrb	r3, [r7, #11]
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	9301      	str	r3, [sp, #4]
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ecc:	2105      	movs	r1, #5
 8001ece:	4891      	ldr	r0, [pc, #580]	; (8002114 <FreqMenu_DrawPresetMenu+0xaec>)
 8001ed0:	f00c fbfe 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001ed4:	7abb      	ldrb	r3, [r7, #10]
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001edc:	9301      	str	r3, [sp, #4]
 8001ede:	2302      	movs	r3, #2
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	2105      	movs	r1, #5
 8001ee6:	488c      	ldr	r0, [pc, #560]	; (8002118 <FreqMenu_DrawPresetMenu+0xaf0>)
 8001ee8:	f00c fbf2 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001eec:	7a7b      	ldrb	r3, [r7, #9]
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	9301      	str	r3, [sp, #4]
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001efc:	2105      	movs	r1, #5
 8001efe:	4887      	ldr	r0, [pc, #540]	; (800211c <FreqMenu_DrawPresetMenu+0xaf4>)
 8001f00:	f00c fbe6 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	2300      	movs	r3, #0
 8001f0a:	9301      	str	r3, [sp, #4]
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f14:	2178      	movs	r1, #120	; 0x78
 8001f16:	4882      	ldr	r0, [pc, #520]	; (8002120 <FreqMenu_DrawPresetMenu+0xaf8>)
 8001f18:	f00c fbda 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f1c:	7bbb      	ldrb	r3, [r7, #14]
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	2300      	movs	r3, #0
 8001f22:	9301      	str	r3, [sp, #4]
 8001f24:	2302      	movs	r3, #2
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f2c:	2178      	movs	r1, #120	; 0x78
 8001f2e:	487d      	ldr	r0, [pc, #500]	; (8002124 <FreqMenu_DrawPresetMenu+0xafc>)
 8001f30:	f00c fbce 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f34:	7b7b      	ldrb	r3, [r7, #13]
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	2300      	movs	r3, #0
 8001f3a:	9301      	str	r3, [sp, #4]
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f44:	2178      	movs	r1, #120	; 0x78
 8001f46:	4878      	ldr	r0, [pc, #480]	; (8002128 <FreqMenu_DrawPresetMenu+0xb00>)
 8001f48:	f00c fbc2 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f4c:	7b3b      	ldrb	r3, [r7, #12]
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	2300      	movs	r3, #0
 8001f52:	9301      	str	r3, [sp, #4]
 8001f54:	2302      	movs	r3, #2
 8001f56:	9300      	str	r3, [sp, #0]
 8001f58:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f5c:	2178      	movs	r1, #120	; 0x78
 8001f5e:	4873      	ldr	r0, [pc, #460]	; (800212c <FreqMenu_DrawPresetMenu+0xb04>)
 8001f60:	f00c fbb6 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f64:	7afb      	ldrb	r3, [r7, #11]
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	2300      	movs	r3, #0
 8001f6a:	9301      	str	r3, [sp, #4]
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	9300      	str	r3, [sp, #0]
 8001f70:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f74:	2178      	movs	r1, #120	; 0x78
 8001f76:	486e      	ldr	r0, [pc, #440]	; (8002130 <FreqMenu_DrawPresetMenu+0xb08>)
 8001f78:	f00c fbaa 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f7c:	7abb      	ldrb	r3, [r7, #10]
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	2300      	movs	r3, #0
 8001f82:	9301      	str	r3, [sp, #4]
 8001f84:	2302      	movs	r3, #2
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f8c:	2178      	movs	r1, #120	; 0x78
 8001f8e:	4869      	ldr	r0, [pc, #420]	; (8002134 <FreqMenu_DrawPresetMenu+0xb0c>)
 8001f90:	f00c fb9e 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f94:	7a7b      	ldrb	r3, [r7, #9]
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	2300      	movs	r3, #0
 8001f9a:	9301      	str	r3, [sp, #4]
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fa4:	2178      	movs	r1, #120	; 0x78
 8001fa6:	4864      	ldr	r0, [pc, #400]	; (8002138 <FreqMenu_DrawPresetMenu+0xb10>)
 8001fa8:	f00c fb92 	bl	800e6d0 <ILI9341_Draw_Text>
				break;
 8001fac:	f000 bdc8 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fb0:	7bfb      	ldrb	r3, [r7, #15]
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	9301      	str	r3, [sp, #4]
 8001fb8:	2302      	movs	r3, #2
 8001fba:	9300      	str	r3, [sp, #0]
 8001fbc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fc0:	2105      	movs	r1, #5
 8001fc2:	4850      	ldr	r0, [pc, #320]	; (8002104 <FreqMenu_DrawPresetMenu+0xadc>)
 8001fc4:	f00c fb84 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fc8:	7bbb      	ldrb	r3, [r7, #14]
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	2300      	movs	r3, #0
 8001fce:	9301      	str	r3, [sp, #4]
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fd8:	2105      	movs	r1, #5
 8001fda:	484b      	ldr	r0, [pc, #300]	; (8002108 <FreqMenu_DrawPresetMenu+0xae0>)
 8001fdc:	f00c fb78 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fe0:	7b7b      	ldrb	r3, [r7, #13]
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	9301      	str	r3, [sp, #4]
 8001fe8:	2302      	movs	r3, #2
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ff0:	2105      	movs	r1, #5
 8001ff2:	4846      	ldr	r0, [pc, #280]	; (800210c <FreqMenu_DrawPresetMenu+0xae4>)
 8001ff4:	f00c fb6c 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ff8:	7b3b      	ldrb	r3, [r7, #12]
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	9301      	str	r3, [sp, #4]
 8002000:	2302      	movs	r3, #2
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002008:	2105      	movs	r1, #5
 800200a:	4841      	ldr	r0, [pc, #260]	; (8002110 <FreqMenu_DrawPresetMenu+0xae8>)
 800200c:	f00c fb60 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002010:	7afb      	ldrb	r3, [r7, #11]
 8002012:	b29a      	uxth	r2, r3
 8002014:	2300      	movs	r3, #0
 8002016:	9301      	str	r3, [sp, #4]
 8002018:	2302      	movs	r3, #2
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002020:	2105      	movs	r1, #5
 8002022:	483c      	ldr	r0, [pc, #240]	; (8002114 <FreqMenu_DrawPresetMenu+0xaec>)
 8002024:	f00c fb54 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002028:	7abb      	ldrb	r3, [r7, #10]
 800202a:	b29a      	uxth	r2, r3
 800202c:	2300      	movs	r3, #0
 800202e:	9301      	str	r3, [sp, #4]
 8002030:	2302      	movs	r3, #2
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002038:	2105      	movs	r1, #5
 800203a:	4837      	ldr	r0, [pc, #220]	; (8002118 <FreqMenu_DrawPresetMenu+0xaf0>)
 800203c:	f00c fb48 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002040:	7a7b      	ldrb	r3, [r7, #9]
 8002042:	b29a      	uxth	r2, r3
 8002044:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002048:	9301      	str	r3, [sp, #4]
 800204a:	2302      	movs	r3, #2
 800204c:	9300      	str	r3, [sp, #0]
 800204e:	2300      	movs	r3, #0
 8002050:	2105      	movs	r1, #5
 8002052:	4832      	ldr	r0, [pc, #200]	; (800211c <FreqMenu_DrawPresetMenu+0xaf4>)
 8002054:	f00c fb3c 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002058:	7bfb      	ldrb	r3, [r7, #15]
 800205a:	b29a      	uxth	r2, r3
 800205c:	2300      	movs	r3, #0
 800205e:	9301      	str	r3, [sp, #4]
 8002060:	2302      	movs	r3, #2
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002068:	2178      	movs	r1, #120	; 0x78
 800206a:	482d      	ldr	r0, [pc, #180]	; (8002120 <FreqMenu_DrawPresetMenu+0xaf8>)
 800206c:	f00c fb30 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002070:	7bbb      	ldrb	r3, [r7, #14]
 8002072:	b29a      	uxth	r2, r3
 8002074:	2300      	movs	r3, #0
 8002076:	9301      	str	r3, [sp, #4]
 8002078:	2302      	movs	r3, #2
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002080:	2178      	movs	r1, #120	; 0x78
 8002082:	4828      	ldr	r0, [pc, #160]	; (8002124 <FreqMenu_DrawPresetMenu+0xafc>)
 8002084:	f00c fb24 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002088:	7b7b      	ldrb	r3, [r7, #13]
 800208a:	b29a      	uxth	r2, r3
 800208c:	2300      	movs	r3, #0
 800208e:	9301      	str	r3, [sp, #4]
 8002090:	2302      	movs	r3, #2
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002098:	2178      	movs	r1, #120	; 0x78
 800209a:	4823      	ldr	r0, [pc, #140]	; (8002128 <FreqMenu_DrawPresetMenu+0xb00>)
 800209c:	f00c fb18 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020a0:	7b3b      	ldrb	r3, [r7, #12]
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	2300      	movs	r3, #0
 80020a6:	9301      	str	r3, [sp, #4]
 80020a8:	2302      	movs	r3, #2
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020b0:	2178      	movs	r1, #120	; 0x78
 80020b2:	481e      	ldr	r0, [pc, #120]	; (800212c <FreqMenu_DrawPresetMenu+0xb04>)
 80020b4:	f00c fb0c 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020b8:	7afb      	ldrb	r3, [r7, #11]
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	2300      	movs	r3, #0
 80020be:	9301      	str	r3, [sp, #4]
 80020c0:	2302      	movs	r3, #2
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020c8:	2178      	movs	r1, #120	; 0x78
 80020ca:	4819      	ldr	r0, [pc, #100]	; (8002130 <FreqMenu_DrawPresetMenu+0xb08>)
 80020cc:	f00c fb00 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020d0:	7abb      	ldrb	r3, [r7, #10]
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	2300      	movs	r3, #0
 80020d6:	9301      	str	r3, [sp, #4]
 80020d8:	2302      	movs	r3, #2
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020e0:	2178      	movs	r1, #120	; 0x78
 80020e2:	4814      	ldr	r0, [pc, #80]	; (8002134 <FreqMenu_DrawPresetMenu+0xb0c>)
 80020e4:	f00c faf4 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020e8:	7a7b      	ldrb	r3, [r7, #9]
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	2300      	movs	r3, #0
 80020ee:	9301      	str	r3, [sp, #4]
 80020f0:	2302      	movs	r3, #2
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020f8:	2178      	movs	r1, #120	; 0x78
 80020fa:	480f      	ldr	r0, [pc, #60]	; (8002138 <FreqMenu_DrawPresetMenu+0xb10>)
 80020fc:	f00c fae8 	bl	800e6d0 <ILI9341_Draw_Text>
				break;
 8002100:	f000 bd1e 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
 8002104:	08013760 	.word	0x08013760
 8002108:	08013768 	.word	0x08013768
 800210c:	08013770 	.word	0x08013770
 8002110:	08013778 	.word	0x08013778
 8002114:	08013780 	.word	0x08013780
 8002118:	08013788 	.word	0x08013788
 800211c:	08013790 	.word	0x08013790
 8002120:	08013798 	.word	0x08013798
 8002124:	080137a0 	.word	0x080137a0
 8002128:	080137a8 	.word	0x080137a8
 800212c:	080137b0 	.word	0x080137b0
 8002130:	080137b8 	.word	0x080137b8
 8002134:	080137c0 	.word	0x080137c0
 8002138:	080137c8 	.word	0x080137c8
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800213c:	7bfb      	ldrb	r3, [r7, #15]
 800213e:	b29a      	uxth	r2, r3
 8002140:	2300      	movs	r3, #0
 8002142:	9301      	str	r3, [sp, #4]
 8002144:	2302      	movs	r3, #2
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800214c:	2105      	movs	r1, #5
 800214e:	48a5      	ldr	r0, [pc, #660]	; (80023e4 <FreqMenu_DrawPresetMenu+0xdbc>)
 8002150:	f00c fabe 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002154:	7bbb      	ldrb	r3, [r7, #14]
 8002156:	b29a      	uxth	r2, r3
 8002158:	2300      	movs	r3, #0
 800215a:	9301      	str	r3, [sp, #4]
 800215c:	2302      	movs	r3, #2
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002164:	2105      	movs	r1, #5
 8002166:	48a0      	ldr	r0, [pc, #640]	; (80023e8 <FreqMenu_DrawPresetMenu+0xdc0>)
 8002168:	f00c fab2 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800216c:	7b7b      	ldrb	r3, [r7, #13]
 800216e:	b29a      	uxth	r2, r3
 8002170:	2300      	movs	r3, #0
 8002172:	9301      	str	r3, [sp, #4]
 8002174:	2302      	movs	r3, #2
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800217c:	2105      	movs	r1, #5
 800217e:	489b      	ldr	r0, [pc, #620]	; (80023ec <FreqMenu_DrawPresetMenu+0xdc4>)
 8002180:	f00c faa6 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002184:	7b3b      	ldrb	r3, [r7, #12]
 8002186:	b29a      	uxth	r2, r3
 8002188:	2300      	movs	r3, #0
 800218a:	9301      	str	r3, [sp, #4]
 800218c:	2302      	movs	r3, #2
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002194:	2105      	movs	r1, #5
 8002196:	4896      	ldr	r0, [pc, #600]	; (80023f0 <FreqMenu_DrawPresetMenu+0xdc8>)
 8002198:	f00c fa9a 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800219c:	7afb      	ldrb	r3, [r7, #11]
 800219e:	b29a      	uxth	r2, r3
 80021a0:	2300      	movs	r3, #0
 80021a2:	9301      	str	r3, [sp, #4]
 80021a4:	2302      	movs	r3, #2
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021ac:	2105      	movs	r1, #5
 80021ae:	4891      	ldr	r0, [pc, #580]	; (80023f4 <FreqMenu_DrawPresetMenu+0xdcc>)
 80021b0:	f00c fa8e 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021b4:	7abb      	ldrb	r3, [r7, #10]
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	2300      	movs	r3, #0
 80021ba:	9301      	str	r3, [sp, #4]
 80021bc:	2302      	movs	r3, #2
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021c4:	2105      	movs	r1, #5
 80021c6:	488c      	ldr	r0, [pc, #560]	; (80023f8 <FreqMenu_DrawPresetMenu+0xdd0>)
 80021c8:	f00c fa82 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021cc:	7a7b      	ldrb	r3, [r7, #9]
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	2300      	movs	r3, #0
 80021d2:	9301      	str	r3, [sp, #4]
 80021d4:	2302      	movs	r3, #2
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021dc:	2105      	movs	r1, #5
 80021de:	4887      	ldr	r0, [pc, #540]	; (80023fc <FreqMenu_DrawPresetMenu+0xdd4>)
 80021e0:	f00c fa76 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80021e4:	7bfb      	ldrb	r3, [r7, #15]
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80021ec:	9301      	str	r3, [sp, #4]
 80021ee:	2302      	movs	r3, #2
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	2300      	movs	r3, #0
 80021f4:	2178      	movs	r1, #120	; 0x78
 80021f6:	4882      	ldr	r0, [pc, #520]	; (8002400 <FreqMenu_DrawPresetMenu+0xdd8>)
 80021f8:	f00c fa6a 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021fc:	7bbb      	ldrb	r3, [r7, #14]
 80021fe:	b29a      	uxth	r2, r3
 8002200:	2300      	movs	r3, #0
 8002202:	9301      	str	r3, [sp, #4]
 8002204:	2302      	movs	r3, #2
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800220c:	2178      	movs	r1, #120	; 0x78
 800220e:	487d      	ldr	r0, [pc, #500]	; (8002404 <FreqMenu_DrawPresetMenu+0xddc>)
 8002210:	f00c fa5e 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002214:	7b7b      	ldrb	r3, [r7, #13]
 8002216:	b29a      	uxth	r2, r3
 8002218:	2300      	movs	r3, #0
 800221a:	9301      	str	r3, [sp, #4]
 800221c:	2302      	movs	r3, #2
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002224:	2178      	movs	r1, #120	; 0x78
 8002226:	4878      	ldr	r0, [pc, #480]	; (8002408 <FreqMenu_DrawPresetMenu+0xde0>)
 8002228:	f00c fa52 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800222c:	7b3b      	ldrb	r3, [r7, #12]
 800222e:	b29a      	uxth	r2, r3
 8002230:	2300      	movs	r3, #0
 8002232:	9301      	str	r3, [sp, #4]
 8002234:	2302      	movs	r3, #2
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800223c:	2178      	movs	r1, #120	; 0x78
 800223e:	4873      	ldr	r0, [pc, #460]	; (800240c <FreqMenu_DrawPresetMenu+0xde4>)
 8002240:	f00c fa46 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002244:	7afb      	ldrb	r3, [r7, #11]
 8002246:	b29a      	uxth	r2, r3
 8002248:	2300      	movs	r3, #0
 800224a:	9301      	str	r3, [sp, #4]
 800224c:	2302      	movs	r3, #2
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002254:	2178      	movs	r1, #120	; 0x78
 8002256:	486e      	ldr	r0, [pc, #440]	; (8002410 <FreqMenu_DrawPresetMenu+0xde8>)
 8002258:	f00c fa3a 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800225c:	7abb      	ldrb	r3, [r7, #10]
 800225e:	b29a      	uxth	r2, r3
 8002260:	2300      	movs	r3, #0
 8002262:	9301      	str	r3, [sp, #4]
 8002264:	2302      	movs	r3, #2
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800226c:	2178      	movs	r1, #120	; 0x78
 800226e:	4869      	ldr	r0, [pc, #420]	; (8002414 <FreqMenu_DrawPresetMenu+0xdec>)
 8002270:	f00c fa2e 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002274:	7a7b      	ldrb	r3, [r7, #9]
 8002276:	b29a      	uxth	r2, r3
 8002278:	2300      	movs	r3, #0
 800227a:	9301      	str	r3, [sp, #4]
 800227c:	2302      	movs	r3, #2
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002284:	2178      	movs	r1, #120	; 0x78
 8002286:	4864      	ldr	r0, [pc, #400]	; (8002418 <FreqMenu_DrawPresetMenu+0xdf0>)
 8002288:	f00c fa22 	bl	800e6d0 <ILI9341_Draw_Text>
				break;
 800228c:	f000 bc58 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002290:	7bfb      	ldrb	r3, [r7, #15]
 8002292:	b29a      	uxth	r2, r3
 8002294:	2300      	movs	r3, #0
 8002296:	9301      	str	r3, [sp, #4]
 8002298:	2302      	movs	r3, #2
 800229a:	9300      	str	r3, [sp, #0]
 800229c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022a0:	2105      	movs	r1, #5
 80022a2:	4850      	ldr	r0, [pc, #320]	; (80023e4 <FreqMenu_DrawPresetMenu+0xdbc>)
 80022a4:	f00c fa14 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022a8:	7bbb      	ldrb	r3, [r7, #14]
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	2300      	movs	r3, #0
 80022ae:	9301      	str	r3, [sp, #4]
 80022b0:	2302      	movs	r3, #2
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022b8:	2105      	movs	r1, #5
 80022ba:	484b      	ldr	r0, [pc, #300]	; (80023e8 <FreqMenu_DrawPresetMenu+0xdc0>)
 80022bc:	f00c fa08 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022c0:	7b7b      	ldrb	r3, [r7, #13]
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	2300      	movs	r3, #0
 80022c6:	9301      	str	r3, [sp, #4]
 80022c8:	2302      	movs	r3, #2
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022d0:	2105      	movs	r1, #5
 80022d2:	4846      	ldr	r0, [pc, #280]	; (80023ec <FreqMenu_DrawPresetMenu+0xdc4>)
 80022d4:	f00c f9fc 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022d8:	7b3b      	ldrb	r3, [r7, #12]
 80022da:	b29a      	uxth	r2, r3
 80022dc:	2300      	movs	r3, #0
 80022de:	9301      	str	r3, [sp, #4]
 80022e0:	2302      	movs	r3, #2
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022e8:	2105      	movs	r1, #5
 80022ea:	4841      	ldr	r0, [pc, #260]	; (80023f0 <FreqMenu_DrawPresetMenu+0xdc8>)
 80022ec:	f00c f9f0 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022f0:	7afb      	ldrb	r3, [r7, #11]
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	2300      	movs	r3, #0
 80022f6:	9301      	str	r3, [sp, #4]
 80022f8:	2302      	movs	r3, #2
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002300:	2105      	movs	r1, #5
 8002302:	483c      	ldr	r0, [pc, #240]	; (80023f4 <FreqMenu_DrawPresetMenu+0xdcc>)
 8002304:	f00c f9e4 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002308:	7abb      	ldrb	r3, [r7, #10]
 800230a:	b29a      	uxth	r2, r3
 800230c:	2300      	movs	r3, #0
 800230e:	9301      	str	r3, [sp, #4]
 8002310:	2302      	movs	r3, #2
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002318:	2105      	movs	r1, #5
 800231a:	4837      	ldr	r0, [pc, #220]	; (80023f8 <FreqMenu_DrawPresetMenu+0xdd0>)
 800231c:	f00c f9d8 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002320:	7a7b      	ldrb	r3, [r7, #9]
 8002322:	b29a      	uxth	r2, r3
 8002324:	2300      	movs	r3, #0
 8002326:	9301      	str	r3, [sp, #4]
 8002328:	2302      	movs	r3, #2
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002330:	2105      	movs	r1, #5
 8002332:	4832      	ldr	r0, [pc, #200]	; (80023fc <FreqMenu_DrawPresetMenu+0xdd4>)
 8002334:	f00c f9cc 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002338:	7bfb      	ldrb	r3, [r7, #15]
 800233a:	b29a      	uxth	r2, r3
 800233c:	2300      	movs	r3, #0
 800233e:	9301      	str	r3, [sp, #4]
 8002340:	2302      	movs	r3, #2
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002348:	2178      	movs	r1, #120	; 0x78
 800234a:	482d      	ldr	r0, [pc, #180]	; (8002400 <FreqMenu_DrawPresetMenu+0xdd8>)
 800234c:	f00c f9c0 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002350:	7bbb      	ldrb	r3, [r7, #14]
 8002352:	b29a      	uxth	r2, r3
 8002354:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002358:	9301      	str	r3, [sp, #4]
 800235a:	2302      	movs	r3, #2
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	2300      	movs	r3, #0
 8002360:	2178      	movs	r1, #120	; 0x78
 8002362:	4828      	ldr	r0, [pc, #160]	; (8002404 <FreqMenu_DrawPresetMenu+0xddc>)
 8002364:	f00c f9b4 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002368:	7b7b      	ldrb	r3, [r7, #13]
 800236a:	b29a      	uxth	r2, r3
 800236c:	2300      	movs	r3, #0
 800236e:	9301      	str	r3, [sp, #4]
 8002370:	2302      	movs	r3, #2
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002378:	2178      	movs	r1, #120	; 0x78
 800237a:	4823      	ldr	r0, [pc, #140]	; (8002408 <FreqMenu_DrawPresetMenu+0xde0>)
 800237c:	f00c f9a8 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002380:	7b3b      	ldrb	r3, [r7, #12]
 8002382:	b29a      	uxth	r2, r3
 8002384:	2300      	movs	r3, #0
 8002386:	9301      	str	r3, [sp, #4]
 8002388:	2302      	movs	r3, #2
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002390:	2178      	movs	r1, #120	; 0x78
 8002392:	481e      	ldr	r0, [pc, #120]	; (800240c <FreqMenu_DrawPresetMenu+0xde4>)
 8002394:	f00c f99c 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002398:	7afb      	ldrb	r3, [r7, #11]
 800239a:	b29a      	uxth	r2, r3
 800239c:	2300      	movs	r3, #0
 800239e:	9301      	str	r3, [sp, #4]
 80023a0:	2302      	movs	r3, #2
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023a8:	2178      	movs	r1, #120	; 0x78
 80023aa:	4819      	ldr	r0, [pc, #100]	; (8002410 <FreqMenu_DrawPresetMenu+0xde8>)
 80023ac:	f00c f990 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023b0:	7abb      	ldrb	r3, [r7, #10]
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	2300      	movs	r3, #0
 80023b6:	9301      	str	r3, [sp, #4]
 80023b8:	2302      	movs	r3, #2
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023c0:	2178      	movs	r1, #120	; 0x78
 80023c2:	4814      	ldr	r0, [pc, #80]	; (8002414 <FreqMenu_DrawPresetMenu+0xdec>)
 80023c4:	f00c f984 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023c8:	7a7b      	ldrb	r3, [r7, #9]
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	2300      	movs	r3, #0
 80023ce:	9301      	str	r3, [sp, #4]
 80023d0:	2302      	movs	r3, #2
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023d8:	2178      	movs	r1, #120	; 0x78
 80023da:	480f      	ldr	r0, [pc, #60]	; (8002418 <FreqMenu_DrawPresetMenu+0xdf0>)
 80023dc:	f00c f978 	bl	800e6d0 <ILI9341_Draw_Text>
				break;
 80023e0:	e3ae      	b.n	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
 80023e2:	bf00      	nop
 80023e4:	08013760 	.word	0x08013760
 80023e8:	08013768 	.word	0x08013768
 80023ec:	08013770 	.word	0x08013770
 80023f0:	08013778 	.word	0x08013778
 80023f4:	08013780 	.word	0x08013780
 80023f8:	08013788 	.word	0x08013788
 80023fc:	08013790 	.word	0x08013790
 8002400:	08013798 	.word	0x08013798
 8002404:	080137a0 	.word	0x080137a0
 8002408:	080137a8 	.word	0x080137a8
 800240c:	080137b0 	.word	0x080137b0
 8002410:	080137b8 	.word	0x080137b8
 8002414:	080137c0 	.word	0x080137c0
 8002418:	080137c8 	.word	0x080137c8
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800241c:	7bfb      	ldrb	r3, [r7, #15]
 800241e:	b29a      	uxth	r2, r3
 8002420:	2300      	movs	r3, #0
 8002422:	9301      	str	r3, [sp, #4]
 8002424:	2302      	movs	r3, #2
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800242c:	2105      	movs	r1, #5
 800242e:	48a4      	ldr	r0, [pc, #656]	; (80026c0 <FreqMenu_DrawPresetMenu+0x1098>)
 8002430:	f00c f94e 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002434:	7bbb      	ldrb	r3, [r7, #14]
 8002436:	b29a      	uxth	r2, r3
 8002438:	2300      	movs	r3, #0
 800243a:	9301      	str	r3, [sp, #4]
 800243c:	2302      	movs	r3, #2
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002444:	2105      	movs	r1, #5
 8002446:	489f      	ldr	r0, [pc, #636]	; (80026c4 <FreqMenu_DrawPresetMenu+0x109c>)
 8002448:	f00c f942 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800244c:	7b7b      	ldrb	r3, [r7, #13]
 800244e:	b29a      	uxth	r2, r3
 8002450:	2300      	movs	r3, #0
 8002452:	9301      	str	r3, [sp, #4]
 8002454:	2302      	movs	r3, #2
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800245c:	2105      	movs	r1, #5
 800245e:	489a      	ldr	r0, [pc, #616]	; (80026c8 <FreqMenu_DrawPresetMenu+0x10a0>)
 8002460:	f00c f936 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002464:	7b3b      	ldrb	r3, [r7, #12]
 8002466:	b29a      	uxth	r2, r3
 8002468:	2300      	movs	r3, #0
 800246a:	9301      	str	r3, [sp, #4]
 800246c:	2302      	movs	r3, #2
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002474:	2105      	movs	r1, #5
 8002476:	4895      	ldr	r0, [pc, #596]	; (80026cc <FreqMenu_DrawPresetMenu+0x10a4>)
 8002478:	f00c f92a 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800247c:	7afb      	ldrb	r3, [r7, #11]
 800247e:	b29a      	uxth	r2, r3
 8002480:	2300      	movs	r3, #0
 8002482:	9301      	str	r3, [sp, #4]
 8002484:	2302      	movs	r3, #2
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800248c:	2105      	movs	r1, #5
 800248e:	4890      	ldr	r0, [pc, #576]	; (80026d0 <FreqMenu_DrawPresetMenu+0x10a8>)
 8002490:	f00c f91e 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002494:	7abb      	ldrb	r3, [r7, #10]
 8002496:	b29a      	uxth	r2, r3
 8002498:	2300      	movs	r3, #0
 800249a:	9301      	str	r3, [sp, #4]
 800249c:	2302      	movs	r3, #2
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024a4:	2105      	movs	r1, #5
 80024a6:	488b      	ldr	r0, [pc, #556]	; (80026d4 <FreqMenu_DrawPresetMenu+0x10ac>)
 80024a8:	f00c f912 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024ac:	7a7b      	ldrb	r3, [r7, #9]
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	2300      	movs	r3, #0
 80024b2:	9301      	str	r3, [sp, #4]
 80024b4:	2302      	movs	r3, #2
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024bc:	2105      	movs	r1, #5
 80024be:	4886      	ldr	r0, [pc, #536]	; (80026d8 <FreqMenu_DrawPresetMenu+0x10b0>)
 80024c0:	f00c f906 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	2300      	movs	r3, #0
 80024ca:	9301      	str	r3, [sp, #4]
 80024cc:	2302      	movs	r3, #2
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024d4:	2178      	movs	r1, #120	; 0x78
 80024d6:	4881      	ldr	r0, [pc, #516]	; (80026dc <FreqMenu_DrawPresetMenu+0x10b4>)
 80024d8:	f00c f8fa 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024dc:	7bbb      	ldrb	r3, [r7, #14]
 80024de:	b29a      	uxth	r2, r3
 80024e0:	2300      	movs	r3, #0
 80024e2:	9301      	str	r3, [sp, #4]
 80024e4:	2302      	movs	r3, #2
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024ec:	2178      	movs	r1, #120	; 0x78
 80024ee:	487c      	ldr	r0, [pc, #496]	; (80026e0 <FreqMenu_DrawPresetMenu+0x10b8>)
 80024f0:	f00c f8ee 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80024f4:	7b7b      	ldrb	r3, [r7, #13]
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80024fc:	9301      	str	r3, [sp, #4]
 80024fe:	2302      	movs	r3, #2
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	2300      	movs	r3, #0
 8002504:	2178      	movs	r1, #120	; 0x78
 8002506:	4877      	ldr	r0, [pc, #476]	; (80026e4 <FreqMenu_DrawPresetMenu+0x10bc>)
 8002508:	f00c f8e2 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800250c:	7b3b      	ldrb	r3, [r7, #12]
 800250e:	b29a      	uxth	r2, r3
 8002510:	2300      	movs	r3, #0
 8002512:	9301      	str	r3, [sp, #4]
 8002514:	2302      	movs	r3, #2
 8002516:	9300      	str	r3, [sp, #0]
 8002518:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800251c:	2178      	movs	r1, #120	; 0x78
 800251e:	4872      	ldr	r0, [pc, #456]	; (80026e8 <FreqMenu_DrawPresetMenu+0x10c0>)
 8002520:	f00c f8d6 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002524:	7afb      	ldrb	r3, [r7, #11]
 8002526:	b29a      	uxth	r2, r3
 8002528:	2300      	movs	r3, #0
 800252a:	9301      	str	r3, [sp, #4]
 800252c:	2302      	movs	r3, #2
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002534:	2178      	movs	r1, #120	; 0x78
 8002536:	486d      	ldr	r0, [pc, #436]	; (80026ec <FreqMenu_DrawPresetMenu+0x10c4>)
 8002538:	f00c f8ca 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800253c:	7abb      	ldrb	r3, [r7, #10]
 800253e:	b29a      	uxth	r2, r3
 8002540:	2300      	movs	r3, #0
 8002542:	9301      	str	r3, [sp, #4]
 8002544:	2302      	movs	r3, #2
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800254c:	2178      	movs	r1, #120	; 0x78
 800254e:	4868      	ldr	r0, [pc, #416]	; (80026f0 <FreqMenu_DrawPresetMenu+0x10c8>)
 8002550:	f00c f8be 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002554:	7a7b      	ldrb	r3, [r7, #9]
 8002556:	b29a      	uxth	r2, r3
 8002558:	2300      	movs	r3, #0
 800255a:	9301      	str	r3, [sp, #4]
 800255c:	2302      	movs	r3, #2
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002564:	2178      	movs	r1, #120	; 0x78
 8002566:	4863      	ldr	r0, [pc, #396]	; (80026f4 <FreqMenu_DrawPresetMenu+0x10cc>)
 8002568:	f00c f8b2 	bl	800e6d0 <ILI9341_Draw_Text>
				break;
 800256c:	e2e8      	b.n	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800256e:	7bfb      	ldrb	r3, [r7, #15]
 8002570:	b29a      	uxth	r2, r3
 8002572:	2300      	movs	r3, #0
 8002574:	9301      	str	r3, [sp, #4]
 8002576:	2302      	movs	r3, #2
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800257e:	2105      	movs	r1, #5
 8002580:	484f      	ldr	r0, [pc, #316]	; (80026c0 <FreqMenu_DrawPresetMenu+0x1098>)
 8002582:	f00c f8a5 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002586:	7bbb      	ldrb	r3, [r7, #14]
 8002588:	b29a      	uxth	r2, r3
 800258a:	2300      	movs	r3, #0
 800258c:	9301      	str	r3, [sp, #4]
 800258e:	2302      	movs	r3, #2
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002596:	2105      	movs	r1, #5
 8002598:	484a      	ldr	r0, [pc, #296]	; (80026c4 <FreqMenu_DrawPresetMenu+0x109c>)
 800259a:	f00c f899 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800259e:	7b7b      	ldrb	r3, [r7, #13]
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	2300      	movs	r3, #0
 80025a4:	9301      	str	r3, [sp, #4]
 80025a6:	2302      	movs	r3, #2
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025ae:	2105      	movs	r1, #5
 80025b0:	4845      	ldr	r0, [pc, #276]	; (80026c8 <FreqMenu_DrawPresetMenu+0x10a0>)
 80025b2:	f00c f88d 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025b6:	7b3b      	ldrb	r3, [r7, #12]
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	2300      	movs	r3, #0
 80025bc:	9301      	str	r3, [sp, #4]
 80025be:	2302      	movs	r3, #2
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025c6:	2105      	movs	r1, #5
 80025c8:	4840      	ldr	r0, [pc, #256]	; (80026cc <FreqMenu_DrawPresetMenu+0x10a4>)
 80025ca:	f00c f881 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025ce:	7afb      	ldrb	r3, [r7, #11]
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	2300      	movs	r3, #0
 80025d4:	9301      	str	r3, [sp, #4]
 80025d6:	2302      	movs	r3, #2
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025de:	2105      	movs	r1, #5
 80025e0:	483b      	ldr	r0, [pc, #236]	; (80026d0 <FreqMenu_DrawPresetMenu+0x10a8>)
 80025e2:	f00c f875 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025e6:	7abb      	ldrb	r3, [r7, #10]
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	2300      	movs	r3, #0
 80025ec:	9301      	str	r3, [sp, #4]
 80025ee:	2302      	movs	r3, #2
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025f6:	2105      	movs	r1, #5
 80025f8:	4836      	ldr	r0, [pc, #216]	; (80026d4 <FreqMenu_DrawPresetMenu+0x10ac>)
 80025fa:	f00c f869 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025fe:	7a7b      	ldrb	r3, [r7, #9]
 8002600:	b29a      	uxth	r2, r3
 8002602:	2300      	movs	r3, #0
 8002604:	9301      	str	r3, [sp, #4]
 8002606:	2302      	movs	r3, #2
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800260e:	2105      	movs	r1, #5
 8002610:	4831      	ldr	r0, [pc, #196]	; (80026d8 <FreqMenu_DrawPresetMenu+0x10b0>)
 8002612:	f00c f85d 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002616:	7bfb      	ldrb	r3, [r7, #15]
 8002618:	b29a      	uxth	r2, r3
 800261a:	2300      	movs	r3, #0
 800261c:	9301      	str	r3, [sp, #4]
 800261e:	2302      	movs	r3, #2
 8002620:	9300      	str	r3, [sp, #0]
 8002622:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002626:	2178      	movs	r1, #120	; 0x78
 8002628:	482c      	ldr	r0, [pc, #176]	; (80026dc <FreqMenu_DrawPresetMenu+0x10b4>)
 800262a:	f00c f851 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800262e:	7bbb      	ldrb	r3, [r7, #14]
 8002630:	b29a      	uxth	r2, r3
 8002632:	2300      	movs	r3, #0
 8002634:	9301      	str	r3, [sp, #4]
 8002636:	2302      	movs	r3, #2
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800263e:	2178      	movs	r1, #120	; 0x78
 8002640:	4827      	ldr	r0, [pc, #156]	; (80026e0 <FreqMenu_DrawPresetMenu+0x10b8>)
 8002642:	f00c f845 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002646:	7b7b      	ldrb	r3, [r7, #13]
 8002648:	b29a      	uxth	r2, r3
 800264a:	2300      	movs	r3, #0
 800264c:	9301      	str	r3, [sp, #4]
 800264e:	2302      	movs	r3, #2
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002656:	2178      	movs	r1, #120	; 0x78
 8002658:	4822      	ldr	r0, [pc, #136]	; (80026e4 <FreqMenu_DrawPresetMenu+0x10bc>)
 800265a:	f00c f839 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800265e:	7b3b      	ldrb	r3, [r7, #12]
 8002660:	b29a      	uxth	r2, r3
 8002662:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002666:	9301      	str	r3, [sp, #4]
 8002668:	2302      	movs	r3, #2
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	2300      	movs	r3, #0
 800266e:	2178      	movs	r1, #120	; 0x78
 8002670:	481d      	ldr	r0, [pc, #116]	; (80026e8 <FreqMenu_DrawPresetMenu+0x10c0>)
 8002672:	f00c f82d 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002676:	7afb      	ldrb	r3, [r7, #11]
 8002678:	b29a      	uxth	r2, r3
 800267a:	2300      	movs	r3, #0
 800267c:	9301      	str	r3, [sp, #4]
 800267e:	2302      	movs	r3, #2
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002686:	2178      	movs	r1, #120	; 0x78
 8002688:	4818      	ldr	r0, [pc, #96]	; (80026ec <FreqMenu_DrawPresetMenu+0x10c4>)
 800268a:	f00c f821 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800268e:	7abb      	ldrb	r3, [r7, #10]
 8002690:	b29a      	uxth	r2, r3
 8002692:	2300      	movs	r3, #0
 8002694:	9301      	str	r3, [sp, #4]
 8002696:	2302      	movs	r3, #2
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800269e:	2178      	movs	r1, #120	; 0x78
 80026a0:	4813      	ldr	r0, [pc, #76]	; (80026f0 <FreqMenu_DrawPresetMenu+0x10c8>)
 80026a2:	f00c f815 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026a6:	7a7b      	ldrb	r3, [r7, #9]
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	2300      	movs	r3, #0
 80026ac:	9301      	str	r3, [sp, #4]
 80026ae:	2302      	movs	r3, #2
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026b6:	2178      	movs	r1, #120	; 0x78
 80026b8:	480e      	ldr	r0, [pc, #56]	; (80026f4 <FreqMenu_DrawPresetMenu+0x10cc>)
 80026ba:	f00c f809 	bl	800e6d0 <ILI9341_Draw_Text>
				break;
 80026be:	e23f      	b.n	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
 80026c0:	08013760 	.word	0x08013760
 80026c4:	08013768 	.word	0x08013768
 80026c8:	08013770 	.word	0x08013770
 80026cc:	08013778 	.word	0x08013778
 80026d0:	08013780 	.word	0x08013780
 80026d4:	08013788 	.word	0x08013788
 80026d8:	08013790 	.word	0x08013790
 80026dc:	08013798 	.word	0x08013798
 80026e0:	080137a0 	.word	0x080137a0
 80026e4:	080137a8 	.word	0x080137a8
 80026e8:	080137b0 	.word	0x080137b0
 80026ec:	080137b8 	.word	0x080137b8
 80026f0:	080137c0 	.word	0x080137c0
 80026f4:	080137c8 	.word	0x080137c8
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026f8:	7bfb      	ldrb	r3, [r7, #15]
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	2300      	movs	r3, #0
 80026fe:	9301      	str	r3, [sp, #4]
 8002700:	2302      	movs	r3, #2
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002708:	2105      	movs	r1, #5
 800270a:	48a4      	ldr	r0, [pc, #656]	; (800299c <FreqMenu_DrawPresetMenu+0x1374>)
 800270c:	f00b ffe0 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002710:	7bbb      	ldrb	r3, [r7, #14]
 8002712:	b29a      	uxth	r2, r3
 8002714:	2300      	movs	r3, #0
 8002716:	9301      	str	r3, [sp, #4]
 8002718:	2302      	movs	r3, #2
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002720:	2105      	movs	r1, #5
 8002722:	489f      	ldr	r0, [pc, #636]	; (80029a0 <FreqMenu_DrawPresetMenu+0x1378>)
 8002724:	f00b ffd4 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002728:	7b7b      	ldrb	r3, [r7, #13]
 800272a:	b29a      	uxth	r2, r3
 800272c:	2300      	movs	r3, #0
 800272e:	9301      	str	r3, [sp, #4]
 8002730:	2302      	movs	r3, #2
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002738:	2105      	movs	r1, #5
 800273a:	489a      	ldr	r0, [pc, #616]	; (80029a4 <FreqMenu_DrawPresetMenu+0x137c>)
 800273c:	f00b ffc8 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002740:	7b3b      	ldrb	r3, [r7, #12]
 8002742:	b29a      	uxth	r2, r3
 8002744:	2300      	movs	r3, #0
 8002746:	9301      	str	r3, [sp, #4]
 8002748:	2302      	movs	r3, #2
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002750:	2105      	movs	r1, #5
 8002752:	4895      	ldr	r0, [pc, #596]	; (80029a8 <FreqMenu_DrawPresetMenu+0x1380>)
 8002754:	f00b ffbc 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002758:	7afb      	ldrb	r3, [r7, #11]
 800275a:	b29a      	uxth	r2, r3
 800275c:	2300      	movs	r3, #0
 800275e:	9301      	str	r3, [sp, #4]
 8002760:	2302      	movs	r3, #2
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002768:	2105      	movs	r1, #5
 800276a:	4890      	ldr	r0, [pc, #576]	; (80029ac <FreqMenu_DrawPresetMenu+0x1384>)
 800276c:	f00b ffb0 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002770:	7abb      	ldrb	r3, [r7, #10]
 8002772:	b29a      	uxth	r2, r3
 8002774:	2300      	movs	r3, #0
 8002776:	9301      	str	r3, [sp, #4]
 8002778:	2302      	movs	r3, #2
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002780:	2105      	movs	r1, #5
 8002782:	488b      	ldr	r0, [pc, #556]	; (80029b0 <FreqMenu_DrawPresetMenu+0x1388>)
 8002784:	f00b ffa4 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002788:	7a7b      	ldrb	r3, [r7, #9]
 800278a:	b29a      	uxth	r2, r3
 800278c:	2300      	movs	r3, #0
 800278e:	9301      	str	r3, [sp, #4]
 8002790:	2302      	movs	r3, #2
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002798:	2105      	movs	r1, #5
 800279a:	4886      	ldr	r0, [pc, #536]	; (80029b4 <FreqMenu_DrawPresetMenu+0x138c>)
 800279c:	f00b ff98 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027a0:	7bfb      	ldrb	r3, [r7, #15]
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	2300      	movs	r3, #0
 80027a6:	9301      	str	r3, [sp, #4]
 80027a8:	2302      	movs	r3, #2
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027b0:	2178      	movs	r1, #120	; 0x78
 80027b2:	4881      	ldr	r0, [pc, #516]	; (80029b8 <FreqMenu_DrawPresetMenu+0x1390>)
 80027b4:	f00b ff8c 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027b8:	7bbb      	ldrb	r3, [r7, #14]
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	2300      	movs	r3, #0
 80027be:	9301      	str	r3, [sp, #4]
 80027c0:	2302      	movs	r3, #2
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027c8:	2178      	movs	r1, #120	; 0x78
 80027ca:	487c      	ldr	r0, [pc, #496]	; (80029bc <FreqMenu_DrawPresetMenu+0x1394>)
 80027cc:	f00b ff80 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027d0:	7b7b      	ldrb	r3, [r7, #13]
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	2300      	movs	r3, #0
 80027d6:	9301      	str	r3, [sp, #4]
 80027d8:	2302      	movs	r3, #2
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027e0:	2178      	movs	r1, #120	; 0x78
 80027e2:	4877      	ldr	r0, [pc, #476]	; (80029c0 <FreqMenu_DrawPresetMenu+0x1398>)
 80027e4:	f00b ff74 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027e8:	7b3b      	ldrb	r3, [r7, #12]
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	2300      	movs	r3, #0
 80027ee:	9301      	str	r3, [sp, #4]
 80027f0:	2302      	movs	r3, #2
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027f8:	2178      	movs	r1, #120	; 0x78
 80027fa:	4872      	ldr	r0, [pc, #456]	; (80029c4 <FreqMenu_DrawPresetMenu+0x139c>)
 80027fc:	f00b ff68 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002800:	7afb      	ldrb	r3, [r7, #11]
 8002802:	b29a      	uxth	r2, r3
 8002804:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002808:	9301      	str	r3, [sp, #4]
 800280a:	2302      	movs	r3, #2
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	2300      	movs	r3, #0
 8002810:	2178      	movs	r1, #120	; 0x78
 8002812:	486d      	ldr	r0, [pc, #436]	; (80029c8 <FreqMenu_DrawPresetMenu+0x13a0>)
 8002814:	f00b ff5c 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002818:	7abb      	ldrb	r3, [r7, #10]
 800281a:	b29a      	uxth	r2, r3
 800281c:	2300      	movs	r3, #0
 800281e:	9301      	str	r3, [sp, #4]
 8002820:	2302      	movs	r3, #2
 8002822:	9300      	str	r3, [sp, #0]
 8002824:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002828:	2178      	movs	r1, #120	; 0x78
 800282a:	4868      	ldr	r0, [pc, #416]	; (80029cc <FreqMenu_DrawPresetMenu+0x13a4>)
 800282c:	f00b ff50 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002830:	7a7b      	ldrb	r3, [r7, #9]
 8002832:	b29a      	uxth	r2, r3
 8002834:	2300      	movs	r3, #0
 8002836:	9301      	str	r3, [sp, #4]
 8002838:	2302      	movs	r3, #2
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002840:	2178      	movs	r1, #120	; 0x78
 8002842:	4863      	ldr	r0, [pc, #396]	; (80029d0 <FreqMenu_DrawPresetMenu+0x13a8>)
 8002844:	f00b ff44 	bl	800e6d0 <ILI9341_Draw_Text>
			break;
 8002848:	e17a      	b.n	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800284a:	7bfb      	ldrb	r3, [r7, #15]
 800284c:	b29a      	uxth	r2, r3
 800284e:	2300      	movs	r3, #0
 8002850:	9301      	str	r3, [sp, #4]
 8002852:	2302      	movs	r3, #2
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800285a:	2105      	movs	r1, #5
 800285c:	484f      	ldr	r0, [pc, #316]	; (800299c <FreqMenu_DrawPresetMenu+0x1374>)
 800285e:	f00b ff37 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002862:	7bbb      	ldrb	r3, [r7, #14]
 8002864:	b29a      	uxth	r2, r3
 8002866:	2300      	movs	r3, #0
 8002868:	9301      	str	r3, [sp, #4]
 800286a:	2302      	movs	r3, #2
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002872:	2105      	movs	r1, #5
 8002874:	484a      	ldr	r0, [pc, #296]	; (80029a0 <FreqMenu_DrawPresetMenu+0x1378>)
 8002876:	f00b ff2b 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800287a:	7b7b      	ldrb	r3, [r7, #13]
 800287c:	b29a      	uxth	r2, r3
 800287e:	2300      	movs	r3, #0
 8002880:	9301      	str	r3, [sp, #4]
 8002882:	2302      	movs	r3, #2
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800288a:	2105      	movs	r1, #5
 800288c:	4845      	ldr	r0, [pc, #276]	; (80029a4 <FreqMenu_DrawPresetMenu+0x137c>)
 800288e:	f00b ff1f 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002892:	7b3b      	ldrb	r3, [r7, #12]
 8002894:	b29a      	uxth	r2, r3
 8002896:	2300      	movs	r3, #0
 8002898:	9301      	str	r3, [sp, #4]
 800289a:	2302      	movs	r3, #2
 800289c:	9300      	str	r3, [sp, #0]
 800289e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028a2:	2105      	movs	r1, #5
 80028a4:	4840      	ldr	r0, [pc, #256]	; (80029a8 <FreqMenu_DrawPresetMenu+0x1380>)
 80028a6:	f00b ff13 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028aa:	7afb      	ldrb	r3, [r7, #11]
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	2300      	movs	r3, #0
 80028b0:	9301      	str	r3, [sp, #4]
 80028b2:	2302      	movs	r3, #2
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028ba:	2105      	movs	r1, #5
 80028bc:	483b      	ldr	r0, [pc, #236]	; (80029ac <FreqMenu_DrawPresetMenu+0x1384>)
 80028be:	f00b ff07 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028c2:	7abb      	ldrb	r3, [r7, #10]
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	2300      	movs	r3, #0
 80028c8:	9301      	str	r3, [sp, #4]
 80028ca:	2302      	movs	r3, #2
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028d2:	2105      	movs	r1, #5
 80028d4:	4836      	ldr	r0, [pc, #216]	; (80029b0 <FreqMenu_DrawPresetMenu+0x1388>)
 80028d6:	f00b fefb 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028da:	7a7b      	ldrb	r3, [r7, #9]
 80028dc:	b29a      	uxth	r2, r3
 80028de:	2300      	movs	r3, #0
 80028e0:	9301      	str	r3, [sp, #4]
 80028e2:	2302      	movs	r3, #2
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028ea:	2105      	movs	r1, #5
 80028ec:	4831      	ldr	r0, [pc, #196]	; (80029b4 <FreqMenu_DrawPresetMenu+0x138c>)
 80028ee:	f00b feef 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028f2:	7bfb      	ldrb	r3, [r7, #15]
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	2300      	movs	r3, #0
 80028f8:	9301      	str	r3, [sp, #4]
 80028fa:	2302      	movs	r3, #2
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002902:	2178      	movs	r1, #120	; 0x78
 8002904:	482c      	ldr	r0, [pc, #176]	; (80029b8 <FreqMenu_DrawPresetMenu+0x1390>)
 8002906:	f00b fee3 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800290a:	7bbb      	ldrb	r3, [r7, #14]
 800290c:	b29a      	uxth	r2, r3
 800290e:	2300      	movs	r3, #0
 8002910:	9301      	str	r3, [sp, #4]
 8002912:	2302      	movs	r3, #2
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800291a:	2178      	movs	r1, #120	; 0x78
 800291c:	4827      	ldr	r0, [pc, #156]	; (80029bc <FreqMenu_DrawPresetMenu+0x1394>)
 800291e:	f00b fed7 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002922:	7b7b      	ldrb	r3, [r7, #13]
 8002924:	b29a      	uxth	r2, r3
 8002926:	2300      	movs	r3, #0
 8002928:	9301      	str	r3, [sp, #4]
 800292a:	2302      	movs	r3, #2
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002932:	2178      	movs	r1, #120	; 0x78
 8002934:	4822      	ldr	r0, [pc, #136]	; (80029c0 <FreqMenu_DrawPresetMenu+0x1398>)
 8002936:	f00b fecb 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800293a:	7b3b      	ldrb	r3, [r7, #12]
 800293c:	b29a      	uxth	r2, r3
 800293e:	2300      	movs	r3, #0
 8002940:	9301      	str	r3, [sp, #4]
 8002942:	2302      	movs	r3, #2
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800294a:	2178      	movs	r1, #120	; 0x78
 800294c:	481d      	ldr	r0, [pc, #116]	; (80029c4 <FreqMenu_DrawPresetMenu+0x139c>)
 800294e:	f00b febf 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002952:	7afb      	ldrb	r3, [r7, #11]
 8002954:	b29a      	uxth	r2, r3
 8002956:	2300      	movs	r3, #0
 8002958:	9301      	str	r3, [sp, #4]
 800295a:	2302      	movs	r3, #2
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002962:	2178      	movs	r1, #120	; 0x78
 8002964:	4818      	ldr	r0, [pc, #96]	; (80029c8 <FreqMenu_DrawPresetMenu+0x13a0>)
 8002966:	f00b feb3 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800296a:	7abb      	ldrb	r3, [r7, #10]
 800296c:	b29a      	uxth	r2, r3
 800296e:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002972:	9301      	str	r3, [sp, #4]
 8002974:	2302      	movs	r3, #2
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	2300      	movs	r3, #0
 800297a:	2178      	movs	r1, #120	; 0x78
 800297c:	4813      	ldr	r0, [pc, #76]	; (80029cc <FreqMenu_DrawPresetMenu+0x13a4>)
 800297e:	f00b fea7 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002982:	7a7b      	ldrb	r3, [r7, #9]
 8002984:	b29a      	uxth	r2, r3
 8002986:	2300      	movs	r3, #0
 8002988:	9301      	str	r3, [sp, #4]
 800298a:	2302      	movs	r3, #2
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002992:	2178      	movs	r1, #120	; 0x78
 8002994:	480e      	ldr	r0, [pc, #56]	; (80029d0 <FreqMenu_DrawPresetMenu+0x13a8>)
 8002996:	f00b fe9b 	bl	800e6d0 <ILI9341_Draw_Text>
			break;
 800299a:	e0d1      	b.n	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
 800299c:	08013760 	.word	0x08013760
 80029a0:	08013768 	.word	0x08013768
 80029a4:	08013770 	.word	0x08013770
 80029a8:	08013778 	.word	0x08013778
 80029ac:	08013780 	.word	0x08013780
 80029b0:	08013788 	.word	0x08013788
 80029b4:	08013790 	.word	0x08013790
 80029b8:	08013798 	.word	0x08013798
 80029bc:	080137a0 	.word	0x080137a0
 80029c0:	080137a8 	.word	0x080137a8
 80029c4:	080137b0 	.word	0x080137b0
 80029c8:	080137b8 	.word	0x080137b8
 80029cc:	080137c0 	.word	0x080137c0
 80029d0:	080137c8 	.word	0x080137c8
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029d4:	7bfb      	ldrb	r3, [r7, #15]
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	2300      	movs	r3, #0
 80029da:	9301      	str	r3, [sp, #4]
 80029dc:	2302      	movs	r3, #2
 80029de:	9300      	str	r3, [sp, #0]
 80029e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029e4:	2105      	movs	r1, #5
 80029e6:	4858      	ldr	r0, [pc, #352]	; (8002b48 <FreqMenu_DrawPresetMenu+0x1520>)
 80029e8:	f00b fe72 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029ec:	7bbb      	ldrb	r3, [r7, #14]
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	2300      	movs	r3, #0
 80029f2:	9301      	str	r3, [sp, #4]
 80029f4:	2302      	movs	r3, #2
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029fc:	2105      	movs	r1, #5
 80029fe:	4853      	ldr	r0, [pc, #332]	; (8002b4c <FreqMenu_DrawPresetMenu+0x1524>)
 8002a00:	f00b fe66 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a04:	7b7b      	ldrb	r3, [r7, #13]
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	2300      	movs	r3, #0
 8002a0a:	9301      	str	r3, [sp, #4]
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a14:	2105      	movs	r1, #5
 8002a16:	484e      	ldr	r0, [pc, #312]	; (8002b50 <FreqMenu_DrawPresetMenu+0x1528>)
 8002a18:	f00b fe5a 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a1c:	7b3b      	ldrb	r3, [r7, #12]
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	2300      	movs	r3, #0
 8002a22:	9301      	str	r3, [sp, #4]
 8002a24:	2302      	movs	r3, #2
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a2c:	2105      	movs	r1, #5
 8002a2e:	4849      	ldr	r0, [pc, #292]	; (8002b54 <FreqMenu_DrawPresetMenu+0x152c>)
 8002a30:	f00b fe4e 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a34:	7afb      	ldrb	r3, [r7, #11]
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	2300      	movs	r3, #0
 8002a3a:	9301      	str	r3, [sp, #4]
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a44:	2105      	movs	r1, #5
 8002a46:	4844      	ldr	r0, [pc, #272]	; (8002b58 <FreqMenu_DrawPresetMenu+0x1530>)
 8002a48:	f00b fe42 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a4c:	7abb      	ldrb	r3, [r7, #10]
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	2300      	movs	r3, #0
 8002a52:	9301      	str	r3, [sp, #4]
 8002a54:	2302      	movs	r3, #2
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a5c:	2105      	movs	r1, #5
 8002a5e:	483f      	ldr	r0, [pc, #252]	; (8002b5c <FreqMenu_DrawPresetMenu+0x1534>)
 8002a60:	f00b fe36 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a64:	7a7b      	ldrb	r3, [r7, #9]
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	2300      	movs	r3, #0
 8002a6a:	9301      	str	r3, [sp, #4]
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a74:	2105      	movs	r1, #5
 8002a76:	483a      	ldr	r0, [pc, #232]	; (8002b60 <FreqMenu_DrawPresetMenu+0x1538>)
 8002a78:	f00b fe2a 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a7c:	7bfb      	ldrb	r3, [r7, #15]
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	2300      	movs	r3, #0
 8002a82:	9301      	str	r3, [sp, #4]
 8002a84:	2302      	movs	r3, #2
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a8c:	2178      	movs	r1, #120	; 0x78
 8002a8e:	4835      	ldr	r0, [pc, #212]	; (8002b64 <FreqMenu_DrawPresetMenu+0x153c>)
 8002a90:	f00b fe1e 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a94:	7bbb      	ldrb	r3, [r7, #14]
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	2300      	movs	r3, #0
 8002a9a:	9301      	str	r3, [sp, #4]
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002aa4:	2178      	movs	r1, #120	; 0x78
 8002aa6:	4830      	ldr	r0, [pc, #192]	; (8002b68 <FreqMenu_DrawPresetMenu+0x1540>)
 8002aa8:	f00b fe12 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002aac:	7b7b      	ldrb	r3, [r7, #13]
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	9301      	str	r3, [sp, #4]
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002abc:	2178      	movs	r1, #120	; 0x78
 8002abe:	482b      	ldr	r0, [pc, #172]	; (8002b6c <FreqMenu_DrawPresetMenu+0x1544>)
 8002ac0:	f00b fe06 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ac4:	7b3b      	ldrb	r3, [r7, #12]
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	2300      	movs	r3, #0
 8002aca:	9301      	str	r3, [sp, #4]
 8002acc:	2302      	movs	r3, #2
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ad4:	2178      	movs	r1, #120	; 0x78
 8002ad6:	4826      	ldr	r0, [pc, #152]	; (8002b70 <FreqMenu_DrawPresetMenu+0x1548>)
 8002ad8:	f00b fdfa 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002adc:	7afb      	ldrb	r3, [r7, #11]
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	9301      	str	r3, [sp, #4]
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002aec:	2178      	movs	r1, #120	; 0x78
 8002aee:	4821      	ldr	r0, [pc, #132]	; (8002b74 <FreqMenu_DrawPresetMenu+0x154c>)
 8002af0:	f00b fdee 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002af4:	7abb      	ldrb	r3, [r7, #10]
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	2300      	movs	r3, #0
 8002afa:	9301      	str	r3, [sp, #4]
 8002afc:	2302      	movs	r3, #2
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b04:	2178      	movs	r1, #120	; 0x78
 8002b06:	481c      	ldr	r0, [pc, #112]	; (8002b78 <FreqMenu_DrawPresetMenu+0x1550>)
 8002b08:	f00b fde2 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002b0c:	7a7b      	ldrb	r3, [r7, #9]
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002b14:	9301      	str	r3, [sp, #4]
 8002b16:	2302      	movs	r3, #2
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	2178      	movs	r1, #120	; 0x78
 8002b1e:	4817      	ldr	r0, [pc, #92]	; (8002b7c <FreqMenu_DrawPresetMenu+0x1554>)
 8002b20:	f00b fdd6 	bl	800e6d0 <ILI9341_Draw_Text>
			break;
 8002b24:	bf00      	nop
 8002b26:	e00b      	b.n	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8002b28:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002b2c:	9301      	str	r3, [sp, #4]
 8002b2e:	2301      	movs	r3, #1
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	2300      	movs	r3, #0
 8002b34:	22b4      	movs	r2, #180	; 0xb4
 8002b36:	2105      	movs	r1, #5
 8002b38:	4811      	ldr	r0, [pc, #68]	; (8002b80 <FreqMenu_DrawPresetMenu+0x1558>)
 8002b3a:	f00b fdc9 	bl	800e6d0 <ILI9341_Draw_Text>
}
 8002b3e:	e7ff      	b.n	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
 8002b40:	bf00      	nop
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	08013760 	.word	0x08013760
 8002b4c:	08013768 	.word	0x08013768
 8002b50:	08013770 	.word	0x08013770
 8002b54:	08013778 	.word	0x08013778
 8002b58:	08013780 	.word	0x08013780
 8002b5c:	08013788 	.word	0x08013788
 8002b60:	08013790 	.word	0x08013790
 8002b64:	08013798 	.word	0x08013798
 8002b68:	080137a0 	.word	0x080137a0
 8002b6c:	080137a8 	.word	0x080137a8
 8002b70:	080137b0 	.word	0x080137b0
 8002b74:	080137b8 	.word	0x080137b8
 8002b78:	080137c0 	.word	0x080137c0
 8002b7c:	080137c8 	.word	0x080137c8
 8002b80:	080137d4 	.word	0x080137d4

08002b84 <FreqMenu_DrawAdjustMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawAdjustMenu()
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->ADJUST", 5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002b8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b8e:	9301      	str	r3, [sp, #4]
 8002b90:	2302      	movs	r3, #2
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	2300      	movs	r3, #0
 8002b96:	220a      	movs	r2, #10
 8002b98:	2105      	movs	r1, #5
 8002b9a:	4804      	ldr	r0, [pc, #16]	; (8002bac <FreqMenu_DrawAdjustMenu+0x28>)
 8002b9c:	f00b fd98 	bl	800e6d0 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8002ba0:	f7fe f9bc 	bl	8000f1c <DM_DisplayFormattedOutput>
	//snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
	if(DM_AddDigitPadding((uint16_t)FreqO_GetOutputFreq(), freq, sizeof(freq)) == 0)
		ILI9341_Draw_Text(freq, 250, 150, WHITE, 1, BLACK);
*/

}
 8002ba4:	bf00      	nop
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	08013804 	.word	0x08013804

08002bb0 <FreqMenu_DrawSweepMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawSweepMenu()
{
 8002bb0:	b5b0      	push	{r4, r5, r7, lr}
 8002bb2:	b0a0      	sub	sp, #128	; 0x80
 8002bb4:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->SWEEP", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002bb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bba:	9301      	str	r3, [sp, #4]
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	220a      	movs	r2, #10
 8002bc4:	2105      	movs	r1, #5
 8002bc6:	48a2      	ldr	r0, [pc, #648]	; (8002e50 <FreqMenu_DrawSweepMenu+0x2a0>)
 8002bc8:	f00b fd82 	bl	800e6d0 <ILI9341_Draw_Text>


	// draw enabled status


	char enabled_text[20] = "";
 8002bcc:	2300      	movs	r3, #0
 8002bce:	667b      	str	r3, [r7, #100]	; 0x64
 8002bd0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	60da      	str	r2, [r3, #12]
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8002bde:	4b9d      	ldr	r3, [pc, #628]	; (8002e54 <FreqMenu_DrawSweepMenu+0x2a4>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d109      	bne.n	8002bfe <FreqMenu_DrawSweepMenu+0x4e>
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  RUNNING");
 8002bea:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002bee:	4a9a      	ldr	r2, [pc, #616]	; (8002e58 <FreqMenu_DrawSweepMenu+0x2a8>)
 8002bf0:	461c      	mov	r4, r3
 8002bf2:	4615      	mov	r5, r2
 8002bf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bf8:	682b      	ldr	r3, [r5, #0]
 8002bfa:	7023      	strb	r3, [r4, #0]
 8002bfc:	e008      	b.n	8002c10 <FreqMenu_DrawSweepMenu+0x60>
	}
	else
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  STOPPED");
 8002bfe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002c02:	4a96      	ldr	r2, [pc, #600]	; (8002e5c <FreqMenu_DrawSweepMenu+0x2ac>)
 8002c04:	461c      	mov	r4, r3
 8002c06:	4615      	mov	r5, r2
 8002c08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c0c:	682b      	ldr	r3, [r5, #0]
 8002c0e:	7023      	strb	r3, [r4, #0]
	}

	ILI9341_Draw_Text(enabled_text, 5, 40, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c10:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8002c14:	2300      	movs	r3, #0
 8002c16:	9301      	str	r3, [sp, #4]
 8002c18:	2302      	movs	r3, #2
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c20:	2228      	movs	r2, #40	; 0x28
 8002c22:	2105      	movs	r1, #5
 8002c24:	f00b fd54 	bl	800e6d0 <ILI9341_Draw_Text>

	// draw output freq status
	char out_hertz[25] = "";
 8002c28:	2300      	movs	r3, #0
 8002c2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c2c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	605a      	str	r2, [r3, #4]
 8002c36:	609a      	str	r2, [r3, #8]
 8002c38:	60da      	str	r2, [r3, #12]
 8002c3a:	611a      	str	r2, [r3, #16]
 8002c3c:	751a      	strb	r2, [r3, #20]
	snprintf(out_hertz, sizeof(out_hertz), "OUTPUT: %7.2f Hz", SM_GetOutputInHertz());
 8002c3e:	f003 fc0b 	bl	8006458 <SM_GetOutputInHertz>
 8002c42:	ee10 3a10 	vmov	r3, s0
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fd fca6 	bl	8000598 <__aeabi_f2d>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	460c      	mov	r4, r1
 8002c50:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002c54:	e9cd 3400 	strd	r3, r4, [sp]
 8002c58:	4a81      	ldr	r2, [pc, #516]	; (8002e60 <FreqMenu_DrawSweepMenu+0x2b0>)
 8002c5a:	2119      	movs	r1, #25
 8002c5c:	f00d f8f4 	bl	800fe48 <sniprintf>
	ILI9341_Draw_Text(out_hertz, 5, 60, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c60:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002c64:	2300      	movs	r3, #0
 8002c66:	9301      	str	r3, [sp, #4]
 8002c68:	2302      	movs	r3, #2
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c70:	223c      	movs	r2, #60	; 0x3c
 8002c72:	2105      	movs	r1, #5
 8002c74:	f00b fd2c 	bl	800e6d0 <ILI9341_Draw_Text>
		//snprintf(dir_text, sizeof(dir_text), "DIRECTION:  N/A");
	}
	else
	{
*/
		ILI9341_Draw_Text("SWEEP MODE:", 5, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c78:	2300      	movs	r3, #0
 8002c7a:	9301      	str	r3, [sp, #4]
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c84:	2264      	movs	r2, #100	; 0x64
 8002c86:	2105      	movs	r1, #5
 8002c88:	4876      	ldr	r0, [pc, #472]	; (8002e64 <FreqMenu_DrawSweepMenu+0x2b4>)
 8002c8a:	f00b fd21 	bl	800e6d0 <ILI9341_Draw_Text>

		// get direction
		if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 8002c8e:	4b71      	ldr	r3, [pc, #452]	; (8002e54 <FreqMenu_DrawSweepMenu+0x2a4>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0310 	and.w	r3, r3, #16
 8002c96:	2b10      	cmp	r3, #16
 8002c98:	d117      	bne.n	8002cca <FreqMenu_DrawSweepMenu+0x11a>
		{
			ILI9341_Draw_Text("UP", 235, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	9301      	str	r3, [sp, #4]
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ca6:	2264      	movs	r2, #100	; 0x64
 8002ca8:	21eb      	movs	r1, #235	; 0xeb
 8002caa:	486f      	ldr	r0, [pc, #444]	; (8002e68 <FreqMenu_DrawSweepMenu+0x2b8>)
 8002cac:	f00b fd10 	bl	800e6d0 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("DOWN", 265, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002cb0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002cb4:	9301      	str	r3, [sp, #4]
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	2300      	movs	r3, #0
 8002cbc:	2264      	movs	r2, #100	; 0x64
 8002cbe:	f240 1109 	movw	r1, #265	; 0x109
 8002cc2:	486a      	ldr	r0, [pc, #424]	; (8002e6c <FreqMenu_DrawSweepMenu+0x2bc>)
 8002cc4:	f00b fd04 	bl	800e6d0 <ILI9341_Draw_Text>
 8002cc8:	e016      	b.n	8002cf8 <FreqMenu_DrawSweepMenu+0x148>
		}
		else
		{
			ILI9341_Draw_Text("DOWN", 265, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002cca:	2300      	movs	r3, #0
 8002ccc:	9301      	str	r3, [sp, #4]
 8002cce:	2302      	movs	r3, #2
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002cd6:	2264      	movs	r2, #100	; 0x64
 8002cd8:	f240 1109 	movw	r1, #265	; 0x109
 8002cdc:	4863      	ldr	r0, [pc, #396]	; (8002e6c <FreqMenu_DrawSweepMenu+0x2bc>)
 8002cde:	f00b fcf7 	bl	800e6d0 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("UP", 235, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002ce2:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002ce6:	9301      	str	r3, [sp, #4]
 8002ce8:	2302      	movs	r3, #2
 8002cea:	9300      	str	r3, [sp, #0]
 8002cec:	2300      	movs	r3, #0
 8002cee:	2264      	movs	r2, #100	; 0x64
 8002cf0:	21eb      	movs	r1, #235	; 0xeb
 8002cf2:	485d      	ldr	r0, [pc, #372]	; (8002e68 <FreqMenu_DrawSweepMenu+0x2b8>)
 8002cf4:	f00b fcec 	bl	800e6d0 <ILI9341_Draw_Text>




	// draw rate status
	if(theCurrentEncoderSweepFunction == ENCODER_SWEEP_SPEED_FUNCTION)
 8002cf8:	4b5d      	ldr	r3, [pc, #372]	; (8002e70 <FreqMenu_DrawSweepMenu+0x2c0>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10b      	bne.n	8002d18 <FreqMenu_DrawSweepMenu+0x168>
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002d00:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002d04:	9301      	str	r3, [sp, #4]
 8002d06:	2302      	movs	r3, #2
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	2278      	movs	r2, #120	; 0x78
 8002d0e:	2105      	movs	r1, #5
 8002d10:	4858      	ldr	r0, [pc, #352]	; (8002e74 <FreqMenu_DrawSweepMenu+0x2c4>)
 8002d12:	f00b fcdd 	bl	800e6d0 <ILI9341_Draw_Text>
 8002d16:	e00a      	b.n	8002d2e <FreqMenu_DrawSweepMenu+0x17e>
	}
	else
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d18:	2300      	movs	r3, #0
 8002d1a:	9301      	str	r3, [sp, #4]
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d24:	2278      	movs	r2, #120	; 0x78
 8002d26:	2105      	movs	r1, #5
 8002d28:	4852      	ldr	r0, [pc, #328]	; (8002e74 <FreqMenu_DrawSweepMenu+0x2c4>)
 8002d2a:	f00b fcd1 	bl	800e6d0 <ILI9341_Draw_Text>
	}
	char arr_text[25] = "";
 8002d2e:	2300      	movs	r3, #0
 8002d30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d36:	2200      	movs	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	605a      	str	r2, [r3, #4]
 8002d3c:	609a      	str	r2, [r3, #8]
 8002d3e:	60da      	str	r2, [r3, #12]
 8002d40:	611a      	str	r2, [r3, #16]
 8002d42:	751a      	strb	r2, [r3, #20]
	snprintf(arr_text, sizeof(arr_text), "%8.3f Hz", calculated_sweep_in_hertz);
 8002d44:	4b4c      	ldr	r3, [pc, #304]	; (8002e78 <FreqMenu_DrawSweepMenu+0x2c8>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7fd fc25 	bl	8000598 <__aeabi_f2d>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	460c      	mov	r4, r1
 8002d52:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002d56:	e9cd 3400 	strd	r3, r4, [sp]
 8002d5a:	4a48      	ldr	r2, [pc, #288]	; (8002e7c <FreqMenu_DrawSweepMenu+0x2cc>)
 8002d5c:	2119      	movs	r1, #25
 8002d5e:	f00d f873 	bl	800fe48 <sniprintf>
	ILI9341_Draw_Text(arr_text, 182, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d62:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002d66:	2300      	movs	r3, #0
 8002d68:	9301      	str	r3, [sp, #4]
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d72:	2278      	movs	r2, #120	; 0x78
 8002d74:	21b6      	movs	r1, #182	; 0xb6
 8002d76:	f00b fcab 	bl	800e6d0 <ILI9341_Draw_Text>


	// draw upper sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_UP) )
 8002d7a:	4b3d      	ldr	r3, [pc, #244]	; (8002e70 <FreqMenu_DrawSweepMenu+0x2c0>)
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d10f      	bne.n	8002da2 <FreqMenu_DrawSweepMenu+0x1f2>
 8002d82:	4b3f      	ldr	r3, [pc, #252]	; (8002e80 <FreqMenu_DrawSweepMenu+0x2d0>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10b      	bne.n	8002da2 <FreqMenu_DrawSweepMenu+0x1f2>
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);	// highlighted
 8002d8a:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002d8e:	9301      	str	r3, [sp, #4]
 8002d90:	2302      	movs	r3, #2
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	2300      	movs	r3, #0
 8002d96:	228c      	movs	r2, #140	; 0x8c
 8002d98:	2105      	movs	r1, #5
 8002d9a:	483a      	ldr	r0, [pc, #232]	; (8002e84 <FreqMenu_DrawSweepMenu+0x2d4>)
 8002d9c:	f00b fc98 	bl	800e6d0 <ILI9341_Draw_Text>
 8002da0:	e00a      	b.n	8002db8 <FreqMenu_DrawSweepMenu+0x208>
		//ILI9341_Draw_Arrow(ARROW_UP, 280, 120, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002da2:	2300      	movs	r3, #0
 8002da4:	9301      	str	r3, [sp, #4]
 8002da6:	2302      	movs	r3, #2
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002dae:	228c      	movs	r2, #140	; 0x8c
 8002db0:	2105      	movs	r1, #5
 8002db2:	4834      	ldr	r0, [pc, #208]	; (8002e84 <FreqMenu_DrawSweepMenu+0x2d4>)
 8002db4:	f00b fc8c 	bl	800e6d0 <ILI9341_Draw_Text>
	}
	char sweep_lower_text[20] = "";
 8002db8:	2300      	movs	r3, #0
 8002dba:	61bb      	str	r3, [r7, #24]
 8002dbc:	f107 031c 	add.w	r3, r7, #28
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	605a      	str	r2, [r3, #4]
 8002dc6:	609a      	str	r2, [r3, #8]
 8002dc8:	60da      	str	r2, [r3, #12]
	snprintf(sweep_lower_text, sizeof(sweep_lower_text), "%9.2f  Hz", SM_ConvertPeriodToHertz(sweep_lower_bounds_shortest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP);
 8002dca:	4b2f      	ldr	r3, [pc, #188]	; (8002e88 <FreqMenu_DrawSweepMenu+0x2d8>)
 8002dcc:	edd3 7a00 	vldr	s15, [r3]
 8002dd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	4619      	mov	r1, r3
 8002dde:	ee17 0a90 	vmov	r0, s15
 8002de2:	f003 fb7f 	bl	80064e4 <SM_ConvertPeriodToHertz>
 8002de6:	eeb0 7a40 	vmov.f32	s14, s0
 8002dea:	eddf 7a28 	vldr	s15, [pc, #160]	; 8002e8c <FreqMenu_DrawSweepMenu+0x2dc>
 8002dee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002df2:	ee16 0a90 	vmov	r0, s13
 8002df6:	f7fd fbcf 	bl	8000598 <__aeabi_f2d>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	460c      	mov	r4, r1
 8002dfe:	f107 0018 	add.w	r0, r7, #24
 8002e02:	e9cd 3400 	strd	r3, r4, [sp]
 8002e06:	4a22      	ldr	r2, [pc, #136]	; (8002e90 <FreqMenu_DrawSweepMenu+0x2e0>)
 8002e08:	2114      	movs	r1, #20
 8002e0a:	f00d f81d 	bl	800fe48 <sniprintf>
	ILI9341_Draw_Text(sweep_lower_text, 158, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e0e:	f107 0018 	add.w	r0, r7, #24
 8002e12:	2300      	movs	r3, #0
 8002e14:	9301      	str	r3, [sp, #4]
 8002e16:	2302      	movs	r3, #2
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e1e:	228c      	movs	r2, #140	; 0x8c
 8002e20:	219e      	movs	r1, #158	; 0x9e
 8002e22:	f00b fc55 	bl	800e6d0 <ILI9341_Draw_Text>


	// draw lower sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_DOWN) )
 8002e26:	4b12      	ldr	r3, [pc, #72]	; (8002e70 <FreqMenu_DrawSweepMenu+0x2c0>)
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d134      	bne.n	8002e98 <FreqMenu_DrawSweepMenu+0x2e8>
 8002e2e:	4b14      	ldr	r3, [pc, #80]	; (8002e80 <FreqMenu_DrawSweepMenu+0x2d0>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d130      	bne.n	8002e98 <FreqMenu_DrawSweepMenu+0x2e8>
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR); 	// highlighted
 8002e36:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002e3a:	9301      	str	r3, [sp, #4]
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	2300      	movs	r3, #0
 8002e42:	22a0      	movs	r2, #160	; 0xa0
 8002e44:	2105      	movs	r1, #5
 8002e46:	4813      	ldr	r0, [pc, #76]	; (8002e94 <FreqMenu_DrawSweepMenu+0x2e4>)
 8002e48:	f00b fc42 	bl	800e6d0 <ILI9341_Draw_Text>
 8002e4c:	e02f      	b.n	8002eae <FreqMenu_DrawSweepMenu+0x2fe>
 8002e4e:	bf00      	nop
 8002e50:	08013818 	.word	0x08013818
 8002e54:	40000c00 	.word	0x40000c00
 8002e58:	0801382c 	.word	0x0801382c
 8002e5c:	08013840 	.word	0x08013840
 8002e60:	08013854 	.word	0x08013854
 8002e64:	08013868 	.word	0x08013868
 8002e68:	08013874 	.word	0x08013874
 8002e6c:	08013878 	.word	0x08013878
 8002e70:	20001e55 	.word	0x20001e55
 8002e74:	08013880 	.word	0x08013880
 8002e78:	20001eac 	.word	0x20001eac
 8002e7c:	08013890 	.word	0x08013890
 8002e80:	20001e54 	.word	0x20001e54
 8002e84:	0801389c 	.word	0x0801389c
 8002e88:	20000120 	.word	0x20000120
 8002e8c:	42f00000 	.word	0x42f00000
 8002e90:	080138ac 	.word	0x080138ac
 8002e94:	080138b8 	.word	0x080138b8
		//ILI9341_Draw_Arrow(ARROW_DOWN, 280, 130, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e98:	2300      	movs	r3, #0
 8002e9a:	9301      	str	r3, [sp, #4]
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	9300      	str	r3, [sp, #0]
 8002ea0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ea4:	22a0      	movs	r2, #160	; 0xa0
 8002ea6:	2105      	movs	r1, #5
 8002ea8:	484d      	ldr	r0, [pc, #308]	; (8002fe0 <FreqMenu_DrawSweepMenu+0x430>)
 8002eaa:	f00b fc11 	bl	800e6d0 <ILI9341_Draw_Text>
	}
	char sweep_upper_text[20] = "";
 8002eae:	2300      	movs	r3, #0
 8002eb0:	607b      	str	r3, [r7, #4]
 8002eb2:	f107 0308 	add.w	r3, r7, #8
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	605a      	str	r2, [r3, #4]
 8002ebc:	609a      	str	r2, [r3, #8]
 8002ebe:	60da      	str	r2, [r3, #12]
	snprintf(sweep_upper_text, sizeof(sweep_upper_text), "%8.2f  Hz", SM_ConvertPeriodToHertz(sweep_upper_bounds_longest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP );
 8002ec0:	4b48      	ldr	r3, [pc, #288]	; (8002fe4 <FreqMenu_DrawSweepMenu+0x434>)
 8002ec2:	edd3 7a00 	vldr	s15, [r3]
 8002ec6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002eca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	ee17 0a90 	vmov	r0, s15
 8002ed8:	f003 fb04 	bl	80064e4 <SM_ConvertPeriodToHertz>
 8002edc:	eeb0 7a40 	vmov.f32	s14, s0
 8002ee0:	eddf 7a41 	vldr	s15, [pc, #260]	; 8002fe8 <FreqMenu_DrawSweepMenu+0x438>
 8002ee4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002ee8:	ee16 0a90 	vmov	r0, s13
 8002eec:	f7fd fb54 	bl	8000598 <__aeabi_f2d>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	460c      	mov	r4, r1
 8002ef4:	1d38      	adds	r0, r7, #4
 8002ef6:	e9cd 3400 	strd	r3, r4, [sp]
 8002efa:	4a3c      	ldr	r2, [pc, #240]	; (8002fec <FreqMenu_DrawSweepMenu+0x43c>)
 8002efc:	2114      	movs	r1, #20
 8002efe:	f00c ffa3 	bl	800fe48 <sniprintf>
	ILI9341_Draw_Text(sweep_upper_text, 170, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002f02:	1d38      	adds	r0, r7, #4
 8002f04:	2300      	movs	r3, #0
 8002f06:	9301      	str	r3, [sp, #4]
 8002f08:	2302      	movs	r3, #2
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002f10:	22a0      	movs	r2, #160	; 0xa0
 8002f12:	21aa      	movs	r1, #170	; 0xaa
 8002f14:	f00b fbdc 	bl	800e6d0 <ILI9341_Draw_Text>


	// draw bottom menu button text
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8002f18:	4b35      	ldr	r3, [pc, #212]	; (8002ff0 <FreqMenu_DrawSweepMenu+0x440>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d10b      	bne.n	8002f3c <FreqMenu_DrawSweepMenu+0x38c>
		ILI9341_Draw_Text("PAUSE ", 6, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8002f24:	f240 23fd 	movw	r3, #765	; 0x2fd
 8002f28:	9301      	str	r3, [sp, #4]
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	2300      	movs	r3, #0
 8002f30:	22d5      	movs	r2, #213	; 0xd5
 8002f32:	2106      	movs	r1, #6
 8002f34:	482f      	ldr	r0, [pc, #188]	; (8002ff4 <FreqMenu_DrawSweepMenu+0x444>)
 8002f36:	f00b fbcb 	bl	800e6d0 <ILI9341_Draw_Text>
 8002f3a:	e00a      	b.n	8002f52 <FreqMenu_DrawSweepMenu+0x3a2>
	else
		ILI9341_Draw_Text("RESUME", 5, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8002f3c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8002f40:	9301      	str	r3, [sp, #4]
 8002f42:	2302      	movs	r3, #2
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	2300      	movs	r3, #0
 8002f48:	22d5      	movs	r2, #213	; 0xd5
 8002f4a:	2105      	movs	r1, #5
 8002f4c:	482a      	ldr	r0, [pc, #168]	; (8002ff8 <FreqMenu_DrawSweepMenu+0x448>)
 8002f4e:	f00b fbbf 	bl	800e6d0 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	104,	204, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8002f52:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8002f56:	9301      	str	r3, [sp, #4]
 8002f58:	2302      	movs	r3, #2
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	22cc      	movs	r2, #204	; 0xcc
 8002f60:	2168      	movs	r1, #104	; 0x68
 8002f62:	4826      	ldr	r0, [pc, #152]	; (8002ffc <FreqMenu_DrawSweepMenu+0x44c>)
 8002f64:	f00b fbb4 	bl	800e6d0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("MODE",	97, 	222, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8002f68:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8002f6c:	9301      	str	r3, [sp, #4]
 8002f6e:	2302      	movs	r3, #2
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	2300      	movs	r3, #0
 8002f74:	22de      	movs	r2, #222	; 0xde
 8002f76:	2161      	movs	r1, #97	; 0x61
 8002f78:	4821      	ldr	r0, [pc, #132]	; (8003000 <FreqMenu_DrawSweepMenu+0x450>)
 8002f7a:	f00b fba9 	bl	800e6d0 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	183,	204, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8002f7e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002f82:	9301      	str	r3, [sp, #4]
 8002f84:	2302      	movs	r3, #2
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	2300      	movs	r3, #0
 8002f8a:	22cc      	movs	r2, #204	; 0xcc
 8002f8c:	21b7      	movs	r1, #183	; 0xb7
 8002f8e:	481b      	ldr	r0, [pc, #108]	; (8002ffc <FreqMenu_DrawSweepMenu+0x44c>)
 8002f90:	f00b fb9e 	bl	800e6d0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SPEED",	173, 	222, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8002f94:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002f98:	9301      	str	r3, [sp, #4]
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	22de      	movs	r2, #222	; 0xde
 8002fa2:	21ad      	movs	r1, #173	; 0xad
 8002fa4:	4817      	ldr	r0, [pc, #92]	; (8003004 <FreqMenu_DrawSweepMenu+0x454>)
 8002fa6:	f00b fb93 	bl	800e6d0 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	263, 	204, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8002faa:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002fae:	9301      	str	r3, [sp, #4]
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	22cc      	movs	r2, #204	; 0xcc
 8002fb8:	f240 1107 	movw	r1, #263	; 0x107
 8002fbc:	480f      	ldr	r0, [pc, #60]	; (8002ffc <FreqMenu_DrawSweepMenu+0x44c>)
 8002fbe:	f00b fb87 	bl	800e6d0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("LIMIT", 	252, 	222, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8002fc2:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002fc6:	9301      	str	r3, [sp, #4]
 8002fc8:	2302      	movs	r3, #2
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	2300      	movs	r3, #0
 8002fce:	22de      	movs	r2, #222	; 0xde
 8002fd0:	21fc      	movs	r1, #252	; 0xfc
 8002fd2:	480d      	ldr	r0, [pc, #52]	; (8003008 <FreqMenu_DrawSweepMenu+0x458>)
 8002fd4:	f00b fb7c 	bl	800e6d0 <ILI9341_Draw_Text>
}
 8002fd8:	bf00      	nop
 8002fda:	3778      	adds	r7, #120	; 0x78
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bdb0      	pop	{r4, r5, r7, pc}
 8002fe0:	080138b8 	.word	0x080138b8
 8002fe4:	20000124 	.word	0x20000124
 8002fe8:	42f00000 	.word	0x42f00000
 8002fec:	080138c8 	.word	0x080138c8
 8002ff0:	40000c00 	.word	0x40000c00
 8002ff4:	080138d4 	.word	0x080138d4
 8002ff8:	080138dc 	.word	0x080138dc
 8002ffc:	080138e4 	.word	0x080138e4
 8003000:	080138e8 	.word	0x080138e8
 8003004:	080138f0 	.word	0x080138f0
 8003008:	080138f8 	.word	0x080138f8

0800300c <FuncMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMenu(eFuncMenu_Status pMenu)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003016:	79fb      	ldrb	r3, [r7, #7]
 8003018:	2b02      	cmp	r3, #2
 800301a:	d007      	beq.n	800302c <FuncMenu_DrawMenu+0x20>
 800301c:	2b03      	cmp	r3, #3
 800301e:	d009      	beq.n	8003034 <FuncMenu_DrawMenu+0x28>
 8003020:	2b01      	cmp	r3, #1
 8003022:	d000      	beq.n	8003026 <FuncMenu_DrawMenu+0x1a>
		case ENABLE_FUNC_Aux_MENU:
			FuncMenu_DrawOutputMenu(AUX_CHANNEL);
			break;

		default:
			break;
 8003024:	e00a      	b.n	800303c <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawMainMenu();
 8003026:	f000 f80d 	bl	8003044 <FuncMenu_DrawMainMenu>
			break;
 800302a:	e007      	b.n	800303c <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(SIGNAL_CHANNEL);
 800302c:	2000      	movs	r0, #0
 800302e:	f000 f851 	bl	80030d4 <FuncMenu_DrawOutputMenu>
			break;
 8003032:	e003      	b.n	800303c <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(AUX_CHANNEL);
 8003034:	2001      	movs	r0, #1
 8003036:	f000 f84d 	bl	80030d4 <FuncMenu_DrawOutputMenu>
			break;
 800303a:	bf00      	nop

	}
}
 800303c:	bf00      	nop
 800303e:	3708      	adds	r7, #8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <FuncMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMainMenu()
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FUNC", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 800304a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800304e:	9301      	str	r3, [sp, #4]
 8003050:	2302      	movs	r3, #2
 8003052:	9300      	str	r3, [sp, #0]
 8003054:	2300      	movs	r3, #0
 8003056:	220a      	movs	r2, #10
 8003058:	210a      	movs	r1, #10
 800305a:	481a      	ldr	r0, [pc, #104]	; (80030c4 <FuncMenu_DrawMainMenu+0x80>)
 800305c:	f00b fb38 	bl	800e6d0 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003060:	f7fd ff5c 	bl	8000f1c <DM_DisplayFormattedOutput>

 	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003064:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003068:	9301      	str	r3, [sp, #4]
 800306a:	2302      	movs	r3, #2
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	2300      	movs	r3, #0
 8003070:	22d2      	movs	r2, #210	; 0xd2
 8003072:	2105      	movs	r1, #5
 8003074:	4814      	ldr	r0, [pc, #80]	; (80030c8 <FuncMenu_DrawMainMenu+0x84>)
 8003076:	f00b fb2b 	bl	800e6d0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("AUX", 	100,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800307a:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800307e:	9301      	str	r3, [sp, #4]
 8003080:	2302      	movs	r3, #2
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	2300      	movs	r3, #0
 8003086:	22d2      	movs	r2, #210	; 0xd2
 8003088:	2164      	movs	r1, #100	; 0x64
 800308a:	4810      	ldr	r0, [pc, #64]	; (80030cc <FuncMenu_DrawMainMenu+0x88>)
 800308c:	f00b fb20 	bl	800e6d0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003090:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003094:	9301      	str	r3, [sp, #4]
 8003096:	2302      	movs	r3, #2
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	2300      	movs	r3, #0
 800309c:	22d2      	movs	r2, #210	; 0xd2
 800309e:	21af      	movs	r1, #175	; 0xaf
 80030a0:	480b      	ldr	r0, [pc, #44]	; (80030d0 <FuncMenu_DrawMainMenu+0x8c>)
 80030a2:	f00b fb15 	bl	800e6d0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80030a6:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80030aa:	9301      	str	r3, [sp, #4]
 80030ac:	2302      	movs	r3, #2
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	2300      	movs	r3, #0
 80030b2:	22d2      	movs	r2, #210	; 0xd2
 80030b4:	f44f 7182 	mov.w	r1, #260	; 0x104
 80030b8:	4805      	ldr	r0, [pc, #20]	; (80030d0 <FuncMenu_DrawMainMenu+0x8c>)
 80030ba:	f00b fb09 	bl	800e6d0 <ILI9341_Draw_Text>
}
 80030be:	bf00      	nop
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	08013900 	.word	0x08013900
 80030c8:	0801390c 	.word	0x0801390c
 80030cc:	08013914 	.word	0x08013914
 80030d0:	08013918 	.word	0x08013918

080030d4 <FuncMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawOutputMenu(eOutputChannel_t pOutChan)
{
 80030d4:	b590      	push	{r4, r7, lr}
 80030d6:	b089      	sub	sp, #36	; 0x24
 80030d8:	af02      	add	r7, sp, #8
 80030da:	4603      	mov	r3, r0
 80030dc:	71fb      	strb	r3, [r7, #7]
	if(pOutChan)
 80030de:	79fb      	ldrb	r3, [r7, #7]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00b      	beq.n	80030fc <FuncMenu_DrawOutputMenu+0x28>
		ILI9341_Draw_Text("OUT->FUNC->AUX", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80030e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030e8:	9301      	str	r3, [sp, #4]
 80030ea:	2302      	movs	r3, #2
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	2300      	movs	r3, #0
 80030f0:	220a      	movs	r2, #10
 80030f2:	210a      	movs	r1, #10
 80030f4:	4896      	ldr	r0, [pc, #600]	; (8003350 <FuncMenu_DrawOutputMenu+0x27c>)
 80030f6:	f00b faeb 	bl	800e6d0 <ILI9341_Draw_Text>
 80030fa:	e00a      	b.n	8003112 <FuncMenu_DrawOutputMenu+0x3e>
	else
		ILI9341_Draw_Text("OUT->FUNC->SIG", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80030fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003100:	9301      	str	r3, [sp, #4]
 8003102:	2302      	movs	r3, #2
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	2300      	movs	r3, #0
 8003108:	220a      	movs	r2, #10
 800310a:	210a      	movs	r1, #10
 800310c:	4891      	ldr	r0, [pc, #580]	; (8003354 <FuncMenu_DrawOutputMenu+0x280>)
 800310e:	f00b fadf 	bl	800e6d0 <ILI9341_Draw_Text>

	//FunctionProfile_t *func_profileTmp = FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(pOutChan)->func_profile;
 8003112:	79fb      	ldrb	r3, [r7, #7]
 8003114:	4618      	mov	r0, r3
 8003116:	f002 ff07 	bl	8005f28 <SM_GetOutputChannel>
 800311a:	4603      	mov	r3, r0
 800311c:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003120:	617b      	str	r3, [r7, #20]
	if(func_profileTmp)
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 8424 	beq.w	8003972 <FuncMenu_DrawOutputMenu+0x89e>
	{
		switch(func_profileTmp->func)
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	2b06      	cmp	r3, #6
 8003130:	f200 841f 	bhi.w	8003972 <FuncMenu_DrawOutputMenu+0x89e>
 8003134:	a201      	add	r2, pc, #4	; (adr r2, 800313c <FuncMenu_DrawOutputMenu+0x68>)
 8003136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313a:	bf00      	nop
 800313c:	08003159 	.word	0x08003159
 8003140:	08003255 	.word	0x08003255
 8003144:	08003379 	.word	0x08003379
 8003148:	08003475 	.word	0x08003475
 800314c:	08003571 	.word	0x08003571
 8003150:	080036a9 	.word	0x080036a9
 8003154:	080037bb 	.word	0x080037bb
		{
			case SINE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003158:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800315c:	9301      	str	r3, [sp, #4]
 800315e:	2302      	movs	r3, #2
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	2300      	movs	r3, #0
 8003164:	2232      	movs	r2, #50	; 0x32
 8003166:	210a      	movs	r1, #10
 8003168:	487b      	ldr	r0, [pc, #492]	; (8003358 <FuncMenu_DrawOutputMenu+0x284>)
 800316a:	f00b fab1 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800316e:	2300      	movs	r3, #0
 8003170:	9301      	str	r3, [sp, #4]
 8003172:	2302      	movs	r3, #2
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800317a:	2246      	movs	r2, #70	; 0x46
 800317c:	210a      	movs	r1, #10
 800317e:	4877      	ldr	r0, [pc, #476]	; (800335c <FuncMenu_DrawOutputMenu+0x288>)
 8003180:	f00b faa6 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003184:	2300      	movs	r3, #0
 8003186:	9301      	str	r3, [sp, #4]
 8003188:	2302      	movs	r3, #2
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003190:	225a      	movs	r2, #90	; 0x5a
 8003192:	210a      	movs	r1, #10
 8003194:	4872      	ldr	r0, [pc, #456]	; (8003360 <FuncMenu_DrawOutputMenu+0x28c>)
 8003196:	f00b fa9b 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800319a:	2300      	movs	r3, #0
 800319c:	9301      	str	r3, [sp, #4]
 800319e:	2302      	movs	r3, #2
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80031a6:	226e      	movs	r2, #110	; 0x6e
 80031a8:	210a      	movs	r1, #10
 80031aa:	486e      	ldr	r0, [pc, #440]	; (8003364 <FuncMenu_DrawOutputMenu+0x290>)
 80031ac:	f00b fa90 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80031b0:	2300      	movs	r3, #0
 80031b2:	9301      	str	r3, [sp, #4]
 80031b4:	2302      	movs	r3, #2
 80031b6:	9300      	str	r3, [sp, #0]
 80031b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80031bc:	2282      	movs	r2, #130	; 0x82
 80031be:	210a      	movs	r1, #10
 80031c0:	4869      	ldr	r0, [pc, #420]	; (8003368 <FuncMenu_DrawOutputMenu+0x294>)
 80031c2:	f00b fa85 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80031c6:	2300      	movs	r3, #0
 80031c8:	9301      	str	r3, [sp, #4]
 80031ca:	2302      	movs	r3, #2
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80031d2:	2296      	movs	r2, #150	; 0x96
 80031d4:	210a      	movs	r1, #10
 80031d6:	4865      	ldr	r0, [pc, #404]	; (800336c <FuncMenu_DrawOutputMenu+0x298>)
 80031d8:	f00b fa7a 	bl	800e6d0 <ILI9341_Draw_Text>

				if(pOutChan)
 80031dc:	79fb      	ldrb	r3, [r7, #7]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00a      	beq.n	80031f8 <FuncMenu_DrawOutputMenu+0x124>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80031e2:	2300      	movs	r3, #0
 80031e4:	9301      	str	r3, [sp, #4]
 80031e6:	2302      	movs	r3, #2
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80031ee:	22aa      	movs	r2, #170	; 0xaa
 80031f0:	210a      	movs	r1, #10
 80031f2:	485f      	ldr	r0, [pc, #380]	; (8003370 <FuncMenu_DrawOutputMenu+0x29c>)
 80031f4:	f00b fa6c 	bl	800e6d0 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80031f8:	f240 23fd 	movw	r3, #765	; 0x2fd
 80031fc:	9301      	str	r3, [sp, #4]
 80031fe:	2302      	movs	r3, #2
 8003200:	9300      	str	r3, [sp, #0]
 8003202:	2300      	movs	r3, #0
 8003204:	22d2      	movs	r2, #210	; 0xd2
 8003206:	2105      	movs	r1, #5
 8003208:	485a      	ldr	r0, [pc, #360]	; (8003374 <FuncMenu_DrawOutputMenu+0x2a0>)
 800320a:	f00b fa61 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800320e:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003212:	9301      	str	r3, [sp, #4]
 8003214:	2302      	movs	r3, #2
 8003216:	9300      	str	r3, [sp, #0]
 8003218:	2300      	movs	r3, #0
 800321a:	22d2      	movs	r2, #210	; 0xd2
 800321c:	2161      	movs	r1, #97	; 0x61
 800321e:	4855      	ldr	r0, [pc, #340]	; (8003374 <FuncMenu_DrawOutputMenu+0x2a0>)
 8003220:	f00b fa56 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003224:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003228:	9301      	str	r3, [sp, #4]
 800322a:	2302      	movs	r3, #2
 800322c:	9300      	str	r3, [sp, #0]
 800322e:	2300      	movs	r3, #0
 8003230:	22d2      	movs	r2, #210	; 0xd2
 8003232:	21af      	movs	r1, #175	; 0xaf
 8003234:	484f      	ldr	r0, [pc, #316]	; (8003374 <FuncMenu_DrawOutputMenu+0x2a0>)
 8003236:	f00b fa4b 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800323a:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800323e:	9301      	str	r3, [sp, #4]
 8003240:	2302      	movs	r3, #2
 8003242:	9300      	str	r3, [sp, #0]
 8003244:	2300      	movs	r3, #0
 8003246:	22d2      	movs	r2, #210	; 0xd2
 8003248:	f44f 7182 	mov.w	r1, #260	; 0x104
 800324c:	4849      	ldr	r0, [pc, #292]	; (8003374 <FuncMenu_DrawOutputMenu+0x2a0>)
 800324e:	f00b fa3f 	bl	800e6d0 <ILI9341_Draw_Text>
				break;
 8003252:	e38e      	b.n	8003972 <FuncMenu_DrawOutputMenu+0x89e>
			case SQUARE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003254:	2300      	movs	r3, #0
 8003256:	9301      	str	r3, [sp, #4]
 8003258:	2302      	movs	r3, #2
 800325a:	9300      	str	r3, [sp, #0]
 800325c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003260:	2232      	movs	r2, #50	; 0x32
 8003262:	210a      	movs	r1, #10
 8003264:	483c      	ldr	r0, [pc, #240]	; (8003358 <FuncMenu_DrawOutputMenu+0x284>)
 8003266:	f00b fa33 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800326a:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800326e:	9301      	str	r3, [sp, #4]
 8003270:	2302      	movs	r3, #2
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	2300      	movs	r3, #0
 8003276:	2246      	movs	r2, #70	; 0x46
 8003278:	210a      	movs	r1, #10
 800327a:	4838      	ldr	r0, [pc, #224]	; (800335c <FuncMenu_DrawOutputMenu+0x288>)
 800327c:	f00b fa28 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003280:	2300      	movs	r3, #0
 8003282:	9301      	str	r3, [sp, #4]
 8003284:	2302      	movs	r3, #2
 8003286:	9300      	str	r3, [sp, #0]
 8003288:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800328c:	225a      	movs	r2, #90	; 0x5a
 800328e:	210a      	movs	r1, #10
 8003290:	4833      	ldr	r0, [pc, #204]	; (8003360 <FuncMenu_DrawOutputMenu+0x28c>)
 8003292:	f00b fa1d 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003296:	2300      	movs	r3, #0
 8003298:	9301      	str	r3, [sp, #4]
 800329a:	2302      	movs	r3, #2
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032a2:	226e      	movs	r2, #110	; 0x6e
 80032a4:	210a      	movs	r1, #10
 80032a6:	482f      	ldr	r0, [pc, #188]	; (8003364 <FuncMenu_DrawOutputMenu+0x290>)
 80032a8:	f00b fa12 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80032ac:	2300      	movs	r3, #0
 80032ae:	9301      	str	r3, [sp, #4]
 80032b0:	2302      	movs	r3, #2
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032b8:	2282      	movs	r2, #130	; 0x82
 80032ba:	210a      	movs	r1, #10
 80032bc:	482a      	ldr	r0, [pc, #168]	; (8003368 <FuncMenu_DrawOutputMenu+0x294>)
 80032be:	f00b fa07 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80032c2:	2300      	movs	r3, #0
 80032c4:	9301      	str	r3, [sp, #4]
 80032c6:	2302      	movs	r3, #2
 80032c8:	9300      	str	r3, [sp, #0]
 80032ca:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032ce:	2296      	movs	r2, #150	; 0x96
 80032d0:	210a      	movs	r1, #10
 80032d2:	4826      	ldr	r0, [pc, #152]	; (800336c <FuncMenu_DrawOutputMenu+0x298>)
 80032d4:	f00b f9fc 	bl	800e6d0 <ILI9341_Draw_Text>

				if(pOutChan)
 80032d8:	79fb      	ldrb	r3, [r7, #7]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00a      	beq.n	80032f4 <FuncMenu_DrawOutputMenu+0x220>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80032de:	2300      	movs	r3, #0
 80032e0:	9301      	str	r3, [sp, #4]
 80032e2:	2302      	movs	r3, #2
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032ea:	22aa      	movs	r2, #170	; 0xaa
 80032ec:	210a      	movs	r1, #10
 80032ee:	4820      	ldr	r0, [pc, #128]	; (8003370 <FuncMenu_DrawOutputMenu+0x29c>)
 80032f0:	f00b f9ee 	bl	800e6d0 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80032f4:	f240 23fd 	movw	r3, #765	; 0x2fd
 80032f8:	9301      	str	r3, [sp, #4]
 80032fa:	2302      	movs	r3, #2
 80032fc:	9300      	str	r3, [sp, #0]
 80032fe:	2300      	movs	r3, #0
 8003300:	22d2      	movs	r2, #210	; 0xd2
 8003302:	2105      	movs	r1, #5
 8003304:	481b      	ldr	r0, [pc, #108]	; (8003374 <FuncMenu_DrawOutputMenu+0x2a0>)
 8003306:	f00b f9e3 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800330a:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800330e:	9301      	str	r3, [sp, #4]
 8003310:	2302      	movs	r3, #2
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	2300      	movs	r3, #0
 8003316:	22d2      	movs	r2, #210	; 0xd2
 8003318:	2161      	movs	r1, #97	; 0x61
 800331a:	4816      	ldr	r0, [pc, #88]	; (8003374 <FuncMenu_DrawOutputMenu+0x2a0>)
 800331c:	f00b f9d8 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003320:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003324:	9301      	str	r3, [sp, #4]
 8003326:	2302      	movs	r3, #2
 8003328:	9300      	str	r3, [sp, #0]
 800332a:	2300      	movs	r3, #0
 800332c:	22d2      	movs	r2, #210	; 0xd2
 800332e:	21af      	movs	r1, #175	; 0xaf
 8003330:	4810      	ldr	r0, [pc, #64]	; (8003374 <FuncMenu_DrawOutputMenu+0x2a0>)
 8003332:	f00b f9cd 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003336:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800333a:	9301      	str	r3, [sp, #4]
 800333c:	2302      	movs	r3, #2
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	2300      	movs	r3, #0
 8003342:	22d2      	movs	r2, #210	; 0xd2
 8003344:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003348:	480a      	ldr	r0, [pc, #40]	; (8003374 <FuncMenu_DrawOutputMenu+0x2a0>)
 800334a:	f00b f9c1 	bl	800e6d0 <ILI9341_Draw_Text>
				break;
 800334e:	e310      	b.n	8003972 <FuncMenu_DrawOutputMenu+0x89e>
 8003350:	08013920 	.word	0x08013920
 8003354:	08013930 	.word	0x08013930
 8003358:	08013940 	.word	0x08013940
 800335c:	08013948 	.word	0x08013948
 8003360:	08013954 	.word	0x08013954
 8003364:	0801395c 	.word	0x0801395c
 8003368:	08013968 	.word	0x08013968
 800336c:	08013974 	.word	0x08013974
 8003370:	0801397c 	.word	0x0801397c
 8003374:	08013918 	.word	0x08013918
			case SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003378:	2300      	movs	r3, #0
 800337a:	9301      	str	r3, [sp, #4]
 800337c:	2302      	movs	r3, #2
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003384:	2232      	movs	r2, #50	; 0x32
 8003386:	210a      	movs	r1, #10
 8003388:	48be      	ldr	r0, [pc, #760]	; (8003684 <FuncMenu_DrawOutputMenu+0x5b0>)
 800338a:	f00b f9a1 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800338e:	2300      	movs	r3, #0
 8003390:	9301      	str	r3, [sp, #4]
 8003392:	2302      	movs	r3, #2
 8003394:	9300      	str	r3, [sp, #0]
 8003396:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800339a:	2246      	movs	r2, #70	; 0x46
 800339c:	210a      	movs	r1, #10
 800339e:	48ba      	ldr	r0, [pc, #744]	; (8003688 <FuncMenu_DrawOutputMenu+0x5b4>)
 80033a0:	f00b f996 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80033a4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80033a8:	9301      	str	r3, [sp, #4]
 80033aa:	2302      	movs	r3, #2
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	2300      	movs	r3, #0
 80033b0:	225a      	movs	r2, #90	; 0x5a
 80033b2:	210a      	movs	r1, #10
 80033b4:	48b5      	ldr	r0, [pc, #724]	; (800368c <FuncMenu_DrawOutputMenu+0x5b8>)
 80033b6:	f00b f98b 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80033ba:	2300      	movs	r3, #0
 80033bc:	9301      	str	r3, [sp, #4]
 80033be:	2302      	movs	r3, #2
 80033c0:	9300      	str	r3, [sp, #0]
 80033c2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80033c6:	226e      	movs	r2, #110	; 0x6e
 80033c8:	210a      	movs	r1, #10
 80033ca:	48b1      	ldr	r0, [pc, #708]	; (8003690 <FuncMenu_DrawOutputMenu+0x5bc>)
 80033cc:	f00b f980 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80033d0:	2300      	movs	r3, #0
 80033d2:	9301      	str	r3, [sp, #4]
 80033d4:	2302      	movs	r3, #2
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80033dc:	2282      	movs	r2, #130	; 0x82
 80033de:	210a      	movs	r1, #10
 80033e0:	48ac      	ldr	r0, [pc, #688]	; (8003694 <FuncMenu_DrawOutputMenu+0x5c0>)
 80033e2:	f00b f975 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80033e6:	2300      	movs	r3, #0
 80033e8:	9301      	str	r3, [sp, #4]
 80033ea:	2302      	movs	r3, #2
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80033f2:	2296      	movs	r2, #150	; 0x96
 80033f4:	210a      	movs	r1, #10
 80033f6:	48a8      	ldr	r0, [pc, #672]	; (8003698 <FuncMenu_DrawOutputMenu+0x5c4>)
 80033f8:	f00b f96a 	bl	800e6d0 <ILI9341_Draw_Text>
				if(pOutChan)
 80033fc:	79fb      	ldrb	r3, [r7, #7]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00a      	beq.n	8003418 <FuncMenu_DrawOutputMenu+0x344>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003402:	2300      	movs	r3, #0
 8003404:	9301      	str	r3, [sp, #4]
 8003406:	2302      	movs	r3, #2
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800340e:	22aa      	movs	r2, #170	; 0xaa
 8003410:	210a      	movs	r1, #10
 8003412:	48a2      	ldr	r0, [pc, #648]	; (800369c <FuncMenu_DrawOutputMenu+0x5c8>)
 8003414:	f00b f95c 	bl	800e6d0 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003418:	f240 23fd 	movw	r3, #765	; 0x2fd
 800341c:	9301      	str	r3, [sp, #4]
 800341e:	2302      	movs	r3, #2
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	2300      	movs	r3, #0
 8003424:	22d2      	movs	r2, #210	; 0xd2
 8003426:	2105      	movs	r1, #5
 8003428:	489d      	ldr	r0, [pc, #628]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5cc>)
 800342a:	f00b f951 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800342e:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003432:	9301      	str	r3, [sp, #4]
 8003434:	2302      	movs	r3, #2
 8003436:	9300      	str	r3, [sp, #0]
 8003438:	2300      	movs	r3, #0
 800343a:	22d2      	movs	r2, #210	; 0xd2
 800343c:	2161      	movs	r1, #97	; 0x61
 800343e:	4898      	ldr	r0, [pc, #608]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003440:	f00b f946 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003444:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003448:	9301      	str	r3, [sp, #4]
 800344a:	2302      	movs	r3, #2
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	2300      	movs	r3, #0
 8003450:	22d2      	movs	r2, #210	; 0xd2
 8003452:	21af      	movs	r1, #175	; 0xaf
 8003454:	4892      	ldr	r0, [pc, #584]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003456:	f00b f93b 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800345a:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800345e:	9301      	str	r3, [sp, #4]
 8003460:	2302      	movs	r3, #2
 8003462:	9300      	str	r3, [sp, #0]
 8003464:	2300      	movs	r3, #0
 8003466:	22d2      	movs	r2, #210	; 0xd2
 8003468:	f44f 7182 	mov.w	r1, #260	; 0x104
 800346c:	488c      	ldr	r0, [pc, #560]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5cc>)
 800346e:	f00b f92f 	bl	800e6d0 <ILI9341_Draw_Text>
				break;
 8003472:	e27e      	b.n	8003972 <FuncMenu_DrawOutputMenu+0x89e>
			case REV_SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003474:	2300      	movs	r3, #0
 8003476:	9301      	str	r3, [sp, #4]
 8003478:	2302      	movs	r3, #2
 800347a:	9300      	str	r3, [sp, #0]
 800347c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003480:	2232      	movs	r2, #50	; 0x32
 8003482:	210a      	movs	r1, #10
 8003484:	487f      	ldr	r0, [pc, #508]	; (8003684 <FuncMenu_DrawOutputMenu+0x5b0>)
 8003486:	f00b f923 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800348a:	2300      	movs	r3, #0
 800348c:	9301      	str	r3, [sp, #4]
 800348e:	2302      	movs	r3, #2
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003496:	2246      	movs	r2, #70	; 0x46
 8003498:	210a      	movs	r1, #10
 800349a:	487b      	ldr	r0, [pc, #492]	; (8003688 <FuncMenu_DrawOutputMenu+0x5b4>)
 800349c:	f00b f918 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034a0:	2300      	movs	r3, #0
 80034a2:	9301      	str	r3, [sp, #4]
 80034a4:	2302      	movs	r3, #2
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80034ac:	225a      	movs	r2, #90	; 0x5a
 80034ae:	210a      	movs	r1, #10
 80034b0:	4876      	ldr	r0, [pc, #472]	; (800368c <FuncMenu_DrawOutputMenu+0x5b8>)
 80034b2:	f00b f90d 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80034b6:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80034ba:	9301      	str	r3, [sp, #4]
 80034bc:	2302      	movs	r3, #2
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	2300      	movs	r3, #0
 80034c2:	226e      	movs	r2, #110	; 0x6e
 80034c4:	210a      	movs	r1, #10
 80034c6:	4872      	ldr	r0, [pc, #456]	; (8003690 <FuncMenu_DrawOutputMenu+0x5bc>)
 80034c8:	f00b f902 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034cc:	2300      	movs	r3, #0
 80034ce:	9301      	str	r3, [sp, #4]
 80034d0:	2302      	movs	r3, #2
 80034d2:	9300      	str	r3, [sp, #0]
 80034d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80034d8:	2282      	movs	r2, #130	; 0x82
 80034da:	210a      	movs	r1, #10
 80034dc:	486d      	ldr	r0, [pc, #436]	; (8003694 <FuncMenu_DrawOutputMenu+0x5c0>)
 80034de:	f00b f8f7 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034e2:	2300      	movs	r3, #0
 80034e4:	9301      	str	r3, [sp, #4]
 80034e6:	2302      	movs	r3, #2
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80034ee:	2296      	movs	r2, #150	; 0x96
 80034f0:	210a      	movs	r1, #10
 80034f2:	4869      	ldr	r0, [pc, #420]	; (8003698 <FuncMenu_DrawOutputMenu+0x5c4>)
 80034f4:	f00b f8ec 	bl	800e6d0 <ILI9341_Draw_Text>

				if(pOutChan)
 80034f8:	79fb      	ldrb	r3, [r7, #7]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00a      	beq.n	8003514 <FuncMenu_DrawOutputMenu+0x440>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034fe:	2300      	movs	r3, #0
 8003500:	9301      	str	r3, [sp, #4]
 8003502:	2302      	movs	r3, #2
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800350a:	22aa      	movs	r2, #170	; 0xaa
 800350c:	210a      	movs	r1, #10
 800350e:	4863      	ldr	r0, [pc, #396]	; (800369c <FuncMenu_DrawOutputMenu+0x5c8>)
 8003510:	f00b f8de 	bl	800e6d0 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003514:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003518:	9301      	str	r3, [sp, #4]
 800351a:	2302      	movs	r3, #2
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	2300      	movs	r3, #0
 8003520:	22d2      	movs	r2, #210	; 0xd2
 8003522:	2105      	movs	r1, #5
 8003524:	485e      	ldr	r0, [pc, #376]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003526:	f00b f8d3 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800352a:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800352e:	9301      	str	r3, [sp, #4]
 8003530:	2302      	movs	r3, #2
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	2300      	movs	r3, #0
 8003536:	22d2      	movs	r2, #210	; 0xd2
 8003538:	2161      	movs	r1, #97	; 0x61
 800353a:	4859      	ldr	r0, [pc, #356]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5cc>)
 800353c:	f00b f8c8 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003540:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003544:	9301      	str	r3, [sp, #4]
 8003546:	2302      	movs	r3, #2
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	2300      	movs	r3, #0
 800354c:	22d2      	movs	r2, #210	; 0xd2
 800354e:	21af      	movs	r1, #175	; 0xaf
 8003550:	4853      	ldr	r0, [pc, #332]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003552:	f00b f8bd 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003556:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800355a:	9301      	str	r3, [sp, #4]
 800355c:	2302      	movs	r3, #2
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	2300      	movs	r3, #0
 8003562:	22d2      	movs	r2, #210	; 0xd2
 8003564:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003568:	484d      	ldr	r0, [pc, #308]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5cc>)
 800356a:	f00b f8b1 	bl	800e6d0 <ILI9341_Draw_Text>
				break;
 800356e:	e200      	b.n	8003972 <FuncMenu_DrawOutputMenu+0x89e>
			case TRIANGLE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003570:	2300      	movs	r3, #0
 8003572:	9301      	str	r3, [sp, #4]
 8003574:	2302      	movs	r3, #2
 8003576:	9300      	str	r3, [sp, #0]
 8003578:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800357c:	2232      	movs	r2, #50	; 0x32
 800357e:	210a      	movs	r1, #10
 8003580:	4840      	ldr	r0, [pc, #256]	; (8003684 <FuncMenu_DrawOutputMenu+0x5b0>)
 8003582:	f00b f8a5 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003586:	2300      	movs	r3, #0
 8003588:	9301      	str	r3, [sp, #4]
 800358a:	2302      	movs	r3, #2
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003592:	2246      	movs	r2, #70	; 0x46
 8003594:	210a      	movs	r1, #10
 8003596:	483c      	ldr	r0, [pc, #240]	; (8003688 <FuncMenu_DrawOutputMenu+0x5b4>)
 8003598:	f00b f89a 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800359c:	2300      	movs	r3, #0
 800359e:	9301      	str	r3, [sp, #4]
 80035a0:	2302      	movs	r3, #2
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035a8:	225a      	movs	r2, #90	; 0x5a
 80035aa:	210a      	movs	r1, #10
 80035ac:	4837      	ldr	r0, [pc, #220]	; (800368c <FuncMenu_DrawOutputMenu+0x5b8>)
 80035ae:	f00b f88f 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035b2:	2300      	movs	r3, #0
 80035b4:	9301      	str	r3, [sp, #4]
 80035b6:	2302      	movs	r3, #2
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035be:	226e      	movs	r2, #110	; 0x6e
 80035c0:	210a      	movs	r1, #10
 80035c2:	4833      	ldr	r0, [pc, #204]	; (8003690 <FuncMenu_DrawOutputMenu+0x5bc>)
 80035c4:	f00b f884 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80035c8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80035cc:	9301      	str	r3, [sp, #4]
 80035ce:	2302      	movs	r3, #2
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	2300      	movs	r3, #0
 80035d4:	2282      	movs	r2, #130	; 0x82
 80035d6:	210a      	movs	r1, #10
 80035d8:	482e      	ldr	r0, [pc, #184]	; (8003694 <FuncMenu_DrawOutputMenu+0x5c0>)
 80035da:	f00b f879 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035de:	2300      	movs	r3, #0
 80035e0:	9301      	str	r3, [sp, #4]
 80035e2:	2302      	movs	r3, #2
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035ea:	2296      	movs	r2, #150	; 0x96
 80035ec:	210a      	movs	r1, #10
 80035ee:	482a      	ldr	r0, [pc, #168]	; (8003698 <FuncMenu_DrawOutputMenu+0x5c4>)
 80035f0:	f00b f86e 	bl	800e6d0 <ILI9341_Draw_Text>

				if(pOutChan)
 80035f4:	79fb      	ldrb	r3, [r7, #7]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00a      	beq.n	8003610 <FuncMenu_DrawOutputMenu+0x53c>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035fa:	2300      	movs	r3, #0
 80035fc:	9301      	str	r3, [sp, #4]
 80035fe:	2302      	movs	r3, #2
 8003600:	9300      	str	r3, [sp, #0]
 8003602:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003606:	22aa      	movs	r2, #170	; 0xaa
 8003608:	210a      	movs	r1, #10
 800360a:	4824      	ldr	r0, [pc, #144]	; (800369c <FuncMenu_DrawOutputMenu+0x5c8>)
 800360c:	f00b f860 	bl	800e6d0 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003610:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003614:	9301      	str	r3, [sp, #4]
 8003616:	2302      	movs	r3, #2
 8003618:	9300      	str	r3, [sp, #0]
 800361a:	2300      	movs	r3, #0
 800361c:	22d2      	movs	r2, #210	; 0xd2
 800361e:	2105      	movs	r1, #5
 8003620:	481f      	ldr	r0, [pc, #124]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003622:	f00b f855 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003626:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800362a:	9301      	str	r3, [sp, #4]
 800362c:	2302      	movs	r3, #2
 800362e:	9300      	str	r3, [sp, #0]
 8003630:	2300      	movs	r3, #0
 8003632:	22d2      	movs	r2, #210	; 0xd2
 8003634:	2161      	movs	r1, #97	; 0x61
 8003636:	481a      	ldr	r0, [pc, #104]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003638:	f00b f84a 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 800363c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003640:	9301      	str	r3, [sp, #4]
 8003642:	2302      	movs	r3, #2
 8003644:	9300      	str	r3, [sp, #0]
 8003646:	2300      	movs	r3, #0
 8003648:	22d2      	movs	r2, #210	; 0xd2
 800364a:	21af      	movs	r1, #175	; 0xaf
 800364c:	4814      	ldr	r0, [pc, #80]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5cc>)
 800364e:	f00b f83f 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003652:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003656:	9301      	str	r3, [sp, #4]
 8003658:	2302      	movs	r3, #2
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	2300      	movs	r3, #0
 800365e:	22d2      	movs	r2, #210	; 0xd2
 8003660:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003664:	480e      	ldr	r0, [pc, #56]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003666:	f00b f833 	bl	800e6d0 <ILI9341_Draw_Text>

				ILI9341_Draw_Text("               ", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800366a:	2300      	movs	r3, #0
 800366c:	9301      	str	r3, [sp, #4]
 800366e:	2302      	movs	r3, #2
 8003670:	9300      	str	r3, [sp, #0]
 8003672:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003676:	2232      	movs	r2, #50	; 0x32
 8003678:	2196      	movs	r1, #150	; 0x96
 800367a:	480a      	ldr	r0, [pc, #40]	; (80036a4 <FuncMenu_DrawOutputMenu+0x5d0>)
 800367c:	f00b f828 	bl	800e6d0 <ILI9341_Draw_Text>
				break;
 8003680:	e177      	b.n	8003972 <FuncMenu_DrawOutputMenu+0x89e>
 8003682:	bf00      	nop
 8003684:	08013940 	.word	0x08013940
 8003688:	08013948 	.word	0x08013948
 800368c:	08013954 	.word	0x08013954
 8003690:	0801395c 	.word	0x0801395c
 8003694:	08013968 	.word	0x08013968
 8003698:	08013974 	.word	0x08013974
 800369c:	0801397c 	.word	0x0801397c
 80036a0:	08013918 	.word	0x08013918
 80036a4:	08013984 	.word	0x08013984
			case IMPULSE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036a8:	2300      	movs	r3, #0
 80036aa:	9301      	str	r3, [sp, #4]
 80036ac:	2302      	movs	r3, #2
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036b4:	2232      	movs	r2, #50	; 0x32
 80036b6:	210a      	movs	r1, #10
 80036b8:	48b0      	ldr	r0, [pc, #704]	; (800397c <FuncMenu_DrawOutputMenu+0x8a8>)
 80036ba:	f00b f809 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036be:	2300      	movs	r3, #0
 80036c0:	9301      	str	r3, [sp, #4]
 80036c2:	2302      	movs	r3, #2
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036ca:	2246      	movs	r2, #70	; 0x46
 80036cc:	210a      	movs	r1, #10
 80036ce:	48ac      	ldr	r0, [pc, #688]	; (8003980 <FuncMenu_DrawOutputMenu+0x8ac>)
 80036d0:	f00a fffe 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036d4:	2300      	movs	r3, #0
 80036d6:	9301      	str	r3, [sp, #4]
 80036d8:	2302      	movs	r3, #2
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036e0:	225a      	movs	r2, #90	; 0x5a
 80036e2:	210a      	movs	r1, #10
 80036e4:	48a7      	ldr	r0, [pc, #668]	; (8003984 <FuncMenu_DrawOutputMenu+0x8b0>)
 80036e6:	f00a fff3 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036ea:	2300      	movs	r3, #0
 80036ec:	9301      	str	r3, [sp, #4]
 80036ee:	2302      	movs	r3, #2
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036f6:	226e      	movs	r2, #110	; 0x6e
 80036f8:	210a      	movs	r1, #10
 80036fa:	48a3      	ldr	r0, [pc, #652]	; (8003988 <FuncMenu_DrawOutputMenu+0x8b4>)
 80036fc:	f00a ffe8 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003700:	2300      	movs	r3, #0
 8003702:	9301      	str	r3, [sp, #4]
 8003704:	2302      	movs	r3, #2
 8003706:	9300      	str	r3, [sp, #0]
 8003708:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800370c:	2282      	movs	r2, #130	; 0x82
 800370e:	210a      	movs	r1, #10
 8003710:	489e      	ldr	r0, [pc, #632]	; (800398c <FuncMenu_DrawOutputMenu+0x8b8>)
 8003712:	f00a ffdd 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003716:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800371a:	9301      	str	r3, [sp, #4]
 800371c:	2302      	movs	r3, #2
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	2300      	movs	r3, #0
 8003722:	2296      	movs	r2, #150	; 0x96
 8003724:	210a      	movs	r1, #10
 8003726:	489a      	ldr	r0, [pc, #616]	; (8003990 <FuncMenu_DrawOutputMenu+0x8bc>)
 8003728:	f00a ffd2 	bl	800e6d0 <ILI9341_Draw_Text>

				if(pOutChan)
 800372c:	79fb      	ldrb	r3, [r7, #7]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00a      	beq.n	8003748 <FuncMenu_DrawOutputMenu+0x674>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003732:	2300      	movs	r3, #0
 8003734:	9301      	str	r3, [sp, #4]
 8003736:	2302      	movs	r3, #2
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800373e:	22aa      	movs	r2, #170	; 0xaa
 8003740:	210a      	movs	r1, #10
 8003742:	4894      	ldr	r0, [pc, #592]	; (8003994 <FuncMenu_DrawOutputMenu+0x8c0>)
 8003744:	f00a ffc4 	bl	800e6d0 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003748:	f240 23fd 	movw	r3, #765	; 0x2fd
 800374c:	9301      	str	r3, [sp, #4]
 800374e:	2302      	movs	r3, #2
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	2300      	movs	r3, #0
 8003754:	22d2      	movs	r2, #210	; 0xd2
 8003756:	2105      	movs	r1, #5
 8003758:	488f      	ldr	r0, [pc, #572]	; (8003998 <FuncMenu_DrawOutputMenu+0x8c4>)
 800375a:	f00a ffb9 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800375e:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003762:	9301      	str	r3, [sp, #4]
 8003764:	2302      	movs	r3, #2
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	2300      	movs	r3, #0
 800376a:	22d2      	movs	r2, #210	; 0xd2
 800376c:	2161      	movs	r1, #97	; 0x61
 800376e:	488a      	ldr	r0, [pc, #552]	; (8003998 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003770:	f00a ffae 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003774:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003778:	9301      	str	r3, [sp, #4]
 800377a:	2302      	movs	r3, #2
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	2300      	movs	r3, #0
 8003780:	22d2      	movs	r2, #210	; 0xd2
 8003782:	21af      	movs	r1, #175	; 0xaf
 8003784:	4884      	ldr	r0, [pc, #528]	; (8003998 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003786:	f00a ffa3 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800378a:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800378e:	9301      	str	r3, [sp, #4]
 8003790:	2302      	movs	r3, #2
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	2300      	movs	r3, #0
 8003796:	22d2      	movs	r2, #210	; 0xd2
 8003798:	f44f 7182 	mov.w	r1, #260	; 0x104
 800379c:	487e      	ldr	r0, [pc, #504]	; (8003998 <FuncMenu_DrawOutputMenu+0x8c4>)
 800379e:	f00a ff97 	bl	800e6d0 <ILI9341_Draw_Text>

				ILI9341_Draw_Text("               ", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037a2:	2300      	movs	r3, #0
 80037a4:	9301      	str	r3, [sp, #4]
 80037a6:	2302      	movs	r3, #2
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037ae:	2232      	movs	r2, #50	; 0x32
 80037b0:	2196      	movs	r1, #150	; 0x96
 80037b2:	487a      	ldr	r0, [pc, #488]	; (800399c <FuncMenu_DrawOutputMenu+0x8c8>)
 80037b4:	f00a ff8c 	bl	800e6d0 <ILI9341_Draw_Text>
				break;
 80037b8:	e0db      	b.n	8003972 <FuncMenu_DrawOutputMenu+0x89e>
			case PWM_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037ba:	2300      	movs	r3, #0
 80037bc:	9301      	str	r3, [sp, #4]
 80037be:	2302      	movs	r3, #2
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037c6:	2232      	movs	r2, #50	; 0x32
 80037c8:	210a      	movs	r1, #10
 80037ca:	486c      	ldr	r0, [pc, #432]	; (800397c <FuncMenu_DrawOutputMenu+0x8a8>)
 80037cc:	f00a ff80 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037d0:	2300      	movs	r3, #0
 80037d2:	9301      	str	r3, [sp, #4]
 80037d4:	2302      	movs	r3, #2
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037dc:	2246      	movs	r2, #70	; 0x46
 80037de:	210a      	movs	r1, #10
 80037e0:	4867      	ldr	r0, [pc, #412]	; (8003980 <FuncMenu_DrawOutputMenu+0x8ac>)
 80037e2:	f00a ff75 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037e6:	2300      	movs	r3, #0
 80037e8:	9301      	str	r3, [sp, #4]
 80037ea:	2302      	movs	r3, #2
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037f2:	225a      	movs	r2, #90	; 0x5a
 80037f4:	210a      	movs	r1, #10
 80037f6:	4863      	ldr	r0, [pc, #396]	; (8003984 <FuncMenu_DrawOutputMenu+0x8b0>)
 80037f8:	f00a ff6a 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037fc:	2300      	movs	r3, #0
 80037fe:	9301      	str	r3, [sp, #4]
 8003800:	2302      	movs	r3, #2
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003808:	226e      	movs	r2, #110	; 0x6e
 800380a:	210a      	movs	r1, #10
 800380c:	485e      	ldr	r0, [pc, #376]	; (8003988 <FuncMenu_DrawOutputMenu+0x8b4>)
 800380e:	f00a ff5f 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003812:	2300      	movs	r3, #0
 8003814:	9301      	str	r3, [sp, #4]
 8003816:	2302      	movs	r3, #2
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800381e:	2282      	movs	r2, #130	; 0x82
 8003820:	210a      	movs	r1, #10
 8003822:	485a      	ldr	r0, [pc, #360]	; (800398c <FuncMenu_DrawOutputMenu+0x8b8>)
 8003824:	f00a ff54 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003828:	2300      	movs	r3, #0
 800382a:	9301      	str	r3, [sp, #4]
 800382c:	2302      	movs	r3, #2
 800382e:	9300      	str	r3, [sp, #0]
 8003830:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003834:	2296      	movs	r2, #150	; 0x96
 8003836:	210a      	movs	r1, #10
 8003838:	4855      	ldr	r0, [pc, #340]	; (8003990 <FuncMenu_DrawOutputMenu+0x8bc>)
 800383a:	f00a ff49 	bl	800e6d0 <ILI9341_Draw_Text>

				if(pOutChan)
 800383e:	79fb      	ldrb	r3, [r7, #7]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00a      	beq.n	800385a <FuncMenu_DrawOutputMenu+0x786>
					ILI9341_Draw_Text("- PWM", 		10, 170, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003844:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003848:	9301      	str	r3, [sp, #4]
 800384a:	2302      	movs	r3, #2
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	2300      	movs	r3, #0
 8003850:	22aa      	movs	r2, #170	; 0xaa
 8003852:	210a      	movs	r1, #10
 8003854:	484f      	ldr	r0, [pc, #316]	; (8003994 <FuncMenu_DrawOutputMenu+0x8c0>)
 8003856:	f00a ff3b 	bl	800e6d0 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800385a:	f240 23fd 	movw	r3, #765	; 0x2fd
 800385e:	9301      	str	r3, [sp, #4]
 8003860:	2302      	movs	r3, #2
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	2300      	movs	r3, #0
 8003866:	22d2      	movs	r2, #210	; 0xd2
 8003868:	2105      	movs	r1, #5
 800386a:	484b      	ldr	r0, [pc, #300]	; (8003998 <FuncMenu_DrawOutputMenu+0x8c4>)
 800386c:	f00a ff30 	bl	800e6d0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003870:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003874:	9301      	str	r3, [sp, #4]
 8003876:	2302      	movs	r3, #2
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	2300      	movs	r3, #0
 800387c:	22d2      	movs	r2, #210	; 0xd2
 800387e:	2161      	movs	r1, #97	; 0x61
 8003880:	4845      	ldr	r0, [pc, #276]	; (8003998 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003882:	f00a ff25 	bl	800e6d0 <ILI9341_Draw_Text>

				if(pOutChan)
 8003886:	79fb      	ldrb	r3, [r7, #7]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d05a      	beq.n	8003942 <FuncMenu_DrawOutputMenu+0x86e>
				{
					ILI9341_Draw_Text("DUTY", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 800388c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003890:	9301      	str	r3, [sp, #4]
 8003892:	2302      	movs	r3, #2
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	2300      	movs	r3, #0
 8003898:	22d2      	movs	r2, #210	; 0xd2
 800389a:	21af      	movs	r1, #175	; 0xaf
 800389c:	4840      	ldr	r0, [pc, #256]	; (80039a0 <FuncMenu_DrawOutputMenu+0x8cc>)
 800389e:	f00a ff17 	bl	800e6d0 <ILI9341_Draw_Text>
					char duty[10] = "";
 80038a2:	2300      	movs	r3, #0
 80038a4:	60bb      	str	r3, [r7, #8]
 80038a6:	f107 030c 	add.w	r3, r7, #12
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	809a      	strh	r2, [r3, #4]
					snprintf(duty, sizeof(duty), "%0.2f%%", ((float)PWM_AUX_OUT_TIM->CCR1 / (float)PWM_AUX_OUT_TIM->ARR) * 100);
 80038b0:	4b3c      	ldr	r3, [pc, #240]	; (80039a4 <FuncMenu_DrawOutputMenu+0x8d0>)
 80038b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b4:	ee07 3a90 	vmov	s15, r3
 80038b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038bc:	4b39      	ldr	r3, [pc, #228]	; (80039a4 <FuncMenu_DrawOutputMenu+0x8d0>)
 80038be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c0:	ee07 3a90 	vmov	s15, r3
 80038c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80038c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038cc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80039a8 <FuncMenu_DrawOutputMenu+0x8d4>
 80038d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038d4:	ee17 0a90 	vmov	r0, s15
 80038d8:	f7fc fe5e 	bl	8000598 <__aeabi_f2d>
 80038dc:	4603      	mov	r3, r0
 80038de:	460c      	mov	r4, r1
 80038e0:	f107 0008 	add.w	r0, r7, #8
 80038e4:	e9cd 3400 	strd	r3, r4, [sp]
 80038e8:	4a30      	ldr	r2, [pc, #192]	; (80039ac <FuncMenu_DrawOutputMenu+0x8d8>)
 80038ea:	210a      	movs	r1, #10
 80038ec:	f00c faac 	bl	800fe48 <sniprintf>
					ILI9341_Draw_Text(duty, 	220, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80038f0:	f107 0008 	add.w	r0, r7, #8
 80038f4:	2300      	movs	r3, #0
 80038f6:	9301      	str	r3, [sp, #4]
 80038f8:	2302      	movs	r3, #2
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003900:	2232      	movs	r2, #50	; 0x32
 8003902:	21dc      	movs	r1, #220	; 0xdc
 8003904:	f00a fee4 	bl	800e6d0 <ILI9341_Draw_Text>
					if(SM_IsFuncPwmDutyMode())
 8003908:	f002 fe12 	bl	8006530 <SM_IsFuncPwmDutyMode>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00b      	beq.n	800392a <FuncMenu_DrawOutputMenu+0x856>
					{
						ILI9341_Draw_Text("DUTY:", 	150, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003912:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003916:	9301      	str	r3, [sp, #4]
 8003918:	2302      	movs	r3, #2
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	2300      	movs	r3, #0
 800391e:	2232      	movs	r2, #50	; 0x32
 8003920:	2196      	movs	r1, #150	; 0x96
 8003922:	4823      	ldr	r0, [pc, #140]	; (80039b0 <FuncMenu_DrawOutputMenu+0x8dc>)
 8003924:	f00a fed4 	bl	800e6d0 <ILI9341_Draw_Text>
 8003928:	e016      	b.n	8003958 <FuncMenu_DrawOutputMenu+0x884>

					}
					else
					{
						ILI9341_Draw_Text("DUTY:", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800392a:	2300      	movs	r3, #0
 800392c:	9301      	str	r3, [sp, #4]
 800392e:	2302      	movs	r3, #2
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003936:	2232      	movs	r2, #50	; 0x32
 8003938:	2196      	movs	r1, #150	; 0x96
 800393a:	481d      	ldr	r0, [pc, #116]	; (80039b0 <FuncMenu_DrawOutputMenu+0x8dc>)
 800393c:	f00a fec8 	bl	800e6d0 <ILI9341_Draw_Text>
 8003940:	e00a      	b.n	8003958 <FuncMenu_DrawOutputMenu+0x884>
					}
				}
				else
				{
					ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003942:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003946:	9301      	str	r3, [sp, #4]
 8003948:	2302      	movs	r3, #2
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	2300      	movs	r3, #0
 800394e:	22d2      	movs	r2, #210	; 0xd2
 8003950:	21af      	movs	r1, #175	; 0xaf
 8003952:	4811      	ldr	r0, [pc, #68]	; (8003998 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003954:	f00a febc 	bl	800e6d0 <ILI9341_Draw_Text>
				}

				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003958:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800395c:	9301      	str	r3, [sp, #4]
 800395e:	2302      	movs	r3, #2
 8003960:	9300      	str	r3, [sp, #0]
 8003962:	2300      	movs	r3, #0
 8003964:	22d2      	movs	r2, #210	; 0xd2
 8003966:	f44f 7182 	mov.w	r1, #260	; 0x104
 800396a:	480b      	ldr	r0, [pc, #44]	; (8003998 <FuncMenu_DrawOutputMenu+0x8c4>)
 800396c:	f00a feb0 	bl	800e6d0 <ILI9341_Draw_Text>

				break;
 8003970:	bf00      	nop
				//
		}
	}
}
 8003972:	bf00      	nop
 8003974:	371c      	adds	r7, #28
 8003976:	46bd      	mov	sp, r7
 8003978:	bd90      	pop	{r4, r7, pc}
 800397a:	bf00      	nop
 800397c:	08013940 	.word	0x08013940
 8003980:	08013948 	.word	0x08013948
 8003984:	08013954 	.word	0x08013954
 8003988:	0801395c 	.word	0x0801395c
 800398c:	08013968 	.word	0x08013968
 8003990:	08013974 	.word	0x08013974
 8003994:	0801397c 	.word	0x0801397c
 8003998:	08013918 	.word	0x08013918
 800399c:	08013984 	.word	0x08013984
 80039a0:	08013994 	.word	0x08013994
 80039a4:	40000400 	.word	0x40000400
 80039a8:	42c80000 	.word	0x42c80000
 80039ac:	0801399c 	.word	0x0801399c
 80039b0:	080139a4 	.word	0x080139a4

080039b4 <GainMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMenu(eGainMenu_Status pMenu)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	4603      	mov	r3, r0
 80039bc:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 80039be:	79fb      	ldrb	r3, [r7, #7]
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d007      	beq.n	80039d4 <GainMenu_DrawMenu+0x20>
 80039c4:	2b03      	cmp	r3, #3
 80039c6:	d008      	beq.n	80039da <GainMenu_DrawMenu+0x26>
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d000      	beq.n	80039ce <GainMenu_DrawMenu+0x1a>
		case ENABLE_GAIN_Aux_MENU:
			GainMenu_DrawAuxMenu();
			break;

		default:
			break;
 80039cc:	e008      	b.n	80039e0 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawMainMenu();
 80039ce:	f000 f80b 	bl	80039e8 <GainMenu_DrawMainMenu>
			break;
 80039d2:	e005      	b.n	80039e0 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSignalMenu();
 80039d4:	f000 f868 	bl	8003aa8 <GainMenu_DrawSignalMenu>
			break;
 80039d8:	e002      	b.n	80039e0 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawAuxMenu();
 80039da:	f000 f87b 	bl	8003ad4 <GainMenu_DrawAuxMenu>
			break;
 80039de:	bf00      	nop

	}
}
 80039e0:	bf00      	nop
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <GainMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMainMenu()
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->GAIN", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80039ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039f2:	9301      	str	r3, [sp, #4]
 80039f4:	2302      	movs	r3, #2
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	2300      	movs	r3, #0
 80039fa:	220a      	movs	r2, #10
 80039fc:	210a      	movs	r1, #10
 80039fe:	4826      	ldr	r0, [pc, #152]	; (8003a98 <GainMenu_DrawMainMenu+0xb0>)
 8003a00:	f00a fe66 	bl	800e6d0 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003a04:	f7fd fa8a 	bl	8000f1c <DM_DisplayFormattedOutput>

	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5, 	 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003a08:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003a0c:	9301      	str	r3, [sp, #4]
 8003a0e:	2302      	movs	r3, #2
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	2300      	movs	r3, #0
 8003a14:	22d2      	movs	r2, #210	; 0xd2
 8003a16:	2105      	movs	r1, #5
 8003a18:	4820      	ldr	r0, [pc, #128]	; (8003a9c <GainMenu_DrawMainMenu+0xb4>)
 8003a1a:	f00a fe59 	bl	800e6d0 <ILI9341_Draw_Text>

	eOutput_mode aux_output_func = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8003a1e:	2001      	movs	r0, #1
 8003a20:	f002 fa82 	bl	8005f28 <SM_GetOutputChannel>
 8003a24:	4603      	mov	r3, r0
 8003a26:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	71fb      	strb	r3, [r7, #7]
	if(aux_output_func == PWM_FUNC_MODE)
 8003a2e:	79fb      	ldrb	r3, [r7, #7]
 8003a30:	2b06      	cmp	r3, #6
 8003a32:	d10b      	bne.n	8003a4c <GainMenu_DrawMainMenu+0x64>
	{
		ILI9341_Draw_Text("    ",	100,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003a34:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003a38:	9301      	str	r3, [sp, #4]
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	2300      	movs	r3, #0
 8003a40:	22d2      	movs	r2, #210	; 0xd2
 8003a42:	2164      	movs	r1, #100	; 0x64
 8003a44:	4816      	ldr	r0, [pc, #88]	; (8003aa0 <GainMenu_DrawMainMenu+0xb8>)
 8003a46:	f00a fe43 	bl	800e6d0 <ILI9341_Draw_Text>
 8003a4a:	e00a      	b.n	8003a62 <GainMenu_DrawMainMenu+0x7a>
	}
	else
	{
		ILI9341_Draw_Text("AUX",	100,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003a4c:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003a50:	9301      	str	r3, [sp, #4]
 8003a52:	2302      	movs	r3, #2
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	2300      	movs	r3, #0
 8003a58:	22d2      	movs	r2, #210	; 0xd2
 8003a5a:	2164      	movs	r1, #100	; 0x64
 8003a5c:	4811      	ldr	r0, [pc, #68]	; (8003aa4 <GainMenu_DrawMainMenu+0xbc>)
 8003a5e:	f00a fe37 	bl	800e6d0 <ILI9341_Draw_Text>
	}

	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003a62:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003a66:	9301      	str	r3, [sp, #4]
 8003a68:	2302      	movs	r3, #2
 8003a6a:	9300      	str	r3, [sp, #0]
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	22d2      	movs	r2, #210	; 0xd2
 8003a70:	21af      	movs	r1, #175	; 0xaf
 8003a72:	480b      	ldr	r0, [pc, #44]	; (8003aa0 <GainMenu_DrawMainMenu+0xb8>)
 8003a74:	f00a fe2c 	bl	800e6d0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003a78:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003a7c:	9301      	str	r3, [sp, #4]
 8003a7e:	2302      	movs	r3, #2
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	2300      	movs	r3, #0
 8003a84:	22d2      	movs	r2, #210	; 0xd2
 8003a86:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003a8a:	4805      	ldr	r0, [pc, #20]	; (8003aa0 <GainMenu_DrawMainMenu+0xb8>)
 8003a8c:	f00a fe20 	bl	800e6d0 <ILI9341_Draw_Text>
}
 8003a90:	bf00      	nop
 8003a92:	3708      	adds	r7, #8
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	080139ac 	.word	0x080139ac
 8003a9c:	080139b8 	.word	0x080139b8
 8003aa0:	080139c0 	.word	0x080139c0
 8003aa4:	080139c8 	.word	0x080139c8

08003aa8 <GainMenu_DrawSignalMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSignalMenu()
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->SIG", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003aae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ab2:	9301      	str	r3, [sp, #4]
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	9300      	str	r3, [sp, #0]
 8003ab8:	2300      	movs	r3, #0
 8003aba:	220a      	movs	r2, #10
 8003abc:	210a      	movs	r1, #10
 8003abe:	4804      	ldr	r0, [pc, #16]	; (8003ad0 <GainMenu_DrawSignalMenu+0x28>)
 8003ac0:	f00a fe06 	bl	800e6d0 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003ac4:	f7fd fa2a 	bl	8000f1c <DM_DisplayFormattedOutput>
}
 8003ac8:	bf00      	nop
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	080139cc 	.word	0x080139cc

08003ad4 <GainMenu_DrawAuxMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawAuxMenu()
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->Aux", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003ada:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ade:	9301      	str	r3, [sp, #4]
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	220a      	movs	r2, #10
 8003ae8:	210a      	movs	r1, #10
 8003aea:	4804      	ldr	r0, [pc, #16]	; (8003afc <GainMenu_DrawAuxMenu+0x28>)
 8003aec:	f00a fdf0 	bl	800e6d0 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003af0:	f7fd fa14 	bl	8000f1c <DM_DisplayFormattedOutput>
}
 8003af4:	bf00      	nop
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	080139dc 	.word	0x080139dc

08003b00 <ToplevelMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMenu(eToplevelMenu_Status pMenu)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	4603      	mov	r3, r0
 8003b08:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003b0a:	79fb      	ldrb	r3, [r7, #7]
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d007      	beq.n	8003b20 <ToplevelMenu_DrawMenu+0x20>
 8003b10:	2b03      	cmp	r3, #3
 8003b12:	d008      	beq.n	8003b26 <ToplevelMenu_DrawMenu+0x26>
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d000      	beq.n	8003b1a <ToplevelMenu_DrawMenu+0x1a>
		case ENABLE_TOPLEVEL_INPUT_MENU:
			ToplevelMenu_DrawInputMenu();
			break;

		default:
			break;
 8003b18:	e008      	b.n	8003b2c <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawMainMenu();
 8003b1a:	f000 f80b 	bl	8003b34 <ToplevelMenu_DrawMainMenu>
			break;
 8003b1e:	e005      	b.n	8003b2c <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawOutputMenu();
 8003b20:	f000 f844 	bl	8003bac <ToplevelMenu_DrawOutputMenu>
			break;
 8003b24:	e002      	b.n	8003b2c <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawInputMenu();
 8003b26:	f000 f88b 	bl	8003c40 <ToplevelMenu_DrawInputMenu>
			break;
 8003b2a:	bf00      	nop

	}
}
 8003b2c:	bf00      	nop
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <ToplevelMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMainMenu()
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af02      	add	r7, sp, #8
	#endif

	// Main screen
	//ILI9341_Draw_Text("SIGNAL GENERATOR", 	10, 10, WHITE, 2, BLACK);

	DM_DisplayFormattedOutput();
 8003b3a:	f7fd f9ef 	bl	8000f1c <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("OUTPUT", 6, 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003b3e:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003b42:	9301      	str	r3, [sp, #4]
 8003b44:	2302      	movs	r3, #2
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	2300      	movs	r3, #0
 8003b4a:	22d2      	movs	r2, #210	; 0xd2
 8003b4c:	2106      	movs	r1, #6
 8003b4e:	4814      	ldr	r0, [pc, #80]	; (8003ba0 <ToplevelMenu_DrawMainMenu+0x6c>)
 8003b50:	f00a fdbe 	bl	800e6d0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("INPUT", 93, 210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003b54:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003b58:	9301      	str	r3, [sp, #4]
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	9300      	str	r3, [sp, #0]
 8003b5e:	2300      	movs	r3, #0
 8003b60:	22d2      	movs	r2, #210	; 0xd2
 8003b62:	215d      	movs	r1, #93	; 0x5d
 8003b64:	480f      	ldr	r0, [pc, #60]	; (8003ba4 <ToplevelMenu_DrawMainMenu+0x70>)
 8003b66:	f00a fdb3 	bl	800e6d0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003b6a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003b6e:	9301      	str	r3, [sp, #4]
 8003b70:	2302      	movs	r3, #2
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	2300      	movs	r3, #0
 8003b76:	22d2      	movs	r2, #210	; 0xd2
 8003b78:	21af      	movs	r1, #175	; 0xaf
 8003b7a:	480b      	ldr	r0, [pc, #44]	; (8003ba8 <ToplevelMenu_DrawMainMenu+0x74>)
 8003b7c:	f00a fda8 	bl	800e6d0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003b80:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003b84:	9301      	str	r3, [sp, #4]
 8003b86:	2302      	movs	r3, #2
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	22d2      	movs	r2, #210	; 0xd2
 8003b8e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003b92:	4805      	ldr	r0, [pc, #20]	; (8003ba8 <ToplevelMenu_DrawMainMenu+0x74>)
 8003b94:	f00a fd9c 	bl	800e6d0 <ILI9341_Draw_Text>


}
 8003b98:	bf00      	nop
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	080139ec 	.word	0x080139ec
 8003ba4:	080139f4 	.word	0x080139f4
 8003ba8:	080139fc 	.word	0x080139fc

08003bac <ToplevelMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawOutputMenu()
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003bb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bb6:	9301      	str	r3, [sp, #4]
 8003bb8:	2302      	movs	r3, #2
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	220a      	movs	r2, #10
 8003bc0:	210a      	movs	r1, #10
 8003bc2:	481a      	ldr	r0, [pc, #104]	; (8003c2c <ToplevelMenu_DrawOutputMenu+0x80>)
 8003bc4:	f00a fd84 	bl	800e6d0 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003bc8:	f7fd f9a8 	bl	8000f1c <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("FUNC", 15,  210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003bcc:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003bd0:	9301      	str	r3, [sp, #4]
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	22d2      	movs	r2, #210	; 0xd2
 8003bda:	210f      	movs	r1, #15
 8003bdc:	4814      	ldr	r0, [pc, #80]	; (8003c30 <ToplevelMenu_DrawOutputMenu+0x84>)
 8003bde:	f00a fd77 	bl	800e6d0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FREQ", 98,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003be2:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003be6:	9301      	str	r3, [sp, #4]
 8003be8:	2302      	movs	r3, #2
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	2300      	movs	r3, #0
 8003bee:	22d2      	movs	r2, #210	; 0xd2
 8003bf0:	2162      	movs	r1, #98	; 0x62
 8003bf2:	4810      	ldr	r0, [pc, #64]	; (8003c34 <ToplevelMenu_DrawOutputMenu+0x88>)
 8003bf4:	f00a fd6c 	bl	800e6d0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("GAIN", 176, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003bf8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003bfc:	9301      	str	r3, [sp, #4]
 8003bfe:	2302      	movs	r3, #2
 8003c00:	9300      	str	r3, [sp, #0]
 8003c02:	2300      	movs	r3, #0
 8003c04:	22d2      	movs	r2, #210	; 0xd2
 8003c06:	21b0      	movs	r1, #176	; 0xb0
 8003c08:	480b      	ldr	r0, [pc, #44]	; (8003c38 <ToplevelMenu_DrawOutputMenu+0x8c>)
 8003c0a:	f00a fd61 	bl	800e6d0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("OFFSET", 245, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003c0e:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003c12:	9301      	str	r3, [sp, #4]
 8003c14:	2302      	movs	r3, #2
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	2300      	movs	r3, #0
 8003c1a:	22d2      	movs	r2, #210	; 0xd2
 8003c1c:	21f5      	movs	r1, #245	; 0xf5
 8003c1e:	4807      	ldr	r0, [pc, #28]	; (8003c3c <ToplevelMenu_DrawOutputMenu+0x90>)
 8003c20:	f00a fd56 	bl	800e6d0 <ILI9341_Draw_Text>
}
 8003c24:	bf00      	nop
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	08013a04 	.word	0x08013a04
 8003c30:	08013a0c 	.word	0x08013a0c
 8003c34:	08013a14 	.word	0x08013a14
 8003c38:	08013a1c 	.word	0x08013a1c
 8003c3c:	08013a24 	.word	0x08013a24

08003c40 <ToplevelMenu_DrawInputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawInputMenu()
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("IN->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003c46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c4a:	9301      	str	r3, [sp, #4]
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	2300      	movs	r3, #0
 8003c52:	220a      	movs	r2, #10
 8003c54:	210a      	movs	r1, #10
 8003c56:	4876      	ldr	r0, [pc, #472]	; (8003e30 <ToplevelMenu_DrawInputMenu+0x1f0>)
 8003c58:	f00a fd3a 	bl	800e6d0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("TRIGGER:", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	9301      	str	r3, [sp, #4]
 8003c60:	2302      	movs	r3, #2
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003c68:	2232      	movs	r2, #50	; 0x32
 8003c6a:	210a      	movs	r1, #10
 8003c6c:	4871      	ldr	r0, [pc, #452]	; (8003e34 <ToplevelMenu_DrawInputMenu+0x1f4>)
 8003c6e:	f00a fd2f 	bl	800e6d0 <ILI9341_Draw_Text>
	if(isTriggerInputEnabled)
 8003c72:	4b71      	ldr	r3, [pc, #452]	; (8003e38 <ToplevelMenu_DrawInputMenu+0x1f8>)
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d016      	beq.n	8003ca8 <ToplevelMenu_DrawInputMenu+0x68>
	{
		ILI9341_Draw_Text("ON", 	150, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003c7a:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003c7e:	9301      	str	r3, [sp, #4]
 8003c80:	2302      	movs	r3, #2
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	2300      	movs	r3, #0
 8003c86:	2232      	movs	r2, #50	; 0x32
 8003c88:	2196      	movs	r1, #150	; 0x96
 8003c8a:	486c      	ldr	r0, [pc, #432]	; (8003e3c <ToplevelMenu_DrawInputMenu+0x1fc>)
 8003c8c:	f00a fd20 	bl	800e6d0 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("OFF", 	200, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003c90:	2300      	movs	r3, #0
 8003c92:	9301      	str	r3, [sp, #4]
 8003c94:	2302      	movs	r3, #2
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003c9c:	2232      	movs	r2, #50	; 0x32
 8003c9e:	21c8      	movs	r1, #200	; 0xc8
 8003ca0:	4867      	ldr	r0, [pc, #412]	; (8003e40 <ToplevelMenu_DrawInputMenu+0x200>)
 8003ca2:	f00a fd15 	bl	800e6d0 <ILI9341_Draw_Text>
 8003ca6:	e015      	b.n	8003cd4 <ToplevelMenu_DrawInputMenu+0x94>
	}
	else
	{
		ILI9341_Draw_Text("ON", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003ca8:	2300      	movs	r3, #0
 8003caa:	9301      	str	r3, [sp, #4]
 8003cac:	2302      	movs	r3, #2
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003cb4:	2232      	movs	r2, #50	; 0x32
 8003cb6:	2196      	movs	r1, #150	; 0x96
 8003cb8:	4860      	ldr	r0, [pc, #384]	; (8003e3c <ToplevelMenu_DrawInputMenu+0x1fc>)
 8003cba:	f00a fd09 	bl	800e6d0 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("OFF", 	200, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003cbe:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003cc2:	9301      	str	r3, [sp, #4]
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	9300      	str	r3, [sp, #0]
 8003cc8:	2300      	movs	r3, #0
 8003cca:	2232      	movs	r2, #50	; 0x32
 8003ccc:	21c8      	movs	r1, #200	; 0xc8
 8003cce:	485c      	ldr	r0, [pc, #368]	; (8003e40 <ToplevelMenu_DrawInputMenu+0x200>)
 8003cd0:	f00a fcfe 	bl	800e6d0 <ILI9341_Draw_Text>
	}


	ILI9341_Draw_Text("MODE:", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	9301      	str	r3, [sp, #4]
 8003cd8:	2302      	movs	r3, #2
 8003cda:	9300      	str	r3, [sp, #0]
 8003cdc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003ce0:	2246      	movs	r2, #70	; 0x46
 8003ce2:	210a      	movs	r1, #10
 8003ce4:	4857      	ldr	r0, [pc, #348]	; (8003e44 <ToplevelMenu_DrawInputMenu+0x204>)
 8003ce6:	f00a fcf3 	bl	800e6d0 <ILI9341_Draw_Text>
	if(activeInputerTriggerMode == INPUT_TRIGGER_TIM)
 8003cea:	4b57      	ldr	r3, [pc, #348]	; (8003e48 <ToplevelMenu_DrawInputMenu+0x208>)
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d122      	bne.n	8003d38 <ToplevelMenu_DrawInputMenu+0xf8>
	{
		ILI9341_Draw_Text("TIM", 	150, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003cf2:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003cf6:	9301      	str	r3, [sp, #4]
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	9300      	str	r3, [sp, #0]
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	2246      	movs	r2, #70	; 0x46
 8003d00:	2196      	movs	r1, #150	; 0x96
 8003d02:	4852      	ldr	r0, [pc, #328]	; (8003e4c <ToplevelMenu_DrawInputMenu+0x20c>)
 8003d04:	f00a fce4 	bl	800e6d0 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("COMP", 	200, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003d08:	2300      	movs	r3, #0
 8003d0a:	9301      	str	r3, [sp, #4]
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	9300      	str	r3, [sp, #0]
 8003d10:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003d14:	2246      	movs	r2, #70	; 0x46
 8003d16:	21c8      	movs	r1, #200	; 0xc8
 8003d18:	484d      	ldr	r0, [pc, #308]	; (8003e50 <ToplevelMenu_DrawInputMenu+0x210>)
 8003d1a:	f00a fcd9 	bl	800e6d0 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("ADC", 	270, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003d1e:	2300      	movs	r3, #0
 8003d20:	9301      	str	r3, [sp, #4]
 8003d22:	2302      	movs	r3, #2
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003d2a:	2246      	movs	r2, #70	; 0x46
 8003d2c:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8003d30:	4848      	ldr	r0, [pc, #288]	; (8003e54 <ToplevelMenu_DrawInputMenu+0x214>)
 8003d32:	f00a fccd 	bl	800e6d0 <ILI9341_Draw_Text>
 8003d36:	e04c      	b.n	8003dd2 <ToplevelMenu_DrawInputMenu+0x192>
	}
	else if(activeInputerTriggerMode == INPUT_TRIGGER_COMP)
 8003d38:	4b43      	ldr	r3, [pc, #268]	; (8003e48 <ToplevelMenu_DrawInputMenu+0x208>)
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d122      	bne.n	8003d86 <ToplevelMenu_DrawInputMenu+0x146>
	{
		ILI9341_Draw_Text("TIM", 	150, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003d40:	2300      	movs	r3, #0
 8003d42:	9301      	str	r3, [sp, #4]
 8003d44:	2302      	movs	r3, #2
 8003d46:	9300      	str	r3, [sp, #0]
 8003d48:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003d4c:	2246      	movs	r2, #70	; 0x46
 8003d4e:	2196      	movs	r1, #150	; 0x96
 8003d50:	483e      	ldr	r0, [pc, #248]	; (8003e4c <ToplevelMenu_DrawInputMenu+0x20c>)
 8003d52:	f00a fcbd 	bl	800e6d0 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("COMP", 	200, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003d56:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003d5a:	9301      	str	r3, [sp, #4]
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	9300      	str	r3, [sp, #0]
 8003d60:	2300      	movs	r3, #0
 8003d62:	2246      	movs	r2, #70	; 0x46
 8003d64:	21c8      	movs	r1, #200	; 0xc8
 8003d66:	483a      	ldr	r0, [pc, #232]	; (8003e50 <ToplevelMenu_DrawInputMenu+0x210>)
 8003d68:	f00a fcb2 	bl	800e6d0 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("ADC", 	270, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	9301      	str	r3, [sp, #4]
 8003d70:	2302      	movs	r3, #2
 8003d72:	9300      	str	r3, [sp, #0]
 8003d74:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003d78:	2246      	movs	r2, #70	; 0x46
 8003d7a:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8003d7e:	4835      	ldr	r0, [pc, #212]	; (8003e54 <ToplevelMenu_DrawInputMenu+0x214>)
 8003d80:	f00a fca6 	bl	800e6d0 <ILI9341_Draw_Text>
 8003d84:	e025      	b.n	8003dd2 <ToplevelMenu_DrawInputMenu+0x192>
	}
	else if(activeInputerTriggerMode == INPUT_TRIGGER_ADC)
 8003d86:	4b30      	ldr	r3, [pc, #192]	; (8003e48 <ToplevelMenu_DrawInputMenu+0x208>)
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d121      	bne.n	8003dd2 <ToplevelMenu_DrawInputMenu+0x192>
	{
		ILI9341_Draw_Text("TIM", 	150, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003d8e:	2300      	movs	r3, #0
 8003d90:	9301      	str	r3, [sp, #4]
 8003d92:	2302      	movs	r3, #2
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003d9a:	2246      	movs	r2, #70	; 0x46
 8003d9c:	2196      	movs	r1, #150	; 0x96
 8003d9e:	482b      	ldr	r0, [pc, #172]	; (8003e4c <ToplevelMenu_DrawInputMenu+0x20c>)
 8003da0:	f00a fc96 	bl	800e6d0 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("COMP", 	200, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003da4:	2300      	movs	r3, #0
 8003da6:	9301      	str	r3, [sp, #4]
 8003da8:	2302      	movs	r3, #2
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003db0:	2246      	movs	r2, #70	; 0x46
 8003db2:	21c8      	movs	r1, #200	; 0xc8
 8003db4:	4826      	ldr	r0, [pc, #152]	; (8003e50 <ToplevelMenu_DrawInputMenu+0x210>)
 8003db6:	f00a fc8b 	bl	800e6d0 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("ADC", 	270, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003dba:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003dbe:	9301      	str	r3, [sp, #4]
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	2246      	movs	r2, #70	; 0x46
 8003dc8:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8003dcc:	4821      	ldr	r0, [pc, #132]	; (8003e54 <ToplevelMenu_DrawInputMenu+0x214>)
 8003dce:	f00a fc7f 	bl	800e6d0 <ILI9341_Draw_Text>
	}


	ILI9341_Draw_Text("ON/", 	20, 	204, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003dd2:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003dd6:	9301      	str	r3, [sp, #4]
 8003dd8:	2302      	movs	r3, #2
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	2300      	movs	r3, #0
 8003dde:	22cc      	movs	r2, #204	; 0xcc
 8003de0:	2114      	movs	r1, #20
 8003de2:	481d      	ldr	r0, [pc, #116]	; (8003e58 <ToplevelMenu_DrawInputMenu+0x218>)
 8003de4:	f00a fc74 	bl	800e6d0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("OFF ",	20, 	222, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003de8:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003dec:	9301      	str	r3, [sp, #4]
 8003dee:	2302      	movs	r3, #2
 8003df0:	9300      	str	r3, [sp, #0]
 8003df2:	2300      	movs	r3, #0
 8003df4:	22de      	movs	r2, #222	; 0xde
 8003df6:	2114      	movs	r1, #20
 8003df8:	4818      	ldr	r0, [pc, #96]	; (8003e5c <ToplevelMenu_DrawInputMenu+0x21c>)
 8003dfa:	f00a fc69 	bl	800e6d0 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	104,	204, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003dfe:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003e02:	9301      	str	r3, [sp, #4]
 8003e04:	2302      	movs	r3, #2
 8003e06:	9300      	str	r3, [sp, #0]
 8003e08:	2300      	movs	r3, #0
 8003e0a:	22cc      	movs	r2, #204	; 0xcc
 8003e0c:	2168      	movs	r1, #104	; 0x68
 8003e0e:	4814      	ldr	r0, [pc, #80]	; (8003e60 <ToplevelMenu_DrawInputMenu+0x220>)
 8003e10:	f00a fc5e 	bl	800e6d0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("MODE",	97, 	222, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003e14:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003e18:	9301      	str	r3, [sp, #4]
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	2300      	movs	r3, #0
 8003e20:	22de      	movs	r2, #222	; 0xde
 8003e22:	2161      	movs	r1, #97	; 0x61
 8003e24:	480f      	ldr	r0, [pc, #60]	; (8003e64 <ToplevelMenu_DrawInputMenu+0x224>)
 8003e26:	f00a fc53 	bl	800e6d0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SPEED",	173, 	222, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);

	ILI9341_Draw_Text("SET", 	263, 	204, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
	ILI9341_Draw_Text("LIMIT", 	252, 	222, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
*/
}
 8003e2a:	bf00      	nop
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	08013a2c 	.word	0x08013a2c
 8003e34:	08013a34 	.word	0x08013a34
 8003e38:	20001e59 	.word	0x20001e59
 8003e3c:	08013a40 	.word	0x08013a40
 8003e40:	08013a44 	.word	0x08013a44
 8003e44:	08013a48 	.word	0x08013a48
 8003e48:	20001e5a 	.word	0x20001e5a
 8003e4c:	08013a50 	.word	0x08013a50
 8003e50:	08013a54 	.word	0x08013a54
 8003e54:	08013a5c 	.word	0x08013a5c
 8003e58:	08013a60 	.word	0x08013a60
 8003e5c:	08013a64 	.word	0x08013a64
 8003e60:	08013a6c 	.word	0x08013a6c
 8003e64:	08013a70 	.word	0x08013a70

08003e68 <BiasMenu_getStatus>:
 *	@param None
 *	@retval None
 *
 */
eBiasMenu_Status BiasMenu_getStatus()
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
	return eNextBiasMenuStatus;
 8003e6c:	4b03      	ldr	r3, [pc, #12]	; (8003e7c <BiasMenu_getStatus+0x14>)
 8003e6e:	781b      	ldrb	r3, [r3, #0]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	20001e51 	.word	0x20001e51

08003e80 <BiasMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuEntryHandler()
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("BiasMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8003e84:	f7fd fb0a 	bl	800149c <DM_RefreshScreen>

	eNextBiasMenuStatus = ENABLE_BIAS_MENU;
 8003e88:	4b09      	ldr	r3, [pc, #36]	; (8003eb0 <BiasMenuEntryHandler+0x30>)
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	701a      	strb	r2, [r3, #0]

	ENCODER_TIMER->ARR = BIAS_MAX;
 8003e8e:	4b09      	ldr	r3, [pc, #36]	; (8003eb4 <BiasMenuEntryHandler+0x34>)
 8003e90:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003e94:	62da      	str	r2, [r3, #44]	; 0x2c
	ENCODER_TIMER->CNT = BO_GetDcBiasEncoderValue();
 8003e96:	f001 f8f5 	bl	8005084 <BO_GetDcBiasEncoderValue>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	4b05      	ldr	r3, [pc, #20]	; (8003eb4 <BiasMenuEntryHandler+0x34>)
 8003ea0:	625a      	str	r2, [r3, #36]	; 0x24

	eNewEvent = evIdle;
 8003ea2:	4b05      	ldr	r3, [pc, #20]	; (8003eb8 <BiasMenuEntryHandler+0x38>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8003ea8:	230e      	movs	r3, #14
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	20001e51 	.word	0x20001e51
 8003eb4:	40012c00 	.word	0x40012c00
 8003eb8:	20001e53 	.word	0x20001e53

08003ebc <BiasMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuInputHandler()
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("BiasMenuInputHandler Event captured\n");
	#endif

	BO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8003ec0:	2001      	movs	r0, #1
 8003ec2:	f002 faad 	bl	8006420 <SM_GetEncoderValue>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f001 f8e7 	bl	800509c <BO_MapEncoderPositionToSignalOutput>

	eNewEvent = evIdle;
 8003ece:	4b03      	ldr	r3, [pc, #12]	; (8003edc <BiasMenuInputHandler+0x20>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8003ed4:	230e      	movs	r3, #14
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	20001e53 	.word	0x20001e53

08003ee0 <BiasMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuExitHandler()
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
		printf("BiasMenuExitHandler Event captured\n");
	#endif


	// disable the menu
	eNextBiasMenuStatus = DISABLE_BIAS_MENU;
 8003ee4:	4b05      	ldr	r3, [pc, #20]	; (8003efc <BiasMenuExitHandler+0x1c>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8003eea:	f7fd fad7 	bl	800149c <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 8003eee:	4b04      	ldr	r3, [pc, #16]	; (8003f00 <BiasMenuExitHandler+0x20>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8003ef4:	2301      	movs	r3, #1
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	20001e51 	.word	0x20001e51
 8003f00:	20001e53 	.word	0x20001e53

08003f04 <EM_ProcessEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_ProcessEvent()
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0

	switch(eNextState)
 8003f0a:	4baa      	ldr	r3, [pc, #680]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	2b0e      	cmp	r3, #14
 8003f10:	f200 8206 	bhi.w	8004320 <EM_ProcessEvent+0x41c>
 8003f14:	a201      	add	r2, pc, #4	; (adr r2, 8003f1c <EM_ProcessEvent+0x18>)
 8003f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f1a:	bf00      	nop
 8003f1c:	08003f59 	.word	0x08003f59
 8003f20:	08003f85 	.word	0x08003f85
 8003f24:	08004005 	.word	0x08004005
 8003f28:	08004051 	.word	0x08004051
 8003f2c:	08004091 	.word	0x08004091
 8003f30:	080040bd 	.word	0x080040bd
 8003f34:	080040fd 	.word	0x080040fd
 8003f38:	0800415b 	.word	0x0800415b
 8003f3c:	08004187 	.word	0x08004187
 8003f40:	08004321 	.word	0x08004321
 8003f44:	080041bd 	.word	0x080041bd
 8003f48:	08004217 	.word	0x08004217
 8003f4c:	08004243 	.word	0x08004243
 8003f50:	0800426d 	.word	0x0800426d
 8003f54:	080042f1 	.word	0x080042f1

			#ifdef EVENT_MENU_DEBUG
			  printf("Idle_State\n");
			#endif

			if(eNewEvent == evBlueBtn)
 8003f58:	4b97      	ldr	r3, [pc, #604]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d105      	bne.n	8003f6c <EM_ProcessEvent+0x68>
			{
				eNextState = ToplevelOutputMenuEntryHandler();
 8003f60:	f000 fe26 	bl	8004bb0 <ToplevelOutputMenuEntryHandler>
 8003f64:	4603      	mov	r3, r0
 8003f66:	461a      	mov	r2, r3
 8003f68:	4b92      	ldr	r3, [pc, #584]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 8003f6a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003f6c:	4b92      	ldr	r3, [pc, #584]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	f040 81d7 	bne.w	8004324 <EM_ProcessEvent+0x420>
			{
				eNextState = ToplevelInputMenuEntryHandler();
 8003f76:	f000 fe3f 	bl	8004bf8 <ToplevelInputMenuEntryHandler>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	4b8d      	ldr	r3, [pc, #564]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 8003f80:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
			{
				// no menu action
			}
			break;
 8003f82:	e1cf      	b.n	8004324 <EM_ProcessEvent+0x420>

			#ifdef EVENT_MENU_DEBUG
			  printf("Toplevel_Output_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderPush)
 8003f84:	4b8c      	ldr	r3, [pc, #560]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	2b06      	cmp	r3, #6
 8003f8a:	d105      	bne.n	8003f98 <EM_ProcessEvent+0x94>
			{
				eNextState = ToplevelOutputMenuExitHandler();
 8003f8c:	f000 fe22 	bl	8004bd4 <ToplevelOutputMenuExitHandler>
 8003f90:	4603      	mov	r3, r0
 8003f92:	461a      	mov	r2, r3
 8003f94:	4b87      	ldr	r3, [pc, #540]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 8003f96:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBlueBtn)
 8003f98:	4b87      	ldr	r3, [pc, #540]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d108      	bne.n	8003fb2 <EM_ProcessEvent+0xae>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003fa0:	2000      	movs	r0, #0
 8003fa2:	f000 fdf5 	bl	8004b90 <ToplevelMenu_setStatus>
				eNextState = FuncMainMenuEntryHandler();
 8003fa6:	f000 fc09 	bl	80047bc <FuncMainMenuEntryHandler>
 8003faa:	4603      	mov	r3, r0
 8003fac:	461a      	mov	r2, r3
 8003fae:	4b81      	ldr	r3, [pc, #516]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 8003fb0:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003fb2:	4b81      	ldr	r3, [pc, #516]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d108      	bne.n	8003fcc <EM_ProcessEvent+0xc8>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003fba:	2000      	movs	r0, #0
 8003fbc:	f000 fde8 	bl	8004b90 <ToplevelMenu_setStatus>
				eNextState = FreqMainMenuEntryHandler();
 8003fc0:	f000 fb30 	bl	8004624 <FreqMainMenuEntryHandler>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	4b7a      	ldr	r3, [pc, #488]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 8003fca:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8003fcc:	4b7a      	ldr	r3, [pc, #488]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	2b03      	cmp	r3, #3
 8003fd2:	d108      	bne.n	8003fe6 <EM_ProcessEvent+0xe2>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003fd4:	2000      	movs	r0, #0
 8003fd6:	f000 fddb 	bl	8004b90 <ToplevelMenu_setStatus>
				eNextState = GainMainMenuEntryHandler();
 8003fda:	f000 fce7 	bl	80049ac <GainMainMenuEntryHandler>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	4b74      	ldr	r3, [pc, #464]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 8003fe4:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 8003fe6:	4b74      	ldr	r3, [pc, #464]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	2b04      	cmp	r3, #4
 8003fec:	f040 819c 	bne.w	8004328 <EM_ProcessEvent+0x424>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003ff0:	2000      	movs	r0, #0
 8003ff2:	f000 fdcd 	bl	8004b90 <ToplevelMenu_setStatus>
				eNextState = BiasMenuEntryHandler();
 8003ff6:	f7ff ff43 	bl	8003e80 <BiasMenuEntryHandler>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	4b6d      	ldr	r3, [pc, #436]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 8004000:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004002:	e191      	b.n	8004328 <EM_ProcessEvent+0x424>

			#ifdef EVENT_MENU_DEBUG
			  printf("Toplevel_Input_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderPush)
 8004004:	4b6c      	ldr	r3, [pc, #432]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	2b06      	cmp	r3, #6
 800400a:	d105      	bne.n	8004018 <EM_ProcessEvent+0x114>
			{
				eNextState = ToplevelInputMenuExitHandler();
 800400c:	f000 fea8 	bl	8004d60 <ToplevelInputMenuExitHandler>
 8004010:	4603      	mov	r3, r0
 8004012:	461a      	mov	r2, r3
 8004014:	4b67      	ldr	r3, [pc, #412]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 8004016:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBlueBtn)
 8004018:	4b67      	ldr	r3, [pc, #412]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d108      	bne.n	8004032 <EM_ProcessEvent+0x12e>
			{
				eNextState = ToplevelInputMenuInputHandler(eNewEvent);
 8004020:	4b65      	ldr	r3, [pc, #404]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	4618      	mov	r0, r3
 8004026:	f000 fdf9 	bl	8004c1c <ToplevelInputMenuInputHandler>
 800402a:	4603      	mov	r3, r0
 800402c:	461a      	mov	r2, r3
 800402e:	4b61      	ldr	r3, [pc, #388]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 8004030:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8004032:	4b61      	ldr	r3, [pc, #388]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	2b02      	cmp	r3, #2
 8004038:	f040 8178 	bne.w	800432c <EM_ProcessEvent+0x428>
			{

				eNextState = ToplevelInputMenuInputHandler(eNewEvent);
 800403c:	4b5e      	ldr	r3, [pc, #376]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	4618      	mov	r0, r3
 8004042:	f000 fdeb 	bl	8004c1c <ToplevelInputMenuInputHandler>
 8004046:	4603      	mov	r3, r0
 8004048:	461a      	mov	r2, r3
 800404a:	4b5a      	ldr	r3, [pc, #360]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 800404c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800404e:	e16d      	b.n	800432c <EM_ProcessEvent+0x428>

			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 8004050:	4b59      	ldr	r3, [pc, #356]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	2b06      	cmp	r3, #6
 8004056:	d105      	bne.n	8004064 <EM_ProcessEvent+0x160>
			{
				eNextState = FuncMainMenuExitHandler();
 8004058:	f000 fbc2 	bl	80047e0 <FuncMainMenuExitHandler>
 800405c:	4603      	mov	r3, r0
 800405e:	461a      	mov	r2, r3
 8004060:	4b54      	ldr	r3, [pc, #336]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 8004062:	701a      	strb	r2, [r3, #0]

			}
			if(eNewEvent == evBlueBtn)
 8004064:	4b54      	ldr	r3, [pc, #336]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d105      	bne.n	8004078 <EM_ProcessEvent+0x174>
			{
				eNextState = FuncSignalMenuEntryHandler();
 800406c:	f000 fbcc 	bl	8004808 <FuncSignalMenuEntryHandler>
 8004070:	4603      	mov	r3, r0
 8004072:	461a      	mov	r2, r3
 8004074:	4b4f      	ldr	r3, [pc, #316]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 8004076:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8004078:	4b4f      	ldr	r3, [pc, #316]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	2b02      	cmp	r3, #2
 800407e:	f040 8157 	bne.w	8004330 <EM_ProcessEvent+0x42c>
			{
				eNextState = FuncAuxMenuEntryHandler();
 8004082:	f000 fc05 	bl	8004890 <FuncAuxMenuEntryHandler>
 8004086:	4603      	mov	r3, r0
 8004088:	461a      	mov	r2, r3
 800408a:	4b4a      	ldr	r3, [pc, #296]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 800408c:	701a      	strb	r2, [r3, #0]
			}

			break;
 800408e:	e14f      	b.n	8004330 <EM_ProcessEvent+0x42c>

			#ifdef EVENT_MENU_DEBUG
				  printf("Func_Signal_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderSet)
 8004090:	4b49      	ldr	r3, [pc, #292]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	2b05      	cmp	r3, #5
 8004096:	d105      	bne.n	80040a4 <EM_ProcessEvent+0x1a0>
			{
				eNextState = FuncSignalMenuInputHandler();
 8004098:	f000 fbd4 	bl	8004844 <FuncSignalMenuInputHandler>
 800409c:	4603      	mov	r3, r0
 800409e:	461a      	mov	r2, r3
 80040a0:	4b44      	ldr	r3, [pc, #272]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 80040a2:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 80040a4:	4b44      	ldr	r3, [pc, #272]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	2b06      	cmp	r3, #6
 80040aa:	f040 8143 	bne.w	8004334 <EM_ProcessEvent+0x430>
			{
				eNextState = FuncSignalMenuExitHandler();
 80040ae:	f000 fbdb 	bl	8004868 <FuncSignalMenuExitHandler>
 80040b2:	4603      	mov	r3, r0
 80040b4:	461a      	mov	r2, r3
 80040b6:	4b3f      	ldr	r3, [pc, #252]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 80040b8:	701a      	strb	r2, [r3, #0]
			}


			break;
 80040ba:	e13b      	b.n	8004334 <EM_ProcessEvent+0x430>

			#ifdef EVENT_MENU_DEBUG
				  printf("Func_Aux_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderSet)
 80040bc:	4b3e      	ldr	r3, [pc, #248]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	2b05      	cmp	r3, #5
 80040c2:	d105      	bne.n	80040d0 <EM_ProcessEvent+0x1cc>
			{
				eNextState = FuncAuxMenuInputHandler();
 80040c4:	f000 fc04 	bl	80048d0 <FuncAuxMenuInputHandler>
 80040c8:	4603      	mov	r3, r0
 80040ca:	461a      	mov	r2, r3
 80040cc:	4b39      	ldr	r3, [pc, #228]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 80040ce:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 80040d0:	4b39      	ldr	r3, [pc, #228]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	2b06      	cmp	r3, #6
 80040d6:	d105      	bne.n	80040e4 <EM_ProcessEvent+0x1e0>
			{
				eNextState = FuncAuxMenuExitHandler();
 80040d8:	f000 fc48 	bl	800496c <FuncAuxMenuExitHandler>
 80040dc:	4603      	mov	r3, r0
 80040de:	461a      	mov	r2, r3
 80040e0:	4b34      	ldr	r3, [pc, #208]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 80040e2:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 80040e4:	4b34      	ldr	r3, [pc, #208]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	2b03      	cmp	r3, #3
 80040ea:	f040 8125 	bne.w	8004338 <EM_ProcessEvent+0x434>
			{
				eNextState = FuncAuxToggleDutyMode();
 80040ee:	f000 fc2b 	bl	8004948 <FuncAuxToggleDutyMode>
 80040f2:	4603      	mov	r3, r0
 80040f4:	461a      	mov	r2, r3
 80040f6:	4b2f      	ldr	r3, [pc, #188]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 80040f8:	701a      	strb	r2, [r3, #0]
			}

			break;
 80040fa:	e11d      	b.n	8004338 <EM_ProcessEvent+0x434>
			#endif
			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 80040fc:	4b2e      	ldr	r3, [pc, #184]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	2b06      	cmp	r3, #6
 8004102:	d108      	bne.n	8004116 <EM_ProcessEvent+0x212>
			{
				eNextState = GainMainMenuExitHandler();
 8004104:	f000 fc64 	bl	80049d0 <GainMainMenuExitHandler>
 8004108:	4603      	mov	r3, r0
 800410a:	461a      	mov	r2, r3
 800410c:	4b29      	ldr	r3, [pc, #164]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 800410e:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8004110:	2002      	movs	r0, #2
 8004112:	f000 fd3d 	bl	8004b90 <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 8004116:	4b28      	ldr	r3, [pc, #160]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d105      	bne.n	800412a <EM_ProcessEvent+0x226>
			{
				eNextState = GainSignalMenuEntryHandler();
 800411e:	f000 fc69 	bl	80049f4 <GainSignalMenuEntryHandler>
 8004122:	4603      	mov	r3, r0
 8004124:	461a      	mov	r2, r3
 8004126:	4b23      	ldr	r3, [pc, #140]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 8004128:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 800412a:	4b23      	ldr	r3, [pc, #140]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	2b02      	cmp	r3, #2
 8004130:	f040 8104 	bne.w	800433c <EM_ProcessEvent+0x438>
			{
				eOutput_mode aux_output_func = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8004134:	2001      	movs	r0, #1
 8004136:	f001 fef7 	bl	8005f28 <SM_GetOutputChannel>
 800413a:	4603      	mov	r3, r0
 800413c:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	71fb      	strb	r3, [r7, #7]
				if(aux_output_func != PWM_FUNC_MODE)
 8004144:	79fb      	ldrb	r3, [r7, #7]
 8004146:	2b06      	cmp	r3, #6
 8004148:	f000 80f8 	beq.w	800433c <EM_ProcessEvent+0x438>
					eNextState = GainAuxMenuEntryHandler();
 800414c:	f000 fcc0 	bl	8004ad0 <GainAuxMenuEntryHandler>
 8004150:	4603      	mov	r3, r0
 8004152:	461a      	mov	r2, r3
 8004154:	4b17      	ldr	r3, [pc, #92]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 8004156:	701a      	strb	r2, [r3, #0]
			}

			break;
 8004158:	e0f0      	b.n	800433c <EM_ProcessEvent+0x438>

			#ifdef EVENT_MENU_DEBUG
				  printf("Gain_Signal_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderSet)
 800415a:	4b17      	ldr	r3, [pc, #92]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	2b05      	cmp	r3, #5
 8004160:	d105      	bne.n	800416e <EM_ProcessEvent+0x26a>
			{
				eNextState = GainSignalMenuInputHandler();
 8004162:	f000 fc79 	bl	8004a58 <GainSignalMenuInputHandler>
 8004166:	4603      	mov	r3, r0
 8004168:	461a      	mov	r2, r3
 800416a:	4b12      	ldr	r3, [pc, #72]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 800416c:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 800416e:	4b12      	ldr	r3, [pc, #72]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	2b06      	cmp	r3, #6
 8004174:	f040 80e4 	bne.w	8004340 <EM_ProcessEvent+0x43c>
			{
				eNextState = GainSignalMenuExitHandler();
 8004178:	f000 fc98 	bl	8004aac <GainSignalMenuExitHandler>
 800417c:	4603      	mov	r3, r0
 800417e:	461a      	mov	r2, r3
 8004180:	4b0c      	ldr	r3, [pc, #48]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 8004182:	701a      	strb	r2, [r3, #0]
			}

			break;
 8004184:	e0dc      	b.n	8004340 <EM_ProcessEvent+0x43c>

			#ifdef EVENT_MENU_DEBUG
				  printf("Gain_Aux_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderSet)
 8004186:	4b0c      	ldr	r3, [pc, #48]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	2b05      	cmp	r3, #5
 800418c:	d105      	bne.n	800419a <EM_ProcessEvent+0x296>
			{
				eNextState = GainAuxMenuInputHandler();
 800418e:	f000 fccf 	bl	8004b30 <GainAuxMenuInputHandler>
 8004192:	4603      	mov	r3, r0
 8004194:	461a      	mov	r2, r3
 8004196:	4b07      	ldr	r3, [pc, #28]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 8004198:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 800419a:	4b07      	ldr	r3, [pc, #28]	; (80041b8 <EM_ProcessEvent+0x2b4>)
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	2b06      	cmp	r3, #6
 80041a0:	f040 80d0 	bne.w	8004344 <EM_ProcessEvent+0x440>
			{
				eNextState = GainAuxMenuExitHandler();
 80041a4:	f000 fcd6 	bl	8004b54 <GainAuxMenuExitHandler>
 80041a8:	4603      	mov	r3, r0
 80041aa:	461a      	mov	r2, r3
 80041ac:	4b01      	ldr	r3, [pc, #4]	; (80041b4 <EM_ProcessEvent+0x2b0>)
 80041ae:	701a      	strb	r2, [r3, #0]
			}

			break;
 80041b0:	e0c8      	b.n	8004344 <EM_ProcessEvent+0x440>
 80041b2:	bf00      	nop
 80041b4:	20001e52 	.word	0x20001e52
 80041b8:	20001e53 	.word	0x20001e53

			#ifdef EVENT_MENU_DEBUG
				  printf("Freq_Main_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderPush)
 80041bc:	4b69      	ldr	r3, [pc, #420]	; (8004364 <EM_ProcessEvent+0x460>)
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	2b06      	cmp	r3, #6
 80041c2:	d108      	bne.n	80041d6 <EM_ProcessEvent+0x2d2>
			{
				eNextState = FreqMainMenuExitHandler();
 80041c4:	f000 fa40 	bl	8004648 <FreqMainMenuExitHandler>
 80041c8:	4603      	mov	r3, r0
 80041ca:	461a      	mov	r2, r3
 80041cc:	4b66      	ldr	r3, [pc, #408]	; (8004368 <EM_ProcessEvent+0x464>)
 80041ce:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 80041d0:	2002      	movs	r0, #2
 80041d2:	f000 fcdd 	bl	8004b90 <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 80041d6:	4b63      	ldr	r3, [pc, #396]	; (8004364 <EM_ProcessEvent+0x460>)
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d105      	bne.n	80041ea <EM_ProcessEvent+0x2e6>
			{
				eNextState = FreqPresetMenuEntryHandler();
 80041de:	f000 fa4b 	bl	8004678 <FreqPresetMenuEntryHandler>
 80041e2:	4603      	mov	r3, r0
 80041e4:	461a      	mov	r2, r3
 80041e6:	4b60      	ldr	r3, [pc, #384]	; (8004368 <EM_ProcessEvent+0x464>)
 80041e8:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 80041ea:	4b5e      	ldr	r3, [pc, #376]	; (8004364 <EM_ProcessEvent+0x460>)
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d105      	bne.n	80041fe <EM_ProcessEvent+0x2fa>
			{
				eNextState = FreqAdjustMenuEntryHandler();
 80041f2:	f000 fa91 	bl	8004718 <FreqAdjustMenuEntryHandler>
 80041f6:	4603      	mov	r3, r0
 80041f8:	461a      	mov	r2, r3
 80041fa:	4b5b      	ldr	r3, [pc, #364]	; (8004368 <EM_ProcessEvent+0x464>)
 80041fc:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 80041fe:	4b59      	ldr	r3, [pc, #356]	; (8004364 <EM_ProcessEvent+0x460>)
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	2b03      	cmp	r3, #3
 8004204:	f040 80a0 	bne.w	8004348 <EM_ProcessEvent+0x444>
			{
				eNextState = FreqSweepMenuEntryHandler();
 8004208:	f000 f8c0 	bl	800438c <FreqSweepMenuEntryHandler>
 800420c:	4603      	mov	r3, r0
 800420e:	461a      	mov	r2, r3
 8004210:	4b55      	ldr	r3, [pc, #340]	; (8004368 <EM_ProcessEvent+0x464>)
 8004212:	701a      	strb	r2, [r3, #0]
			}

			break;
 8004214:	e098      	b.n	8004348 <EM_ProcessEvent+0x444>

			#ifdef EVENT_MENU_DEBUG
				  printf("Freq_Preset_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderSet)
 8004216:	4b53      	ldr	r3, [pc, #332]	; (8004364 <EM_ProcessEvent+0x460>)
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	2b05      	cmp	r3, #5
 800421c:	d105      	bne.n	800422a <EM_ProcessEvent+0x326>
			{
				eNextState = FreqPresetMenuInputHandler();
 800421e:	f000 fa57 	bl	80046d0 <FreqPresetMenuInputHandler>
 8004222:	4603      	mov	r3, r0
 8004224:	461a      	mov	r2, r3
 8004226:	4b50      	ldr	r3, [pc, #320]	; (8004368 <EM_ProcessEvent+0x464>)
 8004228:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 800422a:	4b4e      	ldr	r3, [pc, #312]	; (8004364 <EM_ProcessEvent+0x460>)
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	2b06      	cmp	r3, #6
 8004230:	f040 808c 	bne.w	800434c <EM_ProcessEvent+0x448>
			{
				eNextState = FreqPresetMenuExitHandler();
 8004234:	f000 fa5e 	bl	80046f4 <FreqPresetMenuExitHandler>
 8004238:	4603      	mov	r3, r0
 800423a:	461a      	mov	r2, r3
 800423c:	4b4a      	ldr	r3, [pc, #296]	; (8004368 <EM_ProcessEvent+0x464>)
 800423e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004240:	e084      	b.n	800434c <EM_ProcessEvent+0x448>

			#ifdef EVENT_MENU_DEBUG
				  printf("Freq_Adjust_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderSet)
 8004242:	4b48      	ldr	r3, [pc, #288]	; (8004364 <EM_ProcessEvent+0x460>)
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	2b05      	cmp	r3, #5
 8004248:	d105      	bne.n	8004256 <EM_ProcessEvent+0x352>
			{
				eNextState = FreqAdjustMenuInputHandler();
 800424a:	f000 fa81 	bl	8004750 <FreqAdjustMenuInputHandler>
 800424e:	4603      	mov	r3, r0
 8004250:	461a      	mov	r2, r3
 8004252:	4b45      	ldr	r3, [pc, #276]	; (8004368 <EM_ProcessEvent+0x464>)
 8004254:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8004256:	4b43      	ldr	r3, [pc, #268]	; (8004364 <EM_ProcessEvent+0x460>)
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	2b06      	cmp	r3, #6
 800425c:	d178      	bne.n	8004350 <EM_ProcessEvent+0x44c>
			{
				eNextState = FreqAdjustMenuExitHandler();
 800425e:	f000 fa83 	bl	8004768 <FreqAdjustMenuExitHandler>
 8004262:	4603      	mov	r3, r0
 8004264:	461a      	mov	r2, r3
 8004266:	4b40      	ldr	r3, [pc, #256]	; (8004368 <EM_ProcessEvent+0x464>)
 8004268:	701a      	strb	r2, [r3, #0]
			}
			break;
 800426a:	e071      	b.n	8004350 <EM_ProcessEvent+0x44c>

			#ifdef EVENT_MENU_DEBUG
				  printf("Freq_Sweep_Menu_State\n");
			#endif

			if(eNewEvent == evBlueBtn)
 800426c:	4b3d      	ldr	r3, [pc, #244]	; (8004364 <EM_ProcessEvent+0x460>)
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d106      	bne.n	8004282 <EM_ProcessEvent+0x37e>
			{
				// enable
				eNextState = FreqSweepMenuInputHandler(evSweepEnableBtn);
 8004274:	2007      	movs	r0, #7
 8004276:	f000 f8df 	bl	8004438 <FreqSweepMenuInputHandler>
 800427a:	4603      	mov	r3, r0
 800427c:	461a      	mov	r2, r3
 800427e:	4b3a      	ldr	r3, [pc, #232]	; (8004368 <EM_ProcessEvent+0x464>)
 8004280:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8004282:	4b38      	ldr	r3, [pc, #224]	; (8004364 <EM_ProcessEvent+0x460>)
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	2b02      	cmp	r3, #2
 8004288:	d106      	bne.n	8004298 <EM_ProcessEvent+0x394>
			{
				// direction
				eNextState = FreqSweepMenuInputHandler(evSweepModeBtn);
 800428a:	2008      	movs	r0, #8
 800428c:	f000 f8d4 	bl	8004438 <FreqSweepMenuInputHandler>
 8004290:	4603      	mov	r3, r0
 8004292:	461a      	mov	r2, r3
 8004294:	4b34      	ldr	r3, [pc, #208]	; (8004368 <EM_ProcessEvent+0x464>)
 8004296:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8004298:	4b32      	ldr	r3, [pc, #200]	; (8004364 <EM_ProcessEvent+0x460>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	2b03      	cmp	r3, #3
 800429e:	d106      	bne.n	80042ae <EM_ProcessEvent+0x3aa>
			{
				// set sweep speed
				eNextState = FreqSweepMenuInputHandler(evSweepSpeedBtn);
 80042a0:	2009      	movs	r0, #9
 80042a2:	f000 f8c9 	bl	8004438 <FreqSweepMenuInputHandler>
 80042a6:	4603      	mov	r3, r0
 80042a8:	461a      	mov	r2, r3
 80042aa:	4b2f      	ldr	r3, [pc, #188]	; (8004368 <EM_ProcessEvent+0x464>)
 80042ac:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 80042ae:	4b2d      	ldr	r3, [pc, #180]	; (8004364 <EM_ProcessEvent+0x460>)
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	2b04      	cmp	r3, #4
 80042b4:	d106      	bne.n	80042c4 <EM_ProcessEvent+0x3c0>
			{
				// set lower/upper sweep limit
				eNextState = FreqSweepMenuInputHandler(evSweepLimitBtn);
 80042b6:	200a      	movs	r0, #10
 80042b8:	f000 f8be 	bl	8004438 <FreqSweepMenuInputHandler>
 80042bc:	4603      	mov	r3, r0
 80042be:	461a      	mov	r2, r3
 80042c0:	4b29      	ldr	r3, [pc, #164]	; (8004368 <EM_ProcessEvent+0x464>)
 80042c2:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderSet)
 80042c4:	4b27      	ldr	r3, [pc, #156]	; (8004364 <EM_ProcessEvent+0x460>)
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	2b05      	cmp	r3, #5
 80042ca:	d106      	bne.n	80042da <EM_ProcessEvent+0x3d6>
			{
				eNextState = FreqSweepMenuInputHandler(evEncoderSweep);
 80042cc:	200b      	movs	r0, #11
 80042ce:	f000 f8b3 	bl	8004438 <FreqSweepMenuInputHandler>
 80042d2:	4603      	mov	r3, r0
 80042d4:	461a      	mov	r2, r3
 80042d6:	4b24      	ldr	r3, [pc, #144]	; (8004368 <EM_ProcessEvent+0x464>)
 80042d8:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 80042da:	4b22      	ldr	r3, [pc, #136]	; (8004364 <EM_ProcessEvent+0x460>)
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	2b06      	cmp	r3, #6
 80042e0:	d138      	bne.n	8004354 <EM_ProcessEvent+0x450>
			{
				eNextState = FreqSweepMenuExitHandler();
 80042e2:	f000 f97f 	bl	80045e4 <FreqSweepMenuExitHandler>
 80042e6:	4603      	mov	r3, r0
 80042e8:	461a      	mov	r2, r3
 80042ea:	4b1f      	ldr	r3, [pc, #124]	; (8004368 <EM_ProcessEvent+0x464>)
 80042ec:	701a      	strb	r2, [r3, #0]
			}

			break;
 80042ee:	e031      	b.n	8004354 <EM_ProcessEvent+0x450>

			#ifdef EVENT_MENU_DEBUG
				  printf("Bias_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderSet)
 80042f0:	4b1c      	ldr	r3, [pc, #112]	; (8004364 <EM_ProcessEvent+0x460>)
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	2b05      	cmp	r3, #5
 80042f6:	d105      	bne.n	8004304 <EM_ProcessEvent+0x400>
			{
				eNextState = BiasMenuInputHandler();
 80042f8:	f7ff fde0 	bl	8003ebc <BiasMenuInputHandler>
 80042fc:	4603      	mov	r3, r0
 80042fe:	461a      	mov	r2, r3
 8004300:	4b19      	ldr	r3, [pc, #100]	; (8004368 <EM_ProcessEvent+0x464>)
 8004302:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8004304:	4b17      	ldr	r3, [pc, #92]	; (8004364 <EM_ProcessEvent+0x460>)
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	2b06      	cmp	r3, #6
 800430a:	d125      	bne.n	8004358 <EM_ProcessEvent+0x454>
			{
				eNextState = BiasMenuExitHandler();
 800430c:	f7ff fde8 	bl	8003ee0 <BiasMenuExitHandler>
 8004310:	4603      	mov	r3, r0
 8004312:	461a      	mov	r2, r3
 8004314:	4b14      	ldr	r3, [pc, #80]	; (8004368 <EM_ProcessEvent+0x464>)
 8004316:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8004318:	2002      	movs	r0, #2
 800431a:	f000 fc39 	bl	8004b90 <ToplevelMenu_setStatus>
			}

			break;
 800431e:	e01b      	b.n	8004358 <EM_ProcessEvent+0x454>

		default:
			break;
 8004320:	bf00      	nop
 8004322:	e01a      	b.n	800435a <EM_ProcessEvent+0x456>
			break;
 8004324:	bf00      	nop
 8004326:	e018      	b.n	800435a <EM_ProcessEvent+0x456>
			break;
 8004328:	bf00      	nop
 800432a:	e016      	b.n	800435a <EM_ProcessEvent+0x456>
			break;
 800432c:	bf00      	nop
 800432e:	e014      	b.n	800435a <EM_ProcessEvent+0x456>
			break;
 8004330:	bf00      	nop
 8004332:	e012      	b.n	800435a <EM_ProcessEvent+0x456>
			break;
 8004334:	bf00      	nop
 8004336:	e010      	b.n	800435a <EM_ProcessEvent+0x456>
			break;
 8004338:	bf00      	nop
 800433a:	e00e      	b.n	800435a <EM_ProcessEvent+0x456>
			break;
 800433c:	bf00      	nop
 800433e:	e00c      	b.n	800435a <EM_ProcessEvent+0x456>
			break;
 8004340:	bf00      	nop
 8004342:	e00a      	b.n	800435a <EM_ProcessEvent+0x456>
			break;
 8004344:	bf00      	nop
 8004346:	e008      	b.n	800435a <EM_ProcessEvent+0x456>
			break;
 8004348:	bf00      	nop
 800434a:	e006      	b.n	800435a <EM_ProcessEvent+0x456>
			break;
 800434c:	bf00      	nop
 800434e:	e004      	b.n	800435a <EM_ProcessEvent+0x456>
			break;
 8004350:	bf00      	nop
 8004352:	e002      	b.n	800435a <EM_ProcessEvent+0x456>
			break;
 8004354:	bf00      	nop
 8004356:	e000      	b.n	800435a <EM_ProcessEvent+0x456>
			break;
 8004358:	bf00      	nop
	}

}
 800435a:	bf00      	nop
 800435c:	3708      	adds	r7, #8
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	20001e53 	.word	0x20001e53
 8004368:	20001e52 	.word	0x20001e52

0800436c <EM_SetNewEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	4603      	mov	r3, r0
 8004374:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 8004376:	4a04      	ldr	r2, [pc, #16]	; (8004388 <EM_SetNewEvent+0x1c>)
 8004378:	79fb      	ldrb	r3, [r7, #7]
 800437a:	7013      	strb	r3, [r2, #0]
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr
 8004388:	20001e53 	.word	0x20001e53

0800438c <FreqSweepMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuEntryHandler()
{
 800438c:	b580      	push	{r7, lr}
 800438e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqSweepMenuEntryHandler captured\n");
	#endif

	DM_RefreshScreen();
 8004390:	f7fd f884 	bl	800149c <DM_RefreshScreen>

	if( sweep_upper_bounds_longest_output_arr != OUTPUT_TIMER->ARR)
 8004394:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439a:	ee07 3a90 	vmov	s15, r3
 800439e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80043a2:	4b20      	ldr	r3, [pc, #128]	; (8004424 <FreqSweepMenuEntryHandler+0x98>)
 80043a4:	edd3 7a00 	vldr	s15, [r3]
 80043a8:	eeb4 7a67 	vcmp.f32	s14, s15
 80043ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043b0:	d009      	beq.n	80043c6 <FreqSweepMenuEntryHandler+0x3a>
		sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 80043b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80043b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b8:	ee07 3a90 	vmov	s15, r3
 80043bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043c0:	4b18      	ldr	r3, [pc, #96]	; (8004424 <FreqSweepMenuEntryHandler+0x98>)
 80043c2:	edc3 7a00 	vstr	s15, [r3]

	if( sweep_upper_bounds_longest_output_arr == MIN_OUTPUT_ARR)
 80043c6:	4b17      	ldr	r3, [pc, #92]	; (8004424 <FreqSweepMenuEntryHandler+0x98>)
 80043c8:	edd3 7a00 	vldr	s15, [r3]
 80043cc:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 80043d0:	eef4 7a47 	vcmp.f32	s15, s14
 80043d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043d8:	d101      	bne.n	80043de <FreqSweepMenuEntryHandler+0x52>
	{
		FS_SetSweepModeDown();
 80043da:	f001 f83b 	bl	8005454 <FS_SetSweepModeDown>
	}

	FS_SetEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 80043de:	2000      	movs	r0, #0
 80043e0:	f001 f88e 	bl	8005500 <FS_SetEncoderControlMode>
	FS_SetSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 80043e4:	2000      	movs	r0, #0
 80043e6:	f001 f8eb 	bl	80055c0 <FS_SetSweepTimerAutoReloadForEncoderControl>
	calculated_sweep_in_hertz = FS_GetCalculatedSweepFrequencyInHertz();
 80043ea:	f001 f925 	bl	8005638 <FS_GetCalculatedSweepFrequencyInHertz>
 80043ee:	eef0 7a40 	vmov.f32	s15, s0
 80043f2:	4b0d      	ldr	r3, [pc, #52]	; (8004428 <FreqSweepMenuEntryHandler+0x9c>)
 80043f4:	edc3 7a00 	vstr	s15, [r3]

	// reset sweep start value
	SWEEP_TIMER->CNT = 0;
 80043f8:	4b0c      	ldr	r3, [pc, #48]	; (800442c <FreqSweepMenuEntryHandler+0xa0>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	625a      	str	r2, [r3, #36]	; 0x24

	// set default mode to sweep speed control
	FreqSweepMenuInputHandler(evSweepSpeedBtn);
 80043fe:	2009      	movs	r0, #9
 8004400:	f000 f81a 	bl	8004438 <FreqSweepMenuInputHandler>

	// sweep start speed
	SWEEP_TIMER->ARR = MIN_SWEEP_ARR;
 8004404:	4b09      	ldr	r3, [pc, #36]	; (800442c <FreqSweepMenuEntryHandler+0xa0>)
 8004406:	f244 12a0 	movw	r2, #16800	; 0x41a0
 800440a:	62da      	str	r2, [r3, #44]	; 0x2c
	SWEEP_TIMER->PSC = 0;
 800440c:	4b07      	ldr	r3, [pc, #28]	; (800442c <FreqSweepMenuEntryHandler+0xa0>)
 800440e:	2200      	movs	r2, #0
 8004410:	629a      	str	r2, [r3, #40]	; 0x28



	// get ready to load menu
	eNextFreqMenuStatus = ENABLE_FREQ_SWEEP_MENU;
 8004412:	4b07      	ldr	r3, [pc, #28]	; (8004430 <FreqSweepMenuEntryHandler+0xa4>)
 8004414:	2204      	movs	r2, #4
 8004416:	701a      	strb	r2, [r3, #0]


	// stay in this state
	eNewEvent = evIdle;
 8004418:	4b06      	ldr	r3, [pc, #24]	; (8004434 <FreqSweepMenuEntryHandler+0xa8>)
 800441a:	2200      	movs	r2, #0
 800441c:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 800441e:	230d      	movs	r3, #13
}
 8004420:	4618      	mov	r0, r3
 8004422:	bd80      	pop	{r7, pc}
 8004424:	20000124 	.word	0x20000124
 8004428:	20001eac 	.word	0x20001eac
 800442c:	40000c00 	.word	0x40000c00
 8004430:	20001e56 	.word	0x20001e56
 8004434:	20001e53 	.word	0x20001e53

08004438 <FreqSweepMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuInputHandler(eSystemEvent pEvent)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	4603      	mov	r3, r0
 8004440:	71fb      	strb	r3, [r7, #7]
		printf("FreqAdjustMenuInputHandler Event captured\n");
	#endif



	switch(pEvent)
 8004442:	79fb      	ldrb	r3, [r7, #7]
 8004444:	3b07      	subs	r3, #7
 8004446:	2b04      	cmp	r3, #4
 8004448:	f200 80b2 	bhi.w	80045b0 <FreqSweepMenuInputHandler+0x178>
 800444c:	a201      	add	r2, pc, #4	; (adr r2, 8004454 <FreqSweepMenuInputHandler+0x1c>)
 800444e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004452:	bf00      	nop
 8004454:	08004469 	.word	0x08004469
 8004458:	08004483 	.word	0x08004483
 800445c:	080045a1 	.word	0x080045a1
 8004460:	080045a9 	.word	0x080045a9
 8004464:	080044bd 	.word	0x080044bd
			#ifdef EVENT_MENU_DEBUG
				printf("evSweepEnable captured\n");
			#endif

			// toggle enable/disable
			SWEEP_TIMER->DIER 	^= TIM_DIER_UIE;
 8004468:	4b56      	ldr	r3, [pc, #344]	; (80045c4 <FreqSweepMenuInputHandler+0x18c>)
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	4a55      	ldr	r2, [pc, #340]	; (80045c4 <FreqSweepMenuInputHandler+0x18c>)
 800446e:	f083 0301 	eor.w	r3, r3, #1
 8004472:	60d3      	str	r3, [r2, #12]
			SWEEP_TIMER->CR1	^= TIM_CR1_CEN;
 8004474:	4b53      	ldr	r3, [pc, #332]	; (80045c4 <FreqSweepMenuInputHandler+0x18c>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a52      	ldr	r2, [pc, #328]	; (80045c4 <FreqSweepMenuInputHandler+0x18c>)
 800447a:	f083 0301 	eor.w	r3, r3, #1
 800447e:	6013      	str	r3, [r2, #0]
			break;
 8004480:	e097      	b.n	80045b2 <FreqSweepMenuInputHandler+0x17a>
			#ifdef EVENT_MENU_DEBUG
				printf("evSweepMode captured\n");
			#endif

			// flip between 0:Upcounter and 1:Downcounter
			active_sweep_mode ^= 1U;
 8004482:	4b51      	ldr	r3, [pc, #324]	; (80045c8 <FreqSweepMenuInputHandler+0x190>)
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	f083 0301 	eor.w	r3, r3, #1
 800448a:	b2da      	uxtb	r2, r3
 800448c:	4b4e      	ldr	r3, [pc, #312]	; (80045c8 <FreqSweepMenuInputHandler+0x190>)
 800448e:	701a      	strb	r2, [r3, #0]

			switch(active_sweep_mode)
 8004490:	4b4d      	ldr	r3, [pc, #308]	; (80045c8 <FreqSweepMenuInputHandler+0x190>)
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d004      	beq.n	80044a2 <FreqSweepMenuInputHandler+0x6a>
 8004498:	2b02      	cmp	r3, #2
 800449a:	d008      	beq.n	80044ae <FreqSweepMenuInputHandler+0x76>
 800449c:	2b00      	cmp	r3, #0
 800449e:	d003      	beq.n	80044a8 <FreqSweepMenuInputHandler+0x70>
 80044a0:	e006      	b.n	80044b0 <FreqSweepMenuInputHandler+0x78>
			{
				case SWEEP_MODE_DOWN:
					FS_SetSweepModeDown();
 80044a2:	f000 ffd7 	bl	8005454 <FS_SetSweepModeDown>
					break;
 80044a6:	e003      	b.n	80044b0 <FreqSweepMenuInputHandler+0x78>

				case SWEEP_MODE_UP:
					FS_SetSweepModeUp();
 80044a8:	f001 f802 	bl	80054b0 <FS_SetSweepModeUp>
					break;
 80044ac:	e000      	b.n	80044b0 <FreqSweepMenuInputHandler+0x78>

				case SWEEP_MODE_BIDIR:	// not used
					//SWEEP_TIMER->CR1 |= (TIM_CR1_CMS_0);
					break;
 80044ae:	bf00      	nop
			}
			// switch(active_sweep_mode)
			// TODO
			FS_SetEncoderControlMode(theCurrentEncoderSweepFunction);
 80044b0:	4b46      	ldr	r3, [pc, #280]	; (80045cc <FreqSweepMenuInputHandler+0x194>)
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f001 f823 	bl	8005500 <FS_SetEncoderControlMode>

			break;
 80044ba:	e07a      	b.n	80045b2 <FreqSweepMenuInputHandler+0x17a>

			#ifdef EVENT_MENU_DEBUG
				printf("evEncoderSweep captured\n");
			#endif

			switch(theCurrentEncoderSweepFunction)
 80044bc:	4b43      	ldr	r3, [pc, #268]	; (80045cc <FreqSweepMenuInputHandler+0x194>)
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d002      	beq.n	80044ca <FreqSweepMenuInputHandler+0x92>
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d00b      	beq.n	80044e0 <FreqSweepMenuInputHandler+0xa8>
					break;

			}
			// switch(theCurrentEncoderSweepFunction)

			break;
 80044c8:	e073      	b.n	80045b2 <FreqSweepMenuInputHandler+0x17a>
					FS_SetSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 80044ca:	2000      	movs	r0, #0
 80044cc:	f001 f878 	bl	80055c0 <FS_SetSweepTimerAutoReloadForEncoderControl>
					calculated_sweep_in_hertz = FS_GetCalculatedSweepFrequencyInHertz();
 80044d0:	f001 f8b2 	bl	8005638 <FS_GetCalculatedSweepFrequencyInHertz>
 80044d4:	eef0 7a40 	vmov.f32	s15, s0
 80044d8:	4b3d      	ldr	r3, [pc, #244]	; (80045d0 <FreqSweepMenuInputHandler+0x198>)
 80044da:	edc3 7a00 	vstr	s15, [r3]
					break;
 80044de:	e05e      	b.n	800459e <FreqSweepMenuInputHandler+0x166>
					switch(active_sweep_mode)
 80044e0:	4b39      	ldr	r3, [pc, #228]	; (80045c8 <FreqSweepMenuInputHandler+0x190>)
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d002      	beq.n	80044ee <FreqSweepMenuInputHandler+0xb6>
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d02a      	beq.n	8004542 <FreqSweepMenuInputHandler+0x10a>
							break;
 80044ec:	e056      	b.n	800459c <FreqSweepMenuInputHandler+0x164>
							if(ENCODER_TIMER->CNT < MIN_OUTPUT_ARR)
 80044ee:	4b39      	ldr	r3, [pc, #228]	; (80045d4 <FreqSweepMenuInputHandler+0x19c>)
 80044f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f2:	2b0c      	cmp	r3, #12
 80044f4:	d803      	bhi.n	80044fe <FreqSweepMenuInputHandler+0xc6>
								ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 80044f6:	4b37      	ldr	r3, [pc, #220]	; (80045d4 <FreqSweepMenuInputHandler+0x19c>)
 80044f8:	220d      	movs	r2, #13
 80044fa:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 80044fc:	e04e      	b.n	800459c <FreqSweepMenuInputHandler+0x164>
							else if (ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 80044fe:	4b35      	ldr	r3, [pc, #212]	; (80045d4 <FreqSweepMenuInputHandler+0x19c>)
 8004500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004502:	ee07 3a90 	vmov	s15, r3
 8004506:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800450a:	4b33      	ldr	r3, [pc, #204]	; (80045d8 <FreqSweepMenuInputHandler+0x1a0>)
 800450c:	edd3 7a00 	vldr	s15, [r3]
 8004510:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004518:	dd09      	ble.n	800452e <FreqSweepMenuInputHandler+0xf6>
								ENCODER_TIMER->CNT = sweep_upper_bounds_longest_output_arr;
 800451a:	4b2f      	ldr	r3, [pc, #188]	; (80045d8 <FreqSweepMenuInputHandler+0x1a0>)
 800451c:	edd3 7a00 	vldr	s15, [r3]
 8004520:	4b2c      	ldr	r3, [pc, #176]	; (80045d4 <FreqSweepMenuInputHandler+0x19c>)
 8004522:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004526:	ee17 2a90 	vmov	r2, s15
 800452a:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 800452c:	e036      	b.n	800459c <FreqSweepMenuInputHandler+0x164>
								sweep_lower_bounds_shortest_output_arr = ENCODER_TIMER->CNT;
 800452e:	4b29      	ldr	r3, [pc, #164]	; (80045d4 <FreqSweepMenuInputHandler+0x19c>)
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	ee07 3a90 	vmov	s15, r3
 8004536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800453a:	4b28      	ldr	r3, [pc, #160]	; (80045dc <FreqSweepMenuInputHandler+0x1a4>)
 800453c:	edc3 7a00 	vstr	s15, [r3]
							break;
 8004540:	e02c      	b.n	800459c <FreqSweepMenuInputHandler+0x164>
							if(ENCODER_TIMER->CNT >= MAX_OUTPUT_ARR)
 8004542:	4b24      	ldr	r3, [pc, #144]	; (80045d4 <FreqSweepMenuInputHandler+0x19c>)
 8004544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004546:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800454a:	4293      	cmp	r3, r2
 800454c:	d904      	bls.n	8004558 <FreqSweepMenuInputHandler+0x120>
								ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 800454e:	4b21      	ldr	r3, [pc, #132]	; (80045d4 <FreqSweepMenuInputHandler+0x19c>)
 8004550:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004554:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8004556:	e020      	b.n	800459a <FreqSweepMenuInputHandler+0x162>
							else if (ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 8004558:	4b1e      	ldr	r3, [pc, #120]	; (80045d4 <FreqSweepMenuInputHandler+0x19c>)
 800455a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455c:	ee07 3a90 	vmov	s15, r3
 8004560:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004564:	4b1d      	ldr	r3, [pc, #116]	; (80045dc <FreqSweepMenuInputHandler+0x1a4>)
 8004566:	edd3 7a00 	vldr	s15, [r3]
 800456a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800456e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004572:	d509      	bpl.n	8004588 <FreqSweepMenuInputHandler+0x150>
								ENCODER_TIMER->CNT = sweep_lower_bounds_shortest_output_arr;
 8004574:	4b19      	ldr	r3, [pc, #100]	; (80045dc <FreqSweepMenuInputHandler+0x1a4>)
 8004576:	edd3 7a00 	vldr	s15, [r3]
 800457a:	4b16      	ldr	r3, [pc, #88]	; (80045d4 <FreqSweepMenuInputHandler+0x19c>)
 800457c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004580:	ee17 2a90 	vmov	r2, s15
 8004584:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8004586:	e008      	b.n	800459a <FreqSweepMenuInputHandler+0x162>
								sweep_upper_bounds_longest_output_arr = ENCODER_TIMER->CNT;
 8004588:	4b12      	ldr	r3, [pc, #72]	; (80045d4 <FreqSweepMenuInputHandler+0x19c>)
 800458a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458c:	ee07 3a90 	vmov	s15, r3
 8004590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004594:	4b10      	ldr	r3, [pc, #64]	; (80045d8 <FreqSweepMenuInputHandler+0x1a0>)
 8004596:	edc3 7a00 	vstr	s15, [r3]
							break;
 800459a:	bf00      	nop
					break;
 800459c:	bf00      	nop
			break;
 800459e:	e008      	b.n	80045b2 <FreqSweepMenuInputHandler+0x17a>

		// set sweep speed button
		case evSweepSpeedBtn:
			FS_SetEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 80045a0:	2000      	movs	r0, #0
 80045a2:	f000 ffad 	bl	8005500 <FS_SetEncoderControlMode>

			break;
 80045a6:	e004      	b.n	80045b2 <FreqSweepMenuInputHandler+0x17a>

		// set sweep limit button
		case evSweepLimitBtn:
			FS_SetEncoderControlMode(ENCODER_SWEEP_LIMIT_FUNCTION);
 80045a8:	2001      	movs	r0, #1
 80045aa:	f000 ffa9 	bl	8005500 <FS_SetEncoderControlMode>
					break;
			}
			*/
			// switch(active_sweep_mode)

			break;
 80045ae:	e000      	b.n	80045b2 <FreqSweepMenuInputHandler+0x17a>

		default:
			break;
 80045b0:	bf00      	nop
	}
	// switch(pEvent)


	// stay in this state
	eNewEvent = evIdle;
 80045b2:	4b0b      	ldr	r3, [pc, #44]	; (80045e0 <FreqSweepMenuInputHandler+0x1a8>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 80045b8:	230d      	movs	r3, #13
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3708      	adds	r7, #8
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	40000c00 	.word	0x40000c00
 80045c8:	20001e54 	.word	0x20001e54
 80045cc:	20001e55 	.word	0x20001e55
 80045d0:	20001eac 	.word	0x20001eac
 80045d4:	40012c00 	.word	0x40012c00
 80045d8:	20000124 	.word	0x20000124
 80045dc:	20000120 	.word	0x20000120
 80045e0:	20001e53 	.word	0x20001e53

080045e4 <FreqSweepMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuExitHandler()
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqSweepMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80045e8:	f7fc ff58 	bl	800149c <DM_RefreshScreen>

	// disable sweep timer and interrupts
	SWEEP_TIMER->DIER 	&= ~(TIM_DIER_UIE);
 80045ec:	4b0a      	ldr	r3, [pc, #40]	; (8004618 <FreqSweepMenuExitHandler+0x34>)
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	4a09      	ldr	r2, [pc, #36]	; (8004618 <FreqSweepMenuExitHandler+0x34>)
 80045f2:	f023 0301 	bic.w	r3, r3, #1
 80045f6:	60d3      	str	r3, [r2, #12]
	SWEEP_TIMER->CR1 	&= ~(TIM_CR1_CEN);
 80045f8:	4b07      	ldr	r3, [pc, #28]	; (8004618 <FreqSweepMenuExitHandler+0x34>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a06      	ldr	r2, [pc, #24]	; (8004618 <FreqSweepMenuExitHandler+0x34>)
 80045fe:	f023 0301 	bic.w	r3, r3, #1
 8004602:	6013      	str	r3, [r2, #0]



	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8004604:	4b05      	ldr	r3, [pc, #20]	; (800461c <FreqSweepMenuExitHandler+0x38>)
 8004606:	2201      	movs	r2, #1
 8004608:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 800460a:	4b05      	ldr	r3, [pc, #20]	; (8004620 <FreqSweepMenuExitHandler+0x3c>)
 800460c:	2200      	movs	r2, #0
 800460e:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004610:	230a      	movs	r3, #10
}
 8004612:	4618      	mov	r0, r3
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	40000c00 	.word	0x40000c00
 800461c:	20001e56 	.word	0x20001e56
 8004620:	20001e53 	.word	0x20001e53

08004624 <FreqMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuEntryHandler()
{
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqMainMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004628:	f7fc ff38 	bl	800149c <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 800462c:	4b04      	ldr	r3, [pc, #16]	; (8004640 <FreqMainMenuEntryHandler+0x1c>)
 800462e:	2201      	movs	r2, #1
 8004630:	701a      	strb	r2, [r3, #0]

	// stay in this state
	eNewEvent = evIdle;
 8004632:	4b04      	ldr	r3, [pc, #16]	; (8004644 <FreqMainMenuEntryHandler+0x20>)
 8004634:	2200      	movs	r2, #0
 8004636:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004638:	230a      	movs	r3, #10
}
 800463a:	4618      	mov	r0, r3
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	20001e56 	.word	0x20001e56
 8004644:	20001e53 	.word	0x20001e53

08004648 <FreqMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuExitHandler()
{
 8004648:	b580      	push	{r7, lr}
 800464a:	af00      	add	r7, sp, #0
		printf("FreqMainMenuExitHandler Event captured\n");
	#endif


	// disable the menu
	eNextFreqMenuStatus = DISABLE_FREQ_MENU;
 800464c:	4b07      	ldr	r3, [pc, #28]	; (800466c <FreqMainMenuExitHandler+0x24>)
 800464e:	2200      	movs	r2, #0
 8004650:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8004652:	4b07      	ldr	r3, [pc, #28]	; (8004670 <FreqMainMenuExitHandler+0x28>)
 8004654:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004658:	62da      	str	r2, [r3, #44]	; 0x2c

	DM_RefreshScreen();
 800465a:	f7fc ff1f 	bl	800149c <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 800465e:	4b05      	ldr	r3, [pc, #20]	; (8004674 <FreqMainMenuExitHandler+0x2c>)
 8004660:	2200      	movs	r2, #0
 8004662:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004664:	2301      	movs	r3, #1
}
 8004666:	4618      	mov	r0, r3
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	20001e56 	.word	0x20001e56
 8004670:	40012c00 	.word	0x40012c00
 8004674:	20001e53 	.word	0x20001e53

08004678 <FreqPresetMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuEntryHandler()
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPresetMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 800467e:	f7fc ff0d 	bl	800149c <DM_RefreshScreen>
	FreqO_ResetLastEncoderValue();
 8004682:	f000 fedb 	bl	800543c <FreqO_ResetLastEncoderValue>

	eNextFreqMenuStatus = ENABLE_FREQ_PRESET_MENU;
 8004686:	4b0e      	ldr	r3, [pc, #56]	; (80046c0 <FreqPresetMenuEntryHandler+0x48>)
 8004688:	2202      	movs	r2, #2
 800468a:	701a      	strb	r2, [r3, #0]

	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 800468c:	f000 fe88 	bl	80053a0 <FreqO_GetFPresetObject>
 8004690:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d008      	beq.n	80046aa <FreqPresetMenuEntryHandler+0x32>
	{
		// set rotary encoder limit to full scale and set centre starting position
		ENCODER_TIMER->CNT = 32768;
 8004698:	4b0a      	ldr	r3, [pc, #40]	; (80046c4 <FreqPresetMenuEntryHandler+0x4c>)
 800469a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800469e:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = 65535;
 80046a0:	4b08      	ldr	r3, [pc, #32]	; (80046c4 <FreqPresetMenuEntryHandler+0x4c>)
 80046a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80046a8:	e002      	b.n	80046b0 <FreqPresetMenuEntryHandler+0x38>
	}
	else
	{
		DM_SetErrorDebugMsg("_FreqPresetMenuEntryHandler: pFreqPresetTmp null pointer");
 80046aa:	4807      	ldr	r0, [pc, #28]	; (80046c8 <FreqPresetMenuEntryHandler+0x50>)
 80046ac:	f7fc ff3c 	bl	8001528 <DM_SetErrorDebugMsg>
	}


	// stay in this state
	eNewEvent = evIdle;
 80046b0:	4b06      	ldr	r3, [pc, #24]	; (80046cc <FreqPresetMenuEntryHandler+0x54>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 80046b6:	230b      	movs	r3, #11
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3708      	adds	r7, #8
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	20001e56 	.word	0x20001e56
 80046c4:	40012c00 	.word	0x40012c00
 80046c8:	08013a78 	.word	0x08013a78
 80046cc:	20001e53 	.word	0x20001e53

080046d0 <FreqPresetMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuInputHandler()
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPresetMenuInputHandler Event captured\n");
	#endif

	FreqO_MapEncoderPositionToBothOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 80046d4:	2001      	movs	r0, #1
 80046d6:	f001 fea3 	bl	8006420 <SM_GetEncoderValue>
 80046da:	4603      	mov	r3, r0
 80046dc:	4618      	mov	r0, r3
 80046de:	f000 fdb1 	bl	8005244 <FreqO_MapEncoderPositionToBothOutput>

	// stay in this state
	eNewEvent = evIdle;
 80046e2:	4b03      	ldr	r3, [pc, #12]	; (80046f0 <FreqPresetMenuInputHandler+0x20>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 80046e8:	230b      	movs	r3, #11
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	20001e53 	.word	0x20001e53

080046f4 <FreqPresetMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuExitHandler()
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPresetMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80046f8:	f7fc fed0 	bl	800149c <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 80046fc:	4b04      	ldr	r3, [pc, #16]	; (8004710 <FreqPresetMenuExitHandler+0x1c>)
 80046fe:	2201      	movs	r2, #1
 8004700:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004702:	4b04      	ldr	r3, [pc, #16]	; (8004714 <FreqPresetMenuExitHandler+0x20>)
 8004704:	2200      	movs	r2, #0
 8004706:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004708:	230a      	movs	r3, #10
}
 800470a:	4618      	mov	r0, r3
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	20001e56 	.word	0x20001e56
 8004714:	20001e53 	.word	0x20001e53

08004718 <FreqAdjustMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuEntryHandler()
{
 8004718:	b580      	push	{r7, lr}
 800471a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqAdjustMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 800471c:	f7fc febe 	bl	800149c <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_ADJUST_MENU;
 8004720:	4b08      	ldr	r3, [pc, #32]	; (8004744 <FreqAdjustMenuEntryHandler+0x2c>)
 8004722:	2203      	movs	r2, #3
 8004724:	701a      	strb	r2, [r3, #0]

	// set rotary encoder limit to full scale and set OUTPUT_TIMER "TOP" starting position
	ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8004726:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800472a:	4a07      	ldr	r2, [pc, #28]	; (8004748 <FreqAdjustMenuEntryHandler+0x30>)
 800472c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472e:	6253      	str	r3, [r2, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8004730:	4b05      	ldr	r3, [pc, #20]	; (8004748 <FreqAdjustMenuEntryHandler+0x30>)
 8004732:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004736:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 8004738:	4b04      	ldr	r3, [pc, #16]	; (800474c <FreqAdjustMenuEntryHandler+0x34>)
 800473a:	2200      	movs	r2, #0
 800473c:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 800473e:	230c      	movs	r3, #12
}
 8004740:	4618      	mov	r0, r3
 8004742:	bd80      	pop	{r7, pc}
 8004744:	20001e56 	.word	0x20001e56
 8004748:	40012c00 	.word	0x40012c00
 800474c:	20001e53 	.word	0x20001e53

08004750 <FreqAdjustMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuInputHandler()
{
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqAdjustMenuInputHandler Event captured\n");
	#endif

	FreqO_AdjustFreq();
 8004754:	f000 fdf6 	bl	8005344 <FreqO_AdjustFreq>

	// stay in this state
	eNewEvent = evIdle;
 8004758:	4b02      	ldr	r3, [pc, #8]	; (8004764 <FreqAdjustMenuInputHandler+0x14>)
 800475a:	2200      	movs	r2, #0
 800475c:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 800475e:	230c      	movs	r3, #12
}
 8004760:	4618      	mov	r0, r3
 8004762:	bd80      	pop	{r7, pc}
 8004764:	20001e53 	.word	0x20001e53

08004768 <FreqAdjustMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuExitHandler()
{
 8004768:	b580      	push	{r7, lr}
 800476a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqAdjustMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 800476c:	f7fc fe96 	bl	800149c <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8004770:	4b04      	ldr	r3, [pc, #16]	; (8004784 <FreqAdjustMenuExitHandler+0x1c>)
 8004772:	2201      	movs	r2, #1
 8004774:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004776:	4b04      	ldr	r3, [pc, #16]	; (8004788 <FreqAdjustMenuExitHandler+0x20>)
 8004778:	2200      	movs	r2, #0
 800477a:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 800477c:	230a      	movs	r3, #10
}
 800477e:	4618      	mov	r0, r3
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	20001e56 	.word	0x20001e56
 8004788:	20001e53 	.word	0x20001e53

0800478c <FreqMenu_getStatus>:
 *	@param None
 *	@retval None
 *
 */
eFreqMenu_Status FreqMenu_getStatus()
{
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0
	return eNextFreqMenuStatus;
 8004790:	4b03      	ldr	r3, [pc, #12]	; (80047a0 <FreqMenu_getStatus+0x14>)
 8004792:	781b      	ldrb	r3, [r3, #0]
}
 8004794:	4618      	mov	r0, r3
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	20001e56 	.word	0x20001e56

080047a4 <FuncMenu_getStatus>:
eFuncMenu_Status eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;



eFuncMenu_Status FuncMenu_getStatus()
{
 80047a4:	b480      	push	{r7}
 80047a6:	af00      	add	r7, sp, #0
	return eNextFuncMenuStatus;
 80047a8:	4b03      	ldr	r3, [pc, #12]	; (80047b8 <FuncMenu_getStatus+0x14>)
 80047aa:	781b      	ldrb	r3, [r3, #0]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	20001e57 	.word	0x20001e57

080047bc <FuncMainMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuEntryHandler(void)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncMainMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80047c0:	f7fc fe6c 	bl	800149c <DM_RefreshScreen>

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 80047c4:	4b04      	ldr	r3, [pc, #16]	; (80047d8 <FuncMainMenuEntryHandler+0x1c>)
 80047c6:	2201      	movs	r2, #1
 80047c8:	701a      	strb	r2, [r3, #0]

	eNewEvent = evIdle;
 80047ca:	4b04      	ldr	r3, [pc, #16]	; (80047dc <FuncMainMenuEntryHandler+0x20>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 80047d0:	2303      	movs	r3, #3
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	20001e57 	.word	0x20001e57
 80047dc:	20001e53 	.word	0x20001e53

080047e0 <FuncMainMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuExitHandler()
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncMainMenuExitHandler Event captured\n");
	#endif

	eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;
 80047e4:	4b06      	ldr	r3, [pc, #24]	; (8004800 <FuncMainMenuExitHandler+0x20>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	701a      	strb	r2, [r3, #0]

	// reset the encoder range
	ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 80047ea:	2002      	movs	r0, #2
 80047ec:	f000 f9d0 	bl	8004b90 <ToplevelMenu_setStatus>

	DM_RefreshScreen();
 80047f0:	f7fc fe54 	bl	800149c <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 80047f4:	4b03      	ldr	r3, [pc, #12]	; (8004804 <FuncMainMenuExitHandler+0x24>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 80047fa:	2301      	movs	r3, #1
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	20001e57 	.word	0x20001e57
 8004804:	20001e53 	.word	0x20001e53

08004808 <FuncSignalMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuEntryHandler(void)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncSignalMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 800480c:	f7fc fe46 	bl	800149c <DM_RefreshScreen>
	FuncO_ResetLastEncoderValue();
 8004810:	f000 ff40 	bl	8005694 <FuncO_ResetLastEncoderValue>

	eNextFuncMenuStatus = 	ENABLE_FUNC_SIGNAL_MENU;
 8004814:	4b08      	ldr	r3, [pc, #32]	; (8004838 <FuncSignalMenuEntryHandler+0x30>)
 8004816:	2202      	movs	r2, #2
 8004818:	701a      	strb	r2, [r3, #0]
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
	}
*/

	ENCODER_TIMER->CNT = 32768;
 800481a:	4b08      	ldr	r3, [pc, #32]	; (800483c <FuncSignalMenuEntryHandler+0x34>)
 800481c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004820:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8004822:	4b06      	ldr	r3, [pc, #24]	; (800483c <FuncSignalMenuEntryHandler+0x34>)
 8004824:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004828:	62da      	str	r2, [r3, #44]	; 0x2c

	eNewEvent = evIdle;
 800482a:	4b05      	ldr	r3, [pc, #20]	; (8004840 <FuncSignalMenuEntryHandler+0x38>)
 800482c:	2200      	movs	r2, #0
 800482e:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 8004830:	2304      	movs	r3, #4
}
 8004832:	4618      	mov	r0, r3
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	20001e57 	.word	0x20001e57
 800483c:	40012c00 	.word	0x40012c00
 8004840:	20001e53 	.word	0x20001e53

08004844 <FuncSignalMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuInputHandler(void)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncSignalMenuInputHandler Event captured\n");
	#endif


	FuncO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8004848:	2001      	movs	r0, #1
 800484a:	f001 fde9 	bl	8006420 <SM_GetEncoderValue>
 800484e:	4603      	mov	r3, r0
 8004850:	4618      	mov	r0, r3
 8004852:	f000 ff2b 	bl	80056ac <FuncO_MapEncoderPositionToSignalOutput>


	eNewEvent = evIdle;
 8004856:	4b03      	ldr	r3, [pc, #12]	; (8004864 <FuncSignalMenuInputHandler+0x20>)
 8004858:	2200      	movs	r2, #0
 800485a:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 800485c:	2304      	movs	r3, #4
}
 800485e:	4618      	mov	r0, r3
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	20001e53 	.word	0x20001e53

08004868 <FuncSignalMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuExitHandler()
{
 8004868:	b580      	push	{r7, lr}
 800486a:	af00      	add	r7, sp, #0
		printf("FuncSignalMenuExitHandler Event captured\n");
	#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 800486c:	4b06      	ldr	r3, [pc, #24]	; (8004888 <FuncSignalMenuExitHandler+0x20>)
 800486e:	2201      	movs	r2, #1
 8004870:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

//	ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8004872:	f7fc fe13 	bl	800149c <DM_RefreshScreen>
	SM_ResetFuncPwmDutyMode();
 8004876:	f001 fe77 	bl	8006568 <SM_ResetFuncPwmDutyMode>
	eNewEvent = evIdle;
 800487a:	4b04      	ldr	r3, [pc, #16]	; (800488c <FuncSignalMenuExitHandler+0x24>)
 800487c:	2200      	movs	r2, #0
 800487e:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8004880:	2303      	movs	r3, #3
}
 8004882:	4618      	mov	r0, r3
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	20001e57 	.word	0x20001e57
 800488c:	20001e53 	.word	0x20001e53

08004890 <FuncAuxMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuEntryHandler(void)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncAuxMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004894:	f7fc fe02 	bl	800149c <DM_RefreshScreen>
	FuncO_ResetLastEncoderValue();
 8004898:	f000 fefc 	bl	8005694 <FuncO_ResetLastEncoderValue>

	eNextFuncMenuStatus = 	ENABLE_FUNC_Aux_MENU;
 800489c:	4b08      	ldr	r3, [pc, #32]	; (80048c0 <FuncAuxMenuEntryHandler+0x30>)
 800489e:	2203      	movs	r2, #3
 80048a0:	701a      	strb	r2, [r3, #0]
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
	}
	*/
	ENCODER_TIMER->CNT = 32768;
 80048a2:	4b08      	ldr	r3, [pc, #32]	; (80048c4 <FuncAuxMenuEntryHandler+0x34>)
 80048a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80048a8:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 80048aa:	4b06      	ldr	r3, [pc, #24]	; (80048c4 <FuncAuxMenuEntryHandler+0x34>)
 80048ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048b0:	62da      	str	r2, [r3, #44]	; 0x2c

	eNewEvent = evIdle;
 80048b2:	4b05      	ldr	r3, [pc, #20]	; (80048c8 <FuncAuxMenuEntryHandler+0x38>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 80048b8:	2305      	movs	r3, #5
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	20001e57 	.word	0x20001e57
 80048c4:	40012c00 	.word	0x40012c00
 80048c8:	20001e53 	.word	0x20001e53
 80048cc:	00000000 	.word	0x00000000

080048d0 <FuncAuxMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuInputHandler(void)
{
 80048d0:	b590      	push	{r4, r7, lr}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncAuxMenuInputHandler Event captured\n");
	#endif

	// PWM ADJUST
	if(SM_IsFuncPwmDutyMode())
 80048d6:	f001 fe2b 	bl	8006530 <SM_IsFuncPwmDutyMode>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d01a      	beq.n	8004916 <FuncAuxMenuInputHandler+0x46>
	{
		uint16_t enc_value = SM_GetEncoderValue(ENCODER_FORWARD);
 80048e0:	2000      	movs	r0, #0
 80048e2:	f001 fd9d 	bl	8006420 <SM_GetEncoderValue>
 80048e6:	4603      	mov	r3, r0
 80048e8:	80fb      	strh	r3, [r7, #6]
		PWM_AUX_OUT_TIM->CCR1 = (pow(enc_value, 2));
 80048ea:	88fb      	ldrh	r3, [r7, #6]
 80048ec:	4618      	mov	r0, r3
 80048ee:	f7fb fe31 	bl	8000554 <__aeabi_ui2d>
 80048f2:	4603      	mov	r3, r0
 80048f4:	460c      	mov	r4, r1
 80048f6:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8004938 <FuncAuxMenuInputHandler+0x68>
 80048fa:	ec44 3b10 	vmov	d0, r3, r4
 80048fe:	f00d fbb3 	bl	8012068 <pow>
 8004902:	ec53 2b10 	vmov	r2, r3, d0
 8004906:	4c0e      	ldr	r4, [pc, #56]	; (8004940 <FuncAuxMenuInputHandler+0x70>)
 8004908:	4610      	mov	r0, r2
 800490a:	4619      	mov	r1, r3
 800490c:	f7fc f974 	bl	8000bf8 <__aeabi_d2uiz>
 8004910:	4603      	mov	r3, r0
 8004912:	6363      	str	r3, [r4, #52]	; 0x34
 8004914:	e006      	b.n	8004924 <FuncAuxMenuInputHandler+0x54>
		//BO_SetPwmSignalOffsetForDuty(BO_GetOutputBias() + SM_GetEncoderValue(ENCODER_FORWARD));

	}
	else
	{
		FuncO_MapEncoderPositionToAuxOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8004916:	2001      	movs	r0, #1
 8004918:	f001 fd82 	bl	8006420 <SM_GetEncoderValue>
 800491c:	4603      	mov	r3, r0
 800491e:	4618      	mov	r0, r3
 8004920:	f000 fefe 	bl	8005720 <FuncO_MapEncoderPositionToAuxOutput>
	}

	eNewEvent = evIdle;
 8004924:	4b07      	ldr	r3, [pc, #28]	; (8004944 <FuncAuxMenuInputHandler+0x74>)
 8004926:	2200      	movs	r2, #0
 8004928:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 800492a:	2305      	movs	r3, #5
}
 800492c:	4618      	mov	r0, r3
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	bd90      	pop	{r4, r7, pc}
 8004934:	f3af 8000 	nop.w
 8004938:	00000000 	.word	0x00000000
 800493c:	40000000 	.word	0x40000000
 8004940:	40000400 	.word	0x40000400
 8004944:	20001e53 	.word	0x20001e53

08004948 <FuncAuxToggleDutyMode>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FuncAuxToggleDutyMode()
{
 8004948:	b580      	push	{r7, lr}
 800494a:	af00      	add	r7, sp, #0
	SM_ToggleFuncPwmDutyMode();
 800494c:	f001 fdfc 	bl	8006548 <SM_ToggleFuncPwmDutyMode>
	ENCODER_TIMER->ARR = 16384;
 8004950:	4b04      	ldr	r3, [pc, #16]	; (8004964 <FuncAuxToggleDutyMode+0x1c>)
 8004952:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004956:	62da      	str	r2, [r3, #44]	; 0x2c
	eNewEvent = evIdle;
 8004958:	4b03      	ldr	r3, [pc, #12]	; (8004968 <FuncAuxToggleDutyMode+0x20>)
 800495a:	2200      	movs	r2, #0
 800495c:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 800495e:	2305      	movs	r3, #5
}
 8004960:	4618      	mov	r0, r3
 8004962:	bd80      	pop	{r7, pc}
 8004964:	40012c00 	.word	0x40012c00
 8004968:	20001e53 	.word	0x20001e53

0800496c <FuncAuxMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuExitHandler()
{
 800496c:	b580      	push	{r7, lr}
 800496e:	af00      	add	r7, sp, #0
		printf("FuncAuxMenuExitHandler Event captured\n");
	#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8004970:	4b06      	ldr	r3, [pc, #24]	; (800498c <FuncAuxMenuExitHandler+0x20>)
 8004972:	2201      	movs	r2, #1
 8004974:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;
	SM_ResetFuncPwmDutyMode();
 8004976:	f001 fdf7 	bl	8006568 <SM_ResetFuncPwmDutyMode>
	DM_RefreshScreen();
 800497a:	f7fc fd8f 	bl	800149c <DM_RefreshScreen>

	eNewEvent = evIdle;
 800497e:	4b04      	ldr	r3, [pc, #16]	; (8004990 <FuncAuxMenuExitHandler+0x24>)
 8004980:	2200      	movs	r2, #0
 8004982:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8004984:	2303      	movs	r3, #3
}
 8004986:	4618      	mov	r0, r3
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	20001e57 	.word	0x20001e57
 8004990:	20001e53 	.word	0x20001e53

08004994 <GainMenu_getStatus>:
#include <stdio.h>

eGainMenu_Status eNextGainMenuStatus = 	DISABLE_GAIN_MENU;

eGainMenu_Status GainMenu_getStatus()
{
 8004994:	b480      	push	{r7}
 8004996:	af00      	add	r7, sp, #0
	return eNextGainMenuStatus;
 8004998:	4b03      	ldr	r3, [pc, #12]	; (80049a8 <GainMenu_getStatus+0x14>)
 800499a:	781b      	ldrb	r3, [r3, #0]
}
 800499c:	4618      	mov	r0, r3
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	20001e58 	.word	0x20001e58

080049ac <GainMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuEntryHandler()
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainMainMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80049b0:	f7fc fd74 	bl	800149c <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 80049b4:	4b04      	ldr	r3, [pc, #16]	; (80049c8 <GainMainMenuEntryHandler+0x1c>)
 80049b6:	2201      	movs	r2, #1
 80049b8:	701a      	strb	r2, [r3, #0]

	eNewEvent = evIdle;
 80049ba:	4b04      	ldr	r3, [pc, #16]	; (80049cc <GainMainMenuEntryHandler+0x20>)
 80049bc:	2200      	movs	r2, #0
 80049be:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 80049c0:	2306      	movs	r3, #6
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	20001e58 	.word	0x20001e58
 80049cc:	20001e53 	.word	0x20001e53

080049d0 <GainMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuExitHandler()
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainMainMenuExitHandler Event captured\n");
	#endif

	eNextGainMenuStatus = DISABLE_GAIN_MENU;
 80049d4:	4b05      	ldr	r3, [pc, #20]	; (80049ec <GainMainMenuExitHandler+0x1c>)
 80049d6:	2200      	movs	r2, #0
 80049d8:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 80049da:	f7fc fd5f 	bl	800149c <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 80049de:	4b04      	ldr	r3, [pc, #16]	; (80049f0 <GainMainMenuExitHandler+0x20>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 80049e4:	2301      	movs	r3, #1
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	20001e58 	.word	0x20001e58
 80049f0:	20001e53 	.word	0x20001e53

080049f4 <GainSignalMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuEntryHandler()
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainSignalMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80049fa:	f7fc fd4f 	bl	800149c <DM_RefreshScreen>
	GO_ResetLastEncoderValue();
 80049fe:	f001 f887 	bl	8005b10 <GO_ResetLastEncoderValue>
	VPP_ResetLastEncoderValue();
 8004a02:	f001 fdbd 	bl	8006580 <VPP_ResetLastEncoderValue>

	eNextGainMenuStatus = ENABLE_GAIN_SIGNAL_MENU;
 8004a06:	4b10      	ldr	r3, [pc, #64]	; (8004a48 <GainSignalMenuEntryHandler+0x54>)
 8004a08:	2202      	movs	r2, #2
 8004a0a:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 8004a0c:	2000      	movs	r0, #0
 8004a0e:	f001 fa8b 	bl	8005f28 <SM_GetOutputChannel>
 8004a12:	4603      	mov	r3, r0
 8004a14:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8004a18:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d008      	beq.n	8004a32 <GainSignalMenuEntryHandler+0x3e>
	{
		ENCODER_TIMER->CNT = pTmpVppPreset->epos;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	8b1a      	ldrh	r2, [r3, #24]
 8004a24:	4b09      	ldr	r3, [pc, #36]	; (8004a4c <GainSignalMenuEntryHandler+0x58>)
 8004a26:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;
 8004a28:	4b08      	ldr	r3, [pc, #32]	; (8004a4c <GainSignalMenuEntryHandler+0x58>)
 8004a2a:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 8004a2e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004a30:	e002      	b.n	8004a38 <GainSignalMenuEntryHandler+0x44>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8004a32:	4807      	ldr	r0, [pc, #28]	; (8004a50 <GainSignalMenuEntryHandler+0x5c>)
 8004a34:	f7fc fd78 	bl	8001528 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8004a38:	4b06      	ldr	r3, [pc, #24]	; (8004a54 <GainSignalMenuEntryHandler+0x60>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 8004a3e:	2307      	movs	r3, #7
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3708      	adds	r7, #8
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	20001e58 	.word	0x20001e58
 8004a4c:	40012c00 	.word	0x40012c00
 8004a50:	08013ab4 	.word	0x08013ab4
 8004a54:	20001e53 	.word	0x20001e53

08004a58 <GainSignalMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuInputHandler()
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainSignalMenuInputHandler Event captured\n");
	#endif

	FunctionProfile_t *tmpFuncProfile = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile;
 8004a5e:	2000      	movs	r0, #0
 8004a60:	f001 fa62 	bl	8005f28 <SM_GetOutputChannel>
 8004a64:	4603      	mov	r3, r0
 8004a66:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004a6a:	607b      	str	r3, [r7, #4]
	if(tmpFuncProfile)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d012      	beq.n	8004a98 <GainSignalMenuInputHandler+0x40>
	{
		if(tmpFuncProfile->func == PWM_FUNC_MODE)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	2b06      	cmp	r3, #6
 8004a78:	d107      	bne.n	8004a8a <GainSignalMenuInputHandler+0x32>
		{
			GO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8004a7a:	2001      	movs	r0, #1
 8004a7c:	f001 fcd0 	bl	8006420 <SM_GetEncoderValue>
 8004a80:	4603      	mov	r3, r0
 8004a82:	4618      	mov	r0, r3
 8004a84:	f001 f850 	bl	8005b28 <GO_MapEncoderPositionToSignalOutput>
 8004a88:	e006      	b.n	8004a98 <GainSignalMenuInputHandler+0x40>

		}
		else
		{
			VPP_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8004a8a:	2001      	movs	r0, #1
 8004a8c:	f001 fcc8 	bl	8006420 <SM_GetEncoderValue>
 8004a90:	4603      	mov	r3, r0
 8004a92:	4618      	mov	r0, r3
 8004a94:	f001 fee6 	bl	8006864 <VPP_MapEncoderPositionToSignalOutput>
		}
	}
	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_REVERSE));
	//

	eNewEvent = evYellowBtn;
 8004a98:	4b03      	ldr	r3, [pc, #12]	; (8004aa8 <GainSignalMenuInputHandler+0x50>)
 8004a9a:	2203      	movs	r2, #3
 8004a9c:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 8004a9e:	2307      	movs	r3, #7
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	20001e53 	.word	0x20001e53

08004aac <GainSignalMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuExitHandler()
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainSignalMenuExitHandler Event captured\n");
	#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8004ab0:	4b05      	ldr	r3, [pc, #20]	; (8004ac8 <GainSignalMenuExitHandler+0x1c>)
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004ab6:	f7fc fcf1 	bl	800149c <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004aba:	4b04      	ldr	r3, [pc, #16]	; (8004acc <GainSignalMenuExitHandler+0x20>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8004ac0:	2306      	movs	r3, #6
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	20001e58 	.word	0x20001e58
 8004acc:	20001e53 	.word	0x20001e53

08004ad0 <GainAuxMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuEntryHandler()
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainAuxMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004ad6:	f7fc fce1 	bl	800149c <DM_RefreshScreen>
	VPP_ResetLastEncoderValue();
 8004ada:	f001 fd51 	bl	8006580 <VPP_ResetLastEncoderValue>

	eNextGainMenuStatus = ENABLE_GAIN_Aux_MENU;
 8004ade:	4b10      	ldr	r3, [pc, #64]	; (8004b20 <GainAuxMenuEntryHandler+0x50>)
 8004ae0:	2203      	movs	r2, #3
 8004ae2:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile;
 8004ae4:	2001      	movs	r0, #1
 8004ae6:	f001 fa1f 	bl	8005f28 <SM_GetOutputChannel>
 8004aea:	4603      	mov	r3, r0
 8004aec:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8004af0:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d008      	beq.n	8004b0a <GainAuxMenuEntryHandler+0x3a>
	{
		ENCODER_TIMER->CNT = pTmpVppPreset->epos;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	8b1a      	ldrh	r2, [r3, #24]
 8004afc:	4b09      	ldr	r3, [pc, #36]	; (8004b24 <GainAuxMenuEntryHandler+0x54>)
 8004afe:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;
 8004b00:	4b08      	ldr	r3, [pc, #32]	; (8004b24 <GainAuxMenuEntryHandler+0x54>)
 8004b02:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 8004b06:	62da      	str	r2, [r3, #44]	; 0x2c
 8004b08:	e002      	b.n	8004b10 <GainAuxMenuEntryHandler+0x40>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8004b0a:	4807      	ldr	r0, [pc, #28]	; (8004b28 <GainAuxMenuEntryHandler+0x58>)
 8004b0c:	f7fc fd0c 	bl	8001528 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8004b10:	4b06      	ldr	r3, [pc, #24]	; (8004b2c <GainAuxMenuEntryHandler+0x5c>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	701a      	strb	r2, [r3, #0]
	return Gain_Aux_Menu_State;
 8004b16:	2308      	movs	r3, #8
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3708      	adds	r7, #8
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	20001e58 	.word	0x20001e58
 8004b24:	40012c00 	.word	0x40012c00
 8004b28:	08013ab4 	.word	0x08013ab4
 8004b2c:	20001e53 	.word	0x20001e53

08004b30 <GainAuxMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuInputHandler()
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainAuxMenuInputHandler Event captured\n");
	#endif

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_REVERSE));
	VPP_MapEncoderPositionToAuxOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8004b34:	2001      	movs	r0, #1
 8004b36:	f001 fc73 	bl	8006420 <SM_GetEncoderValue>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f001 fecb 	bl	80068d8 <VPP_MapEncoderPositionToAuxOutput>

	eNewEvent = evYellowBtn;
 8004b42:	4b03      	ldr	r3, [pc, #12]	; (8004b50 <GainAuxMenuInputHandler+0x20>)
 8004b44:	2203      	movs	r2, #3
 8004b46:	701a      	strb	r2, [r3, #0]
	return Gain_Aux_Menu_State;
 8004b48:	2308      	movs	r3, #8
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	20001e53 	.word	0x20001e53

08004b54 <GainAuxMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuExitHandler()
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainAuxMenuExitHandler Event captured\n");
	#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8004b58:	4b05      	ldr	r3, [pc, #20]	; (8004b70 <GainAuxMenuExitHandler+0x1c>)
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004b5e:	f7fc fc9d 	bl	800149c <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004b62:	4b04      	ldr	r3, [pc, #16]	; (8004b74 <GainAuxMenuExitHandler+0x20>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8004b68:	2306      	movs	r3, #6
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	20001e58 	.word	0x20001e58
 8004b74:	20001e53 	.word	0x20001e53

08004b78 <ToplevelMenu_getStatus>:
eToplevelMenu_Status eNextToplevelMenuStatus = 	ENABLE_TOPLEVEL_MAIN_MENU;



eToplevelMenu_Status ToplevelMenu_getStatus()
{
 8004b78:	b480      	push	{r7}
 8004b7a:	af00      	add	r7, sp, #0
	return eNextToplevelMenuStatus;
 8004b7c:	4b03      	ldr	r3, [pc, #12]	; (8004b8c <ToplevelMenu_getStatus+0x14>)
 8004b7e:	781b      	ldrb	r3, [r3, #0]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	20000000 	.word	0x20000000

08004b90 <ToplevelMenu_setStatus>:

void ToplevelMenu_setStatus(eToplevelMenu_Status pStatus)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	4603      	mov	r3, r0
 8004b98:	71fb      	strb	r3, [r7, #7]
	eNextToplevelMenuStatus = pStatus;
 8004b9a:	4a04      	ldr	r2, [pc, #16]	; (8004bac <ToplevelMenu_setStatus+0x1c>)
 8004b9c:	79fb      	ldrb	r3, [r7, #7]
 8004b9e:	7013      	strb	r3, [r2, #0]
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	20000000 	.word	0x20000000

08004bb0 <ToplevelOutputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuEntryHandler()
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelOutputMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004bb4:	f7fc fc72 	bl	800149c <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_OUTPUT_MENU;
 8004bb8:	4b04      	ldr	r3, [pc, #16]	; (8004bcc <ToplevelOutputMenuEntryHandler+0x1c>)
 8004bba:	2202      	movs	r2, #2
 8004bbc:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 8004bbe:	4b04      	ldr	r3, [pc, #16]	; (8004bd0 <ToplevelOutputMenuEntryHandler+0x20>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004bc4:	2301      	movs	r3, #1
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	20000000 	.word	0x20000000
 8004bd0:	20001e53 	.word	0x20001e53

08004bd4 <ToplevelOutputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuExitHandler()
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelOutputMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004bd8:	f7fc fc60 	bl	800149c <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 8004bdc:	4b04      	ldr	r3, [pc, #16]	; (8004bf0 <ToplevelOutputMenuExitHandler+0x1c>)
 8004bde:	2201      	movs	r2, #1
 8004be0:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004be2:	4b04      	ldr	r3, [pc, #16]	; (8004bf4 <ToplevelOutputMenuExitHandler+0x20>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	20000000 	.word	0x20000000
 8004bf4:	20001e53 	.word	0x20001e53

08004bf8 <ToplevelInputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuEntryHandler()
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004bfc:	f7fc fc4e 	bl	800149c <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_INPUT_MENU;
 8004c00:	4b04      	ldr	r3, [pc, #16]	; (8004c14 <ToplevelInputMenuEntryHandler+0x1c>)
 8004c02:	2203      	movs	r2, #3
 8004c04:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 8004c06:	4b04      	ldr	r3, [pc, #16]	; (8004c18 <ToplevelInputMenuEntryHandler+0x20>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	701a      	strb	r2, [r3, #0]
	return Toplevel_Input_Menu_State;
 8004c0c:	2302      	movs	r3, #2
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	20000000 	.word	0x20000000
 8004c18:	20001e53 	.word	0x20001e53

08004c1c <ToplevelInputMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuInputHandler(eSystemEvent pEvent)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	4603      	mov	r3, r0
 8004c24:	71fb      	strb	r3, [r7, #7]
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuInputHandler Event captured\n");
	#endif


		switch(pEvent)
 8004c26:	79fb      	ldrb	r3, [r7, #7]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d002      	beq.n	8004c32 <ToplevelInputMenuInputHandler+0x16>
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d06b      	beq.n	8004d08 <ToplevelInputMenuInputHandler+0xec>
				// re-enable the trigger input for new mode
				ToplevelInputMenuInputHandler(evBlueBtn);
				break;

			default:
				break;
 8004c30:	e085      	b.n	8004d3e <ToplevelInputMenuInputHandler+0x122>
				if(isTriggerInputEnabled)
 8004c32:	4b47      	ldr	r3, [pc, #284]	; (8004d50 <ToplevelInputMenuInputHandler+0x134>)
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d01b      	beq.n	8004c72 <ToplevelInputMenuInputHandler+0x56>
					OUTPUT_TIMER->SMCR &= ~(TIM_SMCR_ECE);
 8004c3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004c44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c48:	6093      	str	r3, [r2, #8]
					OUTPUT_TIMER->SMCR &= ~(TIM_TS_TI1FP1);
 8004c4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004c54:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 8004c58:	6093      	str	r3, [r2, #8]
					OUTPUT_TIMER->SMCR &= ~(TIM_SMCR_SMS_2);
 8004c5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004c64:	f023 0304 	bic.w	r3, r3, #4
 8004c68:	6093      	str	r3, [r2, #8]
					isTriggerInputEnabled = DISABLE_TRIGGER_INPUT;
 8004c6a:	4b39      	ldr	r3, [pc, #228]	; (8004d50 <ToplevelInputMenuInputHandler+0x134>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	701a      	strb	r2, [r3, #0]
				break;
 8004c70:	e065      	b.n	8004d3e <ToplevelInputMenuInputHandler+0x122>
					switch(activeInputerTriggerMode)
 8004c72:	4b38      	ldr	r3, [pc, #224]	; (8004d54 <ToplevelInputMenuInputHandler+0x138>)
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d028      	beq.n	8004ccc <ToplevelInputMenuInputHandler+0xb0>
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d033      	beq.n	8004ce6 <ToplevelInputMenuInputHandler+0xca>
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d13e      	bne.n	8004d00 <ToplevelInputMenuInputHandler+0xe4>
							HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);		// TS5A3357 Pin6
 8004c82:	2201      	movs	r2, #1
 8004c84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c88:	4833      	ldr	r0, [pc, #204]	; (8004d58 <ToplevelInputMenuInputHandler+0x13c>)
 8004c8a:	f006 f9e5 	bl	800b058 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); 	// TS5A3357 Pin5
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c94:	4830      	ldr	r0, [pc, #192]	; (8004d58 <ToplevelInputMenuInputHandler+0x13c>)
 8004c96:	f006 f9df 	bl	800b058 <HAL_GPIO_WritePin>
							OUTPUT_TIMER->SMCR |= (TIM_SMCR_ECE);
 8004c9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ca8:	6093      	str	r3, [r2, #8]
							OUTPUT_TIMER->SMCR |= (TIM_TS_TI1FP1);
 8004caa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004cb4:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8004cb8:	6093      	str	r3, [r2, #8]
							OUTPUT_TIMER->SMCR |= (TIM_SMCR_SMS_2);
 8004cba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004cc4:	f043 0304 	orr.w	r3, r3, #4
 8004cc8:	6093      	str	r3, [r2, #8]
							break;
 8004cca:	e019      	b.n	8004d00 <ToplevelInputMenuInputHandler+0xe4>
							HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004cd2:	4821      	ldr	r0, [pc, #132]	; (8004d58 <ToplevelInputMenuInputHandler+0x13c>)
 8004cd4:	f006 f9c0 	bl	800b058 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_SET); 		// TS5A3357 Pin5
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004cde:	481e      	ldr	r0, [pc, #120]	; (8004d58 <ToplevelInputMenuInputHandler+0x13c>)
 8004ce0:	f006 f9ba 	bl	800b058 <HAL_GPIO_WritePin>
							break;
 8004ce4:	e00c      	b.n	8004d00 <ToplevelInputMenuInputHandler+0xe4>
							HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);		// TS5A3357 Pin6
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004cec:	481a      	ldr	r0, [pc, #104]	; (8004d58 <ToplevelInputMenuInputHandler+0x13c>)
 8004cee:	f006 f9b3 	bl	800b058 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_SET);		// TS5A3357 Pin5
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004cf8:	4817      	ldr	r0, [pc, #92]	; (8004d58 <ToplevelInputMenuInputHandler+0x13c>)
 8004cfa:	f006 f9ad 	bl	800b058 <HAL_GPIO_WritePin>
							break;
 8004cfe:	bf00      	nop
					isTriggerInputEnabled = ENABLE_TRIGGER_INPUT;
 8004d00:	4b13      	ldr	r3, [pc, #76]	; (8004d50 <ToplevelInputMenuInputHandler+0x134>)
 8004d02:	2201      	movs	r2, #1
 8004d04:	701a      	strb	r2, [r3, #0]
				break;
 8004d06:	e01a      	b.n	8004d3e <ToplevelInputMenuInputHandler+0x122>
				switch(activeInputerTriggerMode)
 8004d08:	4b12      	ldr	r3, [pc, #72]	; (8004d54 <ToplevelInputMenuInputHandler+0x138>)
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d007      	beq.n	8004d20 <ToplevelInputMenuInputHandler+0x104>
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d009      	beq.n	8004d28 <ToplevelInputMenuInputHandler+0x10c>
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10b      	bne.n	8004d30 <ToplevelInputMenuInputHandler+0x114>
						activeInputerTriggerMode = INPUT_TRIGGER_COMP;
 8004d18:	4b0e      	ldr	r3, [pc, #56]	; (8004d54 <ToplevelInputMenuInputHandler+0x138>)
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	701a      	strb	r2, [r3, #0]
						break;
 8004d1e:	e007      	b.n	8004d30 <ToplevelInputMenuInputHandler+0x114>
						activeInputerTriggerMode = INPUT_TRIGGER_ADC;
 8004d20:	4b0c      	ldr	r3, [pc, #48]	; (8004d54 <ToplevelInputMenuInputHandler+0x138>)
 8004d22:	2202      	movs	r2, #2
 8004d24:	701a      	strb	r2, [r3, #0]
						break;
 8004d26:	e003      	b.n	8004d30 <ToplevelInputMenuInputHandler+0x114>
						activeInputerTriggerMode = INPUT_TRIGGER_TIM;
 8004d28:	4b0a      	ldr	r3, [pc, #40]	; (8004d54 <ToplevelInputMenuInputHandler+0x138>)
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	701a      	strb	r2, [r3, #0]
						break;
 8004d2e:	bf00      	nop
				ToplevelInputMenuInputHandler(evBlueBtn);
 8004d30:	2001      	movs	r0, #1
 8004d32:	f7ff ff73 	bl	8004c1c <ToplevelInputMenuInputHandler>
				ToplevelInputMenuInputHandler(evBlueBtn);
 8004d36:	2001      	movs	r0, #1
 8004d38:	f7ff ff70 	bl	8004c1c <ToplevelInputMenuInputHandler>
				break;
 8004d3c:	bf00      	nop
		}
	// stay in this state
	eNewEvent = evIdle;
 8004d3e:	4b07      	ldr	r3, [pc, #28]	; (8004d5c <ToplevelInputMenuInputHandler+0x140>)
 8004d40:	2200      	movs	r2, #0
 8004d42:	701a      	strb	r2, [r3, #0]
	return Toplevel_Input_Menu_State;
 8004d44:	2302      	movs	r3, #2
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	20001e59 	.word	0x20001e59
 8004d54:	20001e5a 	.word	0x20001e5a
 8004d58:	48000800 	.word	0x48000800
 8004d5c:	20001e53 	.word	0x20001e53

08004d60 <ToplevelInputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuExitHandler()
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004d64:	f7fc fb9a 	bl	800149c <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 8004d68:	4b04      	ldr	r3, [pc, #16]	; (8004d7c <ToplevelInputMenuExitHandler+0x1c>)
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004d6e:	4b04      	ldr	r3, [pc, #16]	; (8004d80 <ToplevelInputMenuExitHandler+0x20>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	20000000 	.word	0x20000000
 8004d80:	20001e53 	.word	0x20001e53

08004d84 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8004d8c:	4b07      	ldr	r3, [pc, #28]	; (8004dac <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8004d8e:	695a      	ldr	r2, [r3, #20]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4013      	ands	r3, r2
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d101      	bne.n	8004d9e <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e000      	b.n	8004da0 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr
 8004dac:	40010400 	.word	0x40010400

08004db0 <IM_Init>:
uint16_t encbtn_last_interrupt_time = 0;
uint16_t encpos_last_interrupt_time = 0;


void IM_Init()
{
 8004db0:	b480      	push	{r7}
 8004db2:	af00      	add	r7, sp, #0
	  // debounce timer
	  DEBOUNCE_TIMER->CR1 |= TIM_CR1_CEN;
 8004db4:	4b05      	ldr	r3, [pc, #20]	; (8004dcc <IM_Init+0x1c>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a04      	ldr	r2, [pc, #16]	; (8004dcc <IM_Init+0x1c>)
 8004dba:	f043 0301 	orr.w	r3, r3, #1
 8004dbe:	6013      	str	r3, [r2, #0]
}
 8004dc0:	bf00      	nop
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	40014400 	.word	0x40014400

08004dd0 <IM_SWEEP_UPDATE_TIM_IRQHandler>:
 *	@param None
 *	@retval None
 *
 */
void IM_SWEEP_UPDATE_TIM_IRQHandler()
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	af00      	add	r7, sp, #0
	#ifdef ENABLE_PWM_SWEEP
		eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
	#endif	//ENABLE_PWM_SWEEP

		// upcounter (decreasing freq)
	if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 8004dd4:	4b2a      	ldr	r3, [pc, #168]	; (8004e80 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xb0>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0310 	and.w	r3, r3, #16
 8004ddc:	2b10      	cmp	r3, #16
 8004dde:	d11f      	bne.n	8004e20 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x50>
	{
		// if we reach lower freq limit for sweep, reset to highest freq limit
		if(OUTPUT_TIMER->ARR >= sweep_upper_bounds_longest_output_arr)
 8004de0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de6:	ee07 3a90 	vmov	s15, r3
 8004dea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004dee:	4b25      	ldr	r3, [pc, #148]	; (8004e84 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xb4>)
 8004df0:	edd3 7a00 	vldr	s15, [r3]
 8004df4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dfc:	db0a      	blt.n	8004e14 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x44>
		{
			OUTPUT_TIMER->ARR = sweep_lower_bounds_shortest_output_arr;
 8004dfe:	4b22      	ldr	r3, [pc, #136]	; (8004e88 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xb8>)
 8004e00:	edd3 7a00 	vldr	s15, [r3]
 8004e04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e0c:	ee17 2a90 	vmov	r2, s15
 8004e10:	62da      	str	r2, [r3, #44]	; 0x2c
			}
		}
	}

	//SWEEP_TIMER->ARR--;
}
 8004e12:	e02f      	b.n	8004e74 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>
			OUTPUT_TIMER->ARR++;
 8004e14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e1a:	3201      	adds	r2, #1
 8004e1c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004e1e:	e029      	b.n	8004e74 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>
		if(OUTPUT_TIMER->ARR == 0x1U)
 8004e20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d105      	bne.n	8004e36 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x66>
			OUTPUT_TIMER->ARR = MAX_OUTPUT_ARR;
 8004e2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e32:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004e34:	e01e      	b.n	8004e74 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>
			if(OUTPUT_TIMER->ARR <= sweep_lower_bounds_shortest_output_arr)
 8004e36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3c:	ee07 3a90 	vmov	s15, r3
 8004e40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004e44:	4b10      	ldr	r3, [pc, #64]	; (8004e88 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xb8>)
 8004e46:	edd3 7a00 	vldr	s15, [r3]
 8004e4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e52:	d80a      	bhi.n	8004e6a <IM_SWEEP_UPDATE_TIM_IRQHandler+0x9a>
				OUTPUT_TIMER->ARR = sweep_upper_bounds_longest_output_arr;
 8004e54:	4b0b      	ldr	r3, [pc, #44]	; (8004e84 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xb4>)
 8004e56:	edd3 7a00 	vldr	s15, [r3]
 8004e5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e62:	ee17 2a90 	vmov	r2, s15
 8004e66:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004e68:	e004      	b.n	8004e74 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>
				OUTPUT_TIMER->ARR--;
 8004e6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e70:	3a01      	subs	r2, #1
 8004e72:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004e74:	bf00      	nop
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	40000c00 	.word	0x40000c00
 8004e84:	20000124 	.word	0x20000124
 8004e88:	20000120 	.word	0x20000120

08004e8c <IM_BTN1_EXTI14_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN1_EXTI14_Handler()
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004e92:	4b0f      	ldr	r3, [pc, #60]	; (8004ed0 <IM_BTN1_EXTI14_Handler+0x44>)
 8004e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e96:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn1_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004e98:	88fb      	ldrh	r3, [r7, #6]
 8004e9a:	4a0e      	ldr	r2, [pc, #56]	; (8004ed4 <IM_BTN1_EXTI14_Handler+0x48>)
 8004e9c:	8812      	ldrh	r2, [r2, #0]
 8004e9e:	1a9b      	subs	r3, r3, r2
 8004ea0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ea4:	dd0c      	ble.n	8004ec0 <IM_BTN1_EXTI14_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14))
 8004ea6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004eaa:	f7ff ff6b 	bl	8004d84 <LL_EXTI_IsActiveFlag_0_31>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d005      	beq.n	8004ec0 <IM_BTN1_EXTI14_Handler+0x34>
		{

			EM_SetNewEvent(evBlueBtn);
 8004eb4:	2001      	movs	r0, #1
 8004eb6:	f7ff fa59 	bl	800436c <EM_SetNewEvent>
			printf("'Blue' BTN1_EXTI14_Pin\n");
 8004eba:	4807      	ldr	r0, [pc, #28]	; (8004ed8 <IM_BTN1_EXTI14_Handler+0x4c>)
 8004ebc:	f00a ffbc 	bl	800fe38 <puts>
		}
	}
	btn1_last_interrupt_time = interrupt_time;
 8004ec0:	4a04      	ldr	r2, [pc, #16]	; (8004ed4 <IM_BTN1_EXTI14_Handler+0x48>)
 8004ec2:	88fb      	ldrh	r3, [r7, #6]
 8004ec4:	8013      	strh	r3, [r2, #0]


}
 8004ec6:	bf00      	nop
 8004ec8:	3708      	adds	r7, #8
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	40014400 	.word	0x40014400
 8004ed4:	20001e5c 	.word	0x20001e5c
 8004ed8:	08013aec 	.word	0x08013aec

08004edc <IM_BTN2_EXTI15_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN2_EXTI15_Handler()
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004ee2:	4b0f      	ldr	r3, [pc, #60]	; (8004f20 <IM_BTN2_EXTI15_Handler+0x44>)
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee6:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn2_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004ee8:	88fb      	ldrh	r3, [r7, #6]
 8004eea:	4a0e      	ldr	r2, [pc, #56]	; (8004f24 <IM_BTN2_EXTI15_Handler+0x48>)
 8004eec:	8812      	ldrh	r2, [r2, #0]
 8004eee:	1a9b      	subs	r3, r3, r2
 8004ef0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ef4:	dd0c      	ble.n	8004f10 <IM_BTN2_EXTI15_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15))
 8004ef6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004efa:	f7ff ff43 	bl	8004d84 <LL_EXTI_IsActiveFlag_0_31>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d005      	beq.n	8004f10 <IM_BTN2_EXTI15_Handler+0x34>
		{
			EM_SetNewEvent(evYellowBtn);
 8004f04:	2003      	movs	r0, #3
 8004f06:	f7ff fa31 	bl	800436c <EM_SetNewEvent>
			printf("'Yellow' BTN2_EXTI15_Pin\n");
 8004f0a:	4807      	ldr	r0, [pc, #28]	; (8004f28 <IM_BTN2_EXTI15_Handler+0x4c>)
 8004f0c:	f00a ff94 	bl	800fe38 <puts>
		}
	}
	btn2_last_interrupt_time = interrupt_time;
 8004f10:	4a04      	ldr	r2, [pc, #16]	; (8004f24 <IM_BTN2_EXTI15_Handler+0x48>)
 8004f12:	88fb      	ldrh	r3, [r7, #6]
 8004f14:	8013      	strh	r3, [r2, #0]


}
 8004f16:	bf00      	nop
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	40014400 	.word	0x40014400
 8004f24:	20001e5e 	.word	0x20001e5e
 8004f28:	08013b04 	.word	0x08013b04

08004f2c <IM_BTN3_EXTI0_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN3_EXTI0_Handler()
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004f32:	4b0e      	ldr	r3, [pc, #56]	; (8004f6c <IM_BTN3_EXTI0_Handler+0x40>)
 8004f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f36:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn3_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004f38:	88fb      	ldrh	r3, [r7, #6]
 8004f3a:	4a0d      	ldr	r2, [pc, #52]	; (8004f70 <IM_BTN3_EXTI0_Handler+0x44>)
 8004f3c:	8812      	ldrh	r2, [r2, #0]
 8004f3e:	1a9b      	subs	r3, r3, r2
 8004f40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f44:	dd0b      	ble.n	8004f5e <IM_BTN3_EXTI0_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0))
 8004f46:	2001      	movs	r0, #1
 8004f48:	f7ff ff1c 	bl	8004d84 <LL_EXTI_IsActiveFlag_0_31>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d005      	beq.n	8004f5e <IM_BTN3_EXTI0_Handler+0x32>
		{
			EM_SetNewEvent(evRedBtn);
 8004f52:	2004      	movs	r0, #4
 8004f54:	f7ff fa0a 	bl	800436c <EM_SetNewEvent>
			printf("'Red' BTN3_EXTI0_Pin\n");
 8004f58:	4806      	ldr	r0, [pc, #24]	; (8004f74 <IM_BTN3_EXTI0_Handler+0x48>)
 8004f5a:	f00a ff6d 	bl	800fe38 <puts>
		}
	}
	btn3_last_interrupt_time = interrupt_time;
 8004f5e:	4a04      	ldr	r2, [pc, #16]	; (8004f70 <IM_BTN3_EXTI0_Handler+0x44>)
 8004f60:	88fb      	ldrh	r3, [r7, #6]
 8004f62:	8013      	strh	r3, [r2, #0]


}
 8004f64:	bf00      	nop
 8004f66:	3708      	adds	r7, #8
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	40014400 	.word	0x40014400
 8004f70:	20001e60 	.word	0x20001e60
 8004f74:	08013b20 	.word	0x08013b20

08004f78 <IM_BTN4_EXTI1_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN4_EXTI1_Handler()
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004f7e:	4b0e      	ldr	r3, [pc, #56]	; (8004fb8 <IM_BTN4_EXTI1_Handler+0x40>)
 8004f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f82:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn4_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004f84:	88fb      	ldrh	r3, [r7, #6]
 8004f86:	4a0d      	ldr	r2, [pc, #52]	; (8004fbc <IM_BTN4_EXTI1_Handler+0x44>)
 8004f88:	8812      	ldrh	r2, [r2, #0]
 8004f8a:	1a9b      	subs	r3, r3, r2
 8004f8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f90:	dd0b      	ble.n	8004faa <IM_BTN4_EXTI1_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1))
 8004f92:	2002      	movs	r0, #2
 8004f94:	f7ff fef6 	bl	8004d84 <LL_EXTI_IsActiveFlag_0_31>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d005      	beq.n	8004faa <IM_BTN4_EXTI1_Handler+0x32>
		{
			EM_SetNewEvent(evGreenBtn);
 8004f9e:	2002      	movs	r0, #2
 8004fa0:	f7ff f9e4 	bl	800436c <EM_SetNewEvent>
			printf("'Green' BTN4_EXTI1_Pin\n");
 8004fa4:	4806      	ldr	r0, [pc, #24]	; (8004fc0 <IM_BTN4_EXTI1_Handler+0x48>)
 8004fa6:	f00a ff47 	bl	800fe38 <puts>
		}
	}
	btn4_last_interrupt_time = interrupt_time;
 8004faa:	4a04      	ldr	r2, [pc, #16]	; (8004fbc <IM_BTN4_EXTI1_Handler+0x44>)
 8004fac:	88fb      	ldrh	r3, [r7, #6]
 8004fae:	8013      	strh	r3, [r2, #0]


}
 8004fb0:	bf00      	nop
 8004fb2:	3708      	adds	r7, #8
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	40014400 	.word	0x40014400
 8004fbc:	20001e62 	.word	0x20001e62
 8004fc0:	08013b38 	.word	0x08013b38

08004fc4 <IM_ENC_EXTI2_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_EXTI2_Handler()
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004fca:	4b0e      	ldr	r3, [pc, #56]	; (8005004 <IM_ENC_EXTI2_Handler+0x40>)
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fce:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - encbtn_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004fd0:	88fb      	ldrh	r3, [r7, #6]
 8004fd2:	4a0d      	ldr	r2, [pc, #52]	; (8005008 <IM_ENC_EXTI2_Handler+0x44>)
 8004fd4:	8812      	ldrh	r2, [r2, #0]
 8004fd6:	1a9b      	subs	r3, r3, r2
 8004fd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fdc:	dd0b      	ble.n	8004ff6 <IM_ENC_EXTI2_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2))
 8004fde:	2004      	movs	r0, #4
 8004fe0:	f7ff fed0 	bl	8004d84 <LL_EXTI_IsActiveFlag_0_31>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d005      	beq.n	8004ff6 <IM_ENC_EXTI2_Handler+0x32>
		{
			EM_SetNewEvent(evEncoderPush);
 8004fea:	2006      	movs	r0, #6
 8004fec:	f7ff f9be 	bl	800436c <EM_SetNewEvent>
			printf("'EncoderPush' ENC_EXTI2_Pin\n");
 8004ff0:	4806      	ldr	r0, [pc, #24]	; (800500c <IM_ENC_EXTI2_Handler+0x48>)
 8004ff2:	f00a ff21 	bl	800fe38 <puts>
		}
	}
	encbtn_last_interrupt_time = interrupt_time;
 8004ff6:	4a04      	ldr	r2, [pc, #16]	; (8005008 <IM_ENC_EXTI2_Handler+0x44>)
 8004ff8:	88fb      	ldrh	r3, [r7, #6]
 8004ffa:	8013      	strh	r3, [r2, #0]


}
 8004ffc:	bf00      	nop
 8004ffe:	3708      	adds	r7, #8
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	40014400 	.word	0x40014400
 8005008:	20001e64 	.word	0x20001e64
 800500c:	08013b50 	.word	0x08013b50

08005010 <IM_ENC_DIRF_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_DIRF_Handler()
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0

	if((TIM1->SR & TIM_SR_DIRF) == TIM_SR_DIRF)
 8005016:	4b11      	ldr	r3, [pc, #68]	; (800505c <IM_ENC_DIRF_Handler+0x4c>)
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800501e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005022:	d117      	bne.n	8005054 <IM_ENC_DIRF_Handler+0x44>
	{
		uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8005024:	4b0e      	ldr	r3, [pc, #56]	; (8005060 <IM_ENC_DIRF_Handler+0x50>)
 8005026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005028:	80fb      	strh	r3, [r7, #6]
		if ((interrupt_time - encpos_last_interrupt_time) > 0)
 800502a:	88fb      	ldrh	r3, [r7, #6]
 800502c:	4a0d      	ldr	r2, [pc, #52]	; (8005064 <IM_ENC_DIRF_Handler+0x54>)
 800502e:	8812      	ldrh	r2, [r2, #0]
 8005030:	1a9b      	subs	r3, r3, r2
 8005032:	2b00      	cmp	r3, #0
 8005034:	dd0b      	ble.n	800504e <IM_ENC_DIRF_Handler+0x3e>
		{
			EM_SetNewEvent(evEncoderSet);
 8005036:	2005      	movs	r0, #5
 8005038:	f7ff f998 	bl	800436c <EM_SetNewEvent>
			printf("Encoder new direction\n");
 800503c:	480a      	ldr	r0, [pc, #40]	; (8005068 <IM_ENC_DIRF_Handler+0x58>)
 800503e:	f00a fefb 	bl	800fe38 <puts>
			TIM1->SR &= ~(TIM_SR_DIRF);
 8005042:	4b06      	ldr	r3, [pc, #24]	; (800505c <IM_ENC_DIRF_Handler+0x4c>)
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	4a05      	ldr	r2, [pc, #20]	; (800505c <IM_ENC_DIRF_Handler+0x4c>)
 8005048:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800504c:	6113      	str	r3, [r2, #16]
		}
		encpos_last_interrupt_time = interrupt_time;
 800504e:	4a05      	ldr	r2, [pc, #20]	; (8005064 <IM_ENC_DIRF_Handler+0x54>)
 8005050:	88fb      	ldrh	r3, [r7, #6]
 8005052:	8013      	strh	r3, [r2, #0]


	}


}
 8005054:	bf00      	nop
 8005056:	3708      	adds	r7, #8
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	40012c00 	.word	0x40012c00
 8005060:	40014400 	.word	0x40014400
 8005064:	20001e66 	.word	0x20001e66
 8005068:	08013b6c 	.word	0x08013b6c

0800506c <BO_GetBiasPolarity>:
 *	@param None
 *	@retval None
 *
 */
eBias_Polarity BO_GetBiasPolarity()
{
 800506c:	b480      	push	{r7}
 800506e:	af00      	add	r7, sp, #0
	return eBiasPolarity;
 8005070:	4b03      	ldr	r3, [pc, #12]	; (8005080 <BO_GetBiasPolarity+0x14>)
 8005072:	781b      	ldrb	r3, [r3, #0]
}
 8005074:	4618      	mov	r0, r3
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	20000001 	.word	0x20000001

08005084 <BO_GetDcBiasEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t BO_GetDcBiasEncoderValue()
{
 8005084:	b480      	push	{r7}
 8005086:	af00      	add	r7, sp, #0
	return dc_bias_encoder_value;
 8005088:	4b03      	ldr	r3, [pc, #12]	; (8005098 <BO_GetDcBiasEncoderValue+0x14>)
 800508a:	881b      	ldrh	r3, [r3, #0]
}
 800508c:	4618      	mov	r0, r3
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	20000002 	.word	0x20000002

0800509c <BO_MapEncoderPositionToSignalOutput>:
 *	@param None
 *	@retval None
 *
 */
void BO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	4603      	mov	r3, r0
 80050a4:	80fb      	strh	r3, [r7, #6]
	// pEncoderValue is reversed for correct rotary encoder operation.
	// However, we want to retain the forward direction value to prevent polarity flip!
	dc_bias_encoder_value = SM_GetEncoderValue(ENCODER_FORWARD);
 80050a6:	2000      	movs	r0, #0
 80050a8:	f001 f9ba 	bl	8006420 <SM_GetEncoderValue>
 80050ac:	4603      	mov	r3, r0
 80050ae:	461a      	mov	r2, r3
 80050b0:	4b1b      	ldr	r3, [pc, #108]	; (8005120 <BO_MapEncoderPositionToSignalOutput+0x84>)
 80050b2:	801a      	strh	r2, [r3, #0]

	// apply negative dc bias
	if(pEncoderValue < BIAS_CENTER) {
 80050b4:	88fb      	ldrh	r3, [r7, #6]
 80050b6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80050ba:	d214      	bcs.n	80050e6 <BO_MapEncoderPositionToSignalOutput+0x4a>

		eBiasPolarity = INVERSEBIAS;
 80050bc:	4b19      	ldr	r3, [pc, #100]	; (8005124 <BO_MapEncoderPositionToSignalOutput+0x88>)
 80050be:	2200      	movs	r2, #0
 80050c0:	701a      	strb	r2, [r3, #0]


		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((BIAS_CENTER - pEncoderValue) * BIAS_MAG));
 80050c2:	88fb      	ldrh	r3, [r7, #6]
 80050c4:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 80050c8:	4613      	mov	r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	4413      	add	r3, r2
 80050ce:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 80050d0:	2200      	movs	r2, #0
 80050d2:	2110      	movs	r1, #16
 80050d4:	4814      	ldr	r0, [pc, #80]	; (8005128 <BO_MapEncoderPositionToSignalOutput+0x8c>)
 80050d6:	f005 f807 	bl	800a0e8 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 80050da:	2201      	movs	r2, #1
 80050dc:	2108      	movs	r1, #8
 80050de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050e2:	f005 ffb9 	bl	800b058 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(pEncoderValue >= BIAS_CENTER) {
 80050e6:	88fb      	ldrh	r3, [r7, #6]
 80050e8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80050ec:	d314      	bcc.n	8005118 <BO_MapEncoderPositionToSignalOutput+0x7c>

		eBiasPolarity = NORMALBIAS;
 80050ee:	4b0d      	ldr	r3, [pc, #52]	; (8005124 <BO_MapEncoderPositionToSignalOutput+0x88>)
 80050f0:	2201      	movs	r2, #1
 80050f2:	701a      	strb	r2, [r3, #0]
		//TIM1->CNT = pEncoderValue;

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((pEncoderValue - BIAS_CENTER) * BIAS_MAG));
 80050f4:	88fb      	ldrh	r3, [r7, #6]
 80050f6:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 80050fa:	4613      	mov	r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	4413      	add	r3, r2
 8005100:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8005102:	2200      	movs	r2, #0
 8005104:	2110      	movs	r1, #16
 8005106:	4808      	ldr	r0, [pc, #32]	; (8005128 <BO_MapEncoderPositionToSignalOutput+0x8c>)
 8005108:	f004 ffee 	bl	800a0e8 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 800510c:	2200      	movs	r2, #0
 800510e:	2108      	movs	r1, #8
 8005110:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005114:	f005 ffa0 	bl	800b058 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_RESET);
	}
}
 8005118:	bf00      	nop
 800511a:	3708      	adds	r7, #8
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	20000002 	.word	0x20000002
 8005124:	20000001 	.word	0x20000001
 8005128:	2000263c 	.word	0x2000263c

0800512c <BO_GetOutputBias>:
 *	@param None
 *	@retval None
 *
 */
uint32_t BO_GetOutputBias()
{
 800512c:	b580      	push	{r7, lr}
 800512e:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 8005130:	2110      	movs	r1, #16
 8005132:	4803      	ldr	r0, [pc, #12]	; (8005140 <BO_GetOutputBias+0x14>)
 8005134:	f005 f814 	bl	800a160 <HAL_DAC_GetValue>
 8005138:	4603      	mov	r3, r0
}
 800513a:	4618      	mov	r0, r3
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	2000263c 	.word	0x2000263c

08005144 <FreqO_InitFreqProfiles>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_InitFreqProfiles()
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++)
 800514a:	2300      	movs	r3, #0
 800514c:	607b      	str	r3, [r7, #4]
 800514e:	e06b      	b.n	8005228 <FreqO_InitFreqProfiles+0xe4>
	{
		// prevent divide by zero (prescaler)
		if(theFreqProfiles[i].psc == 0)
 8005150:	493a      	ldr	r1, [pc, #232]	; (800523c <FreqO_InitFreqProfiles+0xf8>)
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	4613      	mov	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4413      	add	r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	440b      	add	r3, r1
 800515e:	3308      	adds	r3, #8
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d129      	bne.n	80051ba <FreqO_InitFreqProfiles+0x76>
			theFreqProfiles[i].arr = ((SM_MCLK / theFreqProfiles[i].hertz) / SM_FSAMP) * theFreqProfiles[i].error;
 8005166:	4935      	ldr	r1, [pc, #212]	; (800523c <FreqO_InitFreqProfiles+0xf8>)
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	4613      	mov	r3, r2
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	4413      	add	r3, r2
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	440b      	add	r3, r1
 8005174:	3304      	adds	r3, #4
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a31      	ldr	r2, [pc, #196]	; (8005240 <FreqO_InitFreqProfiles+0xfc>)
 800517a:	fbb2 f3f3 	udiv	r3, r2, r3
 800517e:	ee07 3a90 	vmov	s15, r3
 8005182:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005186:	492d      	ldr	r1, [pc, #180]	; (800523c <FreqO_InitFreqProfiles+0xf8>)
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	4613      	mov	r3, r2
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	4413      	add	r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	440b      	add	r3, r1
 8005194:	3310      	adds	r3, #16
 8005196:	edd3 7a00 	vldr	s15, [r3]
 800519a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800519e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051a2:	ee17 0a90 	vmov	r0, s15
 80051a6:	4925      	ldr	r1, [pc, #148]	; (800523c <FreqO_InitFreqProfiles+0xf8>)
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	4613      	mov	r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	4413      	add	r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	440b      	add	r3, r1
 80051b4:	330c      	adds	r3, #12
 80051b6:	6018      	str	r0, [r3, #0]
 80051b8:	e033      	b.n	8005222 <FreqO_InitFreqProfiles+0xde>
		else
			theFreqProfiles[i].arr = (((SM_MCLK / theFreqProfiles[i].hertz) / theFreqProfiles[i].psc) / SM_FSAMP) * theFreqProfiles[i].error;
 80051ba:	4920      	ldr	r1, [pc, #128]	; (800523c <FreqO_InitFreqProfiles+0xf8>)
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	4613      	mov	r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	4413      	add	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	440b      	add	r3, r1
 80051c8:	3304      	adds	r3, #4
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a1c      	ldr	r2, [pc, #112]	; (8005240 <FreqO_InitFreqProfiles+0xfc>)
 80051ce:	fbb2 f1f3 	udiv	r1, r2, r3
 80051d2:	481a      	ldr	r0, [pc, #104]	; (800523c <FreqO_InitFreqProfiles+0xf8>)
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	4613      	mov	r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4413      	add	r3, r2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	4403      	add	r3, r0
 80051e0:	3308      	adds	r3, #8
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80051e8:	ee07 3a90 	vmov	s15, r3
 80051ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80051f0:	4912      	ldr	r1, [pc, #72]	; (800523c <FreqO_InitFreqProfiles+0xf8>)
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	4613      	mov	r3, r2
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	4413      	add	r3, r2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	440b      	add	r3, r1
 80051fe:	3310      	adds	r3, #16
 8005200:	edd3 7a00 	vldr	s15, [r3]
 8005204:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005208:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800520c:	ee17 0a90 	vmov	r0, s15
 8005210:	490a      	ldr	r1, [pc, #40]	; (800523c <FreqO_InitFreqProfiles+0xf8>)
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	4613      	mov	r3, r2
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	4413      	add	r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	440b      	add	r3, r1
 800521e:	330c      	adds	r3, #12
 8005220:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	3301      	adds	r3, #1
 8005226:	607b      	str	r3, [r7, #4]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b0d      	cmp	r3, #13
 800522c:	dd90      	ble.n	8005150 <FreqO_InitFreqProfiles+0xc>
	}
}
 800522e:	bf00      	nop
 8005230:	370c      	adds	r7, #12
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	20000004 	.word	0x20000004
 8005240:	00155cc0 	.word	0x00155cc0

08005244 <FreqO_MapEncoderPositionToBothOutput>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_MapEncoderPositionToBothOutput(uint16_t pEncValue)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	4603      	mov	r3, r0
 800524c:	80fb      	strh	r3, [r7, #6]

	uint32_t tmpFreqIndex = freq_profile->index;
 800524e:	4b1b      	ldr	r3, [pc, #108]	; (80052bc <FreqO_MapEncoderPositionToBothOutput+0x78>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	60fb      	str	r3, [r7, #12]
	if(pEncValue > freq_last_encoder_value)
 8005256:	4b1a      	ldr	r3, [pc, #104]	; (80052c0 <FreqO_MapEncoderPositionToBothOutput+0x7c>)
 8005258:	881b      	ldrh	r3, [r3, #0]
 800525a:	88fa      	ldrh	r2, [r7, #6]
 800525c:	429a      	cmp	r2, r3
 800525e:	d910      	bls.n	8005282 <FreqO_MapEncoderPositionToBothOutput+0x3e>
	{
		tmpFreqIndex++;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	3301      	adds	r3, #1
 8005264:	60fb      	str	r3, [r7, #12]
		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = MAX_NUM_FREQ_PRESETS-1;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2b0d      	cmp	r3, #13
 800526a:	d901      	bls.n	8005270 <FreqO_MapEncoderPositionToBothOutput+0x2c>
 800526c:	230d      	movs	r3, #13
 800526e:	60fb      	str	r3, [r7, #12]
		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f000 f8cf 	bl	8005414 <FreqO_GetProfileByIndex>
 8005276:	4603      	mov	r3, r0
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	4618      	mov	r0, r3
 800527c:	f000 f822 	bl	80052c4 <FreqO_ApplyProfile>
 8005280:	e014      	b.n	80052ac <FreqO_MapEncoderPositionToBothOutput+0x68>
	}
	else if (pEncValue < freq_last_encoder_value)
 8005282:	4b0f      	ldr	r3, [pc, #60]	; (80052c0 <FreqO_MapEncoderPositionToBothOutput+0x7c>)
 8005284:	881b      	ldrh	r3, [r3, #0]
 8005286:	88fa      	ldrh	r2, [r7, #6]
 8005288:	429a      	cmp	r2, r3
 800528a:	d20f      	bcs.n	80052ac <FreqO_MapEncoderPositionToBothOutput+0x68>
	{
		tmpFreqIndex--;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	3b01      	subs	r3, #1
 8005290:	60fb      	str	r3, [r7, #12]
		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = 0;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2b0d      	cmp	r3, #13
 8005296:	d901      	bls.n	800529c <FreqO_MapEncoderPositionToBothOutput+0x58>
 8005298:	2300      	movs	r3, #0
 800529a:	60fb      	str	r3, [r7, #12]
		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	f000 f8b9 	bl	8005414 <FreqO_GetProfileByIndex>
 80052a2:	4603      	mov	r3, r0
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f000 f80c 	bl	80052c4 <FreqO_ApplyProfile>
	}
	freq_last_encoder_value = pEncValue;
 80052ac:	4a04      	ldr	r2, [pc, #16]	; (80052c0 <FreqO_MapEncoderPositionToBothOutput+0x7c>)
 80052ae:	88fb      	ldrh	r3, [r7, #6]
 80052b0:	8013      	strh	r3, [r2, #0]

}
 80052b2:	bf00      	nop
 80052b4:	3710      	adds	r7, #16
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	2000011c 	.word	0x2000011c
 80052c0:	20001e68 	.word	0x20001e68

080052c4 <FreqO_ApplyProfile>:
 *	@retval None
 *
 */

void FreqO_ApplyProfile(eFreqSettings_t pPresetEnum)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
//	DacTimeReg_t* tmpDT = DT_GetRegisterByEnum(pPresetEnum);
	FreqProfile_t* tmpFreqProfile = FreqO_FindFPresetObject(pPresetEnum);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 f873 	bl	80053b8 <FreqO_FindFPresetObject>
 80052d2:	60f8      	str	r0, [r7, #12]
	if(tmpFreqProfile)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d026      	beq.n	8005328 <FreqO_ApplyProfile+0x64>
	{

		OUTPUT_TIMER->PSC = tmpFreqProfile->psc;
 80052da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	6293      	str	r3, [r2, #40]	; 0x28
		OUTPUT_TIMER->ARR = tmpFreqProfile->arr;
 80052e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	62d3      	str	r3, [r2, #44]	; 0x2c

		eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 80052ee:	2001      	movs	r0, #1
 80052f0:	f000 fe1a 	bl	8005f28 <SM_GetOutputChannel>
 80052f4:	4603      	mov	r3, r0
 80052f6:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	72fb      	strb	r3, [r7, #11]
		if(tmpOut == PWM_FUNC_MODE)
 80052fe:	7afb      	ldrb	r3, [r7, #11]
 8005300:	2b06      	cmp	r3, #6
 8005302:	d10d      	bne.n	8005320 <FreqO_ApplyProfile+0x5c>
		{
			// duty cycle of PWM require slower settings to get the
			// same frequency as normal output functions
			PWM_AUX_OUT_TIM->PSC = 256;
 8005304:	4b0c      	ldr	r3, [pc, #48]	; (8005338 <FreqO_ApplyProfile+0x74>)
 8005306:	f44f 7280 	mov.w	r2, #256	; 0x100
 800530a:	629a      	str	r2, [r3, #40]	; 0x28
			PWM_AUX_OUT_TIM->ARR = tmpFreqProfile->arr/2;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	4a09      	ldr	r2, [pc, #36]	; (8005338 <FreqO_ApplyProfile+0x74>)
 8005312:	085b      	lsrs	r3, r3, #1
 8005314:	62d3      	str	r3, [r2, #44]	; 0x2c
			PWM_AUX_OUT_TIM->CCR1 = PWM_AUX_OUT_TIM->ARR/2;
 8005316:	4b08      	ldr	r3, [pc, #32]	; (8005338 <FreqO_ApplyProfile+0x74>)
 8005318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531a:	4a07      	ldr	r2, [pc, #28]	; (8005338 <FreqO_ApplyProfile+0x74>)
 800531c:	085b      	lsrs	r3, r3, #1
 800531e:	6353      	str	r3, [r2, #52]	; 0x34
		}

		freq_profile = tmpFreqProfile;
 8005320:	4a06      	ldr	r2, [pc, #24]	; (800533c <FreqO_ApplyProfile+0x78>)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6013      	str	r3, [r2, #0]
	}
	else
	{
		DM_SetErrorDebugMsg("FreqO_ApplyProfile() null pointer error");
	}
}
 8005326:	e002      	b.n	800532e <FreqO_ApplyProfile+0x6a>
		DM_SetErrorDebugMsg("FreqO_ApplyProfile() null pointer error");
 8005328:	4805      	ldr	r0, [pc, #20]	; (8005340 <FreqO_ApplyProfile+0x7c>)
 800532a:	f7fc f8fd 	bl	8001528 <DM_SetErrorDebugMsg>
}
 800532e:	bf00      	nop
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	40000400 	.word	0x40000400
 800533c:	2000011c 	.word	0x2000011c
 8005340:	08013b84 	.word	0x08013b84

08005344 <FreqO_AdjustFreq>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustFreq()
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0

		OUTPUT_TIMER->ARR = SM_GetEncoderValue(ENCODER_FORWARD); //* FREQ_ENCODER_MIDFREQ_MAG;
 800534a:	2000      	movs	r0, #0
 800534c:	f001 f868 	bl	8006420 <SM_GetEncoderValue>
 8005350:	4603      	mov	r3, r0
 8005352:	461a      	mov	r2, r3
 8005354:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005358:	62da      	str	r2, [r3, #44]	; 0x2c

		eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 800535a:	2001      	movs	r0, #1
 800535c:	f000 fde4 	bl	8005f28 <SM_GetOutputChannel>
 8005360:	4603      	mov	r3, r0
 8005362:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	71fb      	strb	r3, [r7, #7]
		if(tmpOut == PWM_FUNC_MODE)
 800536a:	79fb      	ldrb	r3, [r7, #7]
 800536c:	2b06      	cmp	r3, #6
 800536e:	d110      	bne.n	8005392 <FreqO_AdjustFreq+0x4e>
		{
			// duty cycle of PWM require slower settings to get the
			// same frequency as normal output functions
			PWM_AUX_OUT_TIM->PSC = 256;
 8005370:	4b0a      	ldr	r3, [pc, #40]	; (800539c <FreqO_AdjustFreq+0x58>)
 8005372:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005376:	629a      	str	r2, [r3, #40]	; 0x28
			PWM_AUX_OUT_TIM->ARR = SM_GetEncoderValue(ENCODER_FORWARD)/2;
 8005378:	2000      	movs	r0, #0
 800537a:	f001 f851 	bl	8006420 <SM_GetEncoderValue>
 800537e:	4603      	mov	r3, r0
 8005380:	085b      	lsrs	r3, r3, #1
 8005382:	b29a      	uxth	r2, r3
 8005384:	4b05      	ldr	r3, [pc, #20]	; (800539c <FreqO_AdjustFreq+0x58>)
 8005386:	62da      	str	r2, [r3, #44]	; 0x2c
			PWM_AUX_OUT_TIM->CCR1 = PWM_AUX_OUT_TIM->ARR/2;
 8005388:	4b04      	ldr	r3, [pc, #16]	; (800539c <FreqO_AdjustFreq+0x58>)
 800538a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538c:	4a03      	ldr	r2, [pc, #12]	; (800539c <FreqO_AdjustFreq+0x58>)
 800538e:	085b      	lsrs	r3, r3, #1
 8005390:	6353      	str	r3, [r2, #52]	; 0x34

		}
}
 8005392:	bf00      	nop
 8005394:	3708      	adds	r7, #8
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	40000400 	.word	0x40000400

080053a0 <FreqO_GetFPresetObject>:
 *	@param None
 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_GetFPresetObject()
{
 80053a0:	b480      	push	{r7}
 80053a2:	af00      	add	r7, sp, #0
	return freq_profile;
 80053a4:	4b03      	ldr	r3, [pc, #12]	; (80053b4 <FreqO_GetFPresetObject+0x14>)
 80053a6:	681b      	ldr	r3, [r3, #0]
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	2000011c 	.word	0x2000011c

080053b8 <FreqO_FindFPresetObject>:

 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_FindFPresetObject(eFreqSettings_t pEnum)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 80053c0:	2300      	movs	r3, #0
 80053c2:	60fb      	str	r3, [r7, #12]
 80053c4:	e016      	b.n	80053f4 <FreqO_FindFPresetObject+0x3c>
	{
		if(theFreqProfiles[i].hertz == pEnum)
 80053c6:	4911      	ldr	r1, [pc, #68]	; (800540c <FreqO_FindFPresetObject+0x54>)
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	4613      	mov	r3, r2
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	4413      	add	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	440b      	add	r3, r1
 80053d4:	3304      	adds	r3, #4
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d107      	bne.n	80053ee <FreqO_FindFPresetObject+0x36>
		{
			return &theFreqProfiles[i];
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	4613      	mov	r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4413      	add	r3, r2
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	4a08      	ldr	r2, [pc, #32]	; (800540c <FreqO_FindFPresetObject+0x54>)
 80053ea:	4413      	add	r3, r2
 80053ec:	e009      	b.n	8005402 <FreqO_FindFPresetObject+0x4a>
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	3301      	adds	r3, #1
 80053f2:	60fb      	str	r3, [r7, #12]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2b0d      	cmp	r3, #13
 80053f8:	dde5      	ble.n	80053c6 <FreqO_FindFPresetObject+0xe>
		}
	}
	// error!
	DM_SetErrorDebugMsg("FreqO_FindFPresetObject(): no FPreset obj found");
 80053fa:	4805      	ldr	r0, [pc, #20]	; (8005410 <FreqO_FindFPresetObject+0x58>)
 80053fc:	f7fc f894 	bl	8001528 <DM_SetErrorDebugMsg>
	return 0;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	20000004 	.word	0x20000004
 8005410:	08013bac 	.word	0x08013bac

08005414 <FreqO_GetProfileByIndex>:
 *	@param pIndex
 *	@retval pointer to FreqProfile_t object
 *
 */
FreqProfile_t* FreqO_GetProfileByIndex(uint32_t pIndex)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
	return &theFreqProfiles[pIndex];
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	4613      	mov	r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	4413      	add	r3, r2
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	4a04      	ldr	r2, [pc, #16]	; (8005438 <FreqO_GetProfileByIndex+0x24>)
 8005428:	4413      	add	r3, r2
}
 800542a:	4618      	mov	r0, r3
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	20000004 	.word	0x20000004

0800543c <FreqO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_ResetLastEncoderValue()
{
 800543c:	b480      	push	{r7}
 800543e:	af00      	add	r7, sp, #0
	freq_last_encoder_value = 0;
 8005440:	4b03      	ldr	r3, [pc, #12]	; (8005450 <FreqO_ResetLastEncoderValue+0x14>)
 8005442:	2200      	movs	r2, #0
 8005444:	801a      	strh	r2, [r3, #0]
}
 8005446:	bf00      	nop
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr
 8005450:	20001e68 	.word	0x20001e68

08005454 <FS_SetSweepModeDown>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepModeDown()
{
 8005454:	b480      	push	{r7}
 8005456:	af00      	add	r7, sp, #0
	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 8005458:	4b10      	ldr	r3, [pc, #64]	; (800549c <FS_SetSweepModeDown+0x48>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a0f      	ldr	r2, [pc, #60]	; (800549c <FS_SetSweepModeDown+0x48>)
 800545e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005462:	6013      	str	r3, [r2, #0]

	// 0: Counter used as upcounter
	SWEEP_TIMER->CR1 |= (TIM_CR1_DIR);
 8005464:	4b0d      	ldr	r3, [pc, #52]	; (800549c <FS_SetSweepModeDown+0x48>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a0c      	ldr	r2, [pc, #48]	; (800549c <FS_SetSweepModeDown+0x48>)
 800546a:	f043 0310 	orr.w	r3, r3, #16
 800546e:	6013      	str	r3, [r2, #0]

	sweep_lower_bounds_shortest_output_arr  = OUTPUT_TIMER->ARR;
 8005470:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005476:	ee07 3a90 	vmov	s15, r3
 800547a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800547e:	4b08      	ldr	r3, [pc, #32]	; (80054a0 <FS_SetSweepModeDown+0x4c>)
 8005480:	edc3 7a00 	vstr	s15, [r3]
	sweep_upper_bounds_longest_output_arr  = MAX_OUTPUT_ARR;
 8005484:	4b07      	ldr	r3, [pc, #28]	; (80054a4 <FS_SetSweepModeDown+0x50>)
 8005486:	4a08      	ldr	r2, [pc, #32]	; (80054a8 <FS_SetSweepModeDown+0x54>)
 8005488:	601a      	str	r2, [r3, #0]
	ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 800548a:	4b08      	ldr	r3, [pc, #32]	; (80054ac <FS_SetSweepModeDown+0x58>)
 800548c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005490:	625a      	str	r2, [r3, #36]	; 0x24

}
 8005492:	bf00      	nop
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr
 800549c:	40000c00 	.word	0x40000c00
 80054a0:	20000120 	.word	0x20000120
 80054a4:	20000124 	.word	0x20000124
 80054a8:	477fff00 	.word	0x477fff00
 80054ac:	40012c00 	.word	0x40012c00

080054b0 <FS_SetSweepModeUp>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepModeUp()
{
 80054b0:	b480      	push	{r7}
 80054b2:	af00      	add	r7, sp, #0

	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 80054b4:	4b0e      	ldr	r3, [pc, #56]	; (80054f0 <FS_SetSweepModeUp+0x40>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a0d      	ldr	r2, [pc, #52]	; (80054f0 <FS_SetSweepModeUp+0x40>)
 80054ba:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80054be:	6013      	str	r3, [r2, #0]

	// 1: Counter used as downcounter
	SWEEP_TIMER->CR1 &= ~(TIM_CR1_DIR);
 80054c0:	4b0b      	ldr	r3, [pc, #44]	; (80054f0 <FS_SetSweepModeUp+0x40>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a0a      	ldr	r2, [pc, #40]	; (80054f0 <FS_SetSweepModeUp+0x40>)
 80054c6:	f023 0310 	bic.w	r3, r3, #16
 80054ca:	6013      	str	r3, [r2, #0]

	sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 80054cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80054d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d2:	ee07 3a90 	vmov	s15, r3
 80054d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054da:	4b06      	ldr	r3, [pc, #24]	; (80054f4 <FS_SetSweepModeUp+0x44>)
 80054dc:	edc3 7a00 	vstr	s15, [r3]
	sweep_lower_bounds_shortest_output_arr  = MIN_OUTPUT_ARR;
 80054e0:	4b05      	ldr	r3, [pc, #20]	; (80054f8 <FS_SetSweepModeUp+0x48>)
 80054e2:	4a06      	ldr	r2, [pc, #24]	; (80054fc <FS_SetSweepModeUp+0x4c>)
 80054e4:	601a      	str	r2, [r3, #0]


}
 80054e6:	bf00      	nop
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr
 80054f0:	40000c00 	.word	0x40000c00
 80054f4:	20000124 	.word	0x20000124
 80054f8:	20000120 	.word	0x20000120
 80054fc:	41500000 	.word	0x41500000

08005500 <FS_SetEncoderControlMode>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetEncoderControlMode(eEncoderSweepFunctions pFunction)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	4603      	mov	r3, r0
 8005508:	71fb      	strb	r3, [r7, #7]
	if(pFunction)
 800550a:	79fb      	ldrb	r3, [r7, #7]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d03a      	beq.n	8005586 <FS_SetEncoderControlMode+0x86>
	{
		//	ENCODER_SWEEP_LIMIT_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 8005510:	4a25      	ldr	r2, [pc, #148]	; (80055a8 <FS_SetEncoderControlMode+0xa8>)
 8005512:	79fb      	ldrb	r3, [r7, #7]
 8005514:	7013      	strb	r3, [r2, #0]
		ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 8005516:	4b25      	ldr	r3, [pc, #148]	; (80055ac <FS_SetEncoderControlMode+0xac>)
 8005518:	220d      	movs	r2, #13
 800551a:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_OUTPUT_ARR;
 800551c:	4b23      	ldr	r3, [pc, #140]	; (80055ac <FS_SetEncoderControlMode+0xac>)
 800551e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005522:	62da      	str	r2, [r3, #44]	; 0x2c

		switch(active_sweep_mode)
 8005524:	4b22      	ldr	r3, [pc, #136]	; (80055b0 <FS_SetEncoderControlMode+0xb0>)
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d002      	beq.n	8005532 <FS_SetEncoderControlMode+0x32>
 800552c:	2b01      	cmp	r3, #1
 800552e:	d015      	beq.n	800555c <FS_SetEncoderControlMode+0x5c>
					// if encoder position is below the lower bounds set it above it
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
				break;
			default:
				break;
 8005530:	e033      	b.n	800559a <FS_SetEncoderControlMode+0x9a>
					if(ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 8005532:	4b1e      	ldr	r3, [pc, #120]	; (80055ac <FS_SetEncoderControlMode+0xac>)
 8005534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005536:	ee07 3a90 	vmov	s15, r3
 800553a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800553e:	4b1d      	ldr	r3, [pc, #116]	; (80055b4 <FS_SetEncoderControlMode+0xb4>)
 8005540:	edd3 7a00 	vldr	s15, [r3]
 8005544:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800554c:	dc00      	bgt.n	8005550 <FS_SetEncoderControlMode+0x50>
				break;
 800554e:	e024      	b.n	800559a <FS_SetEncoderControlMode+0x9a>
						 ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8005550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005554:	4a15      	ldr	r2, [pc, #84]	; (80055ac <FS_SetEncoderControlMode+0xac>)
 8005556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005558:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 800555a:	e01e      	b.n	800559a <FS_SetEncoderControlMode+0x9a>
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 800555c:	4b13      	ldr	r3, [pc, #76]	; (80055ac <FS_SetEncoderControlMode+0xac>)
 800555e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005560:	ee07 3a90 	vmov	s15, r3
 8005564:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005568:	4b13      	ldr	r3, [pc, #76]	; (80055b8 <FS_SetEncoderControlMode+0xb8>)
 800556a:	edd3 7a00 	vldr	s15, [r3]
 800556e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005576:	d400      	bmi.n	800557a <FS_SetEncoderControlMode+0x7a>
				break;
 8005578:	e00f      	b.n	800559a <FS_SetEncoderControlMode+0x9a>
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 800557a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800557e:	4a0b      	ldr	r2, [pc, #44]	; (80055ac <FS_SetEncoderControlMode+0xac>)
 8005580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005582:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 8005584:	e009      	b.n	800559a <FS_SetEncoderControlMode+0x9a>
		// switch(active_sweep_mode)
	}
	else
	{
		// ENCODER_SWEEP_SPEED_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 8005586:	4a08      	ldr	r2, [pc, #32]	; (80055a8 <FS_SetEncoderControlMode+0xa8>)
 8005588:	79fb      	ldrb	r3, [r7, #7]
 800558a:	7013      	strb	r3, [r2, #0]
		// encoder start value
		ENCODER_TIMER->CNT = 1;
 800558c:	4b07      	ldr	r3, [pc, #28]	; (80055ac <FS_SetEncoderControlMode+0xac>)
 800558e:	2201      	movs	r2, #1
 8005590:	625a      	str	r2, [r3, #36]	; 0x24
		// encoder limit for default (set speed)
		ENCODER_TIMER->ARR = 1600;
 8005592:	4b06      	ldr	r3, [pc, #24]	; (80055ac <FS_SetEncoderControlMode+0xac>)
 8005594:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005598:	62da      	str	r2, [r3, #44]	; 0x2c
	}

}
 800559a:	bf00      	nop
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	20001e55 	.word	0x20001e55
 80055ac:	40012c00 	.word	0x40012c00
 80055b0:	20001e54 	.word	0x20001e54
 80055b4:	20000124 	.word	0x20000124
 80055b8:	20000120 	.word	0x20000120
 80055bc:	00000000 	.word	0x00000000

080055c0 <FS_SetSweepTimerAutoReloadForEncoderControl>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepTimerAutoReloadForEncoderControl(eEncoderSweepFunctions pFunction)
{
 80055c0:	b590      	push	{r4, r7, lr}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	4603      	mov	r3, r0
 80055c8:	71fb      	strb	r3, [r7, #7]
	uint32_t next_sweep_tim_arr;

	if(pFunction)
 80055ca:	79fb      	ldrb	r3, [r7, #7]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d122      	bne.n	8005616 <FS_SetSweepTimerAutoReloadForEncoderControl+0x56>

	}
	else
	{
		// get logarithmic curve to speed up turns at low end
		next_sweep_tim_arr = MIN_SWEEP_ARR + (pow(ENCODER_TIMER->CNT, 3));
 80055d0:	4b17      	ldr	r3, [pc, #92]	; (8005630 <FS_SetSweepTimerAutoReloadForEncoderControl+0x70>)
 80055d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7fa ffbd 	bl	8000554 <__aeabi_ui2d>
 80055da:	4603      	mov	r3, r0
 80055dc:	460c      	mov	r4, r1
 80055de:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8005620 <FS_SetSweepTimerAutoReloadForEncoderControl+0x60>
 80055e2:	ec44 3b10 	vmov	d0, r3, r4
 80055e6:	f00c fd3f 	bl	8012068 <pow>
 80055ea:	ec51 0b10 	vmov	r0, r1, d0
 80055ee:	a30e      	add	r3, pc, #56	; (adr r3, 8005628 <FS_SetSweepTimerAutoReloadForEncoderControl+0x68>)
 80055f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f4:	f7fa fe72 	bl	80002dc <__adddf3>
 80055f8:	4603      	mov	r3, r0
 80055fa:	460c      	mov	r4, r1
 80055fc:	4618      	mov	r0, r3
 80055fe:	4621      	mov	r1, r4
 8005600:	f7fb fafa 	bl	8000bf8 <__aeabi_d2uiz>
 8005604:	4603      	mov	r3, r0
 8005606:	60fb      	str	r3, [r7, #12]

		if(next_sweep_tim_arr < 0xFFFFFFFF)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800560e:	d002      	beq.n	8005616 <FS_SetSweepTimerAutoReloadForEncoderControl+0x56>
		{
			SWEEP_TIMER->ARR = next_sweep_tim_arr;
 8005610:	4a08      	ldr	r2, [pc, #32]	; (8005634 <FS_SetSweepTimerAutoReloadForEncoderControl+0x74>)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	62d3      	str	r3, [r2, #44]	; 0x2c

		}
	}
}
 8005616:	bf00      	nop
 8005618:	3714      	adds	r7, #20
 800561a:	46bd      	mov	sp, r7
 800561c:	bd90      	pop	{r4, r7, pc}
 800561e:	bf00      	nop
 8005620:	00000000 	.word	0x00000000
 8005624:	40080000 	.word	0x40080000
 8005628:	00000000 	.word	0x00000000
 800562c:	40d06800 	.word	0x40d06800
 8005630:	40012c00 	.word	0x40012c00
 8005634:	40000c00 	.word	0x40000c00

08005638 <FS_GetCalculatedSweepFrequencyInHertz>:
 *	@param None
 *	@retval None
 *
 */
float FS_GetCalculatedSweepFrequencyInHertz()
{
 8005638:	b480      	push	{r7}
 800563a:	af00      	add	r7, sp, #0
	if(SWEEP_TIMER->PSC == 0)
 800563c:	4b13      	ldr	r3, [pc, #76]	; (800568c <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 800563e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005640:	2b00      	cmp	r3, #0
 8005642:	d10a      	bne.n	800565a <FS_GetCalculatedSweepFrequencyInHertz+0x22>
	{
		return (float)SM_MCLK / ((float)1 * (float)SWEEP_TIMER->ARR);
 8005644:	4b11      	ldr	r3, [pc, #68]	; (800568c <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005648:	ee07 3a90 	vmov	s15, r3
 800564c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005650:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8005690 <FS_GetCalculatedSweepFrequencyInHertz+0x58>
 8005654:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005658:	e011      	b.n	800567e <FS_GetCalculatedSweepFrequencyInHertz+0x46>
	}
	else
	{
		return (float)SM_MCLK / ((float)SWEEP_TIMER->PSC * (float)SWEEP_TIMER->ARR);
 800565a:	4b0c      	ldr	r3, [pc, #48]	; (800568c <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 800565c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565e:	ee07 3a90 	vmov	s15, r3
 8005662:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005666:	4b09      	ldr	r3, [pc, #36]	; (800568c <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566a:	ee07 3a90 	vmov	s15, r3
 800566e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005672:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005676:	eddf 6a06 	vldr	s13, [pc, #24]	; 8005690 <FS_GetCalculatedSweepFrequencyInHertz+0x58>
 800567a:	eec6 7a87 	vdiv.f32	s15, s13, s14
	}

}
 800567e:	eeb0 0a67 	vmov.f32	s0, s15
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	40000c00 	.word	0x40000c00
 8005690:	4d2037a0 	.word	0x4d2037a0

08005694 <FuncO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void FuncO_ResetLastEncoderValue()
{
 8005694:	b480      	push	{r7}
 8005696:	af00      	add	r7, sp, #0
	func_last_encoder_value = 0;
 8005698:	4b03      	ldr	r3, [pc, #12]	; (80056a8 <FuncO_ResetLastEncoderValue+0x14>)
 800569a:	2200      	movs	r2, #0
 800569c:	801a      	strh	r2, [r3, #0]
}
 800569e:	bf00      	nop
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr
 80056a8:	20001e96 	.word	0x20001e96

080056ac <FuncO_MapEncoderPositionToSignalOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	4603      	mov	r3, r0
 80056b4:	80fb      	strh	r3, [r7, #6]
	eOutput_mode tmpFunc = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 80056b6:	2000      	movs	r0, #0
 80056b8:	f000 fc36 	bl	8005f28 <SM_GetOutputChannel>
 80056bc:	4603      	mov	r3, r0
 80056be:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > func_last_encoder_value)
 80056c6:	4b15      	ldr	r3, [pc, #84]	; (800571c <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 80056c8:	881b      	ldrh	r3, [r3, #0]
 80056ca:	88fa      	ldrh	r2, [r7, #6]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d90c      	bls.n	80056ea <FuncO_MapEncoderPositionToSignalOutput+0x3e>
	{
		tmpFunc++;
 80056d0:	7bfb      	ldrb	r3, [r7, #15]
 80056d2:	3301      	adds	r3, #1
 80056d4:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-2) tmpFunc = IMPULSE_FUNC_MODE;
 80056d6:	7bfb      	ldrb	r3, [r7, #15]
 80056d8:	2b05      	cmp	r3, #5
 80056da:	d901      	bls.n	80056e0 <FuncO_MapEncoderPositionToSignalOutput+0x34>
 80056dc:	2305      	movs	r3, #5
 80056de:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToSignal(tmpFunc);
 80056e0:	7bfb      	ldrb	r3, [r7, #15]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f000 f856 	bl	8005794 <FuncO_ApplyProfileToSignal>
 80056e8:	e010      	b.n	800570c <FuncO_MapEncoderPositionToSignalOutput+0x60>
	}
	else if (pEncoderValue < func_last_encoder_value)
 80056ea:	4b0c      	ldr	r3, [pc, #48]	; (800571c <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 80056ec:	881b      	ldrh	r3, [r3, #0]
 80056ee:	88fa      	ldrh	r2, [r7, #6]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d20b      	bcs.n	800570c <FuncO_MapEncoderPositionToSignalOutput+0x60>
	{
		tmpFunc--;
 80056f4:	7bfb      	ldrb	r3, [r7, #15]
 80056f6:	3b01      	subs	r3, #1
 80056f8:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = SINE_FUNC_MODE;
 80056fa:	7bfb      	ldrb	r3, [r7, #15]
 80056fc:	2b06      	cmp	r3, #6
 80056fe:	d901      	bls.n	8005704 <FuncO_MapEncoderPositionToSignalOutput+0x58>
 8005700:	2300      	movs	r3, #0
 8005702:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToSignal(tmpFunc);
 8005704:	7bfb      	ldrb	r3, [r7, #15]
 8005706:	4618      	mov	r0, r3
 8005708:	f000 f844 	bl	8005794 <FuncO_ApplyProfileToSignal>
	}
	func_last_encoder_value = pEncoderValue;
 800570c:	4a03      	ldr	r2, [pc, #12]	; (800571c <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 800570e:	88fb      	ldrh	r3, [r7, #6]
 8005710:	8013      	strh	r3, [r2, #0]
}
 8005712:	bf00      	nop
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	20001e96 	.word	0x20001e96

08005720 <FuncO_MapEncoderPositionToAuxOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_MapEncoderPositionToAuxOutput(uint16_t pEncoderValue)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	4603      	mov	r3, r0
 8005728:	80fb      	strh	r3, [r7, #6]
	eOutput_mode tmpFunc = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 800572a:	2001      	movs	r0, #1
 800572c:	f000 fbfc 	bl	8005f28 <SM_GetOutputChannel>
 8005730:	4603      	mov	r3, r0
 8005732:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > func_last_encoder_value)
 800573a:	4b15      	ldr	r3, [pc, #84]	; (8005790 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 800573c:	881b      	ldrh	r3, [r3, #0]
 800573e:	88fa      	ldrh	r2, [r7, #6]
 8005740:	429a      	cmp	r2, r3
 8005742:	d90c      	bls.n	800575e <FuncO_MapEncoderPositionToAuxOutput+0x3e>
	{
		tmpFunc++;
 8005744:	7bfb      	ldrb	r3, [r7, #15]
 8005746:	3301      	adds	r3, #1
 8005748:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = PWM_FUNC_MODE;
 800574a:	7bfb      	ldrb	r3, [r7, #15]
 800574c:	2b06      	cmp	r3, #6
 800574e:	d901      	bls.n	8005754 <FuncO_MapEncoderPositionToAuxOutput+0x34>
 8005750:	2306      	movs	r3, #6
 8005752:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToAux(tmpFunc);
 8005754:	7bfb      	ldrb	r3, [r7, #15]
 8005756:	4618      	mov	r0, r3
 8005758:	f000 f882 	bl	8005860 <FuncO_ApplyProfileToAux>
 800575c:	e010      	b.n	8005780 <FuncO_MapEncoderPositionToAuxOutput+0x60>
	}
	else if (pEncoderValue < func_last_encoder_value)
 800575e:	4b0c      	ldr	r3, [pc, #48]	; (8005790 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 8005760:	881b      	ldrh	r3, [r3, #0]
 8005762:	88fa      	ldrh	r2, [r7, #6]
 8005764:	429a      	cmp	r2, r3
 8005766:	d20b      	bcs.n	8005780 <FuncO_MapEncoderPositionToAuxOutput+0x60>
	{
		tmpFunc--;
 8005768:	7bfb      	ldrb	r3, [r7, #15]
 800576a:	3b01      	subs	r3, #1
 800576c:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = SINE_FUNC_MODE;
 800576e:	7bfb      	ldrb	r3, [r7, #15]
 8005770:	2b06      	cmp	r3, #6
 8005772:	d901      	bls.n	8005778 <FuncO_MapEncoderPositionToAuxOutput+0x58>
 8005774:	2300      	movs	r3, #0
 8005776:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToAux(tmpFunc);
 8005778:	7bfb      	ldrb	r3, [r7, #15]
 800577a:	4618      	mov	r0, r3
 800577c:	f000 f870 	bl	8005860 <FuncO_ApplyProfileToAux>
//		if(tmpFunc == SINE_FUNC_MODE)
//			ENCODER_TIMER->CNT = 20;
	}
	func_last_encoder_value = pEncoderValue;
 8005780:	4a03      	ldr	r2, [pc, #12]	; (8005790 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 8005782:	88fb      	ldrh	r3, [r7, #6]
 8005784:	8013      	strh	r3, [r2, #0]
}
 8005786:	bf00      	nop
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	20001e96 	.word	0x20001e96

08005794 <FuncO_ApplyProfileToSignal>:

 *	@retval None
 *
 */
void FuncO_ApplyProfileToSignal(eOutput_mode pPresetEnum)
{
 8005794:	b590      	push	{r4, r7, lr}
 8005796:	b087      	sub	sp, #28
 8005798:	af02      	add	r7, sp, #8
 800579a:	4603      	mov	r3, r0
 800579c:	71fb      	strb	r3, [r7, #7]
	// set the next function output
	SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 800579e:	79fc      	ldrb	r4, [r7, #7]
 80057a0:	2000      	movs	r0, #0
 80057a2:	f000 fbc1 	bl	8005f28 <SM_GetOutputChannel>
 80057a6:	4601      	mov	r1, r0
 80057a8:	00e3      	lsls	r3, r4, #3
 80057aa:	4a29      	ldr	r2, [pc, #164]	; (8005850 <FuncO_ApplyProfileToSignal+0xbc>)
 80057ac:	4413      	add	r3, r2
 80057ae:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8


	// copy the lookup table for the next output function in to SignalChannel object
	printf("SM_GetOutputChannel\n");
 80057b2:	4828      	ldr	r0, [pc, #160]	; (8005854 <FuncO_ApplyProfileToSignal+0xc0>)
 80057b4:	f00a fb40 	bl	800fe38 <puts>
	SM_GetOutputChannel(SIGNAL_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 80057b8:	79fc      	ldrb	r4, [r7, #7]
 80057ba:	2000      	movs	r0, #0
 80057bc:	f000 fbb4 	bl	8005f28 <SM_GetOutputChannel>
 80057c0:	4601      	mov	r1, r0
 80057c2:	4a23      	ldr	r2, [pc, #140]	; (8005850 <FuncO_ApplyProfileToSignal+0xbc>)
 80057c4:	00e3      	lsls	r3, r4, #3
 80057c6:	4413      	add	r3, r2
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	604b      	str	r3, [r1, #4]

	// set preset for PGA gain and dsp amplitude adjustment
	eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 80057cc:	2000      	movs	r0, #0
 80057ce:	f000 fbab 	bl	8005f28 <SM_GetOutputChannel>
 80057d2:	4603      	mov	r3, r0
 80057d4:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	73fb      	strb	r3, [r7, #15]
	VPP_ApplyProfileToSignal(eTmpVppPreset);
 80057dc:	7bfb      	ldrb	r3, [r7, #15]
 80057de:	4618      	mov	r0, r3
 80057e0:	f000 feda 	bl	8006598 <VPP_ApplyProfileToSignal>

	// pause timer to reAux both outputs
	OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 80057e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80057ee:	f023 0301 	bic.w	r3, r3, #1
 80057f2:	6013      	str	r3, [r2, #0]
	//HAL_TIM_Base_Stop(&htim8);

	// restart the DAC with the new data
	HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80057f4:	2100      	movs	r1, #0
 80057f6:	4818      	ldr	r0, [pc, #96]	; (8005858 <FuncO_ApplyProfileToSignal+0xc4>)
 80057f8:	f004 fc20 	bl	800a03c <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80057fc:	2000      	movs	r0, #0
 80057fe:	f000 fb93 	bl	8005f28 <SM_GetOutputChannel>
 8005802:	4603      	mov	r3, r0
 8005804:	f103 0208 	add.w	r2, r3, #8
 8005808:	2300      	movs	r3, #0
 800580a:	9300      	str	r3, [sp, #0]
 800580c:	2378      	movs	r3, #120	; 0x78
 800580e:	2100      	movs	r1, #0
 8005810:	4811      	ldr	r0, [pc, #68]	; (8005858 <FuncO_ApplyProfileToSignal+0xc4>)
 8005812:	f004 fb51 	bl	8009eb8 <HAL_DAC_Start_DMA>

	// restart the the other DAC
	HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 8005816:	2100      	movs	r1, #0
 8005818:	4810      	ldr	r0, [pc, #64]	; (800585c <FuncO_ApplyProfileToSignal+0xc8>)
 800581a:	f004 fc0f 	bl	800a03c <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 800581e:	2001      	movs	r0, #1
 8005820:	f000 fb82 	bl	8005f28 <SM_GetOutputChannel>
 8005824:	4603      	mov	r3, r0
 8005826:	f103 0208 	add.w	r2, r3, #8
 800582a:	2300      	movs	r3, #0
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	2378      	movs	r3, #120	; 0x78
 8005830:	2100      	movs	r1, #0
 8005832:	480a      	ldr	r0, [pc, #40]	; (800585c <FuncO_ApplyProfileToSignal+0xc8>)
 8005834:	f004 fb40 	bl	8009eb8 <HAL_DAC_Start_DMA>

	// resume timer to reAux both outputs
	//HAL_TIM_Base_Start(&htim8);
	OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 8005838:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005842:	f043 0301 	orr.w	r3, r3, #1
 8005846:	6013      	str	r3, [r2, #0]



}
 8005848:	bf00      	nop
 800584a:	3714      	adds	r7, #20
 800584c:	46bd      	mov	sp, r7
 800584e:	bd90      	pop	{r4, r7, pc}
 8005850:	20000128 	.word	0x20000128
 8005854:	08013bdc 	.word	0x08013bdc
 8005858:	2000263c 	.word	0x2000263c
 800585c:	20002628 	.word	0x20002628

08005860 <FuncO_ApplyProfileToAux>:

 *	@retval None
 *
 */
void FuncO_ApplyProfileToAux(eOutput_mode pPresetEnum)
{
 8005860:	b590      	push	{r4, r7, lr}
 8005862:	b087      	sub	sp, #28
 8005864:	af02      	add	r7, sp, #8
 8005866:	4603      	mov	r3, r0
 8005868:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef res;

	// set the next output function
	SM_GetOutputChannel(AUX_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 800586a:	79fc      	ldrb	r4, [r7, #7]
 800586c:	2001      	movs	r0, #1
 800586e:	f000 fb5b 	bl	8005f28 <SM_GetOutputChannel>
 8005872:	4601      	mov	r1, r0
 8005874:	00e3      	lsls	r3, r4, #3
 8005876:	4a96      	ldr	r2, [pc, #600]	; (8005ad0 <FuncO_ApplyProfileToAux+0x270>)
 8005878:	4413      	add	r3, r2
 800587a:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8

	if(pPresetEnum == PWM_FUNC_MODE)
 800587e:	79fb      	ldrb	r3, [r7, #7]
 8005880:	2b06      	cmp	r3, #6
 8005882:	d10a      	bne.n	800589a <FuncO_ApplyProfileToAux+0x3a>
	{
		printf("FuncO_ApplyProfileToAux PWM_FUNC_MODE\n");
 8005884:	4893      	ldr	r0, [pc, #588]	; (8005ad4 <FuncO_ApplyProfileToAux+0x274>)
 8005886:	f00a fad7 	bl	800fe38 <puts>
		// switch output signal from DAC to PWM

		SM_DisableDacToAux();
 800588a:	f000 fdb5 	bl	80063f8 <SM_DisableDacToAux>
		SM_EnablePwmToAux();
 800588e:	f000 fb61 	bl	8005f54 <SM_EnablePwmToAux>

		last_output_mode_was_pwm = 1;
 8005892:	4b91      	ldr	r3, [pc, #580]	; (8005ad8 <FuncO_ApplyProfileToAux+0x278>)
 8005894:	2201      	movs	r2, #1
 8005896:	701a      	strb	r2, [r3, #0]
		res = HAL_TIM_Base_Start(&htim8);
		printf("Result:%u\n",res);
		//OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
	}

}
 8005898:	e115      	b.n	8005ac6 <FuncO_ApplyProfileToAux+0x266>
	else if(last_output_mode_was_pwm)
 800589a:	4b8f      	ldr	r3, [pc, #572]	; (8005ad8 <FuncO_ApplyProfileToAux+0x278>)
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	f000 808e 	beq.w	80059c0 <FuncO_ApplyProfileToAux+0x160>
		printf("FuncO_ApplyProfileToAux NOT PWM_FUNC_MODE\n");
 80058a4:	488d      	ldr	r0, [pc, #564]	; (8005adc <FuncO_ApplyProfileToAux+0x27c>)
 80058a6:	f00a fac7 	bl	800fe38 <puts>
		SM_DisablePwmToAux();
 80058aa:	f000 fc8f 	bl	80061cc <SM_DisablePwmToAux>
		SM_EnableDacToAux();
 80058ae:	f000 fcc9 	bl	8006244 <SM_EnableDacToAux>
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 80058b2:	488b      	ldr	r0, [pc, #556]	; (8005ae0 <FuncO_ApplyProfileToAux+0x280>)
 80058b4:	f00a fac0 	bl	800fe38 <puts>
		SM_GetOutputChannel(AUX_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 80058b8:	79fc      	ldrb	r4, [r7, #7]
 80058ba:	2001      	movs	r0, #1
 80058bc:	f000 fb34 	bl	8005f28 <SM_GetOutputChannel>
 80058c0:	4601      	mov	r1, r0
 80058c2:	4a83      	ldr	r2, [pc, #524]	; (8005ad0 <FuncO_ApplyProfileToAux+0x270>)
 80058c4:	00e3      	lsls	r3, r4, #3
 80058c6:	4413      	add	r3, r2
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	604b      	str	r3, [r1, #4]
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 80058cc:	4884      	ldr	r0, [pc, #528]	; (8005ae0 <FuncO_ApplyProfileToAux+0x280>)
 80058ce:	f00a fab3 	bl	800fe38 <puts>
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile->amp_setting;
 80058d2:	2001      	movs	r0, #1
 80058d4:	f000 fb28 	bl	8005f28 <SM_GetOutputChannel>
 80058d8:	4603      	mov	r3, r0
 80058da:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	737b      	strb	r3, [r7, #13]
		printf("VPP_ApplyProfileToAux");
 80058e2:	4880      	ldr	r0, [pc, #512]	; (8005ae4 <FuncO_ApplyProfileToAux+0x284>)
 80058e4:	f00a fa34 	bl	800fd50 <iprintf>
		VPP_ApplyProfileToAux(eTmpVppPreset);
 80058e8:	7b7b      	ldrb	r3, [r7, #13]
 80058ea:	4618      	mov	r0, r3
 80058ec:	f000 fe82 	bl	80065f4 <VPP_ApplyProfileToAux>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Stop(&htim8)\n");
 80058f0:	487d      	ldr	r0, [pc, #500]	; (8005ae8 <FuncO_ApplyProfileToAux+0x288>)
 80058f2:	f00a faa1 	bl	800fe38 <puts>
		res = HAL_TIM_Base_Stop(&htim8);
 80058f6:	487d      	ldr	r0, [pc, #500]	; (8005aec <FuncO_ApplyProfileToAux+0x28c>)
 80058f8:	f006 fcd6 	bl	800c2a8 <HAL_TIM_Base_Stop>
 80058fc:	4603      	mov	r3, r0
 80058fe:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005900:	7bbb      	ldrb	r3, [r7, #14]
 8005902:	4619      	mov	r1, r3
 8005904:	487a      	ldr	r0, [pc, #488]	; (8005af0 <FuncO_ApplyProfileToAux+0x290>)
 8005906:	f00a fa23 	bl	800fd50 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 800590a:	487a      	ldr	r0, [pc, #488]	; (8005af4 <FuncO_ApplyProfileToAux+0x294>)
 800590c:	f00a fa94 	bl	800fe38 <puts>
		res = HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 8005910:	2100      	movs	r1, #0
 8005912:	4879      	ldr	r0, [pc, #484]	; (8005af8 <FuncO_ApplyProfileToAux+0x298>)
 8005914:	f004 fb92 	bl	800a03c <HAL_DAC_Stop_DMA>
 8005918:	4603      	mov	r3, r0
 800591a:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 800591c:	7bbb      	ldrb	r3, [r7, #14]
 800591e:	4619      	mov	r1, r3
 8005920:	4873      	ldr	r0, [pc, #460]	; (8005af0 <FuncO_ApplyProfileToAux+0x290>)
 8005922:	f00a fa15 	bl	800fd50 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 8005926:	4875      	ldr	r0, [pc, #468]	; (8005afc <FuncO_ApplyProfileToAux+0x29c>)
 8005928:	f00a fa86 	bl	800fe38 <puts>
		res = HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 800592c:	2001      	movs	r0, #1
 800592e:	f000 fafb 	bl	8005f28 <SM_GetOutputChannel>
 8005932:	4603      	mov	r3, r0
 8005934:	f103 0208 	add.w	r2, r3, #8
 8005938:	2300      	movs	r3, #0
 800593a:	9300      	str	r3, [sp, #0]
 800593c:	2378      	movs	r3, #120	; 0x78
 800593e:	2100      	movs	r1, #0
 8005940:	486d      	ldr	r0, [pc, #436]	; (8005af8 <FuncO_ApplyProfileToAux+0x298>)
 8005942:	f004 fab9 	bl	8009eb8 <HAL_DAC_Start_DMA>
 8005946:	4603      	mov	r3, r0
 8005948:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 800594a:	7bbb      	ldrb	r3, [r7, #14]
 800594c:	4619      	mov	r1, r3
 800594e:	4868      	ldr	r0, [pc, #416]	; (8005af0 <FuncO_ApplyProfileToAux+0x290>)
 8005950:	f00a f9fe 	bl	800fd50 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8005954:	486a      	ldr	r0, [pc, #424]	; (8005b00 <FuncO_ApplyProfileToAux+0x2a0>)
 8005956:	f00a fa6f 	bl	800fe38 <puts>
		res = HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800595a:	2100      	movs	r1, #0
 800595c:	4869      	ldr	r0, [pc, #420]	; (8005b04 <FuncO_ApplyProfileToAux+0x2a4>)
 800595e:	f004 fb6d 	bl	800a03c <HAL_DAC_Stop_DMA>
 8005962:	4603      	mov	r3, r0
 8005964:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005966:	7bbb      	ldrb	r3, [r7, #14]
 8005968:	4619      	mov	r1, r3
 800596a:	4861      	ldr	r0, [pc, #388]	; (8005af0 <FuncO_ApplyProfileToAux+0x290>)
 800596c:	f00a f9f0 	bl	800fd50 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8005970:	4865      	ldr	r0, [pc, #404]	; (8005b08 <FuncO_ApplyProfileToAux+0x2a8>)
 8005972:	f00a fa61 	bl	800fe38 <puts>
		res = HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005976:	2000      	movs	r0, #0
 8005978:	f000 fad6 	bl	8005f28 <SM_GetOutputChannel>
 800597c:	4603      	mov	r3, r0
 800597e:	f103 0208 	add.w	r2, r3, #8
 8005982:	2300      	movs	r3, #0
 8005984:	9300      	str	r3, [sp, #0]
 8005986:	2378      	movs	r3, #120	; 0x78
 8005988:	2100      	movs	r1, #0
 800598a:	485e      	ldr	r0, [pc, #376]	; (8005b04 <FuncO_ApplyProfileToAux+0x2a4>)
 800598c:	f004 fa94 	bl	8009eb8 <HAL_DAC_Start_DMA>
 8005990:	4603      	mov	r3, r0
 8005992:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005994:	7bbb      	ldrb	r3, [r7, #14]
 8005996:	4619      	mov	r1, r3
 8005998:	4855      	ldr	r0, [pc, #340]	; (8005af0 <FuncO_ApplyProfileToAux+0x290>)
 800599a:	f00a f9d9 	bl	800fd50 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Start(&htim8)\n");
 800599e:	485b      	ldr	r0, [pc, #364]	; (8005b0c <FuncO_ApplyProfileToAux+0x2ac>)
 80059a0:	f00a fa4a 	bl	800fe38 <puts>
		res = HAL_TIM_Base_Start(&htim8);
 80059a4:	4851      	ldr	r0, [pc, #324]	; (8005aec <FuncO_ApplyProfileToAux+0x28c>)
 80059a6:	f006 fc51 	bl	800c24c <HAL_TIM_Base_Start>
 80059aa:	4603      	mov	r3, r0
 80059ac:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 80059ae:	7bbb      	ldrb	r3, [r7, #14]
 80059b0:	4619      	mov	r1, r3
 80059b2:	484f      	ldr	r0, [pc, #316]	; (8005af0 <FuncO_ApplyProfileToAux+0x290>)
 80059b4:	f00a f9cc 	bl	800fd50 <iprintf>
		last_output_mode_was_pwm = 0;
 80059b8:	4b47      	ldr	r3, [pc, #284]	; (8005ad8 <FuncO_ApplyProfileToAux+0x278>)
 80059ba:	2200      	movs	r2, #0
 80059bc:	701a      	strb	r2, [r3, #0]
}
 80059be:	e082      	b.n	8005ac6 <FuncO_ApplyProfileToAux+0x266>
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 80059c0:	4847      	ldr	r0, [pc, #284]	; (8005ae0 <FuncO_ApplyProfileToAux+0x280>)
 80059c2:	f00a fa39 	bl	800fe38 <puts>
		SM_GetOutputChannel(AUX_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 80059c6:	79fc      	ldrb	r4, [r7, #7]
 80059c8:	2001      	movs	r0, #1
 80059ca:	f000 faad 	bl	8005f28 <SM_GetOutputChannel>
 80059ce:	4601      	mov	r1, r0
 80059d0:	4a3f      	ldr	r2, [pc, #252]	; (8005ad0 <FuncO_ApplyProfileToAux+0x270>)
 80059d2:	00e3      	lsls	r3, r4, #3
 80059d4:	4413      	add	r3, r2
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	604b      	str	r3, [r1, #4]
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 80059da:	4841      	ldr	r0, [pc, #260]	; (8005ae0 <FuncO_ApplyProfileToAux+0x280>)
 80059dc:	f00a fa2c 	bl	800fe38 <puts>
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile->amp_setting;
 80059e0:	2001      	movs	r0, #1
 80059e2:	f000 faa1 	bl	8005f28 <SM_GetOutputChannel>
 80059e6:	4603      	mov	r3, r0
 80059e8:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	73fb      	strb	r3, [r7, #15]
		printf("VPP_ApplyProfileToAux");
 80059f0:	483c      	ldr	r0, [pc, #240]	; (8005ae4 <FuncO_ApplyProfileToAux+0x284>)
 80059f2:	f00a f9ad 	bl	800fd50 <iprintf>
		VPP_ApplyProfileToAux(eTmpVppPreset);
 80059f6:	7bfb      	ldrb	r3, [r7, #15]
 80059f8:	4618      	mov	r0, r3
 80059fa:	f000 fdfb 	bl	80065f4 <VPP_ApplyProfileToAux>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Stop(&htim8)\n");
 80059fe:	483a      	ldr	r0, [pc, #232]	; (8005ae8 <FuncO_ApplyProfileToAux+0x288>)
 8005a00:	f00a fa1a 	bl	800fe38 <puts>
		res = HAL_TIM_Base_Stop(&htim8);
 8005a04:	4839      	ldr	r0, [pc, #228]	; (8005aec <FuncO_ApplyProfileToAux+0x28c>)
 8005a06:	f006 fc4f 	bl	800c2a8 <HAL_TIM_Base_Stop>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005a0e:	7bbb      	ldrb	r3, [r7, #14]
 8005a10:	4619      	mov	r1, r3
 8005a12:	4837      	ldr	r0, [pc, #220]	; (8005af0 <FuncO_ApplyProfileToAux+0x290>)
 8005a14:	f00a f99c 	bl	800fd50 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 8005a18:	4836      	ldr	r0, [pc, #216]	; (8005af4 <FuncO_ApplyProfileToAux+0x294>)
 8005a1a:	f00a fa0d 	bl	800fe38 <puts>
		res = HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 8005a1e:	2100      	movs	r1, #0
 8005a20:	4835      	ldr	r0, [pc, #212]	; (8005af8 <FuncO_ApplyProfileToAux+0x298>)
 8005a22:	f004 fb0b 	bl	800a03c <HAL_DAC_Stop_DMA>
 8005a26:	4603      	mov	r3, r0
 8005a28:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005a2a:	7bbb      	ldrb	r3, [r7, #14]
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	4830      	ldr	r0, [pc, #192]	; (8005af0 <FuncO_ApplyProfileToAux+0x290>)
 8005a30:	f00a f98e 	bl	800fd50 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 8005a34:	4831      	ldr	r0, [pc, #196]	; (8005afc <FuncO_ApplyProfileToAux+0x29c>)
 8005a36:	f00a f9ff 	bl	800fe38 <puts>
		res = HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005a3a:	2001      	movs	r0, #1
 8005a3c:	f000 fa74 	bl	8005f28 <SM_GetOutputChannel>
 8005a40:	4603      	mov	r3, r0
 8005a42:	f103 0208 	add.w	r2, r3, #8
 8005a46:	2300      	movs	r3, #0
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	2378      	movs	r3, #120	; 0x78
 8005a4c:	2100      	movs	r1, #0
 8005a4e:	482a      	ldr	r0, [pc, #168]	; (8005af8 <FuncO_ApplyProfileToAux+0x298>)
 8005a50:	f004 fa32 	bl	8009eb8 <HAL_DAC_Start_DMA>
 8005a54:	4603      	mov	r3, r0
 8005a56:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005a58:	7bbb      	ldrb	r3, [r7, #14]
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	4824      	ldr	r0, [pc, #144]	; (8005af0 <FuncO_ApplyProfileToAux+0x290>)
 8005a5e:	f00a f977 	bl	800fd50 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8005a62:	4827      	ldr	r0, [pc, #156]	; (8005b00 <FuncO_ApplyProfileToAux+0x2a0>)
 8005a64:	f00a f9e8 	bl	800fe38 <puts>
		res = HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8005a68:	2100      	movs	r1, #0
 8005a6a:	4826      	ldr	r0, [pc, #152]	; (8005b04 <FuncO_ApplyProfileToAux+0x2a4>)
 8005a6c:	f004 fae6 	bl	800a03c <HAL_DAC_Stop_DMA>
 8005a70:	4603      	mov	r3, r0
 8005a72:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005a74:	7bbb      	ldrb	r3, [r7, #14]
 8005a76:	4619      	mov	r1, r3
 8005a78:	481d      	ldr	r0, [pc, #116]	; (8005af0 <FuncO_ApplyProfileToAux+0x290>)
 8005a7a:	f00a f969 	bl	800fd50 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8005a7e:	4822      	ldr	r0, [pc, #136]	; (8005b08 <FuncO_ApplyProfileToAux+0x2a8>)
 8005a80:	f00a f9da 	bl	800fe38 <puts>
		res = HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005a84:	2000      	movs	r0, #0
 8005a86:	f000 fa4f 	bl	8005f28 <SM_GetOutputChannel>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	f103 0208 	add.w	r2, r3, #8
 8005a90:	2300      	movs	r3, #0
 8005a92:	9300      	str	r3, [sp, #0]
 8005a94:	2378      	movs	r3, #120	; 0x78
 8005a96:	2100      	movs	r1, #0
 8005a98:	481a      	ldr	r0, [pc, #104]	; (8005b04 <FuncO_ApplyProfileToAux+0x2a4>)
 8005a9a:	f004 fa0d 	bl	8009eb8 <HAL_DAC_Start_DMA>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005aa2:	7bbb      	ldrb	r3, [r7, #14]
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	4812      	ldr	r0, [pc, #72]	; (8005af0 <FuncO_ApplyProfileToAux+0x290>)
 8005aa8:	f00a f952 	bl	800fd50 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Start(&htim8)\n");
 8005aac:	4817      	ldr	r0, [pc, #92]	; (8005b0c <FuncO_ApplyProfileToAux+0x2ac>)
 8005aae:	f00a f9c3 	bl	800fe38 <puts>
		res = HAL_TIM_Base_Start(&htim8);
 8005ab2:	480e      	ldr	r0, [pc, #56]	; (8005aec <FuncO_ApplyProfileToAux+0x28c>)
 8005ab4:	f006 fbca 	bl	800c24c <HAL_TIM_Base_Start>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005abc:	7bbb      	ldrb	r3, [r7, #14]
 8005abe:	4619      	mov	r1, r3
 8005ac0:	480b      	ldr	r0, [pc, #44]	; (8005af0 <FuncO_ApplyProfileToAux+0x290>)
 8005ac2:	f00a f945 	bl	800fd50 <iprintf>
}
 8005ac6:	bf00      	nop
 8005ac8:	3714      	adds	r7, #20
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd90      	pop	{r4, r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	20000128 	.word	0x20000128
 8005ad4:	08013bf0 	.word	0x08013bf0
 8005ad8:	20001e94 	.word	0x20001e94
 8005adc:	08013c18 	.word	0x08013c18
 8005ae0:	08013c44 	.word	0x08013c44
 8005ae4:	08013c70 	.word	0x08013c70
 8005ae8:	08013c88 	.word	0x08013c88
 8005aec:	20002714 	.word	0x20002714
 8005af0:	08013cbc 	.word	0x08013cbc
 8005af4:	08013cc8 	.word	0x08013cc8
 8005af8:	20002628 	.word	0x20002628
 8005afc:	08013d0c 	.word	0x08013d0c
 8005b00:	08013d50 	.word	0x08013d50
 8005b04:	2000263c 	.word	0x2000263c
 8005b08:	08013d94 	.word	0x08013d94
 8005b0c:	08013dd8 	.word	0x08013dd8

08005b10 <GO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void GO_ResetLastEncoderValue()
{
 8005b10:	b480      	push	{r7}
 8005b12:	af00      	add	r7, sp, #0
	gain_last_encoder_value = 0;
 8005b14:	4b03      	ldr	r3, [pc, #12]	; (8005b24 <GO_ResetLastEncoderValue+0x14>)
 8005b16:	2200      	movs	r2, #0
 8005b18:	801a      	strh	r2, [r3, #0]
}
 8005b1a:	bf00      	nop
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr
 8005b24:	20001e98 	.word	0x20001e98

08005b28 <GO_MapEncoderPositionToSignalOutput>:
 *	@param None
 *	@retval None
 *
 */
void GO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	4603      	mov	r3, r0
 8005b30:	80fb      	strh	r3, [r7, #6]
	eGainSettings_t temp_gain = SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile->gain;
 8005b32:	2000      	movs	r0, #0
 8005b34:	f000 f9f8 	bl	8005f28 <SM_GetOutputChannel>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > gain_last_encoder_value)
 8005b42:	4b15      	ldr	r3, [pc, #84]	; (8005b98 <GO_MapEncoderPositionToSignalOutput+0x70>)
 8005b44:	881b      	ldrh	r3, [r3, #0]
 8005b46:	88fa      	ldrh	r2, [r7, #6]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d90c      	bls.n	8005b66 <GO_MapEncoderPositionToSignalOutput+0x3e>
	{
		temp_gain++;
 8005b4c:	7bfb      	ldrb	r3, [r7, #15]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	73fb      	strb	r3, [r7, #15]
		if(temp_gain > MAX_NUM_GAIN_PRESETS-1) temp_gain = SEVEN_GAIN;
 8005b52:	7bfb      	ldrb	r3, [r7, #15]
 8005b54:	2b07      	cmp	r3, #7
 8005b56:	d901      	bls.n	8005b5c <GO_MapEncoderPositionToSignalOutput+0x34>
 8005b58:	2307      	movs	r3, #7
 8005b5a:	73fb      	strb	r3, [r7, #15]
		GO_ApplyPresetToSignal(temp_gain);
 8005b5c:	7bfb      	ldrb	r3, [r7, #15]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f000 f81c 	bl	8005b9c <GO_ApplyPresetToSignal>
 8005b64:	e010      	b.n	8005b88 <GO_MapEncoderPositionToSignalOutput+0x60>

	}
	else if (pEncoderValue < gain_last_encoder_value)
 8005b66:	4b0c      	ldr	r3, [pc, #48]	; (8005b98 <GO_MapEncoderPositionToSignalOutput+0x70>)
 8005b68:	881b      	ldrh	r3, [r3, #0]
 8005b6a:	88fa      	ldrh	r2, [r7, #6]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d20b      	bcs.n	8005b88 <GO_MapEncoderPositionToSignalOutput+0x60>
	{
		temp_gain--;
 8005b70:	7bfb      	ldrb	r3, [r7, #15]
 8005b72:	3b01      	subs	r3, #1
 8005b74:	73fb      	strb	r3, [r7, #15]
		if(temp_gain > MAX_NUM_GAIN_PRESETS-1) temp_gain = ZERO_GAIN;
 8005b76:	7bfb      	ldrb	r3, [r7, #15]
 8005b78:	2b07      	cmp	r3, #7
 8005b7a:	d901      	bls.n	8005b80 <GO_MapEncoderPositionToSignalOutput+0x58>
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	73fb      	strb	r3, [r7, #15]
		GO_ApplyPresetToSignal(temp_gain);
 8005b80:	7bfb      	ldrb	r3, [r7, #15]
 8005b82:	4618      	mov	r0, r3
 8005b84:	f000 f80a 	bl	8005b9c <GO_ApplyPresetToSignal>
	}
	gain_last_encoder_value = pEncoderValue;
 8005b88:	4a03      	ldr	r2, [pc, #12]	; (8005b98 <GO_MapEncoderPositionToSignalOutput+0x70>)
 8005b8a:	88fb      	ldrh	r3, [r7, #6]
 8005b8c:	8013      	strh	r3, [r2, #0]

	// artifically offset PWM signal above DC
	//BO_SetPwmSignalOffsetForGain(temp_gain);

}
 8005b8e:	bf00      	nop
 8005b90:	3710      	adds	r7, #16
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	20001e98 	.word	0x20001e98

08005b9c <GO_ApplyPresetToSignal>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSignal(eGainSettings_t pPresetEnum)
{
 8005b9c:	b590      	push	{r4, r7, lr}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	71fb      	strb	r3, [r7, #7]




	SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile = &theGainProfiles[pPresetEnum];
 8005ba6:	79fc      	ldrb	r4, [r7, #7]
 8005ba8:	2000      	movs	r0, #0
 8005baa:	f000 f9bd 	bl	8005f28 <SM_GetOutputChannel>
 8005bae:	4601      	mov	r1, r0
 8005bb0:	4623      	mov	r3, r4
 8005bb2:	005b      	lsls	r3, r3, #1
 8005bb4:	4423      	add	r3, r4
 8005bb6:	4a4f      	ldr	r2, [pc, #316]	; (8005cf4 <GO_ApplyPresetToSignal+0x158>)
 8005bb8:	4413      	add	r3, r2
 8005bba:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 8005bbe:	79fb      	ldrb	r3, [r7, #7]
 8005bc0:	2b07      	cmp	r3, #7
 8005bc2:	f200 8093 	bhi.w	8005cec <GO_ApplyPresetToSignal+0x150>
 8005bc6:	a201      	add	r2, pc, #4	; (adr r2, 8005bcc <GO_ApplyPresetToSignal+0x30>)
 8005bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bcc:	08005bed 	.word	0x08005bed
 8005bd0:	08005c0d 	.word	0x08005c0d
 8005bd4:	08005c2d 	.word	0x08005c2d
 8005bd8:	08005c4d 	.word	0x08005c4d
 8005bdc:	08005c6d 	.word	0x08005c6d
 8005be0:	08005c8d 	.word	0x08005c8d
 8005be4:	08005cad 	.word	0x08005cad
 8005be8:	08005ccd 	.word	0x08005ccd
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005bec:	2200      	movs	r2, #0
 8005bee:	2101      	movs	r1, #1
 8005bf0:	4841      	ldr	r0, [pc, #260]	; (8005cf8 <GO_ApplyPresetToSignal+0x15c>)
 8005bf2:	f005 fa31 	bl	800b058 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	2120      	movs	r1, #32
 8005bfa:	4840      	ldr	r0, [pc, #256]	; (8005cfc <GO_ApplyPresetToSignal+0x160>)
 8005bfc:	f005 fa2c 	bl	800b058 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005c00:	2200      	movs	r2, #0
 8005c02:	2110      	movs	r1, #16
 8005c04:	483d      	ldr	r0, [pc, #244]	; (8005cfc <GO_ApplyPresetToSignal+0x160>)
 8005c06:	f005 fa27 	bl	800b058 <HAL_GPIO_WritePin>
			break;
 8005c0a:	e06f      	b.n	8005cec <GO_ApplyPresetToSignal+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	2101      	movs	r1, #1
 8005c10:	4839      	ldr	r0, [pc, #228]	; (8005cf8 <GO_ApplyPresetToSignal+0x15c>)
 8005c12:	f005 fa21 	bl	800b058 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005c16:	2200      	movs	r2, #0
 8005c18:	2120      	movs	r1, #32
 8005c1a:	4838      	ldr	r0, [pc, #224]	; (8005cfc <GO_ApplyPresetToSignal+0x160>)
 8005c1c:	f005 fa1c 	bl	800b058 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005c20:	2200      	movs	r2, #0
 8005c22:	2110      	movs	r1, #16
 8005c24:	4835      	ldr	r0, [pc, #212]	; (8005cfc <GO_ApplyPresetToSignal+0x160>)
 8005c26:	f005 fa17 	bl	800b058 <HAL_GPIO_WritePin>
			break;
 8005c2a:	e05f      	b.n	8005cec <GO_ApplyPresetToSignal+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	2101      	movs	r1, #1
 8005c30:	4831      	ldr	r0, [pc, #196]	; (8005cf8 <GO_ApplyPresetToSignal+0x15c>)
 8005c32:	f005 fa11 	bl	800b058 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005c36:	2201      	movs	r2, #1
 8005c38:	2120      	movs	r1, #32
 8005c3a:	4830      	ldr	r0, [pc, #192]	; (8005cfc <GO_ApplyPresetToSignal+0x160>)
 8005c3c:	f005 fa0c 	bl	800b058 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005c40:	2200      	movs	r2, #0
 8005c42:	2110      	movs	r1, #16
 8005c44:	482d      	ldr	r0, [pc, #180]	; (8005cfc <GO_ApplyPresetToSignal+0x160>)
 8005c46:	f005 fa07 	bl	800b058 <HAL_GPIO_WritePin>
			break;
 8005c4a:	e04f      	b.n	8005cec <GO_ApplyPresetToSignal+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	2101      	movs	r1, #1
 8005c50:	4829      	ldr	r0, [pc, #164]	; (8005cf8 <GO_ApplyPresetToSignal+0x15c>)
 8005c52:	f005 fa01 	bl	800b058 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005c56:	2201      	movs	r2, #1
 8005c58:	2120      	movs	r1, #32
 8005c5a:	4828      	ldr	r0, [pc, #160]	; (8005cfc <GO_ApplyPresetToSignal+0x160>)
 8005c5c:	f005 f9fc 	bl	800b058 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005c60:	2200      	movs	r2, #0
 8005c62:	2110      	movs	r1, #16
 8005c64:	4825      	ldr	r0, [pc, #148]	; (8005cfc <GO_ApplyPresetToSignal+0x160>)
 8005c66:	f005 f9f7 	bl	800b058 <HAL_GPIO_WritePin>
			break;
 8005c6a:	e03f      	b.n	8005cec <GO_ApplyPresetToSignal+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	2101      	movs	r1, #1
 8005c70:	4821      	ldr	r0, [pc, #132]	; (8005cf8 <GO_ApplyPresetToSignal+0x15c>)
 8005c72:	f005 f9f1 	bl	800b058 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005c76:	2200      	movs	r2, #0
 8005c78:	2120      	movs	r1, #32
 8005c7a:	4820      	ldr	r0, [pc, #128]	; (8005cfc <GO_ApplyPresetToSignal+0x160>)
 8005c7c:	f005 f9ec 	bl	800b058 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005c80:	2201      	movs	r2, #1
 8005c82:	2110      	movs	r1, #16
 8005c84:	481d      	ldr	r0, [pc, #116]	; (8005cfc <GO_ApplyPresetToSignal+0x160>)
 8005c86:	f005 f9e7 	bl	800b058 <HAL_GPIO_WritePin>
			break;
 8005c8a:	e02f      	b.n	8005cec <GO_ApplyPresetToSignal+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	2101      	movs	r1, #1
 8005c90:	4819      	ldr	r0, [pc, #100]	; (8005cf8 <GO_ApplyPresetToSignal+0x15c>)
 8005c92:	f005 f9e1 	bl	800b058 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005c96:	2200      	movs	r2, #0
 8005c98:	2120      	movs	r1, #32
 8005c9a:	4818      	ldr	r0, [pc, #96]	; (8005cfc <GO_ApplyPresetToSignal+0x160>)
 8005c9c:	f005 f9dc 	bl	800b058 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	2110      	movs	r1, #16
 8005ca4:	4815      	ldr	r0, [pc, #84]	; (8005cfc <GO_ApplyPresetToSignal+0x160>)
 8005ca6:	f005 f9d7 	bl	800b058 <HAL_GPIO_WritePin>
			break;
 8005caa:	e01f      	b.n	8005cec <GO_ApplyPresetToSignal+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005cac:	2200      	movs	r2, #0
 8005cae:	2101      	movs	r1, #1
 8005cb0:	4811      	ldr	r0, [pc, #68]	; (8005cf8 <GO_ApplyPresetToSignal+0x15c>)
 8005cb2:	f005 f9d1 	bl	800b058 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	2120      	movs	r1, #32
 8005cba:	4810      	ldr	r0, [pc, #64]	; (8005cfc <GO_ApplyPresetToSignal+0x160>)
 8005cbc:	f005 f9cc 	bl	800b058 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	2110      	movs	r1, #16
 8005cc4:	480d      	ldr	r0, [pc, #52]	; (8005cfc <GO_ApplyPresetToSignal+0x160>)
 8005cc6:	f005 f9c7 	bl	800b058 <HAL_GPIO_WritePin>
			break;
 8005cca:	e00f      	b.n	8005cec <GO_ApplyPresetToSignal+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005ccc:	2201      	movs	r2, #1
 8005cce:	2101      	movs	r1, #1
 8005cd0:	4809      	ldr	r0, [pc, #36]	; (8005cf8 <GO_ApplyPresetToSignal+0x15c>)
 8005cd2:	f005 f9c1 	bl	800b058 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	2120      	movs	r1, #32
 8005cda:	4808      	ldr	r0, [pc, #32]	; (8005cfc <GO_ApplyPresetToSignal+0x160>)
 8005cdc:	f005 f9bc 	bl	800b058 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	2110      	movs	r1, #16
 8005ce4:	4805      	ldr	r0, [pc, #20]	; (8005cfc <GO_ApplyPresetToSignal+0x160>)
 8005ce6:	f005 f9b7 	bl	800b058 <HAL_GPIO_WritePin>
			break;
 8005cea:	bf00      	nop
	}

}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd90      	pop	{r4, r7, pc}
 8005cf4:	20000160 	.word	0x20000160
 8005cf8:	48000400 	.word	0x48000400
 8005cfc:	48000800 	.word	0x48000800

08005d00 <SM_Init>:
void _InitOutputChannels();
void _InitAmpProfiles();
void _InitGainInDecibels();

void SM_Init()
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	af00      	add	r7, sp, #0

	FreqO_InitFreqProfiles();
 8005d04:	f7ff fa1e 	bl	8005144 <FreqO_InitFreqProfiles>

	_InitOutputChannels();
 8005d08:	f000 f8ae 	bl	8005e68 <_InitOutputChannels>
	_InitAmpProfiles();
 8005d0c:	f000 f824 	bl	8005d58 <_InitAmpProfiles>

	// Start OFFSET DAC and set to positive
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 8005d10:	2110      	movs	r1, #16
 8005d12:	4810      	ldr	r0, [pc, #64]	; (8005d54 <SM_Init+0x54>)
 8005d14:	f004 f87d 	bl	8009e12 <HAL_DAC_Start>
	HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 8005d18:	2201      	movs	r2, #1
 8005d1a:	2108      	movs	r1, #8
 8005d1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005d20:	f005 f99a 	bl	800b058 <HAL_GPIO_WritePin>

	// send trigger input out to dac
	//HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);

	// Start DAC trigger timer
	OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 8005d24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005d2e:	f043 0301 	orr.w	r3, r3, #1
 8005d32:	6013      	str	r3, [r2, #0]

	// Set the SIGNAL function and amplitude
	FuncO_ApplyProfileToSignal(eDefaultFuncPreset);
 8005d34:	2000      	movs	r0, #0
 8005d36:	f7ff fd2d 	bl	8005794 <FuncO_ApplyProfileToSignal>
	VPP_ApplyProfileToSignal(eDefaultVppPreset);
 8005d3a:	2059      	movs	r0, #89	; 0x59
 8005d3c:	f000 fc2c 	bl	8006598 <VPP_ApplyProfileToSignal>

	// set the AUX function
	FuncO_ApplyProfileToAux(eDefaultFuncPreset);
 8005d40:	2000      	movs	r0, #0
 8005d42:	f7ff fd8d 	bl	8005860 <FuncO_ApplyProfileToAux>

	// set freq for both SIGNAL and AUX
	FreqO_ApplyProfile(eDefaultFreqPreset);
 8005d46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005d4a:	f7ff fabb 	bl	80052c4 <FreqO_ApplyProfile>

}
 8005d4e:	bf00      	nop
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	2000263c 	.word	0x2000263c

08005d58 <_InitAmpProfiles>:

void _InitAmpProfiles()
{
 8005d58:	b590      	push	{r4, r7, lr}
 8005d5a:	b08b      	sub	sp, #44	; 0x2c
 8005d5c:	af00      	add	r7, sp, #0

	// =(TARGETVPP/LUTVPP)/GAIN
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8005d5e:	2300      	movs	r3, #0
 8005d60:	627b      	str	r3, [r7, #36]	; 0x24
 8005d62:	e033      	b.n	8005dcc <_InitAmpProfiles+0x74>
	{
		float this_amp_value = theAmpProfiles[i].amp_value;
 8005d64:	493c      	ldr	r1, [pc, #240]	; (8005e58 <_InitAmpProfiles+0x100>)
 8005d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d68:	4613      	mov	r3, r2
 8005d6a:	00db      	lsls	r3, r3, #3
 8005d6c:	1a9b      	subs	r3, r3, r2
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	440b      	add	r3, r1
 8005d72:	3304      	adds	r3, #4
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	613b      	str	r3, [r7, #16]
		float this_lut_vpp = LUT_VPP;
 8005d78:	4b38      	ldr	r3, [pc, #224]	; (8005e5c <_InitAmpProfiles+0x104>)
 8005d7a:	60fb      	str	r3, [r7, #12]
		float this_gain_preset = (float)theAmpProfiles[i].gain_preset;
 8005d7c:	4936      	ldr	r1, [pc, #216]	; (8005e58 <_InitAmpProfiles+0x100>)
 8005d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d80:	4613      	mov	r3, r2
 8005d82:	00db      	lsls	r3, r3, #3
 8005d84:	1a9b      	subs	r3, r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	440b      	add	r3, r1
 8005d8a:	3308      	adds	r3, #8
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	ee07 3a90 	vmov	s15, r3
 8005d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d96:	edc7 7a02 	vstr	s15, [r7, #8]
		float new_ngc = ( (this_amp_value / this_lut_vpp) / this_gain_preset);
 8005d9a:	ed97 7a04 	vldr	s14, [r7, #16]
 8005d9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005da2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005da6:	ed97 7a02 	vldr	s14, [r7, #8]
 8005daa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dae:	edc7 7a01 	vstr	s15, [r7, #4]
		theAmpProfiles[i].neg_gain_coeff = new_ngc;
 8005db2:	4929      	ldr	r1, [pc, #164]	; (8005e58 <_InitAmpProfiles+0x100>)
 8005db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005db6:	4613      	mov	r3, r2
 8005db8:	00db      	lsls	r3, r3, #3
 8005dba:	1a9b      	subs	r3, r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	440b      	add	r3, r1
 8005dc0:	3310      	adds	r3, #16
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8005dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc8:	3301      	adds	r3, #1
 8005dca:	627b      	str	r3, [r7, #36]	; 0x24
 8005dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dce:	2b61      	cmp	r3, #97	; 0x61
 8005dd0:	ddc8      	ble.n	8005d64 <_InitAmpProfiles+0xc>
	}

	// =20*LOG10(TARGETVPP/0.001)
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	623b      	str	r3, [r7, #32]
 8005dd6:	e037      	b.n	8005e48 <_InitAmpProfiles+0xf0>
	{
		float decibel_mvolt_ref = 0.001;
 8005dd8:	4b21      	ldr	r3, [pc, #132]	; (8005e60 <_InitAmpProfiles+0x108>)
 8005dda:	61fb      	str	r3, [r7, #28]
		float this_amp_value = theAmpProfiles[i].amp_value;
 8005ddc:	491e      	ldr	r1, [pc, #120]	; (8005e58 <_InitAmpProfiles+0x100>)
 8005dde:	6a3a      	ldr	r2, [r7, #32]
 8005de0:	4613      	mov	r3, r2
 8005de2:	00db      	lsls	r3, r3, #3
 8005de4:	1a9b      	subs	r3, r3, r2
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	440b      	add	r3, r1
 8005dea:	3304      	adds	r3, #4
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	61bb      	str	r3, [r7, #24]
		float new_gain_decibels = 20 * log10( this_amp_value / decibel_mvolt_ref );
 8005df0:	ed97 7a06 	vldr	s14, [r7, #24]
 8005df4:	edd7 7a07 	vldr	s15, [r7, #28]
 8005df8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005dfc:	ee16 0a90 	vmov	r0, s13
 8005e00:	f7fa fbca 	bl	8000598 <__aeabi_f2d>
 8005e04:	4603      	mov	r3, r0
 8005e06:	460c      	mov	r4, r1
 8005e08:	ec44 3b10 	vmov	d0, r3, r4
 8005e0c:	f00c f8ac 	bl	8011f68 <log10>
 8005e10:	ec51 0b10 	vmov	r0, r1, d0
 8005e14:	f04f 0200 	mov.w	r2, #0
 8005e18:	4b12      	ldr	r3, [pc, #72]	; (8005e64 <_InitAmpProfiles+0x10c>)
 8005e1a:	f7fa fc15 	bl	8000648 <__aeabi_dmul>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	460c      	mov	r4, r1
 8005e22:	4618      	mov	r0, r3
 8005e24:	4621      	mov	r1, r4
 8005e26:	f7fa ff07 	bl	8000c38 <__aeabi_d2f>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	617b      	str	r3, [r7, #20]
		theAmpProfiles[i].gain_decibels = new_gain_decibels;
 8005e2e:	490a      	ldr	r1, [pc, #40]	; (8005e58 <_InitAmpProfiles+0x100>)
 8005e30:	6a3a      	ldr	r2, [r7, #32]
 8005e32:	4613      	mov	r3, r2
 8005e34:	00db      	lsls	r3, r3, #3
 8005e36:	1a9b      	subs	r3, r3, r2
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	440b      	add	r3, r1
 8005e3c:	330c      	adds	r3, #12
 8005e3e:	697a      	ldr	r2, [r7, #20]
 8005e40:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8005e42:	6a3b      	ldr	r3, [r7, #32]
 8005e44:	3301      	adds	r3, #1
 8005e46:	623b      	str	r3, [r7, #32]
 8005e48:	6a3b      	ldr	r3, [r7, #32]
 8005e4a:	2b61      	cmp	r3, #97	; 0x61
 8005e4c:	ddc4      	ble.n	8005dd8 <_InitAmpProfiles+0x80>

	}
}
 8005e4e:	bf00      	nop
 8005e50:	372c      	adds	r7, #44	; 0x2c
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd90      	pop	{r4, r7, pc}
 8005e56:	bf00      	nop
 8005e58:	20000178 	.word	0x20000178
 8005e5c:	402ccccd 	.word	0x402ccccd
 8005e60:	3a83126f 	.word	0x3a83126f
 8005e64:	40340000 	.word	0x40340000

08005e68 <_InitOutputChannels>:

void _InitOutputChannels()
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
	// initialise the SIGNAL output channel
	SignalChannel.channel = SIGNAL_CHANNEL;
 8005e6e:	4b28      	ldr	r3, [pc, #160]	; (8005f10 <_InitOutputChannels+0xa8>)
 8005e70:	2200      	movs	r2, #0
 8005e72:	701a      	strb	r2, [r3, #0]
	SignalChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 8005e74:	4b27      	ldr	r3, [pc, #156]	; (8005f14 <_InitOutputChannels+0xac>)
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	4a25      	ldr	r2, [pc, #148]	; (8005f10 <_InitOutputChannels+0xa8>)
 8005e7a:	6053      	str	r3, [r2, #4]
	SignalChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 8005e7c:	4b24      	ldr	r3, [pc, #144]	; (8005f10 <_InitOutputChannels+0xa8>)
 8005e7e:	4a25      	ldr	r2, [pc, #148]	; (8005f14 <_InitOutputChannels+0xac>)
 8005e80:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005e84:	2300      	movs	r3, #0
 8005e86:	607b      	str	r3, [r7, #4]
 8005e88:	e00b      	b.n	8005ea2 <_InitOutputChannels+0x3a>
		SignalChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 8005e8a:	4a23      	ldr	r2, [pc, #140]	; (8005f18 <_InitOutputChannels+0xb0>)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005e92:	491f      	ldr	r1, [pc, #124]	; (8005f10 <_InitOutputChannels+0xa8>)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	3302      	adds	r3, #2
 8005e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	607b      	str	r3, [r7, #4]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2b77      	cmp	r3, #119	; 0x77
 8005ea6:	ddf0      	ble.n	8005e8a <_InitOutputChannels+0x22>

	SignalChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 8005ea8:	4b19      	ldr	r3, [pc, #100]	; (8005f10 <_InitOutputChannels+0xa8>)
 8005eaa:	4a1c      	ldr	r2, [pc, #112]	; (8005f1c <_InitOutputChannels+0xb4>)
 8005eac:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SignalChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 8005eb0:	4b17      	ldr	r3, [pc, #92]	; (8005f10 <_InitOutputChannels+0xa8>)
 8005eb2:	4a1b      	ldr	r2, [pc, #108]	; (8005f20 <_InitOutputChannels+0xb8>)
 8005eb4:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0

	// initialise the Aux output channel
	AuxChannel.channel = AUX_CHANNEL;
 8005eb8:	4b1a      	ldr	r3, [pc, #104]	; (8005f24 <_InitOutputChannels+0xbc>)
 8005eba:	2201      	movs	r2, #1
 8005ebc:	701a      	strb	r2, [r3, #0]
	AuxChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 8005ebe:	4b15      	ldr	r3, [pc, #84]	; (8005f14 <_InitOutputChannels+0xac>)
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	4a18      	ldr	r2, [pc, #96]	; (8005f24 <_InitOutputChannels+0xbc>)
 8005ec4:	6053      	str	r3, [r2, #4]
	AuxChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 8005ec6:	4b17      	ldr	r3, [pc, #92]	; (8005f24 <_InitOutputChannels+0xbc>)
 8005ec8:	4a12      	ldr	r2, [pc, #72]	; (8005f14 <_InitOutputChannels+0xac>)
 8005eca:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005ece:	2300      	movs	r3, #0
 8005ed0:	603b      	str	r3, [r7, #0]
 8005ed2:	e00b      	b.n	8005eec <_InitOutputChannels+0x84>
		AuxChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 8005ed4:	4a10      	ldr	r2, [pc, #64]	; (8005f18 <_InitOutputChannels+0xb0>)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005edc:	4911      	ldr	r1, [pc, #68]	; (8005f24 <_InitOutputChannels+0xbc>)
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	3302      	adds	r3, #2
 8005ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	603b      	str	r3, [r7, #0]
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	2b77      	cmp	r3, #119	; 0x77
 8005ef0:	ddf0      	ble.n	8005ed4 <_InitOutputChannels+0x6c>

	AuxChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 8005ef2:	4b0c      	ldr	r3, [pc, #48]	; (8005f24 <_InitOutputChannels+0xbc>)
 8005ef4:	4a09      	ldr	r2, [pc, #36]	; (8005f1c <_InitOutputChannels+0xb4>)
 8005ef6:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	AuxChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 8005efa:	4b0a      	ldr	r3, [pc, #40]	; (8005f24 <_InitOutputChannels+0xbc>)
 8005efc:	4a08      	ldr	r2, [pc, #32]	; (8005f20 <_InitOutputChannels+0xb8>)
 8005efe:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0


}
 8005f02:	bf00      	nop
 8005f04:	370c      	adds	r7, #12
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	20001f70 	.word	0x20001f70
 8005f14:	20000128 	.word	0x20000128
 8005f18:	200014b4 	.word	0x200014b4
 8005f1c:	20000b34 	.word	0x20000b34
 8005f20:	20000175 	.word	0x20000175
 8005f24:	20002164 	.word	0x20002164

08005f28 <SM_GetOutputChannel>:

sOutputChannel_t * SM_GetOutputChannel(eOutputChannel_t pChannel)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	4603      	mov	r3, r0
 8005f30:	71fb      	strb	r3, [r7, #7]

	if(!pChannel)
 8005f32:	79fb      	ldrb	r3, [r7, #7]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d101      	bne.n	8005f3c <SM_GetOutputChannel+0x14>
		return &SignalChannel;
 8005f38:	4b04      	ldr	r3, [pc, #16]	; (8005f4c <SM_GetOutputChannel+0x24>)
 8005f3a:	e000      	b.n	8005f3e <SM_GetOutputChannel+0x16>
	else
		return &AuxChannel;
 8005f3c:	4b04      	ldr	r3, [pc, #16]	; (8005f50 <SM_GetOutputChannel+0x28>)
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	370c      	adds	r7, #12
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	20001f70 	.word	0x20001f70
 8005f50:	20002164 	.word	0x20002164

08005f54 <SM_EnablePwmToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_EnablePwmToAux()
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b096      	sub	sp, #88	; 0x58
 8005f58:	af00      	add	r7, sp, #0
	printf("SM_EnablePwmToAux\n");
 8005f5a:	4889      	ldr	r0, [pc, #548]	; (8006180 <SM_EnablePwmToAux+0x22c>)
 8005f5c:	f009 ff6c 	bl	800fe38 <puts>

	HAL_StatusTypeDef res = 0;
 8005f60:	2300      	movs	r3, #0
 8005f62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005f66:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	601a      	str	r2, [r3, #0]
 8005f6e:	605a      	str	r2, [r3, #4]
 8005f70:	609a      	str	r2, [r3, #8]
 8005f72:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f74:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005f78:	2200      	movs	r2, #0
 8005f7a:	601a      	str	r2, [r3, #0]
 8005f7c:	605a      	str	r2, [r3, #4]
 8005f7e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8005f80:	f107 031c 	add.w	r3, r7, #28
 8005f84:	2200      	movs	r2, #0
 8005f86:	601a      	str	r2, [r3, #0]
 8005f88:	605a      	str	r2, [r3, #4]
 8005f8a:	609a      	str	r2, [r3, #8]
 8005f8c:	60da      	str	r2, [r3, #12]
 8005f8e:	611a      	str	r2, [r3, #16]
 8005f90:	615a      	str	r2, [r3, #20]
 8005f92:	619a      	str	r2, [r3, #24]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f94:	f107 0308 	add.w	r3, r7, #8
 8005f98:	2200      	movs	r2, #0
 8005f9a:	601a      	str	r2, [r3, #0]
 8005f9c:	605a      	str	r2, [r3, #4]
 8005f9e:	609a      	str	r2, [r3, #8]
 8005fa0:	60da      	str	r2, [r3, #12]
 8005fa2:	611a      	str	r2, [r3, #16]


	htim3.Instance = PWM_AUX_OUT_TIM;
 8005fa4:	4b77      	ldr	r3, [pc, #476]	; (8006184 <SM_EnablePwmToAux+0x230>)
 8005fa6:	4a78      	ldr	r2, [pc, #480]	; (8006188 <SM_EnablePwmToAux+0x234>)
 8005fa8:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8005faa:	4b76      	ldr	r3, [pc, #472]	; (8006184 <SM_EnablePwmToAux+0x230>)
 8005fac:	2200      	movs	r2, #0
 8005fae:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8005fb0:	4b74      	ldr	r3, [pc, #464]	; (8006184 <SM_EnablePwmToAux+0x230>)
 8005fb2:	2210      	movs	r2, #16
 8005fb4:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1;
 8005fb6:	4b73      	ldr	r3, [pc, #460]	; (8006184 <SM_EnablePwmToAux+0x230>)
 8005fb8:	2201      	movs	r2, #1
 8005fba:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8005fbc:	4b71      	ldr	r3, [pc, #452]	; (8006184 <SM_EnablePwmToAux+0x230>)
 8005fbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fc2:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005fc4:	4b6f      	ldr	r3, [pc, #444]	; (8006184 <SM_EnablePwmToAux+0x230>)
 8005fc6:	2280      	movs	r2, #128	; 0x80
 8005fc8:	619a      	str	r2, [r3, #24]
	if ((res == HAL_TIM_Base_Init(&htim3)) != HAL_OK)
 8005fca:	486e      	ldr	r0, [pc, #440]	; (8006184 <SM_EnablePwmToAux+0x230>)
 8005fcc:	f006 f8e6 	bl	800c19c <HAL_TIM_Base_Init>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d107      	bne.n	8005fec <SM_EnablePwmToAux+0x98>
	{
		printf("SM_EnablePwmToAux HAL_TIM_Base_Init() Result:%u\n",res);
 8005fdc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	486a      	ldr	r0, [pc, #424]	; (800618c <SM_EnablePwmToAux+0x238>)
 8005fe4:	f009 feb4 	bl	800fd50 <iprintf>
		Error_Handler();
 8005fe8:	f001 fb96 	bl	8007718 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005fec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ff0:	647b      	str	r3, [r7, #68]	; 0x44
	if ((res == HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig)) != HAL_OK)
 8005ff2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	4862      	ldr	r0, [pc, #392]	; (8006184 <SM_EnablePwmToAux+0x230>)
 8005ffa:	f006 feef 	bl	800cddc <HAL_TIM_ConfigClockSource>
 8005ffe:	4603      	mov	r3, r0
 8006000:	461a      	mov	r2, r3
 8006002:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006006:	4293      	cmp	r3, r2
 8006008:	d107      	bne.n	800601a <SM_EnablePwmToAux+0xc6>
	{
		printf("SM_EnablePwmToAux HAL_TIM_ConfigClockSource() Result:%u\n",res);
 800600a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800600e:	4619      	mov	r1, r3
 8006010:	485f      	ldr	r0, [pc, #380]	; (8006190 <SM_EnablePwmToAux+0x23c>)
 8006012:	f009 fe9d 	bl	800fd50 <iprintf>
		Error_Handler();
 8006016:	f001 fb7f 	bl	8007718 <Error_Handler>
	}
	if ((res == HAL_TIM_PWM_Init(&htim3)) != HAL_OK)
 800601a:	485a      	ldr	r0, [pc, #360]	; (8006184 <SM_EnablePwmToAux+0x230>)
 800601c:	f006 f9d1 	bl	800c3c2 <HAL_TIM_PWM_Init>
 8006020:	4603      	mov	r3, r0
 8006022:	461a      	mov	r2, r3
 8006024:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006028:	4293      	cmp	r3, r2
 800602a:	d107      	bne.n	800603c <SM_EnablePwmToAux+0xe8>
	{
		printf("SM_EnablePwmToAux HAL_TIM_PWM_Init() Result:%u\n",res);
 800602c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006030:	4619      	mov	r1, r3
 8006032:	4858      	ldr	r0, [pc, #352]	; (8006194 <SM_EnablePwmToAux+0x240>)
 8006034:	f009 fe8c 	bl	800fd50 <iprintf>
		Error_Handler();
 8006038:	f001 fb6e 	bl	8007718 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800603c:	2320      	movs	r3, #32
 800603e:	63bb      	str	r3, [r7, #56]	; 0x38
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006040:	2300      	movs	r3, #0
 8006042:	643b      	str	r3, [r7, #64]	; 0x40
	if ((res == HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)) != HAL_OK)
 8006044:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006048:	4619      	mov	r1, r3
 800604a:	484e      	ldr	r0, [pc, #312]	; (8006184 <SM_EnablePwmToAux+0x230>)
 800604c:	f007 fc7c 	bl	800d948 <HAL_TIMEx_MasterConfigSynchronization>
 8006050:	4603      	mov	r3, r0
 8006052:	461a      	mov	r2, r3
 8006054:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006058:	4293      	cmp	r3, r2
 800605a:	d107      	bne.n	800606c <SM_EnablePwmToAux+0x118>
	{
		printf("SM_EnablePwmToAux HAL_TIMEx_MasterConfigSynchronization() Result:%u\n",res);
 800605c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006060:	4619      	mov	r1, r3
 8006062:	484d      	ldr	r0, [pc, #308]	; (8006198 <SM_EnablePwmToAux+0x244>)
 8006064:	f009 fe74 	bl	800fd50 <iprintf>
		Error_Handler();
 8006068:	f001 fb56 	bl	8007718 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800606c:	2360      	movs	r3, #96	; 0x60
 800606e:	61fb      	str	r3, [r7, #28]
	sConfigOC.Pulse = 0;
 8006070:	2300      	movs	r3, #0
 8006072:	623b      	str	r3, [r7, #32]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006074:	2300      	movs	r3, #0
 8006076:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006078:	2300      	movs	r3, #0
 800607a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if ((res == HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)) != HAL_OK)
 800607c:	f107 031c 	add.w	r3, r7, #28
 8006080:	2200      	movs	r2, #0
 8006082:	4619      	mov	r1, r3
 8006084:	483f      	ldr	r0, [pc, #252]	; (8006184 <SM_EnablePwmToAux+0x230>)
 8006086:	f006 fd99 	bl	800cbbc <HAL_TIM_PWM_ConfigChannel>
 800608a:	4603      	mov	r3, r0
 800608c:	461a      	mov	r2, r3
 800608e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006092:	4293      	cmp	r3, r2
 8006094:	d107      	bne.n	80060a6 <SM_EnablePwmToAux+0x152>
	{
		printf("SM_EnablePwmToAux HAL_TIM_PWM_ConfigChannel() Result:%u\n",res);
 8006096:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800609a:	4619      	mov	r1, r3
 800609c:	483f      	ldr	r0, [pc, #252]	; (800619c <SM_EnablePwmToAux+0x248>)
 800609e:	f009 fe57 	bl	800fd50 <iprintf>
		Error_Handler();
 80060a2:	f001 fb39 	bl	8007718 <Error_Handler>
	}


	// Timer Post Initialization
	printf("SM_EnablePwmToAux: __HAL_RCC_GPIOA_CLK_ENABLE\n");
 80060a6:	483e      	ldr	r0, [pc, #248]	; (80061a0 <SM_EnablePwmToAux+0x24c>)
 80060a8:	f009 fec6 	bl	800fe38 <puts>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80060ac:	4b3d      	ldr	r3, [pc, #244]	; (80061a4 <SM_EnablePwmToAux+0x250>)
 80060ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060b0:	4a3c      	ldr	r2, [pc, #240]	; (80061a4 <SM_EnablePwmToAux+0x250>)
 80060b2:	f043 0301 	orr.w	r3, r3, #1
 80060b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80060b8:	4b3a      	ldr	r3, [pc, #232]	; (80061a4 <SM_EnablePwmToAux+0x250>)
 80060ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060bc:	f003 0301 	and.w	r3, r3, #1
 80060c0:	607b      	str	r3, [r7, #4]
 80060c2:	687b      	ldr	r3, [r7, #4]
	/**PWM_AUX_OUT_TIM GPIO Configuration
	PA4     ------> PWM_AUX_OUT_TIM_CH2
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 80060c4:	2340      	movs	r3, #64	; 0x40
 80060c6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060c8:	2302      	movs	r3, #2
 80060ca:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060cc:	2300      	movs	r3, #0
 80060ce:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060d0:	2300      	movs	r3, #0
 80060d2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80060d4:	2302      	movs	r3, #2
 80060d6:	61bb      	str	r3, [r7, #24]
	printf("SM_EnablePwmToAux: HAL_GPIO_Init\n");
 80060d8:	4833      	ldr	r0, [pc, #204]	; (80061a8 <SM_EnablePwmToAux+0x254>)
 80060da:	f009 fead 	bl	800fe38 <puts>
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060de:	f107 0308 	add.w	r3, r7, #8
 80060e2:	4619      	mov	r1, r3
 80060e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80060e8:	f004 fd52 	bl	800ab90 <HAL_GPIO_Init>


	// PWM_AUX_OUT_TIM_MspInit 0

	/* PWM_AUX_OUT_TIM clock enable */
	printf("SM_EnablePwmToAux: __HAL_RCC_PWM_AUX_OUT_TIM_CLK_ENABLE\n");
 80060ec:	482f      	ldr	r0, [pc, #188]	; (80061ac <SM_EnablePwmToAux+0x258>)
 80060ee:	f009 fea3 	bl	800fe38 <puts>
	__HAL_RCC_TIM3_CLK_ENABLE();
 80060f2:	4b2c      	ldr	r3, [pc, #176]	; (80061a4 <SM_EnablePwmToAux+0x250>)
 80060f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060f6:	4a2b      	ldr	r2, [pc, #172]	; (80061a4 <SM_EnablePwmToAux+0x250>)
 80060f8:	f043 0302 	orr.w	r3, r3, #2
 80060fc:	6593      	str	r3, [r2, #88]	; 0x58
 80060fe:	4b29      	ldr	r3, [pc, #164]	; (80061a4 <SM_EnablePwmToAux+0x250>)
 8006100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006102:	f003 0302 	and.w	r3, r3, #2
 8006106:	603b      	str	r3, [r7, #0]
 8006108:	683b      	ldr	r3, [r7, #0]

	/* PWM_AUX_OUT_TIM interrupt Init */
	printf("SM_EnablePwmToAux: HAL_NVIC_SetPriority\n");
 800610a:	4829      	ldr	r0, [pc, #164]	; (80061b0 <SM_EnablePwmToAux+0x25c>)
 800610c:	f009 fe94 	bl	800fe38 <puts>
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8006110:	2200      	movs	r2, #0
 8006112:	2100      	movs	r1, #0
 8006114:	201d      	movs	r0, #29
 8006116:	f003 fe18 	bl	8009d4a <HAL_NVIC_SetPriority>
	printf("SM_EnablePwmToAux: HAL_NVIC_EnableIRQ\n");
 800611a:	4826      	ldr	r0, [pc, #152]	; (80061b4 <SM_EnablePwmToAux+0x260>)
 800611c:	f009 fe8c 	bl	800fe38 <puts>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006120:	201d      	movs	r0, #29
 8006122:	f003 fe2c 	bl	8009d7e <HAL_NVIC_EnableIRQ>
	/* USER CODE BEGIN PWM_AUX_OUT_TIM_MspInit 1 */

	/* USER CODE END PWM_AUX_OUT_TIM_MspInit 1 */
	printf("SM_EnablePwmToAux: HAL_TIM_PWM_Start\n");
 8006126:	4824      	ldr	r0, [pc, #144]	; (80061b8 <SM_EnablePwmToAux+0x264>)
 8006128:	f009 fe86 	bl	800fe38 <puts>
	if ((res == HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1)) != HAL_OK)
 800612c:	2100      	movs	r1, #0
 800612e:	4815      	ldr	r0, [pc, #84]	; (8006184 <SM_EnablePwmToAux+0x230>)
 8006130:	f006 f9a8 	bl	800c484 <HAL_TIM_PWM_Start>
 8006134:	4603      	mov	r3, r0
 8006136:	461a      	mov	r2, r3
 8006138:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800613c:	4293      	cmp	r3, r2
 800613e:	d107      	bne.n	8006150 <SM_EnablePwmToAux+0x1fc>
	{
		printf("SM_EnablePwmToAux HAL_TIM_PWM_Start() Result:%u\n",res);
 8006140:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006144:	4619      	mov	r1, r3
 8006146:	481d      	ldr	r0, [pc, #116]	; (80061bc <SM_EnablePwmToAux+0x268>)
 8006148:	f009 fe02 	bl	800fd50 <iprintf>
		Error_Handler();
 800614c:	f001 fae4 	bl	8007718 <Error_Handler>
	}

	printf("SM_EnablePwmToAux: GO_ApplyPresetToSignal\n");
 8006150:	481b      	ldr	r0, [pc, #108]	; (80061c0 <SM_EnablePwmToAux+0x26c>)
 8006152:	f009 fe71 	bl	800fe38 <puts>
	GO_ApplyPresetToSignal(eDefaultGainPreset);
 8006156:	2007      	movs	r0, #7
 8006158:	f7ff fd20 	bl	8005b9c <GO_ApplyPresetToSignal>

	// 50% duty cycle
	printf("SM_EnablePwmToAux: PWM_AUX_OUT_TIM->CCR1 = 32768\n");
 800615c:	4819      	ldr	r0, [pc, #100]	; (80061c4 <SM_EnablePwmToAux+0x270>)
 800615e:	f009 fe6b 	bl	800fe38 <puts>
	PWM_AUX_OUT_TIM->CCR1 = 32768;
 8006162:	4b09      	ldr	r3, [pc, #36]	; (8006188 <SM_EnablePwmToAux+0x234>)
 8006164:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006168:	635a      	str	r2, [r3, #52]	; 0x34
	printf("SM_EnablePwmToAux: PWM_AUX_OUT_TIM->ARR = 65535\n");
 800616a:	4817      	ldr	r0, [pc, #92]	; (80061c8 <SM_EnablePwmToAux+0x274>)
 800616c:	f009 fe64 	bl	800fe38 <puts>
	PWM_AUX_OUT_TIM->ARR = 65535;
 8006170:	4b05      	ldr	r3, [pc, #20]	; (8006188 <SM_EnablePwmToAux+0x234>)
 8006172:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006176:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006178:	bf00      	nop
 800617a:	3758      	adds	r7, #88	; 0x58
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}
 8006180:	08013e84 	.word	0x08013e84
 8006184:	20001f1c 	.word	0x20001f1c
 8006188:	40000400 	.word	0x40000400
 800618c:	08013e98 	.word	0x08013e98
 8006190:	08013ecc 	.word	0x08013ecc
 8006194:	08013f08 	.word	0x08013f08
 8006198:	08013f38 	.word	0x08013f38
 800619c:	08013f80 	.word	0x08013f80
 80061a0:	08013fbc 	.word	0x08013fbc
 80061a4:	40021000 	.word	0x40021000
 80061a8:	08013fec 	.word	0x08013fec
 80061ac:	08014010 	.word	0x08014010
 80061b0:	08014048 	.word	0x08014048
 80061b4:	08014070 	.word	0x08014070
 80061b8:	08014098 	.word	0x08014098
 80061bc:	080140c0 	.word	0x080140c0
 80061c0:	080140f4 	.word	0x080140f4
 80061c4:	08014120 	.word	0x08014120
 80061c8:	08014154 	.word	0x08014154

080061cc <SM_DisablePwmToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_DisablePwmToAux()
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
	printf("SM_DisablePwmToAux");
 80061d2:	4815      	ldr	r0, [pc, #84]	; (8006228 <SM_DisablePwmToAux+0x5c>)
 80061d4:	f009 fdbc 	bl	800fd50 <iprintf>

	HAL_StatusTypeDef res = 0;
 80061d8:	2300      	movs	r3, #0
 80061da:	71fb      	strb	r3, [r7, #7]


	/* USER CODE BEGIN PWM_AUX_OUT_TIM_MspDeInit 0 */
	printf("SM_DisablePwmToAux: HAL_TIM_PWM_Stop\n");
 80061dc:	4813      	ldr	r0, [pc, #76]	; (800622c <SM_DisablePwmToAux+0x60>)
 80061de:	f009 fe2b 	bl	800fe38 <puts>
	if ((res == HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1)) != HAL_OK)
 80061e2:	2100      	movs	r1, #0
 80061e4:	4812      	ldr	r0, [pc, #72]	; (8006230 <SM_DisablePwmToAux+0x64>)
 80061e6:	f006 fa27 	bl	800c638 <HAL_TIM_PWM_Stop>
 80061ea:	4603      	mov	r3, r0
 80061ec:	461a      	mov	r2, r3
 80061ee:	79fb      	ldrb	r3, [r7, #7]
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d106      	bne.n	8006202 <SM_DisablePwmToAux+0x36>
	{
		printf("SM_DisablePwmToAux HAL_TIM_PWM_Stop() Result:%u\n",res);
 80061f4:	79fb      	ldrb	r3, [r7, #7]
 80061f6:	4619      	mov	r1, r3
 80061f8:	480e      	ldr	r0, [pc, #56]	; (8006234 <SM_DisablePwmToAux+0x68>)
 80061fa:	f009 fda9 	bl	800fd50 <iprintf>
		Error_Handler();
 80061fe:	f001 fa8b 	bl	8007718 <Error_Handler>
	}
	/* USER CODE END PWM_AUX_OUT_TIM_MspDeInit 0 */
	/* Peripheral clock disable */
	printf("SM_DisablePwmToAux __HAL_RCC_PWM_AUX_OUT_TIM_CLK_DISABLE\n");
 8006202:	480d      	ldr	r0, [pc, #52]	; (8006238 <SM_DisablePwmToAux+0x6c>)
 8006204:	f009 fe18 	bl	800fe38 <puts>
	__HAL_RCC_TIM3_CLK_DISABLE();
 8006208:	4b0c      	ldr	r3, [pc, #48]	; (800623c <SM_DisablePwmToAux+0x70>)
 800620a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800620c:	4a0b      	ldr	r2, [pc, #44]	; (800623c <SM_DisablePwmToAux+0x70>)
 800620e:	f023 0302 	bic.w	r3, r3, #2
 8006212:	6593      	str	r3, [r2, #88]	; 0x58

	/* PWM_AUX_OUT_TIM interrupt Deinit */
	printf("SM_DisablePwmToAux HAL_NVIC_DisableIRQ\n");
 8006214:	480a      	ldr	r0, [pc, #40]	; (8006240 <SM_DisablePwmToAux+0x74>)
 8006216:	f009 fe0f 	bl	800fe38 <puts>
	HAL_NVIC_DisableIRQ(TIM3_IRQn);
 800621a:	201d      	movs	r0, #29
 800621c:	f003 fdbd 	bl	8009d9a <HAL_NVIC_DisableIRQ>
	/* USER CODE BEGIN PWM_AUX_OUT_TIM_MspDeInit 1 */

	/* USER CODE END PWM_AUX_OUT_TIM_MspDeInit 1 */
}
 8006220:	bf00      	nop
 8006222:	3708      	adds	r7, #8
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}
 8006228:	08014184 	.word	0x08014184
 800622c:	08014198 	.word	0x08014198
 8006230:	20001f1c 	.word	0x20001f1c
 8006234:	080141c0 	.word	0x080141c0
 8006238:	080141f4 	.word	0x080141f4
 800623c:	40021000 	.word	0x40021000
 8006240:	08014230 	.word	0x08014230

08006244 <SM_EnableDacToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_EnableDacToAux()
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b0b2      	sub	sp, #200	; 0xc8
 8006248:	af00      	add	r7, sp, #0
	printf("SM_EnableDacToAux");
 800624a:	4860      	ldr	r0, [pc, #384]	; (80063cc <SM_EnableDacToAux+0x188>)
 800624c:	f009 fd80 	bl	800fd50 <iprintf>

	HAL_StatusTypeDef res = 0;
 8006250:	2300      	movs	r3, #0
 8006252:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	DAC_ChannelConfTypeDef sConfig = {0};
 8006256:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800625a:	2230      	movs	r2, #48	; 0x30
 800625c:	2100      	movs	r1, #0
 800625e:	4618      	mov	r0, r3
 8006260:	f009 f912 	bl	800f488 <memset>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006264:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006268:	2200      	movs	r2, #0
 800626a:	601a      	str	r2, [r3, #0]
 800626c:	605a      	str	r2, [r3, #4]
 800626e:	609a      	str	r2, [r3, #8]
 8006270:	60da      	str	r2, [r3, #12]
 8006272:	611a      	str	r2, [r3, #16]
	DAC_HandleTypeDef hdac2;
	DMA_HandleTypeDef hdma_dac2_ch1;
	/** DAC Initialization
	*/
	hdac2.Instance = DAC2;
 8006274:	4b56      	ldr	r3, [pc, #344]	; (80063d0 <SM_EnableDacToAux+0x18c>)
 8006276:	66fb      	str	r3, [r7, #108]	; 0x6c
	if ((res == HAL_DAC_Init(&hdac2)) != HAL_OK)
 8006278:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800627c:	4618      	mov	r0, r3
 800627e:	f003 fda6 	bl	8009dce <HAL_DAC_Init>
 8006282:	4603      	mov	r3, r0
 8006284:	461a      	mov	r2, r3
 8006286:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 800628a:	4293      	cmp	r3, r2
 800628c:	d107      	bne.n	800629e <SM_EnableDacToAux+0x5a>
	{
		printf("SM_EnableDacToAux HAL_DAC_Init() Result:%u\n",res);
 800628e:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006292:	4619      	mov	r1, r3
 8006294:	484f      	ldr	r0, [pc, #316]	; (80063d4 <SM_EnableDacToAux+0x190>)
 8006296:	f009 fd5b 	bl	800fd50 <iprintf>
		Error_Handler();
 800629a:	f001 fa3d 	bl	8007718 <Error_Handler>
	}
	/** DAC channel OUT1 config
	*/
	sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800629e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80062a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	sConfig.DAC_DMADoubleDataMode = DISABLE;
 80062a6:	2300      	movs	r3, #0
 80062a8:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
	sConfig.DAC_SignedFormat = DISABLE;
 80062ac:	2300      	movs	r3, #0
 80062ae:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80062b2:	2300      	movs	r3, #0
 80062b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	sConfig.DAC_Trigger = DAC_TRIGGER_TRGO;
 80062b8:	2312      	movs	r3, #18
 80062ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80062be:	2300      	movs	r3, #0
 80062c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80062c4:	2300      	movs	r3, #0
 80062c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80062ca:	2301      	movs	r3, #1
 80062cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80062d0:	2300      	movs	r3, #0
 80062d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	if ((res == HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1)) != HAL_OK)
 80062d6:	f107 0194 	add.w	r1, r7, #148	; 0x94
 80062da:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80062de:	2200      	movs	r2, #0
 80062e0:	4618      	mov	r0, r3
 80062e2:	f003 ff53 	bl	800a18c <HAL_DAC_ConfigChannel>
 80062e6:	4603      	mov	r3, r0
 80062e8:	461a      	mov	r2, r3
 80062ea:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d107      	bne.n	8006302 <SM_EnableDacToAux+0xbe>
	{
		printf("SM_EnableDacToAux HAL_DAC_ConfigChannel() Result:%u\n",res);
 80062f2:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 80062f6:	4619      	mov	r1, r3
 80062f8:	4837      	ldr	r0, [pc, #220]	; (80063d8 <SM_EnableDacToAux+0x194>)
 80062fa:	f009 fd29 	bl	800fd50 <iprintf>
		Error_Handler();
 80062fe:	f001 fa0b 	bl	8007718 <Error_Handler>

	/* USER CODE BEGIN DAC2_MspInit 0 */

	/* USER CODE END DAC2_MspInit 0 */
	/* DAC2 clock enable */
	printf("SM_EnableDacToAux __HAL_RCC_DAC2_CLK_ENABLE()\n");
 8006302:	4836      	ldr	r0, [pc, #216]	; (80063dc <SM_EnableDacToAux+0x198>)
 8006304:	f009 fd98 	bl	800fe38 <puts>
	__HAL_RCC_DAC2_CLK_ENABLE();
 8006308:	4b35      	ldr	r3, [pc, #212]	; (80063e0 <SM_EnableDacToAux+0x19c>)
 800630a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800630c:	4a34      	ldr	r2, [pc, #208]	; (80063e0 <SM_EnableDacToAux+0x19c>)
 800630e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006312:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006314:	4b32      	ldr	r3, [pc, #200]	; (80063e0 <SM_EnableDacToAux+0x19c>)
 8006316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800631c:	60bb      	str	r3, [r7, #8]
 800631e:	68bb      	ldr	r3, [r7, #8]

	printf("SM_EnableDacToAux __HAL_RCC_GPIOA_CLK_ENABLE()\n");
 8006320:	4830      	ldr	r0, [pc, #192]	; (80063e4 <SM_EnableDacToAux+0x1a0>)
 8006322:	f009 fd89 	bl	800fe38 <puts>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8006326:	4b2e      	ldr	r3, [pc, #184]	; (80063e0 <SM_EnableDacToAux+0x19c>)
 8006328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800632a:	4a2d      	ldr	r2, [pc, #180]	; (80063e0 <SM_EnableDacToAux+0x19c>)
 800632c:	f043 0301 	orr.w	r3, r3, #1
 8006330:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006332:	4b2b      	ldr	r3, [pc, #172]	; (80063e0 <SM_EnableDacToAux+0x19c>)
 8006334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006336:	f003 0301 	and.w	r3, r3, #1
 800633a:	607b      	str	r3, [r7, #4]
 800633c:	687b      	ldr	r3, [r7, #4]
	/**DAC2 GPIO Configuration
	PA6     ------> DAC2_OUT1
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 800633e:	2340      	movs	r3, #64	; 0x40
 8006340:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006344:	2303      	movs	r3, #3
 8006346:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800634a:	2300      	movs	r3, #0
 800634c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	printf("SM_EnableDacToAux HAL_GPIO_Init()\n");
 8006350:	4825      	ldr	r0, [pc, #148]	; (80063e8 <SM_EnableDacToAux+0x1a4>)
 8006352:	f009 fd71 	bl	800fe38 <puts>
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006356:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800635a:	4619      	mov	r1, r3
 800635c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006360:	f004 fc16 	bl	800ab90 <HAL_GPIO_Init>

	/* DAC2 DMA Init */
	/* DAC2_CH1 Init */
	hdma_dac2_ch1.Instance = DMA1_Channel3;
 8006364:	4b21      	ldr	r3, [pc, #132]	; (80063ec <SM_EnableDacToAux+0x1a8>)
 8006366:	60fb      	str	r3, [r7, #12]
	hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8006368:	2329      	movs	r3, #41	; 0x29
 800636a:	613b      	str	r3, [r7, #16]
	hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800636c:	2310      	movs	r3, #16
 800636e:	617b      	str	r3, [r7, #20]
	hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006370:	2300      	movs	r3, #0
 8006372:	61bb      	str	r3, [r7, #24]
	hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006374:	2380      	movs	r3, #128	; 0x80
 8006376:	61fb      	str	r3, [r7, #28]
	hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006378:	f44f 7300 	mov.w	r3, #512	; 0x200
 800637c:	623b      	str	r3, [r7, #32]
	hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800637e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006382:	627b      	str	r3, [r7, #36]	; 0x24
	hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8006384:	2320      	movs	r3, #32
 8006386:	62bb      	str	r3, [r7, #40]	; 0x28
	hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8006388:	2300      	movs	r3, #0
 800638a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if ((res == HAL_DMA_Init(&hdma_dac2_ch1)) != HAL_OK)
 800638c:	f107 030c 	add.w	r3, r7, #12
 8006390:	4618      	mov	r0, r3
 8006392:	f004 f931 	bl	800a5f8 <HAL_DMA_Init>
 8006396:	4603      	mov	r3, r0
 8006398:	461a      	mov	r2, r3
 800639a:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 800639e:	4293      	cmp	r3, r2
 80063a0:	d107      	bne.n	80063b2 <SM_EnableDacToAux+0x16e>
	{
		printf("SM_EnableDacToAux HAL_DMA_Init() Result:%u\n",res);
 80063a2:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 80063a6:	4619      	mov	r1, r3
 80063a8:	4811      	ldr	r0, [pc, #68]	; (80063f0 <SM_EnableDacToAux+0x1ac>)
 80063aa:	f009 fcd1 	bl	800fd50 <iprintf>
		Error_Handler();
 80063ae:	f001 f9b3 	bl	8007718 <Error_Handler>
	}

	printf("SM_EnableDacToAux __HAL_LINKDMA()\n");
 80063b2:	4810      	ldr	r0, [pc, #64]	; (80063f4 <SM_EnableDacToAux+0x1b0>)
 80063b4:	f009 fd40 	bl	800fe38 <puts>
	__HAL_LINKDMA(&hdac2,DMA_Handle1,hdma_dac2_ch1);
 80063b8:	f107 030c 	add.w	r3, r7, #12
 80063bc:	677b      	str	r3, [r7, #116]	; 0x74
 80063be:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80063c2:	637b      	str	r3, [r7, #52]	; 0x34

    //GO_ApplyPresetToAux(eDefaultGainPreset);
}
 80063c4:	bf00      	nop
 80063c6:	37c8      	adds	r7, #200	; 0xc8
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	08014258 	.word	0x08014258
 80063d0:	50000c00 	.word	0x50000c00
 80063d4:	0801426c 	.word	0x0801426c
 80063d8:	08014298 	.word	0x08014298
 80063dc:	080142d0 	.word	0x080142d0
 80063e0:	40021000 	.word	0x40021000
 80063e4:	08014300 	.word	0x08014300
 80063e8:	08014330 	.word	0x08014330
 80063ec:	40020030 	.word	0x40020030
 80063f0:	08014354 	.word	0x08014354
 80063f4:	08014380 	.word	0x08014380

080063f8 <SM_DisableDacToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_DisableDacToAux()
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	af00      	add	r7, sp, #0


	printf("SM_DisableDacToAux\n");
 80063fc:	4806      	ldr	r0, [pc, #24]	; (8006418 <SM_DisableDacToAux+0x20>)
 80063fe:	f009 fd1b 	bl	800fe38 <puts>
    //__HAL_RCC_DAC2_CLK_DISABLE();

    /**DAC2 GPIO Configuration
    PA6     ------> DAC2_OUT1
    */
	printf("SM_DisableDacToAux HAL_GPIO_DeInit\n");
 8006402:	4806      	ldr	r0, [pc, #24]	; (800641c <SM_DisableDacToAux+0x24>)
 8006404:	f009 fd18 	bl	800fe38 <puts>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6);
 8006408:	2140      	movs	r1, #64	; 0x40
 800640a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800640e:	f004 fd41 	bl	800ae94 <HAL_GPIO_DeInit>

}
 8006412:	bf00      	nop
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	080143a4 	.word	0x080143a4
 800641c:	080143b8 	.word	0x080143b8

08006420 <SM_GetEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t SM_GetEncoderValue(eEncoder_Direction direction)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	4603      	mov	r3, r0
 8006428:	71fb      	strb	r3, [r7, #7]
	if(direction)
 800642a:	79fb      	ldrb	r3, [r7, #7]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d008      	beq.n	8006442 <SM_GetEncoderValue+0x22>
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
 8006430:	4b08      	ldr	r3, [pc, #32]	; (8006454 <SM_GetEncoderValue+0x34>)
 8006432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006434:	b29a      	uxth	r2, r3
 8006436:	4b07      	ldr	r3, [pc, #28]	; (8006454 <SM_GetEncoderValue+0x34>)
 8006438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643a:	b29b      	uxth	r3, r3
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	b29b      	uxth	r3, r3
 8006440:	e002      	b.n	8006448 <SM_GetEncoderValue+0x28>
	}
	else
	{
		return ENCODER_TIMER->CNT;
 8006442:	4b04      	ldr	r3, [pc, #16]	; (8006454 <SM_GetEncoderValue+0x34>)
 8006444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006446:	b29b      	uxth	r3, r3
	}
}
 8006448:	4618      	mov	r0, r3
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr
 8006454:	40012c00 	.word	0x40012c00

08006458 <SM_GetOutputInHertz>:
 *	@param None
 *	@retval None
 *
 */
float SM_GetOutputInHertz()
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
	volatile float output_tm_psc;
	volatile float output_tm_arr;

	// safe-guard against divide by zero
	(OUTPUT_TIMER->PSC == 0) ? (output_tm_psc = 1) : (output_tm_psc = OUTPUT_TIMER->PSC);
 800645e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006464:	2b00      	cmp	r3, #0
 8006466:	d103      	bne.n	8006470 <SM_GetOutputInHertz+0x18>
 8006468:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800646c:	60bb      	str	r3, [r7, #8]
 800646e:	e008      	b.n	8006482 <SM_GetOutputInHertz+0x2a>
 8006470:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006476:	ee07 3a90 	vmov	s15, r3
 800647a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800647e:	edc7 7a02 	vstr	s15, [r7, #8]
	(OUTPUT_TIMER->ARR == 0) ? (output_tm_arr = 1) : (output_tm_arr = OUTPUT_TIMER->ARR);
 8006482:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006488:	2b00      	cmp	r3, #0
 800648a:	d103      	bne.n	8006494 <SM_GetOutputInHertz+0x3c>
 800648c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006490:	607b      	str	r3, [r7, #4]
 8006492:	e008      	b.n	80064a6 <SM_GetOutputInHertz+0x4e>
 8006494:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649a:	ee07 3a90 	vmov	s15, r3
 800649e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064a2:	edc7 7a01 	vstr	s15, [r7, #4]

	float output_tm_freq = SM_MCLK / (output_tm_psc * output_tm_arr);
 80064a6:	ed97 7a02 	vldr	s14, [r7, #8]
 80064aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80064ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80064b2:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80064dc <SM_GetOutputInHertz+0x84>
 80064b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064ba:	edc7 7a03 	vstr	s15, [r7, #12]


	return output_tm_freq / SM_FSAMP;
 80064be:	edd7 7a03 	vldr	s15, [r7, #12]
 80064c2:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80064e0 <SM_GetOutputInHertz+0x88>
 80064c6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80064ca:	eef0 7a66 	vmov.f32	s15, s13
}
 80064ce:	eeb0 0a67 	vmov.f32	s0, s15
 80064d2:	3714      	adds	r7, #20
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr
 80064dc:	4d2037a0 	.word	0x4d2037a0
 80064e0:	42f00000 	.word	0x42f00000

080064e4 <SM_ConvertPeriodToHertz>:


float SM_ConvertPeriodToHertz(uint32_t period, uint16_t psc)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	460b      	mov	r3, r1
 80064ee:	807b      	strh	r3, [r7, #2]
	(psc == 0) ? (psc = 1) : psc;
 80064f0:	887b      	ldrh	r3, [r7, #2]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d101      	bne.n	80064fa <SM_ConvertPeriodToHertz+0x16>
 80064f6:	2301      	movs	r3, #1
 80064f8:	807b      	strh	r3, [r7, #2]

	return (float)SM_MCLK / ( (float)psc * (float)period );
 80064fa:	887b      	ldrh	r3, [r7, #2]
 80064fc:	ee07 3a90 	vmov	s15, r3
 8006500:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	ee07 3a90 	vmov	s15, r3
 800650a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800650e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006512:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800652c <SM_ConvertPeriodToHertz+0x48>
 8006516:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800651a:	eef0 7a66 	vmov.f32	s15, s13
}
 800651e:	eeb0 0a67 	vmov.f32	s0, s15
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr
 800652c:	4d2037a0 	.word	0x4d2037a0

08006530 <SM_IsFuncPwmDutyMode>:
	return (SM_MCLK / hertz) / psc;
}


uint8_t SM_IsFuncPwmDutyMode()
{
 8006530:	b480      	push	{r7}
 8006532:	af00      	add	r7, sp, #0
	return duty_adjust_mode;
 8006534:	4b03      	ldr	r3, [pc, #12]	; (8006544 <SM_IsFuncPwmDutyMode+0x14>)
 8006536:	781b      	ldrb	r3, [r3, #0]
}
 8006538:	4618      	mov	r0, r3
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	20001e9a 	.word	0x20001e9a

08006548 <SM_ToggleFuncPwmDutyMode>:

void SM_ToggleFuncPwmDutyMode()
{
 8006548:	b480      	push	{r7}
 800654a:	af00      	add	r7, sp, #0
	duty_adjust_mode ^= 1;
 800654c:	4b05      	ldr	r3, [pc, #20]	; (8006564 <SM_ToggleFuncPwmDutyMode+0x1c>)
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	f083 0301 	eor.w	r3, r3, #1
 8006554:	b2da      	uxtb	r2, r3
 8006556:	4b03      	ldr	r3, [pc, #12]	; (8006564 <SM_ToggleFuncPwmDutyMode+0x1c>)
 8006558:	701a      	strb	r2, [r3, #0]
}
 800655a:	bf00      	nop
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr
 8006564:	20001e9a 	.word	0x20001e9a

08006568 <SM_ResetFuncPwmDutyMode>:

void SM_ResetFuncPwmDutyMode()
{
 8006568:	b480      	push	{r7}
 800656a:	af00      	add	r7, sp, #0
	duty_adjust_mode = 0;
 800656c:	4b03      	ldr	r3, [pc, #12]	; (800657c <SM_ResetFuncPwmDutyMode+0x14>)
 800656e:	2200      	movs	r2, #0
 8006570:	701a      	strb	r2, [r3, #0]

}
 8006572:	bf00      	nop
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr
 800657c:	20001e9a 	.word	0x20001e9a

08006580 <VPP_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ResetLastEncoderValue()
{
 8006580:	b480      	push	{r7}
 8006582:	af00      	add	r7, sp, #0
	amp_last_encoder_value = 0;
 8006584:	4b03      	ldr	r3, [pc, #12]	; (8006594 <VPP_ResetLastEncoderValue+0x14>)
 8006586:	2200      	movs	r2, #0
 8006588:	801a      	strh	r2, [r3, #0]
}
 800658a:	bf00      	nop
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr
 8006594:	20001e9c 	.word	0x20001e9c

08006598 <VPP_ApplyProfileToSignal>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyProfileToSignal(eAmpSettings_t pPresetEnum)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	4603      	mov	r3, r0
 80065a0:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 80065a2:	79fa      	ldrb	r2, [r7, #7]
 80065a4:	4613      	mov	r3, r2
 80065a6:	00db      	lsls	r3, r3, #3
 80065a8:	1a9b      	subs	r3, r3, r2
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	4a10      	ldr	r2, [pc, #64]	; (80065f0 <VPP_ApplyProfileToSignal+0x58>)
 80065ae:	4413      	add	r3, r2
 80065b0:	60fb      	str	r3, [r7, #12]

	// Set the new  amp profile to the SignalChannel object
	SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile = pNextEncPreset;
 80065b2:	2000      	movs	r0, #0
 80065b4:	f7ff fcb8 	bl	8005f28 <SM_GetOutputChannel>
 80065b8:	4602      	mov	r2, r0
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

    // set the gain preset
	GO_ApplyPresetToSignal(pNextEncPreset->gain_preset);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	7a1b      	ldrb	r3, [r3, #8]
 80065c4:	4618      	mov	r0, r3
 80065c6:	f7ff fae9 	bl	8005b9c <GO_ApplyPresetToSignal>

    // Apply the next amplitude setting to the SignalChannel object
    _ProcessSignalDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	edd3 7a04 	vldr	s15, [r3, #16]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	ed93 7a05 	vldr	s14, [r3, #20]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	8b1b      	ldrh	r3, [r3, #24]
 80065da:	4618      	mov	r0, r3
 80065dc:	eef0 0a47 	vmov.f32	s1, s14
 80065e0:	eeb0 0a67 	vmov.f32	s0, s15
 80065e4:	f000 f830 	bl	8006648 <_ProcessSignalDataTable>


}
 80065e8:	bf00      	nop
 80065ea:	3710      	adds	r7, #16
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	20000178 	.word	0x20000178

080065f4 <VPP_ApplyProfileToAux>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyProfileToAux(eAmpSettings_t pPresetEnum)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	4603      	mov	r3, r0
 80065fc:	71fb      	strb	r3, [r7, #7]

	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 80065fe:	79fa      	ldrb	r2, [r7, #7]
 8006600:	4613      	mov	r3, r2
 8006602:	00db      	lsls	r3, r3, #3
 8006604:	1a9b      	subs	r3, r3, r2
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	4a0e      	ldr	r2, [pc, #56]	; (8006644 <VPP_ApplyProfileToAux+0x50>)
 800660a:	4413      	add	r3, r2
 800660c:	60fb      	str	r3, [r7, #12]

	// Set the new VPP Preset to the AuxChannel object
	SM_GetOutputChannel(AUX_CHANNEL)->amp_profile = pNextEncPreset;
 800660e:	2001      	movs	r0, #1
 8006610:	f7ff fc8a 	bl	8005f28 <SM_GetOutputChannel>
 8006614:	4602      	mov	r2, r0
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

	 // set the gain preset
	//GO_ApplyPresetToAux(pNextEncPreset->gain_preset);

	// Apply the next amplitude setting to the AuxChannel object
	_ProcessAuxDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	edd3 7a04 	vldr	s15, [r3, #16]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	ed93 7a05 	vldr	s14, [r3, #20]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	8b1b      	ldrh	r3, [r3, #24]
 800662c:	4618      	mov	r0, r3
 800662e:	eef0 0a47 	vmov.f32	s1, s14
 8006632:	eeb0 0a67 	vmov.f32	s0, s15
 8006636:	f000 f88d 	bl	8006754 <_ProcessAuxDataTable>



}
 800663a:	bf00      	nop
 800663c:	3710      	adds	r7, #16
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	20000178 	.word	0x20000178

08006648 <_ProcessSignalDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSignalDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b08a      	sub	sp, #40	; 0x28
 800664c:	af00      	add	r7, sp, #0
 800664e:	ed87 0a03 	vstr	s0, [r7, #12]
 8006652:	edc7 0a02 	vstr	s1, [r7, #8]
 8006656:	4603      	mov	r3, r0
 8006658:	80fb      	strh	r3, [r7, #6]
	sOutputChannel_t * pTmpOutputChannel = SM_GetOutputChannel(SIGNAL_CHANNEL);
 800665a:	2000      	movs	r0, #0
 800665c:	f7ff fc64 	bl	8005f28 <SM_GetOutputChannel>
 8006660:	6178      	str	r0, [r7, #20]
	if(pTmpOutputChannel->func_profile->func != PWM_FUNC_MODE)
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	2b06      	cmp	r3, #6
 800666c:	d06b      	beq.n	8006746 <_ProcessSignalDataTable+0xfe>
	{
		// copy refer lookup datat table from SignalChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 800666e:	2300      	movs	r3, #0
 8006670:	627b      	str	r3, [r7, #36]	; 0x24
 8006672:	e00c      	b.n	800668e <_ProcessSignalDataTable+0x46>
		{
			tmpDataTable[i] = pTmpOutputChannel->ref_lut_data[i];
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	685a      	ldr	r2, [r3, #4]
 8006678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	4413      	add	r3, r2
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	4933      	ldr	r1, [pc, #204]	; (8006750 <_ProcessSignalDataTable+0x108>)
 8006682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006684:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668a:	3301      	adds	r3, #1
 800668c:	627b      	str	r3, [r7, #36]	; 0x24
 800668e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006690:	2b77      	cmp	r3, #119	; 0x77
 8006692:	ddef      	ble.n	8006674 <_ProcessSignalDataTable+0x2c>
		}

		// calculate positive offset coefficient from encoder position
		float pos_offset_coeff = 1;
 8006694:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006698:	623b      	str	r3, [r7, #32]
		if(_encoder_value)
 800669a:	88fb      	ldrh	r3, [r7, #6]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d008      	beq.n	80066b2 <_ProcessSignalDataTable+0x6a>
		{
			pos_offset_coeff = (_encoder_value/4);
 80066a0:	88fb      	ldrh	r3, [r7, #6]
 80066a2:	089b      	lsrs	r3, r3, #2
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	ee07 3a90 	vmov	s15, r3
 80066aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80066ae:	edc7 7a08 	vstr	s15, [r7, #32]
		}

		// adjust amplitude and offset of lookup table copy
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80066b2:	2300      	movs	r3, #0
 80066b4:	61fb      	str	r3, [r7, #28]
 80066b6:	e02e      	b.n	8006716 <_ProcessSignalDataTable+0xce>
		{
			tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 80066b8:	4a25      	ldr	r2, [pc, #148]	; (8006750 <_ProcessSignalDataTable+0x108>)
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066c0:	ee07 3a90 	vmov	s15, r3
 80066c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80066c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80066cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066d4:	ee17 1a90 	vmov	r1, s15
 80066d8:	4a1d      	ldr	r2, [pc, #116]	; (8006750 <_ProcessSignalDataTable+0x108>)
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 80066e0:	4a1b      	ldr	r2, [pc, #108]	; (8006750 <_ProcessSignalDataTable+0x108>)
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066e8:	ee07 3a90 	vmov	s15, r3
 80066ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80066f0:	edd7 7a08 	vldr	s15, [r7, #32]
 80066f4:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80066f8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80066fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006700:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006704:	ee17 1a90 	vmov	r1, s15
 8006708:	4a11      	ldr	r2, [pc, #68]	; (8006750 <_ProcessSignalDataTable+0x108>)
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	3301      	adds	r3, #1
 8006714:	61fb      	str	r3, [r7, #28]
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	2b77      	cmp	r3, #119	; 0x77
 800671a:	ddcd      	ble.n	80066b8 <_ProcessSignalDataTable+0x70>
		}

		// restore lookup table copy to active lookup table in SignalChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 800671c:	2300      	movs	r3, #0
 800671e:	61bb      	str	r3, [r7, #24]
 8006720:	e00e      	b.n	8006740 <_ProcessSignalDataTable+0xf8>
		{
			SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 8006722:	2000      	movs	r0, #0
 8006724:	f7ff fc00 	bl	8005f28 <SM_GetOutputChannel>
 8006728:	4601      	mov	r1, r0
 800672a:	4a09      	ldr	r2, [pc, #36]	; (8006750 <_ProcessSignalDataTable+0x108>)
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	3302      	adds	r3, #2
 8006736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	3301      	adds	r3, #1
 800673e:	61bb      	str	r3, [r7, #24]
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	2b77      	cmp	r3, #119	; 0x77
 8006744:	dded      	ble.n	8006722 <_ProcessSignalDataTable+0xda>
		}
	}

}
 8006746:	bf00      	nop
 8006748:	3728      	adds	r7, #40	; 0x28
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	20002358 	.word	0x20002358

08006754 <_ProcessAuxDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessAuxDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b088      	sub	sp, #32
 8006758:	af00      	add	r7, sp, #0
 800675a:	ed87 0a03 	vstr	s0, [r7, #12]
 800675e:	edc7 0a02 	vstr	s1, [r7, #8]
 8006762:	4603      	mov	r3, r0
 8006764:	80fb      	strh	r3, [r7, #6]
	if(SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func != PWM_FUNC_MODE)
 8006766:	2001      	movs	r0, #1
 8006768:	f7ff fbde 	bl	8005f28 <SM_GetOutputChannel>
 800676c:	4603      	mov	r3, r0
 800676e:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	2b06      	cmp	r3, #6
 8006776:	d059      	beq.n	800682c <_ProcessAuxDataTable+0xd8>
	{
		// copy refer lookup datat table from AuxChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006778:	2300      	movs	r3, #0
 800677a:	61fb      	str	r3, [r7, #28]
 800677c:	e00f      	b.n	800679e <_ProcessAuxDataTable+0x4a>
		{
			tmpDataTable[i] = SM_GetOutputChannel(AUX_CHANNEL)->ref_lut_data[i];
 800677e:	2001      	movs	r0, #1
 8006780:	f7ff fbd2 	bl	8005f28 <SM_GetOutputChannel>
 8006784:	4603      	mov	r3, r0
 8006786:	685a      	ldr	r2, [r3, #4]
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	4413      	add	r3, r2
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	4933      	ldr	r1, [pc, #204]	; (8006860 <_ProcessAuxDataTable+0x10c>)
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	3301      	adds	r3, #1
 800679c:	61fb      	str	r3, [r7, #28]
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	2b77      	cmp	r3, #119	; 0x77
 80067a2:	ddec      	ble.n	800677e <_ProcessAuxDataTable+0x2a>
		}

		// calculate positive offset coefficient from encoder position
		float pos_offset_coeff = 1;
 80067a4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80067a8:	61bb      	str	r3, [r7, #24]
		if(_encoder_value)
 80067aa:	88fb      	ldrh	r3, [r7, #6]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d008      	beq.n	80067c2 <_ProcessAuxDataTable+0x6e>
		{
			pos_offset_coeff = (_encoder_value/4);
 80067b0:	88fb      	ldrh	r3, [r7, #6]
 80067b2:	089b      	lsrs	r3, r3, #2
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	ee07 3a90 	vmov	s15, r3
 80067ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067be:	edc7 7a06 	vstr	s15, [r7, #24]
		}

		// adjust amplitude and offset of lookup table copy
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80067c2:	2300      	movs	r3, #0
 80067c4:	617b      	str	r3, [r7, #20]
 80067c6:	e02e      	b.n	8006826 <_ProcessAuxDataTable+0xd2>
		{

			tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 80067c8:	4a25      	ldr	r2, [pc, #148]	; (8006860 <_ProcessAuxDataTable+0x10c>)
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067d0:	ee07 3a90 	vmov	s15, r3
 80067d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80067d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80067dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067e4:	ee17 1a90 	vmov	r1, s15
 80067e8:	4a1d      	ldr	r2, [pc, #116]	; (8006860 <_ProcessAuxDataTable+0x10c>)
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 80067f0:	4a1b      	ldr	r2, [pc, #108]	; (8006860 <_ProcessAuxDataTable+0x10c>)
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067f8:	ee07 3a90 	vmov	s15, r3
 80067fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006800:	edd7 7a06 	vldr	s15, [r7, #24]
 8006804:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8006808:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800680c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006810:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006814:	ee17 1a90 	vmov	r1, s15
 8006818:	4a11      	ldr	r2, [pc, #68]	; (8006860 <_ProcessAuxDataTable+0x10c>)
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	3301      	adds	r3, #1
 8006824:	617b      	str	r3, [r7, #20]
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	2b77      	cmp	r3, #119	; 0x77
 800682a:	ddcd      	ble.n	80067c8 <_ProcessAuxDataTable+0x74>
		}
	}


	// restore lookup table copy to active lookup table in SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800682c:	2300      	movs	r3, #0
 800682e:	613b      	str	r3, [r7, #16]
 8006830:	e00e      	b.n	8006850 <_ProcessAuxDataTable+0xfc>
	{
		SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 8006832:	2001      	movs	r0, #1
 8006834:	f7ff fb78 	bl	8005f28 <SM_GetOutputChannel>
 8006838:	4601      	mov	r1, r0
 800683a:	4a09      	ldr	r2, [pc, #36]	; (8006860 <_ProcessAuxDataTable+0x10c>)
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	3302      	adds	r3, #2
 8006846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	3301      	adds	r3, #1
 800684e:	613b      	str	r3, [r7, #16]
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	2b77      	cmp	r3, #119	; 0x77
 8006854:	dded      	ble.n	8006832 <_ProcessAuxDataTable+0xde>
	}
}
 8006856:	bf00      	nop
 8006858:	3720      	adds	r7, #32
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	20002358 	.word	0x20002358

08006864 <VPP_MapEncoderPositionToSignalOutput>:
 *
 *	@retval None
 *
 */
void VPP_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	4603      	mov	r3, r0
 800686c:	80fb      	strh	r3, [r7, #6]
	eAmpSettings_t tmpAmp = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 800686e:	2000      	movs	r0, #0
 8006870:	f7ff fb5a 	bl	8005f28 <SM_GetOutputChannel>
 8006874:	4603      	mov	r3, r0
 8006876:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > amp_last_encoder_value)
 800687e:	4b15      	ldr	r3, [pc, #84]	; (80068d4 <VPP_MapEncoderPositionToSignalOutput+0x70>)
 8006880:	881b      	ldrh	r3, [r3, #0]
 8006882:	88fa      	ldrh	r2, [r7, #6]
 8006884:	429a      	cmp	r2, r3
 8006886:	d90c      	bls.n	80068a2 <VPP_MapEncoderPositionToSignalOutput+0x3e>
	{
		tmpAmp++;
 8006888:	7bfb      	ldrb	r3, [r7, #15]
 800688a:	3301      	adds	r3, #1
 800688c:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP98;
 800688e:	7bfb      	ldrb	r3, [r7, #15]
 8006890:	2b61      	cmp	r3, #97	; 0x61
 8006892:	d901      	bls.n	8006898 <VPP_MapEncoderPositionToSignalOutput+0x34>
 8006894:	2361      	movs	r3, #97	; 0x61
 8006896:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(tmpAmp);
 8006898:	7bfb      	ldrb	r3, [r7, #15]
 800689a:	4618      	mov	r0, r3
 800689c:	f7ff fe7c 	bl	8006598 <VPP_ApplyProfileToSignal>
 80068a0:	e010      	b.n	80068c4 <VPP_MapEncoderPositionToSignalOutput+0x60>
	}
	else if (pEncoderValue < amp_last_encoder_value)
 80068a2:	4b0c      	ldr	r3, [pc, #48]	; (80068d4 <VPP_MapEncoderPositionToSignalOutput+0x70>)
 80068a4:	881b      	ldrh	r3, [r3, #0]
 80068a6:	88fa      	ldrh	r2, [r7, #6]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d20b      	bcs.n	80068c4 <VPP_MapEncoderPositionToSignalOutput+0x60>
	{
		tmpAmp--;
 80068ac:	7bfb      	ldrb	r3, [r7, #15]
 80068ae:	3b01      	subs	r3, #1
 80068b0:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP01;
 80068b2:	7bfb      	ldrb	r3, [r7, #15]
 80068b4:	2b61      	cmp	r3, #97	; 0x61
 80068b6:	d901      	bls.n	80068bc <VPP_MapEncoderPositionToSignalOutput+0x58>
 80068b8:	2300      	movs	r3, #0
 80068ba:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(tmpAmp);
 80068bc:	7bfb      	ldrb	r3, [r7, #15]
 80068be:	4618      	mov	r0, r3
 80068c0:	f7ff fe6a 	bl	8006598 <VPP_ApplyProfileToSignal>
	}
	amp_last_encoder_value = pEncoderValue;
 80068c4:	4a03      	ldr	r2, [pc, #12]	; (80068d4 <VPP_MapEncoderPositionToSignalOutput+0x70>)
 80068c6:	88fb      	ldrh	r3, [r7, #6]
 80068c8:	8013      	strh	r3, [r2, #0]

}
 80068ca:	bf00      	nop
 80068cc:	3710      	adds	r7, #16
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	20001e9c 	.word	0x20001e9c

080068d8 <VPP_MapEncoderPositionToAuxOutput>:
 *
 *	@retval None
 *
 */
void VPP_MapEncoderPositionToAuxOutput(uint16_t pEncoderValue)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	4603      	mov	r3, r0
 80068e0:	80fb      	strh	r3, [r7, #6]

	eAmpSettings_t tmpAmp = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile->amp_setting;
 80068e2:	2001      	movs	r0, #1
 80068e4:	f7ff fb20 	bl	8005f28 <SM_GetOutputChannel>
 80068e8:	4603      	mov	r3, r0
 80068ea:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > amp_last_encoder_value)
 80068f2:	4b15      	ldr	r3, [pc, #84]	; (8006948 <VPP_MapEncoderPositionToAuxOutput+0x70>)
 80068f4:	881b      	ldrh	r3, [r3, #0]
 80068f6:	88fa      	ldrh	r2, [r7, #6]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d90c      	bls.n	8006916 <VPP_MapEncoderPositionToAuxOutput+0x3e>
	{
		tmpAmp++;
 80068fc:	7bfb      	ldrb	r3, [r7, #15]
 80068fe:	3301      	adds	r3, #1
 8006900:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP98;
 8006902:	7bfb      	ldrb	r3, [r7, #15]
 8006904:	2b61      	cmp	r3, #97	; 0x61
 8006906:	d901      	bls.n	800690c <VPP_MapEncoderPositionToAuxOutput+0x34>
 8006908:	2361      	movs	r3, #97	; 0x61
 800690a:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToAux(tmpAmp);
 800690c:	7bfb      	ldrb	r3, [r7, #15]
 800690e:	4618      	mov	r0, r3
 8006910:	f7ff fe70 	bl	80065f4 <VPP_ApplyProfileToAux>
 8006914:	e010      	b.n	8006938 <VPP_MapEncoderPositionToAuxOutput+0x60>
	}
	else if (pEncoderValue < amp_last_encoder_value)
 8006916:	4b0c      	ldr	r3, [pc, #48]	; (8006948 <VPP_MapEncoderPositionToAuxOutput+0x70>)
 8006918:	881b      	ldrh	r3, [r3, #0]
 800691a:	88fa      	ldrh	r2, [r7, #6]
 800691c:	429a      	cmp	r2, r3
 800691e:	d20b      	bcs.n	8006938 <VPP_MapEncoderPositionToAuxOutput+0x60>
	{
		tmpAmp--;
 8006920:	7bfb      	ldrb	r3, [r7, #15]
 8006922:	3b01      	subs	r3, #1
 8006924:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP01;
 8006926:	7bfb      	ldrb	r3, [r7, #15]
 8006928:	2b61      	cmp	r3, #97	; 0x61
 800692a:	d901      	bls.n	8006930 <VPP_MapEncoderPositionToAuxOutput+0x58>
 800692c:	2300      	movs	r3, #0
 800692e:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToAux(tmpAmp);
 8006930:	7bfb      	ldrb	r3, [r7, #15]
 8006932:	4618      	mov	r0, r3
 8006934:	f7ff fe5e 	bl	80065f4 <VPP_ApplyProfileToAux>
	}
	amp_last_encoder_value = pEncoderValue;
 8006938:	4a03      	ldr	r2, [pc, #12]	; (8006948 <VPP_MapEncoderPositionToAuxOutput+0x70>)
 800693a:	88fb      	ldrh	r3, [r7, #6]
 800693c:	8013      	strh	r3, [r2, #0]

}
 800693e:	bf00      	nop
 8006940:	3710      	adds	r7, #16
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	20001e9c 	.word	0x20001e9c

0800694c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b08c      	sub	sp, #48	; 0x30
 8006950:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8006952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006956:	2200      	movs	r2, #0
 8006958:	601a      	str	r2, [r3, #0]
 800695a:	605a      	str	r2, [r3, #4]
 800695c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800695e:	1d3b      	adds	r3, r7, #4
 8006960:	2220      	movs	r2, #32
 8006962:	2100      	movs	r1, #0
 8006964:	4618      	mov	r0, r3
 8006966:	f008 fd8f 	bl	800f488 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 800696a:	4b32      	ldr	r3, [pc, #200]	; (8006a34 <MX_ADC1_Init+0xe8>)
 800696c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006970:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8006972:	4b30      	ldr	r3, [pc, #192]	; (8006a34 <MX_ADC1_Init+0xe8>)
 8006974:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006978:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800697a:	4b2e      	ldr	r3, [pc, #184]	; (8006a34 <MX_ADC1_Init+0xe8>)
 800697c:	2200      	movs	r2, #0
 800697e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006980:	4b2c      	ldr	r3, [pc, #176]	; (8006a34 <MX_ADC1_Init+0xe8>)
 8006982:	2200      	movs	r2, #0
 8006984:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8006986:	4b2b      	ldr	r3, [pc, #172]	; (8006a34 <MX_ADC1_Init+0xe8>)
 8006988:	2200      	movs	r2, #0
 800698a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800698c:	4b29      	ldr	r3, [pc, #164]	; (8006a34 <MX_ADC1_Init+0xe8>)
 800698e:	2200      	movs	r2, #0
 8006990:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006992:	4b28      	ldr	r3, [pc, #160]	; (8006a34 <MX_ADC1_Init+0xe8>)
 8006994:	2204      	movs	r2, #4
 8006996:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8006998:	4b26      	ldr	r3, [pc, #152]	; (8006a34 <MX_ADC1_Init+0xe8>)
 800699a:	2200      	movs	r2, #0
 800699c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800699e:	4b25      	ldr	r3, [pc, #148]	; (8006a34 <MX_ADC1_Init+0xe8>)
 80069a0:	2201      	movs	r2, #1
 80069a2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80069a4:	4b23      	ldr	r3, [pc, #140]	; (8006a34 <MX_ADC1_Init+0xe8>)
 80069a6:	2201      	movs	r2, #1
 80069a8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80069aa:	4b22      	ldr	r3, [pc, #136]	; (8006a34 <MX_ADC1_Init+0xe8>)
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80069b2:	4b20      	ldr	r3, [pc, #128]	; (8006a34 <MX_ADC1_Init+0xe8>)
 80069b4:	2200      	movs	r2, #0
 80069b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80069b8:	4b1e      	ldr	r3, [pc, #120]	; (8006a34 <MX_ADC1_Init+0xe8>)
 80069ba:	2200      	movs	r2, #0
 80069bc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80069be:	4b1d      	ldr	r3, [pc, #116]	; (8006a34 <MX_ADC1_Init+0xe8>)
 80069c0:	2201      	movs	r2, #1
 80069c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80069c6:	4b1b      	ldr	r3, [pc, #108]	; (8006a34 <MX_ADC1_Init+0xe8>)
 80069c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80069cc:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80069ce:	4b19      	ldr	r3, [pc, #100]	; (8006a34 <MX_ADC1_Init+0xe8>)
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80069d6:	4817      	ldr	r0, [pc, #92]	; (8006a34 <MX_ADC1_Init+0xe8>)
 80069d8:	f001 ff3c 	bl	8008854 <HAL_ADC_Init>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d001      	beq.n	80069e6 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 80069e2:	f000 fe99 	bl	8007718 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80069e6:	2300      	movs	r3, #0
 80069e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80069ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069ee:	4619      	mov	r1, r3
 80069f0:	4810      	ldr	r0, [pc, #64]	; (8006a34 <MX_ADC1_Init+0xe8>)
 80069f2:	f002 fcc5 	bl	8009380 <HAL_ADCEx_MultiModeConfigChannel>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d001      	beq.n	8006a00 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80069fc:	f000 fe8c 	bl	8007718 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8006a00:	4b0d      	ldr	r3, [pc, #52]	; (8006a38 <MX_ADC1_Init+0xec>)
 8006a02:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006a04:	2306      	movs	r3, #6
 8006a06:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8006a0c:	237f      	movs	r3, #127	; 0x7f
 8006a0e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8006a10:	2304      	movs	r3, #4
 8006a12:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8006a14:	2300      	movs	r3, #0
 8006a16:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006a18:	1d3b      	adds	r3, r7, #4
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	4805      	ldr	r0, [pc, #20]	; (8006a34 <MX_ADC1_Init+0xe8>)
 8006a1e:	f002 f8d9 	bl	8008bd4 <HAL_ADC_ConfigChannel>
 8006a22:	4603      	mov	r3, r0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d001      	beq.n	8006a2c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8006a28:	f000 fe76 	bl	8007718 <Error_Handler>
  }

}
 8006a2c:	bf00      	nop
 8006a2e:	3730      	adds	r7, #48	; 0x30
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	20002538 	.word	0x20002538
 8006a38:	0c900008 	.word	0x0c900008

08006a3c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b08a      	sub	sp, #40	; 0x28
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a44:	f107 0314 	add.w	r3, r7, #20
 8006a48:	2200      	movs	r2, #0
 8006a4a:	601a      	str	r2, [r3, #0]
 8006a4c:	605a      	str	r2, [r3, #4]
 8006a4e:	609a      	str	r2, [r3, #8]
 8006a50:	60da      	str	r2, [r3, #12]
 8006a52:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a5c:	d14f      	bne.n	8006afe <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8006a5e:	4b2a      	ldr	r3, [pc, #168]	; (8006b08 <HAL_ADC_MspInit+0xcc>)
 8006a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a62:	4a29      	ldr	r2, [pc, #164]	; (8006b08 <HAL_ADC_MspInit+0xcc>)
 8006a64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006a68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006a6a:	4b27      	ldr	r3, [pc, #156]	; (8006b08 <HAL_ADC_MspInit+0xcc>)
 8006a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a72:	613b      	str	r3, [r7, #16]
 8006a74:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a76:	4b24      	ldr	r3, [pc, #144]	; (8006b08 <HAL_ADC_MspInit+0xcc>)
 8006a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a7a:	4a23      	ldr	r2, [pc, #140]	; (8006b08 <HAL_ADC_MspInit+0xcc>)
 8006a7c:	f043 0301 	orr.w	r3, r3, #1
 8006a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006a82:	4b21      	ldr	r3, [pc, #132]	; (8006b08 <HAL_ADC_MspInit+0xcc>)
 8006a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a86:	f003 0301 	and.w	r3, r3, #1
 8006a8a:	60fb      	str	r3, [r7, #12]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006a8e:	2304      	movs	r3, #4
 8006a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006a92:	2303      	movs	r3, #3
 8006a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a96:	2300      	movs	r3, #0
 8006a98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a9a:	f107 0314 	add.w	r3, r7, #20
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006aa4:	f004 f874 	bl	800ab90 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8006aa8:	4b18      	ldr	r3, [pc, #96]	; (8006b0c <HAL_ADC_MspInit+0xd0>)
 8006aaa:	4a19      	ldr	r2, [pc, #100]	; (8006b10 <HAL_ADC_MspInit+0xd4>)
 8006aac:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8006aae:	4b17      	ldr	r3, [pc, #92]	; (8006b0c <HAL_ADC_MspInit+0xd0>)
 8006ab0:	2205      	movs	r2, #5
 8006ab2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006ab4:	4b15      	ldr	r3, [pc, #84]	; (8006b0c <HAL_ADC_MspInit+0xd0>)
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006aba:	4b14      	ldr	r3, [pc, #80]	; (8006b0c <HAL_ADC_MspInit+0xd0>)
 8006abc:	2200      	movs	r2, #0
 8006abe:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006ac0:	4b12      	ldr	r3, [pc, #72]	; (8006b0c <HAL_ADC_MspInit+0xd0>)
 8006ac2:	2280      	movs	r2, #128	; 0x80
 8006ac4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006ac6:	4b11      	ldr	r3, [pc, #68]	; (8006b0c <HAL_ADC_MspInit+0xd0>)
 8006ac8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006acc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006ace:	4b0f      	ldr	r3, [pc, #60]	; (8006b0c <HAL_ADC_MspInit+0xd0>)
 8006ad0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ad4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006ad6:	4b0d      	ldr	r3, [pc, #52]	; (8006b0c <HAL_ADC_MspInit+0xd0>)
 8006ad8:	2220      	movs	r2, #32
 8006ada:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006adc:	4b0b      	ldr	r3, [pc, #44]	; (8006b0c <HAL_ADC_MspInit+0xd0>)
 8006ade:	2200      	movs	r2, #0
 8006ae0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006ae2:	480a      	ldr	r0, [pc, #40]	; (8006b0c <HAL_ADC_MspInit+0xd0>)
 8006ae4:	f003 fd88 	bl	800a5f8 <HAL_DMA_Init>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d001      	beq.n	8006af2 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8006aee:	f000 fe13 	bl	8007718 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a05      	ldr	r2, [pc, #20]	; (8006b0c <HAL_ADC_MspInit+0xd0>)
 8006af6:	655a      	str	r2, [r3, #84]	; 0x54
 8006af8:	4a04      	ldr	r2, [pc, #16]	; (8006b0c <HAL_ADC_MspInit+0xd0>)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8006afe:	bf00      	nop
 8006b00:	3728      	adds	r7, #40	; 0x28
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	40021000 	.word	0x40021000
 8006b0c:	200025a4 	.word	0x200025a4
 8006b10:	40020008 	.word	0x40020008

08006b14 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 8006b18:	4b0f      	ldr	r3, [pc, #60]	; (8006b58 <MX_COMP1_Init+0x44>)
 8006b1a:	4a10      	ldr	r2, [pc, #64]	; (8006b5c <MX_COMP1_Init+0x48>)
 8006b1c:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8006b1e:	4b0e      	ldr	r3, [pc, #56]	; (8006b58 <MX_COMP1_Init+0x44>)
 8006b20:	2200      	movs	r2, #0
 8006b22:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8006b24:	4b0c      	ldr	r3, [pc, #48]	; (8006b58 <MX_COMP1_Init+0x44>)
 8006b26:	4a0e      	ldr	r2, [pc, #56]	; (8006b60 <MX_COMP1_Init+0x4c>)
 8006b28:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8006b2a:	4b0b      	ldr	r3, [pc, #44]	; (8006b58 <MX_COMP1_Init+0x44>)
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8006b30:	4b09      	ldr	r3, [pc, #36]	; (8006b58 <MX_COMP1_Init+0x44>)
 8006b32:	2200      	movs	r2, #0
 8006b34:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8006b36:	4b08      	ldr	r3, [pc, #32]	; (8006b58 <MX_COMP1_Init+0x44>)
 8006b38:	2200      	movs	r2, #0
 8006b3a:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8006b3c:	4b06      	ldr	r3, [pc, #24]	; (8006b58 <MX_COMP1_Init+0x44>)
 8006b3e:	2200      	movs	r2, #0
 8006b40:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8006b42:	4805      	ldr	r0, [pc, #20]	; (8006b58 <MX_COMP1_Init+0x44>)
 8006b44:	f002 fe70 	bl	8009828 <HAL_COMP_Init>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d001      	beq.n	8006b52 <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 8006b4e:	f000 fde3 	bl	8007718 <Error_Handler>
  }

}
 8006b52:	bf00      	nop
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	20002604 	.word	0x20002604
 8006b5c:	40010200 	.word	0x40010200
 8006b60:	00800030 	.word	0x00800030

08006b64 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b088      	sub	sp, #32
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b6c:	f107 030c 	add.w	r3, r7, #12
 8006b70:	2200      	movs	r2, #0
 8006b72:	601a      	str	r2, [r3, #0]
 8006b74:	605a      	str	r2, [r3, #4]
 8006b76:	609a      	str	r2, [r3, #8]
 8006b78:	60da      	str	r2, [r3, #12]
 8006b7a:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a0f      	ldr	r2, [pc, #60]	; (8006bc0 <HAL_COMP_MspInit+0x5c>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d118      	bne.n	8006bb8 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b86:	4b0f      	ldr	r3, [pc, #60]	; (8006bc4 <HAL_COMP_MspInit+0x60>)
 8006b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b8a:	4a0e      	ldr	r2, [pc, #56]	; (8006bc4 <HAL_COMP_MspInit+0x60>)
 8006b8c:	f043 0301 	orr.w	r3, r3, #1
 8006b90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b92:	4b0c      	ldr	r3, [pc, #48]	; (8006bc4 <HAL_COMP_MspInit+0x60>)
 8006b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b96:	f003 0301 	and.w	r3, r3, #1
 8006b9a:	60bb      	str	r3, [r7, #8]
 8006b9c:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006b9e:	2302      	movs	r3, #2
 8006ba0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006baa:	f107 030c 	add.w	r3, r7, #12
 8006bae:	4619      	mov	r1, r3
 8006bb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006bb4:	f003 ffec 	bl	800ab90 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8006bb8:	bf00      	nop
 8006bba:	3720      	adds	r7, #32
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	40010200 	.word	0x40010200
 8006bc4:	40021000 	.word	0x40021000

08006bc8 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b08c      	sub	sp, #48	; 0x30
 8006bcc:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8006bce:	463b      	mov	r3, r7
 8006bd0:	2230      	movs	r2, #48	; 0x30
 8006bd2:	2100      	movs	r1, #0
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f008 fc57 	bl	800f488 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8006bda:	4b1e      	ldr	r3, [pc, #120]	; (8006c54 <MX_DAC1_Init+0x8c>)
 8006bdc:	4a1e      	ldr	r2, [pc, #120]	; (8006c58 <MX_DAC1_Init+0x90>)
 8006bde:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8006be0:	481c      	ldr	r0, [pc, #112]	; (8006c54 <MX_DAC1_Init+0x8c>)
 8006be2:	f003 f8f4 	bl	8009dce <HAL_DAC_Init>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d001      	beq.n	8006bf0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8006bec:	f000 fd94 	bl	8007718 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006bf0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006bf4:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8006c02:	2312      	movs	r3, #18
 8006c04:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8006c06:	2300      	movs	r3, #0
 8006c08:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006c12:	2300      	movs	r3, #0
 8006c14:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8006c16:	463b      	mov	r3, r7
 8006c18:	2200      	movs	r2, #0
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	480d      	ldr	r0, [pc, #52]	; (8006c54 <MX_DAC1_Init+0x8c>)
 8006c1e:	f003 fab5 	bl	800a18c <HAL_DAC_ConfigChannel>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d001      	beq.n	8006c2c <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 8006c28:	f000 fd76 	bl	8007718 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006c30:	2301      	movs	r3, #1
 8006c32:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8006c34:	463b      	mov	r3, r7
 8006c36:	2210      	movs	r2, #16
 8006c38:	4619      	mov	r1, r3
 8006c3a:	4806      	ldr	r0, [pc, #24]	; (8006c54 <MX_DAC1_Init+0x8c>)
 8006c3c:	f003 faa6 	bl	800a18c <HAL_DAC_ConfigChannel>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d001      	beq.n	8006c4a <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 8006c46:	f000 fd67 	bl	8007718 <Error_Handler>
  }

}
 8006c4a:	bf00      	nop
 8006c4c:	3730      	adds	r7, #48	; 0x30
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	2000263c 	.word	0x2000263c
 8006c58:	50000800 	.word	0x50000800

08006c5c <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b08c      	sub	sp, #48	; 0x30
 8006c60:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8006c62:	463b      	mov	r3, r7
 8006c64:	2230      	movs	r2, #48	; 0x30
 8006c66:	2100      	movs	r1, #0
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f008 fc0d 	bl	800f488 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 8006c6e:	4b16      	ldr	r3, [pc, #88]	; (8006cc8 <MX_DAC2_Init+0x6c>)
 8006c70:	4a16      	ldr	r2, [pc, #88]	; (8006ccc <MX_DAC2_Init+0x70>)
 8006c72:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8006c74:	4814      	ldr	r0, [pc, #80]	; (8006cc8 <MX_DAC2_Init+0x6c>)
 8006c76:	f003 f8aa 	bl	8009dce <HAL_DAC_Init>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d001      	beq.n	8006c84 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8006c80:	f000 fd4a 	bl	8007718 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006c84:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006c88:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006c92:	2300      	movs	r3, #0
 8006c94:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8006c96:	2306      	movs	r3, #6
 8006c98:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8006caa:	463b      	mov	r3, r7
 8006cac:	2200      	movs	r2, #0
 8006cae:	4619      	mov	r1, r3
 8006cb0:	4805      	ldr	r0, [pc, #20]	; (8006cc8 <MX_DAC2_Init+0x6c>)
 8006cb2:	f003 fa6b 	bl	800a18c <HAL_DAC_ConfigChannel>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d001      	beq.n	8006cc0 <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 8006cbc:	f000 fd2c 	bl	8007718 <Error_Handler>
  }

}
 8006cc0:	bf00      	nop
 8006cc2:	3730      	adds	r7, #48	; 0x30
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	20002628 	.word	0x20002628
 8006ccc:	50000c00 	.word	0x50000c00

08006cd0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b08c      	sub	sp, #48	; 0x30
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cd8:	f107 031c 	add.w	r3, r7, #28
 8006cdc:	2200      	movs	r2, #0
 8006cde:	601a      	str	r2, [r3, #0]
 8006ce0:	605a      	str	r2, [r3, #4]
 8006ce2:	609a      	str	r2, [r3, #8]
 8006ce4:	60da      	str	r2, [r3, #12]
 8006ce6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a56      	ldr	r2, [pc, #344]	; (8006e48 <HAL_DAC_MspInit+0x178>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d150      	bne.n	8006d94 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8006cf2:	4b56      	ldr	r3, [pc, #344]	; (8006e4c <HAL_DAC_MspInit+0x17c>)
 8006cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cf6:	4a55      	ldr	r2, [pc, #340]	; (8006e4c <HAL_DAC_MspInit+0x17c>)
 8006cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006cfe:	4b53      	ldr	r3, [pc, #332]	; (8006e4c <HAL_DAC_MspInit+0x17c>)
 8006d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d06:	61bb      	str	r3, [r7, #24]
 8006d08:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d0a:	4b50      	ldr	r3, [pc, #320]	; (8006e4c <HAL_DAC_MspInit+0x17c>)
 8006d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d0e:	4a4f      	ldr	r2, [pc, #316]	; (8006e4c <HAL_DAC_MspInit+0x17c>)
 8006d10:	f043 0301 	orr.w	r3, r3, #1
 8006d14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d16:	4b4d      	ldr	r3, [pc, #308]	; (8006e4c <HAL_DAC_MspInit+0x17c>)
 8006d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d1a:	f003 0301 	and.w	r3, r3, #1
 8006d1e:	617b      	str	r3, [r7, #20]
 8006d20:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006d22:	2330      	movs	r3, #48	; 0x30
 8006d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006d26:	2303      	movs	r3, #3
 8006d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d2e:	f107 031c 	add.w	r3, r7, #28
 8006d32:	4619      	mov	r1, r3
 8006d34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d38:	f003 ff2a 	bl	800ab90 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8006d3c:	4b44      	ldr	r3, [pc, #272]	; (8006e50 <HAL_DAC_MspInit+0x180>)
 8006d3e:	4a45      	ldr	r2, [pc, #276]	; (8006e54 <HAL_DAC_MspInit+0x184>)
 8006d40:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8006d42:	4b43      	ldr	r3, [pc, #268]	; (8006e50 <HAL_DAC_MspInit+0x180>)
 8006d44:	2206      	movs	r2, #6
 8006d46:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006d48:	4b41      	ldr	r3, [pc, #260]	; (8006e50 <HAL_DAC_MspInit+0x180>)
 8006d4a:	2210      	movs	r2, #16
 8006d4c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d4e:	4b40      	ldr	r3, [pc, #256]	; (8006e50 <HAL_DAC_MspInit+0x180>)
 8006d50:	2200      	movs	r2, #0
 8006d52:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006d54:	4b3e      	ldr	r3, [pc, #248]	; (8006e50 <HAL_DAC_MspInit+0x180>)
 8006d56:	2280      	movs	r2, #128	; 0x80
 8006d58:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006d5a:	4b3d      	ldr	r3, [pc, #244]	; (8006e50 <HAL_DAC_MspInit+0x180>)
 8006d5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d60:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006d62:	4b3b      	ldr	r3, [pc, #236]	; (8006e50 <HAL_DAC_MspInit+0x180>)
 8006d64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d68:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8006d6a:	4b39      	ldr	r3, [pc, #228]	; (8006e50 <HAL_DAC_MspInit+0x180>)
 8006d6c:	2220      	movs	r2, #32
 8006d6e:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8006d70:	4b37      	ldr	r3, [pc, #220]	; (8006e50 <HAL_DAC_MspInit+0x180>)
 8006d72:	2200      	movs	r2, #0
 8006d74:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8006d76:	4836      	ldr	r0, [pc, #216]	; (8006e50 <HAL_DAC_MspInit+0x180>)
 8006d78:	f003 fc3e 	bl	800a5f8 <HAL_DMA_Init>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d001      	beq.n	8006d86 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8006d82:	f000 fcc9 	bl	8007718 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a31      	ldr	r2, [pc, #196]	; (8006e50 <HAL_DAC_MspInit+0x180>)
 8006d8a:	609a      	str	r2, [r3, #8]
 8006d8c:	4a30      	ldr	r2, [pc, #192]	; (8006e50 <HAL_DAC_MspInit+0x180>)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 8006d92:	e054      	b.n	8006e3e <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a2f      	ldr	r2, [pc, #188]	; (8006e58 <HAL_DAC_MspInit+0x188>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d14f      	bne.n	8006e3e <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8006d9e:	4b2b      	ldr	r3, [pc, #172]	; (8006e4c <HAL_DAC_MspInit+0x17c>)
 8006da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006da2:	4a2a      	ldr	r2, [pc, #168]	; (8006e4c <HAL_DAC_MspInit+0x17c>)
 8006da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006da8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006daa:	4b28      	ldr	r3, [pc, #160]	; (8006e4c <HAL_DAC_MspInit+0x17c>)
 8006dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006db2:	613b      	str	r3, [r7, #16]
 8006db4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006db6:	4b25      	ldr	r3, [pc, #148]	; (8006e4c <HAL_DAC_MspInit+0x17c>)
 8006db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dba:	4a24      	ldr	r2, [pc, #144]	; (8006e4c <HAL_DAC_MspInit+0x17c>)
 8006dbc:	f043 0301 	orr.w	r3, r3, #1
 8006dc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006dc2:	4b22      	ldr	r3, [pc, #136]	; (8006e4c <HAL_DAC_MspInit+0x17c>)
 8006dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dc6:	f003 0301 	and.w	r3, r3, #1
 8006dca:	60fb      	str	r3, [r7, #12]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006dce:	2340      	movs	r3, #64	; 0x40
 8006dd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006dd2:	2303      	movs	r3, #3
 8006dd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006dda:	f107 031c 	add.w	r3, r7, #28
 8006dde:	4619      	mov	r1, r3
 8006de0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006de4:	f003 fed4 	bl	800ab90 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 8006de8:	4b1c      	ldr	r3, [pc, #112]	; (8006e5c <HAL_DAC_MspInit+0x18c>)
 8006dea:	4a1d      	ldr	r2, [pc, #116]	; (8006e60 <HAL_DAC_MspInit+0x190>)
 8006dec:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8006dee:	4b1b      	ldr	r3, [pc, #108]	; (8006e5c <HAL_DAC_MspInit+0x18c>)
 8006df0:	2229      	movs	r2, #41	; 0x29
 8006df2:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006df4:	4b19      	ldr	r3, [pc, #100]	; (8006e5c <HAL_DAC_MspInit+0x18c>)
 8006df6:	2210      	movs	r2, #16
 8006df8:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006dfa:	4b18      	ldr	r3, [pc, #96]	; (8006e5c <HAL_DAC_MspInit+0x18c>)
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006e00:	4b16      	ldr	r3, [pc, #88]	; (8006e5c <HAL_DAC_MspInit+0x18c>)
 8006e02:	2280      	movs	r2, #128	; 0x80
 8006e04:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006e06:	4b15      	ldr	r3, [pc, #84]	; (8006e5c <HAL_DAC_MspInit+0x18c>)
 8006e08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e0c:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006e0e:	4b13      	ldr	r3, [pc, #76]	; (8006e5c <HAL_DAC_MspInit+0x18c>)
 8006e10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e14:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8006e16:	4b11      	ldr	r3, [pc, #68]	; (8006e5c <HAL_DAC_MspInit+0x18c>)
 8006e18:	2220      	movs	r2, #32
 8006e1a:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8006e1c:	4b0f      	ldr	r3, [pc, #60]	; (8006e5c <HAL_DAC_MspInit+0x18c>)
 8006e1e:	2200      	movs	r2, #0
 8006e20:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8006e22:	480e      	ldr	r0, [pc, #56]	; (8006e5c <HAL_DAC_MspInit+0x18c>)
 8006e24:	f003 fbe8 	bl	800a5f8 <HAL_DMA_Init>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d001      	beq.n	8006e32 <HAL_DAC_MspInit+0x162>
      Error_Handler();
 8006e2e:	f000 fc73 	bl	8007718 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a09      	ldr	r2, [pc, #36]	; (8006e5c <HAL_DAC_MspInit+0x18c>)
 8006e36:	609a      	str	r2, [r3, #8]
 8006e38:	4a08      	ldr	r2, [pc, #32]	; (8006e5c <HAL_DAC_MspInit+0x18c>)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6293      	str	r3, [r2, #40]	; 0x28
}
 8006e3e:	bf00      	nop
 8006e40:	3730      	adds	r7, #48	; 0x30
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	50000800 	.word	0x50000800
 8006e4c:	40021000 	.word	0x40021000
 8006e50:	20001eb0 	.word	0x20001eb0
 8006e54:	4002001c 	.word	0x4002001c
 8006e58:	50000c00 	.word	0x50000c00
 8006e5c:	20002650 	.word	0x20002650
 8006e60:	40020030 	.word	0x40020030

08006e64 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8006e6a:	4b1a      	ldr	r3, [pc, #104]	; (8006ed4 <MX_DMA_Init+0x70>)
 8006e6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e6e:	4a19      	ldr	r2, [pc, #100]	; (8006ed4 <MX_DMA_Init+0x70>)
 8006e70:	f043 0304 	orr.w	r3, r3, #4
 8006e74:	6493      	str	r3, [r2, #72]	; 0x48
 8006e76:	4b17      	ldr	r3, [pc, #92]	; (8006ed4 <MX_DMA_Init+0x70>)
 8006e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e7a:	f003 0304 	and.w	r3, r3, #4
 8006e7e:	607b      	str	r3, [r7, #4]
 8006e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006e82:	4b14      	ldr	r3, [pc, #80]	; (8006ed4 <MX_DMA_Init+0x70>)
 8006e84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e86:	4a13      	ldr	r2, [pc, #76]	; (8006ed4 <MX_DMA_Init+0x70>)
 8006e88:	f043 0301 	orr.w	r3, r3, #1
 8006e8c:	6493      	str	r3, [r2, #72]	; 0x48
 8006e8e:	4b11      	ldr	r3, [pc, #68]	; (8006ed4 <MX_DMA_Init+0x70>)
 8006e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e92:	f003 0301 	and.w	r3, r3, #1
 8006e96:	603b      	str	r3, [r7, #0]
 8006e98:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	2101      	movs	r1, #1
 8006e9e:	200b      	movs	r0, #11
 8006ea0:	f002 ff53 	bl	8009d4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8006ea4:	200b      	movs	r0, #11
 8006ea6:	f002 ff6a 	bl	8009d7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8006eaa:	2200      	movs	r2, #0
 8006eac:	2100      	movs	r1, #0
 8006eae:	200c      	movs	r0, #12
 8006eb0:	f002 ff4b 	bl	8009d4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8006eb4:	200c      	movs	r0, #12
 8006eb6:	f002 ff62 	bl	8009d7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8006eba:	2200      	movs	r2, #0
 8006ebc:	2100      	movs	r1, #0
 8006ebe:	200d      	movs	r0, #13
 8006ec0:	f002 ff43 	bl	8009d4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8006ec4:	200d      	movs	r0, #13
 8006ec6:	f002 ff5a 	bl	8009d7e <HAL_NVIC_EnableIRQ>

}
 8006eca:	bf00      	nop
 8006ecc:	3708      	adds	r7, #8
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	40021000 	.word	0x40021000

08006ed8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006edc:	4b04      	ldr	r3, [pc, #16]	; (8006ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	0a1b      	lsrs	r3, r3, #8
 8006ee2:	f003 0307 	and.w	r3, r3, #7
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr
 8006ef0:	e000ed00 	.word	0xe000ed00

08006ef4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	4603      	mov	r3, r0
 8006efc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	db0b      	blt.n	8006f1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006f06:	79fb      	ldrb	r3, [r7, #7]
 8006f08:	f003 021f 	and.w	r2, r3, #31
 8006f0c:	4907      	ldr	r1, [pc, #28]	; (8006f2c <__NVIC_EnableIRQ+0x38>)
 8006f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f12:	095b      	lsrs	r3, r3, #5
 8006f14:	2001      	movs	r0, #1
 8006f16:	fa00 f202 	lsl.w	r2, r0, r2
 8006f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006f1e:	bf00      	nop
 8006f20:	370c      	adds	r7, #12
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop
 8006f2c:	e000e100 	.word	0xe000e100

08006f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	4603      	mov	r3, r0
 8006f38:	6039      	str	r1, [r7, #0]
 8006f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	db0a      	blt.n	8006f5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	b2da      	uxtb	r2, r3
 8006f48:	490c      	ldr	r1, [pc, #48]	; (8006f7c <__NVIC_SetPriority+0x4c>)
 8006f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f4e:	0112      	lsls	r2, r2, #4
 8006f50:	b2d2      	uxtb	r2, r2
 8006f52:	440b      	add	r3, r1
 8006f54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006f58:	e00a      	b.n	8006f70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	b2da      	uxtb	r2, r3
 8006f5e:	4908      	ldr	r1, [pc, #32]	; (8006f80 <__NVIC_SetPriority+0x50>)
 8006f60:	79fb      	ldrb	r3, [r7, #7]
 8006f62:	f003 030f 	and.w	r3, r3, #15
 8006f66:	3b04      	subs	r3, #4
 8006f68:	0112      	lsls	r2, r2, #4
 8006f6a:	b2d2      	uxtb	r2, r2
 8006f6c:	440b      	add	r3, r1
 8006f6e:	761a      	strb	r2, [r3, #24]
}
 8006f70:	bf00      	nop
 8006f72:	370c      	adds	r7, #12
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr
 8006f7c:	e000e100 	.word	0xe000e100
 8006f80:	e000ed00 	.word	0xe000ed00

08006f84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b089      	sub	sp, #36	; 0x24
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f003 0307 	and.w	r3, r3, #7
 8006f96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	f1c3 0307 	rsb	r3, r3, #7
 8006f9e:	2b04      	cmp	r3, #4
 8006fa0:	bf28      	it	cs
 8006fa2:	2304      	movcs	r3, #4
 8006fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	3304      	adds	r3, #4
 8006faa:	2b06      	cmp	r3, #6
 8006fac:	d902      	bls.n	8006fb4 <NVIC_EncodePriority+0x30>
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	3b03      	subs	r3, #3
 8006fb2:	e000      	b.n	8006fb6 <NVIC_EncodePriority+0x32>
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006fb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8006fc2:	43da      	mvns	r2, r3
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	401a      	ands	r2, r3
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006fcc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8006fd6:	43d9      	mvns	r1, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006fdc:	4313      	orrs	r3, r2
         );
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3724      	adds	r7, #36	; 0x24
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
	...

08006fec <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b085      	sub	sp, #20
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 8006ff6:	4a14      	ldr	r2, [pc, #80]	; (8007048 <LL_SYSCFG_SetEXTISource+0x5c>)
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	f003 0303 	and.w	r3, r3, #3
 8006ffe:	3302      	adds	r3, #2
 8007000:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	0c1b      	lsrs	r3, r3, #16
 8007008:	43db      	mvns	r3, r3
 800700a:	ea02 0103 	and.w	r1, r2, r3
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	0c1b      	lsrs	r3, r3, #16
 8007012:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	fa93 f3a3 	rbit	r3, r3
 800701a:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	fab3 f383 	clz	r3, r3
 8007022:	b2db      	uxtb	r3, r3
 8007024:	f003 031f 	and.w	r3, r3, #31
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	409a      	lsls	r2, r3
 800702c:	4806      	ldr	r0, [pc, #24]	; (8007048 <LL_SYSCFG_SetEXTISource+0x5c>)
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	f003 0303 	and.w	r3, r3, #3
 8007034:	430a      	orrs	r2, r1
 8007036:	3302      	adds	r3, #2
 8007038:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800703c:	bf00      	nop
 800703e:	3714      	adds	r7, #20
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr
 8007048:	40010000 	.word	0x40010000

0800704c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800704c:	b480      	push	{r7}
 800704e:	b089      	sub	sp, #36	; 0x24
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	fa93 f3a3 	rbit	r3, r3
 8007066:	613b      	str	r3, [r7, #16]
  return result;
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	fab3 f383 	clz	r3, r3
 800706e:	b2db      	uxtb	r3, r3
 8007070:	005b      	lsls	r3, r3, #1
 8007072:	2103      	movs	r1, #3
 8007074:	fa01 f303 	lsl.w	r3, r1, r3
 8007078:	43db      	mvns	r3, r3
 800707a:	401a      	ands	r2, r3
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007080:	69fb      	ldr	r3, [r7, #28]
 8007082:	fa93 f3a3 	rbit	r3, r3
 8007086:	61bb      	str	r3, [r7, #24]
  return result;
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	fab3 f383 	clz	r3, r3
 800708e:	b2db      	uxtb	r3, r3
 8007090:	005b      	lsls	r3, r3, #1
 8007092:	6879      	ldr	r1, [r7, #4]
 8007094:	fa01 f303 	lsl.w	r3, r1, r3
 8007098:	431a      	orrs	r2, r3
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	601a      	str	r2, [r3, #0]
}
 800709e:	bf00      	nop
 80070a0:	3724      	adds	r7, #36	; 0x24
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr

080070aa <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80070aa:	b480      	push	{r7}
 80070ac:	b089      	sub	sp, #36	; 0x24
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	60f8      	str	r0, [r7, #12]
 80070b2:	60b9      	str	r1, [r7, #8]
 80070b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	68da      	ldr	r2, [r3, #12]
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	fa93 f3a3 	rbit	r3, r3
 80070c4:	613b      	str	r3, [r7, #16]
  return result;
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	fab3 f383 	clz	r3, r3
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	005b      	lsls	r3, r3, #1
 80070d0:	2103      	movs	r1, #3
 80070d2:	fa01 f303 	lsl.w	r3, r1, r3
 80070d6:	43db      	mvns	r3, r3
 80070d8:	401a      	ands	r2, r3
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	fa93 f3a3 	rbit	r3, r3
 80070e4:	61bb      	str	r3, [r7, #24]
  return result;
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	fab3 f383 	clz	r3, r3
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	005b      	lsls	r3, r3, #1
 80070f0:	6879      	ldr	r1, [r7, #4]
 80070f2:	fa01 f303 	lsl.w	r3, r1, r3
 80070f6:	431a      	orrs	r2, r3
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	60da      	str	r2, [r3, #12]
}
 80070fc:	bf00      	nop
 80070fe:	3724      	adds	r7, #36	; 0x24
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	683a      	ldr	r2, [r7, #0]
 8007116:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007118:	bf00      	nop
 800711a:	370c      	adds	r7, #12
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr

08007124 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8007124:	b480      	push	{r7}
 8007126:	b085      	sub	sp, #20
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800712c:	4b08      	ldr	r3, [pc, #32]	; (8007150 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800712e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007130:	4907      	ldr	r1, [pc, #28]	; (8007150 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4313      	orrs	r3, r2
 8007136:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007138:	4b05      	ldr	r3, [pc, #20]	; (8007150 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800713a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4013      	ands	r3, r2
 8007140:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007142:	68fb      	ldr	r3, [r7, #12]
}
 8007144:	bf00      	nop
 8007146:	3714      	adds	r7, #20
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr
 8007150:	40021000 	.word	0x40021000

08007154 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b08a      	sub	sp, #40	; 0x28
 8007158:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800715a:	f107 031c 	add.w	r3, r7, #28
 800715e:	2200      	movs	r2, #0
 8007160:	601a      	str	r2, [r3, #0]
 8007162:	605a      	str	r2, [r3, #4]
 8007164:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007166:	1d3b      	adds	r3, r7, #4
 8007168:	2200      	movs	r2, #0
 800716a:	601a      	str	r2, [r3, #0]
 800716c:	605a      	str	r2, [r3, #4]
 800716e:	609a      	str	r2, [r3, #8]
 8007170:	60da      	str	r2, [r3, #12]
 8007172:	611a      	str	r2, [r3, #16]
 8007174:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8007176:	2004      	movs	r0, #4
 8007178:	f7ff ffd4 	bl	8007124 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 800717c:	2020      	movs	r0, #32
 800717e:	f7ff ffd1 	bl	8007124 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8007182:	2001      	movs	r0, #1
 8007184:	f7ff ffce 	bl	8007124 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8007188:	2002      	movs	r0, #2
 800718a:	f7ff ffcb 	bl	8007124 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 800718e:	2108      	movs	r1, #8
 8007190:	48d3      	ldr	r0, [pc, #844]	; (80074e0 <MX_GPIO_Init+0x38c>)
 8007192:	f7ff ffb9 	bl	8007108 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 8007196:	2108      	movs	r1, #8
 8007198:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800719c:	f7ff ffb4 	bl	8007108 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 80071a0:	2110      	movs	r1, #16
 80071a2:	48cf      	ldr	r0, [pc, #828]	; (80074e0 <MX_GPIO_Init+0x38c>)
 80071a4:	f7ff ffb0 	bl	8007108 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 80071a8:	2120      	movs	r1, #32
 80071aa:	48cd      	ldr	r0, [pc, #820]	; (80074e0 <MX_GPIO_Init+0x38c>)
 80071ac:	f7ff ffac 	bl	8007108 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 80071b0:	2101      	movs	r1, #1
 80071b2:	48cc      	ldr	r0, [pc, #816]	; (80074e4 <MX_GPIO_Init+0x390>)
 80071b4:	f7ff ffa8 	bl	8007108 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 80071b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80071bc:	48c8      	ldr	r0, [pc, #800]	; (80074e0 <MX_GPIO_Init+0x38c>)
 80071be:	f7ff ffa3 	bl	8007108 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 80071c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80071c6:	48c6      	ldr	r0, [pc, #792]	; (80074e0 <MX_GPIO_Init+0x38c>)
 80071c8:	f7ff ff9e 	bl	8007108 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 80071cc:	2140      	movs	r1, #64	; 0x40
 80071ce:	48c5      	ldr	r0, [pc, #788]	; (80074e4 <MX_GPIO_Init+0x390>)
 80071d0:	f7ff ff9a 	bl	8007108 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 80071d4:	2180      	movs	r1, #128	; 0x80
 80071d6:	48c3      	ldr	r0, [pc, #780]	; (80074e4 <MX_GPIO_Init+0x390>)
 80071d8:	f7ff ff96 	bl	8007108 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 80071dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80071e0:	48c0      	ldr	r0, [pc, #768]	; (80074e4 <MX_GPIO_Init+0x390>)
 80071e2:	f7ff ff91 	bl	8007108 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 80071e6:	49c0      	ldr	r1, [pc, #768]	; (80074e8 <MX_GPIO_Init+0x394>)
 80071e8:	2002      	movs	r0, #2
 80071ea:	f7ff feff 	bl	8006fec <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 80071ee:	49bf      	ldr	r1, [pc, #764]	; (80074ec <MX_GPIO_Init+0x398>)
 80071f0:	2002      	movs	r0, #2
 80071f2:	f7ff fefb 	bl	8006fec <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 80071f6:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 80071fa:	2005      	movs	r0, #5
 80071fc:	f7ff fef6 	bl	8006fec <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 8007200:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8007204:	2005      	movs	r0, #5
 8007206:	f7ff fef1 	bl	8006fec <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 800720a:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 800720e:	2002      	movs	r0, #2
 8007210:	f7ff feec 	bl	8006fec <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8007214:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007218:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 800721a:	2301      	movs	r3, #1
 800721c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007220:	2300      	movs	r3, #0
 8007222:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007226:	2302      	movs	r3, #2
 8007228:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800722c:	f107 031c 	add.w	r3, r7, #28
 8007230:	4618      	mov	r0, r3
 8007232:	f006 fe47 	bl	800dec4 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8007236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800723a:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 800723c:	2301      	movs	r3, #1
 800723e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007242:	2300      	movs	r3, #0
 8007244:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007248:	2302      	movs	r3, #2
 800724a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800724e:	f107 031c 	add.w	r3, r7, #28
 8007252:	4618      	mov	r0, r3
 8007254:	f006 fe36 	bl	800dec4 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8007258:	2301      	movs	r3, #1
 800725a:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 800725c:	2301      	movs	r3, #1
 800725e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007262:	2300      	movs	r3, #0
 8007264:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007268:	2302      	movs	r3, #2
 800726a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800726e:	f107 031c 	add.w	r3, r7, #28
 8007272:	4618      	mov	r0, r3
 8007274:	f006 fe26 	bl	800dec4 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8007278:	2302      	movs	r3, #2
 800727a:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 800727c:	2301      	movs	r3, #1
 800727e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007282:	2300      	movs	r3, #0
 8007284:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007288:	2302      	movs	r3, #2
 800728a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800728e:	f107 031c 	add.w	r3, r7, #28
 8007292:	4618      	mov	r0, r3
 8007294:	f006 fe16 	bl	800dec4 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8007298:	2304      	movs	r3, #4
 800729a:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 800729c:	2301      	movs	r3, #1
 800729e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80072a2:	2300      	movs	r3, #0
 80072a4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80072a8:	2302      	movs	r3, #2
 80072aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80072ae:	f107 031c 	add.w	r3, r7, #28
 80072b2:	4618      	mov	r0, r3
 80072b4:	f006 fe06 	bl	800dec4 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 80072b8:	2201      	movs	r2, #1
 80072ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80072be:	4888      	ldr	r0, [pc, #544]	; (80074e0 <MX_GPIO_Init+0x38c>)
 80072c0:	f7ff fef3 	bl	80070aa <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 80072c4:	2201      	movs	r2, #1
 80072c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80072ca:	4885      	ldr	r0, [pc, #532]	; (80074e0 <MX_GPIO_Init+0x38c>)
 80072cc:	f7ff feed 	bl	80070aa <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 80072d0:	2201      	movs	r2, #1
 80072d2:	2101      	movs	r1, #1
 80072d4:	4886      	ldr	r0, [pc, #536]	; (80074f0 <MX_GPIO_Init+0x39c>)
 80072d6:	f7ff fee8 	bl	80070aa <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 80072da:	2201      	movs	r2, #1
 80072dc:	2102      	movs	r1, #2
 80072de:	4884      	ldr	r0, [pc, #528]	; (80074f0 <MX_GPIO_Init+0x39c>)
 80072e0:	f7ff fee3 	bl	80070aa <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 80072e4:	2201      	movs	r2, #1
 80072e6:	2104      	movs	r1, #4
 80072e8:	487d      	ldr	r0, [pc, #500]	; (80074e0 <MX_GPIO_Init+0x38c>)
 80072ea:	f7ff fede 	bl	80070aa <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 80072ee:	2200      	movs	r2, #0
 80072f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80072f4:	487a      	ldr	r0, [pc, #488]	; (80074e0 <MX_GPIO_Init+0x38c>)
 80072f6:	f7ff fea9 	bl	800704c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 80072fa:	2200      	movs	r2, #0
 80072fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007300:	4877      	ldr	r0, [pc, #476]	; (80074e0 <MX_GPIO_Init+0x38c>)
 8007302:	f7ff fea3 	bl	800704c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 8007306:	2200      	movs	r2, #0
 8007308:	2101      	movs	r1, #1
 800730a:	4879      	ldr	r0, [pc, #484]	; (80074f0 <MX_GPIO_Init+0x39c>)
 800730c:	f7ff fe9e 	bl	800704c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8007310:	2200      	movs	r2, #0
 8007312:	2102      	movs	r1, #2
 8007314:	4876      	ldr	r0, [pc, #472]	; (80074f0 <MX_GPIO_Init+0x39c>)
 8007316:	f7ff fe99 	bl	800704c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 800731a:	2200      	movs	r2, #0
 800731c:	2104      	movs	r1, #4
 800731e:	4870      	ldr	r0, [pc, #448]	; (80074e0 <MX_GPIO_Init+0x38c>)
 8007320:	f7ff fe94 	bl	800704c <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 8007324:	2308      	movs	r3, #8
 8007326:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007328:	2301      	movs	r3, #1
 800732a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800732c:	2300      	movs	r3, #0
 800732e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007330:	2300      	movs	r3, #0
 8007332:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8007334:	2302      	movs	r3, #2
 8007336:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 8007338:	1d3b      	adds	r3, r7, #4
 800733a:	4619      	mov	r1, r3
 800733c:	4868      	ldr	r0, [pc, #416]	; (80074e0 <MX_GPIO_Init+0x38c>)
 800733e:	f006 ffb4 	bl	800e2aa <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 8007342:	2308      	movs	r3, #8
 8007344:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007346:	2301      	movs	r3, #1
 8007348:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800734a:	2300      	movs	r3, #0
 800734c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800734e:	2300      	movs	r3, #0
 8007350:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007352:	2300      	movs	r3, #0
 8007354:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 8007356:	1d3b      	adds	r3, r7, #4
 8007358:	4619      	mov	r1, r3
 800735a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800735e:	f006 ffa4 	bl	800e2aa <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 8007362:	2310      	movs	r3, #16
 8007364:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007366:	2301      	movs	r3, #1
 8007368:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800736a:	2300      	movs	r3, #0
 800736c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800736e:	2300      	movs	r3, #0
 8007370:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007372:	2300      	movs	r3, #0
 8007374:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 8007376:	1d3b      	adds	r3, r7, #4
 8007378:	4619      	mov	r1, r3
 800737a:	4859      	ldr	r0, [pc, #356]	; (80074e0 <MX_GPIO_Init+0x38c>)
 800737c:	f006 ff95 	bl	800e2aa <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 8007380:	2320      	movs	r3, #32
 8007382:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007384:	2301      	movs	r3, #1
 8007386:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007388:	2300      	movs	r3, #0
 800738a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800738c:	2300      	movs	r3, #0
 800738e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007390:	2300      	movs	r3, #0
 8007392:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 8007394:	1d3b      	adds	r3, r7, #4
 8007396:	4619      	mov	r1, r3
 8007398:	4851      	ldr	r0, [pc, #324]	; (80074e0 <MX_GPIO_Init+0x38c>)
 800739a:	f006 ff86 	bl	800e2aa <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 800739e:	2301      	movs	r3, #1
 80073a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80073a2:	2301      	movs	r3, #1
 80073a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80073a6:	2300      	movs	r3, #0
 80073a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80073aa:	2300      	movs	r3, #0
 80073ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80073ae:	2300      	movs	r3, #0
 80073b0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 80073b2:	1d3b      	adds	r3, r7, #4
 80073b4:	4619      	mov	r1, r3
 80073b6:	484b      	ldr	r0, [pc, #300]	; (80074e4 <MX_GPIO_Init+0x390>)
 80073b8:	f006 ff77 	bl	800e2aa <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 80073bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80073c2:	2301      	movs	r3, #1
 80073c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80073c6:	2300      	movs	r3, #0
 80073c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80073ca:	2300      	movs	r3, #0
 80073cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80073ce:	2300      	movs	r3, #0
 80073d0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 80073d2:	1d3b      	adds	r3, r7, #4
 80073d4:	4619      	mov	r1, r3
 80073d6:	4842      	ldr	r0, [pc, #264]	; (80074e0 <MX_GPIO_Init+0x38c>)
 80073d8:	f006 ff67 	bl	800e2aa <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 80073dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80073e2:	2301      	movs	r3, #1
 80073e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80073e6:	2300      	movs	r3, #0
 80073e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80073ea:	2300      	movs	r3, #0
 80073ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80073ee:	2300      	movs	r3, #0
 80073f0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 80073f2:	1d3b      	adds	r3, r7, #4
 80073f4:	4619      	mov	r1, r3
 80073f6:	483a      	ldr	r0, [pc, #232]	; (80074e0 <MX_GPIO_Init+0x38c>)
 80073f8:	f006 ff57 	bl	800e2aa <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 80073fc:	2340      	movs	r3, #64	; 0x40
 80073fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007400:	2301      	movs	r3, #1
 8007402:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007404:	2303      	movs	r3, #3
 8007406:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007408:	2300      	movs	r3, #0
 800740a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800740c:	2300      	movs	r3, #0
 800740e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8007410:	1d3b      	adds	r3, r7, #4
 8007412:	4619      	mov	r1, r3
 8007414:	4833      	ldr	r0, [pc, #204]	; (80074e4 <MX_GPIO_Init+0x390>)
 8007416:	f006 ff48 	bl	800e2aa <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 800741a:	2380      	movs	r3, #128	; 0x80
 800741c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800741e:	2301      	movs	r3, #1
 8007420:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007422:	2303      	movs	r3, #3
 8007424:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007426:	2300      	movs	r3, #0
 8007428:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800742a:	2300      	movs	r3, #0
 800742c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800742e:	1d3b      	adds	r3, r7, #4
 8007430:	4619      	mov	r1, r3
 8007432:	482c      	ldr	r0, [pc, #176]	; (80074e4 <MX_GPIO_Init+0x390>)
 8007434:	f006 ff39 	bl	800e2aa <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 8007438:	f44f 7300 	mov.w	r3, #512	; 0x200
 800743c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800743e:	2301      	movs	r3, #1
 8007440:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007442:	2303      	movs	r3, #3
 8007444:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007446:	2300      	movs	r3, #0
 8007448:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800744a:	2300      	movs	r3, #0
 800744c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 800744e:	1d3b      	adds	r3, r7, #4
 8007450:	4619      	mov	r1, r3
 8007452:	4824      	ldr	r0, [pc, #144]	; (80074e4 <MX_GPIO_Init+0x390>)
 8007454:	f006 ff29 	bl	800e2aa <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007458:	f7ff fd3e 	bl	8006ed8 <__NVIC_GetPriorityGrouping>
 800745c:	4603      	mov	r3, r0
 800745e:	2200      	movs	r2, #0
 8007460:	2100      	movs	r1, #0
 8007462:	4618      	mov	r0, r3
 8007464:	f7ff fd8e 	bl	8006f84 <NVIC_EncodePriority>
 8007468:	4603      	mov	r3, r0
 800746a:	4619      	mov	r1, r3
 800746c:	2006      	movs	r0, #6
 800746e:	f7ff fd5f 	bl	8006f30 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8007472:	2006      	movs	r0, #6
 8007474:	f7ff fd3e 	bl	8006ef4 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007478:	f7ff fd2e 	bl	8006ed8 <__NVIC_GetPriorityGrouping>
 800747c:	4603      	mov	r3, r0
 800747e:	2200      	movs	r2, #0
 8007480:	2100      	movs	r1, #0
 8007482:	4618      	mov	r0, r3
 8007484:	f7ff fd7e 	bl	8006f84 <NVIC_EncodePriority>
 8007488:	4603      	mov	r3, r0
 800748a:	4619      	mov	r1, r3
 800748c:	2007      	movs	r0, #7
 800748e:	f7ff fd4f 	bl	8006f30 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 8007492:	2007      	movs	r0, #7
 8007494:	f7ff fd2e 	bl	8006ef4 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007498:	f7ff fd1e 	bl	8006ed8 <__NVIC_GetPriorityGrouping>
 800749c:	4603      	mov	r3, r0
 800749e:	2200      	movs	r2, #0
 80074a0:	2100      	movs	r1, #0
 80074a2:	4618      	mov	r0, r3
 80074a4:	f7ff fd6e 	bl	8006f84 <NVIC_EncodePriority>
 80074a8:	4603      	mov	r3, r0
 80074aa:	4619      	mov	r1, r3
 80074ac:	2008      	movs	r0, #8
 80074ae:	f7ff fd3f 	bl	8006f30 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 80074b2:	2008      	movs	r0, #8
 80074b4:	f7ff fd1e 	bl	8006ef4 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80074b8:	f7ff fd0e 	bl	8006ed8 <__NVIC_GetPriorityGrouping>
 80074bc:	4603      	mov	r3, r0
 80074be:	2200      	movs	r2, #0
 80074c0:	2100      	movs	r1, #0
 80074c2:	4618      	mov	r0, r3
 80074c4:	f7ff fd5e 	bl	8006f84 <NVIC_EncodePriority>
 80074c8:	4603      	mov	r3, r0
 80074ca:	4619      	mov	r1, r3
 80074cc:	2028      	movs	r0, #40	; 0x28
 80074ce:	f7ff fd2f 	bl	8006f30 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 80074d2:	2028      	movs	r0, #40	; 0x28
 80074d4:	f7ff fd0e 	bl	8006ef4 <__NVIC_EnableIRQ>

}
 80074d8:	bf00      	nop
 80074da:	3728      	adds	r7, #40	; 0x28
 80074dc:	46bd      	mov	sp, r7
 80074de:	e009      	b.n	80074f4 <MX_GPIO_Init+0x3a0>
 80074e0:	48000800 	.word	0x48000800
 80074e4:	48000400 	.word	0x48000400
 80074e8:	0f000003 	.word	0x0f000003
 80074ec:	f0000003 	.word	0xf0000003
 80074f0:	48001400 	.word	0x48001400
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop

080074f8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8007500:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007504:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8007508:	f003 0301 	and.w	r3, r3, #1
 800750c:	2b00      	cmp	r3, #0
 800750e:	d013      	beq.n	8007538 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8007510:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007514:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8007518:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800751c:	2b00      	cmp	r3, #0
 800751e:	d00b      	beq.n	8007538 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8007520:	e000      	b.n	8007524 <ITM_SendChar+0x2c>
    {
      __NOP();
 8007522:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8007524:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d0f9      	beq.n	8007522 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800752e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	b2d2      	uxtb	r2, r2
 8007536:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8007538:	687b      	ldr	r3, [r7, #4]
}
 800753a:	4618      	mov	r0, r3
 800753c:	370c      	adds	r7, #12
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr

08007546 <HAL_DAC_ConvCpltCallbackCh1>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007546:	b480      	push	{r7}
 8007548:	b083      	sub	sp, #12
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]

}
 800754e:	bf00      	nop
 8007550:	370c      	adds	r7, #12
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr

0800755a <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// redirect printf to SWV
int _write(int file, char *ptr, int len)
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b086      	sub	sp, #24
 800755e:	af00      	add	r7, sp, #0
 8007560:	60f8      	str	r0, [r7, #12]
 8007562:	60b9      	str	r1, [r7, #8]
 8007564:	607a      	str	r2, [r7, #4]
  int i=0;
 8007566:	2300      	movs	r3, #0
 8007568:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 800756a:	2300      	movs	r3, #0
 800756c:	617b      	str	r3, [r7, #20]
 800756e:	e009      	b.n	8007584 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	1c5a      	adds	r2, r3, #1
 8007574:	60ba      	str	r2, [r7, #8]
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	4618      	mov	r0, r3
 800757a:	f7ff ffbd 	bl	80074f8 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	3301      	adds	r3, #1
 8007582:	617b      	str	r3, [r7, #20]
 8007584:	697a      	ldr	r2, [r7, #20]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	429a      	cmp	r2, r3
 800758a:	dbf1      	blt.n	8007570 <_write+0x16>
  return len;
 800758c:	687b      	ldr	r3, [r7, #4]
}
 800758e:	4618      	mov	r0, r3
 8007590:	3718      	adds	r7, #24
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
	...

08007598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800759c:	f000 ff05 	bl	80083aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80075a0:	f000 f84c 	bl	800763c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80075a4:	f7ff fdd6 	bl	8007154 <MX_GPIO_Init>
  MX_DMA_Init();
 80075a8:	f7ff fc5c 	bl	8006e64 <MX_DMA_Init>
  MX_DAC1_Init();
 80075ac:	f7ff fb0c 	bl	8006bc8 <MX_DAC1_Init>
  MX_ADC1_Init();
 80075b0:	f7ff f9cc 	bl	800694c <MX_ADC1_Init>
  MX_COMP1_Init();
 80075b4:	f7ff faae 	bl	8006b14 <MX_COMP1_Init>
  MX_SPI3_Init();
 80075b8:	f000 f8ec 	bl	8007794 <MX_SPI3_Init>
  MX_RNG_Init();
 80075bc:	f000 f8dc 	bl	8007778 <MX_RNG_Init>
  MX_TIM1_Init();
 80075c0:	f000 fb3c 	bl	8007c3c <MX_TIM1_Init>
  MX_TIM8_Init();
 80075c4:	f000 fc92 	bl	8007eec <MX_TIM8_Init>
  MX_TIM16_Init();
 80075c8:	f000 fd4a 	bl	8008060 <MX_TIM16_Init>
  MX_TIM15_Init();
 80075cc:	f000 fcf6 	bl	8007fbc <MX_TIM15_Init>
  MX_TIM5_Init();
 80075d0:	f000 fc3e 	bl	8007e50 <MX_TIM5_Init>
  MX_TIM3_Init();
 80075d4:	f000 fbee 	bl	8007db4 <MX_TIM3_Init>
  MX_DAC2_Init();
 80075d8:	f7ff fb40 	bl	8006c5c <MX_DAC2_Init>
  MX_TIM17_Init();
 80075dc:	f000 fd68 	bl	80080b0 <MX_TIM17_Init>
  MX_TIM2_Init();
 80075e0:	f000 fb9c 	bl	8007d1c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  SM_Init();
 80075e4:	f7fe fb8c 	bl	8005d00 <SM_Init>

HAL_TIM_Base_Start_IT(&htim17);
 80075e8:	4810      	ldr	r0, [pc, #64]	; (800762c <main+0x94>)
 80075ea:	f004 fe85 	bl	800c2f8 <HAL_TIM_Base_Start_IT>


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 80075ee:	2200      	movs	r2, #0
 80075f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80075f4:	480e      	ldr	r0, [pc, #56]	; (8007630 <main+0x98>)
 80075f6:	f003 fd2f 	bl	800b058 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 80075fa:	2200      	movs	r2, #0
 80075fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007600:	480b      	ldr	r0, [pc, #44]	; (8007630 <main+0x98>)
 8007602:	f003 fd29 	bl	800b058 <HAL_GPIO_WritePin>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 8007606:	480b      	ldr	r0, [pc, #44]	; (8007634 <main+0x9c>)
 8007608:	f004 fe20 	bl	800c24c <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 800760c:	4b0a      	ldr	r3, [pc, #40]	; (8007638 <main+0xa0>)
 800760e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007612:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 8007614:	4b08      	ldr	r3, [pc, #32]	; (8007638 <main+0xa0>)
 8007616:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800761a:	62da      	str	r2, [r3, #44]	; 0x2c



  // TFT lib enable
  DM_Init();
 800761c:	f7f9 fb82 	bl	8000d24 <DM_Init>
  DM_PostInit();
 8007620:	f7f9 fb8e 	bl	8000d40 <DM_PostInit>

  // Intialise interrupt manager
  IM_Init();
 8007624:	f7fd fbc4 	bl	8004db0 <IM_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8007628:	e7fe      	b.n	8007628 <main+0x90>
 800762a:	bf00      	nop
 800762c:	200027ac 	.word	0x200027ac
 8007630:	48000800 	.word	0x48000800
 8007634:	20002844 	.word	0x20002844
 8007638:	40001000 	.word	0x40001000

0800763c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b0a8      	sub	sp, #160	; 0xa0
 8007640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007642:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007646:	2238      	movs	r2, #56	; 0x38
 8007648:	2100      	movs	r1, #0
 800764a:	4618      	mov	r0, r3
 800764c:	f007 ff1c 	bl	800f488 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007650:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007654:	2200      	movs	r2, #0
 8007656:	601a      	str	r2, [r3, #0]
 8007658:	605a      	str	r2, [r3, #4]
 800765a:	609a      	str	r2, [r3, #8]
 800765c:	60da      	str	r2, [r3, #12]
 800765e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007660:	463b      	mov	r3, r7
 8007662:	2254      	movs	r2, #84	; 0x54
 8007664:	2100      	movs	r1, #0
 8007666:	4618      	mov	r0, r3
 8007668:	f007 ff0e 	bl	800f488 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800766c:	2000      	movs	r0, #0
 800766e:	f003 fd0b 	bl	800b088 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8007672:	2322      	movs	r3, #34	; 0x22
 8007674:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007676:	f44f 7380 	mov.w	r3, #256	; 0x100
 800767a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800767c:	2340      	movs	r3, #64	; 0x40
 800767e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8007680:	2301      	movs	r3, #1
 8007682:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007686:	2302      	movs	r3, #2
 8007688:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800768c:	2302      	movs	r3, #2
 800768e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8007692:	2302      	movs	r3, #2
 8007694:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8007698:	232a      	movs	r3, #42	; 0x2a
 800769a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV30;
 800769e:	231e      	movs	r3, #30
 80076a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80076a4:	2304      	movs	r3, #4
 80076a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80076aa:	2302      	movs	r3, #2
 80076ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80076b0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80076b4:	4618      	mov	r0, r3
 80076b6:	f003 fd8b 	bl	800b1d0 <HAL_RCC_OscConfig>
 80076ba:	4603      	mov	r3, r0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d001      	beq.n	80076c4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80076c0:	f000 f82a 	bl	8007718 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80076c4:	230f      	movs	r3, #15
 80076c6:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80076c8:	2303      	movs	r3, #3
 80076ca:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80076cc:	2300      	movs	r3, #0
 80076ce:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80076d0:	2300      	movs	r3, #0
 80076d2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80076d4:	2300      	movs	r3, #0
 80076d6:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 80076d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80076dc:	2108      	movs	r1, #8
 80076de:	4618      	mov	r0, r3
 80076e0:	f004 f88e 	bl	800b800 <HAL_RCC_ClockConfig>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d001      	beq.n	80076ee <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80076ea:	f000 f815 	bl	8007718 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 80076ee:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80076f2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80076f4:	2300      	movs	r3, #0
 80076f6:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80076f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80076fc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80076fe:	463b      	mov	r3, r7
 8007700:	4618      	mov	r0, r3
 8007702:	f004 fa6d 	bl	800bbe0 <HAL_RCCEx_PeriphCLKConfig>
 8007706:	4603      	mov	r3, r0
 8007708:	2b00      	cmp	r3, #0
 800770a:	d001      	beq.n	8007710 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800770c:	f000 f804 	bl	8007718 <Error_Handler>
  }
}
 8007710:	bf00      	nop
 8007712:	37a0      	adds	r7, #160	; 0xa0
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007718:	b480      	push	{r7}
 800771a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800771c:	bf00      	nop
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr

08007726 <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 8007726:	b480      	push	{r7}
 8007728:	b083      	sub	sp, #12
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f043 0204 	orr.w	r2, r3, #4
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	601a      	str	r2, [r3, #0]
}
 800773a:	bf00      	nop
 800773c:	370c      	adds	r7, #12
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr
	...

08007748 <LL_AHB2_GRP1_EnableClock>:
{
 8007748:	b480      	push	{r7}
 800774a:	b085      	sub	sp, #20
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007750:	4b08      	ldr	r3, [pc, #32]	; (8007774 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007752:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007754:	4907      	ldr	r1, [pc, #28]	; (8007774 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4313      	orrs	r3, r2
 800775a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800775c:	4b05      	ldr	r3, [pc, #20]	; (8007774 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800775e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4013      	ands	r3, r2
 8007764:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007766:	68fb      	ldr	r3, [r7, #12]
}
 8007768:	bf00      	nop
 800776a:	3714      	adds	r7, #20
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr
 8007774:	40021000 	.word	0x40021000

08007778 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 800777c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8007780:	f7ff ffe2 	bl	8007748 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 8007784:	4802      	ldr	r0, [pc, #8]	; (8007790 <MX_RNG_Init+0x18>)
 8007786:	f7ff ffce 	bl	8007726 <LL_RNG_Enable>

}
 800778a:	bf00      	nop
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	50060800 	.word	0x50060800

08007794 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8007798:	4b1b      	ldr	r3, [pc, #108]	; (8007808 <MX_SPI3_Init+0x74>)
 800779a:	4a1c      	ldr	r2, [pc, #112]	; (800780c <MX_SPI3_Init+0x78>)
 800779c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800779e:	4b1a      	ldr	r3, [pc, #104]	; (8007808 <MX_SPI3_Init+0x74>)
 80077a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80077a4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80077a6:	4b18      	ldr	r3, [pc, #96]	; (8007808 <MX_SPI3_Init+0x74>)
 80077a8:	2200      	movs	r2, #0
 80077aa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80077ac:	4b16      	ldr	r3, [pc, #88]	; (8007808 <MX_SPI3_Init+0x74>)
 80077ae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80077b2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80077b4:	4b14      	ldr	r3, [pc, #80]	; (8007808 <MX_SPI3_Init+0x74>)
 80077b6:	2200      	movs	r2, #0
 80077b8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80077ba:	4b13      	ldr	r3, [pc, #76]	; (8007808 <MX_SPI3_Init+0x74>)
 80077bc:	2200      	movs	r2, #0
 80077be:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80077c0:	4b11      	ldr	r3, [pc, #68]	; (8007808 <MX_SPI3_Init+0x74>)
 80077c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077c6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80077c8:	4b0f      	ldr	r3, [pc, #60]	; (8007808 <MX_SPI3_Init+0x74>)
 80077ca:	2210      	movs	r2, #16
 80077cc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80077ce:	4b0e      	ldr	r3, [pc, #56]	; (8007808 <MX_SPI3_Init+0x74>)
 80077d0:	2200      	movs	r2, #0
 80077d2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80077d4:	4b0c      	ldr	r3, [pc, #48]	; (8007808 <MX_SPI3_Init+0x74>)
 80077d6:	2200      	movs	r2, #0
 80077d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077da:	4b0b      	ldr	r3, [pc, #44]	; (8007808 <MX_SPI3_Init+0x74>)
 80077dc:	2200      	movs	r2, #0
 80077de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80077e0:	4b09      	ldr	r3, [pc, #36]	; (8007808 <MX_SPI3_Init+0x74>)
 80077e2:	2207      	movs	r2, #7
 80077e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80077e6:	4b08      	ldr	r3, [pc, #32]	; (8007808 <MX_SPI3_Init+0x74>)
 80077e8:	2200      	movs	r2, #0
 80077ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80077ec:	4b06      	ldr	r3, [pc, #24]	; (8007808 <MX_SPI3_Init+0x74>)
 80077ee:	2208      	movs	r2, #8
 80077f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80077f2:	4805      	ldr	r0, [pc, #20]	; (8007808 <MX_SPI3_Init+0x74>)
 80077f4:	f004 fc40 	bl	800c078 <HAL_SPI_Init>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d001      	beq.n	8007802 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80077fe:	f7ff ff8b 	bl	8007718 <Error_Handler>
  }

}
 8007802:	bf00      	nop
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	200026b0 	.word	0x200026b0
 800780c:	40003c00 	.word	0x40003c00

08007810 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b08a      	sub	sp, #40	; 0x28
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007818:	f107 0314 	add.w	r3, r7, #20
 800781c:	2200      	movs	r2, #0
 800781e:	601a      	str	r2, [r3, #0]
 8007820:	605a      	str	r2, [r3, #4]
 8007822:	609a      	str	r2, [r3, #8]
 8007824:	60da      	str	r2, [r3, #12]
 8007826:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a17      	ldr	r2, [pc, #92]	; (800788c <HAL_SPI_MspInit+0x7c>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d128      	bne.n	8007884 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007832:	4b17      	ldr	r3, [pc, #92]	; (8007890 <HAL_SPI_MspInit+0x80>)
 8007834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007836:	4a16      	ldr	r2, [pc, #88]	; (8007890 <HAL_SPI_MspInit+0x80>)
 8007838:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800783c:	6593      	str	r3, [r2, #88]	; 0x58
 800783e:	4b14      	ldr	r3, [pc, #80]	; (8007890 <HAL_SPI_MspInit+0x80>)
 8007840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007842:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007846:	613b      	str	r3, [r7, #16]
 8007848:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800784a:	4b11      	ldr	r3, [pc, #68]	; (8007890 <HAL_SPI_MspInit+0x80>)
 800784c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800784e:	4a10      	ldr	r2, [pc, #64]	; (8007890 <HAL_SPI_MspInit+0x80>)
 8007850:	f043 0304 	orr.w	r3, r3, #4
 8007854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007856:	4b0e      	ldr	r3, [pc, #56]	; (8007890 <HAL_SPI_MspInit+0x80>)
 8007858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800785a:	f003 0304 	and.w	r3, r3, #4
 800785e:	60fb      	str	r3, [r7, #12]
 8007860:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8007862:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007866:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007868:	2302      	movs	r3, #2
 800786a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800786c:	2300      	movs	r3, #0
 800786e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007870:	2300      	movs	r3, #0
 8007872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007874:	2306      	movs	r3, #6
 8007876:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007878:	f107 0314 	add.w	r3, r7, #20
 800787c:	4619      	mov	r1, r3
 800787e:	4805      	ldr	r0, [pc, #20]	; (8007894 <HAL_SPI_MspInit+0x84>)
 8007880:	f003 f986 	bl	800ab90 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8007884:	bf00      	nop
 8007886:	3728      	adds	r7, #40	; 0x28
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}
 800788c:	40003c00 	.word	0x40003c00
 8007890:	40021000 	.word	0x40021000
 8007894:	48000800 	.word	0x48000800

08007898 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8007898:	b480      	push	{r7}
 800789a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800789c:	4b05      	ldr	r3, [pc, #20]	; (80078b4 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	4a04      	ldr	r2, [pc, #16]	; (80078b4 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80078a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80078a6:	6093      	str	r3, [r2, #8]
}
 80078a8:	bf00      	nop
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr
 80078b2:	bf00      	nop
 80078b4:	40007000 	.word	0x40007000

080078b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80078be:	4b0f      	ldr	r3, [pc, #60]	; (80078fc <HAL_MspInit+0x44>)
 80078c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078c2:	4a0e      	ldr	r2, [pc, #56]	; (80078fc <HAL_MspInit+0x44>)
 80078c4:	f043 0301 	orr.w	r3, r3, #1
 80078c8:	6613      	str	r3, [r2, #96]	; 0x60
 80078ca:	4b0c      	ldr	r3, [pc, #48]	; (80078fc <HAL_MspInit+0x44>)
 80078cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078ce:	f003 0301 	and.w	r3, r3, #1
 80078d2:	607b      	str	r3, [r7, #4]
 80078d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80078d6:	4b09      	ldr	r3, [pc, #36]	; (80078fc <HAL_MspInit+0x44>)
 80078d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078da:	4a08      	ldr	r2, [pc, #32]	; (80078fc <HAL_MspInit+0x44>)
 80078dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078e0:	6593      	str	r3, [r2, #88]	; 0x58
 80078e2:	4b06      	ldr	r3, [pc, #24]	; (80078fc <HAL_MspInit+0x44>)
 80078e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078ea:	603b      	str	r3, [r7, #0]
 80078ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 80078ee:	f7ff ffd3 	bl	8007898 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80078f2:	bf00      	nop
 80078f4:	3708      	adds	r7, #8
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	40021000 	.word	0x40021000

08007900 <LL_EXTI_IsActiveFlag_0_31>:
{
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8007908:	4b07      	ldr	r3, [pc, #28]	; (8007928 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800790a:	695a      	ldr	r2, [r3, #20]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	4013      	ands	r3, r2
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	429a      	cmp	r2, r3
 8007914:	d101      	bne.n	800791a <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8007916:	2301      	movs	r3, #1
 8007918:	e000      	b.n	800791c <LL_EXTI_IsActiveFlag_0_31+0x1c>
 800791a:	2300      	movs	r3, #0
}
 800791c:	4618      	mov	r0, r3
 800791e:	370c      	adds	r7, #12
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr
 8007928:	40010400 	.word	0x40010400

0800792c <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8007934:	4a04      	ldr	r2, [pc, #16]	; (8007948 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6153      	str	r3, [r2, #20]
}
 800793a:	bf00      	nop
 800793c:	370c      	adds	r7, #12
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	40010400 	.word	0x40010400

0800794c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800794c:	b480      	push	{r7}
 800794e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007950:	bf00      	nop
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr
	...

0800795c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	DM_SetErrorDebugMsg("HARD FAULT");
 8007960:	4801      	ldr	r0, [pc, #4]	; (8007968 <HardFault_Handler+0xc>)
 8007962:	f7f9 fde1 	bl	8001528 <DM_SetErrorDebugMsg>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007966:	e7fe      	b.n	8007966 <HardFault_Handler+0xa>
 8007968:	080143dc 	.word	0x080143dc

0800796c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	DM_SetErrorDebugMsg("MEMMANAGE FAULT");
 8007970:	4801      	ldr	r0, [pc, #4]	; (8007978 <MemManage_Handler+0xc>)
 8007972:	f7f9 fdd9 	bl	8001528 <DM_SetErrorDebugMsg>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007976:	e7fe      	b.n	8007976 <MemManage_Handler+0xa>
 8007978:	080143e8 	.word	0x080143e8

0800797c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	DM_SetErrorDebugMsg("BUS FAULT");
 8007980:	4801      	ldr	r0, [pc, #4]	; (8007988 <BusFault_Handler+0xc>)
 8007982:	f7f9 fdd1 	bl	8001528 <DM_SetErrorDebugMsg>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007986:	e7fe      	b.n	8007986 <BusFault_Handler+0xa>
 8007988:	080143f8 	.word	0x080143f8

0800798c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	DM_SetErrorDebugMsg("USAGE FAULT");
 8007990:	4801      	ldr	r0, [pc, #4]	; (8007998 <UsageFault_Handler+0xc>)
 8007992:	f7f9 fdc9 	bl	8001528 <DM_SetErrorDebugMsg>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007996:	e7fe      	b.n	8007996 <UsageFault_Handler+0xa>
 8007998:	08014404 	.word	0x08014404

0800799c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800799c:	b480      	push	{r7}
 800799e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80079a0:	bf00      	nop
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr

080079aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80079aa:	b480      	push	{r7}
 80079ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80079ae:	bf00      	nop
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80079b8:	b480      	push	{r7}
 80079ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80079bc:	bf00      	nop
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr

080079c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80079ca:	f000 fd41 	bl	8008450 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80079ce:	bf00      	nop
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80079d2:	b580      	push	{r7, lr}
 80079d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	IM_BTN3_EXTI0_Handler();
 80079d6:	f7fd faa9 	bl	8004f2c <IM_BTN3_EXTI0_Handler>

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 80079da:	2001      	movs	r0, #1
 80079dc:	f7ff ff90 	bl	8007900 <LL_EXTI_IsActiveFlag_0_31>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d002      	beq.n	80079ec <EXTI0_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 80079e6:	2001      	movs	r0, #1
 80079e8:	f7ff ffa0 	bl	800792c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80079ec:	bf00      	nop
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	IM_BTN4_EXTI1_Handler();
 80079f4:	f7fd fac0 	bl	8004f78 <IM_BTN4_EXTI1_Handler>

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 80079f8:	2002      	movs	r0, #2
 80079fa:	f7ff ff81 	bl	8007900 <LL_EXTI_IsActiveFlag_0_31>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d002      	beq.n	8007a0a <EXTI1_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 8007a04:	2002      	movs	r0, #2
 8007a06:	f7ff ff91 	bl	800792c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8007a0a:	bf00      	nop
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

	IM_ENC_EXTI2_Handler();
 8007a12:	f7fd fad7 	bl	8004fc4 <IM_ENC_EXTI2_Handler>

  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8007a16:	2004      	movs	r0, #4
 8007a18:	f7ff ff72 	bl	8007900 <LL_EXTI_IsActiveFlag_0_31>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d002      	beq.n	8007a28 <EXTI2_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 8007a22:	2004      	movs	r0, #4
 8007a24:	f7ff ff82 	bl	800792c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8007a28:	bf00      	nop
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007a30:	4802      	ldr	r0, [pc, #8]	; (8007a3c <DMA1_Channel1_IRQHandler+0x10>)
 8007a32:	f002 ff5d 	bl	800a8f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007a36:	bf00      	nop
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	200025a4 	.word	0x200025a4

08007a40 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8007a44:	4802      	ldr	r0, [pc, #8]	; (8007a50 <DMA1_Channel2_IRQHandler+0x10>)
 8007a46:	f002 ff53 	bl	800a8f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8007a4a:	bf00      	nop
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	20001eb0 	.word	0x20001eb0

08007a54 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8007a58:	4802      	ldr	r0, [pc, #8]	; (8007a64 <DMA1_Channel3_IRQHandler+0x10>)
 8007a5a:	f002 ff49 	bl	800a8f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8007a5e:	bf00      	nop
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop
 8007a64:	20002650 	.word	0x20002650

08007a68 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

	DM_UpdateDisplay();
 8007a6c:	f7f9 f982 	bl	8000d74 <DM_UpdateDisplay>

	IM_ENC_DIRF_Handler();
 8007a70:	f7fd face 	bl	8005010 <IM_ENC_DIRF_Handler>

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007a74:	4803      	ldr	r0, [pc, #12]	; (8007a84 <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 8007a76:	f004 ff21 	bl	800c8bc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8007a7a:	4803      	ldr	r0, [pc, #12]	; (8007a88 <TIM1_BRK_TIM15_IRQHandler+0x20>)
 8007a7c:	f004 ff1e 	bl	800c8bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8007a80:	bf00      	nop
 8007a82:	bd80      	pop	{r7, pc}
 8007a84:	20002844 	.word	0x20002844
 8007a88:	20002760 	.word	0x20002760

08007a8c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	EM_ProcessEvent();
 8007a90:	f7fc fa38 	bl	8003f04 <EM_ProcessEvent>
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007a94:	4803      	ldr	r0, [pc, #12]	; (8007aa4 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8007a96:	f004 ff11 	bl	800c8bc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8007a9a:	4803      	ldr	r0, [pc, #12]	; (8007aa8 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 8007a9c:	f004 ff0e 	bl	800c8bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8007aa0:	bf00      	nop
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	20002844 	.word	0x20002844
 8007aa8:	200027ac 	.word	0x200027ac

08007aac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007ab0:	4802      	ldr	r0, [pc, #8]	; (8007abc <TIM3_IRQHandler+0x10>)
 8007ab2:	f004 ff03 	bl	800c8bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8007ab6:	bf00      	nop
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	20001f1c 	.word	0x20001f1c

08007ac0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	IM_BTN1_EXTI14_Handler();
 8007ac4:	f7fd f9e2 	bl	8004e8c <IM_BTN1_EXTI14_Handler>
	IM_BTN2_EXTI15_Handler();
 8007ac8:	f7fd fa08 	bl	8004edc <IM_BTN2_EXTI15_Handler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8007acc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007ad0:	f7ff ff16 	bl	8007900 <LL_EXTI_IsActiveFlag_0_31>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d003      	beq.n	8007ae2 <EXTI15_10_IRQHandler+0x22>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8007ada:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007ade:	f7ff ff25 	bl	800792c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8007ae2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007ae6:	f7ff ff0b 	bl	8007900 <LL_EXTI_IsActiveFlag_0_31>
 8007aea:	4603      	mov	r3, r0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d003      	beq.n	8007af8 <EXTI15_10_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8007af0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007af4:	f7ff ff1a 	bl	800792c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007af8:	bf00      	nop
 8007afa:	bd80      	pop	{r7, pc}

08007afc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	IM_SWEEP_UPDATE_TIM_IRQHandler();
 8007b00:	f7fd f966 	bl	8004dd0 <IM_SWEEP_UPDATE_TIM_IRQHandler>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8007b04:	4802      	ldr	r0, [pc, #8]	; (8007b10 <TIM5_IRQHandler+0x14>)
 8007b06:	f004 fed9 	bl	800c8bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8007b0a:	bf00      	nop
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	200027f8 	.word	0x200027f8

08007b14 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b086      	sub	sp, #24
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007b20:	2300      	movs	r3, #0
 8007b22:	617b      	str	r3, [r7, #20]
 8007b24:	e00a      	b.n	8007b3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007b26:	f3af 8000 	nop.w
 8007b2a:	4601      	mov	r1, r0
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	1c5a      	adds	r2, r3, #1
 8007b30:	60ba      	str	r2, [r7, #8]
 8007b32:	b2ca      	uxtb	r2, r1
 8007b34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	3301      	adds	r3, #1
 8007b3a:	617b      	str	r3, [r7, #20]
 8007b3c:	697a      	ldr	r2, [r7, #20]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	dbf0      	blt.n	8007b26 <_read+0x12>
	}

return len;
 8007b44:	687b      	ldr	r3, [r7, #4]
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3718      	adds	r7, #24
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <_close>:
	}
	return len;
}

int _close(int file)
{
 8007b4e:	b480      	push	{r7}
 8007b50:	b083      	sub	sp, #12
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
	return -1;
 8007b56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	370c      	adds	r7, #12
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr

08007b66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007b66:	b480      	push	{r7}
 8007b68:	b083      	sub	sp, #12
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
 8007b6e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007b76:	605a      	str	r2, [r3, #4]
	return 0;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	370c      	adds	r7, #12
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr

08007b86 <_isatty>:

int _isatty(int file)
{
 8007b86:	b480      	push	{r7}
 8007b88:	b083      	sub	sp, #12
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]
	return 1;
 8007b8e:	2301      	movs	r3, #1
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	370c      	adds	r7, #12
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b085      	sub	sp, #20
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
	return 0;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3714      	adds	r7, #20
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr
	...

08007bb8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007bc0:	4b11      	ldr	r3, [pc, #68]	; (8007c08 <_sbrk+0x50>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d102      	bne.n	8007bce <_sbrk+0x16>
		heap_end = &end;
 8007bc8:	4b0f      	ldr	r3, [pc, #60]	; (8007c08 <_sbrk+0x50>)
 8007bca:	4a10      	ldr	r2, [pc, #64]	; (8007c0c <_sbrk+0x54>)
 8007bcc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007bce:	4b0e      	ldr	r3, [pc, #56]	; (8007c08 <_sbrk+0x50>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007bd4:	4b0c      	ldr	r3, [pc, #48]	; (8007c08 <_sbrk+0x50>)
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4413      	add	r3, r2
 8007bdc:	466a      	mov	r2, sp
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d907      	bls.n	8007bf2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007be2:	f007 fc27 	bl	800f434 <__errno>
 8007be6:	4602      	mov	r2, r0
 8007be8:	230c      	movs	r3, #12
 8007bea:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007bec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007bf0:	e006      	b.n	8007c00 <_sbrk+0x48>
	}

	heap_end += incr;
 8007bf2:	4b05      	ldr	r3, [pc, #20]	; (8007c08 <_sbrk+0x50>)
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4413      	add	r3, r2
 8007bfa:	4a03      	ldr	r2, [pc, #12]	; (8007c08 <_sbrk+0x50>)
 8007bfc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3710      	adds	r7, #16
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	20001ea0 	.word	0x20001ea0
 8007c0c:	20002930 	.word	0x20002930

08007c10 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007c10:	b480      	push	{r7}
 8007c12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007c14:	4b08      	ldr	r3, [pc, #32]	; (8007c38 <SystemInit+0x28>)
 8007c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c1a:	4a07      	ldr	r2, [pc, #28]	; (8007c38 <SystemInit+0x28>)
 8007c1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007c20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007c24:	4b04      	ldr	r3, [pc, #16]	; (8007c38 <SystemInit+0x28>)
 8007c26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007c2a:	609a      	str	r2, [r3, #8]
#endif
}
 8007c2c:	bf00      	nop
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr
 8007c36:	bf00      	nop
 8007c38:	e000ed00 	.word	0xe000ed00

08007c3c <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b09a      	sub	sp, #104	; 0x68
 8007c40:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8007c42:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007c46:	2224      	movs	r2, #36	; 0x24
 8007c48:	2100      	movs	r1, #0
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f007 fc1c 	bl	800f488 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007c50:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007c54:	2200      	movs	r2, #0
 8007c56:	601a      	str	r2, [r3, #0]
 8007c58:	605a      	str	r2, [r3, #4]
 8007c5a:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007c5c:	1d3b      	adds	r3, r7, #4
 8007c5e:	2234      	movs	r2, #52	; 0x34
 8007c60:	2100      	movs	r1, #0
 8007c62:	4618      	mov	r0, r3
 8007c64:	f007 fc10 	bl	800f488 <memset>

  htim1.Instance = TIM1;
 8007c68:	4b2a      	ldr	r3, [pc, #168]	; (8007d14 <MX_TIM1_Init+0xd8>)
 8007c6a:	4a2b      	ldr	r2, [pc, #172]	; (8007d18 <MX_TIM1_Init+0xdc>)
 8007c6c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8007c6e:	4b29      	ldr	r3, [pc, #164]	; (8007d14 <MX_TIM1_Init+0xd8>)
 8007c70:	2200      	movs	r2, #0
 8007c72:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8007c74:	4b27      	ldr	r3, [pc, #156]	; (8007d14 <MX_TIM1_Init+0xd8>)
 8007c76:	2260      	movs	r2, #96	; 0x60
 8007c78:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 8007c7a:	4b26      	ldr	r3, [pc, #152]	; (8007d14 <MX_TIM1_Init+0xd8>)
 8007c7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007c80:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007c82:	4b24      	ldr	r3, [pc, #144]	; (8007d14 <MX_TIM1_Init+0xd8>)
 8007c84:	2200      	movs	r2, #0
 8007c86:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007c88:	4b22      	ldr	r3, [pc, #136]	; (8007d14 <MX_TIM1_Init+0xd8>)
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007c8e:	4b21      	ldr	r3, [pc, #132]	; (8007d14 <MX_TIM1_Init+0xd8>)
 8007c90:	2280      	movs	r2, #128	; 0x80
 8007c92:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 8007c94:	2302      	movs	r3, #2
 8007c96:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8007cac:	2301      	movs	r3, #1
 8007cae:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8007cb8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	4815      	ldr	r0, [pc, #84]	; (8007d14 <MX_TIM1_Init+0xd8>)
 8007cc0:	f004 fd56 	bl	800c770 <HAL_TIM_Encoder_Init>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d001      	beq.n	8007cce <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8007cca:	f7ff fd25 	bl	8007718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007cce:	2320      	movs	r3, #32
 8007cd0:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007cda:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007cde:	4619      	mov	r1, r3
 8007ce0:	480c      	ldr	r0, [pc, #48]	; (8007d14 <MX_TIM1_Init+0xd8>)
 8007ce2:	f005 fe31 	bl	800d948 <HAL_TIMEx_MasterConfigSynchronization>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d001      	beq.n	8007cf0 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8007cec:	f7ff fd14 	bl	8007718 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8007cf8:	1d3b      	adds	r3, r7, #4
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	4805      	ldr	r0, [pc, #20]	; (8007d14 <MX_TIM1_Init+0xd8>)
 8007cfe:	f005 feb9 	bl	800da74 <HAL_TIMEx_ConfigBreakDeadTime>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d001      	beq.n	8007d0c <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8007d08:	f7ff fd06 	bl	8007718 <Error_Handler>
  }

}
 8007d0c:	bf00      	nop
 8007d0e:	3768      	adds	r7, #104	; 0x68
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	20002844 	.word	0x20002844
 8007d18:	40012c00 	.word	0x40012c00

08007d1c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b088      	sub	sp, #32
 8007d20:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007d22:	f107 0310 	add.w	r3, r7, #16
 8007d26:	2200      	movs	r2, #0
 8007d28:	601a      	str	r2, [r3, #0]
 8007d2a:	605a      	str	r2, [r3, #4]
 8007d2c:	609a      	str	r2, [r3, #8]
 8007d2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007d30:	1d3b      	adds	r3, r7, #4
 8007d32:	2200      	movs	r2, #0
 8007d34:	601a      	str	r2, [r3, #0]
 8007d36:	605a      	str	r2, [r3, #4]
 8007d38:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8007d3a:	4b1d      	ldr	r3, [pc, #116]	; (8007db0 <MX_TIM2_Init+0x94>)
 8007d3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007d40:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8007d42:	4b1b      	ldr	r3, [pc, #108]	; (8007db0 <MX_TIM2_Init+0x94>)
 8007d44:	2200      	movs	r2, #0
 8007d46:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007d48:	4b19      	ldr	r3, [pc, #100]	; (8007db0 <MX_TIM2_Init+0x94>)
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8007d4e:	4b18      	ldr	r3, [pc, #96]	; (8007db0 <MX_TIM2_Init+0x94>)
 8007d50:	2201      	movs	r2, #1
 8007d52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007d54:	4b16      	ldr	r3, [pc, #88]	; (8007db0 <MX_TIM2_Init+0x94>)
 8007d56:	2200      	movs	r2, #0
 8007d58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007d5a:	4b15      	ldr	r3, [pc, #84]	; (8007db0 <MX_TIM2_Init+0x94>)
 8007d5c:	2280      	movs	r2, #128	; 0x80
 8007d5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007d60:	4813      	ldr	r0, [pc, #76]	; (8007db0 <MX_TIM2_Init+0x94>)
 8007d62:	f004 fa1b 	bl	800c19c <HAL_TIM_Base_Init>
 8007d66:	4603      	mov	r3, r0
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d001      	beq.n	8007d70 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8007d6c:	f7ff fcd4 	bl	8007718 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007d70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007d76:	f107 0310 	add.w	r3, r7, #16
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	480c      	ldr	r0, [pc, #48]	; (8007db0 <MX_TIM2_Init+0x94>)
 8007d7e:	f005 f82d 	bl	800cddc <HAL_TIM_ConfigClockSource>
 8007d82:	4603      	mov	r3, r0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d001      	beq.n	8007d8c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8007d88:	f7ff fcc6 	bl	8007718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007d8c:	2320      	movs	r3, #32
 8007d8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007d90:	2300      	movs	r3, #0
 8007d92:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007d94:	1d3b      	adds	r3, r7, #4
 8007d96:	4619      	mov	r1, r3
 8007d98:	4805      	ldr	r0, [pc, #20]	; (8007db0 <MX_TIM2_Init+0x94>)
 8007d9a:	f005 fdd5 	bl	800d948 <HAL_TIMEx_MasterConfigSynchronization>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d001      	beq.n	8007da8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8007da4:	f7ff fcb8 	bl	8007718 <Error_Handler>
  }

}
 8007da8:	bf00      	nop
 8007daa:	3720      	adds	r7, #32
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}
 8007db0:	20002890 	.word	0x20002890

08007db4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b088      	sub	sp, #32
 8007db8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007dba:	f107 0310 	add.w	r3, r7, #16
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	601a      	str	r2, [r3, #0]
 8007dc2:	605a      	str	r2, [r3, #4]
 8007dc4:	609a      	str	r2, [r3, #8]
 8007dc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007dc8:	1d3b      	adds	r3, r7, #4
 8007dca:	2200      	movs	r2, #0
 8007dcc:	601a      	str	r2, [r3, #0]
 8007dce:	605a      	str	r2, [r3, #4]
 8007dd0:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 8007dd2:	4b1d      	ldr	r3, [pc, #116]	; (8007e48 <MX_TIM3_Init+0x94>)
 8007dd4:	4a1d      	ldr	r2, [pc, #116]	; (8007e4c <MX_TIM3_Init+0x98>)
 8007dd6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8007dd8:	4b1b      	ldr	r3, [pc, #108]	; (8007e48 <MX_TIM3_Init+0x94>)
 8007dda:	2200      	movs	r2, #0
 8007ddc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8007dde:	4b1a      	ldr	r3, [pc, #104]	; (8007e48 <MX_TIM3_Init+0x94>)
 8007de0:	2210      	movs	r2, #16
 8007de2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8007de4:	4b18      	ldr	r3, [pc, #96]	; (8007e48 <MX_TIM3_Init+0x94>)
 8007de6:	2201      	movs	r2, #1
 8007de8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8007dea:	4b17      	ldr	r3, [pc, #92]	; (8007e48 <MX_TIM3_Init+0x94>)
 8007dec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007df0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007df2:	4b15      	ldr	r3, [pc, #84]	; (8007e48 <MX_TIM3_Init+0x94>)
 8007df4:	2280      	movs	r2, #128	; 0x80
 8007df6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007df8:	4813      	ldr	r0, [pc, #76]	; (8007e48 <MX_TIM3_Init+0x94>)
 8007dfa:	f004 f9cf 	bl	800c19c <HAL_TIM_Base_Init>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d001      	beq.n	8007e08 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8007e04:	f7ff fc88 	bl	8007718 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007e08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e0c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8007e0e:	f107 0310 	add.w	r3, r7, #16
 8007e12:	4619      	mov	r1, r3
 8007e14:	480c      	ldr	r0, [pc, #48]	; (8007e48 <MX_TIM3_Init+0x94>)
 8007e16:	f004 ffe1 	bl	800cddc <HAL_TIM_ConfigClockSource>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d001      	beq.n	8007e24 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8007e20:	f7ff fc7a 	bl	8007718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007e24:	2320      	movs	r3, #32
 8007e26:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007e2c:	1d3b      	adds	r3, r7, #4
 8007e2e:	4619      	mov	r1, r3
 8007e30:	4805      	ldr	r0, [pc, #20]	; (8007e48 <MX_TIM3_Init+0x94>)
 8007e32:	f005 fd89 	bl	800d948 <HAL_TIMEx_MasterConfigSynchronization>
 8007e36:	4603      	mov	r3, r0
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d001      	beq.n	8007e40 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8007e3c:	f7ff fc6c 	bl	8007718 <Error_Handler>
  }

}
 8007e40:	bf00      	nop
 8007e42:	3720      	adds	r7, #32
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	20001f1c 	.word	0x20001f1c
 8007e4c:	40000400 	.word	0x40000400

08007e50 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b088      	sub	sp, #32
 8007e54:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007e56:	f107 0310 	add.w	r3, r7, #16
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	601a      	str	r2, [r3, #0]
 8007e5e:	605a      	str	r2, [r3, #4]
 8007e60:	609a      	str	r2, [r3, #8]
 8007e62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007e64:	1d3b      	adds	r3, r7, #4
 8007e66:	2200      	movs	r2, #0
 8007e68:	601a      	str	r2, [r3, #0]
 8007e6a:	605a      	str	r2, [r3, #4]
 8007e6c:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 8007e6e:	4b1d      	ldr	r3, [pc, #116]	; (8007ee4 <MX_TIM5_Init+0x94>)
 8007e70:	4a1d      	ldr	r2, [pc, #116]	; (8007ee8 <MX_TIM5_Init+0x98>)
 8007e72:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8007e74:	4b1b      	ldr	r3, [pc, #108]	; (8007ee4 <MX_TIM5_Init+0x94>)
 8007e76:	2200      	movs	r2, #0
 8007e78:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007e7a:	4b1a      	ldr	r3, [pc, #104]	; (8007ee4 <MX_TIM5_Init+0x94>)
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 8007e80:	4b18      	ldr	r3, [pc, #96]	; (8007ee4 <MX_TIM5_Init+0x94>)
 8007e82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007e86:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007e88:	4b16      	ldr	r3, [pc, #88]	; (8007ee4 <MX_TIM5_Init+0x94>)
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007e8e:	4b15      	ldr	r3, [pc, #84]	; (8007ee4 <MX_TIM5_Init+0x94>)
 8007e90:	2280      	movs	r2, #128	; 0x80
 8007e92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8007e94:	4813      	ldr	r0, [pc, #76]	; (8007ee4 <MX_TIM5_Init+0x94>)
 8007e96:	f004 f981 	bl	800c19c <HAL_TIM_Base_Init>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d001      	beq.n	8007ea4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8007ea0:	f7ff fc3a 	bl	8007718 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007ea4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ea8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8007eaa:	f107 0310 	add.w	r3, r7, #16
 8007eae:	4619      	mov	r1, r3
 8007eb0:	480c      	ldr	r0, [pc, #48]	; (8007ee4 <MX_TIM5_Init+0x94>)
 8007eb2:	f004 ff93 	bl	800cddc <HAL_TIM_ConfigClockSource>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d001      	beq.n	8007ec0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8007ebc:	f7ff fc2c 	bl	8007718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8007ec8:	1d3b      	adds	r3, r7, #4
 8007eca:	4619      	mov	r1, r3
 8007ecc:	4805      	ldr	r0, [pc, #20]	; (8007ee4 <MX_TIM5_Init+0x94>)
 8007ece:	f005 fd3b 	bl	800d948 <HAL_TIMEx_MasterConfigSynchronization>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d001      	beq.n	8007edc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8007ed8:	f7ff fc1e 	bl	8007718 <Error_Handler>
  }

}
 8007edc:	bf00      	nop
 8007ede:	3720      	adds	r7, #32
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	200027f8 	.word	0x200027f8
 8007ee8:	40000c00 	.word	0x40000c00

08007eec <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b094      	sub	sp, #80	; 0x50
 8007ef0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007ef2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	601a      	str	r2, [r3, #0]
 8007efa:	605a      	str	r2, [r3, #4]
 8007efc:	609a      	str	r2, [r3, #8]
 8007efe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007f00:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007f04:	2200      	movs	r2, #0
 8007f06:	601a      	str	r2, [r3, #0]
 8007f08:	605a      	str	r2, [r3, #4]
 8007f0a:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007f0c:	463b      	mov	r3, r7
 8007f0e:	2234      	movs	r2, #52	; 0x34
 8007f10:	2100      	movs	r1, #0
 8007f12:	4618      	mov	r0, r3
 8007f14:	f007 fab8 	bl	800f488 <memset>

  htim8.Instance = TIM8;
 8007f18:	4b26      	ldr	r3, [pc, #152]	; (8007fb4 <MX_TIM8_Init+0xc8>)
 8007f1a:	4a27      	ldr	r2, [pc, #156]	; (8007fb8 <MX_TIM8_Init+0xcc>)
 8007f1c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8007f1e:	4b25      	ldr	r3, [pc, #148]	; (8007fb4 <MX_TIM8_Init+0xc8>)
 8007f20:	2200      	movs	r2, #0
 8007f22:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007f24:	4b23      	ldr	r3, [pc, #140]	; (8007fb4 <MX_TIM8_Init+0xc8>)
 8007f26:	2200      	movs	r2, #0
 8007f28:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 8007f2a:	4b22      	ldr	r3, [pc, #136]	; (8007fb4 <MX_TIM8_Init+0xc8>)
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007f30:	4b20      	ldr	r3, [pc, #128]	; (8007fb4 <MX_TIM8_Init+0xc8>)
 8007f32:	2200      	movs	r2, #0
 8007f34:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8007f36:	4b1f      	ldr	r3, [pc, #124]	; (8007fb4 <MX_TIM8_Init+0xc8>)
 8007f38:	2200      	movs	r2, #0
 8007f3a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007f3c:	4b1d      	ldr	r3, [pc, #116]	; (8007fb4 <MX_TIM8_Init+0xc8>)
 8007f3e:	2280      	movs	r2, #128	; 0x80
 8007f40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8007f42:	481c      	ldr	r0, [pc, #112]	; (8007fb4 <MX_TIM8_Init+0xc8>)
 8007f44:	f004 f92a 	bl	800c19c <HAL_TIM_Base_Init>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d001      	beq.n	8007f52 <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8007f4e:	f7ff fbe3 	bl	8007718 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007f52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f56:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8007f58:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	4815      	ldr	r0, [pc, #84]	; (8007fb4 <MX_TIM8_Init+0xc8>)
 8007f60:	f004 ff3c 	bl	800cddc <HAL_TIM_ConfigClockSource>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d001      	beq.n	8007f6e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8007f6a:	f7ff fbd5 	bl	8007718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007f6e:	2320      	movs	r3, #32
 8007f70:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8007f72:	2300      	movs	r3, #0
 8007f74:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007f76:	2300      	movs	r3, #0
 8007f78:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8007f7a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007f7e:	4619      	mov	r1, r3
 8007f80:	480c      	ldr	r0, [pc, #48]	; (8007fb4 <MX_TIM8_Init+0xc8>)
 8007f82:	f005 fce1 	bl	800d948 <HAL_TIMEx_MasterConfigSynchronization>
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d001      	beq.n	8007f90 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8007f8c:	f7ff fbc4 	bl	8007718 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8007f90:	2300      	movs	r3, #0
 8007f92:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8007f94:	2300      	movs	r3, #0
 8007f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8007f98:	463b      	mov	r3, r7
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	4805      	ldr	r0, [pc, #20]	; (8007fb4 <MX_TIM8_Init+0xc8>)
 8007f9e:	f005 fd69 	bl	800da74 <HAL_TIMEx_ConfigBreakDeadTime>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d001      	beq.n	8007fac <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8007fa8:	f7ff fbb6 	bl	8007718 <Error_Handler>
  }

}
 8007fac:	bf00      	nop
 8007fae:	3750      	adds	r7, #80	; 0x50
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}
 8007fb4:	20002714 	.word	0x20002714
 8007fb8:	40013400 	.word	0x40013400

08007fbc <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b088      	sub	sp, #32
 8007fc0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007fc2:	f107 0310 	add.w	r3, r7, #16
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	601a      	str	r2, [r3, #0]
 8007fca:	605a      	str	r2, [r3, #4]
 8007fcc:	609a      	str	r2, [r3, #8]
 8007fce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007fd0:	1d3b      	adds	r3, r7, #4
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	601a      	str	r2, [r3, #0]
 8007fd6:	605a      	str	r2, [r3, #4]
 8007fd8:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 8007fda:	4b1f      	ldr	r3, [pc, #124]	; (8008058 <MX_TIM15_Init+0x9c>)
 8007fdc:	4a1f      	ldr	r2, [pc, #124]	; (800805c <MX_TIM15_Init+0xa0>)
 8007fde:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 8007fe0:	4b1d      	ldr	r3, [pc, #116]	; (8008058 <MX_TIM15_Init+0x9c>)
 8007fe2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007fe6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007fe8:	4b1b      	ldr	r3, [pc, #108]	; (8008058 <MX_TIM15_Init+0x9c>)
 8007fea:	2200      	movs	r2, #0
 8007fec:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 8007fee:	4b1a      	ldr	r3, [pc, #104]	; (8008058 <MX_TIM15_Init+0x9c>)
 8007ff0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007ff4:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007ff6:	4b18      	ldr	r3, [pc, #96]	; (8008058 <MX_TIM15_Init+0x9c>)
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8007ffc:	4b16      	ldr	r3, [pc, #88]	; (8008058 <MX_TIM15_Init+0x9c>)
 8007ffe:	2200      	movs	r2, #0
 8008000:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008002:	4b15      	ldr	r3, [pc, #84]	; (8008058 <MX_TIM15_Init+0x9c>)
 8008004:	2200      	movs	r2, #0
 8008006:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8008008:	4813      	ldr	r0, [pc, #76]	; (8008058 <MX_TIM15_Init+0x9c>)
 800800a:	f004 f8c7 	bl	800c19c <HAL_TIM_Base_Init>
 800800e:	4603      	mov	r3, r0
 8008010:	2b00      	cmp	r3, #0
 8008012:	d001      	beq.n	8008018 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8008014:	f7ff fb80 	bl	8007718 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008018:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800801c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800801e:	f107 0310 	add.w	r3, r7, #16
 8008022:	4619      	mov	r1, r3
 8008024:	480c      	ldr	r0, [pc, #48]	; (8008058 <MX_TIM15_Init+0x9c>)
 8008026:	f004 fed9 	bl	800cddc <HAL_TIM_ConfigClockSource>
 800802a:	4603      	mov	r3, r0
 800802c:	2b00      	cmp	r3, #0
 800802e:	d001      	beq.n	8008034 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8008030:	f7ff fb72 	bl	8007718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008034:	2300      	movs	r3, #0
 8008036:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008038:	2300      	movs	r3, #0
 800803a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800803c:	1d3b      	adds	r3, r7, #4
 800803e:	4619      	mov	r1, r3
 8008040:	4805      	ldr	r0, [pc, #20]	; (8008058 <MX_TIM15_Init+0x9c>)
 8008042:	f005 fc81 	bl	800d948 <HAL_TIMEx_MasterConfigSynchronization>
 8008046:	4603      	mov	r3, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d001      	beq.n	8008050 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 800804c:	f7ff fb64 	bl	8007718 <Error_Handler>
  }

}
 8008050:	bf00      	nop
 8008052:	3720      	adds	r7, #32
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}
 8008058:	20002760 	.word	0x20002760
 800805c:	40014000 	.word	0x40014000

08008060 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8008064:	4b10      	ldr	r3, [pc, #64]	; (80080a8 <MX_TIM16_Init+0x48>)
 8008066:	4a11      	ldr	r2, [pc, #68]	; (80080ac <MX_TIM16_Init+0x4c>)
 8008068:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 65535;
 800806a:	4b0f      	ldr	r3, [pc, #60]	; (80080a8 <MX_TIM16_Init+0x48>)
 800806c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008070:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008072:	4b0d      	ldr	r3, [pc, #52]	; (80080a8 <MX_TIM16_Init+0x48>)
 8008074:	2200      	movs	r2, #0
 8008076:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8008078:	4b0b      	ldr	r3, [pc, #44]	; (80080a8 <MX_TIM16_Init+0x48>)
 800807a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800807e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008080:	4b09      	ldr	r3, [pc, #36]	; (80080a8 <MX_TIM16_Init+0x48>)
 8008082:	2200      	movs	r2, #0
 8008084:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8008086:	4b08      	ldr	r3, [pc, #32]	; (80080a8 <MX_TIM16_Init+0x48>)
 8008088:	2200      	movs	r2, #0
 800808a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800808c:	4b06      	ldr	r3, [pc, #24]	; (80080a8 <MX_TIM16_Init+0x48>)
 800808e:	2200      	movs	r2, #0
 8008090:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8008092:	4805      	ldr	r0, [pc, #20]	; (80080a8 <MX_TIM16_Init+0x48>)
 8008094:	f004 f882 	bl	800c19c <HAL_TIM_Base_Init>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d001      	beq.n	80080a2 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800809e:	f7ff fb3b 	bl	8007718 <Error_Handler>
  }

}
 80080a2:	bf00      	nop
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	200028dc 	.word	0x200028dc
 80080ac:	40014400 	.word	0x40014400

080080b0 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 80080b4:	4b10      	ldr	r3, [pc, #64]	; (80080f8 <MX_TIM17_Init+0x48>)
 80080b6:	4a11      	ldr	r2, [pc, #68]	; (80080fc <MX_TIM17_Init+0x4c>)
 80080b8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1024;
 80080ba:	4b0f      	ldr	r3, [pc, #60]	; (80080f8 <MX_TIM17_Init+0x48>)
 80080bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80080c0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80080c2:	4b0d      	ldr	r3, [pc, #52]	; (80080f8 <MX_TIM17_Init+0x48>)
 80080c4:	2200      	movs	r2, #0
 80080c6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1024;
 80080c8:	4b0b      	ldr	r3, [pc, #44]	; (80080f8 <MX_TIM17_Init+0x48>)
 80080ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80080ce:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80080d0:	4b09      	ldr	r3, [pc, #36]	; (80080f8 <MX_TIM17_Init+0x48>)
 80080d2:	2200      	movs	r2, #0
 80080d4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80080d6:	4b08      	ldr	r3, [pc, #32]	; (80080f8 <MX_TIM17_Init+0x48>)
 80080d8:	2200      	movs	r2, #0
 80080da:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80080dc:	4b06      	ldr	r3, [pc, #24]	; (80080f8 <MX_TIM17_Init+0x48>)
 80080de:	2200      	movs	r2, #0
 80080e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80080e2:	4805      	ldr	r0, [pc, #20]	; (80080f8 <MX_TIM17_Init+0x48>)
 80080e4:	f004 f85a 	bl	800c19c <HAL_TIM_Base_Init>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d001      	beq.n	80080f2 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 80080ee:	f7ff fb13 	bl	8007718 <Error_Handler>
  }

}
 80080f2:	bf00      	nop
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	200027ac 	.word	0x200027ac
 80080fc:	40014800 	.word	0x40014800

08008100 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b08a      	sub	sp, #40	; 0x28
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008108:	f107 0314 	add.w	r3, r7, #20
 800810c:	2200      	movs	r2, #0
 800810e:	601a      	str	r2, [r3, #0]
 8008110:	605a      	str	r2, [r3, #4]
 8008112:	609a      	str	r2, [r3, #8]
 8008114:	60da      	str	r2, [r3, #12]
 8008116:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a1f      	ldr	r2, [pc, #124]	; (800819c <HAL_TIM_Encoder_MspInit+0x9c>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d137      	bne.n	8008192 <HAL_TIM_Encoder_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008122:	4b1f      	ldr	r3, [pc, #124]	; (80081a0 <HAL_TIM_Encoder_MspInit+0xa0>)
 8008124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008126:	4a1e      	ldr	r2, [pc, #120]	; (80081a0 <HAL_TIM_Encoder_MspInit+0xa0>)
 8008128:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800812c:	6613      	str	r3, [r2, #96]	; 0x60
 800812e:	4b1c      	ldr	r3, [pc, #112]	; (80081a0 <HAL_TIM_Encoder_MspInit+0xa0>)
 8008130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008132:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008136:	613b      	str	r3, [r7, #16]
 8008138:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800813a:	4b19      	ldr	r3, [pc, #100]	; (80081a0 <HAL_TIM_Encoder_MspInit+0xa0>)
 800813c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800813e:	4a18      	ldr	r2, [pc, #96]	; (80081a0 <HAL_TIM_Encoder_MspInit+0xa0>)
 8008140:	f043 0304 	orr.w	r3, r3, #4
 8008144:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008146:	4b16      	ldr	r3, [pc, #88]	; (80081a0 <HAL_TIM_Encoder_MspInit+0xa0>)
 8008148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800814a:	f003 0304 	and.w	r3, r3, #4
 800814e:	60fb      	str	r3, [r7, #12]
 8008150:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008152:	2303      	movs	r3, #3
 8008154:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008156:	2302      	movs	r3, #2
 8008158:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800815a:	2300      	movs	r3, #0
 800815c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800815e:	2300      	movs	r3, #0
 8008160:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8008162:	2302      	movs	r3, #2
 8008164:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008166:	f107 0314 	add.w	r3, r7, #20
 800816a:	4619      	mov	r1, r3
 800816c:	480d      	ldr	r0, [pc, #52]	; (80081a4 <HAL_TIM_Encoder_MspInit+0xa4>)
 800816e:	f002 fd0f 	bl	800ab90 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8008172:	2200      	movs	r2, #0
 8008174:	2100      	movs	r1, #0
 8008176:	2018      	movs	r0, #24
 8008178:	f001 fde7 	bl	8009d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800817c:	2018      	movs	r0, #24
 800817e:	f001 fdfe 	bl	8009d7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8008182:	2200      	movs	r2, #0
 8008184:	2101      	movs	r1, #1
 8008186:	201a      	movs	r0, #26
 8008188:	f001 fddf 	bl	8009d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800818c:	201a      	movs	r0, #26
 800818e:	f001 fdf6 	bl	8009d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8008192:	bf00      	nop
 8008194:	3728      	adds	r7, #40	; 0x28
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	40012c00 	.word	0x40012c00
 80081a0:	40021000 	.word	0x40021000
 80081a4:	48000800 	.word	0x48000800

080081a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b090      	sub	sp, #64	; 0x40
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80081b4:	2200      	movs	r2, #0
 80081b6:	601a      	str	r2, [r3, #0]
 80081b8:	605a      	str	r2, [r3, #4]
 80081ba:	609a      	str	r2, [r3, #8]
 80081bc:	60da      	str	r2, [r3, #12]
 80081be:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081c8:	d129      	bne.n	800821e <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80081ca:	4b5c      	ldr	r3, [pc, #368]	; (800833c <HAL_TIM_Base_MspInit+0x194>)
 80081cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081ce:	4a5b      	ldr	r2, [pc, #364]	; (800833c <HAL_TIM_Base_MspInit+0x194>)
 80081d0:	f043 0301 	orr.w	r3, r3, #1
 80081d4:	6593      	str	r3, [r2, #88]	; 0x58
 80081d6:	4b59      	ldr	r3, [pc, #356]	; (800833c <HAL_TIM_Base_MspInit+0x194>)
 80081d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081da:	f003 0301 	and.w	r3, r3, #1
 80081de:	62bb      	str	r3, [r7, #40]	; 0x28
 80081e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80081e2:	4b56      	ldr	r3, [pc, #344]	; (800833c <HAL_TIM_Base_MspInit+0x194>)
 80081e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081e6:	4a55      	ldr	r2, [pc, #340]	; (800833c <HAL_TIM_Base_MspInit+0x194>)
 80081e8:	f043 0301 	orr.w	r3, r3, #1
 80081ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80081ee:	4b53      	ldr	r3, [pc, #332]	; (800833c <HAL_TIM_Base_MspInit+0x194>)
 80081f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081f2:	f003 0301 	and.w	r3, r3, #1
 80081f6:	627b      	str	r3, [r7, #36]	; 0x24
 80081f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80081fa:	2301      	movs	r3, #1
 80081fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081fe:	2302      	movs	r3, #2
 8008200:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008202:	2300      	movs	r3, #0
 8008204:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008206:	2300      	movs	r3, #0
 8008208:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800820a:	2301      	movs	r3, #1
 800820c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800820e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008212:	4619      	mov	r1, r3
 8008214:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008218:	f002 fcba 	bl	800ab90 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800821c:	e08a      	b.n	8008334 <HAL_TIM_Base_MspInit+0x18c>
  else if(tim_baseHandle->Instance==TIM3)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a47      	ldr	r2, [pc, #284]	; (8008340 <HAL_TIM_Base_MspInit+0x198>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d114      	bne.n	8008252 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008228:	4b44      	ldr	r3, [pc, #272]	; (800833c <HAL_TIM_Base_MspInit+0x194>)
 800822a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800822c:	4a43      	ldr	r2, [pc, #268]	; (800833c <HAL_TIM_Base_MspInit+0x194>)
 800822e:	f043 0302 	orr.w	r3, r3, #2
 8008232:	6593      	str	r3, [r2, #88]	; 0x58
 8008234:	4b41      	ldr	r3, [pc, #260]	; (800833c <HAL_TIM_Base_MspInit+0x194>)
 8008236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008238:	f003 0302 	and.w	r3, r3, #2
 800823c:	623b      	str	r3, [r7, #32]
 800823e:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8008240:	2200      	movs	r2, #0
 8008242:	2100      	movs	r1, #0
 8008244:	201d      	movs	r0, #29
 8008246:	f001 fd80 	bl	8009d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800824a:	201d      	movs	r0, #29
 800824c:	f001 fd97 	bl	8009d7e <HAL_NVIC_EnableIRQ>
}
 8008250:	e070      	b.n	8008334 <HAL_TIM_Base_MspInit+0x18c>
  else if(tim_baseHandle->Instance==TIM5)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a3b      	ldr	r2, [pc, #236]	; (8008344 <HAL_TIM_Base_MspInit+0x19c>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d114      	bne.n	8008286 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800825c:	4b37      	ldr	r3, [pc, #220]	; (800833c <HAL_TIM_Base_MspInit+0x194>)
 800825e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008260:	4a36      	ldr	r2, [pc, #216]	; (800833c <HAL_TIM_Base_MspInit+0x194>)
 8008262:	f043 0308 	orr.w	r3, r3, #8
 8008266:	6593      	str	r3, [r2, #88]	; 0x58
 8008268:	4b34      	ldr	r3, [pc, #208]	; (800833c <HAL_TIM_Base_MspInit+0x194>)
 800826a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800826c:	f003 0308 	and.w	r3, r3, #8
 8008270:	61fb      	str	r3, [r7, #28]
 8008272:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 2, 0);
 8008274:	2200      	movs	r2, #0
 8008276:	2102      	movs	r1, #2
 8008278:	2032      	movs	r0, #50	; 0x32
 800827a:	f001 fd66 	bl	8009d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800827e:	2032      	movs	r0, #50	; 0x32
 8008280:	f001 fd7d 	bl	8009d7e <HAL_NVIC_EnableIRQ>
}
 8008284:	e056      	b.n	8008334 <HAL_TIM_Base_MspInit+0x18c>
  else if(tim_baseHandle->Instance==TIM8)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a2f      	ldr	r2, [pc, #188]	; (8008348 <HAL_TIM_Base_MspInit+0x1a0>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d10c      	bne.n	80082aa <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8008290:	4b2a      	ldr	r3, [pc, #168]	; (800833c <HAL_TIM_Base_MspInit+0x194>)
 8008292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008294:	4a29      	ldr	r2, [pc, #164]	; (800833c <HAL_TIM_Base_MspInit+0x194>)
 8008296:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800829a:	6613      	str	r3, [r2, #96]	; 0x60
 800829c:	4b27      	ldr	r3, [pc, #156]	; (800833c <HAL_TIM_Base_MspInit+0x194>)
 800829e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80082a4:	61bb      	str	r3, [r7, #24]
 80082a6:	69bb      	ldr	r3, [r7, #24]
}
 80082a8:	e044      	b.n	8008334 <HAL_TIM_Base_MspInit+0x18c>
  else if(tim_baseHandle->Instance==TIM15)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a27      	ldr	r2, [pc, #156]	; (800834c <HAL_TIM_Base_MspInit+0x1a4>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d114      	bne.n	80082de <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80082b4:	4b21      	ldr	r3, [pc, #132]	; (800833c <HAL_TIM_Base_MspInit+0x194>)
 80082b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082b8:	4a20      	ldr	r2, [pc, #128]	; (800833c <HAL_TIM_Base_MspInit+0x194>)
 80082ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082be:	6613      	str	r3, [r2, #96]	; 0x60
 80082c0:	4b1e      	ldr	r3, [pc, #120]	; (800833c <HAL_TIM_Base_MspInit+0x194>)
 80082c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082c8:	617b      	str	r3, [r7, #20]
 80082ca:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80082cc:	2200      	movs	r2, #0
 80082ce:	2100      	movs	r1, #0
 80082d0:	2018      	movs	r0, #24
 80082d2:	f001 fd3a 	bl	8009d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80082d6:	2018      	movs	r0, #24
 80082d8:	f001 fd51 	bl	8009d7e <HAL_NVIC_EnableIRQ>
}
 80082dc:	e02a      	b.n	8008334 <HAL_TIM_Base_MspInit+0x18c>
  else if(tim_baseHandle->Instance==TIM16)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a1b      	ldr	r2, [pc, #108]	; (8008350 <HAL_TIM_Base_MspInit+0x1a8>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d10c      	bne.n	8008302 <HAL_TIM_Base_MspInit+0x15a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80082e8:	4b14      	ldr	r3, [pc, #80]	; (800833c <HAL_TIM_Base_MspInit+0x194>)
 80082ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082ec:	4a13      	ldr	r2, [pc, #76]	; (800833c <HAL_TIM_Base_MspInit+0x194>)
 80082ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082f2:	6613      	str	r3, [r2, #96]	; 0x60
 80082f4:	4b11      	ldr	r3, [pc, #68]	; (800833c <HAL_TIM_Base_MspInit+0x194>)
 80082f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082fc:	613b      	str	r3, [r7, #16]
 80082fe:	693b      	ldr	r3, [r7, #16]
}
 8008300:	e018      	b.n	8008334 <HAL_TIM_Base_MspInit+0x18c>
  else if(tim_baseHandle->Instance==TIM17)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a13      	ldr	r2, [pc, #76]	; (8008354 <HAL_TIM_Base_MspInit+0x1ac>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d113      	bne.n	8008334 <HAL_TIM_Base_MspInit+0x18c>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800830c:	4b0b      	ldr	r3, [pc, #44]	; (800833c <HAL_TIM_Base_MspInit+0x194>)
 800830e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008310:	4a0a      	ldr	r2, [pc, #40]	; (800833c <HAL_TIM_Base_MspInit+0x194>)
 8008312:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008316:	6613      	str	r3, [r2, #96]	; 0x60
 8008318:	4b08      	ldr	r3, [pc, #32]	; (800833c <HAL_TIM_Base_MspInit+0x194>)
 800831a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800831c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008320:	60fb      	str	r3, [r7, #12]
 8008322:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8008324:	2200      	movs	r2, #0
 8008326:	2101      	movs	r1, #1
 8008328:	201a      	movs	r0, #26
 800832a:	f001 fd0e 	bl	8009d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800832e:	201a      	movs	r0, #26
 8008330:	f001 fd25 	bl	8009d7e <HAL_NVIC_EnableIRQ>
}
 8008334:	bf00      	nop
 8008336:	3740      	adds	r7, #64	; 0x40
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}
 800833c:	40021000 	.word	0x40021000
 8008340:	40000400 	.word	0x40000400
 8008344:	40000c00 	.word	0x40000c00
 8008348:	40013400 	.word	0x40013400
 800834c:	40014000 	.word	0x40014000
 8008350:	40014400 	.word	0x40014400
 8008354:	40014800 	.word	0x40014800

08008358 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008358:	480d      	ldr	r0, [pc, #52]	; (8008390 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800835a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800835c:	480d      	ldr	r0, [pc, #52]	; (8008394 <LoopForever+0x6>)
  ldr r1, =_edata
 800835e:	490e      	ldr	r1, [pc, #56]	; (8008398 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008360:	4a0e      	ldr	r2, [pc, #56]	; (800839c <LoopForever+0xe>)
  movs r3, #0
 8008362:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8008364:	e002      	b.n	800836c <LoopCopyDataInit>

08008366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800836a:	3304      	adds	r3, #4

0800836c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800836c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800836e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008370:	d3f9      	bcc.n	8008366 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008372:	4a0b      	ldr	r2, [pc, #44]	; (80083a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008374:	4c0b      	ldr	r4, [pc, #44]	; (80083a4 <LoopForever+0x16>)
  movs r3, #0
 8008376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008378:	e001      	b.n	800837e <LoopFillZerobss>

0800837a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800837a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800837c:	3204      	adds	r2, #4

0800837e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800837e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008380:	d3fb      	bcc.n	800837a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008382:	f7ff fc45 	bl	8007c10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008386:	f007 f85b 	bl	800f440 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800838a:	f7ff f905 	bl	8007598 <main>

0800838e <LoopForever>:

LoopForever:
    b LoopForever
 800838e:	e7fe      	b.n	800838e <LoopForever>
  ldr   r0, =_estack
 8008390:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008398:	20001e08 	.word	0x20001e08
  ldr r2, =_sidata
 800839c:	08014978 	.word	0x08014978
  ldr r2, =_sbss
 80083a0:	20001e08 	.word	0x20001e08
  ldr r4, =_ebss
 80083a4:	20002930 	.word	0x20002930

080083a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80083a8:	e7fe      	b.n	80083a8 <ADC1_2_IRQHandler>

080083aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80083aa:	b580      	push	{r7, lr}
 80083ac:	b082      	sub	sp, #8
 80083ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80083b0:	2300      	movs	r3, #0
 80083b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80083b4:	2003      	movs	r0, #3
 80083b6:	f001 fcbd 	bl	8009d34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80083ba:	2000      	movs	r0, #0
 80083bc:	f000 f80e 	bl	80083dc <HAL_InitTick>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d002      	beq.n	80083cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	71fb      	strb	r3, [r7, #7]
 80083ca:	e001      	b.n	80083d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80083cc:	f7ff fa74 	bl	80078b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80083d0:	79fb      	ldrb	r3, [r7, #7]

}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3708      	adds	r7, #8
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
	...

080083dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80083e4:	2300      	movs	r3, #0
 80083e6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80083e8:	4b16      	ldr	r3, [pc, #88]	; (8008444 <HAL_InitTick+0x68>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d022      	beq.n	8008436 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80083f0:	4b15      	ldr	r3, [pc, #84]	; (8008448 <HAL_InitTick+0x6c>)
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	4b13      	ldr	r3, [pc, #76]	; (8008444 <HAL_InitTick+0x68>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80083fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8008400:	fbb2 f3f3 	udiv	r3, r2, r3
 8008404:	4618      	mov	r0, r3
 8008406:	f001 fcd6 	bl	8009db6 <HAL_SYSTICK_Config>
 800840a:	4603      	mov	r3, r0
 800840c:	2b00      	cmp	r3, #0
 800840e:	d10f      	bne.n	8008430 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2b0f      	cmp	r3, #15
 8008414:	d809      	bhi.n	800842a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008416:	2200      	movs	r2, #0
 8008418:	6879      	ldr	r1, [r7, #4]
 800841a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800841e:	f001 fc94 	bl	8009d4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008422:	4a0a      	ldr	r2, [pc, #40]	; (800844c <HAL_InitTick+0x70>)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6013      	str	r3, [r2, #0]
 8008428:	e007      	b.n	800843a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800842a:	2301      	movs	r3, #1
 800842c:	73fb      	strb	r3, [r7, #15]
 800842e:	e004      	b.n	800843a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008430:	2301      	movs	r3, #1
 8008432:	73fb      	strb	r3, [r7, #15]
 8008434:	e001      	b.n	800843a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800843a:	7bfb      	ldrb	r3, [r7, #15]
}
 800843c:	4618      	mov	r0, r3
 800843e:	3710      	adds	r7, #16
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}
 8008444:	20000c38 	.word	0x20000c38
 8008448:	20000c30 	.word	0x20000c30
 800844c:	20000c34 	.word	0x20000c34

08008450 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008450:	b480      	push	{r7}
 8008452:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008454:	4b05      	ldr	r3, [pc, #20]	; (800846c <HAL_IncTick+0x1c>)
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	4b05      	ldr	r3, [pc, #20]	; (8008470 <HAL_IncTick+0x20>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4413      	add	r3, r2
 800845e:	4a03      	ldr	r2, [pc, #12]	; (800846c <HAL_IncTick+0x1c>)
 8008460:	6013      	str	r3, [r2, #0]
}
 8008462:	bf00      	nop
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr
 800846c:	20002928 	.word	0x20002928
 8008470:	20000c38 	.word	0x20000c38

08008474 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008474:	b480      	push	{r7}
 8008476:	af00      	add	r7, sp, #0
  return uwTick;
 8008478:	4b03      	ldr	r3, [pc, #12]	; (8008488 <HAL_GetTick+0x14>)
 800847a:	681b      	ldr	r3, [r3, #0]
}
 800847c:	4618      	mov	r0, r3
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr
 8008486:	bf00      	nop
 8008488:	20002928 	.word	0x20002928

0800848c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008494:	f7ff ffee 	bl	8008474 <HAL_GetTick>
 8008498:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084a4:	d004      	beq.n	80084b0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80084a6:	4b09      	ldr	r3, [pc, #36]	; (80084cc <HAL_Delay+0x40>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	68fa      	ldr	r2, [r7, #12]
 80084ac:	4413      	add	r3, r2
 80084ae:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80084b0:	bf00      	nop
 80084b2:	f7ff ffdf 	bl	8008474 <HAL_GetTick>
 80084b6:	4602      	mov	r2, r0
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	1ad3      	subs	r3, r2, r3
 80084bc:	68fa      	ldr	r2, [r7, #12]
 80084be:	429a      	cmp	r2, r3
 80084c0:	d8f7      	bhi.n	80084b2 <HAL_Delay+0x26>
  {
  }
}
 80084c2:	bf00      	nop
 80084c4:	3710      	adds	r7, #16
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
 80084ca:	bf00      	nop
 80084cc:	20000c38 	.word	0x20000c38

080084d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	431a      	orrs	r2, r3
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	609a      	str	r2, [r3, #8]
}
 80084ea:	bf00      	nop
 80084ec:	370c      	adds	r7, #12
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr

080084f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80084f6:	b480      	push	{r7}
 80084f8:	b083      	sub	sp, #12
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
 80084fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	431a      	orrs	r2, r3
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	609a      	str	r2, [r3, #8]
}
 8008510:	bf00      	nop
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800852c:	4618      	mov	r0, r3
 800852e:	370c      	adds	r7, #12
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8008538:	b490      	push	{r4, r7}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	60b9      	str	r1, [r7, #8]
 8008542:	607a      	str	r2, [r7, #4]
 8008544:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	3360      	adds	r3, #96	; 0x60
 800854a:	461a      	mov	r2, r3
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	4413      	add	r3, r2
 8008552:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008554:	6822      	ldr	r2, [r4, #0]
 8008556:	4b08      	ldr	r3, [pc, #32]	; (8008578 <LL_ADC_SetOffset+0x40>)
 8008558:	4013      	ands	r3, r2
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8008560:	683a      	ldr	r2, [r7, #0]
 8008562:	430a      	orrs	r2, r1
 8008564:	4313      	orrs	r3, r2
 8008566:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800856a:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800856c:	bf00      	nop
 800856e:	3710      	adds	r7, #16
 8008570:	46bd      	mov	sp, r7
 8008572:	bc90      	pop	{r4, r7}
 8008574:	4770      	bx	lr
 8008576:	bf00      	nop
 8008578:	03fff000 	.word	0x03fff000

0800857c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800857c:	b490      	push	{r4, r7}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	3360      	adds	r3, #96	; 0x60
 800858a:	461a      	mov	r2, r3
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	4413      	add	r3, r2
 8008592:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008594:	6823      	ldr	r3, [r4, #0]
 8008596:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800859a:	4618      	mov	r0, r3
 800859c:	3708      	adds	r7, #8
 800859e:	46bd      	mov	sp, r7
 80085a0:	bc90      	pop	{r4, r7}
 80085a2:	4770      	bx	lr

080085a4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80085a4:	b490      	push	{r4, r7}
 80085a6:	b084      	sub	sp, #16
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	3360      	adds	r3, #96	; 0x60
 80085b4:	461a      	mov	r2, r3
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	4413      	add	r3, r2
 80085bc:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80085be:	6823      	ldr	r3, [r4, #0]
 80085c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	4313      	orrs	r3, r2
 80085c8:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80085ca:	bf00      	nop
 80085cc:	3710      	adds	r7, #16
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bc90      	pop	{r4, r7}
 80085d2:	4770      	bx	lr

080085d4 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80085d4:	b490      	push	{r4, r7}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	3360      	adds	r3, #96	; 0x60
 80085e4:	461a      	mov	r2, r3
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	009b      	lsls	r3, r3, #2
 80085ea:	4413      	add	r3, r2
 80085ec:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80085ee:	6823      	ldr	r3, [r4, #0]
 80085f0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	4313      	orrs	r3, r2
 80085f8:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80085fa:	bf00      	nop
 80085fc:	3710      	adds	r7, #16
 80085fe:	46bd      	mov	sp, r7
 8008600:	bc90      	pop	{r4, r7}
 8008602:	4770      	bx	lr

08008604 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8008604:	b490      	push	{r4, r7}
 8008606:	b084      	sub	sp, #16
 8008608:	af00      	add	r7, sp, #0
 800860a:	60f8      	str	r0, [r7, #12]
 800860c:	60b9      	str	r1, [r7, #8]
 800860e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	3360      	adds	r3, #96	; 0x60
 8008614:	461a      	mov	r2, r3
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	4413      	add	r3, r2
 800861c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800861e:	6823      	ldr	r3, [r4, #0]
 8008620:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	4313      	orrs	r3, r2
 8008628:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800862a:	bf00      	nop
 800862c:	3710      	adds	r7, #16
 800862e:	46bd      	mov	sp, r7
 8008630:	bc90      	pop	{r4, r7}
 8008632:	4770      	bx	lr

08008634 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8008634:	b480      	push	{r7}
 8008636:	b083      	sub	sp, #12
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	695b      	ldr	r3, [r3, #20]
 8008642:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	431a      	orrs	r2, r3
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	615a      	str	r2, [r3, #20]
}
 800864e:	bf00      	nop
 8008650:	370c      	adds	r7, #12
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr

0800865a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800865a:	b490      	push	{r4, r7}
 800865c:	b084      	sub	sp, #16
 800865e:	af00      	add	r7, sp, #0
 8008660:	60f8      	str	r0, [r7, #12]
 8008662:	60b9      	str	r1, [r7, #8]
 8008664:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	3330      	adds	r3, #48	; 0x30
 800866a:	461a      	mov	r2, r3
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	0a1b      	lsrs	r3, r3, #8
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	f003 030c 	and.w	r3, r3, #12
 8008676:	4413      	add	r3, r2
 8008678:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800867a:	6822      	ldr	r2, [r4, #0]
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	f003 031f 	and.w	r3, r3, #31
 8008682:	211f      	movs	r1, #31
 8008684:	fa01 f303 	lsl.w	r3, r1, r3
 8008688:	43db      	mvns	r3, r3
 800868a:	401a      	ands	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	0e9b      	lsrs	r3, r3, #26
 8008690:	f003 011f 	and.w	r1, r3, #31
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	f003 031f 	and.w	r3, r3, #31
 800869a:	fa01 f303 	lsl.w	r3, r1, r3
 800869e:	4313      	orrs	r3, r2
 80086a0:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80086a2:	bf00      	nop
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bc90      	pop	{r4, r7}
 80086aa:	4770      	bx	lr

080086ac <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80086ac:	b490      	push	{r4, r7}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	60b9      	str	r1, [r7, #8]
 80086b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	3314      	adds	r3, #20
 80086bc:	461a      	mov	r2, r3
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	0e5b      	lsrs	r3, r3, #25
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	f003 0304 	and.w	r3, r3, #4
 80086c8:	4413      	add	r3, r2
 80086ca:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80086cc:	6822      	ldr	r2, [r4, #0]
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	0d1b      	lsrs	r3, r3, #20
 80086d2:	f003 031f 	and.w	r3, r3, #31
 80086d6:	2107      	movs	r1, #7
 80086d8:	fa01 f303 	lsl.w	r3, r1, r3
 80086dc:	43db      	mvns	r3, r3
 80086de:	401a      	ands	r2, r3
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	0d1b      	lsrs	r3, r3, #20
 80086e4:	f003 031f 	and.w	r3, r3, #31
 80086e8:	6879      	ldr	r1, [r7, #4]
 80086ea:	fa01 f303 	lsl.w	r3, r1, r3
 80086ee:	4313      	orrs	r3, r2
 80086f0:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80086f2:	bf00      	nop
 80086f4:	3710      	adds	r7, #16
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bc90      	pop	{r4, r7}
 80086fa:	4770      	bx	lr

080086fc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b085      	sub	sp, #20
 8008700:	af00      	add	r7, sp, #0
 8008702:	60f8      	str	r0, [r7, #12]
 8008704:	60b9      	str	r1, [r7, #8]
 8008706:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008714:	43db      	mvns	r3, r3
 8008716:	401a      	ands	r2, r3
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f003 0318 	and.w	r3, r3, #24
 800871e:	4908      	ldr	r1, [pc, #32]	; (8008740 <LL_ADC_SetChannelSingleDiff+0x44>)
 8008720:	40d9      	lsrs	r1, r3
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	400b      	ands	r3, r1
 8008726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800872a:	431a      	orrs	r2, r3
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8008732:	bf00      	nop
 8008734:	3714      	adds	r7, #20
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr
 800873e:	bf00      	nop
 8008740:	0007ffff 	.word	0x0007ffff

08008744 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8008744:	b480      	push	{r7}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8008754:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	6093      	str	r3, [r2, #8]
}
 800875c:	bf00      	nop
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008778:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800877c:	d101      	bne.n	8008782 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800877e:	2301      	movs	r3, #1
 8008780:	e000      	b.n	8008784 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8008782:	2300      	movs	r3, #0
}
 8008784:	4618      	mov	r0, r3
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr

08008790 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80087a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80087a4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80087ac:	bf00      	nop
 80087ae:	370c      	adds	r7, #12
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr

080087b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087cc:	d101      	bne.n	80087d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80087ce:	2301      	movs	r3, #1
 80087d0:	e000      	b.n	80087d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80087d2:	2300      	movs	r3, #0
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	370c      	adds	r7, #12
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b083      	sub	sp, #12
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	689b      	ldr	r3, [r3, #8]
 80087ec:	f003 0301 	and.w	r3, r3, #1
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d101      	bne.n	80087f8 <LL_ADC_IsEnabled+0x18>
 80087f4:	2301      	movs	r3, #1
 80087f6:	e000      	b.n	80087fa <LL_ADC_IsEnabled+0x1a>
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	370c      	adds	r7, #12
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr

08008806 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8008806:	b480      	push	{r7}
 8008808:	b083      	sub	sp, #12
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	f003 0304 	and.w	r3, r3, #4
 8008816:	2b04      	cmp	r3, #4
 8008818:	d101      	bne.n	800881e <LL_ADC_REG_IsConversionOngoing+0x18>
 800881a:	2301      	movs	r3, #1
 800881c:	e000      	b.n	8008820 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800881e:	2300      	movs	r3, #0
}
 8008820:	4618      	mov	r0, r3
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800882c:	b480      	push	{r7}
 800882e:	b083      	sub	sp, #12
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	f003 0308 	and.w	r3, r3, #8
 800883c:	2b08      	cmp	r3, #8
 800883e:	d101      	bne.n	8008844 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8008840:	2301      	movs	r3, #1
 8008842:	e000      	b.n	8008846 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8008844:	2300      	movs	r3, #0
}
 8008846:	4618      	mov	r0, r3
 8008848:	370c      	adds	r7, #12
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr
	...

08008854 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008854:	b590      	push	{r4, r7, lr}
 8008856:	b089      	sub	sp, #36	; 0x24
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800885c:	2300      	movs	r3, #0
 800885e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8008860:	2300      	movs	r3, #0
 8008862:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d101      	bne.n	800886e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800886a:	2301      	movs	r3, #1
 800886c:	e1ad      	b.n	8008bca <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	695b      	ldr	r3, [r3, #20]
 8008872:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008878:	2b00      	cmp	r3, #0
 800887a:	d109      	bne.n	8008890 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f7fe f8dd 	bl	8006a3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4618      	mov	r0, r3
 8008896:	f7ff ff67 	bl	8008768 <LL_ADC_IsDeepPowerDownEnabled>
 800889a:	4603      	mov	r3, r0
 800889c:	2b00      	cmp	r3, #0
 800889e:	d004      	beq.n	80088aa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4618      	mov	r0, r3
 80088a6:	f7ff ff4d 	bl	8008744 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7ff ff82 	bl	80087b8 <LL_ADC_IsInternalRegulatorEnabled>
 80088b4:	4603      	mov	r3, r0
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d113      	bne.n	80088e2 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4618      	mov	r0, r3
 80088c0:	f7ff ff66 	bl	8008790 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80088c4:	4b9e      	ldr	r3, [pc, #632]	; (8008b40 <HAL_ADC_Init+0x2ec>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	099b      	lsrs	r3, r3, #6
 80088ca:	4a9e      	ldr	r2, [pc, #632]	; (8008b44 <HAL_ADC_Init+0x2f0>)
 80088cc:	fba2 2303 	umull	r2, r3, r2, r3
 80088d0:	099b      	lsrs	r3, r3, #6
 80088d2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80088d4:	e002      	b.n	80088dc <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	3b01      	subs	r3, #1
 80088da:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d1f9      	bne.n	80088d6 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4618      	mov	r0, r3
 80088e8:	f7ff ff66 	bl	80087b8 <LL_ADC_IsInternalRegulatorEnabled>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d10d      	bne.n	800890e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088f6:	f043 0210 	orr.w	r2, r3, #16
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008902:	f043 0201 	orr.w	r2, r3, #1
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800890a:	2301      	movs	r3, #1
 800890c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4618      	mov	r0, r3
 8008914:	f7ff ff77 	bl	8008806 <LL_ADC_REG_IsConversionOngoing>
 8008918:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800891e:	f003 0310 	and.w	r3, r3, #16
 8008922:	2b00      	cmp	r3, #0
 8008924:	f040 8148 	bne.w	8008bb8 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	2b00      	cmp	r3, #0
 800892c:	f040 8144 	bne.w	8008bb8 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008934:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8008938:	f043 0202 	orr.w	r2, r3, #2
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4618      	mov	r0, r3
 8008946:	f7ff ff4b 	bl	80087e0 <LL_ADC_IsEnabled>
 800894a:	4603      	mov	r3, r0
 800894c:	2b00      	cmp	r3, #0
 800894e:	d141      	bne.n	80089d4 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008958:	d004      	beq.n	8008964 <HAL_ADC_Init+0x110>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a7a      	ldr	r2, [pc, #488]	; (8008b48 <HAL_ADC_Init+0x2f4>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d10f      	bne.n	8008984 <HAL_ADC_Init+0x130>
 8008964:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008968:	f7ff ff3a 	bl	80087e0 <LL_ADC_IsEnabled>
 800896c:	4604      	mov	r4, r0
 800896e:	4876      	ldr	r0, [pc, #472]	; (8008b48 <HAL_ADC_Init+0x2f4>)
 8008970:	f7ff ff36 	bl	80087e0 <LL_ADC_IsEnabled>
 8008974:	4603      	mov	r3, r0
 8008976:	4323      	orrs	r3, r4
 8008978:	2b00      	cmp	r3, #0
 800897a:	bf0c      	ite	eq
 800897c:	2301      	moveq	r3, #1
 800897e:	2300      	movne	r3, #0
 8008980:	b2db      	uxtb	r3, r3
 8008982:	e012      	b.n	80089aa <HAL_ADC_Init+0x156>
 8008984:	4871      	ldr	r0, [pc, #452]	; (8008b4c <HAL_ADC_Init+0x2f8>)
 8008986:	f7ff ff2b 	bl	80087e0 <LL_ADC_IsEnabled>
 800898a:	4604      	mov	r4, r0
 800898c:	4870      	ldr	r0, [pc, #448]	; (8008b50 <HAL_ADC_Init+0x2fc>)
 800898e:	f7ff ff27 	bl	80087e0 <LL_ADC_IsEnabled>
 8008992:	4603      	mov	r3, r0
 8008994:	431c      	orrs	r4, r3
 8008996:	486f      	ldr	r0, [pc, #444]	; (8008b54 <HAL_ADC_Init+0x300>)
 8008998:	f7ff ff22 	bl	80087e0 <LL_ADC_IsEnabled>
 800899c:	4603      	mov	r3, r0
 800899e:	4323      	orrs	r3, r4
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	bf0c      	ite	eq
 80089a4:	2301      	moveq	r3, #1
 80089a6:	2300      	movne	r3, #0
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d012      	beq.n	80089d4 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80089b6:	d004      	beq.n	80089c2 <HAL_ADC_Init+0x16e>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a62      	ldr	r2, [pc, #392]	; (8008b48 <HAL_ADC_Init+0x2f4>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d101      	bne.n	80089c6 <HAL_ADC_Init+0x172>
 80089c2:	4a65      	ldr	r2, [pc, #404]	; (8008b58 <HAL_ADC_Init+0x304>)
 80089c4:	e000      	b.n	80089c8 <HAL_ADC_Init+0x174>
 80089c6:	4a65      	ldr	r2, [pc, #404]	; (8008b5c <HAL_ADC_Init+0x308>)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	4619      	mov	r1, r3
 80089ce:	4610      	mov	r0, r2
 80089d0:	f7ff fd7e 	bl	80084d0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	7f5b      	ldrb	r3, [r3, #29]
 80089d8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80089de:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80089e4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80089ea:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80089f2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80089f4:	4313      	orrs	r3, r2
 80089f6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80089fe:	2b01      	cmp	r3, #1
 8008a00:	d106      	bne.n	8008a10 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a06:	3b01      	subs	r3, #1
 8008a08:	045b      	lsls	r3, r3, #17
 8008a0a:	69ba      	ldr	r2, [r7, #24]
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d009      	beq.n	8008a2c <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a1c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a24:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008a26:	69ba      	ldr	r2, [r7, #24]
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	68da      	ldr	r2, [r3, #12]
 8008a32:	4b4b      	ldr	r3, [pc, #300]	; (8008b60 <HAL_ADC_Init+0x30c>)
 8008a34:	4013      	ands	r3, r2
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	6812      	ldr	r2, [r2, #0]
 8008a3a:	69b9      	ldr	r1, [r7, #24]
 8008a3c:	430b      	orrs	r3, r1
 8008a3e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	691b      	ldr	r3, [r3, #16]
 8008a46:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	430a      	orrs	r2, r1
 8008a54:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7ff fed3 	bl	8008806 <LL_ADC_REG_IsConversionOngoing>
 8008a60:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7ff fee0 	bl	800882c <LL_ADC_INJ_IsConversionOngoing>
 8008a6c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d17f      	bne.n	8008b74 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d17c      	bne.n	8008b74 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008a7e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008a86:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	68db      	ldr	r3, [r3, #12]
 8008a92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a96:	f023 0302 	bic.w	r3, r3, #2
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	6812      	ldr	r2, [r2, #0]
 8008a9e:	69b9      	ldr	r1, [r7, #24]
 8008aa0:	430b      	orrs	r3, r1
 8008aa2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	691b      	ldr	r3, [r3, #16]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d017      	beq.n	8008adc <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	691a      	ldr	r2, [r3, #16]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008aba:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008ac4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008ac8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	6911      	ldr	r1, [r2, #16]
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	6812      	ldr	r2, [r2, #0]
 8008ad4:	430b      	orrs	r3, r1
 8008ad6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8008ada:	e013      	b.n	8008b04 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	691a      	ldr	r2, [r3, #16]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008aea:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	6812      	ldr	r2, [r2, #0]
 8008af8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008afc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008b00:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d12a      	bne.n	8008b64 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	691b      	ldr	r3, [r3, #16]
 8008b14:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008b18:	f023 0304 	bic.w	r3, r3, #4
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008b24:	4311      	orrs	r1, r2
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008b2a:	4311      	orrs	r1, r2
 8008b2c:	687a      	ldr	r2, [r7, #4]
 8008b2e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008b30:	430a      	orrs	r2, r1
 8008b32:	431a      	orrs	r2, r3
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f042 0201 	orr.w	r2, r2, #1
 8008b3c:	611a      	str	r2, [r3, #16]
 8008b3e:	e019      	b.n	8008b74 <HAL_ADC_Init+0x320>
 8008b40:	20000c30 	.word	0x20000c30
 8008b44:	053e2d63 	.word	0x053e2d63
 8008b48:	50000100 	.word	0x50000100
 8008b4c:	50000400 	.word	0x50000400
 8008b50:	50000500 	.word	0x50000500
 8008b54:	50000600 	.word	0x50000600
 8008b58:	50000300 	.word	0x50000300
 8008b5c:	50000700 	.word	0x50000700
 8008b60:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	691a      	ldr	r2, [r3, #16]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f022 0201 	bic.w	r2, r2, #1
 8008b72:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	695b      	ldr	r3, [r3, #20]
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d10c      	bne.n	8008b96 <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b82:	f023 010f 	bic.w	r1, r3, #15
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6a1b      	ldr	r3, [r3, #32]
 8008b8a:	1e5a      	subs	r2, r3, #1
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	430a      	orrs	r2, r1
 8008b92:	631a      	str	r2, [r3, #48]	; 0x30
 8008b94:	e007      	b.n	8008ba6 <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f022 020f 	bic.w	r2, r2, #15
 8008ba4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008baa:	f023 0303 	bic.w	r3, r3, #3
 8008bae:	f043 0201 	orr.w	r2, r3, #1
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	65da      	str	r2, [r3, #92]	; 0x5c
 8008bb6:	e007      	b.n	8008bc8 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bbc:	f043 0210 	orr.w	r2, r3, #16
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8008bc8:	7ffb      	ldrb	r3, [r7, #31]
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3724      	adds	r7, #36	; 0x24
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd90      	pop	{r4, r7, pc}
 8008bd2:	bf00      	nop

08008bd4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b0a6      	sub	sp, #152	; 0x98
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008bde:	2300      	movs	r3, #0
 8008be0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8008be4:	2300      	movs	r3, #0
 8008be6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008bee:	2b01      	cmp	r3, #1
 8008bf0:	d101      	bne.n	8008bf6 <HAL_ADC_ConfigChannel+0x22>
 8008bf2:	2302      	movs	r3, #2
 8008bf4:	e38e      	b.n	8009314 <HAL_ADC_ConfigChannel+0x740>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4618      	mov	r0, r3
 8008c04:	f7ff fdff 	bl	8008806 <LL_ADC_REG_IsConversionOngoing>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	f040 836f 	bne.w	80092ee <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6818      	ldr	r0, [r3, #0]
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	6859      	ldr	r1, [r3, #4]
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	f7ff fd1c 	bl	800865a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4618      	mov	r0, r3
 8008c28:	f7ff fded 	bl	8008806 <LL_ADC_REG_IsConversionOngoing>
 8008c2c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4618      	mov	r0, r3
 8008c36:	f7ff fdf9 	bl	800882c <LL_ADC_INJ_IsConversionOngoing>
 8008c3a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008c3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	f040 817b 	bne.w	8008f3e <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008c48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	f040 8176 	bne.w	8008f3e <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c5a:	d10f      	bne.n	8008c7c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6818      	ldr	r0, [r3, #0]
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	2200      	movs	r2, #0
 8008c66:	4619      	mov	r1, r3
 8008c68:	f7ff fd20 	bl	80086ac <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008c74:	4618      	mov	r0, r3
 8008c76:	f7ff fcdd 	bl	8008634 <LL_ADC_SetSamplingTimeCommonConfig>
 8008c7a:	e00e      	b.n	8008c9a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6818      	ldr	r0, [r3, #0]
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	6819      	ldr	r1, [r3, #0]
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	689b      	ldr	r3, [r3, #8]
 8008c88:	461a      	mov	r2, r3
 8008c8a:	f7ff fd0f 	bl	80086ac <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	2100      	movs	r1, #0
 8008c94:	4618      	mov	r0, r3
 8008c96:	f7ff fccd 	bl	8008634 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	695a      	ldr	r2, [r3, #20]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	08db      	lsrs	r3, r3, #3
 8008ca6:	f003 0303 	and.w	r3, r3, #3
 8008caa:	005b      	lsls	r3, r3, #1
 8008cac:	fa02 f303 	lsl.w	r3, r2, r3
 8008cb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	691b      	ldr	r3, [r3, #16]
 8008cb8:	2b04      	cmp	r3, #4
 8008cba:	d022      	beq.n	8008d02 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6818      	ldr	r0, [r3, #0]
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	6919      	ldr	r1, [r3, #16]
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008ccc:	f7ff fc34 	bl	8008538 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6818      	ldr	r0, [r3, #0]
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	6919      	ldr	r1, [r3, #16]
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	699b      	ldr	r3, [r3, #24]
 8008cdc:	461a      	mov	r2, r3
 8008cde:	f7ff fc79 	bl	80085d4 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6818      	ldr	r0, [r3, #0]
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	6919      	ldr	r1, [r3, #16]
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	7f1b      	ldrb	r3, [r3, #28]
 8008cee:	2b01      	cmp	r3, #1
 8008cf0:	d102      	bne.n	8008cf8 <HAL_ADC_ConfigChannel+0x124>
 8008cf2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008cf6:	e000      	b.n	8008cfa <HAL_ADC_ConfigChannel+0x126>
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	f7ff fc82 	bl	8008604 <LL_ADC_SetOffsetSaturation>
 8008d00:	e11d      	b.n	8008f3e <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	2100      	movs	r1, #0
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f7ff fc37 	bl	800857c <LL_ADC_GetOffsetChannel>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d10a      	bne.n	8008d2e <HAL_ADC_ConfigChannel+0x15a>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	2100      	movs	r1, #0
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f7ff fc2c 	bl	800857c <LL_ADC_GetOffsetChannel>
 8008d24:	4603      	mov	r3, r0
 8008d26:	0e9b      	lsrs	r3, r3, #26
 8008d28:	f003 021f 	and.w	r2, r3, #31
 8008d2c:	e012      	b.n	8008d54 <HAL_ADC_ConfigChannel+0x180>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	2100      	movs	r1, #0
 8008d34:	4618      	mov	r0, r3
 8008d36:	f7ff fc21 	bl	800857c <LL_ADC_GetOffsetChannel>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d44:	fa93 f3a3 	rbit	r3, r3
 8008d48:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8008d4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008d4c:	fab3 f383 	clz	r3, r3
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	461a      	mov	r2, r3
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d105      	bne.n	8008d6c <HAL_ADC_ConfigChannel+0x198>
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	0e9b      	lsrs	r3, r3, #26
 8008d66:	f003 031f 	and.w	r3, r3, #31
 8008d6a:	e00a      	b.n	8008d82 <HAL_ADC_ConfigChannel+0x1ae>
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d74:	fa93 f3a3 	rbit	r3, r3
 8008d78:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8008d7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d7c:	fab3 f383 	clz	r3, r3
 8008d80:	b2db      	uxtb	r3, r3
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d106      	bne.n	8008d94 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	2100      	movs	r1, #0
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7ff fc08 	bl	80085a4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	2101      	movs	r1, #1
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7ff fbee 	bl	800857c <LL_ADC_GetOffsetChannel>
 8008da0:	4603      	mov	r3, r0
 8008da2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d10a      	bne.n	8008dc0 <HAL_ADC_ConfigChannel+0x1ec>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	2101      	movs	r1, #1
 8008db0:	4618      	mov	r0, r3
 8008db2:	f7ff fbe3 	bl	800857c <LL_ADC_GetOffsetChannel>
 8008db6:	4603      	mov	r3, r0
 8008db8:	0e9b      	lsrs	r3, r3, #26
 8008dba:	f003 021f 	and.w	r2, r3, #31
 8008dbe:	e010      	b.n	8008de2 <HAL_ADC_ConfigChannel+0x20e>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	2101      	movs	r1, #1
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f7ff fbd8 	bl	800857c <LL_ADC_GetOffsetChannel>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008dd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008dd2:	fa93 f3a3 	rbit	r3, r3
 8008dd6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8008dd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dda:	fab3 f383 	clz	r3, r3
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	461a      	mov	r2, r3
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d105      	bne.n	8008dfa <HAL_ADC_ConfigChannel+0x226>
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	0e9b      	lsrs	r3, r3, #26
 8008df4:	f003 031f 	and.w	r3, r3, #31
 8008df8:	e00a      	b.n	8008e10 <HAL_ADC_ConfigChannel+0x23c>
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e02:	fa93 f3a3 	rbit	r3, r3
 8008e06:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8008e08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e0a:	fab3 f383 	clz	r3, r3
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d106      	bne.n	8008e22 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	2101      	movs	r1, #1
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f7ff fbc1 	bl	80085a4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	2102      	movs	r1, #2
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f7ff fba7 	bl	800857c <LL_ADC_GetOffsetChannel>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d10a      	bne.n	8008e4e <HAL_ADC_ConfigChannel+0x27a>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	2102      	movs	r1, #2
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7ff fb9c 	bl	800857c <LL_ADC_GetOffsetChannel>
 8008e44:	4603      	mov	r3, r0
 8008e46:	0e9b      	lsrs	r3, r3, #26
 8008e48:	f003 021f 	and.w	r2, r3, #31
 8008e4c:	e010      	b.n	8008e70 <HAL_ADC_ConfigChannel+0x29c>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	2102      	movs	r1, #2
 8008e54:	4618      	mov	r0, r3
 8008e56:	f7ff fb91 	bl	800857c <LL_ADC_GetOffsetChannel>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e60:	fa93 f3a3 	rbit	r3, r3
 8008e64:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8008e66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e68:	fab3 f383 	clz	r3, r3
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	461a      	mov	r2, r3
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d105      	bne.n	8008e88 <HAL_ADC_ConfigChannel+0x2b4>
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	0e9b      	lsrs	r3, r3, #26
 8008e82:	f003 031f 	and.w	r3, r3, #31
 8008e86:	e00a      	b.n	8008e9e <HAL_ADC_ConfigChannel+0x2ca>
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e90:	fa93 f3a3 	rbit	r3, r3
 8008e94:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8008e96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e98:	fab3 f383 	clz	r3, r3
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d106      	bne.n	8008eb0 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	2102      	movs	r1, #2
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f7ff fb7a 	bl	80085a4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	2103      	movs	r1, #3
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f7ff fb60 	bl	800857c <LL_ADC_GetOffsetChannel>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d10a      	bne.n	8008edc <HAL_ADC_ConfigChannel+0x308>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	2103      	movs	r1, #3
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f7ff fb55 	bl	800857c <LL_ADC_GetOffsetChannel>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	0e9b      	lsrs	r3, r3, #26
 8008ed6:	f003 021f 	and.w	r2, r3, #31
 8008eda:	e010      	b.n	8008efe <HAL_ADC_ConfigChannel+0x32a>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	2103      	movs	r1, #3
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f7ff fb4a 	bl	800857c <LL_ADC_GetOffsetChannel>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008eec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008eee:	fa93 f3a3 	rbit	r3, r3
 8008ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008ef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ef6:	fab3 f383 	clz	r3, r3
 8008efa:	b2db      	uxtb	r3, r3
 8008efc:	461a      	mov	r2, r3
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d105      	bne.n	8008f16 <HAL_ADC_ConfigChannel+0x342>
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	0e9b      	lsrs	r3, r3, #26
 8008f10:	f003 031f 	and.w	r3, r3, #31
 8008f14:	e00a      	b.n	8008f2c <HAL_ADC_ConfigChannel+0x358>
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f1e:	fa93 f3a3 	rbit	r3, r3
 8008f22:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8008f24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f26:	fab3 f383 	clz	r3, r3
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d106      	bne.n	8008f3e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	2200      	movs	r2, #0
 8008f36:	2103      	movs	r1, #3
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f7ff fb33 	bl	80085a4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7ff fc4c 	bl	80087e0 <LL_ADC_IsEnabled>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	f040 810c 	bne.w	8009168 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6818      	ldr	r0, [r3, #0]
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	6819      	ldr	r1, [r3, #0]
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	68db      	ldr	r3, [r3, #12]
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	f7ff fbcd 	bl	80086fc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	68db      	ldr	r3, [r3, #12]
 8008f66:	4aaf      	ldr	r2, [pc, #700]	; (8009224 <HAL_ADC_ConfigChannel+0x650>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	f040 80fd 	bne.w	8009168 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d10b      	bne.n	8008f96 <HAL_ADC_ConfigChannel+0x3c2>
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	0e9b      	lsrs	r3, r3, #26
 8008f84:	3301      	adds	r3, #1
 8008f86:	f003 031f 	and.w	r3, r3, #31
 8008f8a:	2b09      	cmp	r3, #9
 8008f8c:	bf94      	ite	ls
 8008f8e:	2301      	movls	r3, #1
 8008f90:	2300      	movhi	r3, #0
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	e012      	b.n	8008fbc <HAL_ADC_ConfigChannel+0x3e8>
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f9e:	fa93 f3a3 	rbit	r3, r3
 8008fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8008fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fa6:	fab3 f383 	clz	r3, r3
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	3301      	adds	r3, #1
 8008fae:	f003 031f 	and.w	r3, r3, #31
 8008fb2:	2b09      	cmp	r3, #9
 8008fb4:	bf94      	ite	ls
 8008fb6:	2301      	movls	r3, #1
 8008fb8:	2300      	movhi	r3, #0
 8008fba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d064      	beq.n	800908a <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d107      	bne.n	8008fdc <HAL_ADC_ConfigChannel+0x408>
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	0e9b      	lsrs	r3, r3, #26
 8008fd2:	3301      	adds	r3, #1
 8008fd4:	069b      	lsls	r3, r3, #26
 8008fd6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008fda:	e00e      	b.n	8008ffa <HAL_ADC_ConfigChannel+0x426>
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe4:	fa93 f3a3 	rbit	r3, r3
 8008fe8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fec:	fab3 f383 	clz	r3, r3
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	069b      	lsls	r3, r3, #26
 8008ff6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009002:	2b00      	cmp	r3, #0
 8009004:	d109      	bne.n	800901a <HAL_ADC_ConfigChannel+0x446>
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	0e9b      	lsrs	r3, r3, #26
 800900c:	3301      	adds	r3, #1
 800900e:	f003 031f 	and.w	r3, r3, #31
 8009012:	2101      	movs	r1, #1
 8009014:	fa01 f303 	lsl.w	r3, r1, r3
 8009018:	e010      	b.n	800903c <HAL_ADC_ConfigChannel+0x468>
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009022:	fa93 f3a3 	rbit	r3, r3
 8009026:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8009028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800902a:	fab3 f383 	clz	r3, r3
 800902e:	b2db      	uxtb	r3, r3
 8009030:	3301      	adds	r3, #1
 8009032:	f003 031f 	and.w	r3, r3, #31
 8009036:	2101      	movs	r1, #1
 8009038:	fa01 f303 	lsl.w	r3, r1, r3
 800903c:	ea42 0103 	orr.w	r1, r2, r3
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009048:	2b00      	cmp	r3, #0
 800904a:	d10a      	bne.n	8009062 <HAL_ADC_ConfigChannel+0x48e>
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	0e9b      	lsrs	r3, r3, #26
 8009052:	3301      	adds	r3, #1
 8009054:	f003 021f 	and.w	r2, r3, #31
 8009058:	4613      	mov	r3, r2
 800905a:	005b      	lsls	r3, r3, #1
 800905c:	4413      	add	r3, r2
 800905e:	051b      	lsls	r3, r3, #20
 8009060:	e011      	b.n	8009086 <HAL_ADC_ConfigChannel+0x4b2>
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800906a:	fa93 f3a3 	rbit	r3, r3
 800906e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8009070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009072:	fab3 f383 	clz	r3, r3
 8009076:	b2db      	uxtb	r3, r3
 8009078:	3301      	adds	r3, #1
 800907a:	f003 021f 	and.w	r2, r3, #31
 800907e:	4613      	mov	r3, r2
 8009080:	005b      	lsls	r3, r3, #1
 8009082:	4413      	add	r3, r2
 8009084:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009086:	430b      	orrs	r3, r1
 8009088:	e069      	b.n	800915e <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009092:	2b00      	cmp	r3, #0
 8009094:	d107      	bne.n	80090a6 <HAL_ADC_ConfigChannel+0x4d2>
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	0e9b      	lsrs	r3, r3, #26
 800909c:	3301      	adds	r3, #1
 800909e:	069b      	lsls	r3, r3, #26
 80090a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80090a4:	e00e      	b.n	80090c4 <HAL_ADC_ConfigChannel+0x4f0>
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090ac:	6a3b      	ldr	r3, [r7, #32]
 80090ae:	fa93 f3a3 	rbit	r3, r3
 80090b2:	61fb      	str	r3, [r7, #28]
  return result;
 80090b4:	69fb      	ldr	r3, [r7, #28]
 80090b6:	fab3 f383 	clz	r3, r3
 80090ba:	b2db      	uxtb	r3, r3
 80090bc:	3301      	adds	r3, #1
 80090be:	069b      	lsls	r3, r3, #26
 80090c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d109      	bne.n	80090e4 <HAL_ADC_ConfigChannel+0x510>
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	0e9b      	lsrs	r3, r3, #26
 80090d6:	3301      	adds	r3, #1
 80090d8:	f003 031f 	and.w	r3, r3, #31
 80090dc:	2101      	movs	r1, #1
 80090de:	fa01 f303 	lsl.w	r3, r1, r3
 80090e2:	e010      	b.n	8009106 <HAL_ADC_ConfigChannel+0x532>
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090ea:	69bb      	ldr	r3, [r7, #24]
 80090ec:	fa93 f3a3 	rbit	r3, r3
 80090f0:	617b      	str	r3, [r7, #20]
  return result;
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	fab3 f383 	clz	r3, r3
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	3301      	adds	r3, #1
 80090fc:	f003 031f 	and.w	r3, r3, #31
 8009100:	2101      	movs	r1, #1
 8009102:	fa01 f303 	lsl.w	r3, r1, r3
 8009106:	ea42 0103 	orr.w	r1, r2, r3
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009112:	2b00      	cmp	r3, #0
 8009114:	d10d      	bne.n	8009132 <HAL_ADC_ConfigChannel+0x55e>
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	0e9b      	lsrs	r3, r3, #26
 800911c:	3301      	adds	r3, #1
 800911e:	f003 021f 	and.w	r2, r3, #31
 8009122:	4613      	mov	r3, r2
 8009124:	005b      	lsls	r3, r3, #1
 8009126:	4413      	add	r3, r2
 8009128:	3b1e      	subs	r3, #30
 800912a:	051b      	lsls	r3, r3, #20
 800912c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009130:	e014      	b.n	800915c <HAL_ADC_ConfigChannel+0x588>
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	fa93 f3a3 	rbit	r3, r3
 800913e:	60fb      	str	r3, [r7, #12]
  return result;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	fab3 f383 	clz	r3, r3
 8009146:	b2db      	uxtb	r3, r3
 8009148:	3301      	adds	r3, #1
 800914a:	f003 021f 	and.w	r2, r3, #31
 800914e:	4613      	mov	r3, r2
 8009150:	005b      	lsls	r3, r3, #1
 8009152:	4413      	add	r3, r2
 8009154:	3b1e      	subs	r3, #30
 8009156:	051b      	lsls	r3, r3, #20
 8009158:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800915c:	430b      	orrs	r3, r1
 800915e:	683a      	ldr	r2, [r7, #0]
 8009160:	6892      	ldr	r2, [r2, #8]
 8009162:	4619      	mov	r1, r3
 8009164:	f7ff faa2 	bl	80086ac <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	4b2e      	ldr	r3, [pc, #184]	; (8009228 <HAL_ADC_ConfigChannel+0x654>)
 800916e:	4013      	ands	r3, r2
 8009170:	2b00      	cmp	r3, #0
 8009172:	f000 80c9 	beq.w	8009308 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800917e:	d004      	beq.n	800918a <HAL_ADC_ConfigChannel+0x5b6>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a29      	ldr	r2, [pc, #164]	; (800922c <HAL_ADC_ConfigChannel+0x658>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d101      	bne.n	800918e <HAL_ADC_ConfigChannel+0x5ba>
 800918a:	4b29      	ldr	r3, [pc, #164]	; (8009230 <HAL_ADC_ConfigChannel+0x65c>)
 800918c:	e000      	b.n	8009190 <HAL_ADC_ConfigChannel+0x5bc>
 800918e:	4b29      	ldr	r3, [pc, #164]	; (8009234 <HAL_ADC_ConfigChannel+0x660>)
 8009190:	4618      	mov	r0, r3
 8009192:	f7ff f9c3 	bl	800851c <LL_ADC_GetCommonPathInternalCh>
 8009196:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	4a26      	ldr	r2, [pc, #152]	; (8009238 <HAL_ADC_ConfigChannel+0x664>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d004      	beq.n	80091ae <HAL_ADC_ConfigChannel+0x5da>
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4a24      	ldr	r2, [pc, #144]	; (800923c <HAL_ADC_ConfigChannel+0x668>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d14e      	bne.n	800924c <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80091ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80091b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d148      	bne.n	800924c <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091c2:	d005      	beq.n	80091d0 <HAL_ADC_ConfigChannel+0x5fc>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4a1d      	ldr	r2, [pc, #116]	; (8009240 <HAL_ADC_ConfigChannel+0x66c>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	f040 8099 	bne.w	8009302 <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091d8:	d004      	beq.n	80091e4 <HAL_ADC_ConfigChannel+0x610>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a13      	ldr	r2, [pc, #76]	; (800922c <HAL_ADC_ConfigChannel+0x658>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d101      	bne.n	80091e8 <HAL_ADC_ConfigChannel+0x614>
 80091e4:	4a12      	ldr	r2, [pc, #72]	; (8009230 <HAL_ADC_ConfigChannel+0x65c>)
 80091e6:	e000      	b.n	80091ea <HAL_ADC_ConfigChannel+0x616>
 80091e8:	4a12      	ldr	r2, [pc, #72]	; (8009234 <HAL_ADC_ConfigChannel+0x660>)
 80091ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80091ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80091f2:	4619      	mov	r1, r3
 80091f4:	4610      	mov	r0, r2
 80091f6:	f7ff f97e 	bl	80084f6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80091fa:	4b12      	ldr	r3, [pc, #72]	; (8009244 <HAL_ADC_ConfigChannel+0x670>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	099b      	lsrs	r3, r3, #6
 8009200:	4a11      	ldr	r2, [pc, #68]	; (8009248 <HAL_ADC_ConfigChannel+0x674>)
 8009202:	fba2 2303 	umull	r2, r3, r2, r3
 8009206:	099a      	lsrs	r2, r3, #6
 8009208:	4613      	mov	r3, r2
 800920a:	005b      	lsls	r3, r3, #1
 800920c:	4413      	add	r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8009212:	e002      	b.n	800921a <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	3b01      	subs	r3, #1
 8009218:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d1f9      	bne.n	8009214 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009220:	e06f      	b.n	8009302 <HAL_ADC_ConfigChannel+0x72e>
 8009222:	bf00      	nop
 8009224:	407f0000 	.word	0x407f0000
 8009228:	80080000 	.word	0x80080000
 800922c:	50000100 	.word	0x50000100
 8009230:	50000300 	.word	0x50000300
 8009234:	50000700 	.word	0x50000700
 8009238:	c3210000 	.word	0xc3210000
 800923c:	90c00010 	.word	0x90c00010
 8009240:	50000600 	.word	0x50000600
 8009244:	20000c30 	.word	0x20000c30
 8009248:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a32      	ldr	r2, [pc, #200]	; (800931c <HAL_ADC_ConfigChannel+0x748>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d125      	bne.n	80092a2 <HAL_ADC_ConfigChannel+0x6ce>
 8009256:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800925a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800925e:	2b00      	cmp	r3, #0
 8009260:	d11f      	bne.n	80092a2 <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	4a2e      	ldr	r2, [pc, #184]	; (8009320 <HAL_ADC_ConfigChannel+0x74c>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d104      	bne.n	8009276 <HAL_ADC_ConfigChannel+0x6a2>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a2c      	ldr	r2, [pc, #176]	; (8009324 <HAL_ADC_ConfigChannel+0x750>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d047      	beq.n	8009306 <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800927e:	d004      	beq.n	800928a <HAL_ADC_ConfigChannel+0x6b6>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a26      	ldr	r2, [pc, #152]	; (8009320 <HAL_ADC_ConfigChannel+0x74c>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d101      	bne.n	800928e <HAL_ADC_ConfigChannel+0x6ba>
 800928a:	4a27      	ldr	r2, [pc, #156]	; (8009328 <HAL_ADC_ConfigChannel+0x754>)
 800928c:	e000      	b.n	8009290 <HAL_ADC_ConfigChannel+0x6bc>
 800928e:	4a27      	ldr	r2, [pc, #156]	; (800932c <HAL_ADC_ConfigChannel+0x758>)
 8009290:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009294:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009298:	4619      	mov	r1, r3
 800929a:	4610      	mov	r0, r2
 800929c:	f7ff f92b 	bl	80084f6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80092a0:	e031      	b.n	8009306 <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4a22      	ldr	r2, [pc, #136]	; (8009330 <HAL_ADC_ConfigChannel+0x75c>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d12d      	bne.n	8009308 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80092ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80092b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d127      	bne.n	8009308 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4a18      	ldr	r2, [pc, #96]	; (8009320 <HAL_ADC_ConfigChannel+0x74c>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d022      	beq.n	8009308 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80092ca:	d004      	beq.n	80092d6 <HAL_ADC_ConfigChannel+0x702>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4a13      	ldr	r2, [pc, #76]	; (8009320 <HAL_ADC_ConfigChannel+0x74c>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d101      	bne.n	80092da <HAL_ADC_ConfigChannel+0x706>
 80092d6:	4a14      	ldr	r2, [pc, #80]	; (8009328 <HAL_ADC_ConfigChannel+0x754>)
 80092d8:	e000      	b.n	80092dc <HAL_ADC_ConfigChannel+0x708>
 80092da:	4a14      	ldr	r2, [pc, #80]	; (800932c <HAL_ADC_ConfigChannel+0x758>)
 80092dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80092e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80092e4:	4619      	mov	r1, r3
 80092e6:	4610      	mov	r0, r2
 80092e8:	f7ff f905 	bl	80084f6 <LL_ADC_SetCommonPathInternalCh>
 80092ec:	e00c      	b.n	8009308 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092f2:	f043 0220 	orr.w	r2, r3, #32
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80092fa:	2301      	movs	r3, #1
 80092fc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8009300:	e002      	b.n	8009308 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009302:	bf00      	nop
 8009304:	e000      	b.n	8009308 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009306:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2200      	movs	r2, #0
 800930c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8009310:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8009314:	4618      	mov	r0, r3
 8009316:	3798      	adds	r7, #152	; 0x98
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}
 800931c:	c7520000 	.word	0xc7520000
 8009320:	50000100 	.word	0x50000100
 8009324:	50000500 	.word	0x50000500
 8009328:	50000300 	.word	0x50000300
 800932c:	50000700 	.word	0x50000700
 8009330:	cb840000 	.word	0xcb840000

08009334 <LL_ADC_IsEnabled>:
{
 8009334:	b480      	push	{r7}
 8009336:	b083      	sub	sp, #12
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	689b      	ldr	r3, [r3, #8]
 8009340:	f003 0301 	and.w	r3, r3, #1
 8009344:	2b01      	cmp	r3, #1
 8009346:	d101      	bne.n	800934c <LL_ADC_IsEnabled+0x18>
 8009348:	2301      	movs	r3, #1
 800934a:	e000      	b.n	800934e <LL_ADC_IsEnabled+0x1a>
 800934c:	2300      	movs	r3, #0
}
 800934e:	4618      	mov	r0, r3
 8009350:	370c      	adds	r7, #12
 8009352:	46bd      	mov	sp, r7
 8009354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009358:	4770      	bx	lr

0800935a <LL_ADC_REG_IsConversionOngoing>:
{
 800935a:	b480      	push	{r7}
 800935c:	b083      	sub	sp, #12
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	689b      	ldr	r3, [r3, #8]
 8009366:	f003 0304 	and.w	r3, r3, #4
 800936a:	2b04      	cmp	r3, #4
 800936c:	d101      	bne.n	8009372 <LL_ADC_REG_IsConversionOngoing+0x18>
 800936e:	2301      	movs	r3, #1
 8009370:	e000      	b.n	8009374 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009372:	2300      	movs	r3, #0
}
 8009374:	4618      	mov	r0, r3
 8009376:	370c      	adds	r7, #12
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr

08009380 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8009380:	b590      	push	{r4, r7, lr}
 8009382:	b0a1      	sub	sp, #132	; 0x84
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800938a:	2300      	movs	r3, #0
 800938c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009396:	2b01      	cmp	r3, #1
 8009398:	d101      	bne.n	800939e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800939a:	2302      	movs	r3, #2
 800939c:	e0e3      	b.n	8009566 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2201      	movs	r2, #1
 80093a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093ae:	d102      	bne.n	80093b6 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80093b0:	4b6f      	ldr	r3, [pc, #444]	; (8009570 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80093b2:	60bb      	str	r3, [r7, #8]
 80093b4:	e009      	b.n	80093ca <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a6e      	ldr	r2, [pc, #440]	; (8009574 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d102      	bne.n	80093c6 <HAL_ADCEx_MultiModeConfigChannel+0x46>
 80093c0:	4b6d      	ldr	r3, [pc, #436]	; (8009578 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80093c2:	60bb      	str	r3, [r7, #8]
 80093c4:	e001      	b.n	80093ca <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80093c6:	2300      	movs	r3, #0
 80093c8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d10b      	bne.n	80093e8 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093d4:	f043 0220 	orr.w	r2, r3, #32
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2200      	movs	r2, #0
 80093e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80093e4:	2301      	movs	r3, #1
 80093e6:	e0be      	b.n	8009566 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	4618      	mov	r0, r3
 80093ec:	f7ff ffb5 	bl	800935a <LL_ADC_REG_IsConversionOngoing>
 80093f0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4618      	mov	r0, r3
 80093f8:	f7ff ffaf 	bl	800935a <LL_ADC_REG_IsConversionOngoing>
 80093fc:	4603      	mov	r3, r0
 80093fe:	2b00      	cmp	r3, #0
 8009400:	f040 80a0 	bne.w	8009544 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8009404:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009406:	2b00      	cmp	r3, #0
 8009408:	f040 809c 	bne.w	8009544 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009414:	d004      	beq.n	8009420 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a55      	ldr	r2, [pc, #340]	; (8009570 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d101      	bne.n	8009424 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8009420:	4b56      	ldr	r3, [pc, #344]	; (800957c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8009422:	e000      	b.n	8009426 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8009424:	4b56      	ldr	r3, [pc, #344]	; (8009580 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8009426:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d04b      	beq.n	80094c8 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8009430:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009432:	689b      	ldr	r3, [r3, #8]
 8009434:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	6859      	ldr	r1, [r3, #4]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009442:	035b      	lsls	r3, r3, #13
 8009444:	430b      	orrs	r3, r1
 8009446:	431a      	orrs	r2, r3
 8009448:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800944a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009454:	d004      	beq.n	8009460 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4a45      	ldr	r2, [pc, #276]	; (8009570 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d10f      	bne.n	8009480 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8009460:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8009464:	f7ff ff66 	bl	8009334 <LL_ADC_IsEnabled>
 8009468:	4604      	mov	r4, r0
 800946a:	4841      	ldr	r0, [pc, #260]	; (8009570 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800946c:	f7ff ff62 	bl	8009334 <LL_ADC_IsEnabled>
 8009470:	4603      	mov	r3, r0
 8009472:	4323      	orrs	r3, r4
 8009474:	2b00      	cmp	r3, #0
 8009476:	bf0c      	ite	eq
 8009478:	2301      	moveq	r3, #1
 800947a:	2300      	movne	r3, #0
 800947c:	b2db      	uxtb	r3, r3
 800947e:	e012      	b.n	80094a6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8009480:	483c      	ldr	r0, [pc, #240]	; (8009574 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8009482:	f7ff ff57 	bl	8009334 <LL_ADC_IsEnabled>
 8009486:	4604      	mov	r4, r0
 8009488:	483b      	ldr	r0, [pc, #236]	; (8009578 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800948a:	f7ff ff53 	bl	8009334 <LL_ADC_IsEnabled>
 800948e:	4603      	mov	r3, r0
 8009490:	431c      	orrs	r4, r3
 8009492:	483c      	ldr	r0, [pc, #240]	; (8009584 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8009494:	f7ff ff4e 	bl	8009334 <LL_ADC_IsEnabled>
 8009498:	4603      	mov	r3, r0
 800949a:	4323      	orrs	r3, r4
 800949c:	2b00      	cmp	r3, #0
 800949e:	bf0c      	ite	eq
 80094a0:	2301      	moveq	r3, #1
 80094a2:	2300      	movne	r3, #0
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d056      	beq.n	8009558 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80094aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094ac:	689b      	ldr	r3, [r3, #8]
 80094ae:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80094b2:	f023 030f 	bic.w	r3, r3, #15
 80094b6:	683a      	ldr	r2, [r7, #0]
 80094b8:	6811      	ldr	r1, [r2, #0]
 80094ba:	683a      	ldr	r2, [r7, #0]
 80094bc:	6892      	ldr	r2, [r2, #8]
 80094be:	430a      	orrs	r2, r1
 80094c0:	431a      	orrs	r2, r3
 80094c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094c4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80094c6:	e047      	b.n	8009558 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80094c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80094d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094d2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80094dc:	d004      	beq.n	80094e8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4a23      	ldr	r2, [pc, #140]	; (8009570 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d10f      	bne.n	8009508 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80094e8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80094ec:	f7ff ff22 	bl	8009334 <LL_ADC_IsEnabled>
 80094f0:	4604      	mov	r4, r0
 80094f2:	481f      	ldr	r0, [pc, #124]	; (8009570 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80094f4:	f7ff ff1e 	bl	8009334 <LL_ADC_IsEnabled>
 80094f8:	4603      	mov	r3, r0
 80094fa:	4323      	orrs	r3, r4
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	bf0c      	ite	eq
 8009500:	2301      	moveq	r3, #1
 8009502:	2300      	movne	r3, #0
 8009504:	b2db      	uxtb	r3, r3
 8009506:	e012      	b.n	800952e <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8009508:	481a      	ldr	r0, [pc, #104]	; (8009574 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800950a:	f7ff ff13 	bl	8009334 <LL_ADC_IsEnabled>
 800950e:	4604      	mov	r4, r0
 8009510:	4819      	ldr	r0, [pc, #100]	; (8009578 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8009512:	f7ff ff0f 	bl	8009334 <LL_ADC_IsEnabled>
 8009516:	4603      	mov	r3, r0
 8009518:	431c      	orrs	r4, r3
 800951a:	481a      	ldr	r0, [pc, #104]	; (8009584 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800951c:	f7ff ff0a 	bl	8009334 <LL_ADC_IsEnabled>
 8009520:	4603      	mov	r3, r0
 8009522:	4323      	orrs	r3, r4
 8009524:	2b00      	cmp	r3, #0
 8009526:	bf0c      	ite	eq
 8009528:	2301      	moveq	r3, #1
 800952a:	2300      	movne	r3, #0
 800952c:	b2db      	uxtb	r3, r3
 800952e:	2b00      	cmp	r3, #0
 8009530:	d012      	beq.n	8009558 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8009532:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009534:	689b      	ldr	r3, [r3, #8]
 8009536:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800953a:	f023 030f 	bic.w	r3, r3, #15
 800953e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009540:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009542:	e009      	b.n	8009558 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009548:	f043 0220 	orr.w	r2, r3, #32
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8009550:	2301      	movs	r3, #1
 8009552:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8009556:	e000      	b.n	800955a <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009558:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8009562:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8009566:	4618      	mov	r0, r3
 8009568:	3784      	adds	r7, #132	; 0x84
 800956a:	46bd      	mov	sp, r7
 800956c:	bd90      	pop	{r4, r7, pc}
 800956e:	bf00      	nop
 8009570:	50000100 	.word	0x50000100
 8009574:	50000400 	.word	0x50000400
 8009578:	50000500 	.word	0x50000500
 800957c:	50000300 	.word	0x50000300
 8009580:	50000700 	.word	0x50000700
 8009584:	50000600 	.word	0x50000600

08009588 <LL_EXTI_EnableIT_0_31>:
{
 8009588:	b480      	push	{r7}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8009590:	4b05      	ldr	r3, [pc, #20]	; (80095a8 <LL_EXTI_EnableIT_0_31+0x20>)
 8009592:	681a      	ldr	r2, [r3, #0]
 8009594:	4904      	ldr	r1, [pc, #16]	; (80095a8 <LL_EXTI_EnableIT_0_31+0x20>)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	4313      	orrs	r3, r2
 800959a:	600b      	str	r3, [r1, #0]
}
 800959c:	bf00      	nop
 800959e:	370c      	adds	r7, #12
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr
 80095a8:	40010400 	.word	0x40010400

080095ac <LL_EXTI_EnableIT_32_63>:
{
 80095ac:	b480      	push	{r7}
 80095ae:	b083      	sub	sp, #12
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80095b4:	4b05      	ldr	r3, [pc, #20]	; (80095cc <LL_EXTI_EnableIT_32_63+0x20>)
 80095b6:	6a1a      	ldr	r2, [r3, #32]
 80095b8:	4904      	ldr	r1, [pc, #16]	; (80095cc <LL_EXTI_EnableIT_32_63+0x20>)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	4313      	orrs	r3, r2
 80095be:	620b      	str	r3, [r1, #32]
}
 80095c0:	bf00      	nop
 80095c2:	370c      	adds	r7, #12
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr
 80095cc:	40010400 	.word	0x40010400

080095d0 <LL_EXTI_DisableIT_0_31>:
{
 80095d0:	b480      	push	{r7}
 80095d2:	b083      	sub	sp, #12
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80095d8:	4b06      	ldr	r3, [pc, #24]	; (80095f4 <LL_EXTI_DisableIT_0_31+0x24>)
 80095da:	681a      	ldr	r2, [r3, #0]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	43db      	mvns	r3, r3
 80095e0:	4904      	ldr	r1, [pc, #16]	; (80095f4 <LL_EXTI_DisableIT_0_31+0x24>)
 80095e2:	4013      	ands	r3, r2
 80095e4:	600b      	str	r3, [r1, #0]
}
 80095e6:	bf00      	nop
 80095e8:	370c      	adds	r7, #12
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr
 80095f2:	bf00      	nop
 80095f4:	40010400 	.word	0x40010400

080095f8 <LL_EXTI_DisableIT_32_63>:
{
 80095f8:	b480      	push	{r7}
 80095fa:	b083      	sub	sp, #12
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8009600:	4b06      	ldr	r3, [pc, #24]	; (800961c <LL_EXTI_DisableIT_32_63+0x24>)
 8009602:	6a1a      	ldr	r2, [r3, #32]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	43db      	mvns	r3, r3
 8009608:	4904      	ldr	r1, [pc, #16]	; (800961c <LL_EXTI_DisableIT_32_63+0x24>)
 800960a:	4013      	ands	r3, r2
 800960c:	620b      	str	r3, [r1, #32]
}
 800960e:	bf00      	nop
 8009610:	370c      	adds	r7, #12
 8009612:	46bd      	mov	sp, r7
 8009614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009618:	4770      	bx	lr
 800961a:	bf00      	nop
 800961c:	40010400 	.word	0x40010400

08009620 <LL_EXTI_EnableEvent_0_31>:
{
 8009620:	b480      	push	{r7}
 8009622:	b083      	sub	sp, #12
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8009628:	4b05      	ldr	r3, [pc, #20]	; (8009640 <LL_EXTI_EnableEvent_0_31+0x20>)
 800962a:	685a      	ldr	r2, [r3, #4]
 800962c:	4904      	ldr	r1, [pc, #16]	; (8009640 <LL_EXTI_EnableEvent_0_31+0x20>)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	4313      	orrs	r3, r2
 8009632:	604b      	str	r3, [r1, #4]
}
 8009634:	bf00      	nop
 8009636:	370c      	adds	r7, #12
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr
 8009640:	40010400 	.word	0x40010400

08009644 <LL_EXTI_EnableEvent_32_63>:
{
 8009644:	b480      	push	{r7}
 8009646:	b083      	sub	sp, #12
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800964c:	4b05      	ldr	r3, [pc, #20]	; (8009664 <LL_EXTI_EnableEvent_32_63+0x20>)
 800964e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009650:	4904      	ldr	r1, [pc, #16]	; (8009664 <LL_EXTI_EnableEvent_32_63+0x20>)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	4313      	orrs	r3, r2
 8009656:	624b      	str	r3, [r1, #36]	; 0x24
}
 8009658:	bf00      	nop
 800965a:	370c      	adds	r7, #12
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr
 8009664:	40010400 	.word	0x40010400

08009668 <LL_EXTI_DisableEvent_0_31>:
{
 8009668:	b480      	push	{r7}
 800966a:	b083      	sub	sp, #12
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8009670:	4b06      	ldr	r3, [pc, #24]	; (800968c <LL_EXTI_DisableEvent_0_31+0x24>)
 8009672:	685a      	ldr	r2, [r3, #4]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	43db      	mvns	r3, r3
 8009678:	4904      	ldr	r1, [pc, #16]	; (800968c <LL_EXTI_DisableEvent_0_31+0x24>)
 800967a:	4013      	ands	r3, r2
 800967c:	604b      	str	r3, [r1, #4]
}
 800967e:	bf00      	nop
 8009680:	370c      	adds	r7, #12
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr
 800968a:	bf00      	nop
 800968c:	40010400 	.word	0x40010400

08009690 <LL_EXTI_DisableEvent_32_63>:
{
 8009690:	b480      	push	{r7}
 8009692:	b083      	sub	sp, #12
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8009698:	4b06      	ldr	r3, [pc, #24]	; (80096b4 <LL_EXTI_DisableEvent_32_63+0x24>)
 800969a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	43db      	mvns	r3, r3
 80096a0:	4904      	ldr	r1, [pc, #16]	; (80096b4 <LL_EXTI_DisableEvent_32_63+0x24>)
 80096a2:	4013      	ands	r3, r2
 80096a4:	624b      	str	r3, [r1, #36]	; 0x24
}
 80096a6:	bf00      	nop
 80096a8:	370c      	adds	r7, #12
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr
 80096b2:	bf00      	nop
 80096b4:	40010400 	.word	0x40010400

080096b8 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80096b8:	b480      	push	{r7}
 80096ba:	b083      	sub	sp, #12
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80096c0:	4b05      	ldr	r3, [pc, #20]	; (80096d8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80096c2:	689a      	ldr	r2, [r3, #8]
 80096c4:	4904      	ldr	r1, [pc, #16]	; (80096d8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	4313      	orrs	r3, r2
 80096ca:	608b      	str	r3, [r1, #8]
}
 80096cc:	bf00      	nop
 80096ce:	370c      	adds	r7, #12
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr
 80096d8:	40010400 	.word	0x40010400

080096dc <LL_EXTI_EnableRisingTrig_32_63>:
{
 80096dc:	b480      	push	{r7}
 80096de:	b083      	sub	sp, #12
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80096e4:	4b05      	ldr	r3, [pc, #20]	; (80096fc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80096e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80096e8:	4904      	ldr	r1, [pc, #16]	; (80096fc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	4313      	orrs	r3, r2
 80096ee:	628b      	str	r3, [r1, #40]	; 0x28
}
 80096f0:	bf00      	nop
 80096f2:	370c      	adds	r7, #12
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr
 80096fc:	40010400 	.word	0x40010400

08009700 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8009700:	b480      	push	{r7}
 8009702:	b083      	sub	sp, #12
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8009708:	4b06      	ldr	r3, [pc, #24]	; (8009724 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800970a:	689a      	ldr	r2, [r3, #8]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	43db      	mvns	r3, r3
 8009710:	4904      	ldr	r1, [pc, #16]	; (8009724 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8009712:	4013      	ands	r3, r2
 8009714:	608b      	str	r3, [r1, #8]
}
 8009716:	bf00      	nop
 8009718:	370c      	adds	r7, #12
 800971a:	46bd      	mov	sp, r7
 800971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009720:	4770      	bx	lr
 8009722:	bf00      	nop
 8009724:	40010400 	.word	0x40010400

08009728 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8009730:	4b06      	ldr	r3, [pc, #24]	; (800974c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8009732:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	43db      	mvns	r3, r3
 8009738:	4904      	ldr	r1, [pc, #16]	; (800974c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800973a:	4013      	ands	r3, r2
 800973c:	628b      	str	r3, [r1, #40]	; 0x28
}
 800973e:	bf00      	nop
 8009740:	370c      	adds	r7, #12
 8009742:	46bd      	mov	sp, r7
 8009744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009748:	4770      	bx	lr
 800974a:	bf00      	nop
 800974c:	40010400 	.word	0x40010400

08009750 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8009750:	b480      	push	{r7}
 8009752:	b083      	sub	sp, #12
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8009758:	4b05      	ldr	r3, [pc, #20]	; (8009770 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800975a:	68da      	ldr	r2, [r3, #12]
 800975c:	4904      	ldr	r1, [pc, #16]	; (8009770 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	4313      	orrs	r3, r2
 8009762:	60cb      	str	r3, [r1, #12]
}
 8009764:	bf00      	nop
 8009766:	370c      	adds	r7, #12
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr
 8009770:	40010400 	.word	0x40010400

08009774 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8009774:	b480      	push	{r7}
 8009776:	b083      	sub	sp, #12
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800977c:	4b05      	ldr	r3, [pc, #20]	; (8009794 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800977e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009780:	4904      	ldr	r1, [pc, #16]	; (8009794 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	4313      	orrs	r3, r2
 8009786:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8009788:	bf00      	nop
 800978a:	370c      	adds	r7, #12
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr
 8009794:	40010400 	.word	0x40010400

08009798 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8009798:	b480      	push	{r7}
 800979a:	b083      	sub	sp, #12
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80097a0:	4b06      	ldr	r3, [pc, #24]	; (80097bc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80097a2:	68da      	ldr	r2, [r3, #12]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	43db      	mvns	r3, r3
 80097a8:	4904      	ldr	r1, [pc, #16]	; (80097bc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80097aa:	4013      	ands	r3, r2
 80097ac:	60cb      	str	r3, [r1, #12]
}
 80097ae:	bf00      	nop
 80097b0:	370c      	adds	r7, #12
 80097b2:	46bd      	mov	sp, r7
 80097b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b8:	4770      	bx	lr
 80097ba:	bf00      	nop
 80097bc:	40010400 	.word	0x40010400

080097c0 <LL_EXTI_DisableFallingTrig_32_63>:
{
 80097c0:	b480      	push	{r7}
 80097c2:	b083      	sub	sp, #12
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80097c8:	4b06      	ldr	r3, [pc, #24]	; (80097e4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80097ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	43db      	mvns	r3, r3
 80097d0:	4904      	ldr	r1, [pc, #16]	; (80097e4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80097d2:	4013      	ands	r3, r2
 80097d4:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80097d6:	bf00      	nop
 80097d8:	370c      	adds	r7, #12
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr
 80097e2:	bf00      	nop
 80097e4:	40010400 	.word	0x40010400

080097e8 <LL_EXTI_ClearFlag_0_31>:
{
 80097e8:	b480      	push	{r7}
 80097ea:	b083      	sub	sp, #12
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80097f0:	4a04      	ldr	r2, [pc, #16]	; (8009804 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6153      	str	r3, [r2, #20]
}
 80097f6:	bf00      	nop
 80097f8:	370c      	adds	r7, #12
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr
 8009802:	bf00      	nop
 8009804:	40010400 	.word	0x40010400

08009808 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8009808:	b480      	push	{r7}
 800980a:	b083      	sub	sp, #12
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8009810:	4a04      	ldr	r2, [pc, #16]	; (8009824 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6353      	str	r3, [r2, #52]	; 0x34
}
 8009816:	bf00      	nop
 8009818:	370c      	adds	r7, #12
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr
 8009822:	bf00      	nop
 8009824:	40010400 	.word	0x40010400

08009828 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b088      	sub	sp, #32
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8009830:	2300      	movs	r3, #0
 8009832:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009834:	2300      	movs	r3, #0
 8009836:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d102      	bne.n	8009844 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800983e:	2301      	movs	r3, #1
 8009840:	77fb      	strb	r3, [r7, #31]
 8009842:	e180      	b.n	8009b46 <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800984e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009852:	d102      	bne.n	800985a <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8009854:	2301      	movs	r3, #1
 8009856:	77fb      	strb	r3, [r7, #31]
 8009858:	e175      	b.n	8009b46 <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	7f5b      	ldrb	r3, [r3, #29]
 800985e:	b2db      	uxtb	r3, r3
 8009860:	2b00      	cmp	r3, #0
 8009862:	d108      	bne.n	8009876 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2200      	movs	r2, #0
 8009868:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2200      	movs	r2, #0
 800986e:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f7fd f977 	bl	8006b64 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009880:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	685b      	ldr	r3, [r3, #4]
 800988a:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	695b      	ldr	r3, [r3, #20]
 8009890:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	68db      	ldr	r3, [r3, #12]
 8009896:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 800989c:	4313      	orrs	r3, r2
 800989e:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	681a      	ldr	r2, [r3, #0]
 80098a6:	4b98      	ldr	r3, [pc, #608]	; (8009b08 <HAL_COMP_Init+0x2e0>)
 80098a8:	4013      	ands	r3, r2
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	6812      	ldr	r2, [r2, #0]
 80098ae:	6979      	ldr	r1, [r7, #20]
 80098b0:	430b      	orrs	r3, r1
 80098b2:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d015      	beq.n	80098ee <HAL_COMP_Init+0xc6>
 80098c2:	69bb      	ldr	r3, [r7, #24]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d112      	bne.n	80098ee <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80098c8:	4b90      	ldr	r3, [pc, #576]	; (8009b0c <HAL_COMP_Init+0x2e4>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	099b      	lsrs	r3, r3, #6
 80098ce:	4a90      	ldr	r2, [pc, #576]	; (8009b10 <HAL_COMP_Init+0x2e8>)
 80098d0:	fba2 2303 	umull	r2, r3, r2, r3
 80098d4:	099a      	lsrs	r2, r3, #6
 80098d6:	4613      	mov	r3, r2
 80098d8:	009b      	lsls	r3, r3, #2
 80098da:	4413      	add	r3, r2
 80098dc:	009b      	lsls	r3, r3, #2
 80098de:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80098e0:	e002      	b.n	80098e8 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	3b01      	subs	r3, #1
 80098e6:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d1f9      	bne.n	80098e2 <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4a88      	ldr	r2, [pc, #544]	; (8009b14 <HAL_COMP_Init+0x2ec>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d028      	beq.n	800994a <HAL_COMP_Init+0x122>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a86      	ldr	r2, [pc, #536]	; (8009b18 <HAL_COMP_Init+0x2f0>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d020      	beq.n	8009944 <HAL_COMP_Init+0x11c>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	4a85      	ldr	r2, [pc, #532]	; (8009b1c <HAL_COMP_Init+0x2f4>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d018      	beq.n	800993e <HAL_COMP_Init+0x116>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4a83      	ldr	r2, [pc, #524]	; (8009b20 <HAL_COMP_Init+0x2f8>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d010      	beq.n	8009938 <HAL_COMP_Init+0x110>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4a82      	ldr	r2, [pc, #520]	; (8009b24 <HAL_COMP_Init+0x2fc>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d008      	beq.n	8009932 <HAL_COMP_Init+0x10a>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a80      	ldr	r2, [pc, #512]	; (8009b28 <HAL_COMP_Init+0x300>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d101      	bne.n	800992e <HAL_COMP_Init+0x106>
 800992a:	2301      	movs	r3, #1
 800992c:	e00f      	b.n	800994e <HAL_COMP_Init+0x126>
 800992e:	2302      	movs	r3, #2
 8009930:	e00d      	b.n	800994e <HAL_COMP_Init+0x126>
 8009932:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009936:	e00a      	b.n	800994e <HAL_COMP_Init+0x126>
 8009938:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800993c:	e007      	b.n	800994e <HAL_COMP_Init+0x126>
 800993e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8009942:	e004      	b.n	800994e <HAL_COMP_Init+0x126>
 8009944:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009948:	e001      	b.n	800994e <HAL_COMP_Init+0x126>
 800994a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800994e:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	699b      	ldr	r3, [r3, #24]
 8009954:	f003 0303 	and.w	r3, r3, #3
 8009958:	2b00      	cmp	r3, #0
 800995a:	f000 80b6 	beq.w	8009aca <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	699b      	ldr	r3, [r3, #24]
 8009962:	f003 0310 	and.w	r3, r3, #16
 8009966:	2b00      	cmp	r3, #0
 8009968:	d011      	beq.n	800998e <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a6e      	ldr	r2, [pc, #440]	; (8009b28 <HAL_COMP_Init+0x300>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d004      	beq.n	800997e <HAL_COMP_Init+0x156>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4a6c      	ldr	r2, [pc, #432]	; (8009b2c <HAL_COMP_Init+0x304>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d103      	bne.n	8009986 <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 800997e:	6938      	ldr	r0, [r7, #16]
 8009980:	f7ff feac 	bl	80096dc <LL_EXTI_EnableRisingTrig_32_63>
 8009984:	e014      	b.n	80099b0 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8009986:	6938      	ldr	r0, [r7, #16]
 8009988:	f7ff fe96 	bl	80096b8 <LL_EXTI_EnableRisingTrig_0_31>
 800998c:	e010      	b.n	80099b0 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4a65      	ldr	r2, [pc, #404]	; (8009b28 <HAL_COMP_Init+0x300>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d004      	beq.n	80099a2 <HAL_COMP_Init+0x17a>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4a63      	ldr	r2, [pc, #396]	; (8009b2c <HAL_COMP_Init+0x304>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d103      	bne.n	80099aa <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 80099a2:	6938      	ldr	r0, [r7, #16]
 80099a4:	f7ff fec0 	bl	8009728 <LL_EXTI_DisableRisingTrig_32_63>
 80099a8:	e002      	b.n	80099b0 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80099aa:	6938      	ldr	r0, [r7, #16]
 80099ac:	f7ff fea8 	bl	8009700 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	699b      	ldr	r3, [r3, #24]
 80099b4:	f003 0320 	and.w	r3, r3, #32
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d011      	beq.n	80099e0 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4a59      	ldr	r2, [pc, #356]	; (8009b28 <HAL_COMP_Init+0x300>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d004      	beq.n	80099d0 <HAL_COMP_Init+0x1a8>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4a58      	ldr	r2, [pc, #352]	; (8009b2c <HAL_COMP_Init+0x304>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d103      	bne.n	80099d8 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 80099d0:	6938      	ldr	r0, [r7, #16]
 80099d2:	f7ff fecf 	bl	8009774 <LL_EXTI_EnableFallingTrig_32_63>
 80099d6:	e014      	b.n	8009a02 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80099d8:	6938      	ldr	r0, [r7, #16]
 80099da:	f7ff feb9 	bl	8009750 <LL_EXTI_EnableFallingTrig_0_31>
 80099de:	e010      	b.n	8009a02 <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a50      	ldr	r2, [pc, #320]	; (8009b28 <HAL_COMP_Init+0x300>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d004      	beq.n	80099f4 <HAL_COMP_Init+0x1cc>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	4a4f      	ldr	r2, [pc, #316]	; (8009b2c <HAL_COMP_Init+0x304>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d103      	bne.n	80099fc <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 80099f4:	6938      	ldr	r0, [r7, #16]
 80099f6:	f7ff fee3 	bl	80097c0 <LL_EXTI_DisableFallingTrig_32_63>
 80099fa:	e002      	b.n	8009a02 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80099fc:	6938      	ldr	r0, [r7, #16]
 80099fe:	f7ff fecb 	bl	8009798 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	4a48      	ldr	r2, [pc, #288]	; (8009b28 <HAL_COMP_Init+0x300>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d004      	beq.n	8009a16 <HAL_COMP_Init+0x1ee>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a46      	ldr	r2, [pc, #280]	; (8009b2c <HAL_COMP_Init+0x304>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d103      	bne.n	8009a1e <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8009a16:	6938      	ldr	r0, [r7, #16]
 8009a18:	f7ff fef6 	bl	8009808 <LL_EXTI_ClearFlag_32_63>
 8009a1c:	e002      	b.n	8009a24 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8009a1e:	6938      	ldr	r0, [r7, #16]
 8009a20:	f7ff fee2 	bl	80097e8 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	699b      	ldr	r3, [r3, #24]
 8009a28:	f003 0302 	and.w	r3, r3, #2
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d011      	beq.n	8009a54 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4a3c      	ldr	r2, [pc, #240]	; (8009b28 <HAL_COMP_Init+0x300>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d004      	beq.n	8009a44 <HAL_COMP_Init+0x21c>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a3b      	ldr	r2, [pc, #236]	; (8009b2c <HAL_COMP_Init+0x304>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d103      	bne.n	8009a4c <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8009a44:	6938      	ldr	r0, [r7, #16]
 8009a46:	f7ff fdfd 	bl	8009644 <LL_EXTI_EnableEvent_32_63>
 8009a4a:	e014      	b.n	8009a76 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8009a4c:	6938      	ldr	r0, [r7, #16]
 8009a4e:	f7ff fde7 	bl	8009620 <LL_EXTI_EnableEvent_0_31>
 8009a52:	e010      	b.n	8009a76 <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4a33      	ldr	r2, [pc, #204]	; (8009b28 <HAL_COMP_Init+0x300>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d004      	beq.n	8009a68 <HAL_COMP_Init+0x240>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	4a32      	ldr	r2, [pc, #200]	; (8009b2c <HAL_COMP_Init+0x304>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d103      	bne.n	8009a70 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8009a68:	6938      	ldr	r0, [r7, #16]
 8009a6a:	f7ff fe11 	bl	8009690 <LL_EXTI_DisableEvent_32_63>
 8009a6e:	e002      	b.n	8009a76 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8009a70:	6938      	ldr	r0, [r7, #16]
 8009a72:	f7ff fdf9 	bl	8009668 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	699b      	ldr	r3, [r3, #24]
 8009a7a:	f003 0301 	and.w	r3, r3, #1
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d011      	beq.n	8009aa6 <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a28      	ldr	r2, [pc, #160]	; (8009b28 <HAL_COMP_Init+0x300>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d004      	beq.n	8009a96 <HAL_COMP_Init+0x26e>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a26      	ldr	r2, [pc, #152]	; (8009b2c <HAL_COMP_Init+0x304>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d103      	bne.n	8009a9e <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8009a96:	6938      	ldr	r0, [r7, #16]
 8009a98:	f7ff fd88 	bl	80095ac <LL_EXTI_EnableIT_32_63>
 8009a9c:	e04b      	b.n	8009b36 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8009a9e:	6938      	ldr	r0, [r7, #16]
 8009aa0:	f7ff fd72 	bl	8009588 <LL_EXTI_EnableIT_0_31>
 8009aa4:	e047      	b.n	8009b36 <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4a1f      	ldr	r2, [pc, #124]	; (8009b28 <HAL_COMP_Init+0x300>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d004      	beq.n	8009aba <HAL_COMP_Init+0x292>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a1d      	ldr	r2, [pc, #116]	; (8009b2c <HAL_COMP_Init+0x304>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d103      	bne.n	8009ac2 <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8009aba:	6938      	ldr	r0, [r7, #16]
 8009abc:	f7ff fd9c 	bl	80095f8 <LL_EXTI_DisableIT_32_63>
 8009ac0:	e039      	b.n	8009b36 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8009ac2:	6938      	ldr	r0, [r7, #16]
 8009ac4:	f7ff fd84 	bl	80095d0 <LL_EXTI_DisableIT_0_31>
 8009ac8:	e035      	b.n	8009b36 <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4a16      	ldr	r2, [pc, #88]	; (8009b28 <HAL_COMP_Init+0x300>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d004      	beq.n	8009ade <HAL_COMP_Init+0x2b6>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4a14      	ldr	r2, [pc, #80]	; (8009b2c <HAL_COMP_Init+0x304>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d103      	bne.n	8009ae6 <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8009ade:	6938      	ldr	r0, [r7, #16]
 8009ae0:	f7ff fdd6 	bl	8009690 <LL_EXTI_DisableEvent_32_63>
 8009ae4:	e002      	b.n	8009aec <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8009ae6:	6938      	ldr	r0, [r7, #16]
 8009ae8:	f7ff fdbe 	bl	8009668 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a0d      	ldr	r2, [pc, #52]	; (8009b28 <HAL_COMP_Init+0x300>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d004      	beq.n	8009b00 <HAL_COMP_Init+0x2d8>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a0c      	ldr	r2, [pc, #48]	; (8009b2c <HAL_COMP_Init+0x304>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d117      	bne.n	8009b30 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8009b00:	6938      	ldr	r0, [r7, #16]
 8009b02:	f7ff fd79 	bl	80095f8 <LL_EXTI_DisableIT_32_63>
 8009b06:	e016      	b.n	8009b36 <HAL_COMP_Init+0x30e>
 8009b08:	ff007e0f 	.word	0xff007e0f
 8009b0c:	20000c30 	.word	0x20000c30
 8009b10:	053e2d63 	.word	0x053e2d63
 8009b14:	40010200 	.word	0x40010200
 8009b18:	40010204 	.word	0x40010204
 8009b1c:	40010208 	.word	0x40010208
 8009b20:	4001020c 	.word	0x4001020c
 8009b24:	40010210 	.word	0x40010210
 8009b28:	40010214 	.word	0x40010214
 8009b2c:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8009b30:	6938      	ldr	r0, [r7, #16]
 8009b32:	f7ff fd4d 	bl	80095d0 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	7f5b      	ldrb	r3, [r3, #29]
 8009b3a:	b2db      	uxtb	r3, r3
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d102      	bne.n	8009b46 <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2201      	movs	r2, #1
 8009b44:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8009b46:	7ffb      	ldrb	r3, [r7, #31]
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3720      	adds	r7, #32
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}

08009b50 <__NVIC_SetPriorityGrouping>:
{
 8009b50:	b480      	push	{r7}
 8009b52:	b085      	sub	sp, #20
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f003 0307 	and.w	r3, r3, #7
 8009b5e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009b60:	4b0c      	ldr	r3, [pc, #48]	; (8009b94 <__NVIC_SetPriorityGrouping+0x44>)
 8009b62:	68db      	ldr	r3, [r3, #12]
 8009b64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009b66:	68ba      	ldr	r2, [r7, #8]
 8009b68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009b6c:	4013      	ands	r3, r2
 8009b6e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009b78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009b82:	4a04      	ldr	r2, [pc, #16]	; (8009b94 <__NVIC_SetPriorityGrouping+0x44>)
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	60d3      	str	r3, [r2, #12]
}
 8009b88:	bf00      	nop
 8009b8a:	3714      	adds	r7, #20
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr
 8009b94:	e000ed00 	.word	0xe000ed00

08009b98 <__NVIC_GetPriorityGrouping>:
{
 8009b98:	b480      	push	{r7}
 8009b9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009b9c:	4b04      	ldr	r3, [pc, #16]	; (8009bb0 <__NVIC_GetPriorityGrouping+0x18>)
 8009b9e:	68db      	ldr	r3, [r3, #12]
 8009ba0:	0a1b      	lsrs	r3, r3, #8
 8009ba2:	f003 0307 	and.w	r3, r3, #7
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr
 8009bb0:	e000ed00 	.word	0xe000ed00

08009bb4 <__NVIC_EnableIRQ>:
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b083      	sub	sp, #12
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	4603      	mov	r3, r0
 8009bbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	db0b      	blt.n	8009bde <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009bc6:	79fb      	ldrb	r3, [r7, #7]
 8009bc8:	f003 021f 	and.w	r2, r3, #31
 8009bcc:	4907      	ldr	r1, [pc, #28]	; (8009bec <__NVIC_EnableIRQ+0x38>)
 8009bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bd2:	095b      	lsrs	r3, r3, #5
 8009bd4:	2001      	movs	r0, #1
 8009bd6:	fa00 f202 	lsl.w	r2, r0, r2
 8009bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009bde:	bf00      	nop
 8009be0:	370c      	adds	r7, #12
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr
 8009bea:	bf00      	nop
 8009bec:	e000e100 	.word	0xe000e100

08009bf0 <__NVIC_DisableIRQ>:
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b083      	sub	sp, #12
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	db10      	blt.n	8009c24 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009c02:	79fb      	ldrb	r3, [r7, #7]
 8009c04:	f003 021f 	and.w	r2, r3, #31
 8009c08:	4909      	ldr	r1, [pc, #36]	; (8009c30 <__NVIC_DisableIRQ+0x40>)
 8009c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c0e:	095b      	lsrs	r3, r3, #5
 8009c10:	2001      	movs	r0, #1
 8009c12:	fa00 f202 	lsl.w	r2, r0, r2
 8009c16:	3320      	adds	r3, #32
 8009c18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8009c1c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009c20:	f3bf 8f6f 	isb	sy
}
 8009c24:	bf00      	nop
 8009c26:	370c      	adds	r7, #12
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr
 8009c30:	e000e100 	.word	0xe000e100

08009c34 <__NVIC_SetPriority>:
{
 8009c34:	b480      	push	{r7}
 8009c36:	b083      	sub	sp, #12
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	6039      	str	r1, [r7, #0]
 8009c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	db0a      	blt.n	8009c5e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	b2da      	uxtb	r2, r3
 8009c4c:	490c      	ldr	r1, [pc, #48]	; (8009c80 <__NVIC_SetPriority+0x4c>)
 8009c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c52:	0112      	lsls	r2, r2, #4
 8009c54:	b2d2      	uxtb	r2, r2
 8009c56:	440b      	add	r3, r1
 8009c58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009c5c:	e00a      	b.n	8009c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	b2da      	uxtb	r2, r3
 8009c62:	4908      	ldr	r1, [pc, #32]	; (8009c84 <__NVIC_SetPriority+0x50>)
 8009c64:	79fb      	ldrb	r3, [r7, #7]
 8009c66:	f003 030f 	and.w	r3, r3, #15
 8009c6a:	3b04      	subs	r3, #4
 8009c6c:	0112      	lsls	r2, r2, #4
 8009c6e:	b2d2      	uxtb	r2, r2
 8009c70:	440b      	add	r3, r1
 8009c72:	761a      	strb	r2, [r3, #24]
}
 8009c74:	bf00      	nop
 8009c76:	370c      	adds	r7, #12
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7e:	4770      	bx	lr
 8009c80:	e000e100 	.word	0xe000e100
 8009c84:	e000ed00 	.word	0xe000ed00

08009c88 <NVIC_EncodePriority>:
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b089      	sub	sp, #36	; 0x24
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	60f8      	str	r0, [r7, #12]
 8009c90:	60b9      	str	r1, [r7, #8]
 8009c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	f003 0307 	and.w	r3, r3, #7
 8009c9a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009c9c:	69fb      	ldr	r3, [r7, #28]
 8009c9e:	f1c3 0307 	rsb	r3, r3, #7
 8009ca2:	2b04      	cmp	r3, #4
 8009ca4:	bf28      	it	cs
 8009ca6:	2304      	movcs	r3, #4
 8009ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009caa:	69fb      	ldr	r3, [r7, #28]
 8009cac:	3304      	adds	r3, #4
 8009cae:	2b06      	cmp	r3, #6
 8009cb0:	d902      	bls.n	8009cb8 <NVIC_EncodePriority+0x30>
 8009cb2:	69fb      	ldr	r3, [r7, #28]
 8009cb4:	3b03      	subs	r3, #3
 8009cb6:	e000      	b.n	8009cba <NVIC_EncodePriority+0x32>
 8009cb8:	2300      	movs	r3, #0
 8009cba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009cbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009cc0:	69bb      	ldr	r3, [r7, #24]
 8009cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8009cc6:	43da      	mvns	r2, r3
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	401a      	ands	r2, r3
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009cd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8009cda:	43d9      	mvns	r1, r3
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009ce0:	4313      	orrs	r3, r2
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3724      	adds	r7, #36	; 0x24
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr
	...

08009cf0 <SysTick_Config>:
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b082      	sub	sp, #8
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	3b01      	subs	r3, #1
 8009cfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009d00:	d301      	bcc.n	8009d06 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8009d02:	2301      	movs	r3, #1
 8009d04:	e00f      	b.n	8009d26 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009d06:	4a0a      	ldr	r2, [pc, #40]	; (8009d30 <SysTick_Config+0x40>)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	3b01      	subs	r3, #1
 8009d0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009d0e:	210f      	movs	r1, #15
 8009d10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d14:	f7ff ff8e 	bl	8009c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009d18:	4b05      	ldr	r3, [pc, #20]	; (8009d30 <SysTick_Config+0x40>)
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009d1e:	4b04      	ldr	r3, [pc, #16]	; (8009d30 <SysTick_Config+0x40>)
 8009d20:	2207      	movs	r2, #7
 8009d22:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8009d24:	2300      	movs	r3, #0
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3708      	adds	r7, #8
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	bf00      	nop
 8009d30:	e000e010 	.word	0xe000e010

08009d34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b082      	sub	sp, #8
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f7ff ff07 	bl	8009b50 <__NVIC_SetPriorityGrouping>
}
 8009d42:	bf00      	nop
 8009d44:	3708      	adds	r7, #8
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}

08009d4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009d4a:	b580      	push	{r7, lr}
 8009d4c:	b086      	sub	sp, #24
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	4603      	mov	r3, r0
 8009d52:	60b9      	str	r1, [r7, #8]
 8009d54:	607a      	str	r2, [r7, #4]
 8009d56:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009d58:	f7ff ff1e 	bl	8009b98 <__NVIC_GetPriorityGrouping>
 8009d5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009d5e:	687a      	ldr	r2, [r7, #4]
 8009d60:	68b9      	ldr	r1, [r7, #8]
 8009d62:	6978      	ldr	r0, [r7, #20]
 8009d64:	f7ff ff90 	bl	8009c88 <NVIC_EncodePriority>
 8009d68:	4602      	mov	r2, r0
 8009d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d6e:	4611      	mov	r1, r2
 8009d70:	4618      	mov	r0, r3
 8009d72:	f7ff ff5f 	bl	8009c34 <__NVIC_SetPriority>
}
 8009d76:	bf00      	nop
 8009d78:	3718      	adds	r7, #24
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}

08009d7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009d7e:	b580      	push	{r7, lr}
 8009d80:	b082      	sub	sp, #8
 8009d82:	af00      	add	r7, sp, #0
 8009d84:	4603      	mov	r3, r0
 8009d86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f7ff ff11 	bl	8009bb4 <__NVIC_EnableIRQ>
}
 8009d92:	bf00      	nop
 8009d94:	3708      	adds	r7, #8
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}

08009d9a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009d9a:	b580      	push	{r7, lr}
 8009d9c:	b082      	sub	sp, #8
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	4603      	mov	r3, r0
 8009da2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8009da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009da8:	4618      	mov	r0, r3
 8009daa:	f7ff ff21 	bl	8009bf0 <__NVIC_DisableIRQ>
}
 8009dae:	bf00      	nop
 8009db0:	3708      	adds	r7, #8
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}

08009db6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009db6:	b580      	push	{r7, lr}
 8009db8:	b082      	sub	sp, #8
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f7ff ff96 	bl	8009cf0 <SysTick_Config>
 8009dc4:	4603      	mov	r3, r0
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3708      	adds	r7, #8
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}

08009dce <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8009dce:	b580      	push	{r7, lr}
 8009dd0:	b082      	sub	sp, #8
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d101      	bne.n	8009de0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8009ddc:	2301      	movs	r3, #1
 8009dde:	e014      	b.n	8009e0a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	791b      	ldrb	r3, [r3, #4]
 8009de4:	b2db      	uxtb	r3, r3
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d105      	bne.n	8009df6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2200      	movs	r2, #0
 8009dee:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f7fc ff6d 	bl	8006cd0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2202      	movs	r2, #2
 8009dfa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2201      	movs	r2, #1
 8009e06:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8009e08:	2300      	movs	r3, #0
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3708      	adds	r7, #8
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}

08009e12 <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8009e12:	b580      	push	{r7, lr}
 8009e14:	b082      	sub	sp, #8
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
 8009e1a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	795b      	ldrb	r3, [r3, #5]
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	d101      	bne.n	8009e28 <HAL_DAC_Start+0x16>
 8009e24:	2302      	movs	r3, #2
 8009e26:	e043      	b.n	8009eb0 <HAL_DAC_Start+0x9e>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2202      	movs	r2, #2
 8009e32:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	6819      	ldr	r1, [r3, #0]
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	f003 0310 	and.w	r3, r3, #16
 8009e40:	2201      	movs	r2, #1
 8009e42:	409a      	lsls	r2, r3
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	430a      	orrs	r2, r1
 8009e4a:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8009e4c:	2001      	movs	r0, #1
 8009e4e:	f7fe fb1d 	bl	800848c <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d10f      	bne.n	8009e78 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009e62:	2b02      	cmp	r3, #2
 8009e64:	d11d      	bne.n	8009ea2 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	685a      	ldr	r2, [r3, #4]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f042 0201 	orr.w	r2, r2, #1
 8009e74:	605a      	str	r2, [r3, #4]
 8009e76:	e014      	b.n	8009ea2 <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	f003 0310 	and.w	r3, r3, #16
 8009e88:	2102      	movs	r1, #2
 8009e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	d107      	bne.n	8009ea2 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	685a      	ldr	r2, [r3, #4]
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f042 0202 	orr.w	r2, r2, #2
 8009ea0:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8009eae:	2300      	movs	r3, #0
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3708      	adds	r7, #8
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b086      	sub	sp, #24
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	60f8      	str	r0, [r7, #12]
 8009ec0:	60b9      	str	r1, [r7, #8]
 8009ec2:	607a      	str	r2, [r7, #4]
 8009ec4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	795b      	ldrb	r3, [r3, #5]
 8009ece:	2b01      	cmp	r3, #1
 8009ed0:	d101      	bne.n	8009ed6 <HAL_DAC_Start_DMA+0x1e>
 8009ed2:	2302      	movs	r3, #2
 8009ed4:	e0a1      	b.n	800a01a <HAL_DAC_Start_DMA+0x162>
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2201      	movs	r2, #1
 8009eda:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	2202      	movs	r2, #2
 8009ee0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d12a      	bne.n	8009f3e <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	689b      	ldr	r3, [r3, #8]
 8009eec:	4a4d      	ldr	r2, [pc, #308]	; (800a024 <HAL_DAC_Start_DMA+0x16c>)
 8009eee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	689b      	ldr	r3, [r3, #8]
 8009ef4:	4a4c      	ldr	r2, [pc, #304]	; (800a028 <HAL_DAC_Start_DMA+0x170>)
 8009ef6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	689b      	ldr	r3, [r3, #8]
 8009efc:	4a4b      	ldr	r2, [pc, #300]	; (800a02c <HAL_DAC_Start_DMA+0x174>)
 8009efe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	681a      	ldr	r2, [r3, #0]
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009f0e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8009f10:	6a3b      	ldr	r3, [r7, #32]
 8009f12:	2b04      	cmp	r3, #4
 8009f14:	d009      	beq.n	8009f2a <HAL_DAC_Start_DMA+0x72>
 8009f16:	2b08      	cmp	r3, #8
 8009f18:	d00c      	beq.n	8009f34 <HAL_DAC_Start_DMA+0x7c>
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d000      	beq.n	8009f20 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8009f1e:	e039      	b.n	8009f94 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	3308      	adds	r3, #8
 8009f26:	613b      	str	r3, [r7, #16]
        break;
 8009f28:	e034      	b.n	8009f94 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	330c      	adds	r3, #12
 8009f30:	613b      	str	r3, [r7, #16]
        break;
 8009f32:	e02f      	b.n	8009f94 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	3310      	adds	r3, #16
 8009f3a:	613b      	str	r3, [r7, #16]
        break;
 8009f3c:	e02a      	b.n	8009f94 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	68db      	ldr	r3, [r3, #12]
 8009f42:	4a3b      	ldr	r2, [pc, #236]	; (800a030 <HAL_DAC_Start_DMA+0x178>)
 8009f44:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	68db      	ldr	r3, [r3, #12]
 8009f4a:	4a3a      	ldr	r2, [pc, #232]	; (800a034 <HAL_DAC_Start_DMA+0x17c>)
 8009f4c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	68db      	ldr	r3, [r3, #12]
 8009f52:	4a39      	ldr	r2, [pc, #228]	; (800a038 <HAL_DAC_Start_DMA+0x180>)
 8009f54:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	681a      	ldr	r2, [r3, #0]
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009f64:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8009f66:	6a3b      	ldr	r3, [r7, #32]
 8009f68:	2b04      	cmp	r3, #4
 8009f6a:	d009      	beq.n	8009f80 <HAL_DAC_Start_DMA+0xc8>
 8009f6c:	2b08      	cmp	r3, #8
 8009f6e:	d00c      	beq.n	8009f8a <HAL_DAC_Start_DMA+0xd2>
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d000      	beq.n	8009f76 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8009f74:	e00e      	b.n	8009f94 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	3314      	adds	r3, #20
 8009f7c:	613b      	str	r3, [r7, #16]
        break;
 8009f7e:	e009      	b.n	8009f94 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	3318      	adds	r3, #24
 8009f86:	613b      	str	r3, [r7, #16]
        break;
 8009f88:	e004      	b.n	8009f94 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	331c      	adds	r3, #28
 8009f90:	613b      	str	r3, [r7, #16]
        break;
 8009f92:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d111      	bne.n	8009fbe <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	681a      	ldr	r2, [r3, #0]
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009fa8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	6898      	ldr	r0, [r3, #8]
 8009fae:	6879      	ldr	r1, [r7, #4]
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	693a      	ldr	r2, [r7, #16]
 8009fb4:	f000 fbc8 	bl	800a748 <HAL_DMA_Start_IT>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	75fb      	strb	r3, [r7, #23]
 8009fbc:	e010      	b.n	8009fe0 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	681a      	ldr	r2, [r3, #0]
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8009fcc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	68d8      	ldr	r0, [r3, #12]
 8009fd2:	6879      	ldr	r1, [r7, #4]
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	693a      	ldr	r2, [r7, #16]
 8009fd8:	f000 fbb6 	bl	800a748 <HAL_DMA_Start_IT>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8009fe6:	7dfb      	ldrb	r3, [r7, #23]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d10f      	bne.n	800a00c <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	6819      	ldr	r1, [r3, #0]
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	f003 0310 	and.w	r3, r3, #16
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	409a      	lsls	r2, r3
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	430a      	orrs	r2, r1
 800a002:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 800a004:	2001      	movs	r0, #1
 800a006:	f7fe fa41 	bl	800848c <HAL_Delay>
 800a00a:	e005      	b.n	800a018 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	691b      	ldr	r3, [r3, #16]
 800a010:	f043 0204 	orr.w	r2, r3, #4
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800a018:	7dfb      	ldrb	r3, [r7, #23]
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3718      	adds	r7, #24
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}
 800a022:	bf00      	nop
 800a024:	0800a4e5 	.word	0x0800a4e5
 800a028:	0800a507 	.word	0x0800a507
 800a02c:	0800a523 	.word	0x0800a523
 800a030:	0800a58d 	.word	0x0800a58d
 800a034:	0800a5af 	.word	0x0800a5af
 800a038:	0800a5cb 	.word	0x0800a5cb

0800a03c <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b084      	sub	sp, #16
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	6819      	ldr	r1, [r3, #0]
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	f003 0310 	and.w	r3, r3, #16
 800a052:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a056:	fa02 f303 	lsl.w	r3, r2, r3
 800a05a:	43da      	mvns	r2, r3
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	400a      	ands	r2, r1
 800a062:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	6819      	ldr	r1, [r3, #0]
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	f003 0310 	and.w	r3, r3, #16
 800a070:	2201      	movs	r2, #1
 800a072:	fa02 f303 	lsl.w	r3, r2, r3
 800a076:	43da      	mvns	r2, r3
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	400a      	ands	r2, r1
 800a07e:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 800a080:	2001      	movs	r0, #1
 800a082:	f7fe fa03 	bl	800848c <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d10f      	bne.n	800a0ac <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	689b      	ldr	r3, [r3, #8]
 800a090:	4618      	mov	r0, r3
 800a092:	f000 fbd4 	bl	800a83e <HAL_DMA_Abort>
 800a096:	4603      	mov	r3, r0
 800a098:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	681a      	ldr	r2, [r3, #0]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a0a8:	601a      	str	r2, [r3, #0]
 800a0aa:	e00e      	b.n	800a0ca <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	68db      	ldr	r3, [r3, #12]
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f000 fbc4 	bl	800a83e <HAL_DMA_Abort>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	681a      	ldr	r2, [r3, #0]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800a0c8:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 800a0ca:	7bfb      	ldrb	r3, [r7, #15]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d003      	beq.n	800a0d8 <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2204      	movs	r2, #4
 800a0d4:	711a      	strb	r2, [r3, #4]
 800a0d6:	e002      	b.n	800a0de <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 800a0de:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3710      	adds	r7, #16
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b087      	sub	sp, #28
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	607a      	str	r2, [r7, #4]
 800a0f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d105      	bne.n	800a118 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800a10c:	697a      	ldr	r2, [r7, #20]
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	4413      	add	r3, r2
 800a112:	3308      	adds	r3, #8
 800a114:	617b      	str	r3, [r7, #20]
 800a116:	e004      	b.n	800a122 <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800a118:	697a      	ldr	r2, [r7, #20]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	4413      	add	r3, r2
 800a11e:	3314      	adds	r3, #20
 800a120:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	461a      	mov	r2, r3
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800a12a:	2300      	movs	r3, #0
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	371c      	adds	r7, #28
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr

0800a138 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800a138:	b480      	push	{r7}
 800a13a:	b083      	sub	sp, #12
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800a140:	bf00      	nop
 800a142:	370c      	adds	r7, #12
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr

0800a14c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b083      	sub	sp, #12
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800a154:	bf00      	nop
 800a156:	370c      	adds	r7, #12
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr

0800a160 <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800a160:	b480      	push	{r7}
 800a162:	b083      	sub	sp, #12
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d103      	bne.n	800a178 <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a176:	e002      	b.n	800a17e <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 800a17e:	4618      	mov	r0, r3
 800a180:	370c      	adds	r7, #12
 800a182:	46bd      	mov	sp, r7
 800a184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a188:	4770      	bx	lr
	...

0800a18c <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b08a      	sub	sp, #40	; 0x28
 800a190:	af00      	add	r7, sp, #0
 800a192:	60f8      	str	r0, [r7, #12]
 800a194:	60b9      	str	r1, [r7, #8]
 800a196:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800a198:	2300      	movs	r3, #0
 800a19a:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	795b      	ldrb	r3, [r3, #5]
 800a1a0:	2b01      	cmp	r3, #1
 800a1a2:	d101      	bne.n	800a1a8 <HAL_DAC_ConfigChannel+0x1c>
 800a1a4:	2302      	movs	r3, #2
 800a1a6:	e194      	b.n	800a4d2 <HAL_DAC_ConfigChannel+0x346>
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2202      	movs	r2, #2
 800a1b2:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	689b      	ldr	r3, [r3, #8]
 800a1b8:	2b04      	cmp	r3, #4
 800a1ba:	d174      	bne.n	800a2a6 <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d137      	bne.n	800a232 <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800a1c2:	f7fe f957 	bl	8008474 <HAL_GetTick>
 800a1c6:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800a1c8:	e011      	b.n	800a1ee <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800a1ca:	f7fe f953 	bl	8008474 <HAL_GetTick>
 800a1ce:	4602      	mov	r2, r0
 800a1d0:	69fb      	ldr	r3, [r7, #28]
 800a1d2:	1ad3      	subs	r3, r2, r3
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	d90a      	bls.n	800a1ee <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	691b      	ldr	r3, [r3, #16]
 800a1dc:	f043 0208 	orr.w	r2, r3, #8
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2203      	movs	r2, #3
 800a1e8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800a1ea:	2303      	movs	r3, #3
 800a1ec:	e171      	b.n	800a4d2 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d1e6      	bne.n	800a1ca <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800a1fc:	2001      	movs	r0, #1
 800a1fe:	f7fe f945 	bl	800848c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	68ba      	ldr	r2, [r7, #8]
 800a208:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a20a:	641a      	str	r2, [r3, #64]	; 0x40
 800a20c:	e01e      	b.n	800a24c <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800a20e:	f7fe f931 	bl	8008474 <HAL_GetTick>
 800a212:	4602      	mov	r2, r0
 800a214:	69fb      	ldr	r3, [r7, #28]
 800a216:	1ad3      	subs	r3, r2, r3
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d90a      	bls.n	800a232 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	691b      	ldr	r3, [r3, #16]
 800a220:	f043 0208 	orr.w	r2, r3, #8
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2203      	movs	r2, #3
 800a22c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800a22e:	2303      	movs	r3, #3
 800a230:	e14f      	b.n	800a4d2 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a238:	2b00      	cmp	r3, #0
 800a23a:	dbe8      	blt.n	800a20e <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800a23c:	2001      	movs	r0, #1
 800a23e:	f7fe f925 	bl	800848c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	68ba      	ldr	r2, [r7, #8]
 800a248:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a24a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f003 0310 	and.w	r3, r3, #16
 800a258:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800a25c:	fa01 f303 	lsl.w	r3, r1, r3
 800a260:	43db      	mvns	r3, r3
 800a262:	ea02 0103 	and.w	r1, r2, r3
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f003 0310 	and.w	r3, r3, #16
 800a270:	409a      	lsls	r2, r3
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	430a      	orrs	r2, r1
 800a278:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f003 0310 	and.w	r3, r3, #16
 800a286:	21ff      	movs	r1, #255	; 0xff
 800a288:	fa01 f303 	lsl.w	r3, r1, r3
 800a28c:	43db      	mvns	r3, r3
 800a28e:	ea02 0103 	and.w	r1, r2, r3
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f003 0310 	and.w	r3, r3, #16
 800a29c:	409a      	lsls	r2, r3
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	430a      	orrs	r2, r1
 800a2a4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	69db      	ldr	r3, [r3, #28]
 800a2aa:	2b01      	cmp	r3, #1
 800a2ac:	d11d      	bne.n	800a2ea <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2b4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f003 0310 	and.w	r3, r3, #16
 800a2bc:	221f      	movs	r2, #31
 800a2be:	fa02 f303 	lsl.w	r3, r2, r3
 800a2c2:	43db      	mvns	r3, r3
 800a2c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2c6:	4013      	ands	r3, r2
 800a2c8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	6a1b      	ldr	r3, [r3, #32]
 800a2ce:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f003 0310 	and.w	r3, r3, #16
 800a2d6:	69ba      	ldr	r2, [r7, #24]
 800a2d8:	fa02 f303 	lsl.w	r3, r2, r3
 800a2dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2e8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2f0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f003 0310 	and.w	r3, r3, #16
 800a2f8:	2207      	movs	r2, #7
 800a2fa:	fa02 f303 	lsl.w	r3, r2, r3
 800a2fe:	43db      	mvns	r3, r3
 800a300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a302:	4013      	ands	r3, r2
 800a304:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	699b      	ldr	r3, [r3, #24]
 800a30a:	f003 0301 	and.w	r3, r3, #1
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d002      	beq.n	800a318 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 800a312:	2300      	movs	r3, #0
 800a314:	623b      	str	r3, [r7, #32]
 800a316:	e011      	b.n	800a33c <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	699b      	ldr	r3, [r3, #24]
 800a31c:	f003 0302 	and.w	r3, r3, #2
 800a320:	2b00      	cmp	r3, #0
 800a322:	d002      	beq.n	800a32a <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800a324:	2301      	movs	r3, #1
 800a326:	623b      	str	r3, [r7, #32]
 800a328:	e008      	b.n	800a33c <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	695b      	ldr	r3, [r3, #20]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d102      	bne.n	800a338 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800a332:	2301      	movs	r3, #1
 800a334:	623b      	str	r3, [r7, #32]
 800a336:	e001      	b.n	800a33c <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800a338:	2300      	movs	r3, #0
 800a33a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	689a      	ldr	r2, [r3, #8]
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	695b      	ldr	r3, [r3, #20]
 800a344:	4313      	orrs	r3, r2
 800a346:	6a3a      	ldr	r2, [r7, #32]
 800a348:	4313      	orrs	r3, r2
 800a34a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f003 0310 	and.w	r3, r3, #16
 800a352:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a356:	fa02 f303 	lsl.w	r3, r2, r3
 800a35a:	43db      	mvns	r3, r3
 800a35c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a35e:	4013      	ands	r3, r2
 800a360:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	791b      	ldrb	r3, [r3, #4]
 800a366:	2b01      	cmp	r3, #1
 800a368:	d102      	bne.n	800a370 <HAL_DAC_ConfigChannel+0x1e4>
 800a36a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a36e:	e000      	b.n	800a372 <HAL_DAC_ConfigChannel+0x1e6>
 800a370:	2300      	movs	r3, #0
 800a372:	69ba      	ldr	r2, [r7, #24]
 800a374:	4313      	orrs	r3, r2
 800a376:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f003 0310 	and.w	r3, r3, #16
 800a37e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a382:	fa02 f303 	lsl.w	r3, r2, r3
 800a386:	43db      	mvns	r3, r3
 800a388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a38a:	4013      	ands	r3, r2
 800a38c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	795b      	ldrb	r3, [r3, #5]
 800a392:	2b01      	cmp	r3, #1
 800a394:	d102      	bne.n	800a39c <HAL_DAC_ConfigChannel+0x210>
 800a396:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a39a:	e000      	b.n	800a39e <HAL_DAC_ConfigChannel+0x212>
 800a39c:	2300      	movs	r3, #0
 800a39e:	69ba      	ldr	r2, [r7, #24]
 800a3a0:	4313      	orrs	r3, r2
 800a3a2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800a3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800a3aa:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	2b02      	cmp	r3, #2
 800a3b2:	d114      	bne.n	800a3de <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800a3b4:	f001 fbc2 	bl	800bb3c <HAL_RCC_GetHCLKFreq>
 800a3b8:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	4a47      	ldr	r2, [pc, #284]	; (800a4dc <HAL_DAC_ConfigChannel+0x350>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d904      	bls.n	800a3cc <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800a3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3c8:	627b      	str	r3, [r7, #36]	; 0x24
 800a3ca:	e00d      	b.n	800a3e8 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	4a44      	ldr	r2, [pc, #272]	; (800a4e0 <HAL_DAC_ConfigChannel+0x354>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d909      	bls.n	800a3e8 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800a3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a3da:	627b      	str	r3, [r7, #36]	; 0x24
 800a3dc:	e004      	b.n	800a3e8 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3e4:	4313      	orrs	r3, r2
 800a3e6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f003 0310 	and.w	r3, r3, #16
 800a3ee:	69ba      	ldr	r2, [r7, #24]
 800a3f0:	fa02 f303 	lsl.w	r3, r2, r3
 800a3f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3f6:	4313      	orrs	r3, r2
 800a3f8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a400:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	6819      	ldr	r1, [r3, #0]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f003 0310 	and.w	r3, r3, #16
 800a40e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a412:	fa02 f303 	lsl.w	r3, r2, r3
 800a416:	43da      	mvns	r2, r3
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	400a      	ands	r2, r1
 800a41e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f003 0310 	and.w	r3, r3, #16
 800a42e:	f640 72fe 	movw	r2, #4094	; 0xffe
 800a432:	fa02 f303 	lsl.w	r3, r2, r3
 800a436:	43db      	mvns	r3, r3
 800a438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a43a:	4013      	ands	r3, r2
 800a43c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	68db      	ldr	r3, [r3, #12]
 800a442:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f003 0310 	and.w	r3, r3, #16
 800a44a:	69ba      	ldr	r2, [r7, #24]
 800a44c:	fa02 f303 	lsl.w	r3, r2, r3
 800a450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a452:	4313      	orrs	r3, r2
 800a454:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a45c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	6819      	ldr	r1, [r3, #0]
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f003 0310 	and.w	r3, r3, #16
 800a46a:	22c0      	movs	r2, #192	; 0xc0
 800a46c:	fa02 f303 	lsl.w	r3, r2, r3
 800a470:	43da      	mvns	r2, r3
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	400a      	ands	r2, r1
 800a478:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	68db      	ldr	r3, [r3, #12]
 800a47e:	089b      	lsrs	r3, r3, #2
 800a480:	f003 030f 	and.w	r3, r3, #15
 800a484:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	691b      	ldr	r3, [r3, #16]
 800a48a:	089b      	lsrs	r3, r3, #2
 800a48c:	021b      	lsls	r3, r3, #8
 800a48e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a492:	69ba      	ldr	r2, [r7, #24]
 800a494:	4313      	orrs	r3, r2
 800a496:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f003 0310 	and.w	r3, r3, #16
 800a4a4:	f640 710f 	movw	r1, #3855	; 0xf0f
 800a4a8:	fa01 f303 	lsl.w	r3, r1, r3
 800a4ac:	43db      	mvns	r3, r3
 800a4ae:	ea02 0103 	and.w	r1, r2, r3
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f003 0310 	and.w	r3, r3, #16
 800a4b8:	69ba      	ldr	r2, [r7, #24]
 800a4ba:	409a      	lsls	r2, r3
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	430a      	orrs	r2, r1
 800a4c2:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800a4d0:	2300      	movs	r3, #0
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3728      	adds	r7, #40	; 0x28
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
 800a4da:	bf00      	nop
 800a4dc:	09896800 	.word	0x09896800
 800a4e0:	04c4b400 	.word	0x04c4b400

0800a4e4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b084      	sub	sp, #16
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4f0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800a4f2:	68f8      	ldr	r0, [r7, #12]
 800a4f4:	f7fd f827 	bl	8007546 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2201      	movs	r2, #1
 800a4fc:	711a      	strb	r2, [r3, #4]
}
 800a4fe:	bf00      	nop
 800a500:	3710      	adds	r7, #16
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}

0800a506 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800a506:	b580      	push	{r7, lr}
 800a508:	b084      	sub	sp, #16
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a512:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800a514:	68f8      	ldr	r0, [r7, #12]
 800a516:	f7ff fe0f 	bl	800a138 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800a51a:	bf00      	nop
 800a51c:	3710      	adds	r7, #16
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}

0800a522 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800a522:	b580      	push	{r7, lr}
 800a524:	b084      	sub	sp, #16
 800a526:	af00      	add	r7, sp, #0
 800a528:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a52e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	691b      	ldr	r3, [r3, #16]
 800a534:	f043 0204 	orr.w	r2, r3, #4
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800a53c:	68f8      	ldr	r0, [r7, #12]
 800a53e:	f7ff fe05 	bl	800a14c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2201      	movs	r2, #1
 800a546:	711a      	strb	r2, [r3, #4]
}
 800a548:	bf00      	nop
 800a54a:	3710      	adds	r7, #16
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}

0800a550 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800a550:	b480      	push	{r7}
 800a552:	b083      	sub	sp, #12
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800a558:	bf00      	nop
 800a55a:	370c      	adds	r7, #12
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr

0800a564 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800a564:	b480      	push	{r7}
 800a566:	b083      	sub	sp, #12
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800a56c:	bf00      	nop
 800a56e:	370c      	adds	r7, #12
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr

0800a578 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800a578:	b480      	push	{r7}
 800a57a:	b083      	sub	sp, #12
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800a580:	bf00      	nop
 800a582:	370c      	adds	r7, #12
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr

0800a58c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b084      	sub	sp, #16
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a598:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800a59a:	68f8      	ldr	r0, [r7, #12]
 800a59c:	f7ff ffd8 	bl	800a550 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	711a      	strb	r2, [r3, #4]
}
 800a5a6:	bf00      	nop
 800a5a8:	3710      	adds	r7, #16
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}

0800a5ae <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800a5ae:	b580      	push	{r7, lr}
 800a5b0:	b084      	sub	sp, #16
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ba:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800a5bc:	68f8      	ldr	r0, [r7, #12]
 800a5be:	f7ff ffd1 	bl	800a564 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800a5c2:	bf00      	nop
 800a5c4:	3710      	adds	r7, #16
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}

0800a5ca <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800a5ca:	b580      	push	{r7, lr}
 800a5cc:	b084      	sub	sp, #16
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5d6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	691b      	ldr	r3, [r3, #16]
 800a5dc:	f043 0204 	orr.w	r2, r3, #4
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800a5e4:	68f8      	ldr	r0, [r7, #12]
 800a5e6:	f7ff ffc7 	bl	800a578 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	711a      	strb	r2, [r3, #4]
}
 800a5f0:	bf00      	nop
 800a5f2:	3710      	adds	r7, #16
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}

0800a5f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b084      	sub	sp, #16
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d101      	bne.n	800a60a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800a606:	2301      	movs	r3, #1
 800a608:	e08d      	b.n	800a726 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	461a      	mov	r2, r3
 800a610:	4b47      	ldr	r3, [pc, #284]	; (800a730 <HAL_DMA_Init+0x138>)
 800a612:	429a      	cmp	r2, r3
 800a614:	d80f      	bhi.n	800a636 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	461a      	mov	r2, r3
 800a61c:	4b45      	ldr	r3, [pc, #276]	; (800a734 <HAL_DMA_Init+0x13c>)
 800a61e:	4413      	add	r3, r2
 800a620:	4a45      	ldr	r2, [pc, #276]	; (800a738 <HAL_DMA_Init+0x140>)
 800a622:	fba2 2303 	umull	r2, r3, r2, r3
 800a626:	091b      	lsrs	r3, r3, #4
 800a628:	009a      	lsls	r2, r3, #2
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	4a42      	ldr	r2, [pc, #264]	; (800a73c <HAL_DMA_Init+0x144>)
 800a632:	641a      	str	r2, [r3, #64]	; 0x40
 800a634:	e00e      	b.n	800a654 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	461a      	mov	r2, r3
 800a63c:	4b40      	ldr	r3, [pc, #256]	; (800a740 <HAL_DMA_Init+0x148>)
 800a63e:	4413      	add	r3, r2
 800a640:	4a3d      	ldr	r2, [pc, #244]	; (800a738 <HAL_DMA_Init+0x140>)
 800a642:	fba2 2303 	umull	r2, r3, r2, r3
 800a646:	091b      	lsrs	r3, r3, #4
 800a648:	009a      	lsls	r2, r3, #2
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	4a3c      	ldr	r2, [pc, #240]	; (800a744 <HAL_DMA_Init+0x14c>)
 800a652:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2202      	movs	r2, #2
 800a658:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a66a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a66e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800a678:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	691b      	ldr	r3, [r3, #16]
 800a67e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a684:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	699b      	ldr	r3, [r3, #24]
 800a68a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a690:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6a1b      	ldr	r3, [r3, #32]
 800a696:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800a698:	68fa      	ldr	r2, [r7, #12]
 800a69a:	4313      	orrs	r3, r2
 800a69c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	68fa      	ldr	r2, [r7, #12]
 800a6a4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f000 fa10 	bl	800aacc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	689b      	ldr	r3, [r3, #8]
 800a6b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a6b4:	d102      	bne.n	800a6bc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	685a      	ldr	r2, [r3, #4]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6c4:	b2d2      	uxtb	r2, r2
 800a6c6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6cc:	687a      	ldr	r2, [r7, #4]
 800a6ce:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a6d0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	685b      	ldr	r3, [r3, #4]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d010      	beq.n	800a6fc <HAL_DMA_Init+0x104>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	2b04      	cmp	r3, #4
 800a6e0:	d80c      	bhi.n	800a6fc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f000 fa30 	bl	800ab48 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6f4:	687a      	ldr	r2, [r7, #4]
 800a6f6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a6f8:	605a      	str	r2, [r3, #4]
 800a6fa:	e008      	b.n	800a70e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2200      	movs	r2, #0
 800a700:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2200      	movs	r2, #0
 800a706:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2200      	movs	r2, #0
 800a70c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2200      	movs	r2, #0
 800a712:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2201      	movs	r2, #1
 800a718:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2200      	movs	r2, #0
 800a720:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a724:	2300      	movs	r3, #0
}
 800a726:	4618      	mov	r0, r3
 800a728:	3710      	adds	r7, #16
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
 800a72e:	bf00      	nop
 800a730:	40020407 	.word	0x40020407
 800a734:	bffdfff8 	.word	0xbffdfff8
 800a738:	cccccccd 	.word	0xcccccccd
 800a73c:	40020000 	.word	0x40020000
 800a740:	bffdfbf8 	.word	0xbffdfbf8
 800a744:	40020400 	.word	0x40020400

0800a748 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b086      	sub	sp, #24
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	60f8      	str	r0, [r7, #12]
 800a750:	60b9      	str	r1, [r7, #8]
 800a752:	607a      	str	r2, [r7, #4]
 800a754:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a756:	2300      	movs	r3, #0
 800a758:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a760:	2b01      	cmp	r3, #1
 800a762:	d101      	bne.n	800a768 <HAL_DMA_Start_IT+0x20>
 800a764:	2302      	movs	r3, #2
 800a766:	e066      	b.n	800a836 <HAL_DMA_Start_IT+0xee>
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	2201      	movs	r2, #1
 800a76c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a776:	b2db      	uxtb	r3, r3
 800a778:	2b01      	cmp	r3, #1
 800a77a:	d155      	bne.n	800a828 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	2202      	movs	r2, #2
 800a780:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	2200      	movs	r2, #0
 800a788:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	681a      	ldr	r2, [r3, #0]
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f022 0201 	bic.w	r2, r2, #1
 800a798:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	687a      	ldr	r2, [r7, #4]
 800a79e:	68b9      	ldr	r1, [r7, #8]
 800a7a0:	68f8      	ldr	r0, [r7, #12]
 800a7a2:	f000 f954 	bl	800aa4e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d008      	beq.n	800a7c0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	681a      	ldr	r2, [r3, #0]
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f042 020e 	orr.w	r2, r2, #14
 800a7bc:	601a      	str	r2, [r3, #0]
 800a7be:	e00f      	b.n	800a7e0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	681a      	ldr	r2, [r3, #0]
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f022 0204 	bic.w	r2, r2, #4
 800a7ce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	681a      	ldr	r2, [r3, #0]
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f042 020a 	orr.w	r2, r2, #10
 800a7de:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d007      	beq.n	800a7fe <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7f2:	681a      	ldr	r2, [r3, #0]
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a7fc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a802:	2b00      	cmp	r3, #0
 800a804:	d007      	beq.n	800a816 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a80a:	681a      	ldr	r2, [r3, #0]
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a810:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a814:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	681a      	ldr	r2, [r3, #0]
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f042 0201 	orr.w	r2, r2, #1
 800a824:	601a      	str	r2, [r3, #0]
 800a826:	e005      	b.n	800a834 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2200      	movs	r2, #0
 800a82c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800a830:	2302      	movs	r3, #2
 800a832:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800a834:	7dfb      	ldrb	r3, [r7, #23]
}
 800a836:	4618      	mov	r0, r3
 800a838:	3718      	adds	r7, #24
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}

0800a83e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a83e:	b480      	push	{r7}
 800a840:	b085      	sub	sp, #20
 800a842:	af00      	add	r7, sp, #0
 800a844:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a846:	2300      	movs	r3, #0
 800a848:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a850:	b2db      	uxtb	r3, r3
 800a852:	2b02      	cmp	r3, #2
 800a854:	d005      	beq.n	800a862 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2204      	movs	r2, #4
 800a85a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800a85c:	2301      	movs	r3, #1
 800a85e:	73fb      	strb	r3, [r7, #15]
 800a860:	e037      	b.n	800a8d2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	681a      	ldr	r2, [r3, #0]
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f022 020e 	bic.w	r2, r2, #14
 800a870:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a876:	681a      	ldr	r2, [r3, #0]
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a87c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a880:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	681a      	ldr	r2, [r3, #0]
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f022 0201 	bic.w	r2, r2, #1
 800a890:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a896:	f003 021f 	and.w	r2, r3, #31
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a89e:	2101      	movs	r1, #1
 800a8a0:	fa01 f202 	lsl.w	r2, r1, r2
 800a8a4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8aa:	687a      	ldr	r2, [r7, #4]
 800a8ac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a8ae:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d00c      	beq.n	800a8d2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8bc:	681a      	ldr	r2, [r3, #0]
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a8c6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a8d0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2201      	movs	r2, #1
 800a8d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800a8e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3714      	adds	r7, #20
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr

0800a8f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b084      	sub	sp, #16
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a90c:	f003 031f 	and.w	r3, r3, #31
 800a910:	2204      	movs	r2, #4
 800a912:	409a      	lsls	r2, r3
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	4013      	ands	r3, r2
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d026      	beq.n	800a96a <HAL_DMA_IRQHandler+0x7a>
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	f003 0304 	and.w	r3, r3, #4
 800a922:	2b00      	cmp	r3, #0
 800a924:	d021      	beq.n	800a96a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f003 0320 	and.w	r3, r3, #32
 800a930:	2b00      	cmp	r3, #0
 800a932:	d107      	bne.n	800a944 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	681a      	ldr	r2, [r3, #0]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f022 0204 	bic.w	r2, r2, #4
 800a942:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a948:	f003 021f 	and.w	r2, r3, #31
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a950:	2104      	movs	r1, #4
 800a952:	fa01 f202 	lsl.w	r2, r1, r2
 800a956:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d071      	beq.n	800aa44 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800a968:	e06c      	b.n	800aa44 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a96e:	f003 031f 	and.w	r3, r3, #31
 800a972:	2202      	movs	r2, #2
 800a974:	409a      	lsls	r2, r3
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	4013      	ands	r3, r2
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d02e      	beq.n	800a9dc <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	f003 0302 	and.w	r3, r3, #2
 800a984:	2b00      	cmp	r3, #0
 800a986:	d029      	beq.n	800a9dc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f003 0320 	and.w	r3, r3, #32
 800a992:	2b00      	cmp	r3, #0
 800a994:	d10b      	bne.n	800a9ae <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	681a      	ldr	r2, [r3, #0]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f022 020a 	bic.w	r2, r2, #10
 800a9a4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9b2:	f003 021f 	and.w	r2, r3, #31
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ba:	2102      	movs	r1, #2
 800a9bc:	fa01 f202 	lsl.w	r2, r1, r2
 800a9c0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d038      	beq.n	800aa44 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800a9da:	e033      	b.n	800aa44 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9e0:	f003 031f 	and.w	r3, r3, #31
 800a9e4:	2208      	movs	r2, #8
 800a9e6:	409a      	lsls	r2, r3
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	4013      	ands	r3, r2
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d02a      	beq.n	800aa46 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	f003 0308 	and.w	r3, r3, #8
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d025      	beq.n	800aa46 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	681a      	ldr	r2, [r3, #0]
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f022 020e 	bic.w	r2, r2, #14
 800aa08:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa0e:	f003 021f 	and.w	r2, r3, #31
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa16:	2101      	movs	r1, #1
 800aa18:	fa01 f202 	lsl.w	r2, r1, r2
 800aa1c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2201      	movs	r2, #1
 800aa22:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2201      	movs	r2, #1
 800aa28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d004      	beq.n	800aa46 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800aa44:	bf00      	nop
 800aa46:	bf00      	nop
}
 800aa48:	3710      	adds	r7, #16
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}

0800aa4e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800aa4e:	b480      	push	{r7}
 800aa50:	b085      	sub	sp, #20
 800aa52:	af00      	add	r7, sp, #0
 800aa54:	60f8      	str	r0, [r7, #12]
 800aa56:	60b9      	str	r1, [r7, #8]
 800aa58:	607a      	str	r2, [r7, #4]
 800aa5a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa60:	68fa      	ldr	r2, [r7, #12]
 800aa62:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800aa64:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d004      	beq.n	800aa78 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa72:	68fa      	ldr	r2, [r7, #12]
 800aa74:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800aa76:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa7c:	f003 021f 	and.w	r2, r3, #31
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa84:	2101      	movs	r1, #1
 800aa86:	fa01 f202 	lsl.w	r2, r1, r2
 800aa8a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	683a      	ldr	r2, [r7, #0]
 800aa92:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	689b      	ldr	r3, [r3, #8]
 800aa98:	2b10      	cmp	r3, #16
 800aa9a:	d108      	bne.n	800aaae <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	687a      	ldr	r2, [r7, #4]
 800aaa2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	68ba      	ldr	r2, [r7, #8]
 800aaaa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800aaac:	e007      	b.n	800aabe <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	68ba      	ldr	r2, [r7, #8]
 800aab4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	687a      	ldr	r2, [r7, #4]
 800aabc:	60da      	str	r2, [r3, #12]
}
 800aabe:	bf00      	nop
 800aac0:	3714      	adds	r7, #20
 800aac2:	46bd      	mov	sp, r7
 800aac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac8:	4770      	bx	lr
	...

0800aacc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800aacc:	b480      	push	{r7}
 800aace:	b087      	sub	sp, #28
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	461a      	mov	r2, r3
 800aada:	4b16      	ldr	r3, [pc, #88]	; (800ab34 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800aadc:	429a      	cmp	r2, r3
 800aade:	d802      	bhi.n	800aae6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800aae0:	4b15      	ldr	r3, [pc, #84]	; (800ab38 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800aae2:	617b      	str	r3, [r7, #20]
 800aae4:	e001      	b.n	800aaea <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800aae6:	4b15      	ldr	r3, [pc, #84]	; (800ab3c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800aae8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	b2db      	uxtb	r3, r3
 800aaf4:	3b08      	subs	r3, #8
 800aaf6:	4a12      	ldr	r2, [pc, #72]	; (800ab40 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800aaf8:	fba2 2303 	umull	r2, r3, r2, r3
 800aafc:	091b      	lsrs	r3, r3, #4
 800aafe:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab04:	089b      	lsrs	r3, r3, #2
 800ab06:	009a      	lsls	r2, r3, #2
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	4413      	add	r3, r2
 800ab0c:	461a      	mov	r2, r3
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	4a0b      	ldr	r2, [pc, #44]	; (800ab44 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800ab16:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f003 031f 	and.w	r3, r3, #31
 800ab1e:	2201      	movs	r2, #1
 800ab20:	409a      	lsls	r2, r3
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	651a      	str	r2, [r3, #80]	; 0x50
}
 800ab26:	bf00      	nop
 800ab28:	371c      	adds	r7, #28
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab30:	4770      	bx	lr
 800ab32:	bf00      	nop
 800ab34:	40020407 	.word	0x40020407
 800ab38:	40020800 	.word	0x40020800
 800ab3c:	40020820 	.word	0x40020820
 800ab40:	cccccccd 	.word	0xcccccccd
 800ab44:	40020880 	.word	0x40020880

0800ab48 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b085      	sub	sp, #20
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	685b      	ldr	r3, [r3, #4]
 800ab54:	b2db      	uxtb	r3, r3
 800ab56:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800ab58:	68fa      	ldr	r2, [r7, #12]
 800ab5a:	4b0b      	ldr	r3, [pc, #44]	; (800ab88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800ab5c:	4413      	add	r3, r2
 800ab5e:	009b      	lsls	r3, r3, #2
 800ab60:	461a      	mov	r2, r3
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	4a08      	ldr	r2, [pc, #32]	; (800ab8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800ab6a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	3b01      	subs	r3, #1
 800ab70:	f003 031f 	and.w	r3, r3, #31
 800ab74:	2201      	movs	r2, #1
 800ab76:	409a      	lsls	r2, r3
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800ab7c:	bf00      	nop
 800ab7e:	3714      	adds	r7, #20
 800ab80:	46bd      	mov	sp, r7
 800ab82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab86:	4770      	bx	lr
 800ab88:	1000823f 	.word	0x1000823f
 800ab8c:	40020940 	.word	0x40020940

0800ab90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b087      	sub	sp, #28
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800ab9e:	e15a      	b.n	800ae56 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	681a      	ldr	r2, [r3, #0]
 800aba4:	2101      	movs	r1, #1
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	fa01 f303 	lsl.w	r3, r1, r3
 800abac:	4013      	ands	r3, r2
 800abae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	f000 814c 	beq.w	800ae50 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	685b      	ldr	r3, [r3, #4]
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	d00b      	beq.n	800abd8 <HAL_GPIO_Init+0x48>
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	2b02      	cmp	r3, #2
 800abc6:	d007      	beq.n	800abd8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800abcc:	2b11      	cmp	r3, #17
 800abce:	d003      	beq.n	800abd8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	685b      	ldr	r3, [r3, #4]
 800abd4:	2b12      	cmp	r3, #18
 800abd6:	d130      	bne.n	800ac3a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	689b      	ldr	r3, [r3, #8]
 800abdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	005b      	lsls	r3, r3, #1
 800abe2:	2203      	movs	r2, #3
 800abe4:	fa02 f303 	lsl.w	r3, r2, r3
 800abe8:	43db      	mvns	r3, r3
 800abea:	693a      	ldr	r2, [r7, #16]
 800abec:	4013      	ands	r3, r2
 800abee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	68da      	ldr	r2, [r3, #12]
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	005b      	lsls	r3, r3, #1
 800abf8:	fa02 f303 	lsl.w	r3, r2, r3
 800abfc:	693a      	ldr	r2, [r7, #16]
 800abfe:	4313      	orrs	r3, r2
 800ac00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	693a      	ldr	r2, [r7, #16]
 800ac06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800ac0e:	2201      	movs	r2, #1
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	fa02 f303 	lsl.w	r3, r2, r3
 800ac16:	43db      	mvns	r3, r3
 800ac18:	693a      	ldr	r2, [r7, #16]
 800ac1a:	4013      	ands	r3, r2
 800ac1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	685b      	ldr	r3, [r3, #4]
 800ac22:	091b      	lsrs	r3, r3, #4
 800ac24:	f003 0201 	and.w	r2, r3, #1
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	fa02 f303 	lsl.w	r3, r2, r3
 800ac2e:	693a      	ldr	r2, [r7, #16]
 800ac30:	4313      	orrs	r3, r2
 800ac32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	693a      	ldr	r2, [r7, #16]
 800ac38:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	68db      	ldr	r3, [r3, #12]
 800ac3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	005b      	lsls	r3, r3, #1
 800ac44:	2203      	movs	r2, #3
 800ac46:	fa02 f303 	lsl.w	r3, r2, r3
 800ac4a:	43db      	mvns	r3, r3
 800ac4c:	693a      	ldr	r2, [r7, #16]
 800ac4e:	4013      	ands	r3, r2
 800ac50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	689a      	ldr	r2, [r3, #8]
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	005b      	lsls	r3, r3, #1
 800ac5a:	fa02 f303 	lsl.w	r3, r2, r3
 800ac5e:	693a      	ldr	r2, [r7, #16]
 800ac60:	4313      	orrs	r3, r2
 800ac62:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	693a      	ldr	r2, [r7, #16]
 800ac68:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	685b      	ldr	r3, [r3, #4]
 800ac6e:	2b02      	cmp	r3, #2
 800ac70:	d003      	beq.n	800ac7a <HAL_GPIO_Init+0xea>
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	685b      	ldr	r3, [r3, #4]
 800ac76:	2b12      	cmp	r3, #18
 800ac78:	d123      	bne.n	800acc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	08da      	lsrs	r2, r3, #3
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	3208      	adds	r2, #8
 800ac82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	f003 0307 	and.w	r3, r3, #7
 800ac8e:	009b      	lsls	r3, r3, #2
 800ac90:	220f      	movs	r2, #15
 800ac92:	fa02 f303 	lsl.w	r3, r2, r3
 800ac96:	43db      	mvns	r3, r3
 800ac98:	693a      	ldr	r2, [r7, #16]
 800ac9a:	4013      	ands	r3, r2
 800ac9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	691a      	ldr	r2, [r3, #16]
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	f003 0307 	and.w	r3, r3, #7
 800aca8:	009b      	lsls	r3, r3, #2
 800acaa:	fa02 f303 	lsl.w	r3, r2, r3
 800acae:	693a      	ldr	r2, [r7, #16]
 800acb0:	4313      	orrs	r3, r2
 800acb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	08da      	lsrs	r2, r3, #3
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	3208      	adds	r2, #8
 800acbc:	6939      	ldr	r1, [r7, #16]
 800acbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	005b      	lsls	r3, r3, #1
 800accc:	2203      	movs	r2, #3
 800acce:	fa02 f303 	lsl.w	r3, r2, r3
 800acd2:	43db      	mvns	r3, r3
 800acd4:	693a      	ldr	r2, [r7, #16]
 800acd6:	4013      	ands	r3, r2
 800acd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	685b      	ldr	r3, [r3, #4]
 800acde:	f003 0203 	and.w	r2, r3, #3
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	005b      	lsls	r3, r3, #1
 800ace6:	fa02 f303 	lsl.w	r3, r2, r3
 800acea:	693a      	ldr	r2, [r7, #16]
 800acec:	4313      	orrs	r3, r2
 800acee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	693a      	ldr	r2, [r7, #16]
 800acf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	685b      	ldr	r3, [r3, #4]
 800acfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	f000 80a6 	beq.w	800ae50 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ad04:	4b5b      	ldr	r3, [pc, #364]	; (800ae74 <HAL_GPIO_Init+0x2e4>)
 800ad06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad08:	4a5a      	ldr	r2, [pc, #360]	; (800ae74 <HAL_GPIO_Init+0x2e4>)
 800ad0a:	f043 0301 	orr.w	r3, r3, #1
 800ad0e:	6613      	str	r3, [r2, #96]	; 0x60
 800ad10:	4b58      	ldr	r3, [pc, #352]	; (800ae74 <HAL_GPIO_Init+0x2e4>)
 800ad12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad14:	f003 0301 	and.w	r3, r3, #1
 800ad18:	60bb      	str	r3, [r7, #8]
 800ad1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ad1c:	4a56      	ldr	r2, [pc, #344]	; (800ae78 <HAL_GPIO_Init+0x2e8>)
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	089b      	lsrs	r3, r3, #2
 800ad22:	3302      	adds	r3, #2
 800ad24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800ad2a:	697b      	ldr	r3, [r7, #20]
 800ad2c:	f003 0303 	and.w	r3, r3, #3
 800ad30:	009b      	lsls	r3, r3, #2
 800ad32:	220f      	movs	r2, #15
 800ad34:	fa02 f303 	lsl.w	r3, r2, r3
 800ad38:	43db      	mvns	r3, r3
 800ad3a:	693a      	ldr	r2, [r7, #16]
 800ad3c:	4013      	ands	r3, r2
 800ad3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800ad46:	d01f      	beq.n	800ad88 <HAL_GPIO_Init+0x1f8>
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	4a4c      	ldr	r2, [pc, #304]	; (800ae7c <HAL_GPIO_Init+0x2ec>)
 800ad4c:	4293      	cmp	r3, r2
 800ad4e:	d019      	beq.n	800ad84 <HAL_GPIO_Init+0x1f4>
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	4a4b      	ldr	r2, [pc, #300]	; (800ae80 <HAL_GPIO_Init+0x2f0>)
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d013      	beq.n	800ad80 <HAL_GPIO_Init+0x1f0>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	4a4a      	ldr	r2, [pc, #296]	; (800ae84 <HAL_GPIO_Init+0x2f4>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d00d      	beq.n	800ad7c <HAL_GPIO_Init+0x1ec>
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	4a49      	ldr	r2, [pc, #292]	; (800ae88 <HAL_GPIO_Init+0x2f8>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d007      	beq.n	800ad78 <HAL_GPIO_Init+0x1e8>
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	4a48      	ldr	r2, [pc, #288]	; (800ae8c <HAL_GPIO_Init+0x2fc>)
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d101      	bne.n	800ad74 <HAL_GPIO_Init+0x1e4>
 800ad70:	2305      	movs	r3, #5
 800ad72:	e00a      	b.n	800ad8a <HAL_GPIO_Init+0x1fa>
 800ad74:	2306      	movs	r3, #6
 800ad76:	e008      	b.n	800ad8a <HAL_GPIO_Init+0x1fa>
 800ad78:	2304      	movs	r3, #4
 800ad7a:	e006      	b.n	800ad8a <HAL_GPIO_Init+0x1fa>
 800ad7c:	2303      	movs	r3, #3
 800ad7e:	e004      	b.n	800ad8a <HAL_GPIO_Init+0x1fa>
 800ad80:	2302      	movs	r3, #2
 800ad82:	e002      	b.n	800ad8a <HAL_GPIO_Init+0x1fa>
 800ad84:	2301      	movs	r3, #1
 800ad86:	e000      	b.n	800ad8a <HAL_GPIO_Init+0x1fa>
 800ad88:	2300      	movs	r3, #0
 800ad8a:	697a      	ldr	r2, [r7, #20]
 800ad8c:	f002 0203 	and.w	r2, r2, #3
 800ad90:	0092      	lsls	r2, r2, #2
 800ad92:	4093      	lsls	r3, r2
 800ad94:	693a      	ldr	r2, [r7, #16]
 800ad96:	4313      	orrs	r3, r2
 800ad98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ad9a:	4937      	ldr	r1, [pc, #220]	; (800ae78 <HAL_GPIO_Init+0x2e8>)
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	089b      	lsrs	r3, r3, #2
 800ada0:	3302      	adds	r3, #2
 800ada2:	693a      	ldr	r2, [r7, #16]
 800ada4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800ada8:	4b39      	ldr	r3, [pc, #228]	; (800ae90 <HAL_GPIO_Init+0x300>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	43db      	mvns	r3, r3
 800adb2:	693a      	ldr	r2, [r7, #16]
 800adb4:	4013      	ands	r3, r2
 800adb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	685b      	ldr	r3, [r3, #4]
 800adbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d003      	beq.n	800adcc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800adc4:	693a      	ldr	r2, [r7, #16]
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	4313      	orrs	r3, r2
 800adca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800adcc:	4a30      	ldr	r2, [pc, #192]	; (800ae90 <HAL_GPIO_Init+0x300>)
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800add2:	4b2f      	ldr	r3, [pc, #188]	; (800ae90 <HAL_GPIO_Init+0x300>)
 800add4:	685b      	ldr	r3, [r3, #4]
 800add6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	43db      	mvns	r3, r3
 800addc:	693a      	ldr	r2, [r7, #16]
 800adde:	4013      	ands	r3, r2
 800ade0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adea:	2b00      	cmp	r3, #0
 800adec:	d003      	beq.n	800adf6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800adee:	693a      	ldr	r2, [r7, #16]
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	4313      	orrs	r3, r2
 800adf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800adf6:	4a26      	ldr	r2, [pc, #152]	; (800ae90 <HAL_GPIO_Init+0x300>)
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800adfc:	4b24      	ldr	r3, [pc, #144]	; (800ae90 <HAL_GPIO_Init+0x300>)
 800adfe:	689b      	ldr	r3, [r3, #8]
 800ae00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	43db      	mvns	r3, r3
 800ae06:	693a      	ldr	r2, [r7, #16]
 800ae08:	4013      	ands	r3, r2
 800ae0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	685b      	ldr	r3, [r3, #4]
 800ae10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d003      	beq.n	800ae20 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800ae18:	693a      	ldr	r2, [r7, #16]
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	4313      	orrs	r3, r2
 800ae1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800ae20:	4a1b      	ldr	r2, [pc, #108]	; (800ae90 <HAL_GPIO_Init+0x300>)
 800ae22:	693b      	ldr	r3, [r7, #16]
 800ae24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800ae26:	4b1a      	ldr	r3, [pc, #104]	; (800ae90 <HAL_GPIO_Init+0x300>)
 800ae28:	68db      	ldr	r3, [r3, #12]
 800ae2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	43db      	mvns	r3, r3
 800ae30:	693a      	ldr	r2, [r7, #16]
 800ae32:	4013      	ands	r3, r2
 800ae34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	685b      	ldr	r3, [r3, #4]
 800ae3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d003      	beq.n	800ae4a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800ae42:	693a      	ldr	r2, [r7, #16]
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	4313      	orrs	r3, r2
 800ae48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800ae4a:	4a11      	ldr	r2, [pc, #68]	; (800ae90 <HAL_GPIO_Init+0x300>)
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	3301      	adds	r3, #1
 800ae54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	681a      	ldr	r2, [r3, #0]
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	fa22 f303 	lsr.w	r3, r2, r3
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	f47f ae9d 	bne.w	800aba0 <HAL_GPIO_Init+0x10>
  }
}
 800ae66:	bf00      	nop
 800ae68:	371c      	adds	r7, #28
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae70:	4770      	bx	lr
 800ae72:	bf00      	nop
 800ae74:	40021000 	.word	0x40021000
 800ae78:	40010000 	.word	0x40010000
 800ae7c:	48000400 	.word	0x48000400
 800ae80:	48000800 	.word	0x48000800
 800ae84:	48000c00 	.word	0x48000c00
 800ae88:	48001000 	.word	0x48001000
 800ae8c:	48001400 	.word	0x48001400
 800ae90:	40010400 	.word	0x40010400

0800ae94 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b087      	sub	sp, #28
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800aea2:	e0bd      	b.n	800b020 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 800aea4:	2201      	movs	r2, #1
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	fa02 f303 	lsl.w	r3, r2, r3
 800aeac:	683a      	ldr	r2, [r7, #0]
 800aeae:	4013      	ands	r3, r2
 800aeb0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800aeb2:	693b      	ldr	r3, [r7, #16]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	f000 80b0 	beq.w	800b01a <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800aeba:	4a60      	ldr	r2, [pc, #384]	; (800b03c <HAL_GPIO_DeInit+0x1a8>)
 800aebc:	697b      	ldr	r3, [r7, #20]
 800aebe:	089b      	lsrs	r3, r3, #2
 800aec0:	3302      	adds	r3, #2
 800aec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aec6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	f003 0303 	and.w	r3, r3, #3
 800aece:	009b      	lsls	r3, r3, #2
 800aed0:	220f      	movs	r2, #15
 800aed2:	fa02 f303 	lsl.w	r3, r2, r3
 800aed6:	68fa      	ldr	r2, [r7, #12]
 800aed8:	4013      	ands	r3, r2
 800aeda:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800aee2:	d01f      	beq.n	800af24 <HAL_GPIO_DeInit+0x90>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	4a56      	ldr	r2, [pc, #344]	; (800b040 <HAL_GPIO_DeInit+0x1ac>)
 800aee8:	4293      	cmp	r3, r2
 800aeea:	d019      	beq.n	800af20 <HAL_GPIO_DeInit+0x8c>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	4a55      	ldr	r2, [pc, #340]	; (800b044 <HAL_GPIO_DeInit+0x1b0>)
 800aef0:	4293      	cmp	r3, r2
 800aef2:	d013      	beq.n	800af1c <HAL_GPIO_DeInit+0x88>
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	4a54      	ldr	r2, [pc, #336]	; (800b048 <HAL_GPIO_DeInit+0x1b4>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d00d      	beq.n	800af18 <HAL_GPIO_DeInit+0x84>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	4a53      	ldr	r2, [pc, #332]	; (800b04c <HAL_GPIO_DeInit+0x1b8>)
 800af00:	4293      	cmp	r3, r2
 800af02:	d007      	beq.n	800af14 <HAL_GPIO_DeInit+0x80>
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	4a52      	ldr	r2, [pc, #328]	; (800b050 <HAL_GPIO_DeInit+0x1bc>)
 800af08:	4293      	cmp	r3, r2
 800af0a:	d101      	bne.n	800af10 <HAL_GPIO_DeInit+0x7c>
 800af0c:	2305      	movs	r3, #5
 800af0e:	e00a      	b.n	800af26 <HAL_GPIO_DeInit+0x92>
 800af10:	2306      	movs	r3, #6
 800af12:	e008      	b.n	800af26 <HAL_GPIO_DeInit+0x92>
 800af14:	2304      	movs	r3, #4
 800af16:	e006      	b.n	800af26 <HAL_GPIO_DeInit+0x92>
 800af18:	2303      	movs	r3, #3
 800af1a:	e004      	b.n	800af26 <HAL_GPIO_DeInit+0x92>
 800af1c:	2302      	movs	r3, #2
 800af1e:	e002      	b.n	800af26 <HAL_GPIO_DeInit+0x92>
 800af20:	2301      	movs	r3, #1
 800af22:	e000      	b.n	800af26 <HAL_GPIO_DeInit+0x92>
 800af24:	2300      	movs	r3, #0
 800af26:	697a      	ldr	r2, [r7, #20]
 800af28:	f002 0203 	and.w	r2, r2, #3
 800af2c:	0092      	lsls	r2, r2, #2
 800af2e:	4093      	lsls	r3, r2
 800af30:	68fa      	ldr	r2, [r7, #12]
 800af32:	429a      	cmp	r2, r3
 800af34:	d132      	bne.n	800af9c <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800af36:	4b47      	ldr	r3, [pc, #284]	; (800b054 <HAL_GPIO_DeInit+0x1c0>)
 800af38:	681a      	ldr	r2, [r3, #0]
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	43db      	mvns	r3, r3
 800af3e:	4945      	ldr	r1, [pc, #276]	; (800b054 <HAL_GPIO_DeInit+0x1c0>)
 800af40:	4013      	ands	r3, r2
 800af42:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800af44:	4b43      	ldr	r3, [pc, #268]	; (800b054 <HAL_GPIO_DeInit+0x1c0>)
 800af46:	685a      	ldr	r2, [r3, #4]
 800af48:	693b      	ldr	r3, [r7, #16]
 800af4a:	43db      	mvns	r3, r3
 800af4c:	4941      	ldr	r1, [pc, #260]	; (800b054 <HAL_GPIO_DeInit+0x1c0>)
 800af4e:	4013      	ands	r3, r2
 800af50:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800af52:	4b40      	ldr	r3, [pc, #256]	; (800b054 <HAL_GPIO_DeInit+0x1c0>)
 800af54:	689a      	ldr	r2, [r3, #8]
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	43db      	mvns	r3, r3
 800af5a:	493e      	ldr	r1, [pc, #248]	; (800b054 <HAL_GPIO_DeInit+0x1c0>)
 800af5c:	4013      	ands	r3, r2
 800af5e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800af60:	4b3c      	ldr	r3, [pc, #240]	; (800b054 <HAL_GPIO_DeInit+0x1c0>)
 800af62:	68da      	ldr	r2, [r3, #12]
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	43db      	mvns	r3, r3
 800af68:	493a      	ldr	r1, [pc, #232]	; (800b054 <HAL_GPIO_DeInit+0x1c0>)
 800af6a:	4013      	ands	r3, r2
 800af6c:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	f003 0303 	and.w	r3, r3, #3
 800af74:	009b      	lsls	r3, r3, #2
 800af76:	220f      	movs	r2, #15
 800af78:	fa02 f303 	lsl.w	r3, r2, r3
 800af7c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800af7e:	4a2f      	ldr	r2, [pc, #188]	; (800b03c <HAL_GPIO_DeInit+0x1a8>)
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	089b      	lsrs	r3, r3, #2
 800af84:	3302      	adds	r3, #2
 800af86:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	43da      	mvns	r2, r3
 800af8e:	482b      	ldr	r0, [pc, #172]	; (800b03c <HAL_GPIO_DeInit+0x1a8>)
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	089b      	lsrs	r3, r3, #2
 800af94:	400a      	ands	r2, r1
 800af96:	3302      	adds	r3, #2
 800af98:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681a      	ldr	r2, [r3, #0]
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	005b      	lsls	r3, r3, #1
 800afa4:	2103      	movs	r1, #3
 800afa6:	fa01 f303 	lsl.w	r3, r1, r3
 800afaa:	431a      	orrs	r2, r3
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	08da      	lsrs	r2, r3, #3
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	3208      	adds	r2, #8
 800afb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	f003 0307 	and.w	r3, r3, #7
 800afc2:	009b      	lsls	r3, r3, #2
 800afc4:	220f      	movs	r2, #15
 800afc6:	fa02 f303 	lsl.w	r3, r2, r3
 800afca:	43db      	mvns	r3, r3
 800afcc:	697a      	ldr	r2, [r7, #20]
 800afce:	08d2      	lsrs	r2, r2, #3
 800afd0:	4019      	ands	r1, r3
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	3208      	adds	r2, #8
 800afd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	68da      	ldr	r2, [r3, #12]
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	005b      	lsls	r3, r3, #1
 800afe2:	2103      	movs	r1, #3
 800afe4:	fa01 f303 	lsl.w	r3, r1, r3
 800afe8:	43db      	mvns	r3, r3
 800afea:	401a      	ands	r2, r3
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	685a      	ldr	r2, [r3, #4]
 800aff4:	2101      	movs	r1, #1
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	fa01 f303 	lsl.w	r3, r1, r3
 800affc:	43db      	mvns	r3, r3
 800affe:	401a      	ands	r2, r3
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	689a      	ldr	r2, [r3, #8]
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	005b      	lsls	r3, r3, #1
 800b00c:	2103      	movs	r1, #3
 800b00e:	fa01 f303 	lsl.w	r3, r1, r3
 800b012:	43db      	mvns	r3, r3
 800b014:	401a      	ands	r2, r3
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	609a      	str	r2, [r3, #8]
    }

    position++;
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	3301      	adds	r3, #1
 800b01e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 800b020:	683a      	ldr	r2, [r7, #0]
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	fa22 f303 	lsr.w	r3, r2, r3
 800b028:	2b00      	cmp	r3, #0
 800b02a:	f47f af3b 	bne.w	800aea4 <HAL_GPIO_DeInit+0x10>
  }
}
 800b02e:	bf00      	nop
 800b030:	371c      	adds	r7, #28
 800b032:	46bd      	mov	sp, r7
 800b034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b038:	4770      	bx	lr
 800b03a:	bf00      	nop
 800b03c:	40010000 	.word	0x40010000
 800b040:	48000400 	.word	0x48000400
 800b044:	48000800 	.word	0x48000800
 800b048:	48000c00 	.word	0x48000c00
 800b04c:	48001000 	.word	0x48001000
 800b050:	48001400 	.word	0x48001400
 800b054:	40010400 	.word	0x40010400

0800b058 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b058:	b480      	push	{r7}
 800b05a:	b083      	sub	sp, #12
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
 800b060:	460b      	mov	r3, r1
 800b062:	807b      	strh	r3, [r7, #2]
 800b064:	4613      	mov	r3, r2
 800b066:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b068:	787b      	ldrb	r3, [r7, #1]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d003      	beq.n	800b076 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b06e:	887a      	ldrh	r2, [r7, #2]
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800b074:	e002      	b.n	800b07c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800b076:	887a      	ldrh	r2, [r7, #2]
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800b07c:	bf00      	nop
 800b07e:	370c      	adds	r7, #12
 800b080:	46bd      	mov	sp, r7
 800b082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b086:	4770      	bx	lr

0800b088 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b088:	b480      	push	{r7}
 800b08a:	b085      	sub	sp, #20
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d141      	bne.n	800b11a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b096:	4b4b      	ldr	r3, [pc, #300]	; (800b1c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b09e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0a2:	d131      	bne.n	800b108 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b0a4:	4b47      	ldr	r3, [pc, #284]	; (800b1c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b0a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b0aa:	4a46      	ldr	r2, [pc, #280]	; (800b1c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b0ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b0b4:	4b43      	ldr	r3, [pc, #268]	; (800b1c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b0bc:	4a41      	ldr	r2, [pc, #260]	; (800b1c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b0be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b0c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b0c4:	4b40      	ldr	r3, [pc, #256]	; (800b1c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	2232      	movs	r2, #50	; 0x32
 800b0ca:	fb02 f303 	mul.w	r3, r2, r3
 800b0ce:	4a3f      	ldr	r2, [pc, #252]	; (800b1cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b0d0:	fba2 2303 	umull	r2, r3, r2, r3
 800b0d4:	0c9b      	lsrs	r3, r3, #18
 800b0d6:	3301      	adds	r3, #1
 800b0d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b0da:	e002      	b.n	800b0e2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	3b01      	subs	r3, #1
 800b0e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b0e2:	4b38      	ldr	r3, [pc, #224]	; (800b1c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b0e4:	695b      	ldr	r3, [r3, #20]
 800b0e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0ee:	d102      	bne.n	800b0f6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d1f2      	bne.n	800b0dc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b0f6:	4b33      	ldr	r3, [pc, #204]	; (800b1c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b0f8:	695b      	ldr	r3, [r3, #20]
 800b0fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b102:	d158      	bne.n	800b1b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b104:	2303      	movs	r3, #3
 800b106:	e057      	b.n	800b1b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b108:	4b2e      	ldr	r3, [pc, #184]	; (800b1c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b10a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b10e:	4a2d      	ldr	r2, [pc, #180]	; (800b1c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b110:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b114:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800b118:	e04d      	b.n	800b1b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b120:	d141      	bne.n	800b1a6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b122:	4b28      	ldr	r3, [pc, #160]	; (800b1c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b12a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b12e:	d131      	bne.n	800b194 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b130:	4b24      	ldr	r3, [pc, #144]	; (800b1c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b132:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b136:	4a23      	ldr	r2, [pc, #140]	; (800b1c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b13c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b140:	4b20      	ldr	r3, [pc, #128]	; (800b1c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b148:	4a1e      	ldr	r2, [pc, #120]	; (800b1c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b14a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b14e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b150:	4b1d      	ldr	r3, [pc, #116]	; (800b1c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	2232      	movs	r2, #50	; 0x32
 800b156:	fb02 f303 	mul.w	r3, r2, r3
 800b15a:	4a1c      	ldr	r2, [pc, #112]	; (800b1cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b15c:	fba2 2303 	umull	r2, r3, r2, r3
 800b160:	0c9b      	lsrs	r3, r3, #18
 800b162:	3301      	adds	r3, #1
 800b164:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b166:	e002      	b.n	800b16e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	3b01      	subs	r3, #1
 800b16c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b16e:	4b15      	ldr	r3, [pc, #84]	; (800b1c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b170:	695b      	ldr	r3, [r3, #20]
 800b172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b176:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b17a:	d102      	bne.n	800b182 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d1f2      	bne.n	800b168 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b182:	4b10      	ldr	r3, [pc, #64]	; (800b1c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b184:	695b      	ldr	r3, [r3, #20]
 800b186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b18a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b18e:	d112      	bne.n	800b1b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b190:	2303      	movs	r3, #3
 800b192:	e011      	b.n	800b1b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b194:	4b0b      	ldr	r3, [pc, #44]	; (800b1c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b196:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b19a:	4a0a      	ldr	r2, [pc, #40]	; (800b1c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b19c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b1a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800b1a4:	e007      	b.n	800b1b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b1a6:	4b07      	ldr	r3, [pc, #28]	; (800b1c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b1ae:	4a05      	ldr	r2, [pc, #20]	; (800b1c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b1b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b1b4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800b1b6:	2300      	movs	r3, #0
}
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	3714      	adds	r7, #20
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c2:	4770      	bx	lr
 800b1c4:	40007000 	.word	0x40007000
 800b1c8:	20000c30 	.word	0x20000c30
 800b1cc:	431bde83 	.word	0x431bde83

0800b1d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b088      	sub	sp, #32
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d101      	bne.n	800b1e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b1de:	2301      	movs	r3, #1
 800b1e0:	e308      	b.n	800b7f4 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f003 0301 	and.w	r3, r3, #1
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d075      	beq.n	800b2da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b1ee:	4ba3      	ldr	r3, [pc, #652]	; (800b47c <HAL_RCC_OscConfig+0x2ac>)
 800b1f0:	689b      	ldr	r3, [r3, #8]
 800b1f2:	f003 030c 	and.w	r3, r3, #12
 800b1f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b1f8:	4ba0      	ldr	r3, [pc, #640]	; (800b47c <HAL_RCC_OscConfig+0x2ac>)
 800b1fa:	68db      	ldr	r3, [r3, #12]
 800b1fc:	f003 0303 	and.w	r3, r3, #3
 800b200:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800b202:	69bb      	ldr	r3, [r7, #24]
 800b204:	2b0c      	cmp	r3, #12
 800b206:	d102      	bne.n	800b20e <HAL_RCC_OscConfig+0x3e>
 800b208:	697b      	ldr	r3, [r7, #20]
 800b20a:	2b03      	cmp	r3, #3
 800b20c:	d002      	beq.n	800b214 <HAL_RCC_OscConfig+0x44>
 800b20e:	69bb      	ldr	r3, [r7, #24]
 800b210:	2b08      	cmp	r3, #8
 800b212:	d10b      	bne.n	800b22c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b214:	4b99      	ldr	r3, [pc, #612]	; (800b47c <HAL_RCC_OscConfig+0x2ac>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d05b      	beq.n	800b2d8 <HAL_RCC_OscConfig+0x108>
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	685b      	ldr	r3, [r3, #4]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d157      	bne.n	800b2d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b228:	2301      	movs	r3, #1
 800b22a:	e2e3      	b.n	800b7f4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	685b      	ldr	r3, [r3, #4]
 800b230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b234:	d106      	bne.n	800b244 <HAL_RCC_OscConfig+0x74>
 800b236:	4b91      	ldr	r3, [pc, #580]	; (800b47c <HAL_RCC_OscConfig+0x2ac>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	4a90      	ldr	r2, [pc, #576]	; (800b47c <HAL_RCC_OscConfig+0x2ac>)
 800b23c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b240:	6013      	str	r3, [r2, #0]
 800b242:	e01d      	b.n	800b280 <HAL_RCC_OscConfig+0xb0>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	685b      	ldr	r3, [r3, #4]
 800b248:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b24c:	d10c      	bne.n	800b268 <HAL_RCC_OscConfig+0x98>
 800b24e:	4b8b      	ldr	r3, [pc, #556]	; (800b47c <HAL_RCC_OscConfig+0x2ac>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	4a8a      	ldr	r2, [pc, #552]	; (800b47c <HAL_RCC_OscConfig+0x2ac>)
 800b254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b258:	6013      	str	r3, [r2, #0]
 800b25a:	4b88      	ldr	r3, [pc, #544]	; (800b47c <HAL_RCC_OscConfig+0x2ac>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	4a87      	ldr	r2, [pc, #540]	; (800b47c <HAL_RCC_OscConfig+0x2ac>)
 800b260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b264:	6013      	str	r3, [r2, #0]
 800b266:	e00b      	b.n	800b280 <HAL_RCC_OscConfig+0xb0>
 800b268:	4b84      	ldr	r3, [pc, #528]	; (800b47c <HAL_RCC_OscConfig+0x2ac>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	4a83      	ldr	r2, [pc, #524]	; (800b47c <HAL_RCC_OscConfig+0x2ac>)
 800b26e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b272:	6013      	str	r3, [r2, #0]
 800b274:	4b81      	ldr	r3, [pc, #516]	; (800b47c <HAL_RCC_OscConfig+0x2ac>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	4a80      	ldr	r2, [pc, #512]	; (800b47c <HAL_RCC_OscConfig+0x2ac>)
 800b27a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b27e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	685b      	ldr	r3, [r3, #4]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d013      	beq.n	800b2b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b288:	f7fd f8f4 	bl	8008474 <HAL_GetTick>
 800b28c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b28e:	e008      	b.n	800b2a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b290:	f7fd f8f0 	bl	8008474 <HAL_GetTick>
 800b294:	4602      	mov	r2, r0
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	1ad3      	subs	r3, r2, r3
 800b29a:	2b64      	cmp	r3, #100	; 0x64
 800b29c:	d901      	bls.n	800b2a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b29e:	2303      	movs	r3, #3
 800b2a0:	e2a8      	b.n	800b7f4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b2a2:	4b76      	ldr	r3, [pc, #472]	; (800b47c <HAL_RCC_OscConfig+0x2ac>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d0f0      	beq.n	800b290 <HAL_RCC_OscConfig+0xc0>
 800b2ae:	e014      	b.n	800b2da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b2b0:	f7fd f8e0 	bl	8008474 <HAL_GetTick>
 800b2b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b2b6:	e008      	b.n	800b2ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b2b8:	f7fd f8dc 	bl	8008474 <HAL_GetTick>
 800b2bc:	4602      	mov	r2, r0
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	1ad3      	subs	r3, r2, r3
 800b2c2:	2b64      	cmp	r3, #100	; 0x64
 800b2c4:	d901      	bls.n	800b2ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b2c6:	2303      	movs	r3, #3
 800b2c8:	e294      	b.n	800b7f4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b2ca:	4b6c      	ldr	r3, [pc, #432]	; (800b47c <HAL_RCC_OscConfig+0x2ac>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d1f0      	bne.n	800b2b8 <HAL_RCC_OscConfig+0xe8>
 800b2d6:	e000      	b.n	800b2da <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b2d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f003 0302 	and.w	r3, r3, #2
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d075      	beq.n	800b3d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b2e6:	4b65      	ldr	r3, [pc, #404]	; (800b47c <HAL_RCC_OscConfig+0x2ac>)
 800b2e8:	689b      	ldr	r3, [r3, #8]
 800b2ea:	f003 030c 	and.w	r3, r3, #12
 800b2ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b2f0:	4b62      	ldr	r3, [pc, #392]	; (800b47c <HAL_RCC_OscConfig+0x2ac>)
 800b2f2:	68db      	ldr	r3, [r3, #12]
 800b2f4:	f003 0303 	and.w	r3, r3, #3
 800b2f8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800b2fa:	69bb      	ldr	r3, [r7, #24]
 800b2fc:	2b0c      	cmp	r3, #12
 800b2fe:	d102      	bne.n	800b306 <HAL_RCC_OscConfig+0x136>
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	2b02      	cmp	r3, #2
 800b304:	d002      	beq.n	800b30c <HAL_RCC_OscConfig+0x13c>
 800b306:	69bb      	ldr	r3, [r7, #24]
 800b308:	2b04      	cmp	r3, #4
 800b30a:	d11f      	bne.n	800b34c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b30c:	4b5b      	ldr	r3, [pc, #364]	; (800b47c <HAL_RCC_OscConfig+0x2ac>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b314:	2b00      	cmp	r3, #0
 800b316:	d005      	beq.n	800b324 <HAL_RCC_OscConfig+0x154>
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	68db      	ldr	r3, [r3, #12]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d101      	bne.n	800b324 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800b320:	2301      	movs	r3, #1
 800b322:	e267      	b.n	800b7f4 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b324:	4b55      	ldr	r3, [pc, #340]	; (800b47c <HAL_RCC_OscConfig+0x2ac>)
 800b326:	685b      	ldr	r3, [r3, #4]
 800b328:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	691b      	ldr	r3, [r3, #16]
 800b330:	061b      	lsls	r3, r3, #24
 800b332:	4952      	ldr	r1, [pc, #328]	; (800b47c <HAL_RCC_OscConfig+0x2ac>)
 800b334:	4313      	orrs	r3, r2
 800b336:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b338:	4b51      	ldr	r3, [pc, #324]	; (800b480 <HAL_RCC_OscConfig+0x2b0>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	4618      	mov	r0, r3
 800b33e:	f7fd f84d 	bl	80083dc <HAL_InitTick>
 800b342:	4603      	mov	r3, r0
 800b344:	2b00      	cmp	r3, #0
 800b346:	d043      	beq.n	800b3d0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800b348:	2301      	movs	r3, #1
 800b34a:	e253      	b.n	800b7f4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	68db      	ldr	r3, [r3, #12]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d023      	beq.n	800b39c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b354:	4b49      	ldr	r3, [pc, #292]	; (800b47c <HAL_RCC_OscConfig+0x2ac>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	4a48      	ldr	r2, [pc, #288]	; (800b47c <HAL_RCC_OscConfig+0x2ac>)
 800b35a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b35e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b360:	f7fd f888 	bl	8008474 <HAL_GetTick>
 800b364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b366:	e008      	b.n	800b37a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b368:	f7fd f884 	bl	8008474 <HAL_GetTick>
 800b36c:	4602      	mov	r2, r0
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	1ad3      	subs	r3, r2, r3
 800b372:	2b02      	cmp	r3, #2
 800b374:	d901      	bls.n	800b37a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800b376:	2303      	movs	r3, #3
 800b378:	e23c      	b.n	800b7f4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b37a:	4b40      	ldr	r3, [pc, #256]	; (800b47c <HAL_RCC_OscConfig+0x2ac>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b382:	2b00      	cmp	r3, #0
 800b384:	d0f0      	beq.n	800b368 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b386:	4b3d      	ldr	r3, [pc, #244]	; (800b47c <HAL_RCC_OscConfig+0x2ac>)
 800b388:	685b      	ldr	r3, [r3, #4]
 800b38a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	691b      	ldr	r3, [r3, #16]
 800b392:	061b      	lsls	r3, r3, #24
 800b394:	4939      	ldr	r1, [pc, #228]	; (800b47c <HAL_RCC_OscConfig+0x2ac>)
 800b396:	4313      	orrs	r3, r2
 800b398:	604b      	str	r3, [r1, #4]
 800b39a:	e01a      	b.n	800b3d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b39c:	4b37      	ldr	r3, [pc, #220]	; (800b47c <HAL_RCC_OscConfig+0x2ac>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	4a36      	ldr	r2, [pc, #216]	; (800b47c <HAL_RCC_OscConfig+0x2ac>)
 800b3a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b3a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3a8:	f7fd f864 	bl	8008474 <HAL_GetTick>
 800b3ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b3ae:	e008      	b.n	800b3c2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b3b0:	f7fd f860 	bl	8008474 <HAL_GetTick>
 800b3b4:	4602      	mov	r2, r0
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	1ad3      	subs	r3, r2, r3
 800b3ba:	2b02      	cmp	r3, #2
 800b3bc:	d901      	bls.n	800b3c2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800b3be:	2303      	movs	r3, #3
 800b3c0:	e218      	b.n	800b7f4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b3c2:	4b2e      	ldr	r3, [pc, #184]	; (800b47c <HAL_RCC_OscConfig+0x2ac>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d1f0      	bne.n	800b3b0 <HAL_RCC_OscConfig+0x1e0>
 800b3ce:	e000      	b.n	800b3d2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b3d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f003 0308 	and.w	r3, r3, #8
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d03c      	beq.n	800b458 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	695b      	ldr	r3, [r3, #20]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d01c      	beq.n	800b420 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b3e6:	4b25      	ldr	r3, [pc, #148]	; (800b47c <HAL_RCC_OscConfig+0x2ac>)
 800b3e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b3ec:	4a23      	ldr	r2, [pc, #140]	; (800b47c <HAL_RCC_OscConfig+0x2ac>)
 800b3ee:	f043 0301 	orr.w	r3, r3, #1
 800b3f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b3f6:	f7fd f83d 	bl	8008474 <HAL_GetTick>
 800b3fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b3fc:	e008      	b.n	800b410 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b3fe:	f7fd f839 	bl	8008474 <HAL_GetTick>
 800b402:	4602      	mov	r2, r0
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	1ad3      	subs	r3, r2, r3
 800b408:	2b02      	cmp	r3, #2
 800b40a:	d901      	bls.n	800b410 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b40c:	2303      	movs	r3, #3
 800b40e:	e1f1      	b.n	800b7f4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b410:	4b1a      	ldr	r3, [pc, #104]	; (800b47c <HAL_RCC_OscConfig+0x2ac>)
 800b412:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b416:	f003 0302 	and.w	r3, r3, #2
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d0ef      	beq.n	800b3fe <HAL_RCC_OscConfig+0x22e>
 800b41e:	e01b      	b.n	800b458 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b420:	4b16      	ldr	r3, [pc, #88]	; (800b47c <HAL_RCC_OscConfig+0x2ac>)
 800b422:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b426:	4a15      	ldr	r2, [pc, #84]	; (800b47c <HAL_RCC_OscConfig+0x2ac>)
 800b428:	f023 0301 	bic.w	r3, r3, #1
 800b42c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b430:	f7fd f820 	bl	8008474 <HAL_GetTick>
 800b434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b436:	e008      	b.n	800b44a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b438:	f7fd f81c 	bl	8008474 <HAL_GetTick>
 800b43c:	4602      	mov	r2, r0
 800b43e:	693b      	ldr	r3, [r7, #16]
 800b440:	1ad3      	subs	r3, r2, r3
 800b442:	2b02      	cmp	r3, #2
 800b444:	d901      	bls.n	800b44a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800b446:	2303      	movs	r3, #3
 800b448:	e1d4      	b.n	800b7f4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b44a:	4b0c      	ldr	r3, [pc, #48]	; (800b47c <HAL_RCC_OscConfig+0x2ac>)
 800b44c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b450:	f003 0302 	and.w	r3, r3, #2
 800b454:	2b00      	cmp	r3, #0
 800b456:	d1ef      	bne.n	800b438 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f003 0304 	and.w	r3, r3, #4
 800b460:	2b00      	cmp	r3, #0
 800b462:	f000 80ab 	beq.w	800b5bc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b466:	2300      	movs	r3, #0
 800b468:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b46a:	4b04      	ldr	r3, [pc, #16]	; (800b47c <HAL_RCC_OscConfig+0x2ac>)
 800b46c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b46e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b472:	2b00      	cmp	r3, #0
 800b474:	d106      	bne.n	800b484 <HAL_RCC_OscConfig+0x2b4>
 800b476:	2301      	movs	r3, #1
 800b478:	e005      	b.n	800b486 <HAL_RCC_OscConfig+0x2b6>
 800b47a:	bf00      	nop
 800b47c:	40021000 	.word	0x40021000
 800b480:	20000c34 	.word	0x20000c34
 800b484:	2300      	movs	r3, #0
 800b486:	2b00      	cmp	r3, #0
 800b488:	d00d      	beq.n	800b4a6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b48a:	4baf      	ldr	r3, [pc, #700]	; (800b748 <HAL_RCC_OscConfig+0x578>)
 800b48c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b48e:	4aae      	ldr	r2, [pc, #696]	; (800b748 <HAL_RCC_OscConfig+0x578>)
 800b490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b494:	6593      	str	r3, [r2, #88]	; 0x58
 800b496:	4bac      	ldr	r3, [pc, #688]	; (800b748 <HAL_RCC_OscConfig+0x578>)
 800b498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b49a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b49e:	60fb      	str	r3, [r7, #12]
 800b4a0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b4a6:	4ba9      	ldr	r3, [pc, #676]	; (800b74c <HAL_RCC_OscConfig+0x57c>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d118      	bne.n	800b4e4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b4b2:	4ba6      	ldr	r3, [pc, #664]	; (800b74c <HAL_RCC_OscConfig+0x57c>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	4aa5      	ldr	r2, [pc, #660]	; (800b74c <HAL_RCC_OscConfig+0x57c>)
 800b4b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b4bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b4be:	f7fc ffd9 	bl	8008474 <HAL_GetTick>
 800b4c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b4c4:	e008      	b.n	800b4d8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b4c6:	f7fc ffd5 	bl	8008474 <HAL_GetTick>
 800b4ca:	4602      	mov	r2, r0
 800b4cc:	693b      	ldr	r3, [r7, #16]
 800b4ce:	1ad3      	subs	r3, r2, r3
 800b4d0:	2b02      	cmp	r3, #2
 800b4d2:	d901      	bls.n	800b4d8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800b4d4:	2303      	movs	r3, #3
 800b4d6:	e18d      	b.n	800b7f4 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b4d8:	4b9c      	ldr	r3, [pc, #624]	; (800b74c <HAL_RCC_OscConfig+0x57c>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d0f0      	beq.n	800b4c6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	689b      	ldr	r3, [r3, #8]
 800b4e8:	2b01      	cmp	r3, #1
 800b4ea:	d108      	bne.n	800b4fe <HAL_RCC_OscConfig+0x32e>
 800b4ec:	4b96      	ldr	r3, [pc, #600]	; (800b748 <HAL_RCC_OscConfig+0x578>)
 800b4ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4f2:	4a95      	ldr	r2, [pc, #596]	; (800b748 <HAL_RCC_OscConfig+0x578>)
 800b4f4:	f043 0301 	orr.w	r3, r3, #1
 800b4f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b4fc:	e024      	b.n	800b548 <HAL_RCC_OscConfig+0x378>
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	689b      	ldr	r3, [r3, #8]
 800b502:	2b05      	cmp	r3, #5
 800b504:	d110      	bne.n	800b528 <HAL_RCC_OscConfig+0x358>
 800b506:	4b90      	ldr	r3, [pc, #576]	; (800b748 <HAL_RCC_OscConfig+0x578>)
 800b508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b50c:	4a8e      	ldr	r2, [pc, #568]	; (800b748 <HAL_RCC_OscConfig+0x578>)
 800b50e:	f043 0304 	orr.w	r3, r3, #4
 800b512:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b516:	4b8c      	ldr	r3, [pc, #560]	; (800b748 <HAL_RCC_OscConfig+0x578>)
 800b518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b51c:	4a8a      	ldr	r2, [pc, #552]	; (800b748 <HAL_RCC_OscConfig+0x578>)
 800b51e:	f043 0301 	orr.w	r3, r3, #1
 800b522:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b526:	e00f      	b.n	800b548 <HAL_RCC_OscConfig+0x378>
 800b528:	4b87      	ldr	r3, [pc, #540]	; (800b748 <HAL_RCC_OscConfig+0x578>)
 800b52a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b52e:	4a86      	ldr	r2, [pc, #536]	; (800b748 <HAL_RCC_OscConfig+0x578>)
 800b530:	f023 0301 	bic.w	r3, r3, #1
 800b534:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b538:	4b83      	ldr	r3, [pc, #524]	; (800b748 <HAL_RCC_OscConfig+0x578>)
 800b53a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b53e:	4a82      	ldr	r2, [pc, #520]	; (800b748 <HAL_RCC_OscConfig+0x578>)
 800b540:	f023 0304 	bic.w	r3, r3, #4
 800b544:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	689b      	ldr	r3, [r3, #8]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d016      	beq.n	800b57e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b550:	f7fc ff90 	bl	8008474 <HAL_GetTick>
 800b554:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b556:	e00a      	b.n	800b56e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b558:	f7fc ff8c 	bl	8008474 <HAL_GetTick>
 800b55c:	4602      	mov	r2, r0
 800b55e:	693b      	ldr	r3, [r7, #16]
 800b560:	1ad3      	subs	r3, r2, r3
 800b562:	f241 3288 	movw	r2, #5000	; 0x1388
 800b566:	4293      	cmp	r3, r2
 800b568:	d901      	bls.n	800b56e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800b56a:	2303      	movs	r3, #3
 800b56c:	e142      	b.n	800b7f4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b56e:	4b76      	ldr	r3, [pc, #472]	; (800b748 <HAL_RCC_OscConfig+0x578>)
 800b570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b574:	f003 0302 	and.w	r3, r3, #2
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d0ed      	beq.n	800b558 <HAL_RCC_OscConfig+0x388>
 800b57c:	e015      	b.n	800b5aa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b57e:	f7fc ff79 	bl	8008474 <HAL_GetTick>
 800b582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b584:	e00a      	b.n	800b59c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b586:	f7fc ff75 	bl	8008474 <HAL_GetTick>
 800b58a:	4602      	mov	r2, r0
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	1ad3      	subs	r3, r2, r3
 800b590:	f241 3288 	movw	r2, #5000	; 0x1388
 800b594:	4293      	cmp	r3, r2
 800b596:	d901      	bls.n	800b59c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800b598:	2303      	movs	r3, #3
 800b59a:	e12b      	b.n	800b7f4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b59c:	4b6a      	ldr	r3, [pc, #424]	; (800b748 <HAL_RCC_OscConfig+0x578>)
 800b59e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5a2:	f003 0302 	and.w	r3, r3, #2
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d1ed      	bne.n	800b586 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b5aa:	7ffb      	ldrb	r3, [r7, #31]
 800b5ac:	2b01      	cmp	r3, #1
 800b5ae:	d105      	bne.n	800b5bc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b5b0:	4b65      	ldr	r3, [pc, #404]	; (800b748 <HAL_RCC_OscConfig+0x578>)
 800b5b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5b4:	4a64      	ldr	r2, [pc, #400]	; (800b748 <HAL_RCC_OscConfig+0x578>)
 800b5b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b5ba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f003 0320 	and.w	r3, r3, #32
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d03c      	beq.n	800b642 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	699b      	ldr	r3, [r3, #24]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d01c      	beq.n	800b60a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b5d0:	4b5d      	ldr	r3, [pc, #372]	; (800b748 <HAL_RCC_OscConfig+0x578>)
 800b5d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b5d6:	4a5c      	ldr	r2, [pc, #368]	; (800b748 <HAL_RCC_OscConfig+0x578>)
 800b5d8:	f043 0301 	orr.w	r3, r3, #1
 800b5dc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b5e0:	f7fc ff48 	bl	8008474 <HAL_GetTick>
 800b5e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b5e6:	e008      	b.n	800b5fa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b5e8:	f7fc ff44 	bl	8008474 <HAL_GetTick>
 800b5ec:	4602      	mov	r2, r0
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	1ad3      	subs	r3, r2, r3
 800b5f2:	2b02      	cmp	r3, #2
 800b5f4:	d901      	bls.n	800b5fa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800b5f6:	2303      	movs	r3, #3
 800b5f8:	e0fc      	b.n	800b7f4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b5fa:	4b53      	ldr	r3, [pc, #332]	; (800b748 <HAL_RCC_OscConfig+0x578>)
 800b5fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b600:	f003 0302 	and.w	r3, r3, #2
 800b604:	2b00      	cmp	r3, #0
 800b606:	d0ef      	beq.n	800b5e8 <HAL_RCC_OscConfig+0x418>
 800b608:	e01b      	b.n	800b642 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b60a:	4b4f      	ldr	r3, [pc, #316]	; (800b748 <HAL_RCC_OscConfig+0x578>)
 800b60c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b610:	4a4d      	ldr	r2, [pc, #308]	; (800b748 <HAL_RCC_OscConfig+0x578>)
 800b612:	f023 0301 	bic.w	r3, r3, #1
 800b616:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b61a:	f7fc ff2b 	bl	8008474 <HAL_GetTick>
 800b61e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b620:	e008      	b.n	800b634 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b622:	f7fc ff27 	bl	8008474 <HAL_GetTick>
 800b626:	4602      	mov	r2, r0
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	1ad3      	subs	r3, r2, r3
 800b62c:	2b02      	cmp	r3, #2
 800b62e:	d901      	bls.n	800b634 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800b630:	2303      	movs	r3, #3
 800b632:	e0df      	b.n	800b7f4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b634:	4b44      	ldr	r3, [pc, #272]	; (800b748 <HAL_RCC_OscConfig+0x578>)
 800b636:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b63a:	f003 0302 	and.w	r3, r3, #2
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d1ef      	bne.n	800b622 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	69db      	ldr	r3, [r3, #28]
 800b646:	2b00      	cmp	r3, #0
 800b648:	f000 80d3 	beq.w	800b7f2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b64c:	4b3e      	ldr	r3, [pc, #248]	; (800b748 <HAL_RCC_OscConfig+0x578>)
 800b64e:	689b      	ldr	r3, [r3, #8]
 800b650:	f003 030c 	and.w	r3, r3, #12
 800b654:	2b0c      	cmp	r3, #12
 800b656:	f000 808d 	beq.w	800b774 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	69db      	ldr	r3, [r3, #28]
 800b65e:	2b02      	cmp	r3, #2
 800b660:	d15a      	bne.n	800b718 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b662:	4b39      	ldr	r3, [pc, #228]	; (800b748 <HAL_RCC_OscConfig+0x578>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	4a38      	ldr	r2, [pc, #224]	; (800b748 <HAL_RCC_OscConfig+0x578>)
 800b668:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b66c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b66e:	f7fc ff01 	bl	8008474 <HAL_GetTick>
 800b672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b674:	e008      	b.n	800b688 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b676:	f7fc fefd 	bl	8008474 <HAL_GetTick>
 800b67a:	4602      	mov	r2, r0
 800b67c:	693b      	ldr	r3, [r7, #16]
 800b67e:	1ad3      	subs	r3, r2, r3
 800b680:	2b02      	cmp	r3, #2
 800b682:	d901      	bls.n	800b688 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800b684:	2303      	movs	r3, #3
 800b686:	e0b5      	b.n	800b7f4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b688:	4b2f      	ldr	r3, [pc, #188]	; (800b748 <HAL_RCC_OscConfig+0x578>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b690:	2b00      	cmp	r3, #0
 800b692:	d1f0      	bne.n	800b676 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b694:	4b2c      	ldr	r3, [pc, #176]	; (800b748 <HAL_RCC_OscConfig+0x578>)
 800b696:	68da      	ldr	r2, [r3, #12]
 800b698:	4b2d      	ldr	r3, [pc, #180]	; (800b750 <HAL_RCC_OscConfig+0x580>)
 800b69a:	4013      	ands	r3, r2
 800b69c:	687a      	ldr	r2, [r7, #4]
 800b69e:	6a11      	ldr	r1, [r2, #32]
 800b6a0:	687a      	ldr	r2, [r7, #4]
 800b6a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b6a4:	3a01      	subs	r2, #1
 800b6a6:	0112      	lsls	r2, r2, #4
 800b6a8:	4311      	orrs	r1, r2
 800b6aa:	687a      	ldr	r2, [r7, #4]
 800b6ac:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800b6ae:	0212      	lsls	r2, r2, #8
 800b6b0:	4311      	orrs	r1, r2
 800b6b2:	687a      	ldr	r2, [r7, #4]
 800b6b4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b6b6:	0852      	lsrs	r2, r2, #1
 800b6b8:	3a01      	subs	r2, #1
 800b6ba:	0552      	lsls	r2, r2, #21
 800b6bc:	4311      	orrs	r1, r2
 800b6be:	687a      	ldr	r2, [r7, #4]
 800b6c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b6c2:	0852      	lsrs	r2, r2, #1
 800b6c4:	3a01      	subs	r2, #1
 800b6c6:	0652      	lsls	r2, r2, #25
 800b6c8:	4311      	orrs	r1, r2
 800b6ca:	687a      	ldr	r2, [r7, #4]
 800b6cc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b6ce:	06d2      	lsls	r2, r2, #27
 800b6d0:	430a      	orrs	r2, r1
 800b6d2:	491d      	ldr	r1, [pc, #116]	; (800b748 <HAL_RCC_OscConfig+0x578>)
 800b6d4:	4313      	orrs	r3, r2
 800b6d6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b6d8:	4b1b      	ldr	r3, [pc, #108]	; (800b748 <HAL_RCC_OscConfig+0x578>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	4a1a      	ldr	r2, [pc, #104]	; (800b748 <HAL_RCC_OscConfig+0x578>)
 800b6de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b6e2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b6e4:	4b18      	ldr	r3, [pc, #96]	; (800b748 <HAL_RCC_OscConfig+0x578>)
 800b6e6:	68db      	ldr	r3, [r3, #12]
 800b6e8:	4a17      	ldr	r2, [pc, #92]	; (800b748 <HAL_RCC_OscConfig+0x578>)
 800b6ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b6ee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6f0:	f7fc fec0 	bl	8008474 <HAL_GetTick>
 800b6f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b6f6:	e008      	b.n	800b70a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b6f8:	f7fc febc 	bl	8008474 <HAL_GetTick>
 800b6fc:	4602      	mov	r2, r0
 800b6fe:	693b      	ldr	r3, [r7, #16]
 800b700:	1ad3      	subs	r3, r2, r3
 800b702:	2b02      	cmp	r3, #2
 800b704:	d901      	bls.n	800b70a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800b706:	2303      	movs	r3, #3
 800b708:	e074      	b.n	800b7f4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b70a:	4b0f      	ldr	r3, [pc, #60]	; (800b748 <HAL_RCC_OscConfig+0x578>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b712:	2b00      	cmp	r3, #0
 800b714:	d0f0      	beq.n	800b6f8 <HAL_RCC_OscConfig+0x528>
 800b716:	e06c      	b.n	800b7f2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b718:	4b0b      	ldr	r3, [pc, #44]	; (800b748 <HAL_RCC_OscConfig+0x578>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	4a0a      	ldr	r2, [pc, #40]	; (800b748 <HAL_RCC_OscConfig+0x578>)
 800b71e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b722:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800b724:	4b08      	ldr	r3, [pc, #32]	; (800b748 <HAL_RCC_OscConfig+0x578>)
 800b726:	68db      	ldr	r3, [r3, #12]
 800b728:	4a07      	ldr	r2, [pc, #28]	; (800b748 <HAL_RCC_OscConfig+0x578>)
 800b72a:	f023 0303 	bic.w	r3, r3, #3
 800b72e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800b730:	4b05      	ldr	r3, [pc, #20]	; (800b748 <HAL_RCC_OscConfig+0x578>)
 800b732:	68db      	ldr	r3, [r3, #12]
 800b734:	4a04      	ldr	r2, [pc, #16]	; (800b748 <HAL_RCC_OscConfig+0x578>)
 800b736:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800b73a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b73e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b740:	f7fc fe98 	bl	8008474 <HAL_GetTick>
 800b744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b746:	e00e      	b.n	800b766 <HAL_RCC_OscConfig+0x596>
 800b748:	40021000 	.word	0x40021000
 800b74c:	40007000 	.word	0x40007000
 800b750:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b754:	f7fc fe8e 	bl	8008474 <HAL_GetTick>
 800b758:	4602      	mov	r2, r0
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	1ad3      	subs	r3, r2, r3
 800b75e:	2b02      	cmp	r3, #2
 800b760:	d901      	bls.n	800b766 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800b762:	2303      	movs	r3, #3
 800b764:	e046      	b.n	800b7f4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b766:	4b25      	ldr	r3, [pc, #148]	; (800b7fc <HAL_RCC_OscConfig+0x62c>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d1f0      	bne.n	800b754 <HAL_RCC_OscConfig+0x584>
 800b772:	e03e      	b.n	800b7f2 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	69db      	ldr	r3, [r3, #28]
 800b778:	2b01      	cmp	r3, #1
 800b77a:	d101      	bne.n	800b780 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800b77c:	2301      	movs	r3, #1
 800b77e:	e039      	b.n	800b7f4 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800b780:	4b1e      	ldr	r3, [pc, #120]	; (800b7fc <HAL_RCC_OscConfig+0x62c>)
 800b782:	68db      	ldr	r3, [r3, #12]
 800b784:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	f003 0203 	and.w	r2, r3, #3
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	6a1b      	ldr	r3, [r3, #32]
 800b790:	429a      	cmp	r2, r3
 800b792:	d12c      	bne.n	800b7ee <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b79e:	3b01      	subs	r3, #1
 800b7a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b7a2:	429a      	cmp	r2, r3
 800b7a4:	d123      	bne.n	800b7ee <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	d11b      	bne.n	800b7ee <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7c0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b7c2:	429a      	cmp	r2, r3
 800b7c4:	d113      	bne.n	800b7ee <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7d0:	085b      	lsrs	r3, r3, #1
 800b7d2:	3b01      	subs	r3, #1
 800b7d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b7d6:	429a      	cmp	r2, r3
 800b7d8:	d109      	bne.n	800b7ee <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b7da:	697b      	ldr	r3, [r7, #20]
 800b7dc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7e4:	085b      	lsrs	r3, r3, #1
 800b7e6:	3b01      	subs	r3, #1
 800b7e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b7ea:	429a      	cmp	r2, r3
 800b7ec:	d001      	beq.n	800b7f2 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	e000      	b.n	800b7f4 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800b7f2:	2300      	movs	r3, #0
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3720      	adds	r7, #32
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}
 800b7fc:	40021000 	.word	0x40021000

0800b800 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b086      	sub	sp, #24
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
 800b808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800b80a:	2300      	movs	r3, #0
 800b80c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d101      	bne.n	800b818 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b814:	2301      	movs	r3, #1
 800b816:	e11e      	b.n	800ba56 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b818:	4b91      	ldr	r3, [pc, #580]	; (800ba60 <HAL_RCC_ClockConfig+0x260>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f003 030f 	and.w	r3, r3, #15
 800b820:	683a      	ldr	r2, [r7, #0]
 800b822:	429a      	cmp	r2, r3
 800b824:	d910      	bls.n	800b848 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b826:	4b8e      	ldr	r3, [pc, #568]	; (800ba60 <HAL_RCC_ClockConfig+0x260>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	f023 020f 	bic.w	r2, r3, #15
 800b82e:	498c      	ldr	r1, [pc, #560]	; (800ba60 <HAL_RCC_ClockConfig+0x260>)
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	4313      	orrs	r3, r2
 800b834:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b836:	4b8a      	ldr	r3, [pc, #552]	; (800ba60 <HAL_RCC_ClockConfig+0x260>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f003 030f 	and.w	r3, r3, #15
 800b83e:	683a      	ldr	r2, [r7, #0]
 800b840:	429a      	cmp	r2, r3
 800b842:	d001      	beq.n	800b848 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b844:	2301      	movs	r3, #1
 800b846:	e106      	b.n	800ba56 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f003 0301 	and.w	r3, r3, #1
 800b850:	2b00      	cmp	r3, #0
 800b852:	d073      	beq.n	800b93c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	685b      	ldr	r3, [r3, #4]
 800b858:	2b03      	cmp	r3, #3
 800b85a:	d129      	bne.n	800b8b0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b85c:	4b81      	ldr	r3, [pc, #516]	; (800ba64 <HAL_RCC_ClockConfig+0x264>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b864:	2b00      	cmp	r3, #0
 800b866:	d101      	bne.n	800b86c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800b868:	2301      	movs	r3, #1
 800b86a:	e0f4      	b.n	800ba56 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800b86c:	f000 f972 	bl	800bb54 <RCC_GetSysClockFreqFromPLLSource>
 800b870:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800b872:	693b      	ldr	r3, [r7, #16]
 800b874:	4a7c      	ldr	r2, [pc, #496]	; (800ba68 <HAL_RCC_ClockConfig+0x268>)
 800b876:	4293      	cmp	r3, r2
 800b878:	d93f      	bls.n	800b8fa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b87a:	4b7a      	ldr	r3, [pc, #488]	; (800ba64 <HAL_RCC_ClockConfig+0x264>)
 800b87c:	689b      	ldr	r3, [r3, #8]
 800b87e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b882:	2b00      	cmp	r3, #0
 800b884:	d009      	beq.n	800b89a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d033      	beq.n	800b8fa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b896:	2b00      	cmp	r3, #0
 800b898:	d12f      	bne.n	800b8fa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b89a:	4b72      	ldr	r3, [pc, #456]	; (800ba64 <HAL_RCC_ClockConfig+0x264>)
 800b89c:	689b      	ldr	r3, [r3, #8]
 800b89e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b8a2:	4a70      	ldr	r2, [pc, #448]	; (800ba64 <HAL_RCC_ClockConfig+0x264>)
 800b8a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8a8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800b8aa:	2380      	movs	r3, #128	; 0x80
 800b8ac:	617b      	str	r3, [r7, #20]
 800b8ae:	e024      	b.n	800b8fa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	685b      	ldr	r3, [r3, #4]
 800b8b4:	2b02      	cmp	r3, #2
 800b8b6:	d107      	bne.n	800b8c8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b8b8:	4b6a      	ldr	r3, [pc, #424]	; (800ba64 <HAL_RCC_ClockConfig+0x264>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d109      	bne.n	800b8d8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	e0c6      	b.n	800ba56 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b8c8:	4b66      	ldr	r3, [pc, #408]	; (800ba64 <HAL_RCC_ClockConfig+0x264>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d101      	bne.n	800b8d8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	e0be      	b.n	800ba56 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800b8d8:	f000 f8ce 	bl	800ba78 <HAL_RCC_GetSysClockFreq>
 800b8dc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	4a61      	ldr	r2, [pc, #388]	; (800ba68 <HAL_RCC_ClockConfig+0x268>)
 800b8e2:	4293      	cmp	r3, r2
 800b8e4:	d909      	bls.n	800b8fa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b8e6:	4b5f      	ldr	r3, [pc, #380]	; (800ba64 <HAL_RCC_ClockConfig+0x264>)
 800b8e8:	689b      	ldr	r3, [r3, #8]
 800b8ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b8ee:	4a5d      	ldr	r2, [pc, #372]	; (800ba64 <HAL_RCC_ClockConfig+0x264>)
 800b8f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8f4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800b8f6:	2380      	movs	r3, #128	; 0x80
 800b8f8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b8fa:	4b5a      	ldr	r3, [pc, #360]	; (800ba64 <HAL_RCC_ClockConfig+0x264>)
 800b8fc:	689b      	ldr	r3, [r3, #8]
 800b8fe:	f023 0203 	bic.w	r2, r3, #3
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	685b      	ldr	r3, [r3, #4]
 800b906:	4957      	ldr	r1, [pc, #348]	; (800ba64 <HAL_RCC_ClockConfig+0x264>)
 800b908:	4313      	orrs	r3, r2
 800b90a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b90c:	f7fc fdb2 	bl	8008474 <HAL_GetTick>
 800b910:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b912:	e00a      	b.n	800b92a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b914:	f7fc fdae 	bl	8008474 <HAL_GetTick>
 800b918:	4602      	mov	r2, r0
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	1ad3      	subs	r3, r2, r3
 800b91e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b922:	4293      	cmp	r3, r2
 800b924:	d901      	bls.n	800b92a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800b926:	2303      	movs	r3, #3
 800b928:	e095      	b.n	800ba56 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b92a:	4b4e      	ldr	r3, [pc, #312]	; (800ba64 <HAL_RCC_ClockConfig+0x264>)
 800b92c:	689b      	ldr	r3, [r3, #8]
 800b92e:	f003 020c 	and.w	r2, r3, #12
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	685b      	ldr	r3, [r3, #4]
 800b936:	009b      	lsls	r3, r3, #2
 800b938:	429a      	cmp	r2, r3
 800b93a:	d1eb      	bne.n	800b914 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f003 0302 	and.w	r3, r3, #2
 800b944:	2b00      	cmp	r3, #0
 800b946:	d023      	beq.n	800b990 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f003 0304 	and.w	r3, r3, #4
 800b950:	2b00      	cmp	r3, #0
 800b952:	d005      	beq.n	800b960 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b954:	4b43      	ldr	r3, [pc, #268]	; (800ba64 <HAL_RCC_ClockConfig+0x264>)
 800b956:	689b      	ldr	r3, [r3, #8]
 800b958:	4a42      	ldr	r2, [pc, #264]	; (800ba64 <HAL_RCC_ClockConfig+0x264>)
 800b95a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b95e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	f003 0308 	and.w	r3, r3, #8
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d007      	beq.n	800b97c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800b96c:	4b3d      	ldr	r3, [pc, #244]	; (800ba64 <HAL_RCC_ClockConfig+0x264>)
 800b96e:	689b      	ldr	r3, [r3, #8]
 800b970:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b974:	4a3b      	ldr	r2, [pc, #236]	; (800ba64 <HAL_RCC_ClockConfig+0x264>)
 800b976:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b97a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b97c:	4b39      	ldr	r3, [pc, #228]	; (800ba64 <HAL_RCC_ClockConfig+0x264>)
 800b97e:	689b      	ldr	r3, [r3, #8]
 800b980:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	689b      	ldr	r3, [r3, #8]
 800b988:	4936      	ldr	r1, [pc, #216]	; (800ba64 <HAL_RCC_ClockConfig+0x264>)
 800b98a:	4313      	orrs	r3, r2
 800b98c:	608b      	str	r3, [r1, #8]
 800b98e:	e008      	b.n	800b9a2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800b990:	697b      	ldr	r3, [r7, #20]
 800b992:	2b80      	cmp	r3, #128	; 0x80
 800b994:	d105      	bne.n	800b9a2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800b996:	4b33      	ldr	r3, [pc, #204]	; (800ba64 <HAL_RCC_ClockConfig+0x264>)
 800b998:	689b      	ldr	r3, [r3, #8]
 800b99a:	4a32      	ldr	r2, [pc, #200]	; (800ba64 <HAL_RCC_ClockConfig+0x264>)
 800b99c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b9a0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b9a2:	4b2f      	ldr	r3, [pc, #188]	; (800ba60 <HAL_RCC_ClockConfig+0x260>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	f003 030f 	and.w	r3, r3, #15
 800b9aa:	683a      	ldr	r2, [r7, #0]
 800b9ac:	429a      	cmp	r2, r3
 800b9ae:	d21d      	bcs.n	800b9ec <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b9b0:	4b2b      	ldr	r3, [pc, #172]	; (800ba60 <HAL_RCC_ClockConfig+0x260>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f023 020f 	bic.w	r2, r3, #15
 800b9b8:	4929      	ldr	r1, [pc, #164]	; (800ba60 <HAL_RCC_ClockConfig+0x260>)
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	4313      	orrs	r3, r2
 800b9be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b9c0:	f7fc fd58 	bl	8008474 <HAL_GetTick>
 800b9c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b9c6:	e00a      	b.n	800b9de <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b9c8:	f7fc fd54 	bl	8008474 <HAL_GetTick>
 800b9cc:	4602      	mov	r2, r0
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	1ad3      	subs	r3, r2, r3
 800b9d2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	d901      	bls.n	800b9de <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800b9da:	2303      	movs	r3, #3
 800b9dc:	e03b      	b.n	800ba56 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b9de:	4b20      	ldr	r3, [pc, #128]	; (800ba60 <HAL_RCC_ClockConfig+0x260>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f003 030f 	and.w	r3, r3, #15
 800b9e6:	683a      	ldr	r2, [r7, #0]
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	d1ed      	bne.n	800b9c8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f003 0304 	and.w	r3, r3, #4
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d008      	beq.n	800ba0a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b9f8:	4b1a      	ldr	r3, [pc, #104]	; (800ba64 <HAL_RCC_ClockConfig+0x264>)
 800b9fa:	689b      	ldr	r3, [r3, #8]
 800b9fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	68db      	ldr	r3, [r3, #12]
 800ba04:	4917      	ldr	r1, [pc, #92]	; (800ba64 <HAL_RCC_ClockConfig+0x264>)
 800ba06:	4313      	orrs	r3, r2
 800ba08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	f003 0308 	and.w	r3, r3, #8
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d009      	beq.n	800ba2a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ba16:	4b13      	ldr	r3, [pc, #76]	; (800ba64 <HAL_RCC_ClockConfig+0x264>)
 800ba18:	689b      	ldr	r3, [r3, #8]
 800ba1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	691b      	ldr	r3, [r3, #16]
 800ba22:	00db      	lsls	r3, r3, #3
 800ba24:	490f      	ldr	r1, [pc, #60]	; (800ba64 <HAL_RCC_ClockConfig+0x264>)
 800ba26:	4313      	orrs	r3, r2
 800ba28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800ba2a:	f000 f825 	bl	800ba78 <HAL_RCC_GetSysClockFreq>
 800ba2e:	4601      	mov	r1, r0
 800ba30:	4b0c      	ldr	r3, [pc, #48]	; (800ba64 <HAL_RCC_ClockConfig+0x264>)
 800ba32:	689b      	ldr	r3, [r3, #8]
 800ba34:	091b      	lsrs	r3, r3, #4
 800ba36:	f003 030f 	and.w	r3, r3, #15
 800ba3a:	4a0c      	ldr	r2, [pc, #48]	; (800ba6c <HAL_RCC_ClockConfig+0x26c>)
 800ba3c:	5cd3      	ldrb	r3, [r2, r3]
 800ba3e:	f003 031f 	and.w	r3, r3, #31
 800ba42:	fa21 f303 	lsr.w	r3, r1, r3
 800ba46:	4a0a      	ldr	r2, [pc, #40]	; (800ba70 <HAL_RCC_ClockConfig+0x270>)
 800ba48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800ba4a:	4b0a      	ldr	r3, [pc, #40]	; (800ba74 <HAL_RCC_ClockConfig+0x274>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f7fc fcc4 	bl	80083dc <HAL_InitTick>
 800ba54:	4603      	mov	r3, r0
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	3718      	adds	r7, #24
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}
 800ba5e:	bf00      	nop
 800ba60:	40022000 	.word	0x40022000
 800ba64:	40021000 	.word	0x40021000
 800ba68:	04c4b400 	.word	0x04c4b400
 800ba6c:	08014410 	.word	0x08014410
 800ba70:	20000c30 	.word	0x20000c30
 800ba74:	20000c34 	.word	0x20000c34

0800ba78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ba78:	b480      	push	{r7}
 800ba7a:	b087      	sub	sp, #28
 800ba7c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800ba7e:	4b2c      	ldr	r3, [pc, #176]	; (800bb30 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ba80:	689b      	ldr	r3, [r3, #8]
 800ba82:	f003 030c 	and.w	r3, r3, #12
 800ba86:	2b04      	cmp	r3, #4
 800ba88:	d102      	bne.n	800ba90 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ba8a:	4b2a      	ldr	r3, [pc, #168]	; (800bb34 <HAL_RCC_GetSysClockFreq+0xbc>)
 800ba8c:	613b      	str	r3, [r7, #16]
 800ba8e:	e047      	b.n	800bb20 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800ba90:	4b27      	ldr	r3, [pc, #156]	; (800bb30 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ba92:	689b      	ldr	r3, [r3, #8]
 800ba94:	f003 030c 	and.w	r3, r3, #12
 800ba98:	2b08      	cmp	r3, #8
 800ba9a:	d102      	bne.n	800baa2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ba9c:	4b26      	ldr	r3, [pc, #152]	; (800bb38 <HAL_RCC_GetSysClockFreq+0xc0>)
 800ba9e:	613b      	str	r3, [r7, #16]
 800baa0:	e03e      	b.n	800bb20 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800baa2:	4b23      	ldr	r3, [pc, #140]	; (800bb30 <HAL_RCC_GetSysClockFreq+0xb8>)
 800baa4:	689b      	ldr	r3, [r3, #8]
 800baa6:	f003 030c 	and.w	r3, r3, #12
 800baaa:	2b0c      	cmp	r3, #12
 800baac:	d136      	bne.n	800bb1c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800baae:	4b20      	ldr	r3, [pc, #128]	; (800bb30 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bab0:	68db      	ldr	r3, [r3, #12]
 800bab2:	f003 0303 	and.w	r3, r3, #3
 800bab6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bab8:	4b1d      	ldr	r3, [pc, #116]	; (800bb30 <HAL_RCC_GetSysClockFreq+0xb8>)
 800baba:	68db      	ldr	r3, [r3, #12]
 800babc:	091b      	lsrs	r3, r3, #4
 800babe:	f003 030f 	and.w	r3, r3, #15
 800bac2:	3301      	adds	r3, #1
 800bac4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	2b03      	cmp	r3, #3
 800baca:	d10c      	bne.n	800bae6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bacc:	4a1a      	ldr	r2, [pc, #104]	; (800bb38 <HAL_RCC_GetSysClockFreq+0xc0>)
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bad4:	4a16      	ldr	r2, [pc, #88]	; (800bb30 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bad6:	68d2      	ldr	r2, [r2, #12]
 800bad8:	0a12      	lsrs	r2, r2, #8
 800bada:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800bade:	fb02 f303 	mul.w	r3, r2, r3
 800bae2:	617b      	str	r3, [r7, #20]
      break;
 800bae4:	e00c      	b.n	800bb00 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bae6:	4a13      	ldr	r2, [pc, #76]	; (800bb34 <HAL_RCC_GetSysClockFreq+0xbc>)
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	fbb2 f3f3 	udiv	r3, r2, r3
 800baee:	4a10      	ldr	r2, [pc, #64]	; (800bb30 <HAL_RCC_GetSysClockFreq+0xb8>)
 800baf0:	68d2      	ldr	r2, [r2, #12]
 800baf2:	0a12      	lsrs	r2, r2, #8
 800baf4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800baf8:	fb02 f303 	mul.w	r3, r2, r3
 800bafc:	617b      	str	r3, [r7, #20]
      break;
 800bafe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800bb00:	4b0b      	ldr	r3, [pc, #44]	; (800bb30 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bb02:	68db      	ldr	r3, [r3, #12]
 800bb04:	0e5b      	lsrs	r3, r3, #25
 800bb06:	f003 0303 	and.w	r3, r3, #3
 800bb0a:	3301      	adds	r3, #1
 800bb0c:	005b      	lsls	r3, r3, #1
 800bb0e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800bb10:	697a      	ldr	r2, [r7, #20]
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb18:	613b      	str	r3, [r7, #16]
 800bb1a:	e001      	b.n	800bb20 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800bb20:	693b      	ldr	r3, [r7, #16]
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	371c      	adds	r7, #28
 800bb26:	46bd      	mov	sp, r7
 800bb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2c:	4770      	bx	lr
 800bb2e:	bf00      	nop
 800bb30:	40021000 	.word	0x40021000
 800bb34:	00f42400 	.word	0x00f42400
 800bb38:	007a1200 	.word	0x007a1200

0800bb3c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bb3c:	b480      	push	{r7}
 800bb3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bb40:	4b03      	ldr	r3, [pc, #12]	; (800bb50 <HAL_RCC_GetHCLKFreq+0x14>)
 800bb42:	681b      	ldr	r3, [r3, #0]
}
 800bb44:	4618      	mov	r0, r3
 800bb46:	46bd      	mov	sp, r7
 800bb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4c:	4770      	bx	lr
 800bb4e:	bf00      	nop
 800bb50:	20000c30 	.word	0x20000c30

0800bb54 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800bb54:	b480      	push	{r7}
 800bb56:	b087      	sub	sp, #28
 800bb58:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800bb5a:	4b1e      	ldr	r3, [pc, #120]	; (800bbd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bb5c:	68db      	ldr	r3, [r3, #12]
 800bb5e:	f003 0303 	and.w	r3, r3, #3
 800bb62:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bb64:	4b1b      	ldr	r3, [pc, #108]	; (800bbd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bb66:	68db      	ldr	r3, [r3, #12]
 800bb68:	091b      	lsrs	r3, r3, #4
 800bb6a:	f003 030f 	and.w	r3, r3, #15
 800bb6e:	3301      	adds	r3, #1
 800bb70:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	2b03      	cmp	r3, #3
 800bb76:	d10c      	bne.n	800bb92 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bb78:	4a17      	ldr	r2, [pc, #92]	; (800bbd8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb80:	4a14      	ldr	r2, [pc, #80]	; (800bbd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bb82:	68d2      	ldr	r2, [r2, #12]
 800bb84:	0a12      	lsrs	r2, r2, #8
 800bb86:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800bb8a:	fb02 f303 	mul.w	r3, r2, r3
 800bb8e:	617b      	str	r3, [r7, #20]
    break;
 800bb90:	e00c      	b.n	800bbac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bb92:	4a12      	ldr	r2, [pc, #72]	; (800bbdc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb9a:	4a0e      	ldr	r2, [pc, #56]	; (800bbd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bb9c:	68d2      	ldr	r2, [r2, #12]
 800bb9e:	0a12      	lsrs	r2, r2, #8
 800bba0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800bba4:	fb02 f303 	mul.w	r3, r2, r3
 800bba8:	617b      	str	r3, [r7, #20]
    break;
 800bbaa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800bbac:	4b09      	ldr	r3, [pc, #36]	; (800bbd4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bbae:	68db      	ldr	r3, [r3, #12]
 800bbb0:	0e5b      	lsrs	r3, r3, #25
 800bbb2:	f003 0303 	and.w	r3, r3, #3
 800bbb6:	3301      	adds	r3, #1
 800bbb8:	005b      	lsls	r3, r3, #1
 800bbba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800bbbc:	697a      	ldr	r2, [r7, #20]
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbc4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800bbc6:	687b      	ldr	r3, [r7, #4]
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	371c      	adds	r7, #28
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd2:	4770      	bx	lr
 800bbd4:	40021000 	.word	0x40021000
 800bbd8:	007a1200 	.word	0x007a1200
 800bbdc:	00f42400 	.word	0x00f42400

0800bbe0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b086      	sub	sp, #24
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800bbe8:	2300      	movs	r3, #0
 800bbea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800bbec:	2300      	movs	r3, #0
 800bbee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	f000 8098 	beq.w	800bd2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bc02:	4b43      	ldr	r3, [pc, #268]	; (800bd10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d10d      	bne.n	800bc2a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bc0e:	4b40      	ldr	r3, [pc, #256]	; (800bd10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc12:	4a3f      	ldr	r2, [pc, #252]	; (800bd10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc18:	6593      	str	r3, [r2, #88]	; 0x58
 800bc1a:	4b3d      	ldr	r3, [pc, #244]	; (800bd10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc22:	60bb      	str	r3, [r7, #8]
 800bc24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bc26:	2301      	movs	r3, #1
 800bc28:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bc2a:	4b3a      	ldr	r3, [pc, #232]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	4a39      	ldr	r2, [pc, #228]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bc30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bc36:	f7fc fc1d 	bl	8008474 <HAL_GetTick>
 800bc3a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bc3c:	e009      	b.n	800bc52 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bc3e:	f7fc fc19 	bl	8008474 <HAL_GetTick>
 800bc42:	4602      	mov	r2, r0
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	1ad3      	subs	r3, r2, r3
 800bc48:	2b02      	cmp	r3, #2
 800bc4a:	d902      	bls.n	800bc52 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800bc4c:	2303      	movs	r3, #3
 800bc4e:	74fb      	strb	r3, [r7, #19]
        break;
 800bc50:	e005      	b.n	800bc5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bc52:	4b30      	ldr	r3, [pc, #192]	; (800bd14 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d0ef      	beq.n	800bc3e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800bc5e:	7cfb      	ldrb	r3, [r7, #19]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d159      	bne.n	800bd18 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800bc64:	4b2a      	ldr	r3, [pc, #168]	; (800bd10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc6e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d01e      	beq.n	800bcb4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc7a:	697a      	ldr	r2, [r7, #20]
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	d019      	beq.n	800bcb4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800bc80:	4b23      	ldr	r3, [pc, #140]	; (800bd10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc8a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bc8c:	4b20      	ldr	r3, [pc, #128]	; (800bd10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc92:	4a1f      	ldr	r2, [pc, #124]	; (800bd10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bc9c:	4b1c      	ldr	r3, [pc, #112]	; (800bd10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bc9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bca2:	4a1b      	ldr	r2, [pc, #108]	; (800bd10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bca4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bca8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800bcac:	4a18      	ldr	r2, [pc, #96]	; (800bd10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bcae:	697b      	ldr	r3, [r7, #20]
 800bcb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	f003 0301 	and.w	r3, r3, #1
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d016      	beq.n	800bcec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcbe:	f7fc fbd9 	bl	8008474 <HAL_GetTick>
 800bcc2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bcc4:	e00b      	b.n	800bcde <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bcc6:	f7fc fbd5 	bl	8008474 <HAL_GetTick>
 800bcca:	4602      	mov	r2, r0
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	1ad3      	subs	r3, r2, r3
 800bcd0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcd4:	4293      	cmp	r3, r2
 800bcd6:	d902      	bls.n	800bcde <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800bcd8:	2303      	movs	r3, #3
 800bcda:	74fb      	strb	r3, [r7, #19]
            break;
 800bcdc:	e006      	b.n	800bcec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bcde:	4b0c      	ldr	r3, [pc, #48]	; (800bd10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bce4:	f003 0302 	and.w	r3, r3, #2
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d0ec      	beq.n	800bcc6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800bcec:	7cfb      	ldrb	r3, [r7, #19]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d10b      	bne.n	800bd0a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bcf2:	4b07      	ldr	r3, [pc, #28]	; (800bd10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bcf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcf8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd00:	4903      	ldr	r1, [pc, #12]	; (800bd10 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bd02:	4313      	orrs	r3, r2
 800bd04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800bd08:	e008      	b.n	800bd1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bd0a:	7cfb      	ldrb	r3, [r7, #19]
 800bd0c:	74bb      	strb	r3, [r7, #18]
 800bd0e:	e005      	b.n	800bd1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800bd10:	40021000 	.word	0x40021000
 800bd14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd18:	7cfb      	ldrb	r3, [r7, #19]
 800bd1a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bd1c:	7c7b      	ldrb	r3, [r7, #17]
 800bd1e:	2b01      	cmp	r3, #1
 800bd20:	d105      	bne.n	800bd2e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bd22:	4baf      	ldr	r3, [pc, #700]	; (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd26:	4aae      	ldr	r2, [pc, #696]	; (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bd2c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	f003 0301 	and.w	r3, r3, #1
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d00a      	beq.n	800bd50 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bd3a:	4ba9      	ldr	r3, [pc, #676]	; (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd40:	f023 0203 	bic.w	r2, r3, #3
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	685b      	ldr	r3, [r3, #4]
 800bd48:	49a5      	ldr	r1, [pc, #660]	; (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd4a:	4313      	orrs	r3, r2
 800bd4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	f003 0302 	and.w	r3, r3, #2
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d00a      	beq.n	800bd72 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bd5c:	4ba0      	ldr	r3, [pc, #640]	; (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd62:	f023 020c 	bic.w	r2, r3, #12
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	689b      	ldr	r3, [r3, #8]
 800bd6a:	499d      	ldr	r1, [pc, #628]	; (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd6c:	4313      	orrs	r3, r2
 800bd6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	f003 0304 	and.w	r3, r3, #4
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d00a      	beq.n	800bd94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bd7e:	4b98      	ldr	r3, [pc, #608]	; (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd84:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	68db      	ldr	r3, [r3, #12]
 800bd8c:	4994      	ldr	r1, [pc, #592]	; (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd8e:	4313      	orrs	r3, r2
 800bd90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	f003 0308 	and.w	r3, r3, #8
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d00a      	beq.n	800bdb6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bda0:	4b8f      	ldr	r3, [pc, #572]	; (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bda2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bda6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	691b      	ldr	r3, [r3, #16]
 800bdae:	498c      	ldr	r1, [pc, #560]	; (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bdb0:	4313      	orrs	r3, r2
 800bdb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f003 0310 	and.w	r3, r3, #16
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d00a      	beq.n	800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800bdc2:	4b87      	ldr	r3, [pc, #540]	; (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bdc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	695b      	ldr	r3, [r3, #20]
 800bdd0:	4983      	ldr	r1, [pc, #524]	; (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bdd2:	4313      	orrs	r3, r2
 800bdd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f003 0320 	and.w	r3, r3, #32
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d00a      	beq.n	800bdfa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bde4:	4b7e      	ldr	r3, [pc, #504]	; (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bde6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	699b      	ldr	r3, [r3, #24]
 800bdf2:	497b      	ldr	r1, [pc, #492]	; (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bdf4:	4313      	orrs	r3, r2
 800bdf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be02:	2b00      	cmp	r3, #0
 800be04:	d00a      	beq.n	800be1c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800be06:	4b76      	ldr	r3, [pc, #472]	; (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be0c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	69db      	ldr	r3, [r3, #28]
 800be14:	4972      	ldr	r1, [pc, #456]	; (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be16:	4313      	orrs	r3, r2
 800be18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be24:	2b00      	cmp	r3, #0
 800be26:	d00a      	beq.n	800be3e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800be28:	4b6d      	ldr	r3, [pc, #436]	; (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be2e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6a1b      	ldr	r3, [r3, #32]
 800be36:	496a      	ldr	r1, [pc, #424]	; (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be38:	4313      	orrs	r3, r2
 800be3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be46:	2b00      	cmp	r3, #0
 800be48:	d00a      	beq.n	800be60 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800be4a:	4b65      	ldr	r3, [pc, #404]	; (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be58:	4961      	ldr	r1, [pc, #388]	; (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be5a:	4313      	orrs	r3, r2
 800be5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d00a      	beq.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800be6c:	4b5c      	ldr	r3, [pc, #368]	; (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800be72:	f023 0203 	bic.w	r2, r3, #3
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be7a:	4959      	ldr	r1, [pc, #356]	; (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be7c:	4313      	orrs	r3, r2
 800be7e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d00a      	beq.n	800bea4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800be8e:	4b54      	ldr	r3, [pc, #336]	; (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be9c:	4950      	ldr	r1, [pc, #320]	; (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800be9e:	4313      	orrs	r3, r2
 800bea0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800beac:	2b00      	cmp	r3, #0
 800beae:	d015      	beq.n	800bedc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800beb0:	4b4b      	ldr	r3, [pc, #300]	; (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800beb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800beb6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bebe:	4948      	ldr	r1, [pc, #288]	; (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bec0:	4313      	orrs	r3, r2
 800bec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bece:	d105      	bne.n	800bedc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bed0:	4b43      	ldr	r3, [pc, #268]	; (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bed2:	68db      	ldr	r3, [r3, #12]
 800bed4:	4a42      	ldr	r2, [pc, #264]	; (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bed6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800beda:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d015      	beq.n	800bf14 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800bee8:	4b3d      	ldr	r3, [pc, #244]	; (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800beea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800beee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bef6:	493a      	ldr	r1, [pc, #232]	; (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bef8:	4313      	orrs	r3, r2
 800befa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bf06:	d105      	bne.n	800bf14 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bf08:	4b35      	ldr	r3, [pc, #212]	; (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf0a:	68db      	ldr	r3, [r3, #12]
 800bf0c:	4a34      	ldr	r2, [pc, #208]	; (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf12:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d015      	beq.n	800bf4c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bf20:	4b2f      	ldr	r3, [pc, #188]	; (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf26:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf2e:	492c      	ldr	r1, [pc, #176]	; (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf30:	4313      	orrs	r3, r2
 800bf32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bf3e:	d105      	bne.n	800bf4c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bf40:	4b27      	ldr	r3, [pc, #156]	; (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf42:	68db      	ldr	r3, [r3, #12]
 800bf44:	4a26      	ldr	r2, [pc, #152]	; (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf4a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d015      	beq.n	800bf84 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bf58:	4b21      	ldr	r3, [pc, #132]	; (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf66:	491e      	ldr	r1, [pc, #120]	; (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf68:	4313      	orrs	r3, r2
 800bf6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf76:	d105      	bne.n	800bf84 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bf78:	4b19      	ldr	r3, [pc, #100]	; (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf7a:	68db      	ldr	r3, [r3, #12]
 800bf7c:	4a18      	ldr	r2, [pc, #96]	; (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf82:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d015      	beq.n	800bfbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bf90:	4b13      	ldr	r3, [pc, #76]	; (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf9e:	4910      	ldr	r1, [pc, #64]	; (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bfa0:	4313      	orrs	r3, r2
 800bfa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfaa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bfae:	d105      	bne.n	800bfbc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bfb0:	4b0b      	ldr	r3, [pc, #44]	; (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bfb2:	68db      	ldr	r3, [r3, #12]
 800bfb4:	4a0a      	ldr	r2, [pc, #40]	; (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bfb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bfba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d018      	beq.n	800bffa <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800bfc8:	4b05      	ldr	r3, [pc, #20]	; (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bfca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfd6:	4902      	ldr	r1, [pc, #8]	; (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bfd8:	4313      	orrs	r3, r2
 800bfda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800bfde:	e001      	b.n	800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800bfe0:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfe8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bfec:	d105      	bne.n	800bffa <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800bfee:	4b21      	ldr	r3, [pc, #132]	; (800c074 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bff0:	68db      	ldr	r3, [r3, #12]
 800bff2:	4a20      	ldr	r2, [pc, #128]	; (800c074 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bff8:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c002:	2b00      	cmp	r3, #0
 800c004:	d015      	beq.n	800c032 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800c006:	4b1b      	ldr	r3, [pc, #108]	; (800c074 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c00c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c014:	4917      	ldr	r1, [pc, #92]	; (800c074 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c016:	4313      	orrs	r3, r2
 800c018:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c024:	d105      	bne.n	800c032 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c026:	4b13      	ldr	r3, [pc, #76]	; (800c074 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c028:	68db      	ldr	r3, [r3, #12]
 800c02a:	4a12      	ldr	r2, [pc, #72]	; (800c074 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c02c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c030:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d015      	beq.n	800c06a <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800c03e:	4b0d      	ldr	r3, [pc, #52]	; (800c074 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c040:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c044:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c04c:	4909      	ldr	r1, [pc, #36]	; (800c074 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c04e:	4313      	orrs	r3, r2
 800c050:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c058:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c05c:	d105      	bne.n	800c06a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c05e:	4b05      	ldr	r3, [pc, #20]	; (800c074 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c060:	68db      	ldr	r3, [r3, #12]
 800c062:	4a04      	ldr	r2, [pc, #16]	; (800c074 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c064:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c068:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800c06a:	7cbb      	ldrb	r3, [r7, #18]
}
 800c06c:	4618      	mov	r0, r3
 800c06e:	3718      	adds	r7, #24
 800c070:	46bd      	mov	sp, r7
 800c072:	bd80      	pop	{r7, pc}
 800c074:	40021000 	.word	0x40021000

0800c078 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b084      	sub	sp, #16
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d101      	bne.n	800c08a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c086:	2301      	movs	r3, #1
 800c088:	e084      	b.n	800c194 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2200      	movs	r2, #0
 800c08e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c096:	b2db      	uxtb	r3, r3
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d106      	bne.n	800c0aa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2200      	movs	r2, #0
 800c0a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f7fb fbb3 	bl	8007810 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2202      	movs	r2, #2
 800c0ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	681a      	ldr	r2, [r3, #0]
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c0c0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	68db      	ldr	r3, [r3, #12]
 800c0c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c0ca:	d902      	bls.n	800c0d2 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	60fb      	str	r3, [r7, #12]
 800c0d0:	e002      	b.n	800c0d8 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c0d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c0d6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	68db      	ldr	r3, [r3, #12]
 800c0dc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800c0e0:	d007      	beq.n	800c0f2 <HAL_SPI_Init+0x7a>
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	68db      	ldr	r3, [r3, #12]
 800c0e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c0ea:	d002      	beq.n	800c0f2 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d10b      	bne.n	800c112 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	68db      	ldr	r3, [r3, #12]
 800c0fe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c102:	d903      	bls.n	800c10c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2202      	movs	r2, #2
 800c108:	631a      	str	r2, [r3, #48]	; 0x30
 800c10a:	e002      	b.n	800c112 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2201      	movs	r2, #1
 800c110:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	685a      	ldr	r2, [r3, #4]
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	689b      	ldr	r3, [r3, #8]
 800c11a:	431a      	orrs	r2, r3
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	691b      	ldr	r3, [r3, #16]
 800c120:	431a      	orrs	r2, r3
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	695b      	ldr	r3, [r3, #20]
 800c126:	431a      	orrs	r2, r3
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	699b      	ldr	r3, [r3, #24]
 800c12c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c130:	431a      	orrs	r2, r3
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	69db      	ldr	r3, [r3, #28]
 800c136:	431a      	orrs	r2, r3
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	6a1b      	ldr	r3, [r3, #32]
 800c13c:	ea42 0103 	orr.w	r1, r2, r3
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	430a      	orrs	r2, r1
 800c14a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	699b      	ldr	r3, [r3, #24]
 800c150:	0c1b      	lsrs	r3, r3, #16
 800c152:	f003 0204 	and.w	r2, r3, #4
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c15a:	431a      	orrs	r2, r3
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c160:	431a      	orrs	r2, r3
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	68db      	ldr	r3, [r3, #12]
 800c166:	ea42 0103 	orr.w	r1, r2, r3
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	68fa      	ldr	r2, [r7, #12]
 800c170:	430a      	orrs	r2, r1
 800c172:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	69da      	ldr	r2, [r3, #28]
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c182:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2200      	movs	r2, #0
 800c188:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2201      	movs	r2, #1
 800c18e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800c192:	2300      	movs	r3, #0
}
 800c194:	4618      	mov	r0, r3
 800c196:	3710      	adds	r7, #16
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}

0800c19c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b082      	sub	sp, #8
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d101      	bne.n	800c1ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	e049      	b.n	800c242 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c1b4:	b2db      	uxtb	r3, r3
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d106      	bne.n	800c1c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2200      	movs	r2, #0
 800c1be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f7fb fff0 	bl	80081a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2202      	movs	r2, #2
 800c1cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681a      	ldr	r2, [r3, #0]
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	3304      	adds	r3, #4
 800c1d8:	4619      	mov	r1, r3
 800c1da:	4610      	mov	r0, r2
 800c1dc:	f000 ff20 	bl	800d020 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2201      	movs	r2, #1
 800c1e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2201      	movs	r2, #1
 800c1ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2201      	movs	r2, #1
 800c1f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2201      	movs	r2, #1
 800c1fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2201      	movs	r2, #1
 800c204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2201      	movs	r2, #1
 800c20c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2201      	movs	r2, #1
 800c214:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2201      	movs	r2, #1
 800c21c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2201      	movs	r2, #1
 800c224:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2201      	movs	r2, #1
 800c22c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2201      	movs	r2, #1
 800c234:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2201      	movs	r2, #1
 800c23c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c240:	2300      	movs	r3, #0
}
 800c242:	4618      	mov	r0, r3
 800c244:	3708      	adds	r7, #8
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}
	...

0800c24c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c24c:	b480      	push	{r7}
 800c24e:	b085      	sub	sp, #20
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c25a:	b2db      	uxtb	r3, r3
 800c25c:	2b01      	cmp	r3, #1
 800c25e:	d001      	beq.n	800c264 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c260:	2301      	movs	r3, #1
 800c262:	e019      	b.n	800c298 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2202      	movs	r2, #2
 800c268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	689a      	ldr	r2, [r3, #8]
 800c272:	4b0c      	ldr	r3, [pc, #48]	; (800c2a4 <HAL_TIM_Base_Start+0x58>)
 800c274:	4013      	ands	r3, r2
 800c276:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	2b06      	cmp	r3, #6
 800c27c:	d00b      	beq.n	800c296 <HAL_TIM_Base_Start+0x4a>
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c284:	d007      	beq.n	800c296 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	681a      	ldr	r2, [r3, #0]
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	f042 0201 	orr.w	r2, r2, #1
 800c294:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c296:	2300      	movs	r3, #0
}
 800c298:	4618      	mov	r0, r3
 800c29a:	3714      	adds	r7, #20
 800c29c:	46bd      	mov	sp, r7
 800c29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a2:	4770      	bx	lr
 800c2a4:	00010007 	.word	0x00010007

0800c2a8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	b083      	sub	sp, #12
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	6a1a      	ldr	r2, [r3, #32]
 800c2b6:	f241 1311 	movw	r3, #4369	; 0x1111
 800c2ba:	4013      	ands	r3, r2
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d10f      	bne.n	800c2e0 <HAL_TIM_Base_Stop+0x38>
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	6a1a      	ldr	r2, [r3, #32]
 800c2c6:	f244 4344 	movw	r3, #17476	; 0x4444
 800c2ca:	4013      	ands	r3, r2
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d107      	bne.n	800c2e0 <HAL_TIM_Base_Stop+0x38>
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	681a      	ldr	r2, [r3, #0]
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	f022 0201 	bic.w	r2, r2, #1
 800c2de:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2201      	movs	r2, #1
 800c2e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c2e8:	2300      	movs	r3, #0
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	370c      	adds	r7, #12
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f4:	4770      	bx	lr
	...

0800c2f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c2f8:	b480      	push	{r7}
 800c2fa:	b085      	sub	sp, #20
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c306:	b2db      	uxtb	r3, r3
 800c308:	2b01      	cmp	r3, #1
 800c30a:	d001      	beq.n	800c310 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c30c:	2301      	movs	r3, #1
 800c30e:	e021      	b.n	800c354 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2202      	movs	r2, #2
 800c314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	68da      	ldr	r2, [r3, #12]
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f042 0201 	orr.w	r2, r2, #1
 800c326:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	689a      	ldr	r2, [r3, #8]
 800c32e:	4b0c      	ldr	r3, [pc, #48]	; (800c360 <HAL_TIM_Base_Start_IT+0x68>)
 800c330:	4013      	ands	r3, r2
 800c332:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	2b06      	cmp	r3, #6
 800c338:	d00b      	beq.n	800c352 <HAL_TIM_Base_Start_IT+0x5a>
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c340:	d007      	beq.n	800c352 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	681a      	ldr	r2, [r3, #0]
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	f042 0201 	orr.w	r2, r2, #1
 800c350:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c352:	2300      	movs	r3, #0
}
 800c354:	4618      	mov	r0, r3
 800c356:	3714      	adds	r7, #20
 800c358:	46bd      	mov	sp, r7
 800c35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35e:	4770      	bx	lr
 800c360:	00010007 	.word	0x00010007

0800c364 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800c364:	b480      	push	{r7}
 800c366:	b083      	sub	sp, #12
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	68da      	ldr	r2, [r3, #12]
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	f022 0201 	bic.w	r2, r2, #1
 800c37a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	6a1a      	ldr	r2, [r3, #32]
 800c382:	f241 1311 	movw	r3, #4369	; 0x1111
 800c386:	4013      	ands	r3, r2
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d10f      	bne.n	800c3ac <HAL_TIM_Base_Stop_IT+0x48>
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	6a1a      	ldr	r2, [r3, #32]
 800c392:	f244 4344 	movw	r3, #17476	; 0x4444
 800c396:	4013      	ands	r3, r2
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d107      	bne.n	800c3ac <HAL_TIM_Base_Stop_IT+0x48>
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	681a      	ldr	r2, [r3, #0]
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f022 0201 	bic.w	r2, r2, #1
 800c3aa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2201      	movs	r2, #1
 800c3b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c3b4:	2300      	movs	r3, #0
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	370c      	adds	r7, #12
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c0:	4770      	bx	lr

0800c3c2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c3c2:	b580      	push	{r7, lr}
 800c3c4:	b082      	sub	sp, #8
 800c3c6:	af00      	add	r7, sp, #0
 800c3c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d101      	bne.n	800c3d4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	e049      	b.n	800c468 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c3da:	b2db      	uxtb	r3, r3
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d106      	bne.n	800c3ee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f000 f841 	bl	800c470 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2202      	movs	r2, #2
 800c3f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681a      	ldr	r2, [r3, #0]
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	3304      	adds	r3, #4
 800c3fe:	4619      	mov	r1, r3
 800c400:	4610      	mov	r0, r2
 800c402:	f000 fe0d 	bl	800d020 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2201      	movs	r2, #1
 800c40a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	2201      	movs	r2, #1
 800c412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	2201      	movs	r2, #1
 800c41a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2201      	movs	r2, #1
 800c422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2201      	movs	r2, #1
 800c42a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2201      	movs	r2, #1
 800c432:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	2201      	movs	r2, #1
 800c43a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2201      	movs	r2, #1
 800c442:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2201      	movs	r2, #1
 800c44a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2201      	movs	r2, #1
 800c452:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2201      	movs	r2, #1
 800c45a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2201      	movs	r2, #1
 800c462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c466:	2300      	movs	r3, #0
}
 800c468:	4618      	mov	r0, r3
 800c46a:	3708      	adds	r7, #8
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}

0800c470 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c470:	b480      	push	{r7}
 800c472:	b083      	sub	sp, #12
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c478:	bf00      	nop
 800c47a:	370c      	adds	r7, #12
 800c47c:	46bd      	mov	sp, r7
 800c47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c482:	4770      	bx	lr

0800c484 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b084      	sub	sp, #16
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
 800c48c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d109      	bne.n	800c4a8 <HAL_TIM_PWM_Start+0x24>
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c49a:	b2db      	uxtb	r3, r3
 800c49c:	2b01      	cmp	r3, #1
 800c49e:	bf14      	ite	ne
 800c4a0:	2301      	movne	r3, #1
 800c4a2:	2300      	moveq	r3, #0
 800c4a4:	b2db      	uxtb	r3, r3
 800c4a6:	e03c      	b.n	800c522 <HAL_TIM_PWM_Start+0x9e>
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	2b04      	cmp	r3, #4
 800c4ac:	d109      	bne.n	800c4c2 <HAL_TIM_PWM_Start+0x3e>
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c4b4:	b2db      	uxtb	r3, r3
 800c4b6:	2b01      	cmp	r3, #1
 800c4b8:	bf14      	ite	ne
 800c4ba:	2301      	movne	r3, #1
 800c4bc:	2300      	moveq	r3, #0
 800c4be:	b2db      	uxtb	r3, r3
 800c4c0:	e02f      	b.n	800c522 <HAL_TIM_PWM_Start+0x9e>
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	2b08      	cmp	r3, #8
 800c4c6:	d109      	bne.n	800c4dc <HAL_TIM_PWM_Start+0x58>
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c4ce:	b2db      	uxtb	r3, r3
 800c4d0:	2b01      	cmp	r3, #1
 800c4d2:	bf14      	ite	ne
 800c4d4:	2301      	movne	r3, #1
 800c4d6:	2300      	moveq	r3, #0
 800c4d8:	b2db      	uxtb	r3, r3
 800c4da:	e022      	b.n	800c522 <HAL_TIM_PWM_Start+0x9e>
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	2b0c      	cmp	r3, #12
 800c4e0:	d109      	bne.n	800c4f6 <HAL_TIM_PWM_Start+0x72>
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c4e8:	b2db      	uxtb	r3, r3
 800c4ea:	2b01      	cmp	r3, #1
 800c4ec:	bf14      	ite	ne
 800c4ee:	2301      	movne	r3, #1
 800c4f0:	2300      	moveq	r3, #0
 800c4f2:	b2db      	uxtb	r3, r3
 800c4f4:	e015      	b.n	800c522 <HAL_TIM_PWM_Start+0x9e>
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	2b10      	cmp	r3, #16
 800c4fa:	d109      	bne.n	800c510 <HAL_TIM_PWM_Start+0x8c>
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c502:	b2db      	uxtb	r3, r3
 800c504:	2b01      	cmp	r3, #1
 800c506:	bf14      	ite	ne
 800c508:	2301      	movne	r3, #1
 800c50a:	2300      	moveq	r3, #0
 800c50c:	b2db      	uxtb	r3, r3
 800c50e:	e008      	b.n	800c522 <HAL_TIM_PWM_Start+0x9e>
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c516:	b2db      	uxtb	r3, r3
 800c518:	2b01      	cmp	r3, #1
 800c51a:	bf14      	ite	ne
 800c51c:	2301      	movne	r3, #1
 800c51e:	2300      	moveq	r3, #0
 800c520:	b2db      	uxtb	r3, r3
 800c522:	2b00      	cmp	r3, #0
 800c524:	d001      	beq.n	800c52a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c526:	2301      	movs	r3, #1
 800c528:	e073      	b.n	800c612 <HAL_TIM_PWM_Start+0x18e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d104      	bne.n	800c53a <HAL_TIM_PWM_Start+0xb6>
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2202      	movs	r2, #2
 800c534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c538:	e023      	b.n	800c582 <HAL_TIM_PWM_Start+0xfe>
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	2b04      	cmp	r3, #4
 800c53e:	d104      	bne.n	800c54a <HAL_TIM_PWM_Start+0xc6>
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2202      	movs	r2, #2
 800c544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c548:	e01b      	b.n	800c582 <HAL_TIM_PWM_Start+0xfe>
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	2b08      	cmp	r3, #8
 800c54e:	d104      	bne.n	800c55a <HAL_TIM_PWM_Start+0xd6>
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2202      	movs	r2, #2
 800c554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c558:	e013      	b.n	800c582 <HAL_TIM_PWM_Start+0xfe>
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	2b0c      	cmp	r3, #12
 800c55e:	d104      	bne.n	800c56a <HAL_TIM_PWM_Start+0xe6>
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2202      	movs	r2, #2
 800c564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c568:	e00b      	b.n	800c582 <HAL_TIM_PWM_Start+0xfe>
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	2b10      	cmp	r3, #16
 800c56e:	d104      	bne.n	800c57a <HAL_TIM_PWM_Start+0xf6>
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2202      	movs	r2, #2
 800c574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c578:	e003      	b.n	800c582 <HAL_TIM_PWM_Start+0xfe>
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2202      	movs	r2, #2
 800c57e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	2201      	movs	r2, #1
 800c588:	6839      	ldr	r1, [r7, #0]
 800c58a:	4618      	mov	r0, r3
 800c58c:	f001 f9b6 	bl	800d8fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	4a21      	ldr	r2, [pc, #132]	; (800c61c <HAL_TIM_PWM_Start+0x198>)
 800c596:	4293      	cmp	r3, r2
 800c598:	d018      	beq.n	800c5cc <HAL_TIM_PWM_Start+0x148>
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	4a20      	ldr	r2, [pc, #128]	; (800c620 <HAL_TIM_PWM_Start+0x19c>)
 800c5a0:	4293      	cmp	r3, r2
 800c5a2:	d013      	beq.n	800c5cc <HAL_TIM_PWM_Start+0x148>
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	4a1e      	ldr	r2, [pc, #120]	; (800c624 <HAL_TIM_PWM_Start+0x1a0>)
 800c5aa:	4293      	cmp	r3, r2
 800c5ac:	d00e      	beq.n	800c5cc <HAL_TIM_PWM_Start+0x148>
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	4a1d      	ldr	r2, [pc, #116]	; (800c628 <HAL_TIM_PWM_Start+0x1a4>)
 800c5b4:	4293      	cmp	r3, r2
 800c5b6:	d009      	beq.n	800c5cc <HAL_TIM_PWM_Start+0x148>
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	4a1b      	ldr	r2, [pc, #108]	; (800c62c <HAL_TIM_PWM_Start+0x1a8>)
 800c5be:	4293      	cmp	r3, r2
 800c5c0:	d004      	beq.n	800c5cc <HAL_TIM_PWM_Start+0x148>
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	4a1a      	ldr	r2, [pc, #104]	; (800c630 <HAL_TIM_PWM_Start+0x1ac>)
 800c5c8:	4293      	cmp	r3, r2
 800c5ca:	d101      	bne.n	800c5d0 <HAL_TIM_PWM_Start+0x14c>
 800c5cc:	2301      	movs	r3, #1
 800c5ce:	e000      	b.n	800c5d2 <HAL_TIM_PWM_Start+0x14e>
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d007      	beq.n	800c5e6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c5e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	689a      	ldr	r2, [r3, #8]
 800c5ec:	4b11      	ldr	r3, [pc, #68]	; (800c634 <HAL_TIM_PWM_Start+0x1b0>)
 800c5ee:	4013      	ands	r3, r2
 800c5f0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	2b06      	cmp	r3, #6
 800c5f6:	d00b      	beq.n	800c610 <HAL_TIM_PWM_Start+0x18c>
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5fe:	d007      	beq.n	800c610 <HAL_TIM_PWM_Start+0x18c>
  {
    __HAL_TIM_ENABLE(htim);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	681a      	ldr	r2, [r3, #0]
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f042 0201 	orr.w	r2, r2, #1
 800c60e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c610:	2300      	movs	r3, #0
}
 800c612:	4618      	mov	r0, r3
 800c614:	3710      	adds	r7, #16
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}
 800c61a:	bf00      	nop
 800c61c:	40012c00 	.word	0x40012c00
 800c620:	40013400 	.word	0x40013400
 800c624:	40014000 	.word	0x40014000
 800c628:	40014400 	.word	0x40014400
 800c62c:	40014800 	.word	0x40014800
 800c630:	40015000 	.word	0x40015000
 800c634:	00010007 	.word	0x00010007

0800c638 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b082      	sub	sp, #8
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
 800c640:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	2200      	movs	r2, #0
 800c648:	6839      	ldr	r1, [r7, #0]
 800c64a:	4618      	mov	r0, r3
 800c64c:	f001 f956 	bl	800d8fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	4a40      	ldr	r2, [pc, #256]	; (800c758 <HAL_TIM_PWM_Stop+0x120>)
 800c656:	4293      	cmp	r3, r2
 800c658:	d018      	beq.n	800c68c <HAL_TIM_PWM_Stop+0x54>
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	4a3f      	ldr	r2, [pc, #252]	; (800c75c <HAL_TIM_PWM_Stop+0x124>)
 800c660:	4293      	cmp	r3, r2
 800c662:	d013      	beq.n	800c68c <HAL_TIM_PWM_Stop+0x54>
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	4a3d      	ldr	r2, [pc, #244]	; (800c760 <HAL_TIM_PWM_Stop+0x128>)
 800c66a:	4293      	cmp	r3, r2
 800c66c:	d00e      	beq.n	800c68c <HAL_TIM_PWM_Stop+0x54>
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	4a3c      	ldr	r2, [pc, #240]	; (800c764 <HAL_TIM_PWM_Stop+0x12c>)
 800c674:	4293      	cmp	r3, r2
 800c676:	d009      	beq.n	800c68c <HAL_TIM_PWM_Stop+0x54>
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	4a3a      	ldr	r2, [pc, #232]	; (800c768 <HAL_TIM_PWM_Stop+0x130>)
 800c67e:	4293      	cmp	r3, r2
 800c680:	d004      	beq.n	800c68c <HAL_TIM_PWM_Stop+0x54>
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	4a39      	ldr	r2, [pc, #228]	; (800c76c <HAL_TIM_PWM_Stop+0x134>)
 800c688:	4293      	cmp	r3, r2
 800c68a:	d101      	bne.n	800c690 <HAL_TIM_PWM_Stop+0x58>
 800c68c:	2301      	movs	r3, #1
 800c68e:	e000      	b.n	800c692 <HAL_TIM_PWM_Stop+0x5a>
 800c690:	2300      	movs	r3, #0
 800c692:	2b00      	cmp	r3, #0
 800c694:	d017      	beq.n	800c6c6 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	6a1a      	ldr	r2, [r3, #32]
 800c69c:	f241 1311 	movw	r3, #4369	; 0x1111
 800c6a0:	4013      	ands	r3, r2
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d10f      	bne.n	800c6c6 <HAL_TIM_PWM_Stop+0x8e>
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	6a1a      	ldr	r2, [r3, #32]
 800c6ac:	f244 4344 	movw	r3, #17476	; 0x4444
 800c6b0:	4013      	ands	r3, r2
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d107      	bne.n	800c6c6 <HAL_TIM_PWM_Stop+0x8e>
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c6c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	6a1a      	ldr	r2, [r3, #32]
 800c6cc:	f241 1311 	movw	r3, #4369	; 0x1111
 800c6d0:	4013      	ands	r3, r2
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d10f      	bne.n	800c6f6 <HAL_TIM_PWM_Stop+0xbe>
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	6a1a      	ldr	r2, [r3, #32]
 800c6dc:	f244 4344 	movw	r3, #17476	; 0x4444
 800c6e0:	4013      	ands	r3, r2
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d107      	bne.n	800c6f6 <HAL_TIM_PWM_Stop+0xbe>
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	681a      	ldr	r2, [r3, #0]
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	f022 0201 	bic.w	r2, r2, #1
 800c6f4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d104      	bne.n	800c706 <HAL_TIM_PWM_Stop+0xce>
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2201      	movs	r2, #1
 800c700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c704:	e023      	b.n	800c74e <HAL_TIM_PWM_Stop+0x116>
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	2b04      	cmp	r3, #4
 800c70a:	d104      	bne.n	800c716 <HAL_TIM_PWM_Stop+0xde>
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2201      	movs	r2, #1
 800c710:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c714:	e01b      	b.n	800c74e <HAL_TIM_PWM_Stop+0x116>
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	2b08      	cmp	r3, #8
 800c71a:	d104      	bne.n	800c726 <HAL_TIM_PWM_Stop+0xee>
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2201      	movs	r2, #1
 800c720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c724:	e013      	b.n	800c74e <HAL_TIM_PWM_Stop+0x116>
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	2b0c      	cmp	r3, #12
 800c72a:	d104      	bne.n	800c736 <HAL_TIM_PWM_Stop+0xfe>
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2201      	movs	r2, #1
 800c730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c734:	e00b      	b.n	800c74e <HAL_TIM_PWM_Stop+0x116>
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	2b10      	cmp	r3, #16
 800c73a:	d104      	bne.n	800c746 <HAL_TIM_PWM_Stop+0x10e>
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2201      	movs	r2, #1
 800c740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c744:	e003      	b.n	800c74e <HAL_TIM_PWM_Stop+0x116>
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2201      	movs	r2, #1
 800c74a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800c74e:	2300      	movs	r3, #0
}
 800c750:	4618      	mov	r0, r3
 800c752:	3708      	adds	r7, #8
 800c754:	46bd      	mov	sp, r7
 800c756:	bd80      	pop	{r7, pc}
 800c758:	40012c00 	.word	0x40012c00
 800c75c:	40013400 	.word	0x40013400
 800c760:	40014000 	.word	0x40014000
 800c764:	40014400 	.word	0x40014400
 800c768:	40014800 	.word	0x40014800
 800c76c:	40015000 	.word	0x40015000

0800c770 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b086      	sub	sp, #24
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
 800c778:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d101      	bne.n	800c784 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c780:	2301      	movs	r3, #1
 800c782:	e097      	b.n	800c8b4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c78a:	b2db      	uxtb	r3, r3
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d106      	bne.n	800c79e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2200      	movs	r2, #0
 800c794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	f7fb fcb1 	bl	8008100 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2202      	movs	r2, #2
 800c7a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	689b      	ldr	r3, [r3, #8]
 800c7ac:	687a      	ldr	r2, [r7, #4]
 800c7ae:	6812      	ldr	r2, [r2, #0]
 800c7b0:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800c7b4:	f023 0307 	bic.w	r3, r3, #7
 800c7b8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681a      	ldr	r2, [r3, #0]
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	3304      	adds	r3, #4
 800c7c2:	4619      	mov	r1, r3
 800c7c4:	4610      	mov	r0, r2
 800c7c6:	f000 fc2b 	bl	800d020 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	689b      	ldr	r3, [r3, #8]
 800c7d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	699b      	ldr	r3, [r3, #24]
 800c7d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	6a1b      	ldr	r3, [r3, #32]
 800c7e0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	697a      	ldr	r2, [r7, #20]
 800c7e8:	4313      	orrs	r3, r2
 800c7ea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c7ec:	693b      	ldr	r3, [r7, #16]
 800c7ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c7f2:	f023 0303 	bic.w	r3, r3, #3
 800c7f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	689a      	ldr	r2, [r3, #8]
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	699b      	ldr	r3, [r3, #24]
 800c800:	021b      	lsls	r3, r3, #8
 800c802:	4313      	orrs	r3, r2
 800c804:	693a      	ldr	r2, [r7, #16]
 800c806:	4313      	orrs	r3, r2
 800c808:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c80a:	693b      	ldr	r3, [r7, #16]
 800c80c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800c810:	f023 030c 	bic.w	r3, r3, #12
 800c814:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c816:	693b      	ldr	r3, [r7, #16]
 800c818:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c81c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c820:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	68da      	ldr	r2, [r3, #12]
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	69db      	ldr	r3, [r3, #28]
 800c82a:	021b      	lsls	r3, r3, #8
 800c82c:	4313      	orrs	r3, r2
 800c82e:	693a      	ldr	r2, [r7, #16]
 800c830:	4313      	orrs	r3, r2
 800c832:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	691b      	ldr	r3, [r3, #16]
 800c838:	011a      	lsls	r2, r3, #4
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	6a1b      	ldr	r3, [r3, #32]
 800c83e:	031b      	lsls	r3, r3, #12
 800c840:	4313      	orrs	r3, r2
 800c842:	693a      	ldr	r2, [r7, #16]
 800c844:	4313      	orrs	r3, r2
 800c846:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800c84e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800c856:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	685a      	ldr	r2, [r3, #4]
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	695b      	ldr	r3, [r3, #20]
 800c860:	011b      	lsls	r3, r3, #4
 800c862:	4313      	orrs	r3, r2
 800c864:	68fa      	ldr	r2, [r7, #12]
 800c866:	4313      	orrs	r3, r2
 800c868:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	697a      	ldr	r2, [r7, #20]
 800c870:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	693a      	ldr	r2, [r7, #16]
 800c878:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	68fa      	ldr	r2, [r7, #12]
 800c880:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2201      	movs	r2, #1
 800c886:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2201      	movs	r2, #1
 800c88e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2201      	movs	r2, #1
 800c896:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2201      	movs	r2, #1
 800c89e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2201      	movs	r2, #1
 800c8a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2201      	movs	r2, #1
 800c8ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c8b2:	2300      	movs	r3, #0
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	3718      	adds	r7, #24
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}

0800c8bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b082      	sub	sp, #8
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	691b      	ldr	r3, [r3, #16]
 800c8ca:	f003 0302 	and.w	r3, r3, #2
 800c8ce:	2b02      	cmp	r3, #2
 800c8d0:	d122      	bne.n	800c918 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	68db      	ldr	r3, [r3, #12]
 800c8d8:	f003 0302 	and.w	r3, r3, #2
 800c8dc:	2b02      	cmp	r3, #2
 800c8de:	d11b      	bne.n	800c918 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	f06f 0202 	mvn.w	r2, #2
 800c8e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2201      	movs	r2, #1
 800c8ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	699b      	ldr	r3, [r3, #24]
 800c8f6:	f003 0303 	and.w	r3, r3, #3
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d003      	beq.n	800c906 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f000 fb70 	bl	800cfe4 <HAL_TIM_IC_CaptureCallback>
 800c904:	e005      	b.n	800c912 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f000 fb62 	bl	800cfd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c90c:	6878      	ldr	r0, [r7, #4]
 800c90e:	f000 fb73 	bl	800cff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2200      	movs	r2, #0
 800c916:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	691b      	ldr	r3, [r3, #16]
 800c91e:	f003 0304 	and.w	r3, r3, #4
 800c922:	2b04      	cmp	r3, #4
 800c924:	d122      	bne.n	800c96c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	68db      	ldr	r3, [r3, #12]
 800c92c:	f003 0304 	and.w	r3, r3, #4
 800c930:	2b04      	cmp	r3, #4
 800c932:	d11b      	bne.n	800c96c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	f06f 0204 	mvn.w	r2, #4
 800c93c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2202      	movs	r2, #2
 800c942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	699b      	ldr	r3, [r3, #24]
 800c94a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d003      	beq.n	800c95a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f000 fb46 	bl	800cfe4 <HAL_TIM_IC_CaptureCallback>
 800c958:	e005      	b.n	800c966 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f000 fb38 	bl	800cfd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f000 fb49 	bl	800cff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	2200      	movs	r2, #0
 800c96a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	691b      	ldr	r3, [r3, #16]
 800c972:	f003 0308 	and.w	r3, r3, #8
 800c976:	2b08      	cmp	r3, #8
 800c978:	d122      	bne.n	800c9c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	68db      	ldr	r3, [r3, #12]
 800c980:	f003 0308 	and.w	r3, r3, #8
 800c984:	2b08      	cmp	r3, #8
 800c986:	d11b      	bne.n	800c9c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	f06f 0208 	mvn.w	r2, #8
 800c990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2204      	movs	r2, #4
 800c996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	69db      	ldr	r3, [r3, #28]
 800c99e:	f003 0303 	and.w	r3, r3, #3
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d003      	beq.n	800c9ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	f000 fb1c 	bl	800cfe4 <HAL_TIM_IC_CaptureCallback>
 800c9ac:	e005      	b.n	800c9ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f000 fb0e 	bl	800cfd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c9b4:	6878      	ldr	r0, [r7, #4]
 800c9b6:	f000 fb1f 	bl	800cff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2200      	movs	r2, #0
 800c9be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	691b      	ldr	r3, [r3, #16]
 800c9c6:	f003 0310 	and.w	r3, r3, #16
 800c9ca:	2b10      	cmp	r3, #16
 800c9cc:	d122      	bne.n	800ca14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	68db      	ldr	r3, [r3, #12]
 800c9d4:	f003 0310 	and.w	r3, r3, #16
 800c9d8:	2b10      	cmp	r3, #16
 800c9da:	d11b      	bne.n	800ca14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	f06f 0210 	mvn.w	r2, #16
 800c9e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2208      	movs	r2, #8
 800c9ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	69db      	ldr	r3, [r3, #28]
 800c9f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d003      	beq.n	800ca02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f000 faf2 	bl	800cfe4 <HAL_TIM_IC_CaptureCallback>
 800ca00:	e005      	b.n	800ca0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	f000 fae4 	bl	800cfd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	f000 faf5 	bl	800cff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	2200      	movs	r2, #0
 800ca12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	691b      	ldr	r3, [r3, #16]
 800ca1a:	f003 0301 	and.w	r3, r3, #1
 800ca1e:	2b01      	cmp	r3, #1
 800ca20:	d10e      	bne.n	800ca40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	68db      	ldr	r3, [r3, #12]
 800ca28:	f003 0301 	and.w	r3, r3, #1
 800ca2c:	2b01      	cmp	r3, #1
 800ca2e:	d107      	bne.n	800ca40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	f06f 0201 	mvn.w	r2, #1
 800ca38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f000 fabe 	bl	800cfbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	691b      	ldr	r3, [r3, #16]
 800ca46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca4a:	2b80      	cmp	r3, #128	; 0x80
 800ca4c:	d10e      	bne.n	800ca6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	68db      	ldr	r3, [r3, #12]
 800ca54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca58:	2b80      	cmp	r3, #128	; 0x80
 800ca5a:	d107      	bne.n	800ca6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ca64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ca66:	6878      	ldr	r0, [r7, #4]
 800ca68:	f001 f8c0 	bl	800dbec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	691b      	ldr	r3, [r3, #16]
 800ca72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca7a:	d10e      	bne.n	800ca9a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	68db      	ldr	r3, [r3, #12]
 800ca82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca86:	2b80      	cmp	r3, #128	; 0x80
 800ca88:	d107      	bne.n	800ca9a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ca92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f001 f8b3 	bl	800dc00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	691b      	ldr	r3, [r3, #16]
 800caa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800caa4:	2b40      	cmp	r3, #64	; 0x40
 800caa6:	d10e      	bne.n	800cac6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	68db      	ldr	r3, [r3, #12]
 800caae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cab2:	2b40      	cmp	r3, #64	; 0x40
 800cab4:	d107      	bne.n	800cac6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cabe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cac0:	6878      	ldr	r0, [r7, #4]
 800cac2:	f000 faa3 	bl	800d00c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	691b      	ldr	r3, [r3, #16]
 800cacc:	f003 0320 	and.w	r3, r3, #32
 800cad0:	2b20      	cmp	r3, #32
 800cad2:	d10e      	bne.n	800caf2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	68db      	ldr	r3, [r3, #12]
 800cada:	f003 0320 	and.w	r3, r3, #32
 800cade:	2b20      	cmp	r3, #32
 800cae0:	d107      	bne.n	800caf2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	f06f 0220 	mvn.w	r2, #32
 800caea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800caec:	6878      	ldr	r0, [r7, #4]
 800caee:	f001 f873 	bl	800dbd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	691b      	ldr	r3, [r3, #16]
 800caf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cafc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cb00:	d10f      	bne.n	800cb22 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	68db      	ldr	r3, [r3, #12]
 800cb08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cb0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cb10:	d107      	bne.n	800cb22 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800cb1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800cb1c:	6878      	ldr	r0, [r7, #4]
 800cb1e:	f001 f879 	bl	800dc14 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	691b      	ldr	r3, [r3, #16]
 800cb28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cb2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cb30:	d10f      	bne.n	800cb52 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	68db      	ldr	r3, [r3, #12]
 800cb38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cb3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cb40:	d107      	bne.n	800cb52 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800cb4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800cb4c:	6878      	ldr	r0, [r7, #4]
 800cb4e:	f001 f86b 	bl	800dc28 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	691b      	ldr	r3, [r3, #16]
 800cb58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cb5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cb60:	d10f      	bne.n	800cb82 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	68db      	ldr	r3, [r3, #12]
 800cb68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cb6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cb70:	d107      	bne.n	800cb82 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800cb7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f001 f85d 	bl	800dc3c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	691b      	ldr	r3, [r3, #16]
 800cb88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cb8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cb90:	d10f      	bne.n	800cbb2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	68db      	ldr	r3, [r3, #12]
 800cb98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cb9c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cba0:	d107      	bne.n	800cbb2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800cbaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800cbac:	6878      	ldr	r0, [r7, #4]
 800cbae:	f001 f84f 	bl	800dc50 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cbb2:	bf00      	nop
 800cbb4:	3708      	adds	r7, #8
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}
	...

0800cbbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b084      	sub	sp, #16
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	60f8      	str	r0, [r7, #12]
 800cbc4:	60b9      	str	r1, [r7, #8]
 800cbc6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cbce:	2b01      	cmp	r3, #1
 800cbd0:	d101      	bne.n	800cbd6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800cbd2:	2302      	movs	r3, #2
 800cbd4:	e0fd      	b.n	800cdd2 <HAL_TIM_PWM_ConfigChannel+0x216>
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	2201      	movs	r2, #1
 800cbda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2b14      	cmp	r3, #20
 800cbe2:	f200 80f0 	bhi.w	800cdc6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800cbe6:	a201      	add	r2, pc, #4	; (adr r2, 800cbec <HAL_TIM_PWM_ConfigChannel+0x30>)
 800cbe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbec:	0800cc41 	.word	0x0800cc41
 800cbf0:	0800cdc7 	.word	0x0800cdc7
 800cbf4:	0800cdc7 	.word	0x0800cdc7
 800cbf8:	0800cdc7 	.word	0x0800cdc7
 800cbfc:	0800cc81 	.word	0x0800cc81
 800cc00:	0800cdc7 	.word	0x0800cdc7
 800cc04:	0800cdc7 	.word	0x0800cdc7
 800cc08:	0800cdc7 	.word	0x0800cdc7
 800cc0c:	0800ccc3 	.word	0x0800ccc3
 800cc10:	0800cdc7 	.word	0x0800cdc7
 800cc14:	0800cdc7 	.word	0x0800cdc7
 800cc18:	0800cdc7 	.word	0x0800cdc7
 800cc1c:	0800cd03 	.word	0x0800cd03
 800cc20:	0800cdc7 	.word	0x0800cdc7
 800cc24:	0800cdc7 	.word	0x0800cdc7
 800cc28:	0800cdc7 	.word	0x0800cdc7
 800cc2c:	0800cd45 	.word	0x0800cd45
 800cc30:	0800cdc7 	.word	0x0800cdc7
 800cc34:	0800cdc7 	.word	0x0800cdc7
 800cc38:	0800cdc7 	.word	0x0800cdc7
 800cc3c:	0800cd85 	.word	0x0800cd85
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	68b9      	ldr	r1, [r7, #8]
 800cc46:	4618      	mov	r0, r3
 800cc48:	f000 fa92 	bl	800d170 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	699a      	ldr	r2, [r3, #24]
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	f042 0208 	orr.w	r2, r2, #8
 800cc5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	699a      	ldr	r2, [r3, #24]
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	f022 0204 	bic.w	r2, r2, #4
 800cc6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	6999      	ldr	r1, [r3, #24]
 800cc72:	68bb      	ldr	r3, [r7, #8]
 800cc74:	691a      	ldr	r2, [r3, #16]
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	430a      	orrs	r2, r1
 800cc7c:	619a      	str	r2, [r3, #24]
      break;
 800cc7e:	e0a3      	b.n	800cdc8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	68b9      	ldr	r1, [r7, #8]
 800cc86:	4618      	mov	r0, r3
 800cc88:	f000 fb0c 	bl	800d2a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	699a      	ldr	r2, [r3, #24]
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cc9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	699a      	ldr	r2, [r3, #24]
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ccaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	6999      	ldr	r1, [r3, #24]
 800ccb2:	68bb      	ldr	r3, [r7, #8]
 800ccb4:	691b      	ldr	r3, [r3, #16]
 800ccb6:	021a      	lsls	r2, r3, #8
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	430a      	orrs	r2, r1
 800ccbe:	619a      	str	r2, [r3, #24]
      break;
 800ccc0:	e082      	b.n	800cdc8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	68b9      	ldr	r1, [r7, #8]
 800ccc8:	4618      	mov	r0, r3
 800ccca:	f000 fb7f 	bl	800d3cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	69da      	ldr	r2, [r3, #28]
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	f042 0208 	orr.w	r2, r2, #8
 800ccdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	69da      	ldr	r2, [r3, #28]
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	f022 0204 	bic.w	r2, r2, #4
 800ccec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	69d9      	ldr	r1, [r3, #28]
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	691a      	ldr	r2, [r3, #16]
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	430a      	orrs	r2, r1
 800ccfe:	61da      	str	r2, [r3, #28]
      break;
 800cd00:	e062      	b.n	800cdc8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	68b9      	ldr	r1, [r7, #8]
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f000 fbf1 	bl	800d4f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	69da      	ldr	r2, [r3, #28]
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cd1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	69da      	ldr	r2, [r3, #28]
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cd2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	69d9      	ldr	r1, [r3, #28]
 800cd34:	68bb      	ldr	r3, [r7, #8]
 800cd36:	691b      	ldr	r3, [r3, #16]
 800cd38:	021a      	lsls	r2, r3, #8
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	430a      	orrs	r2, r1
 800cd40:	61da      	str	r2, [r3, #28]
      break;
 800cd42:	e041      	b.n	800cdc8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	68b9      	ldr	r1, [r7, #8]
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f000 fc64 	bl	800d618 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f042 0208 	orr.w	r2, r2, #8
 800cd5e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	f022 0204 	bic.w	r2, r2, #4
 800cd6e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	691a      	ldr	r2, [r3, #16]
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	430a      	orrs	r2, r1
 800cd80:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800cd82:	e021      	b.n	800cdc8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	68b9      	ldr	r1, [r7, #8]
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f000 fcae 	bl	800d6ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cd9e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cdae:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800cdb6:	68bb      	ldr	r3, [r7, #8]
 800cdb8:	691b      	ldr	r3, [r3, #16]
 800cdba:	021a      	lsls	r2, r3, #8
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	430a      	orrs	r2, r1
 800cdc2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800cdc4:	e000      	b.n	800cdc8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800cdc6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	2200      	movs	r2, #0
 800cdcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cdd0:	2300      	movs	r3, #0
}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	3710      	adds	r7, #16
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}
 800cdda:	bf00      	nop

0800cddc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b084      	sub	sp, #16
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
 800cde4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cdec:	2b01      	cmp	r3, #1
 800cdee:	d101      	bne.n	800cdf4 <HAL_TIM_ConfigClockSource+0x18>
 800cdf0:	2302      	movs	r3, #2
 800cdf2:	e0d2      	b.n	800cf9a <HAL_TIM_ConfigClockSource+0x1be>
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2201      	movs	r2, #1
 800cdf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2202      	movs	r2, #2
 800ce00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	689b      	ldr	r3, [r3, #8]
 800ce0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800ce12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ce16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ce1e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	68fa      	ldr	r2, [r7, #12]
 800ce26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce30:	f000 80a9 	beq.w	800cf86 <HAL_TIM_ConfigClockSource+0x1aa>
 800ce34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce38:	d81a      	bhi.n	800ce70 <HAL_TIM_ConfigClockSource+0x94>
 800ce3a:	2b30      	cmp	r3, #48	; 0x30
 800ce3c:	f000 809a 	beq.w	800cf74 <HAL_TIM_ConfigClockSource+0x198>
 800ce40:	2b30      	cmp	r3, #48	; 0x30
 800ce42:	d809      	bhi.n	800ce58 <HAL_TIM_ConfigClockSource+0x7c>
 800ce44:	2b10      	cmp	r3, #16
 800ce46:	f000 8095 	beq.w	800cf74 <HAL_TIM_ConfigClockSource+0x198>
 800ce4a:	2b20      	cmp	r3, #32
 800ce4c:	f000 8092 	beq.w	800cf74 <HAL_TIM_ConfigClockSource+0x198>
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	f000 808f 	beq.w	800cf74 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800ce56:	e097      	b.n	800cf88 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ce58:	2b50      	cmp	r3, #80	; 0x50
 800ce5a:	d05b      	beq.n	800cf14 <HAL_TIM_ConfigClockSource+0x138>
 800ce5c:	2b50      	cmp	r3, #80	; 0x50
 800ce5e:	d802      	bhi.n	800ce66 <HAL_TIM_ConfigClockSource+0x8a>
 800ce60:	2b40      	cmp	r3, #64	; 0x40
 800ce62:	d077      	beq.n	800cf54 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800ce64:	e090      	b.n	800cf88 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ce66:	2b60      	cmp	r3, #96	; 0x60
 800ce68:	d064      	beq.n	800cf34 <HAL_TIM_ConfigClockSource+0x158>
 800ce6a:	2b70      	cmp	r3, #112	; 0x70
 800ce6c:	d028      	beq.n	800cec0 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800ce6e:	e08b      	b.n	800cf88 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ce70:	4a4c      	ldr	r2, [pc, #304]	; (800cfa4 <HAL_TIM_ConfigClockSource+0x1c8>)
 800ce72:	4293      	cmp	r3, r2
 800ce74:	d07e      	beq.n	800cf74 <HAL_TIM_ConfigClockSource+0x198>
 800ce76:	4a4b      	ldr	r2, [pc, #300]	; (800cfa4 <HAL_TIM_ConfigClockSource+0x1c8>)
 800ce78:	4293      	cmp	r3, r2
 800ce7a:	d810      	bhi.n	800ce9e <HAL_TIM_ConfigClockSource+0xc2>
 800ce7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce80:	d078      	beq.n	800cf74 <HAL_TIM_ConfigClockSource+0x198>
 800ce82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce86:	d803      	bhi.n	800ce90 <HAL_TIM_ConfigClockSource+0xb4>
 800ce88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ce8c:	d02f      	beq.n	800ceee <HAL_TIM_ConfigClockSource+0x112>
      break;
 800ce8e:	e07b      	b.n	800cf88 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ce90:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ce94:	d06e      	beq.n	800cf74 <HAL_TIM_ConfigClockSource+0x198>
 800ce96:	4a44      	ldr	r2, [pc, #272]	; (800cfa8 <HAL_TIM_ConfigClockSource+0x1cc>)
 800ce98:	4293      	cmp	r3, r2
 800ce9a:	d06b      	beq.n	800cf74 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800ce9c:	e074      	b.n	800cf88 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ce9e:	4a43      	ldr	r2, [pc, #268]	; (800cfac <HAL_TIM_ConfigClockSource+0x1d0>)
 800cea0:	4293      	cmp	r3, r2
 800cea2:	d067      	beq.n	800cf74 <HAL_TIM_ConfigClockSource+0x198>
 800cea4:	4a41      	ldr	r2, [pc, #260]	; (800cfac <HAL_TIM_ConfigClockSource+0x1d0>)
 800cea6:	4293      	cmp	r3, r2
 800cea8:	d803      	bhi.n	800ceb2 <HAL_TIM_ConfigClockSource+0xd6>
 800ceaa:	4a41      	ldr	r2, [pc, #260]	; (800cfb0 <HAL_TIM_ConfigClockSource+0x1d4>)
 800ceac:	4293      	cmp	r3, r2
 800ceae:	d061      	beq.n	800cf74 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800ceb0:	e06a      	b.n	800cf88 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ceb2:	4a40      	ldr	r2, [pc, #256]	; (800cfb4 <HAL_TIM_ConfigClockSource+0x1d8>)
 800ceb4:	4293      	cmp	r3, r2
 800ceb6:	d05d      	beq.n	800cf74 <HAL_TIM_ConfigClockSource+0x198>
 800ceb8:	4a3f      	ldr	r2, [pc, #252]	; (800cfb8 <HAL_TIM_ConfigClockSource+0x1dc>)
 800ceba:	4293      	cmp	r3, r2
 800cebc:	d05a      	beq.n	800cf74 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800cebe:	e063      	b.n	800cf88 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	6818      	ldr	r0, [r3, #0]
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	6899      	ldr	r1, [r3, #8]
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	685a      	ldr	r2, [r3, #4]
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	68db      	ldr	r3, [r3, #12]
 800ced0:	f000 fcf4 	bl	800d8bc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	689b      	ldr	r3, [r3, #8]
 800ceda:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800cee2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	68fa      	ldr	r2, [r7, #12]
 800ceea:	609a      	str	r2, [r3, #8]
      break;
 800ceec:	e04c      	b.n	800cf88 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6818      	ldr	r0, [r3, #0]
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	6899      	ldr	r1, [r3, #8]
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	685a      	ldr	r2, [r3, #4]
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	68db      	ldr	r3, [r3, #12]
 800cefe:	f000 fcdd 	bl	800d8bc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	689a      	ldr	r2, [r3, #8]
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cf10:	609a      	str	r2, [r3, #8]
      break;
 800cf12:	e039      	b.n	800cf88 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	6818      	ldr	r0, [r3, #0]
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	6859      	ldr	r1, [r3, #4]
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	68db      	ldr	r3, [r3, #12]
 800cf20:	461a      	mov	r2, r3
 800cf22:	f000 fc4f 	bl	800d7c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	2150      	movs	r1, #80	; 0x50
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f000 fca8 	bl	800d882 <TIM_ITRx_SetConfig>
      break;
 800cf32:	e029      	b.n	800cf88 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	6818      	ldr	r0, [r3, #0]
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	6859      	ldr	r1, [r3, #4]
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	68db      	ldr	r3, [r3, #12]
 800cf40:	461a      	mov	r2, r3
 800cf42:	f000 fc6e 	bl	800d822 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	2160      	movs	r1, #96	; 0x60
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	f000 fc98 	bl	800d882 <TIM_ITRx_SetConfig>
      break;
 800cf52:	e019      	b.n	800cf88 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	6818      	ldr	r0, [r3, #0]
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	6859      	ldr	r1, [r3, #4]
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	68db      	ldr	r3, [r3, #12]
 800cf60:	461a      	mov	r2, r3
 800cf62:	f000 fc2f 	bl	800d7c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	2140      	movs	r1, #64	; 0x40
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	f000 fc88 	bl	800d882 <TIM_ITRx_SetConfig>
      break;
 800cf72:	e009      	b.n	800cf88 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681a      	ldr	r2, [r3, #0]
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	4619      	mov	r1, r3
 800cf7e:	4610      	mov	r0, r2
 800cf80:	f000 fc7f 	bl	800d882 <TIM_ITRx_SetConfig>
      break;
 800cf84:	e000      	b.n	800cf88 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800cf86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2201      	movs	r2, #1
 800cf8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2200      	movs	r2, #0
 800cf94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cf98:	2300      	movs	r3, #0
}
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	3710      	adds	r7, #16
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	bd80      	pop	{r7, pc}
 800cfa2:	bf00      	nop
 800cfa4:	00100030 	.word	0x00100030
 800cfa8:	00100020 	.word	0x00100020
 800cfac:	00100050 	.word	0x00100050
 800cfb0:	00100040 	.word	0x00100040
 800cfb4:	00100060 	.word	0x00100060
 800cfb8:	00100070 	.word	0x00100070

0800cfbc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cfbc:	b480      	push	{r7}
 800cfbe:	b083      	sub	sp, #12
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800cfc4:	bf00      	nop
 800cfc6:	370c      	adds	r7, #12
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfce:	4770      	bx	lr

0800cfd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cfd0:	b480      	push	{r7}
 800cfd2:	b083      	sub	sp, #12
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cfd8:	bf00      	nop
 800cfda:	370c      	adds	r7, #12
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe2:	4770      	bx	lr

0800cfe4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cfe4:	b480      	push	{r7}
 800cfe6:	b083      	sub	sp, #12
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cfec:	bf00      	nop
 800cfee:	370c      	adds	r7, #12
 800cff0:	46bd      	mov	sp, r7
 800cff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff6:	4770      	bx	lr

0800cff8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cff8:	b480      	push	{r7}
 800cffa:	b083      	sub	sp, #12
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d000:	bf00      	nop
 800d002:	370c      	adds	r7, #12
 800d004:	46bd      	mov	sp, r7
 800d006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00a:	4770      	bx	lr

0800d00c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d00c:	b480      	push	{r7}
 800d00e:	b083      	sub	sp, #12
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d014:	bf00      	nop
 800d016:	370c      	adds	r7, #12
 800d018:	46bd      	mov	sp, r7
 800d01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01e:	4770      	bx	lr

0800d020 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d020:	b480      	push	{r7}
 800d022:	b085      	sub	sp, #20
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
 800d028:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	4a46      	ldr	r2, [pc, #280]	; (800d14c <TIM_Base_SetConfig+0x12c>)
 800d034:	4293      	cmp	r3, r2
 800d036:	d017      	beq.n	800d068 <TIM_Base_SetConfig+0x48>
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d03e:	d013      	beq.n	800d068 <TIM_Base_SetConfig+0x48>
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	4a43      	ldr	r2, [pc, #268]	; (800d150 <TIM_Base_SetConfig+0x130>)
 800d044:	4293      	cmp	r3, r2
 800d046:	d00f      	beq.n	800d068 <TIM_Base_SetConfig+0x48>
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	4a42      	ldr	r2, [pc, #264]	; (800d154 <TIM_Base_SetConfig+0x134>)
 800d04c:	4293      	cmp	r3, r2
 800d04e:	d00b      	beq.n	800d068 <TIM_Base_SetConfig+0x48>
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	4a41      	ldr	r2, [pc, #260]	; (800d158 <TIM_Base_SetConfig+0x138>)
 800d054:	4293      	cmp	r3, r2
 800d056:	d007      	beq.n	800d068 <TIM_Base_SetConfig+0x48>
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	4a40      	ldr	r2, [pc, #256]	; (800d15c <TIM_Base_SetConfig+0x13c>)
 800d05c:	4293      	cmp	r3, r2
 800d05e:	d003      	beq.n	800d068 <TIM_Base_SetConfig+0x48>
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	4a3f      	ldr	r2, [pc, #252]	; (800d160 <TIM_Base_SetConfig+0x140>)
 800d064:	4293      	cmp	r3, r2
 800d066:	d108      	bne.n	800d07a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d06e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	685b      	ldr	r3, [r3, #4]
 800d074:	68fa      	ldr	r2, [r7, #12]
 800d076:	4313      	orrs	r3, r2
 800d078:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	4a33      	ldr	r2, [pc, #204]	; (800d14c <TIM_Base_SetConfig+0x12c>)
 800d07e:	4293      	cmp	r3, r2
 800d080:	d023      	beq.n	800d0ca <TIM_Base_SetConfig+0xaa>
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d088:	d01f      	beq.n	800d0ca <TIM_Base_SetConfig+0xaa>
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	4a30      	ldr	r2, [pc, #192]	; (800d150 <TIM_Base_SetConfig+0x130>)
 800d08e:	4293      	cmp	r3, r2
 800d090:	d01b      	beq.n	800d0ca <TIM_Base_SetConfig+0xaa>
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	4a2f      	ldr	r2, [pc, #188]	; (800d154 <TIM_Base_SetConfig+0x134>)
 800d096:	4293      	cmp	r3, r2
 800d098:	d017      	beq.n	800d0ca <TIM_Base_SetConfig+0xaa>
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	4a2e      	ldr	r2, [pc, #184]	; (800d158 <TIM_Base_SetConfig+0x138>)
 800d09e:	4293      	cmp	r3, r2
 800d0a0:	d013      	beq.n	800d0ca <TIM_Base_SetConfig+0xaa>
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	4a2d      	ldr	r2, [pc, #180]	; (800d15c <TIM_Base_SetConfig+0x13c>)
 800d0a6:	4293      	cmp	r3, r2
 800d0a8:	d00f      	beq.n	800d0ca <TIM_Base_SetConfig+0xaa>
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	4a2d      	ldr	r2, [pc, #180]	; (800d164 <TIM_Base_SetConfig+0x144>)
 800d0ae:	4293      	cmp	r3, r2
 800d0b0:	d00b      	beq.n	800d0ca <TIM_Base_SetConfig+0xaa>
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	4a2c      	ldr	r2, [pc, #176]	; (800d168 <TIM_Base_SetConfig+0x148>)
 800d0b6:	4293      	cmp	r3, r2
 800d0b8:	d007      	beq.n	800d0ca <TIM_Base_SetConfig+0xaa>
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	4a2b      	ldr	r2, [pc, #172]	; (800d16c <TIM_Base_SetConfig+0x14c>)
 800d0be:	4293      	cmp	r3, r2
 800d0c0:	d003      	beq.n	800d0ca <TIM_Base_SetConfig+0xaa>
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	4a26      	ldr	r2, [pc, #152]	; (800d160 <TIM_Base_SetConfig+0x140>)
 800d0c6:	4293      	cmp	r3, r2
 800d0c8:	d108      	bne.n	800d0dc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d0d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	68db      	ldr	r3, [r3, #12]
 800d0d6:	68fa      	ldr	r2, [r7, #12]
 800d0d8:	4313      	orrs	r3, r2
 800d0da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	695b      	ldr	r3, [r3, #20]
 800d0e6:	4313      	orrs	r3, r2
 800d0e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	68fa      	ldr	r2, [r7, #12]
 800d0ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d0f0:	683b      	ldr	r3, [r7, #0]
 800d0f2:	689a      	ldr	r2, [r3, #8]
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d0f8:	683b      	ldr	r3, [r7, #0]
 800d0fa:	681a      	ldr	r2, [r3, #0]
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	4a12      	ldr	r2, [pc, #72]	; (800d14c <TIM_Base_SetConfig+0x12c>)
 800d104:	4293      	cmp	r3, r2
 800d106:	d013      	beq.n	800d130 <TIM_Base_SetConfig+0x110>
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	4a14      	ldr	r2, [pc, #80]	; (800d15c <TIM_Base_SetConfig+0x13c>)
 800d10c:	4293      	cmp	r3, r2
 800d10e:	d00f      	beq.n	800d130 <TIM_Base_SetConfig+0x110>
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	4a14      	ldr	r2, [pc, #80]	; (800d164 <TIM_Base_SetConfig+0x144>)
 800d114:	4293      	cmp	r3, r2
 800d116:	d00b      	beq.n	800d130 <TIM_Base_SetConfig+0x110>
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	4a13      	ldr	r2, [pc, #76]	; (800d168 <TIM_Base_SetConfig+0x148>)
 800d11c:	4293      	cmp	r3, r2
 800d11e:	d007      	beq.n	800d130 <TIM_Base_SetConfig+0x110>
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	4a12      	ldr	r2, [pc, #72]	; (800d16c <TIM_Base_SetConfig+0x14c>)
 800d124:	4293      	cmp	r3, r2
 800d126:	d003      	beq.n	800d130 <TIM_Base_SetConfig+0x110>
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	4a0d      	ldr	r2, [pc, #52]	; (800d160 <TIM_Base_SetConfig+0x140>)
 800d12c:	4293      	cmp	r3, r2
 800d12e:	d103      	bne.n	800d138 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	691a      	ldr	r2, [r3, #16]
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2201      	movs	r2, #1
 800d13c:	615a      	str	r2, [r3, #20]
}
 800d13e:	bf00      	nop
 800d140:	3714      	adds	r7, #20
 800d142:	46bd      	mov	sp, r7
 800d144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d148:	4770      	bx	lr
 800d14a:	bf00      	nop
 800d14c:	40012c00 	.word	0x40012c00
 800d150:	40000400 	.word	0x40000400
 800d154:	40000800 	.word	0x40000800
 800d158:	40000c00 	.word	0x40000c00
 800d15c:	40013400 	.word	0x40013400
 800d160:	40015000 	.word	0x40015000
 800d164:	40014000 	.word	0x40014000
 800d168:	40014400 	.word	0x40014400
 800d16c:	40014800 	.word	0x40014800

0800d170 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d170:	b480      	push	{r7}
 800d172:	b087      	sub	sp, #28
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
 800d178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	6a1b      	ldr	r3, [r3, #32]
 800d17e:	f023 0201 	bic.w	r2, r3, #1
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	6a1b      	ldr	r3, [r3, #32]
 800d18a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	685b      	ldr	r3, [r3, #4]
 800d190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	699b      	ldr	r3, [r3, #24]
 800d196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d19e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d1a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	f023 0303 	bic.w	r3, r3, #3
 800d1aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	68fa      	ldr	r2, [r7, #12]
 800d1b2:	4313      	orrs	r3, r2
 800d1b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d1b6:	697b      	ldr	r3, [r7, #20]
 800d1b8:	f023 0302 	bic.w	r3, r3, #2
 800d1bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	689b      	ldr	r3, [r3, #8]
 800d1c2:	697a      	ldr	r2, [r7, #20]
 800d1c4:	4313      	orrs	r3, r2
 800d1c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	4a30      	ldr	r2, [pc, #192]	; (800d28c <TIM_OC1_SetConfig+0x11c>)
 800d1cc:	4293      	cmp	r3, r2
 800d1ce:	d013      	beq.n	800d1f8 <TIM_OC1_SetConfig+0x88>
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	4a2f      	ldr	r2, [pc, #188]	; (800d290 <TIM_OC1_SetConfig+0x120>)
 800d1d4:	4293      	cmp	r3, r2
 800d1d6:	d00f      	beq.n	800d1f8 <TIM_OC1_SetConfig+0x88>
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	4a2e      	ldr	r2, [pc, #184]	; (800d294 <TIM_OC1_SetConfig+0x124>)
 800d1dc:	4293      	cmp	r3, r2
 800d1de:	d00b      	beq.n	800d1f8 <TIM_OC1_SetConfig+0x88>
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	4a2d      	ldr	r2, [pc, #180]	; (800d298 <TIM_OC1_SetConfig+0x128>)
 800d1e4:	4293      	cmp	r3, r2
 800d1e6:	d007      	beq.n	800d1f8 <TIM_OC1_SetConfig+0x88>
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	4a2c      	ldr	r2, [pc, #176]	; (800d29c <TIM_OC1_SetConfig+0x12c>)
 800d1ec:	4293      	cmp	r3, r2
 800d1ee:	d003      	beq.n	800d1f8 <TIM_OC1_SetConfig+0x88>
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	4a2b      	ldr	r2, [pc, #172]	; (800d2a0 <TIM_OC1_SetConfig+0x130>)
 800d1f4:	4293      	cmp	r3, r2
 800d1f6:	d10c      	bne.n	800d212 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d1f8:	697b      	ldr	r3, [r7, #20]
 800d1fa:	f023 0308 	bic.w	r3, r3, #8
 800d1fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	68db      	ldr	r3, [r3, #12]
 800d204:	697a      	ldr	r2, [r7, #20]
 800d206:	4313      	orrs	r3, r2
 800d208:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d20a:	697b      	ldr	r3, [r7, #20]
 800d20c:	f023 0304 	bic.w	r3, r3, #4
 800d210:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	4a1d      	ldr	r2, [pc, #116]	; (800d28c <TIM_OC1_SetConfig+0x11c>)
 800d216:	4293      	cmp	r3, r2
 800d218:	d013      	beq.n	800d242 <TIM_OC1_SetConfig+0xd2>
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	4a1c      	ldr	r2, [pc, #112]	; (800d290 <TIM_OC1_SetConfig+0x120>)
 800d21e:	4293      	cmp	r3, r2
 800d220:	d00f      	beq.n	800d242 <TIM_OC1_SetConfig+0xd2>
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	4a1b      	ldr	r2, [pc, #108]	; (800d294 <TIM_OC1_SetConfig+0x124>)
 800d226:	4293      	cmp	r3, r2
 800d228:	d00b      	beq.n	800d242 <TIM_OC1_SetConfig+0xd2>
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	4a1a      	ldr	r2, [pc, #104]	; (800d298 <TIM_OC1_SetConfig+0x128>)
 800d22e:	4293      	cmp	r3, r2
 800d230:	d007      	beq.n	800d242 <TIM_OC1_SetConfig+0xd2>
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	4a19      	ldr	r2, [pc, #100]	; (800d29c <TIM_OC1_SetConfig+0x12c>)
 800d236:	4293      	cmp	r3, r2
 800d238:	d003      	beq.n	800d242 <TIM_OC1_SetConfig+0xd2>
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	4a18      	ldr	r2, [pc, #96]	; (800d2a0 <TIM_OC1_SetConfig+0x130>)
 800d23e:	4293      	cmp	r3, r2
 800d240:	d111      	bne.n	800d266 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d242:	693b      	ldr	r3, [r7, #16]
 800d244:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d248:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d24a:	693b      	ldr	r3, [r7, #16]
 800d24c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d250:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	695b      	ldr	r3, [r3, #20]
 800d256:	693a      	ldr	r2, [r7, #16]
 800d258:	4313      	orrs	r3, r2
 800d25a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	699b      	ldr	r3, [r3, #24]
 800d260:	693a      	ldr	r2, [r7, #16]
 800d262:	4313      	orrs	r3, r2
 800d264:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	693a      	ldr	r2, [r7, #16]
 800d26a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	68fa      	ldr	r2, [r7, #12]
 800d270:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	685a      	ldr	r2, [r3, #4]
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	697a      	ldr	r2, [r7, #20]
 800d27e:	621a      	str	r2, [r3, #32]
}
 800d280:	bf00      	nop
 800d282:	371c      	adds	r7, #28
 800d284:	46bd      	mov	sp, r7
 800d286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28a:	4770      	bx	lr
 800d28c:	40012c00 	.word	0x40012c00
 800d290:	40013400 	.word	0x40013400
 800d294:	40014000 	.word	0x40014000
 800d298:	40014400 	.word	0x40014400
 800d29c:	40014800 	.word	0x40014800
 800d2a0:	40015000 	.word	0x40015000

0800d2a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d2a4:	b480      	push	{r7}
 800d2a6:	b087      	sub	sp, #28
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
 800d2ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6a1b      	ldr	r3, [r3, #32]
 800d2b2:	f023 0210 	bic.w	r2, r3, #16
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	6a1b      	ldr	r3, [r3, #32]
 800d2be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	685b      	ldr	r3, [r3, #4]
 800d2c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	699b      	ldr	r3, [r3, #24]
 800d2ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d2d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d2d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d2de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	021b      	lsls	r3, r3, #8
 800d2e6:	68fa      	ldr	r2, [r7, #12]
 800d2e8:	4313      	orrs	r3, r2
 800d2ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d2ec:	697b      	ldr	r3, [r7, #20]
 800d2ee:	f023 0320 	bic.w	r3, r3, #32
 800d2f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	689b      	ldr	r3, [r3, #8]
 800d2f8:	011b      	lsls	r3, r3, #4
 800d2fa:	697a      	ldr	r2, [r7, #20]
 800d2fc:	4313      	orrs	r3, r2
 800d2fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	4a2c      	ldr	r2, [pc, #176]	; (800d3b4 <TIM_OC2_SetConfig+0x110>)
 800d304:	4293      	cmp	r3, r2
 800d306:	d007      	beq.n	800d318 <TIM_OC2_SetConfig+0x74>
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	4a2b      	ldr	r2, [pc, #172]	; (800d3b8 <TIM_OC2_SetConfig+0x114>)
 800d30c:	4293      	cmp	r3, r2
 800d30e:	d003      	beq.n	800d318 <TIM_OC2_SetConfig+0x74>
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	4a2a      	ldr	r2, [pc, #168]	; (800d3bc <TIM_OC2_SetConfig+0x118>)
 800d314:	4293      	cmp	r3, r2
 800d316:	d10d      	bne.n	800d334 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d318:	697b      	ldr	r3, [r7, #20]
 800d31a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d31e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	68db      	ldr	r3, [r3, #12]
 800d324:	011b      	lsls	r3, r3, #4
 800d326:	697a      	ldr	r2, [r7, #20]
 800d328:	4313      	orrs	r3, r2
 800d32a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d32c:	697b      	ldr	r3, [r7, #20]
 800d32e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d332:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	4a1f      	ldr	r2, [pc, #124]	; (800d3b4 <TIM_OC2_SetConfig+0x110>)
 800d338:	4293      	cmp	r3, r2
 800d33a:	d013      	beq.n	800d364 <TIM_OC2_SetConfig+0xc0>
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	4a1e      	ldr	r2, [pc, #120]	; (800d3b8 <TIM_OC2_SetConfig+0x114>)
 800d340:	4293      	cmp	r3, r2
 800d342:	d00f      	beq.n	800d364 <TIM_OC2_SetConfig+0xc0>
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	4a1e      	ldr	r2, [pc, #120]	; (800d3c0 <TIM_OC2_SetConfig+0x11c>)
 800d348:	4293      	cmp	r3, r2
 800d34a:	d00b      	beq.n	800d364 <TIM_OC2_SetConfig+0xc0>
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	4a1d      	ldr	r2, [pc, #116]	; (800d3c4 <TIM_OC2_SetConfig+0x120>)
 800d350:	4293      	cmp	r3, r2
 800d352:	d007      	beq.n	800d364 <TIM_OC2_SetConfig+0xc0>
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	4a1c      	ldr	r2, [pc, #112]	; (800d3c8 <TIM_OC2_SetConfig+0x124>)
 800d358:	4293      	cmp	r3, r2
 800d35a:	d003      	beq.n	800d364 <TIM_OC2_SetConfig+0xc0>
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	4a17      	ldr	r2, [pc, #92]	; (800d3bc <TIM_OC2_SetConfig+0x118>)
 800d360:	4293      	cmp	r3, r2
 800d362:	d113      	bne.n	800d38c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d364:	693b      	ldr	r3, [r7, #16]
 800d366:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d36a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d36c:	693b      	ldr	r3, [r7, #16]
 800d36e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d372:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d374:	683b      	ldr	r3, [r7, #0]
 800d376:	695b      	ldr	r3, [r3, #20]
 800d378:	009b      	lsls	r3, r3, #2
 800d37a:	693a      	ldr	r2, [r7, #16]
 800d37c:	4313      	orrs	r3, r2
 800d37e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	699b      	ldr	r3, [r3, #24]
 800d384:	009b      	lsls	r3, r3, #2
 800d386:	693a      	ldr	r2, [r7, #16]
 800d388:	4313      	orrs	r3, r2
 800d38a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	693a      	ldr	r2, [r7, #16]
 800d390:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	68fa      	ldr	r2, [r7, #12]
 800d396:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d398:	683b      	ldr	r3, [r7, #0]
 800d39a:	685a      	ldr	r2, [r3, #4]
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	697a      	ldr	r2, [r7, #20]
 800d3a4:	621a      	str	r2, [r3, #32]
}
 800d3a6:	bf00      	nop
 800d3a8:	371c      	adds	r7, #28
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b0:	4770      	bx	lr
 800d3b2:	bf00      	nop
 800d3b4:	40012c00 	.word	0x40012c00
 800d3b8:	40013400 	.word	0x40013400
 800d3bc:	40015000 	.word	0x40015000
 800d3c0:	40014000 	.word	0x40014000
 800d3c4:	40014400 	.word	0x40014400
 800d3c8:	40014800 	.word	0x40014800

0800d3cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d3cc:	b480      	push	{r7}
 800d3ce:	b087      	sub	sp, #28
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
 800d3d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	6a1b      	ldr	r3, [r3, #32]
 800d3da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6a1b      	ldr	r3, [r3, #32]
 800d3e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	685b      	ldr	r3, [r3, #4]
 800d3ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	69db      	ldr	r3, [r3, #28]
 800d3f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d3fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d3fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	f023 0303 	bic.w	r3, r3, #3
 800d406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	68fa      	ldr	r2, [r7, #12]
 800d40e:	4313      	orrs	r3, r2
 800d410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d412:	697b      	ldr	r3, [r7, #20]
 800d414:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d418:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	689b      	ldr	r3, [r3, #8]
 800d41e:	021b      	lsls	r3, r3, #8
 800d420:	697a      	ldr	r2, [r7, #20]
 800d422:	4313      	orrs	r3, r2
 800d424:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	4a2b      	ldr	r2, [pc, #172]	; (800d4d8 <TIM_OC3_SetConfig+0x10c>)
 800d42a:	4293      	cmp	r3, r2
 800d42c:	d007      	beq.n	800d43e <TIM_OC3_SetConfig+0x72>
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	4a2a      	ldr	r2, [pc, #168]	; (800d4dc <TIM_OC3_SetConfig+0x110>)
 800d432:	4293      	cmp	r3, r2
 800d434:	d003      	beq.n	800d43e <TIM_OC3_SetConfig+0x72>
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	4a29      	ldr	r2, [pc, #164]	; (800d4e0 <TIM_OC3_SetConfig+0x114>)
 800d43a:	4293      	cmp	r3, r2
 800d43c:	d10d      	bne.n	800d45a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d43e:	697b      	ldr	r3, [r7, #20]
 800d440:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d444:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	68db      	ldr	r3, [r3, #12]
 800d44a:	021b      	lsls	r3, r3, #8
 800d44c:	697a      	ldr	r2, [r7, #20]
 800d44e:	4313      	orrs	r3, r2
 800d450:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d458:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	4a1e      	ldr	r2, [pc, #120]	; (800d4d8 <TIM_OC3_SetConfig+0x10c>)
 800d45e:	4293      	cmp	r3, r2
 800d460:	d013      	beq.n	800d48a <TIM_OC3_SetConfig+0xbe>
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	4a1d      	ldr	r2, [pc, #116]	; (800d4dc <TIM_OC3_SetConfig+0x110>)
 800d466:	4293      	cmp	r3, r2
 800d468:	d00f      	beq.n	800d48a <TIM_OC3_SetConfig+0xbe>
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	4a1d      	ldr	r2, [pc, #116]	; (800d4e4 <TIM_OC3_SetConfig+0x118>)
 800d46e:	4293      	cmp	r3, r2
 800d470:	d00b      	beq.n	800d48a <TIM_OC3_SetConfig+0xbe>
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	4a1c      	ldr	r2, [pc, #112]	; (800d4e8 <TIM_OC3_SetConfig+0x11c>)
 800d476:	4293      	cmp	r3, r2
 800d478:	d007      	beq.n	800d48a <TIM_OC3_SetConfig+0xbe>
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	4a1b      	ldr	r2, [pc, #108]	; (800d4ec <TIM_OC3_SetConfig+0x120>)
 800d47e:	4293      	cmp	r3, r2
 800d480:	d003      	beq.n	800d48a <TIM_OC3_SetConfig+0xbe>
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	4a16      	ldr	r2, [pc, #88]	; (800d4e0 <TIM_OC3_SetConfig+0x114>)
 800d486:	4293      	cmp	r3, r2
 800d488:	d113      	bne.n	800d4b2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d48a:	693b      	ldr	r3, [r7, #16]
 800d48c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d490:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d492:	693b      	ldr	r3, [r7, #16]
 800d494:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d498:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	695b      	ldr	r3, [r3, #20]
 800d49e:	011b      	lsls	r3, r3, #4
 800d4a0:	693a      	ldr	r2, [r7, #16]
 800d4a2:	4313      	orrs	r3, r2
 800d4a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	699b      	ldr	r3, [r3, #24]
 800d4aa:	011b      	lsls	r3, r3, #4
 800d4ac:	693a      	ldr	r2, [r7, #16]
 800d4ae:	4313      	orrs	r3, r2
 800d4b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	693a      	ldr	r2, [r7, #16]
 800d4b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	68fa      	ldr	r2, [r7, #12]
 800d4bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	685a      	ldr	r2, [r3, #4]
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	697a      	ldr	r2, [r7, #20]
 800d4ca:	621a      	str	r2, [r3, #32]
}
 800d4cc:	bf00      	nop
 800d4ce:	371c      	adds	r7, #28
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d6:	4770      	bx	lr
 800d4d8:	40012c00 	.word	0x40012c00
 800d4dc:	40013400 	.word	0x40013400
 800d4e0:	40015000 	.word	0x40015000
 800d4e4:	40014000 	.word	0x40014000
 800d4e8:	40014400 	.word	0x40014400
 800d4ec:	40014800 	.word	0x40014800

0800d4f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d4f0:	b480      	push	{r7}
 800d4f2:	b087      	sub	sp, #28
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
 800d4f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	6a1b      	ldr	r3, [r3, #32]
 800d4fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6a1b      	ldr	r3, [r3, #32]
 800d50a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	685b      	ldr	r3, [r3, #4]
 800d510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	69db      	ldr	r3, [r3, #28]
 800d516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d51e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d52a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	021b      	lsls	r3, r3, #8
 800d532:	68fa      	ldr	r2, [r7, #12]
 800d534:	4313      	orrs	r3, r2
 800d536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d538:	697b      	ldr	r3, [r7, #20]
 800d53a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d53e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	689b      	ldr	r3, [r3, #8]
 800d544:	031b      	lsls	r3, r3, #12
 800d546:	697a      	ldr	r2, [r7, #20]
 800d548:	4313      	orrs	r3, r2
 800d54a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	4a2c      	ldr	r2, [pc, #176]	; (800d600 <TIM_OC4_SetConfig+0x110>)
 800d550:	4293      	cmp	r3, r2
 800d552:	d007      	beq.n	800d564 <TIM_OC4_SetConfig+0x74>
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	4a2b      	ldr	r2, [pc, #172]	; (800d604 <TIM_OC4_SetConfig+0x114>)
 800d558:	4293      	cmp	r3, r2
 800d55a:	d003      	beq.n	800d564 <TIM_OC4_SetConfig+0x74>
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	4a2a      	ldr	r2, [pc, #168]	; (800d608 <TIM_OC4_SetConfig+0x118>)
 800d560:	4293      	cmp	r3, r2
 800d562:	d10d      	bne.n	800d580 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800d564:	697b      	ldr	r3, [r7, #20]
 800d566:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d56a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800d56c:	683b      	ldr	r3, [r7, #0]
 800d56e:	68db      	ldr	r3, [r3, #12]
 800d570:	031b      	lsls	r3, r3, #12
 800d572:	697a      	ldr	r2, [r7, #20]
 800d574:	4313      	orrs	r3, r2
 800d576:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800d578:	697b      	ldr	r3, [r7, #20]
 800d57a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d57e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	4a1f      	ldr	r2, [pc, #124]	; (800d600 <TIM_OC4_SetConfig+0x110>)
 800d584:	4293      	cmp	r3, r2
 800d586:	d013      	beq.n	800d5b0 <TIM_OC4_SetConfig+0xc0>
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	4a1e      	ldr	r2, [pc, #120]	; (800d604 <TIM_OC4_SetConfig+0x114>)
 800d58c:	4293      	cmp	r3, r2
 800d58e:	d00f      	beq.n	800d5b0 <TIM_OC4_SetConfig+0xc0>
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	4a1e      	ldr	r2, [pc, #120]	; (800d60c <TIM_OC4_SetConfig+0x11c>)
 800d594:	4293      	cmp	r3, r2
 800d596:	d00b      	beq.n	800d5b0 <TIM_OC4_SetConfig+0xc0>
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	4a1d      	ldr	r2, [pc, #116]	; (800d610 <TIM_OC4_SetConfig+0x120>)
 800d59c:	4293      	cmp	r3, r2
 800d59e:	d007      	beq.n	800d5b0 <TIM_OC4_SetConfig+0xc0>
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	4a1c      	ldr	r2, [pc, #112]	; (800d614 <TIM_OC4_SetConfig+0x124>)
 800d5a4:	4293      	cmp	r3, r2
 800d5a6:	d003      	beq.n	800d5b0 <TIM_OC4_SetConfig+0xc0>
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	4a17      	ldr	r2, [pc, #92]	; (800d608 <TIM_OC4_SetConfig+0x118>)
 800d5ac:	4293      	cmp	r3, r2
 800d5ae:	d113      	bne.n	800d5d8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d5b0:	693b      	ldr	r3, [r7, #16]
 800d5b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d5b6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800d5b8:	693b      	ldr	r3, [r7, #16]
 800d5ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d5be:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	695b      	ldr	r3, [r3, #20]
 800d5c4:	019b      	lsls	r3, r3, #6
 800d5c6:	693a      	ldr	r2, [r7, #16]
 800d5c8:	4313      	orrs	r3, r2
 800d5ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	699b      	ldr	r3, [r3, #24]
 800d5d0:	019b      	lsls	r3, r3, #6
 800d5d2:	693a      	ldr	r2, [r7, #16]
 800d5d4:	4313      	orrs	r3, r2
 800d5d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	693a      	ldr	r2, [r7, #16]
 800d5dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	68fa      	ldr	r2, [r7, #12]
 800d5e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	685a      	ldr	r2, [r3, #4]
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	697a      	ldr	r2, [r7, #20]
 800d5f0:	621a      	str	r2, [r3, #32]
}
 800d5f2:	bf00      	nop
 800d5f4:	371c      	adds	r7, #28
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fc:	4770      	bx	lr
 800d5fe:	bf00      	nop
 800d600:	40012c00 	.word	0x40012c00
 800d604:	40013400 	.word	0x40013400
 800d608:	40015000 	.word	0x40015000
 800d60c:	40014000 	.word	0x40014000
 800d610:	40014400 	.word	0x40014400
 800d614:	40014800 	.word	0x40014800

0800d618 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d618:	b480      	push	{r7}
 800d61a:	b087      	sub	sp, #28
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
 800d620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	6a1b      	ldr	r3, [r3, #32]
 800d626:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	6a1b      	ldr	r3, [r3, #32]
 800d632:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	685b      	ldr	r3, [r3, #4]
 800d638:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d63e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d64a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d64c:	683b      	ldr	r3, [r7, #0]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	68fa      	ldr	r2, [r7, #12]
 800d652:	4313      	orrs	r3, r2
 800d654:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d656:	693b      	ldr	r3, [r7, #16]
 800d658:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d65c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	689b      	ldr	r3, [r3, #8]
 800d662:	041b      	lsls	r3, r3, #16
 800d664:	693a      	ldr	r2, [r7, #16]
 800d666:	4313      	orrs	r3, r2
 800d668:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	4a19      	ldr	r2, [pc, #100]	; (800d6d4 <TIM_OC5_SetConfig+0xbc>)
 800d66e:	4293      	cmp	r3, r2
 800d670:	d013      	beq.n	800d69a <TIM_OC5_SetConfig+0x82>
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	4a18      	ldr	r2, [pc, #96]	; (800d6d8 <TIM_OC5_SetConfig+0xc0>)
 800d676:	4293      	cmp	r3, r2
 800d678:	d00f      	beq.n	800d69a <TIM_OC5_SetConfig+0x82>
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	4a17      	ldr	r2, [pc, #92]	; (800d6dc <TIM_OC5_SetConfig+0xc4>)
 800d67e:	4293      	cmp	r3, r2
 800d680:	d00b      	beq.n	800d69a <TIM_OC5_SetConfig+0x82>
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	4a16      	ldr	r2, [pc, #88]	; (800d6e0 <TIM_OC5_SetConfig+0xc8>)
 800d686:	4293      	cmp	r3, r2
 800d688:	d007      	beq.n	800d69a <TIM_OC5_SetConfig+0x82>
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	4a15      	ldr	r2, [pc, #84]	; (800d6e4 <TIM_OC5_SetConfig+0xcc>)
 800d68e:	4293      	cmp	r3, r2
 800d690:	d003      	beq.n	800d69a <TIM_OC5_SetConfig+0x82>
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	4a14      	ldr	r2, [pc, #80]	; (800d6e8 <TIM_OC5_SetConfig+0xd0>)
 800d696:	4293      	cmp	r3, r2
 800d698:	d109      	bne.n	800d6ae <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d6a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	695b      	ldr	r3, [r3, #20]
 800d6a6:	021b      	lsls	r3, r3, #8
 800d6a8:	697a      	ldr	r2, [r7, #20]
 800d6aa:	4313      	orrs	r3, r2
 800d6ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	697a      	ldr	r2, [r7, #20]
 800d6b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	68fa      	ldr	r2, [r7, #12]
 800d6b8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	685a      	ldr	r2, [r3, #4]
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	693a      	ldr	r2, [r7, #16]
 800d6c6:	621a      	str	r2, [r3, #32]
}
 800d6c8:	bf00      	nop
 800d6ca:	371c      	adds	r7, #28
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d2:	4770      	bx	lr
 800d6d4:	40012c00 	.word	0x40012c00
 800d6d8:	40013400 	.word	0x40013400
 800d6dc:	40014000 	.word	0x40014000
 800d6e0:	40014400 	.word	0x40014400
 800d6e4:	40014800 	.word	0x40014800
 800d6e8:	40015000 	.word	0x40015000

0800d6ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d6ec:	b480      	push	{r7}
 800d6ee:	b087      	sub	sp, #28
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
 800d6f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	6a1b      	ldr	r3, [r3, #32]
 800d6fa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	6a1b      	ldr	r3, [r3, #32]
 800d706:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	685b      	ldr	r3, [r3, #4]
 800d70c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d71a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d71e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	021b      	lsls	r3, r3, #8
 800d726:	68fa      	ldr	r2, [r7, #12]
 800d728:	4313      	orrs	r3, r2
 800d72a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d72c:	693b      	ldr	r3, [r7, #16]
 800d72e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d732:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	689b      	ldr	r3, [r3, #8]
 800d738:	051b      	lsls	r3, r3, #20
 800d73a:	693a      	ldr	r2, [r7, #16]
 800d73c:	4313      	orrs	r3, r2
 800d73e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	4a1a      	ldr	r2, [pc, #104]	; (800d7ac <TIM_OC6_SetConfig+0xc0>)
 800d744:	4293      	cmp	r3, r2
 800d746:	d013      	beq.n	800d770 <TIM_OC6_SetConfig+0x84>
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	4a19      	ldr	r2, [pc, #100]	; (800d7b0 <TIM_OC6_SetConfig+0xc4>)
 800d74c:	4293      	cmp	r3, r2
 800d74e:	d00f      	beq.n	800d770 <TIM_OC6_SetConfig+0x84>
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	4a18      	ldr	r2, [pc, #96]	; (800d7b4 <TIM_OC6_SetConfig+0xc8>)
 800d754:	4293      	cmp	r3, r2
 800d756:	d00b      	beq.n	800d770 <TIM_OC6_SetConfig+0x84>
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	4a17      	ldr	r2, [pc, #92]	; (800d7b8 <TIM_OC6_SetConfig+0xcc>)
 800d75c:	4293      	cmp	r3, r2
 800d75e:	d007      	beq.n	800d770 <TIM_OC6_SetConfig+0x84>
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	4a16      	ldr	r2, [pc, #88]	; (800d7bc <TIM_OC6_SetConfig+0xd0>)
 800d764:	4293      	cmp	r3, r2
 800d766:	d003      	beq.n	800d770 <TIM_OC6_SetConfig+0x84>
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	4a15      	ldr	r2, [pc, #84]	; (800d7c0 <TIM_OC6_SetConfig+0xd4>)
 800d76c:	4293      	cmp	r3, r2
 800d76e:	d109      	bne.n	800d784 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d770:	697b      	ldr	r3, [r7, #20]
 800d772:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d776:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	695b      	ldr	r3, [r3, #20]
 800d77c:	029b      	lsls	r3, r3, #10
 800d77e:	697a      	ldr	r2, [r7, #20]
 800d780:	4313      	orrs	r3, r2
 800d782:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	697a      	ldr	r2, [r7, #20]
 800d788:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	68fa      	ldr	r2, [r7, #12]
 800d78e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	685a      	ldr	r2, [r3, #4]
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	693a      	ldr	r2, [r7, #16]
 800d79c:	621a      	str	r2, [r3, #32]
}
 800d79e:	bf00      	nop
 800d7a0:	371c      	adds	r7, #28
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a8:	4770      	bx	lr
 800d7aa:	bf00      	nop
 800d7ac:	40012c00 	.word	0x40012c00
 800d7b0:	40013400 	.word	0x40013400
 800d7b4:	40014000 	.word	0x40014000
 800d7b8:	40014400 	.word	0x40014400
 800d7bc:	40014800 	.word	0x40014800
 800d7c0:	40015000 	.word	0x40015000

0800d7c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d7c4:	b480      	push	{r7}
 800d7c6:	b087      	sub	sp, #28
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	60f8      	str	r0, [r7, #12]
 800d7cc:	60b9      	str	r1, [r7, #8]
 800d7ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	6a1b      	ldr	r3, [r3, #32]
 800d7d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	6a1b      	ldr	r3, [r3, #32]
 800d7da:	f023 0201 	bic.w	r2, r3, #1
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	699b      	ldr	r3, [r3, #24]
 800d7e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d7e8:	693b      	ldr	r3, [r7, #16]
 800d7ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d7ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	011b      	lsls	r3, r3, #4
 800d7f4:	693a      	ldr	r2, [r7, #16]
 800d7f6:	4313      	orrs	r3, r2
 800d7f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d7fa:	697b      	ldr	r3, [r7, #20]
 800d7fc:	f023 030a 	bic.w	r3, r3, #10
 800d800:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d802:	697a      	ldr	r2, [r7, #20]
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	4313      	orrs	r3, r2
 800d808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	693a      	ldr	r2, [r7, #16]
 800d80e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	697a      	ldr	r2, [r7, #20]
 800d814:	621a      	str	r2, [r3, #32]
}
 800d816:	bf00      	nop
 800d818:	371c      	adds	r7, #28
 800d81a:	46bd      	mov	sp, r7
 800d81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d820:	4770      	bx	lr

0800d822 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d822:	b480      	push	{r7}
 800d824:	b087      	sub	sp, #28
 800d826:	af00      	add	r7, sp, #0
 800d828:	60f8      	str	r0, [r7, #12]
 800d82a:	60b9      	str	r1, [r7, #8]
 800d82c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	6a1b      	ldr	r3, [r3, #32]
 800d832:	f023 0210 	bic.w	r2, r3, #16
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	699b      	ldr	r3, [r3, #24]
 800d83e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	6a1b      	ldr	r3, [r3, #32]
 800d844:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d846:	697b      	ldr	r3, [r7, #20]
 800d848:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d84c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	031b      	lsls	r3, r3, #12
 800d852:	697a      	ldr	r2, [r7, #20]
 800d854:	4313      	orrs	r3, r2
 800d856:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d858:	693b      	ldr	r3, [r7, #16]
 800d85a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d85e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d860:	68bb      	ldr	r3, [r7, #8]
 800d862:	011b      	lsls	r3, r3, #4
 800d864:	693a      	ldr	r2, [r7, #16]
 800d866:	4313      	orrs	r3, r2
 800d868:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	697a      	ldr	r2, [r7, #20]
 800d86e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	693a      	ldr	r2, [r7, #16]
 800d874:	621a      	str	r2, [r3, #32]
}
 800d876:	bf00      	nop
 800d878:	371c      	adds	r7, #28
 800d87a:	46bd      	mov	sp, r7
 800d87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d880:	4770      	bx	lr

0800d882 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d882:	b480      	push	{r7}
 800d884:	b085      	sub	sp, #20
 800d886:	af00      	add	r7, sp, #0
 800d888:	6078      	str	r0, [r7, #4]
 800d88a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	689b      	ldr	r3, [r3, #8]
 800d890:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800d898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d89c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d89e:	683a      	ldr	r2, [r7, #0]
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	4313      	orrs	r3, r2
 800d8a4:	f043 0307 	orr.w	r3, r3, #7
 800d8a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	68fa      	ldr	r2, [r7, #12]
 800d8ae:	609a      	str	r2, [r3, #8]
}
 800d8b0:	bf00      	nop
 800d8b2:	3714      	adds	r7, #20
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ba:	4770      	bx	lr

0800d8bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d8bc:	b480      	push	{r7}
 800d8be:	b087      	sub	sp, #28
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	60f8      	str	r0, [r7, #12]
 800d8c4:	60b9      	str	r1, [r7, #8]
 800d8c6:	607a      	str	r2, [r7, #4]
 800d8c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	689b      	ldr	r3, [r3, #8]
 800d8ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d8d0:	697b      	ldr	r3, [r7, #20]
 800d8d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d8d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	021a      	lsls	r2, r3, #8
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	431a      	orrs	r2, r3
 800d8e0:	68bb      	ldr	r3, [r7, #8]
 800d8e2:	4313      	orrs	r3, r2
 800d8e4:	697a      	ldr	r2, [r7, #20]
 800d8e6:	4313      	orrs	r3, r2
 800d8e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	697a      	ldr	r2, [r7, #20]
 800d8ee:	609a      	str	r2, [r3, #8]
}
 800d8f0:	bf00      	nop
 800d8f2:	371c      	adds	r7, #28
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fa:	4770      	bx	lr

0800d8fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d8fc:	b480      	push	{r7}
 800d8fe:	b087      	sub	sp, #28
 800d900:	af00      	add	r7, sp, #0
 800d902:	60f8      	str	r0, [r7, #12]
 800d904:	60b9      	str	r1, [r7, #8]
 800d906:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d908:	68bb      	ldr	r3, [r7, #8]
 800d90a:	f003 031f 	and.w	r3, r3, #31
 800d90e:	2201      	movs	r2, #1
 800d910:	fa02 f303 	lsl.w	r3, r2, r3
 800d914:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	6a1a      	ldr	r2, [r3, #32]
 800d91a:	697b      	ldr	r3, [r7, #20]
 800d91c:	43db      	mvns	r3, r3
 800d91e:	401a      	ands	r2, r3
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	6a1a      	ldr	r2, [r3, #32]
 800d928:	68bb      	ldr	r3, [r7, #8]
 800d92a:	f003 031f 	and.w	r3, r3, #31
 800d92e:	6879      	ldr	r1, [r7, #4]
 800d930:	fa01 f303 	lsl.w	r3, r1, r3
 800d934:	431a      	orrs	r2, r3
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	621a      	str	r2, [r3, #32]
}
 800d93a:	bf00      	nop
 800d93c:	371c      	adds	r7, #28
 800d93e:	46bd      	mov	sp, r7
 800d940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d944:	4770      	bx	lr
	...

0800d948 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d948:	b480      	push	{r7}
 800d94a:	b085      	sub	sp, #20
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
 800d950:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d958:	2b01      	cmp	r3, #1
 800d95a:	d101      	bne.n	800d960 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d95c:	2302      	movs	r3, #2
 800d95e:	e074      	b.n	800da4a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2201      	movs	r2, #1
 800d964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	2202      	movs	r2, #2
 800d96c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	685b      	ldr	r3, [r3, #4]
 800d976:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	689b      	ldr	r3, [r3, #8]
 800d97e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	4a34      	ldr	r2, [pc, #208]	; (800da58 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d986:	4293      	cmp	r3, r2
 800d988:	d009      	beq.n	800d99e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	4a33      	ldr	r2, [pc, #204]	; (800da5c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d990:	4293      	cmp	r3, r2
 800d992:	d004      	beq.n	800d99e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	4a31      	ldr	r2, [pc, #196]	; (800da60 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d99a:	4293      	cmp	r3, r2
 800d99c:	d108      	bne.n	800d9b0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d9a4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	685b      	ldr	r3, [r3, #4]
 800d9aa:	68fa      	ldr	r2, [r7, #12]
 800d9ac:	4313      	orrs	r3, r2
 800d9ae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800d9b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d9ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d9bc:	683b      	ldr	r3, [r7, #0]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	68fa      	ldr	r2, [r7, #12]
 800d9c2:	4313      	orrs	r3, r2
 800d9c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	68fa      	ldr	r2, [r7, #12]
 800d9cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	4a21      	ldr	r2, [pc, #132]	; (800da58 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d9d4:	4293      	cmp	r3, r2
 800d9d6:	d022      	beq.n	800da1e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d9e0:	d01d      	beq.n	800da1e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	4a1f      	ldr	r2, [pc, #124]	; (800da64 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800d9e8:	4293      	cmp	r3, r2
 800d9ea:	d018      	beq.n	800da1e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	4a1d      	ldr	r2, [pc, #116]	; (800da68 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800d9f2:	4293      	cmp	r3, r2
 800d9f4:	d013      	beq.n	800da1e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	4a1c      	ldr	r2, [pc, #112]	; (800da6c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800d9fc:	4293      	cmp	r3, r2
 800d9fe:	d00e      	beq.n	800da1e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	4a15      	ldr	r2, [pc, #84]	; (800da5c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800da06:	4293      	cmp	r3, r2
 800da08:	d009      	beq.n	800da1e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	4a18      	ldr	r2, [pc, #96]	; (800da70 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800da10:	4293      	cmp	r3, r2
 800da12:	d004      	beq.n	800da1e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	4a11      	ldr	r2, [pc, #68]	; (800da60 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800da1a:	4293      	cmp	r3, r2
 800da1c:	d10c      	bne.n	800da38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800da1e:	68bb      	ldr	r3, [r7, #8]
 800da20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800da24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800da26:	683b      	ldr	r3, [r7, #0]
 800da28:	689b      	ldr	r3, [r3, #8]
 800da2a:	68ba      	ldr	r2, [r7, #8]
 800da2c:	4313      	orrs	r3, r2
 800da2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	68ba      	ldr	r2, [r7, #8]
 800da36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2201      	movs	r2, #1
 800da3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	2200      	movs	r2, #0
 800da44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800da48:	2300      	movs	r3, #0
}
 800da4a:	4618      	mov	r0, r3
 800da4c:	3714      	adds	r7, #20
 800da4e:	46bd      	mov	sp, r7
 800da50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da54:	4770      	bx	lr
 800da56:	bf00      	nop
 800da58:	40012c00 	.word	0x40012c00
 800da5c:	40013400 	.word	0x40013400
 800da60:	40015000 	.word	0x40015000
 800da64:	40000400 	.word	0x40000400
 800da68:	40000800 	.word	0x40000800
 800da6c:	40000c00 	.word	0x40000c00
 800da70:	40014000 	.word	0x40014000

0800da74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800da74:	b480      	push	{r7}
 800da76:	b085      	sub	sp, #20
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
 800da7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800da7e:	2300      	movs	r3, #0
 800da80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800da88:	2b01      	cmp	r3, #1
 800da8a:	d101      	bne.n	800da90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800da8c:	2302      	movs	r3, #2
 800da8e:	e096      	b.n	800dbbe <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2201      	movs	r2, #1
 800da94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	68db      	ldr	r3, [r3, #12]
 800daa2:	4313      	orrs	r3, r2
 800daa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	689b      	ldr	r3, [r3, #8]
 800dab0:	4313      	orrs	r3, r2
 800dab2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	685b      	ldr	r3, [r3, #4]
 800dabe:	4313      	orrs	r3, r2
 800dac0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	4313      	orrs	r3, r2
 800dace:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	691b      	ldr	r3, [r3, #16]
 800dada:	4313      	orrs	r3, r2
 800dadc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	695b      	ldr	r3, [r3, #20]
 800dae8:	4313      	orrs	r3, r2
 800daea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800daf6:	4313      	orrs	r3, r2
 800daf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800db00:	683b      	ldr	r3, [r7, #0]
 800db02:	699b      	ldr	r3, [r3, #24]
 800db04:	041b      	lsls	r3, r3, #16
 800db06:	4313      	orrs	r3, r2
 800db08:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	4a2f      	ldr	r2, [pc, #188]	; (800dbcc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800db10:	4293      	cmp	r3, r2
 800db12:	d009      	beq.n	800db28 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	4a2d      	ldr	r2, [pc, #180]	; (800dbd0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800db1a:	4293      	cmp	r3, r2
 800db1c:	d004      	beq.n	800db28 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	4a2c      	ldr	r2, [pc, #176]	; (800dbd4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800db24:	4293      	cmp	r3, r2
 800db26:	d106      	bne.n	800db36 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	69db      	ldr	r3, [r3, #28]
 800db32:	4313      	orrs	r3, r2
 800db34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	4a24      	ldr	r2, [pc, #144]	; (800dbcc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800db3c:	4293      	cmp	r3, r2
 800db3e:	d009      	beq.n	800db54 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	4a22      	ldr	r2, [pc, #136]	; (800dbd0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800db46:	4293      	cmp	r3, r2
 800db48:	d004      	beq.n	800db54 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	4a21      	ldr	r2, [pc, #132]	; (800dbd4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800db50:	4293      	cmp	r3, r2
 800db52:	d12b      	bne.n	800dbac <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800db5a:	683b      	ldr	r3, [r7, #0]
 800db5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db5e:	051b      	lsls	r3, r3, #20
 800db60:	4313      	orrs	r3, r2
 800db62:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	6a1b      	ldr	r3, [r3, #32]
 800db6e:	4313      	orrs	r3, r2
 800db70:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db7c:	4313      	orrs	r3, r2
 800db7e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	4a11      	ldr	r2, [pc, #68]	; (800dbcc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800db86:	4293      	cmp	r3, r2
 800db88:	d009      	beq.n	800db9e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	4a10      	ldr	r2, [pc, #64]	; (800dbd0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800db90:	4293      	cmp	r3, r2
 800db92:	d004      	beq.n	800db9e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	4a0e      	ldr	r2, [pc, #56]	; (800dbd4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800db9a:	4293      	cmp	r3, r2
 800db9c:	d106      	bne.n	800dbac <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dba8:	4313      	orrs	r3, r2
 800dbaa:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	68fa      	ldr	r2, [r7, #12]
 800dbb2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dbbc:	2300      	movs	r3, #0
}
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	3714      	adds	r7, #20
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc8:	4770      	bx	lr
 800dbca:	bf00      	nop
 800dbcc:	40012c00 	.word	0x40012c00
 800dbd0:	40013400 	.word	0x40013400
 800dbd4:	40015000 	.word	0x40015000

0800dbd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dbd8:	b480      	push	{r7}
 800dbda:	b083      	sub	sp, #12
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dbe0:	bf00      	nop
 800dbe2:	370c      	adds	r7, #12
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbea:	4770      	bx	lr

0800dbec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dbec:	b480      	push	{r7}
 800dbee:	b083      	sub	sp, #12
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dbf4:	bf00      	nop
 800dbf6:	370c      	adds	r7, #12
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfe:	4770      	bx	lr

0800dc00 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dc00:	b480      	push	{r7}
 800dc02:	b083      	sub	sp, #12
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dc08:	bf00      	nop
 800dc0a:	370c      	adds	r7, #12
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc12:	4770      	bx	lr

0800dc14 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800dc14:	b480      	push	{r7}
 800dc16:	b083      	sub	sp, #12
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800dc1c:	bf00      	nop
 800dc1e:	370c      	adds	r7, #12
 800dc20:	46bd      	mov	sp, r7
 800dc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc26:	4770      	bx	lr

0800dc28 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800dc28:	b480      	push	{r7}
 800dc2a:	b083      	sub	sp, #12
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800dc30:	bf00      	nop
 800dc32:	370c      	adds	r7, #12
 800dc34:	46bd      	mov	sp, r7
 800dc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3a:	4770      	bx	lr

0800dc3c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800dc3c:	b480      	push	{r7}
 800dc3e:	b083      	sub	sp, #12
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800dc44:	bf00      	nop
 800dc46:	370c      	adds	r7, #12
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4e:	4770      	bx	lr

0800dc50 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800dc50:	b480      	push	{r7}
 800dc52:	b083      	sub	sp, #12
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800dc58:	bf00      	nop
 800dc5a:	370c      	adds	r7, #12
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc62:	4770      	bx	lr

0800dc64 <LL_EXTI_EnableIT_0_31>:
{
 800dc64:	b480      	push	{r7}
 800dc66:	b083      	sub	sp, #12
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800dc6c:	4b05      	ldr	r3, [pc, #20]	; (800dc84 <LL_EXTI_EnableIT_0_31+0x20>)
 800dc6e:	681a      	ldr	r2, [r3, #0]
 800dc70:	4904      	ldr	r1, [pc, #16]	; (800dc84 <LL_EXTI_EnableIT_0_31+0x20>)
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	4313      	orrs	r3, r2
 800dc76:	600b      	str	r3, [r1, #0]
}
 800dc78:	bf00      	nop
 800dc7a:	370c      	adds	r7, #12
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc82:	4770      	bx	lr
 800dc84:	40010400 	.word	0x40010400

0800dc88 <LL_EXTI_EnableIT_32_63>:
{
 800dc88:	b480      	push	{r7}
 800dc8a:	b083      	sub	sp, #12
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800dc90:	4b05      	ldr	r3, [pc, #20]	; (800dca8 <LL_EXTI_EnableIT_32_63+0x20>)
 800dc92:	6a1a      	ldr	r2, [r3, #32]
 800dc94:	4904      	ldr	r1, [pc, #16]	; (800dca8 <LL_EXTI_EnableIT_32_63+0x20>)
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	4313      	orrs	r3, r2
 800dc9a:	620b      	str	r3, [r1, #32]
}
 800dc9c:	bf00      	nop
 800dc9e:	370c      	adds	r7, #12
 800dca0:	46bd      	mov	sp, r7
 800dca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca6:	4770      	bx	lr
 800dca8:	40010400 	.word	0x40010400

0800dcac <LL_EXTI_DisableIT_0_31>:
{
 800dcac:	b480      	push	{r7}
 800dcae:	b083      	sub	sp, #12
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800dcb4:	4b06      	ldr	r3, [pc, #24]	; (800dcd0 <LL_EXTI_DisableIT_0_31+0x24>)
 800dcb6:	681a      	ldr	r2, [r3, #0]
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	43db      	mvns	r3, r3
 800dcbc:	4904      	ldr	r1, [pc, #16]	; (800dcd0 <LL_EXTI_DisableIT_0_31+0x24>)
 800dcbe:	4013      	ands	r3, r2
 800dcc0:	600b      	str	r3, [r1, #0]
}
 800dcc2:	bf00      	nop
 800dcc4:	370c      	adds	r7, #12
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dccc:	4770      	bx	lr
 800dcce:	bf00      	nop
 800dcd0:	40010400 	.word	0x40010400

0800dcd4 <LL_EXTI_DisableIT_32_63>:
{
 800dcd4:	b480      	push	{r7}
 800dcd6:	b083      	sub	sp, #12
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800dcdc:	4b06      	ldr	r3, [pc, #24]	; (800dcf8 <LL_EXTI_DisableIT_32_63+0x24>)
 800dcde:	6a1a      	ldr	r2, [r3, #32]
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	43db      	mvns	r3, r3
 800dce4:	4904      	ldr	r1, [pc, #16]	; (800dcf8 <LL_EXTI_DisableIT_32_63+0x24>)
 800dce6:	4013      	ands	r3, r2
 800dce8:	620b      	str	r3, [r1, #32]
}
 800dcea:	bf00      	nop
 800dcec:	370c      	adds	r7, #12
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf4:	4770      	bx	lr
 800dcf6:	bf00      	nop
 800dcf8:	40010400 	.word	0x40010400

0800dcfc <LL_EXTI_EnableEvent_0_31>:
{
 800dcfc:	b480      	push	{r7}
 800dcfe:	b083      	sub	sp, #12
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800dd04:	4b05      	ldr	r3, [pc, #20]	; (800dd1c <LL_EXTI_EnableEvent_0_31+0x20>)
 800dd06:	685a      	ldr	r2, [r3, #4]
 800dd08:	4904      	ldr	r1, [pc, #16]	; (800dd1c <LL_EXTI_EnableEvent_0_31+0x20>)
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	4313      	orrs	r3, r2
 800dd0e:	604b      	str	r3, [r1, #4]
}
 800dd10:	bf00      	nop
 800dd12:	370c      	adds	r7, #12
 800dd14:	46bd      	mov	sp, r7
 800dd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1a:	4770      	bx	lr
 800dd1c:	40010400 	.word	0x40010400

0800dd20 <LL_EXTI_EnableEvent_32_63>:
{
 800dd20:	b480      	push	{r7}
 800dd22:	b083      	sub	sp, #12
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800dd28:	4b05      	ldr	r3, [pc, #20]	; (800dd40 <LL_EXTI_EnableEvent_32_63+0x20>)
 800dd2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd2c:	4904      	ldr	r1, [pc, #16]	; (800dd40 <LL_EXTI_EnableEvent_32_63+0x20>)
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	4313      	orrs	r3, r2
 800dd32:	624b      	str	r3, [r1, #36]	; 0x24
}
 800dd34:	bf00      	nop
 800dd36:	370c      	adds	r7, #12
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3e:	4770      	bx	lr
 800dd40:	40010400 	.word	0x40010400

0800dd44 <LL_EXTI_DisableEvent_0_31>:
{
 800dd44:	b480      	push	{r7}
 800dd46:	b083      	sub	sp, #12
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800dd4c:	4b06      	ldr	r3, [pc, #24]	; (800dd68 <LL_EXTI_DisableEvent_0_31+0x24>)
 800dd4e:	685a      	ldr	r2, [r3, #4]
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	43db      	mvns	r3, r3
 800dd54:	4904      	ldr	r1, [pc, #16]	; (800dd68 <LL_EXTI_DisableEvent_0_31+0x24>)
 800dd56:	4013      	ands	r3, r2
 800dd58:	604b      	str	r3, [r1, #4]
}
 800dd5a:	bf00      	nop
 800dd5c:	370c      	adds	r7, #12
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd64:	4770      	bx	lr
 800dd66:	bf00      	nop
 800dd68:	40010400 	.word	0x40010400

0800dd6c <LL_EXTI_DisableEvent_32_63>:
{
 800dd6c:	b480      	push	{r7}
 800dd6e:	b083      	sub	sp, #12
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800dd74:	4b06      	ldr	r3, [pc, #24]	; (800dd90 <LL_EXTI_DisableEvent_32_63+0x24>)
 800dd76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	43db      	mvns	r3, r3
 800dd7c:	4904      	ldr	r1, [pc, #16]	; (800dd90 <LL_EXTI_DisableEvent_32_63+0x24>)
 800dd7e:	4013      	ands	r3, r2
 800dd80:	624b      	str	r3, [r1, #36]	; 0x24
}
 800dd82:	bf00      	nop
 800dd84:	370c      	adds	r7, #12
 800dd86:	46bd      	mov	sp, r7
 800dd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8c:	4770      	bx	lr
 800dd8e:	bf00      	nop
 800dd90:	40010400 	.word	0x40010400

0800dd94 <LL_EXTI_EnableRisingTrig_0_31>:
{
 800dd94:	b480      	push	{r7}
 800dd96:	b083      	sub	sp, #12
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800dd9c:	4b05      	ldr	r3, [pc, #20]	; (800ddb4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800dd9e:	689a      	ldr	r2, [r3, #8]
 800dda0:	4904      	ldr	r1, [pc, #16]	; (800ddb4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	4313      	orrs	r3, r2
 800dda6:	608b      	str	r3, [r1, #8]
}
 800dda8:	bf00      	nop
 800ddaa:	370c      	adds	r7, #12
 800ddac:	46bd      	mov	sp, r7
 800ddae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb2:	4770      	bx	lr
 800ddb4:	40010400 	.word	0x40010400

0800ddb8 <LL_EXTI_EnableRisingTrig_32_63>:
{
 800ddb8:	b480      	push	{r7}
 800ddba:	b083      	sub	sp, #12
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800ddc0:	4b05      	ldr	r3, [pc, #20]	; (800ddd8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800ddc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ddc4:	4904      	ldr	r1, [pc, #16]	; (800ddd8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	4313      	orrs	r3, r2
 800ddca:	628b      	str	r3, [r1, #40]	; 0x28
}
 800ddcc:	bf00      	nop
 800ddce:	370c      	adds	r7, #12
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd6:	4770      	bx	lr
 800ddd8:	40010400 	.word	0x40010400

0800dddc <LL_EXTI_DisableRisingTrig_0_31>:
{
 800dddc:	b480      	push	{r7}
 800ddde:	b083      	sub	sp, #12
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800dde4:	4b06      	ldr	r3, [pc, #24]	; (800de00 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800dde6:	689a      	ldr	r2, [r3, #8]
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	43db      	mvns	r3, r3
 800ddec:	4904      	ldr	r1, [pc, #16]	; (800de00 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800ddee:	4013      	ands	r3, r2
 800ddf0:	608b      	str	r3, [r1, #8]
}
 800ddf2:	bf00      	nop
 800ddf4:	370c      	adds	r7, #12
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfc:	4770      	bx	lr
 800ddfe:	bf00      	nop
 800de00:	40010400 	.word	0x40010400

0800de04 <LL_EXTI_DisableRisingTrig_32_63>:
{
 800de04:	b480      	push	{r7}
 800de06:	b083      	sub	sp, #12
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800de0c:	4b06      	ldr	r3, [pc, #24]	; (800de28 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800de0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	43db      	mvns	r3, r3
 800de14:	4904      	ldr	r1, [pc, #16]	; (800de28 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800de16:	4013      	ands	r3, r2
 800de18:	628b      	str	r3, [r1, #40]	; 0x28
}
 800de1a:	bf00      	nop
 800de1c:	370c      	adds	r7, #12
 800de1e:	46bd      	mov	sp, r7
 800de20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de24:	4770      	bx	lr
 800de26:	bf00      	nop
 800de28:	40010400 	.word	0x40010400

0800de2c <LL_EXTI_EnableFallingTrig_0_31>:
{
 800de2c:	b480      	push	{r7}
 800de2e:	b083      	sub	sp, #12
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800de34:	4b05      	ldr	r3, [pc, #20]	; (800de4c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800de36:	68da      	ldr	r2, [r3, #12]
 800de38:	4904      	ldr	r1, [pc, #16]	; (800de4c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	4313      	orrs	r3, r2
 800de3e:	60cb      	str	r3, [r1, #12]
}
 800de40:	bf00      	nop
 800de42:	370c      	adds	r7, #12
 800de44:	46bd      	mov	sp, r7
 800de46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4a:	4770      	bx	lr
 800de4c:	40010400 	.word	0x40010400

0800de50 <LL_EXTI_EnableFallingTrig_32_63>:
{
 800de50:	b480      	push	{r7}
 800de52:	b083      	sub	sp, #12
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800de58:	4b05      	ldr	r3, [pc, #20]	; (800de70 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800de5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de5c:	4904      	ldr	r1, [pc, #16]	; (800de70 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	4313      	orrs	r3, r2
 800de62:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800de64:	bf00      	nop
 800de66:	370c      	adds	r7, #12
 800de68:	46bd      	mov	sp, r7
 800de6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6e:	4770      	bx	lr
 800de70:	40010400 	.word	0x40010400

0800de74 <LL_EXTI_DisableFallingTrig_0_31>:
{
 800de74:	b480      	push	{r7}
 800de76:	b083      	sub	sp, #12
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800de7c:	4b06      	ldr	r3, [pc, #24]	; (800de98 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800de7e:	68da      	ldr	r2, [r3, #12]
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	43db      	mvns	r3, r3
 800de84:	4904      	ldr	r1, [pc, #16]	; (800de98 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800de86:	4013      	ands	r3, r2
 800de88:	60cb      	str	r3, [r1, #12]
}
 800de8a:	bf00      	nop
 800de8c:	370c      	adds	r7, #12
 800de8e:	46bd      	mov	sp, r7
 800de90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de94:	4770      	bx	lr
 800de96:	bf00      	nop
 800de98:	40010400 	.word	0x40010400

0800de9c <LL_EXTI_DisableFallingTrig_32_63>:
{
 800de9c:	b480      	push	{r7}
 800de9e:	b083      	sub	sp, #12
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800dea4:	4b06      	ldr	r3, [pc, #24]	; (800dec0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800dea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	43db      	mvns	r3, r3
 800deac:	4904      	ldr	r1, [pc, #16]	; (800dec0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800deae:	4013      	ands	r3, r2
 800deb0:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800deb2:	bf00      	nop
 800deb4:	370c      	adds	r7, #12
 800deb6:	46bd      	mov	sp, r7
 800deb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800debc:	4770      	bx	lr
 800debe:	bf00      	nop
 800dec0:	40010400 	.word	0x40010400

0800dec4 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b084      	sub	sp, #16
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 800decc:	2300      	movs	r3, #0
 800dece:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	7a1b      	ldrb	r3, [r3, #8]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	f000 80c8 	beq.w	800e06a <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d05d      	beq.n	800df9e <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	7a5b      	ldrb	r3, [r3, #9]
 800dee6:	2b01      	cmp	r3, #1
 800dee8:	d00e      	beq.n	800df08 <LL_EXTI_Init+0x44>
 800deea:	2b02      	cmp	r3, #2
 800deec:	d017      	beq.n	800df1e <LL_EXTI_Init+0x5a>
 800deee:	2b00      	cmp	r3, #0
 800def0:	d120      	bne.n	800df34 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	4618      	mov	r0, r3
 800def8:	f7ff ff24 	bl	800dd44 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	4618      	mov	r0, r3
 800df02:	f7ff feaf 	bl	800dc64 <LL_EXTI_EnableIT_0_31>
          break;
 800df06:	e018      	b.n	800df3a <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	4618      	mov	r0, r3
 800df0e:	f7ff fecd 	bl	800dcac <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	4618      	mov	r0, r3
 800df18:	f7ff fef0 	bl	800dcfc <LL_EXTI_EnableEvent_0_31>
          break;
 800df1c:	e00d      	b.n	800df3a <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	4618      	mov	r0, r3
 800df24:	f7ff fe9e 	bl	800dc64 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	4618      	mov	r0, r3
 800df2e:	f7ff fee5 	bl	800dcfc <LL_EXTI_EnableEvent_0_31>
          break;
 800df32:	e002      	b.n	800df3a <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 800df34:	2301      	movs	r3, #1
 800df36:	60fb      	str	r3, [r7, #12]
          break;
 800df38:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	7a9b      	ldrb	r3, [r3, #10]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d02d      	beq.n	800df9e <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	7a9b      	ldrb	r3, [r3, #10]
 800df46:	2b02      	cmp	r3, #2
 800df48:	d00e      	beq.n	800df68 <LL_EXTI_Init+0xa4>
 800df4a:	2b03      	cmp	r3, #3
 800df4c:	d017      	beq.n	800df7e <LL_EXTI_Init+0xba>
 800df4e:	2b01      	cmp	r3, #1
 800df50:	d120      	bne.n	800df94 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	4618      	mov	r0, r3
 800df58:	f7ff ff8c 	bl	800de74 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	4618      	mov	r0, r3
 800df62:	f7ff ff17 	bl	800dd94 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800df66:	e01b      	b.n	800dfa0 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	4618      	mov	r0, r3
 800df6e:	f7ff ff35 	bl	800dddc <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	4618      	mov	r0, r3
 800df78:	f7ff ff58 	bl	800de2c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800df7c:	e010      	b.n	800dfa0 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	4618      	mov	r0, r3
 800df84:	f7ff ff06 	bl	800dd94 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	4618      	mov	r0, r3
 800df8e:	f7ff ff4d 	bl	800de2c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800df92:	e005      	b.n	800dfa0 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	f043 0302 	orr.w	r3, r3, #2
 800df9a:	60fb      	str	r3, [r7, #12]
            break;
 800df9c:	e000      	b.n	800dfa0 <LL_EXTI_Init+0xdc>
        }
      }
 800df9e:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	685b      	ldr	r3, [r3, #4]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d075      	beq.n	800e094 <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	7a5b      	ldrb	r3, [r3, #9]
 800dfac:	2b01      	cmp	r3, #1
 800dfae:	d00e      	beq.n	800dfce <LL_EXTI_Init+0x10a>
 800dfb0:	2b02      	cmp	r3, #2
 800dfb2:	d017      	beq.n	800dfe4 <LL_EXTI_Init+0x120>
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d120      	bne.n	800dffa <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	685b      	ldr	r3, [r3, #4]
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	f7ff fed5 	bl	800dd6c <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	685b      	ldr	r3, [r3, #4]
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	f7ff fe5e 	bl	800dc88 <LL_EXTI_EnableIT_32_63>
          break;
 800dfcc:	e01a      	b.n	800e004 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	685b      	ldr	r3, [r3, #4]
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	f7ff fe7e 	bl	800dcd4 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	685b      	ldr	r3, [r3, #4]
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f7ff fe9f 	bl	800dd20 <LL_EXTI_EnableEvent_32_63>
          break;
 800dfe2:	e00f      	b.n	800e004 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	685b      	ldr	r3, [r3, #4]
 800dfe8:	4618      	mov	r0, r3
 800dfea:	f7ff fe4d 	bl	800dc88 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	685b      	ldr	r3, [r3, #4]
 800dff2:	4618      	mov	r0, r3
 800dff4:	f7ff fe94 	bl	800dd20 <LL_EXTI_EnableEvent_32_63>
          break;
 800dff8:	e004      	b.n	800e004 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	f043 0304 	orr.w	r3, r3, #4
 800e000:	60fb      	str	r3, [r7, #12]
          break;
 800e002:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	7a9b      	ldrb	r3, [r3, #10]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d043      	beq.n	800e094 <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	7a9b      	ldrb	r3, [r3, #10]
 800e010:	2b02      	cmp	r3, #2
 800e012:	d00e      	beq.n	800e032 <LL_EXTI_Init+0x16e>
 800e014:	2b03      	cmp	r3, #3
 800e016:	d017      	beq.n	800e048 <LL_EXTI_Init+0x184>
 800e018:	2b01      	cmp	r3, #1
 800e01a:	d120      	bne.n	800e05e <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	685b      	ldr	r3, [r3, #4]
 800e020:	4618      	mov	r0, r3
 800e022:	f7ff ff3b 	bl	800de9c <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	685b      	ldr	r3, [r3, #4]
 800e02a:	4618      	mov	r0, r3
 800e02c:	f7ff fec4 	bl	800ddb8 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800e030:	e031      	b.n	800e096 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	685b      	ldr	r3, [r3, #4]
 800e036:	4618      	mov	r0, r3
 800e038:	f7ff fee4 	bl	800de04 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	685b      	ldr	r3, [r3, #4]
 800e040:	4618      	mov	r0, r3
 800e042:	f7ff ff05 	bl	800de50 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800e046:	e026      	b.n	800e096 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	685b      	ldr	r3, [r3, #4]
 800e04c:	4618      	mov	r0, r3
 800e04e:	f7ff feb3 	bl	800ddb8 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	685b      	ldr	r3, [r3, #4]
 800e056:	4618      	mov	r0, r3
 800e058:	f7ff fefa 	bl	800de50 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800e05c:	e01b      	b.n	800e096 <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	f043 0305 	orr.w	r3, r3, #5
 800e064:	60fb      	str	r3, [r7, #12]
            break;
 800e066:	bf00      	nop
 800e068:	e015      	b.n	800e096 <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	4618      	mov	r0, r3
 800e070:	f7ff fe1c 	bl	800dcac <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	4618      	mov	r0, r3
 800e07a:	f7ff fe63 	bl	800dd44 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	685b      	ldr	r3, [r3, #4]
 800e082:	4618      	mov	r0, r3
 800e084:	f7ff fe26 	bl	800dcd4 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	685b      	ldr	r3, [r3, #4]
 800e08c:	4618      	mov	r0, r3
 800e08e:	f7ff fe6d 	bl	800dd6c <LL_EXTI_DisableEvent_32_63>
 800e092:	e000      	b.n	800e096 <LL_EXTI_Init+0x1d2>
      }
 800e094:	bf00      	nop
  }

  return status;
 800e096:	68fb      	ldr	r3, [r7, #12]
}
 800e098:	4618      	mov	r0, r3
 800e09a:	3710      	adds	r7, #16
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd80      	pop	{r7, pc}

0800e0a0 <LL_GPIO_SetPinMode>:
{
 800e0a0:	b480      	push	{r7}
 800e0a2:	b089      	sub	sp, #36	; 0x24
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	60f8      	str	r0, [r7, #12]
 800e0a8:	60b9      	str	r1, [r7, #8]
 800e0aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	681a      	ldr	r2, [r3, #0]
 800e0b0:	68bb      	ldr	r3, [r7, #8]
 800e0b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e0b4:	697b      	ldr	r3, [r7, #20]
 800e0b6:	fa93 f3a3 	rbit	r3, r3
 800e0ba:	613b      	str	r3, [r7, #16]
  return result;
 800e0bc:	693b      	ldr	r3, [r7, #16]
 800e0be:	fab3 f383 	clz	r3, r3
 800e0c2:	b2db      	uxtb	r3, r3
 800e0c4:	005b      	lsls	r3, r3, #1
 800e0c6:	2103      	movs	r1, #3
 800e0c8:	fa01 f303 	lsl.w	r3, r1, r3
 800e0cc:	43db      	mvns	r3, r3
 800e0ce:	401a      	ands	r2, r3
 800e0d0:	68bb      	ldr	r3, [r7, #8]
 800e0d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e0d4:	69fb      	ldr	r3, [r7, #28]
 800e0d6:	fa93 f3a3 	rbit	r3, r3
 800e0da:	61bb      	str	r3, [r7, #24]
  return result;
 800e0dc:	69bb      	ldr	r3, [r7, #24]
 800e0de:	fab3 f383 	clz	r3, r3
 800e0e2:	b2db      	uxtb	r3, r3
 800e0e4:	005b      	lsls	r3, r3, #1
 800e0e6:	6879      	ldr	r1, [r7, #4]
 800e0e8:	fa01 f303 	lsl.w	r3, r1, r3
 800e0ec:	431a      	orrs	r2, r3
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	601a      	str	r2, [r3, #0]
}
 800e0f2:	bf00      	nop
 800e0f4:	3724      	adds	r7, #36	; 0x24
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fc:	4770      	bx	lr

0800e0fe <LL_GPIO_SetPinOutputType>:
{
 800e0fe:	b480      	push	{r7}
 800e100:	b085      	sub	sp, #20
 800e102:	af00      	add	r7, sp, #0
 800e104:	60f8      	str	r0, [r7, #12]
 800e106:	60b9      	str	r1, [r7, #8]
 800e108:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	685a      	ldr	r2, [r3, #4]
 800e10e:	68bb      	ldr	r3, [r7, #8]
 800e110:	43db      	mvns	r3, r3
 800e112:	401a      	ands	r2, r3
 800e114:	68bb      	ldr	r3, [r7, #8]
 800e116:	6879      	ldr	r1, [r7, #4]
 800e118:	fb01 f303 	mul.w	r3, r1, r3
 800e11c:	431a      	orrs	r2, r3
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	605a      	str	r2, [r3, #4]
}
 800e122:	bf00      	nop
 800e124:	3714      	adds	r7, #20
 800e126:	46bd      	mov	sp, r7
 800e128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12c:	4770      	bx	lr

0800e12e <LL_GPIO_SetPinSpeed>:
{
 800e12e:	b480      	push	{r7}
 800e130:	b089      	sub	sp, #36	; 0x24
 800e132:	af00      	add	r7, sp, #0
 800e134:	60f8      	str	r0, [r7, #12]
 800e136:	60b9      	str	r1, [r7, #8]
 800e138:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	689a      	ldr	r2, [r3, #8]
 800e13e:	68bb      	ldr	r3, [r7, #8]
 800e140:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e142:	697b      	ldr	r3, [r7, #20]
 800e144:	fa93 f3a3 	rbit	r3, r3
 800e148:	613b      	str	r3, [r7, #16]
  return result;
 800e14a:	693b      	ldr	r3, [r7, #16]
 800e14c:	fab3 f383 	clz	r3, r3
 800e150:	b2db      	uxtb	r3, r3
 800e152:	005b      	lsls	r3, r3, #1
 800e154:	2103      	movs	r1, #3
 800e156:	fa01 f303 	lsl.w	r3, r1, r3
 800e15a:	43db      	mvns	r3, r3
 800e15c:	401a      	ands	r2, r3
 800e15e:	68bb      	ldr	r3, [r7, #8]
 800e160:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e162:	69fb      	ldr	r3, [r7, #28]
 800e164:	fa93 f3a3 	rbit	r3, r3
 800e168:	61bb      	str	r3, [r7, #24]
  return result;
 800e16a:	69bb      	ldr	r3, [r7, #24]
 800e16c:	fab3 f383 	clz	r3, r3
 800e170:	b2db      	uxtb	r3, r3
 800e172:	005b      	lsls	r3, r3, #1
 800e174:	6879      	ldr	r1, [r7, #4]
 800e176:	fa01 f303 	lsl.w	r3, r1, r3
 800e17a:	431a      	orrs	r2, r3
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	609a      	str	r2, [r3, #8]
}
 800e180:	bf00      	nop
 800e182:	3724      	adds	r7, #36	; 0x24
 800e184:	46bd      	mov	sp, r7
 800e186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18a:	4770      	bx	lr

0800e18c <LL_GPIO_SetPinPull>:
{
 800e18c:	b480      	push	{r7}
 800e18e:	b089      	sub	sp, #36	; 0x24
 800e190:	af00      	add	r7, sp, #0
 800e192:	60f8      	str	r0, [r7, #12]
 800e194:	60b9      	str	r1, [r7, #8]
 800e196:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	68da      	ldr	r2, [r3, #12]
 800e19c:	68bb      	ldr	r3, [r7, #8]
 800e19e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e1a0:	697b      	ldr	r3, [r7, #20]
 800e1a2:	fa93 f3a3 	rbit	r3, r3
 800e1a6:	613b      	str	r3, [r7, #16]
  return result;
 800e1a8:	693b      	ldr	r3, [r7, #16]
 800e1aa:	fab3 f383 	clz	r3, r3
 800e1ae:	b2db      	uxtb	r3, r3
 800e1b0:	005b      	lsls	r3, r3, #1
 800e1b2:	2103      	movs	r1, #3
 800e1b4:	fa01 f303 	lsl.w	r3, r1, r3
 800e1b8:	43db      	mvns	r3, r3
 800e1ba:	401a      	ands	r2, r3
 800e1bc:	68bb      	ldr	r3, [r7, #8]
 800e1be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e1c0:	69fb      	ldr	r3, [r7, #28]
 800e1c2:	fa93 f3a3 	rbit	r3, r3
 800e1c6:	61bb      	str	r3, [r7, #24]
  return result;
 800e1c8:	69bb      	ldr	r3, [r7, #24]
 800e1ca:	fab3 f383 	clz	r3, r3
 800e1ce:	b2db      	uxtb	r3, r3
 800e1d0:	005b      	lsls	r3, r3, #1
 800e1d2:	6879      	ldr	r1, [r7, #4]
 800e1d4:	fa01 f303 	lsl.w	r3, r1, r3
 800e1d8:	431a      	orrs	r2, r3
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	60da      	str	r2, [r3, #12]
}
 800e1de:	bf00      	nop
 800e1e0:	3724      	adds	r7, #36	; 0x24
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e8:	4770      	bx	lr

0800e1ea <LL_GPIO_SetAFPin_0_7>:
{
 800e1ea:	b480      	push	{r7}
 800e1ec:	b089      	sub	sp, #36	; 0x24
 800e1ee:	af00      	add	r7, sp, #0
 800e1f0:	60f8      	str	r0, [r7, #12]
 800e1f2:	60b9      	str	r1, [r7, #8]
 800e1f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	6a1a      	ldr	r2, [r3, #32]
 800e1fa:	68bb      	ldr	r3, [r7, #8]
 800e1fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e1fe:	697b      	ldr	r3, [r7, #20]
 800e200:	fa93 f3a3 	rbit	r3, r3
 800e204:	613b      	str	r3, [r7, #16]
  return result;
 800e206:	693b      	ldr	r3, [r7, #16]
 800e208:	fab3 f383 	clz	r3, r3
 800e20c:	b2db      	uxtb	r3, r3
 800e20e:	009b      	lsls	r3, r3, #2
 800e210:	210f      	movs	r1, #15
 800e212:	fa01 f303 	lsl.w	r3, r1, r3
 800e216:	43db      	mvns	r3, r3
 800e218:	401a      	ands	r2, r3
 800e21a:	68bb      	ldr	r3, [r7, #8]
 800e21c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e21e:	69fb      	ldr	r3, [r7, #28]
 800e220:	fa93 f3a3 	rbit	r3, r3
 800e224:	61bb      	str	r3, [r7, #24]
  return result;
 800e226:	69bb      	ldr	r3, [r7, #24]
 800e228:	fab3 f383 	clz	r3, r3
 800e22c:	b2db      	uxtb	r3, r3
 800e22e:	009b      	lsls	r3, r3, #2
 800e230:	6879      	ldr	r1, [r7, #4]
 800e232:	fa01 f303 	lsl.w	r3, r1, r3
 800e236:	431a      	orrs	r2, r3
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	621a      	str	r2, [r3, #32]
}
 800e23c:	bf00      	nop
 800e23e:	3724      	adds	r7, #36	; 0x24
 800e240:	46bd      	mov	sp, r7
 800e242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e246:	4770      	bx	lr

0800e248 <LL_GPIO_SetAFPin_8_15>:
{
 800e248:	b480      	push	{r7}
 800e24a:	b089      	sub	sp, #36	; 0x24
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	60f8      	str	r0, [r7, #12]
 800e250:	60b9      	str	r1, [r7, #8]
 800e252:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e258:	68bb      	ldr	r3, [r7, #8]
 800e25a:	0a1b      	lsrs	r3, r3, #8
 800e25c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e25e:	697b      	ldr	r3, [r7, #20]
 800e260:	fa93 f3a3 	rbit	r3, r3
 800e264:	613b      	str	r3, [r7, #16]
  return result;
 800e266:	693b      	ldr	r3, [r7, #16]
 800e268:	fab3 f383 	clz	r3, r3
 800e26c:	b2db      	uxtb	r3, r3
 800e26e:	009b      	lsls	r3, r3, #2
 800e270:	210f      	movs	r1, #15
 800e272:	fa01 f303 	lsl.w	r3, r1, r3
 800e276:	43db      	mvns	r3, r3
 800e278:	401a      	ands	r2, r3
 800e27a:	68bb      	ldr	r3, [r7, #8]
 800e27c:	0a1b      	lsrs	r3, r3, #8
 800e27e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e280:	69fb      	ldr	r3, [r7, #28]
 800e282:	fa93 f3a3 	rbit	r3, r3
 800e286:	61bb      	str	r3, [r7, #24]
  return result;
 800e288:	69bb      	ldr	r3, [r7, #24]
 800e28a:	fab3 f383 	clz	r3, r3
 800e28e:	b2db      	uxtb	r3, r3
 800e290:	009b      	lsls	r3, r3, #2
 800e292:	6879      	ldr	r1, [r7, #4]
 800e294:	fa01 f303 	lsl.w	r3, r1, r3
 800e298:	431a      	orrs	r2, r3
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800e29e:	bf00      	nop
 800e2a0:	3724      	adds	r7, #36	; 0x24
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a8:	4770      	bx	lr

0800e2aa <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800e2aa:	b580      	push	{r7, lr}
 800e2ac:	b086      	sub	sp, #24
 800e2ae:	af00      	add	r7, sp, #0
 800e2b0:	6078      	str	r0, [r7, #4]
 800e2b2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800e2b4:	683b      	ldr	r3, [r7, #0]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	fa93 f3a3 	rbit	r3, r3
 800e2c0:	60bb      	str	r3, [r7, #8]
  return result;
 800e2c2:	68bb      	ldr	r3, [r7, #8]
 800e2c4:	fab3 f383 	clz	r3, r3
 800e2c8:	b2db      	uxtb	r3, r3
 800e2ca:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800e2cc:	e040      	b.n	800e350 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800e2ce:	683b      	ldr	r3, [r7, #0]
 800e2d0:	681a      	ldr	r2, [r3, #0]
 800e2d2:	2101      	movs	r1, #1
 800e2d4:	697b      	ldr	r3, [r7, #20]
 800e2d6:	fa01 f303 	lsl.w	r3, r1, r3
 800e2da:	4013      	ands	r3, r2
 800e2dc:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 800e2de:	693b      	ldr	r3, [r7, #16]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d032      	beq.n	800e34a <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	685b      	ldr	r3, [r3, #4]
 800e2e8:	461a      	mov	r2, r3
 800e2ea:	6939      	ldr	r1, [r7, #16]
 800e2ec:	6878      	ldr	r0, [r7, #4]
 800e2ee:	f7ff fed7 	bl	800e0a0 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800e2f2:	683b      	ldr	r3, [r7, #0]
 800e2f4:	685b      	ldr	r3, [r3, #4]
 800e2f6:	2b01      	cmp	r3, #1
 800e2f8:	d003      	beq.n	800e302 <LL_GPIO_Init+0x58>
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	685b      	ldr	r3, [r3, #4]
 800e2fe:	2b02      	cmp	r3, #2
 800e300:	d106      	bne.n	800e310 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800e302:	683b      	ldr	r3, [r7, #0]
 800e304:	689b      	ldr	r3, [r3, #8]
 800e306:	461a      	mov	r2, r3
 800e308:	6939      	ldr	r1, [r7, #16]
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	f7ff ff0f 	bl	800e12e <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800e310:	683b      	ldr	r3, [r7, #0]
 800e312:	691b      	ldr	r3, [r3, #16]
 800e314:	461a      	mov	r2, r3
 800e316:	6939      	ldr	r1, [r7, #16]
 800e318:	6878      	ldr	r0, [r7, #4]
 800e31a:	f7ff ff37 	bl	800e18c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800e31e:	683b      	ldr	r3, [r7, #0]
 800e320:	685b      	ldr	r3, [r3, #4]
 800e322:	2b02      	cmp	r3, #2
 800e324:	d111      	bne.n	800e34a <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800e326:	693b      	ldr	r3, [r7, #16]
 800e328:	2bff      	cmp	r3, #255	; 0xff
 800e32a:	d807      	bhi.n	800e33c <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800e32c:	683b      	ldr	r3, [r7, #0]
 800e32e:	695b      	ldr	r3, [r3, #20]
 800e330:	461a      	mov	r2, r3
 800e332:	6939      	ldr	r1, [r7, #16]
 800e334:	6878      	ldr	r0, [r7, #4]
 800e336:	f7ff ff58 	bl	800e1ea <LL_GPIO_SetAFPin_0_7>
 800e33a:	e006      	b.n	800e34a <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800e33c:	683b      	ldr	r3, [r7, #0]
 800e33e:	695b      	ldr	r3, [r3, #20]
 800e340:	461a      	mov	r2, r3
 800e342:	6939      	ldr	r1, [r7, #16]
 800e344:	6878      	ldr	r0, [r7, #4]
 800e346:	f7ff ff7f 	bl	800e248 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800e34a:	697b      	ldr	r3, [r7, #20]
 800e34c:	3301      	adds	r3, #1
 800e34e:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800e350:	683b      	ldr	r3, [r7, #0]
 800e352:	681a      	ldr	r2, [r3, #0]
 800e354:	697b      	ldr	r3, [r7, #20]
 800e356:	fa22 f303 	lsr.w	r3, r2, r3
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d1b7      	bne.n	800e2ce <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800e35e:	683b      	ldr	r3, [r7, #0]
 800e360:	685b      	ldr	r3, [r3, #4]
 800e362:	2b01      	cmp	r3, #1
 800e364:	d003      	beq.n	800e36e <LL_GPIO_Init+0xc4>
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	685b      	ldr	r3, [r3, #4]
 800e36a:	2b02      	cmp	r3, #2
 800e36c:	d107      	bne.n	800e37e <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	6819      	ldr	r1, [r3, #0]
 800e372:	683b      	ldr	r3, [r7, #0]
 800e374:	68db      	ldr	r3, [r3, #12]
 800e376:	461a      	mov	r2, r3
 800e378:	6878      	ldr	r0, [r7, #4]
 800e37a:	f7ff fec0 	bl	800e0fe <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800e37e:	2300      	movs	r3, #0
}
 800e380:	4618      	mov	r0, r3
 800e382:	3718      	adds	r7, #24
 800e384:	46bd      	mov	sp, r7
 800e386:	bd80      	pop	{r7, pc}

0800e388 <ILI9341_Draw_Wave>:

 extern uint16_t BURST_MAX_SIZE;


void ILI9341_Draw_Wave(uint16_t x, uint16_t y, uint8_t weight, uint16_t colour, uint8_t scale, uint32_t* data_table, uint16_t data_table_size)
{
 800e388:	b590      	push	{r4, r7, lr}
 800e38a:	b085      	sub	sp, #20
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	4604      	mov	r4, r0
 800e390:	4608      	mov	r0, r1
 800e392:	4611      	mov	r1, r2
 800e394:	461a      	mov	r2, r3
 800e396:	4623      	mov	r3, r4
 800e398:	80fb      	strh	r3, [r7, #6]
 800e39a:	4603      	mov	r3, r0
 800e39c:	80bb      	strh	r3, [r7, #4]
 800e39e:	460b      	mov	r3, r1
 800e3a0:	70fb      	strb	r3, [r7, #3]
 800e3a2:	4613      	mov	r3, r2
 800e3a4:	803b      	strh	r3, [r7, #0]
	for(int w = 0; w < weight; w++ )
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	60fb      	str	r3, [r7, #12]
 800e3aa:	e026      	b.n	800e3fa <ILI9341_Draw_Wave+0x72>
	{
		for(int i = 0; i < data_table_size; i++)
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	60bb      	str	r3, [r7, #8]
 800e3b0:	e01c      	b.n	800e3ec <ILI9341_Draw_Wave+0x64>
		{
			ILI9341_Draw_Pixel(	x + i,	(y + data_table[i] / scale) + w, colour);
 800e3b2:	68bb      	ldr	r3, [r7, #8]
 800e3b4:	b29a      	uxth	r2, r3
 800e3b6:	88fb      	ldrh	r3, [r7, #6]
 800e3b8:	4413      	add	r3, r2
 800e3ba:	b298      	uxth	r0, r3
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	009b      	lsls	r3, r3, #2
 800e3c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3c2:	4413      	add	r3, r2
 800e3c4:	681a      	ldr	r2, [r3, #0]
 800e3c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e3ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3ce:	b29a      	uxth	r2, r3
 800e3d0:	88bb      	ldrh	r3, [r7, #4]
 800e3d2:	4413      	add	r3, r2
 800e3d4:	b29a      	uxth	r2, r3
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	b29b      	uxth	r3, r3
 800e3da:	4413      	add	r3, r2
 800e3dc:	b29b      	uxth	r3, r3
 800e3de:	883a      	ldrh	r2, [r7, #0]
 800e3e0:	4619      	mov	r1, r3
 800e3e2:	f000 fc1f 	bl	800ec24 <ILI9341_Draw_Pixel>
		for(int i = 0; i < data_table_size; i++)
 800e3e6:	68bb      	ldr	r3, [r7, #8]
 800e3e8:	3301      	adds	r3, #1
 800e3ea:	60bb      	str	r3, [r7, #8]
 800e3ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e3ee:	68ba      	ldr	r2, [r7, #8]
 800e3f0:	429a      	cmp	r2, r3
 800e3f2:	dbde      	blt.n	800e3b2 <ILI9341_Draw_Wave+0x2a>
	for(int w = 0; w < weight; w++ )
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	3301      	adds	r3, #1
 800e3f8:	60fb      	str	r3, [r7, #12]
 800e3fa:	78fb      	ldrb	r3, [r7, #3]
 800e3fc:	68fa      	ldr	r2, [r7, #12]
 800e3fe:	429a      	cmp	r2, r3
 800e400:	dbd4      	blt.n	800e3ac <ILI9341_Draw_Wave+0x24>

		}
	}

}
 800e402:	bf00      	nop
 800e404:	3714      	adds	r7, #20
 800e406:	46bd      	mov	sp, r7
 800e408:	bd90      	pop	{r4, r7, pc}

0800e40a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 *
 */
void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint16_t border_colour)
{
 800e40a:	b590      	push	{r4, r7, lr}
 800e40c:	b087      	sub	sp, #28
 800e40e:	af02      	add	r7, sp, #8
 800e410:	4604      	mov	r4, r0
 800e412:	4608      	mov	r0, r1
 800e414:	4611      	mov	r1, r2
 800e416:	461a      	mov	r2, r3
 800e418:	4623      	mov	r3, r4
 800e41a:	80fb      	strh	r3, [r7, #6]
 800e41c:	4603      	mov	r3, r0
 800e41e:	80bb      	strh	r3, [r7, #4]
 800e420:	460b      	mov	r3, r1
 800e422:	807b      	strh	r3, [r7, #2]
 800e424:	4613      	mov	r3, r2
 800e426:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 800e428:	2300      	movs	r3, #0
 800e42a:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 800e42c:	7bfa      	ldrb	r2, [r7, #15]
 800e42e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e432:	429a      	cmp	r2, r3
 800e434:	d939      	bls.n	800e4aa <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa0>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 800e436:	88ba      	ldrh	r2, [r7, #4]
 800e438:	7bfb      	ldrb	r3, [r7, #15]
 800e43a:	441a      	add	r2, r3
 800e43c:	88b9      	ldrh	r1, [r7, #4]
 800e43e:	883b      	ldrh	r3, [r7, #0]
 800e440:	4419      	add	r1, r3
 800e442:	7bfb      	ldrb	r3, [r7, #15]
 800e444:	1acb      	subs	r3, r1, r3
 800e446:	429a      	cmp	r2, r3
 800e448:	f000 8089 	beq.w	800e55e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
 800e44c:	88fa      	ldrh	r2, [r7, #6]
 800e44e:	7bfb      	ldrb	r3, [r7, #15]
 800e450:	441a      	add	r2, r3
 800e452:	88f9      	ldrh	r1, [r7, #6]
 800e454:	887b      	ldrh	r3, [r7, #2]
 800e456:	4419      	add	r1, r3
 800e458:	7bfb      	ldrb	r3, [r7, #15]
 800e45a:	1acb      	subs	r3, r1, r3
 800e45c:	429a      	cmp	r2, r3
 800e45e:	d07e      	beq.n	800e55e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 800e460:	7bfb      	ldrb	r3, [r7, #15]
 800e462:	b29a      	uxth	r2, r3
 800e464:	88fb      	ldrh	r3, [r7, #6]
 800e466:	4413      	add	r3, r2
 800e468:	b298      	uxth	r0, r3
 800e46a:	7bfb      	ldrb	r3, [r7, #15]
 800e46c:	b29a      	uxth	r2, r3
 800e46e:	88bb      	ldrh	r3, [r7, #4]
 800e470:	4413      	add	r3, r2
 800e472:	b299      	uxth	r1, r3
 800e474:	7bfb      	ldrb	r3, [r7, #15]
 800e476:	b29b      	uxth	r3, r3
 800e478:	005b      	lsls	r3, r3, #1
 800e47a:	b29b      	uxth	r3, r3
 800e47c:	887a      	ldrh	r2, [r7, #2]
 800e47e:	1ad3      	subs	r3, r2, r3
 800e480:	b29b      	uxth	r3, r3
 800e482:	3301      	adds	r3, #1
 800e484:	b29c      	uxth	r4, r3
 800e486:	7bfb      	ldrb	r3, [r7, #15]
 800e488:	b29b      	uxth	r3, r3
 800e48a:	005b      	lsls	r3, r3, #1
 800e48c:	b29b      	uxth	r3, r3
 800e48e:	883a      	ldrh	r2, [r7, #0]
 800e490:	1ad3      	subs	r3, r2, r3
 800e492:	b29b      	uxth	r3, r3
 800e494:	3301      	adds	r3, #1
 800e496:	b29a      	uxth	r2, r3
 800e498:	2304      	movs	r3, #4
 800e49a:	9301      	str	r3, [sp, #4]
 800e49c:	8c3b      	ldrh	r3, [r7, #32]
 800e49e:	9300      	str	r3, [sp, #0]
 800e4a0:	4613      	mov	r3, r2
 800e4a2:	4622      	mov	r2, r4
 800e4a4:	f000 fd18 	bl	800eed8 <ILI9341_Draw_Rectangle>
				goto finish;
 800e4a8:	e05a      	b.n	800e560 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x156>
			}
		}

		// Horizontal line - Top
		ILI9341_Draw_Horizontal_Line(	x + b,
 800e4aa:	7bfb      	ldrb	r3, [r7, #15]
 800e4ac:	b29a      	uxth	r2, r3
 800e4ae:	88fb      	ldrh	r3, [r7, #6]
 800e4b0:	4413      	add	r3, r2
 800e4b2:	b298      	uxth	r0, r3
 800e4b4:	7bfb      	ldrb	r3, [r7, #15]
 800e4b6:	b29a      	uxth	r2, r3
 800e4b8:	88bb      	ldrh	r3, [r7, #4]
 800e4ba:	4413      	add	r3, r2
 800e4bc:	b299      	uxth	r1, r3
										y + b,
										(w - b)+1,
 800e4be:	7bfb      	ldrb	r3, [r7, #15]
 800e4c0:	b29b      	uxth	r3, r3
 800e4c2:	887a      	ldrh	r2, [r7, #2]
 800e4c4:	1ad3      	subs	r3, r2, r3
 800e4c6:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800e4c8:	3301      	adds	r3, #1
 800e4ca:	b29a      	uxth	r2, r3
 800e4cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e4ce:	f000 fa6b 	bl	800e9a8 <ILI9341_Draw_Horizontal_Line>
										border_colour);
		// Horizontal line - Bottom
		ILI9341_Draw_Horizontal_Line(	x + b,
 800e4d2:	7bfb      	ldrb	r3, [r7, #15]
 800e4d4:	b29a      	uxth	r2, r3
 800e4d6:	88fb      	ldrh	r3, [r7, #6]
 800e4d8:	4413      	add	r3, r2
 800e4da:	b298      	uxth	r0, r3
										(y + h) - b,
 800e4dc:	88ba      	ldrh	r2, [r7, #4]
 800e4de:	883b      	ldrh	r3, [r7, #0]
 800e4e0:	4413      	add	r3, r2
 800e4e2:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800e4e4:	7bfb      	ldrb	r3, [r7, #15]
 800e4e6:	b29b      	uxth	r3, r3
 800e4e8:	1ad3      	subs	r3, r2, r3
 800e4ea:	b299      	uxth	r1, r3
										(w - b)+1,
 800e4ec:	7bfb      	ldrb	r3, [r7, #15]
 800e4ee:	b29b      	uxth	r3, r3
 800e4f0:	887a      	ldrh	r2, [r7, #2]
 800e4f2:	1ad3      	subs	r3, r2, r3
 800e4f4:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800e4f6:	3301      	adds	r3, #1
 800e4f8:	b29a      	uxth	r2, r3
 800e4fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e4fc:	f000 fa54 	bl	800e9a8 <ILI9341_Draw_Horizontal_Line>
										border_colour);


		// Vertical line - left
		ILI9341_Draw_Vertical_Line(		x + b,
 800e500:	7bfb      	ldrb	r3, [r7, #15]
 800e502:	b29a      	uxth	r2, r3
 800e504:	88fb      	ldrh	r3, [r7, #6]
 800e506:	4413      	add	r3, r2
 800e508:	b298      	uxth	r0, r3
 800e50a:	7bfb      	ldrb	r3, [r7, #15]
 800e50c:	b29a      	uxth	r2, r3
 800e50e:	88bb      	ldrh	r3, [r7, #4]
 800e510:	4413      	add	r3, r2
 800e512:	b299      	uxth	r1, r3
 800e514:	7bfb      	ldrb	r3, [r7, #15]
 800e516:	b29b      	uxth	r3, r3
 800e518:	005b      	lsls	r3, r3, #1
 800e51a:	b29b      	uxth	r3, r3
 800e51c:	883a      	ldrh	r2, [r7, #0]
 800e51e:	1ad3      	subs	r3, r2, r3
 800e520:	b29a      	uxth	r2, r3
 800e522:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e524:	f000 faa4 	bl	800ea70 <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);
		// Vertical line - right
		ILI9341_Draw_Vertical_Line(		((x + w)) - (b),
 800e528:	88fa      	ldrh	r2, [r7, #6]
 800e52a:	887b      	ldrh	r3, [r7, #2]
 800e52c:	4413      	add	r3, r2
 800e52e:	b29a      	uxth	r2, r3
 800e530:	7bfb      	ldrb	r3, [r7, #15]
 800e532:	b29b      	uxth	r3, r3
 800e534:	1ad3      	subs	r3, r2, r3
 800e536:	b298      	uxth	r0, r3
 800e538:	7bfb      	ldrb	r3, [r7, #15]
 800e53a:	b29a      	uxth	r2, r3
 800e53c:	88bb      	ldrh	r3, [r7, #4]
 800e53e:	4413      	add	r3, r2
 800e540:	b299      	uxth	r1, r3
 800e542:	7bfb      	ldrb	r3, [r7, #15]
 800e544:	b29b      	uxth	r3, r3
 800e546:	005b      	lsls	r3, r3, #1
 800e548:	b29b      	uxth	r3, r3
 800e54a:	883a      	ldrh	r2, [r7, #0]
 800e54c:	1ad3      	subs	r3, r2, r3
 800e54e:	b29a      	uxth	r2, r3
 800e550:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e552:	f000 fa8d 	bl	800ea70 <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 800e556:	7bfb      	ldrb	r3, [r7, #15]
 800e558:	3301      	adds	r3, #1
 800e55a:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 800e55c:	e766      	b.n	800e42c <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 800e55e:	bf00      	nop
	// done
	return;
 800e560:	bf00      	nop
}
 800e562:	3714      	adds	r7, #20
 800e564:	46bd      	mov	sp, r7
 800e566:	bd90      	pop	{r4, r7, pc}

0800e568 <ILI9341_Draw_Char>:
 *	@retval None
 *
 */

void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800e568:	b590      	push	{r4, r7, lr}
 800e56a:	b089      	sub	sp, #36	; 0x24
 800e56c:	af02      	add	r7, sp, #8
 800e56e:	4604      	mov	r4, r0
 800e570:	4608      	mov	r0, r1
 800e572:	4611      	mov	r1, r2
 800e574:	461a      	mov	r2, r3
 800e576:	4623      	mov	r3, r4
 800e578:	71fb      	strb	r3, [r7, #7]
 800e57a:	4603      	mov	r3, r0
 800e57c:	80bb      	strh	r3, [r7, #4]
 800e57e:	460b      	mov	r3, r1
 800e580:	807b      	strh	r3, [r7, #2]
 800e582:	4613      	mov	r3, r2
 800e584:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 800e586:	79fb      	ldrb	r3, [r7, #7]
 800e588:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 800e58a:	7dfb      	ldrb	r3, [r7, #23]
 800e58c:	2b1f      	cmp	r3, #31
 800e58e:	d802      	bhi.n	800e596 <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 800e590:	2300      	movs	r3, #0
 800e592:	71fb      	strb	r3, [r7, #7]
 800e594:	e002      	b.n	800e59c <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 800e596:	7dfb      	ldrb	r3, [r7, #23]
 800e598:	3b20      	subs	r3, #32
 800e59a:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800e59c:	2300      	movs	r3, #0
 800e59e:	753b      	strb	r3, [r7, #20]
 800e5a0:	e012      	b.n	800e5c8 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 800e5a2:	7dfa      	ldrb	r2, [r7, #23]
 800e5a4:	7d38      	ldrb	r0, [r7, #20]
 800e5a6:	7d39      	ldrb	r1, [r7, #20]
 800e5a8:	4c48      	ldr	r4, [pc, #288]	; (800e6cc <ILI9341_Draw_Char+0x164>)
 800e5aa:	4613      	mov	r3, r2
 800e5ac:	005b      	lsls	r3, r3, #1
 800e5ae:	4413      	add	r3, r2
 800e5b0:	005b      	lsls	r3, r3, #1
 800e5b2:	4423      	add	r3, r4
 800e5b4:	4403      	add	r3, r0
 800e5b6:	781a      	ldrb	r2, [r3, #0]
 800e5b8:	f107 0318 	add.w	r3, r7, #24
 800e5bc:	440b      	add	r3, r1
 800e5be:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800e5c2:	7d3b      	ldrb	r3, [r7, #20]
 800e5c4:	3301      	adds	r3, #1
 800e5c6:	753b      	strb	r3, [r7, #20]
 800e5c8:	7d3b      	ldrb	r3, [r7, #20]
 800e5ca:	2b05      	cmp	r3, #5
 800e5cc:	d9e9      	bls.n	800e5a2 <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	757b      	strb	r3, [r7, #21]
 800e5d2:	e074      	b.n	800e6be <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	75bb      	strb	r3, [r7, #22]
 800e5d8:	e06b      	b.n	800e6b2 <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 800e5da:	7d7b      	ldrb	r3, [r7, #21]
 800e5dc:	f107 0218 	add.w	r2, r7, #24
 800e5e0:	4413      	add	r3, r2
 800e5e2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800e5e6:	461a      	mov	r2, r3
 800e5e8:	7dbb      	ldrb	r3, [r7, #22]
 800e5ea:	fa42 f303 	asr.w	r3, r2, r3
 800e5ee:	f003 0301 	and.w	r3, r3, #1
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d02d      	beq.n	800e652 <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 800e5f6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e5f8:	2b01      	cmp	r3, #1
 800e5fa:	d10e      	bne.n	800e61a <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 800e5fc:	7d7b      	ldrb	r3, [r7, #21]
 800e5fe:	b29a      	uxth	r2, r3
 800e600:	88bb      	ldrh	r3, [r7, #4]
 800e602:	4413      	add	r3, r2
 800e604:	b298      	uxth	r0, r3
 800e606:	7dbb      	ldrb	r3, [r7, #22]
 800e608:	b29a      	uxth	r2, r3
 800e60a:	887b      	ldrh	r3, [r7, #2]
 800e60c:	4413      	add	r3, r2
 800e60e:	b29b      	uxth	r3, r3
 800e610:	883a      	ldrh	r2, [r7, #0]
 800e612:	4619      	mov	r1, r3
 800e614:	f000 fb06 	bl	800ec24 <ILI9341_Draw_Pixel>
 800e618:	e048      	b.n	800e6ac <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 800e61a:	7d7b      	ldrb	r3, [r7, #21]
 800e61c:	b29b      	uxth	r3, r3
 800e61e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e620:	fb12 f303 	smulbb	r3, r2, r3
 800e624:	b29a      	uxth	r2, r3
 800e626:	88bb      	ldrh	r3, [r7, #4]
 800e628:	4413      	add	r3, r2
 800e62a:	b298      	uxth	r0, r3
 800e62c:	7dbb      	ldrb	r3, [r7, #22]
 800e62e:	b29b      	uxth	r3, r3
 800e630:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e632:	fb12 f303 	smulbb	r3, r2, r3
 800e636:	b29a      	uxth	r2, r3
 800e638:	887b      	ldrh	r3, [r7, #2]
 800e63a:	4413      	add	r3, r2
 800e63c:	b299      	uxth	r1, r3
 800e63e:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800e640:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e642:	2301      	movs	r3, #1
 800e644:	9301      	str	r3, [sp, #4]
 800e646:	883b      	ldrh	r3, [r7, #0]
 800e648:	9300      	str	r3, [sp, #0]
 800e64a:	4623      	mov	r3, r4
 800e64c:	f000 fc44 	bl	800eed8 <ILI9341_Draw_Rectangle>
 800e650:	e02c      	b.n	800e6ac <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 800e652:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e654:	2b01      	cmp	r3, #1
 800e656:	d10e      	bne.n	800e676 <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 800e658:	7d7b      	ldrb	r3, [r7, #21]
 800e65a:	b29a      	uxth	r2, r3
 800e65c:	88bb      	ldrh	r3, [r7, #4]
 800e65e:	4413      	add	r3, r2
 800e660:	b298      	uxth	r0, r3
 800e662:	7dbb      	ldrb	r3, [r7, #22]
 800e664:	b29a      	uxth	r2, r3
 800e666:	887b      	ldrh	r3, [r7, #2]
 800e668:	4413      	add	r3, r2
 800e66a:	b29b      	uxth	r3, r3
 800e66c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800e66e:	4619      	mov	r1, r3
 800e670:	f000 fad8 	bl	800ec24 <ILI9341_Draw_Pixel>
 800e674:	e01a      	b.n	800e6ac <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 800e676:	7d7b      	ldrb	r3, [r7, #21]
 800e678:	b29b      	uxth	r3, r3
 800e67a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e67c:	fb12 f303 	smulbb	r3, r2, r3
 800e680:	b29a      	uxth	r2, r3
 800e682:	88bb      	ldrh	r3, [r7, #4]
 800e684:	4413      	add	r3, r2
 800e686:	b298      	uxth	r0, r3
 800e688:	7dbb      	ldrb	r3, [r7, #22]
 800e68a:	b29b      	uxth	r3, r3
 800e68c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e68e:	fb12 f303 	smulbb	r3, r2, r3
 800e692:	b29a      	uxth	r2, r3
 800e694:	887b      	ldrh	r3, [r7, #2]
 800e696:	4413      	add	r3, r2
 800e698:	b299      	uxth	r1, r3
 800e69a:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800e69c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e69e:	2301      	movs	r3, #1
 800e6a0:	9301      	str	r3, [sp, #4]
 800e6a2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e6a4:	9300      	str	r3, [sp, #0]
 800e6a6:	4623      	mov	r3, r4
 800e6a8:	f000 fc16 	bl	800eed8 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 800e6ac:	7dbb      	ldrb	r3, [r7, #22]
 800e6ae:	3301      	adds	r3, #1
 800e6b0:	75bb      	strb	r3, [r7, #22]
 800e6b2:	7dbb      	ldrb	r3, [r7, #22]
 800e6b4:	2b07      	cmp	r3, #7
 800e6b6:	d990      	bls.n	800e5da <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 800e6b8:	7d7b      	ldrb	r3, [r7, #21]
 800e6ba:	3301      	adds	r3, #1
 800e6bc:	757b      	strb	r3, [r7, #21]
 800e6be:	7d7b      	ldrb	r3, [r7, #21]
 800e6c0:	2b05      	cmp	r3, #5
 800e6c2:	d987      	bls.n	800e5d4 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 800e6c4:	bf00      	nop
 800e6c6:	371c      	adds	r7, #28
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	bd90      	pop	{r4, r7, pc}
 800e6cc:	08014420 	.word	0x08014420

0800e6d0 <ILI9341_Draw_Text>:
 *	@param None
 *	@retval None
 *
 */
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800e6d0:	b590      	push	{r4, r7, lr}
 800e6d2:	b087      	sub	sp, #28
 800e6d4:	af02      	add	r7, sp, #8
 800e6d6:	60f8      	str	r0, [r7, #12]
 800e6d8:	4608      	mov	r0, r1
 800e6da:	4611      	mov	r1, r2
 800e6dc:	461a      	mov	r2, r3
 800e6de:	4603      	mov	r3, r0
 800e6e0:	817b      	strh	r3, [r7, #10]
 800e6e2:	460b      	mov	r3, r1
 800e6e4:	813b      	strh	r3, [r7, #8]
 800e6e6:	4613      	mov	r3, r2
 800e6e8:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Vertical_Line(x-1, y, CHAR_HEIGHT*size, bgcolour);
 800e6ea:	897b      	ldrh	r3, [r7, #10]
 800e6ec:	3b01      	subs	r3, #1
 800e6ee:	b298      	uxth	r0, r3
 800e6f0:	8c3b      	ldrh	r3, [r7, #32]
 800e6f2:	00db      	lsls	r3, r3, #3
 800e6f4:	b29a      	uxth	r2, r3
 800e6f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e6f8:	8939      	ldrh	r1, [r7, #8]
 800e6fa:	f000 f9b9 	bl	800ea70 <ILI9341_Draw_Vertical_Line>
    ILI9341_Draw_Vertical_Line(x-2, y, CHAR_HEIGHT*size, bgcolour);
 800e6fe:	897b      	ldrh	r3, [r7, #10]
 800e700:	3b02      	subs	r3, #2
 800e702:	b298      	uxth	r0, r3
 800e704:	8c3b      	ldrh	r3, [r7, #32]
 800e706:	00db      	lsls	r3, r3, #3
 800e708:	b29a      	uxth	r2, r3
 800e70a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e70c:	8939      	ldrh	r1, [r7, #8]
 800e70e:	f000 f9af 	bl	800ea70 <ILI9341_Draw_Vertical_Line>

    while (*Text) {
 800e712:	e016      	b.n	800e742 <ILI9341_Draw_Text+0x72>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	1c5a      	adds	r2, r3, #1
 800e718:	60fa      	str	r2, [r7, #12]
 800e71a:	7818      	ldrb	r0, [r3, #0]
 800e71c:	88fc      	ldrh	r4, [r7, #6]
 800e71e:	893a      	ldrh	r2, [r7, #8]
 800e720:	8979      	ldrh	r1, [r7, #10]
 800e722:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e724:	9301      	str	r3, [sp, #4]
 800e726:	8c3b      	ldrh	r3, [r7, #32]
 800e728:	9300      	str	r3, [sp, #0]
 800e72a:	4623      	mov	r3, r4
 800e72c:	f7ff ff1c 	bl	800e568 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 800e730:	8c3b      	ldrh	r3, [r7, #32]
 800e732:	461a      	mov	r2, r3
 800e734:	0052      	lsls	r2, r2, #1
 800e736:	4413      	add	r3, r2
 800e738:	005b      	lsls	r3, r3, #1
 800e73a:	b29a      	uxth	r2, r3
 800e73c:	897b      	ldrh	r3, [r7, #10]
 800e73e:	4413      	add	r3, r2
 800e740:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	781b      	ldrb	r3, [r3, #0]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d1e4      	bne.n	800e714 <ILI9341_Draw_Text+0x44>
    }


}
 800e74a:	bf00      	nop
 800e74c:	3714      	adds	r7, #20
 800e74e:	46bd      	mov	sp, r7
 800e750:	bd90      	pop	{r4, r7, pc}

0800e752 <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 800e752:	b580      	push	{r7, lr}
 800e754:	af00      	add	r7, sp, #0

	_LCD_Enable();
 800e756:	f000 fca3 	bl	800f0a0 <_LCD_Enable>
	ILI9341_SPI_Init();
 800e75a:	f000 f907 	bl	800e96c <ILI9341_SPI_Init>
	_LCD_Reset();
 800e75e:	f000 fcaf 	bl	800f0c0 <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 800e762:	2001      	movs	r0, #1
 800e764:	f000 fd7a 	bl	800f25c <_LCD_SendCommand>
	HAL_Delay(2000);
 800e768:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800e76c:	f7f9 fe8e 	bl	800848c <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 800e770:	20cb      	movs	r0, #203	; 0xcb
 800e772:	f000 fd73 	bl	800f25c <_LCD_SendCommand>
	_LCD_SendData(0x39);
 800e776:	2039      	movs	r0, #57	; 0x39
 800e778:	f000 fda2 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(0x2C);
 800e77c:	202c      	movs	r0, #44	; 0x2c
 800e77e:	f000 fd9f 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(0x00);
 800e782:	2000      	movs	r0, #0
 800e784:	f000 fd9c 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(0x34);
 800e788:	2034      	movs	r0, #52	; 0x34
 800e78a:	f000 fd99 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(0x02);
 800e78e:	2002      	movs	r0, #2
 800e790:	f000 fd96 	bl	800f2c0 <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 800e794:	20cf      	movs	r0, #207	; 0xcf
 800e796:	f000 fd61 	bl	800f25c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800e79a:	2000      	movs	r0, #0
 800e79c:	f000 fd90 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800e7a0:	20c1      	movs	r0, #193	; 0xc1
 800e7a2:	f000 fd8d 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(0x30);
 800e7a6:	2030      	movs	r0, #48	; 0x30
 800e7a8:	f000 fd8a 	bl	800f2c0 <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 800e7ac:	20e8      	movs	r0, #232	; 0xe8
 800e7ae:	f000 fd55 	bl	800f25c <_LCD_SendCommand>
	_LCD_SendData(0x85);
 800e7b2:	2085      	movs	r0, #133	; 0x85
 800e7b4:	f000 fd84 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(0x00);
 800e7b8:	2000      	movs	r0, #0
 800e7ba:	f000 fd81 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(0x78);
 800e7be:	2078      	movs	r0, #120	; 0x78
 800e7c0:	f000 fd7e 	bl	800f2c0 <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 800e7c4:	20ea      	movs	r0, #234	; 0xea
 800e7c6:	f000 fd49 	bl	800f25c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800e7ca:	2000      	movs	r0, #0
 800e7cc:	f000 fd78 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(0x00);
 800e7d0:	2000      	movs	r0, #0
 800e7d2:	f000 fd75 	bl	800f2c0 <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 800e7d6:	20ed      	movs	r0, #237	; 0xed
 800e7d8:	f000 fd40 	bl	800f25c <_LCD_SendCommand>
	_LCD_SendData(0x64);
 800e7dc:	2064      	movs	r0, #100	; 0x64
 800e7de:	f000 fd6f 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(0x03);
 800e7e2:	2003      	movs	r0, #3
 800e7e4:	f000 fd6c 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(0x12);
 800e7e8:	2012      	movs	r0, #18
 800e7ea:	f000 fd69 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(0x81);
 800e7ee:	2081      	movs	r0, #129	; 0x81
 800e7f0:	f000 fd66 	bl	800f2c0 <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 800e7f4:	20f7      	movs	r0, #247	; 0xf7
 800e7f6:	f000 fd31 	bl	800f25c <_LCD_SendCommand>
	_LCD_SendData(0x20);
 800e7fa:	2020      	movs	r0, #32
 800e7fc:	f000 fd60 	bl	800f2c0 <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 800e800:	20c0      	movs	r0, #192	; 0xc0
 800e802:	f000 fd2b 	bl	800f25c <_LCD_SendCommand>
	_LCD_SendData(0x23);
 800e806:	2023      	movs	r0, #35	; 0x23
 800e808:	f000 fd5a 	bl	800f2c0 <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 800e80c:	20c1      	movs	r0, #193	; 0xc1
 800e80e:	f000 fd25 	bl	800f25c <_LCD_SendCommand>
	_LCD_SendData(0x10);
 800e812:	2010      	movs	r0, #16
 800e814:	f000 fd54 	bl	800f2c0 <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 800e818:	20c5      	movs	r0, #197	; 0xc5
 800e81a:	f000 fd1f 	bl	800f25c <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 800e81e:	203e      	movs	r0, #62	; 0x3e
 800e820:	f000 fd4e 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(0x28);
 800e824:	2028      	movs	r0, #40	; 0x28
 800e826:	f000 fd4b 	bl	800f2c0 <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 800e82a:	20c7      	movs	r0, #199	; 0xc7
 800e82c:	f000 fd16 	bl	800f25c <_LCD_SendCommand>
	_LCD_SendData(0x86);
 800e830:	2086      	movs	r0, #134	; 0x86
 800e832:	f000 fd45 	bl	800f2c0 <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 800e836:	2036      	movs	r0, #54	; 0x36
 800e838:	f000 fd10 	bl	800f25c <_LCD_SendCommand>
	_LCD_SendData(0x48);
 800e83c:	2048      	movs	r0, #72	; 0x48
 800e83e:	f000 fd3f 	bl	800f2c0 <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 800e842:	203a      	movs	r0, #58	; 0x3a
 800e844:	f000 fd0a 	bl	800f25c <_LCD_SendCommand>
	_LCD_SendData(0x55);
 800e848:	2055      	movs	r0, #85	; 0x55
 800e84a:	f000 fd39 	bl	800f2c0 <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 800e84e:	20b1      	movs	r0, #177	; 0xb1
 800e850:	f000 fd04 	bl	800f25c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800e854:	2000      	movs	r0, #0
 800e856:	f000 fd33 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(0x18);
 800e85a:	2018      	movs	r0, #24
 800e85c:	f000 fd30 	bl	800f2c0 <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 800e860:	20b6      	movs	r0, #182	; 0xb6
 800e862:	f000 fcfb 	bl	800f25c <_LCD_SendCommand>
	_LCD_SendData(0x08);
 800e866:	2008      	movs	r0, #8
 800e868:	f000 fd2a 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(0x82);
 800e86c:	2082      	movs	r0, #130	; 0x82
 800e86e:	f000 fd27 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(0x27);
 800e872:	2027      	movs	r0, #39	; 0x27
 800e874:	f000 fd24 	bl	800f2c0 <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 800e878:	20f2      	movs	r0, #242	; 0xf2
 800e87a:	f000 fcef 	bl	800f25c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800e87e:	2000      	movs	r0, #0
 800e880:	f000 fd1e 	bl	800f2c0 <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 800e884:	2026      	movs	r0, #38	; 0x26
 800e886:	f000 fce9 	bl	800f25c <_LCD_SendCommand>
	_LCD_SendData(0x01);
 800e88a:	2001      	movs	r0, #1
 800e88c:	f000 fd18 	bl	800f2c0 <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 800e890:	20e0      	movs	r0, #224	; 0xe0
 800e892:	f000 fce3 	bl	800f25c <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 800e896:	200f      	movs	r0, #15
 800e898:	f000 fd12 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(0x31);
 800e89c:	2031      	movs	r0, #49	; 0x31
 800e89e:	f000 fd0f 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(0x2B);
 800e8a2:	202b      	movs	r0, #43	; 0x2b
 800e8a4:	f000 fd0c 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800e8a8:	200c      	movs	r0, #12
 800e8aa:	f000 fd09 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800e8ae:	200e      	movs	r0, #14
 800e8b0:	f000 fd06 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(0x08);
 800e8b4:	2008      	movs	r0, #8
 800e8b6:	f000 fd03 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(0x4E);
 800e8ba:	204e      	movs	r0, #78	; 0x4e
 800e8bc:	f000 fd00 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(0xF1);
 800e8c0:	20f1      	movs	r0, #241	; 0xf1
 800e8c2:	f000 fcfd 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(0x37);
 800e8c6:	2037      	movs	r0, #55	; 0x37
 800e8c8:	f000 fcfa 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(0x07);
 800e8cc:	2007      	movs	r0, #7
 800e8ce:	f000 fcf7 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(0x10);
 800e8d2:	2010      	movs	r0, #16
 800e8d4:	f000 fcf4 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(0x03);
 800e8d8:	2003      	movs	r0, #3
 800e8da:	f000 fcf1 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800e8de:	200e      	movs	r0, #14
 800e8e0:	f000 fcee 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(0x09);
 800e8e4:	2009      	movs	r0, #9
 800e8e6:	f000 fceb 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(0x00);
 800e8ea:	2000      	movs	r0, #0
 800e8ec:	f000 fce8 	bl	800f2c0 <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 800e8f0:	20e1      	movs	r0, #225	; 0xe1
 800e8f2:	f000 fcb3 	bl	800f25c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800e8f6:	2000      	movs	r0, #0
 800e8f8:	f000 fce2 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800e8fc:	200e      	movs	r0, #14
 800e8fe:	f000 fcdf 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(0x14);
 800e902:	2014      	movs	r0, #20
 800e904:	f000 fcdc 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(0x03);
 800e908:	2003      	movs	r0, #3
 800e90a:	f000 fcd9 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(0x11);
 800e90e:	2011      	movs	r0, #17
 800e910:	f000 fcd6 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(0x07);
 800e914:	2007      	movs	r0, #7
 800e916:	f000 fcd3 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(0x31);
 800e91a:	2031      	movs	r0, #49	; 0x31
 800e91c:	f000 fcd0 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800e920:	20c1      	movs	r0, #193	; 0xc1
 800e922:	f000 fccd 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(0x48);
 800e926:	2048      	movs	r0, #72	; 0x48
 800e928:	f000 fcca 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(0x08);
 800e92c:	2008      	movs	r0, #8
 800e92e:	f000 fcc7 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800e932:	200f      	movs	r0, #15
 800e934:	f000 fcc4 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800e938:	200c      	movs	r0, #12
 800e93a:	f000 fcc1 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(0x31);
 800e93e:	2031      	movs	r0, #49	; 0x31
 800e940:	f000 fcbe 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(0x36);
 800e944:	2036      	movs	r0, #54	; 0x36
 800e946:	f000 fcbb 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800e94a:	200f      	movs	r0, #15
 800e94c:	f000 fcb8 	bl	800f2c0 <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 800e950:	2011      	movs	r0, #17
 800e952:	f000 fc83 	bl	800f25c <_LCD_SendCommand>
	HAL_Delay(240);
 800e956:	20f0      	movs	r0, #240	; 0xf0
 800e958:	f7f9 fd98 	bl	800848c <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 800e95c:	2029      	movs	r0, #41	; 0x29
 800e95e:	f000 fc7d 	bl	800f25c <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800e962:	2000      	movs	r0, #0
 800e964:	f000 fb4e 	bl	800f004 <ILI9341_Set_Rotation>
}
 800e968:	bf00      	nop
 800e96a:	bd80      	pop	{r7, pc}

0800e96c <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 800e96c:	b480      	push	{r7}
 800e96e:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e970:	4b0b      	ldr	r3, [pc, #44]	; (800e9a0 <ILI9341_SPI_Init+0x34>)
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e978:	2b40      	cmp	r3, #64	; 0x40
 800e97a:	d005      	beq.n	800e988 <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 800e97c:	4b08      	ldr	r3, [pc, #32]	; (800e9a0 <ILI9341_SPI_Init+0x34>)
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	4a07      	ldr	r2, [pc, #28]	; (800e9a0 <ILI9341_SPI_Init+0x34>)
 800e982:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e986:	6013      	str	r3, [r2, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e988:	4b06      	ldr	r3, [pc, #24]	; (800e9a4 <ILI9341_SPI_Init+0x38>)
 800e98a:	695b      	ldr	r3, [r3, #20]
 800e98c:	4a05      	ldr	r2, [pc, #20]	; (800e9a4 <ILI9341_SPI_Init+0x38>)
 800e98e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e992:	6153      	str	r3, [r2, #20]
}
 800e994:	bf00      	nop
 800e996:	46bd      	mov	sp, r7
 800e998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99c:	4770      	bx	lr
 800e99e:	bf00      	nop
 800e9a0:	40003c00 	.word	0x40003c00
 800e9a4:	48000400 	.word	0x48000400

0800e9a8 <ILI9341_Draw_Horizontal_Line>:
 *	Draw horizontal line
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 800e9a8:	b590      	push	{r4, r7, lr}
 800e9aa:	b087      	sub	sp, #28
 800e9ac:	af02      	add	r7, sp, #8
 800e9ae:	4604      	mov	r4, r0
 800e9b0:	4608      	mov	r0, r1
 800e9b2:	4611      	mov	r1, r2
 800e9b4:	461a      	mov	r2, r3
 800e9b6:	4623      	mov	r3, r4
 800e9b8:	80fb      	strh	r3, [r7, #6]
 800e9ba:	4603      	mov	r3, r0
 800e9bc:	80bb      	strh	r3, [r7, #4]
 800e9be:	460b      	mov	r3, r1
 800e9c0:	807b      	strh	r3, [r7, #2]
 800e9c2:	4613      	mov	r3, r2
 800e9c4:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800e9c6:	4b28      	ldr	r3, [pc, #160]	; (800ea68 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800e9c8:	881b      	ldrh	r3, [r3, #0]
 800e9ca:	b29b      	uxth	r3, r3
 800e9cc:	88fa      	ldrh	r2, [r7, #6]
 800e9ce:	429a      	cmp	r2, r3
 800e9d0:	d246      	bcs.n	800ea60 <ILI9341_Draw_Horizontal_Line+0xb8>
 800e9d2:	4b26      	ldr	r3, [pc, #152]	; (800ea6c <ILI9341_Draw_Horizontal_Line+0xc4>)
 800e9d4:	881b      	ldrh	r3, [r3, #0]
 800e9d6:	b29b      	uxth	r3, r3
 800e9d8:	88ba      	ldrh	r2, [r7, #4]
 800e9da:	429a      	cmp	r2, r3
 800e9dc:	d240      	bcs.n	800ea60 <ILI9341_Draw_Horizontal_Line+0xb8>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 800e9de:	88fa      	ldrh	r2, [r7, #6]
 800e9e0:	887b      	ldrh	r3, [r7, #2]
 800e9e2:	4413      	add	r3, r2
 800e9e4:	3b01      	subs	r3, #1
 800e9e6:	4a20      	ldr	r2, [pc, #128]	; (800ea68 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800e9e8:	8812      	ldrh	r2, [r2, #0]
 800e9ea:	b292      	uxth	r2, r2
 800e9ec:	4293      	cmp	r3, r2
 800e9ee:	db05      	blt.n	800e9fc <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 800e9f0:	4b1d      	ldr	r3, [pc, #116]	; (800ea68 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800e9f2:	881b      	ldrh	r3, [r3, #0]
 800e9f4:	b29a      	uxth	r2, r3
 800e9f6:	88fb      	ldrh	r3, [r7, #6]
 800e9f8:	1ad3      	subs	r3, r2, r3
 800e9fa:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(	xpos,
							ypos,
							(xpos + width) - 1,
 800e9fc:	88fa      	ldrh	r2, [r7, #6]
 800e9fe:	887b      	ldrh	r3, [r7, #2]
 800ea00:	4413      	add	r3, r2
 800ea02:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800ea04:	3b01      	subs	r3, #1
 800ea06:	b29a      	uxth	r2, r3
 800ea08:	88bb      	ldrh	r3, [r7, #4]
 800ea0a:	88b9      	ldrh	r1, [r7, #4]
 800ea0c:	88f8      	ldrh	r0, [r7, #6]
 800ea0e:	f000 f893 	bl	800eb38 <ILI9341_Set_Frame>
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.


	uint8_t truncated = 0;
 800ea12:	2300      	movs	r3, #0
 800ea14:	73fb      	strb	r3, [r7, #15]

	if((width & 1) && (width > 1))		// don't round down to zero!
 800ea16:	887b      	ldrh	r3, [r7, #2]
 800ea18:	f003 0301 	and.w	r3, r3, #1
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d009      	beq.n	800ea34 <ILI9341_Draw_Horizontal_Line+0x8c>
 800ea20:	887b      	ldrh	r3, [r7, #2]
 800ea22:	2b01      	cmp	r3, #1
 800ea24:	d906      	bls.n	800ea34 <ILI9341_Draw_Horizontal_Line+0x8c>
	{
		truncated = 1;
 800ea26:	2301      	movs	r3, #1
 800ea28:	73fb      	strb	r3, [r7, #15]
		width = ((width >> 1) * 2);
 800ea2a:	887b      	ldrh	r3, [r7, #2]
 800ea2c:	085b      	lsrs	r3, r3, #1
 800ea2e:	b29b      	uxth	r3, r3
 800ea30:	005b      	lsls	r3, r3, #1
 800ea32:	807b      	strh	r3, [r7, #2]
	}
	_LCD_Write_Frame(xpos, ypos, colour, width, LINE_CHUNK);
 800ea34:	887c      	ldrh	r4, [r7, #2]
 800ea36:	883a      	ldrh	r2, [r7, #0]
 800ea38:	88b9      	ldrh	r1, [r7, #4]
 800ea3a:	88f8      	ldrh	r0, [r7, #6]
 800ea3c:	2303      	movs	r3, #3
 800ea3e:	9300      	str	r3, [sp, #0]
 800ea40:	4623      	mov	r3, r4
 800ea42:	f000 fb5b 	bl	800f0fc <_LCD_Write_Frame>
	//
//TODO
	// add the truncated pixel now
	if(truncated)
 800ea46:	7bfb      	ldrb	r3, [r7, #15]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d00a      	beq.n	800ea62 <ILI9341_Draw_Horizontal_Line+0xba>
	{
		ILI9341_Draw_Pixel(	(xpos + width),
 800ea4c:	88fa      	ldrh	r2, [r7, #6]
 800ea4e:	887b      	ldrh	r3, [r7, #2]
 800ea50:	4413      	add	r3, r2
 800ea52:	b29b      	uxth	r3, r3
 800ea54:	883a      	ldrh	r2, [r7, #0]
 800ea56:	88b9      	ldrh	r1, [r7, #4]
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f000 f8e3 	bl	800ec24 <ILI9341_Draw_Pixel>
 800ea5e:	e000      	b.n	800ea62 <ILI9341_Draw_Horizontal_Line+0xba>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800ea60:	bf00      	nop
							(ypos),
							colour);
	}


}
 800ea62:	3714      	adds	r7, #20
 800ea64:	46bd      	mov	sp, r7
 800ea66:	bd90      	pop	{r4, r7, pc}
 800ea68:	20000c3e 	.word	0x20000c3e
 800ea6c:	20000c3c 	.word	0x20000c3c

0800ea70 <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 800ea70:	b590      	push	{r4, r7, lr}
 800ea72:	b087      	sub	sp, #28
 800ea74:	af02      	add	r7, sp, #8
 800ea76:	4604      	mov	r4, r0
 800ea78:	4608      	mov	r0, r1
 800ea7a:	4611      	mov	r1, r2
 800ea7c:	461a      	mov	r2, r3
 800ea7e:	4623      	mov	r3, r4
 800ea80:	80fb      	strh	r3, [r7, #6]
 800ea82:	4603      	mov	r3, r0
 800ea84:	80bb      	strh	r3, [r7, #4]
 800ea86:	460b      	mov	r3, r1
 800ea88:	807b      	strh	r3, [r7, #2]
 800ea8a:	4613      	mov	r3, r2
 800ea8c:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800ea8e:	4b28      	ldr	r3, [pc, #160]	; (800eb30 <ILI9341_Draw_Vertical_Line+0xc0>)
 800ea90:	881b      	ldrh	r3, [r3, #0]
 800ea92:	b29b      	uxth	r3, r3
 800ea94:	88fa      	ldrh	r2, [r7, #6]
 800ea96:	429a      	cmp	r2, r3
 800ea98:	d246      	bcs.n	800eb28 <ILI9341_Draw_Vertical_Line+0xb8>
 800ea9a:	4b26      	ldr	r3, [pc, #152]	; (800eb34 <ILI9341_Draw_Vertical_Line+0xc4>)
 800ea9c:	881b      	ldrh	r3, [r3, #0]
 800ea9e:	b29b      	uxth	r3, r3
 800eaa0:	88ba      	ldrh	r2, [r7, #4]
 800eaa2:	429a      	cmp	r2, r3
 800eaa4:	d240      	bcs.n	800eb28 <ILI9341_Draw_Vertical_Line+0xb8>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 800eaa6:	88ba      	ldrh	r2, [r7, #4]
 800eaa8:	887b      	ldrh	r3, [r7, #2]
 800eaaa:	4413      	add	r3, r2
 800eaac:	3b01      	subs	r3, #1
 800eaae:	4a21      	ldr	r2, [pc, #132]	; (800eb34 <ILI9341_Draw_Vertical_Line+0xc4>)
 800eab0:	8812      	ldrh	r2, [r2, #0]
 800eab2:	b292      	uxth	r2, r2
 800eab4:	4293      	cmp	r3, r2
 800eab6:	db05      	blt.n	800eac4 <ILI9341_Draw_Vertical_Line+0x54>
	{
		height= LCD_HEIGHT - ypos;
 800eab8:	4b1e      	ldr	r3, [pc, #120]	; (800eb34 <ILI9341_Draw_Vertical_Line+0xc4>)
 800eaba:	881b      	ldrh	r3, [r3, #0]
 800eabc:	b29a      	uxth	r2, r3
 800eabe:	88bb      	ldrh	r3, [r7, #4]
 800eac0:	1ad3      	subs	r3, r2, r3
 800eac2:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 800eac4:	88ba      	ldrh	r2, [r7, #4]
 800eac6:	887b      	ldrh	r3, [r7, #2]
 800eac8:	4413      	add	r3, r2
 800eaca:	b29b      	uxth	r3, r3
 800eacc:	3b01      	subs	r3, #1
 800eace:	b29b      	uxth	r3, r3
 800ead0:	88fa      	ldrh	r2, [r7, #6]
 800ead2:	88b9      	ldrh	r1, [r7, #4]
 800ead4:	88f8      	ldrh	r0, [r7, #6]
 800ead6:	f000 f82f 	bl	800eb38 <ILI9341_Set_Frame>

	uint8_t truncated = 0;
 800eada:	2300      	movs	r3, #0
 800eadc:	73fb      	strb	r3, [r7, #15]

	if((height & 1) && (height > 1))		// don't round down to zero!
 800eade:	887b      	ldrh	r3, [r7, #2]
 800eae0:	f003 0301 	and.w	r3, r3, #1
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d009      	beq.n	800eafc <ILI9341_Draw_Vertical_Line+0x8c>
 800eae8:	887b      	ldrh	r3, [r7, #2]
 800eaea:	2b01      	cmp	r3, #1
 800eaec:	d906      	bls.n	800eafc <ILI9341_Draw_Vertical_Line+0x8c>
	{
		truncated = 1;
 800eaee:	2301      	movs	r3, #1
 800eaf0:	73fb      	strb	r3, [r7, #15]
		height = ((height >> 1) * 2);
 800eaf2:	887b      	ldrh	r3, [r7, #2]
 800eaf4:	085b      	lsrs	r3, r3, #1
 800eaf6:	b29b      	uxth	r3, r3
 800eaf8:	005b      	lsls	r3, r3, #1
 800eafa:	807b      	strh	r3, [r7, #2]
//TODO


	//

	if(truncated)
 800eafc:	7bfb      	ldrb	r3, [r7, #15]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d008      	beq.n	800eb14 <ILI9341_Draw_Vertical_Line+0xa4>
	{
		ILI9341_Draw_Pixel(	(xpos),
 800eb02:	88ba      	ldrh	r2, [r7, #4]
 800eb04:	887b      	ldrh	r3, [r7, #2]
 800eb06:	4413      	add	r3, r2
 800eb08:	b299      	uxth	r1, r3
 800eb0a:	883a      	ldrh	r2, [r7, #0]
 800eb0c:	88fb      	ldrh	r3, [r7, #6]
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f000 f888 	bl	800ec24 <ILI9341_Draw_Pixel>
							(ypos + height),
							colour);
	}

	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 800eb14:	887c      	ldrh	r4, [r7, #2]
 800eb16:	883a      	ldrh	r2, [r7, #0]
 800eb18:	88b9      	ldrh	r1, [r7, #4]
 800eb1a:	88f8      	ldrh	r0, [r7, #6]
 800eb1c:	2303      	movs	r3, #3
 800eb1e:	9300      	str	r3, [sp, #0]
 800eb20:	4623      	mov	r3, r4
 800eb22:	f000 faeb 	bl	800f0fc <_LCD_Write_Frame>
 800eb26:	e000      	b.n	800eb2a <ILI9341_Draw_Vertical_Line+0xba>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800eb28:	bf00      	nop
}
 800eb2a:	3714      	adds	r7, #20
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	bd90      	pop	{r4, r7, pc}
 800eb30:	20000c3e 	.word	0x20000c3e
 800eb34:	20000c3c 	.word	0x20000c3c

0800eb38 <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 800eb38:	b590      	push	{r4, r7, lr}
 800eb3a:	b083      	sub	sp, #12
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	4604      	mov	r4, r0
 800eb40:	4608      	mov	r0, r1
 800eb42:	4611      	mov	r1, r2
 800eb44:	461a      	mov	r2, r3
 800eb46:	4623      	mov	r3, r4
 800eb48:	80fb      	strh	r3, [r7, #6]
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	80bb      	strh	r3, [r7, #4]
 800eb4e:	460b      	mov	r3, r1
 800eb50:	807b      	strh	r3, [r7, #2]
 800eb52:	4613      	mov	r3, r2
 800eb54:	803b      	strh	r3, [r7, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 800eb56:	202a      	movs	r0, #42	; 0x2a
 800eb58:	f000 fb80 	bl	800f25c <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 800eb5c:	88fb      	ldrh	r3, [r7, #6]
 800eb5e:	0a1b      	lsrs	r3, r3, #8
 800eb60:	b29b      	uxth	r3, r3
 800eb62:	b2db      	uxtb	r3, r3
 800eb64:	4618      	mov	r0, r3
 800eb66:	f000 fbab 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(sc);
 800eb6a:	88fb      	ldrh	r3, [r7, #6]
 800eb6c:	b2db      	uxtb	r3, r3
 800eb6e:	4618      	mov	r0, r3
 800eb70:	f000 fba6 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 800eb74:	887b      	ldrh	r3, [r7, #2]
 800eb76:	0a1b      	lsrs	r3, r3, #8
 800eb78:	b29b      	uxth	r3, r3
 800eb7a:	b2db      	uxtb	r3, r3
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	f000 fb9f 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(ec);
 800eb82:	887b      	ldrh	r3, [r7, #2]
 800eb84:	b2db      	uxtb	r3, r3
 800eb86:	4618      	mov	r0, r3
 800eb88:	f000 fb9a 	bl	800f2c0 <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 800eb8c:	202b      	movs	r0, #43	; 0x2b
 800eb8e:	f000 fb65 	bl	800f25c <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 800eb92:	88bb      	ldrh	r3, [r7, #4]
 800eb94:	0a1b      	lsrs	r3, r3, #8
 800eb96:	b29b      	uxth	r3, r3
 800eb98:	b2db      	uxtb	r3, r3
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	f000 fb90 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(sp);
 800eba0:	88bb      	ldrh	r3, [r7, #4]
 800eba2:	b2db      	uxtb	r3, r3
 800eba4:	4618      	mov	r0, r3
 800eba6:	f000 fb8b 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 800ebaa:	883b      	ldrh	r3, [r7, #0]
 800ebac:	0a1b      	lsrs	r3, r3, #8
 800ebae:	b29b      	uxth	r3, r3
 800ebb0:	b2db      	uxtb	r3, r3
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	f000 fb84 	bl	800f2c0 <_LCD_SendData>
	_LCD_SendData(ep);
 800ebb8:	883b      	ldrh	r3, [r7, #0]
 800ebba:	b2db      	uxtb	r3, r3
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	f000 fb7f 	bl	800f2c0 <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 800ebc2:	202c      	movs	r0, #44	; 0x2c
 800ebc4:	f000 fb4a 	bl	800f25c <_LCD_SendCommand>
}
 800ebc8:	bf00      	nop
 800ebca:	370c      	adds	r7, #12
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	bd90      	pop	{r4, r7, pc}

0800ebd0 <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b084      	sub	sp, #16
 800ebd4:	af02      	add	r7, sp, #8
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 800ebda:	4b10      	ldr	r3, [pc, #64]	; (800ec1c <ILI9341_Fill_Screen+0x4c>)
 800ebdc:	881b      	ldrh	r3, [r3, #0]
 800ebde:	b29a      	uxth	r2, r3
 800ebe0:	4b0f      	ldr	r3, [pc, #60]	; (800ec20 <ILI9341_Fill_Screen+0x50>)
 800ebe2:	881b      	ldrh	r3, [r3, #0]
 800ebe4:	b29b      	uxth	r3, r3
 800ebe6:	2100      	movs	r1, #0
 800ebe8:	2000      	movs	r0, #0
 800ebea:	f7ff ffa5 	bl	800eb38 <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 800ebee:	4b0b      	ldr	r3, [pc, #44]	; (800ec1c <ILI9341_Fill_Screen+0x4c>)
 800ebf0:	881b      	ldrh	r3, [r3, #0]
 800ebf2:	b29b      	uxth	r3, r3
 800ebf4:	461a      	mov	r2, r3
 800ebf6:	4b0a      	ldr	r3, [pc, #40]	; (800ec20 <ILI9341_Fill_Screen+0x50>)
 800ebf8:	881b      	ldrh	r3, [r3, #0]
 800ebfa:	b29b      	uxth	r3, r3
 800ebfc:	fb03 f302 	mul.w	r3, r3, r2
 800ec00:	4619      	mov	r1, r3
 800ec02:	88fa      	ldrh	r2, [r7, #6]
 800ec04:	2304      	movs	r3, #4
 800ec06:	9300      	str	r3, [sp, #0]
 800ec08:	460b      	mov	r3, r1
 800ec0a:	2100      	movs	r1, #0
 800ec0c:	2000      	movs	r0, #0
 800ec0e:	f000 fa75 	bl	800f0fc <_LCD_Write_Frame>
}
 800ec12:	bf00      	nop
 800ec14:	3708      	adds	r7, #8
 800ec16:	46bd      	mov	sp, r7
 800ec18:	bd80      	pop	{r7, pc}
 800ec1a:	bf00      	nop
 800ec1c:	20000c3e 	.word	0x20000c3e
 800ec20:	20000c3c 	.word	0x20000c3c

0800ec24 <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b08e      	sub	sp, #56	; 0x38
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	80fb      	strh	r3, [r7, #6]
 800ec2e:	460b      	mov	r3, r1
 800ec30:	80bb      	strh	r3, [r7, #4]
 800ec32:	4613      	mov	r3, r2
 800ec34:	807b      	strh	r3, [r7, #2]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800ec36:	4b98      	ldr	r3, [pc, #608]	; (800ee98 <ILI9341_Draw_Pixel+0x274>)
 800ec38:	881b      	ldrh	r3, [r3, #0]
 800ec3a:	b29b      	uxth	r3, r3
 800ec3c:	88fa      	ldrh	r2, [r7, #6]
 800ec3e:	429a      	cmp	r2, r3
 800ec40:	f080 8143 	bcs.w	800eeca <ILI9341_Draw_Pixel+0x2a6>
 800ec44:	4b95      	ldr	r3, [pc, #596]	; (800ee9c <ILI9341_Draw_Pixel+0x278>)
 800ec46:	881b      	ldrh	r3, [r3, #0]
 800ec48:	b29b      	uxth	r3, r3
 800ec4a:	88ba      	ldrh	r2, [r7, #4]
 800ec4c:	429a      	cmp	r2, r3
 800ec4e:	f080 813c 	bcs.w	800eeca <ILI9341_Draw_Pixel+0x2a6>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800ec52:	4b93      	ldr	r3, [pc, #588]	; (800eea0 <ILI9341_Draw_Pixel+0x27c>)
 800ec54:	695b      	ldr	r3, [r3, #20]
 800ec56:	4a92      	ldr	r2, [pc, #584]	; (800eea0 <ILI9341_Draw_Pixel+0x27c>)
 800ec58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec5c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ec5e:	4b90      	ldr	r3, [pc, #576]	; (800eea0 <ILI9341_Draw_Pixel+0x27c>)
 800ec60:	695b      	ldr	r3, [r3, #20]
 800ec62:	4a8f      	ldr	r2, [pc, #572]	; (800eea0 <ILI9341_Draw_Pixel+0x27c>)
 800ec64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ec68:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2A, 0, 10);
 800ec6a:	220a      	movs	r2, #10
 800ec6c:	2100      	movs	r1, #0
 800ec6e:	202a      	movs	r0, #42	; 0x2a
 800ec70:	f000 fb58 	bl	800f324 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ec74:	2300      	movs	r3, #0
 800ec76:	637b      	str	r3, [r7, #52]	; 0x34
 800ec78:	e008      	b.n	800ec8c <ILI9341_Draw_Pixel+0x68>
 800ec7a:	4b89      	ldr	r3, [pc, #548]	; (800eea0 <ILI9341_Draw_Pixel+0x27c>)
 800ec7c:	695b      	ldr	r3, [r3, #20]
 800ec7e:	4a88      	ldr	r2, [pc, #544]	; (800eea0 <ILI9341_Draw_Pixel+0x27c>)
 800ec80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ec84:	6153      	str	r3, [r2, #20]
 800ec86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec88:	3301      	adds	r3, #1
 800ec8a:	637b      	str	r3, [r7, #52]	; 0x34
 800ec8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec8e:	2b02      	cmp	r3, #2
 800ec90:	ddf3      	ble.n	800ec7a <ILI9341_Draw_Pixel+0x56>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800ec92:	4b83      	ldr	r3, [pc, #524]	; (800eea0 <ILI9341_Draw_Pixel+0x27c>)
 800ec94:	695b      	ldr	r3, [r3, #20]
 800ec96:	4a82      	ldr	r2, [pc, #520]	; (800eea0 <ILI9341_Draw_Pixel+0x27c>)
 800ec98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec9c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800ec9e:	4b80      	ldr	r3, [pc, #512]	; (800eea0 <ILI9341_Draw_Pixel+0x27c>)
 800eca0:	695b      	ldr	r3, [r3, #20]
 800eca2:	4a7f      	ldr	r2, [pc, #508]	; (800eea0 <ILI9341_Draw_Pixel+0x27c>)
 800eca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eca8:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ecaa:	4b7d      	ldr	r3, [pc, #500]	; (800eea0 <ILI9341_Draw_Pixel+0x27c>)
 800ecac:	695b      	ldr	r3, [r3, #20]
 800ecae:	4a7c      	ldr	r2, [pc, #496]	; (800eea0 <ILI9341_Draw_Pixel+0x27c>)
 800ecb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ecb4:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] = { x >> 8, x, (x + 1) >> 8, (x + 1) };
 800ecb6:	88fb      	ldrh	r3, [r7, #6]
 800ecb8:	0a1b      	lsrs	r3, r3, #8
 800ecba:	b29b      	uxth	r3, r3
 800ecbc:	b2db      	uxtb	r3, r3
 800ecbe:	753b      	strb	r3, [r7, #20]
 800ecc0:	88fb      	ldrh	r3, [r7, #6]
 800ecc2:	b2db      	uxtb	r3, r3
 800ecc4:	757b      	strb	r3, [r7, #21]
 800ecc6:	88fb      	ldrh	r3, [r7, #6]
 800ecc8:	3301      	adds	r3, #1
 800ecca:	121b      	asrs	r3, r3, #8
 800eccc:	b2db      	uxtb	r3, r3
 800ecce:	75bb      	strb	r3, [r7, #22]
 800ecd0:	88fb      	ldrh	r3, [r7, #6]
 800ecd2:	b2db      	uxtb	r3, r3
 800ecd4:	3301      	adds	r3, #1
 800ecd6:	b2db      	uxtb	r3, r3
 800ecd8:	75fb      	strb	r3, [r7, #23]
	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 10);
 800ecda:	f107 0014 	add.w	r0, r7, #20
 800ecde:	230a      	movs	r3, #10
 800ece0:	2200      	movs	r2, #0
 800ece2:	2104      	movs	r1, #4
 800ece4:	f000 fb50 	bl	800f388 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ece8:	2300      	movs	r3, #0
 800ecea:	633b      	str	r3, [r7, #48]	; 0x30
 800ecec:	e008      	b.n	800ed00 <ILI9341_Draw_Pixel+0xdc>
 800ecee:	4b6c      	ldr	r3, [pc, #432]	; (800eea0 <ILI9341_Draw_Pixel+0x27c>)
 800ecf0:	695b      	ldr	r3, [r3, #20]
 800ecf2:	4a6b      	ldr	r2, [pc, #428]	; (800eea0 <ILI9341_Draw_Pixel+0x27c>)
 800ecf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ecf8:	6153      	str	r3, [r2, #20]
 800ecfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecfc:	3301      	adds	r3, #1
 800ecfe:	633b      	str	r3, [r7, #48]	; 0x30
 800ed00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed02:	2b02      	cmp	r3, #2
 800ed04:	ddf3      	ble.n	800ecee <ILI9341_Draw_Pixel+0xca>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800ed06:	4b66      	ldr	r3, [pc, #408]	; (800eea0 <ILI9341_Draw_Pixel+0x27c>)
 800ed08:	695b      	ldr	r3, [r3, #20]
 800ed0a:	4a65      	ldr	r2, [pc, #404]	; (800eea0 <ILI9341_Draw_Pixel+0x27c>)
 800ed0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed10:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800ed12:	4b63      	ldr	r3, [pc, #396]	; (800eea0 <ILI9341_Draw_Pixel+0x27c>)
 800ed14:	695b      	ldr	r3, [r3, #20]
 800ed16:	4a62      	ldr	r2, [pc, #392]	; (800eea0 <ILI9341_Draw_Pixel+0x27c>)
 800ed18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ed1c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ed1e:	4b60      	ldr	r3, [pc, #384]	; (800eea0 <ILI9341_Draw_Pixel+0x27c>)
 800ed20:	695b      	ldr	r3, [r3, #20]
 800ed22:	4a5f      	ldr	r2, [pc, #380]	; (800eea0 <ILI9341_Draw_Pixel+0x27c>)
 800ed24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ed28:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2B, 0, 10);
 800ed2a:	220a      	movs	r2, #10
 800ed2c:	2100      	movs	r1, #0
 800ed2e:	202b      	movs	r0, #43	; 0x2b
 800ed30:	f000 faf8 	bl	800f324 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ed34:	2300      	movs	r3, #0
 800ed36:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ed38:	e008      	b.n	800ed4c <ILI9341_Draw_Pixel+0x128>
 800ed3a:	4b59      	ldr	r3, [pc, #356]	; (800eea0 <ILI9341_Draw_Pixel+0x27c>)
 800ed3c:	695b      	ldr	r3, [r3, #20]
 800ed3e:	4a58      	ldr	r2, [pc, #352]	; (800eea0 <ILI9341_Draw_Pixel+0x27c>)
 800ed40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ed44:	6153      	str	r3, [r2, #20]
 800ed46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed48:	3301      	adds	r3, #1
 800ed4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ed4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed4e:	2b02      	cmp	r3, #2
 800ed50:	ddf3      	ble.n	800ed3a <ILI9341_Draw_Pixel+0x116>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800ed52:	4b53      	ldr	r3, [pc, #332]	; (800eea0 <ILI9341_Draw_Pixel+0x27c>)
 800ed54:	695b      	ldr	r3, [r3, #20]
 800ed56:	4a52      	ldr	r2, [pc, #328]	; (800eea0 <ILI9341_Draw_Pixel+0x27c>)
 800ed58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed5c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800ed5e:	4b50      	ldr	r3, [pc, #320]	; (800eea0 <ILI9341_Draw_Pixel+0x27c>)
 800ed60:	695b      	ldr	r3, [r3, #20]
 800ed62:	4a4f      	ldr	r2, [pc, #316]	; (800eea0 <ILI9341_Draw_Pixel+0x27c>)
 800ed64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed68:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ed6a:	4b4d      	ldr	r3, [pc, #308]	; (800eea0 <ILI9341_Draw_Pixel+0x27c>)
 800ed6c:	695b      	ldr	r3, [r3, #20]
 800ed6e:	4a4c      	ldr	r2, [pc, #304]	; (800eea0 <ILI9341_Draw_Pixel+0x27c>)
 800ed70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ed74:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] = { y >> 8, y, (y + 1) >> 8, (y + 1) };
 800ed76:	88bb      	ldrh	r3, [r7, #4]
 800ed78:	0a1b      	lsrs	r3, r3, #8
 800ed7a:	b29b      	uxth	r3, r3
 800ed7c:	b2db      	uxtb	r3, r3
 800ed7e:	743b      	strb	r3, [r7, #16]
 800ed80:	88bb      	ldrh	r3, [r7, #4]
 800ed82:	b2db      	uxtb	r3, r3
 800ed84:	747b      	strb	r3, [r7, #17]
 800ed86:	88bb      	ldrh	r3, [r7, #4]
 800ed88:	3301      	adds	r3, #1
 800ed8a:	121b      	asrs	r3, r3, #8
 800ed8c:	b2db      	uxtb	r3, r3
 800ed8e:	74bb      	strb	r3, [r7, #18]
 800ed90:	88bb      	ldrh	r3, [r7, #4]
 800ed92:	b2db      	uxtb	r3, r3
 800ed94:	3301      	adds	r3, #1
 800ed96:	b2db      	uxtb	r3, r3
 800ed98:	74fb      	strb	r3, [r7, #19]
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 10);
 800ed9a:	f107 0010 	add.w	r0, r7, #16
 800ed9e:	230a      	movs	r3, #10
 800eda0:	2200      	movs	r2, #0
 800eda2:	2104      	movs	r1, #4
 800eda4:	f000 faf0 	bl	800f388 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800eda8:	2300      	movs	r3, #0
 800edaa:	62bb      	str	r3, [r7, #40]	; 0x28
 800edac:	e008      	b.n	800edc0 <ILI9341_Draw_Pixel+0x19c>
 800edae:	4b3c      	ldr	r3, [pc, #240]	; (800eea0 <ILI9341_Draw_Pixel+0x27c>)
 800edb0:	695b      	ldr	r3, [r3, #20]
 800edb2:	4a3b      	ldr	r2, [pc, #236]	; (800eea0 <ILI9341_Draw_Pixel+0x27c>)
 800edb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800edb8:	6153      	str	r3, [r2, #20]
 800edba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edbc:	3301      	adds	r3, #1
 800edbe:	62bb      	str	r3, [r7, #40]	; 0x28
 800edc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edc2:	2b02      	cmp	r3, #2
 800edc4:	ddf3      	ble.n	800edae <ILI9341_Draw_Pixel+0x18a>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800edc6:	4b36      	ldr	r3, [pc, #216]	; (800eea0 <ILI9341_Draw_Pixel+0x27c>)
 800edc8:	695b      	ldr	r3, [r3, #20]
 800edca:	4a35      	ldr	r2, [pc, #212]	; (800eea0 <ILI9341_Draw_Pixel+0x27c>)
 800edcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800edd0:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800edd2:	4b33      	ldr	r3, [pc, #204]	; (800eea0 <ILI9341_Draw_Pixel+0x27c>)
 800edd4:	695b      	ldr	r3, [r3, #20]
 800edd6:	4a32      	ldr	r2, [pc, #200]	; (800eea0 <ILI9341_Draw_Pixel+0x27c>)
 800edd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eddc:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800edde:	4b30      	ldr	r3, [pc, #192]	; (800eea0 <ILI9341_Draw_Pixel+0x27c>)
 800ede0:	695b      	ldr	r3, [r3, #20]
 800ede2:	4a2f      	ldr	r2, [pc, #188]	; (800eea0 <ILI9341_Draw_Pixel+0x27c>)
 800ede4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ede8:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2C, 0, 10);
 800edea:	220a      	movs	r2, #10
 800edec:	2100      	movs	r1, #0
 800edee:	202c      	movs	r0, #44	; 0x2c
 800edf0:	f000 fa98 	bl	800f324 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800edf4:	2300      	movs	r3, #0
 800edf6:	627b      	str	r3, [r7, #36]	; 0x24
 800edf8:	e008      	b.n	800ee0c <ILI9341_Draw_Pixel+0x1e8>
 800edfa:	4b29      	ldr	r3, [pc, #164]	; (800eea0 <ILI9341_Draw_Pixel+0x27c>)
 800edfc:	695b      	ldr	r3, [r3, #20]
 800edfe:	4a28      	ldr	r2, [pc, #160]	; (800eea0 <ILI9341_Draw_Pixel+0x27c>)
 800ee00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ee04:	6153      	str	r3, [r2, #20]
 800ee06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee08:	3301      	adds	r3, #1
 800ee0a:	627b      	str	r3, [r7, #36]	; 0x24
 800ee0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee0e:	2b02      	cmp	r3, #2
 800ee10:	ddf3      	ble.n	800edfa <ILI9341_Draw_Pixel+0x1d6>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800ee12:	4b23      	ldr	r3, [pc, #140]	; (800eea0 <ILI9341_Draw_Pixel+0x27c>)
 800ee14:	695b      	ldr	r3, [r3, #20]
 800ee16:	4a22      	ldr	r2, [pc, #136]	; (800eea0 <ILI9341_Draw_Pixel+0x27c>)
 800ee18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee1c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800ee1e:	4b20      	ldr	r3, [pc, #128]	; (800eea0 <ILI9341_Draw_Pixel+0x27c>)
 800ee20:	695b      	ldr	r3, [r3, #20]
 800ee22:	4a1f      	ldr	r2, [pc, #124]	; (800eea0 <ILI9341_Draw_Pixel+0x27c>)
 800ee24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee28:	6153      	str	r3, [r2, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ee2a:	4b1d      	ldr	r3, [pc, #116]	; (800eea0 <ILI9341_Draw_Pixel+0x27c>)
 800ee2c:	695b      	ldr	r3, [r3, #20]
 800ee2e:	4a1c      	ldr	r2, [pc, #112]	; (800eea0 <ILI9341_Draw_Pixel+0x27c>)
 800ee30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ee34:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 800ee36:	887b      	ldrh	r3, [r7, #2]
 800ee38:	0a1b      	lsrs	r3, r3, #8
 800ee3a:	b29b      	uxth	r3, r3
 800ee3c:	b2db      	uxtb	r3, r3
 800ee3e:	733b      	strb	r3, [r7, #12]
 800ee40:	887b      	ldrh	r3, [r7, #2]
 800ee42:	b2db      	uxtb	r3, r3
 800ee44:	737b      	strb	r3, [r7, #13]
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 2, 0, 1);
 800ee46:	f107 000c 	add.w	r0, r7, #12
 800ee4a:	2301      	movs	r3, #1
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	2102      	movs	r1, #2
 800ee50:	f000 fa9a 	bl	800f388 <_SPI_SendByteMultiByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ee54:	2300      	movs	r3, #0
 800ee56:	623b      	str	r3, [r7, #32]
 800ee58:	e008      	b.n	800ee6c <ILI9341_Draw_Pixel+0x248>
 800ee5a:	4b11      	ldr	r3, [pc, #68]	; (800eea0 <ILI9341_Draw_Pixel+0x27c>)
 800ee5c:	695b      	ldr	r3, [r3, #20]
 800ee5e:	4a10      	ldr	r2, [pc, #64]	; (800eea0 <ILI9341_Draw_Pixel+0x27c>)
 800ee60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ee64:	6153      	str	r3, [r2, #20]
 800ee66:	6a3b      	ldr	r3, [r7, #32]
 800ee68:	3301      	adds	r3, #1
 800ee6a:	623b      	str	r3, [r7, #32]
 800ee6c:	6a3b      	ldr	r3, [r7, #32]
 800ee6e:	2b02      	cmp	r3, #2
 800ee70:	ddf3      	ble.n	800ee5a <ILI9341_Draw_Pixel+0x236>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ee72:	2300      	movs	r3, #0
 800ee74:	61fb      	str	r3, [r7, #28]
 800ee76:	e008      	b.n	800ee8a <ILI9341_Draw_Pixel+0x266>
 800ee78:	4b09      	ldr	r3, [pc, #36]	; (800eea0 <ILI9341_Draw_Pixel+0x27c>)
 800ee7a:	695b      	ldr	r3, [r3, #20]
 800ee7c:	4a08      	ldr	r2, [pc, #32]	; (800eea0 <ILI9341_Draw_Pixel+0x27c>)
 800ee7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ee82:	6153      	str	r3, [r2, #20]
 800ee84:	69fb      	ldr	r3, [r7, #28]
 800ee86:	3301      	adds	r3, #1
 800ee88:	61fb      	str	r3, [r7, #28]
 800ee8a:	69fb      	ldr	r3, [r7, #28]
 800ee8c:	2b02      	cmp	r3, #2
 800ee8e:	ddf3      	ble.n	800ee78 <ILI9341_Draw_Pixel+0x254>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ee90:	2300      	movs	r3, #0
 800ee92:	61bb      	str	r3, [r7, #24]
 800ee94:	e00f      	b.n	800eeb6 <ILI9341_Draw_Pixel+0x292>
 800ee96:	bf00      	nop
 800ee98:	20000c3e 	.word	0x20000c3e
 800ee9c:	20000c3c 	.word	0x20000c3c
 800eea0:	48000400 	.word	0x48000400
 800eea4:	4b0b      	ldr	r3, [pc, #44]	; (800eed4 <ILI9341_Draw_Pixel+0x2b0>)
 800eea6:	695b      	ldr	r3, [r3, #20]
 800eea8:	4a0a      	ldr	r2, [pc, #40]	; (800eed4 <ILI9341_Draw_Pixel+0x2b0>)
 800eeaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eeae:	6153      	str	r3, [r2, #20]
 800eeb0:	69bb      	ldr	r3, [r7, #24]
 800eeb2:	3301      	adds	r3, #1
 800eeb4:	61bb      	str	r3, [r7, #24]
 800eeb6:	69bb      	ldr	r3, [r7, #24]
 800eeb8:	2b02      	cmp	r3, #2
 800eeba:	ddf3      	ble.n	800eea4 <ILI9341_Draw_Pixel+0x280>


	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800eebc:	4b05      	ldr	r3, [pc, #20]	; (800eed4 <ILI9341_Draw_Pixel+0x2b0>)
 800eebe:	695b      	ldr	r3, [r3, #20]
 800eec0:	4a04      	ldr	r2, [pc, #16]	; (800eed4 <ILI9341_Draw_Pixel+0x2b0>)
 800eec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eec6:	6153      	str	r3, [r2, #20]
 800eec8:	e000      	b.n	800eecc <ILI9341_Draw_Pixel+0x2a8>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800eeca:	bf00      	nop


}
 800eecc:	3738      	adds	r7, #56	; 0x38
 800eece:	46bd      	mov	sp, r7
 800eed0:	bd80      	pop	{r7, pc}
 800eed2:	bf00      	nop
 800eed4:	48000400 	.word	0x48000400

0800eed8 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 800eed8:	b590      	push	{r4, r7, lr}
 800eeda:	b087      	sub	sp, #28
 800eedc:	af02      	add	r7, sp, #8
 800eede:	4604      	mov	r4, r0
 800eee0:	4608      	mov	r0, r1
 800eee2:	4611      	mov	r1, r2
 800eee4:	461a      	mov	r2, r3
 800eee6:	4623      	mov	r3, r4
 800eee8:	80fb      	strh	r3, [r7, #6]
 800eeea:	4603      	mov	r3, r0
 800eeec:	80bb      	strh	r3, [r7, #4]
 800eeee:	460b      	mov	r3, r1
 800eef0:	807b      	strh	r3, [r7, #2]
 800eef2:	4613      	mov	r3, r2
 800eef4:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800eef6:	4b41      	ldr	r3, [pc, #260]	; (800effc <ILI9341_Draw_Rectangle+0x124>)
 800eef8:	881b      	ldrh	r3, [r3, #0]
 800eefa:	b29b      	uxth	r3, r3
 800eefc:	88fa      	ldrh	r2, [r7, #6]
 800eefe:	429a      	cmp	r2, r3
 800ef00:	d278      	bcs.n	800eff4 <ILI9341_Draw_Rectangle+0x11c>
 800ef02:	4b3f      	ldr	r3, [pc, #252]	; (800f000 <ILI9341_Draw_Rectangle+0x128>)
 800ef04:	881b      	ldrh	r3, [r3, #0]
 800ef06:	b29b      	uxth	r3, r3
 800ef08:	88ba      	ldrh	r2, [r7, #4]
 800ef0a:	429a      	cmp	r2, r3
 800ef0c:	d272      	bcs.n	800eff4 <ILI9341_Draw_Rectangle+0x11c>
	if((xpos+width-1)>=LCD_WIDTH)
 800ef0e:	88fa      	ldrh	r2, [r7, #6]
 800ef10:	887b      	ldrh	r3, [r7, #2]
 800ef12:	4413      	add	r3, r2
 800ef14:	3b01      	subs	r3, #1
 800ef16:	4a39      	ldr	r2, [pc, #228]	; (800effc <ILI9341_Draw_Rectangle+0x124>)
 800ef18:	8812      	ldrh	r2, [r2, #0]
 800ef1a:	b292      	uxth	r2, r2
 800ef1c:	4293      	cmp	r3, r2
 800ef1e:	db05      	blt.n	800ef2c <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 800ef20:	4b36      	ldr	r3, [pc, #216]	; (800effc <ILI9341_Draw_Rectangle+0x124>)
 800ef22:	881b      	ldrh	r3, [r3, #0]
 800ef24:	b29a      	uxth	r2, r3
 800ef26:	88fb      	ldrh	r3, [r7, #6]
 800ef28:	1ad3      	subs	r3, r2, r3
 800ef2a:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 800ef2c:	88ba      	ldrh	r2, [r7, #4]
 800ef2e:	883b      	ldrh	r3, [r7, #0]
 800ef30:	4413      	add	r3, r2
 800ef32:	3b01      	subs	r3, #1
 800ef34:	4a32      	ldr	r2, [pc, #200]	; (800f000 <ILI9341_Draw_Rectangle+0x128>)
 800ef36:	8812      	ldrh	r2, [r2, #0]
 800ef38:	b292      	uxth	r2, r2
 800ef3a:	4293      	cmp	r3, r2
 800ef3c:	db05      	blt.n	800ef4a <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 800ef3e:	4b30      	ldr	r3, [pc, #192]	; (800f000 <ILI9341_Draw_Rectangle+0x128>)
 800ef40:	881b      	ldrh	r3, [r3, #0]
 800ef42:	b29a      	uxth	r2, r3
 800ef44:	88bb      	ldrh	r3, [r7, #4]
 800ef46:	1ad3      	subs	r3, r2, r3
 800ef48:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 800ef4a:	88fa      	ldrh	r2, [r7, #6]
 800ef4c:	887b      	ldrh	r3, [r7, #2]
 800ef4e:	4413      	add	r3, r2
 800ef50:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800ef52:	3b01      	subs	r3, #1
 800ef54:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 800ef56:	88ba      	ldrh	r2, [r7, #4]
 800ef58:	883b      	ldrh	r3, [r7, #0]
 800ef5a:	4413      	add	r3, r2
 800ef5c:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800ef5e:	3b01      	subs	r3, #1
 800ef60:	b29b      	uxth	r3, r3
 800ef62:	88b9      	ldrh	r1, [r7, #4]
 800ef64:	88f8      	ldrh	r0, [r7, #6]
 800ef66:	4622      	mov	r2, r4
 800ef68:	f7ff fde6 	bl	800eb38 <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 800ef6c:	883a      	ldrh	r2, [r7, #0]
 800ef6e:	887b      	ldrh	r3, [r7, #2]
 800ef70:	fb12 f303 	smulbb	r3, r2, r3
 800ef74:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 800ef76:	2300      	movs	r3, #0
 800ef78:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 800ef7a:	89fb      	ldrh	r3, [r7, #14]
 800ef7c:	f003 0301 	and.w	r3, r3, #1
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d009      	beq.n	800ef98 <ILI9341_Draw_Rectangle+0xc0>
 800ef84:	89fb      	ldrh	r3, [r7, #14]
 800ef86:	2b01      	cmp	r3, #1
 800ef88:	d906      	bls.n	800ef98 <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 800ef8a:	2301      	movs	r3, #1
 800ef8c:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 800ef8e:	89fb      	ldrh	r3, [r7, #14]
 800ef90:	085b      	lsrs	r3, r3, #1
 800ef92:	b29b      	uxth	r3, r3
 800ef94:	005b      	lsls	r3, r3, #1
 800ef96:	81fb      	strh	r3, [r7, #14]
	}

	_LCD_Write_Frame(	xpos,
 800ef98:	89fc      	ldrh	r4, [r7, #14]
 800ef9a:	8c3a      	ldrh	r2, [r7, #32]
 800ef9c:	88b9      	ldrh	r1, [r7, #4]
 800ef9e:	88f8      	ldrh	r0, [r7, #6]
 800efa0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800efa4:	9300      	str	r3, [sp, #0]
 800efa6:	4623      	mov	r3, r4
 800efa8:	f000 f8a8 	bl	800f0fc <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 800efac:	7b7b      	ldrb	r3, [r7, #13]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d021      	beq.n	800eff6 <ILI9341_Draw_Rectangle+0x11e>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 800efb2:	88fa      	ldrh	r2, [r7, #6]
 800efb4:	887b      	ldrh	r3, [r7, #2]
 800efb6:	4413      	add	r3, r2
 800efb8:	b29b      	uxth	r3, r3
 800efba:	3b02      	subs	r3, #2
 800efbc:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800efbe:	88ba      	ldrh	r2, [r7, #4]
 800efc0:	883b      	ldrh	r3, [r7, #0]
 800efc2:	4413      	add	r3, r2
 800efc4:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 800efc6:	3b01      	subs	r3, #1
 800efc8:	b29b      	uxth	r3, r3
 800efca:	8c3a      	ldrh	r2, [r7, #32]
 800efcc:	4619      	mov	r1, r3
 800efce:	f7ff fe29 	bl	800ec24 <ILI9341_Draw_Pixel>
							colour);
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800efd2:	88fa      	ldrh	r2, [r7, #6]
 800efd4:	887b      	ldrh	r3, [r7, #2]
 800efd6:	4413      	add	r3, r2
 800efd8:	b29b      	uxth	r3, r3
 800efda:	3b01      	subs	r3, #1
 800efdc:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800efde:	88ba      	ldrh	r2, [r7, #4]
 800efe0:	883b      	ldrh	r3, [r7, #0]
 800efe2:	4413      	add	r3, r2
 800efe4:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800efe6:	3b01      	subs	r3, #1
 800efe8:	b29b      	uxth	r3, r3
 800efea:	8c3a      	ldrh	r2, [r7, #32]
 800efec:	4619      	mov	r1, r3
 800efee:	f7ff fe19 	bl	800ec24 <ILI9341_Draw_Pixel>
 800eff2:	e000      	b.n	800eff6 <ILI9341_Draw_Rectangle+0x11e>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800eff4:	bf00      	nop
							colour);
	}
}
 800eff6:	3714      	adds	r7, #20
 800eff8:	46bd      	mov	sp, r7
 800effa:	bd90      	pop	{r4, r7, pc}
 800effc:	20000c3e 	.word	0x20000c3e
 800f000:	20000c3c 	.word	0x20000c3c

0800f004 <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b084      	sub	sp, #16
 800f008:	af00      	add	r7, sp, #0
 800f00a:	4603      	mov	r3, r0
 800f00c:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = rotation;
 800f00e:	79fb      	ldrb	r3, [r7, #7]
 800f010:	73fb      	strb	r3, [r7, #15]

	_LCD_SendCommand(0x36);
 800f012:	2036      	movs	r0, #54	; 0x36
 800f014:	f000 f922 	bl	800f25c <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 800f018:	7bfb      	ldrb	r3, [r7, #15]
 800f01a:	2b03      	cmp	r3, #3
 800f01c:	d836      	bhi.n	800f08c <ILI9341_Set_Rotation+0x88>
 800f01e:	a201      	add	r2, pc, #4	; (adr r2, 800f024 <ILI9341_Set_Rotation+0x20>)
 800f020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f024:	0800f035 	.word	0x0800f035
 800f028:	0800f04b 	.word	0x0800f04b
 800f02c:	0800f061 	.word	0x0800f061
 800f030:	0800f077 	.word	0x0800f077
	{
		case SCREEN_VERTICAL_1:
			_LCD_SendData(0x40|0x08);
 800f034:	2048      	movs	r0, #72	; 0x48
 800f036:	f000 f943 	bl	800f2c0 <_LCD_SendData>
			LCD_WIDTH = 240;
 800f03a:	4b17      	ldr	r3, [pc, #92]	; (800f098 <ILI9341_Set_Rotation+0x94>)
 800f03c:	22f0      	movs	r2, #240	; 0xf0
 800f03e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800f040:	4b16      	ldr	r3, [pc, #88]	; (800f09c <ILI9341_Set_Rotation+0x98>)
 800f042:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800f046:	801a      	strh	r2, [r3, #0]
			break;
 800f048:	e021      	b.n	800f08e <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			_LCD_SendData(0x20|0x08);
 800f04a:	2028      	movs	r0, #40	; 0x28
 800f04c:	f000 f938 	bl	800f2c0 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800f050:	4b11      	ldr	r3, [pc, #68]	; (800f098 <ILI9341_Set_Rotation+0x94>)
 800f052:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800f056:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800f058:	4b10      	ldr	r3, [pc, #64]	; (800f09c <ILI9341_Set_Rotation+0x98>)
 800f05a:	22f0      	movs	r2, #240	; 0xf0
 800f05c:	801a      	strh	r2, [r3, #0]
			break;
 800f05e:	e016      	b.n	800f08e <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			_LCD_SendData(0x80|0x08);
 800f060:	2088      	movs	r0, #136	; 0x88
 800f062:	f000 f92d 	bl	800f2c0 <_LCD_SendData>
			LCD_WIDTH  = 240;
 800f066:	4b0c      	ldr	r3, [pc, #48]	; (800f098 <ILI9341_Set_Rotation+0x94>)
 800f068:	22f0      	movs	r2, #240	; 0xf0
 800f06a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800f06c:	4b0b      	ldr	r3, [pc, #44]	; (800f09c <ILI9341_Set_Rotation+0x98>)
 800f06e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800f072:	801a      	strh	r2, [r3, #0]
			break;
 800f074:	e00b      	b.n	800f08e <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			_LCD_SendData(0x40|0x80|0x20|0x08);
 800f076:	20e8      	movs	r0, #232	; 0xe8
 800f078:	f000 f922 	bl	800f2c0 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800f07c:	4b06      	ldr	r3, [pc, #24]	; (800f098 <ILI9341_Set_Rotation+0x94>)
 800f07e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800f082:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800f084:	4b05      	ldr	r3, [pc, #20]	; (800f09c <ILI9341_Set_Rotation+0x98>)
 800f086:	22f0      	movs	r2, #240	; 0xf0
 800f088:	801a      	strh	r2, [r3, #0]
			break;
 800f08a:	e000      	b.n	800f08e <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800f08c:	bf00      	nop
	}
}
 800f08e:	bf00      	nop
 800f090:	3710      	adds	r7, #16
 800f092:	46bd      	mov	sp, r7
 800f094:	bd80      	pop	{r7, pc}
 800f096:	bf00      	nop
 800f098:	20000c3e 	.word	0x20000c3e
 800f09c:	20000c3c 	.word	0x20000c3c

0800f0a0 <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 800f0a0:	b480      	push	{r7}
 800f0a2:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800f0a4:	4b05      	ldr	r3, [pc, #20]	; (800f0bc <_LCD_Enable+0x1c>)
 800f0a6:	695b      	ldr	r3, [r3, #20]
 800f0a8:	4a04      	ldr	r2, [pc, #16]	; (800f0bc <_LCD_Enable+0x1c>)
 800f0aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f0ae:	6153      	str	r3, [r2, #20]
}
 800f0b0:	bf00      	nop
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b8:	4770      	bx	lr
 800f0ba:	bf00      	nop
 800f0bc:	48000400 	.word	0x48000400

0800f0c0 <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 800f0c4:	4b0c      	ldr	r3, [pc, #48]	; (800f0f8 <_LCD_Reset+0x38>)
 800f0c6:	695b      	ldr	r3, [r3, #20]
 800f0c8:	4a0b      	ldr	r2, [pc, #44]	; (800f0f8 <_LCD_Reset+0x38>)
 800f0ca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f0ce:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800f0d0:	20c8      	movs	r0, #200	; 0xc8
 800f0d2:	f7f9 f9db 	bl	800848c <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f0d6:	4b08      	ldr	r3, [pc, #32]	; (800f0f8 <_LCD_Reset+0x38>)
 800f0d8:	695b      	ldr	r3, [r3, #20]
 800f0da:	4a07      	ldr	r2, [pc, #28]	; (800f0f8 <_LCD_Reset+0x38>)
 800f0dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f0e0:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800f0e2:	20c8      	movs	r0, #200	; 0xc8
 800f0e4:	f7f9 f9d2 	bl	800848c <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800f0e8:	4b03      	ldr	r3, [pc, #12]	; (800f0f8 <_LCD_Reset+0x38>)
 800f0ea:	695b      	ldr	r3, [r3, #20]
 800f0ec:	4a02      	ldr	r2, [pc, #8]	; (800f0f8 <_LCD_Reset+0x38>)
 800f0ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f0f2:	6153      	str	r3, [r2, #20]
}
 800f0f4:	bf00      	nop
 800f0f6:	bd80      	pop	{r7, pc}
 800f0f8:	48000400 	.word	0x48000400

0800f0fc <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 800f0fc:	b5b0      	push	{r4, r5, r7, lr}
 800f0fe:	b08e      	sub	sp, #56	; 0x38
 800f100:	af00      	add	r7, sp, #0
 800f102:	607b      	str	r3, [r7, #4]
 800f104:	4603      	mov	r3, r0
 800f106:	81fb      	strh	r3, [r7, #14]
 800f108:	460b      	mov	r3, r1
 800f10a:	81bb      	strh	r3, [r7, #12]
 800f10c:	4613      	mov	r3, r2
 800f10e:	817b      	strh	r3, [r7, #10]
 800f110:	466b      	mov	r3, sp
 800f112:	461d      	mov	r5, r3

	uint32_t buffer_size = 0;
 800f114:	2300      	movs	r3, #0
 800f116:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	005b      	lsls	r3, r3, #1
 800f11c:	4a4d      	ldr	r2, [pc, #308]	; (800f254 <_LCD_Write_Frame+0x158>)
 800f11e:	8812      	ldrh	r2, [r2, #0]
 800f120:	4293      	cmp	r3, r2
 800f122:	d202      	bcs.n	800f12a <_LCD_Write_Frame+0x2e>
	{
		buffer_size = chunk_size;
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f128:	e002      	b.n	800f130 <_LCD_Write_Frame+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 800f12a:	4b4a      	ldr	r3, [pc, #296]	; (800f254 <_LCD_Write_Frame+0x158>)
 800f12c:	881b      	ldrh	r3, [r3, #0]
 800f12e:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	unsigned char chifted = 	colour>>8;;
 800f130:	897b      	ldrh	r3, [r7, #10]
 800f132:	0a1b      	lsrs	r3, r3, #8
 800f134:	b29b      	uxth	r3, r3
 800f136:	77fb      	strb	r3, [r7, #31]
	unsigned char burst_buffer[buffer_size];
 800f138:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f13a:	4603      	mov	r3, r0
 800f13c:	3b01      	subs	r3, #1
 800f13e:	61bb      	str	r3, [r7, #24]
 800f140:	4601      	mov	r1, r0
 800f142:	f04f 0200 	mov.w	r2, #0
 800f146:	f04f 0300 	mov.w	r3, #0
 800f14a:	f04f 0400 	mov.w	r4, #0
 800f14e:	00d4      	lsls	r4, r2, #3
 800f150:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800f154:	00cb      	lsls	r3, r1, #3
 800f156:	4601      	mov	r1, r0
 800f158:	f04f 0200 	mov.w	r2, #0
 800f15c:	f04f 0300 	mov.w	r3, #0
 800f160:	f04f 0400 	mov.w	r4, #0
 800f164:	00d4      	lsls	r4, r2, #3
 800f166:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800f16a:	00cb      	lsls	r3, r1, #3
 800f16c:	1dc3      	adds	r3, r0, #7
 800f16e:	08db      	lsrs	r3, r3, #3
 800f170:	00db      	lsls	r3, r3, #3
 800f172:	ebad 0d03 	sub.w	sp, sp, r3
 800f176:	466b      	mov	r3, sp
 800f178:	3300      	adds	r3, #0
 800f17a:	617b      	str	r3, [r7, #20]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800f17c:	2300      	movs	r3, #0
 800f17e:	633b      	str	r3, [r7, #48]	; 0x30
 800f180:	e00d      	b.n	800f19e <_LCD_Write_Frame+0xa2>
	{
			burst_buffer[j] = 	chifted;
 800f182:	697a      	ldr	r2, [r7, #20]
 800f184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f186:	4413      	add	r3, r2
 800f188:	7ffa      	ldrb	r2, [r7, #31]
 800f18a:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 800f18c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f18e:	3301      	adds	r3, #1
 800f190:	897a      	ldrh	r2, [r7, #10]
 800f192:	b2d1      	uxtb	r1, r2
 800f194:	697a      	ldr	r2, [r7, #20]
 800f196:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800f198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f19a:	3302      	adds	r3, #2
 800f19c:	633b      	str	r3, [r7, #48]	; 0x30
 800f19e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1a2:	429a      	cmp	r2, r3
 800f1a4:	d3ed      	bcc.n	800f182 <_LCD_Write_Frame+0x86>
	}
	
	uint32_t Sending_size = chunk_size*2;
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	005b      	lsls	r3, r3, #1
 800f1aa:	613b      	str	r3, [r7, #16]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 800f1ac:	2301      	movs	r3, #1
 800f1ae:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d00d      	beq.n	800f1d6 <_LCD_Write_Frame+0xda>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 800f1ba:	693a      	ldr	r2, [r7, #16]
 800f1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1be:	fbb2 f3f3 	udiv	r3, r2, r3
 800f1c2:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 800f1c4:	693b      	ldr	r3, [r7, #16]
 800f1c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f1c8:	fbb3 f2f2 	udiv	r2, r3, r2
 800f1cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f1ce:	fb01 f202 	mul.w	r2, r1, r2
 800f1d2:	1a9b      	subs	r3, r3, r2
 800f1d4:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800f1d6:	4b20      	ldr	r3, [pc, #128]	; (800f258 <_LCD_Write_Frame+0x15c>)
 800f1d8:	695b      	ldr	r3, [r3, #20]
 800f1da:	4a1f      	ldr	r2, [pc, #124]	; (800f258 <_LCD_Write_Frame+0x15c>)
 800f1dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f1e0:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f1e2:	4b1d      	ldr	r3, [pc, #116]	; (800f258 <_LCD_Write_Frame+0x15c>)
 800f1e4:	695b      	ldr	r3, [r3, #20]
 800f1e6:	4a1c      	ldr	r2, [pc, #112]	; (800f258 <_LCD_Write_Frame+0x15c>)
 800f1e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f1ec:	6153      	str	r3, [r2, #20]
//TODO
	if(Sending_in_Block != 0)
 800f1ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d00f      	beq.n	800f214 <_LCD_Write_Frame+0x118>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	627b      	str	r3, [r7, #36]	; 0x24
 800f1f8:	e008      	b.n	800f20c <_LCD_Write_Frame+0x110>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 10);
 800f1fa:	6978      	ldr	r0, [r7, #20]
 800f1fc:	230a      	movs	r3, #10
 800f1fe:	2200      	movs	r2, #0
 800f200:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f202:	f000 f8c1 	bl	800f388 <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800f206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f208:	3301      	adds	r3, #1
 800f20a:	627b      	str	r3, [r7, #36]	; 0x24
 800f20c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f20e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f210:	429a      	cmp	r2, r3
 800f212:	d3f2      	bcc.n	800f1fa <_LCD_Write_Frame+0xfe>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 10);
 800f214:	6978      	ldr	r0, [r7, #20]
 800f216:	230a      	movs	r3, #10
 800f218:	2200      	movs	r2, #0
 800f21a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f21c:	f000 f8b4 	bl	800f388 <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800f220:	2300      	movs	r3, #0
 800f222:	623b      	str	r3, [r7, #32]
 800f224:	e008      	b.n	800f238 <_LCD_Write_Frame+0x13c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f226:	4b0c      	ldr	r3, [pc, #48]	; (800f258 <_LCD_Write_Frame+0x15c>)
 800f228:	695b      	ldr	r3, [r3, #20]
 800f22a:	4a0b      	ldr	r2, [pc, #44]	; (800f258 <_LCD_Write_Frame+0x15c>)
 800f22c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f230:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800f232:	6a3b      	ldr	r3, [r7, #32]
 800f234:	3301      	adds	r3, #1
 800f236:	623b      	str	r3, [r7, #32]
 800f238:	6a3b      	ldr	r3, [r7, #32]
 800f23a:	2b02      	cmp	r3, #2
 800f23c:	ddf3      	ble.n	800f226 <_LCD_Write_Frame+0x12a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800f23e:	4b06      	ldr	r3, [pc, #24]	; (800f258 <_LCD_Write_Frame+0x15c>)
 800f240:	695b      	ldr	r3, [r3, #20]
 800f242:	4a05      	ldr	r2, [pc, #20]	; (800f258 <_LCD_Write_Frame+0x15c>)
 800f244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f248:	6153      	str	r3, [r2, #20]
 800f24a:	46ad      	mov	sp, r5

}
 800f24c:	bf00      	nop
 800f24e:	3738      	adds	r7, #56	; 0x38
 800f250:	46bd      	mov	sp, r7
 800f252:	bdb0      	pop	{r4, r5, r7, pc}
 800f254:	20000c40 	.word	0x20000c40
 800f258:	48000400 	.word	0x48000400

0800f25c <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b084      	sub	sp, #16
 800f260:	af00      	add	r7, sp, #0
 800f262:	4603      	mov	r3, r0
 800f264:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f266:	4b15      	ldr	r3, [pc, #84]	; (800f2bc <_LCD_SendCommand+0x60>)
 800f268:	695b      	ldr	r3, [r3, #20]
 800f26a:	4a14      	ldr	r2, [pc, #80]	; (800f2bc <_LCD_SendCommand+0x60>)
 800f26c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f270:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800f272:	4b12      	ldr	r3, [pc, #72]	; (800f2bc <_LCD_SendCommand+0x60>)
 800f274:	695b      	ldr	r3, [r3, #20]
 800f276:	4a11      	ldr	r2, [pc, #68]	; (800f2bc <_LCD_SendCommand+0x60>)
 800f278:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f27c:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(command, 0 , 0);
 800f27e:	79fb      	ldrb	r3, [r7, #7]
 800f280:	2200      	movs	r2, #0
 800f282:	2100      	movs	r1, #0
 800f284:	4618      	mov	r0, r3
 800f286:	f000 f84d 	bl	800f324 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800f28a:	2300      	movs	r3, #0
 800f28c:	60fb      	str	r3, [r7, #12]
 800f28e:	e008      	b.n	800f2a2 <_LCD_SendCommand+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f290:	4b0a      	ldr	r3, [pc, #40]	; (800f2bc <_LCD_SendCommand+0x60>)
 800f292:	695b      	ldr	r3, [r3, #20]
 800f294:	4a09      	ldr	r2, [pc, #36]	; (800f2bc <_LCD_SendCommand+0x60>)
 800f296:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f29a:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	3301      	adds	r3, #1
 800f2a0:	60fb      	str	r3, [r7, #12]
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	2b02      	cmp	r3, #2
 800f2a6:	ddf3      	ble.n	800f290 <_LCD_SendCommand+0x34>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800f2a8:	4b04      	ldr	r3, [pc, #16]	; (800f2bc <_LCD_SendCommand+0x60>)
 800f2aa:	695b      	ldr	r3, [r3, #20]
 800f2ac:	4a03      	ldr	r2, [pc, #12]	; (800f2bc <_LCD_SendCommand+0x60>)
 800f2ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f2b2:	6153      	str	r3, [r2, #20]
}
 800f2b4:	bf00      	nop
 800f2b6:	3710      	adds	r7, #16
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	bd80      	pop	{r7, pc}
 800f2bc:	48000400 	.word	0x48000400

0800f2c0 <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b084      	sub	sp, #16
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800f2ca:	4b15      	ldr	r3, [pc, #84]	; (800f320 <_LCD_SendData+0x60>)
 800f2cc:	695b      	ldr	r3, [r3, #20]
 800f2ce:	4a14      	ldr	r2, [pc, #80]	; (800f320 <_LCD_SendData+0x60>)
 800f2d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2d4:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f2d6:	4b12      	ldr	r3, [pc, #72]	; (800f320 <_LCD_SendData+0x60>)
 800f2d8:	695b      	ldr	r3, [r3, #20]
 800f2da:	4a11      	ldr	r2, [pc, #68]	; (800f320 <_LCD_SendData+0x60>)
 800f2dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f2e0:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(data, 0 , 0);
 800f2e2:	79fb      	ldrb	r3, [r7, #7]
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	2100      	movs	r1, #0
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	f000 f81b 	bl	800f324 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	60fb      	str	r3, [r7, #12]
 800f2f2:	e008      	b.n	800f306 <_LCD_SendData+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f2f4:	4b0a      	ldr	r3, [pc, #40]	; (800f320 <_LCD_SendData+0x60>)
 800f2f6:	695b      	ldr	r3, [r3, #20]
 800f2f8:	4a09      	ldr	r2, [pc, #36]	; (800f320 <_LCD_SendData+0x60>)
 800f2fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f2fe:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	3301      	adds	r3, #1
 800f304:	60fb      	str	r3, [r7, #12]
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	2b02      	cmp	r3, #2
 800f30a:	ddf3      	ble.n	800f2f4 <_LCD_SendData+0x34>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f30c:	4b04      	ldr	r3, [pc, #16]	; (800f320 <_LCD_SendData+0x60>)
 800f30e:	695b      	ldr	r3, [r3, #20]
 800f310:	4a03      	ldr	r2, [pc, #12]	; (800f320 <_LCD_SendData+0x60>)
 800f312:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f316:	6153      	str	r3, [r2, #20]
}
 800f318:	bf00      	nop
 800f31a:	3710      	adds	r7, #16
 800f31c:	46bd      	mov	sp, r7
 800f31e:	bd80      	pop	{r7, pc}
 800f320:	48000400 	.word	0x48000400

0800f324 <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800f324:	b480      	push	{r7}
 800f326:	b085      	sub	sp, #20
 800f328:	af00      	add	r7, sp, #0
 800f32a:	4603      	mov	r3, r0
 800f32c:	71fb      	strb	r3, [r7, #7]
 800f32e:	460b      	mov	r3, r1
 800f330:	71bb      	strb	r3, [r7, #6]
 800f332:	4613      	mov	r3, r2
 800f334:	717b      	strb	r3, [r7, #5]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800f336:	2300      	movs	r3, #0
 800f338:	60fb      	str	r3, [r7, #12]
 800f33a:	e003      	b.n	800f344 <_SPI_SendByte+0x20>
   		asm("nop");
 800f33c:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	3301      	adds	r3, #1
 800f342:	60fb      	str	r3, [r7, #12]
 800f344:	79bb      	ldrb	r3, [r7, #6]
 800f346:	68fa      	ldr	r2, [r7, #12]
 800f348:	429a      	cmp	r2, r3
 800f34a:	dbf7      	blt.n	800f33c <_SPI_SendByte+0x18>

	// check transmit buffer empty
	if((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800f34c:	4b0c      	ldr	r3, [pc, #48]	; (800f380 <_SPI_SendByte+0x5c>)
 800f34e:	689b      	ldr	r3, [r3, #8]
 800f350:	f003 0302 	and.w	r3, r3, #2
 800f354:	2b02      	cmp	r3, #2
 800f356:	d102      	bne.n	800f35e <_SPI_SendByte+0x3a>
	{
		*(volatile uint8_t *)&SPI_PERIPH->DR = data_buffer;
 800f358:	4a0a      	ldr	r2, [pc, #40]	; (800f384 <_SPI_SendByte+0x60>)
 800f35a:	79fb      	ldrb	r3, [r7, #7]
 800f35c:	7013      	strb	r3, [r2, #0]
	}

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800f35e:	2300      	movs	r3, #0
 800f360:	60bb      	str	r3, [r7, #8]
 800f362:	e003      	b.n	800f36c <_SPI_SendByte+0x48>
   		asm("nop");
 800f364:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800f366:	68bb      	ldr	r3, [r7, #8]
 800f368:	3301      	adds	r3, #1
 800f36a:	60bb      	str	r3, [r7, #8]
 800f36c:	797b      	ldrb	r3, [r7, #5]
 800f36e:	68ba      	ldr	r2, [r7, #8]
 800f370:	429a      	cmp	r2, r3
 800f372:	dbf7      	blt.n	800f364 <_SPI_SendByte+0x40>

#endif

}
 800f374:	bf00      	nop
 800f376:	3714      	adds	r7, #20
 800f378:	46bd      	mov	sp, r7
 800f37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37e:	4770      	bx	lr
 800f380:	40003c00 	.word	0x40003c00
 800f384:	40003c0c 	.word	0x40003c0c

0800f388 <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800f388:	b480      	push	{r7}
 800f38a:	b089      	sub	sp, #36	; 0x24
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	60f8      	str	r0, [r7, #12]
 800f390:	60b9      	str	r1, [r7, #8]
 800f392:	4611      	mov	r1, r2
 800f394:	461a      	mov	r2, r3
 800f396:	460b      	mov	r3, r1
 800f398:	71fb      	strb	r3, [r7, #7]
 800f39a:	4613      	mov	r3, r2
 800f39c:	71bb      	strb	r3, [r7, #6]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800f39e:	2300      	movs	r3, #0
 800f3a0:	61fb      	str	r3, [r7, #28]
 800f3a2:	e003      	b.n	800f3ac <_SPI_SendByteMultiByte+0x24>
   		asm("nop");
 800f3a4:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800f3a6:	69fb      	ldr	r3, [r7, #28]
 800f3a8:	3301      	adds	r3, #1
 800f3aa:	61fb      	str	r3, [r7, #28]
 800f3ac:	79fb      	ldrb	r3, [r7, #7]
 800f3ae:	69fa      	ldr	r2, [r7, #28]
 800f3b0:	429a      	cmp	r2, r3
 800f3b2:	dbf7      	blt.n	800f3a4 <_SPI_SendByteMultiByte+0x1c>

	uint8_t *p_data_buffer = (uint8_t *)data_buffer;
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	61bb      	str	r3, [r7, #24]
	//volatile uint16_t TxXferCount = (uint16_t)buffer_size;

	while (buffer_size > 0U)
 800f3b8:	e01d      	b.n	800f3f6 <_SPI_SendByteMultiByte+0x6e>
	{
		// check transmit buffer empty
		if ((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800f3ba:	4b1c      	ldr	r3, [pc, #112]	; (800f42c <_SPI_SendByteMultiByte+0xa4>)
 800f3bc:	689b      	ldr	r3, [r3, #8]
 800f3be:	f003 0302 	and.w	r3, r3, #2
 800f3c2:	2b02      	cmp	r3, #2
 800f3c4:	d117      	bne.n	800f3f6 <_SPI_SendByteMultiByte+0x6e>
		{
			if (buffer_size > 1U)
 800f3c6:	68bb      	ldr	r3, [r7, #8]
 800f3c8:	2b01      	cmp	r3, #1
 800f3ca:	d90a      	bls.n	800f3e2 <_SPI_SendByteMultiByte+0x5a>
			{
				// write on the data register in packing mode
				SPI_PERIPH->DR = *((uint16_t *)p_data_buffer);
 800f3cc:	69bb      	ldr	r3, [r7, #24]
 800f3ce:	881a      	ldrh	r2, [r3, #0]
 800f3d0:	4b16      	ldr	r3, [pc, #88]	; (800f42c <_SPI_SendByteMultiByte+0xa4>)
 800f3d2:	60da      	str	r2, [r3, #12]
				p_data_buffer += sizeof(uint16_t);
 800f3d4:	69bb      	ldr	r3, [r7, #24]
 800f3d6:	3302      	adds	r3, #2
 800f3d8:	61bb      	str	r3, [r7, #24]
				buffer_size -= 2U;
 800f3da:	68bb      	ldr	r3, [r7, #8]
 800f3dc:	3b02      	subs	r3, #2
 800f3de:	60bb      	str	r3, [r7, #8]
 800f3e0:	e009      	b.n	800f3f6 <_SPI_SendByteMultiByte+0x6e>
			}
			else
			{
				*((volatile uint8_t *)&SPI_PERIPH->DR) = (*p_data_buffer);
 800f3e2:	4a13      	ldr	r2, [pc, #76]	; (800f430 <_SPI_SendByteMultiByte+0xa8>)
 800f3e4:	69bb      	ldr	r3, [r7, #24]
 800f3e6:	781b      	ldrb	r3, [r3, #0]
 800f3e8:	7013      	strb	r3, [r2, #0]
				p_data_buffer++;
 800f3ea:	69bb      	ldr	r3, [r7, #24]
 800f3ec:	3301      	adds	r3, #1
 800f3ee:	61bb      	str	r3, [r7, #24]
				buffer_size--;
 800f3f0:	68bb      	ldr	r3, [r7, #8]
 800f3f2:	3b01      	subs	r3, #1
 800f3f4:	60bb      	str	r3, [r7, #8]
	while (buffer_size > 0U)
 800f3f6:	68bb      	ldr	r3, [r7, #8]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d1de      	bne.n	800f3ba <_SPI_SendByteMultiByte+0x32>
			}
		}
	}

	// clear SPI overrun flag
	SPI_PERIPH->SR &= ~(SPI_SR_OVR);
 800f3fc:	4b0b      	ldr	r3, [pc, #44]	; (800f42c <_SPI_SendByteMultiByte+0xa4>)
 800f3fe:	689b      	ldr	r3, [r3, #8]
 800f400:	4a0a      	ldr	r2, [pc, #40]	; (800f42c <_SPI_SendByteMultiByte+0xa4>)
 800f402:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f406:	6093      	str	r3, [r2, #8]

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800f408:	2300      	movs	r3, #0
 800f40a:	617b      	str	r3, [r7, #20]
 800f40c:	e003      	b.n	800f416 <_SPI_SendByteMultiByte+0x8e>
   		asm("nop");
 800f40e:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800f410:	697b      	ldr	r3, [r7, #20]
 800f412:	3301      	adds	r3, #1
 800f414:	617b      	str	r3, [r7, #20]
 800f416:	79bb      	ldrb	r3, [r7, #6]
 800f418:	697a      	ldr	r2, [r7, #20]
 800f41a:	429a      	cmp	r2, r3
 800f41c:	dbf7      	blt.n	800f40e <_SPI_SendByteMultiByte+0x86>

#endif

}
 800f41e:	bf00      	nop
 800f420:	3724      	adds	r7, #36	; 0x24
 800f422:	46bd      	mov	sp, r7
 800f424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f428:	4770      	bx	lr
 800f42a:	bf00      	nop
 800f42c:	40003c00 	.word	0x40003c00
 800f430:	40003c0c 	.word	0x40003c0c

0800f434 <__errno>:
 800f434:	4b01      	ldr	r3, [pc, #4]	; (800f43c <__errno+0x8>)
 800f436:	6818      	ldr	r0, [r3, #0]
 800f438:	4770      	bx	lr
 800f43a:	bf00      	nop
 800f43c:	20001c34 	.word	0x20001c34

0800f440 <__libc_init_array>:
 800f440:	b570      	push	{r4, r5, r6, lr}
 800f442:	4e0d      	ldr	r6, [pc, #52]	; (800f478 <__libc_init_array+0x38>)
 800f444:	4c0d      	ldr	r4, [pc, #52]	; (800f47c <__libc_init_array+0x3c>)
 800f446:	1ba4      	subs	r4, r4, r6
 800f448:	10a4      	asrs	r4, r4, #2
 800f44a:	2500      	movs	r5, #0
 800f44c:	42a5      	cmp	r5, r4
 800f44e:	d109      	bne.n	800f464 <__libc_init_array+0x24>
 800f450:	4e0b      	ldr	r6, [pc, #44]	; (800f480 <__libc_init_array+0x40>)
 800f452:	4c0c      	ldr	r4, [pc, #48]	; (800f484 <__libc_init_array+0x44>)
 800f454:	f004 f89e 	bl	8013594 <_init>
 800f458:	1ba4      	subs	r4, r4, r6
 800f45a:	10a4      	asrs	r4, r4, #2
 800f45c:	2500      	movs	r5, #0
 800f45e:	42a5      	cmp	r5, r4
 800f460:	d105      	bne.n	800f46e <__libc_init_array+0x2e>
 800f462:	bd70      	pop	{r4, r5, r6, pc}
 800f464:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f468:	4798      	blx	r3
 800f46a:	3501      	adds	r5, #1
 800f46c:	e7ee      	b.n	800f44c <__libc_init_array+0xc>
 800f46e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f472:	4798      	blx	r3
 800f474:	3501      	adds	r5, #1
 800f476:	e7f2      	b.n	800f45e <__libc_init_array+0x1e>
 800f478:	08014970 	.word	0x08014970
 800f47c:	08014970 	.word	0x08014970
 800f480:	08014970 	.word	0x08014970
 800f484:	08014974 	.word	0x08014974

0800f488 <memset>:
 800f488:	4402      	add	r2, r0
 800f48a:	4603      	mov	r3, r0
 800f48c:	4293      	cmp	r3, r2
 800f48e:	d100      	bne.n	800f492 <memset+0xa>
 800f490:	4770      	bx	lr
 800f492:	f803 1b01 	strb.w	r1, [r3], #1
 800f496:	e7f9      	b.n	800f48c <memset+0x4>

0800f498 <__cvt>:
 800f498:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f49c:	ec55 4b10 	vmov	r4, r5, d0
 800f4a0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800f4a2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f4a6:	2d00      	cmp	r5, #0
 800f4a8:	460e      	mov	r6, r1
 800f4aa:	4691      	mov	r9, r2
 800f4ac:	4619      	mov	r1, r3
 800f4ae:	bfb8      	it	lt
 800f4b0:	4622      	movlt	r2, r4
 800f4b2:	462b      	mov	r3, r5
 800f4b4:	f027 0720 	bic.w	r7, r7, #32
 800f4b8:	bfbb      	ittet	lt
 800f4ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f4be:	461d      	movlt	r5, r3
 800f4c0:	2300      	movge	r3, #0
 800f4c2:	232d      	movlt	r3, #45	; 0x2d
 800f4c4:	bfb8      	it	lt
 800f4c6:	4614      	movlt	r4, r2
 800f4c8:	2f46      	cmp	r7, #70	; 0x46
 800f4ca:	700b      	strb	r3, [r1, #0]
 800f4cc:	d004      	beq.n	800f4d8 <__cvt+0x40>
 800f4ce:	2f45      	cmp	r7, #69	; 0x45
 800f4d0:	d100      	bne.n	800f4d4 <__cvt+0x3c>
 800f4d2:	3601      	adds	r6, #1
 800f4d4:	2102      	movs	r1, #2
 800f4d6:	e000      	b.n	800f4da <__cvt+0x42>
 800f4d8:	2103      	movs	r1, #3
 800f4da:	ab03      	add	r3, sp, #12
 800f4dc:	9301      	str	r3, [sp, #4]
 800f4de:	ab02      	add	r3, sp, #8
 800f4e0:	9300      	str	r3, [sp, #0]
 800f4e2:	4632      	mov	r2, r6
 800f4e4:	4653      	mov	r3, sl
 800f4e6:	ec45 4b10 	vmov	d0, r4, r5
 800f4ea:	f000 fe3d 	bl	8010168 <_dtoa_r>
 800f4ee:	2f47      	cmp	r7, #71	; 0x47
 800f4f0:	4680      	mov	r8, r0
 800f4f2:	d102      	bne.n	800f4fa <__cvt+0x62>
 800f4f4:	f019 0f01 	tst.w	r9, #1
 800f4f8:	d026      	beq.n	800f548 <__cvt+0xb0>
 800f4fa:	2f46      	cmp	r7, #70	; 0x46
 800f4fc:	eb08 0906 	add.w	r9, r8, r6
 800f500:	d111      	bne.n	800f526 <__cvt+0x8e>
 800f502:	f898 3000 	ldrb.w	r3, [r8]
 800f506:	2b30      	cmp	r3, #48	; 0x30
 800f508:	d10a      	bne.n	800f520 <__cvt+0x88>
 800f50a:	2200      	movs	r2, #0
 800f50c:	2300      	movs	r3, #0
 800f50e:	4620      	mov	r0, r4
 800f510:	4629      	mov	r1, r5
 800f512:	f7f1 fb01 	bl	8000b18 <__aeabi_dcmpeq>
 800f516:	b918      	cbnz	r0, 800f520 <__cvt+0x88>
 800f518:	f1c6 0601 	rsb	r6, r6, #1
 800f51c:	f8ca 6000 	str.w	r6, [sl]
 800f520:	f8da 3000 	ldr.w	r3, [sl]
 800f524:	4499      	add	r9, r3
 800f526:	2200      	movs	r2, #0
 800f528:	2300      	movs	r3, #0
 800f52a:	4620      	mov	r0, r4
 800f52c:	4629      	mov	r1, r5
 800f52e:	f7f1 faf3 	bl	8000b18 <__aeabi_dcmpeq>
 800f532:	b938      	cbnz	r0, 800f544 <__cvt+0xac>
 800f534:	2230      	movs	r2, #48	; 0x30
 800f536:	9b03      	ldr	r3, [sp, #12]
 800f538:	454b      	cmp	r3, r9
 800f53a:	d205      	bcs.n	800f548 <__cvt+0xb0>
 800f53c:	1c59      	adds	r1, r3, #1
 800f53e:	9103      	str	r1, [sp, #12]
 800f540:	701a      	strb	r2, [r3, #0]
 800f542:	e7f8      	b.n	800f536 <__cvt+0x9e>
 800f544:	f8cd 900c 	str.w	r9, [sp, #12]
 800f548:	9b03      	ldr	r3, [sp, #12]
 800f54a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f54c:	eba3 0308 	sub.w	r3, r3, r8
 800f550:	4640      	mov	r0, r8
 800f552:	6013      	str	r3, [r2, #0]
 800f554:	b004      	add	sp, #16
 800f556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800f55a <__exponent>:
 800f55a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f55c:	2900      	cmp	r1, #0
 800f55e:	4604      	mov	r4, r0
 800f560:	bfba      	itte	lt
 800f562:	4249      	neglt	r1, r1
 800f564:	232d      	movlt	r3, #45	; 0x2d
 800f566:	232b      	movge	r3, #43	; 0x2b
 800f568:	2909      	cmp	r1, #9
 800f56a:	f804 2b02 	strb.w	r2, [r4], #2
 800f56e:	7043      	strb	r3, [r0, #1]
 800f570:	dd20      	ble.n	800f5b4 <__exponent+0x5a>
 800f572:	f10d 0307 	add.w	r3, sp, #7
 800f576:	461f      	mov	r7, r3
 800f578:	260a      	movs	r6, #10
 800f57a:	fb91 f5f6 	sdiv	r5, r1, r6
 800f57e:	fb06 1115 	mls	r1, r6, r5, r1
 800f582:	3130      	adds	r1, #48	; 0x30
 800f584:	2d09      	cmp	r5, #9
 800f586:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f58a:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800f58e:	4629      	mov	r1, r5
 800f590:	dc09      	bgt.n	800f5a6 <__exponent+0x4c>
 800f592:	3130      	adds	r1, #48	; 0x30
 800f594:	3b02      	subs	r3, #2
 800f596:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f59a:	42bb      	cmp	r3, r7
 800f59c:	4622      	mov	r2, r4
 800f59e:	d304      	bcc.n	800f5aa <__exponent+0x50>
 800f5a0:	1a10      	subs	r0, r2, r0
 800f5a2:	b003      	add	sp, #12
 800f5a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f5a6:	4613      	mov	r3, r2
 800f5a8:	e7e7      	b.n	800f57a <__exponent+0x20>
 800f5aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f5ae:	f804 2b01 	strb.w	r2, [r4], #1
 800f5b2:	e7f2      	b.n	800f59a <__exponent+0x40>
 800f5b4:	2330      	movs	r3, #48	; 0x30
 800f5b6:	4419      	add	r1, r3
 800f5b8:	7083      	strb	r3, [r0, #2]
 800f5ba:	1d02      	adds	r2, r0, #4
 800f5bc:	70c1      	strb	r1, [r0, #3]
 800f5be:	e7ef      	b.n	800f5a0 <__exponent+0x46>

0800f5c0 <_printf_float>:
 800f5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5c4:	b08d      	sub	sp, #52	; 0x34
 800f5c6:	460c      	mov	r4, r1
 800f5c8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800f5cc:	4616      	mov	r6, r2
 800f5ce:	461f      	mov	r7, r3
 800f5d0:	4605      	mov	r5, r0
 800f5d2:	f001 fcfb 	bl	8010fcc <_localeconv_r>
 800f5d6:	6803      	ldr	r3, [r0, #0]
 800f5d8:	9304      	str	r3, [sp, #16]
 800f5da:	4618      	mov	r0, r3
 800f5dc:	f7f0 fe20 	bl	8000220 <strlen>
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	930a      	str	r3, [sp, #40]	; 0x28
 800f5e4:	f8d8 3000 	ldr.w	r3, [r8]
 800f5e8:	9005      	str	r0, [sp, #20]
 800f5ea:	3307      	adds	r3, #7
 800f5ec:	f023 0307 	bic.w	r3, r3, #7
 800f5f0:	f103 0208 	add.w	r2, r3, #8
 800f5f4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f5f8:	f8d4 b000 	ldr.w	fp, [r4]
 800f5fc:	f8c8 2000 	str.w	r2, [r8]
 800f600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f604:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f608:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f60c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f610:	9307      	str	r3, [sp, #28]
 800f612:	f8cd 8018 	str.w	r8, [sp, #24]
 800f616:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f61a:	4ba7      	ldr	r3, [pc, #668]	; (800f8b8 <_printf_float+0x2f8>)
 800f61c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f620:	f7f1 faac 	bl	8000b7c <__aeabi_dcmpun>
 800f624:	bb70      	cbnz	r0, 800f684 <_printf_float+0xc4>
 800f626:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f62a:	4ba3      	ldr	r3, [pc, #652]	; (800f8b8 <_printf_float+0x2f8>)
 800f62c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f630:	f7f1 fa86 	bl	8000b40 <__aeabi_dcmple>
 800f634:	bb30      	cbnz	r0, 800f684 <_printf_float+0xc4>
 800f636:	2200      	movs	r2, #0
 800f638:	2300      	movs	r3, #0
 800f63a:	4640      	mov	r0, r8
 800f63c:	4649      	mov	r1, r9
 800f63e:	f7f1 fa75 	bl	8000b2c <__aeabi_dcmplt>
 800f642:	b110      	cbz	r0, 800f64a <_printf_float+0x8a>
 800f644:	232d      	movs	r3, #45	; 0x2d
 800f646:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f64a:	4a9c      	ldr	r2, [pc, #624]	; (800f8bc <_printf_float+0x2fc>)
 800f64c:	4b9c      	ldr	r3, [pc, #624]	; (800f8c0 <_printf_float+0x300>)
 800f64e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800f652:	bf8c      	ite	hi
 800f654:	4690      	movhi	r8, r2
 800f656:	4698      	movls	r8, r3
 800f658:	2303      	movs	r3, #3
 800f65a:	f02b 0204 	bic.w	r2, fp, #4
 800f65e:	6123      	str	r3, [r4, #16]
 800f660:	6022      	str	r2, [r4, #0]
 800f662:	f04f 0900 	mov.w	r9, #0
 800f666:	9700      	str	r7, [sp, #0]
 800f668:	4633      	mov	r3, r6
 800f66a:	aa0b      	add	r2, sp, #44	; 0x2c
 800f66c:	4621      	mov	r1, r4
 800f66e:	4628      	mov	r0, r5
 800f670:	f000 f9e6 	bl	800fa40 <_printf_common>
 800f674:	3001      	adds	r0, #1
 800f676:	f040 808d 	bne.w	800f794 <_printf_float+0x1d4>
 800f67a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f67e:	b00d      	add	sp, #52	; 0x34
 800f680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f684:	4642      	mov	r2, r8
 800f686:	464b      	mov	r3, r9
 800f688:	4640      	mov	r0, r8
 800f68a:	4649      	mov	r1, r9
 800f68c:	f7f1 fa76 	bl	8000b7c <__aeabi_dcmpun>
 800f690:	b110      	cbz	r0, 800f698 <_printf_float+0xd8>
 800f692:	4a8c      	ldr	r2, [pc, #560]	; (800f8c4 <_printf_float+0x304>)
 800f694:	4b8c      	ldr	r3, [pc, #560]	; (800f8c8 <_printf_float+0x308>)
 800f696:	e7da      	b.n	800f64e <_printf_float+0x8e>
 800f698:	6861      	ldr	r1, [r4, #4]
 800f69a:	1c4b      	adds	r3, r1, #1
 800f69c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800f6a0:	a80a      	add	r0, sp, #40	; 0x28
 800f6a2:	d13e      	bne.n	800f722 <_printf_float+0x162>
 800f6a4:	2306      	movs	r3, #6
 800f6a6:	6063      	str	r3, [r4, #4]
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800f6ae:	ab09      	add	r3, sp, #36	; 0x24
 800f6b0:	9300      	str	r3, [sp, #0]
 800f6b2:	ec49 8b10 	vmov	d0, r8, r9
 800f6b6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f6ba:	6022      	str	r2, [r4, #0]
 800f6bc:	f8cd a004 	str.w	sl, [sp, #4]
 800f6c0:	6861      	ldr	r1, [r4, #4]
 800f6c2:	4628      	mov	r0, r5
 800f6c4:	f7ff fee8 	bl	800f498 <__cvt>
 800f6c8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800f6cc:	2b47      	cmp	r3, #71	; 0x47
 800f6ce:	4680      	mov	r8, r0
 800f6d0:	d109      	bne.n	800f6e6 <_printf_float+0x126>
 800f6d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6d4:	1cd8      	adds	r0, r3, #3
 800f6d6:	db02      	blt.n	800f6de <_printf_float+0x11e>
 800f6d8:	6862      	ldr	r2, [r4, #4]
 800f6da:	4293      	cmp	r3, r2
 800f6dc:	dd47      	ble.n	800f76e <_printf_float+0x1ae>
 800f6de:	f1aa 0a02 	sub.w	sl, sl, #2
 800f6e2:	fa5f fa8a 	uxtb.w	sl, sl
 800f6e6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800f6ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f6ec:	d824      	bhi.n	800f738 <_printf_float+0x178>
 800f6ee:	3901      	subs	r1, #1
 800f6f0:	4652      	mov	r2, sl
 800f6f2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f6f6:	9109      	str	r1, [sp, #36]	; 0x24
 800f6f8:	f7ff ff2f 	bl	800f55a <__exponent>
 800f6fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f6fe:	1813      	adds	r3, r2, r0
 800f700:	2a01      	cmp	r2, #1
 800f702:	4681      	mov	r9, r0
 800f704:	6123      	str	r3, [r4, #16]
 800f706:	dc02      	bgt.n	800f70e <_printf_float+0x14e>
 800f708:	6822      	ldr	r2, [r4, #0]
 800f70a:	07d1      	lsls	r1, r2, #31
 800f70c:	d501      	bpl.n	800f712 <_printf_float+0x152>
 800f70e:	3301      	adds	r3, #1
 800f710:	6123      	str	r3, [r4, #16]
 800f712:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f716:	2b00      	cmp	r3, #0
 800f718:	d0a5      	beq.n	800f666 <_printf_float+0xa6>
 800f71a:	232d      	movs	r3, #45	; 0x2d
 800f71c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f720:	e7a1      	b.n	800f666 <_printf_float+0xa6>
 800f722:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800f726:	f000 8177 	beq.w	800fa18 <_printf_float+0x458>
 800f72a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800f72e:	d1bb      	bne.n	800f6a8 <_printf_float+0xe8>
 800f730:	2900      	cmp	r1, #0
 800f732:	d1b9      	bne.n	800f6a8 <_printf_float+0xe8>
 800f734:	2301      	movs	r3, #1
 800f736:	e7b6      	b.n	800f6a6 <_printf_float+0xe6>
 800f738:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800f73c:	d119      	bne.n	800f772 <_printf_float+0x1b2>
 800f73e:	2900      	cmp	r1, #0
 800f740:	6863      	ldr	r3, [r4, #4]
 800f742:	dd0c      	ble.n	800f75e <_printf_float+0x19e>
 800f744:	6121      	str	r1, [r4, #16]
 800f746:	b913      	cbnz	r3, 800f74e <_printf_float+0x18e>
 800f748:	6822      	ldr	r2, [r4, #0]
 800f74a:	07d2      	lsls	r2, r2, #31
 800f74c:	d502      	bpl.n	800f754 <_printf_float+0x194>
 800f74e:	3301      	adds	r3, #1
 800f750:	440b      	add	r3, r1
 800f752:	6123      	str	r3, [r4, #16]
 800f754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f756:	65a3      	str	r3, [r4, #88]	; 0x58
 800f758:	f04f 0900 	mov.w	r9, #0
 800f75c:	e7d9      	b.n	800f712 <_printf_float+0x152>
 800f75e:	b913      	cbnz	r3, 800f766 <_printf_float+0x1a6>
 800f760:	6822      	ldr	r2, [r4, #0]
 800f762:	07d0      	lsls	r0, r2, #31
 800f764:	d501      	bpl.n	800f76a <_printf_float+0x1aa>
 800f766:	3302      	adds	r3, #2
 800f768:	e7f3      	b.n	800f752 <_printf_float+0x192>
 800f76a:	2301      	movs	r3, #1
 800f76c:	e7f1      	b.n	800f752 <_printf_float+0x192>
 800f76e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800f772:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f776:	4293      	cmp	r3, r2
 800f778:	db05      	blt.n	800f786 <_printf_float+0x1c6>
 800f77a:	6822      	ldr	r2, [r4, #0]
 800f77c:	6123      	str	r3, [r4, #16]
 800f77e:	07d1      	lsls	r1, r2, #31
 800f780:	d5e8      	bpl.n	800f754 <_printf_float+0x194>
 800f782:	3301      	adds	r3, #1
 800f784:	e7e5      	b.n	800f752 <_printf_float+0x192>
 800f786:	2b00      	cmp	r3, #0
 800f788:	bfd4      	ite	le
 800f78a:	f1c3 0302 	rsble	r3, r3, #2
 800f78e:	2301      	movgt	r3, #1
 800f790:	4413      	add	r3, r2
 800f792:	e7de      	b.n	800f752 <_printf_float+0x192>
 800f794:	6823      	ldr	r3, [r4, #0]
 800f796:	055a      	lsls	r2, r3, #21
 800f798:	d407      	bmi.n	800f7aa <_printf_float+0x1ea>
 800f79a:	6923      	ldr	r3, [r4, #16]
 800f79c:	4642      	mov	r2, r8
 800f79e:	4631      	mov	r1, r6
 800f7a0:	4628      	mov	r0, r5
 800f7a2:	47b8      	blx	r7
 800f7a4:	3001      	adds	r0, #1
 800f7a6:	d12b      	bne.n	800f800 <_printf_float+0x240>
 800f7a8:	e767      	b.n	800f67a <_printf_float+0xba>
 800f7aa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800f7ae:	f240 80dc 	bls.w	800f96a <_printf_float+0x3aa>
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f7ba:	f7f1 f9ad 	bl	8000b18 <__aeabi_dcmpeq>
 800f7be:	2800      	cmp	r0, #0
 800f7c0:	d033      	beq.n	800f82a <_printf_float+0x26a>
 800f7c2:	2301      	movs	r3, #1
 800f7c4:	4a41      	ldr	r2, [pc, #260]	; (800f8cc <_printf_float+0x30c>)
 800f7c6:	4631      	mov	r1, r6
 800f7c8:	4628      	mov	r0, r5
 800f7ca:	47b8      	blx	r7
 800f7cc:	3001      	adds	r0, #1
 800f7ce:	f43f af54 	beq.w	800f67a <_printf_float+0xba>
 800f7d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f7d6:	429a      	cmp	r2, r3
 800f7d8:	db02      	blt.n	800f7e0 <_printf_float+0x220>
 800f7da:	6823      	ldr	r3, [r4, #0]
 800f7dc:	07d8      	lsls	r0, r3, #31
 800f7de:	d50f      	bpl.n	800f800 <_printf_float+0x240>
 800f7e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f7e4:	4631      	mov	r1, r6
 800f7e6:	4628      	mov	r0, r5
 800f7e8:	47b8      	blx	r7
 800f7ea:	3001      	adds	r0, #1
 800f7ec:	f43f af45 	beq.w	800f67a <_printf_float+0xba>
 800f7f0:	f04f 0800 	mov.w	r8, #0
 800f7f4:	f104 091a 	add.w	r9, r4, #26
 800f7f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7fa:	3b01      	subs	r3, #1
 800f7fc:	4543      	cmp	r3, r8
 800f7fe:	dc09      	bgt.n	800f814 <_printf_float+0x254>
 800f800:	6823      	ldr	r3, [r4, #0]
 800f802:	079b      	lsls	r3, r3, #30
 800f804:	f100 8103 	bmi.w	800fa0e <_printf_float+0x44e>
 800f808:	68e0      	ldr	r0, [r4, #12]
 800f80a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f80c:	4298      	cmp	r0, r3
 800f80e:	bfb8      	it	lt
 800f810:	4618      	movlt	r0, r3
 800f812:	e734      	b.n	800f67e <_printf_float+0xbe>
 800f814:	2301      	movs	r3, #1
 800f816:	464a      	mov	r2, r9
 800f818:	4631      	mov	r1, r6
 800f81a:	4628      	mov	r0, r5
 800f81c:	47b8      	blx	r7
 800f81e:	3001      	adds	r0, #1
 800f820:	f43f af2b 	beq.w	800f67a <_printf_float+0xba>
 800f824:	f108 0801 	add.w	r8, r8, #1
 800f828:	e7e6      	b.n	800f7f8 <_printf_float+0x238>
 800f82a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	dc2b      	bgt.n	800f888 <_printf_float+0x2c8>
 800f830:	2301      	movs	r3, #1
 800f832:	4a26      	ldr	r2, [pc, #152]	; (800f8cc <_printf_float+0x30c>)
 800f834:	4631      	mov	r1, r6
 800f836:	4628      	mov	r0, r5
 800f838:	47b8      	blx	r7
 800f83a:	3001      	adds	r0, #1
 800f83c:	f43f af1d 	beq.w	800f67a <_printf_float+0xba>
 800f840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f842:	b923      	cbnz	r3, 800f84e <_printf_float+0x28e>
 800f844:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f846:	b913      	cbnz	r3, 800f84e <_printf_float+0x28e>
 800f848:	6823      	ldr	r3, [r4, #0]
 800f84a:	07d9      	lsls	r1, r3, #31
 800f84c:	d5d8      	bpl.n	800f800 <_printf_float+0x240>
 800f84e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f852:	4631      	mov	r1, r6
 800f854:	4628      	mov	r0, r5
 800f856:	47b8      	blx	r7
 800f858:	3001      	adds	r0, #1
 800f85a:	f43f af0e 	beq.w	800f67a <_printf_float+0xba>
 800f85e:	f04f 0900 	mov.w	r9, #0
 800f862:	f104 0a1a 	add.w	sl, r4, #26
 800f866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f868:	425b      	negs	r3, r3
 800f86a:	454b      	cmp	r3, r9
 800f86c:	dc01      	bgt.n	800f872 <_printf_float+0x2b2>
 800f86e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f870:	e794      	b.n	800f79c <_printf_float+0x1dc>
 800f872:	2301      	movs	r3, #1
 800f874:	4652      	mov	r2, sl
 800f876:	4631      	mov	r1, r6
 800f878:	4628      	mov	r0, r5
 800f87a:	47b8      	blx	r7
 800f87c:	3001      	adds	r0, #1
 800f87e:	f43f aefc 	beq.w	800f67a <_printf_float+0xba>
 800f882:	f109 0901 	add.w	r9, r9, #1
 800f886:	e7ee      	b.n	800f866 <_printf_float+0x2a6>
 800f888:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f88a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f88c:	429a      	cmp	r2, r3
 800f88e:	bfa8      	it	ge
 800f890:	461a      	movge	r2, r3
 800f892:	2a00      	cmp	r2, #0
 800f894:	4691      	mov	r9, r2
 800f896:	dd07      	ble.n	800f8a8 <_printf_float+0x2e8>
 800f898:	4613      	mov	r3, r2
 800f89a:	4631      	mov	r1, r6
 800f89c:	4642      	mov	r2, r8
 800f89e:	4628      	mov	r0, r5
 800f8a0:	47b8      	blx	r7
 800f8a2:	3001      	adds	r0, #1
 800f8a4:	f43f aee9 	beq.w	800f67a <_printf_float+0xba>
 800f8a8:	f104 031a 	add.w	r3, r4, #26
 800f8ac:	f04f 0b00 	mov.w	fp, #0
 800f8b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f8b4:	9306      	str	r3, [sp, #24]
 800f8b6:	e015      	b.n	800f8e4 <_printf_float+0x324>
 800f8b8:	7fefffff 	.word	0x7fefffff
 800f8bc:	08014668 	.word	0x08014668
 800f8c0:	08014664 	.word	0x08014664
 800f8c4:	08014670 	.word	0x08014670
 800f8c8:	0801466c 	.word	0x0801466c
 800f8cc:	08014924 	.word	0x08014924
 800f8d0:	2301      	movs	r3, #1
 800f8d2:	9a06      	ldr	r2, [sp, #24]
 800f8d4:	4631      	mov	r1, r6
 800f8d6:	4628      	mov	r0, r5
 800f8d8:	47b8      	blx	r7
 800f8da:	3001      	adds	r0, #1
 800f8dc:	f43f aecd 	beq.w	800f67a <_printf_float+0xba>
 800f8e0:	f10b 0b01 	add.w	fp, fp, #1
 800f8e4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800f8e8:	ebaa 0309 	sub.w	r3, sl, r9
 800f8ec:	455b      	cmp	r3, fp
 800f8ee:	dcef      	bgt.n	800f8d0 <_printf_float+0x310>
 800f8f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f8f4:	429a      	cmp	r2, r3
 800f8f6:	44d0      	add	r8, sl
 800f8f8:	db15      	blt.n	800f926 <_printf_float+0x366>
 800f8fa:	6823      	ldr	r3, [r4, #0]
 800f8fc:	07da      	lsls	r2, r3, #31
 800f8fe:	d412      	bmi.n	800f926 <_printf_float+0x366>
 800f900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f902:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f904:	eba3 020a 	sub.w	r2, r3, sl
 800f908:	eba3 0a01 	sub.w	sl, r3, r1
 800f90c:	4592      	cmp	sl, r2
 800f90e:	bfa8      	it	ge
 800f910:	4692      	movge	sl, r2
 800f912:	f1ba 0f00 	cmp.w	sl, #0
 800f916:	dc0e      	bgt.n	800f936 <_printf_float+0x376>
 800f918:	f04f 0800 	mov.w	r8, #0
 800f91c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f920:	f104 091a 	add.w	r9, r4, #26
 800f924:	e019      	b.n	800f95a <_printf_float+0x39a>
 800f926:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f92a:	4631      	mov	r1, r6
 800f92c:	4628      	mov	r0, r5
 800f92e:	47b8      	blx	r7
 800f930:	3001      	adds	r0, #1
 800f932:	d1e5      	bne.n	800f900 <_printf_float+0x340>
 800f934:	e6a1      	b.n	800f67a <_printf_float+0xba>
 800f936:	4653      	mov	r3, sl
 800f938:	4642      	mov	r2, r8
 800f93a:	4631      	mov	r1, r6
 800f93c:	4628      	mov	r0, r5
 800f93e:	47b8      	blx	r7
 800f940:	3001      	adds	r0, #1
 800f942:	d1e9      	bne.n	800f918 <_printf_float+0x358>
 800f944:	e699      	b.n	800f67a <_printf_float+0xba>
 800f946:	2301      	movs	r3, #1
 800f948:	464a      	mov	r2, r9
 800f94a:	4631      	mov	r1, r6
 800f94c:	4628      	mov	r0, r5
 800f94e:	47b8      	blx	r7
 800f950:	3001      	adds	r0, #1
 800f952:	f43f ae92 	beq.w	800f67a <_printf_float+0xba>
 800f956:	f108 0801 	add.w	r8, r8, #1
 800f95a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f95e:	1a9b      	subs	r3, r3, r2
 800f960:	eba3 030a 	sub.w	r3, r3, sl
 800f964:	4543      	cmp	r3, r8
 800f966:	dcee      	bgt.n	800f946 <_printf_float+0x386>
 800f968:	e74a      	b.n	800f800 <_printf_float+0x240>
 800f96a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f96c:	2a01      	cmp	r2, #1
 800f96e:	dc01      	bgt.n	800f974 <_printf_float+0x3b4>
 800f970:	07db      	lsls	r3, r3, #31
 800f972:	d53a      	bpl.n	800f9ea <_printf_float+0x42a>
 800f974:	2301      	movs	r3, #1
 800f976:	4642      	mov	r2, r8
 800f978:	4631      	mov	r1, r6
 800f97a:	4628      	mov	r0, r5
 800f97c:	47b8      	blx	r7
 800f97e:	3001      	adds	r0, #1
 800f980:	f43f ae7b 	beq.w	800f67a <_printf_float+0xba>
 800f984:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f988:	4631      	mov	r1, r6
 800f98a:	4628      	mov	r0, r5
 800f98c:	47b8      	blx	r7
 800f98e:	3001      	adds	r0, #1
 800f990:	f108 0801 	add.w	r8, r8, #1
 800f994:	f43f ae71 	beq.w	800f67a <_printf_float+0xba>
 800f998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f99a:	2200      	movs	r2, #0
 800f99c:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800f9a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	f7f1 f8b7 	bl	8000b18 <__aeabi_dcmpeq>
 800f9aa:	b9c8      	cbnz	r0, 800f9e0 <_printf_float+0x420>
 800f9ac:	4653      	mov	r3, sl
 800f9ae:	4642      	mov	r2, r8
 800f9b0:	4631      	mov	r1, r6
 800f9b2:	4628      	mov	r0, r5
 800f9b4:	47b8      	blx	r7
 800f9b6:	3001      	adds	r0, #1
 800f9b8:	d10e      	bne.n	800f9d8 <_printf_float+0x418>
 800f9ba:	e65e      	b.n	800f67a <_printf_float+0xba>
 800f9bc:	2301      	movs	r3, #1
 800f9be:	4652      	mov	r2, sl
 800f9c0:	4631      	mov	r1, r6
 800f9c2:	4628      	mov	r0, r5
 800f9c4:	47b8      	blx	r7
 800f9c6:	3001      	adds	r0, #1
 800f9c8:	f43f ae57 	beq.w	800f67a <_printf_float+0xba>
 800f9cc:	f108 0801 	add.w	r8, r8, #1
 800f9d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9d2:	3b01      	subs	r3, #1
 800f9d4:	4543      	cmp	r3, r8
 800f9d6:	dcf1      	bgt.n	800f9bc <_printf_float+0x3fc>
 800f9d8:	464b      	mov	r3, r9
 800f9da:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f9de:	e6de      	b.n	800f79e <_printf_float+0x1de>
 800f9e0:	f04f 0800 	mov.w	r8, #0
 800f9e4:	f104 0a1a 	add.w	sl, r4, #26
 800f9e8:	e7f2      	b.n	800f9d0 <_printf_float+0x410>
 800f9ea:	2301      	movs	r3, #1
 800f9ec:	e7df      	b.n	800f9ae <_printf_float+0x3ee>
 800f9ee:	2301      	movs	r3, #1
 800f9f0:	464a      	mov	r2, r9
 800f9f2:	4631      	mov	r1, r6
 800f9f4:	4628      	mov	r0, r5
 800f9f6:	47b8      	blx	r7
 800f9f8:	3001      	adds	r0, #1
 800f9fa:	f43f ae3e 	beq.w	800f67a <_printf_float+0xba>
 800f9fe:	f108 0801 	add.w	r8, r8, #1
 800fa02:	68e3      	ldr	r3, [r4, #12]
 800fa04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fa06:	1a9b      	subs	r3, r3, r2
 800fa08:	4543      	cmp	r3, r8
 800fa0a:	dcf0      	bgt.n	800f9ee <_printf_float+0x42e>
 800fa0c:	e6fc      	b.n	800f808 <_printf_float+0x248>
 800fa0e:	f04f 0800 	mov.w	r8, #0
 800fa12:	f104 0919 	add.w	r9, r4, #25
 800fa16:	e7f4      	b.n	800fa02 <_printf_float+0x442>
 800fa18:	2900      	cmp	r1, #0
 800fa1a:	f43f ae8b 	beq.w	800f734 <_printf_float+0x174>
 800fa1e:	2300      	movs	r3, #0
 800fa20:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800fa24:	ab09      	add	r3, sp, #36	; 0x24
 800fa26:	9300      	str	r3, [sp, #0]
 800fa28:	ec49 8b10 	vmov	d0, r8, r9
 800fa2c:	6022      	str	r2, [r4, #0]
 800fa2e:	f8cd a004 	str.w	sl, [sp, #4]
 800fa32:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800fa36:	4628      	mov	r0, r5
 800fa38:	f7ff fd2e 	bl	800f498 <__cvt>
 800fa3c:	4680      	mov	r8, r0
 800fa3e:	e648      	b.n	800f6d2 <_printf_float+0x112>

0800fa40 <_printf_common>:
 800fa40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa44:	4691      	mov	r9, r2
 800fa46:	461f      	mov	r7, r3
 800fa48:	688a      	ldr	r2, [r1, #8]
 800fa4a:	690b      	ldr	r3, [r1, #16]
 800fa4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fa50:	4293      	cmp	r3, r2
 800fa52:	bfb8      	it	lt
 800fa54:	4613      	movlt	r3, r2
 800fa56:	f8c9 3000 	str.w	r3, [r9]
 800fa5a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fa5e:	4606      	mov	r6, r0
 800fa60:	460c      	mov	r4, r1
 800fa62:	b112      	cbz	r2, 800fa6a <_printf_common+0x2a>
 800fa64:	3301      	adds	r3, #1
 800fa66:	f8c9 3000 	str.w	r3, [r9]
 800fa6a:	6823      	ldr	r3, [r4, #0]
 800fa6c:	0699      	lsls	r1, r3, #26
 800fa6e:	bf42      	ittt	mi
 800fa70:	f8d9 3000 	ldrmi.w	r3, [r9]
 800fa74:	3302      	addmi	r3, #2
 800fa76:	f8c9 3000 	strmi.w	r3, [r9]
 800fa7a:	6825      	ldr	r5, [r4, #0]
 800fa7c:	f015 0506 	ands.w	r5, r5, #6
 800fa80:	d107      	bne.n	800fa92 <_printf_common+0x52>
 800fa82:	f104 0a19 	add.w	sl, r4, #25
 800fa86:	68e3      	ldr	r3, [r4, #12]
 800fa88:	f8d9 2000 	ldr.w	r2, [r9]
 800fa8c:	1a9b      	subs	r3, r3, r2
 800fa8e:	42ab      	cmp	r3, r5
 800fa90:	dc28      	bgt.n	800fae4 <_printf_common+0xa4>
 800fa92:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800fa96:	6822      	ldr	r2, [r4, #0]
 800fa98:	3300      	adds	r3, #0
 800fa9a:	bf18      	it	ne
 800fa9c:	2301      	movne	r3, #1
 800fa9e:	0692      	lsls	r2, r2, #26
 800faa0:	d42d      	bmi.n	800fafe <_printf_common+0xbe>
 800faa2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800faa6:	4639      	mov	r1, r7
 800faa8:	4630      	mov	r0, r6
 800faaa:	47c0      	blx	r8
 800faac:	3001      	adds	r0, #1
 800faae:	d020      	beq.n	800faf2 <_printf_common+0xb2>
 800fab0:	6823      	ldr	r3, [r4, #0]
 800fab2:	68e5      	ldr	r5, [r4, #12]
 800fab4:	f8d9 2000 	ldr.w	r2, [r9]
 800fab8:	f003 0306 	and.w	r3, r3, #6
 800fabc:	2b04      	cmp	r3, #4
 800fabe:	bf08      	it	eq
 800fac0:	1aad      	subeq	r5, r5, r2
 800fac2:	68a3      	ldr	r3, [r4, #8]
 800fac4:	6922      	ldr	r2, [r4, #16]
 800fac6:	bf0c      	ite	eq
 800fac8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800facc:	2500      	movne	r5, #0
 800face:	4293      	cmp	r3, r2
 800fad0:	bfc4      	itt	gt
 800fad2:	1a9b      	subgt	r3, r3, r2
 800fad4:	18ed      	addgt	r5, r5, r3
 800fad6:	f04f 0900 	mov.w	r9, #0
 800fada:	341a      	adds	r4, #26
 800fadc:	454d      	cmp	r5, r9
 800fade:	d11a      	bne.n	800fb16 <_printf_common+0xd6>
 800fae0:	2000      	movs	r0, #0
 800fae2:	e008      	b.n	800faf6 <_printf_common+0xb6>
 800fae4:	2301      	movs	r3, #1
 800fae6:	4652      	mov	r2, sl
 800fae8:	4639      	mov	r1, r7
 800faea:	4630      	mov	r0, r6
 800faec:	47c0      	blx	r8
 800faee:	3001      	adds	r0, #1
 800faf0:	d103      	bne.n	800fafa <_printf_common+0xba>
 800faf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800faf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fafa:	3501      	adds	r5, #1
 800fafc:	e7c3      	b.n	800fa86 <_printf_common+0x46>
 800fafe:	18e1      	adds	r1, r4, r3
 800fb00:	1c5a      	adds	r2, r3, #1
 800fb02:	2030      	movs	r0, #48	; 0x30
 800fb04:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fb08:	4422      	add	r2, r4
 800fb0a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fb0e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fb12:	3302      	adds	r3, #2
 800fb14:	e7c5      	b.n	800faa2 <_printf_common+0x62>
 800fb16:	2301      	movs	r3, #1
 800fb18:	4622      	mov	r2, r4
 800fb1a:	4639      	mov	r1, r7
 800fb1c:	4630      	mov	r0, r6
 800fb1e:	47c0      	blx	r8
 800fb20:	3001      	adds	r0, #1
 800fb22:	d0e6      	beq.n	800faf2 <_printf_common+0xb2>
 800fb24:	f109 0901 	add.w	r9, r9, #1
 800fb28:	e7d8      	b.n	800fadc <_printf_common+0x9c>
	...

0800fb2c <_printf_i>:
 800fb2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fb30:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800fb34:	460c      	mov	r4, r1
 800fb36:	7e09      	ldrb	r1, [r1, #24]
 800fb38:	b085      	sub	sp, #20
 800fb3a:	296e      	cmp	r1, #110	; 0x6e
 800fb3c:	4617      	mov	r7, r2
 800fb3e:	4606      	mov	r6, r0
 800fb40:	4698      	mov	r8, r3
 800fb42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fb44:	f000 80b3 	beq.w	800fcae <_printf_i+0x182>
 800fb48:	d822      	bhi.n	800fb90 <_printf_i+0x64>
 800fb4a:	2963      	cmp	r1, #99	; 0x63
 800fb4c:	d036      	beq.n	800fbbc <_printf_i+0x90>
 800fb4e:	d80a      	bhi.n	800fb66 <_printf_i+0x3a>
 800fb50:	2900      	cmp	r1, #0
 800fb52:	f000 80b9 	beq.w	800fcc8 <_printf_i+0x19c>
 800fb56:	2958      	cmp	r1, #88	; 0x58
 800fb58:	f000 8083 	beq.w	800fc62 <_printf_i+0x136>
 800fb5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fb60:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800fb64:	e032      	b.n	800fbcc <_printf_i+0xa0>
 800fb66:	2964      	cmp	r1, #100	; 0x64
 800fb68:	d001      	beq.n	800fb6e <_printf_i+0x42>
 800fb6a:	2969      	cmp	r1, #105	; 0x69
 800fb6c:	d1f6      	bne.n	800fb5c <_printf_i+0x30>
 800fb6e:	6820      	ldr	r0, [r4, #0]
 800fb70:	6813      	ldr	r3, [r2, #0]
 800fb72:	0605      	lsls	r5, r0, #24
 800fb74:	f103 0104 	add.w	r1, r3, #4
 800fb78:	d52a      	bpl.n	800fbd0 <_printf_i+0xa4>
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	6011      	str	r1, [r2, #0]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	da03      	bge.n	800fb8a <_printf_i+0x5e>
 800fb82:	222d      	movs	r2, #45	; 0x2d
 800fb84:	425b      	negs	r3, r3
 800fb86:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800fb8a:	486f      	ldr	r0, [pc, #444]	; (800fd48 <_printf_i+0x21c>)
 800fb8c:	220a      	movs	r2, #10
 800fb8e:	e039      	b.n	800fc04 <_printf_i+0xd8>
 800fb90:	2973      	cmp	r1, #115	; 0x73
 800fb92:	f000 809d 	beq.w	800fcd0 <_printf_i+0x1a4>
 800fb96:	d808      	bhi.n	800fbaa <_printf_i+0x7e>
 800fb98:	296f      	cmp	r1, #111	; 0x6f
 800fb9a:	d020      	beq.n	800fbde <_printf_i+0xb2>
 800fb9c:	2970      	cmp	r1, #112	; 0x70
 800fb9e:	d1dd      	bne.n	800fb5c <_printf_i+0x30>
 800fba0:	6823      	ldr	r3, [r4, #0]
 800fba2:	f043 0320 	orr.w	r3, r3, #32
 800fba6:	6023      	str	r3, [r4, #0]
 800fba8:	e003      	b.n	800fbb2 <_printf_i+0x86>
 800fbaa:	2975      	cmp	r1, #117	; 0x75
 800fbac:	d017      	beq.n	800fbde <_printf_i+0xb2>
 800fbae:	2978      	cmp	r1, #120	; 0x78
 800fbb0:	d1d4      	bne.n	800fb5c <_printf_i+0x30>
 800fbb2:	2378      	movs	r3, #120	; 0x78
 800fbb4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fbb8:	4864      	ldr	r0, [pc, #400]	; (800fd4c <_printf_i+0x220>)
 800fbba:	e055      	b.n	800fc68 <_printf_i+0x13c>
 800fbbc:	6813      	ldr	r3, [r2, #0]
 800fbbe:	1d19      	adds	r1, r3, #4
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	6011      	str	r1, [r2, #0]
 800fbc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fbc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fbcc:	2301      	movs	r3, #1
 800fbce:	e08c      	b.n	800fcea <_printf_i+0x1be>
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	6011      	str	r1, [r2, #0]
 800fbd4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fbd8:	bf18      	it	ne
 800fbda:	b21b      	sxthne	r3, r3
 800fbdc:	e7cf      	b.n	800fb7e <_printf_i+0x52>
 800fbde:	6813      	ldr	r3, [r2, #0]
 800fbe0:	6825      	ldr	r5, [r4, #0]
 800fbe2:	1d18      	adds	r0, r3, #4
 800fbe4:	6010      	str	r0, [r2, #0]
 800fbe6:	0628      	lsls	r0, r5, #24
 800fbe8:	d501      	bpl.n	800fbee <_printf_i+0xc2>
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	e002      	b.n	800fbf4 <_printf_i+0xc8>
 800fbee:	0668      	lsls	r0, r5, #25
 800fbf0:	d5fb      	bpl.n	800fbea <_printf_i+0xbe>
 800fbf2:	881b      	ldrh	r3, [r3, #0]
 800fbf4:	4854      	ldr	r0, [pc, #336]	; (800fd48 <_printf_i+0x21c>)
 800fbf6:	296f      	cmp	r1, #111	; 0x6f
 800fbf8:	bf14      	ite	ne
 800fbfa:	220a      	movne	r2, #10
 800fbfc:	2208      	moveq	r2, #8
 800fbfe:	2100      	movs	r1, #0
 800fc00:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fc04:	6865      	ldr	r5, [r4, #4]
 800fc06:	60a5      	str	r5, [r4, #8]
 800fc08:	2d00      	cmp	r5, #0
 800fc0a:	f2c0 8095 	blt.w	800fd38 <_printf_i+0x20c>
 800fc0e:	6821      	ldr	r1, [r4, #0]
 800fc10:	f021 0104 	bic.w	r1, r1, #4
 800fc14:	6021      	str	r1, [r4, #0]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d13d      	bne.n	800fc96 <_printf_i+0x16a>
 800fc1a:	2d00      	cmp	r5, #0
 800fc1c:	f040 808e 	bne.w	800fd3c <_printf_i+0x210>
 800fc20:	4665      	mov	r5, ip
 800fc22:	2a08      	cmp	r2, #8
 800fc24:	d10b      	bne.n	800fc3e <_printf_i+0x112>
 800fc26:	6823      	ldr	r3, [r4, #0]
 800fc28:	07db      	lsls	r3, r3, #31
 800fc2a:	d508      	bpl.n	800fc3e <_printf_i+0x112>
 800fc2c:	6923      	ldr	r3, [r4, #16]
 800fc2e:	6862      	ldr	r2, [r4, #4]
 800fc30:	429a      	cmp	r2, r3
 800fc32:	bfde      	ittt	le
 800fc34:	2330      	movle	r3, #48	; 0x30
 800fc36:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fc3a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800fc3e:	ebac 0305 	sub.w	r3, ip, r5
 800fc42:	6123      	str	r3, [r4, #16]
 800fc44:	f8cd 8000 	str.w	r8, [sp]
 800fc48:	463b      	mov	r3, r7
 800fc4a:	aa03      	add	r2, sp, #12
 800fc4c:	4621      	mov	r1, r4
 800fc4e:	4630      	mov	r0, r6
 800fc50:	f7ff fef6 	bl	800fa40 <_printf_common>
 800fc54:	3001      	adds	r0, #1
 800fc56:	d14d      	bne.n	800fcf4 <_printf_i+0x1c8>
 800fc58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fc5c:	b005      	add	sp, #20
 800fc5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc62:	4839      	ldr	r0, [pc, #228]	; (800fd48 <_printf_i+0x21c>)
 800fc64:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800fc68:	6813      	ldr	r3, [r2, #0]
 800fc6a:	6821      	ldr	r1, [r4, #0]
 800fc6c:	1d1d      	adds	r5, r3, #4
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	6015      	str	r5, [r2, #0]
 800fc72:	060a      	lsls	r2, r1, #24
 800fc74:	d50b      	bpl.n	800fc8e <_printf_i+0x162>
 800fc76:	07ca      	lsls	r2, r1, #31
 800fc78:	bf44      	itt	mi
 800fc7a:	f041 0120 	orrmi.w	r1, r1, #32
 800fc7e:	6021      	strmi	r1, [r4, #0]
 800fc80:	b91b      	cbnz	r3, 800fc8a <_printf_i+0x15e>
 800fc82:	6822      	ldr	r2, [r4, #0]
 800fc84:	f022 0220 	bic.w	r2, r2, #32
 800fc88:	6022      	str	r2, [r4, #0]
 800fc8a:	2210      	movs	r2, #16
 800fc8c:	e7b7      	b.n	800fbfe <_printf_i+0xd2>
 800fc8e:	064d      	lsls	r5, r1, #25
 800fc90:	bf48      	it	mi
 800fc92:	b29b      	uxthmi	r3, r3
 800fc94:	e7ef      	b.n	800fc76 <_printf_i+0x14a>
 800fc96:	4665      	mov	r5, ip
 800fc98:	fbb3 f1f2 	udiv	r1, r3, r2
 800fc9c:	fb02 3311 	mls	r3, r2, r1, r3
 800fca0:	5cc3      	ldrb	r3, [r0, r3]
 800fca2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800fca6:	460b      	mov	r3, r1
 800fca8:	2900      	cmp	r1, #0
 800fcaa:	d1f5      	bne.n	800fc98 <_printf_i+0x16c>
 800fcac:	e7b9      	b.n	800fc22 <_printf_i+0xf6>
 800fcae:	6813      	ldr	r3, [r2, #0]
 800fcb0:	6825      	ldr	r5, [r4, #0]
 800fcb2:	6961      	ldr	r1, [r4, #20]
 800fcb4:	1d18      	adds	r0, r3, #4
 800fcb6:	6010      	str	r0, [r2, #0]
 800fcb8:	0628      	lsls	r0, r5, #24
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	d501      	bpl.n	800fcc2 <_printf_i+0x196>
 800fcbe:	6019      	str	r1, [r3, #0]
 800fcc0:	e002      	b.n	800fcc8 <_printf_i+0x19c>
 800fcc2:	066a      	lsls	r2, r5, #25
 800fcc4:	d5fb      	bpl.n	800fcbe <_printf_i+0x192>
 800fcc6:	8019      	strh	r1, [r3, #0]
 800fcc8:	2300      	movs	r3, #0
 800fcca:	6123      	str	r3, [r4, #16]
 800fccc:	4665      	mov	r5, ip
 800fcce:	e7b9      	b.n	800fc44 <_printf_i+0x118>
 800fcd0:	6813      	ldr	r3, [r2, #0]
 800fcd2:	1d19      	adds	r1, r3, #4
 800fcd4:	6011      	str	r1, [r2, #0]
 800fcd6:	681d      	ldr	r5, [r3, #0]
 800fcd8:	6862      	ldr	r2, [r4, #4]
 800fcda:	2100      	movs	r1, #0
 800fcdc:	4628      	mov	r0, r5
 800fcde:	f7f0 faa7 	bl	8000230 <memchr>
 800fce2:	b108      	cbz	r0, 800fce8 <_printf_i+0x1bc>
 800fce4:	1b40      	subs	r0, r0, r5
 800fce6:	6060      	str	r0, [r4, #4]
 800fce8:	6863      	ldr	r3, [r4, #4]
 800fcea:	6123      	str	r3, [r4, #16]
 800fcec:	2300      	movs	r3, #0
 800fcee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fcf2:	e7a7      	b.n	800fc44 <_printf_i+0x118>
 800fcf4:	6923      	ldr	r3, [r4, #16]
 800fcf6:	462a      	mov	r2, r5
 800fcf8:	4639      	mov	r1, r7
 800fcfa:	4630      	mov	r0, r6
 800fcfc:	47c0      	blx	r8
 800fcfe:	3001      	adds	r0, #1
 800fd00:	d0aa      	beq.n	800fc58 <_printf_i+0x12c>
 800fd02:	6823      	ldr	r3, [r4, #0]
 800fd04:	079b      	lsls	r3, r3, #30
 800fd06:	d413      	bmi.n	800fd30 <_printf_i+0x204>
 800fd08:	68e0      	ldr	r0, [r4, #12]
 800fd0a:	9b03      	ldr	r3, [sp, #12]
 800fd0c:	4298      	cmp	r0, r3
 800fd0e:	bfb8      	it	lt
 800fd10:	4618      	movlt	r0, r3
 800fd12:	e7a3      	b.n	800fc5c <_printf_i+0x130>
 800fd14:	2301      	movs	r3, #1
 800fd16:	464a      	mov	r2, r9
 800fd18:	4639      	mov	r1, r7
 800fd1a:	4630      	mov	r0, r6
 800fd1c:	47c0      	blx	r8
 800fd1e:	3001      	adds	r0, #1
 800fd20:	d09a      	beq.n	800fc58 <_printf_i+0x12c>
 800fd22:	3501      	adds	r5, #1
 800fd24:	68e3      	ldr	r3, [r4, #12]
 800fd26:	9a03      	ldr	r2, [sp, #12]
 800fd28:	1a9b      	subs	r3, r3, r2
 800fd2a:	42ab      	cmp	r3, r5
 800fd2c:	dcf2      	bgt.n	800fd14 <_printf_i+0x1e8>
 800fd2e:	e7eb      	b.n	800fd08 <_printf_i+0x1dc>
 800fd30:	2500      	movs	r5, #0
 800fd32:	f104 0919 	add.w	r9, r4, #25
 800fd36:	e7f5      	b.n	800fd24 <_printf_i+0x1f8>
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d1ac      	bne.n	800fc96 <_printf_i+0x16a>
 800fd3c:	7803      	ldrb	r3, [r0, #0]
 800fd3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fd42:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fd46:	e76c      	b.n	800fc22 <_printf_i+0xf6>
 800fd48:	08014674 	.word	0x08014674
 800fd4c:	08014685 	.word	0x08014685

0800fd50 <iprintf>:
 800fd50:	b40f      	push	{r0, r1, r2, r3}
 800fd52:	4b0a      	ldr	r3, [pc, #40]	; (800fd7c <iprintf+0x2c>)
 800fd54:	b513      	push	{r0, r1, r4, lr}
 800fd56:	681c      	ldr	r4, [r3, #0]
 800fd58:	b124      	cbz	r4, 800fd64 <iprintf+0x14>
 800fd5a:	69a3      	ldr	r3, [r4, #24]
 800fd5c:	b913      	cbnz	r3, 800fd64 <iprintf+0x14>
 800fd5e:	4620      	mov	r0, r4
 800fd60:	f001 f8aa 	bl	8010eb8 <__sinit>
 800fd64:	ab05      	add	r3, sp, #20
 800fd66:	9a04      	ldr	r2, [sp, #16]
 800fd68:	68a1      	ldr	r1, [r4, #8]
 800fd6a:	9301      	str	r3, [sp, #4]
 800fd6c:	4620      	mov	r0, r4
 800fd6e:	f001 febf 	bl	8011af0 <_vfiprintf_r>
 800fd72:	b002      	add	sp, #8
 800fd74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd78:	b004      	add	sp, #16
 800fd7a:	4770      	bx	lr
 800fd7c:	20001c34 	.word	0x20001c34

0800fd80 <_puts_r>:
 800fd80:	b570      	push	{r4, r5, r6, lr}
 800fd82:	460e      	mov	r6, r1
 800fd84:	4605      	mov	r5, r0
 800fd86:	b118      	cbz	r0, 800fd90 <_puts_r+0x10>
 800fd88:	6983      	ldr	r3, [r0, #24]
 800fd8a:	b90b      	cbnz	r3, 800fd90 <_puts_r+0x10>
 800fd8c:	f001 f894 	bl	8010eb8 <__sinit>
 800fd90:	69ab      	ldr	r3, [r5, #24]
 800fd92:	68ac      	ldr	r4, [r5, #8]
 800fd94:	b913      	cbnz	r3, 800fd9c <_puts_r+0x1c>
 800fd96:	4628      	mov	r0, r5
 800fd98:	f001 f88e 	bl	8010eb8 <__sinit>
 800fd9c:	4b23      	ldr	r3, [pc, #140]	; (800fe2c <_puts_r+0xac>)
 800fd9e:	429c      	cmp	r4, r3
 800fda0:	d117      	bne.n	800fdd2 <_puts_r+0x52>
 800fda2:	686c      	ldr	r4, [r5, #4]
 800fda4:	89a3      	ldrh	r3, [r4, #12]
 800fda6:	071b      	lsls	r3, r3, #28
 800fda8:	d51d      	bpl.n	800fde6 <_puts_r+0x66>
 800fdaa:	6923      	ldr	r3, [r4, #16]
 800fdac:	b1db      	cbz	r3, 800fde6 <_puts_r+0x66>
 800fdae:	3e01      	subs	r6, #1
 800fdb0:	68a3      	ldr	r3, [r4, #8]
 800fdb2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800fdb6:	3b01      	subs	r3, #1
 800fdb8:	60a3      	str	r3, [r4, #8]
 800fdba:	b9e9      	cbnz	r1, 800fdf8 <_puts_r+0x78>
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	da2e      	bge.n	800fe1e <_puts_r+0x9e>
 800fdc0:	4622      	mov	r2, r4
 800fdc2:	210a      	movs	r1, #10
 800fdc4:	4628      	mov	r0, r5
 800fdc6:	f000 f883 	bl	800fed0 <__swbuf_r>
 800fdca:	3001      	adds	r0, #1
 800fdcc:	d011      	beq.n	800fdf2 <_puts_r+0x72>
 800fdce:	200a      	movs	r0, #10
 800fdd0:	e011      	b.n	800fdf6 <_puts_r+0x76>
 800fdd2:	4b17      	ldr	r3, [pc, #92]	; (800fe30 <_puts_r+0xb0>)
 800fdd4:	429c      	cmp	r4, r3
 800fdd6:	d101      	bne.n	800fddc <_puts_r+0x5c>
 800fdd8:	68ac      	ldr	r4, [r5, #8]
 800fdda:	e7e3      	b.n	800fda4 <_puts_r+0x24>
 800fddc:	4b15      	ldr	r3, [pc, #84]	; (800fe34 <_puts_r+0xb4>)
 800fdde:	429c      	cmp	r4, r3
 800fde0:	bf08      	it	eq
 800fde2:	68ec      	ldreq	r4, [r5, #12]
 800fde4:	e7de      	b.n	800fda4 <_puts_r+0x24>
 800fde6:	4621      	mov	r1, r4
 800fde8:	4628      	mov	r0, r5
 800fdea:	f000 f8c3 	bl	800ff74 <__swsetup_r>
 800fdee:	2800      	cmp	r0, #0
 800fdf0:	d0dd      	beq.n	800fdae <_puts_r+0x2e>
 800fdf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fdf6:	bd70      	pop	{r4, r5, r6, pc}
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	da04      	bge.n	800fe06 <_puts_r+0x86>
 800fdfc:	69a2      	ldr	r2, [r4, #24]
 800fdfe:	429a      	cmp	r2, r3
 800fe00:	dc06      	bgt.n	800fe10 <_puts_r+0x90>
 800fe02:	290a      	cmp	r1, #10
 800fe04:	d004      	beq.n	800fe10 <_puts_r+0x90>
 800fe06:	6823      	ldr	r3, [r4, #0]
 800fe08:	1c5a      	adds	r2, r3, #1
 800fe0a:	6022      	str	r2, [r4, #0]
 800fe0c:	7019      	strb	r1, [r3, #0]
 800fe0e:	e7cf      	b.n	800fdb0 <_puts_r+0x30>
 800fe10:	4622      	mov	r2, r4
 800fe12:	4628      	mov	r0, r5
 800fe14:	f000 f85c 	bl	800fed0 <__swbuf_r>
 800fe18:	3001      	adds	r0, #1
 800fe1a:	d1c9      	bne.n	800fdb0 <_puts_r+0x30>
 800fe1c:	e7e9      	b.n	800fdf2 <_puts_r+0x72>
 800fe1e:	6823      	ldr	r3, [r4, #0]
 800fe20:	200a      	movs	r0, #10
 800fe22:	1c5a      	adds	r2, r3, #1
 800fe24:	6022      	str	r2, [r4, #0]
 800fe26:	7018      	strb	r0, [r3, #0]
 800fe28:	e7e5      	b.n	800fdf6 <_puts_r+0x76>
 800fe2a:	bf00      	nop
 800fe2c:	080146c4 	.word	0x080146c4
 800fe30:	080146e4 	.word	0x080146e4
 800fe34:	080146a4 	.word	0x080146a4

0800fe38 <puts>:
 800fe38:	4b02      	ldr	r3, [pc, #8]	; (800fe44 <puts+0xc>)
 800fe3a:	4601      	mov	r1, r0
 800fe3c:	6818      	ldr	r0, [r3, #0]
 800fe3e:	f7ff bf9f 	b.w	800fd80 <_puts_r>
 800fe42:	bf00      	nop
 800fe44:	20001c34 	.word	0x20001c34

0800fe48 <sniprintf>:
 800fe48:	b40c      	push	{r2, r3}
 800fe4a:	b530      	push	{r4, r5, lr}
 800fe4c:	4b17      	ldr	r3, [pc, #92]	; (800feac <sniprintf+0x64>)
 800fe4e:	1e0c      	subs	r4, r1, #0
 800fe50:	b09d      	sub	sp, #116	; 0x74
 800fe52:	681d      	ldr	r5, [r3, #0]
 800fe54:	da08      	bge.n	800fe68 <sniprintf+0x20>
 800fe56:	238b      	movs	r3, #139	; 0x8b
 800fe58:	602b      	str	r3, [r5, #0]
 800fe5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fe5e:	b01d      	add	sp, #116	; 0x74
 800fe60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fe64:	b002      	add	sp, #8
 800fe66:	4770      	bx	lr
 800fe68:	f44f 7302 	mov.w	r3, #520	; 0x208
 800fe6c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fe70:	bf14      	ite	ne
 800fe72:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800fe76:	4623      	moveq	r3, r4
 800fe78:	9304      	str	r3, [sp, #16]
 800fe7a:	9307      	str	r3, [sp, #28]
 800fe7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fe80:	9002      	str	r0, [sp, #8]
 800fe82:	9006      	str	r0, [sp, #24]
 800fe84:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fe88:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800fe8a:	ab21      	add	r3, sp, #132	; 0x84
 800fe8c:	a902      	add	r1, sp, #8
 800fe8e:	4628      	mov	r0, r5
 800fe90:	9301      	str	r3, [sp, #4]
 800fe92:	f001 fd0b 	bl	80118ac <_svfiprintf_r>
 800fe96:	1c43      	adds	r3, r0, #1
 800fe98:	bfbc      	itt	lt
 800fe9a:	238b      	movlt	r3, #139	; 0x8b
 800fe9c:	602b      	strlt	r3, [r5, #0]
 800fe9e:	2c00      	cmp	r4, #0
 800fea0:	d0dd      	beq.n	800fe5e <sniprintf+0x16>
 800fea2:	9b02      	ldr	r3, [sp, #8]
 800fea4:	2200      	movs	r2, #0
 800fea6:	701a      	strb	r2, [r3, #0]
 800fea8:	e7d9      	b.n	800fe5e <sniprintf+0x16>
 800feaa:	bf00      	nop
 800feac:	20001c34 	.word	0x20001c34

0800feb0 <strcat>:
 800feb0:	b510      	push	{r4, lr}
 800feb2:	4603      	mov	r3, r0
 800feb4:	781a      	ldrb	r2, [r3, #0]
 800feb6:	1c5c      	adds	r4, r3, #1
 800feb8:	b93a      	cbnz	r2, 800feca <strcat+0x1a>
 800feba:	3b01      	subs	r3, #1
 800febc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fec0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fec4:	2a00      	cmp	r2, #0
 800fec6:	d1f9      	bne.n	800febc <strcat+0xc>
 800fec8:	bd10      	pop	{r4, pc}
 800feca:	4623      	mov	r3, r4
 800fecc:	e7f2      	b.n	800feb4 <strcat+0x4>
	...

0800fed0 <__swbuf_r>:
 800fed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fed2:	460e      	mov	r6, r1
 800fed4:	4614      	mov	r4, r2
 800fed6:	4605      	mov	r5, r0
 800fed8:	b118      	cbz	r0, 800fee2 <__swbuf_r+0x12>
 800feda:	6983      	ldr	r3, [r0, #24]
 800fedc:	b90b      	cbnz	r3, 800fee2 <__swbuf_r+0x12>
 800fede:	f000 ffeb 	bl	8010eb8 <__sinit>
 800fee2:	4b21      	ldr	r3, [pc, #132]	; (800ff68 <__swbuf_r+0x98>)
 800fee4:	429c      	cmp	r4, r3
 800fee6:	d12a      	bne.n	800ff3e <__swbuf_r+0x6e>
 800fee8:	686c      	ldr	r4, [r5, #4]
 800feea:	69a3      	ldr	r3, [r4, #24]
 800feec:	60a3      	str	r3, [r4, #8]
 800feee:	89a3      	ldrh	r3, [r4, #12]
 800fef0:	071a      	lsls	r2, r3, #28
 800fef2:	d52e      	bpl.n	800ff52 <__swbuf_r+0x82>
 800fef4:	6923      	ldr	r3, [r4, #16]
 800fef6:	b363      	cbz	r3, 800ff52 <__swbuf_r+0x82>
 800fef8:	6923      	ldr	r3, [r4, #16]
 800fefa:	6820      	ldr	r0, [r4, #0]
 800fefc:	1ac0      	subs	r0, r0, r3
 800fefe:	6963      	ldr	r3, [r4, #20]
 800ff00:	b2f6      	uxtb	r6, r6
 800ff02:	4283      	cmp	r3, r0
 800ff04:	4637      	mov	r7, r6
 800ff06:	dc04      	bgt.n	800ff12 <__swbuf_r+0x42>
 800ff08:	4621      	mov	r1, r4
 800ff0a:	4628      	mov	r0, r5
 800ff0c:	f000 ff6a 	bl	8010de4 <_fflush_r>
 800ff10:	bb28      	cbnz	r0, 800ff5e <__swbuf_r+0x8e>
 800ff12:	68a3      	ldr	r3, [r4, #8]
 800ff14:	3b01      	subs	r3, #1
 800ff16:	60a3      	str	r3, [r4, #8]
 800ff18:	6823      	ldr	r3, [r4, #0]
 800ff1a:	1c5a      	adds	r2, r3, #1
 800ff1c:	6022      	str	r2, [r4, #0]
 800ff1e:	701e      	strb	r6, [r3, #0]
 800ff20:	6963      	ldr	r3, [r4, #20]
 800ff22:	3001      	adds	r0, #1
 800ff24:	4283      	cmp	r3, r0
 800ff26:	d004      	beq.n	800ff32 <__swbuf_r+0x62>
 800ff28:	89a3      	ldrh	r3, [r4, #12]
 800ff2a:	07db      	lsls	r3, r3, #31
 800ff2c:	d519      	bpl.n	800ff62 <__swbuf_r+0x92>
 800ff2e:	2e0a      	cmp	r6, #10
 800ff30:	d117      	bne.n	800ff62 <__swbuf_r+0x92>
 800ff32:	4621      	mov	r1, r4
 800ff34:	4628      	mov	r0, r5
 800ff36:	f000 ff55 	bl	8010de4 <_fflush_r>
 800ff3a:	b190      	cbz	r0, 800ff62 <__swbuf_r+0x92>
 800ff3c:	e00f      	b.n	800ff5e <__swbuf_r+0x8e>
 800ff3e:	4b0b      	ldr	r3, [pc, #44]	; (800ff6c <__swbuf_r+0x9c>)
 800ff40:	429c      	cmp	r4, r3
 800ff42:	d101      	bne.n	800ff48 <__swbuf_r+0x78>
 800ff44:	68ac      	ldr	r4, [r5, #8]
 800ff46:	e7d0      	b.n	800feea <__swbuf_r+0x1a>
 800ff48:	4b09      	ldr	r3, [pc, #36]	; (800ff70 <__swbuf_r+0xa0>)
 800ff4a:	429c      	cmp	r4, r3
 800ff4c:	bf08      	it	eq
 800ff4e:	68ec      	ldreq	r4, [r5, #12]
 800ff50:	e7cb      	b.n	800feea <__swbuf_r+0x1a>
 800ff52:	4621      	mov	r1, r4
 800ff54:	4628      	mov	r0, r5
 800ff56:	f000 f80d 	bl	800ff74 <__swsetup_r>
 800ff5a:	2800      	cmp	r0, #0
 800ff5c:	d0cc      	beq.n	800fef8 <__swbuf_r+0x28>
 800ff5e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ff62:	4638      	mov	r0, r7
 800ff64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff66:	bf00      	nop
 800ff68:	080146c4 	.word	0x080146c4
 800ff6c:	080146e4 	.word	0x080146e4
 800ff70:	080146a4 	.word	0x080146a4

0800ff74 <__swsetup_r>:
 800ff74:	4b32      	ldr	r3, [pc, #200]	; (8010040 <__swsetup_r+0xcc>)
 800ff76:	b570      	push	{r4, r5, r6, lr}
 800ff78:	681d      	ldr	r5, [r3, #0]
 800ff7a:	4606      	mov	r6, r0
 800ff7c:	460c      	mov	r4, r1
 800ff7e:	b125      	cbz	r5, 800ff8a <__swsetup_r+0x16>
 800ff80:	69ab      	ldr	r3, [r5, #24]
 800ff82:	b913      	cbnz	r3, 800ff8a <__swsetup_r+0x16>
 800ff84:	4628      	mov	r0, r5
 800ff86:	f000 ff97 	bl	8010eb8 <__sinit>
 800ff8a:	4b2e      	ldr	r3, [pc, #184]	; (8010044 <__swsetup_r+0xd0>)
 800ff8c:	429c      	cmp	r4, r3
 800ff8e:	d10f      	bne.n	800ffb0 <__swsetup_r+0x3c>
 800ff90:	686c      	ldr	r4, [r5, #4]
 800ff92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff96:	b29a      	uxth	r2, r3
 800ff98:	0715      	lsls	r5, r2, #28
 800ff9a:	d42c      	bmi.n	800fff6 <__swsetup_r+0x82>
 800ff9c:	06d0      	lsls	r0, r2, #27
 800ff9e:	d411      	bmi.n	800ffc4 <__swsetup_r+0x50>
 800ffa0:	2209      	movs	r2, #9
 800ffa2:	6032      	str	r2, [r6, #0]
 800ffa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ffa8:	81a3      	strh	r3, [r4, #12]
 800ffaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ffae:	e03e      	b.n	801002e <__swsetup_r+0xba>
 800ffb0:	4b25      	ldr	r3, [pc, #148]	; (8010048 <__swsetup_r+0xd4>)
 800ffb2:	429c      	cmp	r4, r3
 800ffb4:	d101      	bne.n	800ffba <__swsetup_r+0x46>
 800ffb6:	68ac      	ldr	r4, [r5, #8]
 800ffb8:	e7eb      	b.n	800ff92 <__swsetup_r+0x1e>
 800ffba:	4b24      	ldr	r3, [pc, #144]	; (801004c <__swsetup_r+0xd8>)
 800ffbc:	429c      	cmp	r4, r3
 800ffbe:	bf08      	it	eq
 800ffc0:	68ec      	ldreq	r4, [r5, #12]
 800ffc2:	e7e6      	b.n	800ff92 <__swsetup_r+0x1e>
 800ffc4:	0751      	lsls	r1, r2, #29
 800ffc6:	d512      	bpl.n	800ffee <__swsetup_r+0x7a>
 800ffc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ffca:	b141      	cbz	r1, 800ffde <__swsetup_r+0x6a>
 800ffcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ffd0:	4299      	cmp	r1, r3
 800ffd2:	d002      	beq.n	800ffda <__swsetup_r+0x66>
 800ffd4:	4630      	mov	r0, r6
 800ffd6:	f001 fb67 	bl	80116a8 <_free_r>
 800ffda:	2300      	movs	r3, #0
 800ffdc:	6363      	str	r3, [r4, #52]	; 0x34
 800ffde:	89a3      	ldrh	r3, [r4, #12]
 800ffe0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ffe4:	81a3      	strh	r3, [r4, #12]
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	6063      	str	r3, [r4, #4]
 800ffea:	6923      	ldr	r3, [r4, #16]
 800ffec:	6023      	str	r3, [r4, #0]
 800ffee:	89a3      	ldrh	r3, [r4, #12]
 800fff0:	f043 0308 	orr.w	r3, r3, #8
 800fff4:	81a3      	strh	r3, [r4, #12]
 800fff6:	6923      	ldr	r3, [r4, #16]
 800fff8:	b94b      	cbnz	r3, 801000e <__swsetup_r+0x9a>
 800fffa:	89a3      	ldrh	r3, [r4, #12]
 800fffc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010004:	d003      	beq.n	801000e <__swsetup_r+0x9a>
 8010006:	4621      	mov	r1, r4
 8010008:	4630      	mov	r0, r6
 801000a:	f001 f811 	bl	8011030 <__smakebuf_r>
 801000e:	89a2      	ldrh	r2, [r4, #12]
 8010010:	f012 0301 	ands.w	r3, r2, #1
 8010014:	d00c      	beq.n	8010030 <__swsetup_r+0xbc>
 8010016:	2300      	movs	r3, #0
 8010018:	60a3      	str	r3, [r4, #8]
 801001a:	6963      	ldr	r3, [r4, #20]
 801001c:	425b      	negs	r3, r3
 801001e:	61a3      	str	r3, [r4, #24]
 8010020:	6923      	ldr	r3, [r4, #16]
 8010022:	b953      	cbnz	r3, 801003a <__swsetup_r+0xc6>
 8010024:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010028:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801002c:	d1ba      	bne.n	800ffa4 <__swsetup_r+0x30>
 801002e:	bd70      	pop	{r4, r5, r6, pc}
 8010030:	0792      	lsls	r2, r2, #30
 8010032:	bf58      	it	pl
 8010034:	6963      	ldrpl	r3, [r4, #20]
 8010036:	60a3      	str	r3, [r4, #8]
 8010038:	e7f2      	b.n	8010020 <__swsetup_r+0xac>
 801003a:	2000      	movs	r0, #0
 801003c:	e7f7      	b.n	801002e <__swsetup_r+0xba>
 801003e:	bf00      	nop
 8010040:	20001c34 	.word	0x20001c34
 8010044:	080146c4 	.word	0x080146c4
 8010048:	080146e4 	.word	0x080146e4
 801004c:	080146a4 	.word	0x080146a4

08010050 <quorem>:
 8010050:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010054:	6903      	ldr	r3, [r0, #16]
 8010056:	690c      	ldr	r4, [r1, #16]
 8010058:	42a3      	cmp	r3, r4
 801005a:	4680      	mov	r8, r0
 801005c:	f2c0 8082 	blt.w	8010164 <quorem+0x114>
 8010060:	3c01      	subs	r4, #1
 8010062:	f101 0714 	add.w	r7, r1, #20
 8010066:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801006a:	f100 0614 	add.w	r6, r0, #20
 801006e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8010072:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8010076:	eb06 030c 	add.w	r3, r6, ip
 801007a:	3501      	adds	r5, #1
 801007c:	eb07 090c 	add.w	r9, r7, ip
 8010080:	9301      	str	r3, [sp, #4]
 8010082:	fbb0 f5f5 	udiv	r5, r0, r5
 8010086:	b395      	cbz	r5, 80100ee <quorem+0x9e>
 8010088:	f04f 0a00 	mov.w	sl, #0
 801008c:	4638      	mov	r0, r7
 801008e:	46b6      	mov	lr, r6
 8010090:	46d3      	mov	fp, sl
 8010092:	f850 2b04 	ldr.w	r2, [r0], #4
 8010096:	b293      	uxth	r3, r2
 8010098:	fb05 a303 	mla	r3, r5, r3, sl
 801009c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80100a0:	b29b      	uxth	r3, r3
 80100a2:	ebab 0303 	sub.w	r3, fp, r3
 80100a6:	0c12      	lsrs	r2, r2, #16
 80100a8:	f8de b000 	ldr.w	fp, [lr]
 80100ac:	fb05 a202 	mla	r2, r5, r2, sl
 80100b0:	fa13 f38b 	uxtah	r3, r3, fp
 80100b4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80100b8:	fa1f fb82 	uxth.w	fp, r2
 80100bc:	f8de 2000 	ldr.w	r2, [lr]
 80100c0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80100c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80100c8:	b29b      	uxth	r3, r3
 80100ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80100ce:	4581      	cmp	r9, r0
 80100d0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80100d4:	f84e 3b04 	str.w	r3, [lr], #4
 80100d8:	d2db      	bcs.n	8010092 <quorem+0x42>
 80100da:	f856 300c 	ldr.w	r3, [r6, ip]
 80100de:	b933      	cbnz	r3, 80100ee <quorem+0x9e>
 80100e0:	9b01      	ldr	r3, [sp, #4]
 80100e2:	3b04      	subs	r3, #4
 80100e4:	429e      	cmp	r6, r3
 80100e6:	461a      	mov	r2, r3
 80100e8:	d330      	bcc.n	801014c <quorem+0xfc>
 80100ea:	f8c8 4010 	str.w	r4, [r8, #16]
 80100ee:	4640      	mov	r0, r8
 80100f0:	f001 fa06 	bl	8011500 <__mcmp>
 80100f4:	2800      	cmp	r0, #0
 80100f6:	db25      	blt.n	8010144 <quorem+0xf4>
 80100f8:	3501      	adds	r5, #1
 80100fa:	4630      	mov	r0, r6
 80100fc:	f04f 0c00 	mov.w	ip, #0
 8010100:	f857 2b04 	ldr.w	r2, [r7], #4
 8010104:	f8d0 e000 	ldr.w	lr, [r0]
 8010108:	b293      	uxth	r3, r2
 801010a:	ebac 0303 	sub.w	r3, ip, r3
 801010e:	0c12      	lsrs	r2, r2, #16
 8010110:	fa13 f38e 	uxtah	r3, r3, lr
 8010114:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010118:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801011c:	b29b      	uxth	r3, r3
 801011e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010122:	45b9      	cmp	r9, r7
 8010124:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010128:	f840 3b04 	str.w	r3, [r0], #4
 801012c:	d2e8      	bcs.n	8010100 <quorem+0xb0>
 801012e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8010132:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8010136:	b92a      	cbnz	r2, 8010144 <quorem+0xf4>
 8010138:	3b04      	subs	r3, #4
 801013a:	429e      	cmp	r6, r3
 801013c:	461a      	mov	r2, r3
 801013e:	d30b      	bcc.n	8010158 <quorem+0x108>
 8010140:	f8c8 4010 	str.w	r4, [r8, #16]
 8010144:	4628      	mov	r0, r5
 8010146:	b003      	add	sp, #12
 8010148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801014c:	6812      	ldr	r2, [r2, #0]
 801014e:	3b04      	subs	r3, #4
 8010150:	2a00      	cmp	r2, #0
 8010152:	d1ca      	bne.n	80100ea <quorem+0x9a>
 8010154:	3c01      	subs	r4, #1
 8010156:	e7c5      	b.n	80100e4 <quorem+0x94>
 8010158:	6812      	ldr	r2, [r2, #0]
 801015a:	3b04      	subs	r3, #4
 801015c:	2a00      	cmp	r2, #0
 801015e:	d1ef      	bne.n	8010140 <quorem+0xf0>
 8010160:	3c01      	subs	r4, #1
 8010162:	e7ea      	b.n	801013a <quorem+0xea>
 8010164:	2000      	movs	r0, #0
 8010166:	e7ee      	b.n	8010146 <quorem+0xf6>

08010168 <_dtoa_r>:
 8010168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801016c:	ec57 6b10 	vmov	r6, r7, d0
 8010170:	b097      	sub	sp, #92	; 0x5c
 8010172:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010174:	9106      	str	r1, [sp, #24]
 8010176:	4604      	mov	r4, r0
 8010178:	920b      	str	r2, [sp, #44]	; 0x2c
 801017a:	9312      	str	r3, [sp, #72]	; 0x48
 801017c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010180:	e9cd 6700 	strd	r6, r7, [sp]
 8010184:	b93d      	cbnz	r5, 8010196 <_dtoa_r+0x2e>
 8010186:	2010      	movs	r0, #16
 8010188:	f000 ff92 	bl	80110b0 <malloc>
 801018c:	6260      	str	r0, [r4, #36]	; 0x24
 801018e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010192:	6005      	str	r5, [r0, #0]
 8010194:	60c5      	str	r5, [r0, #12]
 8010196:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010198:	6819      	ldr	r1, [r3, #0]
 801019a:	b151      	cbz	r1, 80101b2 <_dtoa_r+0x4a>
 801019c:	685a      	ldr	r2, [r3, #4]
 801019e:	604a      	str	r2, [r1, #4]
 80101a0:	2301      	movs	r3, #1
 80101a2:	4093      	lsls	r3, r2
 80101a4:	608b      	str	r3, [r1, #8]
 80101a6:	4620      	mov	r0, r4
 80101a8:	f000 ffc9 	bl	801113e <_Bfree>
 80101ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80101ae:	2200      	movs	r2, #0
 80101b0:	601a      	str	r2, [r3, #0]
 80101b2:	1e3b      	subs	r3, r7, #0
 80101b4:	bfbb      	ittet	lt
 80101b6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80101ba:	9301      	strlt	r3, [sp, #4]
 80101bc:	2300      	movge	r3, #0
 80101be:	2201      	movlt	r2, #1
 80101c0:	bfac      	ite	ge
 80101c2:	f8c8 3000 	strge.w	r3, [r8]
 80101c6:	f8c8 2000 	strlt.w	r2, [r8]
 80101ca:	4baf      	ldr	r3, [pc, #700]	; (8010488 <_dtoa_r+0x320>)
 80101cc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80101d0:	ea33 0308 	bics.w	r3, r3, r8
 80101d4:	d114      	bne.n	8010200 <_dtoa_r+0x98>
 80101d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80101d8:	f242 730f 	movw	r3, #9999	; 0x270f
 80101dc:	6013      	str	r3, [r2, #0]
 80101de:	9b00      	ldr	r3, [sp, #0]
 80101e0:	b923      	cbnz	r3, 80101ec <_dtoa_r+0x84>
 80101e2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80101e6:	2800      	cmp	r0, #0
 80101e8:	f000 8542 	beq.w	8010c70 <_dtoa_r+0xb08>
 80101ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80101ee:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801049c <_dtoa_r+0x334>
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	f000 8544 	beq.w	8010c80 <_dtoa_r+0xb18>
 80101f8:	f10b 0303 	add.w	r3, fp, #3
 80101fc:	f000 bd3e 	b.w	8010c7c <_dtoa_r+0xb14>
 8010200:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010204:	2200      	movs	r2, #0
 8010206:	2300      	movs	r3, #0
 8010208:	4630      	mov	r0, r6
 801020a:	4639      	mov	r1, r7
 801020c:	f7f0 fc84 	bl	8000b18 <__aeabi_dcmpeq>
 8010210:	4681      	mov	r9, r0
 8010212:	b168      	cbz	r0, 8010230 <_dtoa_r+0xc8>
 8010214:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010216:	2301      	movs	r3, #1
 8010218:	6013      	str	r3, [r2, #0]
 801021a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801021c:	2b00      	cmp	r3, #0
 801021e:	f000 8524 	beq.w	8010c6a <_dtoa_r+0xb02>
 8010222:	4b9a      	ldr	r3, [pc, #616]	; (801048c <_dtoa_r+0x324>)
 8010224:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010226:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 801022a:	6013      	str	r3, [r2, #0]
 801022c:	f000 bd28 	b.w	8010c80 <_dtoa_r+0xb18>
 8010230:	aa14      	add	r2, sp, #80	; 0x50
 8010232:	a915      	add	r1, sp, #84	; 0x54
 8010234:	ec47 6b10 	vmov	d0, r6, r7
 8010238:	4620      	mov	r0, r4
 801023a:	f001 f9d8 	bl	80115ee <__d2b>
 801023e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8010242:	9004      	str	r0, [sp, #16]
 8010244:	2d00      	cmp	r5, #0
 8010246:	d07c      	beq.n	8010342 <_dtoa_r+0x1da>
 8010248:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801024c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8010250:	46b2      	mov	sl, r6
 8010252:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8010256:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801025a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801025e:	2200      	movs	r2, #0
 8010260:	4b8b      	ldr	r3, [pc, #556]	; (8010490 <_dtoa_r+0x328>)
 8010262:	4650      	mov	r0, sl
 8010264:	4659      	mov	r1, fp
 8010266:	f7f0 f837 	bl	80002d8 <__aeabi_dsub>
 801026a:	a381      	add	r3, pc, #516	; (adr r3, 8010470 <_dtoa_r+0x308>)
 801026c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010270:	f7f0 f9ea 	bl	8000648 <__aeabi_dmul>
 8010274:	a380      	add	r3, pc, #512	; (adr r3, 8010478 <_dtoa_r+0x310>)
 8010276:	e9d3 2300 	ldrd	r2, r3, [r3]
 801027a:	f7f0 f82f 	bl	80002dc <__adddf3>
 801027e:	4606      	mov	r6, r0
 8010280:	4628      	mov	r0, r5
 8010282:	460f      	mov	r7, r1
 8010284:	f7f0 f976 	bl	8000574 <__aeabi_i2d>
 8010288:	a37d      	add	r3, pc, #500	; (adr r3, 8010480 <_dtoa_r+0x318>)
 801028a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801028e:	f7f0 f9db 	bl	8000648 <__aeabi_dmul>
 8010292:	4602      	mov	r2, r0
 8010294:	460b      	mov	r3, r1
 8010296:	4630      	mov	r0, r6
 8010298:	4639      	mov	r1, r7
 801029a:	f7f0 f81f 	bl	80002dc <__adddf3>
 801029e:	4606      	mov	r6, r0
 80102a0:	460f      	mov	r7, r1
 80102a2:	f7f0 fc81 	bl	8000ba8 <__aeabi_d2iz>
 80102a6:	2200      	movs	r2, #0
 80102a8:	4682      	mov	sl, r0
 80102aa:	2300      	movs	r3, #0
 80102ac:	4630      	mov	r0, r6
 80102ae:	4639      	mov	r1, r7
 80102b0:	f7f0 fc3c 	bl	8000b2c <__aeabi_dcmplt>
 80102b4:	b148      	cbz	r0, 80102ca <_dtoa_r+0x162>
 80102b6:	4650      	mov	r0, sl
 80102b8:	f7f0 f95c 	bl	8000574 <__aeabi_i2d>
 80102bc:	4632      	mov	r2, r6
 80102be:	463b      	mov	r3, r7
 80102c0:	f7f0 fc2a 	bl	8000b18 <__aeabi_dcmpeq>
 80102c4:	b908      	cbnz	r0, 80102ca <_dtoa_r+0x162>
 80102c6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80102ca:	f1ba 0f16 	cmp.w	sl, #22
 80102ce:	d859      	bhi.n	8010384 <_dtoa_r+0x21c>
 80102d0:	4970      	ldr	r1, [pc, #448]	; (8010494 <_dtoa_r+0x32c>)
 80102d2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80102d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80102da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80102de:	f7f0 fc43 	bl	8000b68 <__aeabi_dcmpgt>
 80102e2:	2800      	cmp	r0, #0
 80102e4:	d050      	beq.n	8010388 <_dtoa_r+0x220>
 80102e6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80102ea:	2300      	movs	r3, #0
 80102ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80102ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80102f0:	1b5d      	subs	r5, r3, r5
 80102f2:	f1b5 0801 	subs.w	r8, r5, #1
 80102f6:	bf49      	itett	mi
 80102f8:	f1c5 0301 	rsbmi	r3, r5, #1
 80102fc:	2300      	movpl	r3, #0
 80102fe:	9305      	strmi	r3, [sp, #20]
 8010300:	f04f 0800 	movmi.w	r8, #0
 8010304:	bf58      	it	pl
 8010306:	9305      	strpl	r3, [sp, #20]
 8010308:	f1ba 0f00 	cmp.w	sl, #0
 801030c:	db3e      	blt.n	801038c <_dtoa_r+0x224>
 801030e:	2300      	movs	r3, #0
 8010310:	44d0      	add	r8, sl
 8010312:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8010316:	9307      	str	r3, [sp, #28]
 8010318:	9b06      	ldr	r3, [sp, #24]
 801031a:	2b09      	cmp	r3, #9
 801031c:	f200 8090 	bhi.w	8010440 <_dtoa_r+0x2d8>
 8010320:	2b05      	cmp	r3, #5
 8010322:	bfc4      	itt	gt
 8010324:	3b04      	subgt	r3, #4
 8010326:	9306      	strgt	r3, [sp, #24]
 8010328:	9b06      	ldr	r3, [sp, #24]
 801032a:	f1a3 0302 	sub.w	r3, r3, #2
 801032e:	bfcc      	ite	gt
 8010330:	2500      	movgt	r5, #0
 8010332:	2501      	movle	r5, #1
 8010334:	2b03      	cmp	r3, #3
 8010336:	f200 808f 	bhi.w	8010458 <_dtoa_r+0x2f0>
 801033a:	e8df f003 	tbb	[pc, r3]
 801033e:	7f7d      	.short	0x7f7d
 8010340:	7131      	.short	0x7131
 8010342:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8010346:	441d      	add	r5, r3
 8010348:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801034c:	2820      	cmp	r0, #32
 801034e:	dd13      	ble.n	8010378 <_dtoa_r+0x210>
 8010350:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8010354:	9b00      	ldr	r3, [sp, #0]
 8010356:	fa08 f800 	lsl.w	r8, r8, r0
 801035a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801035e:	fa23 f000 	lsr.w	r0, r3, r0
 8010362:	ea48 0000 	orr.w	r0, r8, r0
 8010366:	f7f0 f8f5 	bl	8000554 <__aeabi_ui2d>
 801036a:	2301      	movs	r3, #1
 801036c:	4682      	mov	sl, r0
 801036e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8010372:	3d01      	subs	r5, #1
 8010374:	9313      	str	r3, [sp, #76]	; 0x4c
 8010376:	e772      	b.n	801025e <_dtoa_r+0xf6>
 8010378:	9b00      	ldr	r3, [sp, #0]
 801037a:	f1c0 0020 	rsb	r0, r0, #32
 801037e:	fa03 f000 	lsl.w	r0, r3, r0
 8010382:	e7f0      	b.n	8010366 <_dtoa_r+0x1fe>
 8010384:	2301      	movs	r3, #1
 8010386:	e7b1      	b.n	80102ec <_dtoa_r+0x184>
 8010388:	900f      	str	r0, [sp, #60]	; 0x3c
 801038a:	e7b0      	b.n	80102ee <_dtoa_r+0x186>
 801038c:	9b05      	ldr	r3, [sp, #20]
 801038e:	eba3 030a 	sub.w	r3, r3, sl
 8010392:	9305      	str	r3, [sp, #20]
 8010394:	f1ca 0300 	rsb	r3, sl, #0
 8010398:	9307      	str	r3, [sp, #28]
 801039a:	2300      	movs	r3, #0
 801039c:	930e      	str	r3, [sp, #56]	; 0x38
 801039e:	e7bb      	b.n	8010318 <_dtoa_r+0x1b0>
 80103a0:	2301      	movs	r3, #1
 80103a2:	930a      	str	r3, [sp, #40]	; 0x28
 80103a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	dd59      	ble.n	801045e <_dtoa_r+0x2f6>
 80103aa:	9302      	str	r3, [sp, #8]
 80103ac:	4699      	mov	r9, r3
 80103ae:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80103b0:	2200      	movs	r2, #0
 80103b2:	6072      	str	r2, [r6, #4]
 80103b4:	2204      	movs	r2, #4
 80103b6:	f102 0014 	add.w	r0, r2, #20
 80103ba:	4298      	cmp	r0, r3
 80103bc:	6871      	ldr	r1, [r6, #4]
 80103be:	d953      	bls.n	8010468 <_dtoa_r+0x300>
 80103c0:	4620      	mov	r0, r4
 80103c2:	f000 fe88 	bl	80110d6 <_Balloc>
 80103c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80103c8:	6030      	str	r0, [r6, #0]
 80103ca:	f1b9 0f0e 	cmp.w	r9, #14
 80103ce:	f8d3 b000 	ldr.w	fp, [r3]
 80103d2:	f200 80e6 	bhi.w	80105a2 <_dtoa_r+0x43a>
 80103d6:	2d00      	cmp	r5, #0
 80103d8:	f000 80e3 	beq.w	80105a2 <_dtoa_r+0x43a>
 80103dc:	ed9d 7b00 	vldr	d7, [sp]
 80103e0:	f1ba 0f00 	cmp.w	sl, #0
 80103e4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80103e8:	dd74      	ble.n	80104d4 <_dtoa_r+0x36c>
 80103ea:	4a2a      	ldr	r2, [pc, #168]	; (8010494 <_dtoa_r+0x32c>)
 80103ec:	f00a 030f 	and.w	r3, sl, #15
 80103f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80103f4:	ed93 7b00 	vldr	d7, [r3]
 80103f8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80103fc:	06f0      	lsls	r0, r6, #27
 80103fe:	ed8d 7b08 	vstr	d7, [sp, #32]
 8010402:	d565      	bpl.n	80104d0 <_dtoa_r+0x368>
 8010404:	4b24      	ldr	r3, [pc, #144]	; (8010498 <_dtoa_r+0x330>)
 8010406:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801040a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801040e:	f7f0 fa45 	bl	800089c <__aeabi_ddiv>
 8010412:	e9cd 0100 	strd	r0, r1, [sp]
 8010416:	f006 060f 	and.w	r6, r6, #15
 801041a:	2503      	movs	r5, #3
 801041c:	4f1e      	ldr	r7, [pc, #120]	; (8010498 <_dtoa_r+0x330>)
 801041e:	e04c      	b.n	80104ba <_dtoa_r+0x352>
 8010420:	2301      	movs	r3, #1
 8010422:	930a      	str	r3, [sp, #40]	; 0x28
 8010424:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010426:	4453      	add	r3, sl
 8010428:	f103 0901 	add.w	r9, r3, #1
 801042c:	9302      	str	r3, [sp, #8]
 801042e:	464b      	mov	r3, r9
 8010430:	2b01      	cmp	r3, #1
 8010432:	bfb8      	it	lt
 8010434:	2301      	movlt	r3, #1
 8010436:	e7ba      	b.n	80103ae <_dtoa_r+0x246>
 8010438:	2300      	movs	r3, #0
 801043a:	e7b2      	b.n	80103a2 <_dtoa_r+0x23a>
 801043c:	2300      	movs	r3, #0
 801043e:	e7f0      	b.n	8010422 <_dtoa_r+0x2ba>
 8010440:	2501      	movs	r5, #1
 8010442:	2300      	movs	r3, #0
 8010444:	9306      	str	r3, [sp, #24]
 8010446:	950a      	str	r5, [sp, #40]	; 0x28
 8010448:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801044c:	9302      	str	r3, [sp, #8]
 801044e:	4699      	mov	r9, r3
 8010450:	2200      	movs	r2, #0
 8010452:	2312      	movs	r3, #18
 8010454:	920b      	str	r2, [sp, #44]	; 0x2c
 8010456:	e7aa      	b.n	80103ae <_dtoa_r+0x246>
 8010458:	2301      	movs	r3, #1
 801045a:	930a      	str	r3, [sp, #40]	; 0x28
 801045c:	e7f4      	b.n	8010448 <_dtoa_r+0x2e0>
 801045e:	2301      	movs	r3, #1
 8010460:	9302      	str	r3, [sp, #8]
 8010462:	4699      	mov	r9, r3
 8010464:	461a      	mov	r2, r3
 8010466:	e7f5      	b.n	8010454 <_dtoa_r+0x2ec>
 8010468:	3101      	adds	r1, #1
 801046a:	6071      	str	r1, [r6, #4]
 801046c:	0052      	lsls	r2, r2, #1
 801046e:	e7a2      	b.n	80103b6 <_dtoa_r+0x24e>
 8010470:	636f4361 	.word	0x636f4361
 8010474:	3fd287a7 	.word	0x3fd287a7
 8010478:	8b60c8b3 	.word	0x8b60c8b3
 801047c:	3fc68a28 	.word	0x3fc68a28
 8010480:	509f79fb 	.word	0x509f79fb
 8010484:	3fd34413 	.word	0x3fd34413
 8010488:	7ff00000 	.word	0x7ff00000
 801048c:	08014925 	.word	0x08014925
 8010490:	3ff80000 	.word	0x3ff80000
 8010494:	08014730 	.word	0x08014730
 8010498:	08014708 	.word	0x08014708
 801049c:	0801469f 	.word	0x0801469f
 80104a0:	07f1      	lsls	r1, r6, #31
 80104a2:	d508      	bpl.n	80104b6 <_dtoa_r+0x34e>
 80104a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80104a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80104ac:	f7f0 f8cc 	bl	8000648 <__aeabi_dmul>
 80104b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80104b4:	3501      	adds	r5, #1
 80104b6:	1076      	asrs	r6, r6, #1
 80104b8:	3708      	adds	r7, #8
 80104ba:	2e00      	cmp	r6, #0
 80104bc:	d1f0      	bne.n	80104a0 <_dtoa_r+0x338>
 80104be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80104c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80104c6:	f7f0 f9e9 	bl	800089c <__aeabi_ddiv>
 80104ca:	e9cd 0100 	strd	r0, r1, [sp]
 80104ce:	e01a      	b.n	8010506 <_dtoa_r+0x39e>
 80104d0:	2502      	movs	r5, #2
 80104d2:	e7a3      	b.n	801041c <_dtoa_r+0x2b4>
 80104d4:	f000 80a0 	beq.w	8010618 <_dtoa_r+0x4b0>
 80104d8:	f1ca 0600 	rsb	r6, sl, #0
 80104dc:	4b9f      	ldr	r3, [pc, #636]	; (801075c <_dtoa_r+0x5f4>)
 80104de:	4fa0      	ldr	r7, [pc, #640]	; (8010760 <_dtoa_r+0x5f8>)
 80104e0:	f006 020f 	and.w	r2, r6, #15
 80104e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80104e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80104f0:	f7f0 f8aa 	bl	8000648 <__aeabi_dmul>
 80104f4:	e9cd 0100 	strd	r0, r1, [sp]
 80104f8:	1136      	asrs	r6, r6, #4
 80104fa:	2300      	movs	r3, #0
 80104fc:	2502      	movs	r5, #2
 80104fe:	2e00      	cmp	r6, #0
 8010500:	d17f      	bne.n	8010602 <_dtoa_r+0x49a>
 8010502:	2b00      	cmp	r3, #0
 8010504:	d1e1      	bne.n	80104ca <_dtoa_r+0x362>
 8010506:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010508:	2b00      	cmp	r3, #0
 801050a:	f000 8087 	beq.w	801061c <_dtoa_r+0x4b4>
 801050e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010512:	2200      	movs	r2, #0
 8010514:	4b93      	ldr	r3, [pc, #588]	; (8010764 <_dtoa_r+0x5fc>)
 8010516:	4630      	mov	r0, r6
 8010518:	4639      	mov	r1, r7
 801051a:	f7f0 fb07 	bl	8000b2c <__aeabi_dcmplt>
 801051e:	2800      	cmp	r0, #0
 8010520:	d07c      	beq.n	801061c <_dtoa_r+0x4b4>
 8010522:	f1b9 0f00 	cmp.w	r9, #0
 8010526:	d079      	beq.n	801061c <_dtoa_r+0x4b4>
 8010528:	9b02      	ldr	r3, [sp, #8]
 801052a:	2b00      	cmp	r3, #0
 801052c:	dd35      	ble.n	801059a <_dtoa_r+0x432>
 801052e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8010532:	9308      	str	r3, [sp, #32]
 8010534:	4639      	mov	r1, r7
 8010536:	2200      	movs	r2, #0
 8010538:	4b8b      	ldr	r3, [pc, #556]	; (8010768 <_dtoa_r+0x600>)
 801053a:	4630      	mov	r0, r6
 801053c:	f7f0 f884 	bl	8000648 <__aeabi_dmul>
 8010540:	e9cd 0100 	strd	r0, r1, [sp]
 8010544:	9f02      	ldr	r7, [sp, #8]
 8010546:	3501      	adds	r5, #1
 8010548:	4628      	mov	r0, r5
 801054a:	f7f0 f813 	bl	8000574 <__aeabi_i2d>
 801054e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010552:	f7f0 f879 	bl	8000648 <__aeabi_dmul>
 8010556:	2200      	movs	r2, #0
 8010558:	4b84      	ldr	r3, [pc, #528]	; (801076c <_dtoa_r+0x604>)
 801055a:	f7ef febf 	bl	80002dc <__adddf3>
 801055e:	4605      	mov	r5, r0
 8010560:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8010564:	2f00      	cmp	r7, #0
 8010566:	d15d      	bne.n	8010624 <_dtoa_r+0x4bc>
 8010568:	2200      	movs	r2, #0
 801056a:	4b81      	ldr	r3, [pc, #516]	; (8010770 <_dtoa_r+0x608>)
 801056c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010570:	f7ef feb2 	bl	80002d8 <__aeabi_dsub>
 8010574:	462a      	mov	r2, r5
 8010576:	4633      	mov	r3, r6
 8010578:	e9cd 0100 	strd	r0, r1, [sp]
 801057c:	f7f0 faf4 	bl	8000b68 <__aeabi_dcmpgt>
 8010580:	2800      	cmp	r0, #0
 8010582:	f040 8288 	bne.w	8010a96 <_dtoa_r+0x92e>
 8010586:	462a      	mov	r2, r5
 8010588:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801058c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010590:	f7f0 facc 	bl	8000b2c <__aeabi_dcmplt>
 8010594:	2800      	cmp	r0, #0
 8010596:	f040 827c 	bne.w	8010a92 <_dtoa_r+0x92a>
 801059a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801059e:	e9cd 2300 	strd	r2, r3, [sp]
 80105a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	f2c0 8150 	blt.w	801084a <_dtoa_r+0x6e2>
 80105aa:	f1ba 0f0e 	cmp.w	sl, #14
 80105ae:	f300 814c 	bgt.w	801084a <_dtoa_r+0x6e2>
 80105b2:	4b6a      	ldr	r3, [pc, #424]	; (801075c <_dtoa_r+0x5f4>)
 80105b4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80105b8:	ed93 7b00 	vldr	d7, [r3]
 80105bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80105be:	2b00      	cmp	r3, #0
 80105c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80105c4:	f280 80d8 	bge.w	8010778 <_dtoa_r+0x610>
 80105c8:	f1b9 0f00 	cmp.w	r9, #0
 80105cc:	f300 80d4 	bgt.w	8010778 <_dtoa_r+0x610>
 80105d0:	f040 825e 	bne.w	8010a90 <_dtoa_r+0x928>
 80105d4:	2200      	movs	r2, #0
 80105d6:	4b66      	ldr	r3, [pc, #408]	; (8010770 <_dtoa_r+0x608>)
 80105d8:	ec51 0b17 	vmov	r0, r1, d7
 80105dc:	f7f0 f834 	bl	8000648 <__aeabi_dmul>
 80105e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80105e4:	f7f0 fab6 	bl	8000b54 <__aeabi_dcmpge>
 80105e8:	464f      	mov	r7, r9
 80105ea:	464e      	mov	r6, r9
 80105ec:	2800      	cmp	r0, #0
 80105ee:	f040 8234 	bne.w	8010a5a <_dtoa_r+0x8f2>
 80105f2:	2331      	movs	r3, #49	; 0x31
 80105f4:	f10b 0501 	add.w	r5, fp, #1
 80105f8:	f88b 3000 	strb.w	r3, [fp]
 80105fc:	f10a 0a01 	add.w	sl, sl, #1
 8010600:	e22f      	b.n	8010a62 <_dtoa_r+0x8fa>
 8010602:	07f2      	lsls	r2, r6, #31
 8010604:	d505      	bpl.n	8010612 <_dtoa_r+0x4aa>
 8010606:	e9d7 2300 	ldrd	r2, r3, [r7]
 801060a:	f7f0 f81d 	bl	8000648 <__aeabi_dmul>
 801060e:	3501      	adds	r5, #1
 8010610:	2301      	movs	r3, #1
 8010612:	1076      	asrs	r6, r6, #1
 8010614:	3708      	adds	r7, #8
 8010616:	e772      	b.n	80104fe <_dtoa_r+0x396>
 8010618:	2502      	movs	r5, #2
 801061a:	e774      	b.n	8010506 <_dtoa_r+0x39e>
 801061c:	f8cd a020 	str.w	sl, [sp, #32]
 8010620:	464f      	mov	r7, r9
 8010622:	e791      	b.n	8010548 <_dtoa_r+0x3e0>
 8010624:	4b4d      	ldr	r3, [pc, #308]	; (801075c <_dtoa_r+0x5f4>)
 8010626:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801062a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801062e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010630:	2b00      	cmp	r3, #0
 8010632:	d047      	beq.n	80106c4 <_dtoa_r+0x55c>
 8010634:	4602      	mov	r2, r0
 8010636:	460b      	mov	r3, r1
 8010638:	2000      	movs	r0, #0
 801063a:	494e      	ldr	r1, [pc, #312]	; (8010774 <_dtoa_r+0x60c>)
 801063c:	f7f0 f92e 	bl	800089c <__aeabi_ddiv>
 8010640:	462a      	mov	r2, r5
 8010642:	4633      	mov	r3, r6
 8010644:	f7ef fe48 	bl	80002d8 <__aeabi_dsub>
 8010648:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801064c:	465d      	mov	r5, fp
 801064e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010652:	f7f0 faa9 	bl	8000ba8 <__aeabi_d2iz>
 8010656:	4606      	mov	r6, r0
 8010658:	f7ef ff8c 	bl	8000574 <__aeabi_i2d>
 801065c:	4602      	mov	r2, r0
 801065e:	460b      	mov	r3, r1
 8010660:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010664:	f7ef fe38 	bl	80002d8 <__aeabi_dsub>
 8010668:	3630      	adds	r6, #48	; 0x30
 801066a:	f805 6b01 	strb.w	r6, [r5], #1
 801066e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010672:	e9cd 0100 	strd	r0, r1, [sp]
 8010676:	f7f0 fa59 	bl	8000b2c <__aeabi_dcmplt>
 801067a:	2800      	cmp	r0, #0
 801067c:	d163      	bne.n	8010746 <_dtoa_r+0x5de>
 801067e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010682:	2000      	movs	r0, #0
 8010684:	4937      	ldr	r1, [pc, #220]	; (8010764 <_dtoa_r+0x5fc>)
 8010686:	f7ef fe27 	bl	80002d8 <__aeabi_dsub>
 801068a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801068e:	f7f0 fa4d 	bl	8000b2c <__aeabi_dcmplt>
 8010692:	2800      	cmp	r0, #0
 8010694:	f040 80b7 	bne.w	8010806 <_dtoa_r+0x69e>
 8010698:	eba5 030b 	sub.w	r3, r5, fp
 801069c:	429f      	cmp	r7, r3
 801069e:	f77f af7c 	ble.w	801059a <_dtoa_r+0x432>
 80106a2:	2200      	movs	r2, #0
 80106a4:	4b30      	ldr	r3, [pc, #192]	; (8010768 <_dtoa_r+0x600>)
 80106a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80106aa:	f7ef ffcd 	bl	8000648 <__aeabi_dmul>
 80106ae:	2200      	movs	r2, #0
 80106b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80106b4:	4b2c      	ldr	r3, [pc, #176]	; (8010768 <_dtoa_r+0x600>)
 80106b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80106ba:	f7ef ffc5 	bl	8000648 <__aeabi_dmul>
 80106be:	e9cd 0100 	strd	r0, r1, [sp]
 80106c2:	e7c4      	b.n	801064e <_dtoa_r+0x4e6>
 80106c4:	462a      	mov	r2, r5
 80106c6:	4633      	mov	r3, r6
 80106c8:	f7ef ffbe 	bl	8000648 <__aeabi_dmul>
 80106cc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80106d0:	eb0b 0507 	add.w	r5, fp, r7
 80106d4:	465e      	mov	r6, fp
 80106d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80106da:	f7f0 fa65 	bl	8000ba8 <__aeabi_d2iz>
 80106de:	4607      	mov	r7, r0
 80106e0:	f7ef ff48 	bl	8000574 <__aeabi_i2d>
 80106e4:	3730      	adds	r7, #48	; 0x30
 80106e6:	4602      	mov	r2, r0
 80106e8:	460b      	mov	r3, r1
 80106ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80106ee:	f7ef fdf3 	bl	80002d8 <__aeabi_dsub>
 80106f2:	f806 7b01 	strb.w	r7, [r6], #1
 80106f6:	42ae      	cmp	r6, r5
 80106f8:	e9cd 0100 	strd	r0, r1, [sp]
 80106fc:	f04f 0200 	mov.w	r2, #0
 8010700:	d126      	bne.n	8010750 <_dtoa_r+0x5e8>
 8010702:	4b1c      	ldr	r3, [pc, #112]	; (8010774 <_dtoa_r+0x60c>)
 8010704:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010708:	f7ef fde8 	bl	80002dc <__adddf3>
 801070c:	4602      	mov	r2, r0
 801070e:	460b      	mov	r3, r1
 8010710:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010714:	f7f0 fa28 	bl	8000b68 <__aeabi_dcmpgt>
 8010718:	2800      	cmp	r0, #0
 801071a:	d174      	bne.n	8010806 <_dtoa_r+0x69e>
 801071c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010720:	2000      	movs	r0, #0
 8010722:	4914      	ldr	r1, [pc, #80]	; (8010774 <_dtoa_r+0x60c>)
 8010724:	f7ef fdd8 	bl	80002d8 <__aeabi_dsub>
 8010728:	4602      	mov	r2, r0
 801072a:	460b      	mov	r3, r1
 801072c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010730:	f7f0 f9fc 	bl	8000b2c <__aeabi_dcmplt>
 8010734:	2800      	cmp	r0, #0
 8010736:	f43f af30 	beq.w	801059a <_dtoa_r+0x432>
 801073a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801073e:	2b30      	cmp	r3, #48	; 0x30
 8010740:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8010744:	d002      	beq.n	801074c <_dtoa_r+0x5e4>
 8010746:	f8dd a020 	ldr.w	sl, [sp, #32]
 801074a:	e04a      	b.n	80107e2 <_dtoa_r+0x67a>
 801074c:	4615      	mov	r5, r2
 801074e:	e7f4      	b.n	801073a <_dtoa_r+0x5d2>
 8010750:	4b05      	ldr	r3, [pc, #20]	; (8010768 <_dtoa_r+0x600>)
 8010752:	f7ef ff79 	bl	8000648 <__aeabi_dmul>
 8010756:	e9cd 0100 	strd	r0, r1, [sp]
 801075a:	e7bc      	b.n	80106d6 <_dtoa_r+0x56e>
 801075c:	08014730 	.word	0x08014730
 8010760:	08014708 	.word	0x08014708
 8010764:	3ff00000 	.word	0x3ff00000
 8010768:	40240000 	.word	0x40240000
 801076c:	401c0000 	.word	0x401c0000
 8010770:	40140000 	.word	0x40140000
 8010774:	3fe00000 	.word	0x3fe00000
 8010778:	e9dd 6700 	ldrd	r6, r7, [sp]
 801077c:	465d      	mov	r5, fp
 801077e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010782:	4630      	mov	r0, r6
 8010784:	4639      	mov	r1, r7
 8010786:	f7f0 f889 	bl	800089c <__aeabi_ddiv>
 801078a:	f7f0 fa0d 	bl	8000ba8 <__aeabi_d2iz>
 801078e:	4680      	mov	r8, r0
 8010790:	f7ef fef0 	bl	8000574 <__aeabi_i2d>
 8010794:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010798:	f7ef ff56 	bl	8000648 <__aeabi_dmul>
 801079c:	4602      	mov	r2, r0
 801079e:	460b      	mov	r3, r1
 80107a0:	4630      	mov	r0, r6
 80107a2:	4639      	mov	r1, r7
 80107a4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80107a8:	f7ef fd96 	bl	80002d8 <__aeabi_dsub>
 80107ac:	f805 6b01 	strb.w	r6, [r5], #1
 80107b0:	eba5 060b 	sub.w	r6, r5, fp
 80107b4:	45b1      	cmp	r9, r6
 80107b6:	4602      	mov	r2, r0
 80107b8:	460b      	mov	r3, r1
 80107ba:	d139      	bne.n	8010830 <_dtoa_r+0x6c8>
 80107bc:	f7ef fd8e 	bl	80002dc <__adddf3>
 80107c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80107c4:	4606      	mov	r6, r0
 80107c6:	460f      	mov	r7, r1
 80107c8:	f7f0 f9ce 	bl	8000b68 <__aeabi_dcmpgt>
 80107cc:	b9c8      	cbnz	r0, 8010802 <_dtoa_r+0x69a>
 80107ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80107d2:	4630      	mov	r0, r6
 80107d4:	4639      	mov	r1, r7
 80107d6:	f7f0 f99f 	bl	8000b18 <__aeabi_dcmpeq>
 80107da:	b110      	cbz	r0, 80107e2 <_dtoa_r+0x67a>
 80107dc:	f018 0f01 	tst.w	r8, #1
 80107e0:	d10f      	bne.n	8010802 <_dtoa_r+0x69a>
 80107e2:	9904      	ldr	r1, [sp, #16]
 80107e4:	4620      	mov	r0, r4
 80107e6:	f000 fcaa 	bl	801113e <_Bfree>
 80107ea:	2300      	movs	r3, #0
 80107ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80107ee:	702b      	strb	r3, [r5, #0]
 80107f0:	f10a 0301 	add.w	r3, sl, #1
 80107f4:	6013      	str	r3, [r2, #0]
 80107f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	f000 8241 	beq.w	8010c80 <_dtoa_r+0xb18>
 80107fe:	601d      	str	r5, [r3, #0]
 8010800:	e23e      	b.n	8010c80 <_dtoa_r+0xb18>
 8010802:	f8cd a020 	str.w	sl, [sp, #32]
 8010806:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801080a:	2a39      	cmp	r2, #57	; 0x39
 801080c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8010810:	d108      	bne.n	8010824 <_dtoa_r+0x6bc>
 8010812:	459b      	cmp	fp, r3
 8010814:	d10a      	bne.n	801082c <_dtoa_r+0x6c4>
 8010816:	9b08      	ldr	r3, [sp, #32]
 8010818:	3301      	adds	r3, #1
 801081a:	9308      	str	r3, [sp, #32]
 801081c:	2330      	movs	r3, #48	; 0x30
 801081e:	f88b 3000 	strb.w	r3, [fp]
 8010822:	465b      	mov	r3, fp
 8010824:	781a      	ldrb	r2, [r3, #0]
 8010826:	3201      	adds	r2, #1
 8010828:	701a      	strb	r2, [r3, #0]
 801082a:	e78c      	b.n	8010746 <_dtoa_r+0x5de>
 801082c:	461d      	mov	r5, r3
 801082e:	e7ea      	b.n	8010806 <_dtoa_r+0x69e>
 8010830:	2200      	movs	r2, #0
 8010832:	4b9b      	ldr	r3, [pc, #620]	; (8010aa0 <_dtoa_r+0x938>)
 8010834:	f7ef ff08 	bl	8000648 <__aeabi_dmul>
 8010838:	2200      	movs	r2, #0
 801083a:	2300      	movs	r3, #0
 801083c:	4606      	mov	r6, r0
 801083e:	460f      	mov	r7, r1
 8010840:	f7f0 f96a 	bl	8000b18 <__aeabi_dcmpeq>
 8010844:	2800      	cmp	r0, #0
 8010846:	d09a      	beq.n	801077e <_dtoa_r+0x616>
 8010848:	e7cb      	b.n	80107e2 <_dtoa_r+0x67a>
 801084a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801084c:	2a00      	cmp	r2, #0
 801084e:	f000 808b 	beq.w	8010968 <_dtoa_r+0x800>
 8010852:	9a06      	ldr	r2, [sp, #24]
 8010854:	2a01      	cmp	r2, #1
 8010856:	dc6e      	bgt.n	8010936 <_dtoa_r+0x7ce>
 8010858:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801085a:	2a00      	cmp	r2, #0
 801085c:	d067      	beq.n	801092e <_dtoa_r+0x7c6>
 801085e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010862:	9f07      	ldr	r7, [sp, #28]
 8010864:	9d05      	ldr	r5, [sp, #20]
 8010866:	9a05      	ldr	r2, [sp, #20]
 8010868:	2101      	movs	r1, #1
 801086a:	441a      	add	r2, r3
 801086c:	4620      	mov	r0, r4
 801086e:	9205      	str	r2, [sp, #20]
 8010870:	4498      	add	r8, r3
 8010872:	f000 fd04 	bl	801127e <__i2b>
 8010876:	4606      	mov	r6, r0
 8010878:	2d00      	cmp	r5, #0
 801087a:	dd0c      	ble.n	8010896 <_dtoa_r+0x72e>
 801087c:	f1b8 0f00 	cmp.w	r8, #0
 8010880:	dd09      	ble.n	8010896 <_dtoa_r+0x72e>
 8010882:	4545      	cmp	r5, r8
 8010884:	9a05      	ldr	r2, [sp, #20]
 8010886:	462b      	mov	r3, r5
 8010888:	bfa8      	it	ge
 801088a:	4643      	movge	r3, r8
 801088c:	1ad2      	subs	r2, r2, r3
 801088e:	9205      	str	r2, [sp, #20]
 8010890:	1aed      	subs	r5, r5, r3
 8010892:	eba8 0803 	sub.w	r8, r8, r3
 8010896:	9b07      	ldr	r3, [sp, #28]
 8010898:	b1eb      	cbz	r3, 80108d6 <_dtoa_r+0x76e>
 801089a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801089c:	2b00      	cmp	r3, #0
 801089e:	d067      	beq.n	8010970 <_dtoa_r+0x808>
 80108a0:	b18f      	cbz	r7, 80108c6 <_dtoa_r+0x75e>
 80108a2:	4631      	mov	r1, r6
 80108a4:	463a      	mov	r2, r7
 80108a6:	4620      	mov	r0, r4
 80108a8:	f000 fd88 	bl	80113bc <__pow5mult>
 80108ac:	9a04      	ldr	r2, [sp, #16]
 80108ae:	4601      	mov	r1, r0
 80108b0:	4606      	mov	r6, r0
 80108b2:	4620      	mov	r0, r4
 80108b4:	f000 fcec 	bl	8011290 <__multiply>
 80108b8:	9904      	ldr	r1, [sp, #16]
 80108ba:	9008      	str	r0, [sp, #32]
 80108bc:	4620      	mov	r0, r4
 80108be:	f000 fc3e 	bl	801113e <_Bfree>
 80108c2:	9b08      	ldr	r3, [sp, #32]
 80108c4:	9304      	str	r3, [sp, #16]
 80108c6:	9b07      	ldr	r3, [sp, #28]
 80108c8:	1bda      	subs	r2, r3, r7
 80108ca:	d004      	beq.n	80108d6 <_dtoa_r+0x76e>
 80108cc:	9904      	ldr	r1, [sp, #16]
 80108ce:	4620      	mov	r0, r4
 80108d0:	f000 fd74 	bl	80113bc <__pow5mult>
 80108d4:	9004      	str	r0, [sp, #16]
 80108d6:	2101      	movs	r1, #1
 80108d8:	4620      	mov	r0, r4
 80108da:	f000 fcd0 	bl	801127e <__i2b>
 80108de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80108e0:	4607      	mov	r7, r0
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	f000 81d0 	beq.w	8010c88 <_dtoa_r+0xb20>
 80108e8:	461a      	mov	r2, r3
 80108ea:	4601      	mov	r1, r0
 80108ec:	4620      	mov	r0, r4
 80108ee:	f000 fd65 	bl	80113bc <__pow5mult>
 80108f2:	9b06      	ldr	r3, [sp, #24]
 80108f4:	2b01      	cmp	r3, #1
 80108f6:	4607      	mov	r7, r0
 80108f8:	dc40      	bgt.n	801097c <_dtoa_r+0x814>
 80108fa:	9b00      	ldr	r3, [sp, #0]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d139      	bne.n	8010974 <_dtoa_r+0x80c>
 8010900:	9b01      	ldr	r3, [sp, #4]
 8010902:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010906:	2b00      	cmp	r3, #0
 8010908:	d136      	bne.n	8010978 <_dtoa_r+0x810>
 801090a:	9b01      	ldr	r3, [sp, #4]
 801090c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010910:	0d1b      	lsrs	r3, r3, #20
 8010912:	051b      	lsls	r3, r3, #20
 8010914:	b12b      	cbz	r3, 8010922 <_dtoa_r+0x7ba>
 8010916:	9b05      	ldr	r3, [sp, #20]
 8010918:	3301      	adds	r3, #1
 801091a:	9305      	str	r3, [sp, #20]
 801091c:	f108 0801 	add.w	r8, r8, #1
 8010920:	2301      	movs	r3, #1
 8010922:	9307      	str	r3, [sp, #28]
 8010924:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010926:	2b00      	cmp	r3, #0
 8010928:	d12a      	bne.n	8010980 <_dtoa_r+0x818>
 801092a:	2001      	movs	r0, #1
 801092c:	e030      	b.n	8010990 <_dtoa_r+0x828>
 801092e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010930:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010934:	e795      	b.n	8010862 <_dtoa_r+0x6fa>
 8010936:	9b07      	ldr	r3, [sp, #28]
 8010938:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 801093c:	42bb      	cmp	r3, r7
 801093e:	bfbf      	itttt	lt
 8010940:	9b07      	ldrlt	r3, [sp, #28]
 8010942:	9707      	strlt	r7, [sp, #28]
 8010944:	1afa      	sublt	r2, r7, r3
 8010946:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8010948:	bfbb      	ittet	lt
 801094a:	189b      	addlt	r3, r3, r2
 801094c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801094e:	1bdf      	subge	r7, r3, r7
 8010950:	2700      	movlt	r7, #0
 8010952:	f1b9 0f00 	cmp.w	r9, #0
 8010956:	bfb5      	itete	lt
 8010958:	9b05      	ldrlt	r3, [sp, #20]
 801095a:	9d05      	ldrge	r5, [sp, #20]
 801095c:	eba3 0509 	sublt.w	r5, r3, r9
 8010960:	464b      	movge	r3, r9
 8010962:	bfb8      	it	lt
 8010964:	2300      	movlt	r3, #0
 8010966:	e77e      	b.n	8010866 <_dtoa_r+0x6fe>
 8010968:	9f07      	ldr	r7, [sp, #28]
 801096a:	9d05      	ldr	r5, [sp, #20]
 801096c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801096e:	e783      	b.n	8010878 <_dtoa_r+0x710>
 8010970:	9a07      	ldr	r2, [sp, #28]
 8010972:	e7ab      	b.n	80108cc <_dtoa_r+0x764>
 8010974:	2300      	movs	r3, #0
 8010976:	e7d4      	b.n	8010922 <_dtoa_r+0x7ba>
 8010978:	9b00      	ldr	r3, [sp, #0]
 801097a:	e7d2      	b.n	8010922 <_dtoa_r+0x7ba>
 801097c:	2300      	movs	r3, #0
 801097e:	9307      	str	r3, [sp, #28]
 8010980:	693b      	ldr	r3, [r7, #16]
 8010982:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8010986:	6918      	ldr	r0, [r3, #16]
 8010988:	f000 fc2b 	bl	80111e2 <__hi0bits>
 801098c:	f1c0 0020 	rsb	r0, r0, #32
 8010990:	4440      	add	r0, r8
 8010992:	f010 001f 	ands.w	r0, r0, #31
 8010996:	d047      	beq.n	8010a28 <_dtoa_r+0x8c0>
 8010998:	f1c0 0320 	rsb	r3, r0, #32
 801099c:	2b04      	cmp	r3, #4
 801099e:	dd3b      	ble.n	8010a18 <_dtoa_r+0x8b0>
 80109a0:	9b05      	ldr	r3, [sp, #20]
 80109a2:	f1c0 001c 	rsb	r0, r0, #28
 80109a6:	4403      	add	r3, r0
 80109a8:	9305      	str	r3, [sp, #20]
 80109aa:	4405      	add	r5, r0
 80109ac:	4480      	add	r8, r0
 80109ae:	9b05      	ldr	r3, [sp, #20]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	dd05      	ble.n	80109c0 <_dtoa_r+0x858>
 80109b4:	461a      	mov	r2, r3
 80109b6:	9904      	ldr	r1, [sp, #16]
 80109b8:	4620      	mov	r0, r4
 80109ba:	f000 fd4d 	bl	8011458 <__lshift>
 80109be:	9004      	str	r0, [sp, #16]
 80109c0:	f1b8 0f00 	cmp.w	r8, #0
 80109c4:	dd05      	ble.n	80109d2 <_dtoa_r+0x86a>
 80109c6:	4639      	mov	r1, r7
 80109c8:	4642      	mov	r2, r8
 80109ca:	4620      	mov	r0, r4
 80109cc:	f000 fd44 	bl	8011458 <__lshift>
 80109d0:	4607      	mov	r7, r0
 80109d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80109d4:	b353      	cbz	r3, 8010a2c <_dtoa_r+0x8c4>
 80109d6:	4639      	mov	r1, r7
 80109d8:	9804      	ldr	r0, [sp, #16]
 80109da:	f000 fd91 	bl	8011500 <__mcmp>
 80109de:	2800      	cmp	r0, #0
 80109e0:	da24      	bge.n	8010a2c <_dtoa_r+0x8c4>
 80109e2:	2300      	movs	r3, #0
 80109e4:	220a      	movs	r2, #10
 80109e6:	9904      	ldr	r1, [sp, #16]
 80109e8:	4620      	mov	r0, r4
 80109ea:	f000 fbbf 	bl	801116c <__multadd>
 80109ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80109f0:	9004      	str	r0, [sp, #16]
 80109f2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	f000 814d 	beq.w	8010c96 <_dtoa_r+0xb2e>
 80109fc:	2300      	movs	r3, #0
 80109fe:	4631      	mov	r1, r6
 8010a00:	220a      	movs	r2, #10
 8010a02:	4620      	mov	r0, r4
 8010a04:	f000 fbb2 	bl	801116c <__multadd>
 8010a08:	9b02      	ldr	r3, [sp, #8]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	4606      	mov	r6, r0
 8010a0e:	dc4f      	bgt.n	8010ab0 <_dtoa_r+0x948>
 8010a10:	9b06      	ldr	r3, [sp, #24]
 8010a12:	2b02      	cmp	r3, #2
 8010a14:	dd4c      	ble.n	8010ab0 <_dtoa_r+0x948>
 8010a16:	e011      	b.n	8010a3c <_dtoa_r+0x8d4>
 8010a18:	d0c9      	beq.n	80109ae <_dtoa_r+0x846>
 8010a1a:	9a05      	ldr	r2, [sp, #20]
 8010a1c:	331c      	adds	r3, #28
 8010a1e:	441a      	add	r2, r3
 8010a20:	9205      	str	r2, [sp, #20]
 8010a22:	441d      	add	r5, r3
 8010a24:	4498      	add	r8, r3
 8010a26:	e7c2      	b.n	80109ae <_dtoa_r+0x846>
 8010a28:	4603      	mov	r3, r0
 8010a2a:	e7f6      	b.n	8010a1a <_dtoa_r+0x8b2>
 8010a2c:	f1b9 0f00 	cmp.w	r9, #0
 8010a30:	dc38      	bgt.n	8010aa4 <_dtoa_r+0x93c>
 8010a32:	9b06      	ldr	r3, [sp, #24]
 8010a34:	2b02      	cmp	r3, #2
 8010a36:	dd35      	ble.n	8010aa4 <_dtoa_r+0x93c>
 8010a38:	f8cd 9008 	str.w	r9, [sp, #8]
 8010a3c:	9b02      	ldr	r3, [sp, #8]
 8010a3e:	b963      	cbnz	r3, 8010a5a <_dtoa_r+0x8f2>
 8010a40:	4639      	mov	r1, r7
 8010a42:	2205      	movs	r2, #5
 8010a44:	4620      	mov	r0, r4
 8010a46:	f000 fb91 	bl	801116c <__multadd>
 8010a4a:	4601      	mov	r1, r0
 8010a4c:	4607      	mov	r7, r0
 8010a4e:	9804      	ldr	r0, [sp, #16]
 8010a50:	f000 fd56 	bl	8011500 <__mcmp>
 8010a54:	2800      	cmp	r0, #0
 8010a56:	f73f adcc 	bgt.w	80105f2 <_dtoa_r+0x48a>
 8010a5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a5c:	465d      	mov	r5, fp
 8010a5e:	ea6f 0a03 	mvn.w	sl, r3
 8010a62:	f04f 0900 	mov.w	r9, #0
 8010a66:	4639      	mov	r1, r7
 8010a68:	4620      	mov	r0, r4
 8010a6a:	f000 fb68 	bl	801113e <_Bfree>
 8010a6e:	2e00      	cmp	r6, #0
 8010a70:	f43f aeb7 	beq.w	80107e2 <_dtoa_r+0x67a>
 8010a74:	f1b9 0f00 	cmp.w	r9, #0
 8010a78:	d005      	beq.n	8010a86 <_dtoa_r+0x91e>
 8010a7a:	45b1      	cmp	r9, r6
 8010a7c:	d003      	beq.n	8010a86 <_dtoa_r+0x91e>
 8010a7e:	4649      	mov	r1, r9
 8010a80:	4620      	mov	r0, r4
 8010a82:	f000 fb5c 	bl	801113e <_Bfree>
 8010a86:	4631      	mov	r1, r6
 8010a88:	4620      	mov	r0, r4
 8010a8a:	f000 fb58 	bl	801113e <_Bfree>
 8010a8e:	e6a8      	b.n	80107e2 <_dtoa_r+0x67a>
 8010a90:	2700      	movs	r7, #0
 8010a92:	463e      	mov	r6, r7
 8010a94:	e7e1      	b.n	8010a5a <_dtoa_r+0x8f2>
 8010a96:	f8dd a020 	ldr.w	sl, [sp, #32]
 8010a9a:	463e      	mov	r6, r7
 8010a9c:	e5a9      	b.n	80105f2 <_dtoa_r+0x48a>
 8010a9e:	bf00      	nop
 8010aa0:	40240000 	.word	0x40240000
 8010aa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010aa6:	f8cd 9008 	str.w	r9, [sp, #8]
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	f000 80fa 	beq.w	8010ca4 <_dtoa_r+0xb3c>
 8010ab0:	2d00      	cmp	r5, #0
 8010ab2:	dd05      	ble.n	8010ac0 <_dtoa_r+0x958>
 8010ab4:	4631      	mov	r1, r6
 8010ab6:	462a      	mov	r2, r5
 8010ab8:	4620      	mov	r0, r4
 8010aba:	f000 fccd 	bl	8011458 <__lshift>
 8010abe:	4606      	mov	r6, r0
 8010ac0:	9b07      	ldr	r3, [sp, #28]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d04c      	beq.n	8010b60 <_dtoa_r+0x9f8>
 8010ac6:	6871      	ldr	r1, [r6, #4]
 8010ac8:	4620      	mov	r0, r4
 8010aca:	f000 fb04 	bl	80110d6 <_Balloc>
 8010ace:	6932      	ldr	r2, [r6, #16]
 8010ad0:	3202      	adds	r2, #2
 8010ad2:	4605      	mov	r5, r0
 8010ad4:	0092      	lsls	r2, r2, #2
 8010ad6:	f106 010c 	add.w	r1, r6, #12
 8010ada:	300c      	adds	r0, #12
 8010adc:	f000 faf0 	bl	80110c0 <memcpy>
 8010ae0:	2201      	movs	r2, #1
 8010ae2:	4629      	mov	r1, r5
 8010ae4:	4620      	mov	r0, r4
 8010ae6:	f000 fcb7 	bl	8011458 <__lshift>
 8010aea:	9b00      	ldr	r3, [sp, #0]
 8010aec:	f8cd b014 	str.w	fp, [sp, #20]
 8010af0:	f003 0301 	and.w	r3, r3, #1
 8010af4:	46b1      	mov	r9, r6
 8010af6:	9307      	str	r3, [sp, #28]
 8010af8:	4606      	mov	r6, r0
 8010afa:	4639      	mov	r1, r7
 8010afc:	9804      	ldr	r0, [sp, #16]
 8010afe:	f7ff faa7 	bl	8010050 <quorem>
 8010b02:	4649      	mov	r1, r9
 8010b04:	4605      	mov	r5, r0
 8010b06:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8010b0a:	9804      	ldr	r0, [sp, #16]
 8010b0c:	f000 fcf8 	bl	8011500 <__mcmp>
 8010b10:	4632      	mov	r2, r6
 8010b12:	9000      	str	r0, [sp, #0]
 8010b14:	4639      	mov	r1, r7
 8010b16:	4620      	mov	r0, r4
 8010b18:	f000 fd0c 	bl	8011534 <__mdiff>
 8010b1c:	68c3      	ldr	r3, [r0, #12]
 8010b1e:	4602      	mov	r2, r0
 8010b20:	bb03      	cbnz	r3, 8010b64 <_dtoa_r+0x9fc>
 8010b22:	4601      	mov	r1, r0
 8010b24:	9008      	str	r0, [sp, #32]
 8010b26:	9804      	ldr	r0, [sp, #16]
 8010b28:	f000 fcea 	bl	8011500 <__mcmp>
 8010b2c:	9a08      	ldr	r2, [sp, #32]
 8010b2e:	4603      	mov	r3, r0
 8010b30:	4611      	mov	r1, r2
 8010b32:	4620      	mov	r0, r4
 8010b34:	9308      	str	r3, [sp, #32]
 8010b36:	f000 fb02 	bl	801113e <_Bfree>
 8010b3a:	9b08      	ldr	r3, [sp, #32]
 8010b3c:	b9a3      	cbnz	r3, 8010b68 <_dtoa_r+0xa00>
 8010b3e:	9a06      	ldr	r2, [sp, #24]
 8010b40:	b992      	cbnz	r2, 8010b68 <_dtoa_r+0xa00>
 8010b42:	9a07      	ldr	r2, [sp, #28]
 8010b44:	b982      	cbnz	r2, 8010b68 <_dtoa_r+0xa00>
 8010b46:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010b4a:	d029      	beq.n	8010ba0 <_dtoa_r+0xa38>
 8010b4c:	9b00      	ldr	r3, [sp, #0]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	dd01      	ble.n	8010b56 <_dtoa_r+0x9ee>
 8010b52:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8010b56:	9b05      	ldr	r3, [sp, #20]
 8010b58:	1c5d      	adds	r5, r3, #1
 8010b5a:	f883 8000 	strb.w	r8, [r3]
 8010b5e:	e782      	b.n	8010a66 <_dtoa_r+0x8fe>
 8010b60:	4630      	mov	r0, r6
 8010b62:	e7c2      	b.n	8010aea <_dtoa_r+0x982>
 8010b64:	2301      	movs	r3, #1
 8010b66:	e7e3      	b.n	8010b30 <_dtoa_r+0x9c8>
 8010b68:	9a00      	ldr	r2, [sp, #0]
 8010b6a:	2a00      	cmp	r2, #0
 8010b6c:	db04      	blt.n	8010b78 <_dtoa_r+0xa10>
 8010b6e:	d125      	bne.n	8010bbc <_dtoa_r+0xa54>
 8010b70:	9a06      	ldr	r2, [sp, #24]
 8010b72:	bb1a      	cbnz	r2, 8010bbc <_dtoa_r+0xa54>
 8010b74:	9a07      	ldr	r2, [sp, #28]
 8010b76:	bb0a      	cbnz	r2, 8010bbc <_dtoa_r+0xa54>
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	ddec      	ble.n	8010b56 <_dtoa_r+0x9ee>
 8010b7c:	2201      	movs	r2, #1
 8010b7e:	9904      	ldr	r1, [sp, #16]
 8010b80:	4620      	mov	r0, r4
 8010b82:	f000 fc69 	bl	8011458 <__lshift>
 8010b86:	4639      	mov	r1, r7
 8010b88:	9004      	str	r0, [sp, #16]
 8010b8a:	f000 fcb9 	bl	8011500 <__mcmp>
 8010b8e:	2800      	cmp	r0, #0
 8010b90:	dc03      	bgt.n	8010b9a <_dtoa_r+0xa32>
 8010b92:	d1e0      	bne.n	8010b56 <_dtoa_r+0x9ee>
 8010b94:	f018 0f01 	tst.w	r8, #1
 8010b98:	d0dd      	beq.n	8010b56 <_dtoa_r+0x9ee>
 8010b9a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010b9e:	d1d8      	bne.n	8010b52 <_dtoa_r+0x9ea>
 8010ba0:	9b05      	ldr	r3, [sp, #20]
 8010ba2:	9a05      	ldr	r2, [sp, #20]
 8010ba4:	1c5d      	adds	r5, r3, #1
 8010ba6:	2339      	movs	r3, #57	; 0x39
 8010ba8:	7013      	strb	r3, [r2, #0]
 8010baa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010bae:	2b39      	cmp	r3, #57	; 0x39
 8010bb0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8010bb4:	d04f      	beq.n	8010c56 <_dtoa_r+0xaee>
 8010bb6:	3301      	adds	r3, #1
 8010bb8:	7013      	strb	r3, [r2, #0]
 8010bba:	e754      	b.n	8010a66 <_dtoa_r+0x8fe>
 8010bbc:	9a05      	ldr	r2, [sp, #20]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	f102 0501 	add.w	r5, r2, #1
 8010bc4:	dd06      	ble.n	8010bd4 <_dtoa_r+0xa6c>
 8010bc6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010bca:	d0e9      	beq.n	8010ba0 <_dtoa_r+0xa38>
 8010bcc:	f108 0801 	add.w	r8, r8, #1
 8010bd0:	9b05      	ldr	r3, [sp, #20]
 8010bd2:	e7c2      	b.n	8010b5a <_dtoa_r+0x9f2>
 8010bd4:	9a02      	ldr	r2, [sp, #8]
 8010bd6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8010bda:	eba5 030b 	sub.w	r3, r5, fp
 8010bde:	4293      	cmp	r3, r2
 8010be0:	d021      	beq.n	8010c26 <_dtoa_r+0xabe>
 8010be2:	2300      	movs	r3, #0
 8010be4:	220a      	movs	r2, #10
 8010be6:	9904      	ldr	r1, [sp, #16]
 8010be8:	4620      	mov	r0, r4
 8010bea:	f000 fabf 	bl	801116c <__multadd>
 8010bee:	45b1      	cmp	r9, r6
 8010bf0:	9004      	str	r0, [sp, #16]
 8010bf2:	f04f 0300 	mov.w	r3, #0
 8010bf6:	f04f 020a 	mov.w	r2, #10
 8010bfa:	4649      	mov	r1, r9
 8010bfc:	4620      	mov	r0, r4
 8010bfe:	d105      	bne.n	8010c0c <_dtoa_r+0xaa4>
 8010c00:	f000 fab4 	bl	801116c <__multadd>
 8010c04:	4681      	mov	r9, r0
 8010c06:	4606      	mov	r6, r0
 8010c08:	9505      	str	r5, [sp, #20]
 8010c0a:	e776      	b.n	8010afa <_dtoa_r+0x992>
 8010c0c:	f000 faae 	bl	801116c <__multadd>
 8010c10:	4631      	mov	r1, r6
 8010c12:	4681      	mov	r9, r0
 8010c14:	2300      	movs	r3, #0
 8010c16:	220a      	movs	r2, #10
 8010c18:	4620      	mov	r0, r4
 8010c1a:	f000 faa7 	bl	801116c <__multadd>
 8010c1e:	4606      	mov	r6, r0
 8010c20:	e7f2      	b.n	8010c08 <_dtoa_r+0xaa0>
 8010c22:	f04f 0900 	mov.w	r9, #0
 8010c26:	2201      	movs	r2, #1
 8010c28:	9904      	ldr	r1, [sp, #16]
 8010c2a:	4620      	mov	r0, r4
 8010c2c:	f000 fc14 	bl	8011458 <__lshift>
 8010c30:	4639      	mov	r1, r7
 8010c32:	9004      	str	r0, [sp, #16]
 8010c34:	f000 fc64 	bl	8011500 <__mcmp>
 8010c38:	2800      	cmp	r0, #0
 8010c3a:	dcb6      	bgt.n	8010baa <_dtoa_r+0xa42>
 8010c3c:	d102      	bne.n	8010c44 <_dtoa_r+0xadc>
 8010c3e:	f018 0f01 	tst.w	r8, #1
 8010c42:	d1b2      	bne.n	8010baa <_dtoa_r+0xa42>
 8010c44:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010c48:	2b30      	cmp	r3, #48	; 0x30
 8010c4a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8010c4e:	f47f af0a 	bne.w	8010a66 <_dtoa_r+0x8fe>
 8010c52:	4615      	mov	r5, r2
 8010c54:	e7f6      	b.n	8010c44 <_dtoa_r+0xadc>
 8010c56:	4593      	cmp	fp, r2
 8010c58:	d105      	bne.n	8010c66 <_dtoa_r+0xafe>
 8010c5a:	2331      	movs	r3, #49	; 0x31
 8010c5c:	f10a 0a01 	add.w	sl, sl, #1
 8010c60:	f88b 3000 	strb.w	r3, [fp]
 8010c64:	e6ff      	b.n	8010a66 <_dtoa_r+0x8fe>
 8010c66:	4615      	mov	r5, r2
 8010c68:	e79f      	b.n	8010baa <_dtoa_r+0xa42>
 8010c6a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8010cd0 <_dtoa_r+0xb68>
 8010c6e:	e007      	b.n	8010c80 <_dtoa_r+0xb18>
 8010c70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010c72:	f8df b060 	ldr.w	fp, [pc, #96]	; 8010cd4 <_dtoa_r+0xb6c>
 8010c76:	b11b      	cbz	r3, 8010c80 <_dtoa_r+0xb18>
 8010c78:	f10b 0308 	add.w	r3, fp, #8
 8010c7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010c7e:	6013      	str	r3, [r2, #0]
 8010c80:	4658      	mov	r0, fp
 8010c82:	b017      	add	sp, #92	; 0x5c
 8010c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c88:	9b06      	ldr	r3, [sp, #24]
 8010c8a:	2b01      	cmp	r3, #1
 8010c8c:	f77f ae35 	ble.w	80108fa <_dtoa_r+0x792>
 8010c90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010c92:	9307      	str	r3, [sp, #28]
 8010c94:	e649      	b.n	801092a <_dtoa_r+0x7c2>
 8010c96:	9b02      	ldr	r3, [sp, #8]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	dc03      	bgt.n	8010ca4 <_dtoa_r+0xb3c>
 8010c9c:	9b06      	ldr	r3, [sp, #24]
 8010c9e:	2b02      	cmp	r3, #2
 8010ca0:	f73f aecc 	bgt.w	8010a3c <_dtoa_r+0x8d4>
 8010ca4:	465d      	mov	r5, fp
 8010ca6:	4639      	mov	r1, r7
 8010ca8:	9804      	ldr	r0, [sp, #16]
 8010caa:	f7ff f9d1 	bl	8010050 <quorem>
 8010cae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8010cb2:	f805 8b01 	strb.w	r8, [r5], #1
 8010cb6:	9a02      	ldr	r2, [sp, #8]
 8010cb8:	eba5 030b 	sub.w	r3, r5, fp
 8010cbc:	429a      	cmp	r2, r3
 8010cbe:	ddb0      	ble.n	8010c22 <_dtoa_r+0xaba>
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	220a      	movs	r2, #10
 8010cc4:	9904      	ldr	r1, [sp, #16]
 8010cc6:	4620      	mov	r0, r4
 8010cc8:	f000 fa50 	bl	801116c <__multadd>
 8010ccc:	9004      	str	r0, [sp, #16]
 8010cce:	e7ea      	b.n	8010ca6 <_dtoa_r+0xb3e>
 8010cd0:	08014924 	.word	0x08014924
 8010cd4:	08014696 	.word	0x08014696

08010cd8 <__sflush_r>:
 8010cd8:	898a      	ldrh	r2, [r1, #12]
 8010cda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cde:	4605      	mov	r5, r0
 8010ce0:	0710      	lsls	r0, r2, #28
 8010ce2:	460c      	mov	r4, r1
 8010ce4:	d458      	bmi.n	8010d98 <__sflush_r+0xc0>
 8010ce6:	684b      	ldr	r3, [r1, #4]
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	dc05      	bgt.n	8010cf8 <__sflush_r+0x20>
 8010cec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	dc02      	bgt.n	8010cf8 <__sflush_r+0x20>
 8010cf2:	2000      	movs	r0, #0
 8010cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cf8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010cfa:	2e00      	cmp	r6, #0
 8010cfc:	d0f9      	beq.n	8010cf2 <__sflush_r+0x1a>
 8010cfe:	2300      	movs	r3, #0
 8010d00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010d04:	682f      	ldr	r7, [r5, #0]
 8010d06:	6a21      	ldr	r1, [r4, #32]
 8010d08:	602b      	str	r3, [r5, #0]
 8010d0a:	d032      	beq.n	8010d72 <__sflush_r+0x9a>
 8010d0c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010d0e:	89a3      	ldrh	r3, [r4, #12]
 8010d10:	075a      	lsls	r2, r3, #29
 8010d12:	d505      	bpl.n	8010d20 <__sflush_r+0x48>
 8010d14:	6863      	ldr	r3, [r4, #4]
 8010d16:	1ac0      	subs	r0, r0, r3
 8010d18:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010d1a:	b10b      	cbz	r3, 8010d20 <__sflush_r+0x48>
 8010d1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010d1e:	1ac0      	subs	r0, r0, r3
 8010d20:	2300      	movs	r3, #0
 8010d22:	4602      	mov	r2, r0
 8010d24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010d26:	6a21      	ldr	r1, [r4, #32]
 8010d28:	4628      	mov	r0, r5
 8010d2a:	47b0      	blx	r6
 8010d2c:	1c43      	adds	r3, r0, #1
 8010d2e:	89a3      	ldrh	r3, [r4, #12]
 8010d30:	d106      	bne.n	8010d40 <__sflush_r+0x68>
 8010d32:	6829      	ldr	r1, [r5, #0]
 8010d34:	291d      	cmp	r1, #29
 8010d36:	d848      	bhi.n	8010dca <__sflush_r+0xf2>
 8010d38:	4a29      	ldr	r2, [pc, #164]	; (8010de0 <__sflush_r+0x108>)
 8010d3a:	40ca      	lsrs	r2, r1
 8010d3c:	07d6      	lsls	r6, r2, #31
 8010d3e:	d544      	bpl.n	8010dca <__sflush_r+0xf2>
 8010d40:	2200      	movs	r2, #0
 8010d42:	6062      	str	r2, [r4, #4]
 8010d44:	04d9      	lsls	r1, r3, #19
 8010d46:	6922      	ldr	r2, [r4, #16]
 8010d48:	6022      	str	r2, [r4, #0]
 8010d4a:	d504      	bpl.n	8010d56 <__sflush_r+0x7e>
 8010d4c:	1c42      	adds	r2, r0, #1
 8010d4e:	d101      	bne.n	8010d54 <__sflush_r+0x7c>
 8010d50:	682b      	ldr	r3, [r5, #0]
 8010d52:	b903      	cbnz	r3, 8010d56 <__sflush_r+0x7e>
 8010d54:	6560      	str	r0, [r4, #84]	; 0x54
 8010d56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010d58:	602f      	str	r7, [r5, #0]
 8010d5a:	2900      	cmp	r1, #0
 8010d5c:	d0c9      	beq.n	8010cf2 <__sflush_r+0x1a>
 8010d5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010d62:	4299      	cmp	r1, r3
 8010d64:	d002      	beq.n	8010d6c <__sflush_r+0x94>
 8010d66:	4628      	mov	r0, r5
 8010d68:	f000 fc9e 	bl	80116a8 <_free_r>
 8010d6c:	2000      	movs	r0, #0
 8010d6e:	6360      	str	r0, [r4, #52]	; 0x34
 8010d70:	e7c0      	b.n	8010cf4 <__sflush_r+0x1c>
 8010d72:	2301      	movs	r3, #1
 8010d74:	4628      	mov	r0, r5
 8010d76:	47b0      	blx	r6
 8010d78:	1c41      	adds	r1, r0, #1
 8010d7a:	d1c8      	bne.n	8010d0e <__sflush_r+0x36>
 8010d7c:	682b      	ldr	r3, [r5, #0]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d0c5      	beq.n	8010d0e <__sflush_r+0x36>
 8010d82:	2b1d      	cmp	r3, #29
 8010d84:	d001      	beq.n	8010d8a <__sflush_r+0xb2>
 8010d86:	2b16      	cmp	r3, #22
 8010d88:	d101      	bne.n	8010d8e <__sflush_r+0xb6>
 8010d8a:	602f      	str	r7, [r5, #0]
 8010d8c:	e7b1      	b.n	8010cf2 <__sflush_r+0x1a>
 8010d8e:	89a3      	ldrh	r3, [r4, #12]
 8010d90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d94:	81a3      	strh	r3, [r4, #12]
 8010d96:	e7ad      	b.n	8010cf4 <__sflush_r+0x1c>
 8010d98:	690f      	ldr	r7, [r1, #16]
 8010d9a:	2f00      	cmp	r7, #0
 8010d9c:	d0a9      	beq.n	8010cf2 <__sflush_r+0x1a>
 8010d9e:	0793      	lsls	r3, r2, #30
 8010da0:	680e      	ldr	r6, [r1, #0]
 8010da2:	bf08      	it	eq
 8010da4:	694b      	ldreq	r3, [r1, #20]
 8010da6:	600f      	str	r7, [r1, #0]
 8010da8:	bf18      	it	ne
 8010daa:	2300      	movne	r3, #0
 8010dac:	eba6 0807 	sub.w	r8, r6, r7
 8010db0:	608b      	str	r3, [r1, #8]
 8010db2:	f1b8 0f00 	cmp.w	r8, #0
 8010db6:	dd9c      	ble.n	8010cf2 <__sflush_r+0x1a>
 8010db8:	4643      	mov	r3, r8
 8010dba:	463a      	mov	r2, r7
 8010dbc:	6a21      	ldr	r1, [r4, #32]
 8010dbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010dc0:	4628      	mov	r0, r5
 8010dc2:	47b0      	blx	r6
 8010dc4:	2800      	cmp	r0, #0
 8010dc6:	dc06      	bgt.n	8010dd6 <__sflush_r+0xfe>
 8010dc8:	89a3      	ldrh	r3, [r4, #12]
 8010dca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010dce:	81a3      	strh	r3, [r4, #12]
 8010dd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010dd4:	e78e      	b.n	8010cf4 <__sflush_r+0x1c>
 8010dd6:	4407      	add	r7, r0
 8010dd8:	eba8 0800 	sub.w	r8, r8, r0
 8010ddc:	e7e9      	b.n	8010db2 <__sflush_r+0xda>
 8010dde:	bf00      	nop
 8010de0:	20400001 	.word	0x20400001

08010de4 <_fflush_r>:
 8010de4:	b538      	push	{r3, r4, r5, lr}
 8010de6:	690b      	ldr	r3, [r1, #16]
 8010de8:	4605      	mov	r5, r0
 8010dea:	460c      	mov	r4, r1
 8010dec:	b1db      	cbz	r3, 8010e26 <_fflush_r+0x42>
 8010dee:	b118      	cbz	r0, 8010df8 <_fflush_r+0x14>
 8010df0:	6983      	ldr	r3, [r0, #24]
 8010df2:	b90b      	cbnz	r3, 8010df8 <_fflush_r+0x14>
 8010df4:	f000 f860 	bl	8010eb8 <__sinit>
 8010df8:	4b0c      	ldr	r3, [pc, #48]	; (8010e2c <_fflush_r+0x48>)
 8010dfa:	429c      	cmp	r4, r3
 8010dfc:	d109      	bne.n	8010e12 <_fflush_r+0x2e>
 8010dfe:	686c      	ldr	r4, [r5, #4]
 8010e00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e04:	b17b      	cbz	r3, 8010e26 <_fflush_r+0x42>
 8010e06:	4621      	mov	r1, r4
 8010e08:	4628      	mov	r0, r5
 8010e0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e0e:	f7ff bf63 	b.w	8010cd8 <__sflush_r>
 8010e12:	4b07      	ldr	r3, [pc, #28]	; (8010e30 <_fflush_r+0x4c>)
 8010e14:	429c      	cmp	r4, r3
 8010e16:	d101      	bne.n	8010e1c <_fflush_r+0x38>
 8010e18:	68ac      	ldr	r4, [r5, #8]
 8010e1a:	e7f1      	b.n	8010e00 <_fflush_r+0x1c>
 8010e1c:	4b05      	ldr	r3, [pc, #20]	; (8010e34 <_fflush_r+0x50>)
 8010e1e:	429c      	cmp	r4, r3
 8010e20:	bf08      	it	eq
 8010e22:	68ec      	ldreq	r4, [r5, #12]
 8010e24:	e7ec      	b.n	8010e00 <_fflush_r+0x1c>
 8010e26:	2000      	movs	r0, #0
 8010e28:	bd38      	pop	{r3, r4, r5, pc}
 8010e2a:	bf00      	nop
 8010e2c:	080146c4 	.word	0x080146c4
 8010e30:	080146e4 	.word	0x080146e4
 8010e34:	080146a4 	.word	0x080146a4

08010e38 <std>:
 8010e38:	2300      	movs	r3, #0
 8010e3a:	b510      	push	{r4, lr}
 8010e3c:	4604      	mov	r4, r0
 8010e3e:	e9c0 3300 	strd	r3, r3, [r0]
 8010e42:	6083      	str	r3, [r0, #8]
 8010e44:	8181      	strh	r1, [r0, #12]
 8010e46:	6643      	str	r3, [r0, #100]	; 0x64
 8010e48:	81c2      	strh	r2, [r0, #14]
 8010e4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010e4e:	6183      	str	r3, [r0, #24]
 8010e50:	4619      	mov	r1, r3
 8010e52:	2208      	movs	r2, #8
 8010e54:	305c      	adds	r0, #92	; 0x5c
 8010e56:	f7fe fb17 	bl	800f488 <memset>
 8010e5a:	4b05      	ldr	r3, [pc, #20]	; (8010e70 <std+0x38>)
 8010e5c:	6263      	str	r3, [r4, #36]	; 0x24
 8010e5e:	4b05      	ldr	r3, [pc, #20]	; (8010e74 <std+0x3c>)
 8010e60:	62a3      	str	r3, [r4, #40]	; 0x28
 8010e62:	4b05      	ldr	r3, [pc, #20]	; (8010e78 <std+0x40>)
 8010e64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010e66:	4b05      	ldr	r3, [pc, #20]	; (8010e7c <std+0x44>)
 8010e68:	6224      	str	r4, [r4, #32]
 8010e6a:	6323      	str	r3, [r4, #48]	; 0x30
 8010e6c:	bd10      	pop	{r4, pc}
 8010e6e:	bf00      	nop
 8010e70:	08011d3d 	.word	0x08011d3d
 8010e74:	08011d5f 	.word	0x08011d5f
 8010e78:	08011d97 	.word	0x08011d97
 8010e7c:	08011dbb 	.word	0x08011dbb

08010e80 <_cleanup_r>:
 8010e80:	4901      	ldr	r1, [pc, #4]	; (8010e88 <_cleanup_r+0x8>)
 8010e82:	f000 b885 	b.w	8010f90 <_fwalk_reent>
 8010e86:	bf00      	nop
 8010e88:	08010de5 	.word	0x08010de5

08010e8c <__sfmoreglue>:
 8010e8c:	b570      	push	{r4, r5, r6, lr}
 8010e8e:	1e4a      	subs	r2, r1, #1
 8010e90:	2568      	movs	r5, #104	; 0x68
 8010e92:	4355      	muls	r5, r2
 8010e94:	460e      	mov	r6, r1
 8010e96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010e9a:	f000 fc53 	bl	8011744 <_malloc_r>
 8010e9e:	4604      	mov	r4, r0
 8010ea0:	b140      	cbz	r0, 8010eb4 <__sfmoreglue+0x28>
 8010ea2:	2100      	movs	r1, #0
 8010ea4:	e9c0 1600 	strd	r1, r6, [r0]
 8010ea8:	300c      	adds	r0, #12
 8010eaa:	60a0      	str	r0, [r4, #8]
 8010eac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010eb0:	f7fe faea 	bl	800f488 <memset>
 8010eb4:	4620      	mov	r0, r4
 8010eb6:	bd70      	pop	{r4, r5, r6, pc}

08010eb8 <__sinit>:
 8010eb8:	6983      	ldr	r3, [r0, #24]
 8010eba:	b510      	push	{r4, lr}
 8010ebc:	4604      	mov	r4, r0
 8010ebe:	bb33      	cbnz	r3, 8010f0e <__sinit+0x56>
 8010ec0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8010ec4:	6503      	str	r3, [r0, #80]	; 0x50
 8010ec6:	4b12      	ldr	r3, [pc, #72]	; (8010f10 <__sinit+0x58>)
 8010ec8:	4a12      	ldr	r2, [pc, #72]	; (8010f14 <__sinit+0x5c>)
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	6282      	str	r2, [r0, #40]	; 0x28
 8010ece:	4298      	cmp	r0, r3
 8010ed0:	bf04      	itt	eq
 8010ed2:	2301      	moveq	r3, #1
 8010ed4:	6183      	streq	r3, [r0, #24]
 8010ed6:	f000 f81f 	bl	8010f18 <__sfp>
 8010eda:	6060      	str	r0, [r4, #4]
 8010edc:	4620      	mov	r0, r4
 8010ede:	f000 f81b 	bl	8010f18 <__sfp>
 8010ee2:	60a0      	str	r0, [r4, #8]
 8010ee4:	4620      	mov	r0, r4
 8010ee6:	f000 f817 	bl	8010f18 <__sfp>
 8010eea:	2200      	movs	r2, #0
 8010eec:	60e0      	str	r0, [r4, #12]
 8010eee:	2104      	movs	r1, #4
 8010ef0:	6860      	ldr	r0, [r4, #4]
 8010ef2:	f7ff ffa1 	bl	8010e38 <std>
 8010ef6:	2201      	movs	r2, #1
 8010ef8:	2109      	movs	r1, #9
 8010efa:	68a0      	ldr	r0, [r4, #8]
 8010efc:	f7ff ff9c 	bl	8010e38 <std>
 8010f00:	2202      	movs	r2, #2
 8010f02:	2112      	movs	r1, #18
 8010f04:	68e0      	ldr	r0, [r4, #12]
 8010f06:	f7ff ff97 	bl	8010e38 <std>
 8010f0a:	2301      	movs	r3, #1
 8010f0c:	61a3      	str	r3, [r4, #24]
 8010f0e:	bd10      	pop	{r4, pc}
 8010f10:	08014660 	.word	0x08014660
 8010f14:	08010e81 	.word	0x08010e81

08010f18 <__sfp>:
 8010f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f1a:	4b1b      	ldr	r3, [pc, #108]	; (8010f88 <__sfp+0x70>)
 8010f1c:	681e      	ldr	r6, [r3, #0]
 8010f1e:	69b3      	ldr	r3, [r6, #24]
 8010f20:	4607      	mov	r7, r0
 8010f22:	b913      	cbnz	r3, 8010f2a <__sfp+0x12>
 8010f24:	4630      	mov	r0, r6
 8010f26:	f7ff ffc7 	bl	8010eb8 <__sinit>
 8010f2a:	3648      	adds	r6, #72	; 0x48
 8010f2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010f30:	3b01      	subs	r3, #1
 8010f32:	d503      	bpl.n	8010f3c <__sfp+0x24>
 8010f34:	6833      	ldr	r3, [r6, #0]
 8010f36:	b133      	cbz	r3, 8010f46 <__sfp+0x2e>
 8010f38:	6836      	ldr	r6, [r6, #0]
 8010f3a:	e7f7      	b.n	8010f2c <__sfp+0x14>
 8010f3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010f40:	b16d      	cbz	r5, 8010f5e <__sfp+0x46>
 8010f42:	3468      	adds	r4, #104	; 0x68
 8010f44:	e7f4      	b.n	8010f30 <__sfp+0x18>
 8010f46:	2104      	movs	r1, #4
 8010f48:	4638      	mov	r0, r7
 8010f4a:	f7ff ff9f 	bl	8010e8c <__sfmoreglue>
 8010f4e:	6030      	str	r0, [r6, #0]
 8010f50:	2800      	cmp	r0, #0
 8010f52:	d1f1      	bne.n	8010f38 <__sfp+0x20>
 8010f54:	230c      	movs	r3, #12
 8010f56:	603b      	str	r3, [r7, #0]
 8010f58:	4604      	mov	r4, r0
 8010f5a:	4620      	mov	r0, r4
 8010f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f5e:	4b0b      	ldr	r3, [pc, #44]	; (8010f8c <__sfp+0x74>)
 8010f60:	6665      	str	r5, [r4, #100]	; 0x64
 8010f62:	e9c4 5500 	strd	r5, r5, [r4]
 8010f66:	60a5      	str	r5, [r4, #8]
 8010f68:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8010f6c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8010f70:	2208      	movs	r2, #8
 8010f72:	4629      	mov	r1, r5
 8010f74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010f78:	f7fe fa86 	bl	800f488 <memset>
 8010f7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010f80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010f84:	e7e9      	b.n	8010f5a <__sfp+0x42>
 8010f86:	bf00      	nop
 8010f88:	08014660 	.word	0x08014660
 8010f8c:	ffff0001 	.word	0xffff0001

08010f90 <_fwalk_reent>:
 8010f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f94:	4680      	mov	r8, r0
 8010f96:	4689      	mov	r9, r1
 8010f98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010f9c:	2600      	movs	r6, #0
 8010f9e:	b914      	cbnz	r4, 8010fa6 <_fwalk_reent+0x16>
 8010fa0:	4630      	mov	r0, r6
 8010fa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010fa6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8010faa:	3f01      	subs	r7, #1
 8010fac:	d501      	bpl.n	8010fb2 <_fwalk_reent+0x22>
 8010fae:	6824      	ldr	r4, [r4, #0]
 8010fb0:	e7f5      	b.n	8010f9e <_fwalk_reent+0xe>
 8010fb2:	89ab      	ldrh	r3, [r5, #12]
 8010fb4:	2b01      	cmp	r3, #1
 8010fb6:	d907      	bls.n	8010fc8 <_fwalk_reent+0x38>
 8010fb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010fbc:	3301      	adds	r3, #1
 8010fbe:	d003      	beq.n	8010fc8 <_fwalk_reent+0x38>
 8010fc0:	4629      	mov	r1, r5
 8010fc2:	4640      	mov	r0, r8
 8010fc4:	47c8      	blx	r9
 8010fc6:	4306      	orrs	r6, r0
 8010fc8:	3568      	adds	r5, #104	; 0x68
 8010fca:	e7ee      	b.n	8010faa <_fwalk_reent+0x1a>

08010fcc <_localeconv_r>:
 8010fcc:	4b04      	ldr	r3, [pc, #16]	; (8010fe0 <_localeconv_r+0x14>)
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	6a18      	ldr	r0, [r3, #32]
 8010fd2:	4b04      	ldr	r3, [pc, #16]	; (8010fe4 <_localeconv_r+0x18>)
 8010fd4:	2800      	cmp	r0, #0
 8010fd6:	bf08      	it	eq
 8010fd8:	4618      	moveq	r0, r3
 8010fda:	30f0      	adds	r0, #240	; 0xf0
 8010fdc:	4770      	bx	lr
 8010fde:	bf00      	nop
 8010fe0:	20001c34 	.word	0x20001c34
 8010fe4:	20001c98 	.word	0x20001c98

08010fe8 <__swhatbuf_r>:
 8010fe8:	b570      	push	{r4, r5, r6, lr}
 8010fea:	460e      	mov	r6, r1
 8010fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ff0:	2900      	cmp	r1, #0
 8010ff2:	b096      	sub	sp, #88	; 0x58
 8010ff4:	4614      	mov	r4, r2
 8010ff6:	461d      	mov	r5, r3
 8010ff8:	da07      	bge.n	801100a <__swhatbuf_r+0x22>
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	602b      	str	r3, [r5, #0]
 8010ffe:	89b3      	ldrh	r3, [r6, #12]
 8011000:	061a      	lsls	r2, r3, #24
 8011002:	d410      	bmi.n	8011026 <__swhatbuf_r+0x3e>
 8011004:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011008:	e00e      	b.n	8011028 <__swhatbuf_r+0x40>
 801100a:	466a      	mov	r2, sp
 801100c:	f000 fefc 	bl	8011e08 <_fstat_r>
 8011010:	2800      	cmp	r0, #0
 8011012:	dbf2      	blt.n	8010ffa <__swhatbuf_r+0x12>
 8011014:	9a01      	ldr	r2, [sp, #4]
 8011016:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801101a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801101e:	425a      	negs	r2, r3
 8011020:	415a      	adcs	r2, r3
 8011022:	602a      	str	r2, [r5, #0]
 8011024:	e7ee      	b.n	8011004 <__swhatbuf_r+0x1c>
 8011026:	2340      	movs	r3, #64	; 0x40
 8011028:	2000      	movs	r0, #0
 801102a:	6023      	str	r3, [r4, #0]
 801102c:	b016      	add	sp, #88	; 0x58
 801102e:	bd70      	pop	{r4, r5, r6, pc}

08011030 <__smakebuf_r>:
 8011030:	898b      	ldrh	r3, [r1, #12]
 8011032:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011034:	079d      	lsls	r5, r3, #30
 8011036:	4606      	mov	r6, r0
 8011038:	460c      	mov	r4, r1
 801103a:	d507      	bpl.n	801104c <__smakebuf_r+0x1c>
 801103c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011040:	6023      	str	r3, [r4, #0]
 8011042:	6123      	str	r3, [r4, #16]
 8011044:	2301      	movs	r3, #1
 8011046:	6163      	str	r3, [r4, #20]
 8011048:	b002      	add	sp, #8
 801104a:	bd70      	pop	{r4, r5, r6, pc}
 801104c:	ab01      	add	r3, sp, #4
 801104e:	466a      	mov	r2, sp
 8011050:	f7ff ffca 	bl	8010fe8 <__swhatbuf_r>
 8011054:	9900      	ldr	r1, [sp, #0]
 8011056:	4605      	mov	r5, r0
 8011058:	4630      	mov	r0, r6
 801105a:	f000 fb73 	bl	8011744 <_malloc_r>
 801105e:	b948      	cbnz	r0, 8011074 <__smakebuf_r+0x44>
 8011060:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011064:	059a      	lsls	r2, r3, #22
 8011066:	d4ef      	bmi.n	8011048 <__smakebuf_r+0x18>
 8011068:	f023 0303 	bic.w	r3, r3, #3
 801106c:	f043 0302 	orr.w	r3, r3, #2
 8011070:	81a3      	strh	r3, [r4, #12]
 8011072:	e7e3      	b.n	801103c <__smakebuf_r+0xc>
 8011074:	4b0d      	ldr	r3, [pc, #52]	; (80110ac <__smakebuf_r+0x7c>)
 8011076:	62b3      	str	r3, [r6, #40]	; 0x28
 8011078:	89a3      	ldrh	r3, [r4, #12]
 801107a:	6020      	str	r0, [r4, #0]
 801107c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011080:	81a3      	strh	r3, [r4, #12]
 8011082:	9b00      	ldr	r3, [sp, #0]
 8011084:	6163      	str	r3, [r4, #20]
 8011086:	9b01      	ldr	r3, [sp, #4]
 8011088:	6120      	str	r0, [r4, #16]
 801108a:	b15b      	cbz	r3, 80110a4 <__smakebuf_r+0x74>
 801108c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011090:	4630      	mov	r0, r6
 8011092:	f000 fecb 	bl	8011e2c <_isatty_r>
 8011096:	b128      	cbz	r0, 80110a4 <__smakebuf_r+0x74>
 8011098:	89a3      	ldrh	r3, [r4, #12]
 801109a:	f023 0303 	bic.w	r3, r3, #3
 801109e:	f043 0301 	orr.w	r3, r3, #1
 80110a2:	81a3      	strh	r3, [r4, #12]
 80110a4:	89a3      	ldrh	r3, [r4, #12]
 80110a6:	431d      	orrs	r5, r3
 80110a8:	81a5      	strh	r5, [r4, #12]
 80110aa:	e7cd      	b.n	8011048 <__smakebuf_r+0x18>
 80110ac:	08010e81 	.word	0x08010e81

080110b0 <malloc>:
 80110b0:	4b02      	ldr	r3, [pc, #8]	; (80110bc <malloc+0xc>)
 80110b2:	4601      	mov	r1, r0
 80110b4:	6818      	ldr	r0, [r3, #0]
 80110b6:	f000 bb45 	b.w	8011744 <_malloc_r>
 80110ba:	bf00      	nop
 80110bc:	20001c34 	.word	0x20001c34

080110c0 <memcpy>:
 80110c0:	b510      	push	{r4, lr}
 80110c2:	1e43      	subs	r3, r0, #1
 80110c4:	440a      	add	r2, r1
 80110c6:	4291      	cmp	r1, r2
 80110c8:	d100      	bne.n	80110cc <memcpy+0xc>
 80110ca:	bd10      	pop	{r4, pc}
 80110cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80110d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80110d4:	e7f7      	b.n	80110c6 <memcpy+0x6>

080110d6 <_Balloc>:
 80110d6:	b570      	push	{r4, r5, r6, lr}
 80110d8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80110da:	4604      	mov	r4, r0
 80110dc:	460e      	mov	r6, r1
 80110de:	b93d      	cbnz	r5, 80110f0 <_Balloc+0x1a>
 80110e0:	2010      	movs	r0, #16
 80110e2:	f7ff ffe5 	bl	80110b0 <malloc>
 80110e6:	6260      	str	r0, [r4, #36]	; 0x24
 80110e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80110ec:	6005      	str	r5, [r0, #0]
 80110ee:	60c5      	str	r5, [r0, #12]
 80110f0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80110f2:	68eb      	ldr	r3, [r5, #12]
 80110f4:	b183      	cbz	r3, 8011118 <_Balloc+0x42>
 80110f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80110f8:	68db      	ldr	r3, [r3, #12]
 80110fa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80110fe:	b9b8      	cbnz	r0, 8011130 <_Balloc+0x5a>
 8011100:	2101      	movs	r1, #1
 8011102:	fa01 f506 	lsl.w	r5, r1, r6
 8011106:	1d6a      	adds	r2, r5, #5
 8011108:	0092      	lsls	r2, r2, #2
 801110a:	4620      	mov	r0, r4
 801110c:	f000 fabe 	bl	801168c <_calloc_r>
 8011110:	b160      	cbz	r0, 801112c <_Balloc+0x56>
 8011112:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8011116:	e00e      	b.n	8011136 <_Balloc+0x60>
 8011118:	2221      	movs	r2, #33	; 0x21
 801111a:	2104      	movs	r1, #4
 801111c:	4620      	mov	r0, r4
 801111e:	f000 fab5 	bl	801168c <_calloc_r>
 8011122:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011124:	60e8      	str	r0, [r5, #12]
 8011126:	68db      	ldr	r3, [r3, #12]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d1e4      	bne.n	80110f6 <_Balloc+0x20>
 801112c:	2000      	movs	r0, #0
 801112e:	bd70      	pop	{r4, r5, r6, pc}
 8011130:	6802      	ldr	r2, [r0, #0]
 8011132:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8011136:	2300      	movs	r3, #0
 8011138:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801113c:	e7f7      	b.n	801112e <_Balloc+0x58>

0801113e <_Bfree>:
 801113e:	b570      	push	{r4, r5, r6, lr}
 8011140:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8011142:	4606      	mov	r6, r0
 8011144:	460d      	mov	r5, r1
 8011146:	b93c      	cbnz	r4, 8011158 <_Bfree+0x1a>
 8011148:	2010      	movs	r0, #16
 801114a:	f7ff ffb1 	bl	80110b0 <malloc>
 801114e:	6270      	str	r0, [r6, #36]	; 0x24
 8011150:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011154:	6004      	str	r4, [r0, #0]
 8011156:	60c4      	str	r4, [r0, #12]
 8011158:	b13d      	cbz	r5, 801116a <_Bfree+0x2c>
 801115a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801115c:	686a      	ldr	r2, [r5, #4]
 801115e:	68db      	ldr	r3, [r3, #12]
 8011160:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011164:	6029      	str	r1, [r5, #0]
 8011166:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801116a:	bd70      	pop	{r4, r5, r6, pc}

0801116c <__multadd>:
 801116c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011170:	690d      	ldr	r5, [r1, #16]
 8011172:	461f      	mov	r7, r3
 8011174:	4606      	mov	r6, r0
 8011176:	460c      	mov	r4, r1
 8011178:	f101 0c14 	add.w	ip, r1, #20
 801117c:	2300      	movs	r3, #0
 801117e:	f8dc 0000 	ldr.w	r0, [ip]
 8011182:	b281      	uxth	r1, r0
 8011184:	fb02 7101 	mla	r1, r2, r1, r7
 8011188:	0c0f      	lsrs	r7, r1, #16
 801118a:	0c00      	lsrs	r0, r0, #16
 801118c:	fb02 7000 	mla	r0, r2, r0, r7
 8011190:	b289      	uxth	r1, r1
 8011192:	3301      	adds	r3, #1
 8011194:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8011198:	429d      	cmp	r5, r3
 801119a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801119e:	f84c 1b04 	str.w	r1, [ip], #4
 80111a2:	dcec      	bgt.n	801117e <__multadd+0x12>
 80111a4:	b1d7      	cbz	r7, 80111dc <__multadd+0x70>
 80111a6:	68a3      	ldr	r3, [r4, #8]
 80111a8:	42ab      	cmp	r3, r5
 80111aa:	dc12      	bgt.n	80111d2 <__multadd+0x66>
 80111ac:	6861      	ldr	r1, [r4, #4]
 80111ae:	4630      	mov	r0, r6
 80111b0:	3101      	adds	r1, #1
 80111b2:	f7ff ff90 	bl	80110d6 <_Balloc>
 80111b6:	6922      	ldr	r2, [r4, #16]
 80111b8:	3202      	adds	r2, #2
 80111ba:	f104 010c 	add.w	r1, r4, #12
 80111be:	4680      	mov	r8, r0
 80111c0:	0092      	lsls	r2, r2, #2
 80111c2:	300c      	adds	r0, #12
 80111c4:	f7ff ff7c 	bl	80110c0 <memcpy>
 80111c8:	4621      	mov	r1, r4
 80111ca:	4630      	mov	r0, r6
 80111cc:	f7ff ffb7 	bl	801113e <_Bfree>
 80111d0:	4644      	mov	r4, r8
 80111d2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80111d6:	3501      	adds	r5, #1
 80111d8:	615f      	str	r7, [r3, #20]
 80111da:	6125      	str	r5, [r4, #16]
 80111dc:	4620      	mov	r0, r4
 80111de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080111e2 <__hi0bits>:
 80111e2:	0c02      	lsrs	r2, r0, #16
 80111e4:	0412      	lsls	r2, r2, #16
 80111e6:	4603      	mov	r3, r0
 80111e8:	b9b2      	cbnz	r2, 8011218 <__hi0bits+0x36>
 80111ea:	0403      	lsls	r3, r0, #16
 80111ec:	2010      	movs	r0, #16
 80111ee:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80111f2:	bf04      	itt	eq
 80111f4:	021b      	lsleq	r3, r3, #8
 80111f6:	3008      	addeq	r0, #8
 80111f8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80111fc:	bf04      	itt	eq
 80111fe:	011b      	lsleq	r3, r3, #4
 8011200:	3004      	addeq	r0, #4
 8011202:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8011206:	bf04      	itt	eq
 8011208:	009b      	lsleq	r3, r3, #2
 801120a:	3002      	addeq	r0, #2
 801120c:	2b00      	cmp	r3, #0
 801120e:	db06      	blt.n	801121e <__hi0bits+0x3c>
 8011210:	005b      	lsls	r3, r3, #1
 8011212:	d503      	bpl.n	801121c <__hi0bits+0x3a>
 8011214:	3001      	adds	r0, #1
 8011216:	4770      	bx	lr
 8011218:	2000      	movs	r0, #0
 801121a:	e7e8      	b.n	80111ee <__hi0bits+0xc>
 801121c:	2020      	movs	r0, #32
 801121e:	4770      	bx	lr

08011220 <__lo0bits>:
 8011220:	6803      	ldr	r3, [r0, #0]
 8011222:	f013 0207 	ands.w	r2, r3, #7
 8011226:	4601      	mov	r1, r0
 8011228:	d00b      	beq.n	8011242 <__lo0bits+0x22>
 801122a:	07da      	lsls	r2, r3, #31
 801122c:	d423      	bmi.n	8011276 <__lo0bits+0x56>
 801122e:	0798      	lsls	r0, r3, #30
 8011230:	bf49      	itett	mi
 8011232:	085b      	lsrmi	r3, r3, #1
 8011234:	089b      	lsrpl	r3, r3, #2
 8011236:	2001      	movmi	r0, #1
 8011238:	600b      	strmi	r3, [r1, #0]
 801123a:	bf5c      	itt	pl
 801123c:	600b      	strpl	r3, [r1, #0]
 801123e:	2002      	movpl	r0, #2
 8011240:	4770      	bx	lr
 8011242:	b298      	uxth	r0, r3
 8011244:	b9a8      	cbnz	r0, 8011272 <__lo0bits+0x52>
 8011246:	0c1b      	lsrs	r3, r3, #16
 8011248:	2010      	movs	r0, #16
 801124a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801124e:	bf04      	itt	eq
 8011250:	0a1b      	lsreq	r3, r3, #8
 8011252:	3008      	addeq	r0, #8
 8011254:	071a      	lsls	r2, r3, #28
 8011256:	bf04      	itt	eq
 8011258:	091b      	lsreq	r3, r3, #4
 801125a:	3004      	addeq	r0, #4
 801125c:	079a      	lsls	r2, r3, #30
 801125e:	bf04      	itt	eq
 8011260:	089b      	lsreq	r3, r3, #2
 8011262:	3002      	addeq	r0, #2
 8011264:	07da      	lsls	r2, r3, #31
 8011266:	d402      	bmi.n	801126e <__lo0bits+0x4e>
 8011268:	085b      	lsrs	r3, r3, #1
 801126a:	d006      	beq.n	801127a <__lo0bits+0x5a>
 801126c:	3001      	adds	r0, #1
 801126e:	600b      	str	r3, [r1, #0]
 8011270:	4770      	bx	lr
 8011272:	4610      	mov	r0, r2
 8011274:	e7e9      	b.n	801124a <__lo0bits+0x2a>
 8011276:	2000      	movs	r0, #0
 8011278:	4770      	bx	lr
 801127a:	2020      	movs	r0, #32
 801127c:	4770      	bx	lr

0801127e <__i2b>:
 801127e:	b510      	push	{r4, lr}
 8011280:	460c      	mov	r4, r1
 8011282:	2101      	movs	r1, #1
 8011284:	f7ff ff27 	bl	80110d6 <_Balloc>
 8011288:	2201      	movs	r2, #1
 801128a:	6144      	str	r4, [r0, #20]
 801128c:	6102      	str	r2, [r0, #16]
 801128e:	bd10      	pop	{r4, pc}

08011290 <__multiply>:
 8011290:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011294:	4614      	mov	r4, r2
 8011296:	690a      	ldr	r2, [r1, #16]
 8011298:	6923      	ldr	r3, [r4, #16]
 801129a:	429a      	cmp	r2, r3
 801129c:	bfb8      	it	lt
 801129e:	460b      	movlt	r3, r1
 80112a0:	4688      	mov	r8, r1
 80112a2:	bfbc      	itt	lt
 80112a4:	46a0      	movlt	r8, r4
 80112a6:	461c      	movlt	r4, r3
 80112a8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80112ac:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80112b0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80112b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80112b8:	eb07 0609 	add.w	r6, r7, r9
 80112bc:	42b3      	cmp	r3, r6
 80112be:	bfb8      	it	lt
 80112c0:	3101      	addlt	r1, #1
 80112c2:	f7ff ff08 	bl	80110d6 <_Balloc>
 80112c6:	f100 0514 	add.w	r5, r0, #20
 80112ca:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80112ce:	462b      	mov	r3, r5
 80112d0:	2200      	movs	r2, #0
 80112d2:	4573      	cmp	r3, lr
 80112d4:	d316      	bcc.n	8011304 <__multiply+0x74>
 80112d6:	f104 0214 	add.w	r2, r4, #20
 80112da:	f108 0114 	add.w	r1, r8, #20
 80112de:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80112e2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80112e6:	9300      	str	r3, [sp, #0]
 80112e8:	9b00      	ldr	r3, [sp, #0]
 80112ea:	9201      	str	r2, [sp, #4]
 80112ec:	4293      	cmp	r3, r2
 80112ee:	d80c      	bhi.n	801130a <__multiply+0x7a>
 80112f0:	2e00      	cmp	r6, #0
 80112f2:	dd03      	ble.n	80112fc <__multiply+0x6c>
 80112f4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d05d      	beq.n	80113b8 <__multiply+0x128>
 80112fc:	6106      	str	r6, [r0, #16]
 80112fe:	b003      	add	sp, #12
 8011300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011304:	f843 2b04 	str.w	r2, [r3], #4
 8011308:	e7e3      	b.n	80112d2 <__multiply+0x42>
 801130a:	f8b2 b000 	ldrh.w	fp, [r2]
 801130e:	f1bb 0f00 	cmp.w	fp, #0
 8011312:	d023      	beq.n	801135c <__multiply+0xcc>
 8011314:	4689      	mov	r9, r1
 8011316:	46ac      	mov	ip, r5
 8011318:	f04f 0800 	mov.w	r8, #0
 801131c:	f859 4b04 	ldr.w	r4, [r9], #4
 8011320:	f8dc a000 	ldr.w	sl, [ip]
 8011324:	b2a3      	uxth	r3, r4
 8011326:	fa1f fa8a 	uxth.w	sl, sl
 801132a:	fb0b a303 	mla	r3, fp, r3, sl
 801132e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8011332:	f8dc 4000 	ldr.w	r4, [ip]
 8011336:	4443      	add	r3, r8
 8011338:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801133c:	fb0b 840a 	mla	r4, fp, sl, r8
 8011340:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8011344:	46e2      	mov	sl, ip
 8011346:	b29b      	uxth	r3, r3
 8011348:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801134c:	454f      	cmp	r7, r9
 801134e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8011352:	f84a 3b04 	str.w	r3, [sl], #4
 8011356:	d82b      	bhi.n	80113b0 <__multiply+0x120>
 8011358:	f8cc 8004 	str.w	r8, [ip, #4]
 801135c:	9b01      	ldr	r3, [sp, #4]
 801135e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8011362:	3204      	adds	r2, #4
 8011364:	f1ba 0f00 	cmp.w	sl, #0
 8011368:	d020      	beq.n	80113ac <__multiply+0x11c>
 801136a:	682b      	ldr	r3, [r5, #0]
 801136c:	4689      	mov	r9, r1
 801136e:	46a8      	mov	r8, r5
 8011370:	f04f 0b00 	mov.w	fp, #0
 8011374:	f8b9 c000 	ldrh.w	ip, [r9]
 8011378:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801137c:	fb0a 440c 	mla	r4, sl, ip, r4
 8011380:	445c      	add	r4, fp
 8011382:	46c4      	mov	ip, r8
 8011384:	b29b      	uxth	r3, r3
 8011386:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801138a:	f84c 3b04 	str.w	r3, [ip], #4
 801138e:	f859 3b04 	ldr.w	r3, [r9], #4
 8011392:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8011396:	0c1b      	lsrs	r3, r3, #16
 8011398:	fb0a b303 	mla	r3, sl, r3, fp
 801139c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80113a0:	454f      	cmp	r7, r9
 80113a2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80113a6:	d805      	bhi.n	80113b4 <__multiply+0x124>
 80113a8:	f8c8 3004 	str.w	r3, [r8, #4]
 80113ac:	3504      	adds	r5, #4
 80113ae:	e79b      	b.n	80112e8 <__multiply+0x58>
 80113b0:	46d4      	mov	ip, sl
 80113b2:	e7b3      	b.n	801131c <__multiply+0x8c>
 80113b4:	46e0      	mov	r8, ip
 80113b6:	e7dd      	b.n	8011374 <__multiply+0xe4>
 80113b8:	3e01      	subs	r6, #1
 80113ba:	e799      	b.n	80112f0 <__multiply+0x60>

080113bc <__pow5mult>:
 80113bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80113c0:	4615      	mov	r5, r2
 80113c2:	f012 0203 	ands.w	r2, r2, #3
 80113c6:	4606      	mov	r6, r0
 80113c8:	460f      	mov	r7, r1
 80113ca:	d007      	beq.n	80113dc <__pow5mult+0x20>
 80113cc:	3a01      	subs	r2, #1
 80113ce:	4c21      	ldr	r4, [pc, #132]	; (8011454 <__pow5mult+0x98>)
 80113d0:	2300      	movs	r3, #0
 80113d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80113d6:	f7ff fec9 	bl	801116c <__multadd>
 80113da:	4607      	mov	r7, r0
 80113dc:	10ad      	asrs	r5, r5, #2
 80113de:	d035      	beq.n	801144c <__pow5mult+0x90>
 80113e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80113e2:	b93c      	cbnz	r4, 80113f4 <__pow5mult+0x38>
 80113e4:	2010      	movs	r0, #16
 80113e6:	f7ff fe63 	bl	80110b0 <malloc>
 80113ea:	6270      	str	r0, [r6, #36]	; 0x24
 80113ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80113f0:	6004      	str	r4, [r0, #0]
 80113f2:	60c4      	str	r4, [r0, #12]
 80113f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80113f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80113fc:	b94c      	cbnz	r4, 8011412 <__pow5mult+0x56>
 80113fe:	f240 2171 	movw	r1, #625	; 0x271
 8011402:	4630      	mov	r0, r6
 8011404:	f7ff ff3b 	bl	801127e <__i2b>
 8011408:	2300      	movs	r3, #0
 801140a:	f8c8 0008 	str.w	r0, [r8, #8]
 801140e:	4604      	mov	r4, r0
 8011410:	6003      	str	r3, [r0, #0]
 8011412:	f04f 0800 	mov.w	r8, #0
 8011416:	07eb      	lsls	r3, r5, #31
 8011418:	d50a      	bpl.n	8011430 <__pow5mult+0x74>
 801141a:	4639      	mov	r1, r7
 801141c:	4622      	mov	r2, r4
 801141e:	4630      	mov	r0, r6
 8011420:	f7ff ff36 	bl	8011290 <__multiply>
 8011424:	4639      	mov	r1, r7
 8011426:	4681      	mov	r9, r0
 8011428:	4630      	mov	r0, r6
 801142a:	f7ff fe88 	bl	801113e <_Bfree>
 801142e:	464f      	mov	r7, r9
 8011430:	106d      	asrs	r5, r5, #1
 8011432:	d00b      	beq.n	801144c <__pow5mult+0x90>
 8011434:	6820      	ldr	r0, [r4, #0]
 8011436:	b938      	cbnz	r0, 8011448 <__pow5mult+0x8c>
 8011438:	4622      	mov	r2, r4
 801143a:	4621      	mov	r1, r4
 801143c:	4630      	mov	r0, r6
 801143e:	f7ff ff27 	bl	8011290 <__multiply>
 8011442:	6020      	str	r0, [r4, #0]
 8011444:	f8c0 8000 	str.w	r8, [r0]
 8011448:	4604      	mov	r4, r0
 801144a:	e7e4      	b.n	8011416 <__pow5mult+0x5a>
 801144c:	4638      	mov	r0, r7
 801144e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011452:	bf00      	nop
 8011454:	080147f8 	.word	0x080147f8

08011458 <__lshift>:
 8011458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801145c:	460c      	mov	r4, r1
 801145e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011462:	6923      	ldr	r3, [r4, #16]
 8011464:	6849      	ldr	r1, [r1, #4]
 8011466:	eb0a 0903 	add.w	r9, sl, r3
 801146a:	68a3      	ldr	r3, [r4, #8]
 801146c:	4607      	mov	r7, r0
 801146e:	4616      	mov	r6, r2
 8011470:	f109 0501 	add.w	r5, r9, #1
 8011474:	42ab      	cmp	r3, r5
 8011476:	db32      	blt.n	80114de <__lshift+0x86>
 8011478:	4638      	mov	r0, r7
 801147a:	f7ff fe2c 	bl	80110d6 <_Balloc>
 801147e:	2300      	movs	r3, #0
 8011480:	4680      	mov	r8, r0
 8011482:	f100 0114 	add.w	r1, r0, #20
 8011486:	461a      	mov	r2, r3
 8011488:	4553      	cmp	r3, sl
 801148a:	db2b      	blt.n	80114e4 <__lshift+0x8c>
 801148c:	6920      	ldr	r0, [r4, #16]
 801148e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011492:	f104 0314 	add.w	r3, r4, #20
 8011496:	f016 021f 	ands.w	r2, r6, #31
 801149a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801149e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80114a2:	d025      	beq.n	80114f0 <__lshift+0x98>
 80114a4:	f1c2 0e20 	rsb	lr, r2, #32
 80114a8:	2000      	movs	r0, #0
 80114aa:	681e      	ldr	r6, [r3, #0]
 80114ac:	468a      	mov	sl, r1
 80114ae:	4096      	lsls	r6, r2
 80114b0:	4330      	orrs	r0, r6
 80114b2:	f84a 0b04 	str.w	r0, [sl], #4
 80114b6:	f853 0b04 	ldr.w	r0, [r3], #4
 80114ba:	459c      	cmp	ip, r3
 80114bc:	fa20 f00e 	lsr.w	r0, r0, lr
 80114c0:	d814      	bhi.n	80114ec <__lshift+0x94>
 80114c2:	6048      	str	r0, [r1, #4]
 80114c4:	b108      	cbz	r0, 80114ca <__lshift+0x72>
 80114c6:	f109 0502 	add.w	r5, r9, #2
 80114ca:	3d01      	subs	r5, #1
 80114cc:	4638      	mov	r0, r7
 80114ce:	f8c8 5010 	str.w	r5, [r8, #16]
 80114d2:	4621      	mov	r1, r4
 80114d4:	f7ff fe33 	bl	801113e <_Bfree>
 80114d8:	4640      	mov	r0, r8
 80114da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114de:	3101      	adds	r1, #1
 80114e0:	005b      	lsls	r3, r3, #1
 80114e2:	e7c7      	b.n	8011474 <__lshift+0x1c>
 80114e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80114e8:	3301      	adds	r3, #1
 80114ea:	e7cd      	b.n	8011488 <__lshift+0x30>
 80114ec:	4651      	mov	r1, sl
 80114ee:	e7dc      	b.n	80114aa <__lshift+0x52>
 80114f0:	3904      	subs	r1, #4
 80114f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80114f6:	f841 2f04 	str.w	r2, [r1, #4]!
 80114fa:	459c      	cmp	ip, r3
 80114fc:	d8f9      	bhi.n	80114f2 <__lshift+0x9a>
 80114fe:	e7e4      	b.n	80114ca <__lshift+0x72>

08011500 <__mcmp>:
 8011500:	6903      	ldr	r3, [r0, #16]
 8011502:	690a      	ldr	r2, [r1, #16]
 8011504:	1a9b      	subs	r3, r3, r2
 8011506:	b530      	push	{r4, r5, lr}
 8011508:	d10c      	bne.n	8011524 <__mcmp+0x24>
 801150a:	0092      	lsls	r2, r2, #2
 801150c:	3014      	adds	r0, #20
 801150e:	3114      	adds	r1, #20
 8011510:	1884      	adds	r4, r0, r2
 8011512:	4411      	add	r1, r2
 8011514:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011518:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801151c:	4295      	cmp	r5, r2
 801151e:	d003      	beq.n	8011528 <__mcmp+0x28>
 8011520:	d305      	bcc.n	801152e <__mcmp+0x2e>
 8011522:	2301      	movs	r3, #1
 8011524:	4618      	mov	r0, r3
 8011526:	bd30      	pop	{r4, r5, pc}
 8011528:	42a0      	cmp	r0, r4
 801152a:	d3f3      	bcc.n	8011514 <__mcmp+0x14>
 801152c:	e7fa      	b.n	8011524 <__mcmp+0x24>
 801152e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011532:	e7f7      	b.n	8011524 <__mcmp+0x24>

08011534 <__mdiff>:
 8011534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011538:	460d      	mov	r5, r1
 801153a:	4607      	mov	r7, r0
 801153c:	4611      	mov	r1, r2
 801153e:	4628      	mov	r0, r5
 8011540:	4614      	mov	r4, r2
 8011542:	f7ff ffdd 	bl	8011500 <__mcmp>
 8011546:	1e06      	subs	r6, r0, #0
 8011548:	d108      	bne.n	801155c <__mdiff+0x28>
 801154a:	4631      	mov	r1, r6
 801154c:	4638      	mov	r0, r7
 801154e:	f7ff fdc2 	bl	80110d6 <_Balloc>
 8011552:	2301      	movs	r3, #1
 8011554:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8011558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801155c:	bfa4      	itt	ge
 801155e:	4623      	movge	r3, r4
 8011560:	462c      	movge	r4, r5
 8011562:	4638      	mov	r0, r7
 8011564:	6861      	ldr	r1, [r4, #4]
 8011566:	bfa6      	itte	ge
 8011568:	461d      	movge	r5, r3
 801156a:	2600      	movge	r6, #0
 801156c:	2601      	movlt	r6, #1
 801156e:	f7ff fdb2 	bl	80110d6 <_Balloc>
 8011572:	692b      	ldr	r3, [r5, #16]
 8011574:	60c6      	str	r6, [r0, #12]
 8011576:	6926      	ldr	r6, [r4, #16]
 8011578:	f105 0914 	add.w	r9, r5, #20
 801157c:	f104 0214 	add.w	r2, r4, #20
 8011580:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8011584:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8011588:	f100 0514 	add.w	r5, r0, #20
 801158c:	f04f 0e00 	mov.w	lr, #0
 8011590:	f852 ab04 	ldr.w	sl, [r2], #4
 8011594:	f859 4b04 	ldr.w	r4, [r9], #4
 8011598:	fa1e f18a 	uxtah	r1, lr, sl
 801159c:	b2a3      	uxth	r3, r4
 801159e:	1ac9      	subs	r1, r1, r3
 80115a0:	0c23      	lsrs	r3, r4, #16
 80115a2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80115a6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80115aa:	b289      	uxth	r1, r1
 80115ac:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80115b0:	45c8      	cmp	r8, r9
 80115b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80115b6:	4694      	mov	ip, r2
 80115b8:	f845 3b04 	str.w	r3, [r5], #4
 80115bc:	d8e8      	bhi.n	8011590 <__mdiff+0x5c>
 80115be:	45bc      	cmp	ip, r7
 80115c0:	d304      	bcc.n	80115cc <__mdiff+0x98>
 80115c2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80115c6:	b183      	cbz	r3, 80115ea <__mdiff+0xb6>
 80115c8:	6106      	str	r6, [r0, #16]
 80115ca:	e7c5      	b.n	8011558 <__mdiff+0x24>
 80115cc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80115d0:	fa1e f381 	uxtah	r3, lr, r1
 80115d4:	141a      	asrs	r2, r3, #16
 80115d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80115da:	b29b      	uxth	r3, r3
 80115dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80115e0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80115e4:	f845 3b04 	str.w	r3, [r5], #4
 80115e8:	e7e9      	b.n	80115be <__mdiff+0x8a>
 80115ea:	3e01      	subs	r6, #1
 80115ec:	e7e9      	b.n	80115c2 <__mdiff+0x8e>

080115ee <__d2b>:
 80115ee:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80115f2:	460e      	mov	r6, r1
 80115f4:	2101      	movs	r1, #1
 80115f6:	ec59 8b10 	vmov	r8, r9, d0
 80115fa:	4615      	mov	r5, r2
 80115fc:	f7ff fd6b 	bl	80110d6 <_Balloc>
 8011600:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8011604:	4607      	mov	r7, r0
 8011606:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801160a:	bb34      	cbnz	r4, 801165a <__d2b+0x6c>
 801160c:	9301      	str	r3, [sp, #4]
 801160e:	f1b8 0300 	subs.w	r3, r8, #0
 8011612:	d027      	beq.n	8011664 <__d2b+0x76>
 8011614:	a802      	add	r0, sp, #8
 8011616:	f840 3d08 	str.w	r3, [r0, #-8]!
 801161a:	f7ff fe01 	bl	8011220 <__lo0bits>
 801161e:	9900      	ldr	r1, [sp, #0]
 8011620:	b1f0      	cbz	r0, 8011660 <__d2b+0x72>
 8011622:	9a01      	ldr	r2, [sp, #4]
 8011624:	f1c0 0320 	rsb	r3, r0, #32
 8011628:	fa02 f303 	lsl.w	r3, r2, r3
 801162c:	430b      	orrs	r3, r1
 801162e:	40c2      	lsrs	r2, r0
 8011630:	617b      	str	r3, [r7, #20]
 8011632:	9201      	str	r2, [sp, #4]
 8011634:	9b01      	ldr	r3, [sp, #4]
 8011636:	61bb      	str	r3, [r7, #24]
 8011638:	2b00      	cmp	r3, #0
 801163a:	bf14      	ite	ne
 801163c:	2102      	movne	r1, #2
 801163e:	2101      	moveq	r1, #1
 8011640:	6139      	str	r1, [r7, #16]
 8011642:	b1c4      	cbz	r4, 8011676 <__d2b+0x88>
 8011644:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8011648:	4404      	add	r4, r0
 801164a:	6034      	str	r4, [r6, #0]
 801164c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011650:	6028      	str	r0, [r5, #0]
 8011652:	4638      	mov	r0, r7
 8011654:	b003      	add	sp, #12
 8011656:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801165a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801165e:	e7d5      	b.n	801160c <__d2b+0x1e>
 8011660:	6179      	str	r1, [r7, #20]
 8011662:	e7e7      	b.n	8011634 <__d2b+0x46>
 8011664:	a801      	add	r0, sp, #4
 8011666:	f7ff fddb 	bl	8011220 <__lo0bits>
 801166a:	9b01      	ldr	r3, [sp, #4]
 801166c:	617b      	str	r3, [r7, #20]
 801166e:	2101      	movs	r1, #1
 8011670:	6139      	str	r1, [r7, #16]
 8011672:	3020      	adds	r0, #32
 8011674:	e7e5      	b.n	8011642 <__d2b+0x54>
 8011676:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801167a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801167e:	6030      	str	r0, [r6, #0]
 8011680:	6918      	ldr	r0, [r3, #16]
 8011682:	f7ff fdae 	bl	80111e2 <__hi0bits>
 8011686:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801168a:	e7e1      	b.n	8011650 <__d2b+0x62>

0801168c <_calloc_r>:
 801168c:	b538      	push	{r3, r4, r5, lr}
 801168e:	fb02 f401 	mul.w	r4, r2, r1
 8011692:	4621      	mov	r1, r4
 8011694:	f000 f856 	bl	8011744 <_malloc_r>
 8011698:	4605      	mov	r5, r0
 801169a:	b118      	cbz	r0, 80116a4 <_calloc_r+0x18>
 801169c:	4622      	mov	r2, r4
 801169e:	2100      	movs	r1, #0
 80116a0:	f7fd fef2 	bl	800f488 <memset>
 80116a4:	4628      	mov	r0, r5
 80116a6:	bd38      	pop	{r3, r4, r5, pc}

080116a8 <_free_r>:
 80116a8:	b538      	push	{r3, r4, r5, lr}
 80116aa:	4605      	mov	r5, r0
 80116ac:	2900      	cmp	r1, #0
 80116ae:	d045      	beq.n	801173c <_free_r+0x94>
 80116b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80116b4:	1f0c      	subs	r4, r1, #4
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	bfb8      	it	lt
 80116ba:	18e4      	addlt	r4, r4, r3
 80116bc:	f000 fc03 	bl	8011ec6 <__malloc_lock>
 80116c0:	4a1f      	ldr	r2, [pc, #124]	; (8011740 <_free_r+0x98>)
 80116c2:	6813      	ldr	r3, [r2, #0]
 80116c4:	4610      	mov	r0, r2
 80116c6:	b933      	cbnz	r3, 80116d6 <_free_r+0x2e>
 80116c8:	6063      	str	r3, [r4, #4]
 80116ca:	6014      	str	r4, [r2, #0]
 80116cc:	4628      	mov	r0, r5
 80116ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80116d2:	f000 bbf9 	b.w	8011ec8 <__malloc_unlock>
 80116d6:	42a3      	cmp	r3, r4
 80116d8:	d90c      	bls.n	80116f4 <_free_r+0x4c>
 80116da:	6821      	ldr	r1, [r4, #0]
 80116dc:	1862      	adds	r2, r4, r1
 80116de:	4293      	cmp	r3, r2
 80116e0:	bf04      	itt	eq
 80116e2:	681a      	ldreq	r2, [r3, #0]
 80116e4:	685b      	ldreq	r3, [r3, #4]
 80116e6:	6063      	str	r3, [r4, #4]
 80116e8:	bf04      	itt	eq
 80116ea:	1852      	addeq	r2, r2, r1
 80116ec:	6022      	streq	r2, [r4, #0]
 80116ee:	6004      	str	r4, [r0, #0]
 80116f0:	e7ec      	b.n	80116cc <_free_r+0x24>
 80116f2:	4613      	mov	r3, r2
 80116f4:	685a      	ldr	r2, [r3, #4]
 80116f6:	b10a      	cbz	r2, 80116fc <_free_r+0x54>
 80116f8:	42a2      	cmp	r2, r4
 80116fa:	d9fa      	bls.n	80116f2 <_free_r+0x4a>
 80116fc:	6819      	ldr	r1, [r3, #0]
 80116fe:	1858      	adds	r0, r3, r1
 8011700:	42a0      	cmp	r0, r4
 8011702:	d10b      	bne.n	801171c <_free_r+0x74>
 8011704:	6820      	ldr	r0, [r4, #0]
 8011706:	4401      	add	r1, r0
 8011708:	1858      	adds	r0, r3, r1
 801170a:	4282      	cmp	r2, r0
 801170c:	6019      	str	r1, [r3, #0]
 801170e:	d1dd      	bne.n	80116cc <_free_r+0x24>
 8011710:	6810      	ldr	r0, [r2, #0]
 8011712:	6852      	ldr	r2, [r2, #4]
 8011714:	605a      	str	r2, [r3, #4]
 8011716:	4401      	add	r1, r0
 8011718:	6019      	str	r1, [r3, #0]
 801171a:	e7d7      	b.n	80116cc <_free_r+0x24>
 801171c:	d902      	bls.n	8011724 <_free_r+0x7c>
 801171e:	230c      	movs	r3, #12
 8011720:	602b      	str	r3, [r5, #0]
 8011722:	e7d3      	b.n	80116cc <_free_r+0x24>
 8011724:	6820      	ldr	r0, [r4, #0]
 8011726:	1821      	adds	r1, r4, r0
 8011728:	428a      	cmp	r2, r1
 801172a:	bf04      	itt	eq
 801172c:	6811      	ldreq	r1, [r2, #0]
 801172e:	6852      	ldreq	r2, [r2, #4]
 8011730:	6062      	str	r2, [r4, #4]
 8011732:	bf04      	itt	eq
 8011734:	1809      	addeq	r1, r1, r0
 8011736:	6021      	streq	r1, [r4, #0]
 8011738:	605c      	str	r4, [r3, #4]
 801173a:	e7c7      	b.n	80116cc <_free_r+0x24>
 801173c:	bd38      	pop	{r3, r4, r5, pc}
 801173e:	bf00      	nop
 8011740:	20001ea4 	.word	0x20001ea4

08011744 <_malloc_r>:
 8011744:	b570      	push	{r4, r5, r6, lr}
 8011746:	1ccd      	adds	r5, r1, #3
 8011748:	f025 0503 	bic.w	r5, r5, #3
 801174c:	3508      	adds	r5, #8
 801174e:	2d0c      	cmp	r5, #12
 8011750:	bf38      	it	cc
 8011752:	250c      	movcc	r5, #12
 8011754:	2d00      	cmp	r5, #0
 8011756:	4606      	mov	r6, r0
 8011758:	db01      	blt.n	801175e <_malloc_r+0x1a>
 801175a:	42a9      	cmp	r1, r5
 801175c:	d903      	bls.n	8011766 <_malloc_r+0x22>
 801175e:	230c      	movs	r3, #12
 8011760:	6033      	str	r3, [r6, #0]
 8011762:	2000      	movs	r0, #0
 8011764:	bd70      	pop	{r4, r5, r6, pc}
 8011766:	f000 fbae 	bl	8011ec6 <__malloc_lock>
 801176a:	4a21      	ldr	r2, [pc, #132]	; (80117f0 <_malloc_r+0xac>)
 801176c:	6814      	ldr	r4, [r2, #0]
 801176e:	4621      	mov	r1, r4
 8011770:	b991      	cbnz	r1, 8011798 <_malloc_r+0x54>
 8011772:	4c20      	ldr	r4, [pc, #128]	; (80117f4 <_malloc_r+0xb0>)
 8011774:	6823      	ldr	r3, [r4, #0]
 8011776:	b91b      	cbnz	r3, 8011780 <_malloc_r+0x3c>
 8011778:	4630      	mov	r0, r6
 801177a:	f000 facf 	bl	8011d1c <_sbrk_r>
 801177e:	6020      	str	r0, [r4, #0]
 8011780:	4629      	mov	r1, r5
 8011782:	4630      	mov	r0, r6
 8011784:	f000 faca 	bl	8011d1c <_sbrk_r>
 8011788:	1c43      	adds	r3, r0, #1
 801178a:	d124      	bne.n	80117d6 <_malloc_r+0x92>
 801178c:	230c      	movs	r3, #12
 801178e:	6033      	str	r3, [r6, #0]
 8011790:	4630      	mov	r0, r6
 8011792:	f000 fb99 	bl	8011ec8 <__malloc_unlock>
 8011796:	e7e4      	b.n	8011762 <_malloc_r+0x1e>
 8011798:	680b      	ldr	r3, [r1, #0]
 801179a:	1b5b      	subs	r3, r3, r5
 801179c:	d418      	bmi.n	80117d0 <_malloc_r+0x8c>
 801179e:	2b0b      	cmp	r3, #11
 80117a0:	d90f      	bls.n	80117c2 <_malloc_r+0x7e>
 80117a2:	600b      	str	r3, [r1, #0]
 80117a4:	50cd      	str	r5, [r1, r3]
 80117a6:	18cc      	adds	r4, r1, r3
 80117a8:	4630      	mov	r0, r6
 80117aa:	f000 fb8d 	bl	8011ec8 <__malloc_unlock>
 80117ae:	f104 000b 	add.w	r0, r4, #11
 80117b2:	1d23      	adds	r3, r4, #4
 80117b4:	f020 0007 	bic.w	r0, r0, #7
 80117b8:	1ac3      	subs	r3, r0, r3
 80117ba:	d0d3      	beq.n	8011764 <_malloc_r+0x20>
 80117bc:	425a      	negs	r2, r3
 80117be:	50e2      	str	r2, [r4, r3]
 80117c0:	e7d0      	b.n	8011764 <_malloc_r+0x20>
 80117c2:	428c      	cmp	r4, r1
 80117c4:	684b      	ldr	r3, [r1, #4]
 80117c6:	bf16      	itet	ne
 80117c8:	6063      	strne	r3, [r4, #4]
 80117ca:	6013      	streq	r3, [r2, #0]
 80117cc:	460c      	movne	r4, r1
 80117ce:	e7eb      	b.n	80117a8 <_malloc_r+0x64>
 80117d0:	460c      	mov	r4, r1
 80117d2:	6849      	ldr	r1, [r1, #4]
 80117d4:	e7cc      	b.n	8011770 <_malloc_r+0x2c>
 80117d6:	1cc4      	adds	r4, r0, #3
 80117d8:	f024 0403 	bic.w	r4, r4, #3
 80117dc:	42a0      	cmp	r0, r4
 80117de:	d005      	beq.n	80117ec <_malloc_r+0xa8>
 80117e0:	1a21      	subs	r1, r4, r0
 80117e2:	4630      	mov	r0, r6
 80117e4:	f000 fa9a 	bl	8011d1c <_sbrk_r>
 80117e8:	3001      	adds	r0, #1
 80117ea:	d0cf      	beq.n	801178c <_malloc_r+0x48>
 80117ec:	6025      	str	r5, [r4, #0]
 80117ee:	e7db      	b.n	80117a8 <_malloc_r+0x64>
 80117f0:	20001ea4 	.word	0x20001ea4
 80117f4:	20001ea8 	.word	0x20001ea8

080117f8 <__ssputs_r>:
 80117f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80117fc:	688e      	ldr	r6, [r1, #8]
 80117fe:	429e      	cmp	r6, r3
 8011800:	4682      	mov	sl, r0
 8011802:	460c      	mov	r4, r1
 8011804:	4690      	mov	r8, r2
 8011806:	4699      	mov	r9, r3
 8011808:	d837      	bhi.n	801187a <__ssputs_r+0x82>
 801180a:	898a      	ldrh	r2, [r1, #12]
 801180c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011810:	d031      	beq.n	8011876 <__ssputs_r+0x7e>
 8011812:	6825      	ldr	r5, [r4, #0]
 8011814:	6909      	ldr	r1, [r1, #16]
 8011816:	1a6f      	subs	r7, r5, r1
 8011818:	6965      	ldr	r5, [r4, #20]
 801181a:	2302      	movs	r3, #2
 801181c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011820:	fb95 f5f3 	sdiv	r5, r5, r3
 8011824:	f109 0301 	add.w	r3, r9, #1
 8011828:	443b      	add	r3, r7
 801182a:	429d      	cmp	r5, r3
 801182c:	bf38      	it	cc
 801182e:	461d      	movcc	r5, r3
 8011830:	0553      	lsls	r3, r2, #21
 8011832:	d530      	bpl.n	8011896 <__ssputs_r+0x9e>
 8011834:	4629      	mov	r1, r5
 8011836:	f7ff ff85 	bl	8011744 <_malloc_r>
 801183a:	4606      	mov	r6, r0
 801183c:	b950      	cbnz	r0, 8011854 <__ssputs_r+0x5c>
 801183e:	230c      	movs	r3, #12
 8011840:	f8ca 3000 	str.w	r3, [sl]
 8011844:	89a3      	ldrh	r3, [r4, #12]
 8011846:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801184a:	81a3      	strh	r3, [r4, #12]
 801184c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011854:	463a      	mov	r2, r7
 8011856:	6921      	ldr	r1, [r4, #16]
 8011858:	f7ff fc32 	bl	80110c0 <memcpy>
 801185c:	89a3      	ldrh	r3, [r4, #12]
 801185e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011866:	81a3      	strh	r3, [r4, #12]
 8011868:	6126      	str	r6, [r4, #16]
 801186a:	6165      	str	r5, [r4, #20]
 801186c:	443e      	add	r6, r7
 801186e:	1bed      	subs	r5, r5, r7
 8011870:	6026      	str	r6, [r4, #0]
 8011872:	60a5      	str	r5, [r4, #8]
 8011874:	464e      	mov	r6, r9
 8011876:	454e      	cmp	r6, r9
 8011878:	d900      	bls.n	801187c <__ssputs_r+0x84>
 801187a:	464e      	mov	r6, r9
 801187c:	4632      	mov	r2, r6
 801187e:	4641      	mov	r1, r8
 8011880:	6820      	ldr	r0, [r4, #0]
 8011882:	f000 fb07 	bl	8011e94 <memmove>
 8011886:	68a3      	ldr	r3, [r4, #8]
 8011888:	1b9b      	subs	r3, r3, r6
 801188a:	60a3      	str	r3, [r4, #8]
 801188c:	6823      	ldr	r3, [r4, #0]
 801188e:	441e      	add	r6, r3
 8011890:	6026      	str	r6, [r4, #0]
 8011892:	2000      	movs	r0, #0
 8011894:	e7dc      	b.n	8011850 <__ssputs_r+0x58>
 8011896:	462a      	mov	r2, r5
 8011898:	f000 fb17 	bl	8011eca <_realloc_r>
 801189c:	4606      	mov	r6, r0
 801189e:	2800      	cmp	r0, #0
 80118a0:	d1e2      	bne.n	8011868 <__ssputs_r+0x70>
 80118a2:	6921      	ldr	r1, [r4, #16]
 80118a4:	4650      	mov	r0, sl
 80118a6:	f7ff feff 	bl	80116a8 <_free_r>
 80118aa:	e7c8      	b.n	801183e <__ssputs_r+0x46>

080118ac <_svfiprintf_r>:
 80118ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118b0:	461d      	mov	r5, r3
 80118b2:	898b      	ldrh	r3, [r1, #12]
 80118b4:	061f      	lsls	r7, r3, #24
 80118b6:	b09d      	sub	sp, #116	; 0x74
 80118b8:	4680      	mov	r8, r0
 80118ba:	460c      	mov	r4, r1
 80118bc:	4616      	mov	r6, r2
 80118be:	d50f      	bpl.n	80118e0 <_svfiprintf_r+0x34>
 80118c0:	690b      	ldr	r3, [r1, #16]
 80118c2:	b96b      	cbnz	r3, 80118e0 <_svfiprintf_r+0x34>
 80118c4:	2140      	movs	r1, #64	; 0x40
 80118c6:	f7ff ff3d 	bl	8011744 <_malloc_r>
 80118ca:	6020      	str	r0, [r4, #0]
 80118cc:	6120      	str	r0, [r4, #16]
 80118ce:	b928      	cbnz	r0, 80118dc <_svfiprintf_r+0x30>
 80118d0:	230c      	movs	r3, #12
 80118d2:	f8c8 3000 	str.w	r3, [r8]
 80118d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80118da:	e0c8      	b.n	8011a6e <_svfiprintf_r+0x1c2>
 80118dc:	2340      	movs	r3, #64	; 0x40
 80118de:	6163      	str	r3, [r4, #20]
 80118e0:	2300      	movs	r3, #0
 80118e2:	9309      	str	r3, [sp, #36]	; 0x24
 80118e4:	2320      	movs	r3, #32
 80118e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80118ea:	2330      	movs	r3, #48	; 0x30
 80118ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80118f0:	9503      	str	r5, [sp, #12]
 80118f2:	f04f 0b01 	mov.w	fp, #1
 80118f6:	4637      	mov	r7, r6
 80118f8:	463d      	mov	r5, r7
 80118fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80118fe:	b10b      	cbz	r3, 8011904 <_svfiprintf_r+0x58>
 8011900:	2b25      	cmp	r3, #37	; 0x25
 8011902:	d13e      	bne.n	8011982 <_svfiprintf_r+0xd6>
 8011904:	ebb7 0a06 	subs.w	sl, r7, r6
 8011908:	d00b      	beq.n	8011922 <_svfiprintf_r+0x76>
 801190a:	4653      	mov	r3, sl
 801190c:	4632      	mov	r2, r6
 801190e:	4621      	mov	r1, r4
 8011910:	4640      	mov	r0, r8
 8011912:	f7ff ff71 	bl	80117f8 <__ssputs_r>
 8011916:	3001      	adds	r0, #1
 8011918:	f000 80a4 	beq.w	8011a64 <_svfiprintf_r+0x1b8>
 801191c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801191e:	4453      	add	r3, sl
 8011920:	9309      	str	r3, [sp, #36]	; 0x24
 8011922:	783b      	ldrb	r3, [r7, #0]
 8011924:	2b00      	cmp	r3, #0
 8011926:	f000 809d 	beq.w	8011a64 <_svfiprintf_r+0x1b8>
 801192a:	2300      	movs	r3, #0
 801192c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011930:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011934:	9304      	str	r3, [sp, #16]
 8011936:	9307      	str	r3, [sp, #28]
 8011938:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801193c:	931a      	str	r3, [sp, #104]	; 0x68
 801193e:	462f      	mov	r7, r5
 8011940:	2205      	movs	r2, #5
 8011942:	f817 1b01 	ldrb.w	r1, [r7], #1
 8011946:	4850      	ldr	r0, [pc, #320]	; (8011a88 <_svfiprintf_r+0x1dc>)
 8011948:	f7ee fc72 	bl	8000230 <memchr>
 801194c:	9b04      	ldr	r3, [sp, #16]
 801194e:	b9d0      	cbnz	r0, 8011986 <_svfiprintf_r+0xda>
 8011950:	06d9      	lsls	r1, r3, #27
 8011952:	bf44      	itt	mi
 8011954:	2220      	movmi	r2, #32
 8011956:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801195a:	071a      	lsls	r2, r3, #28
 801195c:	bf44      	itt	mi
 801195e:	222b      	movmi	r2, #43	; 0x2b
 8011960:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011964:	782a      	ldrb	r2, [r5, #0]
 8011966:	2a2a      	cmp	r2, #42	; 0x2a
 8011968:	d015      	beq.n	8011996 <_svfiprintf_r+0xea>
 801196a:	9a07      	ldr	r2, [sp, #28]
 801196c:	462f      	mov	r7, r5
 801196e:	2000      	movs	r0, #0
 8011970:	250a      	movs	r5, #10
 8011972:	4639      	mov	r1, r7
 8011974:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011978:	3b30      	subs	r3, #48	; 0x30
 801197a:	2b09      	cmp	r3, #9
 801197c:	d94d      	bls.n	8011a1a <_svfiprintf_r+0x16e>
 801197e:	b1b8      	cbz	r0, 80119b0 <_svfiprintf_r+0x104>
 8011980:	e00f      	b.n	80119a2 <_svfiprintf_r+0xf6>
 8011982:	462f      	mov	r7, r5
 8011984:	e7b8      	b.n	80118f8 <_svfiprintf_r+0x4c>
 8011986:	4a40      	ldr	r2, [pc, #256]	; (8011a88 <_svfiprintf_r+0x1dc>)
 8011988:	1a80      	subs	r0, r0, r2
 801198a:	fa0b f000 	lsl.w	r0, fp, r0
 801198e:	4318      	orrs	r0, r3
 8011990:	9004      	str	r0, [sp, #16]
 8011992:	463d      	mov	r5, r7
 8011994:	e7d3      	b.n	801193e <_svfiprintf_r+0x92>
 8011996:	9a03      	ldr	r2, [sp, #12]
 8011998:	1d11      	adds	r1, r2, #4
 801199a:	6812      	ldr	r2, [r2, #0]
 801199c:	9103      	str	r1, [sp, #12]
 801199e:	2a00      	cmp	r2, #0
 80119a0:	db01      	blt.n	80119a6 <_svfiprintf_r+0xfa>
 80119a2:	9207      	str	r2, [sp, #28]
 80119a4:	e004      	b.n	80119b0 <_svfiprintf_r+0x104>
 80119a6:	4252      	negs	r2, r2
 80119a8:	f043 0302 	orr.w	r3, r3, #2
 80119ac:	9207      	str	r2, [sp, #28]
 80119ae:	9304      	str	r3, [sp, #16]
 80119b0:	783b      	ldrb	r3, [r7, #0]
 80119b2:	2b2e      	cmp	r3, #46	; 0x2e
 80119b4:	d10c      	bne.n	80119d0 <_svfiprintf_r+0x124>
 80119b6:	787b      	ldrb	r3, [r7, #1]
 80119b8:	2b2a      	cmp	r3, #42	; 0x2a
 80119ba:	d133      	bne.n	8011a24 <_svfiprintf_r+0x178>
 80119bc:	9b03      	ldr	r3, [sp, #12]
 80119be:	1d1a      	adds	r2, r3, #4
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	9203      	str	r2, [sp, #12]
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	bfb8      	it	lt
 80119c8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80119cc:	3702      	adds	r7, #2
 80119ce:	9305      	str	r3, [sp, #20]
 80119d0:	4d2e      	ldr	r5, [pc, #184]	; (8011a8c <_svfiprintf_r+0x1e0>)
 80119d2:	7839      	ldrb	r1, [r7, #0]
 80119d4:	2203      	movs	r2, #3
 80119d6:	4628      	mov	r0, r5
 80119d8:	f7ee fc2a 	bl	8000230 <memchr>
 80119dc:	b138      	cbz	r0, 80119ee <_svfiprintf_r+0x142>
 80119de:	2340      	movs	r3, #64	; 0x40
 80119e0:	1b40      	subs	r0, r0, r5
 80119e2:	fa03 f000 	lsl.w	r0, r3, r0
 80119e6:	9b04      	ldr	r3, [sp, #16]
 80119e8:	4303      	orrs	r3, r0
 80119ea:	3701      	adds	r7, #1
 80119ec:	9304      	str	r3, [sp, #16]
 80119ee:	7839      	ldrb	r1, [r7, #0]
 80119f0:	4827      	ldr	r0, [pc, #156]	; (8011a90 <_svfiprintf_r+0x1e4>)
 80119f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80119f6:	2206      	movs	r2, #6
 80119f8:	1c7e      	adds	r6, r7, #1
 80119fa:	f7ee fc19 	bl	8000230 <memchr>
 80119fe:	2800      	cmp	r0, #0
 8011a00:	d038      	beq.n	8011a74 <_svfiprintf_r+0x1c8>
 8011a02:	4b24      	ldr	r3, [pc, #144]	; (8011a94 <_svfiprintf_r+0x1e8>)
 8011a04:	bb13      	cbnz	r3, 8011a4c <_svfiprintf_r+0x1a0>
 8011a06:	9b03      	ldr	r3, [sp, #12]
 8011a08:	3307      	adds	r3, #7
 8011a0a:	f023 0307 	bic.w	r3, r3, #7
 8011a0e:	3308      	adds	r3, #8
 8011a10:	9303      	str	r3, [sp, #12]
 8011a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a14:	444b      	add	r3, r9
 8011a16:	9309      	str	r3, [sp, #36]	; 0x24
 8011a18:	e76d      	b.n	80118f6 <_svfiprintf_r+0x4a>
 8011a1a:	fb05 3202 	mla	r2, r5, r2, r3
 8011a1e:	2001      	movs	r0, #1
 8011a20:	460f      	mov	r7, r1
 8011a22:	e7a6      	b.n	8011972 <_svfiprintf_r+0xc6>
 8011a24:	2300      	movs	r3, #0
 8011a26:	3701      	adds	r7, #1
 8011a28:	9305      	str	r3, [sp, #20]
 8011a2a:	4619      	mov	r1, r3
 8011a2c:	250a      	movs	r5, #10
 8011a2e:	4638      	mov	r0, r7
 8011a30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011a34:	3a30      	subs	r2, #48	; 0x30
 8011a36:	2a09      	cmp	r2, #9
 8011a38:	d903      	bls.n	8011a42 <_svfiprintf_r+0x196>
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d0c8      	beq.n	80119d0 <_svfiprintf_r+0x124>
 8011a3e:	9105      	str	r1, [sp, #20]
 8011a40:	e7c6      	b.n	80119d0 <_svfiprintf_r+0x124>
 8011a42:	fb05 2101 	mla	r1, r5, r1, r2
 8011a46:	2301      	movs	r3, #1
 8011a48:	4607      	mov	r7, r0
 8011a4a:	e7f0      	b.n	8011a2e <_svfiprintf_r+0x182>
 8011a4c:	ab03      	add	r3, sp, #12
 8011a4e:	9300      	str	r3, [sp, #0]
 8011a50:	4622      	mov	r2, r4
 8011a52:	4b11      	ldr	r3, [pc, #68]	; (8011a98 <_svfiprintf_r+0x1ec>)
 8011a54:	a904      	add	r1, sp, #16
 8011a56:	4640      	mov	r0, r8
 8011a58:	f7fd fdb2 	bl	800f5c0 <_printf_float>
 8011a5c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8011a60:	4681      	mov	r9, r0
 8011a62:	d1d6      	bne.n	8011a12 <_svfiprintf_r+0x166>
 8011a64:	89a3      	ldrh	r3, [r4, #12]
 8011a66:	065b      	lsls	r3, r3, #25
 8011a68:	f53f af35 	bmi.w	80118d6 <_svfiprintf_r+0x2a>
 8011a6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011a6e:	b01d      	add	sp, #116	; 0x74
 8011a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a74:	ab03      	add	r3, sp, #12
 8011a76:	9300      	str	r3, [sp, #0]
 8011a78:	4622      	mov	r2, r4
 8011a7a:	4b07      	ldr	r3, [pc, #28]	; (8011a98 <_svfiprintf_r+0x1ec>)
 8011a7c:	a904      	add	r1, sp, #16
 8011a7e:	4640      	mov	r0, r8
 8011a80:	f7fe f854 	bl	800fb2c <_printf_i>
 8011a84:	e7ea      	b.n	8011a5c <_svfiprintf_r+0x1b0>
 8011a86:	bf00      	nop
 8011a88:	08014804 	.word	0x08014804
 8011a8c:	0801480a 	.word	0x0801480a
 8011a90:	0801480e 	.word	0x0801480e
 8011a94:	0800f5c1 	.word	0x0800f5c1
 8011a98:	080117f9 	.word	0x080117f9

08011a9c <__sfputc_r>:
 8011a9c:	6893      	ldr	r3, [r2, #8]
 8011a9e:	3b01      	subs	r3, #1
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	b410      	push	{r4}
 8011aa4:	6093      	str	r3, [r2, #8]
 8011aa6:	da08      	bge.n	8011aba <__sfputc_r+0x1e>
 8011aa8:	6994      	ldr	r4, [r2, #24]
 8011aaa:	42a3      	cmp	r3, r4
 8011aac:	db01      	blt.n	8011ab2 <__sfputc_r+0x16>
 8011aae:	290a      	cmp	r1, #10
 8011ab0:	d103      	bne.n	8011aba <__sfputc_r+0x1e>
 8011ab2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ab6:	f7fe ba0b 	b.w	800fed0 <__swbuf_r>
 8011aba:	6813      	ldr	r3, [r2, #0]
 8011abc:	1c58      	adds	r0, r3, #1
 8011abe:	6010      	str	r0, [r2, #0]
 8011ac0:	7019      	strb	r1, [r3, #0]
 8011ac2:	4608      	mov	r0, r1
 8011ac4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ac8:	4770      	bx	lr

08011aca <__sfputs_r>:
 8011aca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011acc:	4606      	mov	r6, r0
 8011ace:	460f      	mov	r7, r1
 8011ad0:	4614      	mov	r4, r2
 8011ad2:	18d5      	adds	r5, r2, r3
 8011ad4:	42ac      	cmp	r4, r5
 8011ad6:	d101      	bne.n	8011adc <__sfputs_r+0x12>
 8011ad8:	2000      	movs	r0, #0
 8011ada:	e007      	b.n	8011aec <__sfputs_r+0x22>
 8011adc:	463a      	mov	r2, r7
 8011ade:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ae2:	4630      	mov	r0, r6
 8011ae4:	f7ff ffda 	bl	8011a9c <__sfputc_r>
 8011ae8:	1c43      	adds	r3, r0, #1
 8011aea:	d1f3      	bne.n	8011ad4 <__sfputs_r+0xa>
 8011aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011af0 <_vfiprintf_r>:
 8011af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011af4:	460c      	mov	r4, r1
 8011af6:	b09d      	sub	sp, #116	; 0x74
 8011af8:	4617      	mov	r7, r2
 8011afa:	461d      	mov	r5, r3
 8011afc:	4606      	mov	r6, r0
 8011afe:	b118      	cbz	r0, 8011b08 <_vfiprintf_r+0x18>
 8011b00:	6983      	ldr	r3, [r0, #24]
 8011b02:	b90b      	cbnz	r3, 8011b08 <_vfiprintf_r+0x18>
 8011b04:	f7ff f9d8 	bl	8010eb8 <__sinit>
 8011b08:	4b7c      	ldr	r3, [pc, #496]	; (8011cfc <_vfiprintf_r+0x20c>)
 8011b0a:	429c      	cmp	r4, r3
 8011b0c:	d158      	bne.n	8011bc0 <_vfiprintf_r+0xd0>
 8011b0e:	6874      	ldr	r4, [r6, #4]
 8011b10:	89a3      	ldrh	r3, [r4, #12]
 8011b12:	0718      	lsls	r0, r3, #28
 8011b14:	d55e      	bpl.n	8011bd4 <_vfiprintf_r+0xe4>
 8011b16:	6923      	ldr	r3, [r4, #16]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d05b      	beq.n	8011bd4 <_vfiprintf_r+0xe4>
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	9309      	str	r3, [sp, #36]	; 0x24
 8011b20:	2320      	movs	r3, #32
 8011b22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011b26:	2330      	movs	r3, #48	; 0x30
 8011b28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011b2c:	9503      	str	r5, [sp, #12]
 8011b2e:	f04f 0b01 	mov.w	fp, #1
 8011b32:	46b8      	mov	r8, r7
 8011b34:	4645      	mov	r5, r8
 8011b36:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011b3a:	b10b      	cbz	r3, 8011b40 <_vfiprintf_r+0x50>
 8011b3c:	2b25      	cmp	r3, #37	; 0x25
 8011b3e:	d154      	bne.n	8011bea <_vfiprintf_r+0xfa>
 8011b40:	ebb8 0a07 	subs.w	sl, r8, r7
 8011b44:	d00b      	beq.n	8011b5e <_vfiprintf_r+0x6e>
 8011b46:	4653      	mov	r3, sl
 8011b48:	463a      	mov	r2, r7
 8011b4a:	4621      	mov	r1, r4
 8011b4c:	4630      	mov	r0, r6
 8011b4e:	f7ff ffbc 	bl	8011aca <__sfputs_r>
 8011b52:	3001      	adds	r0, #1
 8011b54:	f000 80c2 	beq.w	8011cdc <_vfiprintf_r+0x1ec>
 8011b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b5a:	4453      	add	r3, sl
 8011b5c:	9309      	str	r3, [sp, #36]	; 0x24
 8011b5e:	f898 3000 	ldrb.w	r3, [r8]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	f000 80ba 	beq.w	8011cdc <_vfiprintf_r+0x1ec>
 8011b68:	2300      	movs	r3, #0
 8011b6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011b6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011b72:	9304      	str	r3, [sp, #16]
 8011b74:	9307      	str	r3, [sp, #28]
 8011b76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011b7a:	931a      	str	r3, [sp, #104]	; 0x68
 8011b7c:	46a8      	mov	r8, r5
 8011b7e:	2205      	movs	r2, #5
 8011b80:	f818 1b01 	ldrb.w	r1, [r8], #1
 8011b84:	485e      	ldr	r0, [pc, #376]	; (8011d00 <_vfiprintf_r+0x210>)
 8011b86:	f7ee fb53 	bl	8000230 <memchr>
 8011b8a:	9b04      	ldr	r3, [sp, #16]
 8011b8c:	bb78      	cbnz	r0, 8011bee <_vfiprintf_r+0xfe>
 8011b8e:	06d9      	lsls	r1, r3, #27
 8011b90:	bf44      	itt	mi
 8011b92:	2220      	movmi	r2, #32
 8011b94:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011b98:	071a      	lsls	r2, r3, #28
 8011b9a:	bf44      	itt	mi
 8011b9c:	222b      	movmi	r2, #43	; 0x2b
 8011b9e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011ba2:	782a      	ldrb	r2, [r5, #0]
 8011ba4:	2a2a      	cmp	r2, #42	; 0x2a
 8011ba6:	d02a      	beq.n	8011bfe <_vfiprintf_r+0x10e>
 8011ba8:	9a07      	ldr	r2, [sp, #28]
 8011baa:	46a8      	mov	r8, r5
 8011bac:	2000      	movs	r0, #0
 8011bae:	250a      	movs	r5, #10
 8011bb0:	4641      	mov	r1, r8
 8011bb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011bb6:	3b30      	subs	r3, #48	; 0x30
 8011bb8:	2b09      	cmp	r3, #9
 8011bba:	d969      	bls.n	8011c90 <_vfiprintf_r+0x1a0>
 8011bbc:	b360      	cbz	r0, 8011c18 <_vfiprintf_r+0x128>
 8011bbe:	e024      	b.n	8011c0a <_vfiprintf_r+0x11a>
 8011bc0:	4b50      	ldr	r3, [pc, #320]	; (8011d04 <_vfiprintf_r+0x214>)
 8011bc2:	429c      	cmp	r4, r3
 8011bc4:	d101      	bne.n	8011bca <_vfiprintf_r+0xda>
 8011bc6:	68b4      	ldr	r4, [r6, #8]
 8011bc8:	e7a2      	b.n	8011b10 <_vfiprintf_r+0x20>
 8011bca:	4b4f      	ldr	r3, [pc, #316]	; (8011d08 <_vfiprintf_r+0x218>)
 8011bcc:	429c      	cmp	r4, r3
 8011bce:	bf08      	it	eq
 8011bd0:	68f4      	ldreq	r4, [r6, #12]
 8011bd2:	e79d      	b.n	8011b10 <_vfiprintf_r+0x20>
 8011bd4:	4621      	mov	r1, r4
 8011bd6:	4630      	mov	r0, r6
 8011bd8:	f7fe f9cc 	bl	800ff74 <__swsetup_r>
 8011bdc:	2800      	cmp	r0, #0
 8011bde:	d09d      	beq.n	8011b1c <_vfiprintf_r+0x2c>
 8011be0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011be4:	b01d      	add	sp, #116	; 0x74
 8011be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bea:	46a8      	mov	r8, r5
 8011bec:	e7a2      	b.n	8011b34 <_vfiprintf_r+0x44>
 8011bee:	4a44      	ldr	r2, [pc, #272]	; (8011d00 <_vfiprintf_r+0x210>)
 8011bf0:	1a80      	subs	r0, r0, r2
 8011bf2:	fa0b f000 	lsl.w	r0, fp, r0
 8011bf6:	4318      	orrs	r0, r3
 8011bf8:	9004      	str	r0, [sp, #16]
 8011bfa:	4645      	mov	r5, r8
 8011bfc:	e7be      	b.n	8011b7c <_vfiprintf_r+0x8c>
 8011bfe:	9a03      	ldr	r2, [sp, #12]
 8011c00:	1d11      	adds	r1, r2, #4
 8011c02:	6812      	ldr	r2, [r2, #0]
 8011c04:	9103      	str	r1, [sp, #12]
 8011c06:	2a00      	cmp	r2, #0
 8011c08:	db01      	blt.n	8011c0e <_vfiprintf_r+0x11e>
 8011c0a:	9207      	str	r2, [sp, #28]
 8011c0c:	e004      	b.n	8011c18 <_vfiprintf_r+0x128>
 8011c0e:	4252      	negs	r2, r2
 8011c10:	f043 0302 	orr.w	r3, r3, #2
 8011c14:	9207      	str	r2, [sp, #28]
 8011c16:	9304      	str	r3, [sp, #16]
 8011c18:	f898 3000 	ldrb.w	r3, [r8]
 8011c1c:	2b2e      	cmp	r3, #46	; 0x2e
 8011c1e:	d10e      	bne.n	8011c3e <_vfiprintf_r+0x14e>
 8011c20:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011c24:	2b2a      	cmp	r3, #42	; 0x2a
 8011c26:	d138      	bne.n	8011c9a <_vfiprintf_r+0x1aa>
 8011c28:	9b03      	ldr	r3, [sp, #12]
 8011c2a:	1d1a      	adds	r2, r3, #4
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	9203      	str	r2, [sp, #12]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	bfb8      	it	lt
 8011c34:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011c38:	f108 0802 	add.w	r8, r8, #2
 8011c3c:	9305      	str	r3, [sp, #20]
 8011c3e:	4d33      	ldr	r5, [pc, #204]	; (8011d0c <_vfiprintf_r+0x21c>)
 8011c40:	f898 1000 	ldrb.w	r1, [r8]
 8011c44:	2203      	movs	r2, #3
 8011c46:	4628      	mov	r0, r5
 8011c48:	f7ee faf2 	bl	8000230 <memchr>
 8011c4c:	b140      	cbz	r0, 8011c60 <_vfiprintf_r+0x170>
 8011c4e:	2340      	movs	r3, #64	; 0x40
 8011c50:	1b40      	subs	r0, r0, r5
 8011c52:	fa03 f000 	lsl.w	r0, r3, r0
 8011c56:	9b04      	ldr	r3, [sp, #16]
 8011c58:	4303      	orrs	r3, r0
 8011c5a:	f108 0801 	add.w	r8, r8, #1
 8011c5e:	9304      	str	r3, [sp, #16]
 8011c60:	f898 1000 	ldrb.w	r1, [r8]
 8011c64:	482a      	ldr	r0, [pc, #168]	; (8011d10 <_vfiprintf_r+0x220>)
 8011c66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011c6a:	2206      	movs	r2, #6
 8011c6c:	f108 0701 	add.w	r7, r8, #1
 8011c70:	f7ee fade 	bl	8000230 <memchr>
 8011c74:	2800      	cmp	r0, #0
 8011c76:	d037      	beq.n	8011ce8 <_vfiprintf_r+0x1f8>
 8011c78:	4b26      	ldr	r3, [pc, #152]	; (8011d14 <_vfiprintf_r+0x224>)
 8011c7a:	bb1b      	cbnz	r3, 8011cc4 <_vfiprintf_r+0x1d4>
 8011c7c:	9b03      	ldr	r3, [sp, #12]
 8011c7e:	3307      	adds	r3, #7
 8011c80:	f023 0307 	bic.w	r3, r3, #7
 8011c84:	3308      	adds	r3, #8
 8011c86:	9303      	str	r3, [sp, #12]
 8011c88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c8a:	444b      	add	r3, r9
 8011c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8011c8e:	e750      	b.n	8011b32 <_vfiprintf_r+0x42>
 8011c90:	fb05 3202 	mla	r2, r5, r2, r3
 8011c94:	2001      	movs	r0, #1
 8011c96:	4688      	mov	r8, r1
 8011c98:	e78a      	b.n	8011bb0 <_vfiprintf_r+0xc0>
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	f108 0801 	add.w	r8, r8, #1
 8011ca0:	9305      	str	r3, [sp, #20]
 8011ca2:	4619      	mov	r1, r3
 8011ca4:	250a      	movs	r5, #10
 8011ca6:	4640      	mov	r0, r8
 8011ca8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011cac:	3a30      	subs	r2, #48	; 0x30
 8011cae:	2a09      	cmp	r2, #9
 8011cb0:	d903      	bls.n	8011cba <_vfiprintf_r+0x1ca>
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d0c3      	beq.n	8011c3e <_vfiprintf_r+0x14e>
 8011cb6:	9105      	str	r1, [sp, #20]
 8011cb8:	e7c1      	b.n	8011c3e <_vfiprintf_r+0x14e>
 8011cba:	fb05 2101 	mla	r1, r5, r1, r2
 8011cbe:	2301      	movs	r3, #1
 8011cc0:	4680      	mov	r8, r0
 8011cc2:	e7f0      	b.n	8011ca6 <_vfiprintf_r+0x1b6>
 8011cc4:	ab03      	add	r3, sp, #12
 8011cc6:	9300      	str	r3, [sp, #0]
 8011cc8:	4622      	mov	r2, r4
 8011cca:	4b13      	ldr	r3, [pc, #76]	; (8011d18 <_vfiprintf_r+0x228>)
 8011ccc:	a904      	add	r1, sp, #16
 8011cce:	4630      	mov	r0, r6
 8011cd0:	f7fd fc76 	bl	800f5c0 <_printf_float>
 8011cd4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8011cd8:	4681      	mov	r9, r0
 8011cda:	d1d5      	bne.n	8011c88 <_vfiprintf_r+0x198>
 8011cdc:	89a3      	ldrh	r3, [r4, #12]
 8011cde:	065b      	lsls	r3, r3, #25
 8011ce0:	f53f af7e 	bmi.w	8011be0 <_vfiprintf_r+0xf0>
 8011ce4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011ce6:	e77d      	b.n	8011be4 <_vfiprintf_r+0xf4>
 8011ce8:	ab03      	add	r3, sp, #12
 8011cea:	9300      	str	r3, [sp, #0]
 8011cec:	4622      	mov	r2, r4
 8011cee:	4b0a      	ldr	r3, [pc, #40]	; (8011d18 <_vfiprintf_r+0x228>)
 8011cf0:	a904      	add	r1, sp, #16
 8011cf2:	4630      	mov	r0, r6
 8011cf4:	f7fd ff1a 	bl	800fb2c <_printf_i>
 8011cf8:	e7ec      	b.n	8011cd4 <_vfiprintf_r+0x1e4>
 8011cfa:	bf00      	nop
 8011cfc:	080146c4 	.word	0x080146c4
 8011d00:	08014804 	.word	0x08014804
 8011d04:	080146e4 	.word	0x080146e4
 8011d08:	080146a4 	.word	0x080146a4
 8011d0c:	0801480a 	.word	0x0801480a
 8011d10:	0801480e 	.word	0x0801480e
 8011d14:	0800f5c1 	.word	0x0800f5c1
 8011d18:	08011acb 	.word	0x08011acb

08011d1c <_sbrk_r>:
 8011d1c:	b538      	push	{r3, r4, r5, lr}
 8011d1e:	4c06      	ldr	r4, [pc, #24]	; (8011d38 <_sbrk_r+0x1c>)
 8011d20:	2300      	movs	r3, #0
 8011d22:	4605      	mov	r5, r0
 8011d24:	4608      	mov	r0, r1
 8011d26:	6023      	str	r3, [r4, #0]
 8011d28:	f7f5 ff46 	bl	8007bb8 <_sbrk>
 8011d2c:	1c43      	adds	r3, r0, #1
 8011d2e:	d102      	bne.n	8011d36 <_sbrk_r+0x1a>
 8011d30:	6823      	ldr	r3, [r4, #0]
 8011d32:	b103      	cbz	r3, 8011d36 <_sbrk_r+0x1a>
 8011d34:	602b      	str	r3, [r5, #0]
 8011d36:	bd38      	pop	{r3, r4, r5, pc}
 8011d38:	2000292c 	.word	0x2000292c

08011d3c <__sread>:
 8011d3c:	b510      	push	{r4, lr}
 8011d3e:	460c      	mov	r4, r1
 8011d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d44:	f000 f8e8 	bl	8011f18 <_read_r>
 8011d48:	2800      	cmp	r0, #0
 8011d4a:	bfab      	itete	ge
 8011d4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011d4e:	89a3      	ldrhlt	r3, [r4, #12]
 8011d50:	181b      	addge	r3, r3, r0
 8011d52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011d56:	bfac      	ite	ge
 8011d58:	6563      	strge	r3, [r4, #84]	; 0x54
 8011d5a:	81a3      	strhlt	r3, [r4, #12]
 8011d5c:	bd10      	pop	{r4, pc}

08011d5e <__swrite>:
 8011d5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d62:	461f      	mov	r7, r3
 8011d64:	898b      	ldrh	r3, [r1, #12]
 8011d66:	05db      	lsls	r3, r3, #23
 8011d68:	4605      	mov	r5, r0
 8011d6a:	460c      	mov	r4, r1
 8011d6c:	4616      	mov	r6, r2
 8011d6e:	d505      	bpl.n	8011d7c <__swrite+0x1e>
 8011d70:	2302      	movs	r3, #2
 8011d72:	2200      	movs	r2, #0
 8011d74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d78:	f000 f868 	bl	8011e4c <_lseek_r>
 8011d7c:	89a3      	ldrh	r3, [r4, #12]
 8011d7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011d82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011d86:	81a3      	strh	r3, [r4, #12]
 8011d88:	4632      	mov	r2, r6
 8011d8a:	463b      	mov	r3, r7
 8011d8c:	4628      	mov	r0, r5
 8011d8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011d92:	f000 b817 	b.w	8011dc4 <_write_r>

08011d96 <__sseek>:
 8011d96:	b510      	push	{r4, lr}
 8011d98:	460c      	mov	r4, r1
 8011d9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d9e:	f000 f855 	bl	8011e4c <_lseek_r>
 8011da2:	1c43      	adds	r3, r0, #1
 8011da4:	89a3      	ldrh	r3, [r4, #12]
 8011da6:	bf15      	itete	ne
 8011da8:	6560      	strne	r0, [r4, #84]	; 0x54
 8011daa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011dae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011db2:	81a3      	strheq	r3, [r4, #12]
 8011db4:	bf18      	it	ne
 8011db6:	81a3      	strhne	r3, [r4, #12]
 8011db8:	bd10      	pop	{r4, pc}

08011dba <__sclose>:
 8011dba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011dbe:	f000 b813 	b.w	8011de8 <_close_r>
	...

08011dc4 <_write_r>:
 8011dc4:	b538      	push	{r3, r4, r5, lr}
 8011dc6:	4c07      	ldr	r4, [pc, #28]	; (8011de4 <_write_r+0x20>)
 8011dc8:	4605      	mov	r5, r0
 8011dca:	4608      	mov	r0, r1
 8011dcc:	4611      	mov	r1, r2
 8011dce:	2200      	movs	r2, #0
 8011dd0:	6022      	str	r2, [r4, #0]
 8011dd2:	461a      	mov	r2, r3
 8011dd4:	f7f5 fbc1 	bl	800755a <_write>
 8011dd8:	1c43      	adds	r3, r0, #1
 8011dda:	d102      	bne.n	8011de2 <_write_r+0x1e>
 8011ddc:	6823      	ldr	r3, [r4, #0]
 8011dde:	b103      	cbz	r3, 8011de2 <_write_r+0x1e>
 8011de0:	602b      	str	r3, [r5, #0]
 8011de2:	bd38      	pop	{r3, r4, r5, pc}
 8011de4:	2000292c 	.word	0x2000292c

08011de8 <_close_r>:
 8011de8:	b538      	push	{r3, r4, r5, lr}
 8011dea:	4c06      	ldr	r4, [pc, #24]	; (8011e04 <_close_r+0x1c>)
 8011dec:	2300      	movs	r3, #0
 8011dee:	4605      	mov	r5, r0
 8011df0:	4608      	mov	r0, r1
 8011df2:	6023      	str	r3, [r4, #0]
 8011df4:	f7f5 feab 	bl	8007b4e <_close>
 8011df8:	1c43      	adds	r3, r0, #1
 8011dfa:	d102      	bne.n	8011e02 <_close_r+0x1a>
 8011dfc:	6823      	ldr	r3, [r4, #0]
 8011dfe:	b103      	cbz	r3, 8011e02 <_close_r+0x1a>
 8011e00:	602b      	str	r3, [r5, #0]
 8011e02:	bd38      	pop	{r3, r4, r5, pc}
 8011e04:	2000292c 	.word	0x2000292c

08011e08 <_fstat_r>:
 8011e08:	b538      	push	{r3, r4, r5, lr}
 8011e0a:	4c07      	ldr	r4, [pc, #28]	; (8011e28 <_fstat_r+0x20>)
 8011e0c:	2300      	movs	r3, #0
 8011e0e:	4605      	mov	r5, r0
 8011e10:	4608      	mov	r0, r1
 8011e12:	4611      	mov	r1, r2
 8011e14:	6023      	str	r3, [r4, #0]
 8011e16:	f7f5 fea6 	bl	8007b66 <_fstat>
 8011e1a:	1c43      	adds	r3, r0, #1
 8011e1c:	d102      	bne.n	8011e24 <_fstat_r+0x1c>
 8011e1e:	6823      	ldr	r3, [r4, #0]
 8011e20:	b103      	cbz	r3, 8011e24 <_fstat_r+0x1c>
 8011e22:	602b      	str	r3, [r5, #0]
 8011e24:	bd38      	pop	{r3, r4, r5, pc}
 8011e26:	bf00      	nop
 8011e28:	2000292c 	.word	0x2000292c

08011e2c <_isatty_r>:
 8011e2c:	b538      	push	{r3, r4, r5, lr}
 8011e2e:	4c06      	ldr	r4, [pc, #24]	; (8011e48 <_isatty_r+0x1c>)
 8011e30:	2300      	movs	r3, #0
 8011e32:	4605      	mov	r5, r0
 8011e34:	4608      	mov	r0, r1
 8011e36:	6023      	str	r3, [r4, #0]
 8011e38:	f7f5 fea5 	bl	8007b86 <_isatty>
 8011e3c:	1c43      	adds	r3, r0, #1
 8011e3e:	d102      	bne.n	8011e46 <_isatty_r+0x1a>
 8011e40:	6823      	ldr	r3, [r4, #0]
 8011e42:	b103      	cbz	r3, 8011e46 <_isatty_r+0x1a>
 8011e44:	602b      	str	r3, [r5, #0]
 8011e46:	bd38      	pop	{r3, r4, r5, pc}
 8011e48:	2000292c 	.word	0x2000292c

08011e4c <_lseek_r>:
 8011e4c:	b538      	push	{r3, r4, r5, lr}
 8011e4e:	4c07      	ldr	r4, [pc, #28]	; (8011e6c <_lseek_r+0x20>)
 8011e50:	4605      	mov	r5, r0
 8011e52:	4608      	mov	r0, r1
 8011e54:	4611      	mov	r1, r2
 8011e56:	2200      	movs	r2, #0
 8011e58:	6022      	str	r2, [r4, #0]
 8011e5a:	461a      	mov	r2, r3
 8011e5c:	f7f5 fe9e 	bl	8007b9c <_lseek>
 8011e60:	1c43      	adds	r3, r0, #1
 8011e62:	d102      	bne.n	8011e6a <_lseek_r+0x1e>
 8011e64:	6823      	ldr	r3, [r4, #0]
 8011e66:	b103      	cbz	r3, 8011e6a <_lseek_r+0x1e>
 8011e68:	602b      	str	r3, [r5, #0]
 8011e6a:	bd38      	pop	{r3, r4, r5, pc}
 8011e6c:	2000292c 	.word	0x2000292c

08011e70 <__ascii_mbtowc>:
 8011e70:	b082      	sub	sp, #8
 8011e72:	b901      	cbnz	r1, 8011e76 <__ascii_mbtowc+0x6>
 8011e74:	a901      	add	r1, sp, #4
 8011e76:	b142      	cbz	r2, 8011e8a <__ascii_mbtowc+0x1a>
 8011e78:	b14b      	cbz	r3, 8011e8e <__ascii_mbtowc+0x1e>
 8011e7a:	7813      	ldrb	r3, [r2, #0]
 8011e7c:	600b      	str	r3, [r1, #0]
 8011e7e:	7812      	ldrb	r2, [r2, #0]
 8011e80:	1c10      	adds	r0, r2, #0
 8011e82:	bf18      	it	ne
 8011e84:	2001      	movne	r0, #1
 8011e86:	b002      	add	sp, #8
 8011e88:	4770      	bx	lr
 8011e8a:	4610      	mov	r0, r2
 8011e8c:	e7fb      	b.n	8011e86 <__ascii_mbtowc+0x16>
 8011e8e:	f06f 0001 	mvn.w	r0, #1
 8011e92:	e7f8      	b.n	8011e86 <__ascii_mbtowc+0x16>

08011e94 <memmove>:
 8011e94:	4288      	cmp	r0, r1
 8011e96:	b510      	push	{r4, lr}
 8011e98:	eb01 0302 	add.w	r3, r1, r2
 8011e9c:	d807      	bhi.n	8011eae <memmove+0x1a>
 8011e9e:	1e42      	subs	r2, r0, #1
 8011ea0:	4299      	cmp	r1, r3
 8011ea2:	d00a      	beq.n	8011eba <memmove+0x26>
 8011ea4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011ea8:	f802 4f01 	strb.w	r4, [r2, #1]!
 8011eac:	e7f8      	b.n	8011ea0 <memmove+0xc>
 8011eae:	4283      	cmp	r3, r0
 8011eb0:	d9f5      	bls.n	8011e9e <memmove+0xa>
 8011eb2:	1881      	adds	r1, r0, r2
 8011eb4:	1ad2      	subs	r2, r2, r3
 8011eb6:	42d3      	cmn	r3, r2
 8011eb8:	d100      	bne.n	8011ebc <memmove+0x28>
 8011eba:	bd10      	pop	{r4, pc}
 8011ebc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011ec0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8011ec4:	e7f7      	b.n	8011eb6 <memmove+0x22>

08011ec6 <__malloc_lock>:
 8011ec6:	4770      	bx	lr

08011ec8 <__malloc_unlock>:
 8011ec8:	4770      	bx	lr

08011eca <_realloc_r>:
 8011eca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ecc:	4607      	mov	r7, r0
 8011ece:	4614      	mov	r4, r2
 8011ed0:	460e      	mov	r6, r1
 8011ed2:	b921      	cbnz	r1, 8011ede <_realloc_r+0x14>
 8011ed4:	4611      	mov	r1, r2
 8011ed6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011eda:	f7ff bc33 	b.w	8011744 <_malloc_r>
 8011ede:	b922      	cbnz	r2, 8011eea <_realloc_r+0x20>
 8011ee0:	f7ff fbe2 	bl	80116a8 <_free_r>
 8011ee4:	4625      	mov	r5, r4
 8011ee6:	4628      	mov	r0, r5
 8011ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011eea:	f000 f834 	bl	8011f56 <_malloc_usable_size_r>
 8011eee:	42a0      	cmp	r0, r4
 8011ef0:	d20f      	bcs.n	8011f12 <_realloc_r+0x48>
 8011ef2:	4621      	mov	r1, r4
 8011ef4:	4638      	mov	r0, r7
 8011ef6:	f7ff fc25 	bl	8011744 <_malloc_r>
 8011efa:	4605      	mov	r5, r0
 8011efc:	2800      	cmp	r0, #0
 8011efe:	d0f2      	beq.n	8011ee6 <_realloc_r+0x1c>
 8011f00:	4631      	mov	r1, r6
 8011f02:	4622      	mov	r2, r4
 8011f04:	f7ff f8dc 	bl	80110c0 <memcpy>
 8011f08:	4631      	mov	r1, r6
 8011f0a:	4638      	mov	r0, r7
 8011f0c:	f7ff fbcc 	bl	80116a8 <_free_r>
 8011f10:	e7e9      	b.n	8011ee6 <_realloc_r+0x1c>
 8011f12:	4635      	mov	r5, r6
 8011f14:	e7e7      	b.n	8011ee6 <_realloc_r+0x1c>
	...

08011f18 <_read_r>:
 8011f18:	b538      	push	{r3, r4, r5, lr}
 8011f1a:	4c07      	ldr	r4, [pc, #28]	; (8011f38 <_read_r+0x20>)
 8011f1c:	4605      	mov	r5, r0
 8011f1e:	4608      	mov	r0, r1
 8011f20:	4611      	mov	r1, r2
 8011f22:	2200      	movs	r2, #0
 8011f24:	6022      	str	r2, [r4, #0]
 8011f26:	461a      	mov	r2, r3
 8011f28:	f7f5 fdf4 	bl	8007b14 <_read>
 8011f2c:	1c43      	adds	r3, r0, #1
 8011f2e:	d102      	bne.n	8011f36 <_read_r+0x1e>
 8011f30:	6823      	ldr	r3, [r4, #0]
 8011f32:	b103      	cbz	r3, 8011f36 <_read_r+0x1e>
 8011f34:	602b      	str	r3, [r5, #0]
 8011f36:	bd38      	pop	{r3, r4, r5, pc}
 8011f38:	2000292c 	.word	0x2000292c

08011f3c <__ascii_wctomb>:
 8011f3c:	b149      	cbz	r1, 8011f52 <__ascii_wctomb+0x16>
 8011f3e:	2aff      	cmp	r2, #255	; 0xff
 8011f40:	bf85      	ittet	hi
 8011f42:	238a      	movhi	r3, #138	; 0x8a
 8011f44:	6003      	strhi	r3, [r0, #0]
 8011f46:	700a      	strbls	r2, [r1, #0]
 8011f48:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8011f4c:	bf98      	it	ls
 8011f4e:	2001      	movls	r0, #1
 8011f50:	4770      	bx	lr
 8011f52:	4608      	mov	r0, r1
 8011f54:	4770      	bx	lr

08011f56 <_malloc_usable_size_r>:
 8011f56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011f5a:	1f18      	subs	r0, r3, #4
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	bfbc      	itt	lt
 8011f60:	580b      	ldrlt	r3, [r1, r0]
 8011f62:	18c0      	addlt	r0, r0, r3
 8011f64:	4770      	bx	lr
	...

08011f68 <log10>:
 8011f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f6a:	ed2d 8b02 	vpush	{d8}
 8011f6e:	b08b      	sub	sp, #44	; 0x2c
 8011f70:	ec55 4b10 	vmov	r4, r5, d0
 8011f74:	f000 f9e8 	bl	8012348 <__ieee754_log10>
 8011f78:	4b36      	ldr	r3, [pc, #216]	; (8012054 <log10+0xec>)
 8011f7a:	eeb0 8a40 	vmov.f32	s16, s0
 8011f7e:	eef0 8a60 	vmov.f32	s17, s1
 8011f82:	f993 6000 	ldrsb.w	r6, [r3]
 8011f86:	1c73      	adds	r3, r6, #1
 8011f88:	d05c      	beq.n	8012044 <log10+0xdc>
 8011f8a:	4622      	mov	r2, r4
 8011f8c:	462b      	mov	r3, r5
 8011f8e:	4620      	mov	r0, r4
 8011f90:	4629      	mov	r1, r5
 8011f92:	f7ee fdf3 	bl	8000b7c <__aeabi_dcmpun>
 8011f96:	4607      	mov	r7, r0
 8011f98:	2800      	cmp	r0, #0
 8011f9a:	d153      	bne.n	8012044 <log10+0xdc>
 8011f9c:	2200      	movs	r2, #0
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	4620      	mov	r0, r4
 8011fa2:	4629      	mov	r1, r5
 8011fa4:	f7ee fdcc 	bl	8000b40 <__aeabi_dcmple>
 8011fa8:	2800      	cmp	r0, #0
 8011faa:	d04b      	beq.n	8012044 <log10+0xdc>
 8011fac:	4b2a      	ldr	r3, [pc, #168]	; (8012058 <log10+0xf0>)
 8011fae:	9301      	str	r3, [sp, #4]
 8011fb0:	9708      	str	r7, [sp, #32]
 8011fb2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8011fb6:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8011fba:	b9a6      	cbnz	r6, 8011fe6 <log10+0x7e>
 8011fbc:	4b27      	ldr	r3, [pc, #156]	; (801205c <log10+0xf4>)
 8011fbe:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8011fc2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011fc6:	4620      	mov	r0, r4
 8011fc8:	2200      	movs	r2, #0
 8011fca:	2300      	movs	r3, #0
 8011fcc:	4629      	mov	r1, r5
 8011fce:	f7ee fda3 	bl	8000b18 <__aeabi_dcmpeq>
 8011fd2:	bb40      	cbnz	r0, 8012026 <log10+0xbe>
 8011fd4:	2301      	movs	r3, #1
 8011fd6:	2e02      	cmp	r6, #2
 8011fd8:	9300      	str	r3, [sp, #0]
 8011fda:	d119      	bne.n	8012010 <log10+0xa8>
 8011fdc:	f7fd fa2a 	bl	800f434 <__errno>
 8011fe0:	2321      	movs	r3, #33	; 0x21
 8011fe2:	6003      	str	r3, [r0, #0]
 8011fe4:	e019      	b.n	801201a <log10+0xb2>
 8011fe6:	4b1e      	ldr	r3, [pc, #120]	; (8012060 <log10+0xf8>)
 8011fe8:	2200      	movs	r2, #0
 8011fea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011fee:	4620      	mov	r0, r4
 8011ff0:	2200      	movs	r2, #0
 8011ff2:	2300      	movs	r3, #0
 8011ff4:	4629      	mov	r1, r5
 8011ff6:	f7ee fd8f 	bl	8000b18 <__aeabi_dcmpeq>
 8011ffa:	2800      	cmp	r0, #0
 8011ffc:	d0ea      	beq.n	8011fd4 <log10+0x6c>
 8011ffe:	2302      	movs	r3, #2
 8012000:	429e      	cmp	r6, r3
 8012002:	9300      	str	r3, [sp, #0]
 8012004:	d111      	bne.n	801202a <log10+0xc2>
 8012006:	f7fd fa15 	bl	800f434 <__errno>
 801200a:	2322      	movs	r3, #34	; 0x22
 801200c:	6003      	str	r3, [r0, #0]
 801200e:	e011      	b.n	8012034 <log10+0xcc>
 8012010:	4668      	mov	r0, sp
 8012012:	f000 fff4 	bl	8012ffe <matherr>
 8012016:	2800      	cmp	r0, #0
 8012018:	d0e0      	beq.n	8011fdc <log10+0x74>
 801201a:	4812      	ldr	r0, [pc, #72]	; (8012064 <log10+0xfc>)
 801201c:	f000 fff4 	bl	8013008 <nan>
 8012020:	ed8d 0b06 	vstr	d0, [sp, #24]
 8012024:	e006      	b.n	8012034 <log10+0xcc>
 8012026:	2302      	movs	r3, #2
 8012028:	9300      	str	r3, [sp, #0]
 801202a:	4668      	mov	r0, sp
 801202c:	f000 ffe7 	bl	8012ffe <matherr>
 8012030:	2800      	cmp	r0, #0
 8012032:	d0e8      	beq.n	8012006 <log10+0x9e>
 8012034:	9b08      	ldr	r3, [sp, #32]
 8012036:	b11b      	cbz	r3, 8012040 <log10+0xd8>
 8012038:	f7fd f9fc 	bl	800f434 <__errno>
 801203c:	9b08      	ldr	r3, [sp, #32]
 801203e:	6003      	str	r3, [r0, #0]
 8012040:	ed9d 8b06 	vldr	d8, [sp, #24]
 8012044:	eeb0 0a48 	vmov.f32	s0, s16
 8012048:	eef0 0a68 	vmov.f32	s1, s17
 801204c:	b00b      	add	sp, #44	; 0x2c
 801204e:	ecbd 8b02 	vpop	{d8}
 8012052:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012054:	20001e04 	.word	0x20001e04
 8012058:	08014920 	.word	0x08014920
 801205c:	c7efffff 	.word	0xc7efffff
 8012060:	fff00000 	.word	0xfff00000
 8012064:	08014809 	.word	0x08014809

08012068 <pow>:
 8012068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801206c:	ed2d 8b04 	vpush	{d8-d9}
 8012070:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8012344 <pow+0x2dc>
 8012074:	b08d      	sub	sp, #52	; 0x34
 8012076:	ec57 6b10 	vmov	r6, r7, d0
 801207a:	ec55 4b11 	vmov	r4, r5, d1
 801207e:	f000 f9ef 	bl	8012460 <__ieee754_pow>
 8012082:	f999 3000 	ldrsb.w	r3, [r9]
 8012086:	9300      	str	r3, [sp, #0]
 8012088:	3301      	adds	r3, #1
 801208a:	eeb0 8a40 	vmov.f32	s16, s0
 801208e:	eef0 8a60 	vmov.f32	s17, s1
 8012092:	46c8      	mov	r8, r9
 8012094:	d05f      	beq.n	8012156 <pow+0xee>
 8012096:	4622      	mov	r2, r4
 8012098:	462b      	mov	r3, r5
 801209a:	4620      	mov	r0, r4
 801209c:	4629      	mov	r1, r5
 801209e:	f7ee fd6d 	bl	8000b7c <__aeabi_dcmpun>
 80120a2:	4683      	mov	fp, r0
 80120a4:	2800      	cmp	r0, #0
 80120a6:	d156      	bne.n	8012156 <pow+0xee>
 80120a8:	4632      	mov	r2, r6
 80120aa:	463b      	mov	r3, r7
 80120ac:	4630      	mov	r0, r6
 80120ae:	4639      	mov	r1, r7
 80120b0:	f7ee fd64 	bl	8000b7c <__aeabi_dcmpun>
 80120b4:	9001      	str	r0, [sp, #4]
 80120b6:	b1e8      	cbz	r0, 80120f4 <pow+0x8c>
 80120b8:	2200      	movs	r2, #0
 80120ba:	2300      	movs	r3, #0
 80120bc:	4620      	mov	r0, r4
 80120be:	4629      	mov	r1, r5
 80120c0:	f7ee fd2a 	bl	8000b18 <__aeabi_dcmpeq>
 80120c4:	2800      	cmp	r0, #0
 80120c6:	d046      	beq.n	8012156 <pow+0xee>
 80120c8:	2301      	movs	r3, #1
 80120ca:	9302      	str	r3, [sp, #8]
 80120cc:	4b96      	ldr	r3, [pc, #600]	; (8012328 <pow+0x2c0>)
 80120ce:	9303      	str	r3, [sp, #12]
 80120d0:	4b96      	ldr	r3, [pc, #600]	; (801232c <pow+0x2c4>)
 80120d2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80120d6:	2200      	movs	r2, #0
 80120d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80120dc:	9b00      	ldr	r3, [sp, #0]
 80120de:	2b02      	cmp	r3, #2
 80120e0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80120e4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80120e8:	d033      	beq.n	8012152 <pow+0xea>
 80120ea:	a802      	add	r0, sp, #8
 80120ec:	f000 ff87 	bl	8012ffe <matherr>
 80120f0:	bb48      	cbnz	r0, 8012146 <pow+0xde>
 80120f2:	e05d      	b.n	80121b0 <pow+0x148>
 80120f4:	f04f 0a00 	mov.w	sl, #0
 80120f8:	f04f 0b00 	mov.w	fp, #0
 80120fc:	4652      	mov	r2, sl
 80120fe:	465b      	mov	r3, fp
 8012100:	4630      	mov	r0, r6
 8012102:	4639      	mov	r1, r7
 8012104:	f7ee fd08 	bl	8000b18 <__aeabi_dcmpeq>
 8012108:	ec4b ab19 	vmov	d9, sl, fp
 801210c:	2800      	cmp	r0, #0
 801210e:	d054      	beq.n	80121ba <pow+0x152>
 8012110:	4652      	mov	r2, sl
 8012112:	465b      	mov	r3, fp
 8012114:	4620      	mov	r0, r4
 8012116:	4629      	mov	r1, r5
 8012118:	f7ee fcfe 	bl	8000b18 <__aeabi_dcmpeq>
 801211c:	4680      	mov	r8, r0
 801211e:	b318      	cbz	r0, 8012168 <pow+0x100>
 8012120:	2301      	movs	r3, #1
 8012122:	9302      	str	r3, [sp, #8]
 8012124:	4b80      	ldr	r3, [pc, #512]	; (8012328 <pow+0x2c0>)
 8012126:	9303      	str	r3, [sp, #12]
 8012128:	9b01      	ldr	r3, [sp, #4]
 801212a:	930a      	str	r3, [sp, #40]	; 0x28
 801212c:	9b00      	ldr	r3, [sp, #0]
 801212e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8012132:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8012136:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801213a:	2b00      	cmp	r3, #0
 801213c:	d0d5      	beq.n	80120ea <pow+0x82>
 801213e:	4b7b      	ldr	r3, [pc, #492]	; (801232c <pow+0x2c4>)
 8012140:	2200      	movs	r2, #0
 8012142:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012148:	b11b      	cbz	r3, 8012152 <pow+0xea>
 801214a:	f7fd f973 	bl	800f434 <__errno>
 801214e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012150:	6003      	str	r3, [r0, #0]
 8012152:	ed9d 8b08 	vldr	d8, [sp, #32]
 8012156:	eeb0 0a48 	vmov.f32	s0, s16
 801215a:	eef0 0a68 	vmov.f32	s1, s17
 801215e:	b00d      	add	sp, #52	; 0x34
 8012160:	ecbd 8b04 	vpop	{d8-d9}
 8012164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012168:	ec45 4b10 	vmov	d0, r4, r5
 801216c:	f000 ff3f 	bl	8012fee <finite>
 8012170:	2800      	cmp	r0, #0
 8012172:	d0f0      	beq.n	8012156 <pow+0xee>
 8012174:	4652      	mov	r2, sl
 8012176:	465b      	mov	r3, fp
 8012178:	4620      	mov	r0, r4
 801217a:	4629      	mov	r1, r5
 801217c:	f7ee fcd6 	bl	8000b2c <__aeabi_dcmplt>
 8012180:	2800      	cmp	r0, #0
 8012182:	d0e8      	beq.n	8012156 <pow+0xee>
 8012184:	2301      	movs	r3, #1
 8012186:	9302      	str	r3, [sp, #8]
 8012188:	4b67      	ldr	r3, [pc, #412]	; (8012328 <pow+0x2c0>)
 801218a:	9303      	str	r3, [sp, #12]
 801218c:	f999 3000 	ldrsb.w	r3, [r9]
 8012190:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8012194:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8012198:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801219c:	b913      	cbnz	r3, 80121a4 <pow+0x13c>
 801219e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80121a2:	e7a2      	b.n	80120ea <pow+0x82>
 80121a4:	4962      	ldr	r1, [pc, #392]	; (8012330 <pow+0x2c8>)
 80121a6:	2000      	movs	r0, #0
 80121a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80121ac:	2b02      	cmp	r3, #2
 80121ae:	d19c      	bne.n	80120ea <pow+0x82>
 80121b0:	f7fd f940 	bl	800f434 <__errno>
 80121b4:	2321      	movs	r3, #33	; 0x21
 80121b6:	6003      	str	r3, [r0, #0]
 80121b8:	e7c5      	b.n	8012146 <pow+0xde>
 80121ba:	eeb0 0a48 	vmov.f32	s0, s16
 80121be:	eef0 0a68 	vmov.f32	s1, s17
 80121c2:	f000 ff14 	bl	8012fee <finite>
 80121c6:	9000      	str	r0, [sp, #0]
 80121c8:	2800      	cmp	r0, #0
 80121ca:	f040 8081 	bne.w	80122d0 <pow+0x268>
 80121ce:	ec47 6b10 	vmov	d0, r6, r7
 80121d2:	f000 ff0c 	bl	8012fee <finite>
 80121d6:	2800      	cmp	r0, #0
 80121d8:	d07a      	beq.n	80122d0 <pow+0x268>
 80121da:	ec45 4b10 	vmov	d0, r4, r5
 80121de:	f000 ff06 	bl	8012fee <finite>
 80121e2:	2800      	cmp	r0, #0
 80121e4:	d074      	beq.n	80122d0 <pow+0x268>
 80121e6:	ec53 2b18 	vmov	r2, r3, d8
 80121ea:	ee18 0a10 	vmov	r0, s16
 80121ee:	4619      	mov	r1, r3
 80121f0:	f7ee fcc4 	bl	8000b7c <__aeabi_dcmpun>
 80121f4:	f999 9000 	ldrsb.w	r9, [r9]
 80121f8:	4b4b      	ldr	r3, [pc, #300]	; (8012328 <pow+0x2c0>)
 80121fa:	b1b0      	cbz	r0, 801222a <pow+0x1c2>
 80121fc:	2201      	movs	r2, #1
 80121fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012202:	9b00      	ldr	r3, [sp, #0]
 8012204:	930a      	str	r3, [sp, #40]	; 0x28
 8012206:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801220a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801220e:	f1b9 0f00 	cmp.w	r9, #0
 8012212:	d0c4      	beq.n	801219e <pow+0x136>
 8012214:	4652      	mov	r2, sl
 8012216:	465b      	mov	r3, fp
 8012218:	4650      	mov	r0, sl
 801221a:	4659      	mov	r1, fp
 801221c:	f7ee fb3e 	bl	800089c <__aeabi_ddiv>
 8012220:	f1b9 0f02 	cmp.w	r9, #2
 8012224:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012228:	e7c1      	b.n	80121ae <pow+0x146>
 801222a:	2203      	movs	r2, #3
 801222c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012230:	900a      	str	r0, [sp, #40]	; 0x28
 8012232:	4629      	mov	r1, r5
 8012234:	4620      	mov	r0, r4
 8012236:	2200      	movs	r2, #0
 8012238:	4b3e      	ldr	r3, [pc, #248]	; (8012334 <pow+0x2cc>)
 801223a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801223e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8012242:	f7ee fa01 	bl	8000648 <__aeabi_dmul>
 8012246:	4604      	mov	r4, r0
 8012248:	460d      	mov	r5, r1
 801224a:	f1b9 0f00 	cmp.w	r9, #0
 801224e:	d124      	bne.n	801229a <pow+0x232>
 8012250:	4b39      	ldr	r3, [pc, #228]	; (8012338 <pow+0x2d0>)
 8012252:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8012256:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801225a:	4630      	mov	r0, r6
 801225c:	4652      	mov	r2, sl
 801225e:	465b      	mov	r3, fp
 8012260:	4639      	mov	r1, r7
 8012262:	f7ee fc63 	bl	8000b2c <__aeabi_dcmplt>
 8012266:	2800      	cmp	r0, #0
 8012268:	d056      	beq.n	8012318 <pow+0x2b0>
 801226a:	ec45 4b10 	vmov	d0, r4, r5
 801226e:	f000 fed3 	bl	8013018 <rint>
 8012272:	4622      	mov	r2, r4
 8012274:	462b      	mov	r3, r5
 8012276:	ec51 0b10 	vmov	r0, r1, d0
 801227a:	f7ee fc4d 	bl	8000b18 <__aeabi_dcmpeq>
 801227e:	b920      	cbnz	r0, 801228a <pow+0x222>
 8012280:	4b2e      	ldr	r3, [pc, #184]	; (801233c <pow+0x2d4>)
 8012282:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8012286:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801228a:	f998 3000 	ldrsb.w	r3, [r8]
 801228e:	2b02      	cmp	r3, #2
 8012290:	d142      	bne.n	8012318 <pow+0x2b0>
 8012292:	f7fd f8cf 	bl	800f434 <__errno>
 8012296:	2322      	movs	r3, #34	; 0x22
 8012298:	e78d      	b.n	80121b6 <pow+0x14e>
 801229a:	4b29      	ldr	r3, [pc, #164]	; (8012340 <pow+0x2d8>)
 801229c:	2200      	movs	r2, #0
 801229e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80122a2:	4630      	mov	r0, r6
 80122a4:	4652      	mov	r2, sl
 80122a6:	465b      	mov	r3, fp
 80122a8:	4639      	mov	r1, r7
 80122aa:	f7ee fc3f 	bl	8000b2c <__aeabi_dcmplt>
 80122ae:	2800      	cmp	r0, #0
 80122b0:	d0eb      	beq.n	801228a <pow+0x222>
 80122b2:	ec45 4b10 	vmov	d0, r4, r5
 80122b6:	f000 feaf 	bl	8013018 <rint>
 80122ba:	4622      	mov	r2, r4
 80122bc:	462b      	mov	r3, r5
 80122be:	ec51 0b10 	vmov	r0, r1, d0
 80122c2:	f7ee fc29 	bl	8000b18 <__aeabi_dcmpeq>
 80122c6:	2800      	cmp	r0, #0
 80122c8:	d1df      	bne.n	801228a <pow+0x222>
 80122ca:	2200      	movs	r2, #0
 80122cc:	4b18      	ldr	r3, [pc, #96]	; (8012330 <pow+0x2c8>)
 80122ce:	e7da      	b.n	8012286 <pow+0x21e>
 80122d0:	2200      	movs	r2, #0
 80122d2:	2300      	movs	r3, #0
 80122d4:	ec51 0b18 	vmov	r0, r1, d8
 80122d8:	f7ee fc1e 	bl	8000b18 <__aeabi_dcmpeq>
 80122dc:	2800      	cmp	r0, #0
 80122de:	f43f af3a 	beq.w	8012156 <pow+0xee>
 80122e2:	ec47 6b10 	vmov	d0, r6, r7
 80122e6:	f000 fe82 	bl	8012fee <finite>
 80122ea:	2800      	cmp	r0, #0
 80122ec:	f43f af33 	beq.w	8012156 <pow+0xee>
 80122f0:	ec45 4b10 	vmov	d0, r4, r5
 80122f4:	f000 fe7b 	bl	8012fee <finite>
 80122f8:	2800      	cmp	r0, #0
 80122fa:	f43f af2c 	beq.w	8012156 <pow+0xee>
 80122fe:	2304      	movs	r3, #4
 8012300:	9302      	str	r3, [sp, #8]
 8012302:	4b09      	ldr	r3, [pc, #36]	; (8012328 <pow+0x2c0>)
 8012304:	9303      	str	r3, [sp, #12]
 8012306:	2300      	movs	r3, #0
 8012308:	930a      	str	r3, [sp, #40]	; 0x28
 801230a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801230e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8012312:	ed8d 9b08 	vstr	d9, [sp, #32]
 8012316:	e7b8      	b.n	801228a <pow+0x222>
 8012318:	a802      	add	r0, sp, #8
 801231a:	f000 fe70 	bl	8012ffe <matherr>
 801231e:	2800      	cmp	r0, #0
 8012320:	f47f af11 	bne.w	8012146 <pow+0xde>
 8012324:	e7b5      	b.n	8012292 <pow+0x22a>
 8012326:	bf00      	nop
 8012328:	08014926 	.word	0x08014926
 801232c:	3ff00000 	.word	0x3ff00000
 8012330:	fff00000 	.word	0xfff00000
 8012334:	3fe00000 	.word	0x3fe00000
 8012338:	47efffff 	.word	0x47efffff
 801233c:	c7efffff 	.word	0xc7efffff
 8012340:	7ff00000 	.word	0x7ff00000
 8012344:	20001e04 	.word	0x20001e04

08012348 <__ieee754_log10>:
 8012348:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801234c:	ec55 4b10 	vmov	r4, r5, d0
 8012350:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8012354:	462b      	mov	r3, r5
 8012356:	da2f      	bge.n	80123b8 <__ieee754_log10+0x70>
 8012358:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 801235c:	4322      	orrs	r2, r4
 801235e:	d10a      	bne.n	8012376 <__ieee754_log10+0x2e>
 8012360:	493b      	ldr	r1, [pc, #236]	; (8012450 <__ieee754_log10+0x108>)
 8012362:	2200      	movs	r2, #0
 8012364:	2300      	movs	r3, #0
 8012366:	2000      	movs	r0, #0
 8012368:	f7ee fa98 	bl	800089c <__aeabi_ddiv>
 801236c:	ec41 0b10 	vmov	d0, r0, r1
 8012370:	b003      	add	sp, #12
 8012372:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012376:	2d00      	cmp	r5, #0
 8012378:	da08      	bge.n	801238c <__ieee754_log10+0x44>
 801237a:	ee10 2a10 	vmov	r2, s0
 801237e:	4620      	mov	r0, r4
 8012380:	4629      	mov	r1, r5
 8012382:	f7ed ffa9 	bl	80002d8 <__aeabi_dsub>
 8012386:	2200      	movs	r2, #0
 8012388:	2300      	movs	r3, #0
 801238a:	e7ed      	b.n	8012368 <__ieee754_log10+0x20>
 801238c:	2200      	movs	r2, #0
 801238e:	4b31      	ldr	r3, [pc, #196]	; (8012454 <__ieee754_log10+0x10c>)
 8012390:	4629      	mov	r1, r5
 8012392:	ee10 0a10 	vmov	r0, s0
 8012396:	f7ee f957 	bl	8000648 <__aeabi_dmul>
 801239a:	f06f 0235 	mvn.w	r2, #53	; 0x35
 801239e:	4604      	mov	r4, r0
 80123a0:	460d      	mov	r5, r1
 80123a2:	460b      	mov	r3, r1
 80123a4:	492c      	ldr	r1, [pc, #176]	; (8012458 <__ieee754_log10+0x110>)
 80123a6:	428b      	cmp	r3, r1
 80123a8:	dd08      	ble.n	80123bc <__ieee754_log10+0x74>
 80123aa:	4622      	mov	r2, r4
 80123ac:	462b      	mov	r3, r5
 80123ae:	4620      	mov	r0, r4
 80123b0:	4629      	mov	r1, r5
 80123b2:	f7ed ff93 	bl	80002dc <__adddf3>
 80123b6:	e7d9      	b.n	801236c <__ieee754_log10+0x24>
 80123b8:	2200      	movs	r2, #0
 80123ba:	e7f3      	b.n	80123a4 <__ieee754_log10+0x5c>
 80123bc:	1518      	asrs	r0, r3, #20
 80123be:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 80123c2:	4410      	add	r0, r2
 80123c4:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 80123c8:	4448      	add	r0, r9
 80123ca:	f3c3 0813 	ubfx	r8, r3, #0, #20
 80123ce:	f7ee f8d1 	bl	8000574 <__aeabi_i2d>
 80123d2:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 80123d6:	3303      	adds	r3, #3
 80123d8:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 80123dc:	ec45 4b10 	vmov	d0, r4, r5
 80123e0:	4606      	mov	r6, r0
 80123e2:	460f      	mov	r7, r1
 80123e4:	f000 ff14 	bl	8013210 <__ieee754_log>
 80123e8:	a313      	add	r3, pc, #76	; (adr r3, 8012438 <__ieee754_log10+0xf0>)
 80123ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123ee:	4630      	mov	r0, r6
 80123f0:	4639      	mov	r1, r7
 80123f2:	ed8d 0b00 	vstr	d0, [sp]
 80123f6:	f7ee f927 	bl	8000648 <__aeabi_dmul>
 80123fa:	ed9d 0b00 	vldr	d0, [sp]
 80123fe:	4604      	mov	r4, r0
 8012400:	460d      	mov	r5, r1
 8012402:	a30f      	add	r3, pc, #60	; (adr r3, 8012440 <__ieee754_log10+0xf8>)
 8012404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012408:	ec51 0b10 	vmov	r0, r1, d0
 801240c:	f7ee f91c 	bl	8000648 <__aeabi_dmul>
 8012410:	4602      	mov	r2, r0
 8012412:	460b      	mov	r3, r1
 8012414:	4620      	mov	r0, r4
 8012416:	4629      	mov	r1, r5
 8012418:	f7ed ff60 	bl	80002dc <__adddf3>
 801241c:	a30a      	add	r3, pc, #40	; (adr r3, 8012448 <__ieee754_log10+0x100>)
 801241e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012422:	4604      	mov	r4, r0
 8012424:	460d      	mov	r5, r1
 8012426:	4630      	mov	r0, r6
 8012428:	4639      	mov	r1, r7
 801242a:	f7ee f90d 	bl	8000648 <__aeabi_dmul>
 801242e:	4602      	mov	r2, r0
 8012430:	460b      	mov	r3, r1
 8012432:	4620      	mov	r0, r4
 8012434:	4629      	mov	r1, r5
 8012436:	e7bc      	b.n	80123b2 <__ieee754_log10+0x6a>
 8012438:	11f12b36 	.word	0x11f12b36
 801243c:	3d59fef3 	.word	0x3d59fef3
 8012440:	1526e50e 	.word	0x1526e50e
 8012444:	3fdbcb7b 	.word	0x3fdbcb7b
 8012448:	509f6000 	.word	0x509f6000
 801244c:	3fd34413 	.word	0x3fd34413
 8012450:	c3500000 	.word	0xc3500000
 8012454:	43500000 	.word	0x43500000
 8012458:	7fefffff 	.word	0x7fefffff
 801245c:	00000000 	.word	0x00000000

08012460 <__ieee754_pow>:
 8012460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012464:	b091      	sub	sp, #68	; 0x44
 8012466:	ed8d 1b00 	vstr	d1, [sp]
 801246a:	e9dd 2900 	ldrd	r2, r9, [sp]
 801246e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8012472:	ea58 0302 	orrs.w	r3, r8, r2
 8012476:	ec57 6b10 	vmov	r6, r7, d0
 801247a:	f000 84be 	beq.w	8012dfa <__ieee754_pow+0x99a>
 801247e:	4b7a      	ldr	r3, [pc, #488]	; (8012668 <__ieee754_pow+0x208>)
 8012480:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8012484:	429c      	cmp	r4, r3
 8012486:	463d      	mov	r5, r7
 8012488:	ee10 aa10 	vmov	sl, s0
 801248c:	dc09      	bgt.n	80124a2 <__ieee754_pow+0x42>
 801248e:	d103      	bne.n	8012498 <__ieee754_pow+0x38>
 8012490:	b93e      	cbnz	r6, 80124a2 <__ieee754_pow+0x42>
 8012492:	45a0      	cmp	r8, r4
 8012494:	dc0d      	bgt.n	80124b2 <__ieee754_pow+0x52>
 8012496:	e001      	b.n	801249c <__ieee754_pow+0x3c>
 8012498:	4598      	cmp	r8, r3
 801249a:	dc02      	bgt.n	80124a2 <__ieee754_pow+0x42>
 801249c:	4598      	cmp	r8, r3
 801249e:	d10e      	bne.n	80124be <__ieee754_pow+0x5e>
 80124a0:	b16a      	cbz	r2, 80124be <__ieee754_pow+0x5e>
 80124a2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80124a6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80124aa:	ea54 030a 	orrs.w	r3, r4, sl
 80124ae:	f000 84a4 	beq.w	8012dfa <__ieee754_pow+0x99a>
 80124b2:	486e      	ldr	r0, [pc, #440]	; (801266c <__ieee754_pow+0x20c>)
 80124b4:	b011      	add	sp, #68	; 0x44
 80124b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124ba:	f000 bda5 	b.w	8013008 <nan>
 80124be:	2d00      	cmp	r5, #0
 80124c0:	da53      	bge.n	801256a <__ieee754_pow+0x10a>
 80124c2:	4b6b      	ldr	r3, [pc, #428]	; (8012670 <__ieee754_pow+0x210>)
 80124c4:	4598      	cmp	r8, r3
 80124c6:	dc4d      	bgt.n	8012564 <__ieee754_pow+0x104>
 80124c8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80124cc:	4598      	cmp	r8, r3
 80124ce:	dd4c      	ble.n	801256a <__ieee754_pow+0x10a>
 80124d0:	ea4f 5328 	mov.w	r3, r8, asr #20
 80124d4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80124d8:	2b14      	cmp	r3, #20
 80124da:	dd26      	ble.n	801252a <__ieee754_pow+0xca>
 80124dc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80124e0:	fa22 f103 	lsr.w	r1, r2, r3
 80124e4:	fa01 f303 	lsl.w	r3, r1, r3
 80124e8:	4293      	cmp	r3, r2
 80124ea:	d13e      	bne.n	801256a <__ieee754_pow+0x10a>
 80124ec:	f001 0101 	and.w	r1, r1, #1
 80124f0:	f1c1 0b02 	rsb	fp, r1, #2
 80124f4:	2a00      	cmp	r2, #0
 80124f6:	d15b      	bne.n	80125b0 <__ieee754_pow+0x150>
 80124f8:	4b5b      	ldr	r3, [pc, #364]	; (8012668 <__ieee754_pow+0x208>)
 80124fa:	4598      	cmp	r8, r3
 80124fc:	d124      	bne.n	8012548 <__ieee754_pow+0xe8>
 80124fe:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8012502:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8012506:	ea53 030a 	orrs.w	r3, r3, sl
 801250a:	f000 8476 	beq.w	8012dfa <__ieee754_pow+0x99a>
 801250e:	4b59      	ldr	r3, [pc, #356]	; (8012674 <__ieee754_pow+0x214>)
 8012510:	429c      	cmp	r4, r3
 8012512:	dd2d      	ble.n	8012570 <__ieee754_pow+0x110>
 8012514:	f1b9 0f00 	cmp.w	r9, #0
 8012518:	f280 8473 	bge.w	8012e02 <__ieee754_pow+0x9a2>
 801251c:	2000      	movs	r0, #0
 801251e:	2100      	movs	r1, #0
 8012520:	ec41 0b10 	vmov	d0, r0, r1
 8012524:	b011      	add	sp, #68	; 0x44
 8012526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801252a:	2a00      	cmp	r2, #0
 801252c:	d13e      	bne.n	80125ac <__ieee754_pow+0x14c>
 801252e:	f1c3 0314 	rsb	r3, r3, #20
 8012532:	fa48 f103 	asr.w	r1, r8, r3
 8012536:	fa01 f303 	lsl.w	r3, r1, r3
 801253a:	4543      	cmp	r3, r8
 801253c:	f040 8469 	bne.w	8012e12 <__ieee754_pow+0x9b2>
 8012540:	f001 0101 	and.w	r1, r1, #1
 8012544:	f1c1 0b02 	rsb	fp, r1, #2
 8012548:	4b4b      	ldr	r3, [pc, #300]	; (8012678 <__ieee754_pow+0x218>)
 801254a:	4598      	cmp	r8, r3
 801254c:	d118      	bne.n	8012580 <__ieee754_pow+0x120>
 801254e:	f1b9 0f00 	cmp.w	r9, #0
 8012552:	f280 845a 	bge.w	8012e0a <__ieee754_pow+0x9aa>
 8012556:	4948      	ldr	r1, [pc, #288]	; (8012678 <__ieee754_pow+0x218>)
 8012558:	4632      	mov	r2, r6
 801255a:	463b      	mov	r3, r7
 801255c:	2000      	movs	r0, #0
 801255e:	f7ee f99d 	bl	800089c <__aeabi_ddiv>
 8012562:	e7dd      	b.n	8012520 <__ieee754_pow+0xc0>
 8012564:	f04f 0b02 	mov.w	fp, #2
 8012568:	e7c4      	b.n	80124f4 <__ieee754_pow+0x94>
 801256a:	f04f 0b00 	mov.w	fp, #0
 801256e:	e7c1      	b.n	80124f4 <__ieee754_pow+0x94>
 8012570:	f1b9 0f00 	cmp.w	r9, #0
 8012574:	dad2      	bge.n	801251c <__ieee754_pow+0xbc>
 8012576:	e9dd 0300 	ldrd	r0, r3, [sp]
 801257a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801257e:	e7cf      	b.n	8012520 <__ieee754_pow+0xc0>
 8012580:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8012584:	d106      	bne.n	8012594 <__ieee754_pow+0x134>
 8012586:	4632      	mov	r2, r6
 8012588:	463b      	mov	r3, r7
 801258a:	4610      	mov	r0, r2
 801258c:	4619      	mov	r1, r3
 801258e:	f7ee f85b 	bl	8000648 <__aeabi_dmul>
 8012592:	e7c5      	b.n	8012520 <__ieee754_pow+0xc0>
 8012594:	4b39      	ldr	r3, [pc, #228]	; (801267c <__ieee754_pow+0x21c>)
 8012596:	4599      	cmp	r9, r3
 8012598:	d10a      	bne.n	80125b0 <__ieee754_pow+0x150>
 801259a:	2d00      	cmp	r5, #0
 801259c:	db08      	blt.n	80125b0 <__ieee754_pow+0x150>
 801259e:	ec47 6b10 	vmov	d0, r6, r7
 80125a2:	b011      	add	sp, #68	; 0x44
 80125a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125a8:	f000 bc68 	b.w	8012e7c <__ieee754_sqrt>
 80125ac:	f04f 0b00 	mov.w	fp, #0
 80125b0:	ec47 6b10 	vmov	d0, r6, r7
 80125b4:	f000 fd12 	bl	8012fdc <fabs>
 80125b8:	ec51 0b10 	vmov	r0, r1, d0
 80125bc:	f1ba 0f00 	cmp.w	sl, #0
 80125c0:	d127      	bne.n	8012612 <__ieee754_pow+0x1b2>
 80125c2:	b124      	cbz	r4, 80125ce <__ieee754_pow+0x16e>
 80125c4:	4b2c      	ldr	r3, [pc, #176]	; (8012678 <__ieee754_pow+0x218>)
 80125c6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80125ca:	429a      	cmp	r2, r3
 80125cc:	d121      	bne.n	8012612 <__ieee754_pow+0x1b2>
 80125ce:	f1b9 0f00 	cmp.w	r9, #0
 80125d2:	da05      	bge.n	80125e0 <__ieee754_pow+0x180>
 80125d4:	4602      	mov	r2, r0
 80125d6:	460b      	mov	r3, r1
 80125d8:	2000      	movs	r0, #0
 80125da:	4927      	ldr	r1, [pc, #156]	; (8012678 <__ieee754_pow+0x218>)
 80125dc:	f7ee f95e 	bl	800089c <__aeabi_ddiv>
 80125e0:	2d00      	cmp	r5, #0
 80125e2:	da9d      	bge.n	8012520 <__ieee754_pow+0xc0>
 80125e4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80125e8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80125ec:	ea54 030b 	orrs.w	r3, r4, fp
 80125f0:	d108      	bne.n	8012604 <__ieee754_pow+0x1a4>
 80125f2:	4602      	mov	r2, r0
 80125f4:	460b      	mov	r3, r1
 80125f6:	4610      	mov	r0, r2
 80125f8:	4619      	mov	r1, r3
 80125fa:	f7ed fe6d 	bl	80002d8 <__aeabi_dsub>
 80125fe:	4602      	mov	r2, r0
 8012600:	460b      	mov	r3, r1
 8012602:	e7ac      	b.n	801255e <__ieee754_pow+0xfe>
 8012604:	f1bb 0f01 	cmp.w	fp, #1
 8012608:	d18a      	bne.n	8012520 <__ieee754_pow+0xc0>
 801260a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801260e:	4619      	mov	r1, r3
 8012610:	e786      	b.n	8012520 <__ieee754_pow+0xc0>
 8012612:	0fed      	lsrs	r5, r5, #31
 8012614:	1e6b      	subs	r3, r5, #1
 8012616:	930d      	str	r3, [sp, #52]	; 0x34
 8012618:	ea5b 0303 	orrs.w	r3, fp, r3
 801261c:	d102      	bne.n	8012624 <__ieee754_pow+0x1c4>
 801261e:	4632      	mov	r2, r6
 8012620:	463b      	mov	r3, r7
 8012622:	e7e8      	b.n	80125f6 <__ieee754_pow+0x196>
 8012624:	4b16      	ldr	r3, [pc, #88]	; (8012680 <__ieee754_pow+0x220>)
 8012626:	4598      	cmp	r8, r3
 8012628:	f340 80fe 	ble.w	8012828 <__ieee754_pow+0x3c8>
 801262c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8012630:	4598      	cmp	r8, r3
 8012632:	dd0a      	ble.n	801264a <__ieee754_pow+0x1ea>
 8012634:	4b0f      	ldr	r3, [pc, #60]	; (8012674 <__ieee754_pow+0x214>)
 8012636:	429c      	cmp	r4, r3
 8012638:	dc0d      	bgt.n	8012656 <__ieee754_pow+0x1f6>
 801263a:	f1b9 0f00 	cmp.w	r9, #0
 801263e:	f6bf af6d 	bge.w	801251c <__ieee754_pow+0xbc>
 8012642:	a307      	add	r3, pc, #28	; (adr r3, 8012660 <__ieee754_pow+0x200>)
 8012644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012648:	e79f      	b.n	801258a <__ieee754_pow+0x12a>
 801264a:	4b0e      	ldr	r3, [pc, #56]	; (8012684 <__ieee754_pow+0x224>)
 801264c:	429c      	cmp	r4, r3
 801264e:	ddf4      	ble.n	801263a <__ieee754_pow+0x1da>
 8012650:	4b09      	ldr	r3, [pc, #36]	; (8012678 <__ieee754_pow+0x218>)
 8012652:	429c      	cmp	r4, r3
 8012654:	dd18      	ble.n	8012688 <__ieee754_pow+0x228>
 8012656:	f1b9 0f00 	cmp.w	r9, #0
 801265a:	dcf2      	bgt.n	8012642 <__ieee754_pow+0x1e2>
 801265c:	e75e      	b.n	801251c <__ieee754_pow+0xbc>
 801265e:	bf00      	nop
 8012660:	8800759c 	.word	0x8800759c
 8012664:	7e37e43c 	.word	0x7e37e43c
 8012668:	7ff00000 	.word	0x7ff00000
 801266c:	08014809 	.word	0x08014809
 8012670:	433fffff 	.word	0x433fffff
 8012674:	3fefffff 	.word	0x3fefffff
 8012678:	3ff00000 	.word	0x3ff00000
 801267c:	3fe00000 	.word	0x3fe00000
 8012680:	41e00000 	.word	0x41e00000
 8012684:	3feffffe 	.word	0x3feffffe
 8012688:	2200      	movs	r2, #0
 801268a:	4b63      	ldr	r3, [pc, #396]	; (8012818 <__ieee754_pow+0x3b8>)
 801268c:	f7ed fe24 	bl	80002d8 <__aeabi_dsub>
 8012690:	a355      	add	r3, pc, #340	; (adr r3, 80127e8 <__ieee754_pow+0x388>)
 8012692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012696:	4604      	mov	r4, r0
 8012698:	460d      	mov	r5, r1
 801269a:	f7ed ffd5 	bl	8000648 <__aeabi_dmul>
 801269e:	a354      	add	r3, pc, #336	; (adr r3, 80127f0 <__ieee754_pow+0x390>)
 80126a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126a4:	4606      	mov	r6, r0
 80126a6:	460f      	mov	r7, r1
 80126a8:	4620      	mov	r0, r4
 80126aa:	4629      	mov	r1, r5
 80126ac:	f7ed ffcc 	bl	8000648 <__aeabi_dmul>
 80126b0:	2200      	movs	r2, #0
 80126b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80126b6:	4b59      	ldr	r3, [pc, #356]	; (801281c <__ieee754_pow+0x3bc>)
 80126b8:	4620      	mov	r0, r4
 80126ba:	4629      	mov	r1, r5
 80126bc:	f7ed ffc4 	bl	8000648 <__aeabi_dmul>
 80126c0:	4602      	mov	r2, r0
 80126c2:	460b      	mov	r3, r1
 80126c4:	a14c      	add	r1, pc, #304	; (adr r1, 80127f8 <__ieee754_pow+0x398>)
 80126c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80126ca:	f7ed fe05 	bl	80002d8 <__aeabi_dsub>
 80126ce:	4622      	mov	r2, r4
 80126d0:	462b      	mov	r3, r5
 80126d2:	f7ed ffb9 	bl	8000648 <__aeabi_dmul>
 80126d6:	4602      	mov	r2, r0
 80126d8:	460b      	mov	r3, r1
 80126da:	2000      	movs	r0, #0
 80126dc:	4950      	ldr	r1, [pc, #320]	; (8012820 <__ieee754_pow+0x3c0>)
 80126de:	f7ed fdfb 	bl	80002d8 <__aeabi_dsub>
 80126e2:	4622      	mov	r2, r4
 80126e4:	462b      	mov	r3, r5
 80126e6:	4680      	mov	r8, r0
 80126e8:	4689      	mov	r9, r1
 80126ea:	4620      	mov	r0, r4
 80126ec:	4629      	mov	r1, r5
 80126ee:	f7ed ffab 	bl	8000648 <__aeabi_dmul>
 80126f2:	4602      	mov	r2, r0
 80126f4:	460b      	mov	r3, r1
 80126f6:	4640      	mov	r0, r8
 80126f8:	4649      	mov	r1, r9
 80126fa:	f7ed ffa5 	bl	8000648 <__aeabi_dmul>
 80126fe:	a340      	add	r3, pc, #256	; (adr r3, 8012800 <__ieee754_pow+0x3a0>)
 8012700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012704:	f7ed ffa0 	bl	8000648 <__aeabi_dmul>
 8012708:	4602      	mov	r2, r0
 801270a:	460b      	mov	r3, r1
 801270c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012710:	f7ed fde2 	bl	80002d8 <__aeabi_dsub>
 8012714:	4602      	mov	r2, r0
 8012716:	460b      	mov	r3, r1
 8012718:	4604      	mov	r4, r0
 801271a:	460d      	mov	r5, r1
 801271c:	4630      	mov	r0, r6
 801271e:	4639      	mov	r1, r7
 8012720:	f7ed fddc 	bl	80002dc <__adddf3>
 8012724:	2000      	movs	r0, #0
 8012726:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801272a:	4632      	mov	r2, r6
 801272c:	463b      	mov	r3, r7
 801272e:	f7ed fdd3 	bl	80002d8 <__aeabi_dsub>
 8012732:	4602      	mov	r2, r0
 8012734:	460b      	mov	r3, r1
 8012736:	4620      	mov	r0, r4
 8012738:	4629      	mov	r1, r5
 801273a:	f7ed fdcd 	bl	80002d8 <__aeabi_dsub>
 801273e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012740:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8012744:	4313      	orrs	r3, r2
 8012746:	4606      	mov	r6, r0
 8012748:	460f      	mov	r7, r1
 801274a:	f040 81eb 	bne.w	8012b24 <__ieee754_pow+0x6c4>
 801274e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8012808 <__ieee754_pow+0x3a8>
 8012752:	e9dd 4500 	ldrd	r4, r5, [sp]
 8012756:	2400      	movs	r4, #0
 8012758:	4622      	mov	r2, r4
 801275a:	462b      	mov	r3, r5
 801275c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012760:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012764:	f7ed fdb8 	bl	80002d8 <__aeabi_dsub>
 8012768:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801276c:	f7ed ff6c 	bl	8000648 <__aeabi_dmul>
 8012770:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012774:	4680      	mov	r8, r0
 8012776:	4689      	mov	r9, r1
 8012778:	4630      	mov	r0, r6
 801277a:	4639      	mov	r1, r7
 801277c:	f7ed ff64 	bl	8000648 <__aeabi_dmul>
 8012780:	4602      	mov	r2, r0
 8012782:	460b      	mov	r3, r1
 8012784:	4640      	mov	r0, r8
 8012786:	4649      	mov	r1, r9
 8012788:	f7ed fda8 	bl	80002dc <__adddf3>
 801278c:	4622      	mov	r2, r4
 801278e:	462b      	mov	r3, r5
 8012790:	4680      	mov	r8, r0
 8012792:	4689      	mov	r9, r1
 8012794:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012798:	f7ed ff56 	bl	8000648 <__aeabi_dmul>
 801279c:	460b      	mov	r3, r1
 801279e:	4604      	mov	r4, r0
 80127a0:	460d      	mov	r5, r1
 80127a2:	4602      	mov	r2, r0
 80127a4:	4649      	mov	r1, r9
 80127a6:	4640      	mov	r0, r8
 80127a8:	e9cd 4500 	strd	r4, r5, [sp]
 80127ac:	f7ed fd96 	bl	80002dc <__adddf3>
 80127b0:	4b1c      	ldr	r3, [pc, #112]	; (8012824 <__ieee754_pow+0x3c4>)
 80127b2:	4299      	cmp	r1, r3
 80127b4:	4606      	mov	r6, r0
 80127b6:	460f      	mov	r7, r1
 80127b8:	468b      	mov	fp, r1
 80127ba:	f340 82f7 	ble.w	8012dac <__ieee754_pow+0x94c>
 80127be:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80127c2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80127c6:	4303      	orrs	r3, r0
 80127c8:	f000 81ea 	beq.w	8012ba0 <__ieee754_pow+0x740>
 80127cc:	a310      	add	r3, pc, #64	; (adr r3, 8012810 <__ieee754_pow+0x3b0>)
 80127ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80127d6:	f7ed ff37 	bl	8000648 <__aeabi_dmul>
 80127da:	a30d      	add	r3, pc, #52	; (adr r3, 8012810 <__ieee754_pow+0x3b0>)
 80127dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127e0:	e6d5      	b.n	801258e <__ieee754_pow+0x12e>
 80127e2:	bf00      	nop
 80127e4:	f3af 8000 	nop.w
 80127e8:	60000000 	.word	0x60000000
 80127ec:	3ff71547 	.word	0x3ff71547
 80127f0:	f85ddf44 	.word	0xf85ddf44
 80127f4:	3e54ae0b 	.word	0x3e54ae0b
 80127f8:	55555555 	.word	0x55555555
 80127fc:	3fd55555 	.word	0x3fd55555
 8012800:	652b82fe 	.word	0x652b82fe
 8012804:	3ff71547 	.word	0x3ff71547
 8012808:	00000000 	.word	0x00000000
 801280c:	bff00000 	.word	0xbff00000
 8012810:	8800759c 	.word	0x8800759c
 8012814:	7e37e43c 	.word	0x7e37e43c
 8012818:	3ff00000 	.word	0x3ff00000
 801281c:	3fd00000 	.word	0x3fd00000
 8012820:	3fe00000 	.word	0x3fe00000
 8012824:	408fffff 	.word	0x408fffff
 8012828:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801282c:	f04f 0200 	mov.w	r2, #0
 8012830:	da05      	bge.n	801283e <__ieee754_pow+0x3de>
 8012832:	4bd3      	ldr	r3, [pc, #844]	; (8012b80 <__ieee754_pow+0x720>)
 8012834:	f7ed ff08 	bl	8000648 <__aeabi_dmul>
 8012838:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801283c:	460c      	mov	r4, r1
 801283e:	1523      	asrs	r3, r4, #20
 8012840:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012844:	4413      	add	r3, r2
 8012846:	9309      	str	r3, [sp, #36]	; 0x24
 8012848:	4bce      	ldr	r3, [pc, #824]	; (8012b84 <__ieee754_pow+0x724>)
 801284a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801284e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8012852:	429c      	cmp	r4, r3
 8012854:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8012858:	dd08      	ble.n	801286c <__ieee754_pow+0x40c>
 801285a:	4bcb      	ldr	r3, [pc, #812]	; (8012b88 <__ieee754_pow+0x728>)
 801285c:	429c      	cmp	r4, r3
 801285e:	f340 815e 	ble.w	8012b1e <__ieee754_pow+0x6be>
 8012862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012864:	3301      	adds	r3, #1
 8012866:	9309      	str	r3, [sp, #36]	; 0x24
 8012868:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801286c:	f04f 0a00 	mov.w	sl, #0
 8012870:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8012874:	930c      	str	r3, [sp, #48]	; 0x30
 8012876:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012878:	4bc4      	ldr	r3, [pc, #784]	; (8012b8c <__ieee754_pow+0x72c>)
 801287a:	4413      	add	r3, r2
 801287c:	ed93 7b00 	vldr	d7, [r3]
 8012880:	4629      	mov	r1, r5
 8012882:	ec53 2b17 	vmov	r2, r3, d7
 8012886:	ed8d 7b06 	vstr	d7, [sp, #24]
 801288a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801288e:	f7ed fd23 	bl	80002d8 <__aeabi_dsub>
 8012892:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012896:	4606      	mov	r6, r0
 8012898:	460f      	mov	r7, r1
 801289a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801289e:	f7ed fd1d 	bl	80002dc <__adddf3>
 80128a2:	4602      	mov	r2, r0
 80128a4:	460b      	mov	r3, r1
 80128a6:	2000      	movs	r0, #0
 80128a8:	49b9      	ldr	r1, [pc, #740]	; (8012b90 <__ieee754_pow+0x730>)
 80128aa:	f7ed fff7 	bl	800089c <__aeabi_ddiv>
 80128ae:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80128b2:	4602      	mov	r2, r0
 80128b4:	460b      	mov	r3, r1
 80128b6:	4630      	mov	r0, r6
 80128b8:	4639      	mov	r1, r7
 80128ba:	f7ed fec5 	bl	8000648 <__aeabi_dmul>
 80128be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80128c2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80128c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80128ca:	2300      	movs	r3, #0
 80128cc:	9302      	str	r3, [sp, #8]
 80128ce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80128d2:	106d      	asrs	r5, r5, #1
 80128d4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80128d8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80128dc:	2200      	movs	r2, #0
 80128de:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80128e2:	4640      	mov	r0, r8
 80128e4:	4649      	mov	r1, r9
 80128e6:	4614      	mov	r4, r2
 80128e8:	461d      	mov	r5, r3
 80128ea:	f7ed fead 	bl	8000648 <__aeabi_dmul>
 80128ee:	4602      	mov	r2, r0
 80128f0:	460b      	mov	r3, r1
 80128f2:	4630      	mov	r0, r6
 80128f4:	4639      	mov	r1, r7
 80128f6:	f7ed fcef 	bl	80002d8 <__aeabi_dsub>
 80128fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80128fe:	4606      	mov	r6, r0
 8012900:	460f      	mov	r7, r1
 8012902:	4620      	mov	r0, r4
 8012904:	4629      	mov	r1, r5
 8012906:	f7ed fce7 	bl	80002d8 <__aeabi_dsub>
 801290a:	4602      	mov	r2, r0
 801290c:	460b      	mov	r3, r1
 801290e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012912:	f7ed fce1 	bl	80002d8 <__aeabi_dsub>
 8012916:	4642      	mov	r2, r8
 8012918:	464b      	mov	r3, r9
 801291a:	f7ed fe95 	bl	8000648 <__aeabi_dmul>
 801291e:	4602      	mov	r2, r0
 8012920:	460b      	mov	r3, r1
 8012922:	4630      	mov	r0, r6
 8012924:	4639      	mov	r1, r7
 8012926:	f7ed fcd7 	bl	80002d8 <__aeabi_dsub>
 801292a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801292e:	f7ed fe8b 	bl	8000648 <__aeabi_dmul>
 8012932:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012936:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801293a:	4610      	mov	r0, r2
 801293c:	4619      	mov	r1, r3
 801293e:	f7ed fe83 	bl	8000648 <__aeabi_dmul>
 8012942:	a37b      	add	r3, pc, #492	; (adr r3, 8012b30 <__ieee754_pow+0x6d0>)
 8012944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012948:	4604      	mov	r4, r0
 801294a:	460d      	mov	r5, r1
 801294c:	f7ed fe7c 	bl	8000648 <__aeabi_dmul>
 8012950:	a379      	add	r3, pc, #484	; (adr r3, 8012b38 <__ieee754_pow+0x6d8>)
 8012952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012956:	f7ed fcc1 	bl	80002dc <__adddf3>
 801295a:	4622      	mov	r2, r4
 801295c:	462b      	mov	r3, r5
 801295e:	f7ed fe73 	bl	8000648 <__aeabi_dmul>
 8012962:	a377      	add	r3, pc, #476	; (adr r3, 8012b40 <__ieee754_pow+0x6e0>)
 8012964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012968:	f7ed fcb8 	bl	80002dc <__adddf3>
 801296c:	4622      	mov	r2, r4
 801296e:	462b      	mov	r3, r5
 8012970:	f7ed fe6a 	bl	8000648 <__aeabi_dmul>
 8012974:	a374      	add	r3, pc, #464	; (adr r3, 8012b48 <__ieee754_pow+0x6e8>)
 8012976:	e9d3 2300 	ldrd	r2, r3, [r3]
 801297a:	f7ed fcaf 	bl	80002dc <__adddf3>
 801297e:	4622      	mov	r2, r4
 8012980:	462b      	mov	r3, r5
 8012982:	f7ed fe61 	bl	8000648 <__aeabi_dmul>
 8012986:	a372      	add	r3, pc, #456	; (adr r3, 8012b50 <__ieee754_pow+0x6f0>)
 8012988:	e9d3 2300 	ldrd	r2, r3, [r3]
 801298c:	f7ed fca6 	bl	80002dc <__adddf3>
 8012990:	4622      	mov	r2, r4
 8012992:	462b      	mov	r3, r5
 8012994:	f7ed fe58 	bl	8000648 <__aeabi_dmul>
 8012998:	a36f      	add	r3, pc, #444	; (adr r3, 8012b58 <__ieee754_pow+0x6f8>)
 801299a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801299e:	f7ed fc9d 	bl	80002dc <__adddf3>
 80129a2:	4622      	mov	r2, r4
 80129a4:	4606      	mov	r6, r0
 80129a6:	460f      	mov	r7, r1
 80129a8:	462b      	mov	r3, r5
 80129aa:	4620      	mov	r0, r4
 80129ac:	4629      	mov	r1, r5
 80129ae:	f7ed fe4b 	bl	8000648 <__aeabi_dmul>
 80129b2:	4602      	mov	r2, r0
 80129b4:	460b      	mov	r3, r1
 80129b6:	4630      	mov	r0, r6
 80129b8:	4639      	mov	r1, r7
 80129ba:	f7ed fe45 	bl	8000648 <__aeabi_dmul>
 80129be:	4642      	mov	r2, r8
 80129c0:	4604      	mov	r4, r0
 80129c2:	460d      	mov	r5, r1
 80129c4:	464b      	mov	r3, r9
 80129c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80129ca:	f7ed fc87 	bl	80002dc <__adddf3>
 80129ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80129d2:	f7ed fe39 	bl	8000648 <__aeabi_dmul>
 80129d6:	4622      	mov	r2, r4
 80129d8:	462b      	mov	r3, r5
 80129da:	f7ed fc7f 	bl	80002dc <__adddf3>
 80129de:	4642      	mov	r2, r8
 80129e0:	4606      	mov	r6, r0
 80129e2:	460f      	mov	r7, r1
 80129e4:	464b      	mov	r3, r9
 80129e6:	4640      	mov	r0, r8
 80129e8:	4649      	mov	r1, r9
 80129ea:	f7ed fe2d 	bl	8000648 <__aeabi_dmul>
 80129ee:	2200      	movs	r2, #0
 80129f0:	4b68      	ldr	r3, [pc, #416]	; (8012b94 <__ieee754_pow+0x734>)
 80129f2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80129f6:	f7ed fc71 	bl	80002dc <__adddf3>
 80129fa:	4632      	mov	r2, r6
 80129fc:	463b      	mov	r3, r7
 80129fe:	f7ed fc6d 	bl	80002dc <__adddf3>
 8012a02:	9802      	ldr	r0, [sp, #8]
 8012a04:	460d      	mov	r5, r1
 8012a06:	4604      	mov	r4, r0
 8012a08:	4602      	mov	r2, r0
 8012a0a:	460b      	mov	r3, r1
 8012a0c:	4640      	mov	r0, r8
 8012a0e:	4649      	mov	r1, r9
 8012a10:	f7ed fe1a 	bl	8000648 <__aeabi_dmul>
 8012a14:	2200      	movs	r2, #0
 8012a16:	4680      	mov	r8, r0
 8012a18:	4689      	mov	r9, r1
 8012a1a:	4b5e      	ldr	r3, [pc, #376]	; (8012b94 <__ieee754_pow+0x734>)
 8012a1c:	4620      	mov	r0, r4
 8012a1e:	4629      	mov	r1, r5
 8012a20:	f7ed fc5a 	bl	80002d8 <__aeabi_dsub>
 8012a24:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012a28:	f7ed fc56 	bl	80002d8 <__aeabi_dsub>
 8012a2c:	4602      	mov	r2, r0
 8012a2e:	460b      	mov	r3, r1
 8012a30:	4630      	mov	r0, r6
 8012a32:	4639      	mov	r1, r7
 8012a34:	f7ed fc50 	bl	80002d8 <__aeabi_dsub>
 8012a38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012a3c:	f7ed fe04 	bl	8000648 <__aeabi_dmul>
 8012a40:	4622      	mov	r2, r4
 8012a42:	4606      	mov	r6, r0
 8012a44:	460f      	mov	r7, r1
 8012a46:	462b      	mov	r3, r5
 8012a48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012a4c:	f7ed fdfc 	bl	8000648 <__aeabi_dmul>
 8012a50:	4602      	mov	r2, r0
 8012a52:	460b      	mov	r3, r1
 8012a54:	4630      	mov	r0, r6
 8012a56:	4639      	mov	r1, r7
 8012a58:	f7ed fc40 	bl	80002dc <__adddf3>
 8012a5c:	4606      	mov	r6, r0
 8012a5e:	460f      	mov	r7, r1
 8012a60:	4602      	mov	r2, r0
 8012a62:	460b      	mov	r3, r1
 8012a64:	4640      	mov	r0, r8
 8012a66:	4649      	mov	r1, r9
 8012a68:	f7ed fc38 	bl	80002dc <__adddf3>
 8012a6c:	9802      	ldr	r0, [sp, #8]
 8012a6e:	a33c      	add	r3, pc, #240	; (adr r3, 8012b60 <__ieee754_pow+0x700>)
 8012a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a74:	4604      	mov	r4, r0
 8012a76:	460d      	mov	r5, r1
 8012a78:	f7ed fde6 	bl	8000648 <__aeabi_dmul>
 8012a7c:	4642      	mov	r2, r8
 8012a7e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012a82:	464b      	mov	r3, r9
 8012a84:	4620      	mov	r0, r4
 8012a86:	4629      	mov	r1, r5
 8012a88:	f7ed fc26 	bl	80002d8 <__aeabi_dsub>
 8012a8c:	4602      	mov	r2, r0
 8012a8e:	460b      	mov	r3, r1
 8012a90:	4630      	mov	r0, r6
 8012a92:	4639      	mov	r1, r7
 8012a94:	f7ed fc20 	bl	80002d8 <__aeabi_dsub>
 8012a98:	a333      	add	r3, pc, #204	; (adr r3, 8012b68 <__ieee754_pow+0x708>)
 8012a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a9e:	f7ed fdd3 	bl	8000648 <__aeabi_dmul>
 8012aa2:	a333      	add	r3, pc, #204	; (adr r3, 8012b70 <__ieee754_pow+0x710>)
 8012aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aa8:	4606      	mov	r6, r0
 8012aaa:	460f      	mov	r7, r1
 8012aac:	4620      	mov	r0, r4
 8012aae:	4629      	mov	r1, r5
 8012ab0:	f7ed fdca 	bl	8000648 <__aeabi_dmul>
 8012ab4:	4602      	mov	r2, r0
 8012ab6:	460b      	mov	r3, r1
 8012ab8:	4630      	mov	r0, r6
 8012aba:	4639      	mov	r1, r7
 8012abc:	f7ed fc0e 	bl	80002dc <__adddf3>
 8012ac0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012ac2:	4b35      	ldr	r3, [pc, #212]	; (8012b98 <__ieee754_pow+0x738>)
 8012ac4:	4413      	add	r3, r2
 8012ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aca:	f7ed fc07 	bl	80002dc <__adddf3>
 8012ace:	4604      	mov	r4, r0
 8012ad0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012ad2:	460d      	mov	r5, r1
 8012ad4:	f7ed fd4e 	bl	8000574 <__aeabi_i2d>
 8012ad8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012ada:	4b30      	ldr	r3, [pc, #192]	; (8012b9c <__ieee754_pow+0x73c>)
 8012adc:	4413      	add	r3, r2
 8012ade:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012ae2:	4606      	mov	r6, r0
 8012ae4:	460f      	mov	r7, r1
 8012ae6:	4622      	mov	r2, r4
 8012ae8:	462b      	mov	r3, r5
 8012aea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012aee:	f7ed fbf5 	bl	80002dc <__adddf3>
 8012af2:	4642      	mov	r2, r8
 8012af4:	464b      	mov	r3, r9
 8012af6:	f7ed fbf1 	bl	80002dc <__adddf3>
 8012afa:	4632      	mov	r2, r6
 8012afc:	463b      	mov	r3, r7
 8012afe:	f7ed fbed 	bl	80002dc <__adddf3>
 8012b02:	9802      	ldr	r0, [sp, #8]
 8012b04:	4632      	mov	r2, r6
 8012b06:	463b      	mov	r3, r7
 8012b08:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012b0c:	f7ed fbe4 	bl	80002d8 <__aeabi_dsub>
 8012b10:	4642      	mov	r2, r8
 8012b12:	464b      	mov	r3, r9
 8012b14:	f7ed fbe0 	bl	80002d8 <__aeabi_dsub>
 8012b18:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012b1c:	e607      	b.n	801272e <__ieee754_pow+0x2ce>
 8012b1e:	f04f 0a01 	mov.w	sl, #1
 8012b22:	e6a5      	b.n	8012870 <__ieee754_pow+0x410>
 8012b24:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8012b78 <__ieee754_pow+0x718>
 8012b28:	e613      	b.n	8012752 <__ieee754_pow+0x2f2>
 8012b2a:	bf00      	nop
 8012b2c:	f3af 8000 	nop.w
 8012b30:	4a454eef 	.word	0x4a454eef
 8012b34:	3fca7e28 	.word	0x3fca7e28
 8012b38:	93c9db65 	.word	0x93c9db65
 8012b3c:	3fcd864a 	.word	0x3fcd864a
 8012b40:	a91d4101 	.word	0xa91d4101
 8012b44:	3fd17460 	.word	0x3fd17460
 8012b48:	518f264d 	.word	0x518f264d
 8012b4c:	3fd55555 	.word	0x3fd55555
 8012b50:	db6fabff 	.word	0xdb6fabff
 8012b54:	3fdb6db6 	.word	0x3fdb6db6
 8012b58:	33333303 	.word	0x33333303
 8012b5c:	3fe33333 	.word	0x3fe33333
 8012b60:	e0000000 	.word	0xe0000000
 8012b64:	3feec709 	.word	0x3feec709
 8012b68:	dc3a03fd 	.word	0xdc3a03fd
 8012b6c:	3feec709 	.word	0x3feec709
 8012b70:	145b01f5 	.word	0x145b01f5
 8012b74:	be3e2fe0 	.word	0xbe3e2fe0
 8012b78:	00000000 	.word	0x00000000
 8012b7c:	3ff00000 	.word	0x3ff00000
 8012b80:	43400000 	.word	0x43400000
 8012b84:	0003988e 	.word	0x0003988e
 8012b88:	000bb679 	.word	0x000bb679
 8012b8c:	08014930 	.word	0x08014930
 8012b90:	3ff00000 	.word	0x3ff00000
 8012b94:	40080000 	.word	0x40080000
 8012b98:	08014950 	.word	0x08014950
 8012b9c:	08014940 	.word	0x08014940
 8012ba0:	a3b4      	add	r3, pc, #720	; (adr r3, 8012e74 <__ieee754_pow+0xa14>)
 8012ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ba6:	4640      	mov	r0, r8
 8012ba8:	4649      	mov	r1, r9
 8012baa:	f7ed fb97 	bl	80002dc <__adddf3>
 8012bae:	4622      	mov	r2, r4
 8012bb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012bb4:	462b      	mov	r3, r5
 8012bb6:	4630      	mov	r0, r6
 8012bb8:	4639      	mov	r1, r7
 8012bba:	f7ed fb8d 	bl	80002d8 <__aeabi_dsub>
 8012bbe:	4602      	mov	r2, r0
 8012bc0:	460b      	mov	r3, r1
 8012bc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012bc6:	f7ed ffcf 	bl	8000b68 <__aeabi_dcmpgt>
 8012bca:	2800      	cmp	r0, #0
 8012bcc:	f47f adfe 	bne.w	80127cc <__ieee754_pow+0x36c>
 8012bd0:	4aa3      	ldr	r2, [pc, #652]	; (8012e60 <__ieee754_pow+0xa00>)
 8012bd2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012bd6:	4293      	cmp	r3, r2
 8012bd8:	f340 810a 	ble.w	8012df0 <__ieee754_pow+0x990>
 8012bdc:	151b      	asrs	r3, r3, #20
 8012bde:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8012be2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8012be6:	fa4a f303 	asr.w	r3, sl, r3
 8012bea:	445b      	add	r3, fp
 8012bec:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8012bf0:	4e9c      	ldr	r6, [pc, #624]	; (8012e64 <__ieee754_pow+0xa04>)
 8012bf2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8012bf6:	4116      	asrs	r6, r2
 8012bf8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8012bfc:	2000      	movs	r0, #0
 8012bfe:	ea23 0106 	bic.w	r1, r3, r6
 8012c02:	f1c2 0214 	rsb	r2, r2, #20
 8012c06:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8012c0a:	fa4a fa02 	asr.w	sl, sl, r2
 8012c0e:	f1bb 0f00 	cmp.w	fp, #0
 8012c12:	4602      	mov	r2, r0
 8012c14:	460b      	mov	r3, r1
 8012c16:	4620      	mov	r0, r4
 8012c18:	4629      	mov	r1, r5
 8012c1a:	bfb8      	it	lt
 8012c1c:	f1ca 0a00 	rsblt	sl, sl, #0
 8012c20:	f7ed fb5a 	bl	80002d8 <__aeabi_dsub>
 8012c24:	e9cd 0100 	strd	r0, r1, [sp]
 8012c28:	4642      	mov	r2, r8
 8012c2a:	464b      	mov	r3, r9
 8012c2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012c30:	f7ed fb54 	bl	80002dc <__adddf3>
 8012c34:	2000      	movs	r0, #0
 8012c36:	a378      	add	r3, pc, #480	; (adr r3, 8012e18 <__ieee754_pow+0x9b8>)
 8012c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c3c:	4604      	mov	r4, r0
 8012c3e:	460d      	mov	r5, r1
 8012c40:	f7ed fd02 	bl	8000648 <__aeabi_dmul>
 8012c44:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012c48:	4606      	mov	r6, r0
 8012c4a:	460f      	mov	r7, r1
 8012c4c:	4620      	mov	r0, r4
 8012c4e:	4629      	mov	r1, r5
 8012c50:	f7ed fb42 	bl	80002d8 <__aeabi_dsub>
 8012c54:	4602      	mov	r2, r0
 8012c56:	460b      	mov	r3, r1
 8012c58:	4640      	mov	r0, r8
 8012c5a:	4649      	mov	r1, r9
 8012c5c:	f7ed fb3c 	bl	80002d8 <__aeabi_dsub>
 8012c60:	a36f      	add	r3, pc, #444	; (adr r3, 8012e20 <__ieee754_pow+0x9c0>)
 8012c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c66:	f7ed fcef 	bl	8000648 <__aeabi_dmul>
 8012c6a:	a36f      	add	r3, pc, #444	; (adr r3, 8012e28 <__ieee754_pow+0x9c8>)
 8012c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c70:	4680      	mov	r8, r0
 8012c72:	4689      	mov	r9, r1
 8012c74:	4620      	mov	r0, r4
 8012c76:	4629      	mov	r1, r5
 8012c78:	f7ed fce6 	bl	8000648 <__aeabi_dmul>
 8012c7c:	4602      	mov	r2, r0
 8012c7e:	460b      	mov	r3, r1
 8012c80:	4640      	mov	r0, r8
 8012c82:	4649      	mov	r1, r9
 8012c84:	f7ed fb2a 	bl	80002dc <__adddf3>
 8012c88:	4604      	mov	r4, r0
 8012c8a:	460d      	mov	r5, r1
 8012c8c:	4602      	mov	r2, r0
 8012c8e:	460b      	mov	r3, r1
 8012c90:	4630      	mov	r0, r6
 8012c92:	4639      	mov	r1, r7
 8012c94:	f7ed fb22 	bl	80002dc <__adddf3>
 8012c98:	4632      	mov	r2, r6
 8012c9a:	463b      	mov	r3, r7
 8012c9c:	4680      	mov	r8, r0
 8012c9e:	4689      	mov	r9, r1
 8012ca0:	f7ed fb1a 	bl	80002d8 <__aeabi_dsub>
 8012ca4:	4602      	mov	r2, r0
 8012ca6:	460b      	mov	r3, r1
 8012ca8:	4620      	mov	r0, r4
 8012caa:	4629      	mov	r1, r5
 8012cac:	f7ed fb14 	bl	80002d8 <__aeabi_dsub>
 8012cb0:	4642      	mov	r2, r8
 8012cb2:	4606      	mov	r6, r0
 8012cb4:	460f      	mov	r7, r1
 8012cb6:	464b      	mov	r3, r9
 8012cb8:	4640      	mov	r0, r8
 8012cba:	4649      	mov	r1, r9
 8012cbc:	f7ed fcc4 	bl	8000648 <__aeabi_dmul>
 8012cc0:	a35b      	add	r3, pc, #364	; (adr r3, 8012e30 <__ieee754_pow+0x9d0>)
 8012cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cc6:	4604      	mov	r4, r0
 8012cc8:	460d      	mov	r5, r1
 8012cca:	f7ed fcbd 	bl	8000648 <__aeabi_dmul>
 8012cce:	a35a      	add	r3, pc, #360	; (adr r3, 8012e38 <__ieee754_pow+0x9d8>)
 8012cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cd4:	f7ed fb00 	bl	80002d8 <__aeabi_dsub>
 8012cd8:	4622      	mov	r2, r4
 8012cda:	462b      	mov	r3, r5
 8012cdc:	f7ed fcb4 	bl	8000648 <__aeabi_dmul>
 8012ce0:	a357      	add	r3, pc, #348	; (adr r3, 8012e40 <__ieee754_pow+0x9e0>)
 8012ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ce6:	f7ed faf9 	bl	80002dc <__adddf3>
 8012cea:	4622      	mov	r2, r4
 8012cec:	462b      	mov	r3, r5
 8012cee:	f7ed fcab 	bl	8000648 <__aeabi_dmul>
 8012cf2:	a355      	add	r3, pc, #340	; (adr r3, 8012e48 <__ieee754_pow+0x9e8>)
 8012cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cf8:	f7ed faee 	bl	80002d8 <__aeabi_dsub>
 8012cfc:	4622      	mov	r2, r4
 8012cfe:	462b      	mov	r3, r5
 8012d00:	f7ed fca2 	bl	8000648 <__aeabi_dmul>
 8012d04:	a352      	add	r3, pc, #328	; (adr r3, 8012e50 <__ieee754_pow+0x9f0>)
 8012d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d0a:	f7ed fae7 	bl	80002dc <__adddf3>
 8012d0e:	4622      	mov	r2, r4
 8012d10:	462b      	mov	r3, r5
 8012d12:	f7ed fc99 	bl	8000648 <__aeabi_dmul>
 8012d16:	4602      	mov	r2, r0
 8012d18:	460b      	mov	r3, r1
 8012d1a:	4640      	mov	r0, r8
 8012d1c:	4649      	mov	r1, r9
 8012d1e:	f7ed fadb 	bl	80002d8 <__aeabi_dsub>
 8012d22:	4604      	mov	r4, r0
 8012d24:	460d      	mov	r5, r1
 8012d26:	4602      	mov	r2, r0
 8012d28:	460b      	mov	r3, r1
 8012d2a:	4640      	mov	r0, r8
 8012d2c:	4649      	mov	r1, r9
 8012d2e:	f7ed fc8b 	bl	8000648 <__aeabi_dmul>
 8012d32:	2200      	movs	r2, #0
 8012d34:	e9cd 0100 	strd	r0, r1, [sp]
 8012d38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012d3c:	4620      	mov	r0, r4
 8012d3e:	4629      	mov	r1, r5
 8012d40:	f7ed faca 	bl	80002d8 <__aeabi_dsub>
 8012d44:	4602      	mov	r2, r0
 8012d46:	460b      	mov	r3, r1
 8012d48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012d4c:	f7ed fda6 	bl	800089c <__aeabi_ddiv>
 8012d50:	4632      	mov	r2, r6
 8012d52:	4604      	mov	r4, r0
 8012d54:	460d      	mov	r5, r1
 8012d56:	463b      	mov	r3, r7
 8012d58:	4640      	mov	r0, r8
 8012d5a:	4649      	mov	r1, r9
 8012d5c:	f7ed fc74 	bl	8000648 <__aeabi_dmul>
 8012d60:	4632      	mov	r2, r6
 8012d62:	463b      	mov	r3, r7
 8012d64:	f7ed faba 	bl	80002dc <__adddf3>
 8012d68:	4602      	mov	r2, r0
 8012d6a:	460b      	mov	r3, r1
 8012d6c:	4620      	mov	r0, r4
 8012d6e:	4629      	mov	r1, r5
 8012d70:	f7ed fab2 	bl	80002d8 <__aeabi_dsub>
 8012d74:	4642      	mov	r2, r8
 8012d76:	464b      	mov	r3, r9
 8012d78:	f7ed faae 	bl	80002d8 <__aeabi_dsub>
 8012d7c:	4602      	mov	r2, r0
 8012d7e:	460b      	mov	r3, r1
 8012d80:	2000      	movs	r0, #0
 8012d82:	4939      	ldr	r1, [pc, #228]	; (8012e68 <__ieee754_pow+0xa08>)
 8012d84:	f7ed faa8 	bl	80002d8 <__aeabi_dsub>
 8012d88:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8012d8c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8012d90:	4602      	mov	r2, r0
 8012d92:	460b      	mov	r3, r1
 8012d94:	da2f      	bge.n	8012df6 <__ieee754_pow+0x996>
 8012d96:	4650      	mov	r0, sl
 8012d98:	ec43 2b10 	vmov	d0, r2, r3
 8012d9c:	f000 f9c0 	bl	8013120 <scalbn>
 8012da0:	ec51 0b10 	vmov	r0, r1, d0
 8012da4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012da8:	f7ff bbf1 	b.w	801258e <__ieee754_pow+0x12e>
 8012dac:	4b2f      	ldr	r3, [pc, #188]	; (8012e6c <__ieee754_pow+0xa0c>)
 8012dae:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8012db2:	429e      	cmp	r6, r3
 8012db4:	f77f af0c 	ble.w	8012bd0 <__ieee754_pow+0x770>
 8012db8:	4b2d      	ldr	r3, [pc, #180]	; (8012e70 <__ieee754_pow+0xa10>)
 8012dba:	440b      	add	r3, r1
 8012dbc:	4303      	orrs	r3, r0
 8012dbe:	d00b      	beq.n	8012dd8 <__ieee754_pow+0x978>
 8012dc0:	a325      	add	r3, pc, #148	; (adr r3, 8012e58 <__ieee754_pow+0x9f8>)
 8012dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012dca:	f7ed fc3d 	bl	8000648 <__aeabi_dmul>
 8012dce:	a322      	add	r3, pc, #136	; (adr r3, 8012e58 <__ieee754_pow+0x9f8>)
 8012dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dd4:	f7ff bbdb 	b.w	801258e <__ieee754_pow+0x12e>
 8012dd8:	4622      	mov	r2, r4
 8012dda:	462b      	mov	r3, r5
 8012ddc:	f7ed fa7c 	bl	80002d8 <__aeabi_dsub>
 8012de0:	4642      	mov	r2, r8
 8012de2:	464b      	mov	r3, r9
 8012de4:	f7ed feb6 	bl	8000b54 <__aeabi_dcmpge>
 8012de8:	2800      	cmp	r0, #0
 8012dea:	f43f aef1 	beq.w	8012bd0 <__ieee754_pow+0x770>
 8012dee:	e7e7      	b.n	8012dc0 <__ieee754_pow+0x960>
 8012df0:	f04f 0a00 	mov.w	sl, #0
 8012df4:	e718      	b.n	8012c28 <__ieee754_pow+0x7c8>
 8012df6:	4621      	mov	r1, r4
 8012df8:	e7d4      	b.n	8012da4 <__ieee754_pow+0x944>
 8012dfa:	2000      	movs	r0, #0
 8012dfc:	491a      	ldr	r1, [pc, #104]	; (8012e68 <__ieee754_pow+0xa08>)
 8012dfe:	f7ff bb8f 	b.w	8012520 <__ieee754_pow+0xc0>
 8012e02:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012e06:	f7ff bb8b 	b.w	8012520 <__ieee754_pow+0xc0>
 8012e0a:	4630      	mov	r0, r6
 8012e0c:	4639      	mov	r1, r7
 8012e0e:	f7ff bb87 	b.w	8012520 <__ieee754_pow+0xc0>
 8012e12:	4693      	mov	fp, r2
 8012e14:	f7ff bb98 	b.w	8012548 <__ieee754_pow+0xe8>
 8012e18:	00000000 	.word	0x00000000
 8012e1c:	3fe62e43 	.word	0x3fe62e43
 8012e20:	fefa39ef 	.word	0xfefa39ef
 8012e24:	3fe62e42 	.word	0x3fe62e42
 8012e28:	0ca86c39 	.word	0x0ca86c39
 8012e2c:	be205c61 	.word	0xbe205c61
 8012e30:	72bea4d0 	.word	0x72bea4d0
 8012e34:	3e663769 	.word	0x3e663769
 8012e38:	c5d26bf1 	.word	0xc5d26bf1
 8012e3c:	3ebbbd41 	.word	0x3ebbbd41
 8012e40:	af25de2c 	.word	0xaf25de2c
 8012e44:	3f11566a 	.word	0x3f11566a
 8012e48:	16bebd93 	.word	0x16bebd93
 8012e4c:	3f66c16c 	.word	0x3f66c16c
 8012e50:	5555553e 	.word	0x5555553e
 8012e54:	3fc55555 	.word	0x3fc55555
 8012e58:	c2f8f359 	.word	0xc2f8f359
 8012e5c:	01a56e1f 	.word	0x01a56e1f
 8012e60:	3fe00000 	.word	0x3fe00000
 8012e64:	000fffff 	.word	0x000fffff
 8012e68:	3ff00000 	.word	0x3ff00000
 8012e6c:	4090cbff 	.word	0x4090cbff
 8012e70:	3f6f3400 	.word	0x3f6f3400
 8012e74:	652b82fe 	.word	0x652b82fe
 8012e78:	3c971547 	.word	0x3c971547

08012e7c <__ieee754_sqrt>:
 8012e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e80:	4955      	ldr	r1, [pc, #340]	; (8012fd8 <__ieee754_sqrt+0x15c>)
 8012e82:	ec55 4b10 	vmov	r4, r5, d0
 8012e86:	43a9      	bics	r1, r5
 8012e88:	462b      	mov	r3, r5
 8012e8a:	462a      	mov	r2, r5
 8012e8c:	d112      	bne.n	8012eb4 <__ieee754_sqrt+0x38>
 8012e8e:	ee10 2a10 	vmov	r2, s0
 8012e92:	ee10 0a10 	vmov	r0, s0
 8012e96:	4629      	mov	r1, r5
 8012e98:	f7ed fbd6 	bl	8000648 <__aeabi_dmul>
 8012e9c:	4602      	mov	r2, r0
 8012e9e:	460b      	mov	r3, r1
 8012ea0:	4620      	mov	r0, r4
 8012ea2:	4629      	mov	r1, r5
 8012ea4:	f7ed fa1a 	bl	80002dc <__adddf3>
 8012ea8:	4604      	mov	r4, r0
 8012eaa:	460d      	mov	r5, r1
 8012eac:	ec45 4b10 	vmov	d0, r4, r5
 8012eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012eb4:	2d00      	cmp	r5, #0
 8012eb6:	ee10 0a10 	vmov	r0, s0
 8012eba:	4621      	mov	r1, r4
 8012ebc:	dc0f      	bgt.n	8012ede <__ieee754_sqrt+0x62>
 8012ebe:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012ec2:	4330      	orrs	r0, r6
 8012ec4:	d0f2      	beq.n	8012eac <__ieee754_sqrt+0x30>
 8012ec6:	b155      	cbz	r5, 8012ede <__ieee754_sqrt+0x62>
 8012ec8:	ee10 2a10 	vmov	r2, s0
 8012ecc:	4620      	mov	r0, r4
 8012ece:	4629      	mov	r1, r5
 8012ed0:	f7ed fa02 	bl	80002d8 <__aeabi_dsub>
 8012ed4:	4602      	mov	r2, r0
 8012ed6:	460b      	mov	r3, r1
 8012ed8:	f7ed fce0 	bl	800089c <__aeabi_ddiv>
 8012edc:	e7e4      	b.n	8012ea8 <__ieee754_sqrt+0x2c>
 8012ede:	151b      	asrs	r3, r3, #20
 8012ee0:	d073      	beq.n	8012fca <__ieee754_sqrt+0x14e>
 8012ee2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012ee6:	07dd      	lsls	r5, r3, #31
 8012ee8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8012eec:	bf48      	it	mi
 8012eee:	0fc8      	lsrmi	r0, r1, #31
 8012ef0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8012ef4:	bf44      	itt	mi
 8012ef6:	0049      	lslmi	r1, r1, #1
 8012ef8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8012efc:	2500      	movs	r5, #0
 8012efe:	1058      	asrs	r0, r3, #1
 8012f00:	0fcb      	lsrs	r3, r1, #31
 8012f02:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8012f06:	0049      	lsls	r1, r1, #1
 8012f08:	2316      	movs	r3, #22
 8012f0a:	462c      	mov	r4, r5
 8012f0c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8012f10:	19a7      	adds	r7, r4, r6
 8012f12:	4297      	cmp	r7, r2
 8012f14:	bfde      	ittt	le
 8012f16:	19bc      	addle	r4, r7, r6
 8012f18:	1bd2      	suble	r2, r2, r7
 8012f1a:	19ad      	addle	r5, r5, r6
 8012f1c:	0fcf      	lsrs	r7, r1, #31
 8012f1e:	3b01      	subs	r3, #1
 8012f20:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8012f24:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012f28:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8012f2c:	d1f0      	bne.n	8012f10 <__ieee754_sqrt+0x94>
 8012f2e:	f04f 0c20 	mov.w	ip, #32
 8012f32:	469e      	mov	lr, r3
 8012f34:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8012f38:	42a2      	cmp	r2, r4
 8012f3a:	eb06 070e 	add.w	r7, r6, lr
 8012f3e:	dc02      	bgt.n	8012f46 <__ieee754_sqrt+0xca>
 8012f40:	d112      	bne.n	8012f68 <__ieee754_sqrt+0xec>
 8012f42:	428f      	cmp	r7, r1
 8012f44:	d810      	bhi.n	8012f68 <__ieee754_sqrt+0xec>
 8012f46:	2f00      	cmp	r7, #0
 8012f48:	eb07 0e06 	add.w	lr, r7, r6
 8012f4c:	da42      	bge.n	8012fd4 <__ieee754_sqrt+0x158>
 8012f4e:	f1be 0f00 	cmp.w	lr, #0
 8012f52:	db3f      	blt.n	8012fd4 <__ieee754_sqrt+0x158>
 8012f54:	f104 0801 	add.w	r8, r4, #1
 8012f58:	1b12      	subs	r2, r2, r4
 8012f5a:	428f      	cmp	r7, r1
 8012f5c:	bf88      	it	hi
 8012f5e:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8012f62:	1bc9      	subs	r1, r1, r7
 8012f64:	4433      	add	r3, r6
 8012f66:	4644      	mov	r4, r8
 8012f68:	0052      	lsls	r2, r2, #1
 8012f6a:	f1bc 0c01 	subs.w	ip, ip, #1
 8012f6e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8012f72:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8012f76:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012f7a:	d1dd      	bne.n	8012f38 <__ieee754_sqrt+0xbc>
 8012f7c:	430a      	orrs	r2, r1
 8012f7e:	d006      	beq.n	8012f8e <__ieee754_sqrt+0x112>
 8012f80:	1c5c      	adds	r4, r3, #1
 8012f82:	bf13      	iteet	ne
 8012f84:	3301      	addne	r3, #1
 8012f86:	3501      	addeq	r5, #1
 8012f88:	4663      	moveq	r3, ip
 8012f8a:	f023 0301 	bicne.w	r3, r3, #1
 8012f8e:	106a      	asrs	r2, r5, #1
 8012f90:	085b      	lsrs	r3, r3, #1
 8012f92:	07e9      	lsls	r1, r5, #31
 8012f94:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8012f98:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8012f9c:	bf48      	it	mi
 8012f9e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8012fa2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8012fa6:	461c      	mov	r4, r3
 8012fa8:	e780      	b.n	8012eac <__ieee754_sqrt+0x30>
 8012faa:	0aca      	lsrs	r2, r1, #11
 8012fac:	3815      	subs	r0, #21
 8012fae:	0549      	lsls	r1, r1, #21
 8012fb0:	2a00      	cmp	r2, #0
 8012fb2:	d0fa      	beq.n	8012faa <__ieee754_sqrt+0x12e>
 8012fb4:	02d6      	lsls	r6, r2, #11
 8012fb6:	d50a      	bpl.n	8012fce <__ieee754_sqrt+0x152>
 8012fb8:	f1c3 0420 	rsb	r4, r3, #32
 8012fbc:	fa21 f404 	lsr.w	r4, r1, r4
 8012fc0:	1e5d      	subs	r5, r3, #1
 8012fc2:	4099      	lsls	r1, r3
 8012fc4:	4322      	orrs	r2, r4
 8012fc6:	1b43      	subs	r3, r0, r5
 8012fc8:	e78b      	b.n	8012ee2 <__ieee754_sqrt+0x66>
 8012fca:	4618      	mov	r0, r3
 8012fcc:	e7f0      	b.n	8012fb0 <__ieee754_sqrt+0x134>
 8012fce:	0052      	lsls	r2, r2, #1
 8012fd0:	3301      	adds	r3, #1
 8012fd2:	e7ef      	b.n	8012fb4 <__ieee754_sqrt+0x138>
 8012fd4:	46a0      	mov	r8, r4
 8012fd6:	e7bf      	b.n	8012f58 <__ieee754_sqrt+0xdc>
 8012fd8:	7ff00000 	.word	0x7ff00000

08012fdc <fabs>:
 8012fdc:	ec51 0b10 	vmov	r0, r1, d0
 8012fe0:	ee10 2a10 	vmov	r2, s0
 8012fe4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012fe8:	ec43 2b10 	vmov	d0, r2, r3
 8012fec:	4770      	bx	lr

08012fee <finite>:
 8012fee:	ee10 3a90 	vmov	r3, s1
 8012ff2:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8012ff6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8012ffa:	0fc0      	lsrs	r0, r0, #31
 8012ffc:	4770      	bx	lr

08012ffe <matherr>:
 8012ffe:	2000      	movs	r0, #0
 8013000:	4770      	bx	lr
 8013002:	0000      	movs	r0, r0
 8013004:	0000      	movs	r0, r0
	...

08013008 <nan>:
 8013008:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013010 <nan+0x8>
 801300c:	4770      	bx	lr
 801300e:	bf00      	nop
 8013010:	00000000 	.word	0x00000000
 8013014:	7ff80000 	.word	0x7ff80000

08013018 <rint>:
 8013018:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801301a:	ec51 0b10 	vmov	r0, r1, d0
 801301e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013022:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8013026:	2e13      	cmp	r6, #19
 8013028:	460b      	mov	r3, r1
 801302a:	ee10 4a10 	vmov	r4, s0
 801302e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8013032:	dc56      	bgt.n	80130e2 <rint+0xca>
 8013034:	2e00      	cmp	r6, #0
 8013036:	da2b      	bge.n	8013090 <rint+0x78>
 8013038:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801303c:	4302      	orrs	r2, r0
 801303e:	d023      	beq.n	8013088 <rint+0x70>
 8013040:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8013044:	4302      	orrs	r2, r0
 8013046:	4254      	negs	r4, r2
 8013048:	4314      	orrs	r4, r2
 801304a:	0c4b      	lsrs	r3, r1, #17
 801304c:	0b24      	lsrs	r4, r4, #12
 801304e:	045b      	lsls	r3, r3, #17
 8013050:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8013054:	ea44 0103 	orr.w	r1, r4, r3
 8013058:	460b      	mov	r3, r1
 801305a:	492f      	ldr	r1, [pc, #188]	; (8013118 <rint+0x100>)
 801305c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8013060:	e9d1 6700 	ldrd	r6, r7, [r1]
 8013064:	4602      	mov	r2, r0
 8013066:	4639      	mov	r1, r7
 8013068:	4630      	mov	r0, r6
 801306a:	f7ed f937 	bl	80002dc <__adddf3>
 801306e:	e9cd 0100 	strd	r0, r1, [sp]
 8013072:	463b      	mov	r3, r7
 8013074:	4632      	mov	r2, r6
 8013076:	e9dd 0100 	ldrd	r0, r1, [sp]
 801307a:	f7ed f92d 	bl	80002d8 <__aeabi_dsub>
 801307e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013082:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8013086:	4639      	mov	r1, r7
 8013088:	ec41 0b10 	vmov	d0, r0, r1
 801308c:	b003      	add	sp, #12
 801308e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013090:	4a22      	ldr	r2, [pc, #136]	; (801311c <rint+0x104>)
 8013092:	4132      	asrs	r2, r6
 8013094:	ea01 0702 	and.w	r7, r1, r2
 8013098:	4307      	orrs	r7, r0
 801309a:	d0f5      	beq.n	8013088 <rint+0x70>
 801309c:	0852      	lsrs	r2, r2, #1
 801309e:	4011      	ands	r1, r2
 80130a0:	430c      	orrs	r4, r1
 80130a2:	d00b      	beq.n	80130bc <rint+0xa4>
 80130a4:	ea23 0202 	bic.w	r2, r3, r2
 80130a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80130ac:	2e13      	cmp	r6, #19
 80130ae:	fa43 f306 	asr.w	r3, r3, r6
 80130b2:	bf0c      	ite	eq
 80130b4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80130b8:	2400      	movne	r4, #0
 80130ba:	4313      	orrs	r3, r2
 80130bc:	4916      	ldr	r1, [pc, #88]	; (8013118 <rint+0x100>)
 80130be:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80130c2:	4622      	mov	r2, r4
 80130c4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80130c8:	4620      	mov	r0, r4
 80130ca:	4629      	mov	r1, r5
 80130cc:	f7ed f906 	bl	80002dc <__adddf3>
 80130d0:	e9cd 0100 	strd	r0, r1, [sp]
 80130d4:	4622      	mov	r2, r4
 80130d6:	462b      	mov	r3, r5
 80130d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80130dc:	f7ed f8fc 	bl	80002d8 <__aeabi_dsub>
 80130e0:	e7d2      	b.n	8013088 <rint+0x70>
 80130e2:	2e33      	cmp	r6, #51	; 0x33
 80130e4:	dd07      	ble.n	80130f6 <rint+0xde>
 80130e6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80130ea:	d1cd      	bne.n	8013088 <rint+0x70>
 80130ec:	ee10 2a10 	vmov	r2, s0
 80130f0:	f7ed f8f4 	bl	80002dc <__adddf3>
 80130f4:	e7c8      	b.n	8013088 <rint+0x70>
 80130f6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 80130fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80130fe:	40f2      	lsrs	r2, r6
 8013100:	4210      	tst	r0, r2
 8013102:	d0c1      	beq.n	8013088 <rint+0x70>
 8013104:	0852      	lsrs	r2, r2, #1
 8013106:	4210      	tst	r0, r2
 8013108:	bf1f      	itttt	ne
 801310a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801310e:	ea20 0202 	bicne.w	r2, r0, r2
 8013112:	4134      	asrne	r4, r6
 8013114:	4314      	orrne	r4, r2
 8013116:	e7d1      	b.n	80130bc <rint+0xa4>
 8013118:	08014960 	.word	0x08014960
 801311c:	000fffff 	.word	0x000fffff

08013120 <scalbn>:
 8013120:	b570      	push	{r4, r5, r6, lr}
 8013122:	ec55 4b10 	vmov	r4, r5, d0
 8013126:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801312a:	4606      	mov	r6, r0
 801312c:	462b      	mov	r3, r5
 801312e:	b9aa      	cbnz	r2, 801315c <scalbn+0x3c>
 8013130:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013134:	4323      	orrs	r3, r4
 8013136:	d03b      	beq.n	80131b0 <scalbn+0x90>
 8013138:	4b31      	ldr	r3, [pc, #196]	; (8013200 <scalbn+0xe0>)
 801313a:	4629      	mov	r1, r5
 801313c:	2200      	movs	r2, #0
 801313e:	ee10 0a10 	vmov	r0, s0
 8013142:	f7ed fa81 	bl	8000648 <__aeabi_dmul>
 8013146:	4b2f      	ldr	r3, [pc, #188]	; (8013204 <scalbn+0xe4>)
 8013148:	429e      	cmp	r6, r3
 801314a:	4604      	mov	r4, r0
 801314c:	460d      	mov	r5, r1
 801314e:	da12      	bge.n	8013176 <scalbn+0x56>
 8013150:	a327      	add	r3, pc, #156	; (adr r3, 80131f0 <scalbn+0xd0>)
 8013152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013156:	f7ed fa77 	bl	8000648 <__aeabi_dmul>
 801315a:	e009      	b.n	8013170 <scalbn+0x50>
 801315c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8013160:	428a      	cmp	r2, r1
 8013162:	d10c      	bne.n	801317e <scalbn+0x5e>
 8013164:	ee10 2a10 	vmov	r2, s0
 8013168:	4620      	mov	r0, r4
 801316a:	4629      	mov	r1, r5
 801316c:	f7ed f8b6 	bl	80002dc <__adddf3>
 8013170:	4604      	mov	r4, r0
 8013172:	460d      	mov	r5, r1
 8013174:	e01c      	b.n	80131b0 <scalbn+0x90>
 8013176:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801317a:	460b      	mov	r3, r1
 801317c:	3a36      	subs	r2, #54	; 0x36
 801317e:	4432      	add	r2, r6
 8013180:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013184:	428a      	cmp	r2, r1
 8013186:	dd0b      	ble.n	80131a0 <scalbn+0x80>
 8013188:	ec45 4b11 	vmov	d1, r4, r5
 801318c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80131f8 <scalbn+0xd8>
 8013190:	f000 f9f0 	bl	8013574 <copysign>
 8013194:	a318      	add	r3, pc, #96	; (adr r3, 80131f8 <scalbn+0xd8>)
 8013196:	e9d3 2300 	ldrd	r2, r3, [r3]
 801319a:	ec51 0b10 	vmov	r0, r1, d0
 801319e:	e7da      	b.n	8013156 <scalbn+0x36>
 80131a0:	2a00      	cmp	r2, #0
 80131a2:	dd08      	ble.n	80131b6 <scalbn+0x96>
 80131a4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80131a8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80131ac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80131b0:	ec45 4b10 	vmov	d0, r4, r5
 80131b4:	bd70      	pop	{r4, r5, r6, pc}
 80131b6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80131ba:	da0d      	bge.n	80131d8 <scalbn+0xb8>
 80131bc:	f24c 3350 	movw	r3, #50000	; 0xc350
 80131c0:	429e      	cmp	r6, r3
 80131c2:	ec45 4b11 	vmov	d1, r4, r5
 80131c6:	dce1      	bgt.n	801318c <scalbn+0x6c>
 80131c8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80131f0 <scalbn+0xd0>
 80131cc:	f000 f9d2 	bl	8013574 <copysign>
 80131d0:	a307      	add	r3, pc, #28	; (adr r3, 80131f0 <scalbn+0xd0>)
 80131d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131d6:	e7e0      	b.n	801319a <scalbn+0x7a>
 80131d8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80131dc:	3236      	adds	r2, #54	; 0x36
 80131de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80131e2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80131e6:	4620      	mov	r0, r4
 80131e8:	4629      	mov	r1, r5
 80131ea:	2200      	movs	r2, #0
 80131ec:	4b06      	ldr	r3, [pc, #24]	; (8013208 <scalbn+0xe8>)
 80131ee:	e7b2      	b.n	8013156 <scalbn+0x36>
 80131f0:	c2f8f359 	.word	0xc2f8f359
 80131f4:	01a56e1f 	.word	0x01a56e1f
 80131f8:	8800759c 	.word	0x8800759c
 80131fc:	7e37e43c 	.word	0x7e37e43c
 8013200:	43500000 	.word	0x43500000
 8013204:	ffff3cb0 	.word	0xffff3cb0
 8013208:	3c900000 	.word	0x3c900000
 801320c:	00000000 	.word	0x00000000

08013210 <__ieee754_log>:
 8013210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013214:	ec51 0b10 	vmov	r0, r1, d0
 8013218:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801321c:	b087      	sub	sp, #28
 801321e:	460d      	mov	r5, r1
 8013220:	da27      	bge.n	8013272 <__ieee754_log+0x62>
 8013222:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013226:	4303      	orrs	r3, r0
 8013228:	ee10 2a10 	vmov	r2, s0
 801322c:	d10a      	bne.n	8013244 <__ieee754_log+0x34>
 801322e:	49cc      	ldr	r1, [pc, #816]	; (8013560 <__ieee754_log+0x350>)
 8013230:	2200      	movs	r2, #0
 8013232:	2300      	movs	r3, #0
 8013234:	2000      	movs	r0, #0
 8013236:	f7ed fb31 	bl	800089c <__aeabi_ddiv>
 801323a:	ec41 0b10 	vmov	d0, r0, r1
 801323e:	b007      	add	sp, #28
 8013240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013244:	2900      	cmp	r1, #0
 8013246:	da05      	bge.n	8013254 <__ieee754_log+0x44>
 8013248:	460b      	mov	r3, r1
 801324a:	f7ed f845 	bl	80002d8 <__aeabi_dsub>
 801324e:	2200      	movs	r2, #0
 8013250:	2300      	movs	r3, #0
 8013252:	e7f0      	b.n	8013236 <__ieee754_log+0x26>
 8013254:	4bc3      	ldr	r3, [pc, #780]	; (8013564 <__ieee754_log+0x354>)
 8013256:	2200      	movs	r2, #0
 8013258:	f7ed f9f6 	bl	8000648 <__aeabi_dmul>
 801325c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8013260:	460d      	mov	r5, r1
 8013262:	4ac1      	ldr	r2, [pc, #772]	; (8013568 <__ieee754_log+0x358>)
 8013264:	4295      	cmp	r5, r2
 8013266:	dd06      	ble.n	8013276 <__ieee754_log+0x66>
 8013268:	4602      	mov	r2, r0
 801326a:	460b      	mov	r3, r1
 801326c:	f7ed f836 	bl	80002dc <__adddf3>
 8013270:	e7e3      	b.n	801323a <__ieee754_log+0x2a>
 8013272:	2300      	movs	r3, #0
 8013274:	e7f5      	b.n	8013262 <__ieee754_log+0x52>
 8013276:	152c      	asrs	r4, r5, #20
 8013278:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801327c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8013280:	441c      	add	r4, r3
 8013282:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8013286:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 801328a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801328e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8013292:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8013296:	ea42 0105 	orr.w	r1, r2, r5
 801329a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801329e:	2200      	movs	r2, #0
 80132a0:	4bb2      	ldr	r3, [pc, #712]	; (801356c <__ieee754_log+0x35c>)
 80132a2:	f7ed f819 	bl	80002d8 <__aeabi_dsub>
 80132a6:	1cab      	adds	r3, r5, #2
 80132a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80132ac:	2b02      	cmp	r3, #2
 80132ae:	4682      	mov	sl, r0
 80132b0:	468b      	mov	fp, r1
 80132b2:	f04f 0200 	mov.w	r2, #0
 80132b6:	dc53      	bgt.n	8013360 <__ieee754_log+0x150>
 80132b8:	2300      	movs	r3, #0
 80132ba:	f7ed fc2d 	bl	8000b18 <__aeabi_dcmpeq>
 80132be:	b1d0      	cbz	r0, 80132f6 <__ieee754_log+0xe6>
 80132c0:	2c00      	cmp	r4, #0
 80132c2:	f000 8120 	beq.w	8013506 <__ieee754_log+0x2f6>
 80132c6:	4620      	mov	r0, r4
 80132c8:	f7ed f954 	bl	8000574 <__aeabi_i2d>
 80132cc:	a390      	add	r3, pc, #576	; (adr r3, 8013510 <__ieee754_log+0x300>)
 80132ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132d2:	4606      	mov	r6, r0
 80132d4:	460f      	mov	r7, r1
 80132d6:	f7ed f9b7 	bl	8000648 <__aeabi_dmul>
 80132da:	a38f      	add	r3, pc, #572	; (adr r3, 8013518 <__ieee754_log+0x308>)
 80132dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132e0:	4604      	mov	r4, r0
 80132e2:	460d      	mov	r5, r1
 80132e4:	4630      	mov	r0, r6
 80132e6:	4639      	mov	r1, r7
 80132e8:	f7ed f9ae 	bl	8000648 <__aeabi_dmul>
 80132ec:	4602      	mov	r2, r0
 80132ee:	460b      	mov	r3, r1
 80132f0:	4620      	mov	r0, r4
 80132f2:	4629      	mov	r1, r5
 80132f4:	e7ba      	b.n	801326c <__ieee754_log+0x5c>
 80132f6:	a38a      	add	r3, pc, #552	; (adr r3, 8013520 <__ieee754_log+0x310>)
 80132f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132fc:	4650      	mov	r0, sl
 80132fe:	4659      	mov	r1, fp
 8013300:	f7ed f9a2 	bl	8000648 <__aeabi_dmul>
 8013304:	4602      	mov	r2, r0
 8013306:	460b      	mov	r3, r1
 8013308:	2000      	movs	r0, #0
 801330a:	4999      	ldr	r1, [pc, #612]	; (8013570 <__ieee754_log+0x360>)
 801330c:	f7ec ffe4 	bl	80002d8 <__aeabi_dsub>
 8013310:	4652      	mov	r2, sl
 8013312:	4606      	mov	r6, r0
 8013314:	460f      	mov	r7, r1
 8013316:	465b      	mov	r3, fp
 8013318:	4650      	mov	r0, sl
 801331a:	4659      	mov	r1, fp
 801331c:	f7ed f994 	bl	8000648 <__aeabi_dmul>
 8013320:	4602      	mov	r2, r0
 8013322:	460b      	mov	r3, r1
 8013324:	4630      	mov	r0, r6
 8013326:	4639      	mov	r1, r7
 8013328:	f7ed f98e 	bl	8000648 <__aeabi_dmul>
 801332c:	4606      	mov	r6, r0
 801332e:	460f      	mov	r7, r1
 8013330:	b914      	cbnz	r4, 8013338 <__ieee754_log+0x128>
 8013332:	4632      	mov	r2, r6
 8013334:	463b      	mov	r3, r7
 8013336:	e0a0      	b.n	801347a <__ieee754_log+0x26a>
 8013338:	4620      	mov	r0, r4
 801333a:	f7ed f91b 	bl	8000574 <__aeabi_i2d>
 801333e:	a374      	add	r3, pc, #464	; (adr r3, 8013510 <__ieee754_log+0x300>)
 8013340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013344:	4680      	mov	r8, r0
 8013346:	4689      	mov	r9, r1
 8013348:	f7ed f97e 	bl	8000648 <__aeabi_dmul>
 801334c:	a372      	add	r3, pc, #456	; (adr r3, 8013518 <__ieee754_log+0x308>)
 801334e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013352:	4604      	mov	r4, r0
 8013354:	460d      	mov	r5, r1
 8013356:	4640      	mov	r0, r8
 8013358:	4649      	mov	r1, r9
 801335a:	f7ed f975 	bl	8000648 <__aeabi_dmul>
 801335e:	e0a5      	b.n	80134ac <__ieee754_log+0x29c>
 8013360:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013364:	f7ec ffba 	bl	80002dc <__adddf3>
 8013368:	4602      	mov	r2, r0
 801336a:	460b      	mov	r3, r1
 801336c:	4650      	mov	r0, sl
 801336e:	4659      	mov	r1, fp
 8013370:	f7ed fa94 	bl	800089c <__aeabi_ddiv>
 8013374:	e9cd 0100 	strd	r0, r1, [sp]
 8013378:	4620      	mov	r0, r4
 801337a:	f7ed f8fb 	bl	8000574 <__aeabi_i2d>
 801337e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013382:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013386:	4610      	mov	r0, r2
 8013388:	4619      	mov	r1, r3
 801338a:	f7ed f95d 	bl	8000648 <__aeabi_dmul>
 801338e:	4602      	mov	r2, r0
 8013390:	460b      	mov	r3, r1
 8013392:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013396:	f7ed f957 	bl	8000648 <__aeabi_dmul>
 801339a:	a363      	add	r3, pc, #396	; (adr r3, 8013528 <__ieee754_log+0x318>)
 801339c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133a0:	4680      	mov	r8, r0
 80133a2:	4689      	mov	r9, r1
 80133a4:	f7ed f950 	bl	8000648 <__aeabi_dmul>
 80133a8:	a361      	add	r3, pc, #388	; (adr r3, 8013530 <__ieee754_log+0x320>)
 80133aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133ae:	f7ec ff95 	bl	80002dc <__adddf3>
 80133b2:	4642      	mov	r2, r8
 80133b4:	464b      	mov	r3, r9
 80133b6:	f7ed f947 	bl	8000648 <__aeabi_dmul>
 80133ba:	a35f      	add	r3, pc, #380	; (adr r3, 8013538 <__ieee754_log+0x328>)
 80133bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133c0:	f7ec ff8c 	bl	80002dc <__adddf3>
 80133c4:	4642      	mov	r2, r8
 80133c6:	464b      	mov	r3, r9
 80133c8:	f7ed f93e 	bl	8000648 <__aeabi_dmul>
 80133cc:	a35c      	add	r3, pc, #368	; (adr r3, 8013540 <__ieee754_log+0x330>)
 80133ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133d2:	f7ec ff83 	bl	80002dc <__adddf3>
 80133d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80133da:	f7ed f935 	bl	8000648 <__aeabi_dmul>
 80133de:	a35a      	add	r3, pc, #360	; (adr r3, 8013548 <__ieee754_log+0x338>)
 80133e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80133e8:	4640      	mov	r0, r8
 80133ea:	4649      	mov	r1, r9
 80133ec:	f7ed f92c 	bl	8000648 <__aeabi_dmul>
 80133f0:	a357      	add	r3, pc, #348	; (adr r3, 8013550 <__ieee754_log+0x340>)
 80133f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133f6:	f7ec ff71 	bl	80002dc <__adddf3>
 80133fa:	4642      	mov	r2, r8
 80133fc:	464b      	mov	r3, r9
 80133fe:	f7ed f923 	bl	8000648 <__aeabi_dmul>
 8013402:	a355      	add	r3, pc, #340	; (adr r3, 8013558 <__ieee754_log+0x348>)
 8013404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013408:	f7ec ff68 	bl	80002dc <__adddf3>
 801340c:	4642      	mov	r2, r8
 801340e:	464b      	mov	r3, r9
 8013410:	f7ed f91a 	bl	8000648 <__aeabi_dmul>
 8013414:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8013418:	4602      	mov	r2, r0
 801341a:	460b      	mov	r3, r1
 801341c:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8013420:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013424:	f7ec ff5a 	bl	80002dc <__adddf3>
 8013428:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 801342c:	3551      	adds	r5, #81	; 0x51
 801342e:	4335      	orrs	r5, r6
 8013430:	2d00      	cmp	r5, #0
 8013432:	4680      	mov	r8, r0
 8013434:	4689      	mov	r9, r1
 8013436:	dd48      	ble.n	80134ca <__ieee754_log+0x2ba>
 8013438:	2200      	movs	r2, #0
 801343a:	4b4d      	ldr	r3, [pc, #308]	; (8013570 <__ieee754_log+0x360>)
 801343c:	4650      	mov	r0, sl
 801343e:	4659      	mov	r1, fp
 8013440:	f7ed f902 	bl	8000648 <__aeabi_dmul>
 8013444:	4652      	mov	r2, sl
 8013446:	465b      	mov	r3, fp
 8013448:	f7ed f8fe 	bl	8000648 <__aeabi_dmul>
 801344c:	4602      	mov	r2, r0
 801344e:	460b      	mov	r3, r1
 8013450:	4606      	mov	r6, r0
 8013452:	460f      	mov	r7, r1
 8013454:	4640      	mov	r0, r8
 8013456:	4649      	mov	r1, r9
 8013458:	f7ec ff40 	bl	80002dc <__adddf3>
 801345c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013460:	f7ed f8f2 	bl	8000648 <__aeabi_dmul>
 8013464:	4680      	mov	r8, r0
 8013466:	4689      	mov	r9, r1
 8013468:	b964      	cbnz	r4, 8013484 <__ieee754_log+0x274>
 801346a:	4602      	mov	r2, r0
 801346c:	460b      	mov	r3, r1
 801346e:	4630      	mov	r0, r6
 8013470:	4639      	mov	r1, r7
 8013472:	f7ec ff31 	bl	80002d8 <__aeabi_dsub>
 8013476:	4602      	mov	r2, r0
 8013478:	460b      	mov	r3, r1
 801347a:	4650      	mov	r0, sl
 801347c:	4659      	mov	r1, fp
 801347e:	f7ec ff2b 	bl	80002d8 <__aeabi_dsub>
 8013482:	e6da      	b.n	801323a <__ieee754_log+0x2a>
 8013484:	a322      	add	r3, pc, #136	; (adr r3, 8013510 <__ieee754_log+0x300>)
 8013486:	e9d3 2300 	ldrd	r2, r3, [r3]
 801348a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801348e:	f7ed f8db 	bl	8000648 <__aeabi_dmul>
 8013492:	a321      	add	r3, pc, #132	; (adr r3, 8013518 <__ieee754_log+0x308>)
 8013494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013498:	4604      	mov	r4, r0
 801349a:	460d      	mov	r5, r1
 801349c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80134a0:	f7ed f8d2 	bl	8000648 <__aeabi_dmul>
 80134a4:	4642      	mov	r2, r8
 80134a6:	464b      	mov	r3, r9
 80134a8:	f7ec ff18 	bl	80002dc <__adddf3>
 80134ac:	4602      	mov	r2, r0
 80134ae:	460b      	mov	r3, r1
 80134b0:	4630      	mov	r0, r6
 80134b2:	4639      	mov	r1, r7
 80134b4:	f7ec ff10 	bl	80002d8 <__aeabi_dsub>
 80134b8:	4652      	mov	r2, sl
 80134ba:	465b      	mov	r3, fp
 80134bc:	f7ec ff0c 	bl	80002d8 <__aeabi_dsub>
 80134c0:	4602      	mov	r2, r0
 80134c2:	460b      	mov	r3, r1
 80134c4:	4620      	mov	r0, r4
 80134c6:	4629      	mov	r1, r5
 80134c8:	e7d9      	b.n	801347e <__ieee754_log+0x26e>
 80134ca:	4602      	mov	r2, r0
 80134cc:	460b      	mov	r3, r1
 80134ce:	4650      	mov	r0, sl
 80134d0:	4659      	mov	r1, fp
 80134d2:	f7ec ff01 	bl	80002d8 <__aeabi_dsub>
 80134d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80134da:	f7ed f8b5 	bl	8000648 <__aeabi_dmul>
 80134de:	4606      	mov	r6, r0
 80134e0:	460f      	mov	r7, r1
 80134e2:	2c00      	cmp	r4, #0
 80134e4:	f43f af25 	beq.w	8013332 <__ieee754_log+0x122>
 80134e8:	a309      	add	r3, pc, #36	; (adr r3, 8013510 <__ieee754_log+0x300>)
 80134ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80134f2:	f7ed f8a9 	bl	8000648 <__aeabi_dmul>
 80134f6:	a308      	add	r3, pc, #32	; (adr r3, 8013518 <__ieee754_log+0x308>)
 80134f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134fc:	4604      	mov	r4, r0
 80134fe:	460d      	mov	r5, r1
 8013500:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013504:	e729      	b.n	801335a <__ieee754_log+0x14a>
 8013506:	2000      	movs	r0, #0
 8013508:	2100      	movs	r1, #0
 801350a:	e696      	b.n	801323a <__ieee754_log+0x2a>
 801350c:	f3af 8000 	nop.w
 8013510:	fee00000 	.word	0xfee00000
 8013514:	3fe62e42 	.word	0x3fe62e42
 8013518:	35793c76 	.word	0x35793c76
 801351c:	3dea39ef 	.word	0x3dea39ef
 8013520:	55555555 	.word	0x55555555
 8013524:	3fd55555 	.word	0x3fd55555
 8013528:	df3e5244 	.word	0xdf3e5244
 801352c:	3fc2f112 	.word	0x3fc2f112
 8013530:	96cb03de 	.word	0x96cb03de
 8013534:	3fc74664 	.word	0x3fc74664
 8013538:	94229359 	.word	0x94229359
 801353c:	3fd24924 	.word	0x3fd24924
 8013540:	55555593 	.word	0x55555593
 8013544:	3fe55555 	.word	0x3fe55555
 8013548:	d078c69f 	.word	0xd078c69f
 801354c:	3fc39a09 	.word	0x3fc39a09
 8013550:	1d8e78af 	.word	0x1d8e78af
 8013554:	3fcc71c5 	.word	0x3fcc71c5
 8013558:	9997fa04 	.word	0x9997fa04
 801355c:	3fd99999 	.word	0x3fd99999
 8013560:	c3500000 	.word	0xc3500000
 8013564:	43500000 	.word	0x43500000
 8013568:	7fefffff 	.word	0x7fefffff
 801356c:	3ff00000 	.word	0x3ff00000
 8013570:	3fe00000 	.word	0x3fe00000

08013574 <copysign>:
 8013574:	ec51 0b10 	vmov	r0, r1, d0
 8013578:	ee11 0a90 	vmov	r0, s3
 801357c:	ee10 2a10 	vmov	r2, s0
 8013580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8013584:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8013588:	ea41 0300 	orr.w	r3, r1, r0
 801358c:	ec43 2b10 	vmov	d0, r2, r3
 8013590:	4770      	bx	lr
	...

08013594 <_init>:
 8013594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013596:	bf00      	nop
 8013598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801359a:	bc08      	pop	{r3}
 801359c:	469e      	mov	lr, r3
 801359e:	4770      	bx	lr

080135a0 <_fini>:
 80135a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135a2:	bf00      	nop
 80135a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80135a6:	bc08      	pop	{r3}
 80135a8:	469e      	mov	lr, r3
 80135aa:	4770      	bx	lr
